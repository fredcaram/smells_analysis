Method,ev(G),iv(G),v(G)
"null.add(ByteBuffer)",1,1,1
"null.add(Object)",1,1,1
"null.add(Permission)",1,1,1
"null.addIndexClusteringColumns(Builder,CFMetaData,ColumnDefinition)",1,2,2
"null.allocate(int)",1,1,1
"null.allowClusteringColumnSlices()",1,1,1
"null.allowNonPrimaryKeyInWhereClause()",1,1,1
"null.allowPartitionKeyRanges()",1,1,1
"null.allowUseOfSecondaryIndices()",1,1,1
"null.apply(ColumnDefinition)",1,1,1
"null.apply(IMutation,Iterable<InetAddress>,AbstractWriteResponseHandler<IMutation>,String,ConsistencyLevel)",1,1,1
"null.apply(InetAddress)",1,1,1
"null.apply(Row)",1,1,1
"null.apply(SSTableReader)",1,1,1
"null.apply(String)",1,1,1
"null.apply(Term)",1,1,1
"null.avgSize(List<SSTableReader>)",1,2,2
"null.bind(QueryOptions)",1,1,1
"null.build()",1,1,1
"null.buildBound(boolean,boolean)",1,1,1
"null.buildBoundWith(ByteBuffer,boolean,boolean)",1,1,1
"null.buildBoundWith(List<ByteBuffer>,boolean,boolean)",1,1,1
"null.buildSlice()",1,1,1
"null.buildWith(ByteBuffer)",1,1,1
"null.buildWith(List<ByteBuffer>)",1,1,1
"null.cancel()",1,1,1
"null.commit()",1,1,1
"null.comparator()",1,1,1
"null.compare(ColumnDefinition,ColumnDefinition)",1,2,2
"null.compare(DecoratedKey,DecoratedKey)",1,1,1
"null.compare(InetAddress,InetAddress)",1,1,1
"null.compare(Interval<Comparable, Object>,Interval<Comparable, Object>)",1,1,1
"null.compare(Pair<List<SSTableReader>, Double>,Pair<List<SSTableReader>, Double>)",2,1,2
"null.compare(Partition,Partition)",1,1,1
"null.compare(ReplayPosition,ReplayPosition)",2,2,2
"null.compare(SSTableReader,SSTableReader)",1,1,1
"null.compare(StreamMessage,StreamMessage)",1,1,1
"null.compareAsymmetric(Interval<Comparable, Object>,Comparable)",1,1,1
"null.count()",1,1,1
"null.decode(ByteBuf,int)",1,1,1
"null.deserialize(ReadableByteChannel,int,StreamSession)",1,1,1
"null.elements()",1,1,1
"null.encode(AuthChallenge,ByteBuf,int)",1,1,1
"null.encode(AuthResponse,ByteBuf,int)",1,1,1
"null.encode(AuthSuccess,ByteBuf,int)",1,1,1
"null.encode(AuthenticateMessage,ByteBuf,int)",1,1,1
"null.encode(BatchMessage,ByteBuf,int)",1,4,5
"null.encode(CredentialsMessage,ByteBuf,int)",1,1,1
"null.encode(ErrorMessage,ByteBuf,int)",2,4,11
"null.encode(EventMessage,ByteBuf,int)",1,1,1
"null.encode(ExecuteMessage,ByteBuf,int)",1,2,2
"null.encode(OptionsMessage,ByteBuf,int)",1,1,1
"null.encode(PrepareMessage,ByteBuf,int)",1,1,1
"null.encode(QueryMessage,ByteBuf,int)",1,2,2
"null.encode(ReadyMessage,ByteBuf,int)",1,1,1
"null.encode(RegisterMessage,ByteBuf,int)",1,2,2
"null.encode(ResultMessage,ByteBuf,int)",1,1,1
"null.encode(StartupMessage,ByteBuf,int)",1,1,1
"null.encode(SupportedMessage,ByteBuf,int)",1,1,1
"null.encodedSize(AuthChallenge,int)",1,1,1
"null.encodedSize(AuthResponse,int)",1,1,1
"null.encodedSize(AuthSuccess,int)",1,1,1
"null.encodedSize(AuthenticateMessage,int)",1,1,1
"null.encodedSize(BatchMessage,int)",1,4,4
"null.encodedSize(CredentialsMessage,int)",1,1,1
"null.encodedSize(ErrorMessage,int)",2,4,9
"null.encodedSize(EventMessage,int)",1,1,1
"null.encodedSize(ExecuteMessage,int)",1,2,2
"null.encodedSize(OptionsMessage,int)",1,1,1
"null.encodedSize(PrepareMessage,int)",1,1,1
"null.encodedSize(QueryMessage,int)",1,2,2
"null.encodedSize(ReadyMessage,int)",1,1,1
"null.encodedSize(RegisterMessage,int)",1,2,2
"null.encodedSize(ResultMessage,int)",1,1,1
"null.encodedSize(StartupMessage,int)",1,1,1
"null.encodedSize(SupportedMessage,int)",1,1,1
"null.execute()",1,2,3
"null.execute(ConsistencyLevel,ClientState)",1,1,1
"null.execute(int,List<ByteBuffer>)",1,1,1
"null.executeInternal(ReadOrderGroup)",1,1,1
"null.fetchPage(int,ConsistencyLevel,ClientState)",1,1,1
"null.fetchPageInternal(int,ReadOrderGroup)",1,1,1
"null.filter(UnfilteredPartitionIterator,int)",1,1,1
"null.filter(UnfilteredRowIterator,int)",1,1,1
"null.fromByteArray(ByteBuffer)",1,1,2
"null.fromString(String)",1,1,1
"null.fromType(Type)",5,2,5
"null.get()",1,1,1
"null.getIndexedValueType(ColumnDefinition)",1,1,1
"null.getInputStream(File,File)",1,1,1
"null.getLocalPager()",1,1,1
"null.getOutputStream(File,File)",1,1,1
"null.getPager(PagingState,int)",1,1,1
"null.getPermissions(CodeSource)",3,3,4
"null.getPermissions(ProtectionDomain)",1,1,1
"null.hasEnoughLiveData(CachedPartition,int)",1,1,1
"null.implies(Permission)",1,1,1
"null.implies(ProtectionDomain,Permission)",3,3,4
"null.includes(Clustering)",1,1,1
"null.initialValue()",1,1,1
"null.intersects(ClusteringComparator,List<ByteBuffer>,List<ByteBuffer>)",1,1,1
"null.isDone()",1,1,1
"null.isExhausted()",1,1,1
"null.kind()",1,1,1
"null.limits()",1,1,1
"null.load(InetAddress)",1,1,1
"null.makeCollectionReceiver(ColumnSpecification,boolean)",1,1,1
"null.maxRemaining()",1,1,1
"null.nanoTime()",1,1,1
"null.newAggregate()",2,1,3
"null.newConnection(Channel,int)",1,1,1
"null.newIndexInstance(ColumnFamilyStore,IndexMetadata)",1,1,1
"null.newInstance()",1,1,1
"null.onEviction(Integer,Prepared)",1,1,1
"null.onEviction(MD5Digest,Prepared)",1,1,1
"null.onInserted(Row)",1,1,1
"null.onMeterAdded(String,Meter)",1,1,1
"null.onPartitionDeletion(DeletionTime)",1,1,1
"null.onRangeTombstone(RangeTombstone)",1,1,1
"null.onRowDelete(Row)",1,1,1
"null.onRowMerge(Row,Row...)",1,1,1
"null.onUpdated(Row,Row)",1,1,1
"null.openConnection(URL)",1,1,1
"null.park(long)",1,1,1
"null.reclaim(Row)",1,1,1
"null.reclaimImmediately(DecoratedKey)",1,1,1
"null.reclaimImmediately(Row)",1,1,1
"null.rejectedExecution(Runnable,ThreadPoolExecutor)",3,3,4
"null.remainingCount()",1,1,1
"null.run()",2,2,3
"null.selects(ClusteringComparator,Clustering)",1,1,1
"null.selectsClustering(DecoratedKey,Clustering)",1,1,1
"null.selectsKey(DecoratedKey)",1,1,1
"null.serialize(CompleteMessage,DataOutputStreamPlus,int,StreamSession)",1,1,1
"null.serialize(IncomingFileMessage,DataOutputStreamPlus,int,StreamSession)",1,1,1
"null.serialize(OutgoingFileMessage,DataOutputStreamPlus,int,StreamSession)",1,1,1
"null.serialize(PrepareMessage,DataOutputStreamPlus,int,StreamSession)",1,3,3
"null.serialize(ReceivedMessage,DataOutputStreamPlus,int,StreamSession)",1,1,1
"null.serialize(RetryMessage,DataOutputStreamPlus,int,StreamSession)",1,1,1
"null.serialize(SessionFailedMessage,DataOutputStreamPlus,int,StreamSession)",1,1,1
"null.start()",1,1,1
"null.startOrderGroup()",1,1,1
"null.state()",1,1,1
"null.toByteArray(Token)",1,1,1
"null.toString()",1,1,1
"null.toString(CFMetaData)",1,1,1
"null.toString(ClusteringComparator)",1,1,1
"null.toString(Token)",1,1,1
"null.toType(byte)",4,1,4
"null.update(Checksum,ByteBuffer)",1,1,1
"null.validate(String)",2,1,2
"null.weightOf(Integer,Prepared)",1,1,1
"null.weightOf(MD5Digest,Prepared)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.Negotiator.evaluateResponse(byte[])",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.Negotiator.getAuthenticatedUser()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.Negotiator.isComplete()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.legacyAuthenticate(Map<String, String>)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.newSaslNegotiator(InetAddress)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.protectedResources()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.requireAuthentication()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.setup()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.validateConfiguration()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.authorize(AuthenticatedUser,IResource)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.grant(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.list(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.protectedResources()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.revoke(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.revokeAllFrom(RoleResource)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.revokeAllOn(IResource)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.setup()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.validateConfiguration()",1,1,1
"org.apache.cassandra.auth.AllowAllInternodeAuthenticator.authenticate(InetAddress,int)",1,1,1
"org.apache.cassandra.auth.AllowAllInternodeAuthenticator.validateConfiguration()",1,1,1
"org.apache.cassandra.auth.AuthKeyspace.AuthKeyspace()",1,1,1
"org.apache.cassandra.auth.AuthKeyspace.compile(String,String,String)",1,1,1
"org.apache.cassandra.auth.AuthKeyspace.metadata()",1,1,1
"org.apache.cassandra.auth.AuthMigrationListener.onDropColumnFamily(String,String)",1,1,1
"org.apache.cassandra.auth.AuthMigrationListener.onDropFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.auth.AuthMigrationListener.onDropKeyspace(String)",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.AuthenticatedUser(String)",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.equals(Object)",3,1,3
"org.apache.cassandra.auth.AuthenticatedUser.getName()",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.getPermissions(IResource)",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.getPrimaryRole()",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.getRoles()",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.hashCode()",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.isAnonymous()",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.isSuper()",1,2,2
"org.apache.cassandra.auth.AuthenticatedUser.isSystem()",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.toString()",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.CassandraAuthorizer()",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.addLookupEntry(IResource,RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.addPermissionsForRole(Set<Permission>,IResource,RoleResource)",1,4,5
"org.apache.cassandra.auth.CassandraAuthorizer.authorize(AuthenticatedUser,IResource)",2,4,5
"org.apache.cassandra.auth.CassandraAuthorizer.buildListQuery(IResource,RoleResource,boolean)",1,4,8
"org.apache.cassandra.auth.CassandraAuthorizer.convertLegacyData()",1,4,4
"org.apache.cassandra.auth.CassandraAuthorizer.escape(String)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.executeLoggedBatch(List<CQLStatement>)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.grant(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.list(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",3,6,6
"org.apache.cassandra.auth.CassandraAuthorizer.listPermissionsForRole(Set<Permission>,IResource,RoleResource)",1,5,6
"org.apache.cassandra.auth.CassandraAuthorizer.modifyRolePermissions(Set<Permission>,IResource,RoleResource,String)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.prepare(String,String)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.process(String)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.protectedResources()",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.removeLookupEntry(IResource,RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.revoke(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.revokeAllFrom(RoleResource)",1,3,3
"org.apache.cassandra.auth.CassandraAuthorizer.revokeAllOn(IResource)",1,3,3
"org.apache.cassandra.auth.CassandraAuthorizer.setup()",1,2,2
"org.apache.cassandra.auth.CassandraAuthorizer.validateConfiguration()",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.CassandraRoleManager()",1,3,3
"org.apache.cassandra.auth.CassandraRoleManager.Role.Role(String,boolean,boolean,Set<String>)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.Role.equals(Object)",3,1,3
"org.apache.cassandra.auth.CassandraRoleManager.Role.hashCode()",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.alterRole(AuthenticatedUser,RoleResource,RoleOptions)",1,2,2
"org.apache.cassandra.auth.CassandraRoleManager.alterableOptions()",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.canLogin(RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.collectRoles(Role,Set<RoleResource>,boolean)",3,3,4
"org.apache.cassandra.auth.CassandraRoleManager.consistencyForRole(String)",2,1,2
"org.apache.cassandra.auth.CassandraRoleManager.convertLegacyData()",1,6,6
"org.apache.cassandra.auth.CassandraRoleManager.createRole(AuthenticatedUser,RoleResource,RoleOptions)",1,2,2
"org.apache.cassandra.auth.CassandraRoleManager.dropRole(AuthenticatedUser,RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.escape(String)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.getAllRoles()",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.getCustomOptions(RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.getGensaltLogRounds()",2,2,3
"org.apache.cassandra.auth.CassandraRoleManager.getRole(String)",1,2,3
"org.apache.cassandra.auth.CassandraRoleManager.getRoleFromTable(String,SelectStatement,Function<Row, Role>)",2,1,2
"org.apache.cassandra.auth.CassandraRoleManager.getRoles(RoleResource,boolean)",1,2,2
"org.apache.cassandra.auth.CassandraRoleManager.grantRole(AuthenticatedUser,RoleResource,RoleResource)",3,3,3
"org.apache.cassandra.auth.CassandraRoleManager.hasExistingRoles()",1,3,3
"org.apache.cassandra.auth.CassandraRoleManager.hashpw(String)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.isExistingRole(RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.isSuper(RoleResource)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.modifyRoleMembership(String,String,String)",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.optionsToAssignments(Map<Option, Object>)",5,5,5
"org.apache.cassandra.auth.CassandraRoleManager.prepare(String,String,String)",1,1,2
"org.apache.cassandra.auth.CassandraRoleManager.process(String,ConsistencyLevel)",2,1,2
"org.apache.cassandra.auth.CassandraRoleManager.protectedResources()",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.removeAllMembers(String)",2,2,3
"org.apache.cassandra.auth.CassandraRoleManager.revokeRole(AuthenticatedUser,RoleResource,RoleResource)",2,2,2
"org.apache.cassandra.auth.CassandraRoleManager.scheduleSetupTask(Callable<Void>)",2,3,3
"org.apache.cassandra.auth.CassandraRoleManager.setup()",1,2,2
"org.apache.cassandra.auth.CassandraRoleManager.setupDefaultRole()",1,3,3
"org.apache.cassandra.auth.CassandraRoleManager.supportedOptions()",1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.validateConfiguration()",1,1,1
"org.apache.cassandra.auth.DataResource.DataResource()",1,1,1
"org.apache.cassandra.auth.DataResource.DataResource(String)",1,1,1
"org.apache.cassandra.auth.DataResource.DataResource(String,String)",1,1,1
"org.apache.cassandra.auth.DataResource.applicablePermissions()",3,2,3
"org.apache.cassandra.auth.DataResource.equals(Object)",3,3,5
"org.apache.cassandra.auth.DataResource.exists()",4,3,4
"org.apache.cassandra.auth.DataResource.fromName(String)",4,5,5
"org.apache.cassandra.auth.DataResource.getKeyspace()",2,1,2
"org.apache.cassandra.auth.DataResource.getName()",4,3,4
"org.apache.cassandra.auth.DataResource.getParent()",3,3,3
"org.apache.cassandra.auth.DataResource.getTable()",2,2,2
"org.apache.cassandra.auth.DataResource.hasParent()",1,1,1
"org.apache.cassandra.auth.DataResource.hashCode()",1,1,1
"org.apache.cassandra.auth.DataResource.isKeyspaceLevel()",1,1,1
"org.apache.cassandra.auth.DataResource.isRootLevel()",1,1,1
"org.apache.cassandra.auth.DataResource.isTableLevel()",1,1,1
"org.apache.cassandra.auth.DataResource.keyspace(String)",1,1,1
"org.apache.cassandra.auth.DataResource.root()",1,1,1
"org.apache.cassandra.auth.DataResource.table(String,String)",1,1,1
"org.apache.cassandra.auth.DataResource.toString()",4,3,4
"org.apache.cassandra.auth.FunctionResource.FunctionResource()",1,1,1
"org.apache.cassandra.auth.FunctionResource.FunctionResource(String)",1,1,1
"org.apache.cassandra.auth.FunctionResource.FunctionResource(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.auth.FunctionResource.applicablePermissions()",3,2,4
"org.apache.cassandra.auth.FunctionResource.argListAsString()",1,1,1
"org.apache.cassandra.auth.FunctionResource.argsListFromString(String)",1,2,2
"org.apache.cassandra.auth.FunctionResource.compareTo(FunctionResource)",1,1,1
"org.apache.cassandra.auth.FunctionResource.equals(Object)",3,4,6
"org.apache.cassandra.auth.FunctionResource.exists()",4,3,4
"org.apache.cassandra.auth.FunctionResource.fromName(String)",4,5,5
"org.apache.cassandra.auth.FunctionResource.function(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.auth.FunctionResource.functionFromCql(String,String,List<Raw>)",1,2,2
"org.apache.cassandra.auth.FunctionResource.getFunctionName()",2,2,2
"org.apache.cassandra.auth.FunctionResource.getKeyspace()",1,1,1
"org.apache.cassandra.auth.FunctionResource.getName()",4,3,4
"org.apache.cassandra.auth.FunctionResource.getParent()",3,3,3
"org.apache.cassandra.auth.FunctionResource.hasParent()",1,1,1
"org.apache.cassandra.auth.FunctionResource.hashCode()",1,1,1
"org.apache.cassandra.auth.FunctionResource.keyspace(String)",1,1,1
"org.apache.cassandra.auth.FunctionResource.root()",1,1,1
"org.apache.cassandra.auth.FunctionResource.toString()",4,3,4
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator.decodeCredentials(byte[])",3,5,7
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator.evaluateResponse(byte[])",1,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator.getAuthenticatedUser()",2,1,2
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator.isComplete()",1,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.authenticate(String,String)",1,2,3
"org.apache.cassandra.auth.PasswordAuthenticator.doAuthenticate(String,String,SelectStatement)",2,3,4
"org.apache.cassandra.auth.PasswordAuthenticator.legacyAuthenticate(Map<String, String>)",3,3,3
"org.apache.cassandra.auth.PasswordAuthenticator.newSaslNegotiator(InetAddress)",1,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.prepare(String)",1,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.protectedResources()",1,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.requireAuthentication()",1,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.setup()",1,2,2
"org.apache.cassandra.auth.PasswordAuthenticator.validateConfiguration()",1,1,1
"org.apache.cassandra.auth.PermissionDetails.PermissionDetails(String,IResource,Permission)",1,1,1
"org.apache.cassandra.auth.PermissionDetails.compareTo(PermissionDetails)",1,1,1
"org.apache.cassandra.auth.PermissionDetails.equals(Object)",3,3,5
"org.apache.cassandra.auth.PermissionDetails.hashCode()",1,1,1
"org.apache.cassandra.auth.PermissionDetails.toString()",1,1,1
"org.apache.cassandra.auth.PermissionsCache.PermissionsCache(IAuthorizer)",1,1,2
"org.apache.cassandra.auth.PermissionsCache.getPermissions(AuthenticatedUser,IResource)",2,2,3
"org.apache.cassandra.auth.PermissionsCache.getUpdateInterval()",1,1,1
"org.apache.cassandra.auth.PermissionsCache.getValidity()",1,1,1
"org.apache.cassandra.auth.PermissionsCache.initCache(LoadingCache<Pair<AuthenticatedUser, IResource>, Set<Permission>>)",3,3,5
"org.apache.cassandra.auth.PermissionsCache.invalidate()",1,1,1
"org.apache.cassandra.auth.PermissionsCache.setUpdateInterval(int)",1,1,1
"org.apache.cassandra.auth.PermissionsCache.setValidity(int)",1,1,1
"org.apache.cassandra.auth.Resources.chain(IResource)",3,2,3
"org.apache.cassandra.auth.Resources.fromName(String)",4,4,4
"org.apache.cassandra.auth.Resources.toString(List<Object>)",1,3,3
"org.apache.cassandra.auth.RoleOptions.getCustomOptions()",1,1,1
"org.apache.cassandra.auth.RoleOptions.getLogin()",1,1,1
"org.apache.cassandra.auth.RoleOptions.getOptions()",1,1,1
"org.apache.cassandra.auth.RoleOptions.getPassword()",1,1,1
"org.apache.cassandra.auth.RoleOptions.getSuperuser()",1,1,1
"org.apache.cassandra.auth.RoleOptions.isEmpty()",1,1,1
"org.apache.cassandra.auth.RoleOptions.setOption(Option,Object)",2,2,2
"org.apache.cassandra.auth.RoleOptions.toString()",1,1,1
"org.apache.cassandra.auth.RoleOptions.validate()",7,7,9
"org.apache.cassandra.auth.RoleResource.RoleResource()",1,1,1
"org.apache.cassandra.auth.RoleResource.RoleResource(String)",1,1,1
"org.apache.cassandra.auth.RoleResource.applicablePermissions()",1,1,2
"org.apache.cassandra.auth.RoleResource.compareTo(RoleResource)",1,1,1
"org.apache.cassandra.auth.RoleResource.equals(Object)",3,2,4
"org.apache.cassandra.auth.RoleResource.exists()",1,2,2
"org.apache.cassandra.auth.RoleResource.fromName(String)",3,4,4
"org.apache.cassandra.auth.RoleResource.getName()",1,2,2
"org.apache.cassandra.auth.RoleResource.getParent()",2,2,2
"org.apache.cassandra.auth.RoleResource.getRoleName()",2,2,2
"org.apache.cassandra.auth.RoleResource.hasParent()",1,1,1
"org.apache.cassandra.auth.RoleResource.hashCode()",1,1,1
"org.apache.cassandra.auth.RoleResource.role(String)",1,1,1
"org.apache.cassandra.auth.RoleResource.root()",1,1,1
"org.apache.cassandra.auth.RoleResource.toString()",1,2,2
"org.apache.cassandra.auth.Roles.getRoles(RoleResource)",1,1,1
"org.apache.cassandra.auth.Roles.hasSuperuserStatus(RoleResource)",3,2,3
"org.apache.cassandra.auth.RolesCache.RolesCache(IRoleManager)",1,1,2
"org.apache.cassandra.auth.RolesCache.getRoles(RoleResource)",2,2,3
"org.apache.cassandra.auth.RolesCache.getUpdateInterval()",1,1,1
"org.apache.cassandra.auth.RolesCache.getValidity()",1,1,1
"org.apache.cassandra.auth.RolesCache.initCache(LoadingCache<RoleResource, Set<RoleResource>>)",3,3,5
"org.apache.cassandra.auth.RolesCache.invalidate()",1,1,1
"org.apache.cassandra.auth.RolesCache.setUpdateInterval(int)",1,1,1
"org.apache.cassandra.auth.RolesCache.setValidity(int)",1,1,1
"org.apache.cassandra.batchlog.Batch.Batch(UUID,long,Collection<Mutation>,Collection<ByteBuffer>)",1,1,1
"org.apache.cassandra.batchlog.Batch.Serializer.decodeMutations(DataInputPlus,int)",1,2,2
"org.apache.cassandra.batchlog.Batch.Serializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.batchlog.Batch.Serializer.readEncodedMutations(DataInputPlus)",1,2,2
"org.apache.cassandra.batchlog.Batch.Serializer.serialize(Batch,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.batchlog.Batch.Serializer.serializedSize(Batch,int)",1,2,2
"org.apache.cassandra.batchlog.Batch.createLocal(UUID,long,Collection<Mutation>)",1,1,1
"org.apache.cassandra.batchlog.Batch.createRemote(UUID,long,Collection<ByteBuffer>)",1,1,1
"org.apache.cassandra.batchlog.Batch.size()",1,1,1
"org.apache.cassandra.batchlog.BatchRemoveVerbHandler.doVerb(MessageIn<UUID>,int)",1,1,1
"org.apache.cassandra.batchlog.BatchStoreVerbHandler.doVerb(MessageIn<Batch>,int)",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter.EndpointFilter(String,Multimap<String, InetAddress>)",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter.filter()",4,9,9
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter.getRandomInt(int)",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter.isValid(InetAddress)",1,2,2
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayWriteResponseHandler.ReplayWriteResponseHandler(Collection<InetAddress>)",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayWriteResponseHandler.response(MessageIn<T>)",1,2,2
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayWriteResponseHandler.totalBlockFor()",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayingBatch(UUID,int,List<ByteBuffer>)",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.addMutation(Mutation)",1,4,4
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.addMutations(int,List<ByteBuffer>)",1,2,2
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.finish(Set<InetAddress>)",2,3,3
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.gcgs(Collection<Mutation>)",1,2,2
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.replay(RateLimiter,Set<InetAddress>)",3,1,3
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.sendReplays(List<Mutation>,long,Set<InetAddress>)",1,3,3
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.sendSingleReplayMutation(Mutation,long,Set<InetAddress>)",2,5,6
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.writeHintsForUndeliveredEndpoints(int,Set<InetAddress>)",2,3,4
"org.apache.cassandra.batchlog.BatchlogManager.calculatePageSize(ColumnFamilyStore)",2,1,2
"org.apache.cassandra.batchlog.BatchlogManager.countAllBatches()",2,2,3
"org.apache.cassandra.batchlog.BatchlogManager.finishAndClearBatches(ArrayList<ReplayingBatch>,Set<InetAddress>,Set<UUID>)",1,2,2
"org.apache.cassandra.batchlog.BatchlogManager.forceBatchlogReplay()",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.getBatchlogTimeout()",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.getTotalBatchesReplayed()",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.performInitialReplay()",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.processBatchlogEntries(UntypedResultSet,int,RateLimiter)",1,5,5
"org.apache.cassandra.batchlog.BatchlogManager.remove(UUID)",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.replayFailedBatches()",2,2,3
"org.apache.cassandra.batchlog.BatchlogManager.shutdown()",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.start()",1,1,2
"org.apache.cassandra.batchlog.BatchlogManager.startBatchlogReplay()",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.store(Batch)",1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.store(Batch,boolean)",2,3,4
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.LegacyBatchlogMigrator()",1,1,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.apply(Row,long)",1,6,6
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.asyncRemoveFromBatchlog(Collection<InetAddress>,UUID)",1,2,2
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.getRemoveMutation(UUID)",1,1,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.getSerializedMutations(int,Collection<Mutation>)",1,2,3
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.getStoreMutation(Batch,int)",1,1,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.handleLegacyMutation(Mutation)",1,1,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.isLegacyBatchlogMutation(Mutation)",1,2,2
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.migrate()",2,3,5
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.store(Batch,int)",1,1,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.syncWriteToBatchlog(WriteResponseHandler<?>,Batch,Collection<InetAddress>)",1,2,2
"org.apache.cassandra.cache.AutoSavingCache.AutoSavingCache(ICache<K, V>,CacheType,CacheSerializer<K, V>)",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.Writer.Writer(int)",1,2,6
"org.apache.cassandra.cache.AutoSavingCache.Writer.cacheType()",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.Writer.deleteOldCacheFiles()",4,7,8
"org.apache.cassandra.cache.AutoSavingCache.Writer.getCompactionInfo()",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.Writer.saveCache()",5,6,10
"org.apache.cassandra.cache.AutoSavingCache.Writer.tempCacheFiles()",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.getCacheCrcPath(String)",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.getCacheDataPath(String)",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.getWriter(int)",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.loadSaved()",5,15,18
"org.apache.cassandra.cache.AutoSavingCache.loadSavedAsync()",1,2,2
"org.apache.cassandra.cache.AutoSavingCache.scheduleSaving(int,int)",1,3,3
"org.apache.cassandra.cache.AutoSavingCache.setStreamFactory(IStreamFactory)",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.submitWrite(int)",1,1,1
"org.apache.cassandra.cache.CacheKey.CacheKey(Pair<String, String>)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.ConcurrentLinkedHashCache(ConcurrentLinkedHashMap<K, V>)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.capacity()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.clear()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.containsKey(K)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.create(long)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.create(long,EntryWeigher<K, V>)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.get(K)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.hotKeyIterator(int)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.isEmpty()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.keyIterator()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.put(K,V)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.putIfAbsent(K,V)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.remove(K)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.replace(K,V,V)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.setCapacity(long)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.size()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.weightedSize()",1,1,1
"org.apache.cassandra.cache.CounterCacheKey.CounterCacheKey(Pair<String, String>,ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.cache.CounterCacheKey.create(Pair<String, String>,ByteBuffer,Clustering,ColumnDefinition,CellPath)",1,1,1
"org.apache.cassandra.cache.CounterCacheKey.equals(Object)",3,3,5
"org.apache.cassandra.cache.CounterCacheKey.hashCode()",1,1,1
"org.apache.cassandra.cache.CounterCacheKey.makeCellName(Clustering,ColumnDefinition,CellPath)",1,5,5
"org.apache.cassandra.cache.CounterCacheKey.toString()",1,1,1
"org.apache.cassandra.cache.CounterCacheKey.unsharedHeapSize()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.InstrumentingCache(String,ICache<K, V>)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.clear()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.containsKey(K)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.get(K)",1,2,2
"org.apache.cassandra.cache.InstrumentingCache.getCapacity()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getInternal(K)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getMetrics()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.hotKeyIterator(int)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.keyIterator()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.put(K,V)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.putIfAbsent(K,V)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.remove(K)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.replace(K,V,V)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.setCapacity(long)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.size()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.weightedSize()",1,1,1
"org.apache.cassandra.cache.KeyCacheKey.KeyCacheKey(Pair<String, String>,Descriptor,ByteBuffer)",1,1,1
"org.apache.cassandra.cache.KeyCacheKey.equals(Object)",3,4,6
"org.apache.cassandra.cache.KeyCacheKey.hashCode()",1,1,1
"org.apache.cassandra.cache.KeyCacheKey.toString()",1,1,1
"org.apache.cassandra.cache.KeyCacheKey.unsharedHeapSize()",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.capacity()",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.clear()",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.containsKey(RowCacheKey)",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.get(RowCacheKey)",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.hotKeyIterator(int)",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.keyIterator()",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.put(RowCacheKey,IRowCacheEntry)",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.putIfAbsent(RowCacheKey,IRowCacheEntry)",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.remove(RowCacheKey)",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.replace(RowCacheKey,IRowCacheEntry,IRowCacheEntry)",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.setCapacity(long)",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.size()",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.weightedSize()",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.create()",1,1,1
"org.apache.cassandra.cache.OHCProvider.KeySerializer.deserialize(ByteBuffer)",1,1,2
"org.apache.cassandra.cache.OHCProvider.KeySerializer.serialize(RowCacheKey,ByteBuffer)",1,1,2
"org.apache.cassandra.cache.OHCProvider.KeySerializer.serializedSize(RowCacheKey)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.OHCacheAdapter(OHCache<RowCacheKey, IRowCacheEntry>)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.capacity()",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.clear()",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.containsKey(RowCacheKey)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.get(RowCacheKey)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.hotKeyIterator(int)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.keyIterator()",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.put(RowCacheKey,IRowCacheEntry)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.putIfAbsent(RowCacheKey,IRowCacheEntry)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.remove(RowCacheKey)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.replace(RowCacheKey,IRowCacheEntry,IRowCacheEntry)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.setCapacity(long)",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.size()",1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.weightedSize()",1,1,1
"org.apache.cassandra.cache.OHCProvider.ValueSerializer.deserialize(ByteBuffer)",2,2,3
"org.apache.cassandra.cache.OHCProvider.ValueSerializer.serialize(IRowCacheEntry,ByteBuffer)",1,2,3
"org.apache.cassandra.cache.OHCProvider.ValueSerializer.serializedSize(IRowCacheEntry)",1,2,2
"org.apache.cassandra.cache.OHCProvider.create()",1,1,1
"org.apache.cassandra.cache.RefCountedMemory.RefCountedMemory(long)",1,1,1
"org.apache.cassandra.cache.RefCountedMemory.close()",1,1,1
"org.apache.cassandra.cache.RefCountedMemory.copy(long)",1,1,1
"org.apache.cassandra.cache.RefCountedMemory.free()",1,1,1
"org.apache.cassandra.cache.RefCountedMemory.reference()",4,2,4
"org.apache.cassandra.cache.RefCountedMemory.unreference()",1,2,2
"org.apache.cassandra.cache.RowCacheKey.RowCacheKey(Pair<String, String>,ByteBuffer)",1,1,1
"org.apache.cassandra.cache.RowCacheKey.RowCacheKey(Pair<String, String>,DecoratedKey)",1,1,1
"org.apache.cassandra.cache.RowCacheKey.RowCacheKey(Pair<String, String>,byte[])",1,1,1
"org.apache.cassandra.cache.RowCacheKey.equals(Object)",3,3,5
"org.apache.cassandra.cache.RowCacheKey.hashCode()",1,2,2
"org.apache.cassandra.cache.RowCacheKey.toString()",1,1,1
"org.apache.cassandra.cache.RowCacheKey.unsharedHeapSize()",1,1,1
"org.apache.cassandra.cache.RowCacheSentinel.RowCacheSentinel()",1,1,1
"org.apache.cassandra.cache.RowCacheSentinel.RowCacheSentinel(long)",1,1,1
"org.apache.cassandra.cache.RowCacheSentinel.equals(Object)",2,1,2
"org.apache.cassandra.cache.RowCacheSentinel.hashCode()",1,1,1
"org.apache.cassandra.cache.SerializingCache.SerializingCache(long,Weigher<RefCountedMemory>,ISerializer<V>)",1,1,1
"org.apache.cassandra.cache.SerializingCache.capacity()",1,1,1
"org.apache.cassandra.cache.SerializingCache.clear()",1,1,1
"org.apache.cassandra.cache.SerializingCache.containsKey(K)",1,1,1
"org.apache.cassandra.cache.SerializingCache.create(long,ISerializer<V>)",1,1,1
"org.apache.cassandra.cache.SerializingCache.create(long,Weigher<RefCountedMemory>,ISerializer<V>)",1,1,1
"org.apache.cassandra.cache.SerializingCache.deserialize(RefCountedMemory)",1,2,2
"org.apache.cassandra.cache.SerializingCache.get(K)",3,1,3
"org.apache.cassandra.cache.SerializingCache.hotKeyIterator(int)",1,1,1
"org.apache.cassandra.cache.SerializingCache.isEmpty()",1,1,1
"org.apache.cassandra.cache.SerializingCache.keyIterator()",1,1,1
"org.apache.cassandra.cache.SerializingCache.put(K,V)",2,3,4
"org.apache.cassandra.cache.SerializingCache.putIfAbsent(K,V)",2,3,4
"org.apache.cassandra.cache.SerializingCache.remove(K)",1,2,2
"org.apache.cassandra.cache.SerializingCache.replace(K,V,V)",5,3,7
"org.apache.cassandra.cache.SerializingCache.serialize(V)",2,2,4
"org.apache.cassandra.cache.SerializingCache.setCapacity(long)",1,1,1
"org.apache.cassandra.cache.SerializingCache.size()",1,1,1
"org.apache.cassandra.cache.SerializingCache.weightedSize()",1,1,1
"org.apache.cassandra.cache.SerializingCacheProvider.RowCacheSerializer.deserialize(DataInputPlus)",2,2,2
"org.apache.cassandra.cache.SerializingCacheProvider.RowCacheSerializer.serialize(IRowCacheEntry,DataOutputPlus)",1,2,2
"org.apache.cassandra.cache.SerializingCacheProvider.RowCacheSerializer.serializedSize(IRowCacheEntry)",1,2,2
"org.apache.cassandra.cache.SerializingCacheProvider.create()",1,1,1
"org.apache.cassandra.client.RingCache.RingCache(Configuration)",1,1,1
"org.apache.cassandra.client.RingCache.getEndpoint(ByteBuffer)",1,1,1
"org.apache.cassandra.client.RingCache.getEndpoint(Range<Token>)",1,1,1
"org.apache.cassandra.client.RingCache.getRange(ByteBuffer)",3,2,3
"org.apache.cassandra.client.RingCache.refreshEndpointMap()",3,5,7
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.FutureTask(Callable<T>)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.FutureTask(Runnable,T)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.cancel(boolean)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.get()",2,1,2
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.get(long,TimeUnit)",3,1,3
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.isCancelled()",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.isDone()",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.run()",1,2,2
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.TraceSessionFutureTask.TraceSessionFutureTask(Callable<T>,TraceState)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.TraceSessionFutureTask.TraceSessionFutureTask(Runnable,T,TraceState)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.TraceSessionFutureTask.run()",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.execute(Runnable)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.execute(Runnable,TraceState)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.invokeAll(Collection<? extends Callable<T>>)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.invokeAll(Collection<? extends Callable<T>>,long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.invokeAny(Collection<? extends Callable<T>>)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.invokeAny(Collection<? extends Callable<T>>,long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.newTaskFor(Callable<T>)",4,2,4
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.newTaskFor(Runnable,T)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.newTaskFor(Runnable,T,TraceState)",4,1,4
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.submit(Callable<T>)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.submit(FutureTask<T>)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.submit(Runnable)",1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.submit(Runnable,T)",1,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.DebuggableScheduledThreadPoolExecutor(String)",1,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.DebuggableScheduledThreadPoolExecutor(int,String,int)",1,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.DebuggableScheduledThreadPoolExecutor(int,ThreadFactory)",1,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.UncomplainingRunnable.UncomplainingRunnable(Runnable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.UncomplainingRunnable.run()",1,2,2
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.afterExecute(Runnable,Throwable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.scheduleAtFixedRate(Runnable,long,long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.scheduleWithFixedDelay(Runnable,long,long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(String,int)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper.TraceSessionWrapper(Callable<T>)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper.TraceSessionWrapper(Runnable,TraceState)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper.reset()",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper.setupContext()",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.afterExecute(Runnable,Throwable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.beforeExecute(Thread,Runnable)",1,2,2
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createCachedThreadpoolWithMaxSize(String)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createWithFixedPoolSize(String,int)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createWithMaximumPoolSize(String,int,int,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(Runnable)",1,3,3
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(Runnable,TraceState)",1,1,3
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.extractThrowable(Runnable)",2,5,6
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.handleOrLog(Throwable)",1,2,2
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.logExceptionsAfterExecute(Runnable,Throwable)",1,4,4
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.maybeExecuteImmediately(Runnable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.maybeResetTraceSessionWrapper(Runnable)",1,2,2
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.newTaskFor(Callable<T>)",2,2,3
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.newTaskFor(Runnable,T)",2,3,3
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onFinalAccept(Runnable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onFinalRejection(Runnable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onInitialRejection(Runnable)",1,1,1
"org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutor.JMXConfigurableThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(NamedThreadFactory,String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(Stage)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String,String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String,int)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",1,1,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getCoreThreads()",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getCurrentlyBlockedTasks()",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getMaximumThreads()",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getTotalBlockedTasks()",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onFinalAccept(Runnable)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onFinalRejection(Runnable)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onInitialRejection(Runnable)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.setCoreThreads(int)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.setMaximumThreads(int)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.shutdown()",1,2,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.shutdownNow()",1,2,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.unregisterMBean()",1,1,2
"org.apache.cassandra.concurrent.NamedThreadFactory.NamedThreadFactory(String)",1,1,1
"org.apache.cassandra.concurrent.NamedThreadFactory.NamedThreadFactory(String,int)",1,1,1
"org.apache.cassandra.concurrent.NamedThreadFactory.NamedThreadFactory(String,int,ClassLoader,ThreadGroup)",1,1,1
"org.apache.cassandra.concurrent.NamedThreadFactory.newThread(Runnable)",1,2,2
"org.apache.cassandra.concurrent.SEPExecutor.SEPExecutor(SharedExecutorPool,int,int,String,String)",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.addTask(FutureTask<?>)",3,6,7
"org.apache.cassandra.concurrent.SEPExecutor.awaitTermination(long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.combine(int,int)",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.getActiveCount()",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.getCompletedTasks()",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.getPendingTasks()",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.isShutdown()",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.isTerminated()",1,2,2
"org.apache.cassandra.concurrent.SEPExecutor.maybeExecuteImmediately(Runnable)",1,2,2
"org.apache.cassandra.concurrent.SEPExecutor.maybeSchedule()",2,2,3
"org.apache.cassandra.concurrent.SEPExecutor.onCompletion()",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.returnWorkPermit()",3,2,3
"org.apache.cassandra.concurrent.SEPExecutor.shutdown()",1,2,2
"org.apache.cassandra.concurrent.SEPExecutor.shutdownNow()",1,2,2
"org.apache.cassandra.concurrent.SEPExecutor.takeTaskPermit()",4,5,6
"org.apache.cassandra.concurrent.SEPExecutor.takeWorkPermit(boolean)",4,6,9
"org.apache.cassandra.concurrent.SEPExecutor.taskPermits(long)",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.updateTaskPermits(long,int)",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.updateWorkPermits(long,int)",1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.workPermits(long)",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.SEPWorker(Long,Work,SharedExecutorPool)",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.Work()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.Work(SEPExecutor)",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.canAssign(boolean)",1,3,3
"org.apache.cassandra.concurrent.SEPWorker.Work.isAssigned()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.isSpinning()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.isStop()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.isStopped()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.isWorking()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.assign(Work,boolean)",3,8,8
"org.apache.cassandra.concurrent.SEPWorker.doWaitSpin()",2,1,3
"org.apache.cassandra.concurrent.SEPWorker.isSpinning()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.isStopped()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.maybeStop(long,long)",1,8,8
"org.apache.cassandra.concurrent.SEPWorker.run()",8,16,19
"org.apache.cassandra.concurrent.SEPWorker.selfAssign()",5,3,5
"org.apache.cassandra.concurrent.SEPWorker.startSpinning()",1,1,1
"org.apache.cassandra.concurrent.SEPWorker.stop()",1,2,2
"org.apache.cassandra.concurrent.SEPWorker.stopSpinning()",1,3,3
"org.apache.cassandra.concurrent.SharedExecutorPool.SharedExecutorPool(String)",1,1,1
"org.apache.cassandra.concurrent.SharedExecutorPool.maybeStartSpinningWorker()",1,3,3
"org.apache.cassandra.concurrent.SharedExecutorPool.newExecutor(int,int,String,String)",1,1,1
"org.apache.cassandra.concurrent.SharedExecutorPool.schedule(Work)",3,4,5
"org.apache.cassandra.concurrent.Stage.getJmxName()",1,2,2
"org.apache.cassandra.concurrent.Stage.getJmxType()",4,2,4
"org.apache.cassandra.concurrent.Stage.jmxEnabledStages()",1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.ExecuteOnlyExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory,RejectedExecutionHandler)",1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.execute(Runnable,TraceState)",1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.maybeExecuteImmediately(Runnable)",1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.submit(Callable<T>)",1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.submit(Runnable)",1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.submit(Runnable,T)",1,1,1
"org.apache.cassandra.concurrent.StageManager.getStage(Stage)",1,1,1
"org.apache.cassandra.concurrent.StageManager.multiThreadedLowSignalStage(Stage,int)",1,1,1
"org.apache.cassandra.concurrent.StageManager.multiThreadedStage(Stage,int)",1,1,1
"org.apache.cassandra.concurrent.StageManager.shutdownNow()",1,2,2
"org.apache.cassandra.concurrent.StageManager.tracingExecutor()",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.Builder(String,String,boolean,boolean,boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addClusteringColumn(ColumnIdentifier,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addClusteringColumn(String,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addPartitionKey(ColumnIdentifier,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addPartitionKey(String,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addRegularColumn(ColumnIdentifier,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addRegularColumn(String,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addStaticColumn(ColumnIdentifier,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addStaticColumn(String,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.build()",1,6,7
"org.apache.cassandra.config.CFMetaData.Builder.create(String,String)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.create(String,String,boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.create(String,String,boolean,boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.createDense(String,String,boolean,boolean)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.createSuper(String,String,boolean)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.createView(String,String)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.hasRegulars()",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.usedColumnNames()",1,5,5
"org.apache.cassandra.config.CFMetaData.Builder.withId(UUID)",1,1,1
"org.apache.cassandra.config.CFMetaData.Builder.withPartitioner(IPartitioner)",1,1,1
"org.apache.cassandra.config.CFMetaData.CFMetaData(String,String,UUID,boolean,boolean,boolean,boolean,boolean,List<ColumnDefinition>,List<ColumnDefinition>,PartitionColumns,IPartitioner)",1,6,6
"org.apache.cassandra.config.CFMetaData.DroppedColumn.DroppedColumn(String,AbstractType<?>,long)",1,1,1
"org.apache.cassandra.config.CFMetaData.DroppedColumn.equals(Object)",3,3,5
"org.apache.cassandra.config.CFMetaData.DroppedColumn.hashCode()",1,1,1
"org.apache.cassandra.config.CFMetaData.DroppedColumn.toString()",1,1,1
"org.apache.cassandra.config.CFMetaData.Serializer.deserialize(DataInputPlus,int)",2,2,2
"org.apache.cassandra.config.CFMetaData.Serializer.serialize(CFMetaData,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.config.CFMetaData.Serializer.serializedSize(CFMetaData,int)",1,1,1
"org.apache.cassandra.config.CFMetaData.addColumnDefinition(ColumnDefinition)",2,2,2
"org.apache.cassandra.config.CFMetaData.addOrReplaceColumnDefinition(ColumnDefinition)",2,5,8
"org.apache.cassandra.config.CFMetaData.allColumns()",1,1,1
"org.apache.cassandra.config.CFMetaData.allColumnsInSelectOrder()",3,8,8
"org.apache.cassandra.config.CFMetaData.apply(CFMetaData)",1,1,2
"org.apache.cassandra.config.CFMetaData.bloomFilterFpChance(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.caching(CachingParams)",1,1,1
"org.apache.cassandra.config.CFMetaData.clusteringColumns()",1,1,1
"org.apache.cassandra.config.CFMetaData.comment(String)",1,1,1
"org.apache.cassandra.config.CFMetaData.compactValueColumn()",1,1,1
"org.apache.cassandra.config.CFMetaData.compaction(CompactionParams)",1,1,1
"org.apache.cassandra.config.CFMetaData.compile(String,String)",1,1,1
"org.apache.cassandra.config.CFMetaData.compression(CompressionParams)",1,1,1
"org.apache.cassandra.config.CFMetaData.copy()",1,1,1
"org.apache.cassandra.config.CFMetaData.copy(IPartitioner)",1,1,1
"org.apache.cassandra.config.CFMetaData.copy(List<ColumnDefinition>)",1,2,2
"org.apache.cassandra.config.CFMetaData.copy(PartitionColumns)",1,2,2
"org.apache.cassandra.config.CFMetaData.copy(UUID)",1,1,1
"org.apache.cassandra.config.CFMetaData.copyOpts(CFMetaData,CFMetaData)",1,1,1
"org.apache.cassandra.config.CFMetaData.crcCheckChance(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.create(String,String,UUID,boolean,boolean,boolean,boolean,boolean,List<ColumnDefinition>,IPartitioner)",2,3,5
"org.apache.cassandra.config.CFMetaData.createCompactionStrategy(String)",2,2,3
"org.apache.cassandra.config.CFMetaData.createCompactionStrategyInstance(ColumnFamilyStore,CompactionParams)",1,1,2
"org.apache.cassandra.config.CFMetaData.createFake(String,String)",1,1,1
"org.apache.cassandra.config.CFMetaData.dcLocalReadRepairChance(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.config.CFMetaData.defaultTimeToLive(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.droppedColumns(Map<ByteBuffer, DroppedColumn>)",1,1,1
"org.apache.cassandra.config.CFMetaData.equals(Object)",3,11,13
"org.apache.cassandra.config.CFMetaData.extensions(Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.config.CFMetaData.extractTypes(List<ColumnDefinition>)",1,2,2
"org.apache.cassandra.config.CFMetaData.flags()",1,1,1
"org.apache.cassandra.config.CFMetaData.flagsFromStrings(Set<String>)",1,1,1
"org.apache.cassandra.config.CFMetaData.flagsToStrings(Set<Flag>)",1,1,1
"org.apache.cassandra.config.CFMetaData.gcGraceSeconds(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.generateLegacyCfId(String,String)",1,1,1
"org.apache.cassandra.config.CFMetaData.getColumnDefinition(ByteBuffer)",1,1,1
"org.apache.cassandra.config.CFMetaData.getColumnDefinition(ColumnIdentifier)",1,1,1
"org.apache.cassandra.config.CFMetaData.getColumnDefinitionNameComparator(Kind)",1,5,5
"org.apache.cassandra.config.CFMetaData.getColumnMetadata()",1,1,1
"org.apache.cassandra.config.CFMetaData.getDroppedColumnDefinition(ByteBuffer)",2,1,3
"org.apache.cassandra.config.CFMetaData.getDroppedColumns()",1,1,1
"org.apache.cassandra.config.CFMetaData.getIndexes()",1,1,1
"org.apache.cassandra.config.CFMetaData.getKeyValidator()",1,1,1
"org.apache.cassandra.config.CFMetaData.getKeyValidatorAsClusteringComparator()",1,2,2
"org.apache.cassandra.config.CFMetaData.getParentColumnFamilyName()",1,2,2
"org.apache.cassandra.config.CFMetaData.getTriggers()",1,1,1
"org.apache.cassandra.config.CFMetaData.hasCollectionColumns()",3,3,4
"org.apache.cassandra.config.CFMetaData.hasComplexColumns()",3,2,3
"org.apache.cassandra.config.CFMetaData.hasDroppedCollectionColumns()",3,3,4
"org.apache.cassandra.config.CFMetaData.hasStaticColumns()",1,1,1
"org.apache.cassandra.config.CFMetaData.hashCode()",1,1,1
"org.apache.cassandra.config.CFMetaData.indexColumnFamilyName(IndexMetadata)",1,1,1
"org.apache.cassandra.config.CFMetaData.indexes(Indexes)",1,1,1
"org.apache.cassandra.config.CFMetaData.isCQLTable()",1,3,3
"org.apache.cassandra.config.CFMetaData.isCompactTable()",1,1,1
"org.apache.cassandra.config.CFMetaData.isCompound()",1,1,1
"org.apache.cassandra.config.CFMetaData.isCounter()",1,1,1
"org.apache.cassandra.config.CFMetaData.isDense()",1,1,1
"org.apache.cassandra.config.CFMetaData.isIndex()",1,1,1
"org.apache.cassandra.config.CFMetaData.isNameValid(String)",1,4,4
"org.apache.cassandra.config.CFMetaData.isStaticCompactTable()",1,3,3
"org.apache.cassandra.config.CFMetaData.isSuper()",1,1,1
"org.apache.cassandra.config.CFMetaData.isThriftCompatible()",1,1,1
"org.apache.cassandra.config.CFMetaData.isView()",1,1,1
"org.apache.cassandra.config.CFMetaData.makeLegacyDefaultValidator()",1,3,3
"org.apache.cassandra.config.CFMetaData.maxIndexInterval(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.memtableFlushPeriod(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.minIndexInterval(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.newReadRepairDecision()",3,1,3
"org.apache.cassandra.config.CFMetaData.params(TableParams)",1,1,1
"org.apache.cassandra.config.CFMetaData.partitionColumns()",1,1,1
"org.apache.cassandra.config.CFMetaData.partitionKeyColumns()",1,1,1
"org.apache.cassandra.config.CFMetaData.readRepairChance(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.rebuild()",1,6,6
"org.apache.cassandra.config.CFMetaData.recordColumnDrop(ColumnDefinition)",1,1,1
"org.apache.cassandra.config.CFMetaData.reloadIndexMetadataProperties(CFMetaData)",1,2,2
"org.apache.cassandra.config.CFMetaData.removeColumnDefinition(ColumnDefinition)",1,2,2
"org.apache.cassandra.config.CFMetaData.renameColumn(ColumnIdentifier,ColumnIdentifier)",6,7,7
"org.apache.cassandra.config.CFMetaData.serializePartitionKey(ClusteringPrefix)",2,3,3
"org.apache.cassandra.config.CFMetaData.serializers()",1,1,1
"org.apache.cassandra.config.CFMetaData.speculativeRetry(SpeculativeRetryParam)",1,1,1
"org.apache.cassandra.config.CFMetaData.thriftColumnNameType()",2,2,3
"org.apache.cassandra.config.CFMetaData.toString()",1,1,1
"org.apache.cassandra.config.CFMetaData.triggers(Triggers)",1,1,1
"org.apache.cassandra.config.CFMetaData.validate()",14,10,17
"org.apache.cassandra.config.CFMetaData.validateCompatility(CFMetaData)",6,5,6
"org.apache.cassandra.config.ColumnDefinition.ColumnDefinition(CFMetaData,ByteBuffer,AbstractType<?>,int,Kind)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.ColumnDefinition(String,String,ColumnIdentifier,AbstractType<?>,int,Kind)",1,4,6
"org.apache.cassandra.config.ColumnDefinition.Kind.isPrimaryKeyKind()",1,1,2
"org.apache.cassandra.config.ColumnDefinition.asymmetricCellPathComparator()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.cellComparator()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.cellPathComparator()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.cellPathSerializer()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.cellValueType()",1,2,2
"org.apache.cassandra.config.ColumnDefinition.clusteringDef(CFMetaData,ByteBuffer,AbstractType<?>,int)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.clusteringDef(String,String,String,AbstractType<?>,int)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.clusteringOrder()",2,1,3
"org.apache.cassandra.config.ColumnDefinition.compareTo(ColumnDefinition)",3,2,3
"org.apache.cassandra.config.ColumnDefinition.comparisonOrder(Kind,boolean,long,ColumnIdentifier)",1,1,3
"org.apache.cassandra.config.ColumnDefinition.copy()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.equals(Object)",3,6,8
"org.apache.cassandra.config.ColumnDefinition.hashCode()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.isClusteringColumn()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.isComplex()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.isOnAllComponents()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.isPartOfCellName(boolean,boolean)",3,1,4
"org.apache.cassandra.config.ColumnDefinition.isPartitionKey()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.isPrimaryKeyColumn()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.isRegular()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.isSimple()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.isStatic()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.makeCellPathComparator(Kind,AbstractType<?>)",5,5,12
"org.apache.cassandra.config.ColumnDefinition.partitionKeyDef(CFMetaData,ByteBuffer,AbstractType<?>,int)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.partitionKeyDef(String,String,String,AbstractType<?>,int)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.position()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.regularDef(CFMetaData,ByteBuffer,AbstractType<?>)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.regularDef(String,String,String,AbstractType<?>)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.staticDef(CFMetaData,ByteBuffer,AbstractType<?>)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.toCQLString(Iterable<ColumnDefinition>)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.toCQLString(Iterator<ColumnDefinition>)",2,2,3
"org.apache.cassandra.config.ColumnDefinition.toIdentifiers(Collection<ColumnDefinition>)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.toString()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.validateCellPath(CellPath)",2,1,2
"org.apache.cassandra.config.ColumnDefinition.validateCellValue(ByteBuffer)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.withNewName(ColumnIdentifier)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.withNewType(AbstractType<?>)",1,1,1
"org.apache.cassandra.config.Config.getOutboundBindAny()",1,1,1
"org.apache.cassandra.config.Config.isClientMode()",1,1,1
"org.apache.cassandra.config.Config.setClientMode(boolean)",1,1,1
"org.apache.cassandra.config.Config.setOutboundBindAny(boolean)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.applyAddressConfig(Config)",11,9,19
"org.apache.cassandra.config.DatabaseDescriptor.applyConfig(Config)",58,41,106
"org.apache.cassandra.config.DatabaseDescriptor.createAllDirectories()",5,4,8
"org.apache.cassandra.config.DatabaseDescriptor.createEndpointSnitch(String)",1,1,3
"org.apache.cassandra.config.DatabaseDescriptor.disableHintsForDC(String)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableHintsForDC(String)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableScriptedUserDefinedFunctions()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableScriptedUserDefinedFunctions(boolean)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableUserDefinedFunctions()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableUserDefinedFunctionsThreads()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.forceStaticInitialization()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAllDataFileLocations()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAllocateTokensForKeyspace()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAuthenticator()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAuthorizer()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAutoSnapshot()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeFailThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeFailThresholdInKB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeWarnThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBatchlogReplayThrottleInKB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBroadcastAddress()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBroadcastRpcAddress()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBufferPoolUseHeapIfExhausted()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCasContentionTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getClientEncryptionOptions()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getClusterName()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getColumnIndexSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitFailurePolicy()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogCompression()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogLocation()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogMaxCompressionBuffersInPool()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSegmentSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSync()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSyncBatchWindow()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSyncPeriod()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCompactionLargePartitionWarningThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCompactionThroughputMbPerSec()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentCompactors()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentCounterWriters()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentReaders()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentViewWriters()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentWriters()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheKeysToSave()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheSavePeriod()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheSizeInMB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCounterWriteRpcTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDisableSTCSInL0()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskAccessMode()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskFailurePolicy()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskOptimizationEstimatePercentile()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskOptimizationPageCrossChance()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskOptimizationStrategy()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicBadnessThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicResetInterval()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicUpdateInterval()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getEndpointSnitch()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getFileCacheSizeInMB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getFlushWriters()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getGCWarnThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getHintedHandoffThrottleInKB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getHintsDirectory()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getHintsFlushPeriodInMS()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexAccessMode()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexSummaryCapacityInMB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexSummaryResizeIntervalInMinutes()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInitialTokens()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInterDCStreamThroughputOutboundMegabitsPerSec()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInterDCTcpNoDelay()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInternodeAuthenticator()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInternodeRecvBufferSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInternodeSendBufferSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheKeysToSave()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheSavePeriod()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheSizeInMB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getListenAddress()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getLocalComparator()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getLocalDataCenter()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxHintWindow()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxHintsDeliveryThreads()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxHintsFileSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxMutationSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxStreamingRetries()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMemtableAllocatorPool()",7,2,7
"org.apache.cassandra.config.DatabaseDescriptor.getMinRpcTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxConcurrentConnections()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxFrameSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxThreads()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportPort()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportPortSSL()",1,2,2
"org.apache.cassandra.config.DatabaseDescriptor.getNetworkInterfaceAddress(String,String,boolean)",6,2,10
"org.apache.cassandra.config.DatabaseDescriptor.getNumTokens()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getOtcCoalescingStrategy()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getOtcCoalescingWindow()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPartitioner()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPartitionerName()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPermissionsCacheMaxEntries()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPermissionsUpdateInterval()",1,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getPermissionsValidity()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPhiConvictThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRangeRpcTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getReadRpcTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getReplaceAddress()",3,3,4
"org.apache.cassandra.config.DatabaseDescriptor.getReplaceNode()",1,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getReplaceTokens()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestScheduler()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestSchedulerId()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestSchedulerOptions()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRoleManager()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRolesCacheMaxEntries()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRolesUpdateInterval()",1,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getRolesValidity()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRowCacheClassName()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRowCacheKeysToSave()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRowCacheSavePeriod()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRowCacheSizeInMB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcAddress()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcKeepAlive()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcListenBacklog()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcMaxThreads()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcMinThreads()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcPort()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcRecvBufferSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcSendBufferSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcServerType()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSSLStoragePort()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSSTableFormat()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSSTablePreempiveOpenIntervalInMB()",1,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getSavedCachesLocation()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSeeds()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSerializedCachePath(CacheType,String,String)",1,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getServerEncryptionOptions()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getStoragePort()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getStreamThroughputOutboundMegabitsPerSec()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getStreamingSocketTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getThriftFramedTransportSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTimeout(Verb)",7,7,7
"org.apache.cassandra.config.DatabaseDescriptor.getTombstoneFailureThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTombstoneWarnThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTotalCommitlogSpaceInMB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTracetypeQueryTTL()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTracetypeRepairTTL()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTrickleFsync()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTrickleFsyncIntervalInKb()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTruncateRpcTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getUserDefinedFunctionFailTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getUserDefinedFunctionWarnTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getUserFunctionTimeoutPolicy()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getWindowsTimerInterval()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getWriteRpcTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.guessFileStore(String)",3,4,4
"org.apache.cassandra.config.DatabaseDescriptor.hasCrossNodeTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.hasLargeAddressSpace()",4,3,5
"org.apache.cassandra.config.DatabaseDescriptor.hintedHandoffDisabledDCs()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.hintedHandoffEnabled()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.internodeCompression()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isAutoBootstrap()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isAutoSnapshot()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isIncrementalBackupsEnabled()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isReplacing()",2,3,3
"org.apache.cassandra.config.DatabaseDescriptor.isSnapshotBeforeCompaction()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.loadConfig()",1,2,2
"org.apache.cassandra.config.DatabaseDescriptor.setAutoSnapshot(boolean)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setBatchSizeFailThresholdInKB(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setBatchSizeWarnThresholdInKB(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setBroadcastAddress(InetAddress)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setBroadcastRpcAddress(InetAddress)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCasContentionTimeout(Long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitFailurePolicy(CommitFailurePolicy)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogCompression(ParameterizedClass)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSegmentSize(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSync(CommitLogSync)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSyncBatchWindow(double)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSyncPeriod(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCompactionThroughputMbPerSec(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCounterCacheKeysToSave(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCounterCacheSavePeriod(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCounterWriteRpcTimeout(Long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDiskAccessMode(DiskAccessMode)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDiskFailurePolicy(DiskFailurePolicy)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDiskOptimizationPageCrossChance(double)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDiskOptimizationStrategy(DiskOptimizationStrategy)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicBadnessThreshold(Double)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicResetInterval(Integer)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicUpdateInterval(Integer)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setEndpointSnitch(IEndpointSnitch)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setHintedHandoffEnabled(boolean)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setHintedHandoffThrottleInKB(Integer)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setIncrementalBackupsEnabled(boolean)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setIndexAccessMode(DiskAccessMode)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setKeyCacheKeysToSave(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setKeyCacheSavePeriod(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setMaxHintWindow(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportMaxConcurrentConnections(long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportMaxConcurrentConnectionsPerIp(long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportPort(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportPortSSL(Integer)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setPartitionerUnsafe(IPartitioner)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setPermissionsUpdateInterval(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setPermissionsValidity(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setPhiConvictThreshold(double)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRangeRpcTimeout(Long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setReadRpcTimeout(Long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRolesUpdateInterval(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRolesValidity(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRowCacheKeysToSave(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRowCacheSavePeriod(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRowCacheSizeInMB(long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRpcTimeout(Long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setTombstoneFailureThreshold(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setTombstoneWarnThreshold(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setTruncateRpcTimeout(Long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setUserDefinedFunctionFailTimeout(long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setUserDefinedFunctionWarnTimeout(long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setUserFunctionTimeoutPolicy(UserFunctionTimeoutPolicy)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setWriteRpcTimeout(Long)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.startNativeTransport()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.startRpc()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.tokensFromString(String)",1,3,3
"org.apache.cassandra.config.ParameterizedClass.ParameterizedClass(Map<String, ?>)",1,2,2
"org.apache.cassandra.config.ParameterizedClass.ParameterizedClass(String,Map<String, String>)",1,1,1
"org.apache.cassandra.config.ParameterizedClass.equals(Object)",1,2,2
"org.apache.cassandra.config.ParameterizedClass.equals(ParameterizedClass)",1,2,2
"org.apache.cassandra.config.ParameterizedClass.toString()",1,2,2
"org.apache.cassandra.config.Schema.Schema()",1,2,2
"org.apache.cassandra.config.Schema.addAggregate(UDAggregate)",1,1,1
"org.apache.cassandra.config.Schema.addFunction(UDFunction)",1,1,1
"org.apache.cassandra.config.Schema.addKeyspace(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.config.Schema.addTable(CFMetaData)",1,1,1
"org.apache.cassandra.config.Schema.addType(UserType)",1,1,1
"org.apache.cassandra.config.Schema.addView(ViewDefinition)",1,1,1
"org.apache.cassandra.config.Schema.clear()",1,2,2
"org.apache.cassandra.config.Schema.clearKeyspaceMetadata(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.config.Schema.dropAggregate(UDAggregate)",1,1,1
"org.apache.cassandra.config.Schema.dropFunction(UDFunction)",1,1,1
"org.apache.cassandra.config.Schema.dropKeyspace(String)",1,3,3
"org.apache.cassandra.config.Schema.dropTable(String,String)",1,2,2
"org.apache.cassandra.config.Schema.dropType(UserType)",1,1,1
"org.apache.cassandra.config.Schema.dropView(String,String)",1,2,2
"org.apache.cassandra.config.Schema.findFunction(FunctionName,List<AbstractType<?>>)",2,3,3
"org.apache.cassandra.config.Schema.getCF(UUID)",1,1,1
"org.apache.cassandra.config.Schema.getCFMetaData(Descriptor)",1,1,1
"org.apache.cassandra.config.Schema.getCFMetaData(String,String)",1,2,2
"org.apache.cassandra.config.Schema.getCFMetaData(UUID)",1,2,2
"org.apache.cassandra.config.Schema.getColumnFamilyStoreIncludingIndexes(Pair<String, String>)",6,2,7
"org.apache.cassandra.config.Schema.getColumnFamilyStoreInstance(UUID)",3,1,3
"org.apache.cassandra.config.Schema.getFunctions(FunctionName)",2,3,3
"org.apache.cassandra.config.Schema.getId(String,String)",1,1,1
"org.apache.cassandra.config.Schema.getKSMetaData(String)",1,1,1
"org.apache.cassandra.config.Schema.getKeyspaceInstance(String)",1,1,1
"org.apache.cassandra.config.Schema.getKeyspaces()",1,1,1
"org.apache.cassandra.config.Schema.getKeyspaces(Set<String>)",1,1,1
"org.apache.cassandra.config.Schema.getNonSystemKeyspaces()",1,1,1
"org.apache.cassandra.config.Schema.getTablesAndViews(String)",1,1,1
"org.apache.cassandra.config.Schema.getVersion()",1,1,1
"org.apache.cassandra.config.Schema.getView(String,String)",1,2,2
"org.apache.cassandra.config.Schema.hasCF(Pair<String, String>)",1,1,1
"org.apache.cassandra.config.Schema.isSystemKeyspace(String)",1,1,1
"org.apache.cassandra.config.Schema.load(CFMetaData)",2,2,2
"org.apache.cassandra.config.Schema.load(Iterable<KeyspaceMetadata>)",1,1,1
"org.apache.cassandra.config.Schema.load(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.config.Schema.load(ViewDefinition)",2,2,2
"org.apache.cassandra.config.Schema.loadFromDisk()",1,1,1
"org.apache.cassandra.config.Schema.loadFromDisk(boolean)",1,2,2
"org.apache.cassandra.config.Schema.removeKeyspaceInstance(String)",1,1,1
"org.apache.cassandra.config.Schema.setKeyspaceMetadata(KeyspaceMetadata)",1,2,2
"org.apache.cassandra.config.Schema.storeKeyspaceInstance(Keyspace)",2,2,2
"org.apache.cassandra.config.Schema.unload(CFMetaData)",1,1,1
"org.apache.cassandra.config.Schema.unload(ViewDefinition)",1,1,1
"org.apache.cassandra.config.Schema.update(String,Function<KeyspaceMetadata, KeyspaceMetadata>)",2,2,2
"org.apache.cassandra.config.Schema.updateAggregate(UDAggregate)",1,1,1
"org.apache.cassandra.config.Schema.updateFunction(UDFunction)",1,1,1
"org.apache.cassandra.config.Schema.updateKeyspace(String,KeyspaceParams)",1,1,1
"org.apache.cassandra.config.Schema.updateTable(CFMetaData)",1,1,1
"org.apache.cassandra.config.Schema.updateType(UserType)",1,1,1
"org.apache.cassandra.config.Schema.updateVersion()",1,1,1
"org.apache.cassandra.config.Schema.updateVersionAndAnnounce()",1,1,1
"org.apache.cassandra.config.Schema.updateView(ViewDefinition)",1,1,1
"org.apache.cassandra.config.ViewDefinition.ViewDefinition(String,String,UUID,String,boolean,RawStatement,String,CFMetaData)",1,1,1
"org.apache.cassandra.config.ViewDefinition.ViewDefinition(ViewDefinition)",1,1,1
"org.apache.cassandra.config.ViewDefinition.baseTableMetadata()",1,1,1
"org.apache.cassandra.config.ViewDefinition.copy()",1,1,1
"org.apache.cassandra.config.ViewDefinition.equals(Object)",3,6,8
"org.apache.cassandra.config.ViewDefinition.hashCode()",1,1,1
"org.apache.cassandra.config.ViewDefinition.includes(ColumnIdentifier)",1,1,1
"org.apache.cassandra.config.ViewDefinition.renameColumn(ColumnIdentifier,ColumnIdentifier)",1,1,1
"org.apache.cassandra.config.ViewDefinition.toString()",1,1,1
"org.apache.cassandra.config.ViewDefinition.whereClauseToRelations(String)",1,1,2
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.CustomConstructor(Class<?>)",1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.createDefaultList(int)",1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.createDefaultMap()",1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.createDefaultSet()",1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.createDefaultSet(int)",1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.MissingPropertiesChecker.MissingPropertiesChecker()",1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.MissingPropertiesChecker.check()",2,1,2
"org.apache.cassandra.config.YamlConfigurationLoader.MissingPropertiesChecker.getProperty(Class<? extends Object>,String)",1,2,2
"org.apache.cassandra.config.YamlConfigurationLoader.getStorageConfigURL()",3,4,5
"org.apache.cassandra.config.YamlConfigurationLoader.loadConfig()",1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.loadConfig(URL)",1,1,3
"org.apache.cassandra.config.YamlConfigurationLoader.logConfig(byte[])",1,3,3
"org.apache.cassandra.cql3.AbstractConditions.appliesToRegularColumns()",1,1,1
"org.apache.cassandra.cql3.AbstractConditions.appliesToStaticColumns()",1,1,1
"org.apache.cassandra.cql3.AbstractConditions.getColumns()",1,1,1
"org.apache.cassandra.cql3.AbstractConditions.getFunctions()",1,1,1
"org.apache.cassandra.cql3.AbstractConditions.isEmpty()",1,1,1
"org.apache.cassandra.cql3.AbstractConditions.isIfExists()",1,1,1
"org.apache.cassandra.cql3.AbstractConditions.isIfNotExists()",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.AbstractMarker(int,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.INRaw.INRaw(int)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.INRaw.makeInReceiver(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.INRaw.prepare(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw.MultiColumnRaw(int)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw.getText()",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw.prepare(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw.testAssignment(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.Raw.Raw(int)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.Raw.getText()",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.Raw.prepare(String,ColumnSpecification)",5,2,5
"org.apache.cassandra.cql3.AbstractMarker.Raw.testAssignment(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.collectMarkerSpecification(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.containsBindMarker()",1,1,1
"org.apache.cassandra.cql3.AbstractMarker.getFunctions()",1,1,1
"org.apache.cassandra.cql3.AssignmentTestable.TestResult.isAssignable()",1,1,1
"org.apache.cassandra.cql3.AssignmentTestable.TestResult.isExactMatch()",1,1,1
"org.apache.cassandra.cql3.AssignmentTestable.TestResult.testAll(String,ColumnSpecification,Collection<? extends AssignmentTestable>)",4,2,5
"org.apache.cassandra.cql3.Attributes.Attributes(Term,Term)",1,1,1
"org.apache.cassandra.cql3.Attributes.Raw.prepare(String,String)",1,3,3
"org.apache.cassandra.cql3.Attributes.Raw.timeToLiveReceiver(String,String)",1,1,1
"org.apache.cassandra.cql3.Attributes.Raw.timestampReceiver(String,String)",1,1,1
"org.apache.cassandra.cql3.Attributes.collectMarkerSpecification(VariableSpecifications)",1,3,3
"org.apache.cassandra.cql3.Attributes.getFunctions()",4,4,5
"org.apache.cassandra.cql3.Attributes.getTimeToLive(QueryOptions)",6,2,7
"org.apache.cassandra.cql3.Attributes.getTimestamp(long,QueryOptions)",4,1,5
"org.apache.cassandra.cql3.Attributes.isTimeToLiveSet()",1,1,1
"org.apache.cassandra.cql3.Attributes.isTimestampSet()",1,1,1
"org.apache.cassandra.cql3.Attributes.none()",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.BatchQueryOptions(QueryOptions,List<Object>)",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables.WithPerStatementVariables(QueryOptions,List<List<ByteBuffer>>,List<Object>)",1,2,2
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables.forStatement(int)",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables.isPreparedStatement(int)",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables.prepareStatement(int,List<ColumnSpecification>)",1,2,2
"org.apache.cassandra.cql3.BatchQueryOptions.WithoutPerStatementVariables.WithoutPerStatementVariables(QueryOptions,List<Object>)",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.WithoutPerStatementVariables.forStatement(int)",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.getConsistency()",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.getQueryOrIdList()",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.getSerialConsistency()",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.getTimestamp(QueryState)",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.prepareStatement(int,List<ColumnSpecification>)",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.withPerStatementVariables(QueryOptions,List<List<ByteBuffer>>,List<Object>)",1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.withoutPerStatementVariables(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.CFName.getColumnFamily()",1,1,1
"org.apache.cassandra.cql3.CFName.setColumnFamily(String,boolean)",1,1,1
"org.apache.cassandra.cql3.CFName.toString()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.Collection(CollectionType)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.equals(Object)",2,1,2
"org.apache.cassandra.cql3.CQL3Type.Collection.getType()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.hashCode()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.isCollection()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.toString()",2,3,7
"org.apache.cassandra.cql3.CQL3Type.Custom.Custom(AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.Custom(String)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.equals(Object)",2,1,2
"org.apache.cassandra.cql3.CQL3Type.Custom.getType()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.hashCode()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.isCollection()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.toString()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Native.Native(AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Native.getType()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Native.isCollection()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Native.toString()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.RawCollection(Kind,Raw,Raw)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.freeze()",1,5,5
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.isCollection()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.prepare(String,Types)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.prepare(String,Types,boolean)",8,10,13
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.prepareInternal(String,Types)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.referencesUserType(String)",1,3,3
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.supportsFreezing()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.toString()",4,2,6
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.RawTuple(List<Raw>)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.freeze()",1,3,3
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.isCollection()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.prepare(String,Types)",3,3,4
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.referencesUserType(String)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.supportsFreezing()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.toString()",1,3,3
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.RawType(CQL3Type)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.isCounter()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.prepare(String,Types)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.supportsFreezing()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.toString()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.RawUT(UTName)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.canBeNonFrozen()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.freeze()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.keyspace()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.prepare(String,Types)",5,3,5
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.referencesUserType(String)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.supportsFreezing()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.toString()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.canBeNonFrozen()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.freeze()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.from(CQL3Type)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.frozen(Raw)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.isCollection()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.isCounter()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.isFrozen()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.keyspace()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.list(Raw)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.map(Raw,Raw)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.prepare(String)",2,2,2
"org.apache.cassandra.cql3.CQL3Type.Raw.prepareInternal(String,Types)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.referencesUserType(String)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.set(Raw)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.tuple(List<Raw>)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.userType(UTName)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.Tuple(TupleType)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.create(TupleType)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.equals(Object)",2,1,2
"org.apache.cassandra.cql3.CQL3Type.Tuple.getType()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.hashCode()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.isCollection()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.toString()",1,3,3
"org.apache.cassandra.cql3.CQL3Type.UserDefined.UserDefined(String,UserType)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.create(UserType)",1,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.equals(Object)",2,1,2
"org.apache.cassandra.cql3.CQL3Type.UserDefined.getType()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.hashCode()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.isCollection()",1,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.toString()",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Bound.Bound(ColumnDefinition,Operator)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Bound.compareWithOperator(Operator,AbstractType<?>,ByteBuffer,ByteBuffer)",7,3,7
"org.apache.cassandra.cql3.ColumnCondition.Bound.getCollectionElementValue()",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Bound.isSatisfiedByValue(ByteBuffer,Cell,AbstractType<?>,Operator)",1,2,2
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.CollectionBound(ColumnCondition,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.appliesTo(Row)",8,10,10
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.evaluateComparisonWithOperator(int,Operator)",6,2,6
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.listAppliesTo(ListType,Iterator<Cell>,List<ByteBuffer>,Operator)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.mapAppliesTo(MapType,Iterator<Cell>,Map<ByteBuffer, ByteBuffer>,Operator)",6,4,12
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.setAppliesTo(SetType,Iterator<Cell>,Set<ByteBuffer>,Operator)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.setOrListAppliesTo(AbstractType<?>,Iterator<Cell>,Iterator<ByteBuffer>,Operator,boolean)",5,4,12
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.valueAppliesTo(CollectionType,Iterator<Cell>,Terminal,Operator)",3,3,5
"org.apache.cassandra.cql3.ColumnCondition.CollectionInBound.CollectionInBound(ColumnCondition,QueryOptions)",1,12,13
"org.apache.cassandra.cql3.ColumnCondition.CollectionInBound.appliesTo(Row)",8,5,8
"org.apache.cassandra.cql3.ColumnCondition.ColumnCondition(ColumnDefinition,Term,Term,List<Term>,Operator)",1,1,2
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.ElementAccessBound(ColumnCondition,QueryOptions)",1,1,2
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.appliesTo(Row)",5,4,6
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.getCollectionElementValue()",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.getListIndex(ByteBuffer)",2,2,2
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.getListItem(Iterator<Cell>,int)",2,3,3
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessInBound.ElementAccessInBound(ColumnCondition,QueryOptions)",1,3,4
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessInBound.appliesTo(Row)",17,10,20
"org.apache.cassandra.cql3.ColumnCondition.Raw.Raw(Raw,List<Raw>,INRaw,Raw,Operator)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.collectionCondition(Raw,Raw,Operator)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.collectionInCondition(Raw,INRaw)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.collectionInCondition(Raw,List<Raw>)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.prepare(String,ColumnDefinition)",10,11,14
"org.apache.cassandra.cql3.ColumnCondition.Raw.simpleCondition(Raw,Operator)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.simpleInCondition(INRaw)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.simpleInCondition(List<Raw>)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.SimpleBound.SimpleBound(ColumnCondition,QueryOptions)",1,1,2
"org.apache.cassandra.cql3.ColumnCondition.SimpleBound.appliesTo(Row)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.SimpleInBound.SimpleInBound(ColumnCondition,QueryOptions)",1,3,4
"org.apache.cassandra.cql3.ColumnCondition.SimpleInBound.appliesTo(Row)",3,2,3
"org.apache.cassandra.cql3.ColumnCondition.bind(QueryOptions)",3,1,6
"org.apache.cassandra.cql3.ColumnCondition.collectMarkerSpecification(VariableSpecifications)",1,4,5
"org.apache.cassandra.cql3.ColumnCondition.condition(ColumnDefinition,Term,Operator)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.condition(ColumnDefinition,Term,Term,Operator)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.getCell(Row,ColumnDefinition)",1,2,2
"org.apache.cassandra.cql3.ColumnCondition.getCell(Row,ColumnDefinition,CellPath)",1,2,2
"org.apache.cassandra.cql3.ColumnCondition.getCells(Row,ColumnDefinition)",2,3,3
"org.apache.cassandra.cql3.ColumnCondition.getFunctions()",1,6,6
"org.apache.cassandra.cql3.ColumnCondition.inCondition(ColumnDefinition,List<Term>)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.inCondition(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.inCondition(ColumnDefinition,Term,List<Term>)",1,1,1
"org.apache.cassandra.cql3.ColumnCondition.inCondition(ColumnDefinition,Term,Term)",1,1,1
"org.apache.cassandra.cql3.ColumnConditions.Builder.Builder()",1,1,1
"org.apache.cassandra.cql3.ColumnConditions.Builder.add(ColumnCondition)",1,2,4
"org.apache.cassandra.cql3.ColumnConditions.Builder.build()",1,1,1
"org.apache.cassandra.cql3.ColumnConditions.ColumnConditions(Builder)",1,1,1
"org.apache.cassandra.cql3.ColumnConditions.addConditionsTo(CQL3CasRequest,Clustering,QueryOptions)",1,3,3
"org.apache.cassandra.cql3.ColumnConditions.appliesToRegularColumns()",1,1,1
"org.apache.cassandra.cql3.ColumnConditions.appliesToStaticColumns()",1,1,1
"org.apache.cassandra.cql3.ColumnConditions.getColumns()",1,1,1
"org.apache.cassandra.cql3.ColumnConditions.getFunctions()",1,1,1
"org.apache.cassandra.cql3.ColumnConditions.isEmpty()",1,2,2
"org.apache.cassandra.cql3.ColumnConditions.newBuilder()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifier(ByteBuffer,AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifier(ByteBuffer,String,boolean)",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifier(String,boolean)",1,2,2
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.ColumnIdentifierValue(ColumnIdentifier)",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.equals(Object)",2,1,2
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.hashCode()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.prepare(CFMetaData)",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.processesSelection()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.toCQLString()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.toString()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.Literal(String,boolean)",1,2,2
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.equals(Object)",2,1,2
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.hashCode()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.prepare(CFMetaData)",5,4,5
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.processesSelection()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.toCQLString()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.toString()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.clone(AbstractAllocator)",1,2,2
"org.apache.cassandra.cql3.ColumnIdentifier.compareTo(ColumnIdentifier)",3,1,3
"org.apache.cassandra.cql3.ColumnIdentifier.equals(Object)",3,1,3
"org.apache.cassandra.cql3.ColumnIdentifier.getInterned(ByteBuffer,AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.getInterned(ByteBuffer,String)",2,1,3
"org.apache.cassandra.cql3.ColumnIdentifier.getInterned(String,boolean)",1,2,2
"org.apache.cassandra.cql3.ColumnIdentifier.hashCode()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.isInterned()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.maybeQuote(String)",2,1,2
"org.apache.cassandra.cql3.ColumnIdentifier.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",2,2,2
"org.apache.cassandra.cql3.ColumnIdentifier.prefixComparison(ByteBuffer)",1,3,3
"org.apache.cassandra.cql3.ColumnIdentifier.toCQLString()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.toString()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.unsharedHeapSize()",1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.unsharedHeapSizeExcludingData()",1,1,1
"org.apache.cassandra.cql3.ColumnSpecification.ColumnSpecification(String,String,ColumnIdentifier,AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.ColumnSpecification.allInSameTable(Collection<ColumnSpecification>)",4,4,6
"org.apache.cassandra.cql3.ColumnSpecification.equals(Object)",2,4,5
"org.apache.cassandra.cql3.ColumnSpecification.hashCode()",1,1,1
"org.apache.cassandra.cql3.ColumnSpecification.isReversedType()",1,1,1
"org.apache.cassandra.cql3.ColumnSpecification.toString()",1,1,1
"org.apache.cassandra.cql3.ColumnSpecification.withAlias(ColumnIdentifier)",1,1,1
"org.apache.cassandra.cql3.Constants.Adder.Adder(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Constants.Adder.execute(DecoratedKey,UpdateParameters)",3,1,3
"org.apache.cassandra.cql3.Constants.Deleter.Deleter(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.Constants.Deleter.execute(DecoratedKey,UpdateParameters)",1,2,2
"org.apache.cassandra.cql3.Constants.Literal.Literal(Type,String)",1,1,2
"org.apache.cassandra.cql3.Constants.Literal.bool(String)",1,1,1
"org.apache.cassandra.cql3.Constants.Literal.floatingPoint(String)",1,1,1
"org.apache.cassandra.cql3.Constants.Literal.getRawText()",1,1,1
"org.apache.cassandra.cql3.Constants.Literal.getText()",1,2,2
"org.apache.cassandra.cql3.Constants.Literal.hex(String)",1,1,1
"org.apache.cassandra.cql3.Constants.Literal.integer(String)",1,1,1
"org.apache.cassandra.cql3.Constants.Literal.parsedValue(AbstractType<?>)",3,4,6
"org.apache.cassandra.cql3.Constants.Literal.prepare(String,ColumnSpecification)",2,2,2
"org.apache.cassandra.cql3.Constants.Literal.string(String)",1,1,1
"org.apache.cassandra.cql3.Constants.Literal.testAssignment(String,ColumnSpecification)",10,8,15
"org.apache.cassandra.cql3.Constants.Literal.uuid(String)",1,1,1
"org.apache.cassandra.cql3.Constants.Marker.Marker(int,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Constants.Marker.bind(QueryOptions)",3,1,3
"org.apache.cassandra.cql3.Constants.Marker.bindAndGet(QueryOptions)",1,3,4
"org.apache.cassandra.cql3.Constants.NullLiteral.getText()",1,1,1
"org.apache.cassandra.cql3.Constants.NullLiteral.prepare(String,ColumnSpecification)",2,1,2
"org.apache.cassandra.cql3.Constants.NullLiteral.testAssignment(String,ColumnSpecification)",1,1,2
"org.apache.cassandra.cql3.Constants.Setter.Setter(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Constants.Setter.execute(DecoratedKey,UpdateParameters)",1,3,3
"org.apache.cassandra.cql3.Constants.Substracter.Substracter(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Constants.Substracter.execute(DecoratedKey,UpdateParameters)",4,1,4
"org.apache.cassandra.cql3.Constants.Value.Value(ByteBuffer)",1,1,1
"org.apache.cassandra.cql3.Constants.Value.bindAndGet(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.Constants.Value.get(int)",1,1,1
"org.apache.cassandra.cql3.Constants.Value.toString()",1,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.getPrepared(MD5Digest)",1,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.getPreparedForThrift(Integer)",1,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.prepare(String,QueryState,Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.process(String,QueryState,QueryOptions,Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.processBatch(BatchStatement,QueryState,BatchQueryOptions,Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.processPrepared(CQLStatement,QueryState,QueryOptions,Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.ErrorCollector(String)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.appendQuerySnippet(Parser,StringBuilder)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.appendSnippet(StringBuilder,Token,Token,Token)",2,7,8
"org.apache.cassandra.cql3.ErrorCollector.areTokensValid(Token...)",3,2,3
"org.apache.cassandra.cql3.ErrorCollector.getLastCharPositionInLine(Token)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.getLength(Token)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.getOffendingTokenIndex(int,int)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.getSnippetFirstTokenIndex(int)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.getSnippetLastTokenIndex(int,int)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.highlightToken(String,Token)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.insertChar(String,int,char)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.isTokenValid(Token)",1,2,2
"org.apache.cassandra.cql3.ErrorCollector.lineIndex(Token)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.syntaxError(BaseRecognizer,String)",1,1,1
"org.apache.cassandra.cql3.ErrorCollector.syntaxError(BaseRecognizer,String[],RecognitionException)",1,2,2
"org.apache.cassandra.cql3.ErrorCollector.throwFirstSyntaxError()",2,2,2
"org.apache.cassandra.cql3.IfExistsCondition.addConditionsTo(CQL3CasRequest,Clustering,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.IfExistsCondition.isIfExists()",1,1,1
"org.apache.cassandra.cql3.IfNotExistsCondition.addConditionsTo(CQL3CasRequest,Clustering,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.IfNotExistsCondition.isIfNotExists()",1,1,1
"org.apache.cassandra.cql3.IndexName.getCfName()",1,2,2
"org.apache.cassandra.cql3.IndexName.getIdx()",1,1,1
"org.apache.cassandra.cql3.IndexName.setIndex(String,boolean)",1,1,1
"org.apache.cassandra.cql3.IndexName.toString()",1,1,1
"org.apache.cassandra.cql3.Json.ColumnValue.ColumnValue(Term)",1,1,1
"org.apache.cassandra.cql3.Json.ColumnValue.getText()",1,1,1
"org.apache.cassandra.cql3.Json.ColumnValue.prepare(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Json.ColumnValue.testAssignment(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Json.DelayedColumnValue.DelayedColumnValue(PreparedMarker,ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.Json.DelayedColumnValue.bind(QueryOptions)",1,2,2
"org.apache.cassandra.cql3.Json.DelayedColumnValue.collectMarkerSpecification(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Json.DelayedColumnValue.containsBindMarker()",1,1,1
"org.apache.cassandra.cql3.Json.DelayedColumnValue.getFunctions()",1,1,1
"org.apache.cassandra.cql3.Json.Literal.Literal(String)",1,1,1
"org.apache.cassandra.cql3.Json.Literal.prepareAndCollectMarkers(CFMetaData,Collection<ColumnDefinition>,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Json.Marker.Marker(int)",1,1,1
"org.apache.cassandra.cql3.Json.Marker.makeReceiver(CFMetaData)",1,1,1
"org.apache.cassandra.cql3.Json.Marker.prepareAndCollectMarkers(CFMetaData,Collection<ColumnDefinition>,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Json.PreparedLiteral.PreparedLiteral(Map<ColumnIdentifier, Term>)",1,1,1
"org.apache.cassandra.cql3.Json.PreparedLiteral.getRawTermForColumn(ColumnDefinition)",1,1,2
"org.apache.cassandra.cql3.Json.PreparedMarker.PreparedMarker(int,Collection<ColumnDefinition>)",1,1,1
"org.apache.cassandra.cql3.Json.PreparedMarker.bind(QueryOptions)",3,1,3
"org.apache.cassandra.cql3.Json.PreparedMarker.getRawTermForColumn(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.Json.PreparedMarker.getValue(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue.RawDelayedColumnValue(PreparedMarker,ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue.getText()",1,1,1
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue.prepare(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue.testAssignment(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Json.decodeJson(String)",1,2,2
"org.apache.cassandra.cql3.Json.handleCaseSensitivity(Map<String, Object>)",3,5,5
"org.apache.cassandra.cql3.Json.parseJson(String,Collection<ColumnDefinition>)",5,7,8
"org.apache.cassandra.cql3.KeyspaceElementName.getKeyspace()",1,1,1
"org.apache.cassandra.cql3.KeyspaceElementName.hasKeyspace()",1,1,1
"org.apache.cassandra.cql3.KeyspaceElementName.setKeyspace(String,boolean)",1,1,1
"org.apache.cassandra.cql3.KeyspaceElementName.toInternalName(String,boolean)",1,2,2
"org.apache.cassandra.cql3.KeyspaceElementName.toString()",1,2,2
"org.apache.cassandra.cql3.Lists.Appender.Appender(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Lists.Appender.doAppend(Terminal,ColumnDefinition,UpdateParameters)",3,4,5
"org.apache.cassandra.cql3.Lists.Appender.execute(DecoratedKey,UpdateParameters)",1,1,1
"org.apache.cassandra.cql3.Lists.DelayedValue.DelayedValue(List<Term>)",1,1,1
"org.apache.cassandra.cql3.Lists.DelayedValue.bind(QueryOptions)",5,3,5
"org.apache.cassandra.cql3.Lists.DelayedValue.collectMarkerSpecification(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Lists.DelayedValue.containsBindMarker()",1,1,1
"org.apache.cassandra.cql3.Lists.DelayedValue.getFunctions()",1,1,1
"org.apache.cassandra.cql3.Lists.Discarder.Discarder(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Lists.Discarder.execute(DecoratedKey,UpdateParameters)",2,4,7
"org.apache.cassandra.cql3.Lists.Discarder.requiresRead()",1,1,1
"org.apache.cassandra.cql3.Lists.DiscarderByIndex.DiscarderByIndex(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Lists.DiscarderByIndex.execute(DecoratedKey,UpdateParameters)",5,2,6
"org.apache.cassandra.cql3.Lists.DiscarderByIndex.requiresRead()",1,1,1
"org.apache.cassandra.cql3.Lists.Lists()",1,1,1
"org.apache.cassandra.cql3.Lists.Literal.Literal(List<Raw>)",1,1,1
"org.apache.cassandra.cql3.Lists.Literal.getText()",1,1,1
"org.apache.cassandra.cql3.Lists.Literal.prepare(String,ColumnSpecification)",3,4,5
"org.apache.cassandra.cql3.Lists.Literal.testAssignment(String,ColumnSpecification)",3,1,3
"org.apache.cassandra.cql3.Lists.Literal.validateAssignableTo(String,ColumnSpecification)",4,4,4
"org.apache.cassandra.cql3.Lists.Marker.Marker(int,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Lists.Marker.bind(QueryOptions)",3,1,3
"org.apache.cassandra.cql3.Lists.PrecisionTime.PrecisionTime(long,int)",1,1,1
"org.apache.cassandra.cql3.Lists.PrecisionTime.getNext(long)",3,3,4
"org.apache.cassandra.cql3.Lists.Prepender.Prepender(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Lists.Prepender.execute(DecoratedKey,UpdateParameters)",2,2,4
"org.apache.cassandra.cql3.Lists.Setter.Setter(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Lists.Setter.execute(DecoratedKey,UpdateParameters)",2,2,3
"org.apache.cassandra.cql3.Lists.SetterByIndex.SetterByIndex(ColumnDefinition,Term,Term)",1,1,1
"org.apache.cassandra.cql3.Lists.SetterByIndex.collectMarkerSpecification(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Lists.SetterByIndex.execute(DecoratedKey,UpdateParameters)",8,5,9
"org.apache.cassandra.cql3.Lists.SetterByIndex.requiresRead()",1,1,1
"org.apache.cassandra.cql3.Lists.Value.Value(List<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.Lists.Value.equals(ListType,Value)",4,2,4
"org.apache.cassandra.cql3.Lists.Value.fromSerialized(ByteBuffer,ListType,int)",1,4,4
"org.apache.cassandra.cql3.Lists.Value.get(int)",1,1,1
"org.apache.cassandra.cql3.Lists.Value.getElements()",1,1,1
"org.apache.cassandra.cql3.Lists.existingSize(Row,ColumnDefinition)",2,2,3
"org.apache.cassandra.cql3.Lists.indexSpecOf(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Lists.valueSpecOf(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Maps.DelayedValue.DelayedValue(Comparator<ByteBuffer>,Map<Term, Term>)",1,1,1
"org.apache.cassandra.cql3.Maps.DelayedValue.bind(QueryOptions)",8,4,8
"org.apache.cassandra.cql3.Maps.DelayedValue.collectMarkerSpecification(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Maps.DelayedValue.containsBindMarker()",1,1,1
"org.apache.cassandra.cql3.Maps.DelayedValue.getFunctions()",1,1,1
"org.apache.cassandra.cql3.Maps.DiscarderByKey.DiscarderByKey(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Maps.DiscarderByKey.execute(DecoratedKey,UpdateParameters)",3,1,3
"org.apache.cassandra.cql3.Maps.Literal.Literal(List<Pair<Raw, Raw>>)",1,1,1
"org.apache.cassandra.cql3.Maps.Literal.getText()",1,1,1
"org.apache.cassandra.cql3.Maps.Literal.prepare(String,ColumnSpecification)",3,5,7
"org.apache.cassandra.cql3.Maps.Literal.testAssignment(String,ColumnSpecification)",5,2,8
"org.apache.cassandra.cql3.Maps.Literal.validateAssignableTo(String,ColumnSpecification)",5,5,5
"org.apache.cassandra.cql3.Maps.Maps()",1,1,1
"org.apache.cassandra.cql3.Maps.Marker.Marker(int,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Maps.Marker.bind(QueryOptions)",3,1,3
"org.apache.cassandra.cql3.Maps.Putter.Putter(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Maps.Putter.doPut(Terminal,ColumnDefinition,UpdateParameters)",3,4,5
"org.apache.cassandra.cql3.Maps.Putter.execute(DecoratedKey,UpdateParameters)",1,2,2
"org.apache.cassandra.cql3.Maps.Setter.Setter(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Maps.Setter.execute(DecoratedKey,UpdateParameters)",2,2,3
"org.apache.cassandra.cql3.Maps.SetterByKey.SetterByKey(ColumnDefinition,Term,Term)",1,1,1
"org.apache.cassandra.cql3.Maps.SetterByKey.collectMarkerSpecification(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Maps.SetterByKey.execute(DecoratedKey,UpdateParameters)",6,4,6
"org.apache.cassandra.cql3.Maps.Value.Value(Map<ByteBuffer, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.Maps.Value.equals(MapType,Value)",4,3,5
"org.apache.cassandra.cql3.Maps.Value.fromSerialized(ByteBuffer,MapType,int)",1,3,3
"org.apache.cassandra.cql3.Maps.Value.get(int)",1,2,2
"org.apache.cassandra.cql3.Maps.keySpecOf(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Maps.valueSpecOf(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.MultiColumnRelation(List<Raw>,Operator,MultiColumnRaw,List<? extends MultiColumnRaw>,INRaw)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.createInRelation(List<Raw>,List<? extends MultiColumnRaw>)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.createNonInRelation(List<Raw>,Operator,MultiColumnRaw)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.createSingleMarkerInRelation(List<Raw>,INRaw)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.getEntities()",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.getInValues()",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.getValue()",1,1,2
"org.apache.cassandra.cql3.MultiColumnRelation.isMultiColumn()",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.newContainsRestriction(CFMetaData,VariableSpecifications,boolean)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.newEQRestriction(CFMetaData,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.newINRestriction(CFMetaData,VariableSpecifications)",2,2,2
"org.apache.cassandra.cql3.MultiColumnRelation.newIsNotRestriction(CFMetaData,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.newSliceRestriction(CFMetaData,VariableSpecifications,Bound,boolean)",1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.receivers(CFMetaData)",1,3,3
"org.apache.cassandra.cql3.MultiColumnRelation.renameIdentifier(Raw,Raw)",2,1,3
"org.apache.cassandra.cql3.MultiColumnRelation.toString()",2,3,3
"org.apache.cassandra.cql3.MultiColumnRelation.toTerm(List<? extends ColumnSpecification>,Raw,String,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Operation.Addition.Addition(Raw)",1,1,1
"org.apache.cassandra.cql3.Operation.Addition.isCompatibleWith(RawUpdate)",1,1,1
"org.apache.cassandra.cql3.Operation.Addition.prepare(String,ColumnDefinition)",7,5,7
"org.apache.cassandra.cql3.Operation.Addition.toString(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Operation.ColumnDeletion.ColumnDeletion(Raw)",1,1,1
"org.apache.cassandra.cql3.Operation.ColumnDeletion.affectedColumn()",1,1,1
"org.apache.cassandra.cql3.Operation.ColumnDeletion.prepare(String,ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.Operation.ElementDeletion.ElementDeletion(Raw,Raw)",1,1,1
"org.apache.cassandra.cql3.Operation.ElementDeletion.affectedColumn()",1,1,1
"org.apache.cassandra.cql3.Operation.ElementDeletion.prepare(String,ColumnDefinition)",4,4,6
"org.apache.cassandra.cql3.Operation.Operation(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Operation.Prepend.Prepend(Raw)",1,1,1
"org.apache.cassandra.cql3.Operation.Prepend.isCompatibleWith(RawUpdate)",1,1,1
"org.apache.cassandra.cql3.Operation.Prepend.prepare(String,ColumnDefinition)",3,3,3
"org.apache.cassandra.cql3.Operation.Prepend.toString(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Operation.SetElement.SetElement(Raw,Raw)",1,1,1
"org.apache.cassandra.cql3.Operation.SetElement.isCompatibleWith(RawUpdate)",1,1,1
"org.apache.cassandra.cql3.Operation.SetElement.prepare(String,ColumnDefinition)",5,5,6
"org.apache.cassandra.cql3.Operation.SetElement.toString(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Operation.SetValue.SetValue(Raw)",1,1,1
"org.apache.cassandra.cql3.Operation.SetValue.isCompatibleWith(RawUpdate)",1,1,1
"org.apache.cassandra.cql3.Operation.SetValue.prepare(String,ColumnDefinition)",6,3,6
"org.apache.cassandra.cql3.Operation.SetValue.toString(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Operation.Substraction.Substraction(Raw)",1,1,1
"org.apache.cassandra.cql3.Operation.Substraction.isCompatibleWith(RawUpdate)",1,1,1
"org.apache.cassandra.cql3.Operation.Substraction.prepare(String,ColumnDefinition)",7,7,7
"org.apache.cassandra.cql3.Operation.Substraction.toString(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Operation.collectMarkerSpecification(VariableSpecifications)",1,2,2
"org.apache.cassandra.cql3.Operation.getFunctions()",1,2,2
"org.apache.cassandra.cql3.Operation.requiresRead()",1,1,1
"org.apache.cassandra.cql3.Operations.Operations(StatementType)",1,1,1
"org.apache.cassandra.cql3.Operations.add(Operation)",1,2,2
"org.apache.cassandra.cql3.Operations.appliesToRegularColumns()",1,3,3
"org.apache.cassandra.cql3.Operations.appliesToStaticColumns()",1,1,1
"org.apache.cassandra.cql3.Operations.getFunctions()",1,2,2
"org.apache.cassandra.cql3.Operations.isEmpty()",1,2,2
"org.apache.cassandra.cql3.Operations.iterator()",1,1,1
"org.apache.cassandra.cql3.Operations.regularOperations()",1,1,1
"org.apache.cassandra.cql3.Operations.requiresRead()",3,2,3
"org.apache.cassandra.cql3.Operations.staticOperations()",1,1,1
"org.apache.cassandra.cql3.Operator.Operator(int)",1,1,1
"org.apache.cassandra.cql3.Operator.getValue()",1,1,1
"org.apache.cassandra.cql3.Operator.isSatisfiedBy(AbstractType<?>,ByteBuffer,ByteBuffer)",11,13,13
"org.apache.cassandra.cql3.Operator.readFrom(DataInput)",3,1,3
"org.apache.cassandra.cql3.Operator.serializedSize()",1,1,1
"org.apache.cassandra.cql3.Operator.toString()",1,1,1
"org.apache.cassandra.cql3.Operator.writeTo(DataOutput)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.Codec.Flag.deserialize(int)",1,3,3
"org.apache.cassandra.cql3.QueryOptions.Codec.Flag.serialize(EnumSet<Flag>)",1,2,2
"org.apache.cassandra.cql3.QueryOptions.Codec.decode(ByteBuf,int)",4,9,10
"org.apache.cassandra.cql3.QueryOptions.Codec.encode(QueryOptions,ByteBuf,int)",1,6,6
"org.apache.cassandra.cql3.QueryOptions.Codec.encodedSize(QueryOptions,int)",1,4,6
"org.apache.cassandra.cql3.QueryOptions.Codec.gatherFlags(QueryOptions)",1,7,7
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.DefaultQueryOptions(ConsistencyLevel,List<ByteBuffer>,boolean,SpecificOptions,int)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.getConsistency()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.getProtocolVersion()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.getSpecificOptions()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.getValues()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.skipMetadata()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithColumnSpecifications.OptionsWithColumnSpecifications(QueryOptions,List<ColumnSpecification>)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithColumnSpecifications.getColumnSpecifications()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithColumnSpecifications.hasColumnSpecifications()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithNames.OptionsWithNames(DefaultQueryOptions,List<String>)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithNames.getValues()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithNames.prepare(List<ColumnSpecification>)",4,4,4
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.QueryOptionsWrapper(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.getConsistency()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.getProtocolVersion()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.getSpecificOptions()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.getValues()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.prepare(List<ColumnSpecification>)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.skipMetadata()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.SpecificOptions.SpecificOptions(int,PagingState,ConsistencyLevel,long)",1,1,2
"org.apache.cassandra.cql3.QueryOptions.addColumnSpecifications(QueryOptions,List<ColumnSpecification>)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.create(ConsistencyLevel,List<ByteBuffer>,boolean,int,PagingState,ConsistencyLevel)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.forInternalCalls(ConsistencyLevel,List<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.forInternalCalls(List<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.forProtocolVersion(int)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.fromThrift(ConsistencyLevel,List<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.QueryOptions.getColumnSpecifications()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.getPageSize()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.getPagingState()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.getSerialConsistency()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.getTimestamp(QueryState)",1,2,2
"org.apache.cassandra.cql3.QueryOptions.hasColumnSpecifications()",1,1,1
"org.apache.cassandra.cql3.QueryOptions.prepare(List<ColumnSpecification>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.InternalStateInstance.InternalStateInstance()",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onCreateAggregate(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onCreateFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onCreateFunctionInternal(String,String,List<AbstractType<?>>)",1,2,2
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropAggregate(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropColumnFamily(String,String)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropFunctionInternal(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropKeyspace(String)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onUpdateColumnFamily(String,String,boolean)",1,2,2
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.removeInvalidPreparedStatements(Iterator<Prepared>,String,String)",1,3,3
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.removeInvalidPreparedStatements(String,String)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.removeInvalidPreparedStatementsForFunction(Iterator<Prepared>,String,String)",1,2,2
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.shouldInvalidate(String,String,CQLStatement)",6,7,8
"org.apache.cassandra.cql3.QueryProcessor.QueryProcessor()",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.computeId(String,String)",1,1,2
"org.apache.cassandra.cql3.QueryProcessor.computeThriftId(String,String)",1,1,2
"org.apache.cassandra.cql3.QueryProcessor.execute(String,ConsistencyLevel,QueryState,Object...)",2,2,3
"org.apache.cassandra.cql3.QueryProcessor.executeInternal(String,Object...)",2,2,2
"org.apache.cassandra.cql3.QueryProcessor.executeInternalWithPaging(String,int,Object...)",2,1,2
"org.apache.cassandra.cql3.QueryProcessor.executeOnceInternal(String,Object...)",2,2,2
"org.apache.cassandra.cql3.QueryProcessor.getPrepared(MD5Digest)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.getPreparedForThrift(Integer)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.getStatement(String,ClientState)",1,2,2
"org.apache.cassandra.cql3.QueryProcessor.getStoredPreparedStatement(String,String,boolean)",2,3,4
"org.apache.cassandra.cql3.QueryProcessor.internalQueryState()",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.makeInternalOptions(Prepared,Object[])",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.makeInternalOptions(Prepared,Object[],ConsistencyLevel)",2,4,5
"org.apache.cassandra.cql3.QueryProcessor.measure(Object)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.parseStatement(String)",1,3,4
"org.apache.cassandra.cql3.QueryProcessor.parseStatement(String,QueryState)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.prepare(String,ClientState,boolean)",3,2,3
"org.apache.cassandra.cql3.QueryProcessor.prepare(String,QueryState)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.prepare(String,QueryState,Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.prepareInternal(String)",2,1,2
"org.apache.cassandra.cql3.QueryProcessor.preparedStatementsCount()",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.process(String,ConsistencyLevel)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.process(String,ConsistencyLevel,List<ByteBuffer>)",2,2,2
"org.apache.cassandra.cql3.QueryProcessor.process(String,ConsistencyLevel,QueryState)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.process(String,QueryState,QueryOptions)",2,2,3
"org.apache.cassandra.cql3.QueryProcessor.process(String,QueryState,QueryOptions,Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.processBatch(BatchStatement,QueryState,BatchQueryOptions)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.processBatch(BatchStatement,QueryState,BatchQueryOptions,Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.processPrepared(CQLStatement,QueryState,QueryOptions)",3,6,6
"org.apache.cassandra.cql3.QueryProcessor.processPrepared(CQLStatement,QueryState,QueryOptions,Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.processStatement(CQLStatement,QueryState,QueryOptions)",1,1,2
"org.apache.cassandra.cql3.QueryProcessor.resultify(String,PartitionIterator)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.resultify(String,RowIterator)",1,1,1
"org.apache.cassandra.cql3.QueryProcessor.storePreparedStatement(String,String,Prepared,boolean)",3,3,3
"org.apache.cassandra.cql3.QueryProcessor.validateKey(ByteBuffer)",4,3,5
"org.apache.cassandra.cql3.Relation.isContains()",1,1,1
"org.apache.cassandra.cql3.Relation.isContainsKey()",1,1,1
"org.apache.cassandra.cql3.Relation.isEQ()",1,1,1
"org.apache.cassandra.cql3.Relation.isIN()",1,1,1
"org.apache.cassandra.cql3.Relation.isMultiColumn()",1,1,1
"org.apache.cassandra.cql3.Relation.isSlice()",1,1,4
"org.apache.cassandra.cql3.Relation.onToken()",1,1,1
"org.apache.cassandra.cql3.Relation.operator()",1,1,1
"org.apache.cassandra.cql3.Relation.toColumnDefinition(CFMetaData,Raw)",2,1,2
"org.apache.cassandra.cql3.Relation.toRestriction(CFMetaData,VariableSpecifications)",11,11,11
"org.apache.cassandra.cql3.Relation.toTerms(List<? extends ColumnSpecification>,List<? extends Raw>,String,VariableSpecifications)",2,2,3
"org.apache.cassandra.cql3.ResultSet.Codec.decode(ByteBuf,int)",1,2,2
"org.apache.cassandra.cql3.ResultSet.Codec.encode(ResultSet,ByteBuf,int)",1,3,3
"org.apache.cassandra.cql3.ResultSet.Codec.encodedSize(ResultSet,int)",1,3,3
"org.apache.cassandra.cql3.ResultSet.Flag.deserialize(int)",1,3,3
"org.apache.cassandra.cql3.ResultSet.Flag.serialize(EnumSet<Flag>)",1,2,2
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.Codec.decode(ByteBuf,int)",1,8,8
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.Codec.encode(PreparedMetadata,ByteBuf,int)",1,7,8
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.Codec.encodedSize(PreparedMetadata,int)",1,4,6
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.PreparedMetadata(EnumSet<Flag>,List<ColumnSpecification>,Short[])",1,1,1
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.PreparedMetadata(List<ColumnSpecification>,Short[])",1,3,3
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.copy()",1,1,1
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.equals(Object)",2,3,4
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.toString()",1,5,5
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.Codec.decode(ByteBuf,int)",2,6,7
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.Codec.encode(ResultMetadata,ByteBuf,int)",1,6,8
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.Codec.encodedSize(ResultMetadata,int)",1,6,6
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.ResultMetadata(EnumSet<Flag>,List<ColumnSpecification>,int,PagingState)",1,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.ResultMetadata(List<ColumnSpecification>)",1,3,3
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.addNonSerializedColumn(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.copy()",1,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.requestNames()",1,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.setHasMorePages(PagingState)",1,2,2
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.setSkipMetadata()",1,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.toString()",1,4,4
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.valueCount()",1,2,2
"org.apache.cassandra.cql3.ResultSet.ResultSet(List<ColumnSpecification>)",1,1,1
"org.apache.cassandra.cql3.ResultSet.ResultSet(ResultMetadata,List<List<ByteBuffer>>)",1,1,1
"org.apache.cassandra.cql3.ResultSet.addColumnValue(ByteBuffer)",1,3,3
"org.apache.cassandra.cql3.ResultSet.addRow(List<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.ResultSet.isEmpty()",1,1,1
"org.apache.cassandra.cql3.ResultSet.lastRow()",1,1,1
"org.apache.cassandra.cql3.ResultSet.reverse()",1,1,1
"org.apache.cassandra.cql3.ResultSet.size()",1,1,1
"org.apache.cassandra.cql3.ResultSet.toString()",1,5,6
"org.apache.cassandra.cql3.ResultSet.toThriftResult()",1,4,5
"org.apache.cassandra.cql3.ResultSet.trim(int)",1,3,3
"org.apache.cassandra.cql3.RoleName.getName()",1,1,1
"org.apache.cassandra.cql3.RoleName.hasName()",1,1,1
"org.apache.cassandra.cql3.RoleName.setName(String,boolean)",1,2,2
"org.apache.cassandra.cql3.RoleName.toString()",1,1,1
"org.apache.cassandra.cql3.Sets.Adder.Adder(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Sets.Adder.doAdd(Terminal,ColumnDefinition,UpdateParameters)",5,4,6
"org.apache.cassandra.cql3.Sets.Adder.execute(DecoratedKey,UpdateParameters)",1,2,2
"org.apache.cassandra.cql3.Sets.DelayedValue.DelayedValue(Comparator<ByteBuffer>,Set<Term>)",1,1,1
"org.apache.cassandra.cql3.Sets.DelayedValue.bind(QueryOptions)",5,3,5
"org.apache.cassandra.cql3.Sets.DelayedValue.collectMarkerSpecification(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Sets.DelayedValue.containsBindMarker()",1,1,1
"org.apache.cassandra.cql3.Sets.DelayedValue.getFunctions()",1,1,1
"org.apache.cassandra.cql3.Sets.Discarder.Discarder(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Sets.Discarder.execute(DecoratedKey,UpdateParameters)",2,3,5
"org.apache.cassandra.cql3.Sets.ElementDiscarder.ElementDiscarder(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Sets.ElementDiscarder.execute(DecoratedKey,UpdateParameters)",2,1,2
"org.apache.cassandra.cql3.Sets.Literal.Literal(List<Raw>)",1,1,1
"org.apache.cassandra.cql3.Sets.Literal.getText()",1,1,1
"org.apache.cassandra.cql3.Sets.Literal.prepare(String,ColumnSpecification)",4,6,7
"org.apache.cassandra.cql3.Sets.Literal.testAssignment(String,ColumnSpecification)",4,3,5
"org.apache.cassandra.cql3.Sets.Literal.validateAssignableTo(String,ColumnSpecification)",5,5,6
"org.apache.cassandra.cql3.Sets.Marker.Marker(int,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Sets.Marker.bind(QueryOptions)",3,1,3
"org.apache.cassandra.cql3.Sets.Sets()",1,1,1
"org.apache.cassandra.cql3.Sets.Setter.Setter(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.Sets.Setter.execute(DecoratedKey,UpdateParameters)",2,2,3
"org.apache.cassandra.cql3.Sets.Value.Value(SortedSet<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.Sets.Value.equals(SetType,Value)",4,2,4
"org.apache.cassandra.cql3.Sets.Value.fromSerialized(ByteBuffer,SetType,int)",1,3,3
"org.apache.cassandra.cql3.Sets.Value.get(int)",1,1,1
"org.apache.cassandra.cql3.Sets.valueSpecOf(ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.SingleColumnRelation(Raw,Operator,Raw)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.SingleColumnRelation(Raw,Raw,Operator,Raw)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.SingleColumnRelation(Raw,Raw,Operator,Raw,List<Raw>)",1,1,2
"org.apache.cassandra.cql3.SingleColumnRelation.canHaveOnlyOneValue()",1,4,4
"org.apache.cassandra.cql3.SingleColumnRelation.createInRelation(Raw,List<Raw>)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.getEntity()",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.getInValues()",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.getMapKey()",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.getValue()",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.isLegalRelationForNonFrozenCollection()",1,3,3
"org.apache.cassandra.cql3.SingleColumnRelation.isMapEntryEquality()",1,2,2
"org.apache.cassandra.cql3.SingleColumnRelation.makeCollectionReceiver(ColumnSpecification,boolean)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.newContainsRestriction(CFMetaData,VariableSpecifications,boolean)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.newEQRestriction(CFMetaData,VariableSpecifications)",2,2,2
"org.apache.cassandra.cql3.SingleColumnRelation.newINRestriction(CFMetaData,VariableSpecifications)",2,2,2
"org.apache.cassandra.cql3.SingleColumnRelation.newIsNotRestriction(CFMetaData,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.newSliceRestriction(CFMetaData,VariableSpecifications,Bound,boolean)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.renameIdentifier(Raw,Raw)",1,2,2
"org.apache.cassandra.cql3.SingleColumnRelation.toReceivers(ColumnDefinition,boolean)",4,15,15
"org.apache.cassandra.cql3.SingleColumnRelation.toString()",2,3,3
"org.apache.cassandra.cql3.SingleColumnRelation.toTerm(List<? extends ColumnSpecification>,Raw,String,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.withNonStrictOperator()",4,2,4
"org.apache.cassandra.cql3.Term.NonTerminal.bindAndGet(QueryOptions)",1,2,2
"org.apache.cassandra.cql3.Term.Raw.toString()",1,1,1
"org.apache.cassandra.cql3.Term.Terminal.bind(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.Term.Terminal.bindAndGet(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.Term.Terminal.collectMarkerSpecification(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Term.Terminal.containsBindMarker()",1,1,1
"org.apache.cassandra.cql3.Term.Terminal.getFunctions()",1,1,1
"org.apache.cassandra.cql3.Terms.getFunctions(Iterable<Term>)",2,2,2
"org.apache.cassandra.cql3.TokenRelation.TokenRelation(List<Raw>,Operator,Raw)",1,1,1
"org.apache.cassandra.cql3.TokenRelation.getColumnDefinitions(CFMetaData)",1,2,2
"org.apache.cassandra.cql3.TokenRelation.getInValues()",1,1,1
"org.apache.cassandra.cql3.TokenRelation.getValue()",1,1,1
"org.apache.cassandra.cql3.TokenRelation.newContainsRestriction(CFMetaData,VariableSpecifications,boolean)",1,1,1
"org.apache.cassandra.cql3.TokenRelation.newEQRestriction(CFMetaData,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.TokenRelation.newINRestriction(CFMetaData,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.TokenRelation.newIsNotRestriction(CFMetaData,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.TokenRelation.newSliceRestriction(CFMetaData,VariableSpecifications,Bound,boolean)",1,1,1
"org.apache.cassandra.cql3.TokenRelation.onToken()",1,1,1
"org.apache.cassandra.cql3.TokenRelation.renameIdentifier(Raw,Raw)",2,1,3
"org.apache.cassandra.cql3.TokenRelation.toReceivers(CFMetaData,List<ColumnDefinition>)",2,2,2
"org.apache.cassandra.cql3.TokenRelation.toString()",1,1,1
"org.apache.cassandra.cql3.TokenRelation.toTerm(List<? extends ColumnSpecification>,Raw,String,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.DelayedValue(TupleType,List<Term>)",1,1,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.bind(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.bindAndGet(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.bindInternal(QueryOptions)",3,3,3
"org.apache.cassandra.cql3.Tuples.DelayedValue.collectMarkerSpecification(VariableSpecifications)",1,2,2
"org.apache.cassandra.cql3.Tuples.DelayedValue.containsBindMarker()",3,2,3
"org.apache.cassandra.cql3.Tuples.DelayedValue.getFunctions()",1,1,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.toString()",1,1,1
"org.apache.cassandra.cql3.Tuples.INRaw.INRaw(int)",1,1,1
"org.apache.cassandra.cql3.Tuples.INRaw.makeInReceiver(List<? extends ColumnSpecification>)",3,4,5
"org.apache.cassandra.cql3.Tuples.INRaw.prepare(String,List<? extends ColumnSpecification>)",1,1,1
"org.apache.cassandra.cql3.Tuples.InMarker.InMarker(int,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Tuples.InMarker.bind(QueryOptions)",2,3,3
"org.apache.cassandra.cql3.Tuples.InValue.InValue(List<List<ByteBuffer>>)",1,1,1
"org.apache.cassandra.cql3.Tuples.InValue.fromSerialized(ByteBuffer,ListType,QueryOptions)",1,3,3
"org.apache.cassandra.cql3.Tuples.InValue.get(int)",1,1,1
"org.apache.cassandra.cql3.Tuples.InValue.getSplitValues()",1,1,1
"org.apache.cassandra.cql3.Tuples.Literal.Literal(List<Raw>)",1,1,1
"org.apache.cassandra.cql3.Tuples.Literal.getText()",1,1,1
"org.apache.cassandra.cql3.Tuples.Literal.prepare(String,ColumnSpecification)",1,3,4
"org.apache.cassandra.cql3.Tuples.Literal.prepare(String,List<? extends ColumnSpecification>)",2,4,5
"org.apache.cassandra.cql3.Tuples.Literal.testAssignment(String,ColumnSpecification)",1,1,2
"org.apache.cassandra.cql3.Tuples.Literal.validateAssignableTo(String,ColumnSpecification)",5,5,5
"org.apache.cassandra.cql3.Tuples.Marker.Marker(int,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.Tuples.Marker.bind(QueryOptions)",2,3,3
"org.apache.cassandra.cql3.Tuples.Raw.Raw(int)",1,1,1
"org.apache.cassandra.cql3.Tuples.Raw.makeReceiver(List<? extends ColumnSpecification>)",1,3,3
"org.apache.cassandra.cql3.Tuples.Raw.prepare(String,List<? extends ColumnSpecification>)",1,1,1
"org.apache.cassandra.cql3.Tuples.Tuples()",1,1,1
"org.apache.cassandra.cql3.Tuples.Value.Value(ByteBuffer[])",1,1,1
"org.apache.cassandra.cql3.Tuples.Value.fromSerialized(ByteBuffer,TupleType)",1,1,1
"org.apache.cassandra.cql3.Tuples.Value.get(int)",1,1,1
"org.apache.cassandra.cql3.Tuples.Value.getElements()",1,1,1
"org.apache.cassandra.cql3.Tuples.componentSpecOf(ColumnSpecification,int)",1,1,1
"org.apache.cassandra.cql3.Tuples.tupleToString(List<?>)",1,3,3
"org.apache.cassandra.cql3.TypeCast.TypeCast(Raw,Raw)",1,1,1
"org.apache.cassandra.cql3.TypeCast.castedSpecOf(String,ColumnSpecification)",1,1,1
"org.apache.cassandra.cql3.TypeCast.getText()",1,1,1
"org.apache.cassandra.cql3.TypeCast.prepare(String,ColumnSpecification)",3,3,3
"org.apache.cassandra.cql3.TypeCast.testAssignment(String,ColumnSpecification)",3,2,3
"org.apache.cassandra.cql3.UTName.UTName(ColumnIdentifier,ColumnIdentifier)",1,2,2
"org.apache.cassandra.cql3.UTName.getKeyspace()",1,1,1
"org.apache.cassandra.cql3.UTName.getStringTypeName()",1,1,1
"org.apache.cassandra.cql3.UTName.getUserTypeName()",1,1,1
"org.apache.cassandra.cql3.UTName.hasKeyspace()",1,1,1
"org.apache.cassandra.cql3.UTName.setKeyspace(String)",1,1,1
"org.apache.cassandra.cql3.UTName.toString()",1,1,2
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.FromPager(SelectStatement,QueryPager,int)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.iterator()",3,4,4
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.metadata()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.one()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.size()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.FromResultList(List<Map<String, ByteBuffer>>)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.iterator()",2,2,2
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.metadata()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.one()",2,2,2
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.size()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.FromResultSet(ResultSet)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.iterator()",2,2,2
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.metadata()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.one()",2,2,2
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.size()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.Row(List<ColumnSpecification>,List<ByteBuffer>)",1,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.Row(Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.fromInternalRow(CFMetaData,DecoratedKey,Row)",1,7,7
"org.apache.cassandra.cql3.UntypedResultSet.Row.getBlob(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getBoolean(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getByte(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getBytes(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getColumns()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getDouble(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getFrozenList(String,AbstractType<T>)",1,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getFrozenMap(String,AbstractType<K>,AbstractType<V>)",1,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getFrozenSet(String,AbstractType<T>)",1,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getFrozenTextMap(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getInetAddress(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getInt(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getList(String,AbstractType<T>)",1,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getLong(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getMap(String,AbstractType<K>,AbstractType<V>)",1,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getSet(String,AbstractType<T>)",1,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getShort(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getString(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getTextMap(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getTimestamp(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getUUID(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.has(String)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.toString()",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.create(List<Map<String, ByteBuffer>>)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.create(ResultSet)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.create(SelectStatement,QueryPager,int)",1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.isEmpty()",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.UpdateParameters(CFMetaData,PartitionColumns,QueryOptions,long,int,Map<DecoratedKey, Partition>)",2,2,2
"org.apache.cassandra.cql3.UpdateParameters.addCell(ColumnDefinition,ByteBuffer)",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.addCell(ColumnDefinition,CellPath,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.UpdateParameters.addCounter(ColumnDefinition,long)",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.addPrimaryKeyLivenessInfo()",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.addRowDeletion()",1,3,3
"org.apache.cassandra.cql3.UpdateParameters.addTombstone(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.addTombstone(ColumnDefinition,CellPath)",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.buildRow()",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.currentClustering()",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.deletionTime()",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.getPrefetchedRow(DecoratedKey,Clustering)",2,2,3
"org.apache.cassandra.cql3.UpdateParameters.makeRangeTombstone(ClusteringComparator,Clustering)",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.makeRangeTombstone(Slice)",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.newRow(Clustering)",3,8,8
"org.apache.cassandra.cql3.UpdateParameters.setComplexDeletionTime(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.UpdateParameters.setComplexDeletionTimeForOverwrite(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.UserTypes.DelayedValue.DelayedValue(UserType,List<Term>)",1,1,1
"org.apache.cassandra.cql3.UserTypes.DelayedValue.bind(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.UserTypes.DelayedValue.bindAndGet(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.UserTypes.DelayedValue.bindInternal(QueryOptions)",3,3,3
"org.apache.cassandra.cql3.UserTypes.DelayedValue.collectMarkerSpecification(VariableSpecifications)",1,2,2
"org.apache.cassandra.cql3.UserTypes.DelayedValue.containsBindMarker()",3,2,3
"org.apache.cassandra.cql3.UserTypes.DelayedValue.getFunctions()",1,1,1
"org.apache.cassandra.cql3.UserTypes.Literal.Literal(Map<ColumnIdentifier, Raw>)",1,1,1
"org.apache.cassandra.cql3.UserTypes.Literal.getText()",1,3,3
"org.apache.cassandra.cql3.UserTypes.Literal.prepare(String,ColumnSpecification)",4,6,8
"org.apache.cassandra.cql3.UserTypes.Literal.testAssignment(String,ColumnSpecification)",1,1,2
"org.apache.cassandra.cql3.UserTypes.Literal.validateAssignableTo(String,ColumnSpecification)",5,4,5
"org.apache.cassandra.cql3.UserTypes.UserTypes()",1,1,1
"org.apache.cassandra.cql3.UserTypes.fieldSpecOf(ColumnSpecification,int)",1,1,1
"org.apache.cassandra.cql3.VariableSpecifications.VariableSpecifications(List<ColumnIdentifier>)",1,1,1
"org.apache.cassandra.cql3.VariableSpecifications.add(int,ColumnSpecification)",1,1,3
"org.apache.cassandra.cql3.VariableSpecifications.empty()",1,1,1
"org.apache.cassandra.cql3.VariableSpecifications.getPartitionKeyBindIndexes(CFMetaData)",3,5,7
"org.apache.cassandra.cql3.VariableSpecifications.getSpecifications()",1,1,1
"org.apache.cassandra.cql3.VariableSpecifications.size()",1,1,1
"org.apache.cassandra.cql3.VariableSpecifications.toString()",1,1,1
"org.apache.cassandra.cql3.WhereClause.Builder.add(CustomIndexExpression)",1,1,1
"org.apache.cassandra.cql3.WhereClause.Builder.add(Relation)",1,1,1
"org.apache.cassandra.cql3.WhereClause.Builder.build()",1,1,1
"org.apache.cassandra.cql3.WhereClause.WhereClause(Builder)",1,1,1
"org.apache.cassandra.cql3.WhereClause.containsCustomExpressions()",1,1,1
"org.apache.cassandra.cql3.WhereClause.empty()",1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.AbstractFunction(FunctionName,List<AbstractType<?>>,AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.argTypes()",1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.equals(Object)",2,3,4
"org.apache.cassandra.cql3.functions.AbstractFunction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.hasReferenceTo(Function)",1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.hashCode()",1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.name()",1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.returnType()",1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.testAssignment(String,ColumnSpecification)",3,2,4
"org.apache.cassandra.cql3.functions.AbstractFunction.toString()",1,3,3
"org.apache.cassandra.cql3.functions.AggregateFcts.all()",1,3,3
"org.apache.cassandra.cql3.functions.AggregateFcts.isCountRows(Function)",1,1,1
"org.apache.cassandra.cql3.functions.AggregateFcts.makeCountFunction(AbstractType<?>)",2,1,2
"org.apache.cassandra.cql3.functions.AggregateFcts.makeMaxFunction(AbstractType<?>)",2,2,4
"org.apache.cassandra.cql3.functions.AggregateFcts.makeMinFunction(AbstractType<?>)",2,2,4
"org.apache.cassandra.cql3.functions.BytesConversionFcts.all()",1,3,4
"org.apache.cassandra.cql3.functions.BytesConversionFcts.makeFromBlobFunction(AbstractType<?>)",1,3,3
"org.apache.cassandra.cql3.functions.BytesConversionFcts.makeToBlobFunction(AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.functions.FromJsonFct.FromJsonFct(AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.functions.FromJsonFct.execute(int,List<ByteBuffer>)",3,3,5
"org.apache.cassandra.cql3.functions.FromJsonFct.getInstance(AbstractType<?>)",1,2,2
"org.apache.cassandra.cql3.functions.FunctionCall.FunctionCall(ScalarFunction,List<Term>)",1,1,1
"org.apache.cassandra.cql3.functions.FunctionCall.Raw.Raw(FunctionName,List<Raw>)",1,1,1
"org.apache.cassandra.cql3.functions.FunctionCall.Raw.getText()",1,1,1
"org.apache.cassandra.cql3.functions.FunctionCall.Raw.prepare(String,ColumnSpecification)",5,5,6
"org.apache.cassandra.cql3.functions.FunctionCall.Raw.testAssignment(String,ColumnSpecification)",4,5,8
"org.apache.cassandra.cql3.functions.FunctionCall.bind(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.functions.FunctionCall.bindAndGet(QueryOptions)",1,2,2
"org.apache.cassandra.cql3.functions.FunctionCall.collectMarkerSpecification(VariableSpecifications)",1,2,2
"org.apache.cassandra.cql3.functions.FunctionCall.containsBindMarker()",3,2,3
"org.apache.cassandra.cql3.functions.FunctionCall.executeInternal(int,ScalarFunction,List<ByteBuffer>)",1,3,3
"org.apache.cassandra.cql3.functions.FunctionCall.getFunctions()",1,1,1
"org.apache.cassandra.cql3.functions.FunctionCall.makeTerminal(Function,ByteBuffer,int)",5,4,5
"org.apache.cassandra.cql3.functions.FunctionName.FunctionName(String,String)",1,1,1
"org.apache.cassandra.cql3.functions.FunctionName.asNativeFunction()",1,1,1
"org.apache.cassandra.cql3.functions.FunctionName.equals(Object)",2,2,3
"org.apache.cassandra.cql3.functions.FunctionName.equalsNativeFunction(FunctionName)",2,2,3
"org.apache.cassandra.cql3.functions.FunctionName.hasKeyspace()",1,1,1
"org.apache.cassandra.cql3.functions.FunctionName.hashCode()",1,1,1
"org.apache.cassandra.cql3.functions.FunctionName.nativeFunction(String)",1,1,1
"org.apache.cassandra.cql3.functions.FunctionName.toString()",1,1,2
"org.apache.cassandra.cql3.functions.FunctionResolver.FunctionResolver()",1,1,1
"org.apache.cassandra.cql3.functions.FunctionResolver.format(Collection<Function>)",1,1,1
"org.apache.cassandra.cql3.functions.FunctionResolver.get(String,FunctionName,List<? extends AssignmentTestable>,String,String,AbstractType<?>)",12,10,15
"org.apache.cassandra.cql3.functions.FunctionResolver.makeArgSpec(String,String,Function,int)",1,1,1
"org.apache.cassandra.cql3.functions.FunctionResolver.matchAguments(String,Function,List<? extends AssignmentTestable>,String,String)",5,2,6
"org.apache.cassandra.cql3.functions.FunctionResolver.validateTypes(String,Function,List<? extends AssignmentTestable>,String,String)",5,4,5
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.EcjCompilationUnit(String,String)",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.acceptResult(CompilationResult)",1,3,4
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.cleanup()",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.findType(String)",3,2,4
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.findType(char[],char[][])",1,4,4
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.findType(char[][])",1,3,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.getContents()",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.getFileName()",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.getMainTypeName()",1,2,2
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.getPackageName()",1,2,2
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.ignoreOptionalProblems()",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.isPackage(String)",2,1,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.isPackage(char[][],char[])",2,6,7
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.EcjTargetClassLoader()",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.addClass(String,byte[])",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.classData(String)",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.findClass(String)",2,2,2
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.getPermissions(CodeSource)",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.JavaBasedUDFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String)",6,15,25
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.composeMethod(Class<?>)",1,2,2
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.countNewlines(StringBuilder)",1,2,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.executeUserDefined(int,List<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.executor()",1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.generateArgumentList(Class<?>[],List<ColumnIdentifier>)",1,3,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.generateArguments(Class<?>[],List<ColumnIdentifier>)",1,4,4
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.generateClassName(FunctionName,char)",1,3,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.javaSourceName(Class<?>)",1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.JavaUDF(DataType,DataType[])",1,1,1
"org.apache.cassandra.cql3.functions.JavaUDF.compose(int,int,ByteBuffer)",1,1,1
"org.apache.cassandra.cql3.functions.JavaUDF.compose_boolean(int,int,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_byte(int,int,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_double(int,int,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_float(int,int,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_int(int,int,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_long(int,int,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_short(int,int,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.decompose(int,Object)",1,1,1
"org.apache.cassandra.cql3.functions.NativeAggregateFunction.NativeAggregateFunction(String,AbstractType<?>,AbstractType<?>...)",1,1,1
"org.apache.cassandra.cql3.functions.NativeAggregateFunction.isAggregate()",1,1,1
"org.apache.cassandra.cql3.functions.NativeFunction.NativeFunction(String,AbstractType<?>,AbstractType<?>...)",1,1,1
"org.apache.cassandra.cql3.functions.NativeFunction.isNative()",1,1,1
"org.apache.cassandra.cql3.functions.NativeScalarFunction.NativeScalarFunction(String,AbstractType<?>,AbstractType<?>...)",1,1,1
"org.apache.cassandra.cql3.functions.NativeScalarFunction.isAggregate()",1,1,1
"org.apache.cassandra.cql3.functions.NativeScalarFunction.isCalledOnNullInput()",1,1,1
"org.apache.cassandra.cql3.functions.ScriptBasedUDFunction.ScriptBasedUDFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String,String)",2,3,3
"org.apache.cassandra.cql3.functions.ScriptBasedUDFunction.executeUserDefined(int,List<ByteBuffer>)",2,23,26
"org.apache.cassandra.cql3.functions.ScriptBasedUDFunction.executor()",1,1,1
"org.apache.cassandra.cql3.functions.SecurityThreadGroup.SecurityThreadGroup(String,Set<String>,ThreadInitializer)",1,1,1
"org.apache.cassandra.cql3.functions.SecurityThreadGroup.initializeThread()",1,1,1
"org.apache.cassandra.cql3.functions.SecurityThreadGroup.isPackageAllowed(String)",1,2,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.ThreadAwareSecurityManager()",1,1,1
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkAccess(Thread)",2,1,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkAccess(ThreadGroup)",2,1,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkPackageAccess(String)",3,1,3
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkPermission(Permission)",3,1,3
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkPermission(Permission,Object)",1,2,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.install()",2,1,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.isSecuredThread()",2,2,3
"org.apache.cassandra.cql3.functions.TimeFcts.all()",1,1,1
"org.apache.cassandra.cql3.functions.ToJsonFct.ToJsonFct(AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.functions.ToJsonFct.execute(int,List<ByteBuffer>)",2,2,2
"org.apache.cassandra.cql3.functions.ToJsonFct.getInstance(List<AbstractType<?>>)",2,3,3
"org.apache.cassandra.cql3.functions.TokenFct.TokenFct(CFMetaData)",1,1,1
"org.apache.cassandra.cql3.functions.TokenFct.execute(int,List<ByteBuffer>)",3,2,3
"org.apache.cassandra.cql3.functions.TokenFct.getKeyTypes(CFMetaData)",1,1,2
"org.apache.cassandra.cql3.functions.UDAggregate.UDAggregate(FunctionName,List<AbstractType<?>>,AbstractType<?>,ScalarFunction,ScalarFunction,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.UDAggregate.create(Functions,FunctionName,List<AbstractType<?>>,AbstractType<?>,FunctionName,FunctionName,AbstractType<?>,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.UDAggregate.createBroken(FunctionName,List<AbstractType<?>>,AbstractType<?>,ByteBuffer,InvalidRequestException)",1,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.equals(Object)",2,7,8
"org.apache.cassandra.cql3.functions.UDAggregate.finalFunction()",1,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.getFunctions()",3,3,3
"org.apache.cassandra.cql3.functions.UDAggregate.hasReferenceTo(Function)",1,1,2
"org.apache.cassandra.cql3.functions.UDAggregate.hashCode()",1,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.initialCondition()",1,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.isAggregate()",1,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.isNative()",1,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.newAggregate()",2,4,5
"org.apache.cassandra.cql3.functions.UDAggregate.resolveScalar(Functions,FunctionName,FunctionName,List<AbstractType<?>>)",3,3,3
"org.apache.cassandra.cql3.functions.UDAggregate.stateFunction()",1,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.stateType()",1,1,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor.ConstructorVisitor(Set<String>)",1,1,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor.visitInsn(int)",1,2,2
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor.visitInvokeDynamicInsn(String,String,Handle,Object...)",1,1,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor.visitMethodInsn(int,String,String,String,boolean)",1,5,5
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ExecuteImplVisitor.ExecuteImplVisitor(Set<String>)",1,1,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ExecuteImplVisitor.visitInsn(int)",2,2,2
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ExecuteImplVisitor.visitMethodInsn(int,String,String,String,boolean)",1,6,6
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.UDFByteCodeVerifier()",1,1,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.addDisallowedMethodCall(String,String)",1,1,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.addDisallowedPackage(String)",1,1,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.verify(byte[])",4,10,10
"org.apache.cassandra.cql3.functions.UDFExecutorService.UDFExecutorService(NamedThreadFactory,String)",1,1,1
"org.apache.cassandra.cql3.functions.UDFExecutorService.afterExecute(Runnable,Throwable)",1,1,1
"org.apache.cassandra.cql3.functions.UDFExecutorService.beforeExecute(Thread,Runnable)",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.ThreadIdAndCpuTime.ThreadIdAndCpuTime()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.ThreadIdAndCpuTime.setup()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.findClass(String)",2,1,2
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.findResource(String)",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.getResource(String)",2,1,2
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.getResources(String)",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.loadClass(String)",2,1,2
"org.apache.cassandra.cql3.functions.UDFunction.UDFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String,String)",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.UDFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,DataType[],AbstractType<?>,DataType,boolean,String,String)",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.argNames()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.assertUdfsEnabled(String)",3,2,4
"org.apache.cassandra.cql3.functions.UDFunction.body()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.compose(DataType[],int,int,ByteBuffer)",1,2,2
"org.apache.cassandra.cql3.functions.UDFunction.compose(int,int,ByteBuffer)",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.create(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String,String)",3,2,3
"org.apache.cassandra.cql3.functions.UDFunction.createBrokenFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String,String,InvalidRequestException)",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.decompose(DataType,int,Object)",1,2,2
"org.apache.cassandra.cql3.functions.UDFunction.decompose(int,Object)",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.equals(Object)",2,6,7
"org.apache.cassandra.cql3.functions.UDFunction.execute(int,List<ByteBuffer>)",3,3,6
"org.apache.cassandra.cql3.functions.UDFunction.executeAsync(int,List<ByteBuffer>)",4,9,12
"org.apache.cassandra.cql3.functions.UDFunction.hashCode()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.initializeThread()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.isAggregate()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.isCallableWrtNullable(List<ByteBuffer>)",4,3,4
"org.apache.cassandra.cql3.functions.UDFunction.isCalledOnNullInput()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.isNative()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.language()",1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.makeEmptyParametersNull(List<ByteBuffer>)",1,2,3
"org.apache.cassandra.cql3.functions.UDFunction.secureResource(String)",5,6,6
"org.apache.cassandra.cql3.functions.UDFunction.userTypeUpdated(String,String)",1,6,6
"org.apache.cassandra.cql3.functions.UDHelper.asJavaClass(DataType)",1,1,1
"org.apache.cassandra.cql3.functions.UDHelper.codecFor(DataType)",1,1,1
"org.apache.cassandra.cql3.functions.UDHelper.deserialize(DataType,int,ByteBuffer)",1,1,1
"org.apache.cassandra.cql3.functions.UDHelper.driverType(AbstractType)",1,2,3
"org.apache.cassandra.cql3.functions.UDHelper.driverTypes(List<AbstractType<?>>)",1,2,2
"org.apache.cassandra.cql3.functions.UDHelper.isNullOrEmpty(AbstractType<?>,ByteBuffer)",1,3,3
"org.apache.cassandra.cql3.functions.UDHelper.javaTypes(DataType[],boolean)",1,2,10
"org.apache.cassandra.cql3.functions.UDHelper.serialize(DataType,int,Object)",2,2,2
"org.apache.cassandra.cql3.functions.UuidFcts.all()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions.AbstractPrimaryKeyRestrictions(ClusteringComparator)",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions.bounds(Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions.isEmpty()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions.size()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.hasBound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isContains()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isEQ()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isIN()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isInclusive(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isMultiColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isNotNull()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isOnToken()",1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isSlice()",1,1,1
"org.apache.cassandra.cql3.restrictions.CustomIndexExpression.CustomIndexExpression(IndexName,Raw)",1,1,1
"org.apache.cassandra.cql3.restrictions.CustomIndexExpression.addToRowFilter(RowFilter,CFMetaData,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.CustomIndexExpression.prepareValue(CFMetaData,AbstractType<?>,VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.bounds(Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.boundsAsClustering(Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getColumnDefs()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getFirstColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getLastColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.hasBound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.hasSupportingIndex(SecondaryIndexManager)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isContains()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isEQ()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isEmpty()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isIN()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isInclusive(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isMultiColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isNotNull()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isOnToken()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isSlice()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.mergeWith(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.size()",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.values(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.valuesAsClustering(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.add(CustomIndexExpression)",1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.add(Restrictions)",1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.customExpressionNotSupported(IndexName)",1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.getCustomIndexExpressions()",1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.getRestrictions()",1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.indexNotFound(IndexName,CFMetaData)",1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.invalidIndex(IndexName,CFMetaData)",1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.isEmpty()",1,2,2
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.nonCustomIndexInExpression(IndexName)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.EQRestriction(List<ColumnDefinition>,Term)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.appendTo(MultiCBuilder,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.doMergeWith(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.isSupportedBy(Index)",3,2,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.INRestriction(List<ColumnDefinition>)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.appendTo(MultiCBuilder,QueryOptions)",2,2,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.doMergeWith(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.isIN()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.isSupportedBy(Index)",3,2,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker.InRestrictionWithMarker(List<ColumnDefinition>,AbstractMarker)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker.splitValues(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues.InRestrictionWithValues(List<ColumnDefinition>,List<Term>)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues.splitValues(QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.MultiColumnRestriction(List<ColumnDefinition>)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.NotNullRestriction(List<ColumnDefinition>)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.doMergeWith(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.isNotNull()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.isSupportedBy(Index)",3,2,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.SliceRestriction(List<ColumnDefinition>,Bound,boolean,Term)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.SliceRestriction(List<ColumnDefinition>,TermSlice)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.componentBounds(Bound,QueryOptions)",2,2,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.doMergeWith(Restriction)",2,5,6
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.hasBound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.isInclusive(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.isSlice()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.isSupportedBy(Index)",3,2,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getColumnDefs()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getColumnsInCommons(Restriction)",1,3,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getFirstColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getLastColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.hasSupportingIndex(SecondaryIndexManager)",3,2,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.isMultiColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.mergeWith(Restriction)",2,3,3
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.PrimaryKeyRestrictionSet(ClusteringComparator,boolean)",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.PrimaryKeyRestrictionSet(PrimaryKeyRestrictionSet,Restriction)",3,10,11
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",4,5,6
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.appendTo(MultiCBuilder,QueryOptions)",3,2,3
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.bounds(Bound,QueryOptions)",2,1,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.boundsAsClustering(Bound,QueryOptions)",6,7,8
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.getColumnDefs()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.getFirstColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.getLastColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.hasBound(Bound)",2,1,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.hasSupportingIndex(SecondaryIndexManager)",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isContains()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isEQ()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isIN()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isInclusive(Bound)",2,1,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isMultiColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isOnToken()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isSlice()",1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.mergeWith(Restriction)",3,2,3
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.toByteBuffers(SortedSet<? extends ClusteringPrefix>)",1,2,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.values(QueryOptions)",2,1,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.valuesAsClustering(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.RestrictionSet()",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.RestrictionSet(TreeMap<ColumnDefinition, Restriction>)",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.addRestriction(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.firstColumn()",1,2,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.getColumnDefs()",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.getRestrictions(Collection<ColumnDefinition>)",1,3,3
"org.apache.cassandra.cql3.restrictions.RestrictionSet.hasMultipleContains()",1,3,3
"org.apache.cassandra.cql3.restrictions.RestrictionSet.hasSupportingIndex(SecondaryIndexManager)",3,2,3
"org.apache.cassandra.cql3.restrictions.RestrictionSet.isEmpty()",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.iterator()",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.lastColumn()",1,2,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.lastRestriction()",1,2,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.mergeRestrictions(Restriction,Restriction)",1,2,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.mergeRestrictions(TreeMap<ColumnDefinition, Restriction>,Restriction)",1,5,5
"org.apache.cassandra.cql3.restrictions.RestrictionSet.nextColumn(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.size()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.ContainsRestriction(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.ContainsRestriction(ColumnDefinition,Term,Term)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.ContainsRestriction(ColumnDefinition,Term,boolean)",1,2,2
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,4,4
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.bindAndGet(List<Term>,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.canBeConvertedToMultiColumnRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.copyKeysAndValues(ContainsRestriction,ContainsRestriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.doMergeWith(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.hasBound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.isContains()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.isInclusive(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.isSupportedBy(Index)",1,4,4
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.numberOfEntries()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.numberOfKeys()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.numberOfValues()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.toMultiColumnRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.EQRestriction(ColumnDefinition,Term)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.doMergeWith(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.isEQ()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.isSupportedBy(Index)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.toMultiColumnRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.INRestriction(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.doMergeWith(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.isIN()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.isSupportedBy(Index)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.InRestrictionWithMarker(ColumnDefinition,AbstractMarker)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.getValues(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.toMultiColumnRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.InRestrictionWithValues(ColumnDefinition,List<Term>)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.getValues(QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.toMultiColumnRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.IsNotNullRestriction(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.doMergeWith(Restriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.isNotNull()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.isSupportedBy(Index)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.toMultiColumnRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SingleColumnRestriction(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.SliceRestriction(ColumnDefinition,Bound,boolean,Term)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.SliceRestriction(ColumnDefinition,TermSlice)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,3,3
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.doMergeWith(Restriction)",1,3,3
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.hasBound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.isInclusive(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.isSlice()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.isSupportedBy(Index)",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.toMultiColumnRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.canBeConvertedToMultiColumnRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.getColumnDefs()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.getFirstColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.getLastColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.hasSupportingIndex(SecondaryIndexManager)",3,2,3
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.mergeWith(Restriction)",2,3,3
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.StatementRestrictions(StatementType,CFMetaData)",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.StatementRestrictions(StatementType,CFMetaData,WhereClause,VariableSpecifications,boolean,boolean,boolean,boolean)",11,22,25
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.addRestriction(Restriction)",1,3,3
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.addSingleColumnRestriction(SingleColumnRestriction)",1,3,3
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.areRequestedBoundsInclusive(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.empty(StatementType,CFMetaData)",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getClusteringColumns(QueryOptions)",2,2,2
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getClusteringColumnsBounds(Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyBound(Bound,QueryOptions)",2,1,2
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyBounds(IPartitioner,QueryOptions)",3,3,6
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyBounds(QueryOptions)",2,2,2
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyBoundsForTokenRestrictions(IPartitioner,QueryOptions)",2,5,9
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyUnrestrictedComponents()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeys(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getRowFilter(SecondaryIndexManager,QueryOptions)",2,3,4
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getTokenBound(Bound,QueryOptions,IPartitioner)",2,2,2
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getUnrestrictedClusteringColumns()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasAllPKColumnsRestrictedByEqualities()",1,7,7
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasClusteringColumnsRestriction()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasPartitionKeyRestrictions()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasUnrestrictedClusteringColumns()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasUnrestrictedPartitionKeyComponents()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.isColumnRange()",1,4,4
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.isKeyRange()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.isPartitionKeyRestrictionsOnToken()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.isRestricted(ColumnDefinition)",4,4,4
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.keyIsInRelation()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.needFiltering()",1,6,6
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.nonPKRestrictedColumns(boolean)",1,7,7
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.notNullColumns()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.processClusteringColumnsRestrictions(boolean,boolean,boolean,boolean)",6,13,15
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.processCustomIndexExpressions(List<CustomIndexExpression>,VariableSpecifications,SecondaryIndexManager)",8,8,10
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.processPartitionKeyRestrictions(boolean)",6,6,7
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.usesSecondaryIndexing()",1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.validateSecondaryIndexSelections(boolean)",1,1,1
"org.apache.cassandra.cql3.restrictions.TermSlice.TermSlice(Term,boolean,Term,boolean)",1,1,1
"org.apache.cassandra.cql3.restrictions.TermSlice.bound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.TermSlice.getFunctions()",4,5,5
"org.apache.cassandra.cql3.restrictions.TermSlice.getIndexOperator(Bound)",2,1,4
"org.apache.cassandra.cql3.restrictions.TermSlice.hasBound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.TermSlice.isInclusive(Bound)",1,1,2
"org.apache.cassandra.cql3.restrictions.TermSlice.isSupportedBy(ColumnDefinition,Index)",1,5,5
"org.apache.cassandra.cql3.restrictions.TermSlice.merge(TermSlice)",2,2,2
"org.apache.cassandra.cql3.restrictions.TermSlice.newInstance(Bound,boolean,Term)",1,1,2
"org.apache.cassandra.cql3.restrictions.TermSlice.toString()",1,1,3
"org.apache.cassandra.cql3.restrictions.TokenFilter.TokenFilter(PrimaryKeyRestrictions,TokenRestriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.bounds(Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.boundsAsClustering(Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.deserializeToken(ByteBuffer)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.filter(List<ByteBuffer>,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.restrictions.TokenFilter.filterWithRangeSet(RangeSet<Token>,List<ByteBuffer>)",3,2,3
"org.apache.cassandra.cql3.restrictions.TokenFilter.getDelegate()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.hasBound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.isInclusive(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.isOnToken()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.mergeWith(Restriction)",2,2,2
"org.apache.cassandra.cql3.restrictions.TokenFilter.toBoundType(boolean)",1,1,2
"org.apache.cassandra.cql3.restrictions.TokenFilter.toRangeSet(List<ByteBuffer>)",1,2,2
"org.apache.cassandra.cql3.restrictions.TokenFilter.toRangeSet(TokenRestriction,QueryOptions)",5,6,7
"org.apache.cassandra.cql3.restrictions.TokenFilter.values(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.valuesAsClustering(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.EQRestriction(CFMetaData,List<ColumnDefinition>,Term)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.doMergeWith(TokenRestriction)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.isEQ()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.values(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.SliceRestriction(CFMetaData,List<ColumnDefinition>,Bound,boolean,Term)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.SliceRestriction(CFMetaData,List<ColumnDefinition>,TermSlice)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.bounds(Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.doMergeWith(TokenRestriction)",4,6,6
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.getFunctions()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.hasBound(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.isInclusive(Bound)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.isSlice()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.toString()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.values(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.TokenRestriction(CFMetaData,List<ColumnDefinition>)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.appendTo(MultiCBuilder,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.boundsAsClustering(Bound,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.getColumnDefs()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.getColumnNamesAsString()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.getFirstColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.getLastColumn()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.hasSupportingIndex(SecondaryIndexManager)",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.isOnToken()",1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.mergeWith(Restriction)",2,2,2
"org.apache.cassandra.cql3.restrictions.TokenRestriction.toPrimaryKeyRestriction(Restriction)",2,1,2
"org.apache.cassandra.cql3.restrictions.TokenRestriction.valuesAsClustering(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector.AbstractFunctionSelector(T,List<Selector>)",1,1,1
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector.getType()",1,1,1
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector.newFactory(Function,SelectorFactories)",4,6,8
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector.toString()",1,1,1
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.AggregateFunctionSelector(Function,List<Selector>)",1,1,1
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.addInput(int,ResultSetBuilder)",1,2,2
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.getOutput(int)",1,1,1
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.isAggregate()",1,1,1
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.reset()",1,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.FieldSelector(UserType,int,Selector)",1,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.addInput(int,ResultSetBuilder)",1,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.getOutput(int)",2,1,3
"org.apache.cassandra.cql3.selection.FieldSelector.getType()",1,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.isAggregate()",1,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.newFactory(UserType,int,Factory)",1,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.reset()",1,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.toString()",1,1,1
"org.apache.cassandra.cql3.selection.RawSelector.RawSelector(Raw,ColumnIdentifier)",1,1,1
"org.apache.cassandra.cql3.selection.RawSelector.processesSelection()",1,1,1
"org.apache.cassandra.cql3.selection.RawSelector.toSelectables(List<RawSelector>,CFMetaData)",1,1,1
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.ScalarFunctionSelector(Function,List<Selector>)",1,1,1
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.addInput(int,ResultSetBuilder)",1,2,2
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.getOutput(int)",1,2,2
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.isAggregate()",2,1,2
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.reset()",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.Raw.Raw(Raw,Raw)",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.Raw.prepare(CFMetaData)",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.Raw.processesSelection()",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.WithFieldSelection(Selectable,ColumnIdentifier)",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",4,3,4
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.toString()",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.Raw.Raw(FunctionName,List<Raw>)",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.Raw.prepare(CFMetaData)",1,2,2
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.Raw.processesSelection()",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.WithFunction(FunctionName,List<Selectable>)",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",3,4,4
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.toString()",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.Raw.Raw(Raw,boolean)",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.Raw.prepare(CFMetaData)",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.Raw.processesSelection()",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.WritetimeOrTTL(ColumnIdentifier,boolean)",1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",4,4,6
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.toString()",1,1,2
"org.apache.cassandra.cql3.selection.Selectable.addAndGetIndex(ColumnDefinition,List<ColumnDefinition>)",1,2,2
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.ResultSetBuilder(boolean)",1,5,5
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.add(ByteBuffer)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.add(Cell,int)",2,4,4
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.build(int)",1,4,4
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.getOutputRow(int)",1,2,2
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.newRow(int)",1,3,3
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.remainingTTL(Cell,int)",2,1,3
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.rowToJson(List<ByteBuffer>,int)",1,4,5
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.value(Cell)",1,2,2
"org.apache.cassandra.cql3.selection.Selection.Selection(CFMetaData,List<ColumnDefinition>,SelectionColumnMapping,boolean,boolean)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.SelectionWithProcessing(CFMetaData,List<ColumnDefinition>,SelectionColumnMapping,SelectorFactories)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.addColumnForOrdering(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.getFunctions()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.getResultSetIndex(ColumnDefinition)",4,2,4
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.isAggregate()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.newSelectors()",1,4,4
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.SimpleSelection(CFMetaData,List<ColumnDefinition>,SelectionColumnMapping,boolean)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.SimpleSelection(CFMetaData,List<ColumnDefinition>,boolean)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.isAggregate()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.isWildcard()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.newSelectors()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.addColumnForOrdering(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.collectColumnMappings(CFMetaData,List<RawSelector>,SelectorFactories)",1,3,3
"org.apache.cassandra.cql3.selection.Selection.containsACollection()",3,3,4
"org.apache.cassandra.cql3.selection.Selection.containsOnlyStaticColumns()",5,3,6
"org.apache.cassandra.cql3.selection.Selection.containsStaticColumns()",3,1,3
"org.apache.cassandra.cql3.selection.Selection.forColumns(CFMetaData,List<ColumnDefinition>)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.fromSelectors(CFMetaData,List<RawSelector>)",1,2,3
"org.apache.cassandra.cql3.selection.Selection.getColumnIndex(ColumnDefinition)",3,2,3
"org.apache.cassandra.cql3.selection.Selection.getColumnMapping()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.getColumns()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.getFunctions()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.getResultMetadata(boolean)",2,1,2
"org.apache.cassandra.cql3.selection.Selection.getResultSetIndex(ColumnDefinition)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.isWildcard()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.processesSelection(List<RawSelector>)",3,2,3
"org.apache.cassandra.cql3.selection.Selection.resultSetBuilder(boolean)",1,1,1
"org.apache.cassandra.cql3.selection.Selection.toString()",1,1,1
"org.apache.cassandra.cql3.selection.Selection.wildcard(CFMetaData)",1,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.SelectionColumnMapping()",1,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.addMapping(ColumnSpecification,ColumnDefinition)",1,2,2
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.addMapping(ColumnSpecification,Iterable<ColumnDefinition>)",1,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.equals(Object)",3,2,4
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.getColumnSpecifications()",1,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.getMappings()",1,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.hashCode()",1,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.newMapping()",1,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.simpleMapping(Iterable<ColumnDefinition>)",1,2,2
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.toString()",1,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.getColumnSpecification(CFMetaData)",1,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.getFunctions()",1,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.isAggregateSelectorFactory()",1,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.isSimpleSelectorFactory(int)",1,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.isTTLSelectorFactory()",1,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.isWritetimeSelectorFactory()",1,1,1
"org.apache.cassandra.cql3.selection.Selector.isAggregate()",1,1,1
"org.apache.cassandra.cql3.selection.Selector.testAssignment(String,ColumnSpecification)",3,3,5
"org.apache.cassandra.cql3.selection.SelectorFactories.SelectorFactories(List<Selectable>,CFMetaData,List<ColumnDefinition>)",1,2,3
"org.apache.cassandra.cql3.selection.SelectorFactories.addSelectorForOrdering(ColumnDefinition,int)",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.containsTTLSelectorFactory()",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.containsWritetimeSelectorFactory()",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.createFactoriesAndCollectColumnDefinitions(List<Selectable>,CFMetaData,List<ColumnDefinition>)",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.doesAggregation()",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.get(int)",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.getColumnNames()",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.getFunctions()",1,3,3
"org.apache.cassandra.cql3.selection.SelectorFactories.getReturnTypes()",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.iterator()",1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.newInstances()",1,2,2
"org.apache.cassandra.cql3.selection.SelectorFactories.size()",1,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.SimpleSelector(String,int,AbstractType<?>)",1,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.addInput(int,ResultSetBuilder)",1,2,2
"org.apache.cassandra.cql3.selection.SimpleSelector.getOutput(int)",1,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.getType()",1,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.newFactory(ColumnDefinition,int)",1,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.reset()",1,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.toString()",1,1,1
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.WritetimeOrTTLSelector(String,int,boolean)",1,1,1
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.addInput(int,ResultSetBuilder)",2,4,5
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.getOutput(int)",1,1,1
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.getType()",1,1,2
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.newFactory(ColumnDefinition,int,boolean)",1,1,3
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.reset()",1,1,1
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.toString()",1,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.AlterKeyspaceStatement(String,KeyspaceAttributes)",1,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.announceMigration(boolean)",2,1,2
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.validate(ClientState)",6,3,7
"org.apache.cassandra.cql3.statements.AlterRoleStatement.AlterRoleStatement(RoleName,RoleOptions)",1,1,1
"org.apache.cassandra.cql3.statements.AlterRoleStatement.checkAccess(ClientState)",7,6,9
"org.apache.cassandra.cql3.statements.AlterRoleStatement.execute(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.AlterRoleStatement.validate(ClientState)",3,2,3
"org.apache.cassandra.cql3.statements.AlterTableStatement.AlterTableStatement(CFName,Type,Raw,Raw,TableAttributes,Map<Raw, Raw>,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.announceMigration(boolean)",35,41,62
"org.apache.cassandra.cql3.statements.AlterTableStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.toString()",1,1,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.validateAlter(CFMetaData,ColumnDefinition,AbstractType<?>)",6,6,8
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter.AddOrAlter(UTName,boolean,ColumnIdentifier,Raw)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter.doAdd(UserType)",3,3,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter.doAlter(UserType)",3,3,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter.makeUpdatedType(UserType)",1,2,2
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AlterTypeStatement(UTName)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.Renames.Renames(UTName,Map<ColumnIdentifier, ColumnIdentifier>)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.Renames.makeUpdatedType(UserType)",3,3,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.addition(UTName,ColumnIdentifier,Raw)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.alter(UTName,ColumnIdentifier,Raw)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.announceMigration(boolean)",4,14,14
"org.apache.cassandra.cql3.statements.AlterTypeStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.getIdxOfField(UserType,ColumnIdentifier)",3,2,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.prepareKeyspace(ClientState)",2,2,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.renames(UTName,Map<ColumnIdentifier, ColumnIdentifier>)",1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.updateDefinition(CFMetaData,ColumnDefinition,String,ByteBuffer,UserType)",2,1,2
"org.apache.cassandra.cql3.statements.AlterTypeStatement.updateTypes(List<AbstractType<?>>,String,ByteBuffer,UserType)",3,2,4
"org.apache.cassandra.cql3.statements.AlterTypeStatement.updateWith(AbstractType<?>,String,ByteBuffer,UserType)",11,12,18
"org.apache.cassandra.cql3.statements.AlterTypeStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.AlterViewStatement.AlterViewStatement(CFName,TableAttributes)",1,1,1
"org.apache.cassandra.cql3.statements.AlterViewStatement.announceMigration(boolean)",4,1,4
"org.apache.cassandra.cql3.statements.AlterViewStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.AlterViewStatement.checkAccess(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.AlterViewStatement.toString()",1,1,1
"org.apache.cassandra.cql3.statements.AlterViewStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.AuthenticationStatement.checkPermission(ClientState,Permission,RoleResource)",1,2,2
"org.apache.cassandra.cql3.statements.AuthenticationStatement.execute(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.AuthenticationStatement.executeInternal(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.AuthenticationStatement.getBoundTerms()",1,1,1
"org.apache.cassandra.cql3.statements.AuthenticationStatement.prepare()",1,1,1
"org.apache.cassandra.cql3.statements.AuthorizationStatement.execute(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.AuthorizationStatement.executeInternal(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.AuthorizationStatement.getBoundTerms()",1,1,1
"org.apache.cassandra.cql3.statements.AuthorizationStatement.maybeCorrectResource(IResource,ClientState)",3,4,4
"org.apache.cassandra.cql3.statements.AuthorizationStatement.prepare()",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.BatchStatement(int,Type,List<ModificationStatement>,Attributes)",1,3,3
"org.apache.cassandra.cql3.statements.BatchStatement.MultiTableColumnsBuilder.addAll(CFMetaData,PartitionColumns)",1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.MultiTableColumnsBuilder.build()",1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.Parsed.Parsed(Type,Raw,List<Parsed>)",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.Parsed.prepare()",1,7,7
"org.apache.cassandra.cql3.statements.BatchStatement.Parsed.prepareKeyspace(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.checkAccess(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.execute(QueryState,BatchQueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.execute(QueryState,BatchQueryOptions,boolean,long)",4,2,4
"org.apache.cassandra.cql3.statements.BatchStatement.execute(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.executeInternal(QueryState,QueryOptions)",2,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.executeInternalWithConditions(BatchQueryOptions,QueryState)",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.executeInternalWithoutCondition(QueryState,QueryOptions)",1,4,5
"org.apache.cassandra.cql3.statements.BatchStatement.executeWithConditions(BatchQueryOptions,QueryState)",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.executeWithoutConditions(Collection<? extends IMutation>,ConsistencyLevel)",1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.getBoundTerms()",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.getFunctions()",1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.getMutations(BatchQueryOptions,boolean,long)",1,5,7
"org.apache.cassandra.cql3.statements.BatchStatement.getStatements()",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.isCounter()",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.isLogged()",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.makeCasRequest(BatchQueryOptions,QueryState)",5,7,9
"org.apache.cassandra.cql3.statements.BatchStatement.toString()",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.updatedRows()",1,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.validate()",14,11,22
"org.apache.cassandra.cql3.statements.BatchStatement.validate(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.verifyBatchSize(Iterable<PartitionUpdate>)",3,6,6
"org.apache.cassandra.cql3.statements.BatchStatement.verifyBatchType(Iterable<PartitionUpdate>)",1,4,8
"org.apache.cassandra.cql3.statements.Bound.Bound(int)",1,1,1
"org.apache.cassandra.cql3.statements.Bound.isEnd()",1,1,1
"org.apache.cassandra.cql3.statements.Bound.isStart()",1,1,1
"org.apache.cassandra.cql3.statements.Bound.reverse()",1,1,2
"org.apache.cassandra.cql3.statements.CFProperties.getReversableType(ColumnIdentifier,AbstractType<?>)",2,2,3
"org.apache.cassandra.cql3.statements.CFProperties.setCompactStorage()",1,1,1
"org.apache.cassandra.cql3.statements.CFProperties.setOrdering(ColumnIdentifier,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CFProperties.validate()",1,1,1
"org.apache.cassandra.cql3.statements.CFStatement.CFStatement(CFName)",1,1,1
"org.apache.cassandra.cql3.statements.CFStatement.columnFamily()",1,1,1
"org.apache.cassandra.cql3.statements.CFStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.CFStatement.prepareKeyspace(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.CFStatement.prepareKeyspace(String)",1,2,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.CQL3CasRequest(CFMetaData,DecoratedKey,boolean,PartitionColumns,boolean,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ColumnsConditions.ColumnsConditions(Clustering)",1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ColumnsConditions.addConditions(Collection<ColumnCondition>,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ColumnsConditions.appliesTo(FilteredPartition)",4,3,4
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ExistCondition.ExistCondition(Clustering)",1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ExistCondition.appliesTo(FilteredPartition)",1,2,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.NotExistCondition.NotExistCondition(Clustering)",1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.NotExistCondition.appliesTo(FilteredPartition)",1,2,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowCondition.RowCondition(Clustering)",1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowUpdate.RowUpdate(Clustering,ModificationStatement,QueryOptions,long)",1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowUpdate.applyUpdates(FilteredPartition,PartitionUpdate)",1,2,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.addConditions(Clustering,Collection<ColumnCondition>,QueryOptions)",3,2,3
"org.apache.cassandra.cql3.statements.CQL3CasRequest.addExist(Clustering)",2,1,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.addNotExist(Clustering)",3,1,4
"org.apache.cassandra.cql3.statements.CQL3CasRequest.addRowUpdate(Clustering,ModificationStatement,QueryOptions,long)",1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.appliesTo(FilteredPartition)",3,2,3
"org.apache.cassandra.cql3.statements.CQL3CasRequest.columnsToRead()",2,2,4
"org.apache.cassandra.cql3.statements.CQL3CasRequest.makeUpdates(FilteredPartition)",1,3,3
"org.apache.cassandra.cql3.statements.CQL3CasRequest.readCommand(int)",1,3,3
"org.apache.cassandra.cql3.statements.CQL3CasRequest.updatedColumns()",1,2,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.CreateAggregateStatement(FunctionName,List<Raw>,String,Raw,String,Raw,boolean,boolean)",1,1,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.announceMigration(boolean)",8,8,9
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.changeEvent()",1,1,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.checkAccess(ClientState)",1,6,6
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.grantPermissionsToCreator(QueryState)",1,1,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepare()",7,7,9
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepareKeyspace(ClientState)",2,3,5
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepareType(String,Raw)",2,3,3
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.stateArguments(AbstractType<?>,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.stateFuncSig(FunctionName,Raw,List<Raw>)",1,2,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.validate(ClientState)",3,2,4
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.CreateFunctionStatement(FunctionName,String,String,List<ColumnIdentifier>,List<Raw>,Raw,boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.announceMigration(boolean)",7,6,8
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.changeEvent()",1,1,2
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.checkAccess(ClientState)",1,3,3
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.grantPermissionsToCreator(QueryState)",1,1,2
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepare()",2,3,3
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepareKeyspace(ClientState)",2,3,4
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepareType(String,Raw)",2,3,3
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.validate(ClientState)",3,2,4
"org.apache.cassandra.cql3.statements.CreateIndexStatement.CreateIndexStatement(CFName,IndexName,List<Raw>,IndexPropDefs,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CreateIndexStatement.announceMigration(boolean)",4,8,9
"org.apache.cassandra.cql3.statements.CreateIndexStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.CreateIndexStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validate(ClientState)",13,15,22
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateForFrozenCollection(IndexTarget)",2,2,2
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateIsSimpleIndexIfTargetColumnNotCollection(ColumnDefinition,IndexTarget)",2,3,3
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateNotFullIndex(IndexTarget)",2,1,2
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateTargetColumnIsMapIfIndexInvolvesKeys(boolean,IndexTarget)",3,3,4
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateTargetsForMultiColumnIndex(List<IndexTarget>)",4,2,4
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.CreateKeyspaceStatement(String,KeyspaceAttributes,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.announceMigration(boolean)",2,1,3
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.grantPermissionsToCreator(QueryState)",1,1,2
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.validate(ClientState)",5,3,5
"org.apache.cassandra.cql3.statements.CreateRoleStatement.CreateRoleStatement(RoleName,RoleOptions,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CreateRoleStatement.checkAccess(ClientState)",3,3,4
"org.apache.cassandra.cql3.statements.CreateRoleStatement.execute(ClientState)",2,2,3
"org.apache.cassandra.cql3.statements.CreateRoleStatement.grantPermissionsToCreator(ClientState)",1,2,3
"org.apache.cassandra.cql3.statements.CreateRoleStatement.validate(ClientState)",3,3,4
"org.apache.cassandra.cql3.statements.CreateTableStatement.CreateTableStatement(CFName,TableParams,boolean,Set<ColumnIdentifier>)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.RawStatement(CFName,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.addColumnAlias(ColumnIdentifier)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.addDefinition(ColumnIdentifier,Raw,boolean)",1,2,2
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.addKeyAliases(List<ColumnIdentifier>)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.getTypeAndRemove(Map<ColumnIdentifier, AbstractType>,ColumnIdentifier)",3,5,6
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.prepare()",2,2,2
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.prepare(Types)",32,28,40
"org.apache.cassandra.cql3.statements.CreateTableStatement.announceMigration(boolean)",2,1,3
"org.apache.cassandra.cql3.statements.CreateTableStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.getCFMetaData()",1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.grantPermissionsToCreator(QueryState)",1,1,2
"org.apache.cassandra.cql3.statements.CreateTableStatement.metadataBuilder()",1,10,13
"org.apache.cassandra.cql3.statements.CreateTableStatement.params()",1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.CreateTriggerStatement(CFName,String,String,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.announceMigration(boolean)",3,3,3
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.validate(ClientState)",2,2,3
"org.apache.cassandra.cql3.statements.CreateTypeStatement.CreateTypeStatement(UTName,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.addDefinition(ColumnIdentifier,Raw)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.announceMigration(boolean)",2,1,2
"org.apache.cassandra.cql3.statements.CreateTypeStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.checkForDuplicateNames(UserType)",4,4,4
"org.apache.cassandra.cql3.statements.CreateTypeStatement.createType()",1,3,3
"org.apache.cassandra.cql3.statements.CreateTypeStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.prepareKeyspace(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.CreateTypeStatement.validate(ClientState)",5,5,6
"org.apache.cassandra.cql3.statements.CreateViewStatement.CreateViewStatement(CFName,CFName,List<RawSelector>,WhereClause,List<Raw>,List<Raw>,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.CreateViewStatement.add(CFMetaData,Iterable<ColumnIdentifier>,AddColumn)",1,7,7
"org.apache.cassandra.cql3.statements.CreateViewStatement.announceMigration(boolean)",25,22,38
"org.apache.cassandra.cql3.statements.CreateViewStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.CreateViewStatement.checkAccess(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.CreateViewStatement.getColumnIdentifier(CFMetaData,Set<ColumnIdentifier>,boolean,Raw,List<ColumnIdentifier>,StatementRestrictions)",3,5,6
"org.apache.cassandra.cql3.statements.CreateViewStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DeleteStatement.DeleteStatement(int,CFMetaData,Operations,StatementRestrictions,Conditions,Attributes)",1,1,1
"org.apache.cassandra.cql3.statements.DeleteStatement.Parsed.Parsed(CFName,Raw,List<RawDeletion>,WhereClause,List<Pair<Raw, Raw>>,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DeleteStatement.Parsed.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",1,3,3
"org.apache.cassandra.cql3.statements.DeleteStatement.addUpdateForKey(PartitionUpdate,Clustering,UpdateParameters)",1,9,9
"org.apache.cassandra.cql3.statements.DeleteStatement.addUpdateForKey(PartitionUpdate,Slice,UpdateParameters)",1,2,2
"org.apache.cassandra.cql3.statements.DropAggregateStatement.DropAggregateStatement(FunctionName,List<Raw>,boolean,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropAggregateStatement.announceMigration(boolean)",8,13,16
"org.apache.cassandra.cql3.statements.DropAggregateStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.DropAggregateStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropAggregateStatement.prepareKeyspace(ClientState)",2,3,4
"org.apache.cassandra.cql3.statements.DropAggregateStatement.prepareType(String,Raw)",2,3,3
"org.apache.cassandra.cql3.statements.DropAggregateStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropFunctionStatement.DropFunctionStatement(FunctionName,List<Raw>,boolean,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropFunctionStatement.announceMigration(boolean)",4,4,4
"org.apache.cassandra.cql3.statements.DropFunctionStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.DropFunctionStatement.checkAccess(ClientState)",3,3,3
"org.apache.cassandra.cql3.statements.DropFunctionStatement.findFunction()",4,4,7
"org.apache.cassandra.cql3.statements.DropFunctionStatement.getMissingFunctionError()",1,2,2
"org.apache.cassandra.cql3.statements.DropFunctionStatement.prepare()",3,3,4
"org.apache.cassandra.cql3.statements.DropFunctionStatement.prepareKeyspace(ClientState)",2,3,4
"org.apache.cassandra.cql3.statements.DropFunctionStatement.validate(ClientState)",2,4,4
"org.apache.cassandra.cql3.statements.DropIndexStatement.DropIndexStatement(IndexName,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropIndexStatement.announceMigration(boolean)",2,1,2
"org.apache.cassandra.cql3.statements.DropIndexStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.DropIndexStatement.checkAccess(ClientState)",2,1,2
"org.apache.cassandra.cql3.statements.DropIndexStatement.columnFamily()",2,1,3
"org.apache.cassandra.cql3.statements.DropIndexStatement.execute(QueryState,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.statements.DropIndexStatement.lookupIndexedTable()",4,3,4
"org.apache.cassandra.cql3.statements.DropIndexStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.DropKeyspaceStatement(String,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.announceMigration(boolean)",2,1,3
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropRoleStatement.DropRoleStatement(RoleName,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropRoleStatement.checkAccess(ClientState)",2,3,4
"org.apache.cassandra.cql3.statements.DropRoleStatement.execute(ClientState)",2,2,3
"org.apache.cassandra.cql3.statements.DropRoleStatement.validate(ClientState)",3,4,5
"org.apache.cassandra.cql3.statements.DropTableStatement.DropTableStatement(CFName,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropTableStatement.announceMigration(boolean)",5,6,9
"org.apache.cassandra.cql3.statements.DropTableStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.DropTableStatement.checkAccess(ClientState)",2,1,3
"org.apache.cassandra.cql3.statements.DropTableStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropTriggerStatement.DropTriggerStatement(CFName,String,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropTriggerStatement.announceMigration(boolean)",3,3,3
"org.apache.cassandra.cql3.statements.DropTriggerStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.DropTriggerStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropTriggerStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.DropTypeStatement(UTName,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.announceMigration(boolean)",2,1,2
"org.apache.cassandra.cql3.statements.DropTypeStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.isUsedBy(AbstractType<?>)",11,10,13
"org.apache.cassandra.cql3.statements.DropTypeStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.prepareKeyspace(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.DropTypeStatement.validate(ClientState)",13,14,14
"org.apache.cassandra.cql3.statements.DropViewStatement.DropViewStatement(CFName,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.DropViewStatement.announceMigration(boolean)",2,1,3
"org.apache.cassandra.cql3.statements.DropViewStatement.changeEvent()",1,1,1
"org.apache.cassandra.cql3.statements.DropViewStatement.checkAccess(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.DropViewStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.GrantPermissionsStatement.GrantPermissionsStatement(Set<Permission>,IResource,RoleName)",1,1,1
"org.apache.cassandra.cql3.statements.GrantPermissionsStatement.execute(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.GrantRoleStatement.GrantRoleStatement(RoleName,RoleName)",1,1,1
"org.apache.cassandra.cql3.statements.GrantRoleStatement.execute(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.IndexPropDefs.getOptions()",1,1,1
"org.apache.cassandra.cql3.statements.IndexPropDefs.getRawOptions()",1,2,2
"org.apache.cassandra.cql3.statements.IndexPropDefs.validate()",6,4,9
"org.apache.cassandra.cql3.statements.IndexTarget.IndexTarget(ColumnIdentifier,Type)",1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.Raw(Raw,Type)",1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.fullCollection(Raw)",1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.keysAndValuesOf(Raw)",1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.keysOf(Raw)",1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.prepare(CFMetaData)",2,2,4
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.simpleIndexOn(Raw)",1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.valuesOf(Raw)",1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Type.fromString(String)",6,5,6
"org.apache.cassandra.cql3.statements.IndexTarget.Type.toString()",7,2,7
"org.apache.cassandra.cql3.statements.IndexTarget.asCqlString(CFMetaData)",2,2,2
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.asAlteredKeyspaceParams(KeyspaceParams)",1,2,2
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.asNewKeyspaceParams()",1,1,1
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.getAllReplicationOptions()",1,2,2
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.getReplicationOptions()",1,1,1
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.getReplicationStrategyClass()",1,1,1
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.validate()",1,1,1
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.ListPermissionsStatement(Set<Permission>,IResource,RoleName,boolean)",1,2,2
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.execute(ClientState)",1,3,4
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.list(ClientState,IResource)",1,2,2
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.resultMessage(List<PermissionDetails>)",2,2,3
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.validate(ClientState)",4,5,5
"org.apache.cassandra.cql3.statements.ListRolesStatement.ListRolesStatement()",1,1,1
"org.apache.cassandra.cql3.statements.ListRolesStatement.ListRolesStatement(RoleName,boolean)",1,2,2
"org.apache.cassandra.cql3.statements.ListRolesStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.ListRolesStatement.execute(ClientState)",5,5,5
"org.apache.cassandra.cql3.statements.ListRolesStatement.formatResults(List<RoleResource>)",1,2,2
"org.apache.cassandra.cql3.statements.ListRolesStatement.resultMessage(Set<RoleResource>)",2,1,2
"org.apache.cassandra.cql3.statements.ListRolesStatement.validate(ClientState)",2,3,3
"org.apache.cassandra.cql3.statements.ListUsersStatement.formatResults(List<RoleResource>)",3,2,3
"org.apache.cassandra.cql3.statements.ModificationStatement.ModificationStatement(StatementType,int,CFMetaData,Operations,StatementRestrictions,Conditions,Attributes)",1,8,8
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.Parsed(CFName,StatementType,Raw,List<Pair<Raw, Raw>>,boolean,boolean)",1,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.getColumnDefinition(CFMetaData,Raw)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.newRestrictions(CFMetaData,VariableSpecifications,Operations,WhereClause,Conditions)",2,1,2
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepare()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepare(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepareColumnConditions(CFMetaData,VariableSpecifications)",1,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepareConditions(CFMetaData,VariableSpecifications)",4,3,4
"org.apache.cassandra.cql3.statements.ModificationStatement.addConditions(Clustering,CQL3CasRequest,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.addUpdates(UpdatesCollector,QueryOptions,boolean,long)",3,9,10
"org.apache.cassandra.cql3.statements.ModificationStatement.allOperations()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.appliesOnlyToStaticColumns()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.appliesOnlyToStaticColumns(Operations,Conditions)",1,4,4
"org.apache.cassandra.cql3.statements.ModificationStatement.asMaterializedMap(PartitionIterator)",1,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.buildCasFailureResultSet(RowIterator,Iterable<ColumnDefinition>,boolean,QueryOptions)",1,4,4
"org.apache.cassandra.cql3.statements.ModificationStatement.buildCasResultSet(RowIterator,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.buildCasResultSet(String,String,RowIterator,Iterable<ColumnDefinition>,boolean,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.buildPartitionKeyNames(QueryOptions)",1,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.casInternal(CQL3CasRequest,QueryState)",2,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.checkAccess(ClientState)",1,5,5
"org.apache.cassandra.cql3.statements.ModificationStatement.columnFamily()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.conditionColumns()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.createClustering(QueryOptions)",2,3,3
"org.apache.cassandra.cql3.statements.ModificationStatement.createSlice(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.execute(QueryState,QueryOptions)",2,2,3
"org.apache.cassandra.cql3.statements.ModificationStatement.executeInternal(QueryState,QueryOptions)",1,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithCondition(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(QueryState,QueryOptions)",1,4,5
"org.apache.cassandra.cql3.statements.ModificationStatement.executeWithCondition(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.executeWithoutCondition(QueryState,QueryOptions)",1,3,3
"org.apache.cassandra.cql3.statements.ModificationStatement.getBoundTerms()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getColumnsWithConditions()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getFunctions()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getMutations(QueryOptions,boolean,long)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getRegularOperations()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getStaticOperations()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getTimeToLive(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getTimestamp(long,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.hasConditions()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.hasIfExistCondition()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.hasIfNotExistCondition()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.isCounter()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.isTimestampSet()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.isView()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.makeCasRequest(QueryState,QueryOptions)",1,1,3
"org.apache.cassandra.cql3.statements.ModificationStatement.makeUpdateParameters(Collection<ByteBuffer>,ClusteringIndexFilter,QueryOptions,DataLimits,boolean,long)",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.makeUpdateParameters(Collection<ByteBuffer>,NavigableSet<Clustering>,QueryOptions,boolean,long)",2,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.merge(ResultSet,ResultSet)",3,3,4
"org.apache.cassandra.cql3.statements.ModificationStatement.readRequiredLists(Collection<ByteBuffer>,ClusteringIndexFilter,DataLimits,boolean,ConsistencyLevel)",3,4,5
"org.apache.cassandra.cql3.statements.ModificationStatement.requiresRead()",3,2,3
"org.apache.cassandra.cql3.statements.ModificationStatement.toSlices(SortedSet<Bound>,SortedSet<Bound>)",1,3,3
"org.apache.cassandra.cql3.statements.ModificationStatement.updatedColumns()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.updatesRegularRows()",1,2,2
"org.apache.cassandra.cql3.statements.ModificationStatement.updatesStaticRow()",1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.validate(ClientState)",1,4,4
"org.apache.cassandra.cql3.statements.ParsedStatement.Prepared.Prepared(CQLStatement)",1,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.Prepared.Prepared(CQLStatement,List<ColumnSpecification>,Short[])",1,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.Prepared.Prepared(CQLStatement,VariableSpecifications,Short[])",1,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.getBoundVariables()",1,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.getFunctions()",1,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.setBoundVariables(List<ColumnIdentifier>)",1,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.setBoundVariables(VariableSpecifications)",1,1,1
"org.apache.cassandra.cql3.statements.PermissionsManagementStatement.PermissionsManagementStatement(Set<Permission>,IResource,RoleName)",1,1,1
"org.apache.cassandra.cql3.statements.PermissionsManagementStatement.checkAccess(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.PermissionsManagementStatement.validate(ClientState)",4,4,5
"org.apache.cassandra.cql3.statements.PropertyDefinitions.addProperty(String,Map<String, String>)",2,2,2
"org.apache.cassandra.cql3.statements.PropertyDefinitions.addProperty(String,String)",2,2,2
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getBoolean(String,Boolean)",1,2,2
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getDouble(String,double)",2,3,3
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getInt(String,Integer)",1,1,1
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getMap(String)",3,2,3
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getSimple(String)",3,2,3
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getString(String,String)",1,1,2
"org.apache.cassandra.cql3.statements.PropertyDefinitions.hasProperty(String)",1,1,1
"org.apache.cassandra.cql3.statements.PropertyDefinitions.toInt(String,String,Integer)",2,3,3
"org.apache.cassandra.cql3.statements.PropertyDefinitions.validate(Set<String>,Set<String>)",4,3,4
"org.apache.cassandra.cql3.statements.RequestValidations.RequestValidations()",1,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkBindValueSet(ByteBuffer,String,Object...)",1,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkContainsNoDuplicates(List<?>,String)",2,2,2
"org.apache.cassandra.cql3.statements.RequestValidations.checkContainsOnly(List<E>,List<E>,String)",2,2,2
"org.apache.cassandra.cql3.statements.RequestValidations.checkFalse(boolean,String)",1,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkFalse(boolean,String,Object...)",1,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkNotNull(T,String,Object...)",1,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkNull(T,String)",1,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkNull(T,String,Object...)",1,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkTrue(boolean,String)",1,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkTrue(boolean,String,Object...)",2,2,2
"org.apache.cassandra.cql3.statements.RequestValidations.invalidRequest(String,Object...)",1,1,1
"org.apache.cassandra.cql3.statements.RevokePermissionsStatement.RevokePermissionsStatement(Set<Permission>,IResource,RoleName)",1,1,1
"org.apache.cassandra.cql3.statements.RevokePermissionsStatement.execute(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.RevokeRoleStatement.RevokeRoleStatement(RoleName,RoleName)",1,1,1
"org.apache.cassandra.cql3.statements.RevokeRoleStatement.execute(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.RoleManagementStatement.RoleManagementStatement(RoleName,RoleName)",1,1,1
"org.apache.cassandra.cql3.statements.RoleManagementStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.RoleManagementStatement.validate(ClientState)",3,3,3
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.SchemaAlteringStatement()",1,1,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.SchemaAlteringStatement(CFName)",1,1,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.execute(QueryState,QueryOptions)",2,5,8
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.executeInternal(QueryState,QueryOptions)",2,1,3
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.getBoundTerms()",1,1,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.grantPermissionsToCreator(QueryState)",1,1,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.prepare()",1,1,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.prepareKeyspace(ClientState)",1,2,2
"org.apache.cassandra.cql3.statements.SelectStatement.CompositeComparator.CompositeComparator(List<Comparator<ByteBuffer>>,List<Integer>)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.CompositeComparator.compare(List<ByteBuffer>,List<ByteBuffer>)",3,2,3
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.InternalPager.InternalPager(QueryPager,ReadOrderGroup)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.InternalPager.fetchPage(int)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.NormalPager.NormalPager(QueryPager,ConsistencyLevel,ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.NormalPager.fetchPage(int)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.Pager(QueryPager)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.forDistributedQuery(QueryPager,ConsistencyLevel,ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.forInternalQuery(QueryPager,ReadOrderGroup)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.isExhausted()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.state()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Parameters.Parameters(Map<Raw, Boolean>,boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.RawStatement(CFName,Parameters,List<RawSelector>,WhereClause,Raw)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.checkNeedsFiltering(StatementRestrictions)",1,4,4
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.containsAlias(ColumnIdentifier)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.getOrderingComparator(CFMetaData,Selection,StatementRestrictions)",2,3,4
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.getOrderingIndex(CFMetaData,Selection)",1,4,4
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.handleUnrecognizedOrderingColumn(ColumnIdentifier)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.isReversed(CFMetaData)",4,4,6
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.limitReceiver()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.prepare()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.prepare(boolean)",1,5,5
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.prepareLimit(VariableSpecifications)",2,1,2
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.prepareRestrictions(CFMetaData,VariableSpecifications,Selection,boolean)",2,3,3
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.toString()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.validateDistinctSelection(CFMetaData,Selection,StatementRestrictions)",2,4,5
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.verifyOrderingIsAllowed(StatementRestrictions)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.SelectStatement(CFMetaData,int,Parameters,Selection,StatementRestrictions,boolean,Comparator<List<ByteBuffer>>,Term)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.SingleColumnComparator.SingleColumnComparator(int,Comparator<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.SingleColumnComparator.compare(List<ByteBuffer>,List<ByteBuffer>)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.addValue(ResultSetBuilder,ColumnDefinition,Row,int,int)",1,4,4
"org.apache.cassandra.cql3.statements.SelectStatement.checkAccess(ClientState)",1,4,4
"org.apache.cassandra.cql3.statements.SelectStatement.columnFamily()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.execute(Pager,QueryOptions,int,int)",2,3,3
"org.apache.cassandra.cql3.statements.SelectStatement.execute(QueryState,QueryOptions)",2,3,3
"org.apache.cassandra.cql3.statements.SelectStatement.execute(ReadQuery,QueryOptions,QueryState,int)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.executeInternal(QueryState,QueryOptions)",2,3,3
"org.apache.cassandra.cql3.statements.SelectStatement.forSelection(CFMetaData,Selection)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.gatherQueriedColumns()",2,4,4
"org.apache.cassandra.cql3.statements.SelectStatement.getBoundTerms()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getComponents(CFMetaData,DecoratedKey)",2,2,2
"org.apache.cassandra.cql3.statements.SelectStatement.getFunctions()",1,2,2
"org.apache.cassandra.cql3.statements.SelectStatement.getLimit(QueryOptions)",4,7,8
"org.apache.cassandra.cql3.statements.SelectStatement.getPageSize(QueryOptions)",1,2,3
"org.apache.cassandra.cql3.statements.SelectStatement.getQuery(QueryOptions,int)",2,3,3
"org.apache.cassandra.cql3.statements.SelectStatement.getRangeCommand(QueryOptions,DataLimits,int)",2,2,3
"org.apache.cassandra.cql3.statements.SelectStatement.getRequestedRows(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getRestrictions()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getResultMetadata()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getRowFilter(QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getSelection()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getSliceCommands(QueryOptions,DataLimits,int)",3,2,4
"org.apache.cassandra.cql3.statements.SelectStatement.internalReadForView(DecoratedKey,int)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.keyspace()",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.makeClusteringIndexFilter(QueryOptions)",5,4,7
"org.apache.cassandra.cql3.statements.SelectStatement.makeSlices(QueryOptions)",4,5,6
"org.apache.cassandra.cql3.statements.SelectStatement.needsPostQueryOrdering()",1,2,2
"org.apache.cassandra.cql3.statements.SelectStatement.orderResults(ResultSet)",2,2,3
"org.apache.cassandra.cql3.statements.SelectStatement.pageAggregateQuery(Pager,QueryOptions,int,int)",1,5,5
"org.apache.cassandra.cql3.statements.SelectStatement.process(PartitionIterator,QueryOptions,int)",1,2,2
"org.apache.cassandra.cql3.statements.SelectStatement.process(PartitionIterator,int)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.processPartition(RowIterator,QueryOptions,ResultSetBuilder,int)",4,11,16
"org.apache.cassandra.cql3.statements.SelectStatement.processResults(PartitionIterator,QueryOptions,int)",1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.StatementType.allowClusteringColumnSlices()",1,1,1
"org.apache.cassandra.cql3.statements.StatementType.allowNonPrimaryKeyInWhereClause()",1,1,1
"org.apache.cassandra.cql3.statements.StatementType.allowPartitionKeyRanges()",1,1,1
"org.apache.cassandra.cql3.statements.StatementType.allowUseOfSecondaryIndices()",1,1,1
"org.apache.cassandra.cql3.statements.StatementType.isDelete()",1,1,1
"org.apache.cassandra.cql3.statements.StatementType.isInsert()",1,1,1
"org.apache.cassandra.cql3.statements.StatementType.isSelect()",1,1,1
"org.apache.cassandra.cql3.statements.StatementType.isUpdate()",1,1,1
"org.apache.cassandra.cql3.statements.TableAttributes.asAlteredTableParams(TableParams)",1,1,1
"org.apache.cassandra.cql3.statements.TableAttributes.asNewTableParams()",1,1,1
"org.apache.cassandra.cql3.statements.TableAttributes.build(Builder)",1,16,16
"org.apache.cassandra.cql3.statements.TableAttributes.getDeprecatedCrcCheckChance(Map<String, String>)",1,2,2
"org.apache.cassandra.cql3.statements.TableAttributes.getDouble(Option)",1,2,2
"org.apache.cassandra.cql3.statements.TableAttributes.getInt(Option)",1,2,2
"org.apache.cassandra.cql3.statements.TableAttributes.getMap(Option)",2,2,2
"org.apache.cassandra.cql3.statements.TableAttributes.getString(Option)",2,2,2
"org.apache.cassandra.cql3.statements.TableAttributes.hasOption(Option)",1,1,1
"org.apache.cassandra.cql3.statements.TableAttributes.validate()",1,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.TruncateStatement(CFName)",1,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.execute(QueryState,QueryOptions)",2,1,3
"org.apache.cassandra.cql3.statements.TruncateStatement.executeInternal(QueryState,QueryOptions)",1,1,2
"org.apache.cassandra.cql3.statements.TruncateStatement.getBoundTerms()",1,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.prepare()",1,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsert.ParsedInsert(CFName,Raw,List<Raw>,List<Raw>,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsert.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",1,4,5
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsertJson.ParsedInsertJson(CFName,Raw,Raw,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsertJson.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",1,4,5
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedUpdate.ParsedUpdate(CFName,Raw,List<Pair<Raw, RawUpdate>>,WhereClause,List<Pair<Raw, Raw>>,boolean)",1,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedUpdate.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",1,2,2
"org.apache.cassandra.cql3.statements.UpdateStatement.UpdateStatement(StatementType,int,CFMetaData,Operations,StatementRestrictions,Conditions,Attributes)",1,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.addUpdateForKey(PartitionUpdate,Clustering,UpdateParameters)",1,9,9
"org.apache.cassandra.cql3.statements.UpdateStatement.addUpdateForKey(PartitionUpdate,Slice,UpdateParameters)",1,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.requireFullClusteringKey()",1,1,1
"org.apache.cassandra.cql3.statements.UpdatesCollector.UpdatesCollector(Map<UUID, PartitionColumns>,int)",1,1,1
"org.apache.cassandra.cql3.statements.UpdatesCollector.getMutation(CFMetaData,DecoratedKey,ConsistencyLevel)",2,3,4
"org.apache.cassandra.cql3.statements.UpdatesCollector.getPartitionUpdate(CFMetaData,DecoratedKey,ConsistencyLevel)",1,2,2
"org.apache.cassandra.cql3.statements.UpdatesCollector.keyspaceMap(String)",1,2,2
"org.apache.cassandra.cql3.statements.UpdatesCollector.toMutations()",2,3,3
"org.apache.cassandra.cql3.statements.UpdatesCollector.validateIndexedColumns()",1,4,4
"org.apache.cassandra.cql3.statements.UseStatement.UseStatement(String)",1,1,1
"org.apache.cassandra.cql3.statements.UseStatement.checkAccess(ClientState)",1,1,1
"org.apache.cassandra.cql3.statements.UseStatement.execute(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.UseStatement.executeInternal(QueryState,QueryOptions)",1,1,1
"org.apache.cassandra.cql3.statements.UseStatement.getBoundTerms()",1,1,1
"org.apache.cassandra.cql3.statements.UseStatement.prepare()",1,1,1
"org.apache.cassandra.cql3.statements.UseStatement.validate(ClientState)",1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.AbstractClusteringPrefix(Kind,ByteBuffer[])",1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.clustering()",1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.dataSize()",1,3,3
"org.apache.cassandra.db.AbstractClusteringPrefix.digest(MessageDigest)",1,3,3
"org.apache.cassandra.db.AbstractClusteringPrefix.equals(Object)",5,3,6
"org.apache.cassandra.db.AbstractClusteringPrefix.get(int)",1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.getRawValues()",1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.hashCode()",1,2,2
"org.apache.cassandra.db.AbstractClusteringPrefix.kind()",1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.size()",1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.unsharedHeapSize()",1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.unsharedHeapSizeExcludingData()",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.AbstractReadCommandBuilder(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.PartitionRangeBuilder(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.build()",1,3,9
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.fromKeyExcl(Object...)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.fromKeyIncl(Object...)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.makeKey(CFMetaData,Object...)",2,1,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.toKeyExcl(Object...)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.toKeyIncl(Object...)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionBuilder.SinglePartitionBuilder(ColumnFamilyStore,DecoratedKey)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionBuilder.build()",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder.SinglePartitionSliceBuilder(ColumnFamilyStore,DecoratedKey)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder.addSlice(Slice)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder.build()",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder.makeFilter()",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.bb(Object,AbstractType<?>)",1,2,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.columns(String...)",1,2,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.filterOn(String,Operator,Object)",1,3,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.forKeys(AbstractType<?>)",2,2,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.forValues(AbstractType<?>)",3,3,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.fromExcl(Object...)",1,1,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.fromIncl(Object...)",1,1,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.includeRow(Object...)",1,1,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.makeColumnFilter()",2,4,4
"org.apache.cassandra.db.AbstractReadCommandBuilder.makeFilter()",2,2,4
"org.apache.cassandra.db.AbstractReadCommandBuilder.makeLimits()",1,3,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.reverse()",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.toExcl(Object...)",1,1,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.toIncl(Object...)",1,1,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.withLimit(int)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.withNowInSeconds(int)",1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.withPagingLimit(int)",1,1,1
"org.apache.cassandra.db.BlacklistedDirectories.BlacklistedDirectories()",1,2,2
"org.apache.cassandra.db.BlacklistedDirectories.getDirectory(File)",4,3,4
"org.apache.cassandra.db.BlacklistedDirectories.getUnreadableDirectories()",1,1,1
"org.apache.cassandra.db.BlacklistedDirectories.getUnwritableDirectories()",1,1,1
"org.apache.cassandra.db.BlacklistedDirectories.isUnreadable(File)",1,1,1
"org.apache.cassandra.db.BlacklistedDirectories.isUnwritable(File)",1,1,1
"org.apache.cassandra.db.BlacklistedDirectories.maybeMarkUnreadable(File)",2,2,2
"org.apache.cassandra.db.BlacklistedDirectories.maybeMarkUnwritable(File)",2,2,2
"org.apache.cassandra.db.BufferDecoratedKey.BufferDecoratedKey(Token,ByteBuffer)",1,1,1
"org.apache.cassandra.db.BufferDecoratedKey.getKey()",1,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.ArrayBackedBuilder(ClusteringComparator)",1,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.add(ByteBuffer)",2,1,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.add(Object)",1,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.build()",1,1,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildBound(boolean,boolean)",2,2,4
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildBoundWith(ByteBuffer,boolean,boolean)",1,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildBoundWith(List<ByteBuffer>,boolean,boolean)",1,1,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildSlice()",2,1,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildWith(ByteBuffer)",1,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildWith(List<ByteBuffer>)",1,1,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.comparator()",1,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.count()",1,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.isDone()",1,2,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.remainingCount()",1,1,1
"org.apache.cassandra.db.CBuilder.create(ClusteringComparator)",1,1,1
"org.apache.cassandra.db.CachedHashDecoratedKey.CachedHashDecoratedKey(Token,ByteBuffer)",1,1,1
"org.apache.cassandra.db.CachedHashDecoratedKey.filterHash(long[])",1,2,2
"org.apache.cassandra.db.ClockAndCount.ClockAndCount(long,long)",1,1,1
"org.apache.cassandra.db.ClockAndCount.create(long,long)",1,1,1
"org.apache.cassandra.db.ClockAndCount.equals(Object)",3,1,4
"org.apache.cassandra.db.ClockAndCount.hashCode()",1,1,1
"org.apache.cassandra.db.ClockAndCount.toString()",1,1,1
"org.apache.cassandra.db.ClockAndCount.unsharedHeapSize()",1,1,1
"org.apache.cassandra.db.Clustering.Clustering(ByteBuffer...)",1,1,1
"org.apache.cassandra.db.Clustering.Serializer.deserialize(ByteBuffer,int,List<AbstractType<?>>)",1,1,2
"org.apache.cassandra.db.Clustering.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",2,1,2
"org.apache.cassandra.db.Clustering.Serializer.serialize(Clustering,DataOutputPlus,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.Clustering.Serializer.serialize(Clustering,int,List<AbstractType<?>>)",1,1,2
"org.apache.cassandra.db.Clustering.Serializer.serializedSize(Clustering,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.Clustering.copy(AbstractAllocator)",2,3,4
"org.apache.cassandra.db.Clustering.kind()",1,1,1
"org.apache.cassandra.db.Clustering.toCQLString(CFMetaData)",1,2,3
"org.apache.cassandra.db.Clustering.toString(CFMetaData)",1,3,4
"org.apache.cassandra.db.ClusteringComparator.ClusteringComparator(AbstractType<?>...)",1,1,1
"org.apache.cassandra.db.ClusteringComparator.ClusteringComparator(List<AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.ClusteringComparator.compare(Clusterable,Clusterable)",1,1,1
"org.apache.cassandra.db.ClusteringComparator.compare(Clustering,Clustering)",3,2,3
"org.apache.cassandra.db.ClusteringComparator.compare(ClusteringPrefix,ClusteringPrefix)",4,4,5
"org.apache.cassandra.db.ClusteringComparator.compareComponent(int,ByteBuffer,ByteBuffer)",3,1,4
"org.apache.cassandra.db.ClusteringComparator.equals(Object)",3,1,3
"org.apache.cassandra.db.ClusteringComparator.hashCode()",1,1,1
"org.apache.cassandra.db.ClusteringComparator.indexComparator(boolean)",1,1,2
"org.apache.cassandra.db.ClusteringComparator.isCompatibleWith(ClusteringComparator)",5,2,5
"org.apache.cassandra.db.ClusteringComparator.make(Object...)",2,4,4
"org.apache.cassandra.db.ClusteringComparator.reversed()",1,1,1
"org.apache.cassandra.db.ClusteringComparator.rowComparator()",1,1,1
"org.apache.cassandra.db.ClusteringComparator.size()",1,1,1
"org.apache.cassandra.db.ClusteringComparator.subtype(int)",1,1,1
"org.apache.cassandra.db.ClusteringComparator.subtypes()",1,1,1
"org.apache.cassandra.db.ClusteringComparator.toString()",1,1,1
"org.apache.cassandra.db.ClusteringComparator.validate(ClusteringPrefix)",1,3,3
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.Deserializer(ClusteringComparator,DataInputPlus,SerializationHeader)",1,1,1
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.compareNextTo(Bound)",6,3,6
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.deserializeAll()",2,1,2
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.deserializeNextBound()",1,1,1
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.deserializeNextClustering()",1,1,1
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.deserializeOne()",2,4,5
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.hasComponent(int)",2,2,3
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.prepare(int,int)",1,3,5
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.skipNext()",1,5,5
"org.apache.cassandra.db.ClusteringPrefix.Kind.Kind(int,int)",1,1,1
"org.apache.cassandra.db.ClusteringPrefix.Kind.closeBoundOfBoundary(boolean)",1,1,4
"org.apache.cassandra.db.ClusteringPrefix.Kind.compare(Kind,Kind)",1,1,1
"org.apache.cassandra.db.ClusteringPrefix.Kind.invert()",8,2,8
"org.apache.cassandra.db.ClusteringPrefix.Kind.isBound()",2,2,2
"org.apache.cassandra.db.ClusteringPrefix.Kind.isBoundary()",2,2,2
"org.apache.cassandra.db.ClusteringPrefix.Kind.isClose(boolean)",1,3,3
"org.apache.cassandra.db.ClusteringPrefix.Kind.isEnd()",3,2,3
"org.apache.cassandra.db.ClusteringPrefix.Kind.isOpen(boolean)",1,3,3
"org.apache.cassandra.db.ClusteringPrefix.Kind.isStart()",3,2,3
"org.apache.cassandra.db.ClusteringPrefix.Kind.openBoundOfBoundary(boolean)",1,1,4
"org.apache.cassandra.db.ClusteringPrefix.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",2,2,2
"org.apache.cassandra.db.ClusteringPrefix.Serializer.deserializeValuesWithoutSize(DataInputPlus,int,int,List<AbstractType<?>>)",1,5,5
"org.apache.cassandra.db.ClusteringPrefix.Serializer.isEmpty(long,int)",1,1,1
"org.apache.cassandra.db.ClusteringPrefix.Serializer.isNull(long,int)",1,1,1
"org.apache.cassandra.db.ClusteringPrefix.Serializer.makeHeader(ClusteringPrefix,int,int)",1,3,4
"org.apache.cassandra.db.ClusteringPrefix.Serializer.serialize(ClusteringPrefix,DataOutputPlus,int,List<AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.ClusteringPrefix.Serializer.serializeValuesWithoutSize(ClusteringPrefix,DataOutputPlus,int,List<AbstractType<?>>)",1,5,5
"org.apache.cassandra.db.ClusteringPrefix.Serializer.serializedSize(ClusteringPrefix,int,List<AbstractType<?>>)",2,2,2
"org.apache.cassandra.db.ClusteringPrefix.Serializer.valuesWithoutSizeSerializedSize(ClusteringPrefix,int,List<AbstractType<?>>)",3,4,5
"org.apache.cassandra.db.ColumnFamilyStore.ColumnFamilyStore(Keyspace,String,int,CFMetaData,Directories,boolean)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.ColumnFamilyStore(Keyspace,String,int,CFMetaData,Directories,boolean,boolean)",3,8,13
"org.apache.cassandra.db.ColumnFamilyStore.Flush.Flush(boolean)",3,5,6
"org.apache.cassandra.db.ColumnFamilyStore.Flush.reclaim(Memtable)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.Flush.run()",2,6,6
"org.apache.cassandra.db.ColumnFamilyStore.FlushLargestColumnFamily.run()",1,4,5
"org.apache.cassandra.db.ColumnFamilyStore.PostFlush.PostFlush(boolean,Barrier,ReplayPosition)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.PostFlush.run()",1,3,4
"org.apache.cassandra.db.ColumnFamilyStore.RefViewFragment.RefViewFragment(List<SSTableReader>,Iterable<Memtable>,Refs<SSTableReader>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.RefViewFragment.close()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.RefViewFragment.release()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.ViewFragment.ViewFragment(List<SSTableReader>,Iterable<Memtable>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.addInitialDirectories(DataDirectory[])",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.addSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.addSSTables(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.all()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.apply(PartitionUpdate,UpdateTransaction,Group,ReplayPosition)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.beginLocalSampling(String,int)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.cleanupCache()",1,8,8
"org.apache.cassandra.db.ColumnFamilyStore.clearEphemeralSnapshots(Directories)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.clearSnapshot(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.clearUnsafe()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.concatWithIndexes()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.containsCachedParition(DecoratedKey)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(Keyspace,String,CFMetaData,boolean)",3,4,4
"org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(Keyspace,String,boolean)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.createEphemeralSnapshotMarkerFile(String)",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.createSSTableMultiWriter(Descriptor,long,long,MetadataCollector,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.createSSTableMultiWriter(Descriptor,long,long,int,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.disableAutoCompaction()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.discardSSTables(long)",2,3,4
"org.apache.cassandra.db.ColumnFamilyStore.dumpMemtable()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.enableAutoCompaction()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.enableAutoCompaction(boolean)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.estimateKeys()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.estimatedKeysForRange(Range<Token>)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.finishLocalSampling(String,int)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.forceBlockingFlush()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceCleanup()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceFlush()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceFlush(ReplayPosition)",2,3,3
"org.apache.cassandra.db.ColumnFamilyStore.forceMajorCompaction()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceMajorCompaction(boolean)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.gcBefore(int)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getAndReferenceOverlappingSSTables(SSTableSet,Iterable<SSTableReader>)",3,2,3
"org.apache.cassandra.db.ColumnFamilyStore.getBackgroundCompactionTaskSubmitter()",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.getBuiltIndexes()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCachedCounter(ByteBuffer,Clustering,ColumnDefinition,CellPath)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.getColumnFamilyName()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCompactionParameters()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCompactionParametersJson()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCompactionStrategyManager()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getComparator()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCompressionParameters()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCrcCheckChance()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getDirectories()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getDroppableTombstoneRatio()",1,2,3
"org.apache.cassandra.db.ColumnFamilyStore.getExpectedCompactedFileSize(Iterable<SSTableReader>,OperationType)",2,4,6
"org.apache.cassandra.db.ColumnFamilyStore.getLiveSSTables()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMaxSizeFile(Iterable<SSTableReader>)",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.getMaximumCompactionThreshold()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMeanColumns()",1,2,3
"org.apache.cassandra.db.ColumnFamilyStore.getMeanPartitionSize()",1,2,3
"org.apache.cassandra.db.ColumnFamilyStore.getMinimumCompactionThreshold()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getOverlappingSSTables(SSTableSet,Iterable<SSTableReader>)",2,6,7
"org.apache.cassandra.db.ColumnFamilyStore.getPartitioner()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRawCachedPartition(DecoratedKey)",2,1,4
"org.apache.cassandra.db.ColumnFamilyStore.getSSTableCountPerLevel()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablePath(File)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablePath(File,Type)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablePath(File,Version,Type)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTables(SSTableSet)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablesForKey(String)",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.getSnapshotCreationTime(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSnapshotDetails()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSnapshotSSTableReader(String)",1,8,8
"org.apache.cassandra.db.ColumnFamilyStore.getTableName()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getTracker()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getUncompactingSSTables()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getUnleveledSSTables()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.invalidate()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.invalidate(boolean)",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.invalidateCachedPartition(DecoratedKey)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.invalidateCachedPartition(RowCacheKey)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.invalidateCaches()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.isAutoCompactionDisabled()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isCounterCacheEnabled()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.isEmpty()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isFilterFullyCoveredBy(ClusteringIndexFilter,DataLimits,CachedPartition,int)",2,3,4
"org.apache.cassandra.db.ColumnFamilyStore.isIndex()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isKeyCacheEnabled()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.isRowCacheEnabled()",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.isValid()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.keySamples(Range<Token>)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.loadNewSSTables()",5,9,10
"org.apache.cassandra.db.ColumnFamilyStore.loadNewSSTables(String,String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.logFlush()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.markAllCompacting(OperationType)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.markObsolete(Collection<SSTableReader>,OperationType)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.maybeRemoveUnreadableSSTables(File)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.maybeUpdateRowCache(DecoratedKey)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.putCachedCounter(ByteBuffer,Clustering,ColumnDefinition,CellPath,ClockAndCount)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.ratio(float,float)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.rebuildOnFailedScrub(Throwable)",2,2,3
"org.apache.cassandra.db.ColumnFamilyStore.rebuildSecondaryIndex(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.rebuildSecondaryIndex(String,String,String...)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.reload()",1,7,8
"org.apache.cassandra.db.ColumnFamilyStore.replaceFlushed(Memtable,Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.resetFileIndexGenerator()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.runWithCompactionsDisabled(Callable<V>,boolean,boolean)",3,6,7
"org.apache.cassandra.db.ColumnFamilyStore.scheduleFlush()",1,4,4
"org.apache.cassandra.db.ColumnFamilyStore.scrub(boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.scrub(boolean,boolean,boolean,boolean)",2,3,5
"org.apache.cassandra.db.ColumnFamilyStore.scrubDataDirectories(CFMetaData)",3,12,13
"org.apache.cassandra.db.ColumnFamilyStore.select(Function<View, Iterable<SSTableReader>>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.selectAndReference(Function<View, Iterable<SSTableReader>>)",3,6,7
"org.apache.cassandra.db.ColumnFamilyStore.setCompactionParameters(Map<String, String>)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.setCompactionParametersJson(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.setCompactionThresholds(int,int)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.setCompressionParameters(Map<String, String>)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.setCrcCheckChance(double)",1,4,4
"org.apache.cassandra.db.ColumnFamilyStore.setMaximumCompactionThreshold(int)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.setMinimumCompactionThreshold(int)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.shutdownPostFlushExecutor()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshot(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshot(String,Predicate<SSTableReader>,boolean)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshotExists(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshotWithoutFlush(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshotWithoutFlush(String,Predicate<SSTableReader>,boolean)",1,6,6
"org.apache.cassandra.db.ColumnFamilyStore.sstablesRewrite(boolean)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.switchMemtable()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.switchMemtableIfCurrent(Memtable)",2,2,2
"org.apache.cassandra.db.ColumnFamilyStore.toString()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.trueSnapshotsSize()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.truncateBlocking()",1,4,4
"org.apache.cassandra.db.ColumnFamilyStore.unregisterMBean()",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.validateCompactionThresholds(int,int)",3,2,4
"org.apache.cassandra.db.ColumnFamilyStore.verify(boolean)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.writeSnapshotManifest(JSONArray,String)",1,2,3
"org.apache.cassandra.db.ColumnIndex.Builder.Builder(UnfilteredRowIterator,SequentialWriter,SerializationHeader,int)",1,1,1
"org.apache.cassandra.db.ColumnIndex.Builder.add(Unfiltered)",1,5,5
"org.apache.cassandra.db.ColumnIndex.Builder.addIndexBlock()",1,1,1
"org.apache.cassandra.db.ColumnIndex.Builder.build()",1,2,2
"org.apache.cassandra.db.ColumnIndex.Builder.close()",2,3,4
"org.apache.cassandra.db.ColumnIndex.Builder.currentPosition()",1,1,1
"org.apache.cassandra.db.ColumnIndex.Builder.writePartitionHeader(UnfilteredRowIterator)",1,2,2
"org.apache.cassandra.db.ColumnIndex.ColumnIndex(long,List<IndexInfo>)",1,1,1
"org.apache.cassandra.db.ColumnIndex.nothing()",1,1,1
"org.apache.cassandra.db.ColumnIndex.writeAndBuildIndex(UnfilteredRowIterator,SequentialWriter,SerializationHeader,Version)",1,2,2
"org.apache.cassandra.db.Columns.Columns(Object[])",1,1,1
"org.apache.cassandra.db.Columns.Columns(Object[],int)",1,1,1
"org.apache.cassandra.db.Columns.Serializer.deserialize(DataInputPlus,CFMetaData)",4,4,4
"org.apache.cassandra.db.Columns.Serializer.deserializeLargeSubset(DataInputPlus,Columns,int)",4,6,7
"org.apache.cassandra.db.Columns.Serializer.deserializeSubset(Columns,DataInputPlus)",3,5,6
"org.apache.cassandra.db.Columns.Serializer.encodeBitmap(Collection<ColumnDefinition>,Columns,int)",3,2,3
"org.apache.cassandra.db.Columns.Serializer.serialize(Columns,DataOutputPlus)",1,2,2
"org.apache.cassandra.db.Columns.Serializer.serializeLargeSubset(Collection<ColumnDefinition>,int,Columns,int,DataOutputPlus)",6,6,8
"org.apache.cassandra.db.Columns.Serializer.serializeLargeSubsetSize(Collection<ColumnDefinition>,int,Columns,int)",6,6,8
"org.apache.cassandra.db.Columns.Serializer.serializeSubset(Collection<ColumnDefinition>,Columns,DataOutputPlus)",1,3,3
"org.apache.cassandra.db.Columns.Serializer.serializedSize(Columns)",1,2,2
"org.apache.cassandra.db.Columns.Serializer.serializedSubsetSize(Collection<ColumnDefinition>,Columns)",3,3,3
"org.apache.cassandra.db.Columns.complexColumnCount()",1,1,1
"org.apache.cassandra.db.Columns.complexColumns()",1,1,1
"org.apache.cassandra.db.Columns.complexIdx(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.Columns.contains(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.Columns.containsAll(Collection<?>)",5,2,5
"org.apache.cassandra.db.Columns.digest(MessageDigest)",1,2,2
"org.apache.cassandra.db.Columns.equals(Object)",3,2,4
"org.apache.cassandra.db.Columns.findFirstComplexIdx(Object[])",2,2,3
"org.apache.cassandra.db.Columns.from(Collection<ColumnDefinition>)",1,1,1
"org.apache.cassandra.db.Columns.getComplex(int)",1,1,1
"org.apache.cassandra.db.Columns.getSimple(int)",1,1,1
"org.apache.cassandra.db.Columns.hasComplex()",1,1,1
"org.apache.cassandra.db.Columns.hasSimple()",1,1,1
"org.apache.cassandra.db.Columns.hashCode()",1,1,1
"org.apache.cassandra.db.Columns.inOrderInclusionTester()",1,1,1
"org.apache.cassandra.db.Columns.isEmpty()",1,1,1
"org.apache.cassandra.db.Columns.iterator()",1,1,1
"org.apache.cassandra.db.Columns.mergeTo(Columns)",5,1,6
"org.apache.cassandra.db.Columns.of(ColumnDefinition)",1,1,2
"org.apache.cassandra.db.Columns.selectOrderIterator()",1,1,1
"org.apache.cassandra.db.Columns.simpleColumnCount()",1,1,1
"org.apache.cassandra.db.Columns.simpleColumns()",1,1,1
"org.apache.cassandra.db.Columns.simpleIdx(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.Columns.size()",1,1,1
"org.apache.cassandra.db.Columns.toString()",1,3,3
"org.apache.cassandra.db.Columns.without(ColumnDefinition)",2,1,3
"org.apache.cassandra.db.CompactTables.CompactTables()",1,1,1
"org.apache.cassandra.db.CompactTables.DefaultNames.DefaultNames(Set<String>)",1,1,1
"org.apache.cassandra.db.CompactTables.DefaultNames.defaultClusteringName()",3,2,3
"org.apache.cassandra.db.CompactTables.DefaultNames.defaultCompactValueName()",3,2,4
"org.apache.cassandra.db.CompactTables.DefaultNames.defaultPartitionKeyName()",3,2,4
"org.apache.cassandra.db.CompactTables.columnDefinitionComparator(Kind,boolean,AbstractType<?>,AbstractType<?>)",2,1,4
"org.apache.cassandra.db.CompactTables.defaultNameGenerator(Iterable<ColumnDefinition>)",1,2,2
"org.apache.cassandra.db.CompactTables.defaultNameGenerator(Set<String>)",1,1,1
"org.apache.cassandra.db.CompactTables.getCompactValueColumn(PartitionColumns,boolean)",4,4,5
"org.apache.cassandra.db.CompactTables.hasEmptyCompactValue(CFMetaData)",1,1,1
"org.apache.cassandra.db.CompactTables.isSuperColumnMapColumn(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.Conflicts.Conflicts()",1,1,1
"org.apache.cassandra.db.Conflicts.mergeCounterValues(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.Conflicts.resolveCounter(long,boolean,ByteBuffer,long,boolean,ByteBuffer)",3,1,5
"org.apache.cassandra.db.Conflicts.resolveRegular(long,boolean,int,ByteBuffer,long,boolean,int,ByteBuffer)",5,1,8
"org.apache.cassandra.db.ConsistencyLevel.ConsistencyLevel(int)",1,1,1
"org.apache.cassandra.db.ConsistencyLevel.ConsistencyLevel(int,boolean)",1,1,1
"org.apache.cassandra.db.ConsistencyLevel.assureSufficientLiveNodes(Keyspace,Iterable<InetAddress>)",9,11,15
"org.apache.cassandra.db.ConsistencyLevel.blockFor(Keyspace)",11,8,12
"org.apache.cassandra.db.ConsistencyLevel.countLocalEndpoints(Iterable<InetAddress>)",1,2,3
"org.apache.cassandra.db.ConsistencyLevel.countPerDCEndpoints(Keyspace,Iterable<InetAddress>)",1,3,3
"org.apache.cassandra.db.ConsistencyLevel.filterForEachQuorum(Keyspace,List<InetAddress>,ReadRepairDecision)",2,6,7
"org.apache.cassandra.db.ConsistencyLevel.filterForQuery(Keyspace,List<InetAddress>)",1,1,1
"org.apache.cassandra.db.ConsistencyLevel.filterForQuery(Keyspace,List<InetAddress>,ReadRepairDecision)",5,8,10
"org.apache.cassandra.db.ConsistencyLevel.fromCode(int)",2,2,3
"org.apache.cassandra.db.ConsistencyLevel.isDatacenterLocal()",1,1,1
"org.apache.cassandra.db.ConsistencyLevel.isLocal(InetAddress)",1,1,1
"org.apache.cassandra.db.ConsistencyLevel.isSerialConsistency()",1,1,2
"org.apache.cassandra.db.ConsistencyLevel.isSufficientLiveNodes(Keyspace,Iterable<InetAddress>)",9,7,9
"org.apache.cassandra.db.ConsistencyLevel.localQuorumFor(Keyspace,String)",1,2,2
"org.apache.cassandra.db.ConsistencyLevel.quorumFor(Keyspace)",1,1,1
"org.apache.cassandra.db.ConsistencyLevel.requireNetworkTopologyStrategy(String)",2,2,2
"org.apache.cassandra.db.ConsistencyLevel.validateCounterForWrite(CFMetaData)",3,1,3
"org.apache.cassandra.db.ConsistencyLevel.validateForCas()",2,1,2
"org.apache.cassandra.db.ConsistencyLevel.validateForCasCommit(String)",2,2,3
"org.apache.cassandra.db.ConsistencyLevel.validateForRead(String)",2,2,2
"org.apache.cassandra.db.ConsistencyLevel.validateForWrite(String)",2,2,2
"org.apache.cassandra.db.CounterMutation.CounterMutation(Mutation,ConsistencyLevel)",1,1,1
"org.apache.cassandra.db.CounterMutation.CounterMutationSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.db.CounterMutation.CounterMutationSerializer.serialize(CounterMutation,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.CounterMutation.CounterMutationSerializer.serializedSize(CounterMutation,int)",1,1,1
"org.apache.cassandra.db.CounterMutation.apply()",1,3,3
"org.apache.cassandra.db.CounterMutation.compare(Clustering,Clustering,ColumnFamilyStore)",3,1,4
"org.apache.cassandra.db.CounterMutation.consistency()",1,1,1
"org.apache.cassandra.db.CounterMutation.getColumnFamilyIds()",1,1,1
"org.apache.cassandra.db.CounterMutation.getCounterLockKeys()",1,1,1
"org.apache.cassandra.db.CounterMutation.getKeyspaceName()",1,1,1
"org.apache.cassandra.db.CounterMutation.getMutation()",1,1,1
"org.apache.cassandra.db.CounterMutation.getPartitionUpdates()",1,1,1
"org.apache.cassandra.db.CounterMutation.getTimeout()",1,1,1
"org.apache.cassandra.db.CounterMutation.grabCounterLocks(Keyspace,List<Lock>)",3,4,4
"org.apache.cassandra.db.CounterMutation.key()",1,1,1
"org.apache.cassandra.db.CounterMutation.makeMutationMessage()",1,1,1
"org.apache.cassandra.db.CounterMutation.processModifications(PartitionUpdate)",3,3,4
"org.apache.cassandra.db.CounterMutation.toString()",1,1,1
"org.apache.cassandra.db.CounterMutation.toString(boolean)",1,1,1
"org.apache.cassandra.db.CounterMutation.updateForRow(PeekingIterator<CounterMark>,Row,ColumnFamilyStore)",4,6,8
"org.apache.cassandra.db.CounterMutation.updateWithCurrentValue(CounterMark,ClockAndCount,ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.CounterMutation.updateWithCurrentValuesFromCFS(List<CounterMark>,ColumnFamilyStore)",3,4,5
"org.apache.cassandra.db.CounterMutation.updateWithCurrentValuesFromCache(List<CounterMark>,ColumnFamilyStore)",1,3,3
"org.apache.cassandra.db.CounterMutationVerbHandler.doVerb(MessageIn<CounterMutation>,int)",1,1,1
"org.apache.cassandra.db.DataRange.DataRange(AbstractBounds<PartitionPosition>,ClusteringIndexFilter)",1,1,1
"org.apache.cassandra.db.DataRange.Paging.Paging(AbstractBounds<PartitionPosition>,ClusteringIndexFilter,ClusteringComparator,Clustering,boolean)",1,3,3
"org.apache.cassandra.db.DataRange.Paging.clusteringIndexFilter(DecoratedKey)",1,2,2
"org.apache.cassandra.db.DataRange.Paging.forSubRange(AbstractBounds<PartitionPosition>)",1,1,2
"org.apache.cassandra.db.DataRange.Paging.getLastReturned()",1,1,1
"org.apache.cassandra.db.DataRange.Paging.isPaging()",1,1,1
"org.apache.cassandra.db.DataRange.Paging.isUnrestricted()",1,1,1
"org.apache.cassandra.db.DataRange.Paging.toString(CFMetaData)",1,1,2
"org.apache.cassandra.db.DataRange.Serializer.deserialize(DataInputPlus,int,CFMetaData)",2,2,2
"org.apache.cassandra.db.DataRange.Serializer.serialize(DataRange,DataOutputPlus,int,CFMetaData)",1,2,2
"org.apache.cassandra.db.DataRange.Serializer.serializedSize(DataRange,int,CFMetaData)",1,2,2
"org.apache.cassandra.db.DataRange.allData(IPartitioner)",1,1,1
"org.apache.cassandra.db.DataRange.allData(IPartitioner,ClusteringIndexFilter)",1,1,1
"org.apache.cassandra.db.DataRange.appendClause(PartitionPosition,StringBuilder,CFMetaData,boolean,boolean)",1,2,2
"org.apache.cassandra.db.DataRange.appendKeyString(StringBuilder,AbstractType<?>,ByteBuffer)",1,3,4
"org.apache.cassandra.db.DataRange.clusteringIndexFilter(DecoratedKey)",1,1,1
"org.apache.cassandra.db.DataRange.contains(PartitionPosition)",1,1,1
"org.apache.cassandra.db.DataRange.forKeyRange(Range<PartitionPosition>)",1,1,1
"org.apache.cassandra.db.DataRange.forPaging(AbstractBounds<PartitionPosition>,ClusteringComparator,Clustering,boolean)",1,1,1
"org.apache.cassandra.db.DataRange.forSubRange(AbstractBounds<PartitionPosition>)",1,1,1
"org.apache.cassandra.db.DataRange.forTokenRange(Range<Token>)",1,1,1
"org.apache.cassandra.db.DataRange.getOperator(boolean,boolean)",1,1,4
"org.apache.cassandra.db.DataRange.isNamesQuery()",1,1,1
"org.apache.cassandra.db.DataRange.isPaging()",1,1,1
"org.apache.cassandra.db.DataRange.isUnrestricted()",1,3,3
"org.apache.cassandra.db.DataRange.isWrapAround()",1,2,2
"org.apache.cassandra.db.DataRange.keyRange()",1,1,1
"org.apache.cassandra.db.DataRange.startKey()",1,1,1
"org.apache.cassandra.db.DataRange.stopKey()",1,1,1
"org.apache.cassandra.db.DataRange.toCQLString(CFMetaData)",2,5,7
"org.apache.cassandra.db.DataRange.toString(CFMetaData)",1,1,1
"org.apache.cassandra.db.DecoratedKey.DecoratedKey(Token)",1,1,1
"org.apache.cassandra.db.DecoratedKey.compareTo(IPartitioner,ByteBuffer,PartitionPosition)",2,3,3
"org.apache.cassandra.db.DecoratedKey.compareTo(PartitionPosition)",3,3,4
"org.apache.cassandra.db.DecoratedKey.equals(Object)",3,1,4
"org.apache.cassandra.db.DecoratedKey.filterHash(long[])",1,1,1
"org.apache.cassandra.db.DecoratedKey.getPartitioner()",1,1,1
"org.apache.cassandra.db.DecoratedKey.getToken()",1,1,1
"org.apache.cassandra.db.DecoratedKey.hashCode()",1,1,1
"org.apache.cassandra.db.DecoratedKey.isMinimum()",1,1,1
"org.apache.cassandra.db.DecoratedKey.kind()",1,1,1
"org.apache.cassandra.db.DecoratedKey.minValue()",1,1,1
"org.apache.cassandra.db.DecoratedKey.toString()",1,2,2
"org.apache.cassandra.db.DefinitionsUpdateVerbHandler.doVerb(MessageIn<Collection<Mutation>>,int)",1,1,1
"org.apache.cassandra.db.DeletionPurger.shouldPurge(DeletionTime)",1,2,2
"org.apache.cassandra.db.DeletionPurger.shouldPurge(LivenessInfo,int)",1,2,2
"org.apache.cassandra.db.DeletionTime.DeletionTime(long,int)",1,1,1
"org.apache.cassandra.db.DeletionTime.Serializer.deserialize(DataInputPlus)",1,1,3
"org.apache.cassandra.db.DeletionTime.Serializer.serialize(DeletionTime,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.DeletionTime.Serializer.serializedSize(DeletionTime)",1,1,1
"org.apache.cassandra.db.DeletionTime.Serializer.skip(DataInputPlus)",1,1,1
"org.apache.cassandra.db.DeletionTime.compareTo(DeletionTime)",5,4,5
"org.apache.cassandra.db.DeletionTime.dataSize()",1,1,1
"org.apache.cassandra.db.DeletionTime.deletes(Cell)",1,1,1
"org.apache.cassandra.db.DeletionTime.deletes(LivenessInfo)",1,1,1
"org.apache.cassandra.db.DeletionTime.deletes(long)",1,1,1
"org.apache.cassandra.db.DeletionTime.digest(MessageDigest)",1,1,1
"org.apache.cassandra.db.DeletionTime.equals(Object)",2,2,3
"org.apache.cassandra.db.DeletionTime.hashCode()",1,1,1
"org.apache.cassandra.db.DeletionTime.isLive()",1,2,2
"org.apache.cassandra.db.DeletionTime.localDeletionTime()",1,1,1
"org.apache.cassandra.db.DeletionTime.markedForDeleteAt()",1,1,1
"org.apache.cassandra.db.DeletionTime.supersedes(DeletionTime)",1,3,3
"org.apache.cassandra.db.DeletionTime.toString()",1,1,1
"org.apache.cassandra.db.DeletionTime.unsharedHeapSize()",1,1,1
"org.apache.cassandra.db.Directories.DataDirectory.DataDirectory(File)",1,1,1
"org.apache.cassandra.db.Directories.DataDirectory.equals(Object)",3,2,4
"org.apache.cassandra.db.Directories.DataDirectory.getAvailableSpace()",1,1,1
"org.apache.cassandra.db.Directories.DataDirectory.hashCode()",1,1,1
"org.apache.cassandra.db.Directories.DataDirectoryCandidate.DataDirectoryCandidate(DataDirectory)",1,1,1
"org.apache.cassandra.db.Directories.DataDirectoryCandidate.calcFreePerc(long)",1,1,1
"org.apache.cassandra.db.Directories.DataDirectoryCandidate.compareTo(DataDirectoryCandidate)",3,1,3
"org.apache.cassandra.db.Directories.Directories(CFMetaData)",1,1,1
"org.apache.cassandra.db.Directories.Directories(CFMetaData,DataDirectory[])",2,11,16
"org.apache.cassandra.db.Directories.FileAction.FileAction()",1,1,1
"org.apache.cassandra.db.Directories.FileAction.hasPrivilege(File,FileAction)",2,7,13
"org.apache.cassandra.db.Directories.SSTableLister.SSTableLister(OnTxnErr)",1,1,1
"org.apache.cassandra.db.Directories.SSTableLister.filter()",5,5,7
"org.apache.cassandra.db.Directories.SSTableLister.getFilter()",7,6,12
"org.apache.cassandra.db.Directories.SSTableLister.includeBackups(boolean)",2,1,2
"org.apache.cassandra.db.Directories.SSTableLister.list()",1,1,1
"org.apache.cassandra.db.Directories.SSTableLister.listFiles()",1,3,3
"org.apache.cassandra.db.Directories.SSTableLister.onlyBackups(boolean)",2,1,2
"org.apache.cassandra.db.Directories.SSTableLister.skipTemporary(boolean)",2,1,2
"org.apache.cassandra.db.Directories.SSTableLister.snapshots(String)",2,1,2
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.TrueFilesSizeVisitor()",1,2,2
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.getAllocatedSize()",1,1,1
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.isAcceptable(Path)",1,5,5
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.visitFile(Path,BasicFileAttributes)",1,2,2
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.visitFileFailed(Path,IOException)",1,1,1
"org.apache.cassandra.db.Directories.clearSnapshot(String,List<File>)",4,5,6
"org.apache.cassandra.db.Directories.find(String)",3,3,3
"org.apache.cassandra.db.Directories.getBackupsDirectory(Descriptor)",1,1,1
"org.apache.cassandra.db.Directories.getBackupsDirectory(File)",2,2,2
"org.apache.cassandra.db.Directories.getCFDirectories()",1,3,3
"org.apache.cassandra.db.Directories.getDirectoryForNewSSTables()",1,1,1
"org.apache.cassandra.db.Directories.getEphemeralSnapshotMarkerFile(File)",1,1,1
"org.apache.cassandra.db.Directories.getKSChildDirectories(String)",3,4,5
"org.apache.cassandra.db.Directories.getLocationForDisk(DataDirectory)",4,3,4
"org.apache.cassandra.db.Directories.getNewEphemeralSnapshotMarkerFile(String)",1,1,1
"org.apache.cassandra.db.Directories.getOrCreate(File,String...)",4,6,8
"org.apache.cassandra.db.Directories.getSnapshotDetails()",1,3,3
"org.apache.cassandra.db.Directories.getSnapshotDirectory(Descriptor,String)",1,1,1
"org.apache.cassandra.db.Directories.getSnapshotDirectory(File,String)",2,2,2
"org.apache.cassandra.db.Directories.getSnapshotManifestFile(String)",1,1,1
"org.apache.cassandra.db.Directories.getTrueAllocatedSizeIn(File)",2,2,3
"org.apache.cassandra.db.Directories.getWriteableLocation(long)",7,5,7
"org.apache.cassandra.db.Directories.getWriteableLocationAsFile(long)",1,1,1
"org.apache.cassandra.db.Directories.hasAvailableDiskSpace(long,long)",4,2,4
"org.apache.cassandra.db.Directories.join(String...)",1,1,1
"org.apache.cassandra.db.Directories.listEphemeralSnapshots()",1,3,3
"org.apache.cassandra.db.Directories.listSnapshots()",1,8,8
"org.apache.cassandra.db.Directories.overrideDataDirectoriesForTest(String)",1,1,2
"org.apache.cassandra.db.Directories.pickWriteableDirectory(List<DataDirectoryCandidate>)",3,1,3
"org.apache.cassandra.db.Directories.resetDataDirectoriesAfterTest()",1,1,2
"org.apache.cassandra.db.Directories.snapshotCreationTime(String)",3,3,3
"org.apache.cassandra.db.Directories.snapshotExists(String)",3,3,4
"org.apache.cassandra.db.Directories.sortWriteableCandidates(List<DataDirectoryCandidate>,long)",1,2,2
"org.apache.cassandra.db.Directories.sstableLister(OnTxnErr)",1,1,1
"org.apache.cassandra.db.Directories.trueSnapshotsSize()",1,3,3
"org.apache.cassandra.db.Directories.verifyFullPermissions(File,String)",5,6,6
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator.EmptyBasePartitionIterator()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator.close()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator.hasNext()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator.next()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.EmptyBaseRowIterator(PartitionColumns,CFMetaData,DecoratedKey,boolean,Row)",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.close()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.columns()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.hasNext()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.isEmpty()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.isReverseOrder()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.metadata()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.next()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.partitionKey()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.staticRow()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyPartitionIterator.EmptyPartitionIterator()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyRowIterator.EmptyRowIterator(CFMetaData,DecoratedKey,boolean,Row)",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredPartitionIterator.EmptyUnfilteredPartitionIterator(CFMetaData,boolean)",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredPartitionIterator.isForThrift()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredPartitionIterator.metadata()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator.EmptyUnfilteredRowIterator(PartitionColumns,CFMetaData,DecoratedKey,boolean,Row,DeletionTime)",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator.isEmpty()",1,2,2
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator.stats()",1,1,1
"org.apache.cassandra.db.EmptyIterators.partition()",1,1,1
"org.apache.cassandra.db.EmptyIterators.row(CFMetaData,DecoratedKey,boolean)",1,1,1
"org.apache.cassandra.db.EmptyIterators.unfilteredPartition(CFMetaData,boolean)",1,1,1
"org.apache.cassandra.db.EmptyIterators.unfilteredRow(CFMetaData,DecoratedKey,boolean)",1,1,1
"org.apache.cassandra.db.EmptyIterators.unfilteredRow(CFMetaData,DecoratedKey,boolean,Row,DeletionTime)",1,2,3
"org.apache.cassandra.db.HintedHandOffManager.HintedHandOffManager()",1,1,1
"org.apache.cassandra.db.HintedHandOffManager.deleteHintsForEndpoint(String)",1,1,1
"org.apache.cassandra.db.HintedHandOffManager.listEndpointsPendingHints()",1,1,1
"org.apache.cassandra.db.HintedHandOffManager.pauseHintsDelivery(boolean)",1,2,2
"org.apache.cassandra.db.HintedHandOffManager.registerMBean()",1,1,2
"org.apache.cassandra.db.HintedHandOffManager.scheduleHintDelivery(String)",1,1,1
"org.apache.cassandra.db.HintedHandOffManager.truncateAllHints()",1,1,1
"org.apache.cassandra.db.Keyspace.Keyspace(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.db.Keyspace.Keyspace(String,boolean)",1,2,2
"org.apache.cassandra.db.Keyspace.all()",1,1,1
"org.apache.cassandra.db.Keyspace.apply(Mutation,boolean)",1,1,1
"org.apache.cassandra.db.Keyspace.apply(Mutation,boolean,boolean)",1,1,1
"org.apache.cassandra.db.Keyspace.apply(Mutation,boolean,boolean,boolean)",8,17,18
"org.apache.cassandra.db.Keyspace.applyFromCommitLog(Mutation)",1,1,1
"org.apache.cassandra.db.Keyspace.clear(String)",1,1,1
"org.apache.cassandra.db.Keyspace.clear(String,Schema)",1,3,3
"org.apache.cassandra.db.Keyspace.clearSnapshot(String,String)",1,1,1
"org.apache.cassandra.db.Keyspace.createReplicationStrategy(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.db.Keyspace.dropCf(UUID)",2,1,2
"org.apache.cassandra.db.Keyspace.flush()",1,2,2
"org.apache.cassandra.db.Keyspace.getAllSSTables(SSTableSet)",1,2,2
"org.apache.cassandra.db.Keyspace.getColumnFamilyStore(String)",2,2,2
"org.apache.cassandra.db.Keyspace.getColumnFamilyStore(UUID)",2,1,2
"org.apache.cassandra.db.Keyspace.getColumnFamilyStores()",1,1,1
"org.apache.cassandra.db.Keyspace.getIndexColumnFamilyStores(ColumnFamilyStore)",1,2,2
"org.apache.cassandra.db.Keyspace.getMetadata()",1,1,1
"org.apache.cassandra.db.Keyspace.getName()",1,1,1
"org.apache.cassandra.db.Keyspace.getReplicationStrategy()",1,1,1
"org.apache.cassandra.db.Keyspace.getTimestampedSnapshotName(String)",1,2,3
"org.apache.cassandra.db.Keyspace.getValidColumnFamilies(boolean,boolean,String...)",6,10,10
"org.apache.cassandra.db.Keyspace.hasColumnFamilyStore(UUID)",1,1,1
"org.apache.cassandra.db.Keyspace.indexPartition(DecoratedKey,ColumnFamilyStore,Set<Index>)",1,2,2
"org.apache.cassandra.db.Keyspace.initCf(UUID,String,boolean)",3,2,3
"org.apache.cassandra.db.Keyspace.mockKS(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.db.Keyspace.nonSystem()",1,1,1
"org.apache.cassandra.db.Keyspace.open(String)",1,2,2
"org.apache.cassandra.db.Keyspace.open(String,Schema,boolean)",1,3,3
"org.apache.cassandra.db.Keyspace.openAndGetStore(CFMetaData)",1,1,1
"org.apache.cassandra.db.Keyspace.openWithoutSSTables(String)",1,1,1
"org.apache.cassandra.db.Keyspace.removeUnreadableSSTables(File)",1,4,4
"org.apache.cassandra.db.Keyspace.setInitialized()",1,1,1
"org.apache.cassandra.db.Keyspace.setMetadata(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.db.Keyspace.snapshot(String,String)",2,4,6
"org.apache.cassandra.db.Keyspace.snapshotExists(String)",3,2,3
"org.apache.cassandra.db.Keyspace.system()",1,1,1
"org.apache.cassandra.db.Keyspace.toString()",1,1,1
"org.apache.cassandra.db.Keyspace.unloadCf(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.KeyspaceNotDefinedException.KeyspaceNotDefinedException(String)",1,1,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.CellGrouper(CFMetaData,SerializationHelper)",1,1,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.CellGrouper(CFMetaData,SerializationHelper,boolean)",1,1,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.addAtom(LegacyAtom)",1,2,2
"org.apache.cassandra.db.LegacyLayout.CellGrouper.addCell(LegacyCell)",9,11,16
"org.apache.cassandra.db.LegacyLayout.CellGrouper.addRangeTombstone(LegacyRangeTombstone)",6,5,8
"org.apache.cassandra.db.LegacyLayout.CellGrouper.getRow()",1,1,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.reset()",1,1,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.staticGrouper(CFMetaData,SerializationHelper)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyBound.LegacyBound(Bound,boolean,ColumnDefinition)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyBound.getAsClustering(CFMetaData)",2,2,3
"org.apache.cassandra.db.LegacyLayout.LegacyBound.toString()",1,3,5
"org.apache.cassandra.db.LegacyLayout.LegacyBoundComparator.LegacyBoundComparator(ClusteringComparator)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyBoundComparator.compare(LegacyBound,LegacyBound)",7,1,10
"org.apache.cassandra.db.LegacyLayout.LegacyCell.LegacyCell(Kind,LegacyCellName,ByteBuffer,long,int,int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.asCell()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.asRangeTombstone()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.clustering()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.counter(CFMetaData,ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.counter(LegacyCellName,ByteBuffer)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.expiring(CFMetaData,ByteBuffer,ByteBuffer,ByteBuffer,long,int,int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isCell()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isCounter()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isCounterUpdate()",1,2,2
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isExpiring()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isLive(int)",2,2,3
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isStatic()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isTombstone()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.regular(CFMetaData,ByteBuffer,ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.serializationFlags()",5,1,5
"org.apache.cassandra.db.LegacyLayout.LegacyCell.toString()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.tombstone(CFMetaData,ByteBuffer,ByteBuffer,long,int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.LegacyCellName(Clustering,ColumnDefinition,ByteBuffer)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.encode(CFMetaData)",1,1,2
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.superColumnName()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.superColumnSubName()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.toString()",1,4,6
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.LegacyDeletionInfo(MutableDeletionInfo)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.add(CFMetaData,LegacyRangeTombstone)",3,9,9
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.add(CFMetaData,RangeTombstone)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.add(DeletionTime)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.deserialize(CFMetaData,DataInputPlus)",2,2,3
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.inRowRangeTombstones()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.live()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.staticBound(CFMetaData,boolean)",1,2,3
"org.apache.cassandra.db.LegacyLayout.LegacyLayout()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.LegacyRangeTombstone(LegacyBound,LegacyBound,DeletionTime)",1,2,4
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.asCell()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.asRangeTombstone()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.clustering()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.isCell()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.isCollectionTombstone()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.isRowDeletion(CFMetaData)",4,5,7
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.isStatic()",1,1,2
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.toString()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.withNewEnd(LegacyBound)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.withNewStart(LegacyBound)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.LegacyRangeTombstoneList(LegacyBoundComparator,LegacyBound[],LegacyBound[],long[],int[],int)",1,1,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.LegacyRangeTombstoneList(LegacyBoundComparator,int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.add(LegacyBound,LegacyBound,long,int)",2,3,4
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.addAll(LegacyRangeTombstoneList)",3,7,9
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.addInternal(int,LegacyBound,LegacyBound,long,int)",1,3,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.capacity()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.copyArrays(LegacyRangeTombstoneList,LegacyRangeTombstoneList)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(LegacyBound[],int,int,int)",2,2,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(int)",1,2,2
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(int,int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(int[],int,int,int)",2,2,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(long[],int,int,int)",2,2,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.growToFree(int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.insertFrom(int,LegacyBound,LegacyBound,long,int)",14,15,18
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.isEmpty()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.moveElements(int)",2,1,2
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.removeInternal(int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.serialize(DataOutputPlus,CFMetaData)",2,6,7
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.serializedSize(CFMetaData)",2,6,7
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.setInternal(int,LegacyBound,LegacyBound,long,int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.size()",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.updateDigest(MessageDigest)",1,6,6
"org.apache.cassandra.db.LegacyLayout.LegacyUnfilteredPartition.LegacyUnfilteredPartition(DeletionTime,LegacyRangeTombstoneList,List<LegacyCell>)",1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyUnfilteredPartition.digest(CFMetaData,MessageDigest)",1,7,7
"org.apache.cassandra.db.LegacyLayout.asLegacyAtomIterator(Iterator<? extends LegacyAtom>)",1,1,1
"org.apache.cassandra.db.LegacyLayout.convertToRows(CellGrouper,PeekingIterator<LegacyAtom>)",2,2,2
"org.apache.cassandra.db.LegacyLayout.decodeBound(CFMetaData,ByteBuffer,boolean)",2,9,13
"org.apache.cassandra.db.LegacyLayout.decodeCellName(CFMetaData,ByteBuffer)",1,1,1
"org.apache.cassandra.db.LegacyLayout.decodeCellName(CFMetaData,ByteBuffer,ByteBuffer)",2,2,2
"org.apache.cassandra.db.LegacyLayout.decodeCellName(CFMetaData,ByteBuffer,boolean)",9,11,15
"org.apache.cassandra.db.LegacyLayout.decodeClustering(CFMetaData,ByteBuffer)",3,3,5
"org.apache.cassandra.db.LegacyLayout.decodeForSuperColumn(CFMetaData,Clustering,ByteBuffer)",2,1,3
"org.apache.cassandra.db.LegacyLayout.deserializeCells(CFMetaData,DataInput,Flag,int)",3,5,6
"org.apache.cassandra.db.LegacyLayout.deserializeLegacyPartition(DataInputPlus,int,Flag,ByteBuffer)",2,1,2
"org.apache.cassandra.db.LegacyLayout.encodeBound(CFMetaData,Bound,boolean)",4,8,9
"org.apache.cassandra.db.LegacyLayout.encodeCellName(CFMetaData,ClusteringPrefix,ByteBuffer,ByteBuffer)",6,4,10
"org.apache.cassandra.db.LegacyLayout.encodeClustering(CFMetaData,ClusteringPrefix)",3,3,4
"org.apache.cassandra.db.LegacyLayout.equalValues(ClusteringPrefix,ClusteringPrefix,ClusteringComparator)",3,2,3
"org.apache.cassandra.db.LegacyLayout.extractStaticColumns(CFMetaData,DataInputPlus,Columns)",5,5,7
"org.apache.cassandra.db.LegacyLayout.fromRow(CFMetaData,Row)",6,7,9
"org.apache.cassandra.db.LegacyLayout.fromRowIterator(CFMetaData,Iterator<Row>,Row)",4,5,5
"org.apache.cassandra.db.LegacyLayout.fromRowIterator(RowIterator)",1,1,1
"org.apache.cassandra.db.LegacyLayout.fromUnfilteredRowIterator(UnfilteredRowIterator)",1,3,3
"org.apache.cassandra.db.LegacyLayout.getNextRow(CellGrouper,PeekingIterator<? extends LegacyAtom>)",2,3,4
"org.apache.cassandra.db.LegacyLayout.legacyAtomComparator(CFMetaData)",8,10,18
"org.apache.cassandra.db.LegacyLayout.legacyCellComparator(CFMetaData)",1,1,1
"org.apache.cassandra.db.LegacyLayout.legacyCellComparator(CFMetaData,boolean)",4,1,6
"org.apache.cassandra.db.LegacyLayout.legacyCellNameComparator(CFMetaData,boolean)",10,7,13
"org.apache.cassandra.db.LegacyLayout.makeLegacyCell(Clustering,Cell)",1,5,6
"org.apache.cassandra.db.LegacyLayout.makeLegacyComparator(CFMetaData)",2,11,13
"org.apache.cassandra.db.LegacyLayout.onWireCellstoUnfilteredRowIterator(CFMetaData,DecoratedKey,LegacyDeletionInfo,Iterator<LegacyCell>,boolean,SerializationHelper)",1,3,3
"org.apache.cassandra.db.LegacyLayout.readLegacyAtom(CFMetaData,DataInputPlus,boolean)",3,5,6
"org.apache.cassandra.db.LegacyLayout.readLegacyCell(CFMetaData,DataInput,Flag)",1,1,1
"org.apache.cassandra.db.LegacyLayout.readLegacyCellBody(CFMetaData,DataInput,ByteBuffer,int,Flag,boolean)",3,8,8
"org.apache.cassandra.db.LegacyLayout.readLegacyRangeTombstoneBody(CFMetaData,DataInputPlus,ByteBuffer)",1,1,1
"org.apache.cassandra.db.LegacyLayout.serializeAsLegacyPartition(UnfilteredRowIterator,DataOutputPlus,int)",5,6,6
"org.apache.cassandra.db.LegacyLayout.serializedSizeAsLegacyPartition(UnfilteredRowIterator,int)",5,6,6
"org.apache.cassandra.db.LegacyLayout.toRowIterator(CFMetaData,DecoratedKey,Iterator<LegacyCell>,int)",1,1,1
"org.apache.cassandra.db.LegacyLayout.toUnfilteredRowIterator(CFMetaData,DecoratedKey,LegacyDeletionInfo,Iterator<LegacyCell>)",1,1,1
"org.apache.cassandra.db.LegacyLayout.toUnfilteredRowIterator(CFMetaData,DecoratedKey,LegacyDeletionInfo,Iterator<LegacyCell>,boolean,SerializationHelper)",1,3,3
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.ExpiringLivenessInfo(long,int,int)",1,1,2
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.dataSize()",1,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.digest(MessageDigest)",1,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.isExpiring()",1,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.isLive(int)",1,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.localExpirationTime()",1,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.toString()",1,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.ttl()",1,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.validate()",3,1,3
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.withUpdatedTimestamp(long)",1,1,1
"org.apache.cassandra.db.LivenessInfo.LivenessInfo(long)",1,1,1
"org.apache.cassandra.db.LivenessInfo.create(CFMetaData,long,int)",2,2,2
"org.apache.cassandra.db.LivenessInfo.create(CFMetaData,long,int,int)",1,2,2
"org.apache.cassandra.db.LivenessInfo.create(long,int,int)",1,1,2
"org.apache.cassandra.db.LivenessInfo.dataSize()",1,1,1
"org.apache.cassandra.db.LivenessInfo.digest(MessageDigest)",1,1,1
"org.apache.cassandra.db.LivenessInfo.equals(Object)",2,3,4
"org.apache.cassandra.db.LivenessInfo.expiring(long,int,int)",1,1,1
"org.apache.cassandra.db.LivenessInfo.hashCode()",1,1,1
"org.apache.cassandra.db.LivenessInfo.isEmpty()",1,1,1
"org.apache.cassandra.db.LivenessInfo.isExpiring()",1,1,1
"org.apache.cassandra.db.LivenessInfo.isLive(int)",1,1,1
"org.apache.cassandra.db.LivenessInfo.localExpirationTime()",1,1,1
"org.apache.cassandra.db.LivenessInfo.supersedes(LivenessInfo)",1,1,1
"org.apache.cassandra.db.LivenessInfo.timestamp()",1,1,1
"org.apache.cassandra.db.LivenessInfo.toString()",1,1,1
"org.apache.cassandra.db.LivenessInfo.ttl()",1,1,1
"org.apache.cassandra.db.LivenessInfo.validate()",1,1,1
"org.apache.cassandra.db.LivenessInfo.withUpdatedTimestamp(long)",1,1,1
"org.apache.cassandra.db.Memtable.ColumnsCollector.ColumnsCollector(PartitionColumns)",1,3,3
"org.apache.cassandra.db.Memtable.ColumnsCollector.get()",1,3,3
"org.apache.cassandra.db.Memtable.ColumnsCollector.update(ColumnDefinition)",1,3,3
"org.apache.cassandra.db.Memtable.ColumnsCollector.update(PartitionColumns)",1,3,3
"org.apache.cassandra.db.Memtable.FlushRunnable.FlushRunnable(ReplayPosition)",1,3,3
"org.apache.cassandra.db.Memtable.FlushRunnable.createFlushWriter(String,PartitionColumns,EncodingStats)",1,3,3
"org.apache.cassandra.db.Memtable.FlushRunnable.getDirectories()",1,1,1
"org.apache.cassandra.db.Memtable.FlushRunnable.getExpectedWriteSize()",1,1,1
"org.apache.cassandra.db.Memtable.FlushRunnable.runMayThrow()",1,1,1
"org.apache.cassandra.db.Memtable.FlushRunnable.writeSortedContents(ReplayPosition,File)",3,8,10
"org.apache.cassandra.db.Memtable.LastReplayPosition.LastReplayPosition(ReplayPosition)",1,1,1
"org.apache.cassandra.db.Memtable.Memtable(CFMetaData)",1,1,1
"org.apache.cassandra.db.Memtable.Memtable(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.MemtableUnfilteredPartitionIterator(ColumnFamilyStore,Iterator<Entry<PartitionPosition, AtomicBTreePartition>>,boolean,int,ColumnFilter,DataRange)",1,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.getMinLocalDeletionTime()",1,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.hasNext()",1,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.isForThrift()",1,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.metadata()",1,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.next()",1,1,1
"org.apache.cassandra.db.Memtable.StatsCollector.get()",1,1,1
"org.apache.cassandra.db.Memtable.StatsCollector.update(EncodingStats)",3,2,3
"org.apache.cassandra.db.Memtable.accepts(Group,ReplayPosition)",8,4,9
"org.apache.cassandra.db.Memtable.compareTo(Memtable)",1,1,1
"org.apache.cassandra.db.Memtable.creationTime()",1,1,1
"org.apache.cassandra.db.Memtable.estimateRowOverhead(int)",1,3,3
"org.apache.cassandra.db.Memtable.findMinLocalDeletionTime(Iterator<Entry<PartitionPosition, AtomicBTreePartition>>)",1,2,2
"org.apache.cassandra.db.Memtable.flushRunnable()",1,1,1
"org.apache.cassandra.db.Memtable.getAllocator()",1,1,1
"org.apache.cassandra.db.Memtable.getLiveDataSize()",1,1,1
"org.apache.cassandra.db.Memtable.getOperations()",1,1,1
"org.apache.cassandra.db.Memtable.getPartition(DecoratedKey)",1,1,1
"org.apache.cassandra.db.Memtable.isClean()",1,1,1
"org.apache.cassandra.db.Memtable.isCleanAfter(ReplayPosition)",1,3,3
"org.apache.cassandra.db.Memtable.isExpired()",1,2,2
"org.apache.cassandra.db.Memtable.isLive()",1,1,1
"org.apache.cassandra.db.Memtable.makePartitionIterator(ColumnFilter,DataRange,boolean)",1,5,7
"org.apache.cassandra.db.Memtable.partitionCount()",1,1,1
"org.apache.cassandra.db.Memtable.put(PartitionUpdate,UpdateTransaction,Group)",1,3,3
"org.apache.cassandra.db.Memtable.setDiscarded()",1,1,1
"org.apache.cassandra.db.Memtable.setDiscarding(Barrier,AtomicReference<ReplayPosition>)",1,1,1
"org.apache.cassandra.db.Memtable.toString()",1,1,1
"org.apache.cassandra.db.MigrationRequestVerbHandler.doVerb(MessageIn,int)",1,1,1
"org.apache.cassandra.db.MultiCBuilder.MultiCBuilder(ClusteringComparator)",1,1,1
"org.apache.cassandra.db.MultiCBuilder.addAllElementsToAll(List<List<ByteBuffer>>)",1,5,8
"org.apache.cassandra.db.MultiCBuilder.addEachElementToAll(List<ByteBuffer>)",1,5,7
"org.apache.cassandra.db.MultiCBuilder.addElementToAll(ByteBuffer)",1,3,5
"org.apache.cassandra.db.MultiCBuilder.build()",3,4,4
"org.apache.cassandra.db.MultiCBuilder.buildBound(boolean,boolean)",3,4,4
"org.apache.cassandra.db.MultiCBuilder.checkUpdateable()",2,2,3
"org.apache.cassandra.db.MultiCBuilder.containsNull()",1,1,1
"org.apache.cassandra.db.MultiCBuilder.containsUnset()",1,1,1
"org.apache.cassandra.db.MultiCBuilder.create(ClusteringComparator)",1,1,1
"org.apache.cassandra.db.MultiCBuilder.hasMissingElements()",1,1,1
"org.apache.cassandra.db.MultiCBuilder.hasRemaining()",1,1,1
"org.apache.cassandra.db.MultiCBuilder.isEmpty()",1,1,1
"org.apache.cassandra.db.MultiCBuilder.remainingCount()",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.Builder.Builder(DeletionTime,ClusteringComparator,boolean)",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.Builder.add(RangeTombstoneMarker)",1,3,4
"org.apache.cassandra.db.MutableDeletionInfo.Builder.build()",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.MutableDeletionInfo(DeletionTime)",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.MutableDeletionInfo(DeletionTime,RangeTombstoneList)",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.MutableDeletionInfo(long,int)",1,1,2
"org.apache.cassandra.db.MutableDeletionInfo.add(DeletionInfo)",1,4,4
"org.apache.cassandra.db.MutableDeletionInfo.add(DeletionTime)",1,1,2
"org.apache.cassandra.db.MutableDeletionInfo.add(RangeTombstone,ClusteringComparator)",1,1,2
"org.apache.cassandra.db.MutableDeletionInfo.builder(DeletionTime,ClusteringComparator,boolean)",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.collectStats(Collector)",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.copy(AbstractAllocator)",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.dataSize()",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.equals(Object)",2,2,3
"org.apache.cassandra.db.MutableDeletionInfo.getPartitionDeletion()",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.hasRanges()",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.hashCode()",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.isLive()",1,3,3
"org.apache.cassandra.db.MutableDeletionInfo.live()",1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.maxTimestamp()",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.mayModify(DeletionInfo)",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.mutableCopy()",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.rangeCount()",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.rangeCovering(Clustering)",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.rangeIterator(Slice,boolean)",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.rangeIterator(boolean)",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.rangesAsString()",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.toString()",2,3,3
"org.apache.cassandra.db.MutableDeletionInfo.unsharedHeapSize()",1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.updateAllTimestamp(long)",1,3,3
"org.apache.cassandra.db.Mutation.Mutation(PartitionUpdate)",1,1,1
"org.apache.cassandra.db.Mutation.Mutation(String,DecoratedKey)",1,1,1
"org.apache.cassandra.db.Mutation.Mutation(String,DecoratedKey,Map<UUID, PartitionUpdate>)",1,1,1
"org.apache.cassandra.db.Mutation.MutationSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.db.Mutation.MutationSerializer.deserialize(DataInputPlus,int,Flag)",2,4,5
"org.apache.cassandra.db.Mutation.MutationSerializer.serialize(Mutation,DataOutputPlus,int)",1,4,4
"org.apache.cassandra.db.Mutation.MutationSerializer.serializedSize(Mutation,int)",1,4,4
"org.apache.cassandra.db.Mutation.add(PartitionUpdate)",2,2,2
"org.apache.cassandra.db.Mutation.apply()",1,1,1
"org.apache.cassandra.db.Mutation.apply(boolean)",1,1,1
"org.apache.cassandra.db.Mutation.applyUnsafe()",1,1,1
"org.apache.cassandra.db.Mutation.copy()",1,1,1
"org.apache.cassandra.db.Mutation.createMessage()",1,1,1
"org.apache.cassandra.db.Mutation.createMessage(Verb)",1,1,1
"org.apache.cassandra.db.Mutation.get(CFMetaData)",1,1,1
"org.apache.cassandra.db.Mutation.getColumnFamilyIds()",1,1,1
"org.apache.cassandra.db.Mutation.getKeyspaceName()",1,1,1
"org.apache.cassandra.db.Mutation.getPartitionUpdate(UUID)",1,1,1
"org.apache.cassandra.db.Mutation.getPartitionUpdates()",1,1,1
"org.apache.cassandra.db.Mutation.getTimeout()",1,1,1
"org.apache.cassandra.db.Mutation.isEmpty()",1,1,1
"org.apache.cassandra.db.Mutation.key()",1,1,1
"org.apache.cassandra.db.Mutation.merge(List<Mutation>)",7,9,12
"org.apache.cassandra.db.Mutation.smallestGCGS()",1,2,2
"org.apache.cassandra.db.Mutation.toString()",1,1,1
"org.apache.cassandra.db.Mutation.toString(boolean)",1,3,4
"org.apache.cassandra.db.Mutation.without(Set<UUID>)",2,1,2
"org.apache.cassandra.db.Mutation.without(UUID)",1,1,1
"org.apache.cassandra.db.MutationVerbHandler.doVerb(MessageIn<Mutation>,int)",1,6,6
"org.apache.cassandra.db.MutationVerbHandler.forwardToLocalNodes(Mutation,Verb,byte[],InetAddress)",1,2,2
"org.apache.cassandra.db.NativeDecoratedKey.NativeDecoratedKey(Token,NativeAllocator,Group,ByteBuffer)",1,1,1
"org.apache.cassandra.db.NativeDecoratedKey.getKey()",1,1,1
"org.apache.cassandra.db.PartitionColumns.Builder.add(ColumnDefinition)",1,4,4
"org.apache.cassandra.db.PartitionColumns.Builder.addAll(Iterable<ColumnDefinition>)",1,2,2
"org.apache.cassandra.db.PartitionColumns.Builder.addAll(PartitionColumns)",1,7,7
"org.apache.cassandra.db.PartitionColumns.Builder.build()",1,3,3
"org.apache.cassandra.db.PartitionColumns.PartitionColumns(Columns,Columns)",1,1,2
"org.apache.cassandra.db.PartitionColumns.builder()",1,1,1
"org.apache.cassandra.db.PartitionColumns.columns(boolean)",1,1,2
"org.apache.cassandra.db.PartitionColumns.contains(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.PartitionColumns.digest(MessageDigest)",1,1,1
"org.apache.cassandra.db.PartitionColumns.equals(Object)",2,2,3
"org.apache.cassandra.db.PartitionColumns.hashCode()",1,1,1
"org.apache.cassandra.db.PartitionColumns.includes(PartitionColumns)",1,2,2
"org.apache.cassandra.db.PartitionColumns.isEmpty()",1,2,2
"org.apache.cassandra.db.PartitionColumns.iterator()",1,1,1
"org.apache.cassandra.db.PartitionColumns.mergeTo(PartitionColumns)",4,1,6
"org.apache.cassandra.db.PartitionColumns.of(ColumnDefinition)",1,3,3
"org.apache.cassandra.db.PartitionColumns.selectOrderIterator()",1,1,1
"org.apache.cassandra.db.PartitionColumns.size()",1,1,1
"org.apache.cassandra.db.PartitionColumns.toString()",1,1,1
"org.apache.cassandra.db.PartitionColumns.without(ColumnDefinition)",1,3,3
"org.apache.cassandra.db.PartitionColumns.withoutStatics()",1,1,2
"org.apache.cassandra.db.PartitionPosition.ForKey.get(ByteBuffer,IPartitioner)",1,3,3
"org.apache.cassandra.db.PartitionPosition.Kind.fromOrdinal(int)",1,1,1
"org.apache.cassandra.db.PartitionPosition.RowPositionSerializer.deserialize(DataInput,IPartitioner,int)",2,3,3
"org.apache.cassandra.db.PartitionPosition.RowPositionSerializer.serialize(PartitionPosition,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.db.PartitionPosition.RowPositionSerializer.serializedSize(PartitionPosition,int)",1,2,2
"org.apache.cassandra.db.PartitionRangeReadCommand.Deserializer.deserialize(DataInputPlus,int,boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,Optional<IndexMetadata>)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.PartitionRangeReadCommand(CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DataRange,Optional<IndexMetadata>)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.PartitionRangeReadCommand(boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DataRange,Optional<IndexMetadata>)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.allDataRead(CFMetaData,int)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.appendCQLWhereClause(StringBuilder)",2,5,6
"org.apache.cassandra.db.PartitionRangeReadCommand.checkCacheFilter(UnfilteredPartitionIterator,ColumnFamilyStore)",2,3,3
"org.apache.cassandra.db.PartitionRangeReadCommand.clusteringIndexFilter(DecoratedKey)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.copy()",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.createMessage(int)",2,1,3
"org.apache.cassandra.db.PartitionRangeReadCommand.dataRange()",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.execute(ConsistencyLevel,ClientState)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.forSubRange(AbstractBounds<PartitionPosition>)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.getPager(PagingState,int)",2,1,2
"org.apache.cassandra.db.PartitionRangeReadCommand.getTimeout()",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.isNamesQuery()",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.oldestUnrepairedTombstone()",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.postReconciliationProcessing(PartitionIterator)",1,2,2
"org.apache.cassandra.db.PartitionRangeReadCommand.queryStorage(ColumnFamilyStore,ReadOrderGroup)",1,8,8
"org.apache.cassandra.db.PartitionRangeReadCommand.recordLatency(TableMetrics,long)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.selectionSerializedSize(int)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.selectsClustering(DecoratedKey,Clustering)",3,2,3
"org.apache.cassandra.db.PartitionRangeReadCommand.selectsKey(DecoratedKey)",2,1,2
"org.apache.cassandra.db.PartitionRangeReadCommand.serializeSelection(DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.toString()",1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.withUpdatedLimit(DataLimits)",1,1,1
"org.apache.cassandra.db.PreHashedDecoratedKey.PreHashedDecoratedKey(Token,ByteBuffer,long,long)",1,1,1
"org.apache.cassandra.db.PreHashedDecoratedKey.filterHash(long[])",1,1,1
"org.apache.cassandra.db.RangeSliceVerbHandler.serializer()",1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.Bound(Kind,ByteBuffer[])",1,2,2
"org.apache.cassandra.db.RangeTombstone.Bound.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",2,2,3
"org.apache.cassandra.db.RangeTombstone.Bound.Serializer.serialize(Bound,DataOutputPlus,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.Serializer.serializedSize(Bound,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.copy(AbstractAllocator)",1,2,2
"org.apache.cassandra.db.RangeTombstone.Bound.exclusiveClose(boolean,ByteBuffer[])",1,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.exclusiveCloseInclusiveOpen(boolean,ByteBuffer[])",1,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.exclusiveOpen(boolean,ByteBuffer[])",1,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.fromSliceBound(Bound)",1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.inclusiveClose(boolean,ByteBuffer[])",1,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.inclusiveCloseExclusiveOpen(boolean,ByteBuffer[])",1,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.inclusiveOpen(boolean,ByteBuffer[])",1,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.isBoundary()",1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.isClose(boolean)",1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.isOpen(boolean)",1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.withNewKind(Kind)",1,1,1
"org.apache.cassandra.db.RangeTombstone.RangeTombstone(Slice,DeletionTime)",1,1,1
"org.apache.cassandra.db.RangeTombstone.deletedSlice()",1,1,1
"org.apache.cassandra.db.RangeTombstone.deletionTime()",1,1,1
"org.apache.cassandra.db.RangeTombstone.equals(Object)",2,2,3
"org.apache.cassandra.db.RangeTombstone.hashCode()",1,1,1
"org.apache.cassandra.db.RangeTombstone.toString(ClusteringComparator)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.RangeTombstoneList(ClusteringComparator,Bound[],Bound[],long[],int[],long,int)",1,1,3
"org.apache.cassandra.db.RangeTombstoneList.RangeTombstoneList(ClusteringComparator,int)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.add(Bound,Bound,long,int)",2,3,4
"org.apache.cassandra.db.RangeTombstoneList.add(RangeTombstone)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.addAll(RangeTombstoneList)",3,7,9
"org.apache.cassandra.db.RangeTombstoneList.addInternal(int,Bound,Bound,long,int)",1,3,3
"org.apache.cassandra.db.RangeTombstoneList.capacity()",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.clone(Bound,AbstractAllocator)",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.collectStats(Collector)",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.comparator()",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.copy()",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.copy(AbstractAllocator)",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.copyArrays(RangeTombstoneList,RangeTombstoneList)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.dataSize()",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.equals(Object)",8,2,8
"org.apache.cassandra.db.RangeTombstoneList.forwardIterator(Slice)",7,13,16
"org.apache.cassandra.db.RangeTombstoneList.grow(Bound[],int,int,int)",2,2,3
"org.apache.cassandra.db.RangeTombstoneList.grow(int)",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.grow(int,int)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.grow(int[],int,int,int)",2,2,3
"org.apache.cassandra.db.RangeTombstoneList.grow(long[],int,int,int)",2,2,3
"org.apache.cassandra.db.RangeTombstoneList.growToFree(int)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.hashCode()",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.insertFrom(int,Bound,Bound,long,int)",10,15,17
"org.apache.cassandra.db.RangeTombstoneList.isDeleted(Clustering,Cell)",1,3,3
"org.apache.cassandra.db.RangeTombstoneList.isEmpty()",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.iterator()",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.iterator(Slice,boolean)",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.iterator(boolean)",3,4,4
"org.apache.cassandra.db.RangeTombstoneList.maxMarkedAt()",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.moveElements(int)",2,1,2
"org.apache.cassandra.db.RangeTombstoneList.rangeTombstone(int)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.rangeTombstoneWithNewBounds(int,Bound,Bound)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.rangeTombstoneWithNewEnd(int,Bound)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.rangeTombstoneWithNewStart(int,Bound)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.removeInternal(int)",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.reverseIterator(Slice)",7,13,16
"org.apache.cassandra.db.RangeTombstoneList.search(Clustering)",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.searchDeletionTime(Clustering)",1,1,2
"org.apache.cassandra.db.RangeTombstoneList.searchInternal(ClusteringPrefix,int,int)",4,2,5
"org.apache.cassandra.db.RangeTombstoneList.setInternal(int,Bound,Bound,long,int)",1,2,2
"org.apache.cassandra.db.RangeTombstoneList.size()",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.unsharedHeapSize()",1,1,1
"org.apache.cassandra.db.RangeTombstoneList.updateAllTimestamp(long)",1,1,2
"org.apache.cassandra.db.ReadCommand.Kind.Kind(SelectionDeserializer)",1,1,1
"org.apache.cassandra.db.ReadCommand.LegacyPagedRangeCommandSerializer.deserialize(DataInputPlus,int)",2,6,8
"org.apache.cassandra.db.ReadCommand.LegacyPagedRangeCommandSerializer.serialize(ReadCommand,DataOutputPlus,int)",1,11,14
"org.apache.cassandra.db.ReadCommand.LegacyPagedRangeCommandSerializer.serializedSize(ReadCommand,int)",1,3,3
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.deserialize(DataInputPlus,int)",2,6,8
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.deserializeRowFilter(DataInputPlus,CFMetaData)",2,2,3
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.getColumnSelectionForSlice(boolean,int,CFMetaData)",2,3,3
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.maybeConvertNamesToSlice(PartitionRangeReadCommand)",3,1,3
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.serialize(ReadCommand,DataOutputPlus,int)",1,11,13
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.serializeRowFilter(DataOutputPlus,RowFilter)",1,2,2
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.serializedRowFilterSize(RowFilter)",1,2,2
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.serializedSize(ReadCommand,int)",1,5,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.convertNamesFilterToSliceFilter(ClusteringIndexNamesFilter,CFMetaData)",1,5,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserialize(DataInputPlus,int)",4,4,4
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserializeNamesCommand(DataInputPlus,boolean,CFMetaData,DecoratedKey,int,int)",1,1,1
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserializeNamesSelectionAndFilter(DataInputPlus,CFMetaData)",2,6,6
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserializeSliceCommand(DataInputPlus,boolean,CFMetaData,DecoratedKey,int,int)",1,3,6
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserializeSlicePartitionFilter(DataInputPlus,CFMetaData)",3,5,8
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.maybeConvertNamesToSlice(SinglePartitionReadCommand)",3,1,3
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serialize(ReadCommand,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeNamesCommand(SinglePartitionReadCommand,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeNamesFilter(ReadCommand,ClusteringIndexNamesFilter,DataOutputPlus)",1,8,8
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeSlice(DataOutputPlus,Slice,boolean,CFMetaData)",1,3,3
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeSliceCommand(SinglePartitionReadCommand,DataOutputPlus)",1,8,10
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeSlices(DataOutputPlus,Slices,boolean,boolean,CFMetaData)",1,6,7
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeStaticSlice(DataOutputPlus,boolean,CFMetaData)",1,4,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedNamesCommandSize(SinglePartitionReadCommand)",1,1,1
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedNamesFilterSize(ClusteringIndexNamesFilter,CFMetaData,PartitionColumns)",1,5,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedSize(ReadCommand,int)",2,2,2
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedSliceCommandSize(SinglePartitionReadCommand)",1,2,2
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedSlicesSize(Slices,boolean,CFMetaData)",1,3,3
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedStaticSliceSize(CFMetaData)",1,2,2
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.shouldConvertNamesToSlice(CFMetaData,PartitionColumns)",4,3,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.updateLimitForQuery(int,Slices)",4,3,7
"org.apache.cassandra.db.ReadCommand.LegacyType.LegacyType(byte)",1,1,1
"org.apache.cassandra.db.ReadCommand.LegacyType.fromPartitionFilterKind(Kind)",1,1,2
"org.apache.cassandra.db.ReadCommand.LegacyType.fromSerializedValue(byte)",1,1,2
"org.apache.cassandra.db.ReadCommand.RangeSliceSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.db.ReadCommand.RangeSliceSerializer.serialize(ReadCommand,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.db.ReadCommand.RangeSliceSerializer.serializedSize(ReadCommand,int)",1,2,2
"org.apache.cassandra.db.ReadCommand.ReadCommand(Kind,boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits)",1,1,1
"org.apache.cassandra.db.ReadCommand.Serializer.deserialize(DataInputPlus,int)",2,4,4
"org.apache.cassandra.db.ReadCommand.Serializer.deserializeIndexMetadata(DataInputPlus,int,CFMetaData)",1,2,2
"org.apache.cassandra.db.ReadCommand.Serializer.digestFlag(boolean)",1,1,2
"org.apache.cassandra.db.ReadCommand.Serializer.hasIndex(int)",1,1,1
"org.apache.cassandra.db.ReadCommand.Serializer.indexFlag(boolean)",1,1,2
"org.apache.cassandra.db.ReadCommand.Serializer.isDigest(int)",1,1,1
"org.apache.cassandra.db.ReadCommand.Serializer.isForThrift(int)",1,1,1
"org.apache.cassandra.db.ReadCommand.Serializer.serialize(ReadCommand,DataOutputPlus,int)",1,3,3
"org.apache.cassandra.db.ReadCommand.Serializer.serializedSize(ReadCommand,int)",1,2,2
"org.apache.cassandra.db.ReadCommand.Serializer.thriftFlag(boolean)",1,1,2
"org.apache.cassandra.db.ReadCommand.columnFilter()",1,1,1
"org.apache.cassandra.db.ReadCommand.createResponse(UnfilteredPartitionIterator,ColumnFilter)",1,2,2
"org.apache.cassandra.db.ReadCommand.digestVersion()",1,1,1
"org.apache.cassandra.db.ReadCommand.executeInternal(ReadOrderGroup)",1,1,1
"org.apache.cassandra.db.ReadCommand.executeLocally(ReadOrderGroup)",1,6,6
"org.apache.cassandra.db.ReadCommand.getIndex(ColumnFamilyStore)",4,2,4
"org.apache.cassandra.db.ReadCommand.indexSerializedSize(int)",2,2,2
"org.apache.cassandra.db.ReadCommand.isDigestQuery()",1,1,1
"org.apache.cassandra.db.ReadCommand.isForThrift()",1,1,1
"org.apache.cassandra.db.ReadCommand.limits()",1,1,1
"org.apache.cassandra.db.ReadCommand.metadata()",1,1,1
"org.apache.cassandra.db.ReadCommand.nowInSec()",1,1,1
"org.apache.cassandra.db.ReadCommand.rowFilter()",1,1,1
"org.apache.cassandra.db.ReadCommand.setDigestVersion(int)",1,1,1
"org.apache.cassandra.db.ReadCommand.setIsDigestQuery(boolean)",1,1,1
"org.apache.cassandra.db.ReadCommand.startOrderGroup()",1,1,1
"org.apache.cassandra.db.ReadCommand.toCQLString()",1,2,2
"org.apache.cassandra.db.ReadCommand.withMetricsRecording(UnfilteredPartitionIterator,TableMetrics,long)",2,5,9
"org.apache.cassandra.db.ReadCommand.withoutPurgeableTombstones(UnfilteredPartitionIterator,ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(MessageIn<ReadCommand>,int)",2,1,2
"org.apache.cassandra.db.ReadCommandVerbHandler.serializer()",1,1,1
"org.apache.cassandra.db.ReadOrderGroup.ReadOrderGroup(Group,Group,Group)",1,1,1
"org.apache.cassandra.db.ReadOrderGroup.baseReadOpOrderGroup()",1,1,1
"org.apache.cassandra.db.ReadOrderGroup.close()",1,3,3
"org.apache.cassandra.db.ReadOrderGroup.emptyGroup()",1,1,1
"org.apache.cassandra.db.ReadOrderGroup.forCommand(ReadCommand)",2,5,5
"org.apache.cassandra.db.ReadOrderGroup.indexReadOpOrderGroup()",1,1,1
"org.apache.cassandra.db.ReadOrderGroup.maybeGetIndexCfs(ColumnFamilyStore,ReadCommand)",1,2,2
"org.apache.cassandra.db.ReadOrderGroup.writeOpOrderGroup()",1,1,1
"org.apache.cassandra.db.ReadRepairVerbHandler.doVerb(MessageIn<Mutation>,int)",1,1,1
"org.apache.cassandra.db.ReadResponse.DataResponse.DataResponse(CFMetaData,ByteBuffer,Flag)",1,1,1
"org.apache.cassandra.db.ReadResponse.DataResponse.digest(CFMetaData,ReadCommand)",1,1,1
"org.apache.cassandra.db.ReadResponse.DataResponse.isDigestResponse()",1,1,1
"org.apache.cassandra.db.ReadResponse.DataResponse.makeIterator(CFMetaData,ReadCommand)",1,1,2
"org.apache.cassandra.db.ReadResponse.DigestResponse.DigestResponse(ByteBuffer)",1,1,1
"org.apache.cassandra.db.ReadResponse.DigestResponse.digest(CFMetaData,ReadCommand)",1,1,1
"org.apache.cassandra.db.ReadResponse.DigestResponse.isDigestResponse()",1,1,1
"org.apache.cassandra.db.ReadResponse.DigestResponse.makeIterator(CFMetaData,ReadCommand)",1,1,1
"org.apache.cassandra.db.ReadResponse.LegacyRangeSliceReplySerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.db.ReadResponse.LegacyRangeSliceReplySerializer.serialize(ReadResponse,DataOutputPlus,int)",1,4,4
"org.apache.cassandra.db.ReadResponse.LegacyRangeSliceReplySerializer.serializedSize(ReadResponse,int)",1,2,2
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse.LegacyRemoteDataResponse(List<ImmutableBTreePartition>)",1,1,1
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse.digest(CFMetaData,ReadCommand)",1,1,1
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse.isDigestResponse()",1,1,1
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse.makeIterator(CFMetaData,ReadCommand)",2,9,12
"org.apache.cassandra.db.ReadResponse.LocalDataResponse.LocalDataResponse(UnfilteredPartitionIterator,ColumnFilter)",1,1,1
"org.apache.cassandra.db.ReadResponse.LocalDataResponse.build(UnfilteredPartitionIterator,ColumnFilter)",1,1,2
"org.apache.cassandra.db.ReadResponse.LocalDataResponse.selection(ReadCommand)",1,2,2
"org.apache.cassandra.db.ReadResponse.RangeSliceSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.db.ReadResponse.RangeSliceSerializer.serialize(ReadResponse,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.db.ReadResponse.RangeSliceSerializer.serializedSize(ReadResponse,int)",1,2,2
"org.apache.cassandra.db.ReadResponse.ReadResponse(CFMetaData)",1,1,1
"org.apache.cassandra.db.ReadResponse.RemoteDataResponse.RemoteDataResponse(ByteBuffer)",1,1,1
"org.apache.cassandra.db.ReadResponse.RemoteDataResponse.selection(ReadCommand)",1,1,1
"org.apache.cassandra.db.ReadResponse.Serializer.deserialize(DataInputPlus,int)",5,5,6
"org.apache.cassandra.db.ReadResponse.Serializer.serialize(ReadResponse,DataOutputPlus,int)",2,4,5
"org.apache.cassandra.db.ReadResponse.Serializer.serializedSize(ReadResponse,int)",2,4,5
"org.apache.cassandra.db.ReadResponse.createDataResponse(UnfilteredPartitionIterator,ColumnFilter)",1,1,1
"org.apache.cassandra.db.ReadResponse.createDigestResponse(UnfilteredPartitionIterator,int)",1,1,1
"org.apache.cassandra.db.ReadResponse.createRemoteDataResponse(UnfilteredPartitionIterator,ColumnFilter)",1,1,1
"org.apache.cassandra.db.ReadResponse.makeDigest(UnfilteredPartitionIterator,int)",1,1,1
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.IndexedEntry(long,DeletionTime,long,List<IndexInfo>)",1,2,2
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.columnsIndex()",1,1,1
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.deletionTime()",1,1,1
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.headerLength()",1,1,1
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.promotedSize(Serializer)",1,2,2
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.unsharedHeapSize()",1,2,2
"org.apache.cassandra.db.RowIndexEntry.RowIndexEntry(long)",1,1,1
"org.apache.cassandra.db.RowIndexEntry.Serializer.Serializer(CFMetaData,Version,SerializationHeader)",1,1,1
"org.apache.cassandra.db.RowIndexEntry.Serializer.deserialize(DataInputPlus)",4,6,7
"org.apache.cassandra.db.RowIndexEntry.Serializer.readPosition(DataInputPlus,Version)",1,2,2
"org.apache.cassandra.db.RowIndexEntry.Serializer.serialize(RowIndexEntry<IndexInfo>,DataOutputPlus)",1,7,7
"org.apache.cassandra.db.RowIndexEntry.Serializer.serializedSize(RowIndexEntry<IndexInfo>)",1,3,3
"org.apache.cassandra.db.RowIndexEntry.Serializer.skip(DataInputPlus,Version)",1,1,1
"org.apache.cassandra.db.RowIndexEntry.Serializer.skipPromotedIndex(DataInputPlus,Version)",2,2,3
"org.apache.cassandra.db.RowIndexEntry.columnsIndex()",1,1,1
"org.apache.cassandra.db.RowIndexEntry.create(long,DeletionTime,ColumnIndex)",2,1,2
"org.apache.cassandra.db.RowIndexEntry.deletionTime()",1,1,1
"org.apache.cassandra.db.RowIndexEntry.headerLength()",1,1,1
"org.apache.cassandra.db.RowIndexEntry.headerOffset()",1,1,1
"org.apache.cassandra.db.RowIndexEntry.isIndexed()",1,1,1
"org.apache.cassandra.db.RowIndexEntry.promotedSize(Serializer)",1,1,1
"org.apache.cassandra.db.RowIndexEntry.unsharedHeapSize()",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,int,long,Object)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,int,long,int,Object)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,long,Mutation)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,long,Object)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,long,int,Mutation)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,long,int,Object)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(PartitionUpdate,long,int)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(PartitionUpdate,long,int,Mutation)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(PartitionUpdate,long,int,int,Mutation)",1,2,2
"org.apache.cassandra.db.RowUpdateBuilder.add(ColumnDefinition,Object)",1,3,3
"org.apache.cassandra.db.RowUpdateBuilder.add(String,Object)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.addListEntry(String,Object)",1,3,3
"org.apache.cassandra.db.RowUpdateBuilder.addMapEntry(String,Object,Object)",1,4,4
"org.apache.cassandra.db.RowUpdateBuilder.addRangeTombstone(Object,Object)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.addRangeTombstone(RangeTombstone)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.addRangeTombstone(Slice)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.addSetEntry(String,Object)",1,3,3
"org.apache.cassandra.db.RowUpdateBuilder.bb(Object,AbstractType<?>)",4,2,4
"org.apache.cassandra.db.RowUpdateBuilder.build()",1,2,3
"org.apache.cassandra.db.RowUpdateBuilder.buildUpdate()",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.builder()",1,2,2
"org.apache.cassandra.db.RowUpdateBuilder.builder(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.RowUpdateBuilder.clustering(Object...)",1,2,2
"org.apache.cassandra.db.RowUpdateBuilder.delete(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.delete(String)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.deleteRow(CFMetaData,long,Mutation,Object...)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.deleteRow(CFMetaData,long,Object,Object...)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.deleteRow(PartitionUpdate,long,int,Object...)",1,5,5
"org.apache.cassandra.db.RowUpdateBuilder.deleteRowAt(CFMetaData,long,int,Object,Object...)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.frozenList(String,List<?>)",1,3,3
"org.apache.cassandra.db.RowUpdateBuilder.frozenMap(String,Map<?, ?>)",1,3,3
"org.apache.cassandra.db.RowUpdateBuilder.frozenSet(String,Set<?>)",1,3,3
"org.apache.cassandra.db.RowUpdateBuilder.getDefinition(String)",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.getOrAdd(CFMetaData,Mutation)",1,2,2
"org.apache.cassandra.db.RowUpdateBuilder.makeCell(ColumnDefinition,ByteBuffer,CellPath)",1,3,3
"org.apache.cassandra.db.RowUpdateBuilder.makeKey(CFMetaData,Object...)",2,1,3
"org.apache.cassandra.db.RowUpdateBuilder.map(String,Map<?, ?>)",1,2,2
"org.apache.cassandra.db.RowUpdateBuilder.noRowMarker()",1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.resetCollection(String)",1,4,4
"org.apache.cassandra.db.RowUpdateBuilder.set(String,Set<?>)",1,2,2
"org.apache.cassandra.db.RowUpdateBuilder.startRow(Clustering)",1,3,3
"org.apache.cassandra.db.RowUpdateBuilder.staticBuilder()",1,2,2
"org.apache.cassandra.db.RowUpdateBuilder.unfilteredIterator()",1,1,1
"org.apache.cassandra.db.SchemaCheckVerbHandler.doVerb(MessageIn,int)",1,1,1
"org.apache.cassandra.db.SerializationHeader.Component.Component(AbstractType<?>,List<AbstractType<?>>,Map<ByteBuffer, AbstractType<?>>,Map<ByteBuffer, AbstractType<?>>,EncodingStats)",1,1,1
"org.apache.cassandra.db.SerializationHeader.Component.equals(Object)",2,5,6
"org.apache.cassandra.db.SerializationHeader.Component.getType()",1,1,1
"org.apache.cassandra.db.SerializationHeader.Component.hashCode()",1,1,1
"org.apache.cassandra.db.SerializationHeader.Component.toHeader(CFMetaData)",4,4,4
"org.apache.cassandra.db.SerializationHeader.Component.toString()",1,1,1
"org.apache.cassandra.db.SerializationHeader.SerializationHeader(boolean,AbstractType<?>,List<AbstractType<?>>,PartitionColumns,EncodingStats,Map<ByteBuffer, AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.SerializationHeader.SerializationHeader(boolean,CFMetaData,PartitionColumns,EncodingStats)",1,1,1
"org.apache.cassandra.db.SerializationHeader.Serializer.deserialize(Version,DataInputPlus)",1,2,2
"org.apache.cassandra.db.SerializationHeader.Serializer.deserializeForMessaging(DataInputPlus,CFMetaData,ColumnFilter,boolean)",1,4,4
"org.apache.cassandra.db.SerializationHeader.Serializer.readColumnsWithType(DataInputPlus,Map<ByteBuffer, AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.SerializationHeader.Serializer.readType(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.Serializer.serialize(Version,Component,DataOutputPlus)",1,2,2
"org.apache.cassandra.db.SerializationHeader.Serializer.serializeForMessaging(SerializationHeader,ColumnFilter,DataOutputPlus,boolean)",1,4,4
"org.apache.cassandra.db.SerializationHeader.Serializer.serializedSize(Version,Component)",1,2,2
"org.apache.cassandra.db.SerializationHeader.Serializer.serializedSizeForMessaging(SerializationHeader,ColumnFilter,boolean)",1,4,4
"org.apache.cassandra.db.SerializationHeader.Serializer.sizeofColumnsWithTypes(Map<ByteBuffer, AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.SerializationHeader.Serializer.sizeofType(AbstractType<?>)",1,1,1
"org.apache.cassandra.db.SerializationHeader.Serializer.writeColumnsWithTypes(Map<ByteBuffer, AbstractType<?>>,DataOutputPlus)",1,2,2
"org.apache.cassandra.db.SerializationHeader.Serializer.writeType(AbstractType<?>,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.clusteringTypes()",1,1,1
"org.apache.cassandra.db.SerializationHeader.columns()",1,1,1
"org.apache.cassandra.db.SerializationHeader.columns(boolean)",1,1,2
"org.apache.cassandra.db.SerializationHeader.deletionTimeSerializedSize(DeletionTime)",1,1,1
"org.apache.cassandra.db.SerializationHeader.forKeyCache(CFMetaData)",1,2,2
"org.apache.cassandra.db.SerializationHeader.getType(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.SerializationHeader.hasStatic()",1,1,1
"org.apache.cassandra.db.SerializationHeader.isForSSTable()",1,1,1
"org.apache.cassandra.db.SerializationHeader.keyType()",1,1,1
"org.apache.cassandra.db.SerializationHeader.localDeletionTimeSerializedSize(int)",1,1,1
"org.apache.cassandra.db.SerializationHeader.make(CFMetaData,Collection<SSTableReader>)",1,3,3
"org.apache.cassandra.db.SerializationHeader.readDeletionTime(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.readLocalDeletionTime(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.readTTL(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.readTimestamp(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.skipDeletionTime(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.skipLocalDeletionTime(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.skipTTL(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.skipTimestamp(DataInputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.stats()",1,1,1
"org.apache.cassandra.db.SerializationHeader.timestampSerializedSize(long)",1,1,1
"org.apache.cassandra.db.SerializationHeader.toComponent()",1,3,3
"org.apache.cassandra.db.SerializationHeader.toString()",1,1,1
"org.apache.cassandra.db.SerializationHeader.ttlSerializedSize(int)",1,1,1
"org.apache.cassandra.db.SerializationHeader.typesOf(List<ColumnDefinition>)",1,1,1
"org.apache.cassandra.db.SerializationHeader.writeDeletionTime(DeletionTime,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.writeLocalDeletionTime(int,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.writeTTL(int,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.SerializationHeader.writeTimestamp(long,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.Serializers.Serializers(CFMetaData)",1,1,1
"org.apache.cassandra.db.Serializers.indexEntryClusteringPrefixSerializer(Version,SerializationHeader)",5,5,8
"org.apache.cassandra.db.SinglePartitionReadCommand.Deserializer.deserialize(DataInputPlus,int,boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,Optional<IndexMetadata>)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.Group(List<SinglePartitionReadCommand>,DataLimits)",1,2,2
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.execute(ConsistencyLevel,ClientState)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.executeInternal(ReadOrderGroup)",1,2,2
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.getPager(PagingState,int)",2,2,2
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.limits()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.metadata()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.nowInSec()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.one(SinglePartitionReadCommand)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.selectsClustering(DecoratedKey,Clustering)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.selectsKey(DecoratedKey)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.startOrderGroup()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.toString()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.SinglePartitionReadCommand(boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DecoratedKey,ClusteringIndexFilter)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.add(UnfilteredRowIterator,ImmutableBTreePartition,ClusteringIndexNamesFilter,boolean)",2,3,3
"org.apache.cassandra.db.SinglePartitionReadCommand.appendCQLWhereClause(StringBuilder)",1,3,3
"org.apache.cassandra.db.SinglePartitionReadCommand.canRemoveRow(Row,Columns,long)",4,4,6
"org.apache.cassandra.db.SinglePartitionReadCommand.clusteringIndexFilter()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.clusteringIndexFilter(DecoratedKey)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.copy()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,ByteBuffer,Slices)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DecoratedKey,ClusteringIndexFilter)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,DecoratedKey,ColumnFilter,ClusteringIndexFilter)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,DecoratedKey,Slice)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,DecoratedKey,Slices)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DecoratedKey,ClusteringIndexFilter)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.createMessage(int)",1,1,2
"org.apache.cassandra.db.SinglePartitionReadCommand.execute(ConsistencyLevel,ClientState)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.forPaging(Clustering,int)",1,2,2
"org.apache.cassandra.db.SinglePartitionReadCommand.fullPartitionRead(CFMetaData,int,ByteBuffer)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.fullPartitionRead(CFMetaData,int,DecoratedKey)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.getPager(PagingState,int)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.getPager(SinglePartitionReadCommand,PagingState,int)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.getThroughCache(ColumnFamilyStore,Group)",6,11,12
"org.apache.cassandra.db.SinglePartitionReadCommand.getTimeout()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.oldestUnrepairedTombstone()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.partitionKey()",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(ColumnFamilyStore,Group)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(ColumnFamilyStore,boolean)",11,20,24
"org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(ColumnFamilyStore,boolean,ClusteringIndexNamesFilter)",9,12,17
"org.apache.cassandra.db.SinglePartitionReadCommand.queryNeitherCountersNorCollections()",3,3,4
"org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(ColumnFamilyStore,ReadOrderGroup)",1,2,2
"org.apache.cassandra.db.SinglePartitionReadCommand.recordLatency(TableMetrics,long)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.reduceFilter(ClusteringIndexNamesFilter,Partition,long)",7,10,17
"org.apache.cassandra.db.SinglePartitionReadCommand.selectionSerializedSize(int)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.selectsClustering(DecoratedKey,Clustering)",3,2,3
"org.apache.cassandra.db.SinglePartitionReadCommand.selectsKey(DecoratedKey)",2,1,2
"org.apache.cassandra.db.SinglePartitionReadCommand.serializeSelection(DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.toString()",1,1,1
"org.apache.cassandra.db.SizeEstimatesRecorder.SizeEstimatesRecorder()",1,1,1
"org.apache.cassandra.db.SizeEstimatesRecorder.estimateMeanPartitionSize(Collection<SSTableReader>)",1,2,3
"org.apache.cassandra.db.SizeEstimatesRecorder.estimatePartitionsCount(Collection<SSTableReader>,Range<Token>)",1,2,2
"org.apache.cassandra.db.SizeEstimatesRecorder.onDropColumnFamily(String,String)",1,1,1
"org.apache.cassandra.db.SizeEstimatesRecorder.recordSizeEstimates(ColumnFamilyStore,Collection<Range<Token>>)",1,4,4
"org.apache.cassandra.db.SizeEstimatesRecorder.run()",2,4,4
"org.apache.cassandra.db.Slice.Bound.Bound(Kind,ByteBuffer[])",1,1,1
"org.apache.cassandra.db.Slice.Bound.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.Slice.Bound.Serializer.deserializeValues(DataInputPlus,Kind,int,List<AbstractType<?>>)",2,2,3
"org.apache.cassandra.db.Slice.Bound.Serializer.serialize(Bound,DataOutputPlus,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.Slice.Bound.Serializer.serializedSize(Bound,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.Slice.Bound.boundKind(boolean,boolean)",1,1,4
"org.apache.cassandra.db.Slice.Bound.compareTo(ClusteringComparator,List<ByteBuffer>)",5,5,9
"org.apache.cassandra.db.Slice.Bound.create(ClusteringComparator,boolean,boolean,Object...)",1,3,3
"org.apache.cassandra.db.Slice.Bound.create(Kind,ByteBuffer[])",1,1,1
"org.apache.cassandra.db.Slice.Bound.exclusiveEndOf(ByteBuffer...)",1,1,1
"org.apache.cassandra.db.Slice.Bound.exclusiveStartOf(ByteBuffer...)",1,1,1
"org.apache.cassandra.db.Slice.Bound.exclusiveStartOf(ClusteringPrefix)",1,2,2
"org.apache.cassandra.db.Slice.Bound.inclusiveEndOf(ByteBuffer...)",1,1,1
"org.apache.cassandra.db.Slice.Bound.inclusiveEndOf(ClusteringPrefix)",1,2,2
"org.apache.cassandra.db.Slice.Bound.inclusiveStartOf(ByteBuffer...)",1,1,1
"org.apache.cassandra.db.Slice.Bound.inclusiveStartOf(ClusteringPrefix)",1,2,2
"org.apache.cassandra.db.Slice.Bound.invert()",1,1,1
"org.apache.cassandra.db.Slice.Bound.isEnd()",1,1,1
"org.apache.cassandra.db.Slice.Bound.isExclusive()",1,1,2
"org.apache.cassandra.db.Slice.Bound.isInclusive()",1,1,2
"org.apache.cassandra.db.Slice.Bound.isStart()",1,1,1
"org.apache.cassandra.db.Slice.Bound.toString(CFMetaData)",1,1,1
"org.apache.cassandra.db.Slice.Bound.toString(ClusteringComparator)",1,3,3
"org.apache.cassandra.db.Slice.Bound.withNewKind(Kind)",1,1,1
"org.apache.cassandra.db.Slice.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.Slice.Serializer.serialize(Slice,DataOutputPlus,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.Slice.Serializer.serializedSize(Slice,int,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.Slice.Slice(Bound,Bound)",1,2,2
"org.apache.cassandra.db.Slice.close(boolean)",1,1,2
"org.apache.cassandra.db.Slice.end()",1,1,1
"org.apache.cassandra.db.Slice.equals(Object)",2,2,3
"org.apache.cassandra.db.Slice.extractValues(ClusteringPrefix)",1,2,2
"org.apache.cassandra.db.Slice.forPaging(ClusteringComparator,Clustering,boolean,boolean)",7,4,17
"org.apache.cassandra.db.Slice.hashCode()",1,1,1
"org.apache.cassandra.db.Slice.includes(ClusteringComparator,Bound)",1,2,2
"org.apache.cassandra.db.Slice.intersects(ClusteringComparator,List<ByteBuffer>,List<ByteBuffer>)",5,12,15
"org.apache.cassandra.db.Slice.isEmpty(ClusteringComparator)",1,1,1
"org.apache.cassandra.db.Slice.isEmpty(ClusteringComparator,Bound,Bound)",1,2,2
"org.apache.cassandra.db.Slice.make(Bound,Bound)",2,1,3
"org.apache.cassandra.db.Slice.make(Clustering)",1,1,1
"org.apache.cassandra.db.Slice.make(Clustering,Clustering)",1,1,2
"org.apache.cassandra.db.Slice.make(ClusteringComparator,Object...)",1,3,3
"org.apache.cassandra.db.Slice.open(boolean)",1,1,2
"org.apache.cassandra.db.Slice.selects(ClusteringComparator,Clustering)",1,2,2
"org.apache.cassandra.db.Slice.start()",1,1,1
"org.apache.cassandra.db.Slice.toString(CFMetaData)",1,1,1
"org.apache.cassandra.db.Slice.toString(ClusteringComparator)",1,5,7
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ArrayBackedSlices(ClusteringComparator,Slice[])",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ComponentOfSlice.ComponentOfSlice(boolean,ByteBuffer,boolean,ByteBuffer)",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ComponentOfSlice.fromSlice(int,Slice)",2,4,5
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ComponentOfSlice.isEQ()",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InForwardOrderTester.includes(Clustering)",6,3,6
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InForwardOrderTester.isDone()",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InReverseOrderTester.InReverseOrderTester()",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InReverseOrderTester.includes(Clustering)",6,3,6
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InReverseOrderTester.isDone()",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.forForwardPaging(ClusteringComparator,Clustering,boolean)",4,2,5
"org.apache.cassandra.db.Slices.ArrayBackedSlices.forPaging(ClusteringComparator,Clustering,boolean,boolean)",1,2,2
"org.apache.cassandra.db.Slices.ArrayBackedSlices.forReversePaging(ClusteringComparator,Clustering,boolean)",4,2,5
"org.apache.cassandra.db.Slices.ArrayBackedSlices.get(int)",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.hasLowerBound()",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.hasUpperBound()",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.inOrderTester(boolean)",1,1,2
"org.apache.cassandra.db.Slices.ArrayBackedSlices.intersects(List<ByteBuffer>,List<ByteBuffer>)",3,2,3
"org.apache.cassandra.db.Slices.ArrayBackedSlices.iterator()",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.makeSliceIterator(SliceableUnfilteredRowIterator)",5,3,8
"org.apache.cassandra.db.Slices.ArrayBackedSlices.selects(Clustering)",4,2,4
"org.apache.cassandra.db.Slices.ArrayBackedSlices.size()",1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.toCQLString(CFMetaData)",3,14,18
"org.apache.cassandra.db.Slices.ArrayBackedSlices.toString()",1,3,3
"org.apache.cassandra.db.Slices.Builder.Builder(ClusteringComparator)",1,1,1
"org.apache.cassandra.db.Slices.Builder.Builder(ClusteringComparator,int)",1,1,1
"org.apache.cassandra.db.Slices.Builder.add(Bound,Bound)",1,1,1
"org.apache.cassandra.db.Slices.Builder.add(Slice)",1,2,3
"org.apache.cassandra.db.Slices.Builder.build()",3,3,5
"org.apache.cassandra.db.Slices.Builder.normalize(List<Slice>)",7,4,9
"org.apache.cassandra.db.Slices.Builder.size()",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.forPaging(ClusteringComparator,Clustering,boolean,boolean)",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.get(int)",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.hasLowerBound()",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.hasUpperBound()",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.inOrderTester(boolean)",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.intersects(List<ByteBuffer>,List<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.iterator()",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.makeSliceIterator(SliceableUnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.selects(Clustering)",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.size()",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.toCQLString(CFMetaData)",1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.toString()",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.forPaging(ClusteringComparator,Clustering,boolean,boolean)",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.get(int)",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.hasLowerBound()",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.hasUpperBound()",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.inOrderTester(boolean)",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.intersects(List<ByteBuffer>,List<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.iterator()",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.makeSliceIterator(SliceableUnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.selects(Clustering)",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.size()",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.toCQLString(CFMetaData)",1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.toString()",1,1,1
"org.apache.cassandra.db.Slices.Serializer.deserialize(DataInputPlus,int,CFMetaData)",3,4,6
"org.apache.cassandra.db.Slices.Serializer.serialize(Slices,DataOutputPlus,int)",2,3,4
"org.apache.cassandra.db.Slices.Serializer.serializedSize(Slices,int)",2,3,4
"org.apache.cassandra.db.Slices.Slices()",1,1,1
"org.apache.cassandra.db.Slices.isEmpty()",1,1,1
"org.apache.cassandra.db.Slices.with(ClusteringComparator,Slice)",2,2,3
"org.apache.cassandra.db.SnapshotCommand.SnapshotCommand(String,String,String,boolean)",1,1,1
"org.apache.cassandra.db.SnapshotCommand.createMessage()",1,1,1
"org.apache.cassandra.db.SnapshotCommand.toString()",1,1,1
"org.apache.cassandra.db.SnapshotCommandSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.db.SnapshotCommandSerializer.serialize(SnapshotCommand,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.SnapshotCommandSerializer.serializedSize(SnapshotCommand,int)",1,1,1
"org.apache.cassandra.db.SnapshotDetailsTabularData.from(String,String,String,Entry<String, Pair<Long, Long>>,TabularDataSupport)",1,1,2
"org.apache.cassandra.db.SystemKeyspace.SystemKeyspace()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.beginViewBuild(String,String,int)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.bootstrapComplete()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.bootstrapInProgress()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.byteBufferToRange(ByteBuffer,IPartitioner)",1,1,2
"org.apache.cassandra.db.SystemKeyspace.checkHealth()",4,5,6
"org.apache.cassandra.db.SystemKeyspace.clearSSTableReadMeter(String,String,int)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.clearSizeEstimates(String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.compile(String,String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.deserializeTokens(Collection<String>)",1,2,2
"org.apache.cassandra.db.SystemKeyspace.finishStartup()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.finishViewBuildStatus(String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.forceBlockingFlush(String)",1,2,2
"org.apache.cassandra.db.SystemKeyspace.functions()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.getAvailableRanges(String,IPartitioner)",1,3,3
"org.apache.cassandra.db.SystemKeyspace.getBootstrapState()",2,2,3
"org.apache.cassandra.db.SystemKeyspace.getBuiltIndexes(String,Set<String>)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.getCompactionHistory()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.getLocalHostId()",2,3,3
"org.apache.cassandra.db.SystemKeyspace.getPreferredIP(InetAddress)",2,3,3
"org.apache.cassandra.db.SystemKeyspace.getPreviousVersionString()",4,6,6
"org.apache.cassandra.db.SystemKeyspace.getRack()",2,3,3
"org.apache.cassandra.db.SystemKeyspace.getReleaseVersion(InetAddress)",3,4,5
"org.apache.cassandra.db.SystemKeyspace.getSSTableReadMeter(String,String,int)",2,1,2
"org.apache.cassandra.db.SystemKeyspace.getSavedTokens()",1,3,3
"org.apache.cassandra.db.SystemKeyspace.getTruncatedAt(UUID)",1,1,2
"org.apache.cassandra.db.SystemKeyspace.getTruncatedPosition(UUID)",1,1,2
"org.apache.cassandra.db.SystemKeyspace.getTruncationRecord(UUID)",1,2,2
"org.apache.cassandra.db.SystemKeyspace.getViewBuildStatus(String,String)",2,4,5
"org.apache.cassandra.db.SystemKeyspace.incrementAndGetGeneration()",1,4,4
"org.apache.cassandra.db.SystemKeyspace.isIndexBuilt(String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.isViewBuilt(String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.loadDcRackInfo()",1,4,4
"org.apache.cassandra.db.SystemKeyspace.loadHostIds()",1,3,3
"org.apache.cassandra.db.SystemKeyspace.loadPaxosState(DecoratedKey,CFMetaData)",2,6,7
"org.apache.cassandra.db.SystemKeyspace.loadTokens()",1,3,3
"org.apache.cassandra.db.SystemKeyspace.metadata()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.migrateDataDirs()",1,5,5
"org.apache.cassandra.db.SystemKeyspace.paxosTtl(CFMetaData)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.persistLocalMetadata()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.persistSSTableReadMeter(String,String,int,RestorableMeter)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.rangeToBytes(Range<Token>)",1,1,2
"org.apache.cassandra.db.SystemKeyspace.readTruncationRecords()",1,4,4
"org.apache.cassandra.db.SystemKeyspace.removeEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.removeTruncationRecord(UUID)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.resetAvailableRanges()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.savePaxosCommit(Commit)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.savePaxosPromise(Commit)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.savePaxosProposal(Commit)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.saveTruncationRecord(ColumnFamilyStore,long,ReplayPosition)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.setBootstrapState(BootstrapState)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.setIndexBuilt(String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.setIndexRemoved(String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.setLocalHostId(UUID)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.setViewBuilt(String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.setViewRemoved(String,String)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.snapshotOnVersionChange()",2,3,3
"org.apache.cassandra.db.SystemKeyspace.tables()",1,1,1
"org.apache.cassandra.db.SystemKeyspace.tokensAsSet(Collection<Token>)",2,3,3
"org.apache.cassandra.db.SystemKeyspace.truncationAsMapEntry(ColumnFamilyStore,long,ReplayPosition)",1,1,2
"org.apache.cassandra.db.SystemKeyspace.truncationRecordFromBlob(ByteBuffer)",1,2,3
"org.apache.cassandra.db.SystemKeyspace.updateAvailableRanges(String,Collection<Range<Token>>)",1,2,2
"org.apache.cassandra.db.SystemKeyspace.updateCompactionHistory(String,String,long,long,long,Map<Integer, Long>)",2,2,3
"org.apache.cassandra.db.SystemKeyspace.updateHintsDropped(InetAddress,UUID,int)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.updateLocalTokens(Collection<Token>,Collection<Token>)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.updatePeerInfo(InetAddress,String,Object)",2,1,2
"org.apache.cassandra.db.SystemKeyspace.updatePreferredIP(InetAddress,InetAddress)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.updateSchemaVersion(UUID)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.updateSizeEstimates(String,String,Map<Range<Token>, Pair<Long, Long>>)",1,2,2
"org.apache.cassandra.db.SystemKeyspace.updateTokens(Collection<Token>)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.updateTokens(InetAddress,Collection<Token>)",2,1,2
"org.apache.cassandra.db.SystemKeyspace.updateViewBuildStatus(String,String,Token)",1,1,1
"org.apache.cassandra.db.SystemKeyspace.wasDecommissioned()",1,1,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponse(String,String,boolean)",1,1,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer.serialize(TruncateResponse,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer.serializedSize(TruncateResponse,int)",1,1,1
"org.apache.cassandra.db.TruncateResponse.createMessage()",1,1,1
"org.apache.cassandra.db.TruncateVerbHandler.doVerb(MessageIn<Truncation>,int)",2,3,3
"org.apache.cassandra.db.TruncateVerbHandler.respondError(Truncation,MessageIn)",1,1,1
"org.apache.cassandra.db.Truncation.Truncation(String,String)",1,1,1
"org.apache.cassandra.db.Truncation.createMessage()",1,1,1
"org.apache.cassandra.db.Truncation.toString()",1,1,1
"org.apache.cassandra.db.TruncationSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.db.TruncationSerializer.serialize(Truncation,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.TruncationSerializer.serializedSize(Truncation,int)",1,1,1
"org.apache.cassandra.db.TypeSizes.TypeSizes()",1,1,1
"org.apache.cassandra.db.TypeSizes.encodedUTF8Length(String)",1,2,5
"org.apache.cassandra.db.TypeSizes.sizeof(String)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(UUID)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(boolean)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(int)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(long)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(short)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofUnsignedVInt(long)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofVInt(long)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofWithLength(ByteBuffer)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofWithShortLength(ByteBuffer)",1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofWithVIntLength(ByteBuffer)",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.CurrentDeserializer(CFMetaData,DataInputPlus,SerializationHeader,SerializationHelper)",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.bytesReadForUnconsumedData()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.clearState()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.compareNextTo(Bound)",1,2,2
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.hasNext()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.nextIsRow()",1,2,2
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.nextIsStatic()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.prepareNext()",3,1,3
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.readNext()",2,2,2
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.skipNext()",1,2,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.AtomIterator(TombstoneTracker)",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.clearState()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.hasNext()",4,2,5
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.next()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.peek()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.readAtom()",1,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.remove()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.OldFormatDeserializer(CFMetaData,DataInputPlus,SerializationHelper,DeletionTime,boolean)",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.TombstoneTracker(DeletionTime)",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.clearState()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.formBoundary(LegacyRangeTombstone,LegacyRangeTombstone)",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.hasClosingMarkerBefore(LegacyAtom)",1,2,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.hasOpenTombstones()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.isShadowed(LegacyAtom)",2,3,4
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.openNew(LegacyRangeTombstone)",3,4,4
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.popClosingMarker()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.UnfilteredIterator(DeletionTime)",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.clearState()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.hasNext()",4,6,6
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.next()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.peek()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.readRow(LegacyAtom)",1,4,4
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.remove()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.bytesReadForUnconsumedData()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.clearState()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.compareNextTo(Bound)",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.currentPosition()",1,2,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.hasNext()",4,11,13
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.isRow(LegacyAtom)",2,2,3
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.isStatic(Unfiltered)",1,2,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.nextIsRow()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.nextIsStatic()",1,2,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.readNext()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.setSkipStatic()",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.skipNext()",2,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.UnfilteredDeserializer(CFMetaData,DataInputPlus,SerializationHelper)",1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.create(CFMetaData,DataInputPlus,SerializationHeader,SerializationHelper,DeletionTime,boolean)",2,1,2
"org.apache.cassandra.db.UnknownColumnException.UnknownColumnException(CFMetaData,ByteBuffer)",1,1,1
"org.apache.cassandra.db.UnknownColumnException.stringify(ByteBuffer)",1,2,2
"org.apache.cassandra.db.UnknownColumnFamilyException.UnknownColumnFamilyException(String,UUID)",1,1,1
"org.apache.cassandra.db.WindowsFailedSnapshotTracker.deleteOldSnapshots()",4,8,8
"org.apache.cassandra.db.WindowsFailedSnapshotTracker.handleFailedSnapshot(File)",1,1,1
"org.apache.cassandra.db.WindowsFailedSnapshotTracker.resetForTests()",1,1,1
"org.apache.cassandra.db.WriteResponse.Serializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.db.WriteResponse.Serializer.serialize(WriteResponse,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.WriteResponse.Serializer.serializedSize(WriteResponse,int)",1,1,1
"org.apache.cassandra.db.WriteResponse.WriteResponse()",1,1,1
"org.apache.cassandra.db.WriteResponse.createMessage()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.AbstractSSTableIterator(SSTableReader,FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean)",2,13,16
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.IndexState(Reader,ClusteringComparator,RowIndexEntry,boolean)",1,2,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.blocksCount()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.columnOffset(int)",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.currentBlockIdx()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.currentIndex()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.findBlockIndex(Bound,int)",3,2,3
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.index(int)",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.isDone()",1,2,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.isPastCurrentBlock()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.setToBlock(int)",1,4,4
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.toString()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.updateBlock()",1,4,4
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.Reader(FileDataInput,boolean,boolean)",1,2,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.close()",1,2,3
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.createDeserializer()",1,1,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.getAndClearOpenMarker()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.hasNext()",1,4,4
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.next()",1,3,3
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.seekToPosition(long)",1,2,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.updateOpenMarker(RangeTombstoneMarker)",1,2,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.close()",1,2,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.closeInternal()",2,2,3
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.columns()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.hasNext()",1,2,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.metadata()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.next()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.partitionKey()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.readStaticRow(SSTableReader,FileDataInput,SerializationHelper,Columns,boolean,UnfilteredDeserializer)",6,7,9
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.remove()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.slice(Slice)",2,4,4
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.staticRow()",1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.stats()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader.ForwardIndexedReader(RowIndexEntry,FileDataInput,boolean,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader.computeNext()",2,6,7
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader.init()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader.setForSlice(Slice)",4,5,10
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.ForwardReader(FileDataInput,boolean,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.computeNext()",2,3,4
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.handlePreSliceData()",2,4,5
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.hasNextInternal()",7,3,7
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.init()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.nextInternal()",2,1,2
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.setForSlice(Slice)",1,2,2
"org.apache.cassandra.db.columniterator.SSTableIterator.SSTableIterator(SSTableReader,DecoratedKey,ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.SSTableIterator(SSTableReader,FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.createReader(RowIndexEntry,FileDataInput,boolean,boolean)",1,1,2
"org.apache.cassandra.db.columniterator.SSTableIterator.isReverseOrder()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData.ReusablePartitionData(CFMetaData,DecoratedKey,PartitionColumns,int)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData.add(Unfiltered)",1,2,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData.build()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData.reset()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.ReverseIndexedReader(RowIndexEntry,FileDataInput,boolean,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.hasNextInternal()",3,1,4
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.init()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.readCurrentBlock(boolean)",1,6,6
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.setForSlice(Slice)",4,6,6
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.stopReadingDisk()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.ReverseReader(FileDataInput,boolean,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.createBuffer(int)",1,3,4
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.hasNextInternal()",1,2,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.init()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.loadFromDisk(Bound,Bound,boolean)",1,16,17
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.nextInternal()",2,1,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.setForSlice(Slice)",1,2,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.setIterator(Slice)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.stopReadingDisk()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.SSTableReversedIterator(SSTableReader,DecoratedKey,ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.SSTableReversedIterator(SSTableReader,FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.createReader(RowIndexEntry,FileDataInput,boolean,boolean)",1,1,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.isReverseOrder()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.AbstractCommitLogService(CommitLog,String,long)",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.awaitTermination()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.finishWriteFor(Allocation)",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.getCompletedTasks()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.getPendingTasks()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.requestExtraSync()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.restartUnsafe()",2,3,4
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.shutdown()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.start()",5,5,13
"org.apache.cassandra.db.commitlog.BatchCommitLogService.BatchCommitLogService(CommitLog)",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogService.maybeWaitForSync(Allocation)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.CommitLog(String,CommitLogArchiver)",1,2,3
"org.apache.cassandra.db.commitlog.CommitLog.activeSegments()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.add(Mutation)",2,3,3
"org.apache.cassandra.db.commitlog.CommitLog.construct()",1,1,2
"org.apache.cassandra.db.commitlog.CommitLog.discardCompletedSegments(UUID,ReplayPosition)",3,3,5
"org.apache.cassandra.db.commitlog.CommitLog.forceRecycleAllSegments()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.forceRecycleAllSegments(Iterable<UUID>)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getActiveContentSize()",1,2,2
"org.apache.cassandra.db.commitlog.CommitLog.getActiveOnDiskSize()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getActiveSegmentCompressionRatios()",1,2,2
"org.apache.cassandra.db.commitlog.CommitLog.getActiveSegmentNames()",1,2,2
"org.apache.cassandra.db.commitlog.CommitLog.getArchiveCommand()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getArchivingSegmentNames()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getContext()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getRestoreCommand()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getRestoreDirectories()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getRestorePointInTime()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getRestorePrecision()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.handleCommitError(String,Throwable)",2,3,5
"org.apache.cassandra.db.commitlog.CommitLog.recover()",2,5,6
"org.apache.cassandra.db.commitlog.CommitLog.recover(File...)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.recover(String)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.requestExtraSync()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.resetUnsafe(boolean)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.restartUnsafe()",1,1,2
"org.apache.cassandra.db.commitlog.CommitLog.shutdownBlocking()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.start()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.stopUnsafe(boolean)",1,1,2
"org.apache.cassandra.db.commitlog.CommitLog.sync(boolean)",3,2,4
"org.apache.cassandra.db.commitlog.CommitLogArchiver.CommitLogArchiver(String,String,String,long,TimeUnit)",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogArchiver.construct()",6,7,10
"org.apache.cassandra.db.commitlog.CommitLogArchiver.disabled()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogArchiver.exec(String)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeArchive(CommitLogSegment)",2,1,2
"org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeArchive(String,String)",2,1,2
"org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeRestoreArchive()",11,11,20
"org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeWaitForArchiving(String)",3,3,5
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.CommitLogDescriptor(int,long,ParameterizedClass)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.CommitLogDescriptor(long,ParameterizedClass)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.constructParametersString(CommitLogDescriptor)",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.equals(CommitLogDescriptor)",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.equals(Object)",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.equalsIgnoringCompression(CommitLogDescriptor)",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.fileName()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.fromFileName(String)",3,1,3
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.fromHeader(File)",1,1,3
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.getMessagingVersion()",7,2,7
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.isValid(String)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.parseCompression(Map<?, ?>)",3,1,3
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.readHeader(DataInput)",2,3,3
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.toString()",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.writeHeader(ByteBuffer,CommitLogDescriptor)",3,3,3
"org.apache.cassandra.db.commitlog.CommitLogReplayer.AlwaysReplayFilter.filter(Mutation)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.AlwaysReplayFilter.includes(CFMetaData)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayException.CommitLogReplayException(String)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayException.CommitLogReplayException(String,Throwable)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayer(CommitLog,ReplayPosition,Map<UUID, ReplayPosition>,ReplayFilter)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CustomReplayFilter.CustomReplayFilter(Multimap<String, String>)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CustomReplayFilter.filter(Mutation)",2,2,2
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CustomReplayFilter.includes(CFMetaData)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.ReplayFilter.create()",6,3,6
"org.apache.cassandra.db.commitlog.CommitLogReplayer.blockForWrites()",1,4,5
"org.apache.cassandra.db.commitlog.CommitLogReplayer.construct(CommitLog)",1,5,5
"org.apache.cassandra.db.commitlog.CommitLogReplayer.handleReplayError(boolean,String,Object...)",4,4,4
"org.apache.cassandra.db.commitlog.CommitLogReplayer.logAndCheckIfShouldSkip(File,CommitLogDescriptor)",2,2,2
"org.apache.cassandra.db.commitlog.CommitLogReplayer.pointInTimeExceeded(Mutation)",3,2,3
"org.apache.cassandra.db.commitlog.CommitLogReplayer.readSyncMarker(CommitLogDescriptor,int,RandomAccessReader,boolean)",4,5,7
"org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(File,boolean)",10,14,22
"org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(File[])",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogReplayer.replayMutation(byte[],int,long,CommitLogDescriptor)",6,11,17
"org.apache.cassandra.db.commitlog.CommitLogReplayer.replaySyncSection(FileDataInput,int,CommitLogDescriptor,String,boolean)",6,12,13
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.Allocation(CommitLogSegment,Group,int,ByteBuffer)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.awaitDiskSync(Timer)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.getBuffer()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.getReplayPosition()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.getSegment()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.markWritten()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.CommitLogSegment(CommitLog)",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.CommitLogSegmentFileComparator.compare(File,File)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.allocate(Mutation,int)",2,3,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.allocate(int)",4,2,4
"org.apache.cassandra.db.commitlog.CommitLogSegment.close()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.contains(ReplayPosition)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.contentSize()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.createSegment(CommitLog)",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.dirtyString()",1,2,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.discard(boolean)",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.discardUnusedTail()",4,6,6
"org.apache.cassandra.db.commitlog.CommitLogSegment.ensureAtleast(ConcurrentMap<UUID, AtomicInteger>,UUID,int)",4,3,6
"org.apache.cassandra.db.commitlog.CommitLogSegment.getContext()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.getDirtyCFIDs()",2,6,6
"org.apache.cassandra.db.commitlog.CommitLogSegment.getName()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.getNextId()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.getPath()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.internalClose()",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.isStillAllocating()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.isUnused()",2,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.markClean(UUID,ReplayPosition)",2,3,4
"org.apache.cassandra.db.commitlog.CommitLogSegment.markClean(UUID,int)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.markDirty(Mutation,int)",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.removeCleanFromDirty()",2,4,5
"org.apache.cassandra.db.commitlog.CommitLogSegment.sync()",2,3,5
"org.apache.cassandra.db.commitlog.CommitLogSegment.toString()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.waitForFinalSync()",3,3,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.waitForModifications()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.waitForSync(int,Timer)",1,4,4
"org.apache.cassandra.db.commitlog.CommitLogSegment.writeSyncMarker(ByteBuffer,int,int,int)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.CommitLogSegmentManager(CommitLog)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.addSize(long)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.advanceAllocatingFrom(CommitLogSegment)",6,7,9
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.allocate(Mutation,int)",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.allocatingFrom()",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.awaitManagementTasksCompletion()",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.awaitTermination()",1,3,3
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.closeAndDeleteSegmentUnsafe(CommitLogSegment,boolean)",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.discardSegment(CommitLogSegment,boolean)",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.enableReserveSegmentCreation()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.flushDataFrom(List<CommitLogSegment>,boolean)",2,7,7
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.forceRecycleAll(Iterable<UUID>)",1,10,10
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.getActiveSegments()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.manages(String)",3,2,3
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.onDiskSize()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.recycleSegment(CommitLogSegment)",1,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.recycleSegment(File)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.shutdown()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.start()",8,9,13
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.stopUnsafe(boolean)",1,3,4
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.unusedCapacity()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.wakeManager()",1,1,1
"org.apache.cassandra.db.commitlog.CompressedSegment.CompressedSegment(CommitLog)",1,2,2
"org.apache.cassandra.db.commitlog.CompressedSegment.allocate(int)",1,1,1
"org.apache.cassandra.db.commitlog.CompressedSegment.createBuffer(CommitLog)",1,2,2
"org.apache.cassandra.db.commitlog.CompressedSegment.internalClose()",1,2,2
"org.apache.cassandra.db.commitlog.CompressedSegment.onDiskSize()",1,1,1
"org.apache.cassandra.db.commitlog.CompressedSegment.shutdown()",1,1,1
"org.apache.cassandra.db.commitlog.CompressedSegment.write(int,int)",1,6,6
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.MemoryMappedSegment(CommitLog)",1,1,1
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.createBuffer(CommitLog)",1,1,3
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.internalClose()",1,2,2
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.onDiskSize()",1,1,1
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.write(int,int)",1,3,3
"org.apache.cassandra.db.commitlog.PeriodicCommitLogService.PeriodicCommitLogService(CommitLog)",1,1,1
"org.apache.cassandra.db.commitlog.PeriodicCommitLogService.maybeWaitForSync(Allocation)",1,4,4
"org.apache.cassandra.db.commitlog.PeriodicCommitLogService.waitForSyncToCatchUp(long)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPosition(long,int)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer.deserialize(DataInputPlus)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer.serialize(ReplayPosition,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer.serializedSize(ReplayPosition)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.clone()",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.compareTo(ReplayPosition)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.equals(Object)",4,2,5
"org.apache.cassandra.db.commitlog.ReplayPosition.getReplayPosition(Iterable<? extends SSTableReader>)",2,1,2
"org.apache.cassandra.db.commitlog.ReplayPosition.hashCode()",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.toString()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.AbstractCompactionStrategy(ColumnFamilyStore,Map<String, String>)",1,6,6
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.ScannerList.ScannerList(List<ISSTableScanner>)",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.ScannerList.close()",2,5,5
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.createSSTableMultiWriter(Descriptor,long,long,MetadataCollector,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.disable()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.enable()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.filterSuspectSSTables(Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getCompactionTask(LifecycleTransaction,int,long)",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getDirectories()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getMemtableReservedSize()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getName()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getScanners(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getScanners(Collection<SSTableReader>,Range<Token>)",1,4,4
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.groupSSTablesForAntiCompaction(Collection<SSTableReader>)",1,4,4
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.isAffectedByMeteredFlusher()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.pause()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.replaceFlushed(Memtable,Collection<SSTableReader>)",1,3,3
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.replaceSSTables(Collection<SSTableReader>,Collection<SSTableReader>)",1,3,3
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.resume()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shouldBeEnabled()",1,2,2
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shouldDefragment()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shutdown()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.startup()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.validateOptions(Map<String, String>)",9,13,13
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.worthDroppingTombstones(SSTableReader,int)",8,4,9
"org.apache.cassandra.db.compaction.AbstractCompactionTask.AbstractCompactionTask(ColumnFamilyStore,LifecycleTransaction)",1,2,2
"org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(CompactionExecutorStatsCollector)",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionTask.setCompactionType(OperationType)",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionTask.setUserDefined(boolean)",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionTask.toString()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.CompactionController(ColumnFamilyStore,Set<SSTableReader>,int)",1,2,2
"org.apache.cassandra.db.compaction.CompactionController.CompactionController(ColumnFamilyStore,int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.close()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.compactingRepaired()",1,2,2
"org.apache.cassandra.db.compaction.CompactionController.getColumnFamily()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.getFullyExpiredSSTables()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.getFullyExpiredSSTables(ColumnFamilyStore,Iterable<SSTableReader>,Iterable<SSTableReader>,int)",3,10,10
"org.apache.cassandra.db.compaction.CompactionController.getKeyspace()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.invalidateCachedPartition(DecoratedKey)",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.maxPurgeableTimestamp(DecoratedKey)",2,5,6
"org.apache.cassandra.db.compaction.CompactionController.maybeRefreshOverlaps()",3,3,3
"org.apache.cassandra.db.compaction.CompactionController.refreshOverlaps()",1,3,3
"org.apache.cassandra.db.compaction.CompactionHistoryTabularData.from(UntypedResultSet)",1,2,2
"org.apache.cassandra.db.compaction.CompactionInfo.CompactionInfo(CFMetaData,OperationType,long,long,String,UUID)",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.CompactionInfo(CFMetaData,OperationType,long,long,UUID)",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.CompactionInfo(OperationType,long,long,String,UUID)",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.finished()",1,2,2
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.isStopRequested()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.started()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.stop()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.asMap()",1,3,3
"org.apache.cassandra.db.compaction.CompactionInfo.compactionId()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.forProgress(long,long)",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getCFMetaData()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getColumnFamily()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getCompleted()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getId()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getKeyspace()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getTaskType()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getTotal()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.toString()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInterruptedException.CompactionInterruptedException(CompactionInfo)",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.CompactionIterator(OperationType,List<ISSTableScanner>,CompactionController,int,UUID)",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.CompactionIterator(OperationType,List<ISSTableScanner>,CompactionController,int,UUID,CompactionMetrics)",1,4,4
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.Purger(boolean,CompactionController)",1,1,2
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.getMaxPurgeableTimestamp()",1,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.onEmptyPartitionPostPurge(DecoratedKey)",1,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.onNewPartition(DecoratedKey)",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.updateProgress()",1,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.close()",1,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.getCompactionInfo()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.getMergedRowCounts()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.hasNext()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.isForThrift()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.listener()",2,4,7
"org.apache.cassandra.db.compaction.CompactionIterator.metadata()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.next()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.remove()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.toString()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.updateBytesRead()",1,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.updateCounterFor(int)",1,1,2
"org.apache.cassandra.db.compaction.CompactionManager.AllSSTableOpStatus.AllSSTableOpStatus(int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.BackgroundCompactionCandidate.BackgroundCompactionCandidate(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.BackgroundCompactionCandidate.run()",3,3,3
"org.apache.cassandra.db.compaction.CompactionManager.CacheCleanupExecutor.CacheCleanupExecutor()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Bounded.Bounded(ColumnFamilyStore,Collection<Range<Token>>,int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Bounded.cleanup(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Bounded.getScanner(SSTableReader,RateLimiter)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.CleanupStrategy(Collection<Range<Token>>,int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Full.Full(ColumnFamilyStore,Collection<Range<Token>>,int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Full.cleanup(UnfilteredRowIterator)",2,1,2
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Full.getScanner(SSTableReader,RateLimiter)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.get(ColumnFamilyStore,Collection<Range<Token>>,int)",1,1,2
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor(int,String)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor(int,int,String,BlockingQueue<Runnable>)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.afterExecute(Runnable,Throwable)",1,6,6
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.beforeExecute(Thread,Runnable)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionController.ValidationCompactionController(ColumnFamilyStore,int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionController.maxPurgeableTimestamp(DecoratedKey)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionIterator.ValidationCompactionIterator(List<ISSTableScanner>,ValidationCompactionController,int,CompactionMetrics)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationExecutor.ValidationExecutor()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.antiCompactGroup(ColumnFamilyStore,Collection<Range<Token>>,LifecycleTransaction,long)",4,7,8
"org.apache.cassandra.db.compaction.CompactionManager.createWriter(ColumnFamilyStore,File,long,long,SSTableReader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.createWriterForAntiCompaction(ColumnFamilyStore,File,int,long,Collection<SSTableReader>,LifecycleTransaction)",3,3,4
"org.apache.cassandra.db.compaction.CompactionManager.disableAutoCompaction()",1,3,3
"org.apache.cassandra.db.compaction.CompactionManager.doAntiCompaction(ColumnFamilyStore,Collection<Range<Token>>,LifecycleTransaction,long)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.doCleanupOne(ColumnFamilyStore,LifecycleTransaction,CleanupStrategy,Collection<Range<Token>>,boolean)",7,9,12
"org.apache.cassandra.db.compaction.CompactionManager.doValidationCompaction(ColumnFamilyStore,Validator)",7,15,16
"org.apache.cassandra.db.compaction.CompactionManager.finishCompactionsAndShutdown(long,TimeUnit)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.forceShutdown()",1,4,4
"org.apache.cassandra.db.compaction.CompactionManager.forceUserDefinedCompaction(String)",3,4,4
"org.apache.cassandra.db.compaction.CompactionManager.getActiveCompactions()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getCompactionHistory()",1,1,2
"org.apache.cassandra.db.compaction.CompactionManager.getCompactionSummary()",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.getCompactions()",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.getCompletedTasks()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getCoreCompactorThreads()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getCoreValidationThreads()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getDefaultGcBefore(ColumnFamilyStore,int)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.getMaximumCompactorThreads()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getMaximumValidatorThreads()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getPendingTasks()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getRateLimiter()",1,3,4
"org.apache.cassandra.db.compaction.CompactionManager.getTotalBytesCompacted()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getTotalCompactionsCompleted()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.interruptCompactionFor(Iterable<CFMetaData>,boolean)",3,4,5
"org.apache.cassandra.db.compaction.CompactionManager.interruptCompactionForCFs(Iterable<ColumnFamilyStore>,boolean)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.isCompacting(Iterable<ColumnFamilyStore>)",3,2,3
"org.apache.cassandra.db.compaction.CompactionManager.lookupSSTable(ColumnFamilyStore,Descriptor)",3,2,3
"org.apache.cassandra.db.compaction.CompactionManager.needsCleanup(SSTableReader,Collection<Range<Token>>)",7,2,7
"org.apache.cassandra.db.compaction.CompactionManager.parallelAllSSTableOperation(ColumnFamilyStore,OneSSTableOperation,OperationType)",4,5,5
"org.apache.cassandra.db.compaction.CompactionManager.performAnticompaction(ColumnFamilyStore,Collection<Range<Token>>,Refs<SSTableReader>,LifecycleTransaction,long)",4,7,7
"org.apache.cassandra.db.compaction.CompactionManager.performCleanup(ColumnFamilyStore)",2,2,2
"org.apache.cassandra.db.compaction.CompactionManager.performMaximal(ColumnFamilyStore,boolean)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.performSSTableRewrite(ColumnFamilyStore,boolean)",1,4,4
"org.apache.cassandra.db.compaction.CompactionManager.performScrub(ColumnFamilyStore,boolean,boolean)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.performScrub(ColumnFamilyStore,boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.performVerify(ColumnFamilyStore,boolean)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.scrubOne(ColumnFamilyStore,LifecycleTransaction,boolean,boolean,boolean)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.setCoreCompactorThreads(int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.setCoreValidationThreads(int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.setMaximumCompactorThreads(int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.setMaximumValidatorThreads(int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.stopCompaction(String)",1,3,3
"org.apache.cassandra.db.compaction.CompactionManager.stopCompactionById(String)",1,4,4
"org.apache.cassandra.db.compaction.CompactionManager.submitAntiCompaction(ColumnFamilyStore,Collection<Range<Token>>,Refs<SSTableReader>,long)",2,6,6
"org.apache.cassandra.db.compaction.CompactionManager.submitBackground(ColumnFamilyStore)",4,5,5
"org.apache.cassandra.db.compaction.CompactionManager.submitCacheWrite(Writer)",2,3,3
"org.apache.cassandra.db.compaction.CompactionManager.submitIndexBuild(SecondaryIndexBuilder)",2,2,2
"org.apache.cassandra.db.compaction.CompactionManager.submitMaximal(ColumnFamilyStore,int,boolean)",4,4,4
"org.apache.cassandra.db.compaction.CompactionManager.submitUserDefined(ColumnFamilyStore,Collection<Descriptor>,int)",2,6,6
"org.apache.cassandra.db.compaction.CompactionManager.submitValidation(ColumnFamilyStore,Validator)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.submitViewBuilder(ViewBuilder)",2,2,2
"org.apache.cassandra.db.compaction.CompactionManager.verifyOne(ColumnFamilyStore,SSTableReader,boolean)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.waitForCessation(Iterable<ColumnFamilyStore>)",3,3,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.CompactionStrategyManager(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.createSSTableMultiWriter(Descriptor,long,long,MetadataCollector,SerializationHeader,LifecycleTransaction)",2,2,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.disable()",1,3,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.enable()",1,3,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getCompactionParams()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getCompactionStrategyFor(SSTableReader)",2,1,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getCompactionTask(LifecycleTransaction,int,long)",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getDirectories()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getEstimatedRemainingTasks()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getMaxSSTableBytes()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getMaximalTasks(int,boolean)",4,1,5
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getName()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getNextBackgroundTask(int)",5,2,5
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getSSTableCountPerLevel()",2,2,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getScanners(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getScanners(Collection<SSTableReader>,Collection<Range<Token>>)",1,6,6
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getStrategies()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getUnleveledSSTables()",2,2,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getUserDefinedTask(Collection<SSTableReader>,int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.groupSSTablesForAntiCompaction(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.handleNotification(INotification,Object)",1,18,18
"org.apache.cassandra.db.compaction.CompactionStrategyManager.isEnabled()",1,1,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.maybeReload(CFMetaData)",2,1,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.onlyPurgeRepairedTombstones()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.pause()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.reload(CFMetaData)",1,4,4
"org.apache.cassandra.db.compaction.CompactionStrategyManager.replaceFlushed(Memtable,Collection<SSTableReader>)",1,3,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.resume()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.setNewLocalCompactionStrategy(CompactionParams)",1,2,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.setStrategy(CompactionParams)",1,3,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.shouldBeEnabled()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.shouldDefragment()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.shutdown()",1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.startup()",1,3,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.sumArrays(int[],int[])",1,1,5
"org.apache.cassandra.db.compaction.CompactionTask.CompactionTask(ColumnFamilyStore,LifecycleTransaction,int)",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.CompactionTask(ColumnFamilyStore,LifecycleTransaction,int,boolean,boolean)",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.addToTotalBytesCompacted(long)",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.checkAvailableDiskSpace(long,long)",3,3,3
"org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionExecutorStatsCollector)",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getCompactionController(Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getDirectories()",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getLevel()",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getMaxDataAge(Collection<SSTableReader>)",1,1,3
"org.apache.cassandra.db.compaction.CompactionTask.getMinRepairedAt(Set<SSTableReader>)",2,2,3
"org.apache.cassandra.db.compaction.CompactionTask.partialCompactionsAcceptable()",1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.reduceScopeForLimitedSpace()",2,3,3
"org.apache.cassandra.db.compaction.CompactionTask.runMayThrow()",5,11,14
"org.apache.cassandra.db.compaction.CompactionTask.updateCompactionHistory(String,String,long[],long,long)",3,2,3
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.DateTieredCompactionStrategy(ColumnFamilyStore,Map<String, String>)",1,3,3
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target.Target(long,long)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target.compareToTimestamp(long)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target.nextTarget(int)",2,1,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target.onTarget(long)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.addSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.createSSTableAndMinTimestampPairs(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.filterOldSSTables(List<SSTableReader>,long,long)",2,1,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getBuckets(Collection<Pair<T, Long>>,long,int,long)",7,5,7
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getCompactionCandidates(Iterable<SSTableReader>,long,int)",2,1,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getEstimatedRemainingTasks()",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getInitialTarget(long,long)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getMaxSSTableBytes()",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getMaximalTask(int,boolean)",2,1,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNextBackgroundSSTables(int)",2,4,4
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNextBackgroundTask(int)",4,2,4
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNextNonExpiredSSTables(Iterable<SSTableReader>,int)",3,4,5
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNow()",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getSSTablesForSTCS(Collection<SSTableReader>,int,int,SizeTieredCompactionStrategyOptions)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getSTCSBuckets(Collection<SSTableReader>,SizeTieredCompactionStrategyOptions)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getUserDefinedTask(Collection<SSTableReader>,int)",2,2,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.groupSSTablesForAntiCompaction(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.newestBucket(List<List<SSTableReader>>,int,int,long,long,SizeTieredCompactionStrategyOptions)",4,5,7
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.removeSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.toString()",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.updateEstimatedCompactionsByTasks(List<List<SSTableReader>>)",1,3,3
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.validateOptions(Map<String, String>)",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions.DateTieredCompactionStrategyOptions()",1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions.DateTieredCompactionStrategyOptions(Map<String, String>)",1,5,5
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions.validateOptions(Map<String, String>,Map<String, String>)",4,12,12
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledCompactionStrategy(ColumnFamilyStore,Map<String, String>)",1,6,6
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.LeveledScanner(Collection<SSTableReader>,Range<Token>)",1,3,4
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.close()",1,2,2
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.computeNext()",5,5,5
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.getBackingFiles()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.getCurrentPosition()",1,2,2
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.getLengthInBytes()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.intersecting(Collection<SSTableReader>,Range<Token>)",1,4,4
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.isForThrift()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.metadata()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.addSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.findDroppableSSTable(int)",6,6,8
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getAllLevelSize()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getCompactionTask(LifecycleTransaction,int,long)",1,3,4
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getEstimatedRemainingTasks()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getLevelSize(int)",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getMaxSSTableBytes()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getMaximalTask(int,boolean)",3,1,3
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getNextBackgroundTask(int)",5,5,5
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getScanners(Collection<SSTableReader>,Range<Token>)",1,8,8
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getUserDefinedTask(Collection<SSTableReader>,int)",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.groupSSTablesForAntiCompaction(Collection<SSTableReader>)",1,7,7
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.removeSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.replaceSSTables(Collection<SSTableReader>,Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.toString()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.validateOptions(Map<String, String>)",2,4,4
"org.apache.cassandra.db.compaction.LeveledCompactionTask.LeveledCompactionTask(ColumnFamilyStore,LifecycleTransaction,int,int,long,boolean)",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",2,1,2
"org.apache.cassandra.db.compaction.LeveledCompactionTask.getLevel()",1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionTask.partialCompactionsAcceptable()",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.CompactionCandidate.CompactionCandidate(Collection<SSTableReader>,int,long)",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.LeveledManifest(ColumnFamilyStore,int,SizeTieredCompactionStrategyOptions)",1,2,2
"org.apache.cassandra.db.compaction.LeveledManifest.add(SSTableReader)",1,3,3
"org.apache.cassandra.db.compaction.LeveledManifest.ageSortedSSTables(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.canAddSSTable(SSTableReader)",4,3,5
"org.apache.cassandra.db.compaction.LeveledManifest.create(ColumnFamilyStore,int,Iterable<SSTableReader>,SizeTieredCompactionStrategyOptions)",1,3,3
"org.apache.cassandra.db.compaction.LeveledManifest.create(ColumnFamilyStore,int,List<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.getAllLevelSize()",1,2,2
"org.apache.cassandra.db.compaction.LeveledManifest.getAllSSTables()",1,2,2
"org.apache.cassandra.db.compaction.LeveledManifest.getCandidatesFor(int)",15,17,24
"org.apache.cassandra.db.compaction.LeveledManifest.getCompacting(int)",1,3,3
"org.apache.cassandra.db.compaction.LeveledManifest.getCompactionCandidates()",11,10,13
"org.apache.cassandra.db.compaction.LeveledManifest.getEstimatedTasks()",1,2,2
"org.apache.cassandra.db.compaction.LeveledManifest.getLevel(int)",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.getLevelCount()",3,2,3
"org.apache.cassandra.db.compaction.LeveledManifest.getLevelSize(int)",2,1,2
"org.apache.cassandra.db.compaction.LeveledManifest.getLevelSorted(int,Comparator<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.getNextLevel(Collection<SSTableReader>)",1,4,6
"org.apache.cassandra.db.compaction.LeveledManifest.getOverlappingStarvedSSTables(int,Collection<SSTableReader>)",7,14,18
"org.apache.cassandra.db.compaction.LeveledManifest.getSSTablesForSTCS(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.logDistribution()",1,4,4
"org.apache.cassandra.db.compaction.LeveledManifest.maxBytesForLevel(int,long)",3,1,3
"org.apache.cassandra.db.compaction.LeveledManifest.overlapping(Collection<SSTableReader>,Iterable<SSTableReader>)",1,4,4
"org.apache.cassandra.db.compaction.LeveledManifest.overlapping(SSTableReader,Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.overlapping(Token,Token,Iterable<SSTableReader>)",1,3,3
"org.apache.cassandra.db.compaction.LeveledManifest.remove(SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.repairOverlappingSSTables(int)",1,6,6
"org.apache.cassandra.db.compaction.LeveledManifest.replace(Collection<SSTableReader>,Collection<SSTableReader>)",2,5,6
"org.apache.cassandra.db.compaction.LeveledManifest.sendBackToL0(SSTableReader)",1,1,2
"org.apache.cassandra.db.compaction.LeveledManifest.toString()",1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.toString(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.OperationType.OperationType(String)",1,1,1
"org.apache.cassandra.db.compaction.OperationType.fromFileName(String)",3,2,3
"org.apache.cassandra.db.compaction.OperationType.toString()",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SSTableSplitter(ColumnFamilyStore,LifecycleTransaction,int)",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplitController.SplitController(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplitController.maxPurgeableTimestamp(DecoratedKey)",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask.SplittingCompactionTask(ColumnFamilyStore,LifecycleTransaction,int)",2,1,2
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask.getCompactionController(Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask.partialCompactionsAcceptable()",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.StatsCollector.beginCompaction(Holder)",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.StatsCollector.finishCompaction(Holder)",1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.split()",1,1,1
"org.apache.cassandra.db.compaction.Scrubber.ScrubInfo.ScrubInfo(RandomAccessReader,SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.Scrubber.ScrubInfo.getCompactionInfo()",1,1,2
"org.apache.cassandra.db.compaction.Scrubber.ScrubResult.ScrubResult(Scrubber)",1,1,1
"org.apache.cassandra.db.compaction.Scrubber.Scrubber(ColumnFamilyStore,LifecycleTransaction,boolean,OutputHandler,boolean,boolean)",2,5,7
"org.apache.cassandra.db.compaction.Scrubber.Scrubber(ColumnFamilyStore,LifecycleTransaction,boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.db.compaction.Scrubber.close()",1,1,1
"org.apache.cassandra.db.compaction.Scrubber.getScrubInfo()",1,1,1
"org.apache.cassandra.db.compaction.Scrubber.indexAvailable()",1,2,2
"org.apache.cassandra.db.compaction.Scrubber.saveOutOfOrderRow(DecoratedKey,DecoratedKey,UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.compaction.Scrubber.scrub()",9,33,38
"org.apache.cassandra.db.compaction.Scrubber.scrubWithResult()",1,1,1
"org.apache.cassandra.db.compaction.Scrubber.seekToNextRow()",2,3,3
"org.apache.cassandra.db.compaction.Scrubber.throwIfCannotContinue(DecoratedKey,Throwable)",3,3,4
"org.apache.cassandra.db.compaction.Scrubber.throwIfFatal(Throwable)",2,1,4
"org.apache.cassandra.db.compaction.Scrubber.updateIndexKey()",1,4,4
"org.apache.cassandra.db.compaction.Scrubber.withValidation(UnfilteredRowIterator,String)",1,2,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.SizeTieredCompactionStrategy(ColumnFamilyStore,Map<String, String>)",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.SplittingCompactionTask.SplittingCompactionTask(ColumnFamilyStore,LifecycleTransaction,int)",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.SplittingCompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.addSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.createSSTableAndLengthPairs(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getBuckets(Collection<Pair<T, Long>>,double,double,long)",4,4,7
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getEstimatedRemainingTasks()",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getHotnessMap(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getMaxSSTableBytes()",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getMaximalTask(int,boolean)",4,2,4
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getNextBackgroundSSTables(int)",3,4,5
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getNextBackgroundTask(int)",4,2,4
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getUserDefinedTask(Collection<SSTableReader>,int)",2,2,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.hotness(SSTableReader)",1,2,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.mostInterestingBucket(List<List<SSTableReader>>,int,int)",2,5,5
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.removeSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.shouldDefragment()",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.toString()",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.trimToThresholdWithHotness(List<SSTableReader>,int)",1,2,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.updateEstimatedCompactionsByTasks(List<List<SSTableReader>>)",1,3,3
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.validateOptions(Map<String, String>)",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.SizeTieredCompactionStrategyOptions()",1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.SizeTieredCompactionStrategyOptions(Map<String, String>)",1,4,4
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.parseDouble(Map<String, String>,String,double)",1,3,3
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.validateOptions(Map<String, String>,Map<String, String>)",3,5,5
"org.apache.cassandra.db.compaction.Upgrader.UpgradeController.UpgradeController(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.compaction.Upgrader.UpgradeController.maxPurgeableTimestamp(DecoratedKey)",1,1,1
"org.apache.cassandra.db.compaction.Upgrader.Upgrader(ColumnFamilyStore,LifecycleTransaction,OutputHandler)",1,1,1
"org.apache.cassandra.db.compaction.Upgrader.createCompactionWriter(long)",1,1,1
"org.apache.cassandra.db.compaction.Upgrader.upgrade(boolean)",1,3,3
"org.apache.cassandra.db.compaction.Verifier.Verifier(ColumnFamilyStore,SSTableReader,OutputHandler,boolean)",1,2,2
"org.apache.cassandra.db.compaction.Verifier.Verifier(ColumnFamilyStore,SSTableReader,boolean)",1,1,1
"org.apache.cassandra.db.compaction.Verifier.VerifyController.VerifyController(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.compaction.Verifier.VerifyController.maxPurgeableTimestamp(DecoratedKey)",1,1,1
"org.apache.cassandra.db.compaction.Verifier.VerifyInfo.VerifyInfo(RandomAccessReader,SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.Verifier.VerifyInfo.getCompactionInfo()",1,1,2
"org.apache.cassandra.db.compaction.Verifier.close()",1,1,1
"org.apache.cassandra.db.compaction.Verifier.getVerifyInfo()",1,1,1
"org.apache.cassandra.db.compaction.Verifier.markAndThrow()",1,1,1
"org.apache.cassandra.db.compaction.Verifier.throwIfFatal(Throwable)",2,1,4
"org.apache.cassandra.db.compaction.Verifier.verify(boolean)",4,22,23
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.CompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,boolean,boolean)",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.append(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doAbort(Throwable)",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doCommit(Throwable)",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doPostCleanup(Throwable)",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doPrepare()",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.estimatedKeys()",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.finish()",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.getDirectories()",1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.getWriteDirectory(long)",2,1,2
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.maybeSwitchWriter(DecoratedKey)",1,2,2
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.DefaultCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.DefaultCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,boolean,boolean)",1,1,1
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.estimatedKeys()",1,1,1
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.realAppend(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.switchCompactionLocation(DataDirectory)",1,1,1
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.MajorLeveledCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long)",1,1,1
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.MajorLeveledCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long,boolean,boolean)",1,1,1
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.realAppend(UnfilteredRowIterator)",1,2,3
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.switchCompactionLocation(DataDirectory)",1,1,1
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.MaxSSTableSizeWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long,int)",1,1,1
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.MaxSSTableSizeWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long,int,boolean,boolean)",1,1,1
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.estimatedKeys()",1,1,1
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.realAppend(UnfilteredRowIterator)",1,2,2
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.switchCompactionLocation(DataDirectory)",1,1,1
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.SplittingSizeTieredCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.SplittingSizeTieredCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long)",3,1,4
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.realAppend(UnfilteredRowIterator)",1,3,3
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.switchCompactionLocation(DataDirectory)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.ContextState(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.allocate(int,int,int)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.compareIdTo(ContextState)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.copyTo(ContextState)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getClock()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getCount()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getCounterId()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getElementIndex()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.hasRemaining()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.isGlobal()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.isLocal()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.isRemote()",1,1,2
"org.apache.cassandra.db.context.CounterContext.ContextState.moveToNext()",1,1,3
"org.apache.cassandra.db.context.CounterContext.ContextState.reset()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.updateIsGlobalOrLocal()",1,2,2
"org.apache.cassandra.db.context.CounterContext.ContextState.wrap(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeElement(CounterId,long,long,boolean,boolean)",1,3,3
"org.apache.cassandra.db.context.CounterContext.ContextState.writeElementAtOffset(ByteBuffer,int,CounterId,long,long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeGlobal(CounterId,long,long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeLocal(CounterId,long,long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeRemote(CounterId,long,long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.clearAllLocal(ByteBuffer)",3,4,6
"org.apache.cassandra.db.context.CounterContext.compare(ContextState,ContextState)",12,15,28
"org.apache.cassandra.db.context.CounterContext.compareId(ByteBuffer,int,ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.context.CounterContext.createGlobal(CounterId,long,long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.createLocal(long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.createRemote(CounterId,long,long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.diff(ByteBuffer,ByteBuffer)",21,5,27
"org.apache.cassandra.db.context.CounterContext.findPositionOf(ByteBuffer,CounterId)",4,2,4
"org.apache.cassandra.db.context.CounterContext.getClockAndCountOf(ByteBuffer,CounterId)",2,1,2
"org.apache.cassandra.db.context.CounterContext.getLocalClockAndCount(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.getLocalCount(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.hasLegacyShards(ByteBuffer)",4,2,4
"org.apache.cassandra.db.context.CounterContext.headerLength(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.instance()",1,1,1
"org.apache.cassandra.db.context.CounterContext.isLocal(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.markLocalToBeCleared(ByteBuffer)",5,2,5
"org.apache.cassandra.db.context.CounterContext.merge(ByteBuffer,ByteBuffer)",3,15,26
"org.apache.cassandra.db.context.CounterContext.merge(ContextState,ContextState,ContextState)",1,9,9
"org.apache.cassandra.db.context.CounterContext.shouldClearLocal(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.toString(ByteBuffer)",1,5,5
"org.apache.cassandra.db.context.CounterContext.total(ByteBuffer)",1,2,2
"org.apache.cassandra.db.context.CounterContext.updateDigest(MessageDigest,ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.validateContext(ByteBuffer)",2,1,2
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.AbstractClusteringIndexFilter(boolean)",1,1,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.FilterSerializer.deserialize(DataInputPlus,int,CFMetaData)",1,1,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.FilterSerializer.serialize(ClusteringIndexFilter,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.FilterSerializer.serializedSize(ClusteringIndexFilter,int)",1,1,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.appendOrderByToCQLString(CFMetaData,StringBuilder)",1,3,5
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.isReversed()",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexFilter.Kind.Kind(InternalDeserializer)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.ClusteringIndexNamesFilter(NavigableSet<Clustering>,boolean)",1,2,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.NamesDeserializer.deserialize(DataInputPlus,int,CFMetaData,boolean)",1,2,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.filter(SliceableUnfilteredRowIterator)",6,6,8
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.filterNotIndexed(ColumnFilter,UnfilteredRowIterator)",1,3,3
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.forPaging(ClusteringComparator,Clustering,boolean)",1,2,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.getUnfilteredRowIterator(ColumnFilter,Partition)",3,3,4
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.isFullyCoveredBy(CachedPartition)",2,1,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.isHeadFilter()",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.kind()",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.requestedRows()",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.selects(Clustering)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.selectsAllPartition()",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.serializeInternal(DataOutputPlus,int)",1,2,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.serializedSizeInternal(int)",1,2,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.shouldInclude(SSTableReader)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.toCQLString(CFMetaData)",2,2,6
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.toString(CFMetaData)",1,3,4
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.ClusteringIndexSliceFilter(Slices,boolean)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.SliceDeserializer.deserialize(DataInputPlus,int,CFMetaData,boolean)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.filter(SliceableUnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.filterNotIndexed(ColumnFilter,UnfilteredRowIterator)",1,3,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.forPaging(ClusteringComparator,Clustering,boolean)",1,1,2
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.getUnfilteredRowIterator(ColumnFilter,Partition)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.isFullyCoveredBy(CachedPartition)",2,2,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.isHeadFilter()",1,3,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.kind()",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.requestedSlices()",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.selects(Clustering)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.selectsAllPartition()",1,3,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.serializeInternal(DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.serializedSizeInternal(int)",1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.shouldInclude(SSTableReader)",2,2,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.toCQLString(CFMetaData)",1,2,2
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.toString(CFMetaData)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.Builder.Builder(CFMetaData)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.Builder.add(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.filter.ColumnFilter.Builder.addAll(Iterable<ColumnDefinition>)",1,2,2
"org.apache.cassandra.db.filter.ColumnFilter.Builder.addSubSelection(ColumnSubselection)",1,1,2
"org.apache.cassandra.db.filter.ColumnFilter.Builder.build()",1,4,6
"org.apache.cassandra.db.filter.ColumnFilter.Builder.select(ColumnDefinition,CellPath)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.Builder.slice(ColumnDefinition,CellPath,CellPath)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.ColumnFilter(boolean,CFMetaData,PartitionColumns,SortedSetMultimap<ColumnIdentifier, ColumnSubselection>)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.Serializer.deserialize(DataInputPlus,int,CFMetaData)",1,4,5
"org.apache.cassandra.db.filter.ColumnFilter.Serializer.makeHeaderByte(ColumnFilter)",1,1,4
"org.apache.cassandra.db.filter.ColumnFilter.Serializer.serialize(ColumnFilter,DataOutputPlus,int)",1,4,4
"org.apache.cassandra.db.filter.ColumnFilter.Serializer.serializedSize(ColumnFilter,int)",1,4,4
"org.apache.cassandra.db.filter.ColumnFilter.Tester.Tester(boolean,Iterator<ColumnSubselection>)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.Tester.canSkipValue(CellPath)",1,2,2
"org.apache.cassandra.db.filter.ColumnFilter.Tester.includedBySubselection(CellPath)",4,4,6
"org.apache.cassandra.db.filter.ColumnFilter.Tester.includes(CellPath)",1,2,2
"org.apache.cassandra.db.filter.ColumnFilter.all(CFMetaData)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.allColumnsBuilder(CFMetaData)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.appendColumnDef(StringBuilder,ColumnDefinition)",3,4,5
"org.apache.cassandra.db.filter.ColumnFilter.canSkipValue(ColumnDefinition)",1,3,3
"org.apache.cassandra.db.filter.ColumnFilter.canSkipValue(ColumnDefinition,CellPath)",5,4,7
"org.apache.cassandra.db.filter.ColumnFilter.fetchedColumns()",1,2,2
"org.apache.cassandra.db.filter.ColumnFilter.includes(Cell)",5,4,7
"org.apache.cassandra.db.filter.ColumnFilter.includes(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.filter.ColumnFilter.includesAllColumns()",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.newTester(ColumnDefinition)",3,2,4
"org.apache.cassandra.db.filter.ColumnFilter.selection(PartitionColumns)",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.selectionBuilder()",1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.toString()",4,2,5
"org.apache.cassandra.db.filter.ColumnSubselection.ColumnSubselection(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.Element(ColumnDefinition,CellPath)",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.compareInclusionOf(CellPath)",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.comparisonPath()",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.kind()",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.toString()",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Serializer.deserialize(DataInputPlus,int,CFMetaData)",4,4,5
"org.apache.cassandra.db.filter.ColumnSubselection.Serializer.serialize(ColumnSubselection,DataOutputPlus,int)",2,2,4
"org.apache.cassandra.db.filter.ColumnSubselection.Serializer.serializedSize(ColumnSubselection,int)",2,2,3
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.Slice(ColumnDefinition,CellPath,CellPath)",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.compareInclusionOf(CellPath)",3,2,3
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.comparisonPath()",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.kind()",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.toString()",1,3,3
"org.apache.cassandra.db.filter.ColumnSubselection.column()",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.compareTo(ColumnSubselection)",1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.element(ColumnDefinition,CellPath)",1,2,2
"org.apache.cassandra.db.filter.ColumnSubselection.slice(ColumnDefinition,CellPath,CellPath)",1,3,3
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.CQLCounter(int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.applyToPartition(DecoratedKey,Row)",1,3,4
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.applyToRow(Row)",1,3,3
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.counted()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.countedInCurrentPartition()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.incrementRowCount()",1,3,3
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.isDone()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.isDoneForPartition()",1,2,2
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.onPartitionClose()",1,2,3
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLLimits(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLLimits(int,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLLimits(int,int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.count()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.distinct(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.estimateTotalResults(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.forPaging(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.forPaging(int,ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.forShortReadRetry(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.hasEnoughLiveData(CachedPartition,int)",3,2,4
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.isUnlimited()",1,1,2
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.kind()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.newCounter(int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.perPartitionCount()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.toString()",1,4,4
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.CQLPagingLimits(int,int,boolean,ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.PagingAwareCounter.PagingAwareCounter(int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.PagingAwareCounter.applyToPartition(DecoratedKey,Row)",1,2,2
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.forPaging(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.forPaging(int,ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.kind()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.newCounter(int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyTo(PartitionIterator)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyTo(RowIterator)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyTo(UnfilteredPartitionIterator)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyTo(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyToPartition(BaseRowIterator<?>)",1,2,2
"org.apache.cassandra.db.filter.DataLimits.Counter.attachTo(BasePartitions)",1,3,3
"org.apache.cassandra.db.filter.DataLimits.Counter.attachTo(BaseRows)",1,3,3
"org.apache.cassandra.db.filter.DataLimits.Counter.onlyCount()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.Serializer.deserialize(DataInputPlus,int)",3,2,5
"org.apache.cassandra.db.filter.DataLimits.Serializer.serialize(DataLimits,DataOutputPlus,int)",2,3,4
"org.apache.cassandra.db.filter.DataLimits.Serializer.serializedSize(DataLimits,int)",2,3,5
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.SuperColumnCountingCounter.SuperColumnCountingCounter(int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.SuperColumnCountingCounter.applyToRow(Row)",1,4,4
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.SuperColumnCountingLimits(int,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.forPaging(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.forShortReadRetry(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.kind()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.newCounter(int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.ThriftCounter(int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.applyToPartition(DecoratedKey,Row)",1,2,2
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.applyToRow(Row)",1,5,5
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.counted()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.countedInCurrentPartition()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.isDone()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.isDoneForPartition()",1,2,2
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.onPartitionClose()",1,2,2
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftLimits(int,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.count()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.estimateTotalResults(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.forPaging(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.forPaging(int,ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.forShortReadRetry(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.hasEnoughLiveData(CachedPartition,int)",3,2,4
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.isUnlimited()",1,1,2
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.kind()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.newCounter(int,boolean)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.perPartitionCount()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.toString()",1,1,1
"org.apache.cassandra.db.filter.DataLimits.cqlLimits(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.cqlLimits(int,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.distinctLimits(int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.filter(PartitionIterator,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.filter(UnfilteredPartitionIterator,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.filter(UnfilteredRowIterator,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.superColumnCountingLimits(int,int)",1,1,1
"org.apache.cassandra.db.filter.DataLimits.thriftLimits(int,int)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CQLFilter.CQLFilter(List<Expression>)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CQLFilter.filter(UnfilteredPartitionIterator,int)",5,2,5
"org.apache.cassandra.db.filter.RowFilter.CQLFilter.withNewExpressions(List<Expression>)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.CustomExpression(CFMetaData,IndexMetadata,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.getTargetIndex()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.getValue()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.isSatisfiedBy(DecoratedKey,Row)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.kind()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.makeDefinition(CFMetaData,IndexMetadata)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.toString()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.Expression(ColumnDefinition,Operator,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.Serializer.deserialize(DataInputPlus,int,CFMetaData)",6,8,13
"org.apache.cassandra.db.filter.RowFilter.Expression.Serializer.serialize(Expression,DataOutputPlus,int)",3,5,7
"org.apache.cassandra.db.filter.RowFilter.Expression.Serializer.serializedSize(Expression,int)",2,5,9
"org.apache.cassandra.db.filter.RowFilter.Expression.column()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.equals(Object)",3,4,6
"org.apache.cassandra.db.filter.RowFilter.Expression.getIndexValue()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.getValue(DecoratedKey,Row)",4,6,6
"org.apache.cassandra.db.filter.RowFilter.Expression.hashCode()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.isContains()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.isContainsKey()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.isCustom()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.operator()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.validateForIndexing()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.MapEqualityExpression(ColumnDefinition,ByteBuffer,Operator,ByteBuffer)",1,1,2
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.equals(Object)",3,4,6
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.getIndexValue()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.hashCode()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.isSatisfiedBy(DecoratedKey,Row)",4,4,6
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.kind()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.toString()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.validateForIndexing()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.RowFilter(List<Expression>)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.Serializer.deserialize(DataInputPlus,int,CFMetaData)",1,2,3
"org.apache.cassandra.db.filter.RowFilter.Serializer.serialize(RowFilter,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.db.filter.RowFilter.Serializer.serializedSize(RowFilter,int)",1,2,2
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression.SimpleExpression(ColumnDefinition,Operator,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression.isSatisfiedBy(DecoratedKey,Row)",12,11,19
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression.kind()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression.toString()",2,3,6
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.ThriftExpression(CFMetaData,ByteBuffer,Operator,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.isSatisfiedBy(DecoratedKey,Row)",1,2,2
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.kind()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.makeDefinition(CFMetaData,ByteBuffer)",2,1,2
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.toString()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.ThriftFilter.ThriftFilter(List<Expression>)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.ThriftFilter.filter(UnfilteredPartitionIterator,int)",4,3,5
"org.apache.cassandra.db.filter.RowFilter.ThriftFilter.withNewExpressions(List<Expression>)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.add(ColumnDefinition,Operator,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.addCustomIndexExpression(CFMetaData,IndexMetadata,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.addMapEquality(ColumnDefinition,ByteBuffer,Operator,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.addThriftExpression(CFMetaData,ByteBuffer,Operator,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.clusteringKeyRestrictionsAreSatisfiedBy(Clustering)",4,2,4
"org.apache.cassandra.db.filter.RowFilter.create()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.create(int)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.forThrift(int)",1,1,1
"org.apache.cassandra.db.filter.RowFilter.getExpressions()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.isEmpty()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.iterator()",1,1,1
"org.apache.cassandra.db.filter.RowFilter.makeCompactClustering(CFMetaData,ByteBuffer)",2,2,2
"org.apache.cassandra.db.filter.RowFilter.partitionKeyRestrictionsAreSatisfiedBy(DecoratedKey,AbstractType<?>)",4,3,5
"org.apache.cassandra.db.filter.RowFilter.toString()",1,3,3
"org.apache.cassandra.db.filter.RowFilter.without(Expression)",2,3,4
"org.apache.cassandra.db.filter.TombstoneOverwhelmingException.TombstoneOverwhelmingException(int,String,CFMetaData,DecoratedKey,ClusteringPrefix)",1,1,1
"org.apache.cassandra.db.filter.TombstoneOverwhelmingException.makePKString(CFMetaData,ByteBuffer,ClusteringPrefix)",1,7,7
"org.apache.cassandra.db.lifecycle.Helpers.abortObsoletion(List<Obsoletion>,Throwable)",2,4,5
"org.apache.cassandra.db.lifecycle.Helpers.checkNotReplaced(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.lifecycle.Helpers.concatUniq(Set<T>...)",1,3,3
"org.apache.cassandra.db.lifecycle.Helpers.emptySet()",1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.filterIn(Iterable<T>,Set<T>...)",1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.filterOut(Iterable<T>,Set<T>...)",1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.idIn(Map<T, T>)",1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.idIn(Set<T>)",1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.identityMap(Iterable<T>)",1,2,2
"org.apache.cassandra.db.lifecycle.Helpers.markObsolete(List<Obsoletion>,Throwable)",2,4,5
"org.apache.cassandra.db.lifecycle.Helpers.notIn(Set<T>...)",1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.orIn(Collection<T>...)",1,2,2
"org.apache.cassandra.db.lifecycle.Helpers.prepareForObsoletion(Iterable<SSTableReader>,LogTransaction,List<Obsoletion>,Throwable)",1,3,3
"org.apache.cassandra.db.lifecycle.Helpers.replace(Map<T, T>,Set<T>,Iterable<T>)",1,2,2
"org.apache.cassandra.db.lifecycle.Helpers.replace(Set<T>,Set<T>,Iterable<T>)",1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.select(T,Collection<T>)",2,2,3
"org.apache.cassandra.db.lifecycle.Helpers.selectFirst(T,Collection<T>...)",3,2,3
"org.apache.cassandra.db.lifecycle.Helpers.setReplaced(Iterable<SSTableReader>,Throwable)",1,3,3
"org.apache.cassandra.db.lifecycle.Helpers.setupOnline(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.LifecycleTransaction(Tracker,LogTransaction,Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.LifecycleTransaction(Tracker,OperationType,Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.Action.get(boolean,boolean)",1,1,4
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.ReaderState(Action,Action,SSTableReader,SSTableReader,boolean)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.equals(Object)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.equals(ReaderState)",1,1,5
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.toString()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.visible(SSTableReader,Predicate<SSTableReader>,Collection<SSTableReader>...)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State.clear()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State.contains(SSTableReader)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State.isEmpty()",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State.log(State)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.cancel(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.cancel(SSTableReader)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.checkUnused()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.checkpoint()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.checkpoint(Throwable)",2,2,3
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.current()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.current(SSTableReader)",4,3,6
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.doAbort(Throwable)",2,4,4
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.doCommit(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.doPostCleanup(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.doPrepare()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.fresh()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.getFiles(Path,BiFunction<File, FileType, Boolean>,OnTxnErr)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.isObsolete(SSTableReader)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.isOffline()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.log()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.obsolete(SSTableReader)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.obsoleteOriginals()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(OperationType)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(OperationType,Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(OperationType,SSTableReader)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.onlyOne()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.opId()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.opType()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.originals()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.permitRedundantTransitions()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.removeUnfinishedLeftovers(CFMetaData)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.rescheduleFailedDeletions()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.restoreUpdatedOriginals()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.split(Collection<SSTableReader>)",1,3,3
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.state(SSTableReader)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.toString()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.toUpdate()",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.trackNew(SSTable)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.unmarkCompacting(Set<SSTableReader>,Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.untrackNew(SSTable)",1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.update(Collection<SSTableReader>,boolean)",1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.update(SSTableReader,boolean)",1,3,3
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.waitForDeletions()",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.LogAwareFileLister(Path,BiFunction<File, FileType, Boolean>,OnTxnErr)",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.allFilesPresent(LogFile,Map<LogRecord, Set<File>>,Map<LogRecord, Set<File>>)",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.classifyFiles(File)",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.classifyFiles(LogFile)",5,4,5
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.getFinalFiles(File)",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.getTemporaryFiles(File)",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.innerList()",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.list()",1,2,2
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.list(DirectoryStream<Path>)",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.listFiles(File,FileType...)",1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.readTxnLog(LogFile)",2,2,3
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.setTemporary(LogFile,Collection<Set<File>>,Collection<Set<File>>)",1,1,2
"org.apache.cassandra.db.lifecycle.LogFile.LogFile(OperationType,UUID)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.LogFile(OperationType,UUID,List<File>)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.abort()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.aborted()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.add(Type,SSTable)",2,1,2
"org.apache.cassandra.db.lifecycle.LogFile.addRecord(LogRecord)",2,1,2
"org.apache.cassandra.db.lifecycle.LogFile.close()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.commit()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.committed()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.completed()",1,2,2
"org.apache.cassandra.db.lifecycle.LogFile.contains(Type,SSTable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.deleteFilesForRecordsOfType(Type)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.deleteRecordFiles(LogRecord)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.exists()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getFileName(File)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getFilePaths()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getFiles()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getFilesOfType(NavigableSet<File>,Type)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getLastRecord()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getRecordFiles(NavigableSet<File>,LogRecord)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.id()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.isLastRecordValidWithType(Type)",1,3,3
"org.apache.cassandra.db.lifecycle.LogFile.isLogFile(File)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.logError(LogRecord)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.make(File)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.make(String,List<File>)",1,2,2
"org.apache.cassandra.db.lifecycle.LogFile.makeRecord(Type,SSTable)",1,1,2
"org.apache.cassandra.db.lifecycle.LogFile.remove(Type,SSTable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.removeUnfinishedLeftovers(Throwable)",1,2,3
"org.apache.cassandra.db.lifecycle.LogFile.syncFolder(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.toString()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.type()",1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.verify()",5,4,5
"org.apache.cassandra.db.lifecycle.LogFile.verifyRecord(LogRecord)",3,3,5
"org.apache.cassandra.db.lifecycle.LogFile.verifyRecordWithCorruptedLastRecord(LogRecord)",1,2,3
"org.apache.cassandra.db.lifecycle.LogRecord.LogRecord(Type,String,long,int)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.LogRecord(Type,String,long,int,long,String)",1,4,6
"org.apache.cassandra.db.lifecycle.LogRecord.LogRecord(Type,long)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.Status.hasError()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.Status.setError(String)",1,2,2
"org.apache.cassandra.db.lifecycle.LogRecord.Type.fromPrefix(String)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.Type.hasFile()",1,1,2
"org.apache.cassandra.db.lifecycle.LogRecord.Type.isFinal()",1,1,2
"org.apache.cassandra.db.lifecycle.LogRecord.Type.matches(LogRecord)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.absolutePath()",1,2,2
"org.apache.cassandra.db.lifecycle.LogRecord.computeChecksum()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.equals(Object)",2,4,5
"org.apache.cassandra.db.lifecycle.LogRecord.error()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.fileName()",1,2,2
"org.apache.cassandra.db.lifecycle.LogRecord.format()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.getExistingFiles()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.getExistingFiles(String)",1,2,2
"org.apache.cassandra.db.lifecycle.LogRecord.hashCode()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.isFinal()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.isInvalid()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.isInvalidOrPartial()",1,2,2
"org.apache.cassandra.db.lifecycle.LogRecord.isValid()",1,2,2
"org.apache.cassandra.db.lifecycle.LogRecord.make(String)",2,3,3
"org.apache.cassandra.db.lifecycle.LogRecord.make(Type,List<File>,int,String)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.make(Type,SSTable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.makeAbort(long)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.makeCommit(long)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.partial()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.setError(String)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.setError(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.setPartial()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.toString()",1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.withExistingFiles()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.LogReplica(File,int)",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.append(LogRecord)",1,2,2
"org.apache.cassandra.db.lifecycle.LogReplica.close()",1,2,2
"org.apache.cassandra.db.lifecycle.LogReplica.create(File,String)",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.delete()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.exists()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.file()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.open(File)",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.syncFolder()",1,2,2
"org.apache.cassandra.db.lifecycle.LogReplica.toString()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.addReplica(File)",1,2,2
"org.apache.cassandra.db.lifecycle.LogReplicaSet.addReplicas(List<File>)",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.append(LogRecord)",1,4,4
"org.apache.cassandra.db.lifecycle.LogReplicaSet.close()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.delete(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.exists()",1,2,2
"org.apache.cassandra.db.lifecycle.LogReplicaSet.getFilePaths()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.getFiles()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.isPrefixMatch(String,String)",1,2,2
"org.apache.cassandra.db.lifecycle.LogReplicaSet.maybeCreateReplica(File,String,Set<LogRecord>)",2,2,3
"org.apache.cassandra.db.lifecycle.LogReplicaSet.readRecords(Set<LogRecord>)",10,10,13
"org.apache.cassandra.db.lifecycle.LogReplicaSet.replicas()",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.syncFolder(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.toString()",1,2,2
"org.apache.cassandra.db.lifecycle.LogTransaction.CorruptTransactionLogException.CorruptTransactionLogException(String,LogFile)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName.add(File)",1,2,2
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName.list(File)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName.removeUnfinishedLeftovers()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName.removeUnfinishedLeftovers(String,List<File>)",1,3,3
"org.apache.cassandra.db.lifecycle.LogTransaction.LogTransaction(OperationType)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogTransaction(OperationType,Tracker)",1,2,2
"org.apache.cassandra.db.lifecycle.LogTransaction.Obsoletion.Obsoletion(SSTableReader,SSTableTidier)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.SSTableTidier.SSTableTidier(SSTableReader,boolean,LogTransaction)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.SSTableTidier.abort()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.SSTableTidier.run()",1,3,5
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier.TransactionTidier(LogFile)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier.name()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier.run()",1,6,6
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier.tidy()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.complete(Throwable)",1,2,2
"org.apache.cassandra.db.lifecycle.LogTransaction.delete(File)",1,4,4
"org.apache.cassandra.db.lifecycle.LogTransaction.doAbort(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.doCommit(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.doPrepare()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.id()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.logFilePaths()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.logFiles()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.obsoleted(SSTableReader)",3,3,4
"org.apache.cassandra.db.lifecycle.LogTransaction.removeUnfinishedLeftovers(CFMetaData)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.removeUnfinishedLeftovers(List<File>)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.rescheduleFailedDeletions()",1,2,2
"org.apache.cassandra.db.lifecycle.LogTransaction.trackNew(SSTable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.txnFile()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.type()",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.untrackNew(SSTable)",1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.waitForDeletions()",1,1,1
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree.SSTableIntervalTree(Collection<Interval<PartitionPosition, SSTableReader>>)",1,1,1
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree.build(Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree.buildIntervals(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree.empty()",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.Tracker(ColumnFamilyStore,boolean)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.addInitialSSTables(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.lifecycle.Tracker.addSSTables(Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.apply(Function<View, View>)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.apply(Function<View, View>,Throwable)",1,2,2
"org.apache.cassandra.db.lifecycle.Tracker.apply(Predicate<View>,Function<View, View>)",4,3,4
"org.apache.cassandra.db.lifecycle.Tracker.dropSSTables()",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.dropSSTables(Predicate<SSTableReader>,OperationType,Throwable)",1,4,4
"org.apache.cassandra.db.lifecycle.Tracker.dropSSTables(Throwable)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.dropSSTablesIfInvalid(Throwable)",1,3,3
"org.apache.cassandra.db.lifecycle.Tracker.emptySet()",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.getCompacting()",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.getMemtableFor(Group,ReplayPosition)",3,2,3
"org.apache.cassandra.db.lifecycle.Tracker.getUncompacting()",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.getUncompacting(Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.getView()",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.isDummy()",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.markFlushing(Memtable)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.maybeIncrementallyBackup(Iterable<SSTableReader>)",2,2,3
"org.apache.cassandra.db.lifecycle.Tracker.notifyAdded(Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.notifyAdded(Iterable<SSTableReader>,Throwable)",1,3,3
"org.apache.cassandra.db.lifecycle.Tracker.notifyDeleting(SSTableReader)",1,2,2
"org.apache.cassandra.db.lifecycle.Tracker.notifyRenewed(Memtable)",1,2,2
"org.apache.cassandra.db.lifecycle.Tracker.notifySSTableRepairedStatusChanged(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.db.lifecycle.Tracker.notifySSTablesChanged(Collection<SSTableReader>,Collection<SSTableReader>,OperationType,Throwable)",1,3,3
"org.apache.cassandra.db.lifecycle.Tracker.notifyTruncated(long)",1,2,2
"org.apache.cassandra.db.lifecycle.Tracker.removeUnreadableSSTables(File)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.replaceFlushed(Memtable,Collection<SSTableReader>)",2,5,5
"org.apache.cassandra.db.lifecycle.Tracker.reset()",1,2,2
"org.apache.cassandra.db.lifecycle.Tracker.subscribe(INotificationConsumer)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.switchMemtable(boolean)",1,2,2
"org.apache.cassandra.db.lifecycle.Tracker.tryModify(Iterable<SSTableReader>,OperationType)",3,1,3
"org.apache.cassandra.db.lifecycle.Tracker.tryModify(SSTableReader,OperationType)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.unsubscribe(INotificationConsumer)",1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.updateSizeTracking(Iterable<SSTableReader>,Iterable<SSTableReader>,Throwable)",2,7,8
"org.apache.cassandra.db.lifecycle.View.View(List<Memtable>,List<Memtable>,Map<SSTableReader, SSTableReader>,Map<SSTableReader, SSTableReader>,SSTableIntervalTree)",1,1,1
"org.apache.cassandra.db.lifecycle.View.allKnownSSTables()",1,1,1
"org.apache.cassandra.db.lifecycle.View.getAllMemtables()",1,1,1
"org.apache.cassandra.db.lifecycle.View.getCurrentMemtable()",1,1,1
"org.apache.cassandra.db.lifecycle.View.getUncompacting(Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.View.isEmpty()",1,5,5
"org.apache.cassandra.db.lifecycle.View.lessThan(T)",1,1,1
"org.apache.cassandra.db.lifecycle.View.liveSSTables()",1,1,1
"org.apache.cassandra.db.lifecycle.View.markFlushing(Memtable)",1,1,1
"org.apache.cassandra.db.lifecycle.View.permitCompacting(Iterable<SSTableReader>)",3,4,5
"org.apache.cassandra.db.lifecycle.View.replaceFlushed(Memtable,Collection<SSTableReader>)",2,1,2
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet)",1,1,1
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet,AbstractBounds<PartitionPosition>)",1,1,1
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet,DecoratedKey)",1,1,1
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet,Iterable<SSTableReader>)",5,5,6
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet,Predicate<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.View.sstables(SSTableSet)",1,1,1
"org.apache.cassandra.db.lifecycle.View.sstables(SSTableSet,Predicate<SSTableReader>)",1,1,1
"org.apache.cassandra.db.lifecycle.View.sstablesInBounds(SSTableSet,PartitionPosition,PartitionPosition)",2,3,3
"org.apache.cassandra.db.lifecycle.View.switchMemtable(Memtable)",1,1,1
"org.apache.cassandra.db.lifecycle.View.toString()",1,1,1
"org.apache.cassandra.db.lifecycle.View.updateCompacting(Set<SSTableReader>,Iterable<SSTableReader>)",2,3,3
"org.apache.cassandra.db.lifecycle.View.updateLiveSet(Set<SSTableReader>,Iterable<SSTableReader>)",2,3,3
"org.apache.cassandra.db.marshal.AbstractCompositeType.AbstractCompositeType()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.compareCustom(ByteBuffer,ByteBuffer)",7,7,13
"org.apache.cassandra.db.marshal.AbstractCompositeType.escape(String)",2,1,4
"org.apache.cassandra.db.marshal.AbstractCompositeType.fromJSONObject(Object)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.fromString(String)",4,6,7
"org.apache.cassandra.db.marshal.AbstractCompositeType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.getString(ByteBuffer)",3,4,5
"org.apache.cassandra.db.marshal.AbstractCompositeType.split(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.AbstractCompositeType.split(String)",4,5,6
"org.apache.cassandra.db.marshal.AbstractCompositeType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.unescape(String)",2,2,3
"org.apache.cassandra.db.marshal.AbstractCompositeType.validate(ByteBuffer)",6,3,7
"org.apache.cassandra.db.marshal.AbstractType.AbstractType(ComparisonType)",2,2,4
"org.apache.cassandra.db.marshal.AbstractType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.asCQLTypeStringList(List<AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.marshal.AbstractType.checkComparable()",2,2,2
"org.apache.cassandra.db.marshal.AbstractType.compare(ByteBuffer,ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.AbstractType.compareCollectionMembers(ByteBuffer,ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.compareForCQL(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.componentsCount()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.decompose(T)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.freeze()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.getComponents()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.getString(ByteBuffer)",2,1,2
"org.apache.cassandra.db.marshal.AbstractType.getString(Collection<ByteBuffer>)",1,2,2
"org.apache.cassandra.db.marshal.AbstractType.isCollection()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.isCompatibleWith(AbstractType<?>)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.isCounter()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.isFrozenCollection()",1,2,2
"org.apache.cassandra.db.marshal.AbstractType.isMultiCell()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.isReversed()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.isValueCompatibleWith(AbstractType<?>)",1,1,2
"org.apache.cassandra.db.marshal.AbstractType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.parseDefaultParameters(AbstractType<?>,TypeParser)",2,4,4
"org.apache.cassandra.db.marshal.AbstractType.readValue(DataInputPlus)",2,2,2
"org.apache.cassandra.db.marshal.AbstractType.references(AbstractType<?>)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.skipValue(DataInputPlus)",1,2,2
"org.apache.cassandra.db.marshal.AbstractType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.toString()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.toString(boolean)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.validateCellValue(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.validateCollectionMember(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.writeValue(ByteBuffer,DataOutputPlus)",1,2,2
"org.apache.cassandra.db.marshal.AbstractType.writtenLength(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.AsciiType.AsciiType()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.AsciiType.fromString(String)",1,2,2
"org.apache.cassandra.db.marshal.AsciiType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.toJSONString(ByteBuffer,int)",1,1,2
"org.apache.cassandra.db.marshal.BooleanType.BooleanType()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.compareCustom(ByteBuffer,ByteBuffer)",3,4,8
"org.apache.cassandra.db.marshal.BooleanType.fromJSONObject(Object)",3,3,3
"org.apache.cassandra.db.marshal.BooleanType.fromString(String)",3,4,4
"org.apache.cassandra.db.marshal.BooleanType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.ByteType.ByteType()",1,1,1
"org.apache.cassandra.db.marshal.ByteType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.ByteType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ByteType.fromJSONObject(Object)",3,4,4
"org.apache.cassandra.db.marshal.ByteType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.ByteType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.ByteType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.BytesType()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.fromJSONObject(Object)",2,3,3
"org.apache.cassandra.db.marshal.BytesType.fromString(String)",1,2,2
"org.apache.cassandra.db.marshal.BytesType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.isCompatibleWith(AbstractType<?>)",1,1,3
"org.apache.cassandra.db.marshal.BytesType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer.deserialize(DataInputPlus)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer.serialize(CellPath,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer.serializedSize(CellPath)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer.skip(DataInputPlus)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionType(ComparisonType,Kind)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.collectionSize(List<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.fromString(String)",1,2,2
"org.apache.cassandra.db.marshal.CollectionType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.isCollection()",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.isCompatibleWith(AbstractType<?>)",6,2,6
"org.apache.cassandra.db.marshal.CollectionType.isMap()",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.isValueCompatibleWithInternal(AbstractType<?>)",5,2,5
"org.apache.cassandra.db.marshal.CollectionType.makeCollectionReceiver(ColumnSpecification,boolean)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.serializeForNativeProtocol(ColumnDefinition,Iterator<Cell>,int)",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.toString()",1,1,1
"org.apache.cassandra.db.marshal.CollectionType.validateCellValue(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.ColumnToCollectionType.ColumnToCollectionType(Map<ByteBuffer, CollectionType>)",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.compareCollectionMembers(ByteBuffer,ByteBuffer,ByteBuffer)",2,2,2
"org.apache.cassandra.db.marshal.ColumnToCollectionType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.fromJSONObject(Object)",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.fromString(String)",1,2,2
"org.apache.cassandra.db.marshal.ColumnToCollectionType.getInstance(Map<ByteBuffer, CollectionType>)",1,2,2
"org.apache.cassandra.db.marshal.ColumnToCollectionType.getInstance(TypeParser)",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.isCompatibleWith(AbstractType<?>)",4,3,5
"org.apache.cassandra.db.marshal.ColumnToCollectionType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.toString()",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.validateCollectionMember(ByteBuffer,ByteBuffer)",2,2,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.Builder(Builder)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.Builder(CompositeType)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.Builder(CompositeType,List<ByteBuffer>,byte[],boolean)",1,1,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.add(ByteBuffer)",2,1,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.add(ColumnIdentifier)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.build()",1,3,4
"org.apache.cassandra.db.marshal.CompositeType.Builder.buildAsEndOfRange()",2,1,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.buildForRelation(Operator)",2,2,4
"org.apache.cassandra.db.marshal.CompositeType.Builder.componentCount()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.copy()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.get(int)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.getComponent(int)",2,1,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.remainingCount()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.staticBuilder(CompositeType)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.CompositeComponent.CompositeComponent(ByteBuffer,byte)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.CompositeType(List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.StaticParsedComparator(AbstractType<?>,String)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getAbstractType()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getComparatorSerializedSize()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getRemainingPart()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.serializeComparator(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.build(ByteBuffer...)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.build(boolean,ByteBuffer...)",1,4,5
"org.apache.cassandra.db.marshal.CompositeType.builder()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.componentsCount()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.decompose(Object...)",1,2,2
"org.apache.cassandra.db.marshal.CompositeType.deconstruct(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.CompositeType.extractComponent(ByteBuffer,int)",3,2,3
"org.apache.cassandra.db.marshal.CompositeType.extractLastComponent(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.CompositeType.getAndAppendComparator(int,ByteBuffer,StringBuilder)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getComparator(int,ByteBuffer)",1,1,2
"org.apache.cassandra.db.marshal.CompositeType.getComparator(int,ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getComponents()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getInstance(AbstractType...)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getInstance(List<AbstractType<?>>)",1,3,4
"org.apache.cassandra.db.marshal.CompositeType.getInstance(TypeParser)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.isCompatibleWith(AbstractType<?>)",6,2,6
"org.apache.cassandra.db.marshal.CompositeType.isStaticName(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.CompositeType.isValueCompatibleWithInternal(AbstractType<?>)",6,2,6
"org.apache.cassandra.db.marshal.CompositeType.lastEOC(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.parseComparator(int,String)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.readIsStatic(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.readStatic(ByteBuffer)",3,1,3
"org.apache.cassandra.db.marshal.CompositeType.references(AbstractType<?>)",4,2,4
"org.apache.cassandra.db.marshal.CompositeType.split(ByteBuffer)",1,3,3
"org.apache.cassandra.db.marshal.CompositeType.splitName(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.CompositeType.toString()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.validateComparator(int,ByteBuffer)",2,1,2
"org.apache.cassandra.db.marshal.CounterColumnType.CounterColumnType()",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.decompose(Long)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.fromJSONObject(Object)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.isCounter()",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.validateCellValue(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DateType.DateType()",1,1,1
"org.apache.cassandra.db.marshal.DateType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.DateType.fromJSONObject(Object)",2,3,3
"org.apache.cassandra.db.marshal.DateType.fromString(String)",2,1,2
"org.apache.cassandra.db.marshal.DateType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.DateType.isCompatibleWith(AbstractType<?>)",3,2,3
"org.apache.cassandra.db.marshal.DateType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.DateType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,3
"org.apache.cassandra.db.marshal.DateType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.DateType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.DecimalType.DecimalType()",1,1,1
"org.apache.cassandra.db.marshal.DecimalType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.DecimalType.compareCustom(ByteBuffer,ByteBuffer)",2,4,5
"org.apache.cassandra.db.marshal.DecimalType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.DecimalType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.DecimalType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.DecimalType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.DecimalType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.DoubleType()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.compareCustom(ByteBuffer,ByteBuffer)",2,4,5
"org.apache.cassandra.db.marshal.DoubleType.fromJSONObject(Object)",2,3,3
"org.apache.cassandra.db.marshal.DoubleType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.DoubleType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicCompositeType(Map<Byte, AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.DynamicParsedComparator(String)",2,3,5
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getAbstractType()",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getComparatorSerializedSize()",1,2,2
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getRemainingPart()",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.serializeComparator(ByteBuffer)",1,3,3
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.FixedValueComparator(int)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.decompose(Void)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.fromJSONObject(Object)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.decompose(Object...)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.getAndAppendComparator(int,ByteBuffer,StringBuilder)",2,2,3
"org.apache.cassandra.db.marshal.DynamicCompositeType.getComparator(ByteBuffer)",2,2,3
"org.apache.cassandra.db.marshal.DynamicCompositeType.getComparator(int,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.getComparator(int,ByteBuffer,ByteBuffer)",4,2,8
"org.apache.cassandra.db.marshal.DynamicCompositeType.getInstance(Map<Byte, AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.marshal.DynamicCompositeType.getInstance(TypeParser)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.isCompatibleWith(AbstractType<?>)",6,2,7
"org.apache.cassandra.db.marshal.DynamicCompositeType.parseComparator(int,String)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.readIsStatic(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.toString()",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.validateComparator(int,ByteBuffer)",5,4,7
"org.apache.cassandra.db.marshal.EmptyType.EmptyType()",1,1,1
"org.apache.cassandra.db.marshal.EmptyType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.EmptyType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.EmptyType.fromJSONObject(Object)",3,3,3
"org.apache.cassandra.db.marshal.EmptyType.fromString(String)",2,2,2
"org.apache.cassandra.db.marshal.EmptyType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.EmptyType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.EmptyType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.FloatType()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.compareCustom(ByteBuffer,ByteBuffer)",2,4,5
"org.apache.cassandra.db.marshal.FloatType.fromJSONObject(Object)",2,3,3
"org.apache.cassandra.db.marshal.FloatType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.FloatType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.FloatType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.FrozenType.FrozenType()",1,1,1
"org.apache.cassandra.db.marshal.FrozenType.fromJSONObject(Object)",1,1,1
"org.apache.cassandra.db.marshal.FrozenType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.FrozenType.getInstance(TypeParser)",2,1,2
"org.apache.cassandra.db.marshal.FrozenType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.FrozenType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.FrozenType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.InetAddressType.InetAddressType()",1,1,1
"org.apache.cassandra.db.marshal.InetAddressType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.InetAddressType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.InetAddressType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.InetAddressType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.InetAddressType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.InetAddressType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.Int32Type.Int32Type()",1,1,1
"org.apache.cassandra.db.marshal.Int32Type.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.Int32Type.compareCustom(ByteBuffer,ByteBuffer)",3,4,6
"org.apache.cassandra.db.marshal.Int32Type.fromJSONObject(Object)",3,4,4
"org.apache.cassandra.db.marshal.Int32Type.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.Int32Type.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.Int32Type.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.Int32Type.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.Int32Type.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.IntegerType()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.compareIntegers(ByteBuffer,ByteBuffer)",9,2,11
"org.apache.cassandra.db.marshal.IntegerType.findMostSignificantByte(ByteBuffer)",5,2,10
"org.apache.cassandra.db.marshal.IntegerType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.IntegerType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.IntegerType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.isValueCompatibleWithInternal(AbstractType<?>)",1,3,3
"org.apache.cassandra.db.marshal.IntegerType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.LexicalUUIDType()",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.compareCustom(ByteBuffer,ByteBuffer)",2,4,5
"org.apache.cassandra.db.marshal.LexicalUUIDType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.LexicalUUIDType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.LexicalUUIDType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.ListType.ListType(AbstractType<T>,boolean)",1,1,1
"org.apache.cassandra.db.marshal.ListType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ListType.compareListOrSet(AbstractType<?>,ByteBuffer,ByteBuffer)",4,5,9
"org.apache.cassandra.db.marshal.ListType.freeze()",2,2,2
"org.apache.cassandra.db.marshal.ListType.fromJSONObject(Object)",4,4,5
"org.apache.cassandra.db.marshal.ListType.getElementsType()",1,1,1
"org.apache.cassandra.db.marshal.ListType.getInstance(AbstractType<T>,boolean)",1,2,3
"org.apache.cassandra.db.marshal.ListType.getInstance(TypeParser)",2,1,2
"org.apache.cassandra.db.marshal.ListType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.ListType.isCompatibleWithFrozen(CollectionType<?>)",1,1,1
"org.apache.cassandra.db.marshal.ListType.isMultiCell()",1,1,1
"org.apache.cassandra.db.marshal.ListType.isValueCompatibleWithFrozen(CollectionType<?>)",1,1,1
"org.apache.cassandra.db.marshal.ListType.nameComparator()",1,1,1
"org.apache.cassandra.db.marshal.ListType.references(AbstractType<?>)",1,2,2
"org.apache.cassandra.db.marshal.ListType.serializedValues(Iterator<Cell>)",1,2,2
"org.apache.cassandra.db.marshal.ListType.setOrListToJsonString(ByteBuffer,AbstractType,int)",1,3,3
"org.apache.cassandra.db.marshal.ListType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.ListType.toString(boolean)",1,4,5
"org.apache.cassandra.db.marshal.ListType.valueComparator()",1,1,1
"org.apache.cassandra.db.marshal.LongType.LongType()",1,1,1
"org.apache.cassandra.db.marshal.LongType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.LongType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LongType.compareLongs(ByteBuffer,ByteBuffer)",3,4,6
"org.apache.cassandra.db.marshal.LongType.fromJSONObject(Object)",3,4,5
"org.apache.cassandra.db.marshal.LongType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.LongType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.LongType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.LongType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,3
"org.apache.cassandra.db.marshal.LongType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.LongType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.MapType.MapType(AbstractType<K>,AbstractType<V>,boolean)",1,1,1
"org.apache.cassandra.db.marshal.MapType.collectionSize(List<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.marshal.MapType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.MapType.compareMaps(AbstractType<?>,AbstractType<?>,ByteBuffer,ByteBuffer)",5,5,10
"org.apache.cassandra.db.marshal.MapType.freeze()",2,2,2
"org.apache.cassandra.db.marshal.MapType.fromJSONObject(Object)",5,4,6
"org.apache.cassandra.db.marshal.MapType.getInstance(AbstractType<K>,AbstractType<V>,boolean)",1,2,3
"org.apache.cassandra.db.marshal.MapType.getInstance(TypeParser)",2,1,2
"org.apache.cassandra.db.marshal.MapType.getKeysType()",1,1,1
"org.apache.cassandra.db.marshal.MapType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.MapType.getValuesType()",1,1,1
"org.apache.cassandra.db.marshal.MapType.isCompatibleWithFrozen(CollectionType<?>)",1,2,2
"org.apache.cassandra.db.marshal.MapType.isMultiCell()",1,1,1
"org.apache.cassandra.db.marshal.MapType.isValueCompatibleWithFrozen(CollectionType<?>)",1,2,2
"org.apache.cassandra.db.marshal.MapType.nameComparator()",1,1,1
"org.apache.cassandra.db.marshal.MapType.references(AbstractType<?>)",1,3,3
"org.apache.cassandra.db.marshal.MapType.serializedValues(Iterator<Cell>)",1,2,2
"org.apache.cassandra.db.marshal.MapType.toJSONString(ByteBuffer,int)",1,4,4
"org.apache.cassandra.db.marshal.MapType.toString(boolean)",1,4,5
"org.apache.cassandra.db.marshal.MapType.valueComparator()",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.PartitionerDefinedOrder(IPartitioner)",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.decompose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.fromJSONObject(Object)",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.getInstance(TypeParser)",1,2,2
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toString()",1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.ReversedType(AbstractType<T>)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.compareCustom(ByteBuffer,ByteBuffer)",3,2,4
"org.apache.cassandra.db.marshal.ReversedType.compareForCQL(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.fromJSONObject(Object)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.getInstance(AbstractType<T>)",1,2,2
"org.apache.cassandra.db.marshal.ReversedType.getInstance(TypeParser)",2,2,2
"org.apache.cassandra.db.marshal.ReversedType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.isCompatibleWith(AbstractType<?>)",2,1,2
"org.apache.cassandra.db.marshal.ReversedType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.isReversed()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.isValueCompatibleWith(AbstractType<?>)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.references(AbstractType<?>)",1,2,2
"org.apache.cassandra.db.marshal.ReversedType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.toString()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.SetType.SetType(AbstractType<T>,boolean)",1,1,1
"org.apache.cassandra.db.marshal.SetType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.SetType.freeze()",2,2,2
"org.apache.cassandra.db.marshal.SetType.fromJSONObject(Object)",4,4,5
"org.apache.cassandra.db.marshal.SetType.getElementsType()",1,1,1
"org.apache.cassandra.db.marshal.SetType.getInstance(AbstractType<T>,boolean)",1,2,3
"org.apache.cassandra.db.marshal.SetType.getInstance(TypeParser)",2,1,2
"org.apache.cassandra.db.marshal.SetType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.SetType.isCompatibleWithFrozen(CollectionType<?>)",1,1,1
"org.apache.cassandra.db.marshal.SetType.isMultiCell()",1,1,1
"org.apache.cassandra.db.marshal.SetType.isValueCompatibleWithFrozen(CollectionType<?>)",1,1,1
"org.apache.cassandra.db.marshal.SetType.nameComparator()",1,1,1
"org.apache.cassandra.db.marshal.SetType.references(AbstractType<?>)",1,2,2
"org.apache.cassandra.db.marshal.SetType.serializedValues(Iterator<Cell>)",1,2,2
"org.apache.cassandra.db.marshal.SetType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.SetType.toString(boolean)",1,4,5
"org.apache.cassandra.db.marshal.SetType.valueComparator()",1,1,1
"org.apache.cassandra.db.marshal.ShortType.ShortType()",1,1,1
"org.apache.cassandra.db.marshal.ShortType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.ShortType.compareCustom(ByteBuffer,ByteBuffer)",2,1,2
"org.apache.cassandra.db.marshal.ShortType.fromJSONObject(Object)",3,4,4
"org.apache.cassandra.db.marshal.ShortType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.ShortType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.ShortType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.SimpleDateType()",1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.SimpleDateType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.fromTimeInMillis(long)",1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.isCompatibleWith(AbstractType<?>)",1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,2
"org.apache.cassandra.db.marshal.SimpleDateType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.toTimeInMillis(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.TimeType.TimeType()",1,1,1
"org.apache.cassandra.db.marshal.TimeType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.TimeType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.TimeType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.TimeType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.TimeType.isCompatibleWith(AbstractType<?>)",1,1,1
"org.apache.cassandra.db.marshal.TimeType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,2
"org.apache.cassandra.db.marshal.TimeType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.TimeUUIDType()",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.compareCustom(ByteBuffer,ByteBuffer)",3,1,5
"org.apache.cassandra.db.marshal.TimeUUIDType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.TimeUUIDType.fromString(String)",3,3,4
"org.apache.cassandra.db.marshal.TimeUUIDType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.reorderTimestampBytes(long)",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.signedBytesToNativeLong(long)",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.topbyte(long)",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.TimestampType.TimestampType()",1,1,1
"org.apache.cassandra.db.marshal.TimestampType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.TimestampType.compareCustom(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.TimestampType.fromJSONObject(Object)",2,3,3
"org.apache.cassandra.db.marshal.TimestampType.fromString(String)",2,1,2
"org.apache.cassandra.db.marshal.TimestampType.fromTimeInMillis(long)",1,1,1
"org.apache.cassandra.db.marshal.TimestampType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.TimestampType.isCompatibleWith(AbstractType<?>)",3,2,3
"org.apache.cassandra.db.marshal.TimestampType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.TimestampType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,3
"org.apache.cassandra.db.marshal.TimestampType.toJSONString(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.TimestampType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.TupleType.TupleType(List<AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.marshal.TupleType.allTypes()",1,1,1
"org.apache.cassandra.db.marshal.TupleType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.TupleType.buildValue(ByteBuffer[])",1,5,5
"org.apache.cassandra.db.marshal.TupleType.compareCustom(ByteBuffer,ByteBuffer)",8,7,13
"org.apache.cassandra.db.marshal.TupleType.equals(Object)",2,1,2
"org.apache.cassandra.db.marshal.TupleType.fromJSONObject(Object)",4,7,7
"org.apache.cassandra.db.marshal.TupleType.fromString(String)",4,3,4
"org.apache.cassandra.db.marshal.TupleType.getInstance(TypeParser)",1,2,2
"org.apache.cassandra.db.marshal.TupleType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.TupleType.getString(ByteBuffer)",4,5,5
"org.apache.cassandra.db.marshal.TupleType.hashCode()",1,1,1
"org.apache.cassandra.db.marshal.TupleType.isCompatibleWith(AbstractType<?>)",5,2,5
"org.apache.cassandra.db.marshal.TupleType.isValueCompatibleWithInternal(AbstractType<?>)",5,2,5
"org.apache.cassandra.db.marshal.TupleType.references(AbstractType<?>)",4,2,4
"org.apache.cassandra.db.marshal.TupleType.size()",1,1,1
"org.apache.cassandra.db.marshal.TupleType.split(ByteBuffer)",3,4,4
"org.apache.cassandra.db.marshal.TupleType.toJSONString(ByteBuffer,int)",1,4,4
"org.apache.cassandra.db.marshal.TupleType.toString()",1,1,1
"org.apache.cassandra.db.marshal.TupleType.type(int)",1,1,1
"org.apache.cassandra.db.marshal.TupleType.validate(ByteBuffer)",7,4,7
"org.apache.cassandra.db.marshal.TypeParser.TypeParser(String)",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.TypeParser(String,int)",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.fromHex(String)",1,2,2
"org.apache.cassandra.db.marshal.TypeParser.getAbstractType(String)",1,2,3
"org.apache.cassandra.db.marshal.TypeParser.getAbstractType(String,TypeParser)",1,3,4
"org.apache.cassandra.db.marshal.TypeParser.getAliasParameters()",5,7,11
"org.apache.cassandra.db.marshal.TypeParser.getCollectionsParameters()",6,4,8
"org.apache.cassandra.db.marshal.TypeParser.getKeyValueParameters()",5,6,8
"org.apache.cassandra.db.marshal.TypeParser.getRawAbstractType(Class<? extends AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.marshal.TypeParser.getRawAbstractType(Class<? extends AbstractType<?>>,TypeParser)",1,3,3
"org.apache.cassandra.db.marshal.TypeParser.getTypeParameters()",5,3,6
"org.apache.cassandra.db.marshal.TypeParser.getUserTypeParameters()",4,6,7
"org.apache.cassandra.db.marshal.TypeParser.isBlank(int)",1,1,3
"org.apache.cassandra.db.marshal.TypeParser.isEOS()",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.isEOS(String,int)",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.isIdentifierChar(int)",1,1,11
"org.apache.cassandra.db.marshal.TypeParser.parse()",2,3,3
"org.apache.cassandra.db.marshal.TypeParser.parse(CharSequence)",1,2,2
"org.apache.cassandra.db.marshal.TypeParser.parse(String)",4,4,8
"org.apache.cassandra.db.marshal.TypeParser.readNextIdentifier()",1,2,3
"org.apache.cassandra.db.marshal.TypeParser.skipBlank()",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.skipBlank(String,int)",1,2,3
"org.apache.cassandra.db.marshal.TypeParser.skipBlankAndComma()",5,3,5
"org.apache.cassandra.db.marshal.TypeParser.stringifyAliasesParameters(Map<Byte, AbstractType<?>>)",1,3,3
"org.apache.cassandra.db.marshal.TypeParser.stringifyCollectionsParameters(Map<ByteBuffer, ? extends CollectionType>)",1,3,3
"org.apache.cassandra.db.marshal.TypeParser.stringifyTypeParameters(List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.stringifyTypeParameters(List<AbstractType<?>>,boolean)",1,3,3
"org.apache.cassandra.db.marshal.TypeParser.stringifyUserTypeParameters(String,ByteBuffer,List<ByteBuffer>,List<AbstractType<?>>)",1,2,2
"org.apache.cassandra.db.marshal.TypeParser.throwSyntaxError(String)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.UTF8Type()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.UTF8Type.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.isCompatibleWith(AbstractType<?>)",1,1,2
"org.apache.cassandra.db.marshal.UTF8Type.toJSONString(ByteBuffer,int)",1,1,2
"org.apache.cassandra.db.marshal.UUIDType.UUIDType()",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.compareCustom(ByteBuffer,ByteBuffer)",6,2,8
"org.apache.cassandra.db.marshal.UUIDType.fromJSONObject(Object)",1,2,2
"org.apache.cassandra.db.marshal.UUIDType.fromString(String)",2,1,2
"org.apache.cassandra.db.marshal.UUIDType.getSerializer()",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.isEmptyValueMeaningless()",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,2
"org.apache.cassandra.db.marshal.UUIDType.parse(String)",3,3,4
"org.apache.cassandra.db.marshal.UUIDType.valueLengthIfFixed()",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.version(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.UserType.UserType(String,ByteBuffer,List<ByteBuffer>,List<AbstractType<?>>)",2,3,3
"org.apache.cassandra.db.marshal.UserType.asCQL3Type()",1,1,1
"org.apache.cassandra.db.marshal.UserType.equals(Object)",2,4,5
"org.apache.cassandra.db.marshal.UserType.fieldName(int)",1,1,1
"org.apache.cassandra.db.marshal.UserType.fieldNameAsString(int)",1,1,1
"org.apache.cassandra.db.marshal.UserType.fieldNames()",1,1,1
"org.apache.cassandra.db.marshal.UserType.fieldType(int)",1,1,1
"org.apache.cassandra.db.marshal.UserType.fieldTypes()",1,1,1
"org.apache.cassandra.db.marshal.UserType.fromJSONObject(Object)",5,9,9
"org.apache.cassandra.db.marshal.UserType.getInstance(TypeParser)",1,2,2
"org.apache.cassandra.db.marshal.UserType.getNameAsString()",1,1,1
"org.apache.cassandra.db.marshal.UserType.hashCode()",1,1,1
"org.apache.cassandra.db.marshal.UserType.toJSONString(ByteBuffer,int)",1,4,5
"org.apache.cassandra.db.marshal.UserType.toString()",1,1,1
"org.apache.cassandra.db.marshal.UserType.validate(ByteBuffer)",7,4,7
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractBTreePartition(CFMetaData,DecoratedKey)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractIterator.AbstractIterator(ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractIterator.AbstractIterator(Holder,ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractIterator.AbstractIterator(Holder,Row,ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.Holder.Holder(PartitionColumns,Object[],DeletionInfo,Row,EncodingStats)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SliceableIterator.SliceableIterator(ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SliceableIterator.computeNext()",2,3,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SliceableIterator.slice(Slice)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SlicesIterator.SlicesIterator(ColumnFilter,Slices,boolean,Holder,Row)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SlicesIterator.computeNext()",5,6,6
"org.apache.cassandra.db.partitions.AbstractBTreePartition.build(RowIterator,DeletionInfo,boolean,int)",1,4,4
"org.apache.cassandra.db.partitions.AbstractBTreePartition.build(UnfilteredRowIterator,int)",1,4,4
"org.apache.cassandra.db.partitions.AbstractBTreePartition.columns()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.deletionInfo()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.getRow(Clustering)",1,3,4
"org.apache.cassandra.db.partitions.AbstractBTreePartition.hasRows()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.isEmpty()",1,3,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.iterator()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.lastRow()",2,1,2
"org.apache.cassandra.db.partitions.AbstractBTreePartition.merge(Iterator<Row>,Iterator<RangeTombstone>,ColumnFilter,boolean,Holder,Row)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.metadata()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.partitionKey()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.rowCount()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.searchIterator(ColumnFilter,boolean)",3,6,6
"org.apache.cassandra.db.partitions.AbstractBTreePartition.sliceIterator(ColumnFilter,Slice,boolean,Holder,Row)",1,3,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.sliceableUnfilteredIterator()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.sliceableUnfilteredIterator(ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.staticRow()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.staticRow(Holder,ColumnFilter,boolean)",2,3,5
"org.apache.cassandra.db.partitions.AbstractBTreePartition.stats()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.toString()",1,3,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator()",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(ColumnFilter,Slices,boolean)",1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(Holder,ColumnFilter,Slices,boolean)",2,3,3
"org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator.close()",1,1,1
"org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator.remove()",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.AtomicBTreePartition(CFMetaData,DecoratedKey,MemtableAllocator)",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.RowUpdater(AtomicBTreePartition,MemtableAllocator,Group,UpdateTransaction)",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.abort(Row)",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.abortEarly()",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.allocated(long)",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.apply(Row)",1,1,2
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.apply(Row,Row)",1,1,2
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.builder(Clustering)",2,3,3
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.discard(Row)",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.finish()",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.reset()",1,3,3
"org.apache.cassandra.db.partitions.AtomicBTreePartition.addAllWithSizeDelta(PartitionUpdate,Group,UpdateTransaction)",3,15,15
"org.apache.cassandra.db.partitions.AtomicBTreePartition.avoidReservedValues(int)",2,1,3
"org.apache.cassandra.db.partitions.AtomicBTreePartition.canHaveShadowedData()",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.holder()",1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.updateWastedAllocationTracker(long)",5,3,8
"org.apache.cassandra.db.partitions.AtomicBTreePartition.usePessimisticLocking()",1,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.CachedBTreePartition(CFMetaData,DecoratedKey,Holder,int,int,int,int,int)",1,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.Serializer.deserialize(DataInputPlus)",1,1,2
"org.apache.cassandra.db.partitions.CachedBTreePartition.Serializer.serialize(CachedPartition,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.Serializer.serializedSize(CachedPartition)",1,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.cachedLiveRows()",1,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.create(UnfilteredRowIterator,int)",1,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.create(UnfilteredRowIterator,int,int)",1,4,7
"org.apache.cassandra.db.partitions.CachedBTreePartition.nonExpiringLiveCells()",1,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.nonTombstoneCellCount()",1,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.rowsWithNonExpiringCells()",1,1,1
"org.apache.cassandra.db.partitions.FilteredPartition.FilteredPartition(RowIterator)",1,1,1
"org.apache.cassandra.db.partitions.FilteredPartition.create(RowIterator)",1,1,1
"org.apache.cassandra.db.partitions.FilteredPartition.rowIterator()",1,2,2
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.ImmutableBTreePartition(CFMetaData,DecoratedKey,Holder)",1,1,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.ImmutableBTreePartition(CFMetaData,DecoratedKey,PartitionColumns,Row,Object[],DeletionInfo,EncodingStats)",1,1,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.canHaveShadowedData()",1,1,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.create(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.create(UnfilteredRowIterator,int)",1,1,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.holder()",1,1,1
"org.apache.cassandra.db.partitions.PartitionIterators.PartitionIterators()",1,1,1
"org.apache.cassandra.db.partitions.PartitionIterators.SingletonPartitionIterator.SingletonPartitionIterator(RowIterator)",1,1,1
"org.apache.cassandra.db.partitions.PartitionIterators.SingletonPartitionIterator.close()",1,1,1
"org.apache.cassandra.db.partitions.PartitionIterators.SingletonPartitionIterator.computeNext()",2,2,2
"org.apache.cassandra.db.partitions.PartitionIterators.concat(List<PartitionIterator>)",3,2,3
"org.apache.cassandra.db.partitions.PartitionIterators.consume(PartitionIterator)",1,3,3
"org.apache.cassandra.db.partitions.PartitionIterators.digest(PartitionIterator,MessageDigest)",1,2,2
"org.apache.cassandra.db.partitions.PartitionIterators.getOnlyElement(PartitionIterator,SinglePartitionReadCommand)",1,2,2
"org.apache.cassandra.db.partitions.PartitionIterators.loggingIterator(PartitionIterator,String)",1,1,1
"org.apache.cassandra.db.partitions.PartitionIterators.singletonIterator(RowIterator)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.CounterMark(Row,ColumnDefinition,CellPath)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.clustering()",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.column()",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.path()",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.setValue(ByteBuffer)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.value()",1,2,2
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdate(CFMetaData,ByteBuffer,PartitionColumns,int)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdate(CFMetaData,DecoratedKey,Holder,MutableDeletionInfo,boolean)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdate(CFMetaData,DecoratedKey,PartitionColumns,MutableDeletionInfo,int,boolean)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdate(CFMetaData,DecoratedKey,PartitionColumns,int)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserialize(DataInputPlus,int,Flag,ByteBuffer)",2,2,2
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserialize(DataInputPlus,int,Flag,DecoratedKey)",2,2,2
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserialize30(DataInputPlus,int,Flag)",2,4,4
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserializePre30(DataInputPlus,int,Flag,ByteBuffer)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.serialize(PartitionUpdate,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.serializedSize(PartitionUpdate,int)",2,2,2
"org.apache.cassandra.db.partitions.PartitionUpdate.add(RangeTombstone)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.add(Row)",2,3,4
"org.apache.cassandra.db.partitions.PartitionUpdate.addPartitionDeletion(DeletionTime)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.allowNewUpdates()",2,2,3
"org.apache.cassandra.db.partitions.PartitionUpdate.assertNotBuilt()",2,1,2
"org.apache.cassandra.db.partitions.PartitionUpdate.build()",2,1,2
"org.apache.cassandra.db.partitions.PartitionUpdate.builder(int)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.canHaveShadowedData()",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.collectCounterMarks()",1,4,4
"org.apache.cassandra.db.partitions.PartitionUpdate.columns()",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.dataSize()",1,3,3
"org.apache.cassandra.db.partitions.PartitionUpdate.emptyUpdate(CFMetaData,DecoratedKey)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.fromBytes(ByteBuffer,int,DecoratedKey)",2,1,4
"org.apache.cassandra.db.partitions.PartitionUpdate.fromIterator(RowIterator)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.fromIterator(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.fullPartitionDelete(CFMetaData,ByteBuffer,long,int)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.fullPartitionDelete(CFMetaData,DecoratedKey,long,int)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.holder()",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.iterator()",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.maxTimestamp()",1,5,5
"org.apache.cassandra.db.partitions.PartitionUpdate.maybeBuild()",2,1,2
"org.apache.cassandra.db.partitions.PartitionUpdate.merge(List<PartitionUpdate>)",2,2,2
"org.apache.cassandra.db.partitions.PartitionUpdate.operationCount()",1,1,3
"org.apache.cassandra.db.partitions.PartitionUpdate.singleRowUpdate(CFMetaData,ByteBuffer,Row)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.singleRowUpdate(CFMetaData,DecoratedKey,Row)",2,2,2
"org.apache.cassandra.db.partitions.PartitionUpdate.sliceableUnfilteredIterator(ColumnFilter,boolean)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.stats()",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.toBytes(PartitionUpdate,int)",1,1,2
"org.apache.cassandra.db.partitions.PartitionUpdate.updateAllTimestamp(long)",1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.validate()",1,3,3
"org.apache.cassandra.db.partitions.PurgeFunction.PurgeFunction(boolean,int,int,boolean)",1,3,4
"org.apache.cassandra.db.partitions.PurgeFunction.applyToDeletion(DeletionTime)",1,1,2
"org.apache.cassandra.db.partitions.PurgeFunction.applyToMarker(RangeTombstoneMarker)",4,4,6
"org.apache.cassandra.db.partitions.PurgeFunction.applyToPartition(UnfilteredRowIterator)",2,3,3
"org.apache.cassandra.db.partitions.PurgeFunction.applyToRow(Row)",1,1,1
"org.apache.cassandra.db.partitions.PurgeFunction.applyToStatic(Row)",1,1,1
"org.apache.cassandra.db.partitions.PurgeFunction.onEmptyPartitionPostPurge(DecoratedKey)",1,1,1
"org.apache.cassandra.db.partitions.PurgeFunction.onNewPartition(DecoratedKey)",1,1,1
"org.apache.cassandra.db.partitions.PurgeFunction.updateProgress()",1,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.SingletonUnfilteredPartitionIterator(UnfilteredRowIterator,boolean)",1,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.close()",1,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.hasNext()",1,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.isForThrift()",1,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.metadata()",1,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.next()",2,1,2
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.remove()",1,1,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.Serializer.deserialize(DataInputPlus,int,CFMetaData,ColumnFilter,Flag)",4,4,9
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.Serializer.serialize(UnfilteredPartitionIterator,ColumnFilter,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.UnfilteredPartitionIterators()",1,1,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.digest(UnfilteredPartitionIterator,MessageDigest,int)",1,2,2
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.filter(UnfilteredPartitionIterator,int)",1,1,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.getOnlyElement(UnfilteredPartitionIterator,SinglePartitionReadCommand)",1,2,2
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.loggingIterator(UnfilteredPartitionIterator,String,boolean)",1,1,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.merge(List<? extends UnfilteredPartitionIterator>,int,MergeListener)",1,4,4
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.mergeAndFilter(List<UnfilteredPartitionIterator>,int,MergeListener)",1,1,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.mergeLazily(List<? extends UnfilteredPartitionIterator>,int)",2,2,2
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.serializerForIntraNode()",1,1,1
"org.apache.cassandra.db.rows.AbstractCell.AbstractCell(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.rows.AbstractCell.digest(MessageDigest)",1,2,2
"org.apache.cassandra.db.rows.AbstractCell.equals(Object)",3,7,9
"org.apache.cassandra.db.rows.AbstractCell.hashCode()",1,1,1
"org.apache.cassandra.db.rows.AbstractCell.livenessInfoString()",3,3,3
"org.apache.cassandra.db.rows.AbstractCell.toString()",3,4,4
"org.apache.cassandra.db.rows.AbstractCell.validate()",5,4,8
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.AbstractRangeTombstoneMarker(Bound)",1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.clustering()",1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isBoundary()",1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isClose(boolean)",1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isOpen(boolean)",1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.kind()",1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.toString(CFMetaData,boolean)",1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.validateData(CFMetaData)",1,3,3
"org.apache.cassandra.db.rows.AbstractRow.digest(MessageDigest)",1,2,2
"org.apache.cassandra.db.rows.AbstractRow.equals(Object)",3,3,5
"org.apache.cassandra.db.rows.AbstractRow.hasLiveData(int)",2,1,2
"org.apache.cassandra.db.rows.AbstractRow.hashCode()",1,2,2
"org.apache.cassandra.db.rows.AbstractRow.isStatic()",1,1,1
"org.apache.cassandra.db.rows.AbstractRow.kind()",1,1,1
"org.apache.cassandra.db.rows.AbstractRow.toString(CFMetaData)",1,1,1
"org.apache.cassandra.db.rows.AbstractRow.toString(CFMetaData,boolean)",1,11,12
"org.apache.cassandra.db.rows.AbstractRow.validateData(CFMetaData)",2,4,5
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.AbstractUnfilteredRowIterator(CFMetaData,DecoratedKey,DeletionTime,PartitionColumns,Row,boolean,EncodingStats)",1,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.close()",1,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.columns()",1,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.isReverseOrder()",1,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.metadata()",1,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.partitionKey()",1,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.staticRow()",1,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.stats()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.BTreeRow(Clustering,LivenessInfo,Deletion,Object[],int)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.BTreeRow(Clustering,Object[],int)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.Builder(boolean)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.Builder(boolean,int)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.CellResolver.CellResolver(int)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.CellResolver.resolve(Object[],int,int)",2,4,5
"org.apache.cassandra.db.rows.BTreeRow.Builder.ComplexColumnDeletion.ComplexColumnDeletion(ColumnDefinition,DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.addCell(Cell)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.addComplexDeletion(ColumnDefinition,DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.addPrimaryKeyLivenessInfo(LivenessInfo)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.addRowDeletion(Deletion)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.build()",1,3,4
"org.apache.cassandra.db.rows.BTreeRow.Builder.clustering()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.isSorted()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.newRow(Clustering)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.reset()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.CellInLegacyOrderIterator(CFMetaData,boolean)",1,2,4
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.computeNext()",8,8,8
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.getComplexIdx()",1,1,2
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.getComplexIdxAndIncrement()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.getSimpleIdx()",1,1,2
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.getSimpleIdxAndIncrement()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.makeComplexIterator(Object)",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.CellIterator.computeNext()",6,6,6
"org.apache.cassandra.db.rows.BTreeRow.cells()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.cellsInLegacyOrder(CFMetaData,boolean)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.clustering()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.columns()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.create(Clustering,LivenessInfo,Deletion,Object[])",1,3,3
"org.apache.cassandra.db.rows.BTreeRow.dataSize()",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.deletion()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.emptyDeletedRow(Clustering,Deletion)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.emptyRow(Clustering)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.filter(ColumnFilter,CFMetaData)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.filter(ColumnFilter,DeletionTime,boolean,CFMetaData)",4,10,15
"org.apache.cassandra.db.rows.BTreeRow.getCell(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.getCell(ColumnDefinition,CellPath)",2,1,2
"org.apache.cassandra.db.rows.BTreeRow.getComplexColumnData(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.hasComplex()",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.hasComplexDeletion()",4,2,4
"org.apache.cassandra.db.rows.BTreeRow.hasDeletion(int)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.isEmpty()",1,3,3
"org.apache.cassandra.db.rows.BTreeRow.iterator()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.markCounterLocalToBeCleared()",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(Cell)",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(ColumnData)",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(ComplexColumnData)",3,2,3
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(DeletionTime)",1,1,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(LivenessInfo)",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(Object[],LivenessInfo,DeletionTime)",3,2,3
"org.apache.cassandra.db.rows.BTreeRow.noCellLiveRow(Clustering,LivenessInfo)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.primaryKeyLivenessInfo()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.purge(DeletionPurger,int)",2,1,4
"org.apache.cassandra.db.rows.BTreeRow.searchIterator()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.setValue(ColumnDefinition,CellPath,ByteBuffer)",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.singleCellRow(Clustering,Cell)",2,2,2
"org.apache.cassandra.db.rows.BTreeRow.size()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.sortedBuilder()",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.transformAndFilter(LivenessInfo,Deletion,Function<ColumnData, ColumnData>)",3,3,7
"org.apache.cassandra.db.rows.BTreeRow.unsharedHeapSizeExcludingData()",1,2,2
"org.apache.cassandra.db.rows.BTreeRow.unsortedBuilder(int)",1,1,1
"org.apache.cassandra.db.rows.BTreeRow.updateAllTimestamp(long)",1,5,5
"org.apache.cassandra.db.rows.BufferCell.BufferCell(ColumnDefinition,long,int,int,ByteBuffer,CellPath)",1,1,1
"org.apache.cassandra.db.rows.BufferCell.Serializer.deserialize(DataInputPlus,LivenessInfo,ColumnDefinition,SerializationHeader,SerializationHelper)",1,13,14
"org.apache.cassandra.db.rows.BufferCell.Serializer.serialize(Cell,DataOutputPlus,LivenessInfo,SerializationHeader)",1,10,18
"org.apache.cassandra.db.rows.BufferCell.Serializer.serializedSize(Cell,LivenessInfo,SerializationHeader)",1,10,13
"org.apache.cassandra.db.rows.BufferCell.Serializer.skip(DataInputPlus,ColumnDefinition,SerializationHeader)",1,6,9
"org.apache.cassandra.db.rows.BufferCell.copy(AbstractAllocator)",2,2,3
"org.apache.cassandra.db.rows.BufferCell.dataSize()",1,2,2
"org.apache.cassandra.db.rows.BufferCell.expiring(ColumnDefinition,long,int,int,ByteBuffer)",1,1,1
"org.apache.cassandra.db.rows.BufferCell.expiring(ColumnDefinition,long,int,int,ByteBuffer,CellPath)",1,1,1
"org.apache.cassandra.db.rows.BufferCell.isCounterCell()",1,2,2
"org.apache.cassandra.db.rows.BufferCell.isExpiring()",1,1,1
"org.apache.cassandra.db.rows.BufferCell.isLive(int)",1,1,3
"org.apache.cassandra.db.rows.BufferCell.isTombstone()",1,1,2
"org.apache.cassandra.db.rows.BufferCell.live(CFMetaData,ColumnDefinition,long,ByteBuffer)",1,1,1
"org.apache.cassandra.db.rows.BufferCell.live(CFMetaData,ColumnDefinition,long,ByteBuffer,CellPath)",2,2,2
"org.apache.cassandra.db.rows.BufferCell.localDeletionTime()",1,1,1
"org.apache.cassandra.db.rows.BufferCell.markCounterLocalToBeCleared()",2,1,3
"org.apache.cassandra.db.rows.BufferCell.path()",1,1,1
"org.apache.cassandra.db.rows.BufferCell.purge(DeletionPurger,int)",4,3,4
"org.apache.cassandra.db.rows.BufferCell.timestamp()",1,1,1
"org.apache.cassandra.db.rows.BufferCell.tombstone(ColumnDefinition,long,int)",1,1,1
"org.apache.cassandra.db.rows.BufferCell.tombstone(ColumnDefinition,long,int,CellPath)",1,1,1
"org.apache.cassandra.db.rows.BufferCell.ttl()",1,1,1
"org.apache.cassandra.db.rows.BufferCell.unsharedHeapSizeExcludingData()",1,2,2
"org.apache.cassandra.db.rows.BufferCell.updateAllTimestamp(long)",1,1,2
"org.apache.cassandra.db.rows.BufferCell.value()",1,1,1
"org.apache.cassandra.db.rows.BufferCell.withUpdatedValue(ByteBuffer)",1,1,1
"org.apache.cassandra.db.rows.Cell.Cell(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.CollectionCellPath(ByteBuffer)",1,1,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.copy(AbstractAllocator)",1,1,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.get(int)",1,1,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.size()",1,1,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.unsharedHeapSizeExcludingData()",1,1,1
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath.copy(AbstractAllocator)",1,1,1
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath.get(int)",1,1,1
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath.size()",1,1,1
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath.unsharedHeapSizeExcludingData()",1,1,1
"org.apache.cassandra.db.rows.CellPath.create(ByteBuffer)",1,1,1
"org.apache.cassandra.db.rows.CellPath.dataSize()",1,2,2
"org.apache.cassandra.db.rows.CellPath.digest(MessageDigest)",1,2,2
"org.apache.cassandra.db.rows.CellPath.equals(Object)",5,2,5
"org.apache.cassandra.db.rows.CellPath.hashCode()",1,2,2
"org.apache.cassandra.db.rows.Cells.Cells()",1,1,1
"org.apache.cassandra.db.rows.Cells.collectStats(Cell,PartitionStatisticsCollector)",1,2,2
"org.apache.cassandra.db.rows.Cells.getNext(Iterator<Cell>)",1,3,3
"org.apache.cassandra.db.rows.Cells.reconcile(Cell,Cell,DeletionTime,Builder,int)",2,6,9
"org.apache.cassandra.db.rows.Cells.reconcile(Cell,Cell,int)",9,8,14
"org.apache.cassandra.db.rows.Cells.reconcileComplex(ColumnDefinition,Iterator<Cell>,Iterator<Cell>,DeletionTime,Builder,int)",1,6,7
"org.apache.cassandra.db.rows.ColumnData.ColumnData(ColumnDefinition)",1,1,1
"org.apache.cassandra.db.rows.ColumnData.column()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.Builder.addCell(Cell)",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.Builder.addComplexDeletion(DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.Builder.build()",2,2,3
"org.apache.cassandra.db.rows.ComplexColumnData.Builder.newColumn(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.rows.ComplexColumnData.ComplexColumnData(ColumnDefinition,Object[],DeletionTime)",1,2,2
"org.apache.cassandra.db.rows.ComplexColumnData.builder()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.cellsCount()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.complexDeletion()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.dataSize()",1,2,2
"org.apache.cassandra.db.rows.ComplexColumnData.digest(MessageDigest)",1,3,3
"org.apache.cassandra.db.rows.ComplexColumnData.equals(Object)",3,3,5
"org.apache.cassandra.db.rows.ComplexColumnData.filter(ColumnFilter,DeletionTime,DroppedColumn)",2,7,10
"org.apache.cassandra.db.rows.ComplexColumnData.getCell(CellPath)",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.getCellByIndex(int)",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.hasCells()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.hashCode()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.iterator()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.markCounterLocalToBeCleared()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.purge(DeletionPurger,int)",1,2,3
"org.apache.cassandra.db.rows.ComplexColumnData.reverseIterator()",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.setValue(CellPath,ByteBuffer)",1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.transformAndFilter(DeletionTime,Function<? super Cell, ? extends Cell>)",3,2,5
"org.apache.cassandra.db.rows.ComplexColumnData.unsharedHeapSizeExcludingData()",1,2,2
"org.apache.cassandra.db.rows.ComplexColumnData.updateAllTimestamp(long)",1,2,2
"org.apache.cassandra.db.rows.ComplexColumnData.validate()",1,2,2
"org.apache.cassandra.db.rows.CounterCells.CounterCells()",1,1,1
"org.apache.cassandra.db.rows.CounterCells.hasLegacyShards(Cell)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.collect(Row,Iterator<Row>,DeletionInfo)",1,3,3
"org.apache.cassandra.db.rows.EncodingStats.Collector.get()",1,1,4
"org.apache.cassandra.db.rows.EncodingStats.Collector.update(Cell)",1,3,3
"org.apache.cassandra.db.rows.EncodingStats.Collector.update(DeletionTime)",2,1,2
"org.apache.cassandra.db.rows.EncodingStats.Collector.update(LivenessInfo)",2,2,3
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateColumnSetPerRow(long)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateHasLegacyCounterShards(boolean)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateLocalDeletionTime(int)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateTTL(int)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateTimestamp(long)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.EncodingStats(long,int,int)",1,1,3
"org.apache.cassandra.db.rows.EncodingStats.Serializer.deserialize(DataInputPlus)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.Serializer.serialize(EncodingStats,DataOutputPlus)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.Serializer.serializedSize(EncodingStats)",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.equals(Object)",3,2,6
"org.apache.cassandra.db.rows.EncodingStats.hashCode()",1,1,1
"org.apache.cassandra.db.rows.EncodingStats.mergeWith(EncodingStats)",1,7,7
"org.apache.cassandra.db.rows.EncodingStats.toString()",1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.LazilyInitializedUnfilteredRowIterator(DecoratedKey)",1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.close()",1,2,2
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.columns()",1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext()",1,2,2
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.isReverseOrder()",1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.maybeInit()",1,2,2
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.metadata()",1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.partitionKey()",1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.staticRow()",1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.stats()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.RangeTombstoneBoundMarker(Bound,DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeBound(boolean)",1,2,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeDeletionTime(boolean)",2,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeIsInclusive(boolean)",2,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.copy(AbstractAllocator)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.deletionTime()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.digest(MessageDigest)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.equals(Object)",2,2,3
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.exclusiveClose(boolean,ByteBuffer[],DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.exclusiveOpen(boolean,ByteBuffer[],DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.hashCode()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.inclusiveClose(boolean,ByteBuffer[],DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.inclusiveOpen(boolean,ByteBuffer[],DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.isBoundary()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openBound(boolean)",1,2,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openDeletionTime(boolean)",2,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openIsInclusive(boolean)",2,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.toString(CFMetaData)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.RangeTombstoneBoundaryMarker(Bound,DeletionTime,DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeBound(boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeDeletionTime(boolean)",1,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeIsInclusive(boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.copy(AbstractAllocator)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.createCorrespondingCloseMarker(boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.createCorrespondingOpenMarker(boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.digest(MessageDigest)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.endDeletionTime()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.equals(Object)",2,3,4
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.exclusiveCloseInclusiveOpen(boolean,ByteBuffer[],DeletionTime,DeletionTime)",1,1,3
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.hashCode()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.inclusiveCloseExclusiveOpen(boolean,ByteBuffer[],DeletionTime,DeletionTime)",1,1,3
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.isClose(boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.isOpen(boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.makeBoundary(boolean,Bound,Bound,DeletionTime,DeletionTime)",1,5,5
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openBound(boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openDeletionTime(boolean)",1,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openIsInclusive(boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.startDeletionTime()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.toString(CFMetaData)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.Merger(int,DeletionTime,boolean)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.activeDeletion()",1,1,2
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.add(int,RangeTombstoneMarker)",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.clear()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.currentOpenDeletionTimeInMerged()",2,1,3
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.merge()",2,6,8
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.mergedMarkers()",1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.updateOpenMarkers()",3,6,8
"org.apache.cassandra.db.rows.Row.Deletion.Deletion(DeletionTime,boolean)",1,2,2
"org.apache.cassandra.db.rows.Row.Deletion.dataSize()",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.deletes(LivenessInfo)",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.digest(MessageDigest)",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.equals(Object)",2,2,3
"org.apache.cassandra.db.rows.Row.Deletion.hashCode()",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.isLive()",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.isShadowable()",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.isShadowedBy(LivenessInfo)",1,2,2
"org.apache.cassandra.db.rows.Row.Deletion.regular(DeletionTime)",1,1,2
"org.apache.cassandra.db.rows.Row.Deletion.shadowable(DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.supersedes(Deletion)",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.supersedes(DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.time()",1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.toString()",1,1,2
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.CellReducer(int)",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.getReduced()",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.onKeyChange()",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.reduce(int,Cell)",1,3,3
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.setActiveDeletion(DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.ColumnDataReducer(int,int,boolean)",1,2,3
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.getReduced()",2,10,10
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.onKeyChange()",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.reduce(int,ColumnData)",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.setActiveDeletion(DeletionTime)",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.Merger(int,int,boolean)",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.add(int,Row)",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.clear()",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.merge(DeletionTime)",4,13,17
"org.apache.cassandra.db.rows.Row.Merger.mergedClustering()",1,1,1
"org.apache.cassandra.db.rows.Row.Merger.mergedRows()",1,1,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.RowAndDeletionMergeIterator(CFMetaData,DecoratedKey,DeletionTime,ColumnFilter,Row,boolean,EncodingStats,Iterator<Row>,Iterator<RangeTombstone>,boolean)",1,2,2
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.closeBound(RangeTombstone)",1,1,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.closeOpenedRange()",1,3,3
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.computeNext()",9,9,11
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.consumeNextRange()",1,1,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.consumeNextRow()",2,3,3
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.consumeOpenRange()",1,1,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.openBound(RangeTombstone)",1,1,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.openRange()",1,1,2
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.updateNextRange()",1,4,5
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.updateNextRow()",1,3,3
"org.apache.cassandra.db.rows.RowIterator.isEmpty()",1,2,2
"org.apache.cassandra.db.rows.RowIterators.RowIterators()",1,1,1
"org.apache.cassandra.db.rows.RowIterators.digest(RowIterator,MessageDigest)",1,2,2
"org.apache.cassandra.db.rows.RowIterators.loggingIterator(RowIterator,String)",1,2,2
"org.apache.cassandra.db.rows.Rows.Rows()",1,1,1
"org.apache.cassandra.db.rows.Rows.collectStats(Row,PartitionStatisticsCollector)",1,5,5
"org.apache.cassandra.db.rows.Rows.copy(Row,Builder)",1,4,4
"org.apache.cassandra.db.rows.Rows.diff(RowDiffListener,Row,Row...)",1,30,35
"org.apache.cassandra.db.rows.Rows.merge(Row,Row,Builder,int)",1,18,24
"org.apache.cassandra.db.rows.Rows.merge(Row,Row,int)",1,1,1
"org.apache.cassandra.db.rows.SerializationHelper.SerializationHelper(CFMetaData,int,Flag)",1,1,1
"org.apache.cassandra.db.rows.SerializationHelper.SerializationHelper(CFMetaData,int,Flag,ColumnFilter)",1,1,1
"org.apache.cassandra.db.rows.SerializationHelper.canSkipValue(CellPath)",1,3,3
"org.apache.cassandra.db.rows.SerializationHelper.canSkipValue(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.rows.SerializationHelper.endOfComplexColumn()",1,1,1
"org.apache.cassandra.db.rows.SerializationHelper.fetchedRegularColumns(SerializationHeader)",1,2,2
"org.apache.cassandra.db.rows.SerializationHelper.fetchedStaticColumns(SerializationHeader)",1,2,2
"org.apache.cassandra.db.rows.SerializationHelper.includes(CellPath)",1,3,3
"org.apache.cassandra.db.rows.SerializationHelper.includes(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.rows.SerializationHelper.isDropped(Cell,boolean)",1,3,3
"org.apache.cassandra.db.rows.SerializationHelper.isDroppedComplexDeletion(DeletionTime)",1,2,2
"org.apache.cassandra.db.rows.SerializationHelper.maybeClearCounterValue(ByteBuffer)",1,4,4
"org.apache.cassandra.db.rows.SerializationHelper.startOfComplexColumn(ColumnDefinition)",1,2,2
"org.apache.cassandra.db.rows.Unfiltered.isRangeTombstoneMarker()",1,1,1
"org.apache.cassandra.db.rows.Unfiltered.isRow()",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterator.isEmpty()",1,3,3
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.Header.Header(SerializationHeader,DecoratedKey,boolean,boolean,DeletionTime,Row,int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.Header.toString()",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserialize(DataInputPlus,int,CFMetaData,ColumnFilter,Flag)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserialize(DataInputPlus,int,CFMetaData,Flag,Header)",2,3,4
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserializeHeader(CFMetaData,ColumnFilter,DataInputPlus,int,Flag)",2,4,5
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIterator,ColumnFilter,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIterator,ColumnFilter,DataOutputPlus,int,int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIterator,SerializationHeader,ColumnFilter,DataOutputPlus,int,int)",2,6,10
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serializedSize(UnfilteredRowIterator,ColumnFilter,int,int)",2,5,6
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowIterators()",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.MergeReducer(int,boolean,int,MergeListener)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.getReduced()",2,5,6
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.onKeyChange()",1,2,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.reduce(int,Unfiltered)",1,2,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.trivialReduceIsTrivial()",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.UnfilteredRowMergeIterator(CFMetaData,List<UnfilteredRowIterator>,PartitionColumns,DeletionTime,int,boolean,MergeListener)",1,2,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.checkForInvalidInput(List<UnfilteredRowIterator>)",2,2,3
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.close()",1,2,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.collectColumns(List<UnfilteredRowIterator>)",1,2,4
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.collectPartitionLevelDeletion(List<UnfilteredRowIterator>,MergeListener)",1,5,7
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.computeNext()",3,2,3
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.create(List<UnfilteredRowIterator>,int,MergeListener)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.mergeStaticRows(List<UnfilteredRowIterator>,Columns,int,MergeListener,DeletionTime)",3,3,6
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.mergeStats(List<UnfilteredRowIterator>)",1,2,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.cloningIterator(UnfilteredRowIterator,AbstractAllocator)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.concat(UnfilteredRowIterator,UnfilteredRowIterator)",2,6,7
"org.apache.cassandra.db.rows.UnfilteredRowIterators.digest(UnfilteredRowIterator,MessageDigest,int)",2,3,3
"org.apache.cassandra.db.rows.UnfilteredRowIterators.filter(UnfilteredRowIterator,int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.loggingIterator(UnfilteredRowIterator,String,boolean)",1,2,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.merge(List<UnfilteredRowIterator>,int)",2,2,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.merge(List<UnfilteredRowIterator>,int,MergeListener)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.noRowsIterator(CFMetaData,DecoratedKey,Row,DeletionTime,boolean)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.withValidation(UnfilteredRowIterator,String)",1,1,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.deserialize(DataInputPlus,SerializationHeader,SerializationHelper,Builder)",3,2,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeMarkerBody(DataInputPlus,SerializationHeader,Bound)",2,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeRowBody(DataInputPlus,SerializationHeader,SerializationHelper,int,int,Builder)",1,9,10
"org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeStaticRow(DataInputPlus,SerializationHeader,SerializationHelper)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.hasExtendedFlags(Row)",1,2,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.isEndOfPartition(int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.isExtended(int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.isStatic(int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.kind(int)",1,1,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.readComplexColumn(ColumnDefinition,DataInputPlus,SerializationHeader,SerializationHelper,boolean,Builder,LivenessInfo)",1,7,7
"org.apache.cassandra.db.rows.UnfilteredSerializer.readExtendedFlags(DataInputPlus,int)",1,2,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.readSimpleColumn(ColumnDefinition,DataInputPlus,SerializationHeader,SerializationHelper,Builder,LivenessInfo)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(RangeTombstoneMarker,SerializationHeader,DataOutputPlus,long,int)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(Row,SerializationHeader,DataOutputPlus,long,int)",1,11,18
"org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(Unfiltered,SerializationHeader,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(Unfiltered,SerializationHeader,DataOutputPlus,long,int)",1,2,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializeStaticRow(Row,SerializationHeader,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedMarkerBodySize(RangeTombstoneMarker,SerializationHeader,long,int)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedRowBodySize(Row,SerializationHeader,long,int)",1,8,8
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(RangeTombstoneMarker,SerializationHeader,long,int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(Row,SerializationHeader,long,int)",1,2,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(Unfiltered,SerializationHeader,int)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(Unfiltered,SerializationHeader,long,int)",1,2,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSizeEndOfPartition()",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.sizeOfComplexColumn(ComplexColumnData,boolean,LivenessInfo,SerializationHeader)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.skipComplexColumn(DataInputPlus,ColumnDefinition,SerializationHeader,boolean)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.skipMarkerBody(DataInputPlus)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.skipRowBody(DataInputPlus)",1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.skipStaticRow(DataInputPlus,SerializationHeader,SerializationHelper)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.writeComplexColumn(ComplexColumnData,boolean,LivenessInfo,SerializationHeader,DataOutputPlus)",1,3,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.writeEndOfPartition(DataOutputPlus)",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.WrappingUnfilteredRowIterator(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.close()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.columns()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.hasNext()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.isReverseOrder()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.metadata()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.next()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.partitionKey()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.staticRow()",1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.stats()",1,1,1
"org.apache.cassandra.db.transform.BaseIterator.BaseIterator(BaseIterator<? extends V, ? extends I, ?>)",1,1,1
"org.apache.cassandra.db.transform.BaseIterator.BaseIterator(I)",1,1,1
"org.apache.cassandra.db.transform.BaseIterator.apply(V,int)",1,2,2
"org.apache.cassandra.db.transform.BaseIterator.close()",1,4,4
"org.apache.cassandra.db.transform.BaseIterator.hasMoreContents()",1,2,2
"org.apache.cassandra.db.transform.BaseIterator.next()",2,2,3
"org.apache.cassandra.db.transform.BaseIterator.tryGetMoreContents()",4,4,6
"org.apache.cassandra.db.transform.BasePartitions.BasePartitions(BasePartitions<?, ? extends I>)",1,1,1
"org.apache.cassandra.db.transform.BasePartitions.BasePartitions(I)",1,1,1
"org.apache.cassandra.db.transform.BasePartitions.add(Transformation)",1,1,1
"org.apache.cassandra.db.transform.BasePartitions.applyOne(BaseRowIterator<?>,Transformation)",1,2,2
"org.apache.cassandra.db.transform.BasePartitions.hasNext()",5,8,10
"org.apache.cassandra.db.transform.BasePartitions.runOnClose(int)",1,3,3
"org.apache.cassandra.db.transform.BaseRows.BaseRows(BaseRows<?, ? extends I>)",1,1,1
"org.apache.cassandra.db.transform.BaseRows.BaseRows(I)",1,1,1
"org.apache.cassandra.db.transform.BaseRows.add(Transformation)",1,1,1
"org.apache.cassandra.db.transform.BaseRows.applyOne(Unfiltered,Transformation)",1,3,3
"org.apache.cassandra.db.transform.BaseRows.columns()",1,1,1
"org.apache.cassandra.db.transform.BaseRows.hasNext()",5,8,12
"org.apache.cassandra.db.transform.BaseRows.isReverseOrder()",1,1,1
"org.apache.cassandra.db.transform.BaseRows.metadata()",1,1,1
"org.apache.cassandra.db.transform.BaseRows.partitionKey()",1,1,1
"org.apache.cassandra.db.transform.BaseRows.runOnClose(int)",1,3,3
"org.apache.cassandra.db.transform.BaseRows.staticRow()",1,1,1
"org.apache.cassandra.db.transform.Filter.Filter(boolean,int)",1,1,1
"org.apache.cassandra.db.transform.Filter.applyToMarker(RangeTombstoneMarker)",1,1,1
"org.apache.cassandra.db.transform.Filter.applyToPartition(BaseRowIterator)",2,2,4
"org.apache.cassandra.db.transform.Filter.applyToRow(Row)",1,1,1
"org.apache.cassandra.db.transform.Filter.applyToStatic(Row)",2,1,3
"org.apache.cassandra.db.transform.Filter.closeIfEmpty(BaseRowIterator<?>)",2,2,2
"org.apache.cassandra.db.transform.FilteredPartitions.FilteredPartitions(Filter,UnfilteredPartitions)",1,1,1
"org.apache.cassandra.db.transform.FilteredPartitions.FilteredPartitions(PartitionIterator)",1,1,1
"org.apache.cassandra.db.transform.FilteredPartitions.FilteredPartitions(UnfilteredPartitionIterator,Filter)",1,1,1
"org.apache.cassandra.db.transform.FilteredPartitions.filter(UnfilteredPartitionIterator,int)",2,1,2
"org.apache.cassandra.db.transform.FilteredRows.FilteredRows(Filter,UnfilteredRows)",1,1,1
"org.apache.cassandra.db.transform.FilteredRows.FilteredRows(RowIterator)",1,1,1
"org.apache.cassandra.db.transform.FilteredRows.FilteredRows(UnfilteredRowIterator,Filter)",1,1,1
"org.apache.cassandra.db.transform.FilteredRows.filter(UnfilteredRowIterator,int)",1,1,1
"org.apache.cassandra.db.transform.FilteredRows.isEmpty()",1,2,2
"org.apache.cassandra.db.transform.MorePartitions.extend(PartitionIterator,MorePartitions<? super PartitionIterator>)",1,1,1
"org.apache.cassandra.db.transform.MorePartitions.extend(UnfilteredPartitionIterator,MorePartitions<? super UnfilteredPartitionIterator>)",1,1,1
"org.apache.cassandra.db.transform.MoreRows.extend(RowIterator,MoreRows<? super RowIterator>)",1,1,1
"org.apache.cassandra.db.transform.MoreRows.extend(UnfilteredRowIterator,MoreRows<? super UnfilteredRowIterator>)",1,1,1
"org.apache.cassandra.db.transform.Stack.MoreContentsHolder.MoreContentsHolder(MoreContents,int)",1,1,1
"org.apache.cassandra.db.transform.Stack.Stack()",1,1,1
"org.apache.cassandra.db.transform.Stack.Stack(Stack)",1,1,1
"org.apache.cassandra.db.transform.Stack.add(MoreContents)",1,1,1
"org.apache.cassandra.db.transform.Stack.add(Transformation)",1,2,2
"org.apache.cassandra.db.transform.Stack.refill(Stack,MoreContentsHolder,int)",1,1,1
"org.apache.cassandra.db.transform.Stack.resize(E[])",1,1,2
"org.apache.cassandra.db.transform.Stack.splice(E[],int,E[],int,int)",1,4,4
"org.apache.cassandra.db.transform.StoppingTransformation.attachTo(BasePartitions)",1,1,1
"org.apache.cassandra.db.transform.StoppingTransformation.attachTo(BaseRows)",1,1,1
"org.apache.cassandra.db.transform.StoppingTransformation.onClose()",1,1,1
"org.apache.cassandra.db.transform.StoppingTransformation.onPartitionClose()",1,1,1
"org.apache.cassandra.db.transform.StoppingTransformation.stop()",1,1,2
"org.apache.cassandra.db.transform.StoppingTransformation.stopInPartition()",1,1,2
"org.apache.cassandra.db.transform.Transformation.add(E,MoreContents)",1,1,1
"org.apache.cassandra.db.transform.Transformation.add(E,Transformation)",1,1,1
"org.apache.cassandra.db.transform.Transformation.apply(PartitionIterator,Transformation<? super RowIterator>)",1,1,1
"org.apache.cassandra.db.transform.Transformation.apply(RowIterator,Transformation<?>)",1,1,1
"org.apache.cassandra.db.transform.Transformation.apply(UnfilteredPartitionIterator,Transformation<? super UnfilteredRowIterator>)",1,1,1
"org.apache.cassandra.db.transform.Transformation.apply(UnfilteredRowIterator,Transformation<?>)",1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToDeletion(DeletionTime)",1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToMarker(RangeTombstoneMarker)",1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToPartition(I)",1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToRow(Row)",1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToStatic(Row)",1,1,1
"org.apache.cassandra.db.transform.Transformation.attachTo(BasePartitions)",1,1,1
"org.apache.cassandra.db.transform.Transformation.attachTo(BaseRows)",1,1,1
"org.apache.cassandra.db.transform.Transformation.mutable(PartitionIterator)",1,1,2
"org.apache.cassandra.db.transform.Transformation.mutable(RowIterator)",1,1,2
"org.apache.cassandra.db.transform.Transformation.mutable(UnfilteredPartitionIterator)",1,1,2
"org.apache.cassandra.db.transform.Transformation.mutable(UnfilteredRowIterator)",1,1,2
"org.apache.cassandra.db.transform.Transformation.onClose()",1,1,1
"org.apache.cassandra.db.transform.Transformation.onPartitionClose()",1,1,1
"org.apache.cassandra.db.transform.UnfilteredPartitions.UnfilteredPartitions(UnfilteredPartitionIterator)",1,1,1
"org.apache.cassandra.db.transform.UnfilteredPartitions.isForThrift()",1,1,1
"org.apache.cassandra.db.transform.UnfilteredPartitions.metadata()",1,1,1
"org.apache.cassandra.db.transform.UnfilteredRows.UnfilteredRows(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.db.transform.UnfilteredRows.add(Transformation)",1,1,1
"org.apache.cassandra.db.transform.UnfilteredRows.isEmpty()",1,3,3
"org.apache.cassandra.db.transform.UnfilteredRows.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.db.transform.UnfilteredRows.stats()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.Set(ColumnFamilyStore,Set<ColumnIdentifier>,ByteBuffer)",1,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.addRow(Row,boolean)",1,3,3
"org.apache.cassandra.db.view.TemporalRow.Set.addRow(TemporalRow)",1,3,3
"org.apache.cassandra.db.view.TemporalRow.Set.getClustering(Clustering)",1,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.hasTombstonedExisting()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.iterator()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.setTombstonedExisting()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.size()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.withNewViewPrimaryKey(Set<ColumnIdentifier>)",1,2,2
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.TemporalCell(ByteBuffer,long,int,int,boolean)",1,1,1
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.addToRow(TemporalRow,ColumnIdentifier,CellPath)",1,3,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.getEarliestCell()",2,1,4
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.getLatestCell()",2,1,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.getOldCellIfUpdated()",2,1,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.setVersion(TemporalCell)",1,4,6
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.cell(ColumnDefinition,CellPath)",1,1,1
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.equals(Object)",7,3,9
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.hashCode()",1,2,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.isLive(int)",1,1,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.reconcile(TemporalCell)",2,1,2
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.toString()",1,2,2
"org.apache.cassandra.db.view.TemporalRow.TemporalRow(ColumnFamilyStore,Set<ColumnIdentifier>,ByteBuffer,Row,int,boolean)",1,2,2
"org.apache.cassandra.db.view.TemporalRow.addCell(Cell,boolean)",1,1,1
"org.apache.cassandra.db.view.TemporalRow.addColumnValue(ColumnIdentifier,CellPath,long,int,int,ByteBuffer,boolean)",1,4,4
"org.apache.cassandra.db.view.TemporalRow.baseClusteringBuilder()",1,3,3
"org.apache.cassandra.db.view.TemporalRow.baseSlice()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.clusteringValue(ColumnDefinition,Resolver)",5,7,7
"org.apache.cassandra.db.view.TemporalRow.deletionTime(AbstractBTreePartition)",3,5,5
"org.apache.cassandra.db.view.TemporalRow.equals(Object)",5,2,6
"org.apache.cassandra.db.view.TemporalRow.hashCode()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.minValueIfSet(int,int,int)",3,1,3
"org.apache.cassandra.db.view.TemporalRow.minValueIfSet(long,long,long)",3,1,3
"org.apache.cassandra.db.view.TemporalRow.values(ColumnDefinition,Resolver)",2,4,4
"org.apache.cassandra.db.view.TemporalRow.viewClusteringLocalDeletionTime()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.viewClusteringTimestamp()",1,1,1
"org.apache.cassandra.db.view.TemporalRow.viewClusteringTtl()",1,1,1
"org.apache.cassandra.db.view.View.Columns.Columns(List<ColumnDefinition>,List<ColumnDefinition>,List<ColumnDefinition>)",1,1,1
"org.apache.cassandra.db.view.View.View(ViewDefinition,ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.view.View.build()",1,2,2
"org.apache.cassandra.db.view.View.buildSelectStatement(String,Collection<ColumnDefinition>,String)",1,3,3
"org.apache.cassandra.db.view.View.createComplexTombstone(TemporalRow,DecoratedKey,ColumnDefinition,DeletionTime,Resolver,int)",1,1,1
"org.apache.cassandra.db.view.View.createForDeletionInfo(Set,AbstractBTreePartition)",12,23,28
"org.apache.cassandra.db.view.View.createMutations(AbstractBTreePartition,Set,boolean)",2,8,12
"org.apache.cassandra.db.view.View.createRangeTombstoneForRow(TemporalRow)",3,3,6
"org.apache.cassandra.db.view.View.createTombstone(TemporalRow,DecoratedKey,Deletion,Resolver,int)",1,1,1
"org.apache.cassandra.db.view.View.createUpdatesForInserts(TemporalRow)",4,4,6
"org.apache.cassandra.db.view.View.findAll(String,String)",1,1,1
"org.apache.cassandra.db.view.View.findBaseTable(String,String)",1,2,2
"org.apache.cassandra.db.view.View.getDefinition()",1,1,1
"org.apache.cassandra.db.view.View.getReadQuery()",1,2,2
"org.apache.cassandra.db.view.View.getSelectStatement()",1,2,2
"org.apache.cassandra.db.view.View.getTemporalRowSet(AbstractBTreePartition,Set,boolean)",2,4,5
"org.apache.cassandra.db.view.View.readLocalRows(Set)",1,5,5
"org.apache.cassandra.db.view.View.relationsToWhereClause(List<Relation>)",1,4,4
"org.apache.cassandra.db.view.View.resolveAndAddColumns(Iterable<ColumnIdentifier>,List<ColumnDefinition>...)",1,4,4
"org.apache.cassandra.db.view.View.separateRows(AbstractBTreePartition,Set<ColumnIdentifier>)",1,2,2
"org.apache.cassandra.db.view.View.updateAffectsView(AbstractBTreePartition)",10,5,12
"org.apache.cassandra.db.view.View.updateDefinition(ViewDefinition)",1,3,4
"org.apache.cassandra.db.view.View.viewClustering(TemporalRow,Resolver)",1,2,2
"org.apache.cassandra.db.view.View.viewPartitionKey(TemporalRow,Resolver)",3,2,3
"org.apache.cassandra.db.view.ViewBuilder.ViewBuilder(ColumnFamilyStore,View)",1,1,1
"org.apache.cassandra.db.view.ViewBuilder.buildKey(DecoratedKey)",4,3,5
"org.apache.cassandra.db.view.ViewBuilder.getCompactionInfo()",1,3,4
"org.apache.cassandra.db.view.ViewBuilder.run()",3,14,15
"org.apache.cassandra.db.view.ViewBuilder.stop()",1,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.ForStore()",1,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.addView(View)",1,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.allViews()",1,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.allViewsCfs()",1,2,2
"org.apache.cassandra.db.view.ViewManager.ForStore.dumpMemtables()",1,2,2
"org.apache.cassandra.db.view.ViewManager.ForStore.forceBlockingFlush()",1,2,2
"org.apache.cassandra.db.view.ViewManager.ForStore.removeView(String)",1,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.truncateBlocking(long)",1,2,2
"org.apache.cassandra.db.view.ViewManager.ViewManager(Keyspace)",1,1,1
"org.apache.cassandra.db.view.ViewManager.acquireLockFor(ByteBuffer)",2,1,2
"org.apache.cassandra.db.view.ViewManager.addView(ViewDefinition)",1,1,1
"org.apache.cassandra.db.view.ViewManager.allViews()",1,1,1
"org.apache.cassandra.db.view.ViewManager.buildAllViews()",1,2,2
"org.apache.cassandra.db.view.ViewManager.forTable(UUID)",1,2,3
"org.apache.cassandra.db.view.ViewManager.pushViewReplicaUpdates(PartitionUpdate,boolean,AtomicLong)",1,7,7
"org.apache.cassandra.db.view.ViewManager.reload()",1,7,7
"org.apache.cassandra.db.view.ViewManager.removeView(String)",2,1,2
"org.apache.cassandra.db.view.ViewManager.update(String)",1,1,1
"org.apache.cassandra.db.view.ViewManager.updatesAffectView(Collection<? extends IMutation>,boolean)",7,5,9
"org.apache.cassandra.db.view.ViewUtils.ViewUtils()",1,1,1
"org.apache.cassandra.db.view.ViewUtils.getViewNaturalEndpoint(String,Token,Token)",5,8,9
"org.apache.cassandra.dht.AbstractBounds.AbstractBounds(T,T)",1,1,1
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.AbstractBoundsSerializer(IPartitionerDependentSerializer<T>)",1,1,1
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.deserialize(DataInput,IPartitioner,int)",2,2,6
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.kindFlags(AbstractBounds<?>)",1,1,4
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.kindInt(AbstractBounds<?>)",1,2,3
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.serialize(AbstractBounds<T>,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.serializedSize(AbstractBounds<T>,int)",1,2,2
"org.apache.cassandra.dht.AbstractBounds.Boundary.Boundary(T,boolean)",1,1,1
"org.apache.cassandra.dht.AbstractBounds.bounds(Boundary<T>,Boundary<T>)",1,1,1
"org.apache.cassandra.dht.AbstractBounds.bounds(T,boolean,T,boolean)",4,1,5
"org.apache.cassandra.dht.AbstractBounds.format(T,AbstractType<?>)",2,2,2
"org.apache.cassandra.dht.AbstractBounds.getString(AbstractType<?>)",1,1,1
"org.apache.cassandra.dht.AbstractBounds.hashCode()",1,1,1
"org.apache.cassandra.dht.AbstractBounds.intersects(Iterable<Range<T>>)",3,2,3
"org.apache.cassandra.dht.AbstractBounds.isEmpty(Boundary<T>,Boundary<T>)",1,1,4
"org.apache.cassandra.dht.AbstractBounds.leftBoundary()",1,1,1
"org.apache.cassandra.dht.AbstractBounds.maxLeft(Boundary<T>,Boundary<T>)",2,1,4
"org.apache.cassandra.dht.AbstractBounds.maxLeft(Boundary<T>,T,boolean)",1,1,1
"org.apache.cassandra.dht.AbstractBounds.minRight(Boundary<T>,Boundary<T>)",2,1,4
"org.apache.cassandra.dht.AbstractBounds.minRight(Boundary<T>,T,boolean)",1,1,1
"org.apache.cassandra.dht.AbstractBounds.noneStrictlyWrapsAround(Collection<AbstractBounds<T>>)",3,2,3
"org.apache.cassandra.dht.AbstractBounds.rightBoundary()",1,1,1
"org.apache.cassandra.dht.AbstractBounds.strictlyWrapsAround(T,T)",1,2,2
"org.apache.cassandra.dht.BootStrapper.BootStrapper(InetAddress,Collection<Token>,TokenMetadata)",1,2,2
"org.apache.cassandra.dht.BootStrapper.StringSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.dht.BootStrapper.StringSerializer.serialize(String,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.dht.BootStrapper.StringSerializer.serializedSize(String,int)",1,1,1
"org.apache.cassandra.dht.BootStrapper.allocateTokens(TokenMetadata,InetAddress,String,int)",2,1,2
"org.apache.cassandra.dht.BootStrapper.bootstrap(StreamStateStore,boolean)",2,4,7
"org.apache.cassandra.dht.BootStrapper.getBootstrapTokens(TokenMetadata,InetAddress)",4,6,7
"org.apache.cassandra.dht.BootStrapper.getRandomTokens(TokenMetadata,int)",1,3,3
"org.apache.cassandra.dht.BootStrapper.getSpecifiedTokens(TokenMetadata,Collection<String>)",3,2,3
"org.apache.cassandra.dht.Bounds.Bounds(T,T)",1,1,1
"org.apache.cassandra.dht.Bounds.contains(T)",1,4,4
"org.apache.cassandra.dht.Bounds.equals(Object)",2,2,3
"org.apache.cassandra.dht.Bounds.getClosingString()",1,1,1
"org.apache.cassandra.dht.Bounds.getOpeningString()",1,1,1
"org.apache.cassandra.dht.Bounds.inclusiveLeft()",1,1,1
"org.apache.cassandra.dht.Bounds.inclusiveRight()",1,1,1
"org.apache.cassandra.dht.Bounds.intersects(Bounds<T>)",1,3,3
"org.apache.cassandra.dht.Bounds.isEndInclusive()",1,1,1
"org.apache.cassandra.dht.Bounds.isStartInclusive()",1,1,1
"org.apache.cassandra.dht.Bounds.makeRowBounds(Token,Token)",1,1,1
"org.apache.cassandra.dht.Bounds.split(T)",2,1,2
"org.apache.cassandra.dht.Bounds.toString()",1,1,1
"org.apache.cassandra.dht.Bounds.unwrap()",1,1,1
"org.apache.cassandra.dht.Bounds.withNewRight(T)",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.BytesToken(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.BytesToken(byte[])",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.compareTo(Token)",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.equals(Object)",3,1,3
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.getHeapSize()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.getPartitioner()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.getTokenValue()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.hashCode()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.increaseSlightly()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.size(Token)",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.toString()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.bigForBytes(byte[],int)",1,2,2
"org.apache.cassandra.dht.ByteOrderedPartitioner.bytesForBig(BigInteger,int,boolean)",1,2,4
"org.apache.cassandra.dht.ByteOrderedPartitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.describeOwnership(List<Token>)",1,6,7
"org.apache.cassandra.dht.ByteOrderedPartitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.getRandomToken()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.getToken(ByteBuffer)",2,1,2
"org.apache.cassandra.dht.ByteOrderedPartitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.getTokenValidator()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.midpoint(Token,Token)",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.partitionOrdering()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.ComparableObjectToken.ComparableObjectToken(C)",1,1,1
"org.apache.cassandra.dht.ComparableObjectToken.compareTo(Token)",2,1,2
"org.apache.cassandra.dht.ComparableObjectToken.equals(Object)",3,2,4
"org.apache.cassandra.dht.ComparableObjectToken.getTokenValue()",1,1,1
"org.apache.cassandra.dht.ComparableObjectToken.hashCode()",1,1,1
"org.apache.cassandra.dht.ComparableObjectToken.increaseSlightly()",1,1,1
"org.apache.cassandra.dht.ComparableObjectToken.size(Token)",1,1,1
"org.apache.cassandra.dht.ComparableObjectToken.toString()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.ExcludingBounds(T,T)",1,3,3
"org.apache.cassandra.dht.ExcludingBounds.contains(T)",1,2,2
"org.apache.cassandra.dht.ExcludingBounds.equals(Object)",2,2,3
"org.apache.cassandra.dht.ExcludingBounds.getClosingString()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.getOpeningString()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.inclusiveLeft()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.inclusiveRight()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.isEndInclusive()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.isStartInclusive()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.split(T)",2,2,3
"org.apache.cassandra.dht.ExcludingBounds.toString()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.unwrap()",1,1,1
"org.apache.cassandra.dht.ExcludingBounds.withNewRight(T)",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.IncludingExcludingBounds(T,T)",1,3,3
"org.apache.cassandra.dht.IncludingExcludingBounds.contains(T)",1,3,3
"org.apache.cassandra.dht.IncludingExcludingBounds.equals(Object)",2,2,3
"org.apache.cassandra.dht.IncludingExcludingBounds.getClosingString()",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.getOpeningString()",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.inclusiveLeft()",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.inclusiveRight()",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.isEndInclusive()",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.isStartInclusive()",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.split(T)",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.toString()",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.unwrap()",1,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.withNewRight(T)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalPartitioner(AbstractType<?>)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.LocalToken(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.compareTo(Token)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.equals(Object)",3,1,3
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.getHeapSize()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.getPartitioner()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.hashCode()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.toString()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.describeOwnership(List<Token>)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getRandomToken()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getToken(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getTokenValidator()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.midpoint(Token,Token)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.partitionOrdering()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.LongToken(long)",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.compareTo(Token)",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.equals(Object)",3,2,4
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.getHeapSize()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.getPartitioner()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.getTokenValue()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.hashCode()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.increaseSlightly()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.size(Token)",1,1,2
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.toString()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.describeOwnership(List<Token>)",2,3,4
"org.apache.cassandra.dht.Murmur3Partitioner.getHash(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getRandomToken()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getRandomToken(Random)",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getToken(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getToken(ByteBuffer,long[])",2,1,2
"org.apache.cassandra.dht.Murmur3Partitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getTokenValidator()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.midpoint(Token,Token)",1,3,3
"org.apache.cassandra.dht.Murmur3Partitioner.normalize(long)",1,1,2
"org.apache.cassandra.dht.Murmur3Partitioner.partitionOrdering()",1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken.StringToken(String)",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken.getHeapSize()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken.getPartitioner()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.bigForString(String,int)",1,2,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.describeOwnership(List<Token>)",1,6,7
"org.apache.cassandra.dht.OrderPreservingPartitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.getRandomToken()",1,2,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.getToken(ByteBuffer)",1,2,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.getTokenValidator()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.midpoint(Token,Token)",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.partitionOrdering()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.stringForBig(BigInteger,int,boolean)",1,2,4
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken.BigIntegerToken(BigInteger)",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken.BigIntegerToken(String)",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken.getHeapSize()",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken.getPartitioner()",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.describeOwnership(List<Token>)",2,3,4
"org.apache.cassandra.dht.RandomPartitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.getRandomToken()",1,2,2
"org.apache.cassandra.dht.RandomPartitioner.getToken(ByteBuffer)",2,1,2
"org.apache.cassandra.dht.RandomPartitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.getTokenValidator()",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.midpoint(Token,Token)",1,1,3
"org.apache.cassandra.dht.RandomPartitioner.partitionOrdering()",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.Range.Range(T,T)",1,1,1
"org.apache.cassandra.dht.Range.asList()",1,1,1
"org.apache.cassandra.dht.Range.compareTo(Range<T>)",3,1,3
"org.apache.cassandra.dht.Range.contains(Range<T>)",4,5,6
"org.apache.cassandra.dht.Range.contains(T)",1,1,1
"org.apache.cassandra.dht.Range.contains(T,T,T)",3,4,4
"org.apache.cassandra.dht.Range.deoverlap(List<Range<T>>)",5,6,8
"org.apache.cassandra.dht.Range.differenceToFetch(Range<T>)",1,3,3
"org.apache.cassandra.dht.Range.equals(Object)",2,2,3
"org.apache.cassandra.dht.Range.getClosingString()",1,1,1
"org.apache.cassandra.dht.Range.getOpeningString()",1,1,1
"org.apache.cassandra.dht.Range.inclusiveLeft()",1,1,1
"org.apache.cassandra.dht.Range.inclusiveRight()",1,1,1
"org.apache.cassandra.dht.Range.intersectionBothWrapping(Range<T>,Range<T>)",1,2,2
"org.apache.cassandra.dht.Range.intersectionOneWrapping(Range<T>,Range<T>)",1,4,4
"org.apache.cassandra.dht.Range.intersectionWith(Range<T>)",7,9,13
"org.apache.cassandra.dht.Range.intersects(AbstractBounds<T>)",3,3,3
"org.apache.cassandra.dht.Range.intersects(Bounds<T>)",1,3,3
"org.apache.cassandra.dht.Range.intersects(Range<T>)",1,1,1
"org.apache.cassandra.dht.Range.isEndInclusive()",1,1,1
"org.apache.cassandra.dht.Range.isInRanges(T,Iterable<Range<T>>)",3,2,3
"org.apache.cassandra.dht.Range.isStartInclusive()",1,1,1
"org.apache.cassandra.dht.Range.isWrapAround()",1,1,1
"org.apache.cassandra.dht.Range.isWrapAround(T,T)",1,1,1
"org.apache.cassandra.dht.Range.makeRowRange(Range<Token>)",1,1,1
"org.apache.cassandra.dht.Range.makeRowRange(Token,Token)",1,1,1
"org.apache.cassandra.dht.Range.normalize(Collection<Range<T>>)",1,2,2
"org.apache.cassandra.dht.Range.rangeSet(Range<T>)",1,1,1
"org.apache.cassandra.dht.Range.rangeSet(Range<T>...)",1,1,1
"org.apache.cassandra.dht.Range.split(T)",2,3,4
"org.apache.cassandra.dht.Range.subtract(Range<T>)",1,1,1
"org.apache.cassandra.dht.Range.subtractContained(Range<T>)",1,3,3
"org.apache.cassandra.dht.Range.toString()",1,1,1
"org.apache.cassandra.dht.Range.unwrap()",2,3,3
"org.apache.cassandra.dht.Range.withNewRight(T)",1,1,1
"org.apache.cassandra.dht.RangeStreamer.FailureDetectorSourceFilter.FailureDetectorSourceFilter(IFailureDetector)",1,1,1
"org.apache.cassandra.dht.RangeStreamer.FailureDetectorSourceFilter.shouldInclude(InetAddress)",1,1,1
"org.apache.cassandra.dht.RangeStreamer.RangeStreamer(TokenMetadata,Collection<Token>,InetAddress,String,boolean,IEndpointSnitch,StreamStateStore)",1,1,1
"org.apache.cassandra.dht.RangeStreamer.SingleDatacenterFilter.SingleDatacenterFilter(IEndpointSnitch,String)",1,1,1
"org.apache.cassandra.dht.RangeStreamer.SingleDatacenterFilter.shouldInclude(InetAddress)",1,1,1
"org.apache.cassandra.dht.RangeStreamer.addRanges(String,Collection<Range<Token>>)",1,7,7
"org.apache.cassandra.dht.RangeStreamer.addSourceFilter(ISourceFilter)",1,1,1
"org.apache.cassandra.dht.RangeStreamer.fetchAsync()",1,4,4
"org.apache.cassandra.dht.RangeStreamer.getAllRangesWithSourcesFor(String,Collection<Range<Token>>)",5,4,5
"org.apache.cassandra.dht.RangeStreamer.getAllRangesWithStrictSourcesFor(String,Collection<Range<Token>>)",5,8,11
"org.apache.cassandra.dht.RangeStreamer.getRangeFetchMap(Multimap<Range<Token>, InetAddress>,Collection<ISourceFilter>,String)",7,4,7
"org.apache.cassandra.dht.RangeStreamer.getWorkMap(Multimap<Range<Token>, InetAddress>,String,IFailureDetector)",1,1,1
"org.apache.cassandra.dht.RangeStreamer.toFetch()",1,1,1
"org.apache.cassandra.dht.RangeStreamer.useStrictSourcesForRanges(String)",1,3,3
"org.apache.cassandra.dht.StreamStateStore.getAvailableRanges(String,IPartitioner)",1,1,1
"org.apache.cassandra.dht.StreamStateStore.handleStreamEvent(StreamEvent)",1,4,4
"org.apache.cassandra.dht.StreamStateStore.isDataAvailable(String,Token)",3,2,3
"org.apache.cassandra.dht.StreamStateStore.onFailure(Throwable)",1,1,1
"org.apache.cassandra.dht.StreamStateStore.onSuccess(StreamState)",1,1,1
"org.apache.cassandra.dht.Token.KeyBound.KeyBound(Token,boolean)",1,1,1
"org.apache.cassandra.dht.Token.KeyBound.compareTo(PartitionPosition)",4,1,8
"org.apache.cassandra.dht.Token.KeyBound.equals(Object)",3,3,5
"org.apache.cassandra.dht.Token.KeyBound.getPartitioner()",1,1,1
"org.apache.cassandra.dht.Token.KeyBound.getToken()",1,1,1
"org.apache.cassandra.dht.Token.KeyBound.hashCode()",1,1,2
"org.apache.cassandra.dht.Token.KeyBound.isMinimum()",1,1,1
"org.apache.cassandra.dht.Token.KeyBound.kind()",1,1,2
"org.apache.cassandra.dht.Token.KeyBound.minValue()",1,1,1
"org.apache.cassandra.dht.Token.KeyBound.toString()",1,1,2
"org.apache.cassandra.dht.Token.TokenSerializer.deserialize(DataInput,IPartitioner,int)",1,1,1
"org.apache.cassandra.dht.Token.TokenSerializer.serialize(Token,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.dht.Token.TokenSerializer.serializedSize(Token,int)",1,1,1
"org.apache.cassandra.dht.Token.getToken()",1,1,1
"org.apache.cassandra.dht.Token.isMinimum()",1,1,1
"org.apache.cassandra.dht.Token.maxKeyBound()",2,2,2
"org.apache.cassandra.dht.Token.minKeyBound()",1,1,1
"org.apache.cassandra.dht.Token.minValue()",1,1,1
"org.apache.cassandra.dht.Token.upperBound(Class<R>)",2,2,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.BaseTokenInfo.BaseTokenInfo(Token,UnitInfo<Unit>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.BaseTokenInfo.prevInRing()",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.BaseTokenInfo.toString()",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CandidateInfo.CandidateInfo(Token,TokenInfo<Unit>,UnitInfo<Unit>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CandidateInfo.prevInRing()",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CircularList.insertAfter(T,T)",2,1,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CircularList.removeFrom(T)",1,1,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupInfo.GroupInfo(Object)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupInfo.toString()",1,1,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.add(GroupInfo)",2,1,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.clean()",1,2,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.seen(GroupInfo)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.visitedAll()",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.PopulateVisitor.prevSeen(GroupInfo)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.PopulateVisitor.setPrevSeen(GroupInfo,GroupInfo)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.ReplicationAwareTokenAllocator(NavigableMap<Token, Unit>,ReplicationStrategy<Unit>,IPartitioner)",1,2,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.ReplicationVisitor.prevSeen(GroupInfo)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.ReplicationVisitor.setPrevSeen(GroupInfo,GroupInfo)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.TokenInfo.TokenInfo(Token,UnitInfo<Unit>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.TokenInfo.prevInRing()",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitAdjustmentTracker.UnitAdjustmentTracker(UnitInfo<Unit>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitAdjustmentTracker.add(UnitInfo<Unit>,double)",1,1,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitAdjustmentTracker.calculateUnitChange(double,double)",3,2,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitInfo.UnitInfo(Unit,GroupInfo)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitInfo.UnitInfo(Unit,double,Map<Object, GroupInfo>,ReplicationStrategy<Unit>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitInfo.toString()",1,4,5
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.Weighted.Weighted(double,T)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.Weighted.compareTo(Weighted<T>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.Weighted.toString()",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.addUnit(Unit,int)",8,7,10
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.applyOwnershipAdjustment(BaseTokenInfo<Unit, ?>,UnitInfo<Unit>,Token,Token,double,UnitAdjustmentTracker<Unit>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.confirmCandidate(CandidateInfo<Unit>)",3,2,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.createCandidates(TokenInfo<Unit>,UnitInfo<Unit>,double)",1,2,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.createTokenInfos(Map<Unit, UnitInfo<Unit>>,GroupInfo)",1,3,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.createUnitInfos(Map<Object, GroupInfo>)",1,3,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.dumpTokens(String,BaseTokenInfo<?, ?>)",1,2,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.evaluateImprovement(CandidateInfo<Unit>,double,double)",3,2,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.findUpdatedReplicationStart(TokenInfo<Unit>,CandidateInfo<Unit>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.furtherStartToken(Token,Token,Token)",3,1,4
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.generateRandomTokens(Unit,int)",1,3,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.getGroup(Unit,Map<Object, GroupInfo>,ReplicationStrategy<Unit>)",1,2,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.mapEntryFor(Token)",1,2,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.optimalTokenOwnership(int)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.populateCandidate(CandidateInfo<Unit>)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.populateTokenInfo(BaseTokenInfo<Unit, ?>,GroupInfo)",5,4,8
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.populateTokenInfoAndAdjustUnit(TokenInfo<Unit>,GroupInfo)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.removeUnit(Unit)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.sq(double)",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.toString()",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.unitCount()",1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.unitFor(Token)",1,1,1
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.addOwnership(TokenMetadata,AbstractReplicationStrategy,Token,Token,Map<InetAddress, Double>)",1,2,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.adjustForCrossDatacenterClashes(TokenMetadata,StrategyAdapter,Collection<Token>)",4,4,4
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.allocateTokens(TokenMetadata,AbstractReplicationStrategy,InetAddress,int)",1,3,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.create(TokenMetadata,StrategyAdapter)",1,3,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.evaluateReplicatedOwnership(TokenMetadata,AbstractReplicationStrategy)",1,2,2
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.getStrategy(TokenMetadata,AbstractReplicationStrategy,InetAddress)",3,3,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.getStrategy(TokenMetadata,NetworkTopologyStrategy,IEndpointSnitch,InetAddress)",3,3,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.getStrategy(TokenMetadata,SimpleStrategy,InetAddress)",1,1,1
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.replicatedOwnershipStats(TokenMetadata,AbstractReplicationStrategy,InetAddress)",1,3,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.statToString(SummaryStatistics)",1,1,1
"org.apache.cassandra.exceptions.AlreadyExistsException.AlreadyExistsException(String)",1,1,1
"org.apache.cassandra.exceptions.AlreadyExistsException.AlreadyExistsException(String,String)",1,1,1
"org.apache.cassandra.exceptions.AlreadyExistsException.AlreadyExistsException(String,String,String)",1,1,1
"org.apache.cassandra.exceptions.AuthenticationException.AuthenticationException(String)",1,1,1
"org.apache.cassandra.exceptions.CassandraException.CassandraException(ExceptionCode,String)",1,1,1
"org.apache.cassandra.exceptions.CassandraException.CassandraException(ExceptionCode,String,Throwable)",1,1,1
"org.apache.cassandra.exceptions.CassandraException.code()",1,1,1
"org.apache.cassandra.exceptions.ConfigurationException.ConfigurationException(ExceptionCode,String)",1,1,1
"org.apache.cassandra.exceptions.ConfigurationException.ConfigurationException(String)",1,1,1
"org.apache.cassandra.exceptions.ConfigurationException.ConfigurationException(String,Throwable)",1,1,1
"org.apache.cassandra.exceptions.ConfigurationException.ConfigurationException(String,boolean)",1,1,1
"org.apache.cassandra.exceptions.ExceptionCode.ExceptionCode(int)",1,1,1
"org.apache.cassandra.exceptions.ExceptionCode.fromValue(int)",2,2,2
"org.apache.cassandra.exceptions.FunctionExecutionException.FunctionExecutionException(FunctionName,List<String>,String)",1,1,1
"org.apache.cassandra.exceptions.FunctionExecutionException.create(Function,Throwable)",1,1,1
"org.apache.cassandra.exceptions.InvalidRequestException.InvalidRequestException(String)",1,1,1
"org.apache.cassandra.exceptions.IsBootstrappingException.IsBootstrappingException()",1,1,1
"org.apache.cassandra.exceptions.OverloadedException.OverloadedException(String)",1,1,1
"org.apache.cassandra.exceptions.PreparedQueryNotFoundException.PreparedQueryNotFoundException(MD5Digest)",1,1,1
"org.apache.cassandra.exceptions.PreparedQueryNotFoundException.makeMsg(MD5Digest)",1,1,1
"org.apache.cassandra.exceptions.ReadFailureException.ReadFailureException(ConsistencyLevel,int,int,int,boolean)",1,1,1
"org.apache.cassandra.exceptions.ReadTimeoutException.ReadTimeoutException(ConsistencyLevel,int,int,boolean)",1,1,1
"org.apache.cassandra.exceptions.RepairException.RepairException(RepairJobDesc,String)",1,1,1
"org.apache.cassandra.exceptions.RepairException.RepairException(RepairJobDesc,String,Throwable)",1,1,1
"org.apache.cassandra.exceptions.RepairException.getMessage()",1,1,1
"org.apache.cassandra.exceptions.RequestExecutionException.RequestExecutionException(ExceptionCode,String)",1,1,1
"org.apache.cassandra.exceptions.RequestExecutionException.RequestExecutionException(ExceptionCode,String,Throwable)",1,1,1
"org.apache.cassandra.exceptions.RequestFailureException.RequestFailureException(ExceptionCode,ConsistencyLevel,int,int,int)",1,1,1
"org.apache.cassandra.exceptions.RequestTimeoutException.RequestTimeoutException(ExceptionCode,ConsistencyLevel,int,int)",1,1,1
"org.apache.cassandra.exceptions.RequestValidationException.RequestValidationException(ExceptionCode,String)",1,1,1
"org.apache.cassandra.exceptions.RequestValidationException.RequestValidationException(ExceptionCode,String,Throwable)",1,1,1
"org.apache.cassandra.exceptions.StartupException.StartupException(int,String)",1,1,1
"org.apache.cassandra.exceptions.StartupException.StartupException(int,String,Throwable)",1,1,1
"org.apache.cassandra.exceptions.SyntaxException.SyntaxException(String)",1,1,1
"org.apache.cassandra.exceptions.TruncateException.TruncateException(String)",1,1,1
"org.apache.cassandra.exceptions.TruncateException.TruncateException(Throwable)",1,1,1
"org.apache.cassandra.exceptions.UnauthorizedException.UnauthorizedException(String)",1,1,1
"org.apache.cassandra.exceptions.UnavailableException.UnavailableException(ConsistencyLevel,String,int,int)",1,1,1
"org.apache.cassandra.exceptions.UnavailableException.UnavailableException(ConsistencyLevel,int,int)",1,1,1
"org.apache.cassandra.exceptions.UnavailableException.UnavailableException(String,ConsistencyLevel,int,int)",1,1,1
"org.apache.cassandra.exceptions.UnrecognizedEntityException.UnrecognizedEntityException(ColumnIdentifier,Relation)",1,1,1
"org.apache.cassandra.exceptions.WriteFailureException.WriteFailureException(ConsistencyLevel,int,int,int,WriteType)",1,1,1
"org.apache.cassandra.exceptions.WriteTimeoutException.WriteTimeoutException(WriteType,ConsistencyLevel,int,int)",1,1,1
"org.apache.cassandra.gms.ArrayBackedBoundedStats.ArrayBackedBoundedStats(int)",1,1,1
"org.apache.cassandra.gms.ArrayBackedBoundedStats.add(long)",1,1,3
"org.apache.cassandra.gms.ArrayBackedBoundedStats.getArrivalIntervals()",1,1,1
"org.apache.cassandra.gms.ArrayBackedBoundedStats.mean()",1,1,1
"org.apache.cassandra.gms.ArrayBackedBoundedStats.size()",1,1,2
"org.apache.cassandra.gms.ArrivalWindow.ArrivalWindow(int)",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.add(long,InetAddress)",1,3,3
"org.apache.cassandra.gms.ArrivalWindow.getLastReportedPhi()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.getMaxInterval()",2,2,2
"org.apache.cassandra.gms.ArrivalWindow.mean()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.phi(long)",1,2,2
"org.apache.cassandra.gms.ArrivalWindow.toString()",1,1,1
"org.apache.cassandra.gms.EchoMessage.EchoMessage()",1,1,1
"org.apache.cassandra.gms.EchoMessage.EchoMessageSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.gms.EchoMessage.EchoMessageSerializer.serialize(EchoMessage,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.gms.EchoMessage.EchoMessageSerializer.serializedSize(EchoMessage,int)",1,1,1
"org.apache.cassandra.gms.EndpointState.EndpointState(HeartBeatState)",1,1,1
"org.apache.cassandra.gms.EndpointState.addApplicationState(ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.gms.EndpointState.getApplicationState(ApplicationState)",1,1,1
"org.apache.cassandra.gms.EndpointState.getApplicationStateMap()",1,1,1
"org.apache.cassandra.gms.EndpointState.getHeartBeatState()",1,1,1
"org.apache.cassandra.gms.EndpointState.getStatus()",2,1,2
"org.apache.cassandra.gms.EndpointState.getUpdateTimestamp()",1,1,1
"org.apache.cassandra.gms.EndpointState.isAlive()",1,1,1
"org.apache.cassandra.gms.EndpointState.isRpcReady()",1,2,2
"org.apache.cassandra.gms.EndpointState.markAlive()",1,1,1
"org.apache.cassandra.gms.EndpointState.markDead()",1,1,1
"org.apache.cassandra.gms.EndpointState.setHeartBeatState(HeartBeatState)",1,1,1
"org.apache.cassandra.gms.EndpointState.toString()",1,1,1
"org.apache.cassandra.gms.EndpointState.updateTimestamp()",1,1,1
"org.apache.cassandra.gms.EndpointStateSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.gms.EndpointStateSerializer.serialize(EndpointState,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.gms.EndpointStateSerializer.serializedSize(EndpointState,int)",1,2,2
"org.apache.cassandra.gms.FailureDetector.FailureDetector()",1,1,2
"org.apache.cassandra.gms.FailureDetector.appendEndpointState(StringBuilder,EndpointState)",3,3,4
"org.apache.cassandra.gms.FailureDetector.dumpInterArrivalTimes()",1,1,2
"org.apache.cassandra.gms.FailureDetector.forceConviction(InetAddress)",1,2,2
"org.apache.cassandra.gms.FailureDetector.getAllEndpointStates()",1,2,2
"org.apache.cassandra.gms.FailureDetector.getDownEndpointCount()",1,2,3
"org.apache.cassandra.gms.FailureDetector.getEndpointState(String)",1,1,1
"org.apache.cassandra.gms.FailureDetector.getInitialValue()",2,2,2
"org.apache.cassandra.gms.FailureDetector.getMaxLocalPause()",2,2,2
"org.apache.cassandra.gms.FailureDetector.getPhiConvictThreshold()",1,1,1
"org.apache.cassandra.gms.FailureDetector.getPhiValues()",1,4,4
"org.apache.cassandra.gms.FailureDetector.getSimpleStates()",1,3,3
"org.apache.cassandra.gms.FailureDetector.getUpEndpointCount()",1,2,3
"org.apache.cassandra.gms.FailureDetector.interpret(InetAddress)",4,10,11
"org.apache.cassandra.gms.FailureDetector.isAlive(InetAddress)",2,3,4
"org.apache.cassandra.gms.FailureDetector.registerFailureDetectionEventListener(IFailureDetectionEventListener)",1,1,1
"org.apache.cassandra.gms.FailureDetector.remove(InetAddress)",1,1,1
"org.apache.cassandra.gms.FailureDetector.report(InetAddress)",1,5,5
"org.apache.cassandra.gms.FailureDetector.setPhiConvictThreshold(double)",1,1,1
"org.apache.cassandra.gms.FailureDetector.toString()",1,2,2
"org.apache.cassandra.gms.FailureDetector.unregisterFailureDetectionEventListener(IFailureDetectionEventListener)",1,1,1
"org.apache.cassandra.gms.GossipDigest.GossipDigest(InetAddress,int,int)",1,1,1
"org.apache.cassandra.gms.GossipDigest.compareTo(GossipDigest)",2,1,2
"org.apache.cassandra.gms.GossipDigest.getEndpoint()",1,1,1
"org.apache.cassandra.gms.GossipDigest.getGeneration()",1,1,1
"org.apache.cassandra.gms.GossipDigest.getMaxVersion()",1,1,1
"org.apache.cassandra.gms.GossipDigest.toString()",1,1,1
"org.apache.cassandra.gms.GossipDigestAck.GossipDigestAck(List<GossipDigest>,Map<InetAddress, EndpointState>)",1,1,1
"org.apache.cassandra.gms.GossipDigestAck.getEndpointStateMap()",1,1,1
"org.apache.cassandra.gms.GossipDigestAck.getGossipDigestList()",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2.GossipDigestAck2(Map<InetAddress, EndpointState>)",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2.getEndpointStateMap()",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2Serializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestAck2Serializer.serialize(GossipDigestAck2,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestAck2Serializer.serializedSize(GossipDigestAck2,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestAck2VerbHandler.doVerb(MessageIn<GossipDigestAck2>,int)",2,4,4
"org.apache.cassandra.gms.GossipDigestAckSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestAckSerializer.serialize(GossipDigestAck,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestAckSerializer.serializedSize(GossipDigestAck,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestAckVerbHandler.doVerb(MessageIn<GossipDigestAck>,int)",3,11,11
"org.apache.cassandra.gms.GossipDigestSerializationHelper.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestSerializationHelper.serialize(List<GossipDigest>,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestSerializationHelper.serializedSize(List<GossipDigest>,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSerializer.serialize(GossipDigest,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSerializer.serializedSize(GossipDigest,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSyn.GossipDigestSyn(String,String,List<GossipDigest>)",1,1,1
"org.apache.cassandra.gms.GossipDigestSyn.getGossipDigests()",1,1,1
"org.apache.cassandra.gms.GossipDigestSynSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSynSerializer.serialize(GossipDigestSyn,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSynSerializer.serializedSize(GossipDigestSyn,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSynVerbHandler.doSort(List<GossipDigest>)",1,5,5
"org.apache.cassandra.gms.GossipDigestSynVerbHandler.doVerb(MessageIn<GossipDigestSyn>,int)",4,10,10
"org.apache.cassandra.gms.GossipShutdownVerbHandler.doVerb(MessageIn,int)",2,2,2
"org.apache.cassandra.gms.Gossiper.GossipTask.run()",1,6,6
"org.apache.cassandra.gms.Gossiper.Gossiper()",1,1,2
"org.apache.cassandra.gms.Gossiper.addExpireTimeForEndpoint(InetAddress,long)",1,2,2
"org.apache.cassandra.gms.Gossiper.addLocalApplicationState(ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.gms.Gossiper.addLocalApplicationStateInternal(ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.gms.Gossiper.addLocalApplicationStates(List<Pair<ApplicationState, VersionedValue>>)",1,2,2
"org.apache.cassandra.gms.Gossiper.addSavedEndpoint(InetAddress)",2,4,4
"org.apache.cassandra.gms.Gossiper.advertiseRemoving(InetAddress,UUID,UUID)",2,1,2
"org.apache.cassandra.gms.Gossiper.advertiseTokenRemoved(InetAddress,UUID)",1,1,1
"org.apache.cassandra.gms.Gossiper.applyNewStates(InetAddress,EndpointState,EndpointState)",1,4,4
"org.apache.cassandra.gms.Gossiper.applyStateLocally(Map<InetAddress, EndpointState>)",4,16,18
"org.apache.cassandra.gms.Gossiper.assassinateEndpoint(String)",5,5,6
"org.apache.cassandra.gms.Gossiper.buildSeedsList()",3,2,3
"org.apache.cassandra.gms.Gossiper.compareEndpointStartup(InetAddress,InetAddress)",1,1,2
"org.apache.cassandra.gms.Gossiper.computeExpireTime()",1,1,1
"org.apache.cassandra.gms.Gossiper.convict(InetAddress,double)",3,2,4
"org.apache.cassandra.gms.Gossiper.doBeforeChangeNotifications(InetAddress,EndpointState,ApplicationState,VersionedValue)",1,2,2
"org.apache.cassandra.gms.Gossiper.doGossipToLiveMember(MessageOut<GossipDigestSyn>)",2,1,2
"org.apache.cassandra.gms.Gossiper.doOnChangeNotifications(InetAddress,ApplicationState,VersionedValue)",1,2,2
"org.apache.cassandra.gms.Gossiper.doShadowRound()",4,3,6
"org.apache.cassandra.gms.Gossiper.doStatusCheck()",5,17,19
"org.apache.cassandra.gms.Gossiper.evictFromMembership(InetAddress)",1,2,2
"org.apache.cassandra.gms.Gossiper.examineGossiper(List<GossipDigest>,List<GossipDigest>,Map<InetAddress, EndpointState>)",4,10,12
"org.apache.cassandra.gms.Gossiper.finishShadowRound()",1,1,2
"org.apache.cassandra.gms.Gossiper.forceNewerGeneration()",1,1,1
"org.apache.cassandra.gms.Gossiper.getCurrentGenerationNumber(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.getCurrentGenerationNumber(String)",1,1,1
"org.apache.cassandra.gms.Gossiper.getEndpointDowntime(InetAddress)",2,2,2
"org.apache.cassandra.gms.Gossiper.getEndpointDowntime(String)",1,1,1
"org.apache.cassandra.gms.Gossiper.getEndpointStateForEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.getEndpointStates()",1,1,1
"org.apache.cassandra.gms.Gossiper.getExpireTimeForEndpoint(InetAddress)",1,2,2
"org.apache.cassandra.gms.Gossiper.getGossipStatus(EndpointState)",2,2,3
"org.apache.cassandra.gms.Gossiper.getHostId(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.getLiveMembers()",1,2,2
"org.apache.cassandra.gms.Gossiper.getLiveTokenOwners()",1,5,5
"org.apache.cassandra.gms.Gossiper.getMaxEndpointStateVersion(EndpointState)",1,2,2
"org.apache.cassandra.gms.Gossiper.getStateForVersionBiggerThan(InetAddress,int)",1,8,8
"org.apache.cassandra.gms.Gossiper.getUnreachableMembers()",1,1,1
"org.apache.cassandra.gms.Gossiper.getUnreachableTokenOwners()",1,3,3
"org.apache.cassandra.gms.Gossiper.handleMajorStateChange(InetAddress,EndpointState)",1,9,9
"org.apache.cassandra.gms.Gossiper.initializeNodeUnsafe(InetAddress,UUID,int)",1,1,2
"org.apache.cassandra.gms.Gossiper.injectApplicationState(InetAddress,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.gms.Gossiper.isAlive(InetAddress)",2,2,3
"org.apache.cassandra.gms.Gossiper.isDeadState(EndpointState)",2,1,2
"org.apache.cassandra.gms.Gossiper.isEnabled()",1,2,2
"org.apache.cassandra.gms.Gossiper.isGossipOnlyMember(InetAddress)",2,2,3
"org.apache.cassandra.gms.Gossiper.isInShadowRound()",1,1,1
"org.apache.cassandra.gms.Gossiper.isKnownEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.isSafeForBootstrap(InetAddress)",2,2,3
"org.apache.cassandra.gms.Gossiper.isShutdown(InetAddress)",3,1,3
"org.apache.cassandra.gms.Gossiper.isSilentShutdownState(EndpointState)",2,1,2
"org.apache.cassandra.gms.Gossiper.makeRandomGossipDigest(List<GossipDigest>)",1,5,5
"org.apache.cassandra.gms.Gossiper.markAlive(InetAddress,EndpointState)",2,2,2
"org.apache.cassandra.gms.Gossiper.markAsShutdown(InetAddress)",2,1,2
"org.apache.cassandra.gms.Gossiper.markDead(InetAddress,EndpointState)",1,4,4
"org.apache.cassandra.gms.Gossiper.maybeGossipToSeed(MessageOut<GossipDigestSyn>)",3,5,6
"org.apache.cassandra.gms.Gossiper.maybeGossipToUnreachableMember(MessageOut<GossipDigestSyn>)",1,3,3
"org.apache.cassandra.gms.Gossiper.maybeInitializeLocalState(int)",1,1,1
"org.apache.cassandra.gms.Gossiper.notifyFailureDetector(InetAddress,EndpointState)",3,6,6
"org.apache.cassandra.gms.Gossiper.notifyFailureDetector(Map<InetAddress, EndpointState>)",1,2,2
"org.apache.cassandra.gms.Gossiper.quarantineEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.quarantineEndpoint(InetAddress,long)",1,1,1
"org.apache.cassandra.gms.Gossiper.realMarkAlive(InetAddress,EndpointState)",1,4,4
"org.apache.cassandra.gms.Gossiper.register(IEndpointStateChangeSubscriber)",1,1,1
"org.apache.cassandra.gms.Gossiper.removeEndpoint(InetAddress)",1,4,4
"org.apache.cassandra.gms.Gossiper.replacedEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.replacementQuarantine(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.requestAll(GossipDigest,List<GossipDigest>,int)",1,2,2
"org.apache.cassandra.gms.Gossiper.resetEndpointStateMap()",1,1,1
"org.apache.cassandra.gms.Gossiper.seenAnySeed()",4,3,6
"org.apache.cassandra.gms.Gossiper.sendAll(GossipDigest,Map<InetAddress, EndpointState>,int)",1,2,2
"org.apache.cassandra.gms.Gossiper.sendGossip(MessageOut<GossipDigestSyn>,Set<InetAddress>)",2,3,4
"org.apache.cassandra.gms.Gossiper.setLastProcessedMessageAt(long)",1,1,1
"org.apache.cassandra.gms.Gossiper.start(int)",1,1,1
"org.apache.cassandra.gms.Gossiper.start(int,Map<ApplicationState, VersionedValue>)",1,3,3
"org.apache.cassandra.gms.Gossiper.stop()",1,5,5
"org.apache.cassandra.gms.Gossiper.unregister(IEndpointStateChangeSubscriber)",1,1,1
"org.apache.cassandra.gms.Gossiper.unsafeAssassinateEndpoint(String)",1,1,1
"org.apache.cassandra.gms.Gossiper.valuesEqual(InetAddress,InetAddress,ApplicationState)",2,2,5
"org.apache.cassandra.gms.HeartBeatState.HeartBeatState(int)",1,1,1
"org.apache.cassandra.gms.HeartBeatState.HeartBeatState(int,int)",1,1,1
"org.apache.cassandra.gms.HeartBeatState.forceHighestPossibleVersionUnsafe()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.forceNewerGenerationUnsafe()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.getGeneration()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.getHeartBeatVersion()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.toString()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.updateHeartBeat()",1,1,1
"org.apache.cassandra.gms.HeartBeatStateSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.gms.HeartBeatStateSerializer.serialize(HeartBeatState,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.gms.HeartBeatStateSerializer.serializedSize(HeartBeatState,int)",1,1,1
"org.apache.cassandra.gms.TokenSerializer.deserialize(IPartitioner,DataInput)",3,2,3
"org.apache.cassandra.gms.TokenSerializer.serialize(IPartitioner,Collection<Token>,DataOutput)",1,2,2
"org.apache.cassandra.gms.VersionGenerator.getNextVersion()",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValue(String)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValue(String,int)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.VersionedValueFactory(IPartitioner)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.bootstrapping(Collection<Token>)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.cloneWithHigherVersion(VersionedValue)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.datacenter(String)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.hibernate(boolean)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.hostId(UUID)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.internalIP(String)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.leaving(Collection<Token>)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.left(Collection<Token>,long)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.load(double)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.makeTokenString(Collection<Token>)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.moving(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.networkVersion()",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.normal(Collection<Token>)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.rack(String)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.releaseVersion()",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removalCoordinator(UUID)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removedNonlocal(UUID,long)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removingNonlocal(UUID)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.rpcReady(boolean)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.rpcaddress(InetAddress)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.schema(UUID)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.severity(double)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.shutdown(boolean)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.tokens(Collection<Token>)",1,1,2
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.outValue(VersionedValue,int)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.serialize(VersionedValue,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.serializedSize(VersionedValue,int)",1,1,1
"org.apache.cassandra.gms.VersionedValue.compareTo(VersionedValue)",1,1,1
"org.apache.cassandra.gms.VersionedValue.toString()",1,1,1
"org.apache.cassandra.gms.VersionedValue.versionString(String...)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.ColumnFamilySplit()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.ColumnFamilySplit(String,String,String[])",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.ColumnFamilySplit(String,String,long,String[])",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getEndToken()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getLength()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getLocations()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getStartToken()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.read(DataInput)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.readFields(DataInput)",1,2,3
"org.apache.cassandra.hadoop.ColumnFamilySplit.toString()",1,2,2
"org.apache.cassandra.hadoop.ColumnFamilySplit.write(DataOutput)",1,2,2
"org.apache.cassandra.hadoop.ConfigHelper.createConnection(Configuration,String,Integer)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.getClientFromAddressList(Configuration,String[],int)",3,5,5
"org.apache.cassandra.hadoop.ConfigHelper.getClientFromInputAddressList(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getClientFromOutputAddressList(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getClientTransportFactory(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getClientTransportFactory(String)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.getInputColumnFamily(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputInitialAddress(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputIsWide(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyRange(Configuration)",1,2,2
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspace(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspacePassword(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspaceUserName(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputPartitioner(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputRpcPort(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputSlicePredicate(Configuration)",1,2,2
"org.apache.cassandra.hadoop.ConfigHelper.getInputSplitSize(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOptions(Configuration,Set<String>)",1,3,3
"org.apache.cassandra.hadoop.ConfigHelper.getOutputColumnFamily(Configuration)",2,2,2
"org.apache.cassandra.hadoop.ConfigHelper.getOutputCompressionChunkLength(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputCompressionClass(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputInitialAddress(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspace(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspacePassword(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspaceUserName(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputLocalDCOnly(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputPartitioner(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputRpcPort(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getRangeBatchSize(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getReadConsistencyLevel(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getThriftFramedTransportSize(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getWriteConsistencyLevel(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.keyRangeFromString(String)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.predicateFromString(String)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.setInputColumnFamily(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputColumnFamily(Configuration,String,String,boolean)",3,1,3
"org.apache.cassandra.hadoop.ConfigHelper.setInputInitialAddress(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspacePassword(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspaceUserName(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspaceUserNameAndPassword(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputPartitioner(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputRange(Configuration,List<IndexExpression>)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputRange(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputRange(Configuration,String,String,List<IndexExpression>)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputRpcPort(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputSlicePredicate(Configuration,SlicePredicate)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputSplitSize(Configuration,int)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputColumnFamily(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputColumnFamily(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputCompressionChunkLength(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputCompressionClass(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputInitialAddress(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspace(Configuration,String)",2,1,2
"org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspacePassword(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspaceUserName(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspaceUserNameAndPassword(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputLocalDCOnly(Configuration,boolean)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputPartitioner(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputRpcPort(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setRangeBatchSize(Configuration,int)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setReadConsistencyLevel(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setThriftFramedTransportSizeInMb(Configuration,int)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setWriteConsistencyLevel(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.thriftToString(TBase)",1,1,2
"org.apache.cassandra.hadoop.HadoopCompat.getConfiguration(JobContext)",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.getCounter(TaskInputOutputContext,String,String)",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.getTaskAttemptID(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.incrementCounter(Counter,long)",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.invoke(Method,Object,Object...)",1,2,2
"org.apache.cassandra.hadoop.HadoopCompat.isVersion2x()",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.newGenericCounter(String,String,long)",1,1,2
"org.apache.cassandra.hadoop.HadoopCompat.newInstance(Constructor<?>,Object...)",1,1,4
"org.apache.cassandra.hadoop.HadoopCompat.newJobContext(Configuration,JobID)",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.newMapContext(Configuration,TaskAttemptID,RecordReader,RecordWriter,OutputCommitter,StatusReporter,InputSplit)",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.newTaskAttemptContext(Configuration,TaskAttemptID)",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.progress(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.setStatus(TaskAttemptContext,String)",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.ReporterWrapper(Reporter)",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.getCounter(Enum<?>)",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.getCounter(String,String)",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.getInputSplit()",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.getProgress()",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.incrCounter(Enum<?>,long)",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.incrCounter(String,String,long)",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.progress()",1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.setStatus(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.abortTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.cleanupJob(JobContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.commitTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.needsTaskCommit(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.setupJob(JobContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.setupTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.checkOutputSpecs(Configuration)",2,1,2
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.checkOutputSpecs(FileSystem,JobConf)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.checkOutputSpecs(JobContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getDeleteSourceOnSuccess(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getIgnoreHosts(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getOutputCommitter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getRecordWriter(FileSystem,JobConf,String,Progressable)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableForAlias(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableInsertStatement(Configuration,String)",2,1,2
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableSchema(Configuration,String)",2,1,2
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setDeleteSourceOnSuccess(Configuration,boolean)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setIgnoreHosts(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setIgnoreHosts(Configuration,String...)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableAlias(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableInsertStatement(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableSchema(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.CqlBulkRecordWriter(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.CqlBulkRecordWriter(Configuration,Progressable)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.CqlBulkRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.ExternalClient.ExternalClient(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.ExternalClient.resolveHostAddresses(Configuration)",2,2,3
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler.debug(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler.output(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler.warn(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler.warn(String,Throwable)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.close()",5,8,9
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.close(Reporter)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.close(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.getOutputLocation()",2,1,2
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.getTableDirectory()",2,2,3
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.prepareWriter()",1,4,4
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.setConfigs()",1,3,5
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.write(Object,List<ByteBuffer>)",1,3,4
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getAuthProvider(Configuration)",2,2,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getBooleanSetting(String,Configuration)",2,2,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getClientAuthProvider(String,Configuration)",2,2,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getCluster(String[],Configuration,int)",1,4,4
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCluster(String,Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCluster(String[],Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCoreConnections(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCql(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputMaxConnections(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputMaxSimultReqPerConnections(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeAuthProvider(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeConnectionTimeout(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeKeepAlive(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativePort(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeReadConnectionTimeout(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeReceiveBufferSize(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeReuseAddress(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLCipherSuites(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLKeystorePassword(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLKeystorePath(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLTruststorePassword(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLTruststorePath(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSendBufferSize(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSolinger(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeTcpNodelay(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputPageRowSize(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputWhereClauses(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputcolumns(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getIntSetting(String,Configuration)",2,2,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCluster(String,Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCluster(String[],Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCql(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputNativePort(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getProtocolVersion(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getReadLoadBalancingPolicy(String[])",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getReadPoolingOptions(Configuration)",1,5,5
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getReadQueryOptions(Configuration)",1,4,4
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getReadSocketOptions(Configuration)",1,9,9
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getSSLContext(String,String,String,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getSSLOptions(Configuration)",2,6,7
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getStringSetting(String,Configuration)",2,2,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCQLPageRowSize(Configuration,String)",2,1,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputColumns(Configuration,String)",2,2,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCoreConnections(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCql(Configuration,String)",2,2,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputMaxConnections(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputMaxSimultReqPerConnections(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeAuthProvider(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeConnectionTimeout(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeKeepAlive(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativePort(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReadConnectionTimeout(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReceiveBufferSize(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReuseAddress(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLCipherSuites(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLKeystorePassword(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLKeystorePath(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLTruststorePassword(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLTruststorePath(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSendBufferSize(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSolinger(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeTcpNodelay(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputWhereClauses(Configuration,String)",2,2,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setOutputCql(Configuration,String)",2,2,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setUserNameAndPassword(Configuration,String,String)",1,2,2
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.SplitCallable.SplitCallable(TokenRange,Set<Host>,Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.SplitCallable.call()",1,6,7
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.describeSplits(String,String,TokenRange,int)",2,4,4
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getRangeMap(Configuration,String)",1,2,2
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getRecordReader(InputSplit,JobConf,Reporter)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getSplits(JobConf,int)",1,2,2
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getSplits(JobContext)",7,9,13
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getSubSplits(String,String,TokenRange,Configuration)",1,1,2
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.rangeToTokenRange(Metadata,Range<Token>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.validateConfiguration(Configuration)",4,2,5
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.abortTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.cleanupJob(JobContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.commitTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.needsTaskCommit(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.setupJob(JobContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.setupTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.checkOutputSpecs(Configuration)",4,1,4
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.checkOutputSpecs(FileSystem,JobConf)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.checkOutputSpecs(JobContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getOutputCommitter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getRecordWriter(FileSystem,JobConf,String,Progressable)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.CqlRecordReader()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.RowIterator.RowIterator()",1,2,2
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.RowIterator.computeNext()",5,7,8
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(String,Class<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(String,TypeCodec<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(String,TypeToken<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(int,Class<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(int,TypeCodec<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(int,TypeToken<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBool(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBool(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getByte(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getByte(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBytes(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBytes(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBytesUnsafe(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBytesUnsafe(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getColumnDefinitions()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDate(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDate(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDecimal(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDecimal(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDouble(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDouble(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getFloat(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getFloat(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getInet(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getInet(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getInt(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getInt(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getList(String,Class<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getList(String,TypeToken<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getList(int,Class<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getList(int,TypeToken<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getLong(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getLong(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getMap(String,Class<K>,Class<V>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getMap(String,TypeToken<K>,TypeToken<V>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getMap(int,Class<K>,Class<V>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getMap(int,TypeToken<K>,TypeToken<V>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getObject(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getObject(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getPartitionKeyToken()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getSet(String,Class<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getSet(String,TypeToken<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getSet(int,Class<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getSet(int,TypeToken<T>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getShort(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getShort(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getString(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getString(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTime(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTime(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTimestamp(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTimestamp(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getToken(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getToken(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTupleValue(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTupleValue(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getUDTValue(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getUDTValue(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getUUID(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getUUID(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getVarint(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getVarint(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.isNull(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.isNull(int)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.setRow(Row)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.buildQuery()",1,2,2
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.close()",1,3,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.createKey()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.createValue()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.fetchKeys()",2,2,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getAdditionalWhereClauses()",1,1,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getCurrentKey()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getCurrentValue()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getNativeProtocolVersion()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getPos()",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getProgress()",2,1,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getSelectColumns()",1,4,4
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.initialize(InputSplit,TaskAttemptContext)",4,6,10
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.makeColumnList(Collection<String>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.next(Long,Row)",2,2,2
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.nextKeyValue()",2,3,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.quote(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.CqlRecordWriter(Configuration)",3,2,4
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.CqlRecordWriter(Configuration,Progressable)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.CqlRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache.NativeRingCache(Configuration)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache.getEndpoints(TokenRange)",1,2,2
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache.getRange(ByteBuffer)",3,2,3
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache.refreshEndpointMap()",1,2,2
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.RangeClient(List<InetAddress>)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.canRetryDriverConnection(Exception)",5,5,7
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.close()",2,1,3
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.closeInternal()",1,2,2
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.preparedStatement(Session)",2,2,4
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.put(List<ByteBuffer>)",4,2,5
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.run()",7,10,15
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.appendKeyWhereClauses(String)",1,4,4
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close()",2,2,4
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close(Reporter)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.getPartitionKey(Map<String, ByteBuffer>)",1,3,3
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.quote(String)",1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.write(Map<String, ByteBuffer>,List<ByteBuffer>)",1,6,6
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.LimitedLocalNodeFirstLocalBalancingPolicy(String[])",1,3,3
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.close()",1,1,1
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.distance(Host)",2,1,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.getLocalInetAddresses()",1,2,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.init(Cluster,Collection<Host>)",1,3,3
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.isLocalHost(Host)",1,2,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.newQueryPlan(String,Statement)",1,3,3
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onAdd(Host)",1,2,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onDown(Host)",1,2,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onRemove(Host)",1,2,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onSuspected(Host)",1,1,1
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onUp(Host)",1,2,2
"org.apache.cassandra.hints.ChecksummedDataInput.Builder.Builder(ChannelProxy)",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.Builder.build()",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.ChecksummedDataInput(Builder)",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.bytesPastLimit()",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.checkCrc()",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.checkLimit(int)",3,1,3
"org.apache.cassandra.hints.ChecksummedDataInput.limit(long)",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.open(File)",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.reBuffer()",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.read(byte[],int,int)",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.readFully(byte[])",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.resetCrc()",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.resetLimit()",1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.updateCrc()",2,3,4
"org.apache.cassandra.hints.EncodedHintMessage.EncodedHintMessage(UUID,ByteBuffer,int)",1,1,1
"org.apache.cassandra.hints.EncodedHintMessage.Serializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.hints.EncodedHintMessage.Serializer.serialize(EncodedHintMessage,DataOutputPlus,int)",2,1,2
"org.apache.cassandra.hints.EncodedHintMessage.Serializer.serializedSize(EncodedHintMessage,int)",2,1,2
"org.apache.cassandra.hints.EncodedHintMessage.createMessageOut()",1,1,1
"org.apache.cassandra.hints.Hint.Hint(Mutation,long,int)",1,1,1
"org.apache.cassandra.hints.Hint.Serializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.hints.Hint.Serializer.serialize(Hint,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.hints.Hint.Serializer.serializedSize(Hint,int)",1,1,1
"org.apache.cassandra.hints.Hint.apply()",2,4,5
"org.apache.cassandra.hints.Hint.create(Mutation,long)",1,1,1
"org.apache.cassandra.hints.Hint.create(Mutation,long,int)",1,1,1
"org.apache.cassandra.hints.Hint.isLive()",1,1,1
"org.apache.cassandra.hints.HintMessage.HintMessage(UUID,Hint)",1,1,1
"org.apache.cassandra.hints.HintMessage.HintMessage(UUID,UUID)",1,1,1
"org.apache.cassandra.hints.HintMessage.Serializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.hints.HintMessage.Serializer.serialize(HintMessage,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.hints.HintMessage.Serializer.serializedSize(HintMessage,int)",1,1,1
"org.apache.cassandra.hints.HintMessage.createMessageOut()",1,1,1
"org.apache.cassandra.hints.HintResponse.HintResponse()",1,1,1
"org.apache.cassandra.hints.HintResponse.Serializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.hints.HintResponse.Serializer.serialize(HintResponse,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.hints.HintResponse.Serializer.serializedSize(HintResponse,int)",1,1,1
"org.apache.cassandra.hints.HintVerbHandler.doVerb(MessageIn<HintMessage>,int)",2,4,4
"org.apache.cassandra.hints.HintVerbHandler.reply(int,InetAddress)",1,1,1
"org.apache.cassandra.hints.HintsBuffer.Allocation.Allocation(int,int,Group)",1,1,1
"org.apache.cassandra.hints.HintsBuffer.Allocation.close()",1,1,1
"org.apache.cassandra.hints.HintsBuffer.Allocation.write(Hint)",1,1,2
"org.apache.cassandra.hints.HintsBuffer.Allocation.write(Iterable<UUID>,Hint)",1,2,2
"org.apache.cassandra.hints.HintsBuffer.HintsBuffer(ByteBuffer)",1,1,1
"org.apache.cassandra.hints.HintsBuffer.allocate(int)",2,3,3
"org.apache.cassandra.hints.HintsBuffer.allocate(int,Group)",2,2,2
"org.apache.cassandra.hints.HintsBuffer.allocateBytes(int)",5,3,5
"org.apache.cassandra.hints.HintsBuffer.capacity()",1,1,1
"org.apache.cassandra.hints.HintsBuffer.consumingHintsIterator(UUID)",3,3,3
"org.apache.cassandra.hints.HintsBuffer.create(int)",1,1,1
"org.apache.cassandra.hints.HintsBuffer.free()",1,1,1
"org.apache.cassandra.hints.HintsBuffer.hostIds()",1,1,1
"org.apache.cassandra.hints.HintsBuffer.isClosed()",1,1,1
"org.apache.cassandra.hints.HintsBuffer.put(UUID,int)",1,2,2
"org.apache.cassandra.hints.HintsBuffer.recycle()",1,1,1
"org.apache.cassandra.hints.HintsBuffer.remaining()",1,2,2
"org.apache.cassandra.hints.HintsBuffer.waitForModifications()",1,1,1
"org.apache.cassandra.hints.HintsBufferPool.HintsBufferPool(int,FlushCallback)",1,1,1
"org.apache.cassandra.hints.HintsBufferPool.allocate(int)",3,3,4
"org.apache.cassandra.hints.HintsBufferPool.createBuffer()",1,1,1
"org.apache.cassandra.hints.HintsBufferPool.currentBuffer()",1,2,2
"org.apache.cassandra.hints.HintsBufferPool.initializeCurrentBuffer()",1,2,2
"org.apache.cassandra.hints.HintsBufferPool.offer(HintsBuffer)",2,1,2
"org.apache.cassandra.hints.HintsBufferPool.switchCurrentBuffer(HintsBuffer)",2,2,3
"org.apache.cassandra.hints.HintsBufferPool.write(Iterable<UUID>,Hint)",1,1,1
"org.apache.cassandra.hints.HintsCatalog.HintsCatalog(File,Map<UUID, List<HintsDescriptor>>)",1,2,2
"org.apache.cassandra.hints.HintsCatalog.deleteAllHints()",1,1,1
"org.apache.cassandra.hints.HintsCatalog.deleteAllHints(UUID)",1,2,2
"org.apache.cassandra.hints.HintsCatalog.exciseStore(UUID)",1,1,1
"org.apache.cassandra.hints.HintsCatalog.fsyncDirectory()",1,2,2
"org.apache.cassandra.hints.HintsCatalog.get(UUID)",1,2,2
"org.apache.cassandra.hints.HintsCatalog.hasFiles()",1,1,1
"org.apache.cassandra.hints.HintsCatalog.load(File)",1,1,2
"org.apache.cassandra.hints.HintsCatalog.maybeLoadStores(Iterable<UUID>)",1,2,2
"org.apache.cassandra.hints.HintsCatalog.stores()",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.HintsDescriptor(UUID,int,long,ImmutableMap<String, Object>)",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.HintsDescriptor(UUID,long)",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.checksumFileName()",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.decodeJSONBytes(byte[])",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.deserialize(DataInput)",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.equals(Object)",3,4,6
"org.apache.cassandra.hints.HintsDescriptor.fileName()",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.hashCode()",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.isHintFileName(Path)",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.messagingVersion()",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.messagingVersion(int)",3,2,3
"org.apache.cassandra.hints.HintsDescriptor.readFromFile(Path)",1,2,2
"org.apache.cassandra.hints.HintsDescriptor.serialize(DataOutputPlus)",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.serializedSize()",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.toString()",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.updateChecksumLong(CRC32,long)",1,1,1
"org.apache.cassandra.hints.HintsDescriptor.validateCRC(int,int)",2,1,2
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask.DispatchHintsTask(HintsStore,UUID)",1,1,2
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask.dispatch()",5,3,6
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask.dispatch(HintsDescriptor)",2,4,4
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask.run()",1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.HintsDispatchExecutor(File,int,AtomicBoolean)",1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.TransferHintsTask.TransferHintsTask(HintsCatalog,Supplier<UUID>)",1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.TransferHintsTask.run()",3,2,4
"org.apache.cassandra.hints.HintsDispatchExecutor.TransferHintsTask.transfer(UUID)",1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.completeDispatchBlockingly(HintsStore)",1,2,3
"org.apache.cassandra.hints.HintsDispatchExecutor.dispatch(HintsStore)",1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.dispatch(HintsStore,UUID)",1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.isScheduled(HintsStore)",1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.shutdownBlocking()",1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.transfer(HintsCatalog,Supplier<UUID>)",1,1,1
"org.apache.cassandra.hints.HintsDispatchTrigger.HintsDispatchTrigger(HintsCatalog,HintsWriteExecutor,HintsDispatchExecutor,AtomicBoolean)",1,1,1
"org.apache.cassandra.hints.HintsDispatchTrigger.isScheduled(HintsStore)",1,1,1
"org.apache.cassandra.hints.HintsDispatchTrigger.run()",2,2,3
"org.apache.cassandra.hints.HintsDispatchTrigger.schedule(HintsStore)",1,3,3
"org.apache.cassandra.hints.HintsDispatcher.Callback.await()",1,1,3
"org.apache.cassandra.hints.HintsDispatcher.Callback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.Callback.onFailure(InetAddress)",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.Callback.response(MessageIn)",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.HintsDispatcher(HintsReader,UUID,InetAddress,int,AtomicBoolean)",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.close()",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.create(File,RateLimiter,UUID,UUID,AtomicBoolean)",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.dispatch()",3,2,3
"org.apache.cassandra.hints.HintsDispatcher.dispatch(Page)",1,2,2
"org.apache.cassandra.hints.HintsDispatcher.dispatchOffset()",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.isHostAlive()",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.isPaused()",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.seek(long)",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.sendEncodedHint(ByteBuffer)",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.sendHint(Hint)",1,1,1
"org.apache.cassandra.hints.HintsDispatcher.sendHints(Iterator<T>,Collection<Callback>,Function<T, Callback>)",3,3,4
"org.apache.cassandra.hints.HintsDispatcher.sendHintsAndAwait(Page)",4,3,5
"org.apache.cassandra.hints.HintsReader.BuffersIterator.BuffersIterator(long)",1,1,1
"org.apache.cassandra.hints.HintsReader.BuffersIterator.computeNext()",4,4,5
"org.apache.cassandra.hints.HintsReader.BuffersIterator.computeNextInternal()",2,1,2
"org.apache.cassandra.hints.HintsReader.BuffersIterator.readBuffer(int)",2,2,3
"org.apache.cassandra.hints.HintsReader.HintsIterator.HintsIterator(long)",1,1,1
"org.apache.cassandra.hints.HintsReader.HintsIterator.computeNext()",4,4,5
"org.apache.cassandra.hints.HintsReader.HintsIterator.computeNextInternal()",2,1,2
"org.apache.cassandra.hints.HintsReader.HintsIterator.readHint(int)",2,3,4
"org.apache.cassandra.hints.HintsReader.HintsReader(HintsDescriptor,File,ChecksummedDataInput,RateLimiter)",1,1,1
"org.apache.cassandra.hints.HintsReader.Page.Page(long)",1,1,1
"org.apache.cassandra.hints.HintsReader.Page.buffersIterator()",1,1,1
"org.apache.cassandra.hints.HintsReader.Page.hintsIterator()",1,1,1
"org.apache.cassandra.hints.HintsReader.PagesIterator.computeNext()",2,2,2
"org.apache.cassandra.hints.HintsReader.close()",1,1,1
"org.apache.cassandra.hints.HintsReader.descriptor()",1,1,1
"org.apache.cassandra.hints.HintsReader.iterator()",1,1,1
"org.apache.cassandra.hints.HintsReader.open(File)",1,1,1
"org.apache.cassandra.hints.HintsReader.open(File,RateLimiter)",1,2,2
"org.apache.cassandra.hints.HintsReader.seek(long)",1,1,1
"org.apache.cassandra.hints.HintsService.HintsService()",1,1,1
"org.apache.cassandra.hints.HintsService.deleteAllHints()",1,1,1
"org.apache.cassandra.hints.HintsService.deleteAllHintsForEndpoint(InetAddress)",2,1,2
"org.apache.cassandra.hints.HintsService.deleteAllHintsForEndpoint(String)",1,1,2
"org.apache.cassandra.hints.HintsService.excise(UUID)",2,1,3
"org.apache.cassandra.hints.HintsService.flushAndFsyncBlockingly(Iterable<UUID>)",1,1,1
"org.apache.cassandra.hints.HintsService.pauseDispatch()",1,1,1
"org.apache.cassandra.hints.HintsService.registerMBean()",1,1,2
"org.apache.cassandra.hints.HintsService.resumeDispatch()",1,1,1
"org.apache.cassandra.hints.HintsService.shutdownBlocking()",2,2,3
"org.apache.cassandra.hints.HintsService.startDispatch()",2,1,2
"org.apache.cassandra.hints.HintsService.transferHints(Supplier<UUID>)",1,1,2
"org.apache.cassandra.hints.HintsService.write(Iterable<UUID>,Hint)",2,2,3
"org.apache.cassandra.hints.HintsService.write(UUID,Hint)",1,1,1
"org.apache.cassandra.hints.HintsStore.HintsStore(UUID,File,List<HintsDescriptor>)",1,1,1
"org.apache.cassandra.hints.HintsStore.address()",1,1,1
"org.apache.cassandra.hints.HintsStore.blacklist(HintsDescriptor)",1,1,1
"org.apache.cassandra.hints.HintsStore.cleanUp(HintsDescriptor)",1,1,1
"org.apache.cassandra.hints.HintsStore.closeWriter()",1,2,2
"org.apache.cassandra.hints.HintsStore.create(UUID,File,List<HintsDescriptor>)",1,1,1
"org.apache.cassandra.hints.HintsStore.delete(HintsDescriptor)",1,2,2
"org.apache.cassandra.hints.HintsStore.deleteAllHints()",1,3,3
"org.apache.cassandra.hints.HintsStore.fsyncWriter()",1,2,2
"org.apache.cassandra.hints.HintsStore.getDispatchOffset(HintsDescriptor)",1,1,1
"org.apache.cassandra.hints.HintsStore.getOrOpenWriter()",1,2,2
"org.apache.cassandra.hints.HintsStore.getWriter()",1,1,1
"org.apache.cassandra.hints.HintsStore.hasFiles()",1,1,1
"org.apache.cassandra.hints.HintsStore.isLive()",1,2,2
"org.apache.cassandra.hints.HintsStore.isWriting()",1,1,1
"org.apache.cassandra.hints.HintsStore.markDispatchOffset(HintsDescriptor,long)",1,1,1
"org.apache.cassandra.hints.HintsStore.offerFirst(HintsDescriptor)",1,1,1
"org.apache.cassandra.hints.HintsStore.offerLast(HintsDescriptor)",1,1,1
"org.apache.cassandra.hints.HintsStore.openWriter()",1,2,2
"org.apache.cassandra.hints.HintsStore.poll()",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferPoolTask.FlushBufferPoolTask(HintsBufferPool)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferPoolTask.run()",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferTask.FlushBufferTask(HintsBuffer,HintsBufferPool)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferTask.run()",1,2,2
"org.apache.cassandra.hints.HintsWriteExecutor.FsyncWritersTask.FsyncWritersTask(Iterable<HintsStore>)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.FsyncWritersTask.run()",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.HintsWriteExecutor(HintsCatalog)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.PartiallyFlushBufferPoolTask.PartiallyFlushBufferPoolTask(HintsBufferPool,Iterable<HintsStore>)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.PartiallyFlushBufferPoolTask.run()",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.closeAllWriters()",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.closeWriter(HintsStore)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flush(HintsBuffer)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flush(Iterator<ByteBuffer>,HintsStore)",3,2,3
"org.apache.cassandra.hints.HintsWriteExecutor.flushBuffer(HintsBuffer,HintsBufferPool)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flushBufferPool(HintsBufferPool)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flushBufferPool(HintsBufferPool,Iterable<HintsStore>)",1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flushInternal(Iterator<ByteBuffer>,HintsStore)",3,3,4
"org.apache.cassandra.hints.HintsWriteExecutor.fsyncWritersBlockingly(Iterable<HintsStore>)",1,1,2
"org.apache.cassandra.hints.HintsWriteExecutor.shutdownBlocking()",1,1,2
"org.apache.cassandra.hints.HintsWriter.HintsWriter(File,HintsDescriptor,File,FileChannel,int,CRC32)",1,1,1
"org.apache.cassandra.hints.HintsWriter.Session.Session(ByteBuffer,long)",1,1,1
"org.apache.cassandra.hints.HintsWriter.Session.append(ByteBuffer)",2,2,2
"org.apache.cassandra.hints.HintsWriter.Session.append(Hint)",1,4,4
"org.apache.cassandra.hints.HintsWriter.Session.close()",1,1,1
"org.apache.cassandra.hints.HintsWriter.Session.flushBuffer()",1,2,2
"org.apache.cassandra.hints.HintsWriter.Session.maybeFsync()",1,2,2
"org.apache.cassandra.hints.HintsWriter.Session.maybeSkipCache()",1,2,2
"org.apache.cassandra.hints.HintsWriter.Session.position()",1,1,1
"org.apache.cassandra.hints.HintsWriter.close()",1,1,1
"org.apache.cassandra.hints.HintsWriter.create(File,HintsDescriptor)",1,2,2
"org.apache.cassandra.hints.HintsWriter.descriptor()",1,1,1
"org.apache.cassandra.hints.HintsWriter.doFsync()",1,1,1
"org.apache.cassandra.hints.HintsWriter.fsync()",1,1,1
"org.apache.cassandra.hints.HintsWriter.newSession(ByteBuffer)",1,1,2
"org.apache.cassandra.hints.HintsWriter.writeChecksum()",1,1,2
"org.apache.cassandra.hints.LegacyHintsMigrator.LegacyHintsMigrator(File,long)",1,1,1
"org.apache.cassandra.hints.LegacyHintsMigrator.calculatePageSize(ColumnFamilyStore)",1,2,3
"org.apache.cassandra.hints.LegacyHintsMigrator.compactLegacyHints()",1,2,2
"org.apache.cassandra.hints.LegacyHintsMigrator.convertLegacyHint(Row)",2,1,2
"org.apache.cassandra.hints.LegacyHintsMigrator.deleteLegacyHintsPartition(UUID)",1,1,1
"org.apache.cassandra.hints.LegacyHintsMigrator.deserializeLegacyMutation(Row)",1,3,3
"org.apache.cassandra.hints.LegacyHintsMigrator.forceCompaction(Collection<Descriptor>)",1,1,2
"org.apache.cassandra.hints.LegacyHintsMigrator.migrate()",2,1,2
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHints()",1,1,1
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHints(UUID,ByteBuffer)",1,1,1
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHints(UUID,Iterator<Row>,ByteBuffer)",1,2,2
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHints(UUID,UntypedResultSet,ByteBuffer)",1,1,1
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHintsInternal(UUID,Iterator<Row>,ByteBuffer)",3,4,5
"org.apache.cassandra.index.SecondaryIndexBuilder.SecondaryIndexBuilder(ColumnFamilyStore,Set<Index>,ReducingKeyIterator)",1,1,1
"org.apache.cassandra.index.SecondaryIndexBuilder.build()",3,3,3
"org.apache.cassandra.index.SecondaryIndexBuilder.getCompactionInfo()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.CleanupGCTransaction(DecoratedKey,int,Index...)",1,1,2
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.commit()",2,3,5
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.onPartitionDeletion(DeletionTime)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.onRowDelete(Row)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.start()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction.IndexGCTransaction(DecoratedKey,int,int,Index...)",1,1,2
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction.commit()",2,4,5
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction.onRowMerge(Row,Row...)",1,5,6
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction.start()",1,1,2
"org.apache.cassandra.index.SecondaryIndexManager.SecondaryIndexManager(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.WriteTimeTransaction(Indexer...)",1,1,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.commit()",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.onInserted(Row)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.onPartitionDeletion(DeletionTime)",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.onRangeTombstone(RangeTombstone)",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.onUpdated(Row,Row)",1,7,7
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.shouldCleanupOldValue(Cell,Cell)",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.start()",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.addIndex(IndexMetadata)",2,2,2
"org.apache.cassandra.index.SecondaryIndexManager.buildAllIndexesBlocking(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.buildIndexBlocking(Index)",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.buildIndexesBlocking(Collection<SSTableReader>,Set<Index>)",2,1,2
"org.apache.cassandra.index.SecondaryIndexManager.createIndex(IndexMetadata)",1,3,3
"org.apache.cassandra.index.SecondaryIndexManager.createInstance(IndexMetadata)",2,2,3
"org.apache.cassandra.index.SecondaryIndexManager.deletePartition(UnfilteredRowIterator,int)",3,2,3
"org.apache.cassandra.index.SecondaryIndexManager.executeAllBlocking(Stream<Index>,Function<Index, Callable<?>>)",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.executeBlocking(Callable<?>)",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.flushAllIndexesBlocking()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.flushAllNonCFSBackedIndexesBlocking()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.flushIndexesBlocking(Set<Index>)",2,1,2
"org.apache.cassandra.index.SecondaryIndexManager.getAllIndexColumnFamilyStores()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getBestIndexFor(ReadCommand)",5,7,8
"org.apache.cassandra.index.SecondaryIndexManager.getBuiltIndexNames()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getDependentIndexes(ColumnDefinition)",2,4,4
"org.apache.cassandra.index.SecondaryIndexManager.getIndex(IndexMetadata)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getIndexByName(String)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getIndexName(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getIndexName(String)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getParentCfs(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getParentCfsName(String)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.hasIndexes()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.indexPartition(UnfilteredRowIterator,Group,Set<Index>,int)",1,4,4
"org.apache.cassandra.index.SecondaryIndexManager.invalidateAllIndexesBlocking()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.isIndexColumnFamily(String)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.isIndexColumnFamilyStore(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.listIndexes()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.markAllIndexesRemoved()",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.markIndexBuilt(String)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.markIndexRemoved(String)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.newCleanupTransaction(DecoratedKey,PartitionColumns,int)",2,1,3
"org.apache.cassandra.index.SecondaryIndexManager.newCompactionTransaction(DecoratedKey,PartitionColumns,int,int)",1,1,2
"org.apache.cassandra.index.SecondaryIndexManager.newUpdateTransaction(PartitionUpdate,Group,int)",2,1,3
"org.apache.cassandra.index.SecondaryIndexManager.rebuildIndexesBlocking(Collection<SSTableReader>,Set<String>)",2,2,2
"org.apache.cassandra.index.SecondaryIndexManager.registerIndex(Index)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.reload()",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.reloadIndex(IndexMetadata)",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.removeIndex(String)",1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.truncateAllIndexesBlocking(long)",1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.unregisterIndex(Index)",1,1,2
"org.apache.cassandra.index.SecondaryIndexManager.validate(PartitionUpdate)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.CassandraIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.buildBlocking()",2,2,2
"org.apache.cassandra.index.internal.CassandraIndex.buildIndexClustering(ByteBuffer,Clustering,Cell)",1,2,2
"org.apache.cassandra.index.internal.CassandraIndex.customExpressionValueType()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.delete(ByteBuffer,Clustering,Cell,Group,int)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.delete(ByteBuffer,Clustering,DeletionTime,Group)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.deleteStaleEntry(DecoratedKey,Clustering,DeletionTime,Group)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.dependsOn(ColumnDefinition)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.doDelete(DecoratedKey,Clustering,DeletionTime,Group)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getBackingTable()",1,2,2
"org.apache.cassandra.index.internal.CassandraIndex.getBlockingFlushTask()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getBuildIndexTask()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getEstimatedResultRows()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getFunctions(IndexMetadata,Pair<ColumnDefinition, Type>)",12,5,13
"org.apache.cassandra.index.internal.CassandraIndex.getIndexCfs()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexComparator()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexKeyFor(ByteBuffer)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexMetadata()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexedColumn()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexedValue(ByteBuffer,Clustering,Cell)",1,3,3
"org.apache.cassandra.index.internal.CassandraIndex.getInitializationTask()",1,2,2
"org.apache.cassandra.index.internal.CassandraIndex.getInvalidateTask()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getMetadataReloadTask(IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getPostIndexQueryFilter(RowFilter)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getSSTableNames(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getTargetExpression(List<Expression>)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getTruncateTask(long)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.indexCfsMetadata(CFMetaData,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.indexerFor(DecoratedKey,int,Group,Type)",5,16,20
"org.apache.cassandra.index.internal.CassandraIndex.indexes(PartitionColumns)",1,2,2
"org.apache.cassandra.index.internal.CassandraIndex.insert(ByteBuffer,Clustering,Cell,LivenessInfo,Group)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.invalidate()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.isBuilt()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.isPrimaryKeyIndex()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.newIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.parseTarget(CFMetaData,IndexMetadata)",4,6,6
"org.apache.cassandra.index.internal.CassandraIndex.partitionUpdate(DecoratedKey,Row)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.postProcessorFor(ReadCommand)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.register(IndexRegistry)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.searcherFor(ReadCommand)",5,5,5
"org.apache.cassandra.index.internal.CassandraIndex.setMetadata(IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.shouldBuildBlocking()",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.supportsExpression(ColumnDefinition,Operator)",1,2,2
"org.apache.cassandra.index.internal.CassandraIndex.supportsExpression(Expression)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.supportsOperator(ColumnDefinition,Operator)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.validate(PartitionUpdate)",2,2,5
"org.apache.cassandra.index.internal.CassandraIndex.validateClusterings(PartitionUpdate)",1,2,2
"org.apache.cassandra.index.internal.CassandraIndex.validateIndexedValue(ByteBuffer)",2,3,3
"org.apache.cassandra.index.internal.CassandraIndex.validatePartitionKey(DecoratedKey)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.validateRows(Iterable<Row>)",1,5,5
"org.apache.cassandra.index.internal.CassandraIndexFunctions.addIndexClusteringColumns(Builder,CFMetaData,ColumnDefinition)",1,2,2
"org.apache.cassandra.index.internal.CassandraIndexFunctions.getIndexedValueType(ColumnDefinition)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.CassandraIndexSearcher(ReadCommand,Expression,CassandraIndex)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.makeIndexBound(ByteBuffer,Bound)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.makeIndexClustering(ByteBuffer,Clustering)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.makeIndexFilter(ReadCommand)",3,11,11
"org.apache.cassandra.index.internal.CassandraIndexSearcher.queryIndex(DecoratedKey,ReadCommand,ReadOrderGroup)",1,1,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.search(ReadOrderGroup)",1,2,2
"org.apache.cassandra.index.internal.IndexEntry.IndexEntry(DecoratedKey,Clustering,long,ByteBuffer,Clustering)",1,1,1
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.ClusteringColumnIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",1,3,3
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.decodeEntry(DecoratedKey,Row)",1,3,3
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",1,1,1
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.isStale(Row,ByteBuffer,int)",1,1,1
"org.apache.cassandra.index.internal.composites.CollectionEntryIndex.CollectionEntryIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.composites.CollectionEntryIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",1,1,1
"org.apache.cassandra.index.internal.composites.CollectionEntryIndex.isStale(Row,ByteBuffer,int)",2,2,3
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex.CollectionKeyIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",1,1,1
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex.isStale(Row,ByteBuffer,int)",1,2,2
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex.supportsOperator(ColumnDefinition,Operator)",1,1,3
"org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase.CollectionKeyIndexBase(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",1,2,2
"org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase.decodeEntry(DecoratedKey,Row)",1,2,2
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.CollectionValueIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",1,4,4
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.decodeEntry(DecoratedKey,Row)",1,2,2
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",1,1,1
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.isStale(Row,ByteBuffer,int)",4,3,5
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.supportsOperator(ColumnDefinition,Operator)",1,1,2
"org.apache.cassandra.index.internal.composites.CompositesSearcher.CompositesSearcher(ReadCommand,Expression,CassandraIndex)",1,1,1
"org.apache.cassandra.index.internal.composites.CompositesSearcher.deleteAllEntries(List<IndexEntry>,Group,int)",1,1,1
"org.apache.cassandra.index.internal.composites.CompositesSearcher.filterStaleEntries(UnfilteredRowIterator,ByteBuffer,List<IndexEntry>,Group,int)",4,5,6
"org.apache.cassandra.index.internal.composites.CompositesSearcher.isMatchingEntry(DecoratedKey,IndexEntry,ReadCommand)",1,2,2
"org.apache.cassandra.index.internal.composites.CompositesSearcher.queryDataFromIndex(DecoratedKey,RowIterator,ReadCommand,ReadOrderGroup)",6,10,12
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.PartitionKeyIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",1,2,2
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.decodeEntry(DecoratedKey,Row)",1,2,2
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",1,1,1
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.isStale(Row,ByteBuffer,int)",1,1,1
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.RegularColumnIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",1,2,2
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.decodeEntry(DecoratedKey,Row)",1,2,2
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",1,1,1
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.isStale(Row,ByteBuffer,int)",1,3,3
"org.apache.cassandra.index.internal.keys.KeysIndex.KeysIndex(ColumnFamilyStore,IndexMetadata)",1,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.addIndexClusteringColumns(Builder,CFMetaData,ColumnDefinition)",1,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",1,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.decodeEntry(DecoratedKey,Row)",1,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",1,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.isStale(Row,ByteBuffer,int)",2,3,4
"org.apache.cassandra.index.internal.keys.KeysSearcher.KeysSearcher(ReadCommand,Expression,CassandraIndex)",1,1,1
"org.apache.cassandra.index.internal.keys.KeysSearcher.filterIfStale(UnfilteredRowIterator,Row,ByteBuffer,Group,boolean,int)",4,6,6
"org.apache.cassandra.index.internal.keys.KeysSearcher.queryDataFromIndex(DecoratedKey,RowIterator,ReadCommand,ReadOrderGroup)",1,7,7
"org.apache.cassandra.io.FSError.FSError(Throwable,File)",1,1,1
"org.apache.cassandra.io.FSError.findNested(Throwable)",3,1,3
"org.apache.cassandra.io.FSReadError.FSReadError(Throwable,File)",1,1,1
"org.apache.cassandra.io.FSReadError.FSReadError(Throwable,String)",1,1,1
"org.apache.cassandra.io.FSReadError.toString()",1,1,1
"org.apache.cassandra.io.FSWriteError.FSWriteError(Throwable,File)",1,1,1
"org.apache.cassandra.io.FSWriteError.FSWriteError(Throwable,String)",1,1,1
"org.apache.cassandra.io.FSWriteError.toString()",1,1,1
"org.apache.cassandra.io.compress.BufferType.typeOf(ByteBuffer)",1,1,2
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.Builder(ChannelProxy,CompressionMetadata)",1,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.Builder(ICompressedFile)",1,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.applyMetadata(CompressionMetadata)",1,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.build()",1,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.createBuffer()",1,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.CompressedRandomAccessReader(Builder)",1,2,2
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.checksum(Chunk)",2,2,2
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.getCrcCheckChance()",1,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.length()",1,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.reBufferMmap()",3,6,6
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.reBufferStandard()",4,9,9
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.releaseBuffer()",1,3,3
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.toString()",1,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.CompressedFileWriterMark.CompressedFileWriterMark(long,long,int,int)",1,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.CompressedSequentialWriter(File,String,CompressionParams,MetadataCollector)",1,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy.doAbort(Throwable)",1,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy.doCommit(Throwable)",1,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy.doPreCleanup(Throwable)",1,3,3
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy.doPrepare()",1,2,2
"org.apache.cassandra.io.compress.CompressedSequentialWriter.flush()",1,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.flushData()",1,3,4
"org.apache.cassandra.io.compress.CompressedSequentialWriter.getOnDiskFilePointer()",1,2,2
"org.apache.cassandra.io.compress.CompressedSequentialWriter.mark()",1,2,2
"org.apache.cassandra.io.compress.CompressedSequentialWriter.open(long)",1,1,2
"org.apache.cassandra.io.compress.CompressedSequentialWriter.resetAndTruncate(FileMark)",3,8,8
"org.apache.cassandra.io.compress.CompressedSequentialWriter.seekToChunkStart()",2,3,3
"org.apache.cassandra.io.compress.CompressedSequentialWriter.txnProxy()",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk.Chunk(long,int)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk.equals(Object)",3,2,5
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk.hashCode()",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk.toString()",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.ChunkSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.ChunkSerializer.serialize(Chunk,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.ChunkSerializer.serializedSize(Chunk,int)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.CompressionMetadata(String,CompressionParams,SafeMemory,long,long,long,ChecksumType)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.CompressionMetadata(String,long,ChecksumType)",1,2,5
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.Writer(CompressionParams,String)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.addOffset(long)",1,2,2
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.chunkOffsetBy(int)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.doAbort(Throwable)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.doCommit(Throwable)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.doPostCleanup(Throwable)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.doPrepare()",1,4,4
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.finalizeLength(long,int)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.open(CompressionParams,String)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.open(long,long)",1,2,3
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.resetAndTruncate(int)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.writeHeader(DataOutput,long,int)",1,2,3
"org.apache.cassandra.io.compress.CompressionMetadata.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(long)",2,2,3
"org.apache.cassandra.io.compress.CompressionMetadata.chunkLength()",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.close()",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.compressor()",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.create(String)",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.getChunksForSections(Collection<Pair<Long, Long>>)",1,4,5
"org.apache.cassandra.io.compress.CompressionMetadata.offHeapSize()",1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.readChunkOffsets(DataInput)",3,5,7
"org.apache.cassandra.io.compress.CorruptBlockException.CorruptBlockException(String,Chunk)",1,1,1
"org.apache.cassandra.io.compress.CorruptBlockException.CorruptBlockException(String,Chunk,Throwable)",1,1,1
"org.apache.cassandra.io.compress.CorruptBlockException.CorruptBlockException(String,long,int)",1,1,1
"org.apache.cassandra.io.compress.CorruptBlockException.CorruptBlockException(String,long,int,Throwable)",1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.DeflateCompressor()",1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.compress(ByteBuffer,ByteBuffer)",1,3,3
"org.apache.cassandra.io.compress.DeflateCompressor.compressArray(byte[],int,int,byte[],int,int)",2,1,2
"org.apache.cassandra.io.compress.DeflateCompressor.compressBuffer(ByteBuffer,ByteBuffer)",1,4,4
"org.apache.cassandra.io.compress.DeflateCompressor.create(Map<String, String>)",1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.initialCompressedBufferLength(int)",1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.preferredBufferType()",1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.supportedOptions()",1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.supports(BufferType)",1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.uncompress(ByteBuffer,ByteBuffer)",1,3,3
"org.apache.cassandra.io.compress.DeflateCompressor.uncompress(byte[],int,int,byte[],int)",1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.uncompress(byte[],int,int,byte[],int,int)",2,1,3
"org.apache.cassandra.io.compress.DeflateCompressor.uncompressBuffer(ByteBuffer,ByteBuffer)",1,4,5
"org.apache.cassandra.io.compress.LZ4Compressor.LZ4Compressor()",1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.compress(ByteBuffer,ByteBuffer)",1,1,2
"org.apache.cassandra.io.compress.LZ4Compressor.create(Map<String, String>)",1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.initialCompressedBufferLength(int)",1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.preferredBufferType()",1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.supportedOptions()",1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.supports(BufferType)",1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.uncompress(ByteBuffer,ByteBuffer)",2,2,3
"org.apache.cassandra.io.compress.LZ4Compressor.uncompress(byte[],int,int,byte[],int)",2,1,3
"org.apache.cassandra.io.compress.SnappyCompressor.compress(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.create(Map<String, String>)",1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.initialCompressedBufferLength(int)",1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.isAvailable()",1,2,3
"org.apache.cassandra.io.compress.SnappyCompressor.preferredBufferType()",1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.supportedOptions()",1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.supports(BufferType)",1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.uncompress(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.uncompress(byte[],int,int,byte[],int)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.AbstractSSTableSimpleWriter(File,CFMetaData,PartitionColumns)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.createDescriptor(File,String,String,Type)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.createWriter()",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.getNextGeneration(File,String)",2,4,6
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.getUpdateFor(ByteBuffer)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.setSSTableFormatType(Type)",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.addFalsePositive()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.addTruePositive()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getFalsePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getRecentFalsePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getRecentTruePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getTruePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.Builder()",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.addTableToKeyspace(KeyspaceMetadata,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.build()",4,3,6
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.createKeyspaceWithTable(CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.forTable(String)",1,4,4
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.getStatement(String,Class<T>,String)",2,2,3
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.getTableMetadata(String)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.inDirectory(File)",3,1,3
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.inDirectory(String)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.sorted()",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.using(String)",4,1,4
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.withBufferSizeInMB(int)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.withPartitioner(IPartitioner)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.CQLSSTableWriter(AbstractSSTableSimpleWriter,UpdateStatement,List<ColumnSpecification>)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(List<Object>)",1,3,3
"org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(Map<String, Object>)",1,3,3
"org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(Object...)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.builder()",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.close()",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(ByteBuffer...)",1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(List<ByteBuffer>)",2,5,5
"org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(Map<String, ByteBuffer>)",1,2,2
"org.apache.cassandra.io.sstable.Component.Component(Type)",1,1,1
"org.apache.cassandra.io.sstable.Component.Component(Type,String)",1,1,1
"org.apache.cassandra.io.sstable.Component.Type.Type(String)",1,1,1
"org.apache.cassandra.io.sstable.Component.Type.Type(String...)",1,1,1
"org.apache.cassandra.io.sstable.Component.Type.fromRepresentation(String)",4,3,4
"org.apache.cassandra.io.sstable.Component.digestFor(ChecksumType)",3,2,3
"org.apache.cassandra.io.sstable.Component.equals(Object)",3,2,4
"org.apache.cassandra.io.sstable.Component.fromFilename(File,String)",3,3,16
"org.apache.cassandra.io.sstable.Component.hashCode()",1,1,1
"org.apache.cassandra.io.sstable.Component.name()",1,1,1
"org.apache.cassandra.io.sstable.Component.toString()",1,1,1
"org.apache.cassandra.io.sstable.CorruptSSTableException.CorruptSSTableException(Exception,File)",1,1,1
"org.apache.cassandra.io.sstable.CorruptSSTableException.CorruptSSTableException(Exception,String)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(File,String,String,int)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(File,String,String,int,Type)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(String,File,String,String,int,Type)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(Version,File,String,String,int,Type,Component)",1,5,5
"org.apache.cassandra.io.sstable.Descriptor.appendFileName(StringBuilder)",1,3,3
"org.apache.cassandra.io.sstable.Descriptor.baseFilename()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.equals(Object)",3,5,7
"org.apache.cassandra.io.sstable.Descriptor.filenameFor(Component)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(File,String)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(File,String,boolean)",2,8,10
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(String)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(String,Type)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(String,boolean)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.getFormat()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.getMetadataSerializer()",2,1,2
"org.apache.cassandra.io.sstable.Descriptor.getTemporaryFiles()",1,2,2
"org.apache.cassandra.io.sstable.Descriptor.hashCode()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.isCompatible()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.isLegacyFile(File)",2,4,4
"org.apache.cassandra.io.sstable.Descriptor.isValidFile(String)",1,2,2
"org.apache.cassandra.io.sstable.Descriptor.relativeFilenameFor(Component)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.tmpFilenameFor(Component)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.toString()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.withDigestComponent(Component)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.withFormatType(Type)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.withGeneration(int)",1,1,1
"org.apache.cassandra.io.sstable.Downsampling.getEffectiveIndexIntervalAfterIndex(int,int,int)",1,2,2
"org.apache.cassandra.io.sstable.Downsampling.getOriginalIndexes(int)",2,3,4
"org.apache.cassandra.io.sstable.Downsampling.getSamplingPattern(int)",3,4,7
"org.apache.cassandra.io.sstable.Downsampling.getStartPoints(int,int)",1,3,4
"org.apache.cassandra.io.sstable.IndexHelper.IndexHelper()",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.IndexInfo(ClusteringPrefix,ClusteringPrefix,long,long,DeletionTime)",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer.Serializer(CFMetaData,Version,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer.deserialize(DataInputPlus)",1,3,3
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer.serialize(IndexInfo,DataOutputPlus)",1,2,2
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer.serializedSize(IndexInfo)",1,2,2
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.unsharedHeapSize()",1,2,2
"org.apache.cassandra.io.sstable.IndexHelper.indexFor(ClusteringPrefix,List<IndexInfo>,ClusteringComparator,boolean,int)",1,4,6
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummary(IPartitioner,Memory,int,Memory,long,int,int,int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummary(IndexSummary)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummarySerializer.deserialize(DataInputStream,IPartitioner,boolean,int,int)",3,6,6
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummarySerializer.serialize(IndexSummary,DataOutputPlus,boolean)",1,4,4
"org.apache.cassandra.io.sstable.IndexSummary.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.binarySearch(PartitionPosition)",4,2,5
"org.apache.cassandra.io.sstable.IndexSummary.calculateEnd(int)",1,2,2
"org.apache.cassandra.io.sstable.IndexSummary.fillTemporaryKey(int,ByteBuffer)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEffectiveIndexInterval()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEffectiveIndexIntervalAfterIndex(int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEndInSummary(int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEntries()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEntriesLength()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEstimatedKeyCount()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getKey(int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getMaxNumberOfEntries()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getMinIndexInterval()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getOffHeapSize()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getOffsets()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getPosition(int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getPositionInSummary(int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getSamplingLevel()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.sharedCopy()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.size()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.IndexSummaryBuilder(long,int,int)",1,2,2
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.ReadableBoundary.ReadableBoundary(DecoratedKey,long,long,int,long)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.build(IPartitioner)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.build(IPartitioner,ReadableBoundary)",1,1,2
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.calculateSamplingLevel(int,int,long,int,int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.close()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.close(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.downsample(IndexSummary,int,int,IPartitioner)",4,4,6
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.entriesAtSamplingLevel(int,int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.getLastReadableBoundary()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.markDataSynced(long)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.markIndexSynced(long)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.maybeAddEntry(DecoratedKey,long)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.maybeAddEntry(DecoratedKey,long,long,long)",1,3,4
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.prepareToCommit()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.refreshReadableBoundary()",2,2,4
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.setNextSamplePosition(long)",4,1,4
"org.apache.cassandra.io.sstable.IndexSummaryManager.IndexSummaryManager()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.ReadRateComparator.ReadRateComparator(Map<SSTableReader, Double>)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.ReadRateComparator.compare(SSTableReader,SSTableReader)",4,4,5
"org.apache.cassandra.io.sstable.IndexSummaryManager.ResampleEntry.ResampleEntry(SSTableReader,long,int)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.adjustSamplingLevels(List<SSTableReader>,Map<UUID, LifecycleTransaction>,double,long)",1,11,13
"org.apache.cassandra.io.sstable.IndexSummaryManager.distributeRemainingSpace(List<ResampleEntry>,long)",3,4,4
"org.apache.cassandra.io.sstable.IndexSummaryManager.getAllSSTables()",1,3,3
"org.apache.cassandra.io.sstable.IndexSummaryManager.getAverageIndexInterval()",1,2,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.getCompactingAndNonCompactingSSTables()",1,4,4
"org.apache.cassandra.io.sstable.IndexSummaryManager.getIndexIntervals()",1,2,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.getMemoryPoolCapacityInMB()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.getMemoryPoolSizeInMB()",1,2,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.getResizeIntervalInMinutes()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.getTimeToNextResize(TimeUnit)",2,1,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.redistributeSummaries()",1,2,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.redistributeSummaries(List<SSTableReader>,Map<UUID, LifecycleTransaction>,long)",1,10,10
"org.apache.cassandra.io.sstable.IndexSummaryManager.setMemoryPoolCapacityInMB(long)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.setResizeIntervalInMinutes(int)",2,3,4
"org.apache.cassandra.io.sstable.KeyIterator.In.In(File)",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.In.close()",1,2,2
"org.apache.cassandra.io.sstable.KeyIterator.In.get()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.In.getFilePointer()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.In.isEOF()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.In.length()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.In.maybeInit()",1,2,2
"org.apache.cassandra.io.sstable.KeyIterator.KeyIterator(Descriptor,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.close()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.computeNext()",2,2,3
"org.apache.cassandra.io.sstable.KeyIterator.getBytesRead()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.getTotalBytes()",1,1,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.ReducingKeyIterator(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.close()",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.getBytesRead()",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.getTotalBytes()",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.hasNext()",1,1,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.maybeInit()",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.next()",1,1,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.remove()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.SSTable(Descriptor,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.SSTable.SSTable(Descriptor,Set<Component>,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.SSTable.addComponents(Collection<Component>)",1,1,1
"org.apache.cassandra.io.sstable.SSTable.appendTOC(Descriptor,Collection<Component>)",1,2,3
"org.apache.cassandra.io.sstable.SSTable.bytesOnDisk()",1,2,2
"org.apache.cassandra.io.sstable.SSTable.componentsFor(Descriptor)",2,3,5
"org.apache.cassandra.io.sstable.SSTable.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.io.sstable.SSTable.delete(Descriptor,Set<Component>)",3,5,6
"org.apache.cassandra.io.sstable.SSTable.discoverComponentsFor(Descriptor)",1,6,6
"org.apache.cassandra.io.sstable.SSTable.estimateRowsFromIndex(RandomAccessReader)",1,5,5
"org.apache.cassandra.io.sstable.SSTable.getAllFilePaths()",1,2,2
"org.apache.cassandra.io.sstable.SSTable.getColumnFamilyName()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getFilename()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getIndexFilename()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getKeyspaceName()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getMinimalKey(DecoratedKey)",1,4,4
"org.apache.cassandra.io.sstable.SSTable.getPartitioner()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.readTOC(Descriptor)",1,3,3
"org.apache.cassandra.io.sstable.SSTable.toString()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.tryComponentFromFilename(File,String)",1,1,2
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.SSTableIdentityIterator(SSTableReader,RandomAccessReader,DecoratedKey)",1,2,2
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.close()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.columns()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.compareTo(SSTableIdentityIterator)",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.computeNext()",2,4,4
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.getPath()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.isReverseOrder()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.metadata()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.partitionKey()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.staticRow()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.stats()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.addRangeForEndpoint(Range<Token>,InetAddress)",1,2,2
"org.apache.cassandra.io.sstable.SSTableLoader.Client.getConnectionFactory()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.getEndpointToRangesMap()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.setTableMetadata(CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.stop()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.SSTableLoader(File,Client,OutputHandler)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.SSTableLoader(File,Client,OutputHandler,int)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.getFailedHosts()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.handleStreamEvent(StreamEvent)",1,3,3
"org.apache.cassandra.io.sstable.SSTableLoader.names(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.io.sstable.SSTableLoader.onFailure(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.onSuccess(StreamState)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.openSSTables(Map<InetAddress, Collection<Range<Token>>>)",5,10,12
"org.apache.cassandra.io.sstable.SSTableLoader.releaseReferences()",1,2,2
"org.apache.cassandra.io.sstable.SSTableLoader.stream()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.stream(Set<InetAddress>,StreamEventHandler...)",4,4,5
"org.apache.cassandra.io.sstable.SSTableMultiWriter.abortOrDie(SSTableMultiWriter)",1,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.InvalidateKeys.InvalidateKeys(SSTableReader,Collection<DecoratedKey>)",1,3,3
"org.apache.cassandra.io.sstable.SSTableRewriter.InvalidateKeys.run()",1,2,2
"org.apache.cassandra.io.sstable.SSTableRewriter.SSTableRewriter(LifecycleTransaction,long,boolean)",1,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.SSTableRewriter(LifecycleTransaction,long,boolean,boolean)",1,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.SSTableRewriter(LifecycleTransaction,long,boolean,long,boolean)",1,2,2
"org.apache.cassandra.io.sstable.SSTableRewriter.append(UnfilteredRowIterator)",4,4,6
"org.apache.cassandra.io.sstable.SSTableRewriter.calculateOpenInterval(boolean)",1,1,4
"org.apache.cassandra.io.sstable.SSTableRewriter.constructKeepingOriginals(LifecycleTransaction,boolean,long,boolean)",1,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.currentWriter()",1,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.doAbort(Throwable)",1,2,2
"org.apache.cassandra.io.sstable.SSTableRewriter.doCommit(Throwable)",1,2,2
"org.apache.cassandra.io.sstable.SSTableRewriter.doPrepare()",3,3,5
"org.apache.cassandra.io.sstable.SSTableRewriter.finish()",1,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.finished()",1,2,2
"org.apache.cassandra.io.sstable.SSTableRewriter.maybeReopenEarly(DecoratedKey)",1,5,6
"org.apache.cassandra.io.sstable.SSTableRewriter.moveStarts(SSTableReader,DecoratedKey)",6,5,8
"org.apache.cassandra.io.sstable.SSTableRewriter.setRepairedAt(long)",1,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.switchWriter(SSTableWriter)",2,6,6
"org.apache.cassandra.io.sstable.SSTableRewriter.throwDuringPrepare(boolean)",1,1,2
"org.apache.cassandra.io.sstable.SSTableRewriter.tryAppend(UnfilteredRowIterator)",1,2,2
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.CurrentFormatIterator.CurrentFormatIterator(CFMetaData,DataInputPlus,SerializationHeader,SerializationHelper)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.CurrentFormatIterator.computeNext()",1,2,3
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.CurrentFormatIterator.readStaticRow()",1,2,2
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.OldFormatIterator.OldFormatIterator(CFMetaData,DataInputPlus,SerializationHelper,DeletionTime)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.OldFormatIterator.computeNext()",4,6,7
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.OldFormatIterator.readStaticRow()",3,5,5
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.SSTableSimpleIterator(CFMetaData,DataInputPlus,SerializationHelper)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.create(CFMetaData,DataInputPlus,SerializationHeader,SerializationHelper,DeletionTime)",2,1,2
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.DiskWriter.run()",3,4,6
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.SSTableSimpleUnsortedWriter(File,CFMetaData,PartitionColumns,long)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.SyncException.SyncException(IOException)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.checkForWriterException()",3,3,3
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.close()",1,1,2
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.countRow(Row)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.createPartitionUpdate(DecoratedKey)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.getUpdateFor(DecoratedKey)",1,2,2
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.maybeSync()",1,2,3
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.put(Buffer)",3,2,4
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.sync()",2,1,2
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.SSTableSimpleWriter(File,CFMetaData,PartitionColumns)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.close()",1,5,5
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.getOrCreateWriter()",1,2,2
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.getUpdateFor(DecoratedKey)",1,3,3
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.writePartition(PartitionUpdate)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.SSTableTxnWriter(LifecycleTransaction,SSTableMultiWriter)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.append(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.create(CFMetaData,Descriptor,long,long,int,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.create(ColumnFamilyStore,Descriptor,long,long,int,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.create(ColumnFamilyStore,String,long,long,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.create(ColumnFamilyStore,String,long,long,int,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.doAbort(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.doCommit(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.doPostCleanup(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.doPrepare()",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.finish(boolean)",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.getFilePointer()",1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.getFilename()",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.SimpleSSTableMultiWriter(SSTableWriter)",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.abort(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.append(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.close()",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.commit(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.create(Descriptor,long,long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.finish(boolean)",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.finish(long,long,boolean)",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.finished()",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getCfId()",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getFilePointer()",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getFilename()",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.prepareToCommit()",1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.setOpenResult(boolean)",1,1,1
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.SnapshotDeletingTask(File)",1,1,1
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.addFailedSnapshot(File)",1,1,1
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.pendingDeletionCount()",1,1,1
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.rescheduleFailedTasks()",1,2,2
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.run()",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableFormat.Type.Type(String,SSTableFormat)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableFormat.Type.validate(String)",4,2,4
"org.apache.cassandra.io.sstable.format.SSTableReader.AndThen.AndThen(Runnable,Runnable)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.AndThen.get(Runnable,Runnable)",2,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.AndThen.run()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.DropPageCache.DropPageCache(SegmentedFile,long,SegmentedFile,long,Runnable)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.DropPageCache.run()",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.GlobalTidy(SSTableReader)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.ensureReadMeter()",3,2,4
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.get(SSTableReader)",3,3,3
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.name()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.stopReadMeterPersistence()",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.tidy()",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.InstanceTidier(Descriptor,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.name()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.releaseSummary()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.setup(SSTableReader,boolean)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.tidy()",2,8,9
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.Equals.apply(int)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.GreaterThan.apply(int)",1,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.GreaterThanOrEqualTo.apply(int)",1,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.SSTableReader(Descriptor,Set<Component>,CFMetaData,long,StatsMetadata,OpenReason,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.SizeComparator.compare(SSTableReader,SSTableReader)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.buildSummary(boolean,Builder,Builder,boolean,int)",2,8,11
"org.apache.cassandra.io.sstable.format.SSTableReader.buildSummaryAtLevel(int)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.cacheKey(DecoratedKey,RowIndexEntry)",2,3,4
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneAndReplace(DecoratedKey,OpenReason)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneAndReplace(DecoratedKey,OpenReason,IndexSummary)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithNewStart(DecoratedKey,Runnable)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithNewSummarySamplingLevel(ColumnFamilyStore,int)",3,5,5
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithRestoredStart(DecoratedKey)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.compare(List<ByteBuffer>,List<ByteBuffer>)",3,2,3
"org.apache.cassandra.io.sstable.format.SSTableReader.createLinks(String)",3,2,3
"org.apache.cassandra.io.sstable.format.SSTableReader.equals(Object)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.estimateCompactionGain(Set<SSTableReader>)",2,5,6
"org.apache.cassandra.io.sstable.format.SSTableReader.estimatedKeys()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.estimatedKeysForRanges(Collection<Range<Token>>)",1,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.firstKeyBeyond(PartitionPosition)",5,3,6
"org.apache.cassandra.io.sstable.format.SSTableReader.forceFilterFailures()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getApproximateKeyCount(Iterable<SSTableReader>)",4,10,12
"org.apache.cassandra.io.sstable.format.SSTableReader.getAvgColumnSetPerRow()",1,1,3
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilter()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterFalsePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterOffHeapSize()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterSerializedSize()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterTruePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCacheKey(DecoratedKey)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCachedPosition(DecoratedKey,boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCachedPosition(KeyCacheKey,boolean)",3,6,6
"org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionMetadata()",2,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionMetadataOffHeapSize()",2,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionRatio()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCrcCheckChance()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCreationTimeFor(Component)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getDataChannel()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getDroppableTombstonesBefore(int)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getEffectiveIndexInterval()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedColumnCount()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedDroppableTombstoneRatio(int)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedPartitionSize()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getFileDataInput(long)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getFilename()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexChannel()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexScanPosition(PartitionPosition)",1,2,3
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexScanPositionFromBinarySearchResult(int,IndexSummary)",2,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryIndexFromBinarySearchResult(int)",3,1,3
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryKey(int)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryOffHeapSize()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummarySamplingLevel()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummarySize()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCache()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCacheHit()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCacheRequest()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getKeySamples(Range<Token>)",4,4,5
"org.apache.cassandra.io.sstable.format.SSTableReader.getMaxIndexSummarySize()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMaxLocalDeletionTime()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMaxTTL()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMaxTimestamp()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMinIndexInterval()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMinLocalDeletionTime()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMinTTL()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMinTimestamp()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(PartitionPosition,Operator)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(PartitionPosition,Operator,boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getPositionsForRanges(Collection<Range<Token>>)",4,7,9
"org.apache.cassandra.io.sstable.format.SSTableReader.getReadMeter()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getRecentBloomFilterFalsePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getRecentBloomFilterTruePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getReplayPosition()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getSSTableLevel()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getSSTableMetadata()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getSampleIndexesForRanges(IndexSummary,Collection<Range<Token>>)",6,3,8
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(ColumnFilter,DataRange,boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(Range<Token>,RateLimiter)",2,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getTotalBytes(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getTotalColumnsSet()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getTotalRows()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getTotalUncompressedBytes(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.hashCode()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.incrementReadCount()",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.internalOpen(Descriptor,Set<Component>,CFMetaData,Long,StatsMetadata,OpenReason,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.internalOpen(Descriptor,Set<Component>,CFMetaData,SegmentedFile,SegmentedFile,IndexSummary,IFilter,long,StatsMetadata,OpenReason,SerializationHeader)",1,1,6
"org.apache.cassandra.io.sstable.format.SSTableReader.isKeyCacheSetup()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.isMarkedCompacted()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.isMarkedSuspect()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.isRepaired()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.isReplaced()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.load(ValidationMetadata)",1,6,6
"org.apache.cassandra.io.sstable.format.SSTableReader.load(boolean,boolean)",1,12,14
"org.apache.cassandra.io.sstable.format.SSTableReader.loadBloomFilter(boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.loadSummary(Builder,Builder)",2,3,4
"org.apache.cassandra.io.sstable.format.SSTableReader.logOpenException(Descriptor,IOException)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.markObsolete(Runnable)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.markSuspect()",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.mayOverlapsWith(SSTableReader)",2,5,6
"org.apache.cassandra.io.sstable.format.SSTableReader.mergeCardinalities(Collection<ICardinality>)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.newSince(long)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.onDiskLength()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.open(Descriptor)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.open(Descriptor,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.open(Descriptor,Set<Component>,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.open(Descriptor,Set<Component>,CFMetaData,boolean,boolean)",1,10,10
"org.apache.cassandra.io.sstable.format.SSTableReader.openAll(Set<Entry<Descriptor, Set<Component>>>,CFMetaData)",1,5,6
"org.apache.cassandra.io.sstable.format.SSTableReader.openDataReader()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.openDataReader(RateLimiter)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.openForBatch(Descriptor,Set<Component>,CFMetaData)",1,4,5
"org.apache.cassandra.io.sstable.format.SSTableReader.openIndexReader()",2,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.openNoValidation(Descriptor,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.openNoValidation(Descriptor,Set<Component>,ColumnFamilyStore)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.overrideReadMeter(RestorableMeter)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.ref()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.releaseSummary()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.reloadSSTableMetadata()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.resetTidying()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.runOnClose(Runnable)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.saveSummary(Builder,Builder)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.saveSummary(Builder,Builder,IndexSummary)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.saveSummary(Descriptor,DecoratedKey,DecoratedKey,Builder,Builder,IndexSummary)",1,4,4
"org.apache.cassandra.io.sstable.format.SSTableReader.selfRef()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.setCrcCheckChance(double)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.setReplaced()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.setup(boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.setupOnline()",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.tryRef()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.uncompressedLength()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.validate()",2,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.validateSummarySamplingLevel()",6,4,7
"org.apache.cassandra.io.sstable.format.SSTableWriter.SSTableWriter(Descriptor,long,long,CFMetaData,MetadataCollector,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.abort()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.abort(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.close()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.commit(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.components(CFMetaData)",1,3,3
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(CFMetaData,Descriptor,long,long,int,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(Descriptor,Long,Long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(Descriptor,long,long,int,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(String,long,long,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(String,long,long,int,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.finalizeMetadata()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.finish(boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.finish(long,long,boolean)",1,1,2
"org.apache.cassandra.io.sstable.format.SSTableWriter.finished()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.prepareToCommit()",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.rename(Descriptor,Descriptor,Set<Component>)",1,2,2
"org.apache.cassandra.io.sstable.format.SSTableWriter.setMaxDataAge(long)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.setOpenResult(boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.setRepairedAt(long)",1,1,2
"org.apache.cassandra.io.sstable.format.SSTableWriter.statsMetadata()",1,1,1
"org.apache.cassandra.io.sstable.format.Version.Version(SSTableFormat,String)",1,1,1
"org.apache.cassandra.io.sstable.format.Version.equals(Object)",4,3,6
"org.apache.cassandra.io.sstable.format.Version.getSSTableFormat()",1,1,1
"org.apache.cassandra.io.sstable.format.Version.getVersion()",1,1,1
"org.apache.cassandra.io.sstable.format.Version.hashCode()",1,2,2
"org.apache.cassandra.io.sstable.format.Version.toString()",1,1,1
"org.apache.cassandra.io.sstable.format.Version.validate(String)",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigFormat()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.BigVersion(String)",1,3,6
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.compressedChecksumType()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.correspondingMessagingVersion()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasBoundaries()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasCompactionAncestors()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasNewFileName()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasNewStatsFile()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasOldBfHashOrder()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasRepairedAt()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasSamplingLevel()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.isCompatible()",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.isCompatibleForStreaming()",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.isLatestVersion()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.storeRows()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.tracksLegacyCounterShards()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.uncompressedChecksumType()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.ReaderFactory.open(Descriptor,Set<Component>,CFMetaData,Long,StatsMetadata,OpenReason,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.WriterFactory.open(Descriptor,long,long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getIndexSerializer(CFMetaData,Version,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getLatestVersion()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getReaderFactory()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getVersion(String)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getWriterFactory()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.BigTableReader(Descriptor,Set<Component>,CFMetaData,Long,StatsMetadata,OpenReason,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.getPosition(PartitionPosition,Operator,boolean,boolean)",14,18,30
"org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(Collection<Range<Token>>,RateLimiter)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(ColumnFilter,DataRange,RateLimiter,boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(RateLimiter)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(DecoratedKey,ColumnFilter,boolean,boolean)",1,1,2
"org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean,boolean)",1,1,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.BigTableScanner(SSTableReader,ColumnFilter,DataRange,RateLimiter,boolean,Iterator<AbstractBounds<PartitionPosition>>)",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.EmptySSTableScanner(SSTableReader)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.getBackingFiles()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.getCurrentPosition()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.getLengthInBytes()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.hasNext()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.isForThrift()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.metadata()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.next()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.KeyScanningIterator.computeNext()",6,9,10
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.addRange(SSTableReader,AbstractBounds<PartitionPosition>,List<AbstractBounds<PartitionPosition>>)",1,10,10
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.close()",1,3,3
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.createIterator()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.fullRange(SSTableReader)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getBackingFiles()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getCurrentPosition()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getLengthInBytes()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(SSTableReader,Collection<Range<Token>>,RateLimiter)",2,1,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(SSTableReader,ColumnFilter,DataRange,RateLimiter,boolean)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(SSTableReader,RateLimiter)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.hasNext()",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.isForThrift()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.makeBounds(SSTableReader,Collection<Range<Token>>)",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.makeBounds(SSTableReader,DataRange)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.metadata()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.next()",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.remove()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.seekToCurrentRangeStart()",3,5,5
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.toString()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.BigTableWriter(Descriptor,Long,Long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.IndexWriter(long,SequentialWriter)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.append(DecoratedKey,RowIndexEntry,long)",1,3,3
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.doAbort(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.doCommit(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.doPostCleanup(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.doPrepare()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.flushBf()",2,2,3
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.getMaxReadable()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.mark()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.resetAndTruncate()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.StatsCollector(MetadataCollector)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.applyToDeletion(DeletionTime)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.applyToMarker(RangeTombstoneMarker)",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.applyToRow(Row)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.applyToStatic(Row)",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.onPartitionClose()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy.doAbort(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy.doCommit(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy.doPostCleanup(Throwable)",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy.doPrepare()",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.afterAppend(DecoratedKey,long,RowIndexEntry)",1,2,3
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.append(UnfilteredRowIterator)",3,3,4
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.beforeAppend(DecoratedKey)",2,4,4
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.getFilePointer()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.getOnDiskFilePointer()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.mark()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.maybeLogLargePartitionWarning(DecoratedKey,long)",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.openEarly()",2,1,3
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.openFinal(Descriptor,OpenReason)",1,2,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.openFinalEarly()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.resetAndTruncate()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.txnProxy()",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.writeMetadata(Descriptor,Map<MetadataType, MetadataComponent>)",1,2,2
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadata(ICardinality)",1,1,1
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadataSerializer.deserialize(Version,DataInputPlus)",1,2,2
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadataSerializer.serialize(Version,CompactionMetadata,DataOutputPlus)",1,1,1
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadataSerializer.serializedSize(Version,CompactionMetadata)",1,1,1
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.equals(Object)",3,2,4
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.getType()",1,1,1
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.hashCode()",1,1,1
"org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer.deserialize(Descriptor,EnumSet<MetadataType>)",1,9,9
"org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer.serialize(Map<MetadataType, MetadataComponent>,DataOutputPlus,Version)",1,3,6
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MetadataCollector(ClusteringComparator)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MetadataCollector(Iterable<SSTableReader>,ClusteringComparator,int)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.MinMaxIntTracker()",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.MinMaxIntTracker(int,int)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.max()",1,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.min()",1,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.update(int)",1,1,4
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.MinMaxLongTracker()",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.MinMaxLongTracker(long,long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.max()",1,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.min()",1,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.update(long)",1,1,4
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.addCellPerPartitionCount(long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.addCompressionRatio(long,long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.addKey(ByteBuffer)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.addPartitionSizeInBytes(long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultCellPerPartitionCountHistogram()",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultPartitionSizeHistogram()",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultStatsMetadata()",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultTombstoneDropTimeHistogram()",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.finalizeMetadata(String,double,long,SerializationHeader)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.makeList(ByteBuffer[])",3,3,3
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.max(ByteBuffer,ByteBuffer,AbstractType<?>)",4,1,4
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.mergeTombstoneHistogram(StreamingHistogram)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.min(ByteBuffer,ByteBuffer,AbstractType<?>)",4,1,4
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.replayPosition(ReplayPosition)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.sstableLevel(int)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(Cell)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(DeletionTime)",1,2,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(LivenessInfo)",2,2,3
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateClusteringValues(ClusteringPrefix)",1,2,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateColumnSetPerRow(long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateHasLegacyCounterShards(boolean)",1,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateLocalDeletionTime(int)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateTTL(int)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateTimestamp(long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataComponent.compareTo(MetadataComponent)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(Descriptor,EnumSet<MetadataType>)",1,2,2
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(Descriptor,FileDataInput,EnumSet<MetadataType>)",1,4,4
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(Descriptor,MetadataType)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutateLevel(Descriptor,int)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutateRepairedAt(Descriptor,long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.rewriteSSTableMetadata(Descriptor,Map<MetadataType, MetadataComponent>)",1,2,2
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.serialize(Map<MetadataType, MetadataComponent>,DataOutputPlus,Version)",1,3,3
"org.apache.cassandra.io.sstable.metadata.MetadataType.MetadataType(IMetadataComponentSerializer<MetadataComponent>)",1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadata(EstimatedHistogram,EstimatedHistogram,ReplayPosition,long,long,int,int,int,int,double,StreamingHistogram,int,List<ByteBuffer>,List<ByteBuffer>,boolean,long,long,long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadataSerializer.deserialize(Version,DataInputPlus)",1,10,10
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadataSerializer.serialize(Version,StatsMetadata,DataOutputPlus)",1,6,6
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadataSerializer.serializedSize(Version,StatsMetadata)",1,3,5
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.equals(Object)",3,2,4
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.getDroppableTombstonesBefore(int)",1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.getEstimatedDroppableTombstoneRatio(int)",2,2,2
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.getType()",1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.hashCode()",1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.mutateLevel(int)",1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.mutateRepairedAt(long)",1,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadata(String,double)",1,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadataSerializer.deserialize(Version,DataInputPlus)",1,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadataSerializer.serialize(Version,ValidationMetadata,DataOutputPlus)",1,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadataSerializer.serializedSize(Version,ValidationMetadata)",1,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.equals(Object)",3,3,5
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.getType()",1,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.hashCode()",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(FileOutputStream)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(FileOutputStream,int)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(RandomAccessFile)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(RandomAccessFile,int)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(WritableByteChannel)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(WritableByteChannel,ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(WritableByteChannel,int)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.applyToChannel(Function<WritableByteChannel, R>)",2,1,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.close()",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.doFlush()",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.flush()",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.order(ByteOrder)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(ByteBuffer)",1,5,5
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(Memory,long,long)",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(byte[])",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(byte[],int,int)",4,3,9
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(int)",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeBoolean(boolean)",1,2,3
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeByte(int)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeBytes(String)",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeChar(int)",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeChars(String)",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeDouble(double)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeExcessSlow()",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeFloat(float)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeInt(int)",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeLong(long)",1,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeShort(int)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeSlow(long,int)",1,4,4
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeUTF(String)",1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeUnsignedVInt(long)",2,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeVInt(long)",1,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.BufferedSegmentedFile(BufferedSegmentedFile)",1,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.BufferedSegmentedFile(ChannelProxy,int,long)",1,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.Builder.complete(ChannelProxy,int,long)",1,2,2
"org.apache.cassandra.io.util.BufferedSegmentedFile.sharedCopy()",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.ChannelProxy(ChannelProxy)",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.ChannelProxy(File)",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.ChannelProxy(String)",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.ChannelProxy(String,FileChannel)",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.Cleanup.Cleanup(String,FileChannel)",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.Cleanup.name()",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.Cleanup.tidy()",1,1,2
"org.apache.cassandra.io.util.ChannelProxy.filePath()",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.getFileDescriptor()",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.map(MapMode,long,long)",1,1,2
"org.apache.cassandra.io.util.ChannelProxy.openChannel(File)",1,1,2
"org.apache.cassandra.io.util.ChannelProxy.read(ByteBuffer,long)",1,1,2
"org.apache.cassandra.io.util.ChannelProxy.sharedCopy()",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.size()",1,1,2
"org.apache.cassandra.io.util.ChannelProxy.toString()",1,1,1
"org.apache.cassandra.io.util.ChannelProxy.transferTo(long,long,WritableByteChannel)",1,1,2
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.Builder.Builder(File,File)",1,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.Builder.build()",1,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.ChecksummedRandomAccessReader(Builder)",1,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.CorruptFileException.CorruptFileException(Exception,String)",1,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.close()",1,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.reBufferMmap()",1,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.reBufferStandard()",3,3,4
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.seek(long)",1,1,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.ChecksummedSequentialWriter(File,int,File)",1,1,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.TransactionalProxy.doAbort(Throwable)",1,1,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.TransactionalProxy.doCommit(Throwable)",1,1,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.TransactionalProxy.doPrepare()",1,2,2
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.flushData()",1,1,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.txnProxy()",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.Builder.Builder(CompressedSequentialWriter)",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.Builder.complete(ChannelProxy,int,long)",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.Builder.metadata(String,long)",2,2,2
"org.apache.cassandra.io.util.CompressedSegmentedFile.Cleanup.Cleanup(ChannelProxy,CompressionMetadata,MmappedRegions)",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.Cleanup.tidy()",1,3,3
"org.apache.cassandra.io.util.CompressedSegmentedFile.CompressedSegmentedFile(ChannelProxy,int,CompressionMetadata)",1,2,2
"org.apache.cassandra.io.util.CompressedSegmentedFile.CompressedSegmentedFile(ChannelProxy,int,CompressionMetadata,MmappedRegions)",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.CompressedSegmentedFile(CompressedSegmentedFile)",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.channel()",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.createReader()",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.createReader(RateLimiter)",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.dropPageCache(long)",1,2,2
"org.apache.cassandra.io.util.CompressedSegmentedFile.getMetadata()",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.regions()",1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.sharedCopy()",1,1,1
"org.apache.cassandra.io.util.DataInputBuffer.DataInputBuffer(ByteBuffer,boolean)",1,2,2
"org.apache.cassandra.io.util.DataInputBuffer.DataInputBuffer(byte[])",1,1,1
"org.apache.cassandra.io.util.DataInputBuffer.DataInputBuffer(byte[],int,int)",1,1,1
"org.apache.cassandra.io.util.DataInputBuffer.available()",1,1,1
"org.apache.cassandra.io.util.DataInputBuffer.reBuffer()",1,1,1
"org.apache.cassandra.io.util.DataInputBuffer.slice(byte[],int,int)",1,3,3
"org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus.DataInputStreamPlus(InputStream)",1,1,1
"org.apache.cassandra.io.util.DataInputPlus.readUnsignedVInt()",1,1,1
"org.apache.cassandra.io.util.DataInputPlus.readVInt()",1,1,1
"org.apache.cassandra.io.util.DataInputPlus.skipBytesFully(int)",2,1,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.ChecksumValidator(Checksum,RandomAccessReader,String)",1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.ChecksumValidator(Descriptor)",1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.chunkStart(long)",1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.close()",1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.seek(long)",1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.validate(byte[],int,int)",2,1,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter.ChecksumWriter(DataOutput)",1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter.appendDirect(ByteBuffer,boolean)",1,2,3
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter.writeChunkSize(int)",1,1,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter.writeFullChecksum(Descriptor)",2,2,3
"org.apache.cassandra.io.util.DataIntegrityMetadata.FileDigestValidator.FileDigestValidator(Descriptor)",1,2,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.FileDigestValidator.close()",1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.FileDigestValidator.validate()",2,2,3
"org.apache.cassandra.io.util.DataIntegrityMetadata.checksumValidator(Descriptor)",1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.fileDigestValidator(Descriptor)",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.DataOutputBuffer()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.DataOutputBuffer(ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.DataOutputBuffer(int)",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.GrowingChannel.close()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.GrowingChannel.isOpen()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.GrowingChannel.write(ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.buffer()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.close()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.doFlush()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.flush()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.getData()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.getLength()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.hasPosition()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.newDefaultChannel()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.position()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.reallocate(long)",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.toByteArray()",1,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.DataOutputBufferFixed()",1,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.DataOutputBufferFixed(ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.DataOutputBufferFixed(int)",1,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.doFlush()",1,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.reallocate(long)",1,1,1
"org.apache.cassandra.io.util.DataOutputPlus.hasPosition()",1,1,1
"org.apache.cassandra.io.util.DataOutputPlus.position()",1,1,1
"org.apache.cassandra.io.util.DataOutputPlus.writeUnsignedVInt(long)",1,1,1
"org.apache.cassandra.io.util.DataOutputPlus.writeVInt(long)",1,1,1
"org.apache.cassandra.io.util.DataOutputStreamPlus.DataOutputStreamPlus()",1,1,1
"org.apache.cassandra.io.util.DataOutputStreamPlus.DataOutputStreamPlus(WritableByteChannel)",1,1,1
"org.apache.cassandra.io.util.DataOutputStreamPlus.newDefaultChannel()",3,5,5
"org.apache.cassandra.io.util.DataOutputStreamPlus.retrieveTemporaryBuffer(int)",1,2,2
"org.apache.cassandra.io.util.DiskAwareRunnable.getWriteDirectory(long)",2,1,2
"org.apache.cassandra.io.util.FastByteArrayInputStream.FastByteArrayInputStream(byte[])",1,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.FastByteArrayInputStream(byte[],int,int)",1,1,2
"org.apache.cassandra.io.util.FastByteArrayInputStream.available()",1,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.close()",1,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.mark(int)",1,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.markSupported()",1,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.read()",1,1,2
"org.apache.cassandra.io.util.FastByteArrayInputStream.read(byte[],int,int)",5,1,9
"org.apache.cassandra.io.util.FastByteArrayInputStream.reset()",1,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.skip(long)",2,1,3
"org.apache.cassandra.io.util.FileSegmentInputStream.FileSegmentInputStream(ByteBuffer,String,long)",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.bytesPastMark(FileMark)",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.bytesRemaining()",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.getFilePointer()",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.getPath()",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.isEOF()",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.mark()",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.markSupported()",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.reset(FileMark)",1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.seek(long)",2,3,3
"org.apache.cassandra.io.util.FileSegmentInputStream.size()",1,1,1
"org.apache.cassandra.io.util.FileUtils.append(File,String...)",1,2,2
"org.apache.cassandra.io.util.FileUtils.appendAndSync(File,String...)",1,2,2
"org.apache.cassandra.io.util.FileUtils.atomicMoveWithFallback(Path,Path)",1,2,2
"org.apache.cassandra.io.util.FileUtils.clean(ByteBuffer)",1,4,4
"org.apache.cassandra.io.util.FileUtils.close(Closeable...)",1,1,1
"org.apache.cassandra.io.util.FileUtils.close(Iterable<? extends Closeable>)",2,4,5
"org.apache.cassandra.io.util.FileUtils.closeQuietly(AutoCloseable)",1,3,3
"org.apache.cassandra.io.util.FileUtils.closeQuietly(Closeable)",1,3,3
"org.apache.cassandra.io.util.FileUtils.closeQuietly(Iterable<? extends AutoCloseable>)",1,4,4
"org.apache.cassandra.io.util.FileUtils.copyTo(DataInput,OutputStream,int)",1,3,3
"org.apache.cassandra.io.util.FileUtils.createDirectory(File)",3,2,3
"org.apache.cassandra.io.util.FileUtils.createDirectory(String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.createHardLink(File,File)",3,1,4
"org.apache.cassandra.io.util.FileUtils.createHardLink(String,String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.createTempFile(String,String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.createTempFile(String,String,File)",1,1,2
"org.apache.cassandra.io.util.FileUtils.delete(File...)",1,2,2
"org.apache.cassandra.io.util.FileUtils.delete(String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.deleteAsync(String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.deleteRecursive(File)",1,3,3
"org.apache.cassandra.io.util.FileUtils.deleteRecursiveOnExit(File)",1,3,3
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(File)",1,1,1
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(File,boolean,Throwable)",1,4,5
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(String,boolean,Throwable)",1,1,1
"org.apache.cassandra.io.util.FileUtils.folderSize(File)",1,3,3
"org.apache.cassandra.io.util.FileUtils.getCanonicalPath(File)",1,1,2
"org.apache.cassandra.io.util.FileUtils.getCanonicalPath(String)",1,1,2
"org.apache.cassandra.io.util.FileUtils.getRelativePath(String,String)",1,2,2
"org.apache.cassandra.io.util.FileUtils.handleCorruptSSTable(CorruptSSTableException)",2,3,3
"org.apache.cassandra.io.util.FileUtils.handleFSError(FSError)",2,5,8
"org.apache.cassandra.io.util.FileUtils.handleStartupFSError(Throwable)",2,2,3
"org.apache.cassandra.io.util.FileUtils.isCleanerAvailable()",1,1,1
"org.apache.cassandra.io.util.FileUtils.isContained(File,File)",1,1,1
"org.apache.cassandra.io.util.FileUtils.isSubDirectory(File,File)",3,2,3
"org.apache.cassandra.io.util.FileUtils.readLines(File)",2,3,3
"org.apache.cassandra.io.util.FileUtils.renameWithConfirm(File,File)",1,3,3
"org.apache.cassandra.io.util.FileUtils.renameWithConfirm(String,String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.renameWithOutConfirm(String,String)",1,3,3
"org.apache.cassandra.io.util.FileUtils.replace(File,String...)",1,1,1
"org.apache.cassandra.io.util.FileUtils.stringifyFileSize(double)",5,5,5
"org.apache.cassandra.io.util.FileUtils.truncate(String,long)",1,1,2
"org.apache.cassandra.io.util.FileUtils.write(File,List<String>,StandardOpenOption...)",1,1,2
"org.apache.cassandra.io.util.LengthAvailableInputStream.LengthAvailableInputStream(InputStream,long)",1,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.available()",1,1,3
"org.apache.cassandra.io.util.LengthAvailableInputStream.close()",1,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.mark(int)",1,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.markSupported()",1,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.read()",1,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.read(byte[])",1,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.read(byte[],int,int)",1,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.reset()",1,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.skip(long)",1,1,1
"org.apache.cassandra.io.util.Memory.Memory(Memory)",1,1,1
"org.apache.cassandra.io.util.Memory.Memory(long)",3,1,3
"org.apache.cassandra.io.util.Memory.allocate(long)",3,1,3
"org.apache.cassandra.io.util.Memory.asByteBuffer(long,int)",1,1,1
"org.apache.cassandra.io.util.Memory.asByteBuffers(long,long)",2,2,3
"org.apache.cassandra.io.util.Memory.checkBounds(long,long)",1,1,3
"org.apache.cassandra.io.util.Memory.close()",1,1,1
"org.apache.cassandra.io.util.Memory.copy(long)",1,1,1
"org.apache.cassandra.io.util.Memory.equals(Object)",4,1,5
"org.apache.cassandra.io.util.Memory.free()",1,2,2
"org.apache.cassandra.io.util.Memory.getByte(long)",1,1,1
"org.apache.cassandra.io.util.Memory.getBytes(long,byte[],int,int)",4,1,6
"org.apache.cassandra.io.util.Memory.getInt(long)",2,2,2
"org.apache.cassandra.io.util.Memory.getIntByByte(long)",2,2,2
"org.apache.cassandra.io.util.Memory.getLong(long)",2,2,2
"org.apache.cassandra.io.util.Memory.getLongByByte(long)",2,2,2
"org.apache.cassandra.io.util.Memory.put(long,Memory,long,long)",1,1,1
"org.apache.cassandra.io.util.Memory.putIntByByte(long,int)",1,2,2
"org.apache.cassandra.io.util.Memory.putLongByByte(long,long)",1,2,2
"org.apache.cassandra.io.util.Memory.putShortByByte(long,short)",1,2,2
"org.apache.cassandra.io.util.Memory.setByte(long,byte)",1,1,1
"org.apache.cassandra.io.util.Memory.setByteBuffer(ByteBuffer,long,int)",1,1,1
"org.apache.cassandra.io.util.Memory.setBytes(long,ByteBuffer)",5,4,5
"org.apache.cassandra.io.util.Memory.setBytes(long,byte[],int,int)",4,1,6
"org.apache.cassandra.io.util.Memory.setInt(long,int)",1,2,2
"org.apache.cassandra.io.util.Memory.setLong(long,long)",1,2,2
"org.apache.cassandra.io.util.Memory.setMemory(long,long,byte)",1,1,1
"org.apache.cassandra.io.util.Memory.setShort(long,short)",1,2,2
"org.apache.cassandra.io.util.Memory.size()",1,1,1
"org.apache.cassandra.io.util.Memory.toString()",1,1,1
"org.apache.cassandra.io.util.Memory.toString(long,long)",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.MemoryInputStream(Memory)",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.MemoryInputStream(Memory,int)",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.available()",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.getByteBuffer(long,int)",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.memRemaining()",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.reBuffer()",2,1,2
"org.apache.cassandra.io.util.MemoryOutputStream.MemoryOutputStream(Memory)",1,1,1
"org.apache.cassandra.io.util.MemoryOutputStream.position()",1,1,1
"org.apache.cassandra.io.util.MemoryOutputStream.write(byte[],int,int)",1,1,1
"org.apache.cassandra.io.util.MemoryOutputStream.write(int)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.MmappedRegions(ChannelProxy,CompressionMetadata,long)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.MmappedRegions(MmappedRegions)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.MmappedRegions(State,CompressionMetadata,long)",1,3,3
"org.apache.cassandra.io.util.MmappedRegions.Region.Region(long,ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.Region.bottom()",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.Region.top()",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.State.State(ChannelProxy)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.State.State(State)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.State.add(long,long)",1,2,2
"org.apache.cassandra.io.util.MmappedRegions.State.close(Throwable)",2,2,3
"org.apache.cassandra.io.util.MmappedRegions.State.floor(long)",1,1,3
"org.apache.cassandra.io.util.MmappedRegions.State.getPosition()",1,2,2
"org.apache.cassandra.io.util.MmappedRegions.State.isEmpty()",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.State.isValid(ChannelProxy)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.Tidier.Tidier(State)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.Tidier.name()",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.Tidier.tidy()",1,2,2
"org.apache.cassandra.io.util.MmappedRegions.empty(ChannelProxy)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.extend(long)",3,1,3
"org.apache.cassandra.io.util.MmappedRegions.floor(long)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.isCopy()",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.isEmpty()",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.isValid(ChannelProxy)",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.map(ChannelProxy,CompressionMetadata)",2,1,2
"org.apache.cassandra.io.util.MmappedRegions.map(ChannelProxy,long)",2,1,2
"org.apache.cassandra.io.util.MmappedRegions.sharedCopy()",1,1,1
"org.apache.cassandra.io.util.MmappedRegions.updateState(CompressionMetadata)",1,5,5
"org.apache.cassandra.io.util.MmappedRegions.updateState(long)",1,2,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.Builder()",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.close(Throwable)",1,2,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.complete(ChannelProxy,int,long)",1,2,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.deserializeBounds(DataInput,Version)",2,1,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.serializeBounds(DataOutput,Version)",2,1,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.updateRegions(ChannelProxy,long)",1,5,5
"org.apache.cassandra.io.util.MmappedSegmentedFile.Cleanup.Cleanup(ChannelProxy,MmappedRegions)",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.Cleanup.tidy()",1,2,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.MmappedSegmentedFile(ChannelProxy,int,long,MmappedRegions)",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.MmappedSegmentedFile(MmappedSegmentedFile)",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.createReader()",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.createReader(RateLimiter)",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.sharedCopy()",1,1,1
"org.apache.cassandra.io.util.NIODataInputStream.NIODataInputStream(ReadableByteChannel,ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.NIODataInputStream.NIODataInputStream(ReadableByteChannel,int)",1,1,1
"org.apache.cassandra.io.util.NIODataInputStream.available()",2,3,3
"org.apache.cassandra.io.util.NIODataInputStream.close()",1,1,1
"org.apache.cassandra.io.util.NIODataInputStream.makeBuffer(int)",1,1,1
"org.apache.cassandra.io.util.NIODataInputStream.reBuffer()",1,1,2
"org.apache.cassandra.io.util.RandomAccessReader.BufferedRandomAccessFileMark.BufferedRandomAccessFileMark(long)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.Builder(ChannelProxy)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.bufferSize(int)",2,1,2
"org.apache.cassandra.io.util.RandomAccessReader.Builder.bufferType(BufferType)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.build()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.buildWithChannel()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.createBuffer()",1,2,2
"org.apache.cassandra.io.util.RandomAccessReader.Builder.limiter(RateLimiter)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.overrideLength(long)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.regions(MmappedRegions)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.setBufferSize()",2,1,3
"org.apache.cassandra.io.util.RandomAccessReader.RandomAccessReader(Builder)",1,2,2
"org.apache.cassandra.io.util.RandomAccessReader.RandomAccessReaderWithOwnChannel.RandomAccessReaderWithOwnChannel(Builder)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.RandomAccessReaderWithOwnChannel.close()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.allocateBuffer(int,BufferType)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.available()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.bytesPastMark()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.bytesPastMark(FileMark)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.bytesRemaining()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.close()",2,1,2
"org.apache.cassandra.io.util.RandomAccessReader.current()",1,2,2
"org.apache.cassandra.io.util.RandomAccessReader.getChannel()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.getFilePointer()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.getPath()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.getPosition()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.isEOF()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.length()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.mark()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.markSupported()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.open(ChannelProxy)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.open(File)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.reBuffer()",2,3,4
"org.apache.cassandra.io.util.RandomAccessReader.reBufferMmap()",1,3,3
"org.apache.cassandra.io.util.RandomAccessReader.reBufferStandard()",3,4,4
"org.apache.cassandra.io.util.RandomAccessReader.readLine()",7,8,9
"org.apache.cassandra.io.util.RandomAccessReader.releaseBuffer()",1,3,3
"org.apache.cassandra.io.util.RandomAccessReader.reset()",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.reset(FileMark)",1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.seek(long)",6,5,7
"org.apache.cassandra.io.util.RandomAccessReader.toString()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.RebufferingInputStream(ByteBuffer)",1,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.markSupported()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.read()",1,1,2
"org.apache.cassandra.io.util.RebufferingInputStream.read(byte[],int,int)",6,3,10
"org.apache.cassandra.io.util.RebufferingInputStream.readBoolean()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readByte()",3,2,3
"org.apache.cassandra.io.util.RebufferingInputStream.readChar()",2,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.readDouble()",2,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.readFloat()",2,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.readFully(byte[])",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readFully(byte[],int,int)",2,1,2
"org.apache.cassandra.io.util.RebufferingInputStream.readInt()",2,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.readLine()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readLong()",2,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.readPrimitiveSlowly(int)",1,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.readShort()",2,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.readUTF()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedByte()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedShort()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedVInt()",3,3,4
"org.apache.cassandra.io.util.RebufferingInputStream.readVInt()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.reset()",1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.skipBytes(int)",4,2,4
"org.apache.cassandra.io.util.SafeMemory.MemoryTidy.MemoryTidy(long,long)",1,1,1
"org.apache.cassandra.io.util.SafeMemory.MemoryTidy.name()",1,1,1
"org.apache.cassandra.io.util.SafeMemory.MemoryTidy.tidy()",1,2,2
"org.apache.cassandra.io.util.SafeMemory.SafeMemory(SafeMemory)",2,2,3
"org.apache.cassandra.io.util.SafeMemory.SafeMemory(long)",1,1,1
"org.apache.cassandra.io.util.SafeMemory.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.io.util.SafeMemory.checkBounds(long,long)",1,1,2
"org.apache.cassandra.io.util.SafeMemory.close()",1,1,1
"org.apache.cassandra.io.util.SafeMemory.close(Throwable)",1,1,1
"org.apache.cassandra.io.util.SafeMemory.copy(long)",1,1,1
"org.apache.cassandra.io.util.SafeMemory.free()",1,1,1
"org.apache.cassandra.io.util.SafeMemory.sharedCopy()",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.SafeMemoryWriter(SafeMemory)",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.SafeMemoryWriter(long)",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.capacity()",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.close()",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.close(Throwable)",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.currentBuffer()",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.length()",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.order(ByteOrder)",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.reallocate(long)",1,2,2
"org.apache.cassandra.io.util.SafeMemoryWriter.setCapacity(long)",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.tailBuffer(Memory)",1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.tailOffset(Memory)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.bufferSize(Descriptor,IndexSummary)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.bufferSize(StatsMetadata)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.bufferSize(long)",3,3,4
"org.apache.cassandra.io.util.SegmentedFile.Builder.buildData(Descriptor,StatsMetadata)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.buildData(Descriptor,StatsMetadata,ReadableBoundary)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.buildIndex(Descriptor,IndexSummary)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.buildIndex(Descriptor,IndexSummary,ReadableBoundary)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.close()",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.close(Throwable)",2,2,2
"org.apache.cassandra.io.util.SegmentedFile.Builder.complete(String,int,long)",1,2,2
"org.apache.cassandra.io.util.SegmentedFile.Builder.deserializeBounds(DataInput,Version)",3,1,3
"org.apache.cassandra.io.util.SegmentedFile.Builder.getChannel(String)",3,3,3
"org.apache.cassandra.io.util.SegmentedFile.Builder.roundBufferSize(long)",2,1,2
"org.apache.cassandra.io.util.SegmentedFile.Builder.serializeBounds(DataOutput,Version)",2,1,2
"org.apache.cassandra.io.util.SegmentedFile.Cleanup.Cleanup(ChannelProxy)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Cleanup.name()",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Cleanup.tidy()",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentedFile(Cleanup,ChannelProxy,int,long)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentedFile(Cleanup,ChannelProxy,int,long,long)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentedFile(SegmentedFile)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.createReader()",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.createReader(RateLimiter)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.createReader(long)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.dropPageCache(long)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.getBuilder(DiskAccessMode,boolean)",1,1,3
"org.apache.cassandra.io.util.SegmentedFile.getCompressedBuilder(CompressedSequentialWriter)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.path()",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.toString()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.BufferedFileWriterMark.BufferedFileWriterMark(long)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.SequentialWriter(File,int,BufferType)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy.doAbort(Throwable)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy.doCommit(Throwable)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy.doPreCleanup(Throwable)",1,4,4
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy.doPrepare()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.abort(Throwable)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.close()",1,2,2
"org.apache.cassandra.io.util.SequentialWriter.commit(Throwable)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.current()",1,2,2
"org.apache.cassandra.io.util.SequentialWriter.doFlush()",1,3,3
"org.apache.cassandra.io.util.SequentialWriter.finish()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.finishOnClose()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.flushData()",1,3,3
"org.apache.cassandra.io.util.SequentialWriter.getLastFlushOffset()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.getOnDiskFilePointer()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.getPath()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.hasPosition()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.isOpen()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.length()",1,2,2
"org.apache.cassandra.io.util.SequentialWriter.mark()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.open(File)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.open(File,File)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.open(String,String,CompressionParams,MetadataCollector)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.openChannel(File)",2,4,5
"org.apache.cassandra.io.util.SequentialWriter.position()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.prepareToCommit()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.resetAndTruncate(FileMark)",2,3,3
"org.apache.cassandra.io.util.SequentialWriter.resetBuffer()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.setDescriptor(Descriptor)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.setPostFlushListener(Runnable)",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.sync()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.syncDataOnlyInternal()",1,2,2
"org.apache.cassandra.io.util.SequentialWriter.syncInternal()",1,1,1
"org.apache.cassandra.io.util.SequentialWriter.truncate(long)",1,2,2
"org.apache.cassandra.io.util.SequentialWriter.txnProxy()",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.UnbufferedDataOutputStreamPlus()",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.UnbufferedDataOutputStreamPlus(WritableByteChannel)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.applyToChannel(Function<WritableByteChannel, R>)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(ByteBuffer)",1,3,3
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(Memory,long,long)",1,2,2
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(byte[])",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeBoolean(boolean)",1,1,2
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeByte(int)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeBytes(String)",1,2,2
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeChar(int)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeChars(String)",1,2,3
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeDouble(double)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeFloat(float)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeInt(int)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeLong(long)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeShort(int)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeUTF(String)",1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeUTF(String,DataOutput)",3,9,17
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.WrappedDataOutputStreamPlus(OutputStream)",1,1,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.WrappedDataOutputStreamPlus(OutputStream,WritableByteChannel)",1,1,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.close()",1,1,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.flush()",1,1,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.write(byte[],int,int)",1,1,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.write(int)",1,1,1
"org.apache.cassandra.locator.AbstractEndpointSnitch.getSortedListByProximity(InetAddress,Collection<InetAddress>)",1,1,1
"org.apache.cassandra.locator.AbstractEndpointSnitch.gossiperStarting()",1,1,1
"org.apache.cassandra.locator.AbstractEndpointSnitch.hasRemoteNode(List<InetAddress>)",3,2,3
"org.apache.cassandra.locator.AbstractEndpointSnitch.isWorthMergingForRangeQuery(List<InetAddress>,List<InetAddress>,List<InetAddress>)",1,3,3
"org.apache.cassandra.locator.AbstractEndpointSnitch.sortByProximity(InetAddress,List<InetAddress>)",1,1,1
"org.apache.cassandra.locator.AbstractNetworkTopologySnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",7,7,13
"org.apache.cassandra.locator.AbstractReplicationStrategy.AbstractReplicationStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,2,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.createInternal(String,Class<? extends AbstractReplicationStrategy>,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,2,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.createReplicationStrategy(String,Class<? extends AbstractReplicationStrategy>,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,2,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges()",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges(TokenMetadata)",1,3,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getCachedEndpoints(Token)",1,3,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getClass(String)",2,2,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getKeyspace()",1,2,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalEndpoints(RingPosition)",1,2,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.getPendingAddressRanges(TokenMetadata,Collection<Token>,InetAddress)",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getPendingAddressRanges(TokenMetadata,Token,InetAddress)",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getRangeAddresses(TokenMetadata)",1,3,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getWriteResponseHandler(Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Runnable,WriteType)",3,3,4
"org.apache.cassandra.locator.AbstractReplicationStrategy.recognizedOptions()",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.validateExpectedOptions()",4,3,4
"org.apache.cassandra.locator.AbstractReplicationStrategy.validateReplicationFactor(String)",2,1,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.validateReplicationStrategy(String,Class<? extends AbstractReplicationStrategy>,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.CloudstackSnitch.CloudstackSnitch()",2,1,2
"org.apache.cassandra.locator.CloudstackSnitch.csEndpointFromLease(File)",4,3,5
"org.apache.cassandra.locator.CloudstackSnitch.csMetadataEndpoint()",3,4,4
"org.apache.cassandra.locator.CloudstackSnitch.csQueryMetadata(String)",2,1,3
"org.apache.cassandra.locator.CloudstackSnitch.getDatacenter(InetAddress)",4,5,6
"org.apache.cassandra.locator.CloudstackSnitch.getRack(InetAddress)",4,5,6
"org.apache.cassandra.locator.DynamicEndpointSnitch.DynamicEndpointSnitch(IEndpointSnitch)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.DynamicEndpointSnitch(IEndpointSnitch,String)",1,1,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress,Map<InetAddress, Double>)",3,4,5
"org.apache.cassandra.locator.DynamicEndpointSnitch.dumpTimings(String)",1,3,3
"org.apache.cassandra.locator.DynamicEndpointSnitch.getBadnessThreshold()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getDatacenter(InetAddress)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getRack(InetAddress)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getResetInterval()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getScores()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getSeverity()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getSortedListByProximity(InetAddress,Collection<InetAddress>)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getSubsnitchClassName()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getUpdateInterval()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.gossiperStarting()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.isWorthMergingForRangeQuery(List<InetAddress>,List<InetAddress>,List<InetAddress>)",4,3,8
"org.apache.cassandra.locator.DynamicEndpointSnitch.maxScore(List<InetAddress>)",3,2,4
"org.apache.cassandra.locator.DynamicEndpointSnitch.receiveTiming(InetAddress,long)",1,2,3
"org.apache.cassandra.locator.DynamicEndpointSnitch.registerMBean()",1,1,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.reset()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.setSeverity(double)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximity(InetAddress,List<InetAddress>)",1,2,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximityWithBadness(InetAddress,List<InetAddress>)",6,4,6
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximityWithScore(InetAddress,List<InetAddress>)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.unregisterMBean()",1,1,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.updateScores()",2,5,7
"org.apache.cassandra.locator.Ec2MultiRegionSnitch.Ec2MultiRegionSnitch()",1,1,1
"org.apache.cassandra.locator.Ec2MultiRegionSnitch.gossiperStarting()",1,1,1
"org.apache.cassandra.locator.Ec2Snitch.Ec2Snitch()",1,2,2
"org.apache.cassandra.locator.Ec2Snitch.awsApiCall(String)",2,1,2
"org.apache.cassandra.locator.Ec2Snitch.getDatacenter(InetAddress)",4,5,6
"org.apache.cassandra.locator.Ec2Snitch.getRack(InetAddress)",4,5,6
"org.apache.cassandra.locator.EndpointSnitchInfo.create()",1,1,2
"org.apache.cassandra.locator.EndpointSnitchInfo.getDatacenter(String)",1,1,1
"org.apache.cassandra.locator.EndpointSnitchInfo.getRack(String)",1,1,1
"org.apache.cassandra.locator.EndpointSnitchInfo.getSnitchName()",1,1,1
"org.apache.cassandra.locator.GoogleCloudSnitch.GoogleCloudSnitch()",1,1,1
"org.apache.cassandra.locator.GoogleCloudSnitch.gceApiCall(String)",2,1,2
"org.apache.cassandra.locator.GoogleCloudSnitch.getDatacenter(InetAddress)",4,5,6
"org.apache.cassandra.locator.GoogleCloudSnitch.getRack(InetAddress)",4,5,6
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.GossipingPropertyFileSnitch()",1,1,1
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.GossipingPropertyFileSnitch(int)",1,3,3
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.getDatacenter(InetAddress)",5,6,7
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.getRack(InetAddress)",5,6,7
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.gossiperStarting()",1,1,1
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.reloadConfiguration(boolean)",2,7,9
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.reloadGossiperState()",1,3,3
"org.apache.cassandra.locator.LocalStrategy.LocalStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.LocalStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",1,1,1
"org.apache.cassandra.locator.LocalStrategy.getNaturalEndpoints(RingPosition)",1,1,1
"org.apache.cassandra.locator.LocalStrategy.getReplicationFactor()",1,1,1
"org.apache.cassandra.locator.LocalStrategy.recognizedOptions()",1,1,1
"org.apache.cassandra.locator.LocalStrategy.validateOptions()",1,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.NetworkTopologyStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",4,3,4
"org.apache.cassandra.locator.NetworkTopologyStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",3,13,14
"org.apache.cassandra.locator.NetworkTopologyStrategy.getDatacenters()",1,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.getReplicationFactor()",1,1,2
"org.apache.cassandra.locator.NetworkTopologyStrategy.getReplicationFactor(String)",1,1,2
"org.apache.cassandra.locator.NetworkTopologyStrategy.hasSufficientReplicas(Map<String, Set<InetAddress>>,Multimap<String, InetAddress>)",3,2,3
"org.apache.cassandra.locator.NetworkTopologyStrategy.hasSufficientReplicas(String,Map<String, Set<InetAddress>>,Multimap<String, InetAddress>)",1,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.recognizedOptions()",1,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.validateOptions()",3,2,3
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.OldNetworkTopologyStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",4,12,13
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.getReplicationFactor()",1,1,1
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.recognizedOptions()",1,1,1
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.validateOptions()",2,2,3
"org.apache.cassandra.locator.PropertyFileSnitch.PropertyFileSnitch()",1,2,2
"org.apache.cassandra.locator.PropertyFileSnitch.getDatacenter(InetAddress)",1,1,1
"org.apache.cassandra.locator.PropertyFileSnitch.getEndpointInfo(InetAddress)",2,1,2
"org.apache.cassandra.locator.PropertyFileSnitch.getRack(InetAddress)",1,1,1
"org.apache.cassandra.locator.PropertyFileSnitch.getRawEndpointInfo(InetAddress)",2,2,2
"org.apache.cassandra.locator.PropertyFileSnitch.gossiperStarting()",1,1,1
"org.apache.cassandra.locator.PropertyFileSnitch.reloadConfiguration(boolean)",4,12,14
"org.apache.cassandra.locator.RackInferringSnitch.getDatacenter(InetAddress)",1,1,1
"org.apache.cassandra.locator.RackInferringSnitch.getRack(InetAddress)",1,1,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.ReconnectableSnitchHelper(IEndpointSnitch,String,boolean)",1,1,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onAlive(InetAddress,EndpointState)",1,3,3
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onChange(InetAddress,ApplicationState,VersionedValue)",1,4,4
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onJoin(InetAddress,EndpointState)",1,4,4
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onRestart(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.reconnect(InetAddress,InetAddress)",1,3,3
"org.apache.cassandra.locator.ReconnectableSnitchHelper.reconnect(InetAddress,VersionedValue)",1,2,2
"org.apache.cassandra.locator.SimpleSeedProvider.SimpleSeedProvider(Map<String, String>)",1,1,1
"org.apache.cassandra.locator.SimpleSeedProvider.getSeeds()",1,3,4
"org.apache.cassandra.locator.SimpleSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",1,1,1
"org.apache.cassandra.locator.SimpleSnitch.getDatacenter(InetAddress)",1,1,1
"org.apache.cassandra.locator.SimpleSnitch.getRack(InetAddress)",1,1,1
"org.apache.cassandra.locator.SimpleSnitch.sortByProximity(InetAddress,List<InetAddress>)",1,1,1
"org.apache.cassandra.locator.SimpleStrategy.SimpleStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.SimpleStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",2,4,5
"org.apache.cassandra.locator.SimpleStrategy.getReplicationFactor()",1,1,1
"org.apache.cassandra.locator.SimpleStrategy.recognizedOptions()",1,1,1
"org.apache.cassandra.locator.SimpleStrategy.validateOptions()",2,1,2
"org.apache.cassandra.locator.SnitchProperties.SnitchProperties()",1,3,4
"org.apache.cassandra.locator.SnitchProperties.get(String,String)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.TokenMetadata()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.TokenMetadata(BiMultiValMap<Token, InetAddress>,BiMap<InetAddress, UUID>,Topology,IPartitioner)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.Topology.Topology()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.Topology.Topology(Topology)",1,2,2
"org.apache.cassandra.locator.TokenMetadata.Topology.addEndpoint(InetAddress)",3,3,4
"org.apache.cassandra.locator.TokenMetadata.Topology.clear()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.Topology.doAddEndpoint(InetAddress,String,String)",1,2,2
"org.apache.cassandra.locator.TokenMetadata.Topology.doRemoveEndpoint(InetAddress,Pair<String, String>)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.Topology.getDatacenterEndpoints()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.Topology.getDatacenterRacks()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.Topology.removeEndpoint(InetAddress)",2,1,2
"org.apache.cassandra.locator.TokenMetadata.Topology.updateEndpoint(InetAddress)",2,2,3
"org.apache.cassandra.locator.TokenMetadata.Topology.updateEndpoint(InetAddress,IEndpointSnitch)",2,2,3
"org.apache.cassandra.locator.TokenMetadata.Topology.updateEndpoints()",2,2,3
"org.apache.cassandra.locator.TokenMetadata.addBootstrapToken(Token,InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.addBootstrapTokens(Collection<Token>,InetAddress)",4,6,8
"org.apache.cassandra.locator.TokenMetadata.addLeavingEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.addMovingEndpoint(Token,InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.cachedOnlyTokenMap()",3,1,3
"org.apache.cassandra.locator.TokenMetadata.calculatePendingRanges(AbstractReplicationStrategy,String)",2,13,13
"org.apache.cassandra.locator.TokenMetadata.clearUnsafe()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.cloneAfterAllLeft()",1,2,2
"org.apache.cassandra.locator.TokenMetadata.cloneAfterAllSettled()",1,3,3
"org.apache.cassandra.locator.TokenMetadata.cloneOnlyTokenMap()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.cloneWithNewPartitioner(IPartitioner)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.firstToken(ArrayList<Token>,Token)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(ArrayList,Token,boolean)",1,2,4
"org.apache.cassandra.locator.TokenMetadata.getAllEndpoints()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getBootstrapTokens()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getEndpoint(Token)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getEndpointForHostId(UUID)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getEndpointToHostIdMapForReading()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getEndpointToTokenMapForReading()",1,2,2
"org.apache.cassandra.locator.TokenMetadata.getHostId(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getLeavingEndpoints()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getMovingEndpoints()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getNormalAndBootstrappingTokenToEndpointMap()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getPendingRanges(String)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getPendingRanges(String,InetAddress)",1,3,3
"org.apache.cassandra.locator.TokenMetadata.getPendingRangesMM(String)",1,2,3
"org.apache.cassandra.locator.TokenMetadata.getPredecessor(Token)",1,2,3
"org.apache.cassandra.locator.TokenMetadata.getPrimaryRangeFor(Token)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getPrimaryRangesFor(Collection<Token>)",1,2,2
"org.apache.cassandra.locator.TokenMetadata.getRingVersion()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getSuccessor(Token)",2,3,3
"org.apache.cassandra.locator.TokenMetadata.getToken(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getTokens(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getTopology()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getWriteEndpoints(Token,String,Collection<InetAddress>)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.invalidateCachedRings()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.isLeaving(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.isMember(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.isMoving(InetAddress)",3,2,3
"org.apache.cassandra.locator.TokenMetadata.pendingEndpointsFor(Token,String)",2,4,4
"org.apache.cassandra.locator.TokenMetadata.pendingRangeChanges(InetAddress)",1,3,4
"org.apache.cassandra.locator.TokenMetadata.printPendingRanges()",1,3,3
"org.apache.cassandra.locator.TokenMetadata.removeBootstrapTokens(Collection<Token>)",1,3,3
"org.apache.cassandra.locator.TokenMetadata.removeEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.removeFromMoving(InetAddress)",3,3,3
"org.apache.cassandra.locator.TokenMetadata.ringIterator(ArrayList<Token>,Token,boolean)",4,6,9
"org.apache.cassandra.locator.TokenMetadata.sortTokens()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.sortedTokens()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.toString()",1,8,8
"org.apache.cassandra.locator.TokenMetadata.updateHostId(UUID,InetAddress)",3,6,6
"org.apache.cassandra.locator.TokenMetadata.updateNormalToken(Token,InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.updateNormalTokens(Collection<Token>,InetAddress)",1,2,2
"org.apache.cassandra.locator.TokenMetadata.updateNormalTokens(Multimap<InetAddress, Token>)",2,7,8
"org.apache.cassandra.locator.TokenMetadata.updateTopology()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.updateTopology(InetAddress)",1,1,1
"org.apache.cassandra.metrics.BufferPoolMetrics.BufferPoolMetrics()",1,1,1
"org.apache.cassandra.metrics.CASClientRequestMetrics.CASClientRequestMetrics(String)",1,1,1
"org.apache.cassandra.metrics.CASClientRequestMetrics.release()",1,1,1
"org.apache.cassandra.metrics.CQLMetrics.CQLMetrics()",1,1,1
"org.apache.cassandra.metrics.CacheMetrics.CacheMetrics(String,ICache)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.AbstractBean.AbstractBean(ObjectName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.AbstractBean.objectName()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.CassandraMetricsRegistry()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxCounter.JmxCounter(Counter,ObjectName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxCounter.getCount()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxGauge.JmxGauge(Gauge<?>,ObjectName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxGauge.getValue()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.JmxHistogram(Histogram,ObjectName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get50thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get75thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get95thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get98thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get999thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get99thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getCount()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getMax()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getMean()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getMin()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getStdDev()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.values()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.JmxMeter(Metered,ObjectName,TimeUnit)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.calculateRateUnit(TimeUnit)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getCount()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getFifteenMinuteRate()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getFiveMinuteRate()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getMeanRate()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getOneMinuteRate()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getRateUnit()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.JmxTimer(Timer,ObjectName,TimeUnit,TimeUnit)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get50thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get75thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get95thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get98thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get999thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get99thPercentile()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getDurationUnit()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getMax()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getMean()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getMin()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getStdDev()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.values()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(Class<?>,String)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(Class<?>,String,String)",1,2,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(String,String,String)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(String,String,String,String)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(String,String,String,String,String)",3,1,4
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.chooseGroup(String,Class<?>)",1,4,4
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.chooseName(String,Method)",1,3,3
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.chooseType(String,Class<?>)",1,3,3
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.compareTo(MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.createMBeanName(String,String,String,String)",1,3,3
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.equals(Object)",3,2,4
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getGroup()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getMBeanName()",1,3,4
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getMetricName()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getName()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getScope()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getType()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.hasScope()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.hashCode()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.toString()",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.counter(MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.counter(MetricName,MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.histogram(MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.histogram(MetricName,MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.meter(MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.meter(MetricName,MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.register(MetricName,MetricName,T)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.register(MetricName,T)",1,2,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.registerAlias(MetricName,MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.registerMBean(Metric,ObjectName)",6,6,7
"org.apache.cassandra.metrics.CassandraMetricsRegistry.remove(MetricName)",1,1,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.remove(MetricName,MetricName)",2,2,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.removeAlias(MetricName)",1,1,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.timer(MetricName)",1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.timer(MetricName,MetricName)",1,1,1
"org.apache.cassandra.metrics.ClearableHistogram.ClearableHistogram(EstimatedHistogramReservoir)",1,1,1
"org.apache.cassandra.metrics.ClearableHistogram.clear()",1,1,1
"org.apache.cassandra.metrics.ClientMetrics.ClientMetrics()",1,1,1
"org.apache.cassandra.metrics.ClientMetrics.addCounter(String,Callable<Integer>)",1,1,2
"org.apache.cassandra.metrics.ClientRequestMetrics.ClientRequestMetrics(String)",1,1,1
"org.apache.cassandra.metrics.ClientRequestMetrics.release()",1,1,1
"org.apache.cassandra.metrics.CommitLogMetrics.CommitLogMetrics()",1,1,1
"org.apache.cassandra.metrics.CommitLogMetrics.attach(AbstractCommitLogService,CommitLogSegmentManager)",1,1,1
"org.apache.cassandra.metrics.CompactionMetrics.CompactionMetrics(ThreadPoolExecutor...)",1,4,4
"org.apache.cassandra.metrics.CompactionMetrics.beginCompaction(Holder)",1,1,1
"org.apache.cassandra.metrics.CompactionMetrics.finishCompaction(Holder)",1,1,1
"org.apache.cassandra.metrics.CompactionMetrics.getCompactions()",1,1,1
"org.apache.cassandra.metrics.ConnectionMetrics.ConnectionMetrics(InetAddress,OutboundTcpConnectionPool)",1,1,1
"org.apache.cassandra.metrics.ConnectionMetrics.release()",1,1,1
"org.apache.cassandra.metrics.DefaultNameFactory.DefaultNameFactory(String)",1,1,1
"org.apache.cassandra.metrics.DefaultNameFactory.DefaultNameFactory(String,String)",1,1,1
"org.apache.cassandra.metrics.DefaultNameFactory.createDefaultMBeanName(String,String,String)",1,3,3
"org.apache.cassandra.metrics.DefaultNameFactory.createMetricName(String)",1,1,1
"org.apache.cassandra.metrics.DefaultNameFactory.createMetricName(String,String,String)",1,1,1
"org.apache.cassandra.metrics.DroppedMessageMetrics.DroppedMessageMetrics(Verb)",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.EstimatedHistogramReservoir()",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.EstimatedHistogramReservoir(int)",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.HistogramSnapshot(EstimatedHistogram)",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.getMax()",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.getMean()",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.getMin()",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.getValue(double)",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.clear()",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.getSnapshot()",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.size()",1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.update(long)",1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter.DifferencingCounter(InetAddress)",1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter.count()",1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter.difference()",1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter.mark()",1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.incrCreatedHints(InetAddress)",1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.incrPastWindow(InetAddress)",1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.log()",3,2,3
"org.apache.cassandra.metrics.KeyspaceMetrics.KeyspaceMetricNameFactory.KeyspaceMetricNameFactory(Keyspace)",1,1,1
"org.apache.cassandra.metrics.KeyspaceMetrics.KeyspaceMetricNameFactory.createMetricName(String)",1,1,1
"org.apache.cassandra.metrics.KeyspaceMetrics.KeyspaceMetrics(Keyspace)",1,1,1
"org.apache.cassandra.metrics.KeyspaceMetrics.createKeyspaceGauge(String,MetricValue)",1,2,2
"org.apache.cassandra.metrics.KeyspaceMetrics.release()",1,2,2
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(MetricNameFactory,MetricNameFactory,String)",1,2,2
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(MetricNameFactory,String)",1,1,1
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(MetricNameFactory,String,LatencyMetrics...)",1,1,1
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(String,String)",1,1,1
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(String,String,String)",1,1,1
"org.apache.cassandra.metrics.LatencyMetrics.addNano(long)",1,2,2
"org.apache.cassandra.metrics.LatencyMetrics.release()",1,2,2
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.RestorableEWMA(double,long)",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.RestorableEWMA(long)",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.rate()",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.tick()",1,1,2
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.update(long)",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableMeter()",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableMeter(double,double)",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.count()",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.fifteenMinuteRate()",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.mark()",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.mark(long)",1,1,1
"org.apache.cassandra.metrics.RestorableMeter.meanRate()",2,2,2
"org.apache.cassandra.metrics.RestorableMeter.tickIfNecessary()",1,4,4
"org.apache.cassandra.metrics.RestorableMeter.twoHourRate()",1,1,1
"org.apache.cassandra.metrics.SEPMetrics.SEPMetrics(SEPExecutor,String,String)",1,1,1
"org.apache.cassandra.metrics.SEPMetrics.release()",1,1,1
"org.apache.cassandra.metrics.StreamingMetrics.StreamingMetrics(InetAddress)",1,1,1
"org.apache.cassandra.metrics.StreamingMetrics.get(InetAddress)",1,2,2
"org.apache.cassandra.metrics.TableMetrics.AllTableMetricNameFactory.AllTableMetricNameFactory(String)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.AllTableMetricNameFactory.createMetricName(String)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.TableHistogram.TableHistogram(Histogram,Histogram,Histogram)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.TableHistogram.update(long)",1,2,2
"org.apache.cassandra.metrics.TableMetrics.TableMetricNameFactory.TableMetricNameFactory(ColumnFamilyStore,String)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.TableMetricNameFactory.createMetricName(String)",1,1,2
"org.apache.cassandra.metrics.TableMetrics.TableMetrics(ColumnFamilyStore)",5,36,48
"org.apache.cassandra.metrics.TableMetrics.TableTimer.TableTimer(Timer,Timer,Timer)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.TableTimer.update(long,TimeUnit)",1,2,2
"org.apache.cassandra.metrics.TableMetrics.combineHistograms(Iterable<SSTableReader>,GetHistogram)",2,3,6
"org.apache.cassandra.metrics.TableMetrics.createTableCounter(String)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.createTableCounter(String,String)",1,3,3
"org.apache.cassandra.metrics.TableMetrics.createTableGauge(String,Gauge<T>)",1,2,2
"org.apache.cassandra.metrics.TableMetrics.createTableGauge(String,Gauge<T>,Gauge<G>)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.createTableGauge(String,String,Gauge<T>,Gauge<G>)",1,2,2
"org.apache.cassandra.metrics.TableMetrics.createTableHistogram(String,Histogram)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.createTableHistogram(String,String,Histogram)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.createTableTimer(String,String,Timer)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.createTableTimer(String,Timer)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.register(String,String,Metric)",1,1,1
"org.apache.cassandra.metrics.TableMetrics.release()",1,2,2
"org.apache.cassandra.metrics.TableMetrics.updateSSTableIterated(int)",1,1,1
"org.apache.cassandra.metrics.ThreadPoolMetricNameFactory.ThreadPoolMetricNameFactory(String,String,String)",1,1,1
"org.apache.cassandra.metrics.ThreadPoolMetricNameFactory.createMetricName(String)",1,1,1
"org.apache.cassandra.metrics.ThreadPoolMetrics.ThreadPoolMetrics(ThreadPoolExecutor,String,String)",1,1,1
"org.apache.cassandra.metrics.ThreadPoolMetrics.getJmxMetric(MBeanServerConnection,String,String,String)",5,4,6
"org.apache.cassandra.metrics.ThreadPoolMetrics.release()",1,1,1
"org.apache.cassandra.metrics.ViewWriteMetrics.ViewWriteMetrics(String)",1,1,1
"org.apache.cassandra.metrics.ViewWriteMetrics.release()",1,1,1
"org.apache.cassandra.net.AsyncOneResponse.get(long,TimeUnit)",3,3,5
"org.apache.cassandra.net.AsyncOneResponse.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.net.AsyncOneResponse.response(MessageIn<T>)",1,2,2
"org.apache.cassandra.net.CallbackInfo.CallbackInfo(InetAddress,IAsyncCallback,IVersionedSerializer<?>,boolean)",1,1,1
"org.apache.cassandra.net.CallbackInfo.isFailureCallback()",1,1,1
"org.apache.cassandra.net.CallbackInfo.shouldHint()",1,1,1
"org.apache.cassandra.net.CallbackInfo.toString()",1,1,1
"org.apache.cassandra.net.CompactEndpointSerializationHelper.deserialize(DataInput)",1,1,1
"org.apache.cassandra.net.CompactEndpointSerializationHelper.serialize(InetAddress,DataOutput)",1,1,1
"org.apache.cassandra.net.CompactEndpointSerializationHelper.serializedSize(InetAddress)",2,1,2
"org.apache.cassandra.net.IncomingStreamingConnection.IncomingStreamingConnection(int,Socket,Set<Closeable>)",1,1,1
"org.apache.cassandra.net.IncomingStreamingConnection.close()",1,3,3
"org.apache.cassandra.net.IncomingStreamingConnection.run()",2,3,3
"org.apache.cassandra.net.IncomingTcpConnection.IncomingTcpConnection(int,boolean,Socket,Set<Closeable>)",1,3,3
"org.apache.cassandra.net.IncomingTcpConnection.close()",1,3,3
"org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(DataInputPlus,int)",2,3,5
"org.apache.cassandra.net.IncomingTcpConnection.receiveMessages()",1,5,5
"org.apache.cassandra.net.IncomingTcpConnection.run()",2,5,5
"org.apache.cassandra.net.MessageDeliveryTask.MessageDeliveryTask(MessageIn,int,long,boolean)",1,1,1
"org.apache.cassandra.net.MessageDeliveryTask.handleFailure(Throwable)",1,2,2
"org.apache.cassandra.net.MessageDeliveryTask.run()",3,8,8
"org.apache.cassandra.net.MessageIn.MessageIn(InetAddress,T,Map<String, byte[]>,Verb,int)",1,1,1
"org.apache.cassandra.net.MessageIn.create(InetAddress,T,Map<String, byte[]>,Verb,int)",1,1,1
"org.apache.cassandra.net.MessageIn.doCallbackOnFailure()",1,1,1
"org.apache.cassandra.net.MessageIn.getMessageType()",1,1,1
"org.apache.cassandra.net.MessageIn.getTimeout()",1,1,1
"org.apache.cassandra.net.MessageIn.isFailureResponse()",1,1,1
"org.apache.cassandra.net.MessageIn.read(DataInputPlus,int,int)",4,6,7
"org.apache.cassandra.net.MessageIn.toString()",1,1,1
"org.apache.cassandra.net.MessageOut.MessageOut(InetAddress,Verb,T,IVersionedSerializer<T>,Map<String, byte[]>)",1,1,1
"org.apache.cassandra.net.MessageOut.MessageOut(Verb)",1,1,1
"org.apache.cassandra.net.MessageOut.MessageOut(Verb,T,IVersionedSerializer<T>)",1,2,2
"org.apache.cassandra.net.MessageOut.MessageOut(Verb,T,IVersionedSerializer<T>,Map<String, byte[]>)",1,1,1
"org.apache.cassandra.net.MessageOut.getStage()",1,1,1
"org.apache.cassandra.net.MessageOut.getTimeout()",1,1,1
"org.apache.cassandra.net.MessageOut.payloadSize(int)",3,5,5
"org.apache.cassandra.net.MessageOut.serialize(DataOutputPlus,int)",1,3,3
"org.apache.cassandra.net.MessageOut.serializedSize(int)",1,2,2
"org.apache.cassandra.net.MessageOut.toString()",1,1,1
"org.apache.cassandra.net.MessageOut.withParameter(String,byte[])",1,1,1
"org.apache.cassandra.net.MessagingService.CallbackDeterminedSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.net.MessagingService.CallbackDeterminedSerializer.serialize(Object,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.net.MessagingService.CallbackDeterminedSerializer.serializedSize(Object,int)",1,1,1
"org.apache.cassandra.net.MessagingService.DroppedMessages.DroppedMessages(Verb)",1,1,1
"org.apache.cassandra.net.MessagingService.MessagingService(boolean)",3,6,7
"org.apache.cassandra.net.MessagingService.SocketThread.SocketThread(ServerSocket,String)",1,1,1
"org.apache.cassandra.net.MessagingService.SocketThread.authenticate(Socket)",1,1,1
"org.apache.cassandra.net.MessagingService.SocketThread.close()",1,3,3
"org.apache.cassandra.net.MessagingService.SocketThread.run()",3,7,7
"org.apache.cassandra.net.MessagingService.addCallback(IAsyncCallback,MessageOut,InetAddress,long,boolean)",1,1,1
"org.apache.cassandra.net.MessagingService.addCallback(IAsyncCallback,MessageOut<?>,InetAddress,long,ConsistencyLevel,boolean)",1,1,3
"org.apache.cassandra.net.MessagingService.addLatency(InetAddress,long)",1,2,2
"org.apache.cassandra.net.MessagingService.addMessageSink(IMessageSink)",1,1,1
"org.apache.cassandra.net.MessagingService.areAllNodesAtLeast22()",1,1,1
"org.apache.cassandra.net.MessagingService.areAllNodesAtLeast30()",1,1,1
"org.apache.cassandra.net.MessagingService.clearCallbacksUnsafe()",1,1,1
"org.apache.cassandra.net.MessagingService.clearMessageSinks()",1,1,1
"org.apache.cassandra.net.MessagingService.convict(InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.destroyConnectionPool(InetAddress)",2,1,2
"org.apache.cassandra.net.MessagingService.getBits(int,int,int)",1,1,1
"org.apache.cassandra.net.MessagingService.getConnection(InetAddress,MessageOut)",1,1,1
"org.apache.cassandra.net.MessagingService.getConnectionPool(InetAddress)",1,3,3
"org.apache.cassandra.net.MessagingService.getDroppedMessages()",1,2,2
"org.apache.cassandra.net.MessagingService.getDroppedMessagesLogs()",1,3,4
"org.apache.cassandra.net.MessagingService.getGossipMessageCompletedTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getGossipMessageDroppedTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getGossipMessagePendingTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getLargeMessageCompletedTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getLargeMessageDroppedTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getLargeMessagePendingTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getLargeMessagePendingTasks(InetAddress)",1,2,2
"org.apache.cassandra.net.MessagingService.getRawVersion(InetAddress)",2,1,2
"org.apache.cassandra.net.MessagingService.getRegisteredCallback(int)",1,1,1
"org.apache.cassandra.net.MessagingService.getRegisteredCallbackAge(int)",1,1,1
"org.apache.cassandra.net.MessagingService.getServerSockets(InetAddress)",5,7,10
"org.apache.cassandra.net.MessagingService.getSmallMessageCompletedTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getSmallMessageDroppedTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getSmallMessagePendingTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getTimeoutsPerHost()",1,2,2
"org.apache.cassandra.net.MessagingService.getTotalTimeouts()",1,1,1
"org.apache.cassandra.net.MessagingService.getVerbHandler(Verb)",1,1,1
"org.apache.cassandra.net.MessagingService.getVersion(InetAddress)",2,2,2
"org.apache.cassandra.net.MessagingService.getVersion(String)",1,1,1
"org.apache.cassandra.net.MessagingService.globalPartitioner()",1,1,1
"org.apache.cassandra.net.MessagingService.handleIOException(IOException)",2,2,3
"org.apache.cassandra.net.MessagingService.incrementDroppedMessages(DroppedMessages,boolean)",1,2,2
"org.apache.cassandra.net.MessagingService.incrementDroppedMessages(Verb)",1,1,1
"org.apache.cassandra.net.MessagingService.incrementDroppedMessages(Verb,boolean)",1,1,1
"org.apache.cassandra.net.MessagingService.instance()",1,1,1
"org.apache.cassandra.net.MessagingService.isListening()",1,1,1
"org.apache.cassandra.net.MessagingService.knowsVersion(InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.listen(InetAddress)",1,2,2
"org.apache.cassandra.net.MessagingService.logDroppedMessages()",1,3,3
"org.apache.cassandra.net.MessagingService.maybeAddLatency(IAsyncCallback,InetAddress,long)",1,2,2
"org.apache.cassandra.net.MessagingService.nextId()",1,1,1
"org.apache.cassandra.net.MessagingService.receive(MessageIn,int,long,boolean)",3,3,4
"org.apache.cassandra.net.MessagingService.refreshAllNodeMinVersions()",3,1,4
"org.apache.cassandra.net.MessagingService.register(ILatencySubscriber)",1,1,1
"org.apache.cassandra.net.MessagingService.registerVerbHandlers(Verb,IVerbHandler)",1,1,1
"org.apache.cassandra.net.MessagingService.removeRegisteredCallback(int)",1,1,1
"org.apache.cassandra.net.MessagingService.resetVersion(InetAddress)",1,2,3
"org.apache.cassandra.net.MessagingService.sendOneWay(MessageOut,InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.sendOneWay(MessageOut,int,InetAddress)",3,4,5
"org.apache.cassandra.net.MessagingService.sendRR(MessageOut,InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.sendRR(MessageOut,InetAddress,IAsyncCallback)",1,1,1
"org.apache.cassandra.net.MessagingService.sendRR(MessageOut,InetAddress,IAsyncCallback,long,boolean)",1,2,2
"org.apache.cassandra.net.MessagingService.sendRR(MessageOut<?>,InetAddress,AbstractWriteResponseHandler<?>,boolean)",1,1,1
"org.apache.cassandra.net.MessagingService.sendRRWithFailure(MessageOut,InetAddress,IAsyncCallbackWithFailure)",1,1,1
"org.apache.cassandra.net.MessagingService.sendReply(MessageOut,int,InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.setCallbackForTests(int,CallbackInfo)",1,1,1
"org.apache.cassandra.net.MessagingService.setVersion(InetAddress,int)",1,2,7
"org.apache.cassandra.net.MessagingService.shutdown()",1,3,4
"org.apache.cassandra.net.MessagingService.test()",1,1,1
"org.apache.cassandra.net.MessagingService.validateMagic(int)",2,1,2
"org.apache.cassandra.net.MessagingService.validatePartitioner(AbstractBounds<?>)",2,2,2
"org.apache.cassandra.net.MessagingService.validatePartitioner(Collection<? extends AbstractBounds<?>>)",1,2,2
"org.apache.cassandra.net.MessagingService.waitUntilListening()",1,2,2
"org.apache.cassandra.net.OutboundTcpConnection.OutboundTcpConnection(OutboundTcpConnectionPool)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage.QueuedMessage(MessageOut<?>,int)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage.isTimedOut(long,long)",1,1,2
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage.shouldRetry()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage.timestampNanos()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.RetriedQueuedMessage.RetriedQueuedMessage(QueuedMessage)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.RetriedQueuedMessage.shouldRetry()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.closeSocket(boolean)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.connect()",4,15,16
"org.apache.cassandra.net.OutboundTcpConnection.disconnect()",1,4,4
"org.apache.cassandra.net.OutboundTcpConnection.enqueue(MessageOut<?>,int)",1,2,3
"org.apache.cassandra.net.OutboundTcpConnection.expireMessages()",4,2,4
"org.apache.cassandra.net.OutboundTcpConnection.getCompletedMesssages()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.getDroppedMessages()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.getPendingMessages()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.getTargetVersion()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.handshakeVersion(DataInputStream)",1,3,4
"org.apache.cassandra.net.OutboundTcpConnection.isLocalDC(InetAddress)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.newCoalescingStrategy(String)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.run()",5,9,11
"org.apache.cassandra.net.OutboundTcpConnection.shouldCompressConnection()",1,3,3
"org.apache.cassandra.net.OutboundTcpConnection.softCloseSocket()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.writeConnected(QueuedMessage,boolean)",3,11,12
"org.apache.cassandra.net.OutboundTcpConnection.writeHeader(DataOutput,int,boolean)",1,1,2
"org.apache.cassandra.net.OutboundTcpConnection.writeInternal(MessageOut,int,long)",1,2,2
"org.apache.cassandra.net.OutboundTcpConnectionPool.OutboundTcpConnectionPool(InetAddress)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.close()",1,4,4
"org.apache.cassandra.net.OutboundTcpConnectionPool.endPoint()",2,2,2
"org.apache.cassandra.net.OutboundTcpConnectionPool.getConnection(MessageOut)",2,1,3
"org.apache.cassandra.net.OutboundTcpConnectionPool.getTimeouts()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.incrementTimeout()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.isEncryptedChannel(InetAddress)",5,3,8
"org.apache.cassandra.net.OutboundTcpConnectionPool.newSocket()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.newSocket(InetAddress)",3,5,5
"org.apache.cassandra.net.OutboundTcpConnectionPool.reset()",1,2,2
"org.apache.cassandra.net.OutboundTcpConnectionPool.reset(InetAddress)",1,2,2
"org.apache.cassandra.net.OutboundTcpConnectionPool.resetToNewerVersion(int)",1,3,3
"org.apache.cassandra.net.OutboundTcpConnectionPool.start()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.waitForStarted()",3,3,5
"org.apache.cassandra.net.ResponseVerbHandler.doVerb(MessageIn,int)",2,3,3
"org.apache.cassandra.net.WriteCallbackInfo.WriteCallbackInfo(InetAddress,IAsyncCallback,MessageOut,IVersionedSerializer<?>,ConsistencyLevel,boolean)",1,1,1
"org.apache.cassandra.net.WriteCallbackInfo.getMutation(Object)",1,2,3
"org.apache.cassandra.net.WriteCallbackInfo.mutation()",1,1,1
"org.apache.cassandra.net.WriteCallbackInfo.shouldHint()",1,2,2
"org.apache.cassandra.net.WriteCallbackInfo.shouldHint(boolean,MessageOut,ConsistencyLevel)",1,1,4
"org.apache.cassandra.notifications.MemtableRenewedNotification.MemtableRenewedNotification(Memtable)",1,1,1
"org.apache.cassandra.notifications.SSTableAddedNotification.SSTableAddedNotification(Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.notifications.SSTableDeletingNotification.SSTableDeletingNotification(SSTableReader)",1,1,1
"org.apache.cassandra.notifications.SSTableListChangedNotification.SSTableListChangedNotification(Collection<SSTableReader>,Collection<SSTableReader>,OperationType)",1,1,1
"org.apache.cassandra.notifications.SSTableRepairStatusChanged.SSTableRepairStatusChanged(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.notifications.TruncationNotification.TruncationNotification(long)",1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback.AnticompactionCallback(AnticompactionTask)",1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback.onFailure(InetAddress)",1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback.response(MessageIn)",1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionTask(UUID,InetAddress,Collection<Range<Token>>)",1,1,1
"org.apache.cassandra.repair.AnticompactionTask.run()",1,3,3
"org.apache.cassandra.repair.LocalSyncTask.LocalSyncTask(RepairJobDesc,TreeResponse,TreeResponse,long)",1,1,1
"org.apache.cassandra.repair.LocalSyncTask.handleStreamEvent(StreamEvent)",3,2,7
"org.apache.cassandra.repair.LocalSyncTask.onFailure(Throwable)",1,1,1
"org.apache.cassandra.repair.LocalSyncTask.onSuccess(StreamState)",1,1,1
"org.apache.cassandra.repair.LocalSyncTask.startSync(List<Range<Token>>)",1,2,3
"org.apache.cassandra.repair.NodePair.NodePair(InetAddress,InetAddress)",1,1,1
"org.apache.cassandra.repair.NodePair.NodePairSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.repair.NodePair.NodePairSerializer.serialize(NodePair,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.repair.NodePair.NodePairSerializer.serializedSize(NodePair,int)",1,1,1
"org.apache.cassandra.repair.NodePair.equals(Object)",3,3,5
"org.apache.cassandra.repair.NodePair.hashCode()",1,1,1
"org.apache.cassandra.repair.RemoteSyncTask.RemoteSyncTask(RepairJobDesc,TreeResponse,TreeResponse)",1,1,1
"org.apache.cassandra.repair.RemoteSyncTask.startSync(List<Range<Token>>)",1,1,1
"org.apache.cassandra.repair.RemoteSyncTask.syncComplete(boolean)",1,2,2
"org.apache.cassandra.repair.RepairJob.RepairJob(RepairSession,String)",1,1,1
"org.apache.cassandra.repair.RepairJob.run()",2,8,8
"org.apache.cassandra.repair.RepairJob.sendDCAwareValidationRequest(Collection<InetAddress>)",1,5,5
"org.apache.cassandra.repair.RepairJob.sendSequentialValidationRequest(Collection<InetAddress>)",1,2,2
"org.apache.cassandra.repair.RepairJob.sendValidationRequest(Collection<InetAddress>)",1,2,2
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDesc(UUID,UUID,String,String,Collection<Range<Token>>)",1,1,1
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDescSerializer.deserialize(DataInputPlus,int)",1,4,4
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDescSerializer.serialize(RepairJobDesc,DataOutputPlus,int)",1,4,4
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDescSerializer.serializedSize(RepairJobDesc,int)",1,4,4
"org.apache.cassandra.repair.RepairJobDesc.equals(Object)",8,7,14
"org.apache.cassandra.repair.RepairJobDesc.hashCode()",1,1,1
"org.apache.cassandra.repair.RepairJobDesc.toString()",1,1,1
"org.apache.cassandra.repair.RepairMessageVerbHandler.doVerb(MessageIn<RepairMessage>,int)",3,10,17
"org.apache.cassandra.repair.RepairParallelism.RepairParallelism(String)",1,1,1
"org.apache.cassandra.repair.RepairParallelism.fromName(String)",3,2,3
"org.apache.cassandra.repair.RepairParallelism.getName()",1,1,1
"org.apache.cassandra.repair.RepairParallelism.toString()",1,1,1
"org.apache.cassandra.repair.RepairResult.RepairResult(RepairJobDesc,List<SyncStat>)",1,1,1
"org.apache.cassandra.repair.RepairRunnable.RepairRunnable(StorageService,int,RepairOption,String)",1,1,1
"org.apache.cassandra.repair.RepairRunnable.addProgressListener(ProgressListener)",1,1,1
"org.apache.cassandra.repair.RepairRunnable.addRangeToNeighbors(List<Pair<Set<InetAddress>, ? extends Collection<Range<Token>>>>,Range<Token>,Set<InetAddress>)",3,3,3
"org.apache.cassandra.repair.RepairRunnable.createQueryThread(int,UUID)",6,6,11
"org.apache.cassandra.repair.RepairRunnable.fireErrorAndComplete(String,int,int,String)",1,1,1
"org.apache.cassandra.repair.RepairRunnable.fireProgressEvent(String,ProgressEvent)",1,2,2
"org.apache.cassandra.repair.RepairRunnable.removeProgressListener(ProgressListener)",1,1,1
"org.apache.cassandra.repair.RepairRunnable.runMayThrow()",3,16,17
"org.apache.cassandra.repair.RepairSession.RepairSession(UUID,UUID,Collection<Range<Token>>,String,RepairParallelism,Set<InetAddress>,long,String...)",1,1,1
"org.apache.cassandra.repair.RepairSession.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.repair.RepairSession.convict(InetAddress,double)",4,1,4
"org.apache.cassandra.repair.RepairSession.forceShutdown(Throwable)",1,1,1
"org.apache.cassandra.repair.RepairSession.getId()",1,1,1
"org.apache.cassandra.repair.RepairSession.getRanges()",1,1,1
"org.apache.cassandra.repair.RepairSession.onAlive(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.repair.RepairSession.onChange(InetAddress,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.repair.RepairSession.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.repair.RepairSession.onJoin(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.repair.RepairSession.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.repair.RepairSession.onRestart(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.repair.RepairSession.repairedNodes()",1,2,2
"org.apache.cassandra.repair.RepairSession.start(ListeningExecutorService)",5,5,6
"org.apache.cassandra.repair.RepairSession.syncComplete(RepairJobDesc,NodePair,boolean)",2,1,2
"org.apache.cassandra.repair.RepairSession.terminate()",1,1,1
"org.apache.cassandra.repair.RepairSession.validationComplete(RepairJobDesc,InetAddress,MerkleTrees)",2,2,3
"org.apache.cassandra.repair.RepairSession.waitForSync(Pair<RepairJobDesc, NodePair>,RemoteSyncTask)",1,1,1
"org.apache.cassandra.repair.RepairSession.waitForValidation(Pair<RepairJobDesc, InetAddress>,ValidationTask)",1,1,1
"org.apache.cassandra.repair.RepairSessionResult.RepairSessionResult(UUID,String,Collection<Range<Token>>,Collection<RepairResult>)",1,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback.SnapshotCallback(SnapshotTask)",1,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback.onFailure(InetAddress)",1,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback.response(MessageIn)",1,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotTask(RepairJobDesc,InetAddress)",1,1,1
"org.apache.cassandra.repair.SnapshotTask.run()",1,1,1
"org.apache.cassandra.repair.StreamingRepairTask.StreamingRepairTask(RepairJobDesc,SyncRequest,long)",1,1,1
"org.apache.cassandra.repair.StreamingRepairTask.handleStreamEvent(StreamEvent)",1,1,1
"org.apache.cassandra.repair.StreamingRepairTask.onFailure(Throwable)",1,1,1
"org.apache.cassandra.repair.StreamingRepairTask.onSuccess(StreamState)",1,1,1
"org.apache.cassandra.repair.StreamingRepairTask.run()",1,2,2
"org.apache.cassandra.repair.SyncStat.SyncStat(NodePair,long)",1,1,1
"org.apache.cassandra.repair.SyncTask.SyncTask(RepairJobDesc,TreeResponse,TreeResponse)",1,1,1
"org.apache.cassandra.repair.SyncTask.getCurrentStat()",1,1,1
"org.apache.cassandra.repair.SyncTask.run()",2,2,2
"org.apache.cassandra.repair.SystemDistributedKeyspace.SystemDistributedKeyspace()",1,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.compile(String,String,String)",1,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.failParentRepair(UUID,Throwable)",1,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.failRepairs(UUID,String,String[],Throwable)",1,2,2
"org.apache.cassandra.repair.SystemDistributedKeyspace.failedRepairJob(UUID,String,String,Throwable)",1,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.metadata()",1,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.processSilent(String,String...)",1,3,3
"org.apache.cassandra.repair.SystemDistributedKeyspace.startParentRepair(UUID,String,String[],Collection<Range<Token>>)",1,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.startRepairs(UUID,UUID,String,String[],Collection<Range<Token>>,Iterable<InetAddress>)",1,4,4
"org.apache.cassandra.repair.SystemDistributedKeyspace.successfulParentRepair(UUID,Collection<Range<Token>>)",1,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.successfulRepairJob(UUID,String,String)",1,1,1
"org.apache.cassandra.repair.TreeResponse.TreeResponse(InetAddress,MerkleTrees)",1,1,1
"org.apache.cassandra.repair.ValidationTask.ValidationTask(RepairJobDesc,InetAddress,int)",1,1,1
"org.apache.cassandra.repair.ValidationTask.run()",1,1,1
"org.apache.cassandra.repair.ValidationTask.treesReceived(MerkleTrees)",1,2,2
"org.apache.cassandra.repair.Validator.CountingDigest.CountingDigest(MessageDigest)",1,1,1
"org.apache.cassandra.repair.Validator.CountingDigest.engineDigest()",1,1,1
"org.apache.cassandra.repair.Validator.CountingDigest.engineReset()",1,1,1
"org.apache.cassandra.repair.Validator.CountingDigest.engineUpdate(byte)",1,1,1
"org.apache.cassandra.repair.Validator.CountingDigest.engineUpdate(byte[],int,int)",1,1,1
"org.apache.cassandra.repair.Validator.Validator(RepairJobDesc,InetAddress,int)",1,1,1
"org.apache.cassandra.repair.Validator.add(UnfilteredRowIterator)",1,5,5
"org.apache.cassandra.repair.Validator.complete()",1,2,2
"org.apache.cassandra.repair.Validator.completeTree()",1,2,2
"org.apache.cassandra.repair.Validator.fail()",1,1,1
"org.apache.cassandra.repair.Validator.findCorrectRange(Token)",1,3,3
"org.apache.cassandra.repair.Validator.prepare(ColumnFamilyStore,MerkleTrees)",6,6,7
"org.apache.cassandra.repair.Validator.rowHash(UnfilteredRowIterator)",1,2,2
"org.apache.cassandra.repair.Validator.run()",1,2,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequest(UUID,Collection<Range<Token>>)",1,1,1
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequestSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequestSerializer.serialize(AnticompactionRequest,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequestSerializer.serializedSize(AnticompactionRequest,int)",1,2,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.toString()",1,1,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessage(UUID)",1,1,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessageSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessageSerializer.serialize(CleanupMessage,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessageSerializer.serializedSize(CleanupMessage,int)",1,1,1
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessage(UUID,List<UUID>,Collection<Range<Token>>,boolean,long,boolean)",1,1,1
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessageSerializer.deserialize(DataInputPlus,int)",1,3,3
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessageSerializer.serialize(PrepareMessage,DataOutputPlus,int)",1,3,3
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessageSerializer.serializedSize(PrepareMessage,int)",1,3,3
"org.apache.cassandra.repair.messages.PrepareMessage.toString()",1,1,1
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessage(Type,RepairJobDesc)",1,1,1
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessageSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessageSerializer.serialize(RepairMessage,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessageSerializer.serializedSize(RepairMessage,int)",1,1,1
"org.apache.cassandra.repair.messages.RepairMessage.Type.Type(int,MessageSerializer<RepairMessage>)",1,1,1
"org.apache.cassandra.repair.messages.RepairMessage.Type.fromByte(byte)",3,1,3
"org.apache.cassandra.repair.messages.RepairMessage.createMessage()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.RepairOption(RepairParallelism,boolean,boolean,boolean,int,Collection<Range<Token>>)",1,5,5
"org.apache.cassandra.repair.messages.RepairOption.getColumnFamilies()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.getDataCenters()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.getHosts()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.getJobThreads()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.getParallelism()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.getRanges()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.isGlobal()",1,2,2
"org.apache.cassandra.repair.messages.RepairOption.isIncremental()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.isPrimaryRange()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.isTraced()",1,1,1
"org.apache.cassandra.repair.messages.RepairOption.parse(Map<String, String>,IPartitioner)",6,12,16
"org.apache.cassandra.repair.messages.RepairOption.toString()",1,1,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessage(RepairJobDesc)",1,1,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessageSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessageSerializer.serialize(SnapshotMessage,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessageSerializer.serializedSize(SnapshotMessage,int)",1,1,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncComplete(RepairJobDesc,InetAddress,InetAddress,boolean)",1,1,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncComplete(RepairJobDesc,NodePair,boolean)",1,1,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncCompleteSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncCompleteSerializer.serialize(SyncComplete,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncCompleteSerializer.serializedSize(SyncComplete,int)",1,1,1
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequest(RepairJobDesc,InetAddress,InetAddress,InetAddress,Collection<Range<Token>>)",1,1,1
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequestSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequestSerializer.serialize(SyncRequest,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequestSerializer.serializedSize(SyncRequest,int)",1,2,2
"org.apache.cassandra.repair.messages.SyncRequest.toString()",1,1,1
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationComplete(RepairJobDesc)",1,1,1
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationComplete(RepairJobDesc,MerkleTrees)",1,1,1
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationCompleteSerializer.deserialize(DataInputPlus,int)",2,2,2
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationCompleteSerializer.serialize(ValidationComplete,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationCompleteSerializer.serializedSize(ValidationComplete,int)",1,2,2
"org.apache.cassandra.repair.messages.ValidationComplete.success()",1,1,1
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequest(RepairJobDesc,int)",1,1,1
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequestSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequestSerializer.serialize(ValidationRequest,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequestSerializer.serializedSize(ValidationRequest,int)",1,1,1
"org.apache.cassandra.repair.messages.ValidationRequest.equals(Object)",3,2,4
"org.apache.cassandra.repair.messages.ValidationRequest.hashCode()",1,1,1
"org.apache.cassandra.repair.messages.ValidationRequest.toString()",1,1,1
"org.apache.cassandra.scheduler.NoScheduler.NoScheduler()",1,1,1
"org.apache.cassandra.scheduler.NoScheduler.NoScheduler(RequestSchedulerOptions)",1,1,1
"org.apache.cassandra.scheduler.NoScheduler.queue(Thread,String,long)",1,1,1
"org.apache.cassandra.scheduler.NoScheduler.release()",1,1,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.RoundRobinScheduler(RequestSchedulerOptions)",1,2,2
"org.apache.cassandra.scheduler.RoundRobinScheduler.getTaskCount()",1,1,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.getWeight(String)",1,3,3
"org.apache.cassandra.scheduler.RoundRobinScheduler.getWeightedQueue(String)",3,1,3
"org.apache.cassandra.scheduler.RoundRobinScheduler.queue(Thread,String,long)",1,2,3
"org.apache.cassandra.scheduler.RoundRobinScheduler.release()",1,1,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.schedule()",4,4,4
"org.apache.cassandra.scheduler.WeightedQueue.Entry.Entry(Thread)",1,1,1
"org.apache.cassandra.scheduler.WeightedQueue.WeightedQueue(String,int)",1,1,1
"org.apache.cassandra.scheduler.WeightedQueue.poll()",2,1,2
"org.apache.cassandra.scheduler.WeightedQueue.put(Thread,long)",2,1,2
"org.apache.cassandra.scheduler.WeightedQueue.toString()",1,1,1
"org.apache.cassandra.schema.CQLTypeParser.parse(String,String,Types)",3,2,3
"org.apache.cassandra.schema.CQLTypeParser.parseRaw(String)",1,3,3
"org.apache.cassandra.schema.CachingParams.CachingParams(boolean,int)",1,1,1
"org.apache.cassandra.schema.CachingParams.Option.toString()",1,1,1
"org.apache.cassandra.schema.CachingParams.asMap()",1,1,1
"org.apache.cassandra.schema.CachingParams.cacheAllRows()",1,1,1
"org.apache.cassandra.schema.CachingParams.cacheKeys()",1,1,1
"org.apache.cassandra.schema.CachingParams.cacheRows()",1,1,1
"org.apache.cassandra.schema.CachingParams.equals(Object)",3,1,4
"org.apache.cassandra.schema.CachingParams.fromMap(Map<String, String>)",2,4,4
"org.apache.cassandra.schema.CachingParams.hashCode()",1,1,1
"org.apache.cassandra.schema.CachingParams.keysAsString()",1,1,2
"org.apache.cassandra.schema.CachingParams.keysFromString(String)",3,1,3
"org.apache.cassandra.schema.CachingParams.rowsPerPartitionAsString()",3,3,3
"org.apache.cassandra.schema.CachingParams.rowsPerPartitionFromString(String)",4,2,4
"org.apache.cassandra.schema.CachingParams.rowsPerPartitionToCache()",1,1,1
"org.apache.cassandra.schema.CachingParams.toString()",1,1,1
"org.apache.cassandra.schema.CompactionParams.CompactionParams(Class<? extends AbstractCompactionStrategy>,Map<String, String>,boolean)",1,1,1
"org.apache.cassandra.schema.CompactionParams.Option.toString()",1,1,1
"org.apache.cassandra.schema.CompactionParams.asMap()",1,1,1
"org.apache.cassandra.schema.CompactionParams.classFromName(String)",2,2,3
"org.apache.cassandra.schema.CompactionParams.create(Class<? extends AbstractCompactionStrategy>,Map<String, String>)",1,3,3
"org.apache.cassandra.schema.CompactionParams.defaultBloomFilterFbChance()",1,1,2
"org.apache.cassandra.schema.CompactionParams.equals(Object)",3,2,4
"org.apache.cassandra.schema.CompactionParams.fromMap(Map<String, String>)",2,2,2
"org.apache.cassandra.schema.CompactionParams.hashCode()",1,1,1
"org.apache.cassandra.schema.CompactionParams.isEnabled()",1,1,1
"org.apache.cassandra.schema.CompactionParams.klass()",1,1,1
"org.apache.cassandra.schema.CompactionParams.lcs(Map<String, String>)",1,1,1
"org.apache.cassandra.schema.CompactionParams.maxCompactionThreshold()",1,2,2
"org.apache.cassandra.schema.CompactionParams.minCompactionThreshold()",1,2,2
"org.apache.cassandra.schema.CompactionParams.options()",1,1,1
"org.apache.cassandra.schema.CompactionParams.scts(Map<String, String>)",1,1,1
"org.apache.cassandra.schema.CompactionParams.supportsThresholdParams(Class<? extends AbstractCompactionStrategy>)",1,1,2
"org.apache.cassandra.schema.CompactionParams.toString()",1,1,1
"org.apache.cassandra.schema.CompactionParams.validate()",8,14,15
"org.apache.cassandra.schema.CompressionParams.CompressionParams(ICompressor,Integer,Map<String, String>)",1,1,1
"org.apache.cassandra.schema.CompressionParams.CompressionParams(String,Integer,Map<String, String>)",1,1,1
"org.apache.cassandra.schema.CompressionParams.Serializer.deserialize(DataInputPlus,int)",1,2,3
"org.apache.cassandra.schema.CompressionParams.Serializer.serialize(CompressionParams,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.schema.CompressionParams.Serializer.serializedSize(CompressionParams,int)",1,2,2
"org.apache.cassandra.schema.CompressionParams.asMap()",2,2,2
"org.apache.cassandra.schema.CompressionParams.chunkLength()",1,1,2
"org.apache.cassandra.schema.CompressionParams.chunkLengthInKB()",1,1,1
"org.apache.cassandra.schema.CompressionParams.containsSstableCompressionClass(Map<String, String>)",1,2,2
"org.apache.cassandra.schema.CompressionParams.copy()",1,1,1
"org.apache.cassandra.schema.CompressionParams.copyOptions(Map<? extends CharSequence, ? extends CharSequence>)",2,4,4
"org.apache.cassandra.schema.CompressionParams.createCompressor(Class<?>,Map<String, String>)",6,11,14
"org.apache.cassandra.schema.CompressionParams.createCompressor(ParameterizedClass)",1,1,1
"org.apache.cassandra.schema.CompressionParams.deflate()",1,1,1
"org.apache.cassandra.schema.CompressionParams.deflate(Integer)",1,1,1
"org.apache.cassandra.schema.CompressionParams.equals(Object)",3,3,4
"org.apache.cassandra.schema.CompressionParams.fromMap(Map<String, String>)",4,6,6
"org.apache.cassandra.schema.CompressionParams.getCrcCheckChance()",1,1,1
"org.apache.cassandra.schema.CompressionParams.getOtherOptions()",1,1,1
"org.apache.cassandra.schema.CompressionParams.getSstableCompressor()",1,1,1
"org.apache.cassandra.schema.CompressionParams.hashCode()",1,1,1
"org.apache.cassandra.schema.CompressionParams.isEnabled()",1,1,1
"org.apache.cassandra.schema.CompressionParams.isEnabled(Map<String, String>)",1,2,2
"org.apache.cassandra.schema.CompressionParams.klass()",1,1,1
"org.apache.cassandra.schema.CompressionParams.lz4()",1,1,1
"org.apache.cassandra.schema.CompressionParams.lz4(Integer)",1,1,1
"org.apache.cassandra.schema.CompressionParams.noCompression()",1,1,1
"org.apache.cassandra.schema.CompressionParams.parseChunkLength(String)",3,2,4
"org.apache.cassandra.schema.CompressionParams.parseCompressorClass(String)",2,2,5
"org.apache.cassandra.schema.CompressionParams.removeChunkLength(Map<String, String>)",4,5,5
"org.apache.cassandra.schema.CompressionParams.removeEnabled(Map<String, String>)",1,2,2
"org.apache.cassandra.schema.CompressionParams.removeSstableCompressionClass(Map<String, String>)",4,6,6
"org.apache.cassandra.schema.CompressionParams.setCrcCheckChance(double)",1,1,1
"org.apache.cassandra.schema.CompressionParams.snappy()",1,1,1
"org.apache.cassandra.schema.CompressionParams.snappy(Integer)",1,1,1
"org.apache.cassandra.schema.CompressionParams.validate()",6,1,6
"org.apache.cassandra.schema.Functions.Builder.Builder()",1,1,1
"org.apache.cassandra.schema.Functions.Builder.add(Function)",1,1,1
"org.apache.cassandra.schema.Functions.Builder.add(Function...)",1,2,2
"org.apache.cassandra.schema.Functions.Builder.add(Iterable<? extends Function>)",1,1,1
"org.apache.cassandra.schema.Functions.Builder.build()",1,1,1
"org.apache.cassandra.schema.Functions.Functions(Builder)",1,1,1
"org.apache.cassandra.schema.Functions.aggregatesUsingFunction(Function)",1,1,1
"org.apache.cassandra.schema.Functions.builder()",1,1,1
"org.apache.cassandra.schema.Functions.equals(Object)",1,3,3
"org.apache.cassandra.schema.Functions.find(FunctionName,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.schema.Functions.get(FunctionName)",1,1,1
"org.apache.cassandra.schema.Functions.hashCode()",1,1,1
"org.apache.cassandra.schema.Functions.iterator()",1,1,1
"org.apache.cassandra.schema.Functions.none()",1,1,1
"org.apache.cassandra.schema.Functions.of(Function...)",1,1,1
"org.apache.cassandra.schema.Functions.stream()",1,1,1
"org.apache.cassandra.schema.Functions.toString()",1,1,1
"org.apache.cassandra.schema.Functions.typeHashCode(AbstractType<?>)",1,1,1
"org.apache.cassandra.schema.Functions.typeHashCode(List<AbstractType<?>>)",1,2,2
"org.apache.cassandra.schema.Functions.typesMatch(AbstractType<?>,AbstractType<?>)",1,1,1
"org.apache.cassandra.schema.Functions.typesMatch(List<AbstractType<?>>,List<AbstractType<?>>)",4,2,4
"org.apache.cassandra.schema.Functions.udas()",1,1,1
"org.apache.cassandra.schema.Functions.udfs()",1,1,1
"org.apache.cassandra.schema.Functions.with(Function)",2,2,2
"org.apache.cassandra.schema.Functions.without(FunctionName,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.schema.IndexMetadata.IndexMetadata(String,Map<String, String>,Kind)",1,2,2
"org.apache.cassandra.schema.IndexMetadata.Serializer.deserialize(DataInputPlus,int,CFMetaData)",1,1,1
"org.apache.cassandra.schema.IndexMetadata.Serializer.serialize(IndexMetadata,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.schema.IndexMetadata.Serializer.serializedSize(IndexMetadata,int)",1,1,1
"org.apache.cassandra.schema.IndexMetadata.equals(Object)",3,3,5
"org.apache.cassandra.schema.IndexMetadata.equalsWithoutName(IndexMetadata)",1,2,2
"org.apache.cassandra.schema.IndexMetadata.fromIndexTargets(CFMetaData,List<IndexTarget>,String,Kind,Map<String, String>)",1,1,1
"org.apache.cassandra.schema.IndexMetadata.fromLegacyMetadata(CFMetaData,ColumnDefinition,String,Kind,Map<String, String>)",1,5,6
"org.apache.cassandra.schema.IndexMetadata.fromSchemaMetadata(String,Kind,Map<String, String>)",1,1,1
"org.apache.cassandra.schema.IndexMetadata.getDefaultIndexName(String,String)",2,2,2
"org.apache.cassandra.schema.IndexMetadata.hashCode()",1,1,1
"org.apache.cassandra.schema.IndexMetadata.isComposites()",1,1,1
"org.apache.cassandra.schema.IndexMetadata.isCustom()",1,1,1
"org.apache.cassandra.schema.IndexMetadata.isKeys()",1,1,1
"org.apache.cassandra.schema.IndexMetadata.isNameValid(String)",1,3,3
"org.apache.cassandra.schema.IndexMetadata.toString()",1,1,1
"org.apache.cassandra.schema.IndexMetadata.validate()",6,5,7
"org.apache.cassandra.schema.IndexMetadata.validateCustomIndexOptions(Class<? extends Index>,Map<String, String>)",4,5,8
"org.apache.cassandra.schema.Indexes.Builder.Builder()",1,1,1
"org.apache.cassandra.schema.Indexes.Builder.add(IndexMetadata)",1,1,1
"org.apache.cassandra.schema.Indexes.Builder.add(Iterable<IndexMetadata>)",1,1,1
"org.apache.cassandra.schema.Indexes.Builder.build()",1,1,1
"org.apache.cassandra.schema.Indexes.Indexes(Builder)",1,1,1
"org.apache.cassandra.schema.Indexes.builder()",1,1,1
"org.apache.cassandra.schema.Indexes.equals(Object)",1,3,3
"org.apache.cassandra.schema.Indexes.get(String)",1,1,1
"org.apache.cassandra.schema.Indexes.get(UUID)",1,1,1
"org.apache.cassandra.schema.Indexes.getAvailableIndexName(String,String,String)",1,2,3
"org.apache.cassandra.schema.Indexes.has(String)",1,1,1
"org.apache.cassandra.schema.Indexes.has(UUID)",1,1,1
"org.apache.cassandra.schema.Indexes.hashCode()",1,1,1
"org.apache.cassandra.schema.Indexes.isEmpty()",1,1,1
"org.apache.cassandra.schema.Indexes.iterator()",1,1,1
"org.apache.cassandra.schema.Indexes.none()",1,1,1
"org.apache.cassandra.schema.Indexes.replace(IndexMetadata)",1,1,1
"org.apache.cassandra.schema.Indexes.size()",1,1,1
"org.apache.cassandra.schema.Indexes.toString()",1,1,1
"org.apache.cassandra.schema.Indexes.with(IndexMetadata)",2,2,2
"org.apache.cassandra.schema.Indexes.without(String)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.KeyspaceMetadata(String,KeyspaceParams,Tables,Views,Types,Functions)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.create(String,KeyspaceParams)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.create(String,KeyspaceParams,Tables)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.create(String,KeyspaceParams,Tables,Views,Types,Functions)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.equals(Object)",3,6,8
"org.apache.cassandra.schema.KeyspaceMetadata.existingIndexNames(String)",1,5,5
"org.apache.cassandra.schema.KeyspaceMetadata.findIndexedTable(String)",3,3,3
"org.apache.cassandra.schema.KeyspaceMetadata.getTableOrViewNullable(String)",1,2,2
"org.apache.cassandra.schema.KeyspaceMetadata.hashCode()",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.tablesAndViews()",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.toString()",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.validate()",2,2,2
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(Functions)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(KeyspaceParams)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(Tables)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(Types)",1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(Views)",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.KeyspaceParams(boolean,ReplicationParams)",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.Option.toString()",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.create(boolean,Map<String, String>)",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.equals(Object)",3,2,4
"org.apache.cassandra.schema.KeyspaceParams.hashCode()",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.local()",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.simple(int)",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.simpleTransient(int)",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.toString()",1,1,1
"org.apache.cassandra.schema.KeyspaceParams.validate(String)",1,1,1
"org.apache.cassandra.schema.Keyspaces.Builder.Builder()",1,1,1
"org.apache.cassandra.schema.Keyspaces.Builder.add(Iterable<KeyspaceMetadata>)",1,1,1
"org.apache.cassandra.schema.Keyspaces.Builder.add(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.schema.Keyspaces.Builder.add(KeyspaceMetadata...)",1,2,2
"org.apache.cassandra.schema.Keyspaces.Builder.build()",1,1,1
"org.apache.cassandra.schema.Keyspaces.Keyspaces(Builder)",1,1,1
"org.apache.cassandra.schema.Keyspaces.builder()",1,1,1
"org.apache.cassandra.schema.Keyspaces.diff(Keyspaces)",1,1,1
"org.apache.cassandra.schema.Keyspaces.equals(Object)",1,3,3
"org.apache.cassandra.schema.Keyspaces.filter(Predicate<KeyspaceMetadata>)",1,1,1
"org.apache.cassandra.schema.Keyspaces.hashCode()",1,1,1
"org.apache.cassandra.schema.Keyspaces.iterator()",1,1,1
"org.apache.cassandra.schema.Keyspaces.none()",1,1,1
"org.apache.cassandra.schema.Keyspaces.of(KeyspaceMetadata...)",1,1,1
"org.apache.cassandra.schema.Keyspaces.stream()",1,1,1
"org.apache.cassandra.schema.Keyspaces.toString()",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Aggregate.Aggregate(long,UDAggregate)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Function.Function(long,UDFunction)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Keyspace.Keyspace(long,String,KeyspaceParams,Collection<Table>,Collection<Type>,Collection<Function>,Collection<Aggregate>)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.LegacySchemaMigrator()",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Table.Table(long,CFMetaData)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Type.Type(long,UserType)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.addDefinitionForUpgrade(List<ColumnDefinition>,String,String,boolean,boolean,AbstractType<?>,AbstractType<?>,AbstractType<?>)",1,3,3
"org.apache.cassandra.schema.LegacySchemaMigrator.addDroppedColumns(CFMetaData,AbstractType<?>,Map<String, Long>)",1,4,4
"org.apache.cassandra.schema.LegacySchemaMigrator.checkNeedsUpgrade(UntypedResultSet,boolean,boolean)",5,4,5
"org.apache.cassandra.schema.LegacySchemaMigrator.compactionFromRow(Row)",1,1,3
"org.apache.cassandra.schema.LegacySchemaMigrator.createColumnFromColumnRow(Row,String,String,AbstractType<?>,AbstractType<?>,boolean,boolean,boolean,boolean)",1,4,7
"org.apache.cassandra.schema.LegacySchemaMigrator.createColumnsFromColumnRows(UntypedResultSet,String,String,AbstractType<?>,AbstractType<?>,boolean,boolean,boolean,boolean)",3,2,3
"org.apache.cassandra.schema.LegacySchemaMigrator.createIndexesFromColumnRows(CFMetaData,UntypedResultSet,String,String,AbstractType<?>,AbstractType<?>,boolean,boolean,boolean,boolean)",3,5,6
"org.apache.cassandra.schema.LegacySchemaMigrator.createTriggerFromTriggerRow(Row)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.createTriggersFromTriggerRows(UntypedResultSet)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.decodeTableMetadata(Row,UntypedResultSet,UntypedResultSet)",1,6,9
"org.apache.cassandra.schema.LegacySchemaMigrator.decodeTableParams(Row)",1,9,9
"org.apache.cassandra.schema.LegacySchemaMigrator.deserializeKind(String)",3,1,3
"org.apache.cassandra.schema.LegacySchemaMigrator.hasKind(UntypedResultSet,Kind)",3,2,3
"org.apache.cassandra.schema.LegacySchemaMigrator.hasRegularColumns(UntypedResultSet)",4,2,4
"org.apache.cassandra.schema.LegacySchemaMigrator.isEmptyCompactValueColumn(Row)",1,2,2
"org.apache.cassandra.schema.LegacySchemaMigrator.migrate()",2,2,2
"org.apache.cassandra.schema.LegacySchemaMigrator.parseType(String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.query(String,Object...)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readAggregate(Functions,String,String,List<String>)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readAggregateMetadata(Functions,String,String,List<String>)",1,6,6
"org.apache.cassandra.schema.LegacySchemaMigrator.readAggregateTimestamp(String,String,List<String>)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readAggregates(Functions,String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readFunction(String,String,List<String>)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readFunctionMetadata(String,String,List<String>)",1,6,6
"org.apache.cassandra.schema.LegacySchemaMigrator.readFunctionTimestamp(String,String,List<String>)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readFunctions(String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readKeyspace(String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readKeyspaceParams(String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readKeyspaceTimestamp(String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readSchema()",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTable(String,String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTableMetadata(String,String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTableTimestamp(String,String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTables(String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readType(String,String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTypeMetadata(String,String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTypeTimestamp(String,String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTypes(String)",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.storeKeyspaceInNewSchemaTables(Keyspace)",1,5,5
"org.apache.cassandra.schema.LegacySchemaMigrator.truncateLegacySchemaTables()",1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.unloadLegacySchemaTables()",1,2,2
"org.apache.cassandra.schema.ReplicationParams.ReplicationParams(Class<? extends AbstractReplicationStrategy>,Map<String, String>)",1,1,1
"org.apache.cassandra.schema.ReplicationParams.asMap()",1,1,1
"org.apache.cassandra.schema.ReplicationParams.equals(Object)",3,2,4
"org.apache.cassandra.schema.ReplicationParams.fromMap(Map<String, String>)",1,1,1
"org.apache.cassandra.schema.ReplicationParams.hashCode()",1,1,1
"org.apache.cassandra.schema.ReplicationParams.local()",1,1,1
"org.apache.cassandra.schema.ReplicationParams.simple(int)",1,1,1
"org.apache.cassandra.schema.ReplicationParams.toString()",1,2,2
"org.apache.cassandra.schema.ReplicationParams.validate(String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.SchemaKeyspace()",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addAggregateToSchemaMutation(UDAggregate,long,Mutation)",1,3,3
"org.apache.cassandra.schema.SchemaKeyspace.addColumnToSchemaMutation(CFMetaData,ColumnDefinition,long,Mutation)",1,2,3
"org.apache.cassandra.schema.SchemaKeyspace.addDroppedColumnToSchemaMutation(CFMetaData,DroppedColumn,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addFunctionToSchemaMutation(UDFunction,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addIndexToSchemaMutation(CFMetaData,IndexMetadata,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addTableParamsToSchemaMutation(TableParams,RowUpdateBuilder)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addTableToSchemaMutation(CFMetaData,long,boolean,Mutation)",1,6,6
"org.apache.cassandra.schema.SchemaKeyspace.addTriggerToSchemaMutation(CFMetaData,TriggerMetadata,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addTypeToSchemaMutation(UserType,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addUpdatedIndexToSchemaMutation(CFMetaData,IndexMetadata,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addViewToSchemaMutation(ViewDefinition,long,boolean,Mutation)",1,4,4
"org.apache.cassandra.schema.SchemaKeyspace.bbToString(ByteBuffer)",1,1,2
"org.apache.cassandra.schema.SchemaKeyspace.calculateSchemaDigest()",1,4,5
"org.apache.cassandra.schema.SchemaKeyspace.compile(String,String,String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.convertSchemaToMutations()",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.convertSchemaToMutations(Map<DecoratedKey, Mutation>,String)",3,3,4
"org.apache.cassandra.schema.SchemaKeyspace.createColumnFromRow(Row,Types)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.createDroppedColumnFromRow(Row)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.createIndexMetadataFromRow(Row)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.createTableParamsFromRow(Row)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.createTriggerFromRow(Row)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.createUDAFromRow(Row,Functions,Types)",1,5,5
"org.apache.cassandra.schema.SchemaKeyspace.createUDFFromRow(Row,Types)",3,11,11
"org.apache.cassandra.schema.SchemaKeyspace.dropColumnFromSchemaMutation(CFMetaData,ColumnDefinition,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.dropIndexFromSchemaMutation(CFMetaData,IndexMetadata,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.dropTriggerFromSchemaMutation(CFMetaData,TriggerMetadata,long,Mutation)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.dropTypeFromSchemaMutation(KeyspaceMetadata,UserType,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.expandUserTypes(AbstractType<?>)",8,8,8
"org.apache.cassandra.schema.SchemaKeyspace.expandUserTypes(List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchColumns(String,String,Types)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchDroppedColumns(String,String)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchFunctions(String,Types)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchIndexes(String,String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspace(String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspaceParams(String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspacesOnly(Set<String>)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspacesWithout(Set<String>)",1,3,3
"org.apache.cassandra.schema.SchemaKeyspace.fetchNonSystemKeyspaces()",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchTable(String,String,Types)",2,2,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchTables(String,Types)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchTriggers(String,String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchTypes(String)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchUDAs(String,Functions,Types)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchUDFs(String,Types)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchView(String,String,Types)",2,2,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchViews(String,Types)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.flush()",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.functionArgumentsList(AbstractFunction)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.getReadCommandForTableSchema(String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.getSchemaCFS(String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.getSchemaKSKey(String)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.indexesDiff(Indexes,Indexes)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.isSystemKeyspaceSchemaPartition(DecoratedKey)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateAggregateMutation(KeyspaceMetadata,UDAggregate,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateFunctionMutation(KeyspaceMetadata,UDFunction,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateKeyspaceMutation(KeyspaceMetadata,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateKeyspaceMutation(String,KeyspaceParams,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateTableMutation(KeyspaceMetadata,CFMetaData,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateTypeMutation(KeyspaceMetadata,UserType,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateViewMutation(KeyspaceMetadata,ViewDefinition,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeDropAggregateMutation(KeyspaceMetadata,UDAggregate,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeDropFunctionMutation(KeyspaceMetadata,UDFunction,long)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeDropKeyspaceMutation(KeyspaceMetadata,long)",1,2,2
"org.apache.cassandra.schema.SchemaKeyspace.makeDropTableMutation(KeyspaceMetadata,CFMetaData,long)",1,4,4
"org.apache.cassandra.schema.SchemaKeyspace.makeDropViewMutation(KeyspaceMetadata,ViewDefinition,long)",1,3,3
"org.apache.cassandra.schema.SchemaKeyspace.makeUpdateTableMutation(KeyspaceMetadata,CFMetaData,CFMetaData,long,boolean)",1,15,15
"org.apache.cassandra.schema.SchemaKeyspace.makeUpdateViewMutation(KeyspaceMetadata,ViewDefinition,ViewDefinition,long)",1,6,6
"org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(Collection<Mutation>)",1,5,5
"org.apache.cassandra.schema.SchemaKeyspace.mergeSchemaAndAnnounceVersion(Collection<Mutation>)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.metadata()",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.query(String,Object...)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.saveSystemKeyspacesSchema()",1,3,3
"org.apache.cassandra.schema.SchemaKeyspace.triggersDiff(Triggers,Triggers)",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.truncate()",1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.updateKeyspace(String,KeyspaceMetadata,KeyspaceMetadata)",1,7,7
"org.apache.cassandra.schema.SpeculativeRetryParam.SpeculativeRetryParam(Kind,double)",1,3,3
"org.apache.cassandra.schema.SpeculativeRetryParam.always()",1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.custom(double)",1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.equals(Object)",2,1,3
"org.apache.cassandra.schema.SpeculativeRetryParam.fromString(String)",6,6,9
"org.apache.cassandra.schema.SpeculativeRetryParam.hashCode()",1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.kind()",1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.none()",1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.percentile(double)",1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.threshold()",1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.toString()",4,4,4
"org.apache.cassandra.schema.TableParams.Builder.Builder()",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.bloomFilterFpChance(double)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.build()",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.caching(CachingParams)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.comment(String)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.compaction(CompactionParams)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.compression(CompressionParams)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.crcCheckChance(double)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.dcLocalReadRepairChance(double)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.defaultTimeToLive(int)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.extensions(Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.gcGraceSeconds(int)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.maxIndexInterval(int)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.memtableFlushPeriodInMs(int)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.minIndexInterval(int)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.readRepairChance(double)",1,1,1
"org.apache.cassandra.schema.TableParams.Builder.speculativeRetry(SpeculativeRetryParam)",1,1,1
"org.apache.cassandra.schema.TableParams.Option.toString()",1,1,1
"org.apache.cassandra.schema.TableParams.TableParams(Builder)",1,2,2
"org.apache.cassandra.schema.TableParams.builder()",1,1,1
"org.apache.cassandra.schema.TableParams.builder(TableParams)",1,1,1
"org.apache.cassandra.schema.TableParams.equals(Object)",3,15,17
"org.apache.cassandra.schema.TableParams.fail(String,Object...)",1,1,1
"org.apache.cassandra.schema.TableParams.hashCode()",1,1,1
"org.apache.cassandra.schema.TableParams.toString()",1,1,1
"org.apache.cassandra.schema.TableParams.validate()",1,10,14
"org.apache.cassandra.schema.Tables.Builder.Builder()",1,1,1
"org.apache.cassandra.schema.Tables.Builder.add(CFMetaData)",1,1,1
"org.apache.cassandra.schema.Tables.Builder.add(CFMetaData...)",1,2,2
"org.apache.cassandra.schema.Tables.Builder.add(Iterable<CFMetaData>)",1,1,1
"org.apache.cassandra.schema.Tables.Builder.build()",1,1,1
"org.apache.cassandra.schema.Tables.Tables(Builder)",1,1,1
"org.apache.cassandra.schema.Tables.builder()",1,1,1
"org.apache.cassandra.schema.Tables.diff(Tables)",1,1,1
"org.apache.cassandra.schema.Tables.equals(Object)",1,3,3
"org.apache.cassandra.schema.Tables.get(String)",1,1,1
"org.apache.cassandra.schema.Tables.getNullable(String)",1,1,1
"org.apache.cassandra.schema.Tables.hashCode()",1,1,1
"org.apache.cassandra.schema.Tables.iterator()",1,1,1
"org.apache.cassandra.schema.Tables.none()",1,1,1
"org.apache.cassandra.schema.Tables.of(CFMetaData...)",1,1,1
"org.apache.cassandra.schema.Tables.of(Iterable<CFMetaData>)",1,1,1
"org.apache.cassandra.schema.Tables.size()",1,1,1
"org.apache.cassandra.schema.Tables.toString()",1,1,1
"org.apache.cassandra.schema.Tables.with(CFMetaData)",2,2,2
"org.apache.cassandra.schema.Tables.without(String)",1,1,1
"org.apache.cassandra.schema.TriggerMetadata.TriggerMetadata(String,String)",1,1,1
"org.apache.cassandra.schema.TriggerMetadata.create(String,String)",1,1,1
"org.apache.cassandra.schema.TriggerMetadata.equals(Object)",3,2,4
"org.apache.cassandra.schema.TriggerMetadata.hashCode()",1,1,1
"org.apache.cassandra.schema.TriggerMetadata.toString()",1,1,1
"org.apache.cassandra.schema.Triggers.Builder.Builder()",1,1,1
"org.apache.cassandra.schema.Triggers.Builder.add(Iterable<TriggerMetadata>)",1,1,1
"org.apache.cassandra.schema.Triggers.Builder.add(TriggerMetadata)",1,1,1
"org.apache.cassandra.schema.Triggers.Builder.build()",1,1,1
"org.apache.cassandra.schema.Triggers.Triggers(Builder)",1,1,1
"org.apache.cassandra.schema.Triggers.builder()",1,1,1
"org.apache.cassandra.schema.Triggers.equals(Object)",1,3,3
"org.apache.cassandra.schema.Triggers.get(String)",1,1,1
"org.apache.cassandra.schema.Triggers.hashCode()",1,1,1
"org.apache.cassandra.schema.Triggers.isEmpty()",1,1,1
"org.apache.cassandra.schema.Triggers.iterator()",1,1,1
"org.apache.cassandra.schema.Triggers.none()",1,1,1
"org.apache.cassandra.schema.Triggers.size()",1,1,1
"org.apache.cassandra.schema.Triggers.toString()",1,1,1
"org.apache.cassandra.schema.Triggers.with(TriggerMetadata)",2,2,2
"org.apache.cassandra.schema.Triggers.without(String)",1,1,1
"org.apache.cassandra.schema.Types.Builder.Builder()",1,1,1
"org.apache.cassandra.schema.Types.Builder.add(Iterable<UserType>)",1,1,1
"org.apache.cassandra.schema.Types.Builder.add(UserType)",1,1,1
"org.apache.cassandra.schema.Types.Builder.add(UserType...)",1,2,2
"org.apache.cassandra.schema.Types.Builder.build()",1,1,1
"org.apache.cassandra.schema.Types.RawBuilder.RawBuilder(String)",1,1,1
"org.apache.cassandra.schema.Types.RawBuilder.RawUDT.RawUDT(String,List<String>,List<Raw>)",1,1,1
"org.apache.cassandra.schema.Types.RawBuilder.RawUDT.prepare(String,Types)",1,1,1
"org.apache.cassandra.schema.Types.RawBuilder.RawUDT.referencesUserType(String)",1,1,1
"org.apache.cassandra.schema.Types.RawBuilder.add(String,List<String>,List<String>)",1,1,1
"org.apache.cassandra.schema.Types.RawBuilder.build()",2,7,7
"org.apache.cassandra.schema.Types.Types(Builder)",1,1,1
"org.apache.cassandra.schema.Types.Types(Map<ByteBuffer, UserType>)",1,1,1
"org.apache.cassandra.schema.Types.builder()",1,1,1
"org.apache.cassandra.schema.Types.diff(Types)",1,1,1
"org.apache.cassandra.schema.Types.equals(Object)",1,3,3
"org.apache.cassandra.schema.Types.get(ByteBuffer)",1,1,1
"org.apache.cassandra.schema.Types.getNullable(ByteBuffer)",1,1,1
"org.apache.cassandra.schema.Types.hashCode()",1,1,1
"org.apache.cassandra.schema.Types.iterator()",1,1,1
"org.apache.cassandra.schema.Types.none()",1,1,1
"org.apache.cassandra.schema.Types.of(UserType...)",1,1,1
"org.apache.cassandra.schema.Types.rawBuilder(String)",1,1,1
"org.apache.cassandra.schema.Types.toString()",1,1,1
"org.apache.cassandra.schema.Types.with(UserType)",2,2,2
"org.apache.cassandra.schema.Types.without(ByteBuffer)",1,1,1
"org.apache.cassandra.schema.UnknownIndexException.UnknownIndexException(CFMetaData,UUID)",1,1,1
"org.apache.cassandra.schema.Views.Builder.Builder()",1,1,1
"org.apache.cassandra.schema.Views.Builder.add(Iterable<ViewDefinition>)",1,1,1
"org.apache.cassandra.schema.Views.Builder.add(ViewDefinition)",1,1,1
"org.apache.cassandra.schema.Views.Builder.build()",1,1,1
"org.apache.cassandra.schema.Views.Views(Builder)",1,1,1
"org.apache.cassandra.schema.Views.builder()",1,1,1
"org.apache.cassandra.schema.Views.diff(Views)",1,1,1
"org.apache.cassandra.schema.Views.equals(Object)",1,3,3
"org.apache.cassandra.schema.Views.get(String)",1,1,1
"org.apache.cassandra.schema.Views.getNullable(String)",1,1,1
"org.apache.cassandra.schema.Views.hashCode()",1,1,1
"org.apache.cassandra.schema.Views.isEmpty()",1,1,1
"org.apache.cassandra.schema.Views.iterator()",1,1,1
"org.apache.cassandra.schema.Views.metadatas()",1,1,1
"org.apache.cassandra.schema.Views.none()",1,1,1
"org.apache.cassandra.schema.Views.replace(ViewDefinition,CFMetaData)",1,1,1
"org.apache.cassandra.schema.Views.size()",1,1,1
"org.apache.cassandra.schema.Views.toString()",1,1,1
"org.apache.cassandra.schema.Views.with(ViewDefinition)",2,2,2
"org.apache.cassandra.schema.Views.without(String)",1,1,1
"org.apache.cassandra.security.SSLFactory.createSSLContext(EncryptionOptions,boolean)",1,6,7
"org.apache.cassandra.security.SSLFactory.filterCipherSuites(String[],String[])",1,2,2
"org.apache.cassandra.security.SSLFactory.getServerSocket(EncryptionOptions,InetAddress,int)",1,1,1
"org.apache.cassandra.security.SSLFactory.getSocket(EncryptionOptions)",1,1,1
"org.apache.cassandra.security.SSLFactory.getSocket(EncryptionOptions,InetAddress,int)",1,1,1
"org.apache.cassandra.security.SSLFactory.getSocket(EncryptionOptions,InetAddress,int,InetAddress,int)",1,1,1
"org.apache.cassandra.serializers.AbstractTextSerializer.AbstractTextSerializer(Charset)",1,1,1
"org.apache.cassandra.serializers.AbstractTextSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.AbstractTextSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.AbstractTextSerializer.serialize(String)",1,1,1
"org.apache.cassandra.serializers.AbstractTextSerializer.toString(String)",1,1,1
"org.apache.cassandra.serializers.AsciiSerializer.AsciiSerializer()",1,1,1
"org.apache.cassandra.serializers.AsciiSerializer.validate(ByteBuffer)",3,3,4
"org.apache.cassandra.serializers.BooleanSerializer.deserialize(ByteBuffer)",2,1,2
"org.apache.cassandra.serializers.BooleanSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.BooleanSerializer.serialize(Boolean)",1,1,3
"org.apache.cassandra.serializers.BooleanSerializer.toString(Boolean)",1,2,2
"org.apache.cassandra.serializers.BooleanSerializer.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.serializers.ByteSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.ByteSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.ByteSerializer.serialize(Byte)",1,2,2
"org.apache.cassandra.serializers.ByteSerializer.toString(Byte)",1,2,2
"org.apache.cassandra.serializers.ByteSerializer.validate(ByteBuffer)",2,2,2
"org.apache.cassandra.serializers.BytesSerializer.deserialize(ByteBuffer)",1,1,1
"org.apache.cassandra.serializers.BytesSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.BytesSerializer.serialize(ByteBuffer)",1,1,1
"org.apache.cassandra.serializers.BytesSerializer.toString(ByteBuffer)",1,1,1
"org.apache.cassandra.serializers.BytesSerializer.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.deserialize(ByteBuffer)",1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.pack(Collection<ByteBuffer>,int,int)",1,3,3
"org.apache.cassandra.serializers.CollectionSerializer.readCollectionSize(ByteBuffer,int)",1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.readValue(ByteBuffer,int)",2,1,2
"org.apache.cassandra.serializers.CollectionSerializer.serialize(T)",1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.sizeOfCollectionSize(int,int)",1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.sizeOfValue(ByteBuffer,int)",1,2,2
"org.apache.cassandra.serializers.CollectionSerializer.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.writeCollectionSize(ByteBuffer,int,int)",1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.writeValue(ByteBuffer,ByteBuffer,int)",2,2,2
"org.apache.cassandra.serializers.DecimalSerializer.deserialize(ByteBuffer)",2,2,3
"org.apache.cassandra.serializers.DecimalSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.DecimalSerializer.serialize(BigDecimal)",2,1,2
"org.apache.cassandra.serializers.DecimalSerializer.toString(BigDecimal)",1,2,2
"org.apache.cassandra.serializers.DecimalSerializer.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.serializers.DoubleSerializer.deserialize(ByteBuffer)",2,1,2
"org.apache.cassandra.serializers.DoubleSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.DoubleSerializer.serialize(Double)",1,2,2
"org.apache.cassandra.serializers.DoubleSerializer.toString(Double)",1,2,2
"org.apache.cassandra.serializers.DoubleSerializer.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.serializers.EmptySerializer.deserialize(ByteBuffer)",1,1,1
"org.apache.cassandra.serializers.EmptySerializer.getType()",1,1,1
"org.apache.cassandra.serializers.EmptySerializer.serialize(Void)",1,1,1
"org.apache.cassandra.serializers.EmptySerializer.toString(Void)",1,1,1
"org.apache.cassandra.serializers.EmptySerializer.validate(ByteBuffer)",2,1,2
"org.apache.cassandra.serializers.FloatSerializer.deserialize(ByteBuffer)",2,1,2
"org.apache.cassandra.serializers.FloatSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.FloatSerializer.serialize(Float)",1,2,2
"org.apache.cassandra.serializers.FloatSerializer.toString(Float)",1,2,2
"org.apache.cassandra.serializers.FloatSerializer.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.serializers.InetAddressSerializer.deserialize(ByteBuffer)",2,1,3
"org.apache.cassandra.serializers.InetAddressSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.InetAddressSerializer.serialize(InetAddress)",1,2,2
"org.apache.cassandra.serializers.InetAddressSerializer.toString(InetAddress)",1,2,2
"org.apache.cassandra.serializers.InetAddressSerializer.validate(ByteBuffer)",2,2,3
"org.apache.cassandra.serializers.Int32Serializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.Int32Serializer.getType()",1,1,1
"org.apache.cassandra.serializers.Int32Serializer.serialize(Integer)",1,2,2
"org.apache.cassandra.serializers.Int32Serializer.toString(Integer)",1,2,2
"org.apache.cassandra.serializers.Int32Serializer.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.serializers.IntegerSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.IntegerSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.IntegerSerializer.serialize(BigInteger)",1,2,2
"org.apache.cassandra.serializers.IntegerSerializer.toString(BigInteger)",1,2,2
"org.apache.cassandra.serializers.IntegerSerializer.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.serializers.ListSerializer.ListSerializer(TypeSerializer<T>)",1,1,1
"org.apache.cassandra.serializers.ListSerializer.deserializeForNativeProtocol(ByteBuffer,int)",2,3,5
"org.apache.cassandra.serializers.ListSerializer.getElement(ByteBuffer,int)",2,2,4
"org.apache.cassandra.serializers.ListSerializer.getElementCount(List<T>)",1,1,1
"org.apache.cassandra.serializers.ListSerializer.getInstance(TypeSerializer<T>)",1,2,2
"org.apache.cassandra.serializers.ListSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.ListSerializer.serializeValues(List<T>)",1,2,2
"org.apache.cassandra.serializers.ListSerializer.toString(List<T>)",1,3,3
"org.apache.cassandra.serializers.ListSerializer.validateForNativeProtocol(ByteBuffer,int)",2,2,4
"org.apache.cassandra.serializers.LongSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.LongSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.LongSerializer.serialize(Long)",1,2,2
"org.apache.cassandra.serializers.LongSerializer.toString(Long)",1,2,2
"org.apache.cassandra.serializers.LongSerializer.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.serializers.MapSerializer.MapSerializer(TypeSerializer<K>,TypeSerializer<V>,Comparator<ByteBuffer>)",1,1,1
"org.apache.cassandra.serializers.MapSerializer.deserializeForNativeProtocol(ByteBuffer,int)",2,2,4
"org.apache.cassandra.serializers.MapSerializer.getElementCount(Map<K, V>)",1,1,1
"org.apache.cassandra.serializers.MapSerializer.getInstance(TypeSerializer<K>,TypeSerializer<V>,Comparator<ByteBuffer>)",1,2,2
"org.apache.cassandra.serializers.MapSerializer.getSerializedValue(ByteBuffer,ByteBuffer,AbstractType)",4,2,5
"org.apache.cassandra.serializers.MapSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.MapSerializer.serializeValues(Map<K, V>)",1,3,3
"org.apache.cassandra.serializers.MapSerializer.toString(Map<K, V>)",1,3,3
"org.apache.cassandra.serializers.MapSerializer.validateForNativeProtocol(ByteBuffer,int)",2,2,4
"org.apache.cassandra.serializers.MarshalException.MarshalException(String)",1,1,1
"org.apache.cassandra.serializers.MarshalException.MarshalException(String,Throwable)",1,1,1
"org.apache.cassandra.serializers.SetSerializer.SetSerializer(TypeSerializer<T>,Comparator<ByteBuffer>)",1,1,1
"org.apache.cassandra.serializers.SetSerializer.deserializeForNativeProtocol(ByteBuffer,int)",2,2,4
"org.apache.cassandra.serializers.SetSerializer.getElementCount(Set<T>)",1,1,1
"org.apache.cassandra.serializers.SetSerializer.getInstance(TypeSerializer<T>,Comparator<ByteBuffer>)",1,2,2
"org.apache.cassandra.serializers.SetSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.SetSerializer.serializeValues(Set<T>)",1,2,2
"org.apache.cassandra.serializers.SetSerializer.toString(Set<T>)",1,3,3
"org.apache.cassandra.serializers.SetSerializer.validateForNativeProtocol(ByteBuffer,int)",2,2,4
"org.apache.cassandra.serializers.ShortSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.ShortSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.ShortSerializer.serialize(Short)",1,2,2
"org.apache.cassandra.serializers.ShortSerializer.toString(Short)",1,2,2
"org.apache.cassandra.serializers.ShortSerializer.validate(ByteBuffer)",2,2,2
"org.apache.cassandra.serializers.SimpleDateSerializer.dateStringToDays(String)",5,6,9
"org.apache.cassandra.serializers.SimpleDateSerializer.dayToTimeInMillis(int)",1,1,1
"org.apache.cassandra.serializers.SimpleDateSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.SimpleDateSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.SimpleDateSerializer.serialize(Integer)",1,2,2
"org.apache.cassandra.serializers.SimpleDateSerializer.timeInMillisToDay(long)",1,1,1
"org.apache.cassandra.serializers.SimpleDateSerializer.toString(Integer)",2,1,2
"org.apache.cassandra.serializers.SimpleDateSerializer.validate(ByteBuffer)",2,2,2
"org.apache.cassandra.serializers.TimeSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.TimeSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.TimeSerializer.leftPadZeros(int,int,StringBuilder)",1,3,3
"org.apache.cassandra.serializers.TimeSerializer.parseTimeStrictly(String)",11,7,18
"org.apache.cassandra.serializers.TimeSerializer.serialize(Long)",1,2,2
"org.apache.cassandra.serializers.TimeSerializer.timeStringToLong(String)",3,5,6
"org.apache.cassandra.serializers.TimeSerializer.toString(Long)",2,1,2
"org.apache.cassandra.serializers.TimeSerializer.validate(ByteBuffer)",2,2,2
"org.apache.cassandra.serializers.TimeUUIDSerializer.validate(ByteBuffer)",3,2,3
"org.apache.cassandra.serializers.TimestampSerializer.dateStringToTimestamp(String)",3,5,5
"org.apache.cassandra.serializers.TimestampSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.TimestampSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.TimestampSerializer.serialize(Date)",1,2,2
"org.apache.cassandra.serializers.TimestampSerializer.toString(Date)",1,2,2
"org.apache.cassandra.serializers.TimestampSerializer.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.serializers.UTF8Serializer.UTF8Serializer()",1,1,1
"org.apache.cassandra.serializers.UTF8Serializer.UTF8Validator.validate(ByteBuffer)",17,3,28
"org.apache.cassandra.serializers.UTF8Serializer.validate(ByteBuffer)",2,1,2
"org.apache.cassandra.serializers.UUIDSerializer.deserialize(ByteBuffer)",1,2,2
"org.apache.cassandra.serializers.UUIDSerializer.getType()",1,1,1
"org.apache.cassandra.serializers.UUIDSerializer.serialize(UUID)",1,2,2
"org.apache.cassandra.serializers.UUIDSerializer.toString(UUID)",1,2,2
"org.apache.cassandra.serializers.UUIDSerializer.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.service.AbstractReadExecutor.AbstractReadExecutor(Keyspace,ReadCommand,ConsistencyLevel,List<InetAddress>)",1,2,2
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor.AlwaysSpeculatingReadExecutor(Keyspace,ColumnFamilyStore,ReadCommand,ConsistencyLevel,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor.executeAsync()",1,2,3
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor.getContactedReplicas()",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor.maybeTryAdditionalReplicas()",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor.NeverSpeculatingReadExecutor(Keyspace,ReadCommand,ConsistencyLevel,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor.executeAsync()",1,2,2
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor.getContactedReplicas()",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor.maybeTryAdditionalReplicas()",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor.SpeculatingReadExecutor(Keyspace,ColumnFamilyStore,ReadCommand,ConsistencyLevel,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor.executeAsync()",1,4,4
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor.getContactedReplicas()",1,2,2
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor.maybeTryAdditionalReplicas()",2,4,5
"org.apache.cassandra.service.AbstractReadExecutor.get()",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.getReadExecutor(SinglePartitionReadCommand,ConsistencyLevel)",7,6,10
"org.apache.cassandra.service.AbstractReadExecutor.makeDataRequests(Iterable<InetAddress>)",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.makeDigestRequests(Iterable<InetAddress>)",1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.makeRequests(ReadCommand,Iterable<InetAddress>)",3,5,9
"org.apache.cassandra.service.AbstractWriteResponseHandler.AbstractWriteResponseHandler(Keyspace,Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Runnable,WriteType)",1,1,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.assureSufficientLiveNodes()",1,1,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.get()",3,4,6
"org.apache.cassandra.service.AbstractWriteResponseHandler.onFailure(InetAddress)",1,3,3
"org.apache.cassandra.service.AbstractWriteResponseHandler.signal()",1,2,2
"org.apache.cassandra.service.AbstractWriteResponseHandler.totalBlockFor()",1,1,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.totalEndpoints()",1,1,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.waitingFor(InetAddress)",1,1,1
"org.apache.cassandra.service.ActiveRepairService.ActiveRepairService(IFailureDetector,Gossiper)",1,1,1
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.ParentRepairSession(List<ColumnFamilyStore>,Collection<Range<Token>>,boolean,long,boolean)",1,2,2
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.addSSTables(UUID,Set<SSTableReader>)",1,1,2
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.getAndReferenceSSTables(UUID)",1,4,4
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.getRepairedAt()",2,1,2
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.toString()",1,1,1
"org.apache.cassandra.service.ActiveRepairService.currentlyRepairing(UUID,UUID)",1,4,4
"org.apache.cassandra.service.ActiveRepairService.doAntiCompaction(UUID,Collection<Range<Token>>)",2,4,4
"org.apache.cassandra.service.ActiveRepairService.finishParentSession(UUID,Set<InetAddress>,Collection<Range<Token>>)",1,2,2
"org.apache.cassandra.service.ActiveRepairService.getNeighbors(String,Range<Token>,Collection<String>,Collection<String>)",10,15,18
"org.apache.cassandra.service.ActiveRepairService.getParentRepairSession(UUID)",1,1,1
"org.apache.cassandra.service.ActiveRepairService.handleMessage(InetAddress,RepairMessage)",3,2,5
"org.apache.cassandra.service.ActiveRepairService.prepareForRepair(UUID,Set<InetAddress>,RepairOption,List<ColumnFamilyStore>)",2,5,5
"org.apache.cassandra.service.ActiveRepairService.registerParentRepairSession(UUID,List<ColumnFamilyStore>,Collection<Range<Token>>,boolean,long,boolean)",1,1,1
"org.apache.cassandra.service.ActiveRepairService.removeParentRepairSession(UUID)",1,1,1
"org.apache.cassandra.service.ActiveRepairService.submitRepairSession(UUID,Collection<Range<Token>>,String,RepairParallelism,Set<InetAddress>,long,ListeningExecutorService,String...)",3,1,3
"org.apache.cassandra.service.ActiveRepairService.terminateSessions()",1,2,2
"org.apache.cassandra.service.AsyncRepairCallback.AsyncRepairCallback(DataResolver,int)",1,1,1
"org.apache.cassandra.service.AsyncRepairCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.AsyncRepairCallback.response(MessageIn<ReadResponse>)",1,2,2
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogCleanup.BatchlogCleanup(int,BatchlogCleanupCallback)",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogCleanup.run()",1,2,2
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogResponseHandler(AbstractWriteResponseHandler<T>,int,BatchlogCleanup)",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.ackCount()",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.assureSufficientLiveNodes()",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.get()",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.onFailure(InetAddress)",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.response(MessageIn<T>)",1,2,2
"org.apache.cassandra.service.BatchlogResponseHandler.signal()",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.totalBlockFor()",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.totalEndpoints()",1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.waitingFor(InetAddress)",1,1,1
"org.apache.cassandra.service.CacheService.CacheService()",1,1,2
"org.apache.cassandra.service.CacheService.CacheType.CacheType(String)",1,1,1
"org.apache.cassandra.service.CacheService.CacheType.toString()",1,1,1
"org.apache.cassandra.service.CacheService.CounterCacheSerializer.deserialize(DataInputPlus,ColumnFamilyStore)",5,6,9
"org.apache.cassandra.service.CacheService.CounterCacheSerializer.serialize(CounterCacheKey,DataOutputPlus,ColumnFamilyStore)",1,1,1
"org.apache.cassandra.service.CacheService.KeyCacheSerializer.deserialize(DataInputPlus,ColumnFamilyStore)",3,5,5
"org.apache.cassandra.service.CacheService.KeyCacheSerializer.findDesc(int,Iterable<SSTableReader>)",3,1,3
"org.apache.cassandra.service.CacheService.KeyCacheSerializer.serialize(KeyCacheKey,DataOutputPlus,ColumnFamilyStore)",2,1,2
"org.apache.cassandra.service.CacheService.RowCacheSerializer.deserialize(DataInputPlus,ColumnFamilyStore)",2,2,3
"org.apache.cassandra.service.CacheService.RowCacheSerializer.serialize(RowCacheKey,DataOutputPlus,ColumnFamilyStore)",1,1,1
"org.apache.cassandra.service.CacheService.getCounterCacheKeysToSave()",1,1,1
"org.apache.cassandra.service.CacheService.getCounterCacheSavePeriodInSeconds()",1,1,1
"org.apache.cassandra.service.CacheService.getKeyCacheKeysToSave()",1,1,1
"org.apache.cassandra.service.CacheService.getKeyCacheSavePeriodInSeconds()",1,1,1
"org.apache.cassandra.service.CacheService.getRowCacheKeysToSave()",1,1,1
"org.apache.cassandra.service.CacheService.getRowCacheSavePeriodInSeconds()",1,1,1
"org.apache.cassandra.service.CacheService.initCounterCache()",1,1,2
"org.apache.cassandra.service.CacheService.initKeyCache()",1,1,1
"org.apache.cassandra.service.CacheService.initRowCache()",1,3,3
"org.apache.cassandra.service.CacheService.invalidateCounterCache()",1,1,1
"org.apache.cassandra.service.CacheService.invalidateCounterCacheForCf(Pair<String, String>)",1,3,3
"org.apache.cassandra.service.CacheService.invalidateKeyCache()",1,1,1
"org.apache.cassandra.service.CacheService.invalidateKeyCacheForCf(Pair<String, String>)",1,3,3
"org.apache.cassandra.service.CacheService.invalidateRowCache()",1,1,1
"org.apache.cassandra.service.CacheService.invalidateRowCacheForCf(Pair<String, String>)",1,3,3
"org.apache.cassandra.service.CacheService.saveCaches()",1,1,1
"org.apache.cassandra.service.CacheService.setCounterCacheCapacityInMB(long)",2,1,2
"org.apache.cassandra.service.CacheService.setCounterCacheKeysToSave(int)",2,1,2
"org.apache.cassandra.service.CacheService.setCounterCacheSavePeriodInSeconds(int)",2,1,2
"org.apache.cassandra.service.CacheService.setKeyCacheCapacityInMB(long)",2,1,2
"org.apache.cassandra.service.CacheService.setKeyCacheKeysToSave(int)",2,1,2
"org.apache.cassandra.service.CacheService.setKeyCacheSavePeriodInSeconds(int)",2,1,2
"org.apache.cassandra.service.CacheService.setRowCacheCapacityInMB(long)",2,1,2
"org.apache.cassandra.service.CacheService.setRowCacheKeysToSave(int)",2,1,2
"org.apache.cassandra.service.CacheService.setRowCacheSavePeriodInSeconds(int)",2,1,2
"org.apache.cassandra.service.CassandraDaemon.CassandraDaemon()",1,1,1
"org.apache.cassandra.service.CassandraDaemon.CassandraDaemon(boolean)",1,1,1
"org.apache.cassandra.service.CassandraDaemon.NativeAccess.isAvailable()",1,1,1
"org.apache.cassandra.service.CassandraDaemon.NativeAccess.isMemoryLockable()",1,1,1
"org.apache.cassandra.service.CassandraDaemon.activate()",1,10,11
"org.apache.cassandra.service.CassandraDaemon.completeSetup()",1,1,1
"org.apache.cassandra.service.CassandraDaemon.deactivate()",1,2,2
"org.apache.cassandra.service.CassandraDaemon.destroy()",1,1,1
"org.apache.cassandra.service.CassandraDaemon.exitOrFail(int,String)",1,1,1
"org.apache.cassandra.service.CassandraDaemon.exitOrFail(int,String,Throwable)",2,2,3
"org.apache.cassandra.service.CassandraDaemon.init(String[])",1,1,1
"org.apache.cassandra.service.CassandraDaemon.isNativeTransportRunning()",1,2,2
"org.apache.cassandra.service.CassandraDaemon.loadRowAndKeyCacheAsync()",1,1,1
"org.apache.cassandra.service.CassandraDaemon.logSystemInfo()",1,4,4
"org.apache.cassandra.service.CassandraDaemon.main(String[])",1,1,1
"org.apache.cassandra.service.CassandraDaemon.maybeInitJmx()",3,2,4
"org.apache.cassandra.service.CassandraDaemon.setup()",3,30,32
"org.apache.cassandra.service.CassandraDaemon.setupCompleted()",1,1,1
"org.apache.cassandra.service.CassandraDaemon.start()",1,9,9
"org.apache.cassandra.service.CassandraDaemon.startNativeTransport()",2,2,2
"org.apache.cassandra.service.CassandraDaemon.stop()",1,6,6
"org.apache.cassandra.service.CassandraDaemon.stop(String[])",1,1,1
"org.apache.cassandra.service.CassandraDaemon.stopNativeTransport()",1,2,2
"org.apache.cassandra.service.CassandraDaemon.waitForGossipToSettle()",4,5,7
"org.apache.cassandra.service.ClientState.ClientState()",1,1,1
"org.apache.cassandra.service.ClientState.ClientState(InetSocketAddress)",1,1,2
"org.apache.cassandra.service.ClientState.authorize(IResource)",1,1,1
"org.apache.cassandra.service.ClientState.checkPermissionOnResourceChain(Permission,IResource)",3,2,3
"org.apache.cassandra.service.ClientState.ensureHasPermission(Permission,Function)",3,1,3
"org.apache.cassandra.service.ClientState.ensureHasPermission(Permission,IResource)",4,3,5
"org.apache.cassandra.service.ClientState.ensureIsSuper(String)",2,3,4
"org.apache.cassandra.service.ClientState.ensureNotAnonymous()",2,1,2
"org.apache.cassandra.service.ClientState.forExternalCalls(SocketAddress)",1,1,1
"org.apache.cassandra.service.ClientState.forInternalCalls()",1,1,1
"org.apache.cassandra.service.ClientState.getCQLQueryHandler()",1,1,1
"org.apache.cassandra.service.ClientState.getCQLSupportedVersion()",1,1,1
"org.apache.cassandra.service.ClientState.getKeyspace()",2,1,2
"org.apache.cassandra.service.ClientState.getRawKeyspace()",1,1,1
"org.apache.cassandra.service.ClientState.getRemoteAddress()",1,1,1
"org.apache.cassandra.service.ClientState.getTimestamp()",3,2,4
"org.apache.cassandra.service.ClientState.getTimestamp(long)",3,2,4
"org.apache.cassandra.service.ClientState.getUser()",1,1,1
"org.apache.cassandra.service.ClientState.hasAccess(String,Permission,DataResource)",5,4,8
"org.apache.cassandra.service.ClientState.hasAllKeyspacesAccess(Permission)",2,1,2
"org.apache.cassandra.service.ClientState.hasColumnFamilyAccess(String,String,Permission)",1,1,1
"org.apache.cassandra.service.ClientState.hasKeyspaceAccess(String,Permission)",1,1,1
"org.apache.cassandra.service.ClientState.login(AuthenticatedUser)",2,3,3
"org.apache.cassandra.service.ClientState.preventSystemKSSchemaModification(String,DataResource,Permission)",4,6,10
"org.apache.cassandra.service.ClientState.setKeyspace(String)",2,2,3
"org.apache.cassandra.service.ClientState.validateKeyspace(String)",2,1,2
"org.apache.cassandra.service.ClientState.validateLogin()",2,1,2
"org.apache.cassandra.service.ClientWarn.ClientWarn()",1,1,1
"org.apache.cassandra.service.ClientWarn.add(String)",1,2,2
"org.apache.cassandra.service.ClientWarn.captureWarnings()",1,1,1
"org.apache.cassandra.service.ClientWarn.getWarnings()",2,2,3
"org.apache.cassandra.service.ClientWarn.maybeTruncate(String)",1,2,2
"org.apache.cassandra.service.ClientWarn.resetWarnings()",1,1,1
"org.apache.cassandra.service.ClientWarn.warn(String)",1,2,2
"org.apache.cassandra.service.DataResolver.DataResolver(Keyspace,ReadCommand,ConsistencyLevel,int)",1,1,1
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.MergeListener(DecoratedKey,PartitionColumns,boolean)",1,9,9
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.close()",3,2,3
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.currentRow(int,Clustering)",1,2,2
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.onMergedPartitionLevelDeletion(DeletionTime,DeletionTime[])",1,3,3
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.onMergedRangeTombstoneMarkers(RangeTombstoneMarker,RangeTombstoneMarker[])",1,7,9
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.onMergedRows(Row,Row[])",2,3,4
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.update(int)",1,2,2
"org.apache.cassandra.service.DataResolver.RepairMergeListener.RepairMergeListener(InetAddress[])",1,1,1
"org.apache.cassandra.service.DataResolver.RepairMergeListener.close()",1,3,3
"org.apache.cassandra.service.DataResolver.RepairMergeListener.columns(List<UnfilteredRowIterator>)",3,2,3
"org.apache.cassandra.service.DataResolver.RepairMergeListener.getRowMergeListener(DecoratedKey,List<UnfilteredRowIterator>)",1,1,1
"org.apache.cassandra.service.DataResolver.RepairMergeListener.isReversed(List<UnfilteredRowIterator>)",3,2,3
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadProtection(InetAddress,Counter)",1,1,1
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection.ShortReadRowProtection(CFMetaData,DecoratedKey)",1,1,1
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection.applyToRow(Row)",1,1,1
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection.doShortReadRetry(SinglePartitionReadCommand)",1,2,2
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection.moreContents()",2,3,4
"org.apache.cassandra.service.DataResolver.ShortReadProtection.applyToPartition(UnfilteredRowIterator)",1,1,1
"org.apache.cassandra.service.DataResolver.getData()",1,1,1
"org.apache.cassandra.service.DataResolver.isDataPresent()",1,1,1
"org.apache.cassandra.service.DataResolver.mergeWithShortReadProtection(List<UnfilteredPartitionIterator>,InetAddress[],Counter)",2,4,4
"org.apache.cassandra.service.DataResolver.resolve()",1,2,2
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.DatacenterSyncWriteResponseHandler(Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Keyspace,Runnable,WriteType)",1,3,3
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.ackCount()",1,1,1
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.response(MessageIn<T>)",3,3,4
"org.apache.cassandra.service.DatacenterWriteResponseHandler.DatacenterWriteResponseHandler(Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Keyspace,Runnable,WriteType)",1,1,1
"org.apache.cassandra.service.DatacenterWriteResponseHandler.response(MessageIn<T>)",1,3,3
"org.apache.cassandra.service.DatacenterWriteResponseHandler.totalBlockFor()",1,1,1
"org.apache.cassandra.service.DatacenterWriteResponseHandler.waitingFor(InetAddress)",1,1,1
"org.apache.cassandra.service.DigestMismatchException.DigestMismatchException(DecoratedKey,ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.service.DigestResolver.DigestResolver(Keyspace,ReadCommand,ConsistencyLevel,int)",1,1,1
"org.apache.cassandra.service.DigestResolver.getData()",1,1,1
"org.apache.cassandra.service.DigestResolver.isDataPresent()",1,1,1
"org.apache.cassandra.service.DigestResolver.preprocess(MessageIn<ReadResponse>)",1,2,3
"org.apache.cassandra.service.DigestResolver.resolve()",5,7,7
"org.apache.cassandra.service.EchoVerbHandler.doVerb(MessageIn<EchoMessage>,int)",1,1,1
"org.apache.cassandra.service.EmbeddedCassandraService.start()",1,1,1
"org.apache.cassandra.service.GCInspector.GCInspector()",1,2,3
"org.apache.cassandra.service.GCInspector.GCState.GCState(GarbageCollectorMXBean,boolean,boolean)",1,1,1
"org.apache.cassandra.service.GCInspector.GCState.keys(GarbageCollectionNotificationInfo)",2,1,2
"org.apache.cassandra.service.GCInspector.State.State()",1,1,1
"org.apache.cassandra.service.GCInspector.State.State(double,double,State)",1,1,1
"org.apache.cassandra.service.GCInspector.assumeGCIsOldGen(GarbageCollectorMXBean)",4,2,4
"org.apache.cassandra.service.GCInspector.assumeGCIsPartiallyConcurrent(GarbageCollectorMXBean)",4,2,4
"org.apache.cassandra.service.GCInspector.getAllocatedDirectMemory()",2,2,3
"org.apache.cassandra.service.GCInspector.getAndResetStats()",1,1,1
"org.apache.cassandra.service.GCInspector.getTotalSinceLastCheck()",1,1,1
"org.apache.cassandra.service.GCInspector.handleNotification(Notification,Object)",4,13,15
"org.apache.cassandra.service.GCInspector.register()",1,2,2
"org.apache.cassandra.service.LoadBroadcaster.LoadBroadcaster()",1,1,1
"org.apache.cassandra.service.LoadBroadcaster.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.service.LoadBroadcaster.getLoadInfo()",1,1,1
"org.apache.cassandra.service.LoadBroadcaster.onAlive(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.LoadBroadcaster.onChange(InetAddress,ApplicationState,VersionedValue)",2,1,2
"org.apache.cassandra.service.LoadBroadcaster.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.LoadBroadcaster.onJoin(InetAddress,EndpointState)",1,2,2
"org.apache.cassandra.service.LoadBroadcaster.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.service.LoadBroadcaster.onRestart(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.LoadBroadcaster.startBroadcasting()",1,2,2
"org.apache.cassandra.service.MigrationListener.onCreateAggregate(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.service.MigrationListener.onCreateColumnFamily(String,String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onCreateFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.service.MigrationListener.onCreateKeyspace(String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onCreateUserType(String,String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onCreateView(String,String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onDropAggregate(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.service.MigrationListener.onDropColumnFamily(String,String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onDropFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.service.MigrationListener.onDropKeyspace(String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onDropUserType(String,String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onDropView(String,String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onUpdateAggregate(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.service.MigrationListener.onUpdateColumnFamily(String,String,boolean)",1,1,1
"org.apache.cassandra.service.MigrationListener.onUpdateFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.service.MigrationListener.onUpdateKeyspace(String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onUpdateUserType(String,String)",1,1,1
"org.apache.cassandra.service.MigrationListener.onUpdateView(String,String,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.MigrationManager()",1,1,1
"org.apache.cassandra.service.MigrationManager.MigrationsSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.service.MigrationManager.MigrationsSerializer.serialize(Collection<Mutation>,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.service.MigrationManager.MigrationsSerializer.serializedSize(Collection<Mutation>,int)",1,2,2
"org.apache.cassandra.service.MigrationManager.announce(Collection<Mutation>)",1,5,5
"org.apache.cassandra.service.MigrationManager.announce(Mutation,boolean)",1,2,2
"org.apache.cassandra.service.MigrationManager.announceAggregateDrop(UDAggregate,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceColumnFamilyDrop(String,String)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceColumnFamilyDrop(String,String,boolean)",2,2,2
"org.apache.cassandra.service.MigrationManager.announceColumnFamilyUpdate(CFMetaData,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceColumnFamilyUpdate(CFMetaData,boolean,boolean)",2,2,2
"org.apache.cassandra.service.MigrationManager.announceFunctionDrop(UDFunction,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceKeyspaceDrop(String)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceKeyspaceDrop(String,boolean)",2,2,2
"org.apache.cassandra.service.MigrationManager.announceKeyspaceUpdate(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceKeyspaceUpdate(KeyspaceMetadata,boolean)",2,2,2
"org.apache.cassandra.service.MigrationManager.announceNewAggregate(UDAggregate,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(CFMetaData)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(CFMetaData,boolean)",3,2,3
"org.apache.cassandra.service.MigrationManager.announceNewFunction(UDFunction,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceNewKeyspace(KeyspaceMetadata)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceNewKeyspace(KeyspaceMetadata,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceNewKeyspace(KeyspaceMetadata,long,boolean)",2,1,2
"org.apache.cassandra.service.MigrationManager.announceNewType(UserType,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceNewView(ViewDefinition,boolean)",3,2,3
"org.apache.cassandra.service.MigrationManager.announceTypeDrop(UserType)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceTypeDrop(UserType,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceTypeUpdate(UserType,boolean)",1,1,1
"org.apache.cassandra.service.MigrationManager.announceViewDrop(String,String,boolean)",2,2,2
"org.apache.cassandra.service.MigrationManager.announceViewUpdate(ViewDefinition,boolean)",2,2,2
"org.apache.cassandra.service.MigrationManager.isReadyForBootstrap()",1,1,1
"org.apache.cassandra.service.MigrationManager.maybeScheduleSchemaPull(UUID,InetAddress)",4,8,8
"org.apache.cassandra.service.MigrationManager.notifyCreateAggregate(UDAggregate)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateColumnFamily(CFMetaData)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateFunction(UDFunction)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateKeyspace(KeyspaceMetadata)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateUserType(UserType)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateView(ViewDefinition)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropAggregate(UDAggregate)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropColumnFamily(CFMetaData)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropFunction(UDFunction)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropKeyspace(KeyspaceMetadata)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropUserType(UserType)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropView(ViewDefinition)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateAggregate(UDAggregate)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateColumnFamily(CFMetaData,boolean)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateFunction(UDFunction)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateKeyspace(KeyspaceMetadata)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateUserType(UserType)",1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateView(ViewDefinition,boolean)",1,2,2
"org.apache.cassandra.service.MigrationManager.passiveAnnounce(UUID)",1,1,1
"org.apache.cassandra.service.MigrationManager.pushSchemaMutation(InetAddress,Collection<Mutation>)",1,1,1
"org.apache.cassandra.service.MigrationManager.register(MigrationListener)",1,1,1
"org.apache.cassandra.service.MigrationManager.resetLocalSchema()",3,3,3
"org.apache.cassandra.service.MigrationManager.scheduleSchemaPull(InetAddress,EndpointState)",1,3,3
"org.apache.cassandra.service.MigrationManager.shouldPullSchemaFrom(InetAddress)",1,3,3
"org.apache.cassandra.service.MigrationManager.submitMigrationTask(InetAddress)",1,1,1
"org.apache.cassandra.service.MigrationManager.unregister(MigrationListener)",1,1,1
"org.apache.cassandra.service.MigrationTask.MigrationTask(InetAddress)",1,1,1
"org.apache.cassandra.service.MigrationTask.runMayThrow()",3,4,4
"org.apache.cassandra.service.NativeTransportService.destroy()",1,2,2
"org.apache.cassandra.service.NativeTransportService.getEventExecutor()",1,1,1
"org.apache.cassandra.service.NativeTransportService.getServers()",1,1,1
"org.apache.cassandra.service.NativeTransportService.getWorkerGroup()",1,1,1
"org.apache.cassandra.service.NativeTransportService.initialize()",2,5,6
"org.apache.cassandra.service.NativeTransportService.isRunning()",3,2,3
"org.apache.cassandra.service.NativeTransportService.start()",1,1,1
"org.apache.cassandra.service.NativeTransportService.stop()",1,1,1
"org.apache.cassandra.service.NativeTransportService.useEpoll()",1,2,2
"org.apache.cassandra.service.PendingRangeCalculatorService.PendingRangeCalculatorService()",1,1,1
"org.apache.cassandra.service.PendingRangeCalculatorService.PendingRangeTask.run()",1,2,2
"org.apache.cassandra.service.PendingRangeCalculatorService.blockUntilFinished()",2,2,3
"org.apache.cassandra.service.PendingRangeCalculatorService.calculatePendingRanges(AbstractReplicationStrategy,String)",1,1,1
"org.apache.cassandra.service.PendingRangeCalculatorService.finishUpdate()",1,1,1
"org.apache.cassandra.service.PendingRangeCalculatorService.update()",1,1,1
"org.apache.cassandra.service.QueryState.QueryState(ClientState)",1,1,1
"org.apache.cassandra.service.QueryState.createTracingSession()",1,2,2
"org.apache.cassandra.service.QueryState.forInternalCalls()",1,1,1
"org.apache.cassandra.service.QueryState.getClientAddress()",1,2,2
"org.apache.cassandra.service.QueryState.getClientState()",1,1,1
"org.apache.cassandra.service.QueryState.getTimestamp()",1,1,1
"org.apache.cassandra.service.QueryState.prepareTracingSession(UUID)",1,1,1
"org.apache.cassandra.service.QueryState.traceNextQuery()",2,2,3
"org.apache.cassandra.service.ReadCallback.AsyncRepairRunner.AsyncRepairRunner(TraceState)",1,1,1
"org.apache.cassandra.service.ReadCallback.AsyncRepairRunner.run()",1,5,5
"org.apache.cassandra.service.ReadCallback.ReadCallback(ResponseResolver,ConsistencyLevel,ReadCommand,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.ReadCallback.ReadCallback(ResponseResolver,ConsistencyLevel,int,ReadCommand,Keyspace,List<InetAddress>)",1,3,3
"org.apache.cassandra.service.ReadCallback.assureSufficientLiveNodes()",1,1,1
"org.apache.cassandra.service.ReadCallback.await(long,TimeUnit)",1,1,2
"org.apache.cassandra.service.ReadCallback.awaitResults()",2,6,12
"org.apache.cassandra.service.ReadCallback.blockFor()",1,1,1
"org.apache.cassandra.service.ReadCallback.get()",1,3,3
"org.apache.cassandra.service.ReadCallback.getReceivedCount()",1,1,1
"org.apache.cassandra.service.ReadCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.ReadCallback.onFailure(InetAddress)",1,3,3
"org.apache.cassandra.service.ReadCallback.response(MessageIn<ReadResponse>)",1,7,7
"org.apache.cassandra.service.ReadCallback.response(ReadResponse)",1,1,1
"org.apache.cassandra.service.ReadCallback.waitingFor(InetAddress)",1,2,2
"org.apache.cassandra.service.ResponseResolver.ResponseResolver(Keyspace,ReadCommand,ConsistencyLevel,int)",1,1,1
"org.apache.cassandra.service.ResponseResolver.getMessages()",1,1,1
"org.apache.cassandra.service.ResponseResolver.preprocess(MessageIn<ReadResponse>)",1,1,1
"org.apache.cassandra.service.SnapshotVerbHandler.doVerb(MessageIn<SnapshotCommand>,int)",1,2,2
"org.apache.cassandra.service.StartupChecks.verify()",1,2,2
"org.apache.cassandra.service.StartupChecks.withDefaultTests()",1,1,1
"org.apache.cassandra.service.StartupChecks.withTest(StartupCheck)",1,1,1
"org.apache.cassandra.service.StorageProxy.BatchlogEndpoints.BatchlogEndpoints(Collection<InetAddress>)",1,3,3
"org.apache.cassandra.service.StorageProxy.DroppableRunnable.DroppableRunnable(Verb)",1,1,1
"org.apache.cassandra.service.StorageProxy.DroppableRunnable.run()",2,2,3
"org.apache.cassandra.service.StorageProxy.HintRunnable.HintRunnable(Collection<InetAddress>)",1,1,1
"org.apache.cassandra.service.StorageProxy.HintRunnable.run()",1,2,3
"org.apache.cassandra.service.StorageProxy.LocalMutationRunnable.run()",2,2,3
"org.apache.cassandra.service.StorageProxy.LocalReadRunnable.LocalReadRunnable(ReadCommand,ReadCallback)",1,1,1
"org.apache.cassandra.service.StorageProxy.LocalReadRunnable.runMayThrow()",2,3,3
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.RangeCommandIterator(RangeIterator,PartitionRangeReadCommand,int,Keyspace,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.close()",1,2,2
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.computeNext()",3,5,5
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.query(RangeForQuery)",1,4,4
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.sendNextRequests()",1,3,3
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.updateConcurrencyFactor()",2,1,2
"org.apache.cassandra.service.StorageProxy.RangeForQuery.RangeForQuery(AbstractBounds<PartitionPosition>,List<InetAddress>,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.StorageProxy.RangeIterator.RangeIterator(PartitionRangeReadCommand,Keyspace,ConsistencyLevel)",1,2,2
"org.apache.cassandra.service.StorageProxy.RangeIterator.computeNext()",2,2,2
"org.apache.cassandra.service.StorageProxy.RangeIterator.rangeCount()",1,1,1
"org.apache.cassandra.service.StorageProxy.RangeMerger.RangeMerger(Iterator<RangeForQuery>,Keyspace,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.StorageProxy.RangeMerger.computeNext()",6,3,6
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.SinglePartitionReadLifecycle(SinglePartitionReadCommand,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.awaitResultsAndRetryOnDigestMismatch()",1,3,3
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.doInitialQueries()",1,1,1
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.getResult()",1,1,1
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.isDone()",1,1,1
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.maybeAwaitFullDataRead()",2,3,5
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.maybeTryAdditionalReplicas()",1,1,1
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse.SingleRangeResponse(ReadCallback)",1,1,1
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse.close()",1,2,2
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse.computeNext()",1,2,2
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse.waitForResponse()",2,1,3
"org.apache.cassandra.service.StorageProxy.StorageProxy()",1,1,1
"org.apache.cassandra.service.StorageProxy.ViewWriteMetricsWrapped.ViewWriteMetricsWrapped(AbstractWriteResponseHandler<IMutation>,int,BatchlogCleanup)",1,1,1
"org.apache.cassandra.service.StorageProxy.ViewWriteMetricsWrapped.response(MessageIn<IMutation>)",1,1,1
"org.apache.cassandra.service.StorageProxy.WriteResponseHandlerWrapper.WriteResponseHandlerWrapper(BatchlogResponseHandler<IMutation>,Mutation)",1,1,1
"org.apache.cassandra.service.StorageProxy.applyCounterMutationOnCoordinator(CounterMutation,String)",1,1,1
"org.apache.cassandra.service.StorageProxy.applyCounterMutationOnLeader(CounterMutation,String,Runnable)",1,1,1
"org.apache.cassandra.service.StorageProxy.asyncRemoveFromBatchlog(BatchlogEndpoints,UUID)",1,3,3
"org.apache.cassandra.service.StorageProxy.asyncRemoveFromBatchlog(Collection<InetAddress>,UUID)",1,4,4
"org.apache.cassandra.service.StorageProxy.asyncWriteBatchedMutations(List<WriteResponseHandlerWrapper>,String,Stage)",1,3,3
"org.apache.cassandra.service.StorageProxy.beginAndRepairPaxos(long,DecoratedKey,CFMetaData,List<InetAddress>,int,ConsistencyLevel,ConsistencyLevel,boolean,ClientState)",6,9,10
"org.apache.cassandra.service.StorageProxy.canDoLocalRequest(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageProxy.cas(String,String,DecoratedKey,CASRequest,ConsistencyLevel,ConsistencyLevel,ClientState)",4,8,9
"org.apache.cassandra.service.StorageProxy.commitPaxos(Commit,ConsistencyLevel,boolean)",1,7,7
"org.apache.cassandra.service.StorageProxy.counterWriteTask(IMutation,Iterable<InetAddress>,AbstractWriteResponseHandler<IMutation>,String)",1,2,2
"org.apache.cassandra.service.StorageProxy.describeSchemaVersions()",3,10,12
"org.apache.cassandra.service.StorageProxy.disableHintsForDC(String)",1,1,1
"org.apache.cassandra.service.StorageProxy.enableHintsForDC(String)",1,1,1
"org.apache.cassandra.service.StorageProxy.estimateResultsPerRange(PartitionRangeReadCommand,Keyspace)",1,2,2
"org.apache.cassandra.service.StorageProxy.fetchRows(List<SinglePartitionReadCommand>,ConsistencyLevel)",1,8,8
"org.apache.cassandra.service.StorageProxy.findSuitableEndpoint(String,DecoratedKey,String,ConsistencyLevel)",3,5,5
"org.apache.cassandra.service.StorageProxy.getBatchlogEndpoints(String,ConsistencyLevel)",3,3,3
"org.apache.cassandra.service.StorageProxy.getCasContentionTimeout()",1,1,1
"org.apache.cassandra.service.StorageProxy.getCounterWriteRpcTimeout()",1,1,1
"org.apache.cassandra.service.StorageProxy.getHintedHandoffDisabledDCs()",1,1,1
"org.apache.cassandra.service.StorageProxy.getHintedHandoffEnabled()",1,1,1
"org.apache.cassandra.service.StorageProxy.getHintsInProgress()",1,1,1
"org.apache.cassandra.service.StorageProxy.getHintsInProgressFor(InetAddress)",1,1,2
"org.apache.cassandra.service.StorageProxy.getLiveSortedEndpoints(Keyspace,ByteBuffer)",1,1,1
"org.apache.cassandra.service.StorageProxy.getLiveSortedEndpoints(Keyspace,RingPosition)",1,1,1
"org.apache.cassandra.service.StorageProxy.getMaxHintWindow()",1,1,1
"org.apache.cassandra.service.StorageProxy.getMaxHintsInProgress()",1,1,1
"org.apache.cassandra.service.StorageProxy.getNativeTransportMaxConcurrentConnections()",1,1,1
"org.apache.cassandra.service.StorageProxy.getNativeTransportMaxConcurrentConnectionsPerIp()",1,1,1
"org.apache.cassandra.service.StorageProxy.getPaxosParticipants(CFMetaData,DecoratedKey,ConsistencyLevel)",3,4,4
"org.apache.cassandra.service.StorageProxy.getRangeRpcTimeout()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRangeSlice(PartitionRangeReadCommand,ConsistencyLevel)",1,2,2
"org.apache.cassandra.service.StorageProxy.getReadRepairAttempted()",1,1,1
"org.apache.cassandra.service.StorageProxy.getReadRepairRepairedBackground()",1,1,1
"org.apache.cassandra.service.StorageProxy.getReadRepairRepairedBlocking()",1,1,1
"org.apache.cassandra.service.StorageProxy.getReadRpcTimeout()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRestrictedRanges(AbstractBounds<T>)",5,6,8
"org.apache.cassandra.service.StorageProxy.getRpcTimeout()",1,1,1
"org.apache.cassandra.service.StorageProxy.getSchemaVersions()",1,1,1
"org.apache.cassandra.service.StorageProxy.getTotalHints()",1,1,1
"org.apache.cassandra.service.StorageProxy.getTruncateRpcTimeout()",1,1,1
"org.apache.cassandra.service.StorageProxy.getWriteRpcTimeout()",1,1,1
"org.apache.cassandra.service.StorageProxy.hintMutation(Mutation)",1,4,4
"org.apache.cassandra.service.StorageProxy.hintMutations(Collection<? extends IMutation>)",1,3,3
"org.apache.cassandra.service.StorageProxy.intersection(List<InetAddress>,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.StorageProxy.isAnyStorageHostDown()",1,1,1
"org.apache.cassandra.service.StorageProxy.mutate(Collection<? extends IMutation>,ConsistencyLevel)",2,9,10
"org.apache.cassandra.service.StorageProxy.mutateAtomically(Collection<Mutation>,ConsistencyLevel,boolean)",2,6,7
"org.apache.cassandra.service.StorageProxy.mutateCounter(CounterMutation,String)",2,2,2
"org.apache.cassandra.service.StorageProxy.mutateMV(ByteBuffer,Collection<Mutation>,boolean,AtomicLong)",1,7,7
"org.apache.cassandra.service.StorageProxy.mutateWithTriggers(Collection<? extends IMutation>,ConsistencyLevel,boolean)",1,3,4
"org.apache.cassandra.service.StorageProxy.performLocally(Stage,Runnable)",1,2,2
"org.apache.cassandra.service.StorageProxy.performLocally(Stage,Runnable,IAsyncCallbackWithFailure<?>)",1,3,3
"org.apache.cassandra.service.StorageProxy.performWrite(IMutation,ConsistencyLevel,String,WritePerformer,Runnable,WriteType)",1,1,1
"org.apache.cassandra.service.StorageProxy.preparePaxos(Commit,List<InetAddress>,int,ConsistencyLevel)",1,2,2
"org.apache.cassandra.service.StorageProxy.proposePaxos(Commit,List<InetAddress>,int,boolean,ConsistencyLevel)",3,4,5
"org.apache.cassandra.service.StorageProxy.read(Group,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.StorageProxy.read(Group,ConsistencyLevel,ClientState)",2,4,4
"org.apache.cassandra.service.StorageProxy.readOne(SinglePartitionReadCommand,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.StorageProxy.readOne(SinglePartitionReadCommand,ConsistencyLevel,ClientState)",1,1,1
"org.apache.cassandra.service.StorageProxy.readRegular(Group,ConsistencyLevel)",1,6,6
"org.apache.cassandra.service.StorageProxy.readWithPaxos(Group,ConsistencyLevel,ClientState)",2,6,9
"org.apache.cassandra.service.StorageProxy.reloadTriggerClasses()",1,1,1
"org.apache.cassandra.service.StorageProxy.sameDCPredicateFor(String)",1,1,1
"org.apache.cassandra.service.StorageProxy.sendCommit(Commit,Iterable<InetAddress>)",1,2,2
"org.apache.cassandra.service.StorageProxy.sendMessagesToNonlocalDC(MessageOut<? extends IMutation>,Collection<InetAddress>,AbstractWriteResponseHandler<IMutation>)",1,2,3
"org.apache.cassandra.service.StorageProxy.sendToHintedEndpoints(Mutation,Iterable<InetAddress>,AbstractWriteResponseHandler<IMutation>,String,Stage)",3,18,19
"org.apache.cassandra.service.StorageProxy.setCasContentionTimeout(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.setCounterWriteRpcTimeout(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.setHintedHandoffEnabled(boolean)",1,1,1
"org.apache.cassandra.service.StorageProxy.setMaxHintWindow(int)",1,1,1
"org.apache.cassandra.service.StorageProxy.setMaxHintsInProgress(int)",1,1,1
"org.apache.cassandra.service.StorageProxy.setNativeTransportMaxConcurrentConnections(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.setNativeTransportMaxConcurrentConnectionsPerIp(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.setRangeRpcTimeout(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.setReadRpcTimeout(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.setRpcTimeout(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.setTruncateRpcTimeout(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.setWriteRpcTimeout(Long)",1,1,1
"org.apache.cassandra.service.StorageProxy.shouldHint(InetAddress)",4,5,5
"org.apache.cassandra.service.StorageProxy.submitHint(HintRunnable)",1,2,2
"org.apache.cassandra.service.StorageProxy.submitHint(Mutation,Collection<InetAddress>,AbstractWriteResponseHandler<IMutation>)",1,2,3
"org.apache.cassandra.service.StorageProxy.submitHint(Mutation,InetAddress,AbstractWriteResponseHandler<IMutation>)",1,1,1
"org.apache.cassandra.service.StorageProxy.syncWriteBatchedMutations(List<WriteResponseHandlerWrapper>,String,Stage)",1,3,3
"org.apache.cassandra.service.StorageProxy.syncWriteToBatchlog(Collection<Mutation>,BatchlogEndpoints,UUID)",1,3,4
"org.apache.cassandra.service.StorageProxy.syncWriteToBatchlog(WriteResponseHandler<?>,Batch,Collection<InetAddress>)",1,3,3
"org.apache.cassandra.service.StorageProxy.systemKeyspaceQuery(List<? extends ReadCommand>)",3,2,3
"org.apache.cassandra.service.StorageProxy.truncateBlocking(String,String)",2,4,4
"org.apache.cassandra.service.StorageProxy.verifyNoHintsInProgress()",1,2,2
"org.apache.cassandra.service.StorageProxy.wrapBatchResponseHandler(Mutation,ConsistencyLevel,ConsistencyLevel,WriteType,BatchlogCleanup)",1,1,1
"org.apache.cassandra.service.StorageProxy.wrapViewBatchResponseHandler(Mutation,ConsistencyLevel,ConsistencyLevel,List<InetAddress>,AtomicLong,WriteType,BatchlogCleanup)",1,1,1
"org.apache.cassandra.service.StorageService.RangeRelocator.RangeRelocator(Collection<Token>,List<String>)",1,1,1
"org.apache.cassandra.service.StorageService.RangeRelocator.calculateToFromStreams(Collection<Token>,List<String>)",13,15,19
"org.apache.cassandra.service.StorageService.RangeRelocator.stream()",1,1,1
"org.apache.cassandra.service.StorageService.RangeRelocator.streamsNeeded()",1,1,1
"org.apache.cassandra.service.StorageService.StorageService()",1,1,2
"org.apache.cassandra.service.StorageService.addExpireTimeIfFound(InetAddress,long)",1,2,2
"org.apache.cassandra.service.StorageService.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.service.StorageService.bootstrap(Collection<Token>)",2,4,6
"org.apache.cassandra.service.StorageService.bulkLoad(String)",1,1,2
"org.apache.cassandra.service.StorageService.bulkLoadAsync(String)",1,1,1
"org.apache.cassandra.service.StorageService.bulkLoadInternal(String)",2,4,6
"org.apache.cassandra.service.StorageService.calculateStreamAndFetchRanges(Collection<Range<Token>>,Collection<Range<Token>>)",1,9,9
"org.apache.cassandra.service.StorageService.checkForEndpointCollision()",6,8,10
"org.apache.cassandra.service.StorageService.clearSnapshot(String,String...)",4,6,8
"org.apache.cassandra.service.StorageService.confirmReplication(InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.constructRangeToEndpointMap(String,List<Range<Token>>)",1,2,2
"org.apache.cassandra.service.StorageService.createRepairRangeFrom(String,String)",1,4,4
"org.apache.cassandra.service.StorageService.createRepairTask(int,String,RepairOption)",2,2,3
"org.apache.cassandra.service.StorageService.decommission()",6,4,8
"org.apache.cassandra.service.StorageService.deliverHints(String)",1,1,1
"org.apache.cassandra.service.StorageService.describeLocalRing(String)",1,1,1
"org.apache.cassandra.service.StorageService.describeRing(String)",1,1,1
"org.apache.cassandra.service.StorageService.describeRing(String,boolean)",3,5,7
"org.apache.cassandra.service.StorageService.describeRingJMX(String)",1,3,3
"org.apache.cassandra.service.StorageService.disableAutoCompaction(String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.doAuthSetup()",1,4,5
"org.apache.cassandra.service.StorageService.drain()",2,11,11
"org.apache.cassandra.service.StorageService.effectiveOwnership(String)",5,7,11
"org.apache.cassandra.service.StorageService.enableAutoCompaction(String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.excise(Collection<Token>,InetAddress)",1,3,3
"org.apache.cassandra.service.StorageService.excise(Collection<Token>,InetAddress,long)",1,1,1
"org.apache.cassandra.service.StorageService.extractExpireTime(String[])",1,1,1
"org.apache.cassandra.service.StorageService.forceKeyspaceCleanup(String,String...)",2,2,4
"org.apache.cassandra.service.StorageService.forceKeyspaceCompaction(boolean,String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceKeyspaceFlush(String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceRemoveCompletion()",1,4,4
"org.apache.cassandra.service.StorageService.forceRepairAsync(String,RepairOption)",2,2,3
"org.apache.cassandra.service.StorageService.forceRepairAsync(String,boolean,Collection<String>,Collection<String>,boolean,boolean,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceRepairAsync(String,boolean,boolean,boolean,boolean,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceRepairAsync(String,int,Collection<String>,Collection<String>,boolean,boolean,String...)",5,13,14
"org.apache.cassandra.service.StorageService.forceRepairRangeAsync(String,String,String,boolean,Collection<String>,Collection<String>,boolean,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceRepairRangeAsync(String,String,String,boolean,boolean,boolean,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceRepairRangeAsync(String,String,String,int,Collection<String>,Collection<String>,boolean,String...)",2,7,8
"org.apache.cassandra.service.StorageService.forceTerminateAllRepairSessions()",1,1,1
"org.apache.cassandra.service.StorageService.getAllDataFileLocations()",1,2,2
"org.apache.cassandra.service.StorageService.getAllRanges(List<Token>)",2,4,4
"org.apache.cassandra.service.StorageService.getApplicationStateValue(InetAddress,ApplicationState)",1,1,1
"org.apache.cassandra.service.StorageService.getBatchSizeFailureThreshold()",1,1,1
"org.apache.cassandra.service.StorageService.getChangedRangesForLeaving(String,InetAddress)",1,7,7
"org.apache.cassandra.service.StorageService.getClusterName()",1,1,1
"org.apache.cassandra.service.StorageService.getCommitLogLocation()",1,1,1
"org.apache.cassandra.service.StorageService.getCompactionThroughputMbPerSec()",1,1,1
"org.apache.cassandra.service.StorageService.getCurrentGenerationNumber()",1,1,1
"org.apache.cassandra.service.StorageService.getDrainProgress()",1,1,1
"org.apache.cassandra.service.StorageService.getEndpointForHostId(UUID)",1,1,1
"org.apache.cassandra.service.StorageService.getEndpointToHostId()",1,2,2
"org.apache.cassandra.service.StorageService.getHostIdForEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.getHostIdMap()",1,1,1
"org.apache.cassandra.service.StorageService.getHostIdToEndpoint()",1,2,2
"org.apache.cassandra.service.StorageService.getJoiningNodes()",1,1,1
"org.apache.cassandra.service.StorageService.getKeyspaces()",1,1,1
"org.apache.cassandra.service.StorageService.getLeavingNodes()",1,1,1
"org.apache.cassandra.service.StorageService.getLiveNaturalEndpoints(Keyspace,ByteBuffer)",1,1,1
"org.apache.cassandra.service.StorageService.getLiveNaturalEndpoints(Keyspace,RingPosition)",1,3,3
"org.apache.cassandra.service.StorageService.getLiveNodes()",1,1,1
"org.apache.cassandra.service.StorageService.getLoadMap()",1,2,2
"org.apache.cassandra.service.StorageService.getLoadString()",1,1,1
"org.apache.cassandra.service.StorageService.getLocalHostId()",1,1,1
"org.apache.cassandra.service.StorageService.getLocalHostUUID()",1,1,1
"org.apache.cassandra.service.StorageService.getLocalRanges(String)",1,1,1
"org.apache.cassandra.service.StorageService.getLocalTokens()",1,2,2
"org.apache.cassandra.service.StorageService.getLoggingLevels()",1,4,4
"org.apache.cassandra.service.StorageService.getMovingNodes()",1,2,2
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,ByteBuffer)",1,1,1
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,RingPosition)",1,1,1
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,String,String)",3,1,3
"org.apache.cassandra.service.StorageService.getNewSourceRanges(String,Set<Range<Token>>)",4,4,4
"org.apache.cassandra.service.StorageService.getNonSystemKeyspaces()",1,1,1
"org.apache.cassandra.service.StorageService.getOperationMode()",1,1,1
"org.apache.cassandra.service.StorageService.getOwnership()",1,3,3
"org.apache.cassandra.service.StorageService.getPartitionerName()",1,1,1
"org.apache.cassandra.service.StorageService.getPendingRangeToEndpointMap(String)",1,3,3
"org.apache.cassandra.service.StorageService.getPreferredHintsStreamTarget()",2,4,4
"org.apache.cassandra.service.StorageService.getPrimaryRangeForEndpointWithinDC(String,InetAddress)",4,5,5
"org.apache.cassandra.service.StorageService.getPrimaryRanges(String)",1,1,1
"org.apache.cassandra.service.StorageService.getPrimaryRangesForEndpoint(String,InetAddress)",1,4,4
"org.apache.cassandra.service.StorageService.getPrimaryRangesWithinDC(String)",1,1,1
"org.apache.cassandra.service.StorageService.getRangeToAddressMap(String)",1,1,1
"org.apache.cassandra.service.StorageService.getRangeToAddressMap(String,List<Token>)",1,2,2
"org.apache.cassandra.service.StorageService.getRangeToAddressMapInLocalDC(String)",1,2,2
"org.apache.cassandra.service.StorageService.getRangeToEndpointMap(String)",1,2,2
"org.apache.cassandra.service.StorageService.getRangeToRpcaddressMap(String)",1,3,3
"org.apache.cassandra.service.StorageService.getRangesForEndpoint(String,InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.getReleaseVersion()",1,1,1
"org.apache.cassandra.service.StorageService.getRemovalStatus()",2,1,2
"org.apache.cassandra.service.StorageService.getRingDelay()",2,2,2
"org.apache.cassandra.service.StorageService.getRpcaddress(InetAddress)",3,3,3
"org.apache.cassandra.service.StorageService.getSavedCachesLocation()",1,1,1
"org.apache.cassandra.service.StorageService.getSchemaVersion()",1,1,1
"org.apache.cassandra.service.StorageService.getSeverity(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.getSnapshotDetails()",3,5,6
"org.apache.cassandra.service.StorageService.getSplits(List<Token>,int,ColumnFamilyStore)",1,2,2
"org.apache.cassandra.service.StorageService.getSplits(String,String,Range<Token>,int)",1,1,1
"org.apache.cassandra.service.StorageService.getStreamThroughputMbPerSec()",1,1,1
"org.apache.cassandra.service.StorageService.getTokenFactory()",1,1,1
"org.apache.cassandra.service.StorageService.getTokenMetadata()",1,1,1
"org.apache.cassandra.service.StorageService.getTokenToEndpointMap()",1,2,2
"org.apache.cassandra.service.StorageService.getTokens()",1,1,1
"org.apache.cassandra.service.StorageService.getTokens(InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.getTokens(String)",1,1,1
"org.apache.cassandra.service.StorageService.getTokensFor(InetAddress)",1,1,2
"org.apache.cassandra.service.StorageService.getTokensInLocalDC()",1,3,3
"org.apache.cassandra.service.StorageService.getTombstoneFailureThreshold()",1,1,1
"org.apache.cassandra.service.StorageService.getTombstoneWarnThreshold()",1,1,1
"org.apache.cassandra.service.StorageService.getTraceProbability()",1,1,1
"org.apache.cassandra.service.StorageService.getUnreachableNodes()",1,1,1
"org.apache.cassandra.service.StorageService.getValidColumnFamilies(boolean,boolean,String,String...)",1,1,1
"org.apache.cassandra.service.StorageService.getValidKeyspace(String)",2,1,2
"org.apache.cassandra.service.StorageService.gossipSnitchInfo()",1,1,1
"org.apache.cassandra.service.StorageService.handleStateBootstrap(InetAddress)",1,4,4
"org.apache.cassandra.service.StorageService.handleStateLeaving(InetAddress)",1,4,4
"org.apache.cassandra.service.StorageService.handleStateLeft(InetAddress,String[])",1,2,2
"org.apache.cassandra.service.StorageService.handleStateMoving(InetAddress,String[])",1,2,2
"org.apache.cassandra.service.StorageService.handleStateNormal(InetAddress)",1,21,22
"org.apache.cassandra.service.StorageService.handleStateRemoving(InetAddress,String[])",2,7,8
"org.apache.cassandra.service.StorageService.hasAppenders(Logger)",1,1,1
"org.apache.cassandra.service.StorageService.initServer()",1,1,1
"org.apache.cassandra.service.StorageService.initServer(int)",2,17,19
"org.apache.cassandra.service.StorageService.isBootstrapMode()",1,1,1
"org.apache.cassandra.service.StorageService.isGossipRunning()",1,1,1
"org.apache.cassandra.service.StorageService.isInShutdownHook()",1,1,1
"org.apache.cassandra.service.StorageService.isIncrementalBackupsEnabled()",1,1,1
"org.apache.cassandra.service.StorageService.isInitialized()",1,1,1
"org.apache.cassandra.service.StorageService.isJoined()",1,1,2
"org.apache.cassandra.service.StorageService.isLocalDC(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.isNativeTransportRunning()",2,1,2
"org.apache.cassandra.service.StorageService.isRPCServerRunning()",2,1,3
"org.apache.cassandra.service.StorageService.isRpcReady(InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.isSetupCompleted()",1,2,2
"org.apache.cassandra.service.StorageService.isStarting()",1,1,1
"org.apache.cassandra.service.StorageService.isStatus(InetAddress,String)",1,1,1
"org.apache.cassandra.service.StorageService.joinRing()",2,4,4
"org.apache.cassandra.service.StorageService.joinTokenRing(int)",13,28,33
"org.apache.cassandra.service.StorageService.keySamples(Iterable<ColumnFamilyStore>,Range<Token>)",1,2,2
"org.apache.cassandra.service.StorageService.keysToTokens(Range<Token>,List<DecoratedKey>)",1,2,2
"org.apache.cassandra.service.StorageService.leaveRing()",1,1,1
"org.apache.cassandra.service.StorageService.loadNewSSTables(String,String)",1,1,1
"org.apache.cassandra.service.StorageService.maybeAddKeyspace(KeyspaceMetadata)",1,2,2
"org.apache.cassandra.service.StorageService.maybeAddTable(CFMetaData)",1,2,2
"org.apache.cassandra.service.StorageService.move(String)",1,2,2
"org.apache.cassandra.service.StorageService.move(Token)",7,6,9
"org.apache.cassandra.service.StorageService.notifyDown(InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.notifyJoined(InetAddress)",2,3,4
"org.apache.cassandra.service.StorageService.notifyLeft(InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.notifyMoved(InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.notifyRpcChange(InetAddress,boolean)",1,2,2
"org.apache.cassandra.service.StorageService.notifyUp(InetAddress)",2,3,4
"org.apache.cassandra.service.StorageService.onAlive(InetAddress,EndpointState)",1,2,2
"org.apache.cassandra.service.StorageService.onChange(InetAddress,ApplicationState,VersionedValue)",6,7,19
"org.apache.cassandra.service.StorageService.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.StorageService.onJoin(InetAddress,EndpointState)",1,2,2
"org.apache.cassandra.service.StorageService.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.onRestart(InetAddress,EndpointState)",1,2,2
"org.apache.cassandra.service.StorageService.populateTokenMetadata()",1,4,4
"org.apache.cassandra.service.StorageService.prepareReplacementInfo()",3,4,5
"org.apache.cassandra.service.StorageService.prepareToJoin()",9,9,13
"org.apache.cassandra.service.StorageService.rebuild(String)",2,4,8
"org.apache.cassandra.service.StorageService.rebuildSecondaryIndex(String,String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.register(IEndpointLifecycleSubscriber)",1,1,1
"org.apache.cassandra.service.StorageService.registerDaemon(CassandraDaemon)",1,1,1
"org.apache.cassandra.service.StorageService.removeEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.removeNode(String)",7,6,11
"org.apache.cassandra.service.StorageService.removeShutdownHook()",1,3,3
"org.apache.cassandra.service.StorageService.repairAsync(String,Map<String, String>)",5,7,7
"org.apache.cassandra.service.StorageService.reportManualSeverity(double)",1,1,1
"org.apache.cassandra.service.StorageService.reportSeverity(double)",1,1,1
"org.apache.cassandra.service.StorageService.rescheduleFailedDeletions()",1,1,1
"org.apache.cassandra.service.StorageService.resetLocalSchema()",1,1,1
"org.apache.cassandra.service.StorageService.restoreReplicaCount(InetAddress,InetAddress)",1,8,8
"org.apache.cassandra.service.StorageService.resumeBootstrap()",2,3,5
"org.apache.cassandra.service.StorageService.sampleKeyRange()",1,4,4
"org.apache.cassandra.service.StorageService.scrub(boolean,boolean,String,String...)",1,1,1
"org.apache.cassandra.service.StorageService.scrub(boolean,boolean,boolean,String,String...)",1,2,3
"org.apache.cassandra.service.StorageService.sendReplicationNotification(InetAddress)",2,3,4
"org.apache.cassandra.service.StorageService.setBatchSizeFailureThreshold(int)",1,1,1
"org.apache.cassandra.service.StorageService.setCompactionThroughputMbPerSec(int)",1,1,1
"org.apache.cassandra.service.StorageService.setGossipTokens(Collection<Token>)",1,1,1
"org.apache.cassandra.service.StorageService.setHintedHandoffThrottleInKB(int)",1,1,1
"org.apache.cassandra.service.StorageService.setIncrementalBackupsEnabled(boolean)",1,1,1
"org.apache.cassandra.service.StorageService.setLoggingLevel(String,String)",3,7,7
"org.apache.cassandra.service.StorageService.setMode(Mode,String,boolean)",1,3,3
"org.apache.cassandra.service.StorageService.setMode(Mode,boolean)",1,1,1
"org.apache.cassandra.service.StorageService.setPartitionerUnsafe(IPartitioner)",1,1,1
"org.apache.cassandra.service.StorageService.setRpcReady(boolean)",1,1,1
"org.apache.cassandra.service.StorageService.setStreamThroughputMbPerSec(int)",1,1,1
"org.apache.cassandra.service.StorageService.setTokenMetadataUnsafe(TokenMetadata)",1,1,1
"org.apache.cassandra.service.StorageService.setTokens(Collection<Token>)",1,2,2
"org.apache.cassandra.service.StorageService.setTombstoneFailureThreshold(int)",1,1,1
"org.apache.cassandra.service.StorageService.setTombstoneWarnThreshold(int)",1,1,1
"org.apache.cassandra.service.StorageService.setTraceProbability(double)",1,1,1
"org.apache.cassandra.service.StorageService.shouldBootstrap()",1,3,3
"org.apache.cassandra.service.StorageService.shutdownClientServers()",1,1,1
"org.apache.cassandra.service.StorageService.startGossiping()",1,2,2
"org.apache.cassandra.service.StorageService.startLeaving()",1,1,1
"org.apache.cassandra.service.StorageService.startNativeTransport()",2,2,3
"org.apache.cassandra.service.StorageService.startRPCServer()",2,1,2
"org.apache.cassandra.service.StorageService.stopClient()",1,1,1
"org.apache.cassandra.service.StorageService.stopDaemon()",2,1,2
"org.apache.cassandra.service.StorageService.stopGossiping()",1,2,2
"org.apache.cassandra.service.StorageService.stopNativeTransport()",2,1,2
"org.apache.cassandra.service.StorageService.stopRPCServer()",2,2,3
"org.apache.cassandra.service.StorageService.stopTransports()",1,4,4
"org.apache.cassandra.service.StorageService.streamHints()",1,1,1
"org.apache.cassandra.service.StorageService.streamRanges(Map<String, Multimap<Range<Token>, InetAddress>>)",3,6,7
"org.apache.cassandra.service.StorageService.stringify(Iterable<InetAddress>)",1,2,2
"org.apache.cassandra.service.StorageService.takeMultipleTableSnapshot(String,String...)",8,7,12
"org.apache.cassandra.service.StorageService.takeSnapshot(String,String...)",5,6,9
"org.apache.cassandra.service.StorageService.takeTableSnapshot(String,String,String)",7,2,8
"org.apache.cassandra.service.StorageService.trueSnapshotsSize()",3,3,4
"org.apache.cassandra.service.StorageService.truncate(String,String)",1,2,2
"org.apache.cassandra.service.StorageService.unbootstrap(Runnable)",1,3,5
"org.apache.cassandra.service.StorageService.unregister(IEndpointLifecycleSubscriber)",1,1,1
"org.apache.cassandra.service.StorageService.unsafeInitialize()",1,2,2
"org.apache.cassandra.service.StorageService.updatePeerInfo(InetAddress)",3,3,9
"org.apache.cassandra.service.StorageService.updateSnitch(String,Boolean,Integer,Integer,Double)",1,5,5
"org.apache.cassandra.service.StorageService.updateTopology()",1,1,1
"org.apache.cassandra.service.StorageService.updateTopology(InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.upgradeSSTables(String,boolean,String...)",1,2,3
"org.apache.cassandra.service.StorageService.verify(boolean,String,String...)",1,2,3
"org.apache.cassandra.service.TruncateResponseHandler.TruncateResponseHandler(int)",1,1,1
"org.apache.cassandra.service.TruncateResponseHandler.get()",2,2,3
"org.apache.cassandra.service.TruncateResponseHandler.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.TruncateResponseHandler.response(MessageIn)",1,2,2
"org.apache.cassandra.service.WriteResponseHandler.WriteResponseHandler(Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Keyspace,Runnable,WriteType)",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.WriteResponseHandler(InetAddress,WriteType)",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.WriteResponseHandler(InetAddress,WriteType,Runnable)",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.ackCount()",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.response(MessageIn<T>)",1,2,2
"org.apache.cassandra.service.pager.AbstractQueryPager.AbstractQueryPager(ReadCommand,int)",1,1,1
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.Pager(DataLimits,int)",1,1,1
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.applyToPartition(RowIterator)",3,6,6
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.applyToRow(Row)",1,1,1
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.applyToStatic(Row)",1,1,2
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.onClose()",1,3,3
"org.apache.cassandra.service.pager.AbstractQueryPager.fetchPage(int,ConsistencyLevel,ClientState)",2,2,2
"org.apache.cassandra.service.pager.AbstractQueryPager.fetchPageInternal(int,ReadOrderGroup)",2,2,2
"org.apache.cassandra.service.pager.AbstractQueryPager.isExhausted()",1,1,4
"org.apache.cassandra.service.pager.AbstractQueryPager.maxRemaining()",1,1,1
"org.apache.cassandra.service.pager.AbstractQueryPager.remainingInPartition()",1,1,1
"org.apache.cassandra.service.pager.AbstractQueryPager.restoreState(DecoratedKey,int,int)",1,1,1
"org.apache.cassandra.service.pager.AbstractQueryPager.startOrderGroup()",1,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.MultiPartitionPager(Group,PagingState,int)",5,5,7
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator.PagersIterator(int,ConsistencyLevel,ClientState,ReadOrderGroup)",1,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator.close()",1,2,2
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator.computeNext()",3,6,6
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator.setCounter(Counter)",1,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.fetchPage(int,ConsistencyLevel,ClientState)",1,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.fetchPageInternal(int,ReadOrderGroup)",1,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.isExhausted()",4,2,5
"org.apache.cassandra.service.pager.MultiPartitionPager.maxRemaining()",1,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.startOrderGroup()",3,3,3
"org.apache.cassandra.service.pager.MultiPartitionPager.state()",2,1,3
"org.apache.cassandra.service.pager.PagingState.PagingState(ByteBuffer,RowMark,int,int)",1,1,1
"org.apache.cassandra.service.pager.PagingState.RowMark.RowMark(ByteBuffer,int)",1,1,1
"org.apache.cassandra.service.pager.PagingState.RowMark.clustering(CFMetaData)",2,2,3
"org.apache.cassandra.service.pager.PagingState.RowMark.create(CFMetaData,Row,int)",1,4,4
"org.apache.cassandra.service.pager.PagingState.RowMark.equals(Object)",2,2,3
"org.apache.cassandra.service.pager.PagingState.RowMark.hashCode()",1,1,1
"org.apache.cassandra.service.pager.PagingState.RowMark.makeClusteringTypes(CFMetaData)",1,2,2
"org.apache.cassandra.service.pager.PagingState.RowMark.toString()",1,1,1
"org.apache.cassandra.service.pager.PagingState.deserialize(ByteBuffer,int)",2,3,7
"org.apache.cassandra.service.pager.PagingState.equals(Object)",2,4,5
"org.apache.cassandra.service.pager.PagingState.hashCode()",1,1,1
"org.apache.cassandra.service.pager.PagingState.serialize(int)",1,2,6
"org.apache.cassandra.service.pager.PagingState.serializedSize(int)",2,2,5
"org.apache.cassandra.service.pager.PagingState.toString()",1,1,1
"org.apache.cassandra.service.pager.QueryPagers.QueryPagers()",1,1,1
"org.apache.cassandra.service.pager.QueryPagers.countPaged(CFMetaData,DecoratedKey,ColumnFilter,ClusteringIndexFilter,DataLimits,ConsistencyLevel,ClientState,int,int,boolean)",1,2,2
"org.apache.cassandra.service.pager.RangeNamesQueryPager.RangeNamesQueryPager(PartitionRangeReadCommand,PagingState,int)",1,2,2
"org.apache.cassandra.service.pager.RangeNamesQueryPager.isPreviouslyReturnedPartition(DecoratedKey)",1,1,1
"org.apache.cassandra.service.pager.RangeNamesQueryPager.makeExcludingKeyBounds(PartitionPosition)",2,1,3
"org.apache.cassandra.service.pager.RangeNamesQueryPager.nextPageReadCommand(int)",1,2,2
"org.apache.cassandra.service.pager.RangeNamesQueryPager.recordLast(DecoratedKey,Row)",1,1,1
"org.apache.cassandra.service.pager.RangeNamesQueryPager.state()",1,2,2
"org.apache.cassandra.service.pager.RangeSliceQueryPager.RangeSliceQueryPager(PartitionRangeReadCommand,PagingState,int)",1,2,2
"org.apache.cassandra.service.pager.RangeSliceQueryPager.isPreviouslyReturnedPartition(DecoratedKey)",1,1,1
"org.apache.cassandra.service.pager.RangeSliceQueryPager.makeKeyBounds(PartitionPosition,boolean)",2,1,5
"org.apache.cassandra.service.pager.RangeSliceQueryPager.nextPageReadCommand(int)",1,4,4
"org.apache.cassandra.service.pager.RangeSliceQueryPager.recordLast(DecoratedKey,Row)",1,3,3
"org.apache.cassandra.service.pager.RangeSliceQueryPager.state()",1,2,2
"org.apache.cassandra.service.pager.SinglePartitionPager.SinglePartitionPager(SinglePartitionReadCommand,PagingState,int)",1,2,2
"org.apache.cassandra.service.pager.SinglePartitionPager.isPreviouslyReturnedPartition(DecoratedKey)",1,1,1
"org.apache.cassandra.service.pager.SinglePartitionPager.key()",1,1,1
"org.apache.cassandra.service.pager.SinglePartitionPager.limits()",1,1,1
"org.apache.cassandra.service.pager.SinglePartitionPager.nextPageReadCommand(int)",1,2,2
"org.apache.cassandra.service.pager.SinglePartitionPager.recordLast(DecoratedKey,Row)",1,3,3
"org.apache.cassandra.service.pager.SinglePartitionPager.state()",1,2,2
"org.apache.cassandra.service.paxos.AbstractPaxosCallback.AbstractPaxosCallback(int,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.paxos.AbstractPaxosCallback.await()",2,2,3
"org.apache.cassandra.service.paxos.AbstractPaxosCallback.getResponseCount()",1,1,1
"org.apache.cassandra.service.paxos.AbstractPaxosCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.paxos.Commit.Commit(UUID,PartitionUpdate)",1,1,1
"org.apache.cassandra.service.paxos.Commit.CommitSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.service.paxos.Commit.CommitSerializer.serialize(Commit,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.service.paxos.Commit.CommitSerializer.serializedSize(Commit,int)",1,2,2
"org.apache.cassandra.service.paxos.Commit.emptyCommit(DecoratedKey,CFMetaData)",1,1,1
"org.apache.cassandra.service.paxos.Commit.equals(Object)",3,3,5
"org.apache.cassandra.service.paxos.Commit.hasBallot(UUID)",1,1,1
"org.apache.cassandra.service.paxos.Commit.hashCode()",1,1,1
"org.apache.cassandra.service.paxos.Commit.isAfter(Commit)",1,1,1
"org.apache.cassandra.service.paxos.Commit.makeMutation()",1,1,1
"org.apache.cassandra.service.paxos.Commit.newPrepare(DecoratedKey,CFMetaData,UUID)",1,1,1
"org.apache.cassandra.service.paxos.Commit.newProposal(UUID,PartitionUpdate)",1,1,1
"org.apache.cassandra.service.paxos.Commit.toString()",1,1,1
"org.apache.cassandra.service.paxos.CommitVerbHandler.doVerb(MessageIn<Commit>,int)",1,1,1
"org.apache.cassandra.service.paxos.PaxosState.PaxosState(Commit,Commit,Commit)",1,3,3
"org.apache.cassandra.service.paxos.PaxosState.PaxosState(DecoratedKey,CFMetaData)",1,1,1
"org.apache.cassandra.service.paxos.PaxosState.commit(Commit)",1,2,2
"org.apache.cassandra.service.paxos.PaxosState.prepare(Commit)",2,2,2
"org.apache.cassandra.service.paxos.PaxosState.propose(Commit)",2,3,3
"org.apache.cassandra.service.paxos.PrepareCallback.PrepareCallback(DecoratedKey,CFMetaData,int,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.paxos.PrepareCallback.replicasMissingMostRecentCommit()",1,1,1
"org.apache.cassandra.service.paxos.PrepareCallback.response(MessageIn<PrepareResponse>)",2,4,7
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponse(boolean,Commit,Commit)",1,1,1
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponseSerializer.deserialize(DataInputPlus,int)",1,2,2
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponseSerializer.serialize(PrepareResponse,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponseSerializer.serializedSize(PrepareResponse,int)",1,2,2
"org.apache.cassandra.service.paxos.PrepareResponse.toString()",1,1,1
"org.apache.cassandra.service.paxos.PrepareVerbHandler.doVerb(MessageIn<Commit>,int)",1,1,1
"org.apache.cassandra.service.paxos.ProposeCallback.ProposeCallback(int,int,boolean,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.paxos.ProposeCallback.getAcceptCount()",1,1,1
"org.apache.cassandra.service.paxos.ProposeCallback.isFullyRefused()",1,2,2
"org.apache.cassandra.service.paxos.ProposeCallback.isSuccessful()",1,1,1
"org.apache.cassandra.service.paxos.ProposeCallback.response(MessageIn<Boolean>)",1,6,6
"org.apache.cassandra.service.paxos.ProposeVerbHandler.doVerb(MessageIn<Commit>,int)",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.ConnectionHandler(StreamSession)",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.IncomingMessageHandler.IncomingMessageHandler(StreamSession)",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.IncomingMessageHandler.name()",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.IncomingMessageHandler.run()",1,5,5
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.MessageHandler(StreamSession)",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.close()",1,2,2
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.getReadChannel(Socket)",1,2,2
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.getWriteChannel(Socket)",2,2,2
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.isClosed()",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.sendInitMessage(Socket,boolean)",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.signalCloseDone()",1,2,2
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.start(Socket,int)",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.OutgoingMessageHandler(StreamSession)",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.enqueue(StreamMessage)",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.name()",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.run()",1,6,7
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.sendMessage(DataOutputStreamPlus,StreamMessage)",1,3,3
"org.apache.cassandra.streaming.ConnectionHandler.close()",1,3,3
"org.apache.cassandra.streaming.ConnectionHandler.initiate()",1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.initiateOnReceivingSide(Socket,boolean,int)",1,2,2
"org.apache.cassandra.streaming.ConnectionHandler.isOutgoingConnected()",1,2,2
"org.apache.cassandra.streaming.ConnectionHandler.sendMessage(StreamMessage)",2,1,2
"org.apache.cassandra.streaming.ConnectionHandler.sendMessages(Collection<? extends StreamMessage>)",1,2,2
"org.apache.cassandra.streaming.DefaultConnectionFactory.createConnection(InetAddress)",3,3,5
"org.apache.cassandra.streaming.ProgressInfo.Direction.Direction(int)",1,1,1
"org.apache.cassandra.streaming.ProgressInfo.Direction.fromByte(byte)",1,1,2
"org.apache.cassandra.streaming.ProgressInfo.ProgressInfo(InetAddress,int,String,Direction,long,long)",1,1,1
"org.apache.cassandra.streaming.ProgressInfo.equals(Object)",7,2,8
"org.apache.cassandra.streaming.ProgressInfo.hashCode()",1,1,1
"org.apache.cassandra.streaming.ProgressInfo.isCompleted()",1,1,1
"org.apache.cassandra.streaming.ProgressInfo.toString()",1,1,2
"org.apache.cassandra.streaming.ReplicationFinishedVerbHandler.doVerb(MessageIn,int)",1,2,2
"org.apache.cassandra.streaming.SessionInfo.SessionInfo(InetAddress,int,InetAddress,Collection<StreamSummary>,Collection<StreamSummary>,State)",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getReceivingFiles()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getSendingFiles()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFiles(Collection<StreamSummary>)",1,1,2
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesCompleted(Collection<ProgressInfo>)",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesReceived()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesSent()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesToReceive()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesToSend()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeInProgress(Collection<ProgressInfo>)",1,1,2
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeReceived()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeSent()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeToReceive()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeToSend()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizes(Collection<StreamSummary>)",1,1,2
"org.apache.cassandra.streaming.SessionInfo.isFailed()",1,1,1
"org.apache.cassandra.streaming.SessionInfo.updateProgress(ProgressInfo)",1,1,2
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.addSessionInfo(SessionInfo)",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.connectAllStreamSessions()",1,2,2
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.getAllSessionInfo()",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.getAllStreamSessions()",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.getOrCreateNextSession(InetAddress,InetAddress)",2,2,3
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.getOrCreateSessionById(InetAddress,int,InetAddress)",1,2,2
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.hasActiveSessions()",3,2,4
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.updateProgress(ProgressInfo)",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.StreamCoordinator(int,boolean,boolean,StreamConnectionFactory)",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.StreamSessionConnector.StreamSessionConnector(StreamSession)",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.StreamSessionConnector.run()",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.addSessionInfo(SessionInfo)",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.connectAllStreamSessions()",1,2,2
"org.apache.cassandra.streaming.StreamCoordinator.getAllSessionInfo()",1,2,2
"org.apache.cassandra.streaming.StreamCoordinator.getAllStreamSessions()",1,2,2
"org.apache.cassandra.streaming.StreamCoordinator.getHostData(InetAddress)",2,1,2
"org.apache.cassandra.streaming.StreamCoordinator.getOrCreateHostData(InetAddress)",1,2,2
"org.apache.cassandra.streaming.StreamCoordinator.getOrCreateNextSession(InetAddress,InetAddress)",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.getOrCreateSessionById(InetAddress,int,InetAddress)",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.getPeers()",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.hasActiveSessions()",3,2,3
"org.apache.cassandra.streaming.StreamCoordinator.isReceiving()",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.setConnectionFactory(StreamConnectionFactory)",1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.sliceSSTableDetails(Collection<SSTableStreamingSections>)",1,3,3
"org.apache.cassandra.streaming.StreamCoordinator.transferFiles(InetAddress,Collection<SSTableStreamingSections>)",1,3,3
"org.apache.cassandra.streaming.StreamCoordinator.updateProgress(ProgressInfo)",1,1,1
"org.apache.cassandra.streaming.StreamEvent.ProgressEvent.ProgressEvent(UUID,ProgressInfo)",1,1,1
"org.apache.cassandra.streaming.StreamEvent.ProgressEvent.toString()",1,1,1
"org.apache.cassandra.streaming.StreamEvent.SessionCompleteEvent.SessionCompleteEvent(StreamSession)",1,1,1
"org.apache.cassandra.streaming.StreamEvent.SessionPreparedEvent.SessionPreparedEvent(UUID,SessionInfo)",1,1,1
"org.apache.cassandra.streaming.StreamEvent.StreamEvent(Type,UUID)",1,1,1
"org.apache.cassandra.streaming.StreamException.StreamException(StreamState,String)",1,1,1
"org.apache.cassandra.streaming.StreamException.StreamException(StreamState,String,Throwable)",1,1,1
"org.apache.cassandra.streaming.StreamManager.StreamRateLimiter.StreamRateLimiter(InetAddress)",1,3,3
"org.apache.cassandra.streaming.StreamManager.StreamRateLimiter.acquire(int)",1,2,2
"org.apache.cassandra.streaming.StreamManager.StreamRateLimiter.mayUpdateThroughput(double,RateLimiter)",1,2,3
"org.apache.cassandra.streaming.StreamManager.addNotificationListener(NotificationListener,NotificationFilter,Object)",1,1,1
"org.apache.cassandra.streaming.StreamManager.getCurrentStreams()",1,1,1
"org.apache.cassandra.streaming.StreamManager.getNotificationInfo()",1,1,1
"org.apache.cassandra.streaming.StreamManager.getRateLimiter(InetAddress)",1,1,1
"org.apache.cassandra.streaming.StreamManager.getReceivingStream(UUID)",1,1,1
"org.apache.cassandra.streaming.StreamManager.register(StreamResultFuture)",1,1,1
"org.apache.cassandra.streaming.StreamManager.registerReceiving(StreamResultFuture)",1,1,1
"org.apache.cassandra.streaming.StreamManager.removeNotificationListener(NotificationListener)",1,1,1
"org.apache.cassandra.streaming.StreamManager.removeNotificationListener(NotificationListener,NotificationFilter,Object)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.StreamPlan(String)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.StreamPlan(String,boolean)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.StreamPlan(String,long,int,boolean,boolean)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.connectionFactory(StreamConnectionFactory)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.execute()",1,1,1
"org.apache.cassandra.streaming.StreamPlan.flushBeforeTransfer(boolean)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.isEmpty()",1,1,1
"org.apache.cassandra.streaming.StreamPlan.listeners(StreamEventHandler,StreamEventHandler...)",1,2,2
"org.apache.cassandra.streaming.StreamPlan.requestRanges(InetAddress,InetAddress,String,Collection<Range<Token>>)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.requestRanges(InetAddress,InetAddress,String,Collection<Range<Token>>,String...)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.transferFiles(InetAddress,Collection<SSTableStreamingSections>)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.transferRanges(InetAddress,InetAddress,String,Collection<Range<Token>>)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.transferRanges(InetAddress,InetAddress,String,Collection<Range<Token>>,String...)",1,1,1
"org.apache.cassandra.streaming.StreamPlan.transferRanges(InetAddress,String,Collection<Range<Token>>,String...)",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.StreamDeserializer(CFMetaData,DataInputPlus,Version,SerializationHeader)",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.checkForExceptions()",2,1,2
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.close()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.columns()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.hasNext()",2,4,4
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.isReverseOrder()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.maybeMarkLocalToBeCleared(Row)",1,2,2
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.metadata()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.newPartition()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.next()",1,3,3
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.partitionKey()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.partitionLevelDeletion()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.staticRow()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.stats()",1,1,1
"org.apache.cassandra.streaming.StreamReader.StreamReader(FileMessageHeader,StreamSession)",1,1,1
"org.apache.cassandra.streaming.StreamReader.createWriter(ColumnFamilyStore,long,long,Type)",2,1,2
"org.apache.cassandra.streaming.StreamReader.drain(InputStream,long)",4,2,4
"org.apache.cassandra.streaming.StreamReader.read(ReadableByteChannel)",3,5,6
"org.apache.cassandra.streaming.StreamReader.totalSize()",1,1,2
"org.apache.cassandra.streaming.StreamReader.writePartition(StreamDeserializer,SSTableMultiWriter,ColumnFamilyStore)",1,1,1
"org.apache.cassandra.streaming.StreamReceiveTask.OnCompletionRunnable.OnCompletionRunnable(StreamReceiveTask)",1,1,1
"org.apache.cassandra.streaming.StreamReceiveTask.OnCompletionRunnable.run()",2,8,8
"org.apache.cassandra.streaming.StreamReceiveTask.StreamReceiveTask(StreamSession,UUID,int,long)",1,1,1
"org.apache.cassandra.streaming.StreamReceiveTask.abort()",2,1,2
"org.apache.cassandra.streaming.StreamReceiveTask.getTotalNumberOfFiles()",1,1,1
"org.apache.cassandra.streaming.StreamReceiveTask.getTotalSize()",1,1,1
"org.apache.cassandra.streaming.StreamReceiveTask.received(SSTableMultiWriter)",2,2,3
"org.apache.cassandra.streaming.StreamRequest.StreamRequest(String,Collection<Range<Token>>,Collection<String>,long)",1,1,1
"org.apache.cassandra.streaming.StreamRequest.StreamRequestSerializer.deserialize(DataInputPlus,int)",1,3,3
"org.apache.cassandra.streaming.StreamRequest.StreamRequestSerializer.serialize(StreamRequest,DataOutputPlus,int)",1,3,3
"org.apache.cassandra.streaming.StreamRequest.StreamRequestSerializer.serializedSize(StreamRequest,int)",1,3,3
"org.apache.cassandra.streaming.StreamResultFuture.StreamResultFuture(UUID,String,StreamCoordinator)",1,3,3
"org.apache.cassandra.streaming.StreamResultFuture.StreamResultFuture(UUID,String,boolean,boolean)",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.addEventListener(StreamEventHandler)",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.attachSocket(InetAddress,int,Socket,boolean,int)",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.createAndRegister(UUID,String,StreamCoordinator)",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.equals(Object)",3,2,4
"org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent(StreamEvent)",1,2,2
"org.apache.cassandra.streaming.StreamResultFuture.getCurrentState()",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.handleProgress(ProgressInfo)",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.handleSessionComplete(StreamSession)",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.handleSessionPrepared(StreamSession)",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.hashCode()",1,1,1
"org.apache.cassandra.streaming.StreamResultFuture.init(UUID,String,Collection<StreamEventHandler>,StreamCoordinator)",1,4,4
"org.apache.cassandra.streaming.StreamResultFuture.initReceivingSide(int,UUID,String,InetAddress,Socket,boolean,int,boolean,boolean)",1,2,2
"org.apache.cassandra.streaming.StreamResultFuture.maybeComplete()",1,3,3
"org.apache.cassandra.streaming.StreamSession.SSTableStreamingSections.SSTableStreamingSections(Ref<SSTableReader>,List<Pair<Long, Long>>,long,long)",1,1,1
"org.apache.cassandra.streaming.StreamSession.StreamSession(InetAddress,InetAddress,StreamConnectionFactory,int,boolean,boolean)",1,1,1
"org.apache.cassandra.streaming.StreamSession.addStreamRequest(String,Collection<Range<Token>>,Collection<String>,long)",1,1,1
"org.apache.cassandra.streaming.StreamSession.addTransferFiles(Collection<SSTableStreamingSections>)",3,4,5
"org.apache.cassandra.streaming.StreamSession.addTransferRanges(String,Collection<Range<Token>>,Collection<String>,boolean,long)",1,3,3
"org.apache.cassandra.streaming.StreamSession.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.streaming.StreamSession.closeSession(State)",1,4,4
"org.apache.cassandra.streaming.StreamSession.complete()",1,3,3
"org.apache.cassandra.streaming.StreamSession.createConnection()",1,1,1
"org.apache.cassandra.streaming.StreamSession.description()",1,1,2
"org.apache.cassandra.streaming.StreamSession.doRetry(FileMessageHeader,Throwable)",1,2,2
"org.apache.cassandra.streaming.StreamSession.fileSent(FileMessageHeader)",1,2,2
"org.apache.cassandra.streaming.StreamSession.flushSSTables(Iterable<ColumnFamilyStore>)",1,2,2
"org.apache.cassandra.streaming.StreamSession.getColumnFamilyStores(String,Collection<String>)",1,3,3
"org.apache.cassandra.streaming.StreamSession.getSSTableSectionsForRanges(Collection<Range<Token>>,Collection<ColumnFamilyStore>,long)",1,11,11
"org.apache.cassandra.streaming.StreamSession.getSessionInfo()",1,3,3
"org.apache.cassandra.streaming.StreamSession.getTransaction(UUID)",1,1,1
"org.apache.cassandra.streaming.StreamSession.init(StreamResultFuture)",1,1,1
"org.apache.cassandra.streaming.StreamSession.isIncremental()",1,1,1
"org.apache.cassandra.streaming.StreamSession.isSuccess()",1,1,1
"org.apache.cassandra.streaming.StreamSession.keepSSTableLevel()",1,1,1
"org.apache.cassandra.streaming.StreamSession.maybeCompleted()",1,5,5
"org.apache.cassandra.streaming.StreamSession.messageReceived(StreamMessage)",2,2,7
"org.apache.cassandra.streaming.StreamSession.onAlive(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.streaming.StreamSession.onChange(InetAddress,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.streaming.StreamSession.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.streaming.StreamSession.onError(Throwable)",1,2,2
"org.apache.cassandra.streaming.StreamSession.onInitializationComplete()",1,3,3
"org.apache.cassandra.streaming.StreamSession.onJoin(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.streaming.StreamSession.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.streaming.StreamSession.onRestart(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.streaming.StreamSession.planId()",1,1,2
"org.apache.cassandra.streaming.StreamSession.prepare(Collection<StreamRequest>,Collection<StreamSummary>)",1,6,6
"org.apache.cassandra.streaming.StreamSession.prepareReceiving(StreamSummary)",1,2,2
"org.apache.cassandra.streaming.StreamSession.progress(Descriptor,Direction,long,long)",1,1,1
"org.apache.cassandra.streaming.StreamSession.receive(IncomingFileMessage)",1,1,1
"org.apache.cassandra.streaming.StreamSession.received(UUID,int)",1,1,1
"org.apache.cassandra.streaming.StreamSession.retry(UUID,int)",1,1,1
"org.apache.cassandra.streaming.StreamSession.sessionFailed()",1,1,1
"org.apache.cassandra.streaming.StreamSession.sessionIndex()",1,1,1
"org.apache.cassandra.streaming.StreamSession.start()",2,4,5
"org.apache.cassandra.streaming.StreamSession.startStreamingFiles()",1,3,3
"org.apache.cassandra.streaming.StreamSession.state()",1,1,1
"org.apache.cassandra.streaming.StreamSession.state(State)",1,1,1
"org.apache.cassandra.streaming.StreamSession.taskCompleted(StreamReceiveTask)",1,1,1
"org.apache.cassandra.streaming.StreamSession.taskCompleted(StreamTransferTask)",1,1,1
"org.apache.cassandra.streaming.StreamState.StreamState(UUID,String,Set<SessionInfo>)",1,1,1
"org.apache.cassandra.streaming.StreamState.hasFailedSession()",1,1,1
"org.apache.cassandra.streaming.StreamSummary.StreamSummary(UUID,int,long)",1,1,1
"org.apache.cassandra.streaming.StreamSummary.StreamSummarySerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.streaming.StreamSummary.StreamSummarySerializer.serialize(StreamSummary,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.streaming.StreamSummary.StreamSummarySerializer.serializedSize(StreamSummary,int)",1,1,1
"org.apache.cassandra.streaming.StreamSummary.equals(Object)",3,4,6
"org.apache.cassandra.streaming.StreamSummary.hashCode()",1,1,1
"org.apache.cassandra.streaming.StreamSummary.toString()",1,1,1
"org.apache.cassandra.streaming.StreamTask.StreamTask(StreamSession,UUID)",1,1,1
"org.apache.cassandra.streaming.StreamTask.getSummary()",1,1,1
"org.apache.cassandra.streaming.StreamTransferTask.StreamTransferTask(StreamSession,UUID)",1,1,1
"org.apache.cassandra.streaming.StreamTransferTask.abort()",2,6,7
"org.apache.cassandra.streaming.StreamTransferTask.addTransferFile(Ref<SSTableReader>,long,List<Pair<Long, Long>>,long)",1,2,2
"org.apache.cassandra.streaming.StreamTransferTask.complete(int)",1,4,4
"org.apache.cassandra.streaming.StreamTransferTask.createMessageForRetry(int)",1,2,2
"org.apache.cassandra.streaming.StreamTransferTask.getFileMessages()",1,1,1
"org.apache.cassandra.streaming.StreamTransferTask.getTotalNumberOfFiles()",1,1,1
"org.apache.cassandra.streaming.StreamTransferTask.getTotalSize()",1,1,1
"org.apache.cassandra.streaming.StreamTransferTask.scheduleTimeout(int,long,TimeUnit)",2,1,2
"org.apache.cassandra.streaming.StreamWriter.StreamWriter(SSTableReader,Collection<Pair<Long, Long>>,StreamSession)",1,1,1
"org.apache.cassandra.streaming.StreamWriter.totalSize()",1,1,2
"org.apache.cassandra.streaming.StreamWriter.write(DataOutputStreamPlus)",1,6,7
"org.apache.cassandra.streaming.StreamWriter.write(RandomAccessReader,ChecksumValidator,int,long,long)",1,2,2
"org.apache.cassandra.streaming.compress.CompressedInputStream.CompressedInputStream(InputStream,CompressionInfo,ChecksumType,Supplier<Double>)",1,1,1
"org.apache.cassandra.streaming.compress.CompressedInputStream.Reader.Reader(InputStream,CompressionInfo,BlockingQueue<byte[]>)",1,1,1
"org.apache.cassandra.streaming.compress.CompressedInputStream.Reader.runMayThrow()",4,4,4
"org.apache.cassandra.streaming.compress.CompressedInputStream.decompress(byte[])",3,2,3
"org.apache.cassandra.streaming.compress.CompressedInputStream.getTotalCompressedBytesRead()",1,1,1
"org.apache.cassandra.streaming.compress.CompressedInputStream.position(long)",1,1,1
"org.apache.cassandra.streaming.compress.CompressedInputStream.read()",3,2,6
"org.apache.cassandra.streaming.compress.CompressedStreamReader.CompressedStreamReader(FileMessageHeader,StreamSession)",1,1,1
"org.apache.cassandra.streaming.compress.CompressedStreamReader.read(ReadableByteChannel)",3,6,7
"org.apache.cassandra.streaming.compress.CompressedStreamReader.totalSize()",1,1,2
"org.apache.cassandra.streaming.compress.CompressedStreamWriter.CompressedStreamWriter(SSTableReader,Collection<Pair<Long, Long>>,CompressionInfo,StreamSession)",1,1,1
"org.apache.cassandra.streaming.compress.CompressedStreamWriter.getTransferSections(Chunk[])",1,5,5
"org.apache.cassandra.streaming.compress.CompressedStreamWriter.totalSize()",1,1,2
"org.apache.cassandra.streaming.compress.CompressedStreamWriter.write(DataOutputStreamPlus)",1,3,3
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfo(Chunk[],CompressionParams)",1,1,2
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfoSerializer.deserialize(DataInputPlus,int)",2,2,3
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfoSerializer.serialize(CompressionInfo,DataOutputPlus,int)",2,3,3
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfoSerializer.serializedSize(CompressionInfo,int)",2,3,3
"org.apache.cassandra.streaming.management.ProgressInfoCompositeData.fromCompositeData(CompositeData)",1,2,2
"org.apache.cassandra.streaming.management.ProgressInfoCompositeData.toCompositeData(UUID,ProgressInfo)",1,2,2
"org.apache.cassandra.streaming.management.SessionCompleteEventCompositeData.toCompositeData(SessionCompleteEvent)",1,2,2
"org.apache.cassandra.streaming.management.SessionInfoCompositeData.fromArrayOfCompositeData(CompositeData[],Function<CompositeData, T>)",1,1,1
"org.apache.cassandra.streaming.management.SessionInfoCompositeData.fromCompositeData(CompositeData)",1,4,4
"org.apache.cassandra.streaming.management.SessionInfoCompositeData.toArrayOfCompositeData(Collection<T>,Function<T, CompositeData>)",1,1,1
"org.apache.cassandra.streaming.management.SessionInfoCompositeData.toCompositeData(UUID,SessionInfo)",1,2,2
"org.apache.cassandra.streaming.management.StreamEventJMXNotifier.handleStreamEvent(StreamEvent)",3,4,6
"org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onFailure(Throwable)",1,1,1
"org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onSuccess(StreamState)",1,1,1
"org.apache.cassandra.streaming.management.StreamStateCompositeData.fromCompositeData(CompositeData)",1,1,1
"org.apache.cassandra.streaming.management.StreamStateCompositeData.toCompositeData(StreamState)",1,3,5
"org.apache.cassandra.streaming.management.StreamSummaryCompositeData.fromCompositeData(CompositeData)",1,1,1
"org.apache.cassandra.streaming.management.StreamSummaryCompositeData.toCompositeData(StreamSummary)",1,2,2
"org.apache.cassandra.streaming.messages.CompleteMessage.CompleteMessage()",1,1,1
"org.apache.cassandra.streaming.messages.CompleteMessage.toString()",1,1,1
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeader(UUID,int,Version,Type,long,List<Pair<Long, Long>>,CompressionInfo,long,int,Component)",1,1,1
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer.deserialize(DataInputPlus,int)",1,4,4
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer.serialize(FileMessageHeader,DataOutputPlus,int)",2,4,7
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer.serializedSize(FileMessageHeader,int)",1,4,4
"org.apache.cassandra.streaming.messages.FileMessageHeader.equals(Object)",3,3,5
"org.apache.cassandra.streaming.messages.FileMessageHeader.hashCode()",1,1,1
"org.apache.cassandra.streaming.messages.FileMessageHeader.size()",1,1,4
"org.apache.cassandra.streaming.messages.FileMessageHeader.toString()",1,1,1
"org.apache.cassandra.streaming.messages.IncomingFileMessage.IncomingFileMessage(SSTableMultiWriter,FileMessageHeader)",1,1,1
"org.apache.cassandra.streaming.messages.IncomingFileMessage.toString()",1,1,1
"org.apache.cassandra.streaming.messages.OutgoingFileMessage.OutgoingFileMessage(Ref<SSTableReader>,int,long,List<Pair<Long, Long>>,long,boolean)",1,4,4
"org.apache.cassandra.streaming.messages.OutgoingFileMessage.complete()",1,2,2
"org.apache.cassandra.streaming.messages.OutgoingFileMessage.serialize(DataOutputStreamPlus,int,StreamSession)",2,1,3
"org.apache.cassandra.streaming.messages.OutgoingFileMessage.toString()",1,1,1
"org.apache.cassandra.streaming.messages.PrepareMessage.PrepareMessage()",1,1,1
"org.apache.cassandra.streaming.messages.PrepareMessage.toString()",1,1,2
"org.apache.cassandra.streaming.messages.ReceivedMessage.ReceivedMessage(UUID,int)",1,1,1
"org.apache.cassandra.streaming.messages.ReceivedMessage.toString()",1,1,1
"org.apache.cassandra.streaming.messages.RetryMessage.RetryMessage(UUID,int)",1,1,1
"org.apache.cassandra.streaming.messages.RetryMessage.toString()",1,1,1
"org.apache.cassandra.streaming.messages.SessionFailedMessage.SessionFailedMessage()",1,1,1
"org.apache.cassandra.streaming.messages.SessionFailedMessage.toString()",1,1,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessage(InetAddress,int,UUID,String,boolean,boolean,boolean)",1,1,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessageSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessageSerializer.serialize(StreamInitMessage,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessageSerializer.serializedSize(StreamInitMessage,int)",1,1,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.createMessage(boolean,int)",1,1,3
"org.apache.cassandra.streaming.messages.StreamMessage.StreamMessage(Type)",1,1,1
"org.apache.cassandra.streaming.messages.StreamMessage.Type.Type(int,int,Serializer)",1,1,1
"org.apache.cassandra.streaming.messages.StreamMessage.Type.Type(int,int,Serializer,Serializer)",1,1,1
"org.apache.cassandra.streaming.messages.StreamMessage.Type.get(byte)",3,1,3
"org.apache.cassandra.streaming.messages.StreamMessage.deserialize(ReadableByteChannel,int,StreamSession)",3,2,3
"org.apache.cassandra.streaming.messages.StreamMessage.getPriority()",1,1,1
"org.apache.cassandra.streaming.messages.StreamMessage.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.CassandraServer()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.ThriftCASRequest(List<LegacyCell>,PartitionUpdate,int)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.appliesTo(FilteredPartition)",11,7,12
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.expectedToUnfilteredRowIterator()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.makeUpdates(FilteredPartition)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.readCommand(int)",2,4,4
"org.apache.cassandra.thrift.CassandraServer.add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel)",3,6,8
"org.apache.cassandra.thrift.CassandraServer.addColumnOrSuperColumn(List<LegacyCell>,CFMetaData,ColumnOrSuperColumn,int)",1,7,7
"org.apache.cassandra.thrift.CassandraServer.addRange(CFMetaData,LegacyDeletionInfo,Bound,Bound,long,int)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.atomic_batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>>,ConsistencyLevel)",1,4,4
"org.apache.cassandra.thrift.CassandraServer.batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>>,ConsistencyLevel)",1,4,4
"org.apache.cassandra.thrift.CassandraServer.cas(ByteBuffer,String,List<Column>,List<Column>,ConsistencyLevel,ConsistencyLevel)",3,8,10
"org.apache.cassandra.thrift.CassandraServer.cellFromColumn(CFMetaData,LegacyCellName,Column)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.createMutationList(ConsistencyLevel,Map<ByteBuffer, Map<String, List<Mutation>>>,boolean)",6,12,16
"org.apache.cassandra.thrift.CassandraServer.deleteColumnOrSuperColumn(LegacyDeletionInfo,List<LegacyCell>,CFMetaData,Deletion,int)",5,10,12
"org.apache.cassandra.thrift.CassandraServer.describe_cluster_name()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_keyspace(String)",2,1,2
"org.apache.cassandra.thrift.CassandraServer.describe_keyspaces()",1,3,3
"org.apache.cassandra.thrift.CassandraServer.describe_local_ring(String)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.describe_partitioner()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_ring(String)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.describe_schema_versions()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_snitch()",2,2,2
"org.apache.cassandra.thrift.CassandraServer.describe_splits(String,String,String,int)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.describe_splits_ex(String,String,String,int)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.describe_token_map()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_version()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.doInsert(ConsistencyLevel,List<? extends IMutation>)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.doInsert(ConsistencyLevel,List<? extends IMutation>,boolean)",2,3,4
"org.apache.cassandra.thrift.CassandraServer.execute_cql3_query(ByteBuffer,Compression,ConsistencyLevel)",1,4,4
"org.apache.cassandra.thrift.CassandraServer.execute_cql_query(ByteBuffer,Compression)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.execute_prepared_cql3_query(int,List<ByteBuffer>,ConsistencyLevel)",2,5,5
"org.apache.cassandra.thrift.CassandraServer.execute_prepared_cql_query(int,List<ByteBuffer>)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.fixOptionalSliceParameters(ColumnSlice)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.get(ByteBuffer,ColumnPath,ConsistencyLevel)",3,9,11
"org.apache.cassandra.thrift.CassandraServer.getLimits(int,boolean,SlicePredicate)",1,1,2
"org.apache.cassandra.thrift.CassandraServer.getLimits(int,boolean,int)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.getSlice(List<SinglePartitionReadCommand>,boolean,int,ConsistencyLevel,ClientState)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.getSliceInternal(String,ByteBuffer,ColumnParent,int,SlicePredicate,ConsistencyLevel,ClientState)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.get_count(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel)",2,10,11
"org.apache.cassandra.thrift.CassandraServer.get_indexed_slices(ColumnParent,IndexClause,SlicePredicate,ConsistencyLevel)",1,5,5
"org.apache.cassandra.thrift.CassandraServer.get_multi_slice(MultiSliceRequest)",5,7,10
"org.apache.cassandra.thrift.CassandraServer.get_paged_slice(String,KeyRange,ByteBuffer,ConsistencyLevel)",2,9,10
"org.apache.cassandra.thrift.CassandraServer.get_range_slices(ColumnParent,SlicePredicate,KeyRange,ConsistencyLevel)",1,7,7
"org.apache.cassandra.thrift.CassandraServer.get_slice(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel)",1,4,4
"org.apache.cassandra.thrift.CassandraServer.insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.internal_insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel)",3,3,5
"org.apache.cassandra.thrift.CassandraServer.internal_remove(ByteBuffer,ColumnPath,long,ConsistencyLevel,boolean)",4,7,10
"org.apache.cassandra.thrift.CassandraServer.login(AuthenticationRequest)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(CFMetaData,ColumnParent,SlicePredicate)",4,9,9
"org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(CFMetaData,ColumnParent,SliceRange)",5,7,11
"org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(CFMetaData,Slices)",1,5,5
"org.apache.cassandra.thrift.CassandraServer.makeSlices(CFMetaData,SliceRange)",1,1,3
"org.apache.cassandra.thrift.CassandraServer.multigetSliceInternal(String,List<ByteBuffer>,ColumnParent,int,SlicePredicate,ConsistencyLevel,ClientState)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.multiget_count(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel)",1,5,5
"org.apache.cassandra.thrift.CassandraServer.multiget_slice(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel)",1,4,4
"org.apache.cassandra.thrift.CassandraServer.prepare_cql3_query(ByteBuffer,Compression)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.prepare_cql_query(ByteBuffer,Compression)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.read(List<SinglePartitionReadCommand>,ConsistencyLevel,ClientState)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.registerMetrics()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.release()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.remove(ByteBuffer,ColumnPath,long,ConsistencyLevel)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.schedule(long)",1,1,2
"org.apache.cassandra.thrift.CassandraServer.set_cql_version(String)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.set_keyspace(String)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.sortAndMerge(CFMetaData,List<LegacyCell>,int)",2,7,9
"org.apache.cassandra.thrift.CassandraServer.startSessionIfRequested()",2,2,2
"org.apache.cassandra.thrift.CassandraServer.state()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.system_add_column_family(CfDef)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.system_add_keyspace(KsDef)",3,6,6
"org.apache.cassandra.thrift.CassandraServer.system_drop_column_family(String)",2,2,3
"org.apache.cassandra.thrift.CassandraServer.system_drop_keyspace(String)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.system_update_column_family(CfDef)",6,3,9
"org.apache.cassandra.thrift.CassandraServer.system_update_keyspace(KsDef)",2,3,4
"org.apache.cassandra.thrift.CassandraServer.thriftifyColumnWithName(CFMetaData,LegacyCell,ByteBuffer)",2,2,2
"org.apache.cassandra.thrift.CassandraServer.thriftifyColumns(CFMetaData,Iterator<LegacyCell>)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.thriftifyColumnsAsColumns(CFMetaData,Iterator<LegacyCell>)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.thriftifyCounterSuperColumns(CFMetaData,Iterator<LegacyCell>,boolean)",1,5,6
"org.apache.cassandra.thrift.CassandraServer.thriftifyKeySlices(PartitionIterator,ColumnParent,int)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.thriftifyPartition(RowIterator,boolean,boolean,int)",2,3,4
"org.apache.cassandra.thrift.CassandraServer.thriftifySubColumn(CFMetaData,LegacyCell)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.thriftifySubColumn(LegacyCell,ByteBuffer)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.thriftifySubCounter(CFMetaData,LegacyCell)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.thriftifySuperColumns(CFMetaData,Iterator<LegacyCell>,boolean,boolean,boolean)",3,5,5
"org.apache.cassandra.thrift.CassandraServer.thriftifySuperColumns(Iterator<LegacyCell>,boolean)",1,6,8
"org.apache.cassandra.thrift.CassandraServer.toCounterLegacyCell(CFMetaData,ByteBuffer,CounterColumn)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.toCounterLegacyCell(CFMetaData,CounterColumn)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.toInternalFilter(CFMetaData,ColumnParent,SlicePredicate)",4,8,8
"org.apache.cassandra.thrift.CassandraServer.toInternalFilter(CFMetaData,ColumnParent,SliceRange)",2,3,3
"org.apache.cassandra.thrift.CassandraServer.toLegacyCell(CFMetaData,ByteBuffer,Column,int)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.toLegacyCell(CFMetaData,Column,int)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.toLegacyCells(CFMetaData,List<Column>,int)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.toLegacyDeletion(CFMetaData,ByteBuffer,ByteBuffer,long,int)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.toLegacyDeletion(CFMetaData,ByteBuffer,long,int)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.trace_next_query()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.truncate(String)",2,5,7
"org.apache.cassandra.thrift.CassandraServer.uncompress(ByteBuffer,Compression)",4,7,11
"org.apache.cassandra.thrift.CassandraServer.validateLogin()",1,2,2
"org.apache.cassandra.thrift.CustomTNonBlockingServer.CustomFrameBuffer.CustomFrameBuffer(TNonblockingTransport,SelectionKey,AbstractSelectThread)",1,1,1
"org.apache.cassandra.thrift.CustomTNonBlockingServer.CustomFrameBuffer.getTransport()",1,1,1
"org.apache.cassandra.thrift.CustomTNonBlockingServer.CustomTNonBlockingServer(Args)",1,1,1
"org.apache.cassandra.thrift.CustomTNonBlockingServer.Factory.buildTServer(Args)",2,2,3
"org.apache.cassandra.thrift.CustomTNonBlockingServer.requestInvoke(FrameBuffer)",1,1,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.CustomTThreadPoolServer(Args,ExecutorService)",1,1,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.Factory.buildTServer(Args)",1,4,4
"org.apache.cassandra.thrift.CustomTThreadPoolServer.WorkerProcess.WorkerProcess(TTransport)",1,1,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.WorkerProcess.run()",1,7,7
"org.apache.cassandra.thrift.CustomTThreadPoolServer.serve()",3,8,9
"org.apache.cassandra.thrift.CustomTThreadPoolServer.stop()",1,1,1
"org.apache.cassandra.thrift.SSLTransportFactory.openTransport(String,int)",1,2,2
"org.apache.cassandra.thrift.SSLTransportFactory.setOptions(Map<String, String>)",1,7,7
"org.apache.cassandra.thrift.SSLTransportFactory.supportedOptions()",1,1,1
"org.apache.cassandra.thrift.TCustomNonblockingServerSocket.TCustomNonblockingServerSocket(InetSocketAddress,boolean,Integer,Integer)",1,1,1
"org.apache.cassandra.thrift.TCustomNonblockingServerSocket.acceptImpl()",2,7,8
"org.apache.cassandra.thrift.TCustomServerSocket.TCustomServerSocket(InetSocketAddress,boolean,Integer,Integer,Integer)",1,1,2
"org.apache.cassandra.thrift.TCustomServerSocket.TCustomServerSocket(ServerSocket,boolean,Integer,Integer)",1,1,1
"org.apache.cassandra.thrift.TCustomServerSocket.acceptImpl()",2,6,8
"org.apache.cassandra.thrift.TCustomServerSocket.close()",1,3,3
"org.apache.cassandra.thrift.TCustomServerSocket.interrupt()",1,1,1
"org.apache.cassandra.thrift.TCustomServerSocket.listen()",1,3,3
"org.apache.cassandra.thrift.TCustomSocket.TCustomSocket(Socket)",2,4,4
"org.apache.cassandra.thrift.TCustomSocket.TCustomSocket(String,int)",1,1,1
"org.apache.cassandra.thrift.TCustomSocket.TCustomSocket(String,int,int)",1,1,1
"org.apache.cassandra.thrift.TCustomSocket.close()",1,3,3
"org.apache.cassandra.thrift.TCustomSocket.getSocket()",1,2,2
"org.apache.cassandra.thrift.TCustomSocket.initSocket()",1,2,2
"org.apache.cassandra.thrift.TCustomSocket.isOpen()",2,1,2
"org.apache.cassandra.thrift.TCustomSocket.open()",4,3,6
"org.apache.cassandra.thrift.TCustomSocket.setTimeout(int)",1,2,2
"org.apache.cassandra.thrift.TFramedTransportFactory.openTransport(String,int)",1,1,1
"org.apache.cassandra.thrift.TFramedTransportFactory.setOptions(Map<String, String>)",1,2,2
"org.apache.cassandra.thrift.TFramedTransportFactory.supportedOptions()",1,1,1
"org.apache.cassandra.thrift.THsHaDisruptorServer.Factory.buildTServer(Args)",2,2,3
"org.apache.cassandra.thrift.THsHaDisruptorServer.THsHaDisruptorServer(Args)",1,1,1
"org.apache.cassandra.thrift.THsHaDisruptorServer.beforeClose(Message)",1,1,1
"org.apache.cassandra.thrift.THsHaDisruptorServer.beforeInvoke(Message)",1,1,1
"org.apache.cassandra.thrift.TServerCustomFactory.TServerCustomFactory(String)",1,1,1
"org.apache.cassandra.thrift.TServerCustomFactory.buildTServer(Args)",4,4,5
"org.apache.cassandra.thrift.ThriftClientState.ThriftClientState(InetSocketAddress)",1,1,1
"org.apache.cassandra.thrift.ThriftClientState.getQueryState()",1,1,1
"org.apache.cassandra.thrift.ThriftClientState.getSchedulingValue()",2,2,2
"org.apache.cassandra.thrift.ThriftConversion.addDefaultCQLMetadata(Collection<ColumnDefinition>,String,String,AbstractType<?>,AbstractType<?>,AbstractType<?>,AbstractType<?>)",1,7,7
"org.apache.cassandra.thrift.ThriftConversion.applyImplicitDefaults(CfDef)",1,12,12
"org.apache.cassandra.thrift.ThriftConversion.cachingFromThrift(String,String)",1,3,4
"org.apache.cassandra.thrift.ThriftConversion.cachingFromTrhfit(String)",6,2,6
"org.apache.cassandra.thrift.ThriftConversion.columnDefinitionsToThrift(CFMetaData,Collection<ColumnDefinition>)",1,3,3
"org.apache.cassandra.thrift.ThriftConversion.compactionParamsFromThrift(CfDef)",1,2,2
"org.apache.cassandra.thrift.ThriftConversion.compressionParametersFromThrift(Map<String, String>)",1,1,1
"org.apache.cassandra.thrift.ThriftConversion.compressionParametersToThrift(CompressionParams)",2,2,2
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(CfDef)",1,2,2
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(ConsistencyLevel)",12,2,12
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(KsDef,CFMetaData...)",2,2,3
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(String,String,AbstractType<?>,AbstractType<?>,ColumnDef)",1,2,4
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(String,String,AbstractType<?>,AbstractType<?>,List<ColumnDef>)",2,2,3
"org.apache.cassandra.thrift.ThriftConversion.fromThriftCellsPerRow(String)",1,2,2
"org.apache.cassandra.thrift.ThriftConversion.fromThriftForUpdate(CfDef,CFMetaData)",1,1,1
"org.apache.cassandra.thrift.ThriftConversion.indexDefsFromThrift(CFMetaData,String,String,AbstractType<?>,AbstractType<?>,List<ColumnDef>)",6,6,8
"org.apache.cassandra.thrift.ThriftConversion.internalFromThrift(CfDef,boolean,Collection<ColumnDefinition>,boolean)",4,25,30
"org.apache.cassandra.thrift.ThriftConversion.isSuper(String)",4,2,4
"org.apache.cassandra.thrift.ThriftConversion.rethrow(RequestExecutionException)",3,3,3
"org.apache.cassandra.thrift.ThriftConversion.rowFilterFromThrift(CFMetaData,List<IndexExpression>)",2,3,4
"org.apache.cassandra.thrift.ThriftConversion.toThrift(AuthenticationException)",1,1,1
"org.apache.cassandra.thrift.ThriftConversion.toThrift(CFMetaData)",1,3,4
"org.apache.cassandra.thrift.ThriftConversion.toThrift(CFMetaData,ColumnDefinition)",4,4,6
"org.apache.cassandra.thrift.ThriftConversion.toThrift(CachingParams)",4,2,5
"org.apache.cassandra.thrift.ThriftConversion.toThrift(ConsistencyLevel)",12,2,12
"org.apache.cassandra.thrift.ThriftConversion.toThrift(KeyspaceMetadata)",1,3,3
"org.apache.cassandra.thrift.ThriftConversion.toThrift(RequestFailureException)",1,1,1
"org.apache.cassandra.thrift.ThriftConversion.toThrift(RequestTimeoutException)",1,5,5
"org.apache.cassandra.thrift.ThriftConversion.toThrift(RequestValidationException)",1,1,1
"org.apache.cassandra.thrift.ThriftConversion.toThrift(UnavailableException)",1,1,1
"org.apache.cassandra.thrift.ThriftConversion.toThriftCellsPerRow(CachingParams)",1,2,2
"org.apache.cassandra.thrift.ThriftConversion.triggerDefinitionsFromThrift(List<TriggerDef>)",1,2,2
"org.apache.cassandra.thrift.ThriftConversion.triggerDefinitionsToThrift(Triggers)",1,2,2
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.PartitionMerger(UnfilteredRowIterator,int)",1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.consumeNextToMerge()",1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.consumeNextWrapped()",1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.hasNext()",1,4,4
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.init()",1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.next()",6,8,9
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.staticRow()",1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.updateNextToMerge()",2,1,2
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.SuperColumnsPartitionMerger(UnfilteredRowIterator,int)",1,1,2
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.applyToRow(Row)",2,8,9
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.makeDynamicCell(Cell)",1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.simpleCellsIterator(Row)",3,2,3
"org.apache.cassandra.thrift.ThriftResultsMerger.ThriftResultsMerger(int)",1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.applyToPartition(UnfilteredRowIterator)",1,2,2
"org.apache.cassandra.thrift.ThriftResultsMerger.maybeWrap(UnfilteredPartitionIterator,CFMetaData,int)",2,2,3
"org.apache.cassandra.thrift.ThriftResultsMerger.maybeWrap(UnfilteredRowIterator,int)",2,3,4
"org.apache.cassandra.thrift.ThriftServer.ThriftServer(InetAddress,int,int)",1,1,1
"org.apache.cassandra.thrift.ThriftServer.ThriftServerThread.ThriftServerThread(InetAddress,int,int,TProcessor,TTransportFactory)",1,1,1
"org.apache.cassandra.thrift.ThriftServer.ThriftServerThread.run()",1,1,1
"org.apache.cassandra.thrift.ThriftServer.ThriftServerThread.stopServer()",1,1,1
"org.apache.cassandra.thrift.ThriftServer.getCassandraServer()",1,1,1
"org.apache.cassandra.thrift.ThriftServer.getProcessor(CassandraServer)",1,1,1
"org.apache.cassandra.thrift.ThriftServer.getTransportFactory()",1,1,1
"org.apache.cassandra.thrift.ThriftServer.isRunning()",1,1,1
"org.apache.cassandra.thrift.ThriftServer.start()",1,2,2
"org.apache.cassandra.thrift.ThriftServer.stop()",1,3,3
"org.apache.cassandra.thrift.ThriftSessionManager.connectionComplete(SocketAddress)",1,2,2
"org.apache.cassandra.thrift.ThriftSessionManager.currentSession()",1,2,3
"org.apache.cassandra.thrift.ThriftSessionManager.getConnectedClients()",1,1,1
"org.apache.cassandra.thrift.ThriftSessionManager.setCurrentSocket(SocketAddress)",1,1,1
"org.apache.cassandra.thrift.ThriftValidation.getThriftColumnNameComparator(CFMetaData,ByteBuffer)",3,3,3
"org.apache.cassandra.thrift.ThriftValidation.isEmpty(List<IndexExpression>)",1,2,2
"org.apache.cassandra.thrift.ThriftValidation.summarize(ByteBuffer)",2,1,2
"org.apache.cassandra.thrift.ThriftValidation.validateColumnData(CFMetaData,ByteBuffer,Column)",3,4,6
"org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily(String,String)",3,1,3
"org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily(String,String,boolean)",4,2,4
"org.apache.cassandra.thrift.ThriftValidation.validateColumnNames(CFMetaData,ByteBuffer,Iterable<ByteBuffer>)",12,11,16
"org.apache.cassandra.thrift.ThriftValidation.validateColumnNames(CFMetaData,ColumnParent,Iterable<ByteBuffer>)",1,1,1
"org.apache.cassandra.thrift.ThriftValidation.validateColumnOrSuperColumn(CFMetaData,ColumnOrSuperColumn)",10,7,16
"org.apache.cassandra.thrift.ThriftValidation.validateColumnParent(CFMetaData,ColumnParent)",3,2,4
"org.apache.cassandra.thrift.ThriftValidation.validateColumnPath(CFMetaData,ColumnPath)",5,3,7
"org.apache.cassandra.thrift.ThriftValidation.validateColumnPathOrParent(CFMetaData,ColumnPath)",4,3,7
"org.apache.cassandra.thrift.ThriftValidation.validateDeletion(CFMetaData,Deletion)",4,6,7
"org.apache.cassandra.thrift.ThriftValidation.validateFilterClauses(CFMetaData,List<IndexExpression>)",6,7,9
"org.apache.cassandra.thrift.ThriftValidation.validateIndexClauses(CFMetaData,IndexClause)",3,1,3
"org.apache.cassandra.thrift.ThriftValidation.validateKey(CFMetaData,ByteBuffer)",3,4,5
"org.apache.cassandra.thrift.ThriftValidation.validateKeyRange(CFMetaData,ByteBuffer,KeyRange)",10,7,17
"org.apache.cassandra.thrift.ThriftValidation.validateKeyspace(String)",2,1,2
"org.apache.cassandra.thrift.ThriftValidation.validateKeyspaceNotSystem(String)",2,2,2
"org.apache.cassandra.thrift.ThriftValidation.validateKeyspaceNotYetExisting(String)",3,3,3
"org.apache.cassandra.thrift.ThriftValidation.validateMutation(CFMetaData,Mutation)",2,2,5
"org.apache.cassandra.thrift.ThriftValidation.validatePredicate(CFMetaData,ColumnParent,SlicePredicate)",3,2,6
"org.apache.cassandra.thrift.ThriftValidation.validateRange(CFMetaData,ColumnParent,SliceRange)",5,4,9
"org.apache.cassandra.thrift.ThriftValidation.validateSlicePredicate(CFMetaData,ByteBuffer,SlicePredicate)",2,3,5
"org.apache.cassandra.thrift.ThriftValidation.validateTtl(Column)",4,3,4
"org.apache.cassandra.tools.AbstractJmxClient.AbstractJmxClient(String,Integer,String,String)",1,1,3
"org.apache.cassandra.tools.AbstractJmxClient.addCmdOption(String,String,boolean,String)",1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.close()",1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.printHelp(String,String)",1,2,2
"org.apache.cassandra.tools.AbstractJmxClient.processArguments(String[])",1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.setOutput(PrintStream)",1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.write(String)",1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.write(String,Object...)",1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.writeln(String)",1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.writeln(String,Object...)",1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.writeln(Throwable)",1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.BootstrapMonitor(PrintStream)",1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.awaitCompletion()",1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.handleConnectionClosed(long,String)",1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.handleConnectionFailed(long,String)",1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.handleNotificationLost(long,String)",1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.isInterestedIn(String)",1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.progress(String,ProgressEvent)",1,3,3
"org.apache.cassandra.tools.BulkLoadConnectionFactory.BulkLoadConnectionFactory(int,int,ServerEncryptionOptions,boolean)",1,1,1
"org.apache.cassandra.tools.BulkLoadConnectionFactory.createConnection(InetAddress)",3,5,6
"org.apache.cassandra.tools.BulkLoader.CmdLineOptions.addOption(String,String,String)",1,1,1
"org.apache.cassandra.tools.BulkLoader.CmdLineOptions.addOption(String,String,String,String)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ExternalClient.ExternalClient(Set<InetAddress>,int,String,String,int,int,ServerEncryptionOptions,SSLOptions)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ExternalClient.getConnectionFactory()",1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.LoaderOptions(File)",1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.errorMsg(String,CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.getCmdLineOptions()",1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.parseArgs(String[])",1,28,28
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.printUsage(Options)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.ProgressIndicator()",1,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.handleStreamEvent(StreamEvent)",1,10,16
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.mbPerSec(long,long)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.onFailure(Throwable)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.onSuccess(StreamState)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.printSummary(int)",1,1,1
"org.apache.cassandra.tools.BulkLoader.buildSSLOptions(ClientEncryptionOptions)",2,1,3
"org.apache.cassandra.tools.BulkLoader.main(String[])",1,6,6
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.ColumnFamilyStoreMBeanIterator(MBeanServerConnection)",5,3,9
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.getCFSMBeans(MBeanServerConnection,String)",1,2,2
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.hasNext()",1,1,1
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.next()",1,1,1
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.remove()",1,1,1
"org.apache.cassandra.tools.GetVersion.main(String[])",1,1,1
"org.apache.cassandra.tools.JMXConnection.JMXConnection(String,int,String,String)",1,1,1
"org.apache.cassandra.tools.JMXConnection.close()",1,1,1
"org.apache.cassandra.tools.JMXConnection.connect()",1,2,2
"org.apache.cassandra.tools.JMXConnection.getMbeanServerConn()",1,1,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String,int)",1,1,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String,int,String,String)",1,4,4
"org.apache.cassandra.tools.NodeProbe.assassinateEndpoint(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.clearSnapshot(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.close()",1,1,1
"org.apache.cassandra.tools.NodeProbe.connect()",1,2,3
"org.apache.cassandra.tools.NodeProbe.decommission()",1,1,1
"org.apache.cassandra.tools.NodeProbe.describeRing(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.disableAutoCompaction(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.disableHintedHandoff()",1,1,1
"org.apache.cassandra.tools.NodeProbe.disableHintsForDC(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.drain()",1,1,1
"org.apache.cassandra.tools.NodeProbe.effectiveOwnership(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.enableAutoCompaction(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.enableHintedHandoff()",1,1,1
"org.apache.cassandra.tools.NodeProbe.enableHintsForDC(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceKeyspaceCleanup(PrintStream,String,String...)",1,2,2
"org.apache.cassandra.tools.NodeProbe.forceKeyspaceCleanup(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceKeyspaceCompaction(boolean,String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceKeyspaceFlush(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceRemoveCompletion()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getAndResetGCStats()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getCacheMetric(String,String)",4,4,5
"org.apache.cassandra.tools.NodeProbe.getCacheServiceMBean()",1,1,2
"org.apache.cassandra.tools.NodeProbe.getCfsProxy(String,String)",2,4,6
"org.apache.cassandra.tools.NodeProbe.getClusterName()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getColumnFamilyMetric(String,String,String)",6,6,8
"org.apache.cassandra.tools.NodeProbe.getColumnFamilyStoreMBeanProxies()",1,1,3
"org.apache.cassandra.tools.NodeProbe.getCompactionHistory()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getCompactionManagerProxy()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getCompactionMetric(String)",5,5,6
"org.apache.cassandra.tools.NodeProbe.getCompactionThroughput()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getCurrentGenerationNumber()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getDataCenter()",1,1,2
"org.apache.cassandra.tools.NodeProbe.getDroppedMessages()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getEndpoint()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getEndpointSnitchInfoProxy()",1,1,2
"org.apache.cassandra.tools.NodeProbe.getEndpoints(String,String,String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.getExceptionCount()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getFailureDetectorPhilValues()",1,1,2
"org.apache.cassandra.tools.NodeProbe.getGossipInfo()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getHeapMemoryUsage()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getHintedHandoffDisabledDCs()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getHostIdMap()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getJoiningNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getKeyspaces()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLeavingNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLiveNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLoadMap()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLoadString()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLocalHostId()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLoggingLevels()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getMovingNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getNonSystemKeyspaces()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getOperationMode()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getOwnership()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getPartitionSample(String,String,int,int,int,List<Sampler>)",1,3,3
"org.apache.cassandra.tools.NodeProbe.getPartitioner()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getProxyMetric(String)",1,1,2
"org.apache.cassandra.tools.NodeProbe.getRMIClientSocketFactory()",2,2,2
"org.apache.cassandra.tools.NodeProbe.getRack()",1,1,2
"org.apache.cassandra.tools.NodeProbe.getReadRepairAttempted()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getReadRepairRepairedBackground()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getReadRepairRepairedBlocking()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getReleaseVersion()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getRemovalStatus()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getSSTables(String,String,String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.getSchemaVersion()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getSnapshotDetails()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getSpProxy()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getStorageMetric(String)",1,1,2
"org.apache.cassandra.tools.NodeProbe.getStreamStatus()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getStreamThroughput()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getThreadPoolMetric(Stage,String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.getTokenToEndpointMap()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getTokens()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getTokens(String)",1,1,2
"org.apache.cassandra.tools.NodeProbe.getTraceProbability()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getUnreachableNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getUptime()",1,1,1
"org.apache.cassandra.tools.NodeProbe.invalidateCounterCache()",1,1,1
"org.apache.cassandra.tools.NodeProbe.invalidateKeyCache()",1,1,1
"org.apache.cassandra.tools.NodeProbe.invalidateRowCache()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isFailed()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isGossipRunning()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isHandoffEnabled()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isIncrementalBackupsEnabled()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isInitialized()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isJoined()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isNativeTransportRunning()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isStarting()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isThriftServerRunning()",1,1,1
"org.apache.cassandra.tools.NodeProbe.joinRing()",1,1,1
"org.apache.cassandra.tools.NodeProbe.loadNewSSTables(String,String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.metricPercentilesAsArray(JmxHistogramMBean)",1,1,1
"org.apache.cassandra.tools.NodeProbe.metricPercentilesAsArray(JmxTimerMBean)",1,1,1
"org.apache.cassandra.tools.NodeProbe.move(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.pauseHintsDelivery()",1,1,1
"org.apache.cassandra.tools.NodeProbe.rebuild(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.rebuildIndex(String,String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.reloadTriggers()",1,1,1
"org.apache.cassandra.tools.NodeProbe.removeNode(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.repairAsync(PrintStream,String,Map<String, String>)",1,2,3
"org.apache.cassandra.tools.NodeProbe.replayBatchlog()",1,1,2
"org.apache.cassandra.tools.NodeProbe.resetLocalSchema()",1,1,1
"org.apache.cassandra.tools.NodeProbe.resumeBootstrap(PrintStream)",1,3,4
"org.apache.cassandra.tools.NodeProbe.resumeHintsDelivery()",1,1,1
"org.apache.cassandra.tools.NodeProbe.sampleKeyRange()",1,1,1
"org.apache.cassandra.tools.NodeProbe.scrub(PrintStream,boolean,boolean,boolean,String,String...)",1,2,2
"org.apache.cassandra.tools.NodeProbe.scrub(boolean,boolean,boolean,String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.setCacheCapacities(int,int,int)",1,1,2
"org.apache.cassandra.tools.NodeProbe.setCacheKeysToSave(int,int,int)",1,1,2
"org.apache.cassandra.tools.NodeProbe.setCompactionThreshold(String,String,int,int)",1,1,1
"org.apache.cassandra.tools.NodeProbe.setCompactionThroughput(int)",1,1,1
"org.apache.cassandra.tools.NodeProbe.setHintedHandoffThrottleInKB(int)",1,1,1
"org.apache.cassandra.tools.NodeProbe.setIncrementalBackupsEnabled(boolean)",1,1,1
"org.apache.cassandra.tools.NodeProbe.setLoggingLevel(String,String)",1,1,2
"org.apache.cassandra.tools.NodeProbe.setStreamThroughput(int)",1,1,1
"org.apache.cassandra.tools.NodeProbe.setTraceProbability(double)",1,1,1
"org.apache.cassandra.tools.NodeProbe.startGossiping()",1,1,1
"org.apache.cassandra.tools.NodeProbe.startNativeTransport()",1,1,1
"org.apache.cassandra.tools.NodeProbe.startThriftServer()",1,1,1
"org.apache.cassandra.tools.NodeProbe.stop(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.stopById(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.stopCassandraDaemon()",1,1,1
"org.apache.cassandra.tools.NodeProbe.stopGossiping()",1,1,1
"org.apache.cassandra.tools.NodeProbe.stopNativeTransport()",1,1,1
"org.apache.cassandra.tools.NodeProbe.stopThriftServer()",1,1,1
"org.apache.cassandra.tools.NodeProbe.takeMultipleTableSnapshot(String,String...)",2,2,3
"org.apache.cassandra.tools.NodeProbe.takeSnapshot(String,String,String...)",3,2,3
"org.apache.cassandra.tools.NodeProbe.trueSnapshotsSize()",1,1,1
"org.apache.cassandra.tools.NodeProbe.truncate(String,String)",1,1,3
"org.apache.cassandra.tools.NodeProbe.truncateHints()",1,1,2
"org.apache.cassandra.tools.NodeProbe.truncateHints(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.upgradeSSTables(PrintStream,String,boolean,String...)",1,2,2
"org.apache.cassandra.tools.NodeProbe.upgradeSSTables(String,boolean,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.verify(PrintStream,boolean,String,String...)",1,2,2
"org.apache.cassandra.tools.NodeProbe.verify(boolean,String,String...)",1,1,1
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.connect()",1,3,3
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.parseOptionalKeyspace(List<String>,NodeProbe)",1,1,1
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.parseOptionalKeyspace(List<String>,NodeProbe,boolean)",3,5,6
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.parseOptionalTables(List<String>)",1,2,2
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.promptAndReadPassword()",1,2,2
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.readUserPasswordFromFile(String,String)",4,5,6
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.run()",2,4,6
"org.apache.cassandra.tools.NodeTool.badUse(Exception)",1,1,1
"org.apache.cassandra.tools.NodeTool.err(Throwable)",1,1,1
"org.apache.cassandra.tools.NodeTool.getOwnershipByDc(NodeProbe,boolean,Map<String, String>,Map<InetAddress, Float>)",1,3,4
"org.apache.cassandra.tools.NodeTool.main(String...)",1,3,3
"org.apache.cassandra.tools.NodeTool.printHistory(String...)",2,1,3
"org.apache.cassandra.tools.RepairRunner.RepairRunner(PrintStream,StorageServiceMBean,String,Map<String, String>)",1,1,1
"org.apache.cassandra.tools.RepairRunner.handleConnectionClosed(long,String)",1,1,1
"org.apache.cassandra.tools.RepairRunner.handleConnectionFailed(long,String)",1,1,1
"org.apache.cassandra.tools.RepairRunner.handleNotificationLost(long,String)",1,1,1
"org.apache.cassandra.tools.RepairRunner.isInterestedIn(String)",1,1,1
"org.apache.cassandra.tools.RepairRunner.progress(String,ProgressEvent)",1,3,3
"org.apache.cassandra.tools.RepairRunner.run()",3,3,4
"org.apache.cassandra.tools.SSTableExpiredBlockers.checkForExpiredSSTableBlockers(Iterable<SSTableReader>,int)",1,7,7
"org.apache.cassandra.tools.SSTableExpiredBlockers.formatForExpiryTracing(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.tools.SSTableExpiredBlockers.main(String[])",2,8,8
"org.apache.cassandra.tools.SSTableLevelResetter.main(String[])",1,10,10
"org.apache.cassandra.tools.SSTableMetadataViewer.main(String[])",1,8,8
"org.apache.cassandra.tools.SSTableMetadataViewer.printHistograms(StatsMetadata,PrintStream)",1,2,4
"org.apache.cassandra.tools.SSTableOfflineRelevel.Relevel.Relevel(Set<SSTableReader>)",1,1,1
"org.apache.cassandra.tools.SSTableOfflineRelevel.Relevel.relevel(boolean)",1,15,15
"org.apache.cassandra.tools.SSTableOfflineRelevel.main(String[])",2,7,7
"org.apache.cassandra.tools.SSTableRepairedAtSetter.main(String[])",1,10,10
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.FileType.FileType(String,String)",1,1,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.FileType.descr()",1,2,2
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.FileType.fromOption(String)",3,2,3
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.Options(String,String)",1,1,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.errorMsg(String,CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.getCmdLineOptions()",1,1,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.parseArgs(String[])",1,4,5
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.printUsage(CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.getFilter(Options)",5,2,5
"org.apache.cassandra.tools.StandaloneSSTableUtil.listFiles(Options,CFMetaData,OutputHandler)",1,3,3
"org.apache.cassandra.tools.StandaloneSSTableUtil.main(String[])",2,5,5
"org.apache.cassandra.tools.StandaloneScrubber.Options.Options(String,String)",1,1,1
"org.apache.cassandra.tools.StandaloneScrubber.Options.errorMsg(String,CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneScrubber.Options.getCmdLineOptions()",1,1,1
"org.apache.cassandra.tools.StandaloneScrubber.Options.parseArgs(String[])",1,4,5
"org.apache.cassandra.tools.StandaloneScrubber.Options.printUsage(CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneScrubber.checkManifest(CompactionStrategyManager,ColumnFamilyStore,Collection<SSTableReader>)",1,5,5
"org.apache.cassandra.tools.StandaloneScrubber.main(String[])",10,14,16
"org.apache.cassandra.tools.StandaloneSplitter.Options.Options(List<String>)",1,1,1
"org.apache.cassandra.tools.StandaloneSplitter.Options.errorMsg(String,CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneSplitter.Options.getCmdLineOptions()",1,1,1
"org.apache.cassandra.tools.StandaloneSplitter.Options.parseArgs(String[])",1,5,5
"org.apache.cassandra.tools.StandaloneSplitter.Options.printUsage(CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneSplitter.isSSTableLargerEnough(SSTableReader,int)",1,1,1
"org.apache.cassandra.tools.StandaloneSplitter.main(String[])",10,21,24
"org.apache.cassandra.tools.StandaloneUpgrader.Options.Options(String,String,String)",1,1,1
"org.apache.cassandra.tools.StandaloneUpgrader.Options.errorMsg(String,CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneUpgrader.Options.getCmdLineOptions()",1,1,1
"org.apache.cassandra.tools.StandaloneUpgrader.Options.parseArgs(String[])",1,4,7
"org.apache.cassandra.tools.StandaloneUpgrader.Options.printUsage(CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneUpgrader.main(String[])",5,12,14
"org.apache.cassandra.tools.StandaloneVerifier.Options.Options(String,String)",1,1,1
"org.apache.cassandra.tools.StandaloneVerifier.Options.errorMsg(String,CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneVerifier.Options.getCmdLineOptions()",1,1,1
"org.apache.cassandra.tools.StandaloneVerifier.Options.parseArgs(String[])",1,4,5
"org.apache.cassandra.tools.StandaloneVerifier.Options.printUsage(CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.StandaloneVerifier.main(String[])",4,11,13
"org.apache.cassandra.tools.Util.Util()",1,1,1
"org.apache.cassandra.tools.Util.initDatabaseDescriptor()",1,3,4
"org.apache.cassandra.tools.nodetool.Assassinate.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.BootstrapResume.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.Cleanup.execute(NodeProbe)",3,2,4
"org.apache.cassandra.tools.nodetool.ClearSnapshot.execute(NodeProbe)",1,3,4
"org.apache.cassandra.tools.nodetool.Compact.execute(NodeProbe)",2,2,3
"org.apache.cassandra.tools.nodetool.CompactionHistory.execute(NodeProbe)",2,3,3
"org.apache.cassandra.tools.nodetool.CompactionStats.addLine(List<String[]>,int[],String...)",1,2,2
"org.apache.cassandra.tools.nodetool.CompactionStats.execute(NodeProbe)",1,9,10
"org.apache.cassandra.tools.nodetool.Decommission.execute(NodeProbe)",1,2,3
"org.apache.cassandra.tools.nodetool.DescribeCluster.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.DescribeRing.execute(NodeProbe)",1,2,3
"org.apache.cassandra.tools.nodetool.DisableAutoCompaction.execute(NodeProbe)",2,2,3
"org.apache.cassandra.tools.nodetool.DisableBackup.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.DisableBinary.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.DisableGossip.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.DisableHandoff.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.DisableHintsForDC.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.DisableThrift.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.Drain.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.EnableAutoCompaction.execute(NodeProbe)",2,2,3
"org.apache.cassandra.tools.nodetool.EnableBackup.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.EnableBinary.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.EnableGossip.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.EnableHandoff.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.EnableHintsForDC.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.EnableThrift.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.FailureDetectorInfo.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.Flush.execute(NodeProbe)",2,2,3
"org.apache.cassandra.tools.nodetool.GcStats.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.GetCompactionThreshold.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.GetCompactionThroughput.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.GetEndpoints.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.GetLoggingLevels.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.GetSSTables.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.GetStreamThroughput.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.GetTraceProbability.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.GossipInfo.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.HostStat.HostStat(String,InetAddress,boolean,Float)",1,1,1
"org.apache.cassandra.tools.nodetool.HostStat.ipOrDns()",1,2,2
"org.apache.cassandra.tools.nodetool.Info.execute(NodeProbe)",2,7,8
"org.apache.cassandra.tools.nodetool.Info.getOffHeapMemoryUsed(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.InvalidateCounterCache.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.InvalidateKeyCache.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.InvalidateRowCache.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.Join.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.ListSnapshots.execute(NodeProbe)",2,4,5
"org.apache.cassandra.tools.nodetool.Move.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.NetStats.execute(NodeProbe)",1,12,18
"org.apache.cassandra.tools.nodetool.PauseHandoff.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.ProxyHistograms.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.RangeKeySample.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.Rebuild.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.RebuildIndex.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.Refresh.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.ReloadTriggers.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.RemoveNode.execute(NodeProbe)",2,2,4
"org.apache.cassandra.tools.nodetool.Repair.execute(NodeProbe)",4,9,14
"org.apache.cassandra.tools.nodetool.ReplayBatchlog.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.ResetLocalSchema.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.ResumeHandoff.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.Ring.execute(NodeProbe)",1,6,6
"org.apache.cassandra.tools.nodetool.Ring.printDc(NodeProbe,String,String,LinkedHashMultimap<String, String>,SetHostStat,boolean)",1,9,13
"org.apache.cassandra.tools.nodetool.Scrub.execute(NodeProbe)",2,2,4
"org.apache.cassandra.tools.nodetool.SetCacheCapacity.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.SetCacheKeysToSave.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.SetCompactionThreshold.execute(NodeProbe)",1,1,3
"org.apache.cassandra.tools.nodetool.SetCompactionThroughput.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.SetHintedHandoffThrottleInKB.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.SetHostStat.SetHostStat(boolean)",1,1,1
"org.apache.cassandra.tools.nodetool.SetHostStat.add(String,String,Map<InetAddress, Float>)",1,1,1
"org.apache.cassandra.tools.nodetool.SetHostStat.iterator()",1,1,1
"org.apache.cassandra.tools.nodetool.SetHostStat.size()",1,1,1
"org.apache.cassandra.tools.nodetool.SetLoggingLevel.execute(NodeProbe)",1,3,3
"org.apache.cassandra.tools.nodetool.SetStreamThroughput.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tools.nodetool.SetTraceProbability.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.Snapshot.execute(NodeProbe)",3,8,9
"org.apache.cassandra.tools.nodetool.Status.execute(NodeProbe)",1,7,8
"org.apache.cassandra.tools.nodetool.Status.findMaxAddressLength(Map<String, SetHostStat>)",1,3,3
"org.apache.cassandra.tools.nodetool.Status.getFormat(boolean,boolean)",1,5,5
"org.apache.cassandra.tools.nodetool.Status.printNode(String,Float,List<HostStat>,boolean,boolean)",1,7,11
"org.apache.cassandra.tools.nodetool.Status.printNodesHeader(boolean,boolean)",1,2,3
"org.apache.cassandra.tools.nodetool.StatusBackup.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.StatusBinary.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.StatusGossip.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.StatusHandoff.execute(NodeProbe)",1,2,3
"org.apache.cassandra.tools.nodetool.StatusThrift.execute(NodeProbe)",1,1,2
"org.apache.cassandra.tools.nodetool.Stop.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.StopDaemon.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.TableHistograms.execute(NodeProbe)",1,8,11
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter.OptionFilter(boolean,List<String>)",1,5,5
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter.isColumnFamilyIncluded(String,String)",4,2,4
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter.verifyColumnFamilies()",3,3,3
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter.verifyKeyspaces(List<String>)",3,2,3
"org.apache.cassandra.tools.nodetool.TableStats.execute(NodeProbe)",4,22,27
"org.apache.cassandra.tools.nodetool.TableStats.format(long,boolean)",1,2,2
"org.apache.cassandra.tools.nodetool.TopPartitions.execute(NodeProbe)",2,8,9
"org.apache.cassandra.tools.nodetool.TpStats.execute(NodeProbe)",1,3,3
"org.apache.cassandra.tools.nodetool.TruncateHints.execute(NodeProbe)",1,2,2
"org.apache.cassandra.tools.nodetool.UpgradeSSTable.execute(NodeProbe)",2,2,3
"org.apache.cassandra.tools.nodetool.Verify.execute(NodeProbe)",2,2,3
"org.apache.cassandra.tools.nodetool.Version.execute(NodeProbe)",1,1,1
"org.apache.cassandra.tracing.ExpiredTraceState.ExpiredTraceState(UUID,TraceType)",1,1,1
"org.apache.cassandra.tracing.ExpiredTraceState.elapsed()",1,1,1
"org.apache.cassandra.tracing.TraceKeyspace.TraceKeyspace()",1,1,1
"org.apache.cassandra.tracing.TraceKeyspace.compile(String,String,String)",1,1,1
"org.apache.cassandra.tracing.TraceKeyspace.makeEventMutation(ByteBuffer,String,int,String,int)",1,2,2
"org.apache.cassandra.tracing.TraceKeyspace.makeStartSessionMutation(ByteBuffer,InetAddress,Map<String, String>,String,long,String,int)",1,2,2
"org.apache.cassandra.tracing.TraceKeyspace.makeStopSessionMutation(ByteBuffer,int,int)",1,1,1
"org.apache.cassandra.tracing.TraceKeyspace.metadata()",1,1,1
"org.apache.cassandra.tracing.TraceState.TraceState(InetAddress,UUID,TraceType)",1,1,1
"org.apache.cassandra.tracing.TraceState.acquireReference()",4,2,4
"org.apache.cassandra.tracing.TraceState.addProgressListener(ProgressListener)",1,1,1
"org.apache.cassandra.tracing.TraceState.elapsed()",1,1,2
"org.apache.cassandra.tracing.TraceState.enableActivityNotification(String)",1,1,1
"org.apache.cassandra.tracing.TraceState.executeMutation(Mutation)",1,1,1
"org.apache.cassandra.tracing.TraceState.mutateWithCatch(Mutation)",1,2,2
"org.apache.cassandra.tracing.TraceState.mutateWithTracing(ByteBuffer,String,int,int)",1,1,1
"org.apache.cassandra.tracing.TraceState.notifyActivity()",1,1,1
"org.apache.cassandra.tracing.TraceState.releaseReference()",1,1,1
"org.apache.cassandra.tracing.TraceState.removeProgressListener(ProgressListener)",1,1,1
"org.apache.cassandra.tracing.TraceState.stop()",1,1,1
"org.apache.cassandra.tracing.TraceState.trace(String)",1,3,3
"org.apache.cassandra.tracing.TraceState.trace(String,Object)",1,1,1
"org.apache.cassandra.tracing.TraceState.trace(String,Object,Object)",1,1,1
"org.apache.cassandra.tracing.TraceState.trace(String,Object[])",1,1,1
"org.apache.cassandra.tracing.TraceState.waitActivity(long)",3,2,4
"org.apache.cassandra.tracing.Tracing.TraceType.deserialize(byte)",2,1,3
"org.apache.cassandra.tracing.Tracing.TraceType.getTTL()",1,1,1
"org.apache.cassandra.tracing.Tracing.TraceType.serialize(TraceType)",1,1,1
"org.apache.cassandra.tracing.Tracing.begin(String,InetAddress,Map<String, String>)",1,1,1
"org.apache.cassandra.tracing.Tracing.begin(String,Map<String, String>)",1,1,1
"org.apache.cassandra.tracing.Tracing.doneWithNonLocalSession(TraceState)",1,2,2
"org.apache.cassandra.tracing.Tracing.get()",1,1,1
"org.apache.cassandra.tracing.Tracing.get(UUID)",1,1,1
"org.apache.cassandra.tracing.Tracing.getSessionId()",1,1,1
"org.apache.cassandra.tracing.Tracing.getTTL()",1,1,1
"org.apache.cassandra.tracing.Tracing.getTraceType()",1,1,1
"org.apache.cassandra.tracing.Tracing.initializeFromMessage(MessageIn<?>)",4,4,6
"org.apache.cassandra.tracing.Tracing.isTracing()",1,1,1
"org.apache.cassandra.tracing.Tracing.newSession()",1,1,1
"org.apache.cassandra.tracing.Tracing.newSession(TraceType)",1,1,1
"org.apache.cassandra.tracing.Tracing.newSession(UUID)",1,1,1
"org.apache.cassandra.tracing.Tracing.newSession(UUID,TraceType)",1,1,1
"org.apache.cassandra.tracing.Tracing.set(TraceState)",1,1,1
"org.apache.cassandra.tracing.Tracing.stopSession()",1,2,2
"org.apache.cassandra.tracing.Tracing.trace(String)",2,1,2
"org.apache.cassandra.tracing.Tracing.trace(String,Object)",2,1,2
"org.apache.cassandra.tracing.Tracing.trace(String,Object,Object)",2,1,2
"org.apache.cassandra.tracing.Tracing.trace(String,Object...)",2,1,2
"org.apache.cassandra.tracing.Tracing.traceRepair(String,Object...)",2,1,2
"org.apache.cassandra.transport.CBUtil.CBUtil()",1,1,1
"org.apache.cassandra.transport.CBUtil.decodeString(ByteBuffer)",1,3,3
"org.apache.cassandra.transport.CBUtil.readBoundValue(ByteBuf,int)",5,1,5
"org.apache.cassandra.transport.CBUtil.readBytes(ByteBuf)",1,1,2
"org.apache.cassandra.transport.CBUtil.readBytesMap(ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.readConsistencyLevel(ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.readEnumValue(Class<T>,ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.readInet(ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.readLongString(ByteBuf)",1,1,2
"org.apache.cassandra.transport.CBUtil.readNameAndValueList(ByteBuf,int)",2,3,3
"org.apache.cassandra.transport.CBUtil.readRawBytes(ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.readString(ByteBuf)",1,1,2
"org.apache.cassandra.transport.CBUtil.readString(ByteBuf,int)",2,2,3
"org.apache.cassandra.transport.CBUtil.readStringList(ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.readStringMap(ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.readStringToStringListMap(ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.readUUID(ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.readValue(ByteBuf)",2,1,2
"org.apache.cassandra.transport.CBUtil.readValueList(ByteBuf,int)",2,3,3
"org.apache.cassandra.transport.CBUtil.sizeOfBytes(byte[])",1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfBytesMap(Map<String, ByteBuffer>)",1,2,2
"org.apache.cassandra.transport.CBUtil.sizeOfConsistencyLevel(ConsistencyLevel)",1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfEnumValue(T)",1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfInet(InetSocketAddress)",1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfLongString(String)",1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfString(String)",1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfStringList(List<String>)",1,2,2
"org.apache.cassandra.transport.CBUtil.sizeOfStringMap(Map<String, String>)",1,2,2
"org.apache.cassandra.transport.CBUtil.sizeOfStringToStringListMap(Map<String, List<String>>)",1,2,2
"org.apache.cassandra.transport.CBUtil.sizeOfUUID(UUID)",1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfValue(ByteBuffer)",1,2,2
"org.apache.cassandra.transport.CBUtil.sizeOfValue(byte[])",1,1,2
"org.apache.cassandra.transport.CBUtil.sizeOfValue(int)",1,1,2
"org.apache.cassandra.transport.CBUtil.sizeOfValueList(List<ByteBuffer>)",1,2,2
"org.apache.cassandra.transport.CBUtil.writeBytes(byte[],ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.writeBytesMap(Map<String, ByteBuffer>,ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.writeConsistencyLevel(ConsistencyLevel,ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.writeEnumValue(T,ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.writeInet(InetSocketAddress,ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.writeLongString(String,ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.writeString(String,ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.writeStringList(List<String>,ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.writeStringMap(Map<String, String>,ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.writeStringToStringListMap(Map<String, List<String>>,ByteBuf)",1,2,2
"org.apache.cassandra.transport.CBUtil.writeUUID(UUID,ByteBuf)",1,1,1
"org.apache.cassandra.transport.CBUtil.writeValue(ByteBuffer,ByteBuf)",2,3,3
"org.apache.cassandra.transport.CBUtil.writeValue(byte[],ByteBuf)",2,2,2
"org.apache.cassandra.transport.CBUtil.writeValueList(List<ByteBuffer>,ByteBuf)",1,2,2
"org.apache.cassandra.transport.Client.Client(String,int,int,ClientEncryptionOptions)",1,1,1
"org.apache.cassandra.transport.Client.encodeCredentialsForSasl(Map<String, String>)",1,1,1
"org.apache.cassandra.transport.Client.main(String[])",2,3,4
"org.apache.cassandra.transport.Client.parseLine(String)",12,17,20
"org.apache.cassandra.transport.Client.readCredentials(Iterator<String>)",3,3,3
"org.apache.cassandra.transport.Client.run()",4,5,6
"org.apache.cassandra.transport.Connection.Connection(Channel,int,Tracker)",1,1,1
"org.apache.cassandra.transport.Connection.channel()",1,1,1
"org.apache.cassandra.transport.Connection.getCompressor()",1,1,1
"org.apache.cassandra.transport.Connection.getTracker()",1,1,1
"org.apache.cassandra.transport.Connection.getVersion()",1,1,1
"org.apache.cassandra.transport.Connection.setCompressor(FrameCompressor)",1,1,1
"org.apache.cassandra.transport.ConnectionLimitHandler.channelActive(ChannelHandlerContext)",4,5,7
"org.apache.cassandra.transport.ConnectionLimitHandler.channelInactive(ChannelHandlerContext)",1,3,3
"org.apache.cassandra.transport.DataType.DataType(int,AbstractType,int)",1,1,1
"org.apache.cassandra.transport.DataType.fromType(AbstractType,int)",9,9,13
"org.apache.cassandra.transport.DataType.getId(int)",2,2,2
"org.apache.cassandra.transport.DataType.getProtocolVersion()",1,1,1
"org.apache.cassandra.transport.DataType.readValue(ByteBuf,int)",5,7,10
"org.apache.cassandra.transport.DataType.serializedValueSize(Object,int)",5,7,10
"org.apache.cassandra.transport.DataType.toType(Pair<DataType, Object>)",7,6,9
"org.apache.cassandra.transport.DataType.writeValue(Object,ByteBuf,int)",3,5,10
"org.apache.cassandra.transport.Event.Event(Type)",1,1,1
"org.apache.cassandra.transport.Event.NodeEvent.NodeEvent(Type,InetSocketAddress)",1,1,1
"org.apache.cassandra.transport.Event.NodeEvent.nodeAddress()",1,1,1
"org.apache.cassandra.transport.Event.SchemaChange.SchemaChange(Change,String)",1,1,1
"org.apache.cassandra.transport.Event.SchemaChange.SchemaChange(Change,Target,String,String)",1,1,1
"org.apache.cassandra.transport.Event.SchemaChange.SchemaChange(Change,Target,String,String,List<String>)",1,1,2
"org.apache.cassandra.transport.Event.SchemaChange.deserializeEvent(ByteBuf,int)",2,4,7
"org.apache.cassandra.transport.Event.SchemaChange.equals(Object)",2,5,6
"org.apache.cassandra.transport.Event.SchemaChange.eventSerializedSize(int)",6,7,9
"org.apache.cassandra.transport.Event.SchemaChange.hashCode()",1,1,1
"org.apache.cassandra.transport.Event.SchemaChange.serializeEvent(ByteBuf,int)",2,7,9
"org.apache.cassandra.transport.Event.SchemaChange.toString()",1,5,5
"org.apache.cassandra.transport.Event.StatusChange.StatusChange(Status,InetSocketAddress)",1,1,1
"org.apache.cassandra.transport.Event.StatusChange.deserializeEvent(ByteBuf,int)",1,1,1
"org.apache.cassandra.transport.Event.StatusChange.equals(Object)",2,2,3
"org.apache.cassandra.transport.Event.StatusChange.eventSerializedSize(int)",1,1,1
"org.apache.cassandra.transport.Event.StatusChange.hashCode()",1,1,1
"org.apache.cassandra.transport.Event.StatusChange.nodeDown(InetAddress,int)",1,1,1
"org.apache.cassandra.transport.Event.StatusChange.nodeUp(InetAddress,int)",1,1,1
"org.apache.cassandra.transport.Event.StatusChange.serializeEvent(ByteBuf,int)",1,1,1
"org.apache.cassandra.transport.Event.StatusChange.toString()",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.TopologyChange(Change,InetSocketAddress)",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.deserializeEvent(ByteBuf,int)",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.equals(Object)",2,2,3
"org.apache.cassandra.transport.Event.TopologyChange.eventSerializedSize(int)",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.hashCode()",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.movedNode(InetAddress,int)",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.newNode(InetAddress,int)",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.removedNode(InetAddress,int)",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.serializeEvent(ByteBuf,int)",1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.toString()",1,1,1
"org.apache.cassandra.transport.Event.Type.Type(int)",1,1,1
"org.apache.cassandra.transport.Event.deserialize(ByteBuf,int)",5,5,5
"org.apache.cassandra.transport.Event.serialize(ByteBuf,int)",2,2,2
"org.apache.cassandra.transport.Event.serializedSize(int)",1,1,1
"org.apache.cassandra.transport.Frame.Compressor.encode(ChannelHandlerContext,Frame,List<Object>)",3,3,4
"org.apache.cassandra.transport.Frame.Decoder.Decoder(Factory)",1,1,1
"org.apache.cassandra.transport.Frame.Decoder.decode(ChannelHandlerContext,ByteBuf,List<Object>)",8,9,12
"org.apache.cassandra.transport.Frame.Decoder.fail()",1,1,1
"org.apache.cassandra.transport.Frame.Decompressor.decode(ChannelHandlerContext,Frame,List<Object>)",3,4,4
"org.apache.cassandra.transport.Frame.Encoder.encode(ChannelHandlerContext,Frame,List<Object>)",1,2,2
"org.apache.cassandra.transport.Frame.Frame(Header,ByteBuf)",1,1,1
"org.apache.cassandra.transport.Frame.Header.Flag.deserialize(int)",1,3,3
"org.apache.cassandra.transport.Frame.Header.Flag.serialize(EnumSet<Flag>)",1,2,2
"org.apache.cassandra.transport.Frame.Header.Header(int,EnumSet<Flag>,int,Type)",1,1,1
"org.apache.cassandra.transport.Frame.Header.Header(int,int,int,Type)",1,1,1
"org.apache.cassandra.transport.Frame.create(Type,int,int,EnumSet<Flag>,ByteBuf)",1,1,1
"org.apache.cassandra.transport.Frame.discard(ByteBuf,long)",1,1,1
"org.apache.cassandra.transport.Frame.release()",1,1,1
"org.apache.cassandra.transport.Frame.retain()",1,1,1
"org.apache.cassandra.transport.Frame.with(ByteBuf)",1,1,1
"org.apache.cassandra.transport.FrameCompressor.LZ4Compressor.LZ4Compressor()",1,1,1
"org.apache.cassandra.transport.FrameCompressor.LZ4Compressor.compress(Frame)",1,2,2
"org.apache.cassandra.transport.FrameCompressor.LZ4Compressor.decompress(Frame)",2,2,3
"org.apache.cassandra.transport.FrameCompressor.SnappyCompressor.SnappyCompressor()",1,1,1
"org.apache.cassandra.transport.FrameCompressor.SnappyCompressor.compress(Frame)",1,2,2
"org.apache.cassandra.transport.FrameCompressor.SnappyCompressor.decompress(Frame)",2,2,3
"org.apache.cassandra.transport.Message.Direction.addToVersion(int)",1,1,2
"org.apache.cassandra.transport.Message.Direction.extractFromVersion(int)",1,1,2
"org.apache.cassandra.transport.Message.Dispatcher.Dispatcher()",1,1,1
"org.apache.cassandra.transport.Message.Dispatcher.FlushItem.FlushItem(ChannelHandlerContext,Object,Frame)",1,1,1
"org.apache.cassandra.transport.Message.Dispatcher.Flusher.Flusher(EventLoop)",1,1,1
"org.apache.cassandra.transport.Message.Dispatcher.Flusher.run()",4,10,11
"org.apache.cassandra.transport.Message.Dispatcher.Flusher.start()",1,3,3
"org.apache.cassandra.transport.Message.Dispatcher.channelRead0(ChannelHandlerContext,Request)",1,3,3
"org.apache.cassandra.transport.Message.Dispatcher.exceptionCaught(ChannelHandlerContext,Throwable)",1,3,3
"org.apache.cassandra.transport.Message.Dispatcher.flush(FlushItem)",1,2,3
"org.apache.cassandra.transport.Message.Message(Type)",1,1,1
"org.apache.cassandra.transport.Message.ProtocolDecoder.decode(ChannelHandlerContext,Frame,List)",2,9,13
"org.apache.cassandra.transport.Message.ProtocolEncoder.encode(ChannelHandlerContext,Message,List)",6,14,16
"org.apache.cassandra.transport.Message.Request.Request(Type)",2,1,2
"org.apache.cassandra.transport.Message.Request.isTracingRequested()",1,1,1
"org.apache.cassandra.transport.Message.Request.setTracingRequested()",1,1,1
"org.apache.cassandra.transport.Message.Response.Response(Type)",2,1,2
"org.apache.cassandra.transport.Message.Response.getTracingId()",1,1,1
"org.apache.cassandra.transport.Message.Response.getWarnings()",1,1,1
"org.apache.cassandra.transport.Message.Response.setTracingId(UUID)",1,1,1
"org.apache.cassandra.transport.Message.Response.setWarnings(List<String>)",1,1,1
"org.apache.cassandra.transport.Message.Type.Type(int,Direction,Codec<?>)",1,1,1
"org.apache.cassandra.transport.Message.Type.fromOpcode(int,Direction)",4,4,4
"org.apache.cassandra.transport.Message.UnexpectedChannelExceptionHandler.UnexpectedChannelExceptionHandler(Channel,boolean)",1,1,1
"org.apache.cassandra.transport.Message.UnexpectedChannelExceptionHandler.apply(Throwable)",1,3,5
"org.apache.cassandra.transport.Message.attach(Connection)",1,1,1
"org.apache.cassandra.transport.Message.connection()",1,1,1
"org.apache.cassandra.transport.Message.getCustomPayload()",1,1,1
"org.apache.cassandra.transport.Message.getSourceFrame()",1,1,1
"org.apache.cassandra.transport.Message.getStreamId()",1,1,1
"org.apache.cassandra.transport.Message.setCustomPayload(Map<String, ByteBuffer>)",1,1,1
"org.apache.cassandra.transport.Message.setSourceFrame(Frame)",1,1,1
"org.apache.cassandra.transport.Message.setStreamId(int)",1,1,1
"org.apache.cassandra.transport.OptionCodec.OptionCodec(Class<T>)",3,4,4
"org.apache.cassandra.transport.OptionCodec.decode(ByteBuf,int)",3,3,3
"org.apache.cassandra.transport.OptionCodec.decodeOne(ByteBuf,int)",1,1,1
"org.apache.cassandra.transport.OptionCodec.encode(Map<T, Object>,int)",1,3,3
"org.apache.cassandra.transport.OptionCodec.fromId(int)",2,2,2
"org.apache.cassandra.transport.OptionCodec.oneSerializedSize(Pair<T, Object>,int)",1,1,1
"org.apache.cassandra.transport.OptionCodec.writeOne(Pair<T, Object>,ByteBuf,int)",1,1,1
"org.apache.cassandra.transport.ProtocolException.ProtocolException(String)",1,1,1
"org.apache.cassandra.transport.ProtocolException.code()",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.awaitTermination(long,TimeUnit)",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.execute(Runnable)",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.inEventLoop(Thread)",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.isShutdown()",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.isShuttingDown()",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.isTerminated()",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.parent()",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.shutdown()",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.shutdownGracefully(long,long,TimeUnit)",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.shutdownNow()",1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.terminationFuture()",1,1,1
"org.apache.cassandra.transport.Server.AbstractSecureIntializer.AbstractSecureIntializer(Server,EncryptionOptions)",1,1,2
"org.apache.cassandra.transport.Server.AbstractSecureIntializer.createSslHandler()",1,1,1
"org.apache.cassandra.transport.Server.Builder.build()",1,1,1
"org.apache.cassandra.transport.Server.Builder.getSocket()",4,1,4
"org.apache.cassandra.transport.Server.Builder.withEventExecutor(EventExecutor)",1,1,1
"org.apache.cassandra.transport.Server.Builder.withEventLoopGroup(EventLoopGroup)",1,1,1
"org.apache.cassandra.transport.Server.Builder.withHost(InetAddress)",1,1,1
"org.apache.cassandra.transport.Server.Builder.withPort(int)",1,1,1
"org.apache.cassandra.transport.Server.Builder.withSSL(boolean)",1,1,1
"org.apache.cassandra.transport.Server.ConnectionTracker.ConnectionTracker()",1,2,2
"org.apache.cassandra.transport.Server.ConnectionTracker.addConnection(Channel,Connection)",1,1,1
"org.apache.cassandra.transport.Server.ConnectionTracker.closeAll()",1,1,1
"org.apache.cassandra.transport.Server.ConnectionTracker.getConnectedClients()",1,2,2
"org.apache.cassandra.transport.Server.ConnectionTracker.register(Type,Channel)",1,1,1
"org.apache.cassandra.transport.Server.ConnectionTracker.send(Event)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.EventNotifier(Server)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.getRpcAddress(InetAddress)",1,2,3
"org.apache.cassandra.transport.Server.EventNotifier.onCreateAggregate(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onCreateColumnFamily(String,String)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onCreateFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onCreateKeyspace(String)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onCreateUserType(String,String)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDown(InetAddress)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropAggregate(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropColumnFamily(String,String)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropKeyspace(String)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropUserType(String,String)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onJoinCluster(InetAddress)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onLeaveCluster(InetAddress)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onMove(InetAddress)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onStatusChange(InetAddress,StatusChange)",1,4,5
"org.apache.cassandra.transport.Server.EventNotifier.onTopologyChange(InetAddress,TopologyChange)",1,4,5
"org.apache.cassandra.transport.Server.EventNotifier.onUp(InetAddress)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateAggregate(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateColumnFamily(String,String,boolean)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateFunction(String,String,List<AbstractType<?>>)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateKeyspace(String)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateUserType(String,String)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.send(Event)",1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.send(InetAddress,NodeEvent)",2,3,4
"org.apache.cassandra.transport.Server.Initializer.Initializer(Server)",1,1,1
"org.apache.cassandra.transport.Server.Initializer.initChannel(Channel)",1,4,4
"org.apache.cassandra.transport.Server.LatestEvent.LatestEvent(Status,Change)",1,1,1
"org.apache.cassandra.transport.Server.LatestEvent.forStatusChange(Status,LatestEvent)",1,1,2
"org.apache.cassandra.transport.Server.LatestEvent.forTopologyChange(Change,LatestEvent)",1,1,2
"org.apache.cassandra.transport.Server.LatestEvent.toString()",1,1,1
"org.apache.cassandra.transport.Server.OptionalSecureInitializer.OptionalSecureInitializer(Server,EncryptionOptions)",1,1,1
"org.apache.cassandra.transport.Server.OptionalSecureInitializer.initChannel(Channel)",2,2,3
"org.apache.cassandra.transport.Server.SecureInitializer.SecureInitializer(Server,EncryptionOptions)",1,1,1
"org.apache.cassandra.transport.Server.SecureInitializer.initChannel(Channel)",1,1,1
"org.apache.cassandra.transport.Server.Server(Builder)",1,1,4
"org.apache.cassandra.transport.Server.close()",1,1,1
"org.apache.cassandra.transport.Server.getConnectedClients()",1,1,1
"org.apache.cassandra.transport.Server.isRunning()",1,1,1
"org.apache.cassandra.transport.Server.start()",3,5,8
"org.apache.cassandra.transport.Server.stop()",1,2,2
"org.apache.cassandra.transport.ServerConnection.ServerConnection(Channel,int,Tracker)",1,1,1
"org.apache.cassandra.transport.ServerConnection.applyStateTransition(Type,Type)",2,2,11
"org.apache.cassandra.transport.ServerConnection.getQueryState(int)",1,2,3
"org.apache.cassandra.transport.ServerConnection.getSaslNegotiator(QueryState)",1,2,2
"org.apache.cassandra.transport.ServerConnection.validateNewMessage(Type,int,int)",5,4,11
"org.apache.cassandra.transport.ServerError.ServerError(String)",1,1,1
"org.apache.cassandra.transport.ServerError.ServerError(Throwable)",1,1,1
"org.apache.cassandra.transport.ServerError.code()",1,1,1
"org.apache.cassandra.transport.SimpleClient.ConnectionTracker.addConnection(Channel,Connection)",1,1,1
"org.apache.cassandra.transport.SimpleClient.ConnectionTracker.isRegistered(Type,Channel)",1,1,1
"org.apache.cassandra.transport.SimpleClient.Initializer.initChannel(Channel)",1,1,1
"org.apache.cassandra.transport.SimpleClient.ResponseHandler.channelRead0(ChannelHandlerContext,Response)",1,3,4
"org.apache.cassandra.transport.SimpleClient.ResponseHandler.exceptionCaught(ChannelHandlerContext,Throwable)",1,2,2
"org.apache.cassandra.transport.SimpleClient.SecureInitializer.SecureInitializer()",1,1,1
"org.apache.cassandra.transport.SimpleClient.SecureInitializer.initChannel(Channel)",1,1,1
"org.apache.cassandra.transport.SimpleClient.SimpleClient(String,int)",1,1,1
"org.apache.cassandra.transport.SimpleClient.SimpleClient(String,int,ClientEncryptionOptions)",1,1,1
"org.apache.cassandra.transport.SimpleClient.SimpleClient(String,int,int)",1,1,1
"org.apache.cassandra.transport.SimpleClient.SimpleClient(String,int,int,ClientEncryptionOptions)",1,1,1
"org.apache.cassandra.transport.SimpleClient.SimpleEventHandler.onEvent(Event)",1,1,1
"org.apache.cassandra.transport.SimpleClient.close()",1,2,2
"org.apache.cassandra.transport.SimpleClient.connect(boolean)",1,2,2
"org.apache.cassandra.transport.SimpleClient.establishConnection()",2,3,3
"org.apache.cassandra.transport.SimpleClient.execute(Request)",2,1,3
"org.apache.cassandra.transport.SimpleClient.execute(String,ConsistencyLevel)",1,1,1
"org.apache.cassandra.transport.SimpleClient.execute(String,List<ByteBuffer>,ConsistencyLevel)",1,1,1
"org.apache.cassandra.transport.SimpleClient.executePrepared(byte[],List<ByteBuffer>,ConsistencyLevel)",1,1,1
"org.apache.cassandra.transport.SimpleClient.login(Map<String, String>)",1,1,1
"org.apache.cassandra.transport.SimpleClient.prepare(String)",1,1,1
"org.apache.cassandra.transport.SimpleClient.setEventHandler(EventHandler)",1,1,1
"org.apache.cassandra.transport.messages.AuthChallenge.AuthChallenge(byte[])",1,1,1
"org.apache.cassandra.transport.messages.AuthChallenge.getToken()",1,1,1
"org.apache.cassandra.transport.messages.AuthResponse.AuthResponse(byte[])",1,1,1
"org.apache.cassandra.transport.messages.AuthResponse.execute(QueryState)",2,3,3
"org.apache.cassandra.transport.messages.AuthSuccess.AuthSuccess(byte[])",1,1,1
"org.apache.cassandra.transport.messages.AuthSuccess.getToken()",1,1,1
"org.apache.cassandra.transport.messages.AuthenticateMessage.AuthenticateMessage(String)",1,1,1
"org.apache.cassandra.transport.messages.AuthenticateMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.BatchMessage.BatchMessage(Type,List<Object>,List<List<ByteBuffer>>,QueryOptions)",1,1,1
"org.apache.cassandra.transport.messages.BatchMessage.execute(QueryState)",7,11,13
"org.apache.cassandra.transport.messages.BatchMessage.toString()",1,3,3
"org.apache.cassandra.transport.messages.CredentialsMessage.CredentialsMessage()",1,1,1
"org.apache.cassandra.transport.messages.CredentialsMessage.CredentialsMessage(Map<String, String>)",1,1,1
"org.apache.cassandra.transport.messages.CredentialsMessage.execute(QueryState)",1,2,2
"org.apache.cassandra.transport.messages.CredentialsMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.ErrorMessage(TransportException)",1,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.ErrorMessage(TransportException,int)",1,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.WrappedException.WrappedException(Throwable,int)",1,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.WrappedException.getStreamId()",1,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.fromException(Throwable)",1,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.fromException(Throwable,Predicate<Throwable>)",2,7,9
"org.apache.cassandra.transport.messages.ErrorMessage.getBackwardsCompatibleException(ErrorMessage,int)",3,3,5
"org.apache.cassandra.transport.messages.ErrorMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.wrap(Throwable,int)",1,1,1
"org.apache.cassandra.transport.messages.EventMessage.EventMessage(Event)",1,1,1
"org.apache.cassandra.transport.messages.EventMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.ExecuteMessage.ExecuteMessage(MD5Digest,QueryOptions)",1,1,1
"org.apache.cassandra.transport.messages.ExecuteMessage.execute(QueryState)",3,10,12
"org.apache.cassandra.transport.messages.ExecuteMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.OptionsMessage.OptionsMessage()",1,1,1
"org.apache.cassandra.transport.messages.OptionsMessage.execute(QueryState)",1,2,2
"org.apache.cassandra.transport.messages.OptionsMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.PrepareMessage.PrepareMessage(String)",1,1,1
"org.apache.cassandra.transport.messages.PrepareMessage.execute(QueryState)",1,5,5
"org.apache.cassandra.transport.messages.PrepareMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.QueryMessage.QueryMessage(String,QueryOptions)",1,1,1
"org.apache.cassandra.transport.messages.QueryMessage.execute(QueryState)",2,11,13
"org.apache.cassandra.transport.messages.QueryMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.ReadyMessage.ReadyMessage()",1,1,1
"org.apache.cassandra.transport.messages.ReadyMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.RegisterMessage.RegisterMessage(List<Type>)",1,1,1
"org.apache.cassandra.transport.messages.RegisterMessage.execute(QueryState)",3,3,3
"org.apache.cassandra.transport.messages.RegisterMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Kind.Kind(int,Codec<ResultMessage>)",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Kind.fromId(int)",2,2,2
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.Prepared(MD5Digest,Prepared)",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.Prepared(MD5Digest,int,PreparedMetadata,ResultMetadata)",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.extractResultMetadata(CQLStatement)",2,1,2
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.forThrift(int,List<ColumnSpecification>)",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.toString()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.toThriftPreparedResult()",1,2,2
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.toThriftResult()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.ResultMessage(Kind)",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Rows.Rows(ResultSet)",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Rows.toString()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Rows.toThriftResult()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SchemaChange.SchemaChange(SchemaChange)",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SchemaChange.toString()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SchemaChange.toThriftResult()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SetKeyspace.SetKeyspace(String)",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SetKeyspace.toString()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SetKeyspace.toThriftResult()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Void.Void()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Void.toString()",1,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Void.toThriftResult()",1,1,1
"org.apache.cassandra.transport.messages.StartupMessage.StartupMessage(Map<String, String>)",1,1,1
"org.apache.cassandra.transport.messages.StartupMessage.execute(QueryState)",8,7,9
"org.apache.cassandra.transport.messages.StartupMessage.toString()",1,1,1
"org.apache.cassandra.transport.messages.StartupMessage.upperCaseKeys(Map<String, String>)",1,2,2
"org.apache.cassandra.transport.messages.SupportedMessage.SupportedMessage(Map<String, List<String>>)",1,1,1
"org.apache.cassandra.transport.messages.SupportedMessage.toString()",1,1,1
"org.apache.cassandra.triggers.CustomClassLoader.CustomClassLoader(ClassLoader)",1,1,1
"org.apache.cassandra.triggers.CustomClassLoader.CustomClassLoader(ClassLoader,File)",1,1,1
"org.apache.cassandra.triggers.CustomClassLoader.addClassPath(File)",3,4,6
"org.apache.cassandra.triggers.CustomClassLoader.loadClass(String)",2,2,2
"org.apache.cassandra.triggers.CustomClassLoader.loadClassInternal(String)",1,2,2
"org.apache.cassandra.triggers.TriggerExecutor.TriggerExecutor()",1,1,1
"org.apache.cassandra.triggers.TriggerExecutor.execute(Collection<? extends IMutation>)",6,4,9
"org.apache.cassandra.triggers.TriggerExecutor.execute(PartitionUpdate)",2,2,3
"org.apache.cassandra.triggers.TriggerExecutor.executeInternal(PartitionUpdate)",2,5,6
"org.apache.cassandra.triggers.TriggerExecutor.loadTriggerInstance(String)",2,2,2
"org.apache.cassandra.triggers.TriggerExecutor.mergeMutations(Iterable<Mutation>)",1,3,3
"org.apache.cassandra.triggers.TriggerExecutor.reloadClasses()",2,1,2
"org.apache.cassandra.triggers.TriggerExecutor.validate(Collection<Mutation>)",1,3,3
"org.apache.cassandra.triggers.TriggerExecutor.validateForSinglePartition(UUID,DecoratedKey,Collection<Mutation>)",3,4,5
"org.apache.cassandra.triggers.TriggerExecutor.validateSamePartition(UUID,DecoratedKey,PartitionUpdate)",3,1,3
"org.apache.cassandra.utils.AbstractIterator.endOfData()",1,1,1
"org.apache.cassandra.utils.AbstractIterator.hasNext()",3,2,5
"org.apache.cassandra.utils.AbstractIterator.next()",2,2,3
"org.apache.cassandra.utils.AbstractIterator.peek()",2,1,2
"org.apache.cassandra.utils.AbstractIterator.remove()",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.add(FilterKey)",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.clear()",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.close()",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.close(Throwable)",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.isPresent(FilterKey)",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.offHeapSize()",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.serializedSize()",1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.sharedCopy()",1,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.Reversed.compare(T1,T1)",1,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.Reversed.compareAsymmetric(T1,T2)",1,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.Reversed.reverse()",1,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.binarySearchAsymmetric(List<? extends T1>,T2,Op)",1,2,3
"org.apache.cassandra.utils.AsymmetricOrdering.reverse()",1,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.selectBoundary(Op,int,int)",3,2,3
"org.apache.cassandra.utils.AsymmetricOrdering.strictnessOfLessThan(Op)",3,2,3
"org.apache.cassandra.utils.BackgroundActivityMonitor.BackgroundActivityMonitor()",1,3,3
"org.apache.cassandra.utils.BackgroundActivityMonitor.BackgroundActivityReporter.run()",2,4,5
"org.apache.cassandra.utils.BackgroundActivityMonitor.compareAtIndex(long[],long[],int)",2,1,3
"org.apache.cassandra.utils.BackgroundActivityMonitor.getIOWait()",2,1,2
"org.apache.cassandra.utils.BackgroundActivityMonitor.getNormalizedLoadAvg()",1,1,1
"org.apache.cassandra.utils.BackgroundActivityMonitor.getSeverity(InetAddress)",2,3,3
"org.apache.cassandra.utils.BackgroundActivityMonitor.incrCompactionSeverity(double)",1,1,1
"org.apache.cassandra.utils.BackgroundActivityMonitor.incrManualSeverity(double)",1,1,1
"org.apache.cassandra.utils.BackgroundActivityMonitor.readAndCompute()",1,2,2
"org.apache.cassandra.utils.BiMultiValMap.BiMultiValMap()",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.BiMultiValMap(BiMultiValMap<K, V>)",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.BiMultiValMap(Map<K, V>,Multimap<V, K>)",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.clear()",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.containsKey(Object)",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.containsValue(Object)",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.entrySet()",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.get(Object)",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.inverse()",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.isEmpty()",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.keySet()",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.put(K,V)",1,2,2
"org.apache.cassandra.utils.BiMultiValMap.putAll(Map<? extends K, ? extends V>)",1,2,2
"org.apache.cassandra.utils.BiMultiValMap.remove(Object)",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.removeValue(V)",1,2,2
"org.apache.cassandra.utils.BiMultiValMap.size()",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.valueSet()",1,1,1
"org.apache.cassandra.utils.BiMultiValMap.values()",1,1,1
"org.apache.cassandra.utils.BloomCalculations.BloomSpecification.BloomSpecification(int,int)",1,1,1
"org.apache.cassandra.utils.BloomCalculations.BloomSpecification.toString()",1,1,1
"org.apache.cassandra.utils.BloomCalculations.computeBloomSpec(int)",1,1,1
"org.apache.cassandra.utils.BloomCalculations.computeBloomSpec(int,double)",3,2,5
"org.apache.cassandra.utils.BloomCalculations.maxBucketsPerElement(long)",2,1,2
"org.apache.cassandra.utils.BloomFilter.BloomFilter(BloomFilter)",1,1,1
"org.apache.cassandra.utils.BloomFilter.BloomFilter(int,IBitSet,boolean)",1,1,1
"org.apache.cassandra.utils.BloomFilter.add(FilterKey)",1,2,2
"org.apache.cassandra.utils.BloomFilter.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.utils.BloomFilter.clear()",1,1,1
"org.apache.cassandra.utils.BloomFilter.getHashBuckets(FilterKey,int,long)",1,1,1
"org.apache.cassandra.utils.BloomFilter.indexes(FilterKey)",1,1,1
"org.apache.cassandra.utils.BloomFilter.isPresent(FilterKey)",3,2,3
"org.apache.cassandra.utils.BloomFilter.offHeapSize()",1,1,1
"org.apache.cassandra.utils.BloomFilter.serializedSize()",1,1,1
"org.apache.cassandra.utils.BloomFilter.setIndexes(long,long,int,long,long[])",1,2,3
"org.apache.cassandra.utils.BloomFilter.sharedCopy()",1,1,1
"org.apache.cassandra.utils.BloomFilter.toString()",1,1,1
"org.apache.cassandra.utils.BloomFilterSerializer.BloomFilterSerializer()",1,1,1
"org.apache.cassandra.utils.BloomFilterSerializer.deserialize(DataInput,boolean)",1,1,1
"org.apache.cassandra.utils.BloomFilterSerializer.deserialize(DataInput,boolean,boolean)",1,2,2
"org.apache.cassandra.utils.BloomFilterSerializer.serialize(BloomFilter,DataOutputPlus)",1,1,1
"org.apache.cassandra.utils.BloomFilterSerializer.serializedSize(BloomFilter)",1,1,1
"org.apache.cassandra.utils.BooleanSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.utils.BooleanSerializer.serialize(Boolean,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.utils.BooleanSerializer.serializedSize(Boolean,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.arrayCopy(ByteBuffer,int,ByteBuffer,int,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.arrayCopy(ByteBuffer,int,byte[],int,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(InetAddress)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(String)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(String,Charset)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(UUID)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(double)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(float)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(long)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(short)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytesToHex(ByteBuffer)",1,2,2
"org.apache.cassandra.utils.ByteBufferUtil.clone(ByteBuffer)",2,2,3
"org.apache.cassandra.utils.ByteBufferUtil.compare(ByteBuffer,byte[])",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.compare(byte[],ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.compareSubArrays(ByteBuffer,int,ByteBuffer,int,int)",5,2,7
"org.apache.cassandra.utils.ByteBufferUtil.compareUnsigned(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.getArray(ByteBuffer)",2,2,2
"org.apache.cassandra.utils.ByteBufferUtil.getShortLength(ByteBuffer,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.hexToBytes(String)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.inputStream(ByteBuffer)",3,1,3
"org.apache.cassandra.utils.ByteBufferUtil.isPrefix(ByteBuffer,ByteBuffer)",2,1,2
"org.apache.cassandra.utils.ByteBufferUtil.lastIndexOf(ByteBuffer,byte,int)",4,4,5
"org.apache.cassandra.utils.ByteBufferUtil.minimalBufferFor(ByteBuffer)",1,3,3
"org.apache.cassandra.utils.ByteBufferUtil.put(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.read(DataInput,int)",2,1,2
"org.apache.cassandra.utils.ByteBufferUtil.readBytes(ByteBuffer,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readBytes(DataInput,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readBytesWithShortLength(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readShortLength(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readShortLength(DataInput)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readWithLength(DataInput)",2,1,2
"org.apache.cassandra.utils.ByteBufferUtil.readWithShortLength(DataInput)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readWithVIntLength(DataInputPlus)",2,1,2
"org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithLength(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithShortLength(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithVIntLength(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.skipShortLength(DataInputPlus)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.skipWithVIntLength(DataInputPlus)",2,1,2
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,Charset)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,int,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,int,int,Charset)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toDouble(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toFloat(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toInt(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toLong(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toShort(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.writeShortLength(ByteBuffer,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.writeWithLength(ByteBuffer,DataOutputPlus)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.writeWithLength(byte[],DataOutput)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.writeWithShortLength(ByteBuffer,DataOutputPlus)",1,1,2
"org.apache.cassandra.utils.ByteBufferUtil.writeWithShortLength(byte[],DataOutput)",1,1,2
"org.apache.cassandra.utils.ByteBufferUtil.writeWithVIntLength(ByteBuffer,DataOutputPlus)",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.BytesReadTracker(DataInput)",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.getBytesRead()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readBoolean()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readByte()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readChar()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readDouble()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readFloat()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readFully(byte[])",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readFully(byte[],int,int)",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readInt()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readLine()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readLong()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readShort()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readUTF()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readUnsignedByte()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.readUnsignedShort()",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.reset(long)",1,1,1
"org.apache.cassandra.utils.BytesReadTracker.skipBytes(int)",1,1,1
"org.apache.cassandra.utils.CLibrary.CLibrary()",1,1,1
"org.apache.cassandra.utils.CLibrary.close(int)",1,1,1
"org.apache.cassandra.utils.CLibrary.errno(RuntimeException)",1,2,2
"org.apache.cassandra.utils.CLibrary.fcntl(int,int,long)",1,1,1
"org.apache.cassandra.utils.CLibrary.fsync(int)",1,1,1
"org.apache.cassandra.utils.CLibrary.getfd(FileChannel)",1,2,2
"org.apache.cassandra.utils.CLibrary.getfd(FileDescriptor)",1,2,2
"org.apache.cassandra.utils.CLibrary.getfd(String)",1,2,2
"org.apache.cassandra.utils.CLibrary.jnaAvailable()",1,1,1
"org.apache.cassandra.utils.CLibrary.jnaMemoryLockable()",1,1,1
"org.apache.cassandra.utils.CLibrary.mlockall(int)",1,1,1
"org.apache.cassandra.utils.CLibrary.munlockall()",1,1,1
"org.apache.cassandra.utils.CLibrary.open(String,int)",1,1,1
"org.apache.cassandra.utils.CLibrary.posix_fadvise(int,long,int,int)",1,1,1
"org.apache.cassandra.utils.CLibrary.strerror(int)",1,1,1
"org.apache.cassandra.utils.CLibrary.tryCloseFD(int)",3,2,5
"org.apache.cassandra.utils.CLibrary.tryFcntl(int,int,int)",2,2,4
"org.apache.cassandra.utils.CLibrary.tryMlockall()",2,5,7
"org.apache.cassandra.utils.CLibrary.tryOpenDirectory(String)",2,2,4
"org.apache.cassandra.utils.CLibrary.trySkipCache(String,long,long)",1,1,1
"org.apache.cassandra.utils.CLibrary.trySkipCache(int,long,int,String)",3,4,7
"org.apache.cassandra.utils.CLibrary.trySkipCache(int,long,long,String)",1,3,3
"org.apache.cassandra.utils.CLibrary.trySync(int)",3,2,5
"org.apache.cassandra.utils.CassandraVersion.CassandraVersion(String)",2,5,7
"org.apache.cassandra.utils.CassandraVersion.CassandraVersion(int,int,int,String[],String[])",1,1,1
"org.apache.cassandra.utils.CassandraVersion.compareIdentifiers(String[],String[],int)",11,3,13
"org.apache.cassandra.utils.CassandraVersion.compareTo(CassandraVersion)",8,1,8
"org.apache.cassandra.utils.CassandraVersion.equals(Object)",2,5,6
"org.apache.cassandra.utils.CassandraVersion.findSupportingVersion(CassandraVersion...)",3,2,3
"org.apache.cassandra.utils.CassandraVersion.hashCode()",1,1,1
"org.apache.cassandra.utils.CassandraVersion.isSupportedBy(CassandraVersion)",1,2,2
"org.apache.cassandra.utils.CassandraVersion.parseIdentifiers(String,String)",3,2,3
"org.apache.cassandra.utils.CassandraVersion.toString()",1,3,3
"org.apache.cassandra.utils.CassandraVersion.tryParseInt(String)",1,1,2
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.CoalescingStrategy(Parker,Logger,String)",2,5,6
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.coalesce(BlockingQueue<C>,List<C>,int)",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.debugGap(long)",1,2,3
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.debugTimestamp(long)",1,2,3
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.debugTimestamps(Collection<C>)",1,3,3
"org.apache.cassandra.utils.CoalescingStrategies.DisabledCoalescingStrategy.DisabledCoalescingStrategy(int,Parker,Logger,String)",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.DisabledCoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",1,2,2
"org.apache.cassandra.utils.CoalescingStrategies.DisabledCoalescingStrategy.toString()",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.FixedCoalescingStrategy.FixedCoalescingStrategy(int,Parker,Logger,String)",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.FixedCoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",1,2,2
"org.apache.cassandra.utils.CoalescingStrategies.FixedCoalescingStrategy.toString()",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.MovingAverageCoalescingStrategy(int,Parker,Logger,String)",1,1,2
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",1,3,3
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.logSample(int)",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.notifyOfSample(long)",2,2,2
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.toString()",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.TimeHorizonMovingAverageCoalescingStrategy(int,Parker,Logger,String)",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.averageGap()",2,1,2
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",1,5,5
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.epoch(long)",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.ix(long)",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.logSample(long)",2,2,4
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.rollepoch(long,long,long)",1,3,3
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.toString()",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.maybeSleep(int,long,long,Parker)",2,1,3
"org.apache.cassandra.utils.CoalescingStrategies.newCoalescingStrategy(String,int,Logger,String)",1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.newCoalescingStrategy(String,int,Parker,Logger,String)",3,2,8
"org.apache.cassandra.utils.CoalescingStrategies.parkLoop(long)",1,2,2
"org.apache.cassandra.utils.ConcurrentBiMap.ConcurrentBiMap()",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.ConcurrentBiMap(Map<K, V>,Map<V, K>)",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.clear()",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.containsKey(Object)",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.containsValue(Object)",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.entrySet()",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.get(Object)",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.inverse()",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.isEmpty()",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.keySet()",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.put(K,V)",3,3,5
"org.apache.cassandra.utils.ConcurrentBiMap.putAll(Map<? extends K, ? extends V>)",1,2,2
"org.apache.cassandra.utils.ConcurrentBiMap.remove(Object)",3,2,4
"org.apache.cassandra.utils.ConcurrentBiMap.size()",1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.values()",1,1,1
"org.apache.cassandra.utils.CounterId.CounterId(ByteBuffer)",2,1,2
"org.apache.cassandra.utils.CounterId.LocalCounterIdHolder.LocalCounterIdHolder()",1,1,1
"org.apache.cassandra.utils.CounterId.LocalCounterIdHolder.get()",1,1,1
"org.apache.cassandra.utils.CounterId.bytes()",1,1,1
"org.apache.cassandra.utils.CounterId.compareTo(CounterId)",1,1,1
"org.apache.cassandra.utils.CounterId.equals(Object)",3,2,4
"org.apache.cassandra.utils.CounterId.fromInt(int)",1,1,1
"org.apache.cassandra.utils.CounterId.generate()",1,1,1
"org.apache.cassandra.utils.CounterId.getLocalId()",1,1,1
"org.apache.cassandra.utils.CounterId.hashCode()",1,1,1
"org.apache.cassandra.utils.CounterId.isLocalId()",1,1,1
"org.apache.cassandra.utils.CounterId.localId()",1,1,1
"org.apache.cassandra.utils.CounterId.toString()",1,1,1
"org.apache.cassandra.utils.CounterId.wrap(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.CounterId.wrap(ByteBuffer,int)",1,1,1
"org.apache.cassandra.utils.DefaultValue.DefaultValue(T)",1,1,1
"org.apache.cassandra.utils.DefaultValue.isModified()",1,1,1
"org.apache.cassandra.utils.DefaultValue.reset()",1,1,1
"org.apache.cassandra.utils.DefaultValue.set(T)",1,1,1
"org.apache.cassandra.utils.DefaultValue.value()",1,1,1
"org.apache.cassandra.utils.DynamicList.DynamicList(int)",1,1,1
"org.apache.cassandra.utils.DynamicList.Node.Node(int,E)",1,1,1
"org.apache.cassandra.utils.DynamicList.Node.height()",1,1,1
"org.apache.cassandra.utils.DynamicList.Node.next(int)",1,1,1
"org.apache.cassandra.utils.DynamicList.Node.parent(int)",3,2,3
"org.apache.cassandra.utils.DynamicList.Node.prev(int)",1,1,1
"org.apache.cassandra.utils.DynamicList.Node.setNext(int,Node<E>)",1,1,1
"org.apache.cassandra.utils.DynamicList.Node.setPrev(int,Node<E>)",1,1,1
"org.apache.cassandra.utils.DynamicList.append(E)",1,1,1
"org.apache.cassandra.utils.DynamicList.append(E,int)",2,3,6
"org.apache.cassandra.utils.DynamicList.get(int)",2,3,4
"org.apache.cassandra.utils.DynamicList.isWellFormed()",8,7,12
"org.apache.cassandra.utils.DynamicList.main(String[])",1,4,4
"org.apache.cassandra.utils.DynamicList.randomLevel()",1,1,1
"org.apache.cassandra.utils.DynamicList.remove(Node<E>)",1,5,5
"org.apache.cassandra.utils.DynamicList.size()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram(int)",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram(long[],long[])",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer.deserialize(DataInputPlus)",1,2,3
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer.serialize(EstimatedHistogram,DataOutputPlus)",1,2,3
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer.serializedSize(EstimatedHistogram)",1,2,3
"org.apache.cassandra.utils.EstimatedHistogram.add(long)",1,1,2
"org.apache.cassandra.utils.EstimatedHistogram.appendRange(StringBuilder,long[],int)",1,4,4
"org.apache.cassandra.utils.EstimatedHistogram.count()",1,2,2
"org.apache.cassandra.utils.EstimatedHistogram.equals(Object)",3,2,4
"org.apache.cassandra.utils.EstimatedHistogram.get(int)",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.getBucketOffsets()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.getBuckets(boolean)",1,4,4
"org.apache.cassandra.utils.EstimatedHistogram.hashCode()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.isOverflowed()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.log(Logger)",3,4,6
"org.apache.cassandra.utils.EstimatedHistogram.max()",4,2,4
"org.apache.cassandra.utils.EstimatedHistogram.mean()",2,2,3
"org.apache.cassandra.utils.EstimatedHistogram.min()",3,2,4
"org.apache.cassandra.utils.EstimatedHistogram.nameOfRange(long[],int)",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.newOffsets(int)",1,2,3
"org.apache.cassandra.utils.EstimatedHistogram.percentile(double)",5,2,6
"org.apache.cassandra.utils.ExpiringMap.CacheableObject.CacheableObject(T,long)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.CacheableObject.isReadyToDieAt(long)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.ExpiringMap(long)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.ExpiringMap(long,Function<Pair<K, CacheableObject<V>>, ?>)",2,5,6
"org.apache.cassandra.utils.ExpiringMap.containsKey(K)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.get(K)",1,1,2
"org.apache.cassandra.utils.ExpiringMap.getAge(K)",1,1,2
"org.apache.cassandra.utils.ExpiringMap.isEmpty()",1,1,1
"org.apache.cassandra.utils.ExpiringMap.keySet()",1,1,1
"org.apache.cassandra.utils.ExpiringMap.put(K,V)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.put(K,V,long)",1,2,3
"org.apache.cassandra.utils.ExpiringMap.remove(K)",1,1,2
"org.apache.cassandra.utils.ExpiringMap.reset()",1,1,1
"org.apache.cassandra.utils.ExpiringMap.shutdownBlocking()",1,1,2
"org.apache.cassandra.utils.ExpiringMap.size()",1,1,1
"org.apache.cassandra.utils.FBUtilities.WrappedCloseableIterator.WrappedCloseableIterator(Iterator<T>)",1,1,1
"org.apache.cassandra.utils.FBUtilities.WrappedCloseableIterator.close()",1,1,1
"org.apache.cassandra.utils.FBUtilities.WrappedCloseableIterator.computeNext()",2,2,2
"org.apache.cassandra.utils.FBUtilities.abs(long)",1,1,1
"org.apache.cassandra.utils.FBUtilities.cassandraTriggerDir()",2,5,5
"org.apache.cassandra.utils.FBUtilities.classForName(String,String)",1,2,2
"org.apache.cassandra.utils.FBUtilities.closeAll(List<? extends AutoCloseable>)",2,4,5
"org.apache.cassandra.utils.FBUtilities.closeableIterator(Iterator<T>)",1,1,1
"org.apache.cassandra.utils.FBUtilities.compareUnsigned(byte[],byte[])",1,1,1
"org.apache.cassandra.utils.FBUtilities.compareUnsigned(byte[],byte[],int,int,int,int)",1,1,1
"org.apache.cassandra.utils.FBUtilities.construct(Class<T>,String,String)",2,5,5
"org.apache.cassandra.utils.FBUtilities.construct(String,String)",1,1,1
"org.apache.cassandra.utils.FBUtilities.copy(InputStream,OutputStream,long)",4,2,5
"org.apache.cassandra.utils.FBUtilities.emptySortedSet(Comparator<? super T>)",1,1,1
"org.apache.cassandra.utils.FBUtilities.exec(ProcessBuilder)",2,4,5
"org.apache.cassandra.utils.FBUtilities.fromJsonList(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.fromJsonMap(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.getAllLocalAddresses()",1,3,4
"org.apache.cassandra.utils.FBUtilities.getAvailableProcessors()",2,2,2
"org.apache.cassandra.utils.FBUtilities.getBroadcastAddress()",1,3,3
"org.apache.cassandra.utils.FBUtilities.getLocalAddress()",2,3,4
"org.apache.cassandra.utils.FBUtilities.getProtectedField(Class,String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.getReleaseVersionString()",2,3,3
"org.apache.cassandra.utils.FBUtilities.getThreadLocalScratchBuffer()",1,1,1
"org.apache.cassandra.utils.FBUtilities.getToolsOutputDirectory()",1,1,1
"org.apache.cassandra.utils.FBUtilities.hasProcFS()",1,1,1
"org.apache.cassandra.utils.FBUtilities.hash(ByteBuffer...)",1,3,3
"org.apache.cassandra.utils.FBUtilities.hashToBigInteger(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.FBUtilities.instanceOrConstruct(String,String)",1,2,2
"org.apache.cassandra.utils.FBUtilities.isWindows()",1,1,1
"org.apache.cassandra.utils.FBUtilities.json(Object)",1,1,2
"org.apache.cassandra.utils.FBUtilities.midpoint(BigInteger,BigInteger,int)",1,2,2
"org.apache.cassandra.utils.FBUtilities.newAuthenticator(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.newAuthorizer(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.newMessageDigest(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.newPartitioner(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.newRoleManager(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.nowInSeconds()",1,1,1
"org.apache.cassandra.utils.FBUtilities.prettyPrintMemory(long)",3,3,3
"org.apache.cassandra.utils.FBUtilities.resourceToFile(String)",2,1,2
"org.apache.cassandra.utils.FBUtilities.serialize(T,IVersionedSerializer<T>,int)",1,2,3
"org.apache.cassandra.utils.FBUtilities.singleton(T,Comparator<? super T>)",1,1,1
"org.apache.cassandra.utils.FBUtilities.sortSampledKeys(List<DecoratedKey>,Range<Token>)",2,6,6
"org.apache.cassandra.utils.FBUtilities.threadLocalMD5Digest()",1,1,1
"org.apache.cassandra.utils.FBUtilities.timestampMicros()",1,1,1
"org.apache.cassandra.utils.FBUtilities.toString(Map<?, ?>)",2,1,2
"org.apache.cassandra.utils.FBUtilities.toWriteUTFBytes(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.updateChecksum(CRC32,ByteBuffer)",1,1,1
"org.apache.cassandra.utils.FBUtilities.updateChecksum(CRC32,ByteBuffer,int,int)",1,1,1
"org.apache.cassandra.utils.FBUtilities.updateChecksumInt(Checksum,int)",1,1,1
"org.apache.cassandra.utils.FBUtilities.updateWithBoolean(MessageDigest,boolean)",1,1,2
"org.apache.cassandra.utils.FBUtilities.updateWithByte(MessageDigest,int)",1,1,1
"org.apache.cassandra.utils.FBUtilities.updateWithInt(MessageDigest,int)",1,1,1
"org.apache.cassandra.utils.FBUtilities.updateWithLong(MessageDigest,long)",1,1,1
"org.apache.cassandra.utils.FBUtilities.updateWithShort(MessageDigest,int)",1,1,1
"org.apache.cassandra.utils.FBUtilities.waitOnFuture(Future<T>)",1,1,3
"org.apache.cassandra.utils.FBUtilities.waitOnFutures(Iterable<? extends Future<? extends T>>)",1,3,3
"org.apache.cassandra.utils.FBUtilities.waitOnFutures(List<AsyncOneResponse>,long)",1,2,2
"org.apache.cassandra.utils.FBUtilities.xor(byte[],byte[])",2,1,5
"org.apache.cassandra.utils.FastByteOperations.BestHolder.getBest()",2,5,6
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.compare(ByteBuffer,ByteBuffer)",3,2,4
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.compare(ByteBuffer,byte[],int,int)",2,2,2
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.compare(byte[],int,int,byte[],int,int)",4,1,7
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.copy(ByteBuffer,int,ByteBuffer,int,int)",2,3,3
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.copy(ByteBuffer,int,byte[],int,int)",2,2,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compare(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compare(ByteBuffer,byte[],int,int)",1,2,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compareTo(ByteBuffer,ByteBuffer)",1,2,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compareTo(Object,long,int,ByteBuffer)",1,2,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compareTo(Object,long,int,Object,long,int)",6,5,6
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(ByteBuffer,int,ByteBuffer,int,int)",1,2,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(ByteBuffer,int,byte[],int,int)",1,2,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(Object,long,ByteBuffer,int,int)",1,2,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(Object,long,Object,long,long)",1,2,3
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(Object,long,byte[],int,int)",1,3,3
"org.apache.cassandra.utils.FastByteOperations.compareUnsigned(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.utils.FastByteOperations.compareUnsigned(ByteBuffer,byte[],int,int)",1,1,1
"org.apache.cassandra.utils.FastByteOperations.compareUnsigned(byte[],int,int,ByteBuffer)",1,1,1
"org.apache.cassandra.utils.FastByteOperations.compareUnsigned(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.cassandra.utils.FastByteOperations.copy(ByteBuffer,int,ByteBuffer,int,int)",1,1,1
"org.apache.cassandra.utils.FastByteOperations.copy(ByteBuffer,int,byte[],int,int)",1,1,1
"org.apache.cassandra.utils.FilterFactory.createFilter(int,long,int,boolean,boolean)",1,1,2
"org.apache.cassandra.utils.FilterFactory.deserialize(DataInput,boolean,boolean)",1,1,1
"org.apache.cassandra.utils.FilterFactory.getFilter(long,double,boolean,boolean)",2,1,2
"org.apache.cassandra.utils.FilterFactory.getFilter(long,int,boolean,boolean)",1,2,2
"org.apache.cassandra.utils.FilterFactory.serialize(IFilter,DataOutputPlus)",1,1,1
"org.apache.cassandra.utils.GuidGenerator.convertToStandardFormat(String)",1,1,1
"org.apache.cassandra.utils.GuidGenerator.guid()",1,3,3
"org.apache.cassandra.utils.GuidGenerator.guidAsBytes()",1,1,1
"org.apache.cassandra.utils.GuidGenerator.guidToString(byte[])",1,3,3
"org.apache.cassandra.utils.Hex.bytesToHex(byte...)",1,1,2
"org.apache.cassandra.utils.Hex.getProtectedConstructor(Class<T>,Class<?>...)",1,1,2
"org.apache.cassandra.utils.Hex.hexToBytes(String)",4,2,5
"org.apache.cassandra.utils.Hex.wrapCharArray(char[])",2,5,7
"org.apache.cassandra.utils.HistogramBuilder.HistogramBuilder()",1,1,1
"org.apache.cassandra.utils.HistogramBuilder.HistogramBuilder(long[])",1,2,2
"org.apache.cassandra.utils.HistogramBuilder.add(long)",1,2,2
"org.apache.cassandra.utils.HistogramBuilder.buildRange(long,long,boolean,double,int)",3,2,11
"org.apache.cassandra.utils.HistogramBuilder.buildWithStdevRangesAroundMean()",1,1,1
"org.apache.cassandra.utils.HistogramBuilder.buildWithStdevRangesAroundMean(int)",3,2,7
"org.apache.cassandra.utils.Interval.Interval(C,C,D)",1,1,1
"org.apache.cassandra.utils.Interval.create(C,C)",1,1,1
"org.apache.cassandra.utils.Interval.create(C,C,D)",1,1,1
"org.apache.cassandra.utils.Interval.equals(Object)",2,3,4
"org.apache.cassandra.utils.Interval.hashCode()",1,1,1
"org.apache.cassandra.utils.Interval.maxOrdering()",1,1,1
"org.apache.cassandra.utils.Interval.minOrdering()",1,1,1
"org.apache.cassandra.utils.Interval.toString()",1,2,2
"org.apache.cassandra.utils.IntervalTree.IntervalNode.IntervalNode(Collection<I>)",1,6,8
"org.apache.cassandra.utils.IntervalTree.IntervalNode.searchInternal(Interval<C, D>,List<D>)",5,12,14
"org.apache.cassandra.utils.IntervalTree.IntervalTree(Collection<I>)",1,3,4
"org.apache.cassandra.utils.IntervalTree.Serializer.Serializer(ISerializer<C>,ISerializer<D>,Constructor<I>)",1,1,1
"org.apache.cassandra.utils.IntervalTree.Serializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.utils.IntervalTree.Serializer.deserialize(DataInputPlus,int,Comparator<C>)",1,2,3
"org.apache.cassandra.utils.IntervalTree.Serializer.serialize(IntervalTree<C, D, I>,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.utils.IntervalTree.Serializer.serializedSize(IntervalTree<C, D, I>,int)",1,2,2
"org.apache.cassandra.utils.IntervalTree.TreeIterator.TreeIterator(IntervalNode)",1,1,1
"org.apache.cassandra.utils.IntervalTree.TreeIterator.computeNext()",3,4,4
"org.apache.cassandra.utils.IntervalTree.TreeIterator.gotoMinOf(IntervalNode)",1,2,2
"org.apache.cassandra.utils.IntervalTree.build(Collection<I>)",2,3,3
"org.apache.cassandra.utils.IntervalTree.emptyTree()",1,1,1
"org.apache.cassandra.utils.IntervalTree.equals(Object)",2,1,2
"org.apache.cassandra.utils.IntervalTree.hashCode()",1,2,2
"org.apache.cassandra.utils.IntervalTree.intervalCount()",1,1,1
"org.apache.cassandra.utils.IntervalTree.isEmpty()",1,1,1
"org.apache.cassandra.utils.IntervalTree.iterator()",2,2,2
"org.apache.cassandra.utils.IntervalTree.max()",2,1,2
"org.apache.cassandra.utils.IntervalTree.min()",2,1,2
"org.apache.cassandra.utils.IntervalTree.search(C)",1,1,1
"org.apache.cassandra.utils.IntervalTree.search(Interval<C, D>)",2,2,2
"org.apache.cassandra.utils.IntervalTree.serializer(ISerializer<C>,ISerializer<D>,Constructor<I>)",1,1,1
"org.apache.cassandra.utils.IntervalTree.toString()",1,1,1
"org.apache.cassandra.utils.JVMStabilityInspector.JVMStabilityInspector()",1,1,1
"org.apache.cassandra.utils.JVMStabilityInspector.Killer.killCurrentJVM(Throwable)",1,1,1
"org.apache.cassandra.utils.JVMStabilityInspector.Killer.killCurrentJVM(Throwable,boolean)",1,3,3
"org.apache.cassandra.utils.JVMStabilityInspector.inspectCommitLogThrowable(Throwable)",1,3,3
"org.apache.cassandra.utils.JVMStabilityInspector.inspectThrowable(Throwable)",1,4,10
"org.apache.cassandra.utils.JVMStabilityInspector.killCurrentJVM(Throwable,boolean)",1,1,1
"org.apache.cassandra.utils.JVMStabilityInspector.replaceKiller(Killer)",1,1,1
"org.apache.cassandra.utils.JVMStabilityInspector.userFunctionTimeout(Throwable)",2,2,4
"org.apache.cassandra.utils.LockedDynamicList.LockedDynamicList(int)",1,1,1
"org.apache.cassandra.utils.LockedDynamicList.append(E,int)",1,1,1
"org.apache.cassandra.utils.LockedDynamicList.get(int)",1,1,1
"org.apache.cassandra.utils.LockedDynamicList.remove(Node<E>)",1,1,1
"org.apache.cassandra.utils.LockedDynamicList.size()",1,1,1
"org.apache.cassandra.utils.MD5Digest.MD5Digest(byte[])",1,1,1
"org.apache.cassandra.utils.MD5Digest.compute(String)",1,1,1
"org.apache.cassandra.utils.MD5Digest.compute(byte[])",1,1,1
"org.apache.cassandra.utils.MD5Digest.equals(Object)",2,1,2
"org.apache.cassandra.utils.MD5Digest.hashCode()",1,1,1
"org.apache.cassandra.utils.MD5Digest.toString()",1,1,1
"org.apache.cassandra.utils.MD5Digest.wrap(byte[])",1,1,1
"org.apache.cassandra.utils.MergeIterator.Candidate.Candidate(int,Iterator<? extends In>,Comparator<? super In>)",1,1,1
"org.apache.cassandra.utils.MergeIterator.Candidate.advance()",2,1,2
"org.apache.cassandra.utils.MergeIterator.Candidate.compareTo(Candidate<In>)",1,1,2
"org.apache.cassandra.utils.MergeIterator.Candidate.consume()",1,1,1
"org.apache.cassandra.utils.MergeIterator.Candidate.needsAdvance()",1,1,1
"org.apache.cassandra.utils.MergeIterator.ManyToOne.ManyToOne(List<? extends Iterator<In>>,Comparator<? super In>,Reducer<In, Out>)",1,2,2
"org.apache.cassandra.utils.MergeIterator.ManyToOne.advance()",1,3,3
"org.apache.cassandra.utils.MergeIterator.ManyToOne.computeNext()",1,1,1
"org.apache.cassandra.utils.MergeIterator.ManyToOne.consume()",4,3,4
"org.apache.cassandra.utils.MergeIterator.ManyToOne.consumeHeap(int)",2,1,3
"org.apache.cassandra.utils.MergeIterator.ManyToOne.replaceAndSink(Candidate<In>,int)",11,7,16
"org.apache.cassandra.utils.MergeIterator.MergeIterator(List<? extends Iterator<In>>,Reducer<In, Out>)",1,1,1
"org.apache.cassandra.utils.MergeIterator.OneToOne.OneToOne(List<? extends Iterator<In>>,Reducer<In, Out>)",1,1,1
"org.apache.cassandra.utils.MergeIterator.OneToOne.computeNext()",2,2,2
"org.apache.cassandra.utils.MergeIterator.Reducer.close()",1,1,1
"org.apache.cassandra.utils.MergeIterator.Reducer.onKeyChange()",1,1,1
"org.apache.cassandra.utils.MergeIterator.Reducer.trivialReduceIsTrivial()",1,1,1
"org.apache.cassandra.utils.MergeIterator.TrivialOneToOne.TrivialOneToOne(List<? extends Iterator<In>>,Reducer<In, Out>)",1,1,1
"org.apache.cassandra.utils.MergeIterator.TrivialOneToOne.computeNext()",2,2,2
"org.apache.cassandra.utils.MergeIterator.close()",2,3,4
"org.apache.cassandra.utils.MergeIterator.get(List<? extends Iterator<In>>,Comparator<? super In>,Reducer<In, Out>)",2,2,3
"org.apache.cassandra.utils.MergeIterator.iterators()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.Hashable(byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer.deserialize(DataInput,IPartitioner,int)",3,3,3
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer.serialize(Hashable,DataOutputPlus,int)",3,3,3
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer.serializedSize(Hashable,int)",3,3,3
"org.apache.cassandra.utils.MerkleTree.Hashable.addHash(byte[],long)",1,2,2
"org.apache.cassandra.utils.MerkleTree.Hashable.binaryHash(byte[],byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.calc()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash(byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash(byte[],byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.rowsInRange()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.sizeOfRange()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.toString(byte[])",2,1,2
"org.apache.cassandra.utils.MerkleTree.Inner.Inner(Token,Hashable,Hashable)",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer.deserialize(DataInput,IPartitioner,int)",1,3,4
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer.serialize(Inner,DataOutputPlus,int)",1,3,3
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer.serializedSize(Inner,int)",1,3,3
"org.apache.cassandra.utils.MerkleTree.Inner.calc()",1,2,2
"org.apache.cassandra.utils.MerkleTree.Inner.lchild()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.lchild(Hashable)",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.rchild()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.rchild(Hashable)",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.toString(StringBuilder,int)",1,4,4
"org.apache.cassandra.utils.MerkleTree.Leaf.Leaf()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.Leaf(byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer.deserialize(DataInput,IPartitioner,int)",1,3,4
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer.serialize(Leaf,DataOutputPlus,int)",1,4,4
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer.serializedSize(Leaf,int)",1,3,3
"org.apache.cassandra.utils.MerkleTree.Leaf.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.toString(StringBuilder,int)",1,1,1
"org.apache.cassandra.utils.MerkleTree.MerkleTree(IPartitioner,Range<Token>,byte,long)",1,1,1
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer.deserialize(DataInputPlus,int)",1,1,2
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer.serialize(MerkleTree,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer.serializedSize(MerkleTree,int)",1,1,1
"org.apache.cassandra.utils.MerkleTree.RowHash.RowHash(Token,byte[],long)",1,1,1
"org.apache.cassandra.utils.MerkleTree.RowHash.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.BadRange.BadRange()",1,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.InvalidHash.InvalidHash()",1,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.TooDeep.TooDeep()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.TreeDifference(Token,Token,byte)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.rowsOnLeft()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.rowsOnRight()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.setRows(long,long)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.setSize(long,long)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.sizeOnLeft()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.sizeOnRight()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.totalRows()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.TreeRange(MerkleTree,Token,Token,byte,Hashable)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.addAll(Iterator<RowHash>)",1,2,2
"org.apache.cassandra.utils.MerkleTree.TreeRange.addHash(RowHash)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.ensureHashInitialised()",1,1,2
"org.apache.cassandra.utils.MerkleTree.TreeRange.hash()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.hash(byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.TreeRangeIterator(MerkleTree)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.computeNext()",3,6,6
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.iterator()",1,1,1
"org.apache.cassandra.utils.MerkleTree.difference(MerkleTree,MerkleTree)",2,6,8
"org.apache.cassandra.utils.MerkleTree.differenceHelper(MerkleTree,MerkleTree,List<TreeRange>,TreeRange)",5,8,14
"org.apache.cassandra.utils.MerkleTree.find(Range<Token>)",1,1,2
"org.apache.cassandra.utils.MerkleTree.findHelper(Hashable,Range<Token>,Range<Token>)",6,5,6
"org.apache.cassandra.utils.MerkleTree.get(Token)",1,1,1
"org.apache.cassandra.utils.MerkleTree.getHelper(Hashable,Token,Token,byte,Token)",3,2,3
"org.apache.cassandra.utils.MerkleTree.hash(Range<Token>)",1,1,1
"org.apache.cassandra.utils.MerkleTree.histogramOfRowCountPerLeaf()",1,2,2
"org.apache.cassandra.utils.MerkleTree.histogramOfRowSizePerLeaf()",1,2,2
"org.apache.cassandra.utils.MerkleTree.inc(byte)",1,1,1
"org.apache.cassandra.utils.MerkleTree.init()",1,1,1
"org.apache.cassandra.utils.MerkleTree.initHelper(Token,Token,byte,byte)",3,2,4
"org.apache.cassandra.utils.MerkleTree.invalidate(Token)",1,1,1
"org.apache.cassandra.utils.MerkleTree.invalidateHelper(Hashable,Token,Token)",2,2,3
"org.apache.cassandra.utils.MerkleTree.invalids()",1,1,1
"org.apache.cassandra.utils.MerkleTree.maxsize()",1,1,1
"org.apache.cassandra.utils.MerkleTree.maxsize(long)",1,1,1
"org.apache.cassandra.utils.MerkleTree.partitioner()",1,1,1
"org.apache.cassandra.utils.MerkleTree.root()",1,1,1
"org.apache.cassandra.utils.MerkleTree.size()",1,1,1
"org.apache.cassandra.utils.MerkleTree.split(Token)",2,1,3
"org.apache.cassandra.utils.MerkleTree.splitHelper(Hashable,Token,Token,byte,Token)",4,4,6
"org.apache.cassandra.utils.MerkleTree.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTrees.MerkleTrees(IPartitioner)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.MerkleTrees(IPartitioner,Collection<MerkleTree>)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.MerkleTreesSerializer.deserialize(DataInputPlus,int)",1,4,4
"org.apache.cassandra.utils.MerkleTrees.MerkleTreesSerializer.serialize(MerkleTrees,DataOutputPlus,int)",1,2,2
"org.apache.cassandra.utils.MerkleTrees.MerkleTreesSerializer.serializedSize(MerkleTrees,int)",1,2,2
"org.apache.cassandra.utils.MerkleTrees.TokenRangeComparator.compare(Range<Token>,Range<Token>)",2,1,2
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator.TreeRangeIterator()",1,1,1
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator.computeNext()",2,3,3
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator.iterator()",1,1,1
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator.nextIterator()",2,2,2
"org.apache.cassandra.utils.MerkleTrees.addMerkleTree(int,Range<Token>)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.addMerkleTree(int,byte,Range<Token>)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.addMerkleTrees(int,Collection<Range<Token>>)",1,2,2
"org.apache.cassandra.utils.MerkleTrees.addTree(MerkleTree)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.addTrees(Collection<MerkleTree>)",1,2,2
"org.apache.cassandra.utils.MerkleTrees.difference(MerkleTrees,MerkleTrees)",1,2,2
"org.apache.cassandra.utils.MerkleTrees.get(Token)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.getMerkleTree(Range<Token>)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.getMerkleTree(Token)",3,3,3
"org.apache.cassandra.utils.MerkleTrees.hash(Range<Token>)",1,5,6
"org.apache.cassandra.utils.MerkleTrees.init()",1,2,2
"org.apache.cassandra.utils.MerkleTrees.init(Range<Token>)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.invalidate(Token)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.invalids()",1,1,1
"org.apache.cassandra.utils.MerkleTrees.iterator()",1,1,1
"org.apache.cassandra.utils.MerkleTrees.logRowCountPerLeaf(Logger)",1,2,2
"org.apache.cassandra.utils.MerkleTrees.logRowSizePerLeaf(Logger)",1,2,2
"org.apache.cassandra.utils.MerkleTrees.maxsize(Range<Token>,int)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.partitioner()",1,1,1
"org.apache.cassandra.utils.MerkleTrees.ranges()",1,1,1
"org.apache.cassandra.utils.MerkleTrees.size()",1,2,2
"org.apache.cassandra.utils.MerkleTrees.split(Token)",1,1,1
"org.apache.cassandra.utils.MerkleTrees.validateNonOverlapping(MerkleTree)",3,2,3
"org.apache.cassandra.utils.MurmurHash.fmix(long)",1,1,1
"org.apache.cassandra.utils.MurmurHash.getblock(ByteBuffer,int,int)",1,1,1
"org.apache.cassandra.utils.MurmurHash.hash2_64(ByteBuffer,int,int,long)",2,9,10
"org.apache.cassandra.utils.MurmurHash.hash32(ByteBuffer,int,int,int)",1,6,6
"org.apache.cassandra.utils.MurmurHash.hash3_x64_128(ByteBuffer,int,int,long,long[])",2,16,17
"org.apache.cassandra.utils.MurmurHash.rotl64(long,int)",1,1,1
"org.apache.cassandra.utils.Mx4jTool.getAddress()",1,1,1
"org.apache.cassandra.utils.Mx4jTool.getPort()",1,3,3
"org.apache.cassandra.utils.Mx4jTool.maybeLoad()",1,3,3
"org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis.convert(long)",1,1,1
"org.apache.cassandra.utils.NativeSSTableLoaderClient.NativeSSTableLoaderClient(Collection<InetAddress>,int,String,String,SSLOptions)",1,1,1
"org.apache.cassandra.utils.NativeSSTableLoaderClient.createDefinitionFromRow(Row,String,String,Types)",1,2,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.createTableMetadata(String,Session,IPartitioner,boolean,Row,String,Types)",1,2,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.fetchTables(String,Session,IPartitioner,Types)",1,2,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.fetchTypes(String,Session)",1,2,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.fetchViews(String,Session,IPartitioner,Types)",1,2,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.getTableMetadata(String)",1,1,1
"org.apache.cassandra.utils.NativeSSTableLoaderClient.init(String)",1,5,6
"org.apache.cassandra.utils.NativeSSTableLoaderClient.setTableMetadata(CFMetaData)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.NoSpamLogStatement(String,long)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.error(Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.error(long,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.info(Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.info(long,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.log(Level,long,Object...)",3,2,6
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.shouldLog(long)",1,2,2
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.warn(Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.warn(long,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogger(Logger,long,TimeUnit)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.clearWrappedLoggersForTest()",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.error(String,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.error(long,String,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.getLogger(Logger,long,TimeUnit)",1,2,3
"org.apache.cassandra.utils.NoSpamLogger.getStatement(Logger,String,long,TimeUnit)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.getStatement(String)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.getStatement(String,long)",1,2,3
"org.apache.cassandra.utils.NoSpamLogger.getStatement(String,long,TimeUnit)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.info(String,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.info(long,String,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.log(Level,String,long,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.log(Logger,Level,long,TimeUnit,String,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.log(Logger,Level,long,TimeUnit,long,String,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.warn(String,Object...)",1,1,1
"org.apache.cassandra.utils.NoSpamLogger.warn(long,String,Object...)",1,1,1
"org.apache.cassandra.utils.ObjectSizes.measure(Object)",1,1,1
"org.apache.cassandra.utils.ObjectSizes.measureDeep(Object)",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOf(String)",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(Object[])",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(byte[])",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(int,long)",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(int[])",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(long[])",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfReferenceArray(int)",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOnHeapExcludingData(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOnHeapExcludingData(ByteBuffer[])",1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOnHeapOf(ByteBuffer)",3,2,3
"org.apache.cassandra.utils.ObjectSizes.sizeOnHeapOf(ByteBuffer[])",1,3,3
"org.apache.cassandra.utils.OutputHandler.LogOutput.debug(String)",1,1,1
"org.apache.cassandra.utils.OutputHandler.LogOutput.output(String)",1,1,1
"org.apache.cassandra.utils.OutputHandler.LogOutput.warn(String)",1,1,1
"org.apache.cassandra.utils.OutputHandler.LogOutput.warn(String,Throwable)",1,1,1
"org.apache.cassandra.utils.OutputHandler.SystemOutput.SystemOutput(boolean,boolean)",1,1,1
"org.apache.cassandra.utils.OutputHandler.SystemOutput.debug(String)",1,2,2
"org.apache.cassandra.utils.OutputHandler.SystemOutput.output(String)",1,1,1
"org.apache.cassandra.utils.OutputHandler.SystemOutput.warn(String)",1,1,1
"org.apache.cassandra.utils.OutputHandler.SystemOutput.warn(String,Throwable)",1,2,3
"org.apache.cassandra.utils.OverlapIterator.OverlapIterator(Collection<Interval<I, V>>)",1,1,1
"org.apache.cassandra.utils.OverlapIterator.overlaps()",1,1,1
"org.apache.cassandra.utils.OverlapIterator.update(I)",1,5,5
"org.apache.cassandra.utils.Pair.Pair(T1,T2)",1,1,1
"org.apache.cassandra.utils.Pair.create(X,Y)",1,1,1
"org.apache.cassandra.utils.Pair.equals(Object)",2,2,3
"org.apache.cassandra.utils.Pair.hashCode()",1,3,3
"org.apache.cassandra.utils.Pair.toString()",1,1,1
"org.apache.cassandra.utils.RMIServerSocketFactoryImpl.createServerSocket(int)",1,1,1
"org.apache.cassandra.utils.RMIServerSocketFactoryImpl.equals(Object)",3,1,3
"org.apache.cassandra.utils.RMIServerSocketFactoryImpl.hashCode()",1,1,1
"org.apache.cassandra.utils.ResourceWatcher.WatchedResource.WatchedResource(String,Runnable)",1,1,1
"org.apache.cassandra.utils.ResourceWatcher.WatchedResource.run()",1,3,3
"org.apache.cassandra.utils.ResourceWatcher.watch(String,Runnable,int)",1,1,1
"org.apache.cassandra.utils.SigarLibrary.SigarLibrary()",1,3,3
"org.apache.cassandra.utils.SigarLibrary.hasAcceptableAddressSpace()",3,2,4
"org.apache.cassandra.utils.SigarLibrary.hasAcceptableFileLimits()",2,2,4
"org.apache.cassandra.utils.SigarLibrary.hasAcceptableProcNumber()",2,2,4
"org.apache.cassandra.utils.SigarLibrary.initialized()",1,1,1
"org.apache.cassandra.utils.SigarLibrary.isSwapEnabled()",2,2,3
"org.apache.cassandra.utils.SigarLibrary.warnIfRunningInDegradedMode()",1,3,6
"org.apache.cassandra.utils.SortedBiMultiValMap.SortedBiMultiValMap(SortedMap<K, V>,SortedSetMultimap<V, K>)",1,1,1
"org.apache.cassandra.utils.SortedBiMultiValMap.create()",1,1,1
"org.apache.cassandra.utils.SortedBiMultiValMap.create(BiMultiValMap<K, V>)",1,1,1
"org.apache.cassandra.utils.SortedBiMultiValMap.create(BiMultiValMap<K, V>,Comparator<K>,Comparator<V>)",1,1,1
"org.apache.cassandra.utils.SortedBiMultiValMap.create(Comparator<K>,Comparator<V>)",1,3,3
"org.apache.cassandra.utils.SortedBiMultiValMap.defaultComparator()",1,1,1
"org.apache.cassandra.utils.StatusLogger.log()",1,3,7
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogram(int)",1,1,1
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogram(int,Map<Double, Long>)",1,1,1
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogramSerializer.deserialize(DataInputPlus)",1,2,2
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogramSerializer.serialize(StreamingHistogram,DataOutputPlus)",1,2,2
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogramSerializer.serializedSize(StreamingHistogram)",1,1,1
"org.apache.cassandra.utils.StreamingHistogram.equals(Object)",3,2,4
"org.apache.cassandra.utils.StreamingHistogram.getAsMap()",1,1,1
"org.apache.cassandra.utils.StreamingHistogram.hashCode()",1,1,1
"org.apache.cassandra.utils.StreamingHistogram.merge(StreamingHistogram)",2,2,3
"org.apache.cassandra.utils.StreamingHistogram.sum(double)",3,2,5
"org.apache.cassandra.utils.StreamingHistogram.update(double)",1,1,1
"org.apache.cassandra.utils.StreamingHistogram.update(double,long)",1,4,5
"org.apache.cassandra.utils.SyncUtil.force(FileChannel,boolean)",3,2,3
"org.apache.cassandra.utils.SyncUtil.force(MappedByteBuffer)",3,3,6
"org.apache.cassandra.utils.SyncUtil.sync(FileDescriptor)",3,7,9
"org.apache.cassandra.utils.SyncUtil.sync(FileOutputStream)",1,1,1
"org.apache.cassandra.utils.SyncUtil.sync(RandomAccessFile)",1,1,1
"org.apache.cassandra.utils.SyncUtil.trySync(int)",2,2,2
"org.apache.cassandra.utils.SyncUtil.trySyncDir(File)",2,1,2
"org.apache.cassandra.utils.Throwables.close(Throwable,Iterable<? extends AutoCloseable>)",1,3,3
"org.apache.cassandra.utils.Throwables.failIfCanCast(Throwable,Class<T>)",5,3,6
"org.apache.cassandra.utils.Throwables.maybeFail(Throwable)",2,1,2
"org.apache.cassandra.utils.Throwables.maybeFail(Throwable,Class<T>)",2,1,2
"org.apache.cassandra.utils.Throwables.merge(T,T)",2,1,2
"org.apache.cassandra.utils.Throwables.perform(DiscreteAction<? extends E>...)",1,1,1
"org.apache.cassandra.utils.Throwables.perform(File,FileOpType,DiscreteAction<? extends IOException>...)",1,1,1
"org.apache.cassandra.utils.Throwables.perform(Stream<? extends DiscreteAction<? extends E>>,DiscreteAction<? extends E>...)",1,1,1
"org.apache.cassandra.utils.Throwables.perform(Stream<DiscreteAction<? extends E>>)",2,1,2
"org.apache.cassandra.utils.Throwables.perform(String,FileOpType,DiscreteAction<? extends IOException>...)",1,1,1
"org.apache.cassandra.utils.Throwables.perform(Throwable,DiscreteAction<?>...)",1,1,1
"org.apache.cassandra.utils.Throwables.perform(Throwable,Iterator<? extends DiscreteAction<?>>)",1,3,3
"org.apache.cassandra.utils.Throwables.perform(Throwable,Stream<? extends DiscreteAction<?>>)",1,1,1
"org.apache.cassandra.utils.Throwables.perform(Throwable,String,FileOpType,DiscreteAction<? extends IOException>...)",1,1,1
"org.apache.cassandra.utils.Throwables.perform(Throwable,String,FileOpType,Stream<DiscreteAction<? extends IOException>>)",1,1,3
"org.apache.cassandra.utils.TopKSampler.SamplerResult.SamplerResult(List<Counter<S>>,long)",1,1,1
"org.apache.cassandra.utils.TopKSampler.addSample(T)",1,1,1
"org.apache.cassandra.utils.TopKSampler.addSample(T,long,int)",1,4,4
"org.apache.cassandra.utils.TopKSampler.beginSampling(int)",1,1,2
"org.apache.cassandra.utils.TopKSampler.finishSampling(int)",1,2,2
"org.apache.cassandra.utils.UUIDGen.UUIDGen()",2,1,2
"org.apache.cassandra.utils.UUIDGen.createTime(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.createTimeSafe()",1,1,2
"org.apache.cassandra.utils.UUIDGen.createTimeUUIDBytes(long)",1,1,3
"org.apache.cassandra.utils.UUIDGen.createTimeUnsafe(long,int)",1,1,1
"org.apache.cassandra.utils.UUIDGen.decompose(UUID)",1,1,2
"org.apache.cassandra.utils.UUIDGen.fromUnixTimestamp(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.fromUnixTimestamp(long,long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.getAdjustedTimestamp(UUID)",2,2,2
"org.apache.cassandra.utils.UUIDGen.getTimeUUID()",1,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUID(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUID(long,long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUID(long,long,long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUIDBytes()",1,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUIDBytes(long,int)",2,1,2
"org.apache.cassandra.utils.UUIDGen.getTimeUUIDFromMicros(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.getUUID(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.UUIDGen.hash(Collection<InetAddress>)",1,2,3
"org.apache.cassandra.utils.UUIDGen.makeClockSeqAndNode()",1,1,1
"org.apache.cassandra.utils.UUIDGen.makeNode()",2,1,3
"org.apache.cassandra.utils.UUIDGen.maxTimeUUID(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.microsTimestamp(UUID)",1,1,1
"org.apache.cassandra.utils.UUIDGen.minTimeUUID(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.unixTimestamp(UUID)",1,1,1
"org.apache.cassandra.utils.UUIDSerializer.deserialize(DataInputPlus,int)",1,1,1
"org.apache.cassandra.utils.UUIDSerializer.serialize(UUID,DataOutputPlus,int)",1,1,1
"org.apache.cassandra.utils.UUIDSerializer.serializedSize(UUID,int)",1,1,1
"org.apache.cassandra.utils.WindowsTimer.WindowsTimer()",1,1,1
"org.apache.cassandra.utils.WindowsTimer.endTimerPeriod(int)",2,2,3
"org.apache.cassandra.utils.WindowsTimer.startTimerPeriod(int)",2,2,3
"org.apache.cassandra.utils.WindowsTimer.timeBeginPeriod(int)",1,1,1
"org.apache.cassandra.utils.WindowsTimer.timeEndPeriod(int)",1,1,1
"org.apache.cassandra.utils.WrappedRunnable.run()",1,2,2
"org.apache.cassandra.utils.btree.BTree.Builder.Builder(Comparator<? super V>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.Builder(Comparator<? super V>,int)",1,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.add(V)",1,5,9
"org.apache.cassandra.utils.btree.BTree.Builder.addAll(Collection<V>)",2,5,6
"org.apache.cassandra.utils.btree.BTree.Builder.auto(boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.autoEnforce()",1,5,6
"org.apache.cassandra.utils.btree.BTree.Builder.build()",1,2,2
"org.apache.cassandra.utils.btree.BTree.Builder.equalComparators(Comparator<?>,Comparator<?>)",1,3,3
"org.apache.cassandra.utils.btree.BTree.Builder.isEmpty()",1,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.isNaturalComparator(Comparator<?>)",1,3,3
"org.apache.cassandra.utils.btree.BTree.Builder.mergeAll(Iterable<V>,int)",1,3,4
"org.apache.cassandra.utils.btree.BTree.Builder.mergeAll(int)",4,12,16
"org.apache.cassandra.utils.btree.BTree.Builder.resolve(Resolver)",1,4,4
"org.apache.cassandra.utils.btree.BTree.Builder.reuse()",1,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.reuse(Comparator<? super V>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.reverse()",1,1,2
"org.apache.cassandra.utils.btree.BTree.Builder.setQuickResolver(QuickResolver<V>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.sort()",1,1,1
"org.apache.cassandra.utils.btree.BTree.Dir.asc(boolean)",1,1,2
"org.apache.cassandra.utils.btree.BTree.Dir.desc(boolean)",1,1,2
"org.apache.cassandra.utils.btree.BTree.Dir.invert()",1,1,2
"org.apache.cassandra.utils.btree.BTree.FiltrationTracker.FiltrationTracker(Function<? super V, ? extends V>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.FiltrationTracker.apply(V)",1,1,2
"org.apache.cassandra.utils.btree.BTree.build(Collection<K>,UpdateFunction<K, V>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.build(Iterable<K>,UpdateFunction<K, V>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.build(Iterable<K>,int,UpdateFunction<K, V>)",2,2,2
"org.apache.cassandra.utils.btree.BTree.buildInternal(Iterable<K>,int,UpdateFunction<K, V>)",3,3,5
"org.apache.cassandra.utils.btree.BTree.builder(Comparator<? super V>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.builder(Comparator<? super V>,int)",1,1,1
"org.apache.cassandra.utils.btree.BTree.ceil(Object[],Comparator<? super V>,V)",1,2,2
"org.apache.cassandra.utils.btree.BTree.ceilIndex(Object[],Comparator<? super V>,V)",1,1,2
"org.apache.cassandra.utils.btree.BTree.compare(Comparator<V>,Object,Object)",4,1,4
"org.apache.cassandra.utils.btree.BTree.depth(Object[])",1,2,2
"org.apache.cassandra.utils.btree.BTree.empty()",1,1,1
"org.apache.cassandra.utils.btree.BTree.equals(Object[],Object[])",1,2,2
"org.apache.cassandra.utils.btree.BTree.find(Object[],Comparator<? super V>,V)",4,2,4
"org.apache.cassandra.utils.btree.BTree.findByIndex(Object[],int)",5,4,6
"org.apache.cassandra.utils.btree.BTree.findIndex(Object[],Comparator<? super V>,V)",4,2,7
"org.apache.cassandra.utils.btree.BTree.floor(Object[],Comparator<? super V>,V)",1,2,2
"org.apache.cassandra.utils.btree.BTree.floorIndex(Object[],Comparator<? super V>,V)",1,1,2
"org.apache.cassandra.utils.btree.BTree.getBranchKeyEnd(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.getChildCount(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.getChildEnd(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.getChildStart(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.getKeyEnd(Object[])",2,2,2
"org.apache.cassandra.utils.btree.BTree.getLeafKeyEnd(Object[])",1,1,2
"org.apache.cassandra.utils.btree.BTree.getSizeMap(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.hashCode(Object[])",1,2,2
"org.apache.cassandra.utils.btree.BTree.higher(Object[],Comparator<? super V>,V)",1,2,2
"org.apache.cassandra.utils.btree.BTree.higherIndex(Object[],Comparator<? super V>,V)",1,1,2
"org.apache.cassandra.utils.btree.BTree.isEmpty(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.isLeaf(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.isNodeWellFormed(Comparator<?>,Object[],Object,Object)",3,2,3
"org.apache.cassandra.utils.btree.BTree.isWellFormed(Comparator<?>,Object[],boolean,Object,Object)",6,4,10
"org.apache.cassandra.utils.btree.BTree.isWellFormed(Object[],Comparator<? extends Object>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.iterable(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.iterable(Object[],Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTree.iterable(Object[],int,int,Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTree.iterator(Object[])",1,1,1
"org.apache.cassandra.utils.btree.BTree.iterator(Object[],Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTree.iterator(Object[],int,int,Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTree.lookupSizeMap(Object[],int)",1,1,1
"org.apache.cassandra.utils.btree.BTree.lower(Object[],Comparator<? super V>,V)",1,2,2
"org.apache.cassandra.utils.btree.BTree.lowerIndex(Object[],Comparator<? super V>,V)",1,1,2
"org.apache.cassandra.utils.btree.BTree.merge(Object[],Object[],Comparator<? super K>,UpdateFunction<K, K>)",1,1,2
"org.apache.cassandra.utils.btree.BTree.replaceInSitu(Object[],Comparator<? super V>,V,V)",4,2,4
"org.apache.cassandra.utils.btree.BTree.singleton(Object)",1,1,1
"org.apache.cassandra.utils.btree.BTree.size(Object[])",2,2,2
"org.apache.cassandra.utils.btree.BTree.sizeOfStructureOnHeap(Object[])",2,2,3
"org.apache.cassandra.utils.btree.BTree.slice(Object[],Comparator<? super K>,Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTree.slice(Object[],Comparator<? super K>,K,K,Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTree.slice(Object[],Comparator<? super K>,K,boolean,K,boolean,Dir)",1,5,5
"org.apache.cassandra.utils.btree.BTree.toArray(Object[],Object[],int)",1,1,1
"org.apache.cassandra.utils.btree.BTree.toArray(Object[],int,int,Object[],int)",2,4,7
"org.apache.cassandra.utils.btree.BTree.transformAndFilter(Object[],FiltrationTracker<V>)",3,7,10
"org.apache.cassandra.utils.btree.BTree.transformAndFilter(Object[],Function<? super V, ? extends V>)",3,1,3
"org.apache.cassandra.utils.btree.BTree.treeIndexOfBranchKey(Object[],int)",1,1,1
"org.apache.cassandra.utils.btree.BTree.treeIndexOfKey(Object[],int)",4,1,4
"org.apache.cassandra.utils.btree.BTree.treeIndexOfLeafKey(int)",1,1,1
"org.apache.cassandra.utils.btree.BTree.treeIndexOffsetOfChild(Object[],int)",2,1,2
"org.apache.cassandra.utils.btree.BTree.update(Object[],Comparator<C>,Collection<K>,UpdateFunction<K, V>)",1,1,1
"org.apache.cassandra.utils.btree.BTree.update(Object[],Comparator<C>,Iterable<K>,int,UpdateFunction<K, V>)",2,2,3
"org.apache.cassandra.utils.btree.BTreeSearchIterator.BTreeSearchIterator(Object[],Comparator<? super K>,Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.BTreeSearchIterator(Object[],Comparator<? super K>,Dir,int,int)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.checkOnItem()",2,1,2
"org.apache.cassandra.utils.btree.BTreeSearchIterator.compareToFirst(int)",1,1,2
"org.apache.cassandra.utils.btree.BTreeSearchIterator.compareToLast(int)",1,1,2
"org.apache.cassandra.utils.btree.BTreeSearchIterator.current()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.hasNext()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.indexOfCurrent()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.next()",2,2,8
"org.apache.cassandra.utils.btree.BTreeSearchIterator.next(K)",3,4,7
"org.apache.cassandra.utils.btree.BTreeSearchIterator.rewind()",1,2,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.BTreeDescRange(BTreeRange<V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.ceiling(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.comparator()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.descendingSet()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.floor(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.get(int)",2,1,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.headSet(V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.higher(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.indexOf(Object)",1,2,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.lower(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.slice(Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.subList(int,int)",2,2,3
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.subSet(V,boolean,V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.tailSet(V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.toArray(T[],int)",1,1,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(BTreeRange<V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(BTreeRange<V>,BTreeRange<V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(Object[],Comparator<? super V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(Object[],Comparator<? super V>,V,boolean,V,boolean)",1,5,5
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(Object[],Comparator<? super V>,int,int)",1,1,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.ceiling(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.descendingSet()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.floor(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.get(int)",2,1,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.headSet(V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.higher(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.indexOf(Object)",2,3,5
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.isEmpty()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.lower(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.maybe(int)",2,1,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.outOfBounds(int)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.size()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.slice(Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.subList(int,int)",2,2,3
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.subSet(V,boolean,V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.tailSet(V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.toArray(T[])",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.toArray(T[],int)",1,2,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeSet(Object[],Comparator<? super V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.Builder(Comparator<? super V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.add(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.addAll(Collection<V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.build()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.isEmpty()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.add(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.add(int,V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.addAll(Collection<? extends V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.addAll(int,Collection<? extends V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.builder(Comparator<? super V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.ceiling(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.clear()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.comparator()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.contains(Object)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.containsAll(Collection<?>)",3,2,3
"org.apache.cassandra.utils.btree.BTreeSet.descendingIterator()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.descendingSet()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.empty(Comparator<? super V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.first()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.floor(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.get(int)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.hashCode()",1,2,2
"org.apache.cassandra.utils.btree.BTreeSet.headSet(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.headSet(V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.higher(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.indexOf(Object)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.isEmpty()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.iterator()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.last()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.lastIndexOf(Object)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.listIterator()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.listIterator(int)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.lower(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.of(Collection<V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.of(Comparator<? super V>,V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.of(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.pollFirst()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.pollLast()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.remove(Object)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.remove(int)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.removeAll(Collection<?>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.retainAll(Collection<?>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.set(int,V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.size()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.slice(Dir)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.spliterator()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.subList(int,int)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.subSet(V,V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.subSet(V,boolean,V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.tailSet(V)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.tailSet(V,boolean)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.toArray()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.toArray(T[])",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.toArray(T[],int)",1,2,2
"org.apache.cassandra.utils.btree.BTreeSet.tree()",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.update(Collection<V>)",1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.wrap(Object[],Comparator<V>)",1,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.addExtraChild(Object[],Object)",1,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.addNewKey(Object)",1,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.ascend()",1,2,2
"org.apache.cassandra.utils.btree.NodeBuilder.ascendToRoot()",1,2,2
"org.apache.cassandra.utils.btree.NodeBuilder.buildFromRange(int,int,boolean,boolean)",2,6,7
"org.apache.cassandra.utils.btree.NodeBuilder.clear()",1,3,5
"org.apache.cassandra.utils.btree.NodeBuilder.clearSelf()",1,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.compareUpperBound(Comparator<V>,Object,Object)",1,2,2
"org.apache.cassandra.utils.btree.NodeBuilder.copyChildren(int)",2,2,3
"org.apache.cassandra.utils.btree.NodeBuilder.copyKeys(int)",2,2,3
"org.apache.cassandra.utils.btree.NodeBuilder.ensureChild()",1,1,2
"org.apache.cassandra.utils.btree.NodeBuilder.ensureParent()",1,2,3
"org.apache.cassandra.utils.btree.NodeBuilder.ensureRoom(int)",2,2,3
"org.apache.cassandra.utils.btree.NodeBuilder.finish()",1,4,4
"org.apache.cassandra.utils.btree.NodeBuilder.finishChild(Object[])",1,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.isRoot()",1,1,3
"org.apache.cassandra.utils.btree.NodeBuilder.replaceNextKey(Object)",1,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.reset(Object[],Object,UpdateFunction,Comparator)",1,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.toNode()",1,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.update(Object)",7,12,17
"org.apache.cassandra.utils.btree.NodeCursor.NodeCursor(Object[],NodeCursor<K>,Comparator<? super K>)",1,2,2
"org.apache.cassandra.utils.btree.NodeCursor.advanceIntoBranchFromChild(boolean)",1,2,2
"org.apache.cassandra.utils.btree.NodeCursor.advanceLeafNode(boolean)",1,2,2
"org.apache.cassandra.utils.btree.NodeCursor.bound(boolean)",1,1,2
"org.apache.cassandra.utils.btree.NodeCursor.boundIterator(boolean)",1,3,4
"org.apache.cassandra.utils.btree.NodeCursor.descend()",1,1,1
"org.apache.cassandra.utils.btree.NodeCursor.descendToFirstChild(boolean)",2,4,4
"org.apache.cassandra.utils.btree.NodeCursor.globalBranchIndex()",1,1,1
"org.apache.cassandra.utils.btree.NodeCursor.globalIndex()",1,1,1
"org.apache.cassandra.utils.btree.NodeCursor.globalLeafIndex()",1,1,1
"org.apache.cassandra.utils.btree.NodeCursor.isLeaf()",1,1,1
"org.apache.cassandra.utils.btree.NodeCursor.resetNode(Object[],int)",1,1,1
"org.apache.cassandra.utils.btree.NodeCursor.safeAdvanceIntoBranchFromChild(boolean)",1,1,2
"org.apache.cassandra.utils.btree.NodeCursor.seekInNode(K,boolean)",2,2,4
"org.apache.cassandra.utils.btree.NodeCursor.value()",1,1,1
"org.apache.cassandra.utils.btree.TreeBuilder.build(Iterable<K>,UpdateFunction<K, V>,int)",1,3,3
"org.apache.cassandra.utils.btree.TreeBuilder.update(Object[],Comparator<C>,Iterable<K>,UpdateFunction<K, V>)",7,5,7
"org.apache.cassandra.utils.btree.TreeCursor.TreeCursor(Comparator<? super K>,Object[])",1,1,1
"org.apache.cassandra.utils.btree.TreeCursor.currentValue()",1,1,1
"org.apache.cassandra.utils.btree.TreeCursor.ensureValidLocation(boolean,NodeCursor<K>)",1,2,2
"org.apache.cassandra.utils.btree.TreeCursor.moveOne(boolean)",3,3,5
"org.apache.cassandra.utils.btree.TreeCursor.moveOutOfLeaf(boolean,NodeCursor<K>,NodeCursor<K>)",4,3,4
"org.apache.cassandra.utils.btree.TreeCursor.reset(boolean)",1,2,2
"org.apache.cassandra.utils.btree.TreeCursor.root()",1,1,1
"org.apache.cassandra.utils.btree.TreeCursor.rootNode()",1,1,1
"org.apache.cassandra.utils.btree.TreeCursor.seekTo(K,boolean,boolean)",8,11,17
"org.apache.cassandra.utils.btree.TreeCursor.seekTo(int)",6,5,6
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.Simple(BiFunction<V, V, V>)",1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.abortEarly()",1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.allocated(long)",1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.apply(V)",1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.apply(V,V)",1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.of(BiFunction<V, V, V>)",1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.noOp()",1,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.Accumulator(int)",1,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.add(E)",7,6,11
"org.apache.cassandra.utils.concurrent.Accumulator.capacity()",1,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.get(int)",2,1,2
"org.apache.cassandra.utils.concurrent.Accumulator.isEmpty()",1,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.iterator()",1,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.size()",1,1,1
"org.apache.cassandra.utils.concurrent.Blocker.ask()",1,3,3
"org.apache.cassandra.utils.concurrent.Blocker.block(boolean)",1,2,2
"org.apache.cassandra.utils.concurrent.Locks.monitorEnterUnsafe(Object)",1,2,2
"org.apache.cassandra.utils.concurrent.Locks.monitorExitUnsafe(Object)",1,2,2
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.allPriorOpsAreFinished()",3,1,3
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.await()",3,3,3
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.getSyncPoint()",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.isAfter(Group)",2,1,2
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.issue()",2,1,2
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.markBlocking()",1,2,2
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.register()",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.Group()",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.Group(Group)",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.close()",5,5,6
"org.apache.cassandra.utils.concurrent.OpOrder.Group.compareTo(Group)",3,1,3
"org.apache.cassandra.utils.concurrent.OpOrder.Group.expire()",4,4,5
"org.apache.cassandra.utils.concurrent.OpOrder.Group.isBlocking()",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.isBlockingSignal()",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.isBlockingSignal(Signal)",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.register()",4,2,4
"org.apache.cassandra.utils.concurrent.OpOrder.Group.unlink()",4,2,6
"org.apache.cassandra.utils.concurrent.OpOrder.awaitNewBarrier()",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.getCurrent()",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.newBarrier()",1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.start()",3,2,3
"org.apache.cassandra.utils.concurrent.Ref.Debug.Debug()",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.Debug.deallocate()",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.Debug.log(String)",1,2,2
"org.apache.cassandra.utils.concurrent.Ref.Debug.print(String,StackTraceElement[])",1,2,2
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.GlobalState(Tidy)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.count()",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.ref()",4,2,4
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.register(State)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.release(State,Throwable)",1,4,4
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.toString()",2,2,2
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.IdentityCollection(Set<Tidy>)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(Memory)",1,2,2
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(Ref<?>)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(SelfRefCounted<?>)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(SharedCloseable)",1,2,2
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(SharedCloseableImpl)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.Ref(T,GlobalState)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.Ref(T,Tidy)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.ReferenceReaper.run()",1,3,4
"org.apache.cassandra.utils.concurrent.Ref.State.State(GlobalState,Ref,ReferenceQueue<? super Ref>)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.State.assertNotReleased()",1,2,3
"org.apache.cassandra.utils.concurrent.Ref.State.ensureReleased(Throwable)",1,3,3
"org.apache.cassandra.utils.concurrent.Ref.State.release(boolean)",3,8,8
"org.apache.cassandra.utils.concurrent.Ref.StrongLeakDetector.removeExpected(Set<Tidy>)",1,4,4
"org.apache.cassandra.utils.concurrent.Ref.StrongLeakDetector.run()",1,4,4
"org.apache.cassandra.utils.concurrent.Ref.Visitor.run()",3,3,4
"org.apache.cassandra.utils.concurrent.Ref.Visitor.visit(Object)",1,7,7
"org.apache.cassandra.utils.concurrent.Ref.close()",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.ensureReleased()",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.ensureReleased(Throwable)",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.get()",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.getFields(Class<?>)",5,7,9
"org.apache.cassandra.utils.concurrent.Ref.globalCount()",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.printDebugInfo()",2,2,2
"org.apache.cassandra.utils.concurrent.Ref.ref()",1,2,2
"org.apache.cassandra.utils.concurrent.Ref.release()",1,1,1
"org.apache.cassandra.utils.concurrent.Ref.tryRef()",1,1,2
"org.apache.cassandra.utils.concurrent.Refs.Refs()",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.Refs(Map<T, Ref<T>>)",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.addAll(Refs<T>)",1,3,3
"org.apache.cassandra.utils.concurrent.Refs.close()",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.get(T)",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.iterator()",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.ref(Iterable<T>)",2,1,2
"org.apache.cassandra.utils.concurrent.Refs.relaseAllExcept(Collection<T>)",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.release()",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.release(Collection<T>)",2,6,8
"org.apache.cassandra.utils.concurrent.Refs.release(Iterable<? extends Ref<?>>)",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.release(Iterable<? extends Ref<?>>,Throwable)",1,3,3
"org.apache.cassandra.utils.concurrent.Refs.release(T)",2,1,2
"org.apache.cassandra.utils.concurrent.Refs.releaseIfHolds(T)",1,2,2
"org.apache.cassandra.utils.concurrent.Refs.selfRefs(Iterable<T>)",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.size()",1,1,1
"org.apache.cassandra.utils.concurrent.Refs.tryRef(Iterable<T>)",3,3,3
"org.apache.cassandra.utils.concurrent.Refs.tryRef(T)",2,2,3
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.SharedCloseableImpl(SharedCloseableImpl)",1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.SharedCloseableImpl(Tidy)",1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.close()",1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.close(Throwable)",1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.isCleanedUp()",1,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.await()",2,3,4
"org.apache.cassandra.utils.concurrent.SimpleCondition.await(long,TimeUnit)",3,4,5
"org.apache.cassandra.utils.concurrent.SimpleCondition.awaitNanos(long)",1,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.awaitUninterruptibly()",1,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.awaitUntil(Date)",1,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.isSignaled()",1,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.signal()",1,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.signalAll()",1,2,2
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.abort()",1,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.abort(Throwable)",3,3,4
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.close()",2,2,3
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.commit()",1,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.commit(Throwable)",3,1,4
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.doPostCleanup(Throwable)",1,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.doPreCleanup(Throwable)",1,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.finish()",1,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.permitRedundantTransitions()",1,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.prepareToCommit()",3,1,4
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.state()",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal.await()",1,2,2
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal.awaitUninterruptibly()",1,3,4
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal.awaitUntil(long)",1,3,3
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal.checkInterrupted()",2,2,2
"org.apache.cassandra.utils.concurrent.WaitQueue.AllSignal.AllSignal(Signal...)",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.AllSignal.isSet()",3,2,3
"org.apache.cassandra.utils.concurrent.WaitQueue.AllSignal.isSignalled()",3,2,3
"org.apache.cassandra.utils.concurrent.WaitQueue.AnySignal.AnySignal(Signal...)",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.AnySignal.isSet()",3,2,3
"org.apache.cassandra.utils.concurrent.WaitQueue.AnySignal.isSignalled()",3,2,3
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal.MultiSignal(Signal[])",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal.cancel()",1,2,2
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal.checkAndClear()",1,2,2
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal.isCancelled()",3,2,3
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.cancel()",2,2,3
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.checkAndClear()",2,3,3
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.isCancelled()",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.isSet()",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.isSignalled()",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.signal()",2,3,3
"org.apache.cassandra.utils.concurrent.WaitQueue.TimedSignal.TimedSignal(Context)",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.TimedSignal.cancel()",1,2,2
"org.apache.cassandra.utils.concurrent.WaitQueue.TimedSignal.checkAndClear()",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.all(Signal...)",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.any(Signal...)",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.cleanUpCancelled()",1,3,3
"org.apache.cassandra.utils.concurrent.WaitQueue.getWaiting()",2,2,4
"org.apache.cassandra.utils.concurrent.WaitQueue.hasWaiters()",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.register()",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.register(Context)",1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.signal()",4,3,5
"org.apache.cassandra.utils.concurrent.WaitQueue.signalAll()",5,2,6
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.Tidy.Tidy(AutoCloseable[])",1,1,1
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.Tidy.name()",1,1,1
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.Tidy.tidy()",1,3,3
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.WrappedSharedCloseable(AutoCloseable)",1,1,1
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.WrappedSharedCloseable(AutoCloseable[])",1,1,1
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.WrappedSharedCloseable(WrappedSharedCloseable)",1,1,1
"org.apache.cassandra.utils.memory.AbstractAllocator.CloningBTreeRowBuilder.CloningBTreeRowBuilder(AbstractAllocator)",1,1,1
"org.apache.cassandra.utils.memory.AbstractAllocator.CloningBTreeRowBuilder.addCell(Cell)",1,1,1
"org.apache.cassandra.utils.memory.AbstractAllocator.CloningBTreeRowBuilder.newRow(Clustering)",1,1,1
"org.apache.cassandra.utils.memory.AbstractAllocator.clone(ByteBuffer)",2,1,2
"org.apache.cassandra.utils.memory.AbstractAllocator.cloningBTreeRowBuilder()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.Chunk(ByteBuffer)",1,1,3
"org.apache.cassandra.utils.memory.BufferPool.Chunk.Chunk(Chunk)",1,2,2
"org.apache.cassandra.utils.memory.BufferPool.Chunk.acquire(LocalPool)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.capacity()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.free()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.free(ByteBuffer,boolean)",4,3,7
"org.apache.cassandra.utils.memory.BufferPool.Chunk.get(int)",7,4,7
"org.apache.cassandra.utils.memory.BufferPool.Chunk.get(int,int)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.getParentChunk(ByteBuffer)",3,2,3
"org.apache.cassandra.utils.memory.BufferPool.Chunk.isFree()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.recycle()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.release()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.releaseAttachment(ByteBuffer)",2,2,3
"org.apache.cassandra.utils.memory.BufferPool.Chunk.reset()",1,2,2
"org.apache.cassandra.utils.memory.BufferPool.Chunk.roundUp(int)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.setAttachment(ByteBuffer)",1,2,2
"org.apache.cassandra.utils.memory.BufferPool.Chunk.setFreeSlots(long)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.toString()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.tryRecycle()",1,3,3
"org.apache.cassandra.utils.memory.BufferPool.Chunk.unit()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Debug.check()",1,1,2
"org.apache.cassandra.utils.memory.BufferPool.Debug.recycle(Chunk)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Debug.register(Chunk)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.allocateMoreChunks()",4,5,6
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.get()",4,3,4
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.recycle(Chunk)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.reset()",1,3,3
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.sizeInBytes()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.LocalPool()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.addChunk(Chunk)",2,1,5
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.addChunkFromGlobalPool()",2,1,2
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.allocate(int,boolean)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.get(int)",5,3,5
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.put(ByteBuffer)",2,5,7
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.removeFromLocalQueue(Chunk)",1,1,3
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.reset()",1,3,3
"org.apache.cassandra.utils.memory.BufferPool.LocalPoolRef.LocalPoolRef(LocalPool,ReferenceQueue<? super LocalPool>)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.LocalPoolRef.release()",1,3,3
"org.apache.cassandra.utils.memory.BufferPool.allocate(int,boolean)",1,2,2
"org.apache.cassandra.utils.memory.BufferPool.allocateDirectAligned(int)",2,2,3
"org.apache.cassandra.utils.memory.BufferPool.assertAllRecycled()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.currentChunk()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.get(int)",2,2,2
"org.apache.cassandra.utils.memory.BufferPool.get(int,BufferType)",2,2,3
"org.apache.cassandra.utils.memory.BufferPool.maybeTakeFromPool(int,boolean)",4,3,5
"org.apache.cassandra.utils.memory.BufferPool.numChunks()",1,1,3
"org.apache.cassandra.utils.memory.BufferPool.put(ByteBuffer)",1,3,3
"org.apache.cassandra.utils.memory.BufferPool.reset()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.roundUp(int,int)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.roundUpNormal(int)",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.sizeInBytes()",1,1,1
"org.apache.cassandra.utils.memory.BufferPool.takeFromPool(int,boolean)",2,2,3
"org.apache.cassandra.utils.memory.BufferPool.tryGet(int)",2,2,2
"org.apache.cassandra.utils.memory.ContextAllocator.ContextAllocator(Group,MemtableBufferAllocator)",1,1,1
"org.apache.cassandra.utils.memory.ContextAllocator.allocate(int)",1,1,1
"org.apache.cassandra.utils.memory.ContextAllocator.clone(ByteBuffer)",2,1,2
"org.apache.cassandra.utils.memory.HeapAllocator.HeapAllocator()",1,1,1
"org.apache.cassandra.utils.memory.HeapAllocator.allocate(int)",1,1,1
"org.apache.cassandra.utils.memory.HeapPool.HeapPool(long,float,Runnable)",1,1,1
"org.apache.cassandra.utils.memory.HeapPool.needToCopyOnHeap()",1,1,1
"org.apache.cassandra.utils.memory.HeapPool.newAllocator()",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.allocate(long)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.duplicateDirectByteBuffer(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.free(long)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.getAddress(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.getAttachment(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.getByte(long)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.getByteBuffer(long,int)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.getBytes(long,byte[],int,int)",4,1,6
"org.apache.cassandra.utils.memory.MemoryUtil.getHollowByteBuffer()",1,1,2
"org.apache.cassandra.utils.memory.MemoryUtil.getHollowDirectByteBuffer()",1,1,2
"org.apache.cassandra.utils.memory.MemoryUtil.getInt(long)",1,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.getIntByByte(long)",2,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.getLong(long)",1,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.getLongByByte(long)",2,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.getShort(long)",1,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.getShortByByte(long)",2,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.pageSize()",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.putIntByByte(long,int)",1,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.putLongByByte(long,long)",1,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.setAttachment(ByteBuffer,Object)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.setByte(long,byte)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.setByteBuffer(ByteBuffer,long,int)",1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.setBytes(byte[],int,long,long)",1,2,3
"org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long,ByteBuffer)",2,2,3
"org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long,byte[],int,int)",1,1,3
"org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long,long,long)",1,2,3
"org.apache.cassandra.utils.memory.MemoryUtil.setInt(long,int)",1,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.setLong(long,long)",1,2,2
"org.apache.cassandra.utils.memory.MemoryUtil.setShort(long,short)",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.LifeCycle.transition(LifeCycle)",2,2,4
"org.apache.cassandra.utils.memory.MemtableAllocator.MemtableAllocator(SubAllocator,SubAllocator)",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.SubAllocator(SubPool)",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.acquired(long)",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.adjust(long,Group)",1,2,2
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.allocate(long,Group)",4,6,6
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.allocated(long)",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.markAllReclaiming()",3,2,3
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.ownershipRatio()",2,1,2
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.owns()",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.releaseAll()",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.released(long)",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.isLive()",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.offHeap()",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.onHeap()",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded()",1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarding()",1,1,1
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.MemtableBufferAllocator(SubAllocator,SubAllocator)",1,1,1
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.allocator(Group)",1,1,1
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.clone(DecoratedKey,Group)",1,1,1
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.rowBuilder(Group)",1,1,1
"org.apache.cassandra.utils.memory.MemtableCleanerThread.MemtableCleanerThread(P,Runnable)",1,1,1
"org.apache.cassandra.utils.memory.MemtableCleanerThread.needsCleaning()",1,2,2
"org.apache.cassandra.utils.memory.MemtableCleanerThread.run()",1,4,4
"org.apache.cassandra.utils.memory.MemtableCleanerThread.trigger()",1,1,1
"org.apache.cassandra.utils.memory.MemtablePool.MemtablePool(long,long,float,Runnable)",1,2,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.SubPool(long,float)",1,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.acquired(long)",1,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.adjustAllocated(long)",3,2,3
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.allocated(long)",2,1,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.hasRoom()",1,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.maybeClean()",1,3,3
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.needsCleaning()",1,2,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.newAllocator()",1,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.reclaimed(long)",2,3,4
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.reclaiming(long)",2,1,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.reclaimingRatio()",2,1,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.released(long)",1,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.tryAllocate(long)",4,2,4
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.updateNextClean()",3,4,4
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.used()",1,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.usedRatio()",2,1,2
"org.apache.cassandra.utils.memory.MemtablePool.getCleaner(Runnable)",1,1,2
"org.apache.cassandra.utils.memory.MemtablePool.getSubPool(long,float)",1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.NativeAllocator(NativePool)",1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.RaceAllocated.poll()",1,2,2
"org.apache.cassandra.utils.memory.NativeAllocator.RaceAllocated.stash(Region)",2,1,2
"org.apache.cassandra.utils.memory.NativeAllocator.Region.Region(long,int)",1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.Region.allocate(int)",4,3,4
"org.apache.cassandra.utils.memory.NativeAllocator.Region.toString()",1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.allocate(int,Group)",4,4,5
"org.apache.cassandra.utils.memory.NativeAllocator.allocateOversize(int)",2,1,2
"org.apache.cassandra.utils.memory.NativeAllocator.clone(DecoratedKey,Group)",1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.reclaimer()",1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.rowBuilder(Group)",1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.setDiscarded()",1,2,2
"org.apache.cassandra.utils.memory.NativeAllocator.trySwapRegion(Region,int)",1,5,6
"org.apache.cassandra.utils.memory.NativePool.NativePool(long,long,float,Runnable)",1,1,1
"org.apache.cassandra.utils.memory.NativePool.needToCopyOnHeap()",1,1,1
"org.apache.cassandra.utils.memory.NativePool.newAllocator()",1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.Region.Region(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.Region.allocate(int)",4,3,4
"org.apache.cassandra.utils.memory.SlabAllocator.Region.toString()",1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.SlabAllocator(SubAllocator,SubAllocator,boolean)",1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.allocate(int)",1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.allocate(int,Group)",6,5,7
"org.apache.cassandra.utils.memory.SlabAllocator.allocator(Group)",1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.getRegion()",4,6,7
"org.apache.cassandra.utils.memory.SlabAllocator.reclaimer()",1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.setDiscarded()",1,2,2
"org.apache.cassandra.utils.memory.SlabPool.SlabPool(long,long,float,Runnable)",1,1,1
"org.apache.cassandra.utils.memory.SlabPool.needToCopyOnHeap()",1,1,1
"org.apache.cassandra.utils.memory.SlabPool.newAllocator()",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.isPowerOfTwo(int)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.isPowerOfTwo(long)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.nextHighestPowerOfTwo(int)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.nextHighestPowerOfTwo(long)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.ntz(int)",4,1,4
"org.apache.cassandra.utils.obs.BitUtil.ntz(long)",8,1,8
"org.apache.cassandra.utils.obs.BitUtil.ntz2(long)",1,1,4
"org.apache.cassandra.utils.obs.BitUtil.ntz3(long)",1,1,6
"org.apache.cassandra.utils.obs.BitUtil.pop(long)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.pop_andnot(long[],long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.BitUtil.pop_array(long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.BitUtil.pop_intersect(long[],long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.BitUtil.pop_union(long[],long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.BitUtil.pop_xor(long[],long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.OffHeapBitSet.OffHeapBitSet(Memory)",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.OffHeapBitSet(long)",2,1,3
"org.apache.cassandra.utils.obs.OffHeapBitSet.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.capacity()",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.clear()",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.clear(long)",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.close()",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.deserialize(DataInput)",1,2,2
"org.apache.cassandra.utils.obs.OffHeapBitSet.equals(Object)",3,1,3
"org.apache.cassandra.utils.obs.OffHeapBitSet.get(long)",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.hashCode()",1,2,2
"org.apache.cassandra.utils.obs.OffHeapBitSet.offHeapSize()",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.serialize(DataOutput)",1,2,2
"org.apache.cassandra.utils.obs.OffHeapBitSet.serializedSize()",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.set(long)",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.set(long,byte)",1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.toString()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.OpenBitSet()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.OpenBitSet(long)",1,1,4
"org.apache.cassandra.utils.obs.OpenBitSet.addTo(IdentityCollection)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.and(OpenBitSet)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.bits2words(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.capacity()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.cardinality()",1,2,2
"org.apache.cassandra.utils.obs.OpenBitSet.clear()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.clear(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.clear(int,int)",4,2,7
"org.apache.cassandra.utils.obs.OpenBitSet.clear(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.clear(long,long)",4,2,7
"org.apache.cassandra.utils.obs.OpenBitSet.close()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.deserialize(DataInput)",1,3,4
"org.apache.cassandra.utils.obs.OpenBitSet.equals(Object)",7,1,8
"org.apache.cassandra.utils.obs.OpenBitSet.get(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.get(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getNumWords()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getPage(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getPageCount()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getPageSize()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.hashCode()",1,1,2
"org.apache.cassandra.utils.obs.OpenBitSet.intersect(OpenBitSet)",1,1,4
"org.apache.cassandra.utils.obs.OpenBitSet.isEmpty()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.length()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.offHeapSize()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.serialize(DataOutput)",1,3,4
"org.apache.cassandra.utils.obs.OpenBitSet.serializedSize()",1,3,4
"org.apache.cassandra.utils.obs.OpenBitSet.set(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.set(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.size()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.trimTrailingZeros()",1,1,3
"org.apache.cassandra.utils.progress.ProgressEvent.ProgressEvent(ProgressEventType,int,int)",1,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.ProgressEvent(ProgressEventType,int,int,String)",1,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.createNotification(String)",1,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.getMessage()",1,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.getProgressCount()",1,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.getProgressPercentage()",1,1,2
"org.apache.cassandra.utils.progress.ProgressEvent.getTotal()",1,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.getType()",1,1,1
"org.apache.cassandra.utils.progress.ProgressEventNotifierSupport.addProgressListener(ProgressListener)",1,1,1
"org.apache.cassandra.utils.progress.ProgressEventNotifierSupport.fireProgressEvent(String,ProgressEvent)",1,2,2
"org.apache.cassandra.utils.progress.ProgressEventNotifierSupport.removeProgressListener(ProgressListener)",1,1,1
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleConnectionClosed(long,String)",1,1,1
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleConnectionFailed(long,String)",1,1,1
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleNotification(Notification,Object)",2,3,6
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleNotificationLost(long,String)",1,1,1
"org.apache.cassandra.utils.progress.jmx.JMXProgressSupport.JMXProgressSupport(NotificationBroadcasterSupport)",1,1,1
"org.apache.cassandra.utils.progress.jmx.JMXProgressSupport.progress(String,ProgressEvent)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.computeUnsignedVIntSize(long)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.computeVIntSize(long)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.decodeZigZag64(long)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.encodeExtraBytesToRead(int)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.encodeVInt(long,int)",1,1,2
"org.apache.cassandra.utils.vint.VIntCoding.encodeZigZag64(long)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.firstByteValueMask(int)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.numberOfExtraBytesToRead(int)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.readUnsignedVInt(DataInput)",2,2,3
"org.apache.cassandra.utils.vint.VIntCoding.readVInt(DataInput)",1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.writeUnsignedVInt(long,DataOutput)",2,2,2
"org.apache.cassandra.utils.vint.VIntCoding.writeVInt(long,DataOutput)",1,1,1

