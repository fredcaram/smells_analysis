Method,CALL,CALLED,IMP,LOC,NBD,NP,STAT,v(G)
"freemind.common.BooleanProperty.BooleanProperty(String,String)",4,34,n/a,3,2,2,5,1
"freemind.common.BooleanProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.common.BooleanProperty.getLabel()",0,1,n/a,3,0,0,1,1
"freemind.common.BooleanProperty.getValue()",1,0,n/a,3,0,0,1,2
"freemind.common.BooleanProperty.layout(DefaultFormBuilder,TextTranslator)",6,0,n/a,5,0,2,2,1
"freemind.common.BooleanProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.BooleanProperty.setValue(String)",8,0,n/a,10,1,1,3,4
"freemind.common.ColorProperty.ColorProperty(String,String,String,TextTranslator)",3,10,n/a,17,0,4,8,1
"freemind.common.ColorProperty.actionPerformed(ActionEvent)",7,0,n/a,9,1,1,4,2
"freemind.common.ColorProperty.getColorValue()",0,2,n/a,5,0,0,1,1
"freemind.common.ColorProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.common.ColorProperty.getLabel()",0,2,n/a,3,0,0,1,1
"freemind.common.ColorProperty.getValue()",2,0,n/a,3,0,0,1,1
"freemind.common.ColorProperty.layout(DefaultFormBuilder,TextTranslator)",24,0,n/a,5,3,2,11,3
"freemind.common.ColorProperty.setColorValue(Color)",3,2,n/a,10,1,1,5,2
"freemind.common.ColorProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.ColorProperty.setValue(String)",2,1,n/a,3,0,1,1,1
"freemind.common.ComboProperty.ComboProperty(String,String,List<String>,List<String>)",4,0,n/a,8,0,4,4,1
"freemind.common.ComboProperty.ComboProperty(String,String,String[],List<String>)",5,0,n/a,9,0,4,5,1
"freemind.common.ComboProperty.ComboProperty(String,String,String[],TextTranslator)",8,0,n/a,17,1,4,9,2
"freemind.common.ComboProperty.addActionListener()",3,2,n/a,3,2,0,2,1
"freemind.common.ComboProperty.fillPossibleValues(List<String>)",2,2,n/a,6,0,1,2,1
"freemind.common.ComboProperty.fillPossibleValues(String[])",2,2,n/a,5,0,1,1,1
"freemind.common.ComboProperty.getDescription()",0,2,n/a,3,0,0,1,1
"freemind.common.ComboProperty.getLabel()",0,2,n/a,3,0,0,1,1
"freemind.common.ComboProperty.getValue()",2,0,n/a,3,0,0,1,1
"freemind.common.ComboProperty.layout(DefaultFormBuilder,TextTranslator)",6,0,n/a,5,0,2,2,1
"freemind.common.ComboProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.ComboProperty.setValue(String)",9,3,n/a,12,2,1,5,3
"freemind.common.ComboProperty.updateComboBoxEntries(List<String>,List<String>)",6,1,n/a,14,1,2,4,2
"freemind.common.DontShowNotificationProperty.DontShowNotificationProperty(String,String)",1,5,n/a,5,0,2,3,1
"freemind.common.FontProperty.FontProperty(String,String,TextTranslator)",8,1,n/a,3,2,3,7,1
"freemind.common.FontProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.common.FontProperty.getLabel()",0,1,n/a,3,0,0,1,1
"freemind.common.FontProperty.getValue()",1,0,n/a,3,0,0,1,1
"freemind.common.FontProperty.layout(DefaultFormBuilder,TextTranslator)",6,0,n/a,5,0,2,2,1
"freemind.common.FontProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.FontProperty.setValue(String)",6,0,n/a,13,2,1,10,4
"freemind.common.FreeMindProgressMonitor.FreeMindProgressMonitor(String)",23,1,n/a,3,2,1,21,2
"freemind.common.FreeMindProgressMonitor.dismiss()",7,2,n/a,11,0,0,4,1
"freemind.common.FreeMindProgressMonitor.getString(String)",2,2,n/a,3,0,1,1,1
"freemind.common.FreeMindProgressMonitor.main(String[])",11,0,n/a,20,2,1,14,3
"freemind.common.FreeMindProgressMonitor.setProgress(int)",3,1,n/a,3,2,1,3,1
"freemind.common.FreeMindProgressMonitor.showProgress(int,String,Object[])",6,1,n/a,3,2,3,4,1
"freemind.common.FreeMindProgressMonitor.showProgress(int,int,String,Object[])",4,1,n/a,3,2,4,3,1
"freemind.common.FreeMindTask.FreeMindTask(RootPaneContainer,int,String)",19,0,n/a,25,1,3,16,1
"freemind.common.FreeMindTask.ProgressDescription.ProgressDescription(String,Object[])",1,1,n/a,10,0,2,3,1
"freemind.common.FreeMindTask.getAmountOfSteps()",0,0,n/a,3,0,0,1,1
"freemind.common.FreeMindTask.getRounds()",0,0,n/a,3,0,0,1,1
"freemind.common.FreeMindTask.isFinished()",0,0,n/a,3,0,0,1,1
"freemind.common.FreeMindTask.isInterrupted()",0,1,n/a,3,0,0,1,1
"freemind.common.FreeMindTask.processAction()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.common.FreeMindTask.run()",19,0,n/a,5,4,0,31,10
"freemind.common.FreeMindTask.setAmountOfSteps(int)",0,0,n/a,3,0,1,1,1
"freemind.common.FreeMindTask.setFinished(boolean)",0,1,n/a,3,0,1,1,1
"freemind.common.FreeMindTask.setInterrupted(boolean)",0,0,n/a,3,0,1,1,1
"freemind.common.IconProperty.IconProperty(String,String,FreeMindMain,Vector<MindIcon>)",3,1,n/a,10,0,4,7,1
"freemind.common.IconProperty.actionPerformed(ActionEvent)",16,0,n/a,19,1,1,14,3
"freemind.common.IconProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.common.IconProperty.getLabel()",0,1,n/a,3,0,0,1,1
"freemind.common.IconProperty.getValue()",1,0,n/a,3,0,0,1,1
"freemind.common.IconProperty.layout(DefaultFormBuilder,TextTranslator)",6,0,n/a,4,0,2,2,1
"freemind.common.IconProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.IconProperty.setIcon(MindIcon)",4,1,n/a,4,0,1,2,1
"freemind.common.IconProperty.setValue(String)",3,1,n/a,8,2,1,4,3
"freemind.common.JOptionalSplitPane.JOptionalSplitPane()",2,2,n/a,3,0,0,1,1
"freemind.common.JOptionalSplitPane.checkIndex(int)",1,2,n/a,8,1,1,2,3
"freemind.common.JOptionalSplitPane.getAmountOfComponents()",1,1,n/a,3,0,0,1,1
"freemind.common.JOptionalSplitPane.getDividerPosition()",1,1,n/a,10,1,0,4,2
"freemind.common.JOptionalSplitPane.getLastDividerPosition()",0,3,n/a,6,0,0,1,1
"freemind.common.JOptionalSplitPane.main(String[])",30,0,n/a,4,2,1,18,1
"freemind.common.JOptionalSplitPane.removeComponent(int)",14,3,n/a,24,2,1,17,6
"freemind.common.JOptionalSplitPane.setComponent(JComponent,int)",32,4,n/a,52,3,2,36,9
"freemind.common.JOptionalSplitPane.setLastDividerPosition(int)",0,3,n/a,6,0,1,1,1
"freemind.common.JOptionalSplitPane.setSingleJPanel(JComponent)",9,2,n/a,16,2,1,9,3
"freemind.common.NamedObject.NamedObject()",0,1,n/a,2,0,0,0,1
"freemind.common.NamedObject.NamedObject(Object,String)",0,1,n/a,4,0,2,2,1
"freemind.common.NamedObject.equals(Object)",2,33,n/a,7,1,1,4,2
"freemind.common.NamedObject.getName()",0,1,n/a,3,0,0,1,1
"freemind.common.NamedObject.getObject()",0,0,n/a,3,0,0,1,1
"freemind.common.NamedObject.literal(String)",1,4,n/a,6,0,1,4,1
"freemind.common.NamedObject.toString()",0,0,n/a,3,0,0,1,1
"freemind.common.NextLineProperty.NextLineProperty()",1,30,n/a,3,0,0,1,1
"freemind.common.NextLineProperty.getDescription()",0,0,n/a,3,0,0,1,1
"freemind.common.NextLineProperty.getLabel()",0,0,n/a,3,0,0,1,1
"freemind.common.NextLineProperty.layout(DefaultFormBuilder,TextTranslator)",1,0,n/a,3,0,2,1,1
"freemind.common.NextLineProperty.setEnabled(boolean)",0,0,n/a,2,0,1,0,1
"freemind.common.NumberProperty.NumberProperty(String,String,int,int,int)",5,13,n/a,3,2,5,8,1
"freemind.common.NumberProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.common.NumberProperty.getIntValue()",2,0,n/a,3,0,0,1,1
"freemind.common.NumberProperty.getLabel()",0,2,n/a,3,0,0,1,1
"freemind.common.NumberProperty.getValue()",2,0,n/a,3,0,0,1,1
"freemind.common.NumberProperty.layout(DefaultFormBuilder,TextTranslator)",6,0,n/a,6,0,2,2,1
"freemind.common.NumberProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.NumberProperty.setValue(String)",7,0,n/a,16,2,1,10,5
"freemind.common.OptionalDontShowMeAgainDialog.DontShowPropertyHandler.getProperty()",n/a,1,1,n/a,n/a,0,n/a,n/a
"freemind.common.OptionalDontShowMeAgainDialog.DontShowPropertyHandler.setProperty(String)",n/a,3,1,n/a,n/a,1,n/a,n/a
"freemind.common.OptionalDontShowMeAgainDialog.OptionalDontShowMeAgainDialog(JFrame,Component,String,String,TextTranslator,DontShowPropertyHandler,int)",4,5,n/a,15,1,7,9,2
"freemind.common.OptionalDontShowMeAgainDialog.StandardPropertyHandler.StandardPropertyHandler(Controller,String)",0,5,n/a,5,0,2,2,1
"freemind.common.OptionalDontShowMeAgainDialog.StandardPropertyHandler.getProperty()",1,1,n/a,3,0,0,1,1
"freemind.common.OptionalDontShowMeAgainDialog.StandardPropertyHandler.setProperty(String)",1,3,n/a,3,0,1,1,1
"freemind.common.OptionalDontShowMeAgainDialog.close(int)",6,3,n/a,18,3,1,9,5
"freemind.common.OptionalDontShowMeAgainDialog.getResult()",0,5,n/a,6,0,0,1,1
"freemind.common.OptionalDontShowMeAgainDialog.show()",61,5,n/a,3,2,0,43,5
"freemind.common.PasswordProperty.PasswordProperty(String,String)",1,1,n/a,7,0,2,1,1
"freemind.common.PasswordProperty.getValue()",2,0,n/a,3,0,0,1,1
"freemind.common.PasswordProperty.initializeTextfield()",1,0,n/a,3,0,0,1,1
"freemind.common.PasswordProperty.setValue(String)",2,0,n/a,4,0,1,2,1
"freemind.common.PropertyBean.addPropertyChangeListener(PropertyChangeListener)",1,1,n/a,3,0,1,1,1
"freemind.common.PropertyBean.firePropertyChangeEvent()",4,1,n/a,7,1,0,3,2
"freemind.common.PropertyBean.getLabel()",n/a,3,1,n/a,n/a,0,n/a,n/a
"freemind.common.PropertyBean.getValue()",n/a,3,1,n/a,n/a,0,n/a,n/a
"freemind.common.PropertyBean.removePropertyChangeListener(PropertyChangeListener)",1,0,n/a,3,0,1,1,1
"freemind.common.PropertyBean.setValue(String)",n/a,7,1,n/a,n/a,1,n/a,n/a
"freemind.common.PropertyControl.getDescription()",n/a,0,2,n/a,n/a,0,n/a,n/a
"freemind.common.PropertyControl.getLabel()",n/a,0,2,n/a,n/a,0,n/a,n/a
"freemind.common.PropertyControl.layout(DefaultFormBuilder,TextTranslator)",n/a,2,0,n/a,n/a,2,n/a,n/a
"freemind.common.PropertyControl.setEnabled(boolean)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.common.RemindValueProperty.RemindValueProperty(String,String,TextTranslator)",1,3,n/a,6,0,3,3,1
"freemind.common.RemindValueProperty.setState(int)",7,0,n/a,15,0,1,7,1
"freemind.common.ScalableJButton.ScalableJButton()",2,0,n/a,4,0,0,2,1
"freemind.common.ScalableJButton.ScalableJButton(String)",2,0,n/a,4,0,1,2,1
"freemind.common.ScalableJButton.componentHidden(ComponentEvent)",0,0,n/a,3,0,1,0,1
"freemind.common.ScalableJButton.componentMoved(ComponentEvent)",0,0,n/a,3,0,1,0,1
"freemind.common.ScalableJButton.componentResized(ComponentEvent)",0,0,n/a,12,0,1,0,1
"freemind.common.ScalableJButton.componentShown(ComponentEvent)",0,0,n/a,3,0,1,0,1
"freemind.common.ScalableJButton.init()",4,2,n/a,7,1,0,2,2
"freemind.common.ScalableJTable.ScalableJTable()",4,0,n/a,4,0,0,2,1
"freemind.common.ScriptEditorProperty.ScriptEditorProperty(String,String,MindMapController)",7,1,n/a,16,1,3,9,2
"freemind.common.ScriptEditorProperty.ScriptEditorStarter.startEditor(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.common.ScriptEditorProperty.actionPerformed(ActionEvent)",3,0,n/a,13,3,1,7,4
"freemind.common.ScriptEditorProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.common.ScriptEditorProperty.getLabel()",0,1,n/a,3,0,0,1,1
"freemind.common.ScriptEditorProperty.getValue()",2,0,n/a,4,0,0,1,1
"freemind.common.ScriptEditorProperty.layout(DefaultFormBuilder,TextTranslator)",6,0,n/a,4,0,2,2,1
"freemind.common.ScriptEditorProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.ScriptEditorProperty.setScriptValue(String)",4,1,n/a,11,1,1,5,2
"freemind.common.ScriptEditorProperty.setValue(String)",1,0,n/a,3,0,1,1,1
"freemind.common.SeparatorProperty.SeparatorProperty(String)",1,41,n/a,4,0,1,2,1
"freemind.common.SeparatorProperty.getDescription()",0,0,n/a,3,0,0,1,1
"freemind.common.SeparatorProperty.getLabel()",0,1,n/a,3,0,0,1,1
"freemind.common.SeparatorProperty.layout(DefaultFormBuilder,TextTranslator)",3,0,n/a,3,0,2,1,1
"freemind.common.SeparatorProperty.setEnabled(boolean)",0,0,n/a,2,0,1,0,1
"freemind.common.StringProperty.StringProperty(String,String)",5,26,n/a,3,2,2,6,1
"freemind.common.StringProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.common.StringProperty.getLabel()",0,1,n/a,3,0,0,1,1
"freemind.common.StringProperty.getValue()",1,1,n/a,3,0,0,1,1
"freemind.common.StringProperty.initializeTextfield()",1,1,n/a,6,0,0,1,1
"freemind.common.StringProperty.layout(DefaultFormBuilder,TextTranslator)",6,0,n/a,5,0,2,2,1
"freemind.common.StringProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.StringProperty.setValue(String)",2,1,n/a,4,0,1,2,1
"freemind.common.TextTranslator.getText(String)",n/a,16,5,n/a,n/a,1,n/a,n/a
"freemind.common.ThreeCheckBoxProperty.ThreeCheckBoxProperty(String,String)",6,16,n/a,4,2,2,6,1
"freemind.common.ThreeCheckBoxProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.common.ThreeCheckBoxProperty.getLabel()",0,2,n/a,3,0,0,1,1
"freemind.common.ThreeCheckBoxProperty.getState()",0,1,n/a,3,0,0,1,1
"freemind.common.ThreeCheckBoxProperty.getValue()",0,4,n/a,11,1,0,8,4
"freemind.common.ThreeCheckBoxProperty.layout(DefaultFormBuilder,TextTranslator)",7,0,n/a,6,0,2,4,1
"freemind.common.ThreeCheckBoxProperty.setEnabled(boolean)",1,0,n/a,3,0,1,1,1
"freemind.common.ThreeCheckBoxProperty.setState(int)",1,2,n/a,13,0,1,7,1
"freemind.common.ThreeCheckBoxProperty.setValue(String)",9,2,n/a,10,1,1,3,5
"freemind.common.ThreeCheckBoxProperty.transformString(String)",4,1,n/a,12,1,1,7,4
"freemind.common.UnicodeReader.UnicodeReader(InputStream,String)",1,1,n/a,12,0,2,2,1
"freemind.common.UnicodeReader.close()",2,0,n/a,4,0,0,2,1
"freemind.common.UnicodeReader.getDefaultEncoding()",0,0,n/a,3,0,0,1,1
"freemind.common.UnicodeReader.getEncoding()",1,0,n/a,9,0,0,3,2
"freemind.common.UnicodeReader.init()",4,2,n/a,44,1,0,28,19
"freemind.common.UnicodeReader.read(char[],int,int)",2,0,n/a,4,0,3,2,1
"freemind.common.XmlBindingTools.XmlBindingTools()",0,1,n/a,2,0,0,0,1
"freemind.common.XmlBindingTools.createMarshaller()",3,1,n/a,8,1,0,4,2
"freemind.common.XmlBindingTools.createUnmarshaller()",3,3,n/a,8,1,0,4,2
"freemind.common.XmlBindingTools.decorateDialog(Controller,JDialog,String)",2,2,n/a,7,0,3,3,1
"freemind.common.XmlBindingTools.decorateDialog(String,JDialog)",18,1,n/a,35,3,2,20,4
"freemind.common.XmlBindingTools.getInstance()",4,14,n/a,11,2,0,6,3
"freemind.common.XmlBindingTools.marshall(XmlAction)",7,3,n/a,15,1,1,8,2
"freemind.common.XmlBindingTools.storeDialogPositions(Controller,JDialog,WindowConfigurationStorage,String)",2,2,n/a,6,0,4,2,1
"freemind.common.XmlBindingTools.storeDialogPositions(WindowConfigurationStorage,JDialog)",9,1,n/a,10,0,2,7,1
"freemind.common.XmlBindingTools.unMarshall(Reader)",5,5,n/a,14,1,1,6,2
"freemind.common.XmlBindingTools.unMarshall(String)",2,5,n/a,3,0,1,1,1
"freemind.controller.BlindIcon.BlindIcon(int)",0,1,n/a,3,0,1,1,1
"freemind.controller.BlindIcon.getIconHeight()",0,0,n/a,8,0,0,1,1
"freemind.controller.BlindIcon.getIconWidth()",0,0,n/a,8,0,0,1,1
"freemind.controller.BlindIcon.paintIcon(Component,Graphics,int,int)",0,0,n/a,8,0,4,0,1
"freemind.controller.ColorSwatch.ColorSwatch()",0,0,n/a,2,0,0,0,1
"freemind.controller.ColorSwatch.ColorSwatch(Color)",0,0,n/a,3,0,1,1,1
"freemind.controller.ColorSwatch.getColor()",0,1,n/a,3,0,0,1,1
"freemind.controller.ColorSwatch.getIconHeight()",0,2,n/a,3,0,0,1,1
"freemind.controller.ColorSwatch.getIconWidth()",0,2,n/a,3,0,0,1,1
"freemind.controller.ColorSwatch.paintIcon(Component,Graphics,int,int)",9,0,n/a,6,0,4,4,1
"freemind.controller.Controller.AboutAction.AboutAction(Controller)",2,1,n/a,4,0,1,2,1
"freemind.controller.Controller.AboutAction.actionPerformed(ActionEvent)",6,0,n/a,7,0,1,1,1
"freemind.controller.Controller.CloseAction.CloseAction(Controller)",2,1,n/a,5,0,1,2,1
"freemind.controller.Controller.CloseAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.controller.Controller.Closer.windowClosing(WindowEvent)",2,0,n/a,4,0,1,2,1
"freemind.controller.Controller.ColorTracker.ColorTracker(JColorChooser)",0,1,n/a,3,0,1,1,1
"freemind.controller.Controller.ColorTracker.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.controller.Controller.ColorTracker.getColor()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.Controller(FreeMindMain)",3,2,n/a,9,1,1,3,2
"freemind.controller.Controller.DefaultLocalLinkConverter.convertLocalLink(String)",4,2,n/a,8,0,1,2,1
"freemind.controller.Controller.DisposeOnClose.componentHidden(ComponentEvent)",2,0,n/a,4,0,1,2,1
"freemind.controller.Controller.DocumentationAction.DocumentationAction(Controller)",2,1,n/a,4,0,1,2,1
"freemind.controller.Controller.DocumentationAction.actionPerformed(ActionEvent)",16,0,n/a,9,4,1,14,5
"freemind.controller.Controller.KeyDocumentationAction.KeyDocumentationAction(Controller)",2,1,n/a,4,0,1,2,1
"freemind.controller.Controller.KeyDocumentationAction.actionPerformed(ActionEvent)",12,0,n/a,21,2,1,11,4
"freemind.controller.Controller.LicenseAction.LicenseAction(Controller)",2,1,n/a,4,0,1,2,1
"freemind.controller.Controller.LicenseAction.actionPerformed(ActionEvent)",4,0,n/a,6,0,1,1,1
"freemind.controller.Controller.LocalLinkConverter.convertLocalLink(String)",n/a,2,1,n/a,n/a,1,n/a,n/a
"freemind.controller.Controller.MoveToRootAction.MoveToRootAction(Controller)",3,1,n/a,4,0,1,2,1
"freemind.controller.Controller.MoveToRootAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.controller.Controller.NavigationMoveMapLeftAction.NavigationMoveMapLeftAction(Controller)",6,1,n/a,5,0,1,2,1
"freemind.controller.Controller.NavigationMoveMapLeftAction.actionPerformed(ActionEvent)",3,0,n/a,8,1,1,4,3
"freemind.controller.Controller.NavigationMoveMapRightAction.NavigationMoveMapRightAction(Controller)",6,1,n/a,5,0,1,2,1
"freemind.controller.Controller.NavigationMoveMapRightAction.actionPerformed(ActionEvent)",3,0,n/a,8,1,1,4,3
"freemind.controller.Controller.NavigationNextMapAction.NavigationNextMapAction(Controller)",6,1,n/a,5,0,1,2,1
"freemind.controller.Controller.NavigationNextMapAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.controller.Controller.NavigationPreviousMapAction.NavigationPreviousMapAction(Controller)",6,1,n/a,5,0,1,2,1
"freemind.controller.Controller.NavigationPreviousMapAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.controller.Controller.OpenURLAction.OpenURLAction(Controller,String,String)",4,3,n/a,6,0,3,3,1
"freemind.controller.Controller.OpenURLAction.actionPerformed(ActionEvent)",6,0,n/a,9,1,1,4,3
"freemind.controller.Controller.OptionAntialiasAction.actionPerformed(ActionEvent)",2,0,n/a,4,0,1,2,1
"freemind.controller.Controller.OptionAntialiasAction.changeAntialias(String)",4,3,n/a,10,1,1,5,3
"freemind.controller.Controller.OptionHTMLExportFoldingAction.OptionHTMLExportFoldingAction(Controller)",0,1,n/a,2,0,1,0,1
"freemind.controller.Controller.OptionHTMLExportFoldingAction.actionPerformed(ActionEvent)",2,0,n/a,3,0,1,1,1
"freemind.controller.Controller.OptionSelectionMechanismAction.OptionSelectionMechanismAction(Controller)",1,1,n/a,4,0,1,2,1
"freemind.controller.Controller.OptionSelectionMechanismAction.actionPerformed(ActionEvent)",2,0,n/a,4,0,1,2,1
"freemind.controller.Controller.OptionSelectionMechanismAction.changeSelection(String)",6,2,n/a,10,0,1,5,2
"freemind.controller.Controller.OptionSelectionMechanismAction.propertyChanged(String,String,String)",2,3,n/a,6,1,3,2,2
"freemind.controller.Controller.PageAction.PageAction(Controller)",3,1,n/a,4,0,1,2,1
"freemind.controller.Controller.PageAction.actionPerformed(ActionEvent)",55,0,n/a,3,2,1,51,4
"freemind.controller.Controller.PrintAction.PrintAction(Controller,boolean)",7,2,n/a,7,0,2,3,2
"freemind.controller.Controller.PrintAction.actionPerformed(ActionEvent)",10,0,n/a,17,2,1,10,5
"freemind.controller.Controller.PrintPreviewAction.PrintPreviewAction(Controller)",2,1,n/a,4,0,1,2,1
"freemind.controller.Controller.PrintPreviewAction.actionPerformed(ActionEvent)",10,0,n/a,13,1,1,6,2
"freemind.controller.Controller.PropertyAction.PropertyAction(Controller)",2,1,n/a,7,0,1,2,1
"freemind.controller.Controller.PropertyAction.actionPerformed(ActionEvent)",34,0,n/a,3,3,1,27,4
"freemind.controller.Controller.QuitAction.QuitAction(Controller)",2,1,n/a,3,0,1,1,1
"freemind.controller.Controller.QuitAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.controller.Controller.ShowFilterToolbarAction.ShowFilterToolbarAction(Controller)",5,1,n/a,4,0,1,1,1
"freemind.controller.Controller.ShowFilterToolbarAction.actionPerformed(ActionEvent)",6,0,n/a,7,1,1,3,2
"freemind.controller.Controller.ShowSelectionAsRectangleAction.ShowSelectionAsRectangleAction(Controller)",2,1,n/a,3,0,1,1,1
"freemind.controller.Controller.ShowSelectionAsRectangleAction.actionPerformed(ActionEvent)",1,0,n/a,4,0,1,1,1
"freemind.controller.Controller.ShowSelectionAsRectangleAction.isSelected(JMenuItem,Action)",1,0,n/a,3,0,2,1,1
"freemind.controller.Controller.SplitComponentType.SplitComponentType(int)",0,2,n/a,3,0,1,1,1
"freemind.controller.Controller.SplitComponentType.getIndex()",0,3,n/a,3,0,0,1,1
"freemind.controller.Controller.ToggleLeftToolbarAction.ToggleLeftToolbarAction(Controller)",3,1,n/a,4,0,1,2,1
"freemind.controller.Controller.ToggleLeftToolbarAction.actionPerformed(ActionEvent)",1,0,n/a,4,0,1,2,1
"freemind.controller.Controller.ToggleLeftToolbarAction.isSelected(JMenuItem,Action)",0,0,n/a,3,0,2,1,1
"freemind.controller.Controller.ToggleMenubarAction.ToggleMenubarAction(Controller)",3,1,n/a,4,0,1,2,1
"freemind.controller.Controller.ToggleMenubarAction.actionPerformed(ActionEvent)",1,0,n/a,4,0,1,2,1
"freemind.controller.Controller.ToggleMenubarAction.isSelected(JMenuItem,Action)",0,0,n/a,3,0,2,1,1
"freemind.controller.Controller.ToggleToolbarAction.ToggleToolbarAction(Controller)",3,1,n/a,4,0,1,2,1
"freemind.controller.Controller.ToggleToolbarAction.actionPerformed(ActionEvent)",1,0,n/a,4,0,1,2,1
"freemind.controller.Controller.ToggleToolbarAction.isSelected(JMenuItem,Action)",1,0,n/a,4,0,2,2,1
"freemind.controller.Controller.ZoomInAction.ZoomInAction(Controller)",2,1,n/a,3,0,1,1,1
"freemind.controller.Controller.ZoomInAction.actionPerformed(ActionEvent)",4,0,n/a,12,2,1,9,3
"freemind.controller.Controller.ZoomOutAction.ZoomOutAction(Controller)",2,1,n/a,3,0,1,1,1
"freemind.controller.Controller.ZoomOutAction.actionPerformed(ActionEvent)",4,0,n/a,13,2,1,11,3
"freemind.controller.Controller.acquirePrinterJobAndPageFormat()",17,3,n/a,30,2,0,20,8
"freemind.controller.Controller.addPropertyChangeListener(FreemindPropertyListener)",1,8,n/a,4,0,1,1,1
"freemind.controller.Controller.addPropertyChangeListenerAndPropagate(FreemindPropertyListener)",6,2,n/a,13,1,1,4,2
"freemind.controller.Controller.addTabbedPane(JTabbedPane)",30,1,n/a,9,5,1,36,10
"freemind.controller.Controller.afterMapClose(MapModule,Mode)",0,1,n/a,2,0,2,0,1
"freemind.controller.Controller.afterMapModuleChange(MapModule,Mode,MapModule,Mode)",41,1,n/a,54,2,4,34,6
"freemind.controller.Controller.beforeMapModuleChange(MapModule,Mode,MapModule,Mode)",13,1,n/a,28,2,4,14,5
"freemind.controller.Controller.changeZoomValueProperty(float)",1,2,n/a,5,1,1,2,2
"freemind.controller.Controller.close(boolean)",2,2,n/a,9,0,1,1,1
"freemind.controller.Controller.createNewMode(String)",19,3,n/a,27,1,1,13,4
"freemind.controller.Controller.deregisterMapTitleChangeListener(MapTitleChangeListener)",1,0,n/a,4,0,1,1,1
"freemind.controller.Controller.deregisterMapTitleContributor(MapTitleContributor)",1,0,n/a,4,0,1,1,1
"freemind.controller.Controller.deregisterZoomListener(ZoomListener)",1,1,n/a,3,0,1,1,1
"freemind.controller.Controller.errorMessage(Object)",5,20,n/a,13,2,1,7,3
"freemind.controller.Controller.errorMessage(Object,JComponent)",2,0,n/a,4,0,2,1,1
"freemind.controller.Controller.firePropertyChanged(String,String,String)",3,1,n/a,8,2,3,3,4
"freemind.controller.Controller.getCommonJColorChooser()",0,1,n/a,4,0,0,1,1
"freemind.controller.Controller.getDefaultFont()",5,1,n/a,8,0,0,4,1
"freemind.controller.Controller.getDefaultFontFamilyName()",1,2,n/a,6,0,0,2,1
"freemind.controller.Controller.getDefaultFontSize()",1,1,n/a,6,0,0,2,1
"freemind.controller.Controller.getDefaultFontStyle()",1,1,n/a,6,0,0,2,1
"freemind.controller.Controller.getFilterController()",0,6,n/a,3,0,0,1,1
"freemind.controller.Controller.getFontStringCode(Font)",3,3,n/a,3,0,1,1,1
"freemind.controller.Controller.getFontThroughMap(Font)",6,2,n/a,6,1,1,3,2
"freemind.controller.Controller.getFrame()",0,48,n/a,3,0,0,1,1
"freemind.controller.Controller.getIntProperty(String,int)",1,2,n/a,3,0,2,1,1
"freemind.controller.Controller.getJFrame()",1,1,n/a,6,0,0,4,2
"freemind.controller.Controller.getLastOpenedList()",0,2,n/a,3,0,0,1,1
"freemind.controller.Controller.getMap()",2,3,n/a,5,0,0,1,1
"freemind.controller.Controller.getMapModule()",2,13,n/a,3,0,0,1,1
"freemind.controller.Controller.getMapModuleManager()",0,22,n/a,3,0,0,1,1
"freemind.controller.Controller.getMapMouseMotionListener()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getMapMouseWheelListener()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getMode()",0,8,n/a,3,0,0,1,1
"freemind.controller.Controller.getModeController()",6,12,n/a,14,1,0,5,3
"freemind.controller.Controller.getModel()",3,4,n/a,7,1,0,3,2
"freemind.controller.Controller.getModes()",1,0,n/a,3,0,0,1,1
"freemind.controller.Controller.getNodeDragListener()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getNodeDropListener()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getNodeKeyListener()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getNodeMotionListener()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getNodeMouseMotionListener()",0,2,n/a,3,0,0,1,1
"freemind.controller.Controller.getPageFormat()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getProperty(String)",1,20,n/a,3,0,1,1,1
"freemind.controller.Controller.getPropertyChangeListeners()",1,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getResource(String)",2,8,n/a,3,0,1,1,1
"freemind.controller.Controller.getResourceString(String)",1,48,n/a,3,0,1,1,1
"freemind.controller.Controller.getToolBar()",0,1,n/a,3,0,0,1,1
"freemind.controller.Controller.getToolbar()",0,0,n/a,6,0,0,1,1
"freemind.controller.Controller.getView()",3,26,n/a,8,1,0,3,2
"freemind.controller.Controller.getZooms()",0,0,n/a,8,1,0,7,2
"freemind.controller.Controller.informationMessage(Object)",4,4,n/a,6,0,1,1,1
"freemind.controller.Controller.informationMessage(Object,JComponent)",2,3,n/a,4,0,2,1,1
"freemind.controller.Controller.init()",54,2,n/a,52,0,0,45,1
"freemind.controller.Controller.initialization()",18,1,n/a,10,4,0,15,4
"freemind.controller.Controller.insertComponentIntoSplitPane(JComponent,SplitComponentType)",9,1,n/a,19,1,2,6,2
"freemind.controller.Controller.isMapModuleChangeAllowed(MapModule,Mode,MapModule,Mode)",0,1,n/a,4,0,4,1,1
"freemind.controller.Controller.isSelectionAsRectangle()",2,2,n/a,4,0,0,1,1
"freemind.controller.Controller.moveTab(int,int)",22,2,n/a,31,0,2,23,1
"freemind.controller.Controller.moveToRoot()",3,1,n/a,5,1,0,2,2
"freemind.controller.Controller.numberOfOpenMapInformation(int,int)",5,1,n/a,8,0,2,5,3
"freemind.controller.Controller.obtainFocusForSelected()",13,13,n/a,18,1,0,6,2
"freemind.controller.Controller.quit()",64,1,n/a,78,3,0,46,15
"freemind.controller.Controller.registerMapTitleChangeListener(MapTitleChangeListener)",1,1,n/a,4,0,1,1,1
"freemind.controller.Controller.registerMapTitleContributor(MapTitleContributor)",1,0,n/a,4,0,1,1,1
"freemind.controller.Controller.registerZoomListener(ZoomListener)",1,1,n/a,3,0,1,1,1
"freemind.controller.Controller.removePropertyChangeListener(FreemindPropertyListener)",1,0,n/a,4,0,1,1,1
"freemind.controller.Controller.removeSplitPane(SplitComponentType)",5,1,n/a,12,2,1,5,3
"freemind.controller.Controller.setAllActions(boolean)",9,3,n/a,14,0,1,8,5
"freemind.controller.Controller.setFrame(FreeMindMain)",0,0,n/a,3,0,1,1,1
"freemind.controller.Controller.setLeftToolbarVisible(boolean)",6,2,n/a,11,1,1,7,3
"freemind.controller.Controller.setMenubarVisible(boolean)",3,2,n/a,4,0,1,2,1
"freemind.controller.Controller.setProperty(String,String)",4,25,n/a,5,0,2,3,1
"freemind.controller.Controller.setTitle()",17,7,n/a,33,2,0,18,7
"freemind.controller.Controller.setToolbarVisible(boolean)",1,3,n/a,4,0,1,2,1
"freemind.controller.Controller.setZoom(float)",8,7,n/a,10,0,1,5,1
"freemind.controller.Controller.showCommonJColorChooserDialog(Component,String,Color)",10,6,n/a,12,0,3,8,1
"freemind.controller.Controller.storeOptionSplitPanePosition()",2,1,n/a,9,1,0,2,2
"freemind.controller.Controller.storePageFormat()",9,2,n/a,11,1,0,7,4
"freemind.controller.Controller.tabSelectionChanged()",16,2,n/a,26,1,0,17,6
"freemind.controller.Controller.toggleSelectionAsRectangle()",3,1,n/a,9,1,0,3,2
"freemind.controller.FreeMindPopupMenu.FreeMindPopupMenu()",4,1,n/a,6,1,0,2,2
"freemind.controller.FreeMindPopupMenu.addMenuListener(MenuListener)",1,0,n/a,3,0,1,1,1
"freemind.controller.FreeMindPopupMenu.firePopupMenuCanceled()",2,0,n/a,7,1,0,3,2
"freemind.controller.FreeMindPopupMenu.firePopupMenuWillBecomeInvisible()",2,0,n/a,7,1,0,3,2
"freemind.controller.FreeMindPopupMenu.firePopupMenuWillBecomeVisible()",3,0,n/a,7,1,0,4,2
"freemind.controller.FreeMindPopupMenu.removeMenuListener(MenuListener)",1,0,n/a,3,0,1,1,1
"freemind.controller.FreeMindToolBar.FreeMindToolBar()",1,3,n/a,6,0,0,1,1
"freemind.controller.FreeMindToolBar.FreeMindToolBar(String)",1,0,n/a,5,0,1,1,1
"freemind.controller.FreeMindToolBar.FreeMindToolBar(String,int)",3,3,n/a,7,0,2,3,1
"freemind.controller.FreeMindToolBar.FreeMindToolBar(int)",1,0,n/a,5,0,1,1,1
"freemind.controller.FreeMindToolBar.add(Action)",13,16,n/a,21,1,1,11,2
"freemind.controller.LastOpenedList.LastOpenedList(Controller,String)",7,0,n/a,10,1,2,5,2
"freemind.controller.LastOpenedList.add(String,String)",7,1,n/a,15,1,2,8,4
"freemind.controller.LastOpenedList.listIterator()",1,1,n/a,3,0,0,1,1
"freemind.controller.LastOpenedList.load(String)",4,1,n/a,11,1,1,4,3
"freemind.controller.LastOpenedList.mapClosed(MapModule)",0,0,n/a,4,0,1,0,1
"freemind.controller.LastOpenedList.mapOpened(MapModule)",5,0,n/a,7,0,1,5,3
"freemind.controller.LastOpenedList.open(String)",8,0,n/a,16,2,1,8,4
"freemind.controller.LastOpenedList.save()",5,0,n/a,8,1,0,5,2
"freemind.controller.LastStateStorageManagement.LastStateStorageManagement(String)",9,3,n/a,20,3,1,11,6
"freemind.controller.LastStateStorageManagement.changeOrAdd(MindmapLastStateStorage)",35,1,n/a,48,3,1,32,9
"freemind.controller.LastStateStorageManagement.clearTabIndices()",5,0,n/a,6,1,0,4,2
"freemind.controller.LastStateStorageManagement.getLastFocussedTab()",1,1,n/a,3,0,0,1,1
"freemind.controller.LastStateStorageManagement.getLastOpenList()",11,2,n/a,3,2,0,9,3
"freemind.controller.LastStateStorageManagement.getStorage(String)",7,2,n/a,10,2,1,7,3
"freemind.controller.LastStateStorageManagement.getXml()",1,1,n/a,3,0,0,1,1
"freemind.controller.LastStateStorageManagement.setLastChanged(MindmapLastStateStorage)",2,3,n/a,3,0,1,1,1
"freemind.controller.LastStateStorageManagement.setLastFocussedTab(int)",1,0,n/a,3,0,1,1,1
"freemind.controller.MainToolBar.MainToolBar(Controller)",9,0,n/a,10,1,1,7,2
"freemind.controller.MainToolBar.activate(boolean)",0,0,n/a,2,0,1,0,1
"freemind.controller.MainToolBar.setAllActions(boolean)",0,0,n/a,2,0,1,0,1
"freemind.controller.MapModuleManager.MapModuleChangeObserver.afterMapClose(MapModule,Mode)",n/a,1,4,n/a,n/a,2,n/a,n/a
"freemind.controller.MapModuleManager.MapModuleChangeObserver.afterMapModuleChange(MapModule,Mode,MapModule,Mode)",n/a,1,4,n/a,n/a,4,n/a,n/a
"freemind.controller.MapModuleManager.MapModuleChangeObserver.beforeMapModuleChange(MapModule,Mode,MapModule,Mode)",n/a,1,4,n/a,n/a,4,n/a,n/a
"freemind.controller.MapModuleManager.MapModuleChangeObserver.isMapModuleChangeAllowed(MapModule,Mode,MapModule,Mode)",n/a,1,4,n/a,n/a,4,n/a,n/a
"freemind.controller.MapModuleManager.MapModuleChangeObserver.numberOfOpenMapInformation(int,int)",n/a,1,4,n/a,n/a,2,n/a,n/a
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.addListener(MapModuleChangeObserver)",1,1,n/a,3,0,1,1,1
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.afterMapClose(MapModule,Mode)",2,2,n/a,5,1,2,2,2
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.afterMapModuleChange(MapModule,Mode,MapModule,Mode)",2,2,n/a,7,1,4,2,2
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.beforeMapModuleChange(MapModule,Mode,MapModule,Mode)",2,2,n/a,7,1,4,2,2
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.isMapModuleChangeAllowed(MapModule,Mode,MapModule,Mode)",2,2,n/a,12,2,4,6,3
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.numberOfOpenMapInformation(int,int)",2,2,n/a,5,1,2,2,2
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.removeListener(MapModuleChangeObserver)",1,1,n/a,3,0,1,1,1
"freemind.controller.MapModuleManager.MapModuleManager(Controller)",0,0,n/a,2,0,1,0,1
"freemind.controller.MapModuleManager.MapTitleChangeListener.setMapTitle(String,MapModule,MindMap)",n/a,0,0,n/a,n/a,3,n/a,n/a
"freemind.controller.MapModuleManager.MapTitleContributor.getMapTitle(String,MapModule,MindMap)",n/a,0,0,n/a,n/a,3,n/a,n/a
"freemind.controller.MapModuleManager.addListener(MapModuleChangeObserver)",1,0,n/a,3,0,1,1,1
"freemind.controller.MapModuleManager.addToOrChangeInMapModules(String,MapModule)",6,2,n/a,18,1,2,9,3
"freemind.controller.MapModuleManager.changeToMapModule(MapModule)",2,7,n/a,3,0,1,1,1
"freemind.controller.MapModuleManager.changeToMapModule(String)",4,1,n/a,14,2,1,8,4
"freemind.controller.MapModuleManager.changeToMapOfMode(Mode)",3,0,n/a,12,2,1,5,3
"freemind.controller.MapModuleManager.checkIfFileIsAlreadyOpened(URL)",5,1,n/a,19,2,1,6,4
"freemind.controller.MapModuleManager.close(boolean,StringBuffer)",17,0,n/a,37,2,2,15,6
"freemind.controller.MapModuleManager.fireNumberOfOpenMapInformation()",4,2,n/a,4,0,0,1,1
"freemind.controller.MapModuleManager.getMapKeys()",4,2,n/a,8,1,0,4,2
"freemind.controller.MapModuleManager.getMapModule()",0,12,n/a,3,0,0,1,1
"freemind.controller.MapModuleManager.getMapModuleVector()",1,0,n/a,3,0,0,1,1
"freemind.controller.MapModuleManager.getMapModules()",4,1,n/a,12,1,0,4,2
"freemind.controller.MapModuleManager.getModuleGivenModeController(ModeController)",5,0,n/a,11,2,1,7,3
"freemind.controller.MapModuleManager.newMapModule(MindMap,ModeController)",7,0,n/a,6,0,2,3,1
"freemind.controller.MapModuleManager.nextMapModule()",8,0,n/a,14,1,0,9,5
"freemind.controller.MapModuleManager.previousMapModule()",8,0,n/a,15,2,0,9,4
"freemind.controller.MapModuleManager.removeListener(MapModuleChangeObserver)",1,0,n/a,3,0,1,1,1
"freemind.controller.MapModuleManager.sameFile(URL,URL)",10,1,n/a,11,1,2,5,4
"freemind.controller.MapModuleManager.setMapModule(MapModule,Mode)",4,5,n/a,22,1,2,10,2
"freemind.controller.MapModuleManager.swapModules(int,int)",2,0,n/a,4,0,2,2,1
"freemind.controller.MapModuleManager.tryToChangeToMapModule(String)",3,1,n/a,13,1,1,4,3
"freemind.controller.MapModuleManager.updateMapModuleName()",10,0,n/a,7,0,0,3,1
"freemind.controller.MapMouseMotionListener.MapMouseMotionListener(Controller)",0,0,n/a,3,0,1,1,1
"freemind.controller.MapMouseMotionListener.MapMouseMotionReceiver.mouseDragged(MouseEvent)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.controller.MapMouseMotionListener.MapMouseMotionReceiver.mousePressed(MouseEvent)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.controller.MapMouseMotionListener.MapMouseMotionReceiver.mouseReleased(MouseEvent)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.controller.MapMouseMotionListener.deregister()",0,2,n/a,3,0,0,1,1
"freemind.controller.MapMouseMotionListener.handlePopup(MouseEvent)",14,2,n/a,19,2,1,9,4
"freemind.controller.MapMouseMotionListener.mouseClicked(MouseEvent)",5,0,n/a,5,0,1,2,1
"freemind.controller.MapMouseMotionListener.mouseDragged(MouseEvent)",1,0,n/a,5,1,1,2,2
"freemind.controller.MapMouseMotionListener.mouseEntered(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.controller.MapMouseMotionListener.mouseExited(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.controller.MapMouseMotionListener.mouseMoved(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.controller.MapMouseMotionListener.mousePressed(MouseEvent)",4,0,n/a,8,1,1,5,3
"freemind.controller.MapMouseMotionListener.mouseReleased(MouseEvent)",5,0,n/a,9,1,1,5,2
"freemind.controller.MapMouseMotionListener.register(MapMouseMotionReceiver)",0,2,n/a,3,0,1,1,1
"freemind.controller.MapMouseWheelListener.MapMouseWheelListener(Controller)",0,0,n/a,2,0,1,0,1
"freemind.controller.MapMouseWheelListener.deregister()",0,1,n/a,3,0,0,1,1
"freemind.controller.MapMouseWheelListener.mouseWheelMoved(MouseWheelEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.MapMouseWheelListener.register(MouseWheelListener)",0,1,n/a,3,0,1,1,1
"freemind.controller.MenuBar.LastOpenedActionListener.LastOpenedActionListener(String)",0,1,n/a,3,0,1,1,1
"freemind.controller.MenuBar.LastOpenedActionListener.actionPerformed(ActionEvent)",5,0,n/a,10,1,1,5,2
"freemind.controller.MenuBar.MapsMenuActionListener.actionPerformed(ActionEvent)",5,0,n/a,4,2,1,2,1
"freemind.controller.MenuBar.MenuBar(Controller)",4,2,n/a,7,1,1,3,2
"freemind.controller.MenuBar.ModesMenuActionListener.actionPerformed(ActionEvent)",4,0,n/a,3,2,1,2,1
"freemind.controller.MenuBar.addAdditionalPopupActions()",12,1,n/a,18,1,0,9,2
"freemind.controller.MenuBar.getMapsPopupMenu()",0,0,n/a,3,0,0,1,1
"freemind.controller.MenuBar.getMenuHolder()",0,0,n/a,5,0,0,1,1
"freemind.controller.MenuBar.processKeyBinding(KeyStroke,KeyEvent,int,boolean)",1,0,n/a,10,0,4,1,1
"freemind.controller.MenuBar.updateEditMenu()",25,1,n/a,35,0,0,10,1
"freemind.controller.MenuBar.updateFileMenu()",22,1,n/a,19,0,0,10,1
"freemind.controller.MenuBar.updateLastOpenedList()",16,1,n/a,19,2,0,12,3
"freemind.controller.MenuBar.updateMapsMenu(StructuredMenuHolder,String)",13,2,n/a,23,3,2,17,5
"freemind.controller.MenuBar.updateMenus(ModeController)",83,0,n/a,96,0,1,64,1
"freemind.controller.MenuBar.updateModeMenu()",20,1,n/a,24,2,0,15,4
"freemind.controller.MenuBar.updateViewMenu()",16,1,n/a,15,0,0,10,1
"freemind.controller.MenuItemEnabledListener.isEnabled(JMenuItem,Action)",n/a,1,6,n/a,n/a,2,n/a,n/a
"freemind.controller.MenuItemSelectedListener.isSelected(JMenuItem,Action)",n/a,1,9,n/a,n/a,2,n/a,n/a
"freemind.controller.MindMapNodesSelection.MindMapNodesSelection(String,String,String,String,String,String,List,List<String>)",0,4,n/a,13,0,8,8,1
"freemind.controller.MindMapNodesSelection.getTransferData(DataFlavor)",11,0,n/a,31,1,1,18,10
"freemind.controller.MindMapNodesSelection.getTransferDataFlavors()",0,0,n/a,5,0,0,1,1
"freemind.controller.MindMapNodesSelection.isDataFlavorSupported(DataFlavor)",9,0,n/a,28,1,1,17,18
"freemind.controller.MindMapNodesSelection.lostOwnership(Clipboard,Transferable)",0,0,n/a,2,0,2,0,1
"freemind.controller.MindMapNodesSelection.setDropAction(String)",0,0,n/a,3,0,1,1,1
"freemind.controller.NodeDragListener.NodeDragListener(Controller)",0,0,n/a,3,0,1,1,1
"freemind.controller.NodeDragListener.dragGestureRecognized(DragGestureEvent)",22,0,n/a,4,2,1,20,8
"freemind.controller.NodeDragListener.getCursorByAction(int)",0,2,n/a,10,1,1,7,4
"freemind.controller.NodeDropListener.NodeDropListener(Controller)",0,0,n/a,2,0,1,0,1
"freemind.controller.NodeDropListener.deregister()",0,1,n/a,3,0,0,1,1
"freemind.controller.NodeDropListener.dragEnter(DropTargetDragEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeDropListener.dragExit(DropTargetEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeDropListener.dragOver(DropTargetDragEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeDropListener.drop(DropTargetDropEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeDropListener.dropActionChanged(DropTargetDragEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeDropListener.register(DropTargetListener)",0,1,n/a,3,0,1,1,1
"freemind.controller.NodeKeyListener.NodeKeyListener(Controller)",0,0,n/a,2,0,1,0,1
"freemind.controller.NodeKeyListener.deregister()",0,2,n/a,3,0,0,1,1
"freemind.controller.NodeKeyListener.keyPressed(KeyEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeKeyListener.keyReleased(KeyEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeKeyListener.keyTyped(KeyEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeKeyListener.register(KeyListener)",0,2,n/a,3,0,1,1,1
"freemind.controller.NodeMotionListener.NodeMotionListener(Controller)",0,0,n/a,2,0,1,0,1
"freemind.controller.NodeMotionListener.deregister()",0,1,n/a,3,0,0,1,1
"freemind.controller.NodeMotionListener.mouseClicked(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMotionListener.mouseDragged(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMotionListener.mouseEntered(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMotionListener.mouseExited(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMotionListener.mouseMoved(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMotionListener.mousePressed(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMotionListener.mouseReleased(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMotionListener.register(NodeMotionAdapter)",0,1,n/a,3,0,1,1,1
"freemind.controller.NodeMouseMotionListener.NodeMouseMotionListener(Controller)",0,0,n/a,2,0,1,0,1
"freemind.controller.NodeMouseMotionListener.NodeMouseMotionObserver.updateSelectionMethod()",n/a,1,1,n/a,n/a,0,n/a,n/a
"freemind.controller.NodeMouseMotionListener.deregister()",0,2,n/a,3,0,0,1,1
"freemind.controller.NodeMouseMotionListener.mouseClicked(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMouseMotionListener.mouseDragged(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMouseMotionListener.mouseEntered(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMouseMotionListener.mouseExited(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMouseMotionListener.mouseMoved(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMouseMotionListener.mousePressed(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMouseMotionListener.mouseReleased(MouseEvent)",1,0,n/a,4,0,1,2,2
"freemind.controller.NodeMouseMotionListener.register(NodeMouseMotionObserver)",0,2,n/a,3,0,1,1,1
"freemind.controller.NodeMouseMotionListener.updateSelectionMethod()",1,0,n/a,4,0,0,2,2
"freemind.controller.StructuredMenuHolder.DefaultMenuAdderCreator.createAdder(JMenu)",1,1,n/a,10,0,1,1,1
"freemind.controller.StructuredMenuHolder.MapTokenPair.MapTokenPair(Map,String,Vector<String>)",0,1,n/a,5,0,3,3,1
"freemind.controller.StructuredMenuHolder.MenuAdder.addCategory(String)",n/a,1,5,n/a,n/a,1,n/a,n/a
"freemind.controller.StructuredMenuHolder.MenuAdder.addMenuItem(StructuredMenuItemHolder)",n/a,2,5,n/a,n/a,1,n/a,n/a
"freemind.controller.StructuredMenuHolder.MenuAdder.addSeparator()",n/a,1,5,n/a,n/a,0,n/a,n/a
"freemind.controller.StructuredMenuHolder.MenuAdderCreator.createAdder(JMenu)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.controller.StructuredMenuHolder.MenuEventSupplier.addMenuListener(MenuListener)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.controller.StructuredMenuHolder.MenuEventSupplier.removeMenuListener(MenuListener)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.controller.StructuredMenuHolder.MenuItemAdder.MenuItemAdder(JMenu)",4,1,n/a,7,0,1,5,1
"freemind.controller.StructuredMenuHolder.MenuItemAdder.addCategory(String)",0,1,n/a,2,0,1,0,1
"freemind.controller.StructuredMenuHolder.MenuItemAdder.addMenuItem(StructuredMenuItemHolder)",10,2,n/a,19,2,1,15,3
"freemind.controller.StructuredMenuHolder.MenuItemAdder.addSeparator()",2,1,n/a,6,1,0,3,2
"freemind.controller.StructuredMenuHolder.PrintMenuAdder.addCategory(String)",1,1,n/a,6,0,1,1,1
"freemind.controller.StructuredMenuHolder.PrintMenuAdder.addMenuItem(StructuredMenuItemHolder)",3,2,n/a,3,0,1,1,1
"freemind.controller.StructuredMenuHolder.PrintMenuAdder.addSeparator()",1,1,n/a,3,0,0,1,1
"freemind.controller.StructuredMenuHolder.PrintMenuAdderCreator.createAdder(JMenu)",1,1,n/a,10,0,1,1,1
"freemind.controller.StructuredMenuHolder.SeparatorHolder.SeparatorHolder()",0,1,n/a,2,0,0,0,1
"freemind.controller.StructuredMenuHolder.StructuredMenuHolder()",11,0,n/a,13,1,0,7,3
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.StructuredMenuListener()",0,2,n/a,2,0,0,0,1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.addItem(StructuredMenuItemHolder)",1,2,n/a,3,0,1,1,1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.menuCanceled(MenuEvent)",0,0,n/a,2,0,1,0,1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.menuDeselected(MenuEvent)",0,0,n/a,2,0,1,0,1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.menuSelected(MenuEvent)",16,0,n/a,35,3,1,19,8
"freemind.controller.StructuredMenuHolder.addAction(Action,String)",10,5,n/a,22,1,2,10,2
"freemind.controller.StructuredMenuHolder.addCategory(String)",2,1,n/a,5,0,1,2,1
"freemind.controller.StructuredMenuHolder.addMenu(JMenu,String)",2,2,n/a,6,0,2,2,1
"freemind.controller.StructuredMenuHolder.addMenu(Object,StringTokenizer)",3,0,n/a,9,0,2,4,1
"freemind.controller.StructuredMenuHolder.addMenuItem(JMenuItem,String)",7,3,n/a,11,0,2,7,1
"freemind.controller.StructuredMenuHolder.addSeparator(String)",6,3,n/a,13,1,1,8,2
"freemind.controller.StructuredMenuHolder.adjustMenuItem(JMenuItem)",8,2,n/a,13,2,1,4,3
"freemind.controller.StructuredMenuHolder.adjustTooltips(StructuredMenuItemHolder)",7,2,n/a,18,2,1,6,3
"freemind.controller.StructuredMenuHolder.getCategoryMap(StringTokenizer,Map)",15,7,n/a,24,3,2,16,5
"freemind.controller.StructuredMenuHolder.lastItemIsASeparator(JMenu)",3,2,n/a,9,2,1,4,3
"freemind.controller.StructuredMenuHolder.lastItemIsASeparator(JPopupMenu)",3,2,n/a,9,2,1,4,3
"freemind.controller.StructuredMenuHolder.print(String)",0,3,n/a,6,1,1,5,2
"freemind.controller.StructuredMenuHolder.setSelected(JMenuItem,boolean)",4,1,n/a,12,2,2,6,3
"freemind.controller.StructuredMenuHolder.toString()",3,0,n/a,11,0,0,4,1
"freemind.controller.StructuredMenuHolder.updateMenus(JMenuBar,String)",11,0,n/a,2,2,2,6,1
"freemind.controller.StructuredMenuHolder.updateMenus(JPopupMenu,String)",16,0,n/a,2,3,2,14,3
"freemind.controller.StructuredMenuHolder.updateMenus(JToolBar,String)",9,0,n/a,2,2,2,5,1
"freemind.controller.StructuredMenuHolder.updateMenus(MenuAdder,Map<String, Vector<String>>,MenuAdderCreator)",13,5,n/a,43,3,3,25,7
"freemind.controller.StructuredMenuItemHolder.StructuredMenuItemHolder()",0,0,n/a,2,0,0,0,1
"freemind.controller.StructuredMenuItemHolder.getAction()",0,0,n/a,3,0,0,1,1
"freemind.controller.StructuredMenuItemHolder.getEnabledListener()",0,0,n/a,3,0,0,1,1
"freemind.controller.StructuredMenuItemHolder.getMenuItem()",0,0,n/a,3,0,0,1,1
"freemind.controller.StructuredMenuItemHolder.getSelectionListener()",0,0,n/a,3,0,0,1,1
"freemind.controller.StructuredMenuItemHolder.setAction(Action)",2,0,n/a,11,1,1,7,3
"freemind.controller.StructuredMenuItemHolder.setEnabledListener(MenuItemEnabledListener)",0,1,n/a,3,0,1,1,1
"freemind.controller.StructuredMenuItemHolder.setMenuItem(JMenuItem)",0,0,n/a,3,0,1,1,1
"freemind.controller.StructuredMenuItemHolder.setSelectedListener(MenuItemSelectedListener)",0,1,n/a,3,0,1,1,1
"freemind.controller.ZoomListener.setZoom(float)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.controller.color.ColorPair.ColorPair(Color,String)",2,0,n/a,5,0,2,3,1
"freemind.controller.color.ColorPair.ColorPair(Color,String,String)",0,1,n/a,5,0,3,3,1
"freemind.controller.color.JColorCombo.ColorIcon.ColorIcon(Color)",7,1,n/a,8,0,1,6,1
"freemind.controller.color.JColorCombo.ComboBoxRenderer.ComboBoxRenderer()",3,1,n/a,5,0,0,3,1
"freemind.controller.color.JColorCombo.ComboBoxRenderer.getListCellRendererComponent(JList<? extends ColorPair>,ColorPair,int,boolean,boolean)",11,0,n/a,21,1,5,10,2
"freemind.controller.color.JColorCombo.JColorCombo()",4,2,n/a,10,1,0,9,2
"freemind.controller.color.JColorCombo.getMaximumSize()",1,0,n/a,4,0,0,1,1
"freemind.controller.color.JColorCombo.main(String[])",7,0,n/a,8,0,1,6,1
"freemind.controller.filter.DefaultFilter.DefaultFilter(Condition,boolean,boolean)",1,1,n/a,13,0,3,8,3
"freemind.controller.filter.DefaultFilter.addFilterResult(MindMapNode,int)",2,6,n/a,3,0,2,1,1
"freemind.controller.filter.DefaultFilter.applyFilter(Controller)",12,0,n/a,23,3,1,11,3
"freemind.controller.filter.DefaultFilter.applyFilter(MindMapNode,Controller,boolean,boolean,boolean)",8,1,n/a,23,1,5,14,7
"freemind.controller.filter.DefaultFilter.areAncestorsShown()",0,0,n/a,8,0,0,1,1
"freemind.controller.filter.DefaultFilter.areDescendantsShown()",0,0,n/a,8,0,0,1,1
"freemind.controller.filter.DefaultFilter.areEclipsedShown()",0,0,n/a,8,0,0,1,1
"freemind.controller.filter.DefaultFilter.areHiddenShown()",0,0,n/a,8,0,0,1,1
"freemind.controller.filter.DefaultFilter.areMatchedShown()",0,0,n/a,8,0,0,1,1
"freemind.controller.filter.DefaultFilter.filterChildren(MindMapNode,Controller,boolean,boolean)",4,2,n/a,15,1,4,6,2
"freemind.controller.filter.DefaultFilter.getCondition()",0,0,n/a,3,0,0,1,1
"freemind.controller.filter.DefaultFilter.getNearestVisibleParent(NodeView)",4,2,n/a,5,0,1,3,2
"freemind.controller.filter.DefaultFilter.isVisible(MindMapNode)",2,0,n/a,13,0,1,4,4
"freemind.controller.filter.DefaultFilter.resetFilter(MindMapNode)",2,2,n/a,3,0,1,1,1
"freemind.controller.filter.DefaultFilter.selectVisibleNode(MapView)",16,1,n/a,20,2,1,14,5
"freemind.controller.filter.Filter.applyFilter(Controller)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.controller.filter.Filter.areAncestorsShown()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.Filter.areDescendantsShown()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.Filter.areEclipsedShown()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.Filter.areHiddenShown()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.Filter.areMatchedShown()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.Filter.getCondition()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.Filter.isVisible(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.controller.filter.FilterComposerDialog.AddConditionAction.AddConditionAction()",4,1,n/a,12,0,0,2,1
"freemind.controller.filter.FilterComposerDialog.AddConditionAction.actionPerformed(ActionEvent)",20,0,n/a,36,2,1,25,8
"freemind.controller.filter.FilterComposerDialog.CloseAction.actionPerformed(ActionEvent)",4,0,n/a,9,0,1,6,5
"freemind.controller.filter.FilterComposerDialog.ConditionListMouseListener.mouseClicked(MouseEvent)",5,0,n/a,5,4,1,4,3
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener.contentsChanged(ListDataEvent)",0,0,n/a,2,0,1,0,1
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener.intervalAdded(ListDataEvent)",2,0,n/a,3,0,1,1,1
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener.intervalRemoved(ListDataEvent)",0,0,n/a,2,0,1,0,1
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener.valueChanged(ListSelectionEvent)",15,0,n/a,28,1,1,16,3
"freemind.controller.filter.FilterComposerDialog.CreateConjunctConditionAction.CreateConjunctConditionAction()",4,1,n/a,12,0,0,2,1
"freemind.controller.filter.FilterComposerDialog.CreateConjunctConditionAction.actionPerformed(ActionEvent)",5,0,n/a,9,0,1,7,2
"freemind.controller.filter.FilterComposerDialog.CreateDisjunctConditionAction.CreateDisjunctConditionAction()",4,1,n/a,12,0,0,2,1
"freemind.controller.filter.FilterComposerDialog.CreateDisjunctConditionAction.actionPerformed(ActionEvent)",5,0,n/a,9,0,1,7,2
"freemind.controller.filter.FilterComposerDialog.CreateNotSatisfiedConditionAction.CreateNotSatisfiedConditionAction()",4,1,n/a,12,0,0,2,1
"freemind.controller.filter.FilterComposerDialog.CreateNotSatisfiedConditionAction.actionPerformed(ActionEvent)",7,0,n/a,15,2,1,9,3
"freemind.controller.filter.FilterComposerDialog.DeleteConditionAction.DeleteConditionAction()",4,1,n/a,12,0,0,2,1
"freemind.controller.filter.FilterComposerDialog.DeleteConditionAction.actionPerformed(ActionEvent)",8,0,n/a,16,1,1,9,4
"freemind.controller.filter.FilterComposerDialog.FilterComposerDialog(Controller,FilterToolbar)",180,0,n/a,129,1,2,117,2
"freemind.controller.filter.FilterComposerDialog.LoadAction.actionPerformed(ActionEvent)",6,0,n/a,13,2,1,7,3
"freemind.controller.filter.FilterComposerDialog.LoadAction.handleLoadingException(Exception)",0,1,n/a,3,0,1,0,1
"freemind.controller.filter.FilterComposerDialog.MindMapFilterFileFilter.accept(File)",4,0,n/a,14,2,1,8,4
"freemind.controller.filter.FilterComposerDialog.MindMapFilterFileFilter.getDescription()",2,0,n/a,4,0,0,1,1
"freemind.controller.filter.FilterComposerDialog.SaveAction.actionPerformed(ActionEvent)",10,0,n/a,21,2,1,13,4
"freemind.controller.filter.FilterComposerDialog.SaveAction.handleSavingException(Exception)",0,1,n/a,3,0,1,0,1
"freemind.controller.filter.FilterComposerDialog.SelectedAttributeChangeListener.itemStateChanged(ItemEvent)",39,0,n/a,60,4,1,39,10
"freemind.controller.filter.FilterComposerDialog.SimpleConditionChangeListener.itemStateChanged(ItemEvent)",3,0,n/a,7,1,1,4,2
"freemind.controller.filter.FilterComposerDialog.addAttributeKeysRecursively(MindMapNode,SortedListModel)",7,2,n/a,9,1,2,6,3
"freemind.controller.filter.FilterComposerDialog.addAttributeValuesRecursively(String,MindMapNode,SortedListModel)",10,2,n/a,11,2,3,7,4
"freemind.controller.filter.FilterComposerDialog.applyChanges()",4,2,n/a,7,0,0,4,1
"freemind.controller.filter.FilterComposerDialog.getAttributeValue()",5,1,n/a,8,1,0,5,3
"freemind.controller.filter.FilterComposerDialog.getAttributesFromMap(MindMap)",5,2,n/a,10,1,1,5,2
"freemind.controller.filter.FilterComposerDialog.getFileChooser()",2,2,n/a,4,0,0,2,1
"freemind.controller.filter.FilterComposerDialog.initInternalConditionModel()",11,2,n/a,23,2,0,17,5
"freemind.controller.filter.FilterComposerDialog.mapChanged(MindMap)",15,0,n/a,23,3,1,14,6
"freemind.controller.filter.FilterComposerDialog.selectCondition()",3,1,n/a,11,2,0,7,3
"freemind.controller.filter.FilterComposerDialog.setSelectedItem(Object)",1,0,n/a,5,0,1,1,1
"freemind.controller.filter.FilterComposerDialog.show()",2,0,n/a,4,0,0,2,1
"freemind.controller.filter.FilterController.FilterController(Controller)",2,1,n/a,4,0,1,2,1
"freemind.controller.filter.FilterController.afterMapClose(MapModule,Mode)",0,1,n/a,2,0,2,0,1
"freemind.controller.filter.FilterController.afterMapModuleChange(MapModule,Mode,MapModule,Mode)",6,1,n/a,10,1,4,6,3
"freemind.controller.filter.FilterController.beforeMapModuleChange(MapModule,Mode,MapModule,Mode)",0,1,n/a,3,0,4,0,1
"freemind.controller.filter.FilterController.createTransparentFilter()",2,1,n/a,6,0,0,3,2
"freemind.controller.filter.FilterController.getConditionFactory()",1,4,n/a,5,0,0,3,2
"freemind.controller.filter.FilterController.getConditionRenderer()",1,0,n/a,5,0,0,3,2
"freemind.controller.filter.FilterController.getFilterConditionModel()",0,0,n/a,3,0,0,1,1
"freemind.controller.filter.FilterController.getFilterToolbar()",15,5,n/a,19,1,0,9,2
"freemind.controller.filter.FilterController.getMap()",0,1,n/a,5,0,0,1,1
"freemind.controller.filter.FilterController.isMapModuleChangeAllowed(MapModule,Mode,MapModule,Mode)",0,1,n/a,4,0,4,1,1
"freemind.controller.filter.FilterController.isVisible()",2,2,n/a,3,0,0,1,1
"freemind.controller.filter.FilterController.loadConditions(DefaultComboBoxModel<Condition>,String)",11,0,n/a,12,1,2,10,2
"freemind.controller.filter.FilterController.numberOfOpenMapInformation(int,int)",0,1,n/a,2,0,2,0,1
"freemind.controller.filter.FilterController.refreshMap()",2,1,n/a,3,0,0,1,1
"freemind.controller.filter.FilterController.saveConditions()",1,1,n/a,5,1,0,2,2
"freemind.controller.filter.FilterController.saveConditions(DefaultComboBoxModel<Condition>,String)",8,0,n/a,12,1,2,10,2
"freemind.controller.filter.FilterController.setFilterConditionModel(DefaultComboBoxModel<Condition>)",1,0,n/a,5,0,1,2,1
"freemind.controller.filter.FilterController.showFilterToolbar(boolean)",9,2,n/a,14,1,1,8,3
"freemind.controller.filter.FilterInfo.FilterInfo()",1,1,n/a,6,0,0,1,1
"freemind.controller.filter.FilterInfo.add(int)",0,4,n/a,6,1,1,3,2
"freemind.controller.filter.FilterInfo.get()",0,1,n/a,3,0,0,1,1
"freemind.controller.filter.FilterInfo.isAncestor()",0,1,n/a,5,0,0,1,1
"freemind.controller.filter.FilterInfo.isMatched()",0,0,n/a,5,0,0,1,1
"freemind.controller.filter.FilterInfo.reset()",0,1,n/a,3,0,0,1,1
"freemind.controller.filter.FilterInfo.setAncestor()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.FilterInfo.setDescendant()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.FilterInfo.setMatched()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.FilterToolbar.EditFilterAction.EditFilterAction()",8,1,n/a,6,0,0,2,1
"freemind.controller.filter.FilterToolbar.EditFilterAction.actionPerformed(ActionEvent)",6,0,n/a,7,1,1,4,2
"freemind.controller.filter.FilterToolbar.EditFilterAction.getFilterDialog()",2,2,n/a,14,1,0,4,2
"freemind.controller.filter.FilterToolbar.FilterChangeListener.FilterChangeListener()",0,1,n/a,9,0,0,0,1
"freemind.controller.filter.FilterToolbar.FilterChangeListener.actionPerformed(ActionEvent)",5,0,n/a,6,0,1,4,1
"freemind.controller.filter.FilterToolbar.FilterChangeListener.filterChanged()",7,2,n/a,10,1,0,7,2
"freemind.controller.filter.FilterToolbar.FilterChangeListener.itemStateChanged(ItemEvent)",2,0,n/a,11,0,1,2,2
"freemind.controller.filter.FilterToolbar.FilterChangeListener.propertyChange(PropertyChangeEvent)",4,0,n/a,6,1,1,3,2
"freemind.controller.filter.FilterToolbar.FilterToolbar(Controller)",36,0,n/a,3,2,1,24,1
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction.UnfoldAncestorsAction()",5,1,n/a,7,0,0,1,1
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction.actionPerformed(ActionEvent)",4,0,n/a,5,1,1,2,2
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction.setFolded(MindMapNode,boolean)",4,1,n/a,5,1,2,2,3
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction.unfoldAncestors(MindMapNode)",8,2,n/a,10,2,1,6,4
"freemind.controller.filter.FilterToolbar.addStandardConditions()",7,2,n/a,10,1,0,6,2
"freemind.controller.filter.FilterToolbar.getFilterConditionModel()",1,1,n/a,3,0,0,1,1
"freemind.controller.filter.FilterToolbar.getFilterDialog()",0,0,n/a,5,0,0,1,1
"freemind.controller.filter.FilterToolbar.getSelectedCondition()",1,2,n/a,3,0,0,1,1
"freemind.controller.filter.FilterToolbar.initConditions()",11,0,n/a,14,1,0,9,2
"freemind.controller.filter.FilterToolbar.mapChanged(MindMap)",9,0,n/a,20,2,1,12,4
"freemind.controller.filter.FilterToolbar.refreshMap()",1,2,n/a,3,0,0,1,1
"freemind.controller.filter.FilterToolbar.resetFilter()",0,2,n/a,6,0,0,1,1
"freemind.controller.filter.FilterToolbar.saveConditions()",2,0,n/a,6,1,0,2,2
"freemind.controller.filter.FilterToolbar.setFilterConditionModel(ComboBoxModel<Condition>)",1,0,n/a,3,0,1,1,1
"freemind.controller.filter.FilterToolbar.setMapFilter()",8,2,n/a,10,1,0,5,3
"freemind.controller.filter.condition.AttributeCompareCondition.AttributeCompareCondition(String,String,boolean,int,boolean)",1,1,n/a,9,0,5,4,1
"freemind.controller.filter.condition.AttributeCompareCondition.checkNode(Controller,MindMapNode)",7,0,n/a,20,2,2,8,5
"freemind.controller.filter.condition.AttributeCompareCondition.createDesctiption()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.condition.AttributeCompareCondition.load(XMLElement)",8,0,n/a,9,0,1,1,1
"freemind.controller.filter.condition.AttributeCompareCondition.save(XMLElement)",8,0,n/a,9,0,1,7,1
"freemind.controller.filter.condition.AttributeExistsCondition.AttributeExistsCondition(String)",1,1,n/a,6,0,1,2,1
"freemind.controller.filter.condition.AttributeExistsCondition.checkNode(Controller,MindMapNode)",4,0,n/a,15,1,2,7,3
"freemind.controller.filter.condition.AttributeExistsCondition.createDesctiption()",3,0,n/a,6,0,0,2,1
"freemind.controller.filter.condition.AttributeExistsCondition.load(XMLElement)",2,0,n/a,4,0,1,1,1
"freemind.controller.filter.condition.AttributeExistsCondition.save(XMLElement)",5,0,n/a,7,0,1,5,1
"freemind.controller.filter.condition.AttributeNotExistsCondition.AttributeNotExistsCondition(String)",1,1,n/a,6,0,1,2,1
"freemind.controller.filter.condition.AttributeNotExistsCondition.checkNode(Controller,MindMapNode)",4,0,n/a,15,1,2,7,3
"freemind.controller.filter.condition.AttributeNotExistsCondition.createDesctiption()",3,0,n/a,6,0,0,2,1
"freemind.controller.filter.condition.AttributeNotExistsCondition.load(XMLElement)",2,0,n/a,4,0,1,1,1
"freemind.controller.filter.condition.AttributeNotExistsCondition.save(XMLElement)",5,0,n/a,7,0,1,5,1
"freemind.controller.filter.condition.CompareConditionAdapter.CompareConditionAdapter(String,boolean)",1,0,n/a,5,0,2,3,1
"freemind.controller.filter.condition.CompareConditionAdapter.compareTo(String)",7,0,n/a,17,1,1,10,6
"freemind.controller.filter.condition.CompareConditionAdapter.createDescription(String,int,boolean)",3,0,n/a,22,1,3,14,8
"freemind.controller.filter.condition.CompareConditionAdapter.saveAttributes(XMLElement)",4,0,n/a,5,0,1,3,1
"freemind.controller.filter.condition.Condition.checkNode(Controller,MindMapNode)",n/a,2,0,n/a,n/a,2,n/a,n/a
"freemind.controller.filter.condition.Condition.getListCellRendererComponent()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.condition.Condition.save(XMLElement)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.controller.filter.condition.ConditionFactory.ConditionFactory()",0,1,n/a,5,0,0,0,1
"freemind.controller.filter.condition.ConditionFactory.createAttributeCondition(String,NamedObject,String,boolean)",28,0,n/a,47,1,4,30,16
"freemind.controller.filter.condition.ConditionFactory.createCellRendererComponent(String)",3,0,n/a,6,0,1,4,1
"freemind.controller.filter.condition.ConditionFactory.createCondition(NamedObject,NamedObject,String,boolean)",8,0,n/a,13,1,4,7,6
"freemind.controller.filter.condition.ConditionFactory.createDescription(String,String,String,boolean)",2,0,n/a,11,0,4,2,4
"freemind.controller.filter.condition.ConditionFactory.createNodeCondition(NamedObject,String,boolean)",30,1,n/a,41,2,3,34,18
"freemind.controller.filter.condition.ConditionFactory.getAttributeConditionNames()",4,0,n/a,5,0,0,1,1
"freemind.controller.filter.condition.ConditionFactory.getIconConditionNames()",0,0,n/a,3,0,0,1,1
"freemind.controller.filter.condition.ConditionFactory.getNodeConditionNames()",0,0,n/a,5,0,0,1,1
"freemind.controller.filter.condition.ConditionFactory.loadCondition(XMLElement)",33,4,n/a,31,1,1,23,12
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.ConditionNotSatisfiedDecorator(Condition)",1,2,n/a,7,0,1,2,1
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.checkNode(Controller,MindMapNode)",1,0,n/a,10,0,2,1,1
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.getListCellRendererComponent()",9,0,n/a,19,0,0,8,1
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.load(XMLElement)",5,0,n/a,6,0,1,3,1
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.save(XMLElement)",4,0,n/a,6,0,1,4,1
"freemind.controller.filter.condition.ConditionRenderer.getListCellRendererComponent(JList,Object,int,boolean,boolean)",12,0,n/a,30,1,5,15,5
"freemind.controller.filter.condition.ConjunctConditions.ConjunctConditions(Object[])",0,2,n/a,6,0,1,1,1
"freemind.controller.filter.condition.ConjunctConditions.checkNode(Controller,MindMapNode)",1,0,n/a,16,1,2,8,3
"freemind.controller.filter.condition.ConjunctConditions.getListCellRendererComponent()",16,0,n/a,28,1,0,19,2
"freemind.controller.filter.condition.ConjunctConditions.load(XMLElement)",6,0,n/a,10,1,1,8,2
"freemind.controller.filter.condition.ConjunctConditions.save(XMLElement)",4,0,n/a,9,1,1,8,2
"freemind.controller.filter.condition.DisjunctConditions.DisjunctConditions(Object[])",0,2,n/a,6,0,1,1,1
"freemind.controller.filter.condition.DisjunctConditions.checkNode(Controller,MindMapNode)",1,0,n/a,16,1,2,8,3
"freemind.controller.filter.condition.DisjunctConditions.getListCellRendererComponent()",16,0,n/a,28,1,0,19,2
"freemind.controller.filter.condition.DisjunctConditions.load(XMLElement)",6,0,n/a,10,1,1,8,2
"freemind.controller.filter.condition.DisjunctConditions.save(XMLElement)",4,0,n/a,9,1,1,8,2
"freemind.controller.filter.condition.IconContainedCondition.IconContainedCondition(String)",0,1,n/a,3,0,1,1,1
"freemind.controller.filter.condition.IconContainedCondition.checkNode(Controller,MindMapNode)",2,0,n/a,4,0,2,1,2
"freemind.controller.filter.condition.IconContainedCondition.getIconName()",0,1,n/a,3,0,0,1,1
"freemind.controller.filter.condition.IconContainedCondition.getListCellRendererComponent()",11,0,n/a,17,0,0,5,1
"freemind.controller.filter.condition.IconContainedCondition.isStateIconContained(MindMapNode,String)",3,1,n/a,9,1,2,5,3
"freemind.controller.filter.condition.IconContainedCondition.load(XMLElement)",2,0,n/a,3,0,1,1,1
"freemind.controller.filter.condition.IconContainedCondition.save(XMLElement)",4,0,n/a,6,0,1,4,1
"freemind.controller.filter.condition.IconNotContainedCondition.IconNotContainedCondition(String)",0,1,n/a,3,0,1,1,1
"freemind.controller.filter.condition.IconNotContainedCondition.checkNode(Controller,MindMapNode)",2,0,n/a,3,0,2,1,2
"freemind.controller.filter.condition.IconNotContainedCondition.getIconName()",0,1,n/a,3,0,0,1,1
"freemind.controller.filter.condition.IconNotContainedCondition.getListCellRendererComponent()",11,0,n/a,13,0,0,5,1
"freemind.controller.filter.condition.IconNotContainedCondition.iconFirstIndex(MindMapNode,String)",7,1,n/a,8,1,2,7,3
"freemind.controller.filter.condition.IconNotContainedCondition.iconLastIndex(MindMapNode,String)",8,0,n/a,9,1,2,7,3
"freemind.controller.filter.condition.IconNotContainedCondition.isStateIconContained(MindMapNode,String)",3,1,n/a,7,1,2,5,3
"freemind.controller.filter.condition.IconNotContainedCondition.load(XMLElement)",2,0,n/a,4,0,1,1,1
"freemind.controller.filter.condition.IconNotContainedCondition.save(XMLElement)",4,0,n/a,6,0,1,4,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.IgnoreCaseNodeContainsCondition(String)",2,1,n/a,4,0,1,2,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.checkNode(Controller,MindMapNode)",3,0,n/a,3,0,2,1,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.createDesctiption()",3,0,n/a,6,0,0,3,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.load(XMLElement)",2,0,n/a,4,0,1,1,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.save(XMLElement)",5,0,n/a,7,0,1,5,1
"freemind.controller.filter.condition.JCondition.JCondition()",4,0,n/a,7,0,0,3,1
"freemind.controller.filter.condition.NoFilteringCondition.NoFilteringCondition()",1,1,n/a,4,0,0,1,1
"freemind.controller.filter.condition.NoFilteringCondition.checkNode(Controller,MindMapNode)",0,0,n/a,3,0,2,1,1
"freemind.controller.filter.condition.NoFilteringCondition.createCondition()",1,3,n/a,6,1,0,3,2
"freemind.controller.filter.condition.NoFilteringCondition.getListCellRendererComponent()",1,0,n/a,6,1,0,3,2
"freemind.controller.filter.condition.NoFilteringCondition.save(XMLElement)",0,0,n/a,2,0,1,0,1
"freemind.controller.filter.condition.NoFilteringCondition.toString()",2,0,n/a,7,1,0,3,2
"freemind.controller.filter.condition.NodeCompareCondition.NodeCompareCondition(String,boolean,int,boolean)",1,1,n/a,6,0,4,3,1
"freemind.controller.filter.condition.NodeCompareCondition.checkNode(Controller,MindMapNode)",2,0,n/a,7,1,2,3,2
"freemind.controller.filter.condition.NodeCompareCondition.createDesctiption()",2,0,n/a,5,0,0,2,1
"freemind.controller.filter.condition.NodeCompareCondition.load(XMLElement)",7,0,n/a,7,0,1,1,1
"freemind.controller.filter.condition.NodeCompareCondition.save(XMLElement)",7,0,n/a,8,0,1,6,1
"freemind.controller.filter.condition.NodeCondition.NodeCondition()",0,0,n/a,2,0,0,0,1
"freemind.controller.filter.condition.NodeCondition.createDesctiption()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.condition.NodeCondition.getListCellRendererComponent()",2,0,n/a,6,1,0,3,2
"freemind.controller.filter.condition.NodeCondition.saveAttributes(XMLElement)",0,0,n/a,2,0,1,0,1
"freemind.controller.filter.condition.NodeCondition.toString()",1,1,n/a,6,1,0,3,2
"freemind.controller.filter.condition.NodeContainsCondition.NodeContainsCondition(String)",1,1,n/a,4,0,1,2,1
"freemind.controller.filter.condition.NodeContainsCondition.checkNode(Controller,MindMapNode)",2,0,n/a,3,0,2,1,1
"freemind.controller.filter.condition.NodeContainsCondition.createDesctiption()",3,0,n/a,6,0,0,3,1
"freemind.controller.filter.condition.NodeContainsCondition.load(XMLElement)",2,0,n/a,3,0,1,1,1
"freemind.controller.filter.condition.NodeContainsCondition.save(XMLElement)",5,0,n/a,7,0,1,5,1
"freemind.controller.filter.condition.SelectedViewCondition.CreateCondition()",1,1,n/a,6,1,0,3,2
"freemind.controller.filter.condition.SelectedViewCondition.SelectedViewCondition()",1,1,n/a,4,0,0,1,1
"freemind.controller.filter.condition.SelectedViewCondition.checkNode(Controller,MindMapNode)",3,0,n/a,4,0,2,2,2
"freemind.controller.filter.condition.SelectedViewCondition.getListCellRendererComponent()",1,0,n/a,7,1,0,3,2
"freemind.controller.filter.condition.SelectedViewCondition.save(XMLElement)",0,0,n/a,2,0,1,0,1
"freemind.controller.filter.condition.SelectedViewCondition.toString()",2,0,n/a,7,1,0,3,2
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtendedComboBoxModel()",1,2,n/a,3,0,0,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtendedComboBoxModel(Object[])",1,0,n/a,3,0,1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtendedComboBoxModel(Vector)",1,0,n/a,3,0,1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtensionDataListener.contentsChanged(ListDataEvent)",5,0,n/a,12,0,1,2,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtensionDataListener.intervalAdded(ListDataEvent)",5,0,n/a,12,0,1,2,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtensionDataListener.intervalRemoved(ListDataEvent)",5,0,n/a,12,0,1,2,1
"freemind.controller.filter.util.ExtendedComboBoxModel.addSortedElement(Object)",2,0,n/a,5,1,1,2,3
"freemind.controller.filter.util.ExtendedComboBoxModel.getElementAt(int)",3,0,n/a,6,0,1,4,3
"freemind.controller.filter.util.ExtendedComboBoxModel.getExtensionSize()",1,3,n/a,3,0,0,1,2
"freemind.controller.filter.util.ExtendedComboBoxModel.getIndexOf(Object)",3,0,n/a,8,1,1,5,4
"freemind.controller.filter.util.ExtendedComboBoxModel.getModel()",0,3,n/a,3,0,0,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.getOwnSize()",1,9,n/a,5,0,0,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.getSize()",2,3,n/a,3,0,0,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.insertElementAt(Object,int)",3,0,n/a,3,0,2,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.removeAllElements()",2,0,n/a,6,1,0,3,2
"freemind.controller.filter.util.ExtendedComboBoxModel.removeElement(Object)",1,0,n/a,3,0,1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.removeElementAt(int)",2,0,n/a,4,0,1,2,2
"freemind.controller.filter.util.ExtendedComboBoxModel.setExtensionList(SortedListModel)",7,8,n/a,25,3,1,12,5
"freemind.controller.filter.util.SortedComboBoxModel.getSelectedItem()",0,0,n/a,8,0,0,1,1
"freemind.controller.filter.util.SortedComboBoxModel.setSelectedItem(Object)",1,0,n/a,9,0,1,2,1
"freemind.controller.filter.util.SortedListModel.add(Object)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.controller.filter.util.SortedListModel.clear()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.controller.filter.util.SortedListModel.contains(Object)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.controller.filter.util.SortedListModel.getIndexOf(Object)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.controller.filter.util.SortedListModel.remove(Object)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.controller.filter.util.SortedListModel.replace(Object,Object)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.controller.filter.util.SortedMapListModel.SortedMapListModel()",1,1,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapListModel.add(Object)",3,0,n/a,5,1,1,2,2
"freemind.controller.filter.util.SortedMapListModel.addAll(List)",3,0,n/a,4,0,1,2,1
"freemind.controller.filter.util.SortedMapListModel.addAll(Object[])",4,0,n/a,5,0,1,3,1
"freemind.controller.filter.util.SortedMapListModel.clear()",3,0,n/a,7,1,0,4,2
"freemind.controller.filter.util.SortedMapListModel.contains(Object)",1,0,n/a,3,0,1,1,1
"freemind.controller.filter.util.SortedMapListModel.firstElement()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapListModel.getElementAt(int)",1,0,n/a,3,0,1,1,1
"freemind.controller.filter.util.SortedMapListModel.getIndexOf(Object)",4,0,n/a,12,1,1,7,3
"freemind.controller.filter.util.SortedMapListModel.getSize()",1,6,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapListModel.iterator()",1,1,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapListModel.lastElement()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapListModel.remove(Object)",3,0,n/a,11,1,1,2,2
"freemind.controller.filter.util.SortedMapListModel.replace(Object,Object)",5,0,n/a,16,1,2,6,4
"freemind.controller.filter.util.SortedMapVector.MapElement.MapElement(Comparable,Object)",1,1,n/a,5,0,2,3,1
"freemind.controller.filter.util.SortedMapVector.MapElement.getKey()",0,2,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapVector.MapElement.getValue()",0,2,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapVector.SortedMapVector()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapVector.add(Comparable,Object)",3,0,n/a,8,1,2,5,2
"freemind.controller.filter.util.SortedMapVector.capacity()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapVector.clear()",1,0,n/a,3,0,0,1,1
"freemind.controller.filter.util.SortedMapVector.containsKey(Comparable)",1,0,n/a,4,0,1,2,1
"freemind.controller.filter.util.SortedMapVector.findElement(Comparable)",2,5,n/a,3,0,1,1,1
"freemind.controller.filter.util.SortedMapVector.findElement(Comparable,int,int)",11,3,n/a,34,2,3,28,12
"freemind.controller.filter.util.SortedMapVector.getKey(int)",2,0,n/a,3,0,1,1,1
"freemind.controller.filter.util.SortedMapVector.getValue(Comparable)",4,0,n/a,6,0,1,4,2
"freemind.controller.filter.util.SortedMapVector.getValue(int)",2,0,n/a,3,0,1,1,1
"freemind.controller.filter.util.SortedMapVector.indexOf(Comparable)",1,0,n/a,6,0,1,4,2
"freemind.controller.filter.util.SortedMapVector.remove(Comparable)",2,0,n/a,8,1,1,5,2
"freemind.controller.filter.util.SortedMapVector.remove(int)",1,0,n/a,3,0,1,1,1
"freemind.controller.filter.util.SortedMapVector.size()",1,1,n/a,3,0,0,1,1
"freemind.controller.printpreview.BrowseAction.BrowseAction(Preview,JLabel,int)",3,0,n/a,3,2,3,6,1
"freemind.controller.printpreview.BrowseAction.actionPerformed(ActionEvent)",4,0,n/a,6,0,1,4,1
"freemind.controller.printpreview.BrowseAction.getPageIndexText()",2,1,n/a,3,0,0,1,1
"freemind.controller.printpreview.BrowseAction.paintPageIndex()",5,2,n/a,5,0,0,2,1
"freemind.controller.printpreview.Preview.Preview(MapView,double,PageFormat)",5,0,n/a,13,1,3,9,3
"freemind.controller.printpreview.Preview.changeZoom(double)",2,0,n/a,4,0,1,2,1
"freemind.controller.printpreview.Preview.getMinimumSize()",1,0,n/a,3,0,0,1,1
"freemind.controller.printpreview.Preview.getPageFormat()",0,4,n/a,3,0,0,1,1
"freemind.controller.printpreview.Preview.getPageHeight(PageFormat)",1,3,n/a,3,0,1,1,1
"freemind.controller.printpreview.Preview.getPageIndex()",0,0,n/a,3,0,0,1,1
"freemind.controller.printpreview.Preview.getPageWidth(PageFormat)",1,3,n/a,3,0,1,1,1
"freemind.controller.printpreview.Preview.moveIndex(int)",0,0,n/a,7,1,1,4,2
"freemind.controller.printpreview.Preview.paint(Graphics)",9,0,n/a,16,2,1,10,4
"freemind.controller.printpreview.Preview.paintPaper(Graphics,PageFormat)",8,1,n/a,6,0,2,4,1
"freemind.controller.printpreview.Preview.resize()",8,2,n/a,7,0,0,4,1
"freemind.controller.printpreview.PreviewDialog.PreviewDialog(String,MapView,PageFormat)",39,1,n/a,32,0,3,25,1
"freemind.controller.printpreview.PreviewDialog.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.controller.printpreview.PreviewDialog.getButton(String,AbstractAction)",1,4,n/a,3,0,2,1,1
"freemind.controller.printpreview.PreviewDialog.getButton(String,String,AbstractAction)",11,1,n/a,18,1,3,13,5
"freemind.controller.printpreview.ZoomAction.ZoomAction(Preview,double)",1,0,n/a,5,0,2,3,1
"freemind.controller.printpreview.ZoomAction.actionPerformed(ActionEvent)",2,0,n/a,4,0,1,2,1
"freemind.extensions.ExportHook.ImageFilter.ImageFilter(String,String)",0,1,n/a,4,0,2,2,1
"freemind.extensions.ExportHook.ImageFilter.accept(File)",4,0,n/a,7,1,1,4,2
"freemind.extensions.ExportHook.ImageFilter.getDescription()",0,0,n/a,3,0,0,1,2
"freemind.extensions.ExportHook.chooseFile(String,String,String)",2,0,n/a,11,0,3,2,1
"freemind.extensions.ExportHook.chooseImageFile(String,String,String,ModeController)",23,1,n/a,38,2,4,21,7
"freemind.extensions.ExportHook.copyFromFile(String,String,String)",8,0,n/a,22,1,3,8,2
"freemind.extensions.ExportHook.copyFromResource(String,String,String)",9,0,n/a,26,2,3,11,3
"freemind.extensions.ExportHook.createBufferedImage()",12,0,n/a,37,0,0,12,2
"freemind.extensions.ExportHook.getTranslatableResourceString(String)",5,0,n/a,7,1,1,4,3
"freemind.extensions.HookAdapter.HookAdapter()",4,0,n/a,8,0,0,3,2
"freemind.extensions.HookAdapter.getController()",0,2,n/a,5,0,0,1,1
"freemind.extensions.HookAdapter.getName()",0,0,n/a,8,0,0,1,1
"freemind.extensions.HookAdapter.getPluginBaseClass()",1,0,n/a,8,0,0,1,1
"freemind.extensions.HookAdapter.getProperties()",0,0,n/a,5,0,0,1,1
"freemind.extensions.HookAdapter.getResource(String)",3,0,n/a,3,0,1,1,1
"freemind.extensions.HookAdapter.getResourceString(String)",4,0,n/a,15,1,1,6,3
"freemind.extensions.HookAdapter.obtainFocusForSelected()",3,0,n/a,7,0,0,1,1
"freemind.extensions.HookAdapter.setController(MapFeedback)",0,0,n/a,8,1,1,3,2
"freemind.extensions.HookAdapter.setName(String)",0,0,n/a,3,0,1,1,1
"freemind.extensions.HookAdapter.setPluginBaseClass(PluginBaseClassSearcher)",0,0,n/a,3,0,1,1,1
"freemind.extensions.HookAdapter.setProperties(Properties)",0,0,n/a,5,0,1,1,1
"freemind.extensions.HookAdapter.shutdownMapHook()",0,0,n/a,8,0,0,1,1
"freemind.extensions.HookAdapter.startupMapHook()",0,0,n/a,8,0,0,0,1
"freemind.extensions.HookDescriptorBase.HookDescriptorBase(Plugin,String)",5,0,n/a,15,1,2,5,2
"freemind.extensions.HookDescriptorBase.createPluginClasspathString(List<PluginClasspath>)",1,1,n/a,11,1,1,4,2
"freemind.extensions.HookDescriptorBase.getClassLoader(List<PluginClasspath>)",21,1,n/a,37,3,1,18,5
"freemind.extensions.HookDescriptorBase.getFromPropertiesIfNecessary(String)",4,0,n/a,9,1,1,5,3
"freemind.extensions.HookDescriptorBase.getFromResourceIfNecessary(String)",4,0,n/a,11,1,1,5,3
"freemind.extensions.HookDescriptorBase.getPluginBase()",0,0,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorBase.getPluginClassLoader()",2,0,n/a,6,0,0,3,1
"freemind.extensions.HookDescriptorBase.getPluginClasspath()",3,1,n/a,10,2,0,6,3
"freemind.extensions.HookDescriptorBase.getPluginDirectory()",4,1,n/a,7,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.HookDescriptorPluginAction(String,Plugin,PluginAction)",15,1,n/a,25,2,3,17,6
"freemind.extensions.HookDescriptorPluginAction.getBaseClass()",1,1,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.getClassName()",1,3,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.getDocumentation()",2,1,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.getIconPath()",1,1,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.getInstanciationMethod()",6,1,n/a,13,3,0,6,4
"freemind.extensions.HookDescriptorPluginAction.getKeyStroke()",2,1,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.getModes()",0,1,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.getName()",2,1,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.getProperties()",0,1,n/a,5,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.isSelectable()",1,1,n/a,7,0,0,1,1
"freemind.extensions.HookDescriptorPluginAction.toString()",0,0,n/a,4,0,0,1,1
"freemind.extensions.HookDescriptorRegistration.HookDescriptorRegistration(String,Plugin,PluginRegistration)",1,1,n/a,5,0,3,2,1
"freemind.extensions.HookDescriptorRegistration.getClassName()",1,1,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorRegistration.getIsPluginBase()",1,1,n/a,3,0,0,1,1
"freemind.extensions.HookDescriptorRegistration.getListPluginModeList()",1,1,n/a,3,0,0,1,1
"freemind.extensions.HookFactory.RegistrationContainer.RegistrationContainer()",0,0,n/a,2,0,0,0,1
"freemind.extensions.HookFactory.createModeControllerHook(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.HookFactory.createNodeHook(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.HookFactory.deregisterAllRegistrationContainer()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.HookFactory.getHookInNode(MindMapNode,String)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.extensions.HookFactory.getHookMenuPositions(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.HookFactory.getInstanciationMethod(String)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.HookFactory.getPluginBaseClass(String)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.HookFactory.getPossibleModeControllerHooks()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.HookFactory.getPossibleNodeHooks()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.HookFactory.getRegistrations()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.HookFactory.registerRegistrationContainer(RegistrationContainer,HookRegistration)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.extensions.HookFactoryAdapter.HookFactoryAdapter()",1,2,n/a,6,0,0,1,1
"freemind.extensions.HookFactoryAdapter.deregisterAllRegistrationContainer()",1,0,n/a,3,0,0,1,1
"freemind.extensions.HookFactoryAdapter.getHookInNode(MindMapNode,String)",3,0,n/a,13,2,2,4,3
"freemind.extensions.HookFactoryAdapter.registerRegistrationContainer(RegistrationContainer,HookRegistration)",2,0,n/a,17,1,2,2,2
"freemind.extensions.HookInstanciationMethod.AllDestinationNodesGetter.addChilds(MindMapNode,Collection<MindMapNode>)",5,2,n/a,7,1,2,5,2
"freemind.extensions.HookInstanciationMethod.AllDestinationNodesGetter.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",0,1,n/a,3,0,3,1,1
"freemind.extensions.HookInstanciationMethod.AllDestinationNodesGetter.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",4,1,n/a,5,0,3,3,1
"freemind.extensions.HookInstanciationMethod.DefaultDestinationNodesGetter.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",0,1,n/a,4,0,3,1,1
"freemind.extensions.HookInstanciationMethod.DefaultDestinationNodesGetter.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",0,1,n/a,3,0,3,1,1
"freemind.extensions.HookInstanciationMethod.DestinationNodesGetter.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",n/a,1,3,n/a,n/a,3,n/a,n/a
"freemind.extensions.HookInstanciationMethod.DestinationNodesGetter.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",n/a,1,3,n/a,n/a,3,n/a,n/a
"freemind.extensions.HookInstanciationMethod.HookInstanciationMethod(boolean,boolean,DestinationNodesGetter,boolean)",0,5,n/a,7,0,4,4,1
"freemind.extensions.HookInstanciationMethod.RootDestinationNodesGetter.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",2,1,n/a,3,0,3,1,1
"freemind.extensions.HookInstanciationMethod.RootDestinationNodesGetter.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",4,1,n/a,5,0,3,3,1
"freemind.extensions.HookInstanciationMethod.getAllInstanciationMethods()",6,0,n/a,9,0,0,7,1
"freemind.extensions.HookInstanciationMethod.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",1,3,n/a,6,0,3,1,1
"freemind.extensions.HookInstanciationMethod.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",1,3,n/a,6,0,3,1,1
"freemind.extensions.HookInstanciationMethod.isAlreadyPresent(String,MindMapNode)",6,3,n/a,11,2,2,6,3
"freemind.extensions.HookInstanciationMethod.isPermanent()",0,2,n/a,6,0,0,1,1
"freemind.extensions.HookInstanciationMethod.isSingleton()",0,0,n/a,3,0,0,1,1
"freemind.extensions.HookInstanciationMethod.isUndoable()",0,1,n/a,5,0,0,1,1
"freemind.extensions.HookRegistration.deRegister()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.HookRegistration.register()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.ImportWizard.ImportWizard()",4,1,n/a,6,1,0,2,2
"freemind.extensions.ImportWizard.addClassesFromDir(Vector<String>,File,File,int)",19,2,n/a,59,5,4,25,8
"freemind.extensions.ImportWizard.addClassesFromZip(Vector<String>,File)",12,2,n/a,27,3,2,10,4
"freemind.extensions.ImportWizard.buildClassList()",26,1,n/a,48,3,0,27,8
"freemind.extensions.ImportWizard.isInteresting(String)",5,2,n/a,10,1,1,5,2
"freemind.extensions.MindMapHook.PluginBaseClassSearcher.getPluginBaseObject()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.extensions.MindMapHook.getName()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.MindMapHook.getPluginBaseClass()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.MindMapHook.getResourceString(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.MindMapHook.setController(MapFeedback)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.MindMapHook.setName(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.MindMapHook.setPluginBaseClass(PluginBaseClassSearcher)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.MindMapHook.setProperties(Properties)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.MindMapHook.shutdownMapHook()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.MindMapHook.startupMapHook()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.ModeControllerHookAdapter.ModeControllerHookAdapter()",1,1,n/a,8,0,0,1,1
"freemind.extensions.NodeHook.invoke(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.NodeHook.setMap(MindMap)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.NodeHook.setNode(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.NodeHookAdapter.NodeHookAdapter()",1,1,n/a,6,0,0,1,1
"freemind.extensions.NodeHookAdapter.getMap()",0,0,n/a,5,0,0,1,1
"freemind.extensions.NodeHookAdapter.getNode()",0,1,n/a,5,0,0,1,1
"freemind.extensions.NodeHookAdapter.getNodeId()",3,0,n/a,3,0,0,1,1
"freemind.extensions.NodeHookAdapter.invoke(MindMapNode)",1,0,n/a,8,0,1,1,1
"freemind.extensions.NodeHookAdapter.nodeChanged(MindMapNode)",2,0,n/a,5,0,1,1,1
"freemind.extensions.NodeHookAdapter.setMap(MindMap)",0,0,n/a,5,0,1,1,1
"freemind.extensions.NodeHookAdapter.setNode(MindMapNode)",0,0,n/a,5,0,1,1,1
"freemind.extensions.PermanentNodeHook.loadFrom(XMLElement)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onAddChild(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onAddChildren(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onFocusNode(NodeView)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onLostFocusNode(NodeView)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onNewChild(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onRemoveChild(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onRemoveChildren(MindMapNode,MindMapNode)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.extensions.PermanentNodeHook.onUpdateChildrenHook(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onUpdateNodeHook()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.PermanentNodeHook.onViewCreatedHook(NodeView)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.onViewRemovedHook(NodeView)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.processUnfinishedLinks()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.extensions.PermanentNodeHook.save(XMLElement)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHook.saveHtml(Writer)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.extensions.PermanentNodeHookAdapter.PermanentNodeHookAdapter()",1,3,n/a,8,0,0,1,1
"freemind.extensions.PermanentNodeHookAdapter.deregisterFilter()",0,0,n/a,5,0,0,0,1
"freemind.extensions.PermanentNodeHookAdapter.executeTransaction(ActionPair)",0,0,n/a,6,0,1,0,1
"freemind.extensions.PermanentNodeHookAdapter.filterAction(ActionPair)",0,0,n/a,6,0,1,1,1
"freemind.extensions.PermanentNodeHookAdapter.loadFrom(XMLElement)",0,2,n/a,8,0,1,0,1
"freemind.extensions.PermanentNodeHookAdapter.loadNameValuePairs(XMLElement)",12,2,n/a,16,2,1,10,5
"freemind.extensions.PermanentNodeHookAdapter.onAddChild(MindMapNode)",1,0,n/a,8,0,1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onAddChildren(MindMapNode)",1,0,n/a,9,0,1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onFocusNode(NodeView)",1,0,n/a,8,0,1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onLostFocusNode(NodeView)",1,0,n/a,8,0,1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onNewChild(MindMapNode)",1,0,n/a,3,0,1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onRemoveChild(MindMapNode)",1,0,n/a,9,0,1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onRemoveChildren(MindMapNode,MindMapNode)",1,0,n/a,3,0,2,1,1
"freemind.extensions.PermanentNodeHookAdapter.onUpdateChildrenHook(MindMapNode)",1,0,n/a,8,0,1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onUpdateNodeHook()",1,0,n/a,8,0,0,1,1
"freemind.extensions.PermanentNodeHookAdapter.onViewCreatedHook(NodeView)",0,0,n/a,2,0,1,0,1
"freemind.extensions.PermanentNodeHookAdapter.onViewRemovedHook(NodeView)",0,0,n/a,2,0,1,0,1
"freemind.extensions.PermanentNodeHookAdapter.processUnfinishedLinks()",0,0,n/a,2,0,0,0,1
"freemind.extensions.PermanentNodeHookAdapter.registerFilter()",0,0,n/a,5,0,0,0,1
"freemind.extensions.PermanentNodeHookAdapter.save(XMLElement)",2,1,n/a,10,0,1,2,1
"freemind.extensions.PermanentNodeHookAdapter.saveHtml(Writer)",0,0,n/a,5,0,1,0,1
"freemind.extensions.PermanentNodeHookAdapter.saveNameValuePairs(HashMap<String, Object>,XMLElement)",7,1,n/a,13,2,2,7,3
"freemind.extensions.PermanentNodeHookAdapter.setToolTip(MindMapNode,String,String)",2,1,n/a,3,0,3,1,1
"freemind.extensions.PermanentNodeHookAdapter.setToolTip(String,String)",2,2,n/a,5,0,2,1,1
"freemind.extensions.PermanentNodeHookAdapter.shutdownMapHook()",4,2,n/a,11,0,0,4,1
"freemind.extensions.PermanentNodeHookSubstituteUnknown.PermanentNodeHookSubstituteUnknown(String)",1,5,n/a,4,0,1,2,1
"freemind.extensions.PermanentNodeHookSubstituteUnknown.getName()",0,0,n/a,3,0,0,1,1
"freemind.extensions.PermanentNodeHookSubstituteUnknown.loadFrom(XMLElement)",1,0,n/a,4,0,1,2,1
"freemind.extensions.PermanentNodeHookSubstituteUnknown.save(XMLElement)",6,0,n/a,7,1,1,5,2
"freemind.main.Base64Coding.decode64(String)",10,0,n/a,56,2,1,39,17
"freemind.main.Base64Coding.encode64(byte[])",3,0,n/a,48,3,1,34,10
"freemind.main.EditServer.EditServer(String,FreeMindMain)",28,0,n/a,49,2,2,25,4
"freemind.main.EditServer.getPort()",1,0,n/a,4,0,0,1,1
"freemind.main.EditServer.handleClient(Socket,DataInputStream)",20,1,n/a,13,5,2,20,5
"freemind.main.EditServer.isOK()",0,0,n/a,4,0,0,1,1
"freemind.main.EditServer.run()",7,0,n/a,31,2,0,14,6
"freemind.main.EditServer.stopServer()",3,0,n/a,9,1,0,4,2
"freemind.main.ExampleFileFilter.ExampleFileFilter()",1,3,n/a,8,0,0,1,1
"freemind.main.ExampleFileFilter.ExampleFileFilter(String)",1,0,n/a,8,0,1,1,1
"freemind.main.ExampleFileFilter.ExampleFileFilter(String,String)",3,1,n/a,15,0,2,5,3
"freemind.main.ExampleFileFilter.ExampleFileFilter(String[])",1,0,n/a,10,0,1,1,1
"freemind.main.ExampleFileFilter.ExampleFileFilter(String[],String)",3,1,n/a,17,1,2,7,3
"freemind.main.ExampleFileFilter.accept(File)",4,0,n/a,20,2,1,7,5
"freemind.main.ExampleFileFilter.addExtension(String)",3,6,n/a,18,1,1,4,2
"freemind.main.ExampleFileFilter.getDescription()",5,0,n/a,26,4,0,11,7
"freemind.main.ExampleFileFilter.getExtension(File)",5,2,n/a,15,2,1,6,4
"freemind.main.ExampleFileFilter.isExtensionListInDescription()",0,1,n/a,11,0,0,1,1
"freemind.main.ExampleFileFilter.setDescription(String)",0,3,n/a,9,0,1,2,1
"freemind.main.ExampleFileFilter.setExtensionListInDescription(boolean)",0,0,n/a,12,0,1,2,1
"freemind.main.FeedBack.getActualValue()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.FeedBack.increase(String,Object[])",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.main.FeedBack.progress(int,String,Object[])",n/a,0,0,n/a,n/a,3,n/a,n/a
"freemind.main.FeedBack.setMaximumValue(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.main.FixedHTMLWriter.FixedHTMLWriter(Writer,HTMLDocument)",2,0,n/a,11,0,2,1,1
"freemind.main.FixedHTMLWriter.FixedHTMLWriter(Writer,HTMLDocument,int,int)",1,3,n/a,15,0,4,1,1
"freemind.main.FixedHTMLWriter.convertToHTML(AttributeSet,MutableAttributeSet)",9,1,n/a,28,3,2,13,6
"freemind.main.FixedHTMLWriter.writeAttributes(AttributeSet)",11,0,n/a,27,2,1,13,8
"freemind.main.FreeMind.FreeMind(Properties,Properties,File)",47,1,n/a,58,3,3,42,8
"freemind.main.FreeMind.actionPerformed(ActionEvent)",2,0,n/a,7,0,1,2,1
"freemind.main.FreeMind.checkForAnotherInstance(String[])",26,1,n/a,45,3,1,24,7
"freemind.main.FreeMind.createModeController(String[])",4,1,n/a,14,1,1,5,2
"freemind.main.FreeMind.err(String)",1,0,n/a,3,0,1,1,1
"freemind.main.FreeMind.fireStartupDone()",1,1,n/a,6,1,0,3,2
"freemind.main.FreeMind.getAdjustableProperty(String)",1,2,n/a,3,0,1,1,1
"freemind.main.FreeMind.getContentComponent()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getController()",0,5,n/a,3,0,0,1,1
"freemind.main.FreeMind.getDefaultProperty(String)",1,14,n/a,3,0,1,1,1
"freemind.main.FreeMind.getFreeMindClassLoader()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getFreeMindMenuBar()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getFreemindBaseDir()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getFreemindDirectory()",2,3,n/a,4,0,0,1,1
"freemind.main.FreeMind.getFreemindVersion()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getIntProperty(String,int)",2,7,n/a,7,1,2,3,2
"freemind.main.FreeMind.getJFrame()",0,0,n/a,8,0,0,1,1
"freemind.main.FreeMind.getLastStateStorageManagement()",2,2,n/a,6,0,0,3,1
"freemind.main.FreeMind.getLogger(String)",33,1,n/a,46,3,1,36,7
"freemind.main.FreeMind.getLoggerList()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getMaximumNumberOfMapsToLoad(String[])",4,1,n/a,4,0,1,2,1
"freemind.main.FreeMind.getPatternsFile()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getPortFile()",4,2,n/a,11,1,0,3,3
"freemind.main.FreeMind.getProperties()",0,1,n/a,3,0,0,1,1
"freemind.main.FreeMind.getProperty(String)",1,15,n/a,3,0,1,1,1
"freemind.main.FreeMind.getResource(String)",3,0,n/a,3,0,1,1,1
"freemind.main.FreeMind.getResourceString(String)",1,1,n/a,3,0,1,1,1
"freemind.main.FreeMind.getResourceString(String,String)",1,0,n/a,3,0,2,1,1
"freemind.main.FreeMind.getResources()",1,1,n/a,4,0,0,1,1
"freemind.main.FreeMind.getScrollPane()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getView()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getWinHeight()",1,0,n/a,4,0,0,1,1
"freemind.main.FreeMind.getWinState()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getWinWidth()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getWinX()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.getWinY()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.init(FeedBack)",31,1,n/a,8,3,1,23,2
"freemind.main.FreeMind.initServer()",3,1,n/a,8,1,0,5,2
"freemind.main.FreeMind.insertComponentIntoSplitPane(JComponent)",16,0,n/a,5,2,1,21,4
"freemind.main.FreeMind.isApplet()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMind.loadMaps(String[],ModeController,FeedBack)",45,1,n/a,84,5,3,44,19
"freemind.main.FreeMind.main(String[],Properties,Properties,File)",36,0,n/a,4,3,4,36,4
"freemind.main.FreeMind.openDocument(URL)",8,0,n/a,20,2,1,6,5
"freemind.main.FreeMind.out(String)",2,4,n/a,8,1,1,3,2
"freemind.main.FreeMind.processLoadEventFromStartupPhase()",2,1,n/a,28,2,0,10,4
"freemind.main.FreeMind.processLoadEventFromStartupPhase(String)",12,1,n/a,18,2,1,10,3
"freemind.main.FreeMind.registerStartupDoneListener(StartupDoneListener)",1,0,n/a,5,0,1,2,2
"freemind.main.FreeMind.removeContentComponent()",8,2,n/a,11,2,0,5,3
"freemind.main.FreeMind.removeSplitPane()",6,0,n/a,12,1,0,7,2
"freemind.main.FreeMind.saveProperties(boolean)",16,0,n/a,21,1,1,14,4
"freemind.main.FreeMind.setContentComponent()",7,2,n/a,11,2,0,5,3
"freemind.main.FreeMind.setDefaultProperty(String,String)",1,0,n/a,3,0,2,1,1
"freemind.main.FreeMind.setProperty(String,String)",1,2,n/a,3,0,2,1,1
"freemind.main.FreeMind.setScreenBounds()",59,1,n/a,4,2,0,55,8
"freemind.main.FreeMind.setSplitLocation()",4,2,n/a,8,1,0,5,4
"freemind.main.FreeMind.setView(MapView)",1,0,n/a,3,0,1,1,1
"freemind.main.FreeMind.setWaitingCursor(boolean)",14,0,n/a,11,1,1,5,2
"freemind.main.FreeMind.setupProxy()",19,1,n/a,15,2,0,8,3
"freemind.main.FreeMind.setupSpellChecking()",13,1,n/a,24,3,0,10,5
"freemind.main.FreeMind.updateLookAndFeel()",20,1,n/a,39,2,0,19,9
"freemind.main.FreeMindApplet.FreeMindApplet()",2,0,n/a,4,0,0,2,1
"freemind.main.FreeMindApplet.err(String)",1,0,n/a,3,0,1,1,1
"freemind.main.FreeMindApplet.getAdjustableProperty(String)",1,0,n/a,3,0,1,1,1
"freemind.main.FreeMindApplet.getContentComponent()",0,0,n/a,7,1,0,3,2
"freemind.main.FreeMindApplet.getController()",0,2,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getFreeMindClassLoader()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getFreeMindMenuBar()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getFreemindBaseDir()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getFreemindDirectory()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getFreemindVersion()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getIntProperty(String,int)",2,0,n/a,7,1,2,3,2
"freemind.main.FreeMindApplet.getJFrame()",1,0,n/a,8,0,0,1,1
"freemind.main.FreeMindApplet.getLogger(String)",1,0,n/a,7,0,1,1,1
"freemind.main.FreeMindApplet.getLoggerList()",1,0,n/a,6,0,0,1,1
"freemind.main.FreeMindApplet.getMaxNodeWidth()",4,0,n/a,12,2,0,5,3
"freemind.main.FreeMindApplet.getPatternsFile()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getProperties()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getProperty(String)",1,4,n/a,3,0,1,1,1
"freemind.main.FreeMindApplet.getResource(String)",5,1,n/a,7,0,1,4,4
"freemind.main.FreeMindApplet.getResourceString(String)",1,0,n/a,3,0,1,1,1
"freemind.main.FreeMindApplet.getResourceString(String,String)",1,0,n/a,3,0,2,1,1
"freemind.main.FreeMindApplet.getResources()",1,0,n/a,6,0,0,1,1
"freemind.main.FreeMindApplet.getScrollPane()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getSouthPanel()",0,0,n/a,8,0,0,1,1
"freemind.main.FreeMindApplet.getView()",1,2,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getWinHeight()",2,0,n/a,4,0,0,1,1
"freemind.main.FreeMindApplet.getWinState()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getWinWidth()",2,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getWinX()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.getWinY()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.init()",49,0,n/a,71,2,0,43,8
"freemind.main.FreeMindApplet.insertComponentIntoSplitPane(JComponent)",3,0,n/a,10,1,1,7,2
"freemind.main.FreeMindApplet.isApplet()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindApplet.openDocument(URL)",2,0,n/a,3,0,1,1,1
"freemind.main.FreeMindApplet.out(String)",1,0,n/a,3,0,1,1,1
"freemind.main.FreeMindApplet.registerStartupDoneListener(StartupDoneListener)",0,0,n/a,4,0,1,0,1
"freemind.main.FreeMindApplet.removeSplitPane()",2,1,n/a,7,1,0,4,2
"freemind.main.FreeMindApplet.saveProperties(boolean)",0,0,n/a,2,0,1,0,1
"freemind.main.FreeMindApplet.setDefaultProperty(String,String)",1,0,n/a,3,0,2,1,1
"freemind.main.FreeMindApplet.setProperty(String,String)",0,0,n/a,2,0,2,0,1
"freemind.main.FreeMindApplet.setPropertyByParameter(String)",2,2,n/a,7,1,1,3,3
"freemind.main.FreeMindApplet.setTitle(String)",0,0,n/a,2,0,1,0,1
"freemind.main.FreeMindApplet.setView(MapView)",1,0,n/a,3,0,1,1,1
"freemind.main.FreeMindApplet.setWaitingCursor(boolean)",14,0,n/a,11,1,1,5,2
"freemind.main.FreeMindApplet.start()",6,0,n/a,12,2,0,5,3
"freemind.main.FreeMindApplet.updateLookAndFeel()",21,1,n/a,38,2,0,21,9
"freemind.main.FreeMindCommon.FreeMindCommon(FreeMindMain)",4,0,n/a,10,0,1,4,2
"freemind.main.FreeMindCommon.FreeMindResourceBundle.FreeMindResourceBundle()",16,1,n/a,33,4,0,14,7
"freemind.main.FreeMindCommon.FreeMindResourceBundle.getKeys()",1,0,n/a,3,0,0,1,1
"freemind.main.FreeMindCommon.FreeMindResourceBundle.getLanguageResources(String)",4,4,n/a,18,1,1,9,3
"freemind.main.FreeMindCommon.FreeMindResourceBundle.getResourceString(String)",1,1,n/a,7,1,1,3,2
"freemind.main.FreeMindCommon.FreeMindResourceBundle.getResourceString(String,String)",2,2,n/a,13,2,2,5,3
"freemind.main.FreeMindCommon.FreeMindResourceBundle.handleGetObject(String)",4,0,n/a,13,2,1,6,4
"freemind.main.FreeMindCommon.clearLanguageResources()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindCommon.getAdjustableProperty(String)",8,0,n/a,14,1,1,8,5
"freemind.main.FreeMindCommon.getFreeMindClassLoader()",8,0,n/a,10,1,0,5,2
"freemind.main.FreeMindCommon.getFreemindBaseDir()",31,1,n/a,72,3,0,22,8
"freemind.main.FreeMindCommon.getFreemindBaseDirOld()",13,0,n/a,44,2,0,23,5
"freemind.main.FreeMindCommon.getProperty(String)",1,2,n/a,3,0,1,1,1
"freemind.main.FreeMindCommon.getResourceString(String)",2,0,n/a,3,0,1,1,1
"freemind.main.FreeMindCommon.getResourceString(String,String)",2,0,n/a,4,0,2,1,1
"freemind.main.FreeMindCommon.getResources()",1,3,n/a,7,1,0,3,2
"freemind.main.FreeMindCommon.loadUIProperties(Properties)",0,0,n/a,10,0,1,0,1
"freemind.main.FreeMindCommon.setDefaultProperty(String,String)",1,1,n/a,3,0,2,1,1
"freemind.main.FreeMindMain.StartupDoneListener.startupDone()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.VersionInformation.VersionInformation(String)",15,0,n/a,42,1,1,23,6
"freemind.main.FreeMindMain.VersionInformation.VersionInformation(int,int,int,int,int)",1,0,n/a,9,0,5,6,1
"freemind.main.FreeMindMain.VersionInformation.toString()",16,0,n/a,32,1,0,27,7
"freemind.main.FreeMindMain.err(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.getAdjustableProperty(String)",n/a,10,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.getContentComponent()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getContentPane()",n/a,17,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getController()",n/a,6,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getFreeMindClassLoader()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getFreeMindMenuBar()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getFreemindBaseDir()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getFreemindDirectory()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getFreemindVersion()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getIntProperty(String,int)",n/a,4,0,n/a,n/a,2,n/a,n/a
"freemind.main.FreeMindMain.getJFrame()",n/a,9,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getLayeredPane()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getLogger(String)",n/a,18,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.getLoggerList()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getPatternsFile()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getProperties()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getProperty(String)",n/a,16,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.getResource(String)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.getResourceString(String)",n/a,9,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.getResourceString(String,String)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.main.FreeMindMain.getResources()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getScrollPane()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getView()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getWinHeight()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getWinState()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getWinWidth()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getWinX()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.getWinY()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.insertComponentIntoSplitPane(JComponent)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.isApplet()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.openDocument(URL)",n/a,4,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.out(String)",n/a,22,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.registerStartupDoneListener(StartupDoneListener)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.removeSplitPane()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.repaint()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.FreeMindMain.saveProperties(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.setDefaultProperty(String,String)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.main.FreeMindMain.setProperty(String,String)",n/a,5,0,n/a,n/a,2,n/a,n/a
"freemind.main.FreeMindMain.setTitle(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.setView(MapView)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindMain.setWaitingCursor(boolean)",n/a,9,0,n/a,n/a,1,n/a,n/a
"freemind.main.FreeMindSecurityManager.FreeMindSecurityManager()",0,0,n/a,2,0,0,0,1
"freemind.main.FreeMindSecurityManager.checkAccept(String,int)",1,0,n/a,5,0,2,3,2
"freemind.main.FreeMindSecurityManager.checkAccess(Thread)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkAccess(ThreadGroup)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkAwtEventQueueAccess()",1,0,n/a,5,0,0,3,2
"freemind.main.FreeMindSecurityManager.checkConnect(String,int)",1,0,n/a,5,0,2,3,2
"freemind.main.FreeMindSecurityManager.checkConnect(String,int,Object)",1,0,n/a,5,0,3,3,2
"freemind.main.FreeMindSecurityManager.checkCreateClassLoader()",1,0,n/a,5,0,0,3,2
"freemind.main.FreeMindSecurityManager.checkDelete(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkExec(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkExit(int)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkLink(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkListen(int)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkMemberAccess(Class,int)",1,0,n/a,5,0,2,3,2
"freemind.main.FreeMindSecurityManager.checkMulticast(InetAddress)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkMulticast(InetAddress,byte)",1,0,n/a,5,0,2,3,2
"freemind.main.FreeMindSecurityManager.checkPackageAccess(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkPackageDefinition(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkPermission(Permission)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkPermission(Permission,Object)",1,0,n/a,5,0,2,3,2
"freemind.main.FreeMindSecurityManager.checkPrintJobAccess()",1,0,n/a,5,0,0,3,2
"freemind.main.FreeMindSecurityManager.checkPropertiesAccess()",1,0,n/a,5,0,0,3,2
"freemind.main.FreeMindSecurityManager.checkPropertyAccess(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkRead(FileDescriptor)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkRead(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkRead(String,Object)",1,0,n/a,5,0,2,3,2
"freemind.main.FreeMindSecurityManager.checkSecurityAccess(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkSetFactory()",1,0,n/a,5,0,0,3,2
"freemind.main.FreeMindSecurityManager.checkSystemClipboardAccess()",1,0,n/a,5,0,0,3,2
"freemind.main.FreeMindSecurityManager.checkTopLevelWindow(Object)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkWrite(FileDescriptor)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.checkWrite(String)",1,0,n/a,5,0,1,3,2
"freemind.main.FreeMindSecurityManager.getSecurityContext()",2,0,n/a,5,0,0,3,2
"freemind.main.FreeMindSecurityManager.setFinalSecurityManager(SecurityManager)",1,0,n/a,16,1,1,6,3
"freemind.main.FreeMindSplashModern.FeedBackImpl.getActualValue()",0,1,n/a,3,0,0,1,1
"freemind.main.FreeMindSplashModern.FeedBackImpl.increase(String,Object[])",2,0,n/a,3,0,2,1,1
"freemind.main.FreeMindSplashModern.FeedBackImpl.progress(int,String,Object[])",17,1,n/a,12,3,3,18,2
"freemind.main.FreeMindSplashModern.FeedBackImpl.setImageJLabel(JLabel)",0,1,n/a,3,0,1,1,1
"freemind.main.FreeMindSplashModern.FeedBackImpl.setMaximumValue(int)",2,0,n/a,4,0,1,2,1
"freemind.main.FreeMindSplashModern.FreeMindSplashModern(FreeMindMain)",75,0,n/a,42,3,1,49,5
"freemind.main.FreeMindSplashModern.close()",2,0,n/a,4,0,0,2,1
"freemind.main.FreeMindSplashModern.getFeedBack()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindSplashModern.getWindowIcon()",0,0,n/a,3,0,0,1,1
"freemind.main.FreeMindStarter.ProxyAuthenticator.ProxyAuthenticator(String,String)",0,1,n/a,4,0,2,2,1
"freemind.main.FreeMindStarter.ProxyAuthenticator.getPasswordAuthentication()",2,0,n/a,3,0,0,1,1
"freemind.main.FreeMindStarter.checkJavaVersion()",7,1,n/a,14,1,0,7,2
"freemind.main.FreeMindStarter.createUserDirectory(Properties)",7,1,n/a,15,2,1,6,3
"freemind.main.FreeMindStarter.getFreeMindDirectory(Properties)",2,2,n/a,4,0,1,1,1
"freemind.main.FreeMindStarter.getUserPreferencesFile(Properties)",6,2,n/a,11,1,1,7,2
"freemind.main.FreeMindStarter.main(String[])",22,0,n/a,46,2,1,21,4
"freemind.main.FreeMindStarter.readDefaultPreferences()",9,1,n/a,15,1,0,10,2
"freemind.main.FreeMindStarter.readUsersPreferences(Properties)",7,1,n/a,15,1,1,11,2
"freemind.main.FreeMindStarter.setDefaultLocale(Properties)",7,1,n/a,21,1,1,14,5
"freemind.main.HtmlTools.HtmlNodeVisitor.HtmlNodeVisitor(MindMapNode,NodeCreator)",0,1,n/a,9,0,2,3,1
"freemind.main.HtmlTools.HtmlNodeVisitor.backToParent()",1,2,n/a,3,0,0,1,1
"freemind.main.HtmlTools.HtmlNodeVisitor.createChild()",1,2,n/a,13,2,0,6,3
"freemind.main.HtmlTools.HtmlNodeVisitor.head(Node,int)",32,0,n/a,61,6,2,34,19
"freemind.main.HtmlTools.HtmlNodeVisitor.tail(Node,int)",5,0,n/a,13,3,2,6,4
"freemind.main.HtmlTools.HtmlTools()",4,1,n/a,7,0,0,2,1
"freemind.main.HtmlTools.IndexPair.IndexPair(int,int,int,int,boolean)",1,3,n/a,13,0,5,6,1
"freemind.main.HtmlTools.IndexPair.toString()",14,0,n/a,19,0,0,14,1
"freemind.main.HtmlTools.NodeCreator.createChild(MindMapNode)",n/a,2,2,n/a,n/a,1,n/a,n/a
"freemind.main.HtmlTools.NodeCreator.setLink(String,MindMapNode)",n/a,1,2,n/a,n/a,2,n/a,n/a
"freemind.main.HtmlTools.NodeCreator.setText(String,MindMapNode)",n/a,1,2,n/a,n/a,2,n/a,n/a
"freemind.main.HtmlTools.append(StringBuffer,String,int,int)",2,3,n/a,8,0,4,1,1
"freemind.main.HtmlTools.extractHtmlBody(String)",9,1,n/a,20,1,1,13,5
"freemind.main.HtmlTools.getInstance()",0,6,n/a,3,0,0,1,1
"freemind.main.HtmlTools.getMaximalOriginalPosition(int,ArrayList<IndexPair>)",3,0,n/a,17,3,2,9,4
"freemind.main.HtmlTools.getMinimalOriginalPosition(int,ArrayList<IndexPair>)",1,0,n/a,8,2,2,4,4
"freemind.main.HtmlTools.getReplaceResult(Pattern,String,String)",37,0,n/a,95,3,3,38,7
"freemind.main.HtmlTools.htmlToPlain(String)",1,5,n/a,3,0,1,1,1
"freemind.main.HtmlTools.htmlToPlain(String,boolean)",22,1,n/a,50,1,2,6,3
"freemind.main.HtmlTools.insertHtmlIntoNodes(String,MindMapNode,NodeCreator)",4,1,n/a,6,0,3,1,1
"freemind.main.HtmlTools.isHtmlNode(String)",3,12,n/a,6,0,1,1,1
"freemind.main.HtmlTools.isWellformedXml(String)",10,2,n/a,23,1,1,8,3
"freemind.main.HtmlTools.isXMLValidCharacter(char)",0,5,n/a,14,0,1,1,9
"freemind.main.HtmlTools.makeValidXml(String)",2,9,n/a,4,0,1,1,1
"freemind.main.HtmlTools.plainToHTML(String)",17,4,n/a,41,3,1,30,12
"freemind.main.HtmlTools.removeAllTagsFromString(String)",2,2,n/a,3,0,1,1,1
"freemind.main.HtmlTools.removeHtmlTagsFromString(String)",2,2,n/a,12,1,1,3,2
"freemind.main.HtmlTools.removeInvalidXmlCharacters(String)",30,0,n/a,61,6,1,30,11
"freemind.main.HtmlTools.replaceIllegalXmlCharacters(String)",4,0,n/a,14,0,1,5,1
"freemind.main.HtmlTools.replaceSpacesToNonbreakableSpaces(String)",8,0,n/a,25,3,1,15,4
"freemind.main.HtmlTools.toHtml(String)",2,2,n/a,4,0,1,1,1
"freemind.main.HtmlTools.toXMLEscapedText(String)",4,3,n/a,7,1,1,3,2
"freemind.main.HtmlTools.toXMLEscapedTextExpandingWhitespace(String)",13,0,n/a,33,3,1,26,11
"freemind.main.HtmlTools.toXMLUnescapedText(String)",4,1,n/a,4,0,1,1,1
"freemind.main.HtmlTools.toXhtml(String)",14,2,n/a,25,2,1,16,5
"freemind.main.HtmlTools.unescapeHTMLUnicodeEntity(String)",29,8,n/a,60,6,1,31,12
"freemind.main.HtmlTools.unicodeToHTMLUnicodeEntity(String,boolean)",11,5,n/a,30,2,2,17,8
"freemind.main.IFreeMindSplash.close()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.IFreeMindSplash.getFeedBack()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.IFreeMindSplash.getWindowIcon()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.main.IFreeMindSplash.setVisible(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.main.LogFileLogHandler.LogFileLogHandler()",0,0,n/a,2,0,0,0,1
"freemind.main.LogFileLogHandler.LogFileLogHandler(LogReceiver)",0,0,n/a,6,0,1,1,1
"freemind.main.LogFileLogHandler.LogReceiver.receiveLog(LogRecord)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.main.LogFileLogHandler.close()",0,0,n/a,5,0,0,0,1
"freemind.main.LogFileLogHandler.flush()",0,0,n/a,5,0,0,0,1
"freemind.main.LogFileLogHandler.getLogReceiver()",0,0,n/a,3,0,0,1,1
"freemind.main.LogFileLogHandler.publish(LogRecord)",2,0,n/a,11,2,1,4,3
"freemind.main.LogFileLogHandler.setLogReceiver(LogReceiver)",0,0,n/a,3,0,1,1,1
"freemind.main.LoggingOutputStream.LoggingOutputStream(Logger,Level)",2,0,n/a,14,0,2,4,1
"freemind.main.LoggingOutputStream.flush()",6,0,n/a,20,1,0,8,3
"freemind.main.Resources.Resources(FreeMindMain)",3,1,n/a,6,1,1,3,2
"freemind.main.Resources.createInstance(FreeMindMain)",1,3,n/a,5,1,1,2,2
"freemind.main.Resources.createThumbnailFileName(File)",3,2,n/a,13,0,1,2,1
"freemind.main.Resources.createTranslatedString(String)",2,8,n/a,4,0,1,2,1
"freemind.main.Resources.format(String,Object[])",3,7,n/a,6,0,2,3,1
"freemind.main.Resources.getBoolProperty(String)",2,23,n/a,9,0,1,2,1
"freemind.main.Resources.getCountryMap()",2,0,n/a,13,2,0,8,3
"freemind.main.Resources.getFreeMindClassLoader()",1,2,n/a,3,0,0,1,1
"freemind.main.Resources.getFreemindBaseDir()",1,2,n/a,3,0,0,1,1
"freemind.main.Resources.getFreemindDirectory()",1,4,n/a,3,0,0,1,1
"freemind.main.Resources.getFreemindVersion()",1,0,n/a,3,0,0,1,1
"freemind.main.Resources.getInstance()",3,131,n/a,7,1,0,4,2
"freemind.main.Resources.getIntProperty(String,int)",1,5,n/a,3,0,2,1,1
"freemind.main.Resources.getLogger(String)",1,5,n/a,4,0,1,1,1
"freemind.main.Resources.getLongProperty(String,long)",2,0,n/a,7,1,2,3,2
"freemind.main.Resources.getProperties()",1,4,n/a,3,0,0,1,1
"freemind.main.Resources.getProperty(String)",1,8,n/a,3,0,1,1,1
"freemind.main.Resources.getResource(String)",1,16,n/a,3,0,1,1,1
"freemind.main.Resources.getResourceString(String)",1,41,n/a,3,0,1,1,1
"freemind.main.Resources.getResourceString(String,String)",1,1,n/a,3,0,2,1,1
"freemind.main.Resources.getResources()",1,0,n/a,3,0,0,1,1
"freemind.main.Resources.getStandardFileChooser(FileFilter)",4,2,n/a,13,1,1,7,3
"freemind.main.Resources.getText(String)",1,18,n/a,3,0,1,1,1
"freemind.main.Resources.logException(Throwable)",1,4,n/a,3,0,1,1,1
"freemind.main.Resources.logException(Throwable,String)",1,1,n/a,3,0,2,1,1
"freemind.main.StdFormatter.StdOutErrLevel.StdOutErrLevel(String,int)",1,2,n/a,3,0,2,1,1
"freemind.main.StdFormatter.format(LogRecord)",16,0,n/a,20,1,1,9,3
"freemind.main.Tools.ActionHolder.ActionHolder(Action)",1,1,n/a,4,0,1,2,1
"freemind.main.Tools.ActionHolder.getText()",2,1,n/a,8,0,0,1,1
"freemind.main.Tools.ActionHolder.setDisplayedMnemonicIndex(int)",0,1,n/a,8,0,1,0,1
"freemind.main.Tools.ActionHolder.setMnemonic(char)",2,1,n/a,11,0,1,4,3
"freemind.main.Tools.ActionHolder.setText(String)",1,1,n/a,8,0,1,1,1
"freemind.main.Tools.BooleanHolder.BooleanHolder()",0,3,n/a,2,0,0,0,1
"freemind.main.Tools.BooleanHolder.BooleanHolder(boolean)",0,0,n/a,3,0,1,1,1
"freemind.main.Tools.BooleanHolder.getValue()",0,7,n/a,3,0,0,1,1
"freemind.main.Tools.BooleanHolder.setValue(boolean)",0,4,n/a,3,0,1,1,1
"freemind.main.Tools.BooleanToXml(boolean)",0,3,n/a,3,0,1,1,2
"freemind.main.Tools.ButtonHolder.ButtonHolder(AbstractButton)",1,1,n/a,4,0,1,2,1
"freemind.main.Tools.ButtonHolder.getText()",1,1,n/a,8,0,0,1,1
"freemind.main.Tools.ButtonHolder.setDisplayedMnemonicIndex(int)",1,1,n/a,9,0,1,1,1
"freemind.main.Tools.ButtonHolder.setMnemonic(char)",1,1,n/a,8,0,1,1,1
"freemind.main.Tools.ButtonHolder.setText(String)",1,1,n/a,8,0,1,1,1
"freemind.main.Tools.DesEncrypter.DesEncrypter(StringBuffer,String)",2,2,n/a,5,0,2,3,1
"freemind.main.Tools.DesEncrypter.decrypt(String)",9,2,n/a,27,2,1,15,6
"freemind.main.Tools.DesEncrypter.encrypt(String)",6,1,n/a,21,2,1,11,5
"freemind.main.Tools.DesEncrypter.init(byte[])",8,2,n/a,29,2,1,11,8
"freemind.main.Tools.FileReaderCreator.FileReaderCreator(File)",0,2,n/a,3,0,1,1,1
"freemind.main.Tools.FileReaderCreator.createReader()",2,4,n/a,3,0,0,1,1
"freemind.main.Tools.FileReaderCreator.toString()",1,0,n/a,3,0,0,1,1
"freemind.main.Tools.IntHolder.IntHolder()",0,3,n/a,2,0,0,0,1
"freemind.main.Tools.IntHolder.IntHolder(int)",0,0,n/a,3,0,1,1,1
"freemind.main.Tools.IntHolder.getValue()",0,4,n/a,3,0,0,1,1
"freemind.main.Tools.IntHolder.increase()",0,0,n/a,3,0,0,1,1
"freemind.main.Tools.IntHolder.setValue(int)",0,9,n/a,3,0,1,1,1
"freemind.main.Tools.IntHolder.toString()",0,0,n/a,3,0,0,1,1
"freemind.main.Tools.MindMapNodePair.MindMapNodePair(MindMapNode,MindMapNode)",0,0,n/a,4,0,2,2,1
"freemind.main.Tools.MindMapNodePair.getCloneNode()",0,0,n/a,3,0,0,1,1
"freemind.main.Tools.MindMapNodePair.getCorresponding()",0,0,n/a,3,0,0,1,1
"freemind.main.Tools.NameMnemonicHolder.getText()",n/a,1,2,n/a,n/a,0,n/a,n/a
"freemind.main.Tools.NameMnemonicHolder.setDisplayedMnemonicIndex(int)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.main.Tools.NameMnemonicHolder.setMnemonic(char)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.main.Tools.NameMnemonicHolder.setText(String)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.main.Tools.ObjectHolder.ObjectHolder()",0,0,n/a,2,0,0,0,1
"freemind.main.Tools.ObjectHolder.getObject()",0,0,n/a,3,0,0,1,1
"freemind.main.Tools.ObjectHolder.setObject(Object)",0,0,n/a,3,0,1,1,1
"freemind.main.Tools.Pair.Pair(Object,Object)",0,1,n/a,4,0,2,2,1
"freemind.main.Tools.Pair.getFirst()",0,2,n/a,3,0,0,1,1
"freemind.main.Tools.Pair.getSecond()",0,0,n/a,3,0,0,1,1
"freemind.main.Tools.PointToXml(Point)",6,6,n/a,9,0,1,6,2
"freemind.main.Tools.ReaderCreator.createReader()",n/a,4,2,n/a,n/a,0,n/a,n/a
"freemind.main.Tools.SingleDesEncrypter.SingleDesEncrypter(StringBuffer)",1,3,n/a,3,0,1,1,1
"freemind.main.Tools.StringReaderCreator.StringReaderCreator(String)",0,2,n/a,3,0,1,1,1
"freemind.main.Tools.StringReaderCreator.createReader()",1,4,n/a,3,0,0,1,1
"freemind.main.Tools.StringReaderCreator.toString()",0,0,n/a,3,0,0,1,1
"freemind.main.Tools.TripleDesEncrypter.TripleDesEncrypter(StringBuffer)",1,0,n/a,3,0,1,1,1
"freemind.main.Tools.addEscapeActionToDialog(JDialog)",3,2,n/a,3,2,1,3,1
"freemind.main.Tools.addEscapeActionToDialog(JDialog,Action)",1,6,n/a,3,0,2,1,1
"freemind.main.Tools.addFocusPrintTimer()",8,0,n/a,8,2,0,3,1
"freemind.main.Tools.addKeyActionToDialog(JDialog,Action,String,String)",10,3,n/a,12,0,4,3,1
"freemind.main.Tools.arrayToUrls(String[])",8,0,n/a,13,2,1,10,3
"freemind.main.Tools.byteArrayToUTF8String(byte[])",2,1,n/a,10,1,1,3,2
"freemind.main.Tools.colorToXml(Color)",9,19,n/a,16,0,1,12,5
"freemind.main.Tools.compareText(String,String)",20,1,n/a,21,2,2,13,7
"freemind.main.Tools.compress(String)",12,1,n/a,27,1,1,14,3
"freemind.main.Tools.convertPointFromAncestor(Component,Point,Component)",3,2,n/a,12,1,3,7,2
"freemind.main.Tools.convertPointToAncestor(Component,Point,Class<?>)",2,1,n/a,6,0,3,2,1
"freemind.main.Tools.convertPointToAncestor(Component,Point,Component)",3,1,n/a,12,1,3,8,2
"freemind.main.Tools.copyChangedProperties(Properties,Properties)",10,0,n/a,11,2,2,7,3
"freemind.main.Tools.copyStream(InputStream,OutputStream,boolean)",4,2,n/a,12,1,3,7,3
"freemind.main.Tools.correctJSplitPaneKeyMap()",5,0,n/a,7,0,0,5,1
"freemind.main.Tools.countOccurrences(String,String)",3,1,n/a,17,2,2,8,3
"freemind.main.Tools.dateToString(Date)",2,2,n/a,3,0,1,1,1
"freemind.main.Tools.decompress(String)",10,1,n/a,27,2,1,15,5
"freemind.main.Tools.deepCopy(XmlAction)",2,2,n/a,3,0,1,1,1
"freemind.main.Tools.edgeWidthStringToInt(String)",3,3,n/a,11,1,1,5,3
"freemind.main.Tools.executableByExtension(String)",2,1,n/a,3,0,1,1,1
"freemind.main.Tools.expandFileName(String)",3,0,n/a,10,1,1,3,2
"freemind.main.Tools.expandPlaceholders(String,String)",2,8,n/a,11,1,2,5,2
"freemind.main.Tools.expandPlaceholders(String,String,String)",2,3,n/a,10,1,3,6,3
"freemind.main.Tools.expandPlaceholders(String,String,String,String)",3,0,n/a,14,1,4,8,4
"freemind.main.Tools.fileToRelativeUrlString(File,File)",10,4,n/a,26,2,2,10,3
"freemind.main.Tools.fileToUrl(File)",2,20,n/a,5,0,1,3,2
"freemind.main.Tools.firstLetterCapitalized(String)",5,1,n/a,7,1,1,3,3
"freemind.main.Tools.fromBase64(String)",1,4,n/a,6,0,1,1,1
"freemind.main.Tools.generateID(String,Map,String)",4,2,n/a,21,2,3,8,4
"freemind.main.Tools.getActualReader(Reader)",1,2,n/a,9,0,1,1,1
"freemind.main.Tools.getAvailableFonts()",2,2,n/a,9,1,0,4,2
"freemind.main.Tools.getClipboard()",2,1,n/a,5,0,0,1,1
"freemind.main.Tools.getExtension(File)",2,2,n/a,8,0,1,1,1
"freemind.main.Tools.getExtension(String)",5,2,n/a,10,0,1,2,3
"freemind.main.Tools.getField(Object[],String)",9,1,n/a,14,3,2,11,4
"freemind.main.Tools.getFile(File)",4,3,n/a,16,1,1,4,2
"freemind.main.Tools.getFile(Reader)",13,3,n/a,24,3,1,16,5
"freemind.main.Tools.getFileNameFromRestorable(String)",5,1,n/a,12,1,1,7,2
"freemind.main.Tools.getFileNameProposal(MindMapNode)",2,2,n/a,5,0,1,3,1
"freemind.main.Tools.getFreeMindBasePath()",16,0,n/a,18,1,0,11,3
"freemind.main.Tools.getHostIpAsString()",4,0,n/a,11,1,0,4,2
"freemind.main.Tools.getHostName()",2,1,n/a,9,1,0,5,2
"freemind.main.Tools.getKeyStroke(String)",2,3,n/a,10,1,1,6,3
"freemind.main.Tools.getMindMapNodesFromClipboard(MindMapController)",8,4,n/a,21,3,1,11,4
"freemind.main.Tools.getModeFromRestorable(String)",3,1,n/a,10,1,1,6,2
"freemind.main.Tools.getNodeTextHierarchy(MindMapNode,MindMapController)",4,1,n/a,11,0,2,1,2
"freemind.main.Tools.getPageFormatAsString(Paper)",6,1,n/a,10,0,1,1,1
"freemind.main.Tools.getPrefix(String)",4,0,n/a,16,2,1,6,4
"freemind.main.Tools.getReaderFromFile(File)",1,2,n/a,4,0,1,1,1
"freemind.main.Tools.getScalingFactor()",1,2,n/a,3,0,0,1,1
"freemind.main.Tools.getScalingFactorPlain()",2,3,n/a,3,0,0,1,1
"freemind.main.Tools.getStackTrace()",2,0,n/a,7,0,0,2,1
"freemind.main.Tools.getStacktrace(Exception)",4,1,n/a,7,0,1,4,1
"freemind.main.Tools.getURLWithoutReference(URL)",3,1,n/a,10,0,1,1,1
"freemind.main.Tools.getUpdateReader(Reader,String)",47,2,n/a,3,4,2,52,9
"freemind.main.Tools.getUserName()",2,0,n/a,5,0,0,2,1
"freemind.main.Tools.getVectorWithSingleElement(T)",2,3,n/a,5,0,1,3,1
"freemind.main.Tools.iconFirstIndex(MindMapNode,String)",7,3,n/a,9,1,2,7,3
"freemind.main.Tools.iconLastIndex(MindMapNode,String)",8,1,n/a,10,1,2,7,3
"freemind.main.Tools.invokeActionsToKeyboardLayoutDependantCharacters(KeyEvent,Action[],Object)",10,0,n/a,29,2,3,9,5
"freemind.main.Tools.invokeAndWait(Runnable)",3,1,n/a,16,1,1,3,2
"freemind.main.Tools.isAboveJava4()",1,0,n/a,3,0,0,1,1
"freemind.main.Tools.isAbsolutePath(String)",11,1,n/a,21,1,1,7,5
"freemind.main.Tools.isAvailableFontFamily(String)",2,1,n/a,7,1,1,4,3
"freemind.main.Tools.isBelowJava6()",1,1,n/a,3,0,0,1,1
"freemind.main.Tools.isFile(URL)",2,1,n/a,3,0,1,1,1
"freemind.main.Tools.isHeadless()",1,1,n/a,6,0,0,1,1
"freemind.main.Tools.isLinux()",2,1,n/a,8,1,0,5,2
"freemind.main.Tools.isMacOsX()",2,8,n/a,8,1,0,5,2
"freemind.main.Tools.isPreferenceTrue(String)",1,0,n/a,8,0,1,1,1
"freemind.main.Tools.isRetina()",7,0,n/a,18,3,0,10,5
"freemind.main.Tools.isUnix()",1,1,n/a,3,0,0,1,2
"freemind.main.Tools.isWindows()",3,3,n/a,3,0,0,1,1
"freemind.main.Tools.listToString(List<?>)",7,1,n/a,8,1,1,5,2
"freemind.main.Tools.logTransferable(Transferable)",10,0,n/a,17,2,1,12,3
"freemind.main.Tools.makeFileHidden(File,boolean)",8,2,n/a,14,2,2,8,5
"freemind.main.Tools.marshall(XmlAction)",2,4,n/a,3,0,1,1,1
"freemind.main.Tools.nt(StringTokenizer)",4,6,n/a,13,1,1,5,2
"freemind.main.Tools.printStackTrace()",3,0,n/a,7,0,0,1,1
"freemind.main.Tools.printXmlAction(XmlAction)",14,4,n/a,19,3,1,13,4
"freemind.main.Tools.readFileStart(Reader,int)",9,1,n/a,24,2,2,13,4
"freemind.main.Tools.removeExtension(String)",3,1,n/a,4,0,1,2,3
"freemind.main.Tools.removeMnemonic(String)",1,8,n/a,3,0,1,1,1
"freemind.main.Tools.removeTranslateComment(String)",4,3,n/a,12,1,1,3,3
"freemind.main.Tools.replaceUtf8AndIllegalXmlChars(String)",1,2,n/a,3,0,1,1,1
"freemind.main.Tools.restoreAntialiasing(Graphics2D,Object)",2,8,n/a,5,1,2,2,2
"freemind.main.Tools.safeEquals(BooleanHolder,BooleanHolder)",2,0,n/a,5,0,2,1,5
"freemind.main.Tools.safeEquals(Color,Color)",1,43,n/a,4,0,2,1,5
"freemind.main.Tools.safeEquals(Object,Object)",1,43,n/a,4,0,2,1,5
"freemind.main.Tools.safeEquals(String,String)",1,43,n/a,11,0,2,1,5
"freemind.main.Tools.safeEqualsIgnoreCase(String,String)",3,2,n/a,5,0,2,1,5
"freemind.main.Tools.scaleAllFonts(float)",7,0,n/a,13,3,1,7,4
"freemind.main.Tools.setDialogLocationRelativeTo(JDialog,Component)",21,4,n/a,76,3,2,50,13
"freemind.main.Tools.setHidden(File,boolean,boolean)",10,2,n/a,25,3,3,11,7
"freemind.main.Tools.setLabelAndMnemonic(AbstractButton,String)",2,0,n/a,8,0,2,1,1
"freemind.main.Tools.setLabelAndMnemonic(Action,String)",2,0,n/a,8,0,2,1,1
"freemind.main.Tools.setLabelAndMnemonic(NameMnemonicHolder,String)",9,2,n/a,21,3,2,13,7
"freemind.main.Tools.setPageFormatFromString(Paper,String)",13,1,n/a,22,2,2,8,3
"freemind.main.Tools.setPermissions(String,int)",10,0,n/a,33,3,2,8,4
"freemind.main.Tools.stringToList(String)",5,1,n/a,12,1,1,5,2
"freemind.main.Tools.swapVectorPositions(Vector<T>,int,int)",7,2,n/a,8,1,3,3,5
"freemind.main.Tools.toBase64(String)",2,0,n/a,4,0,1,1,1
"freemind.main.Tools.toBase64(byte[])",2,3,n/a,5,0,1,1,1
"freemind.main.Tools.toRelativeURL(URL,URL)",33,1,n/a,56,2,2,25,8
"freemind.main.Tools.uTF8StringToByteArray(String)",2,1,n/a,10,1,1,3,2
"freemind.main.Tools.unMarshall(String)",2,3,n/a,3,0,1,1,1
"freemind.main.Tools.updateFontSize(Font,float,int)",2,2,n/a,22,2,3,6,3
"freemind.main.Tools.urlGetFile(URL)",8,1,n/a,18,1,1,4,4
"freemind.main.Tools.urlStringToUrls(String)",6,0,n/a,13,2,1,10,3
"freemind.main.Tools.urlToFile(URL)",6,4,n/a,7,1,1,3,2
"freemind.main.Tools.waitForEventQueue()",6,2,n/a,4,4,0,5,3
"freemind.main.Tools.xmlToBoolean(String)",1,8,n/a,5,0,1,3,2
"freemind.main.Tools.xmlToColor(String)",10,34,n/a,14,1,1,9,3
"freemind.main.Tools.xmlToDate(String)",5,2,n/a,10,1,1,3,2
"freemind.main.Tools.xmlToPoint(String)",11,6,n/a,19,1,1,11,4
"freemind.main.XHTMLWriter.XHTMLFilterWriter.XHTMLFilterWriter(Writer)",1,1,n/a,9,0,1,1,1
"freemind.main.XHTMLWriter.XHTMLFilterWriter.write(String,int,int)",2,0,n/a,13,0,3,1,1
"freemind.main.XHTMLWriter.XHTMLFilterWriter.write(char[],int,int)",1,0,n/a,15,1,3,2,2
"freemind.main.XHTMLWriter.XHTMLFilterWriter.write(int)",17,1,n/a,55,3,1,29,25
"freemind.main.XHTMLWriter.XHTMLWriter(Writer,HTMLDocument)",2,1,n/a,11,0,2,1,1
"freemind.main.XHTMLWriter.XHTMLWriter(Writer,HTMLDocument,int,int)",3,1,n/a,16,0,4,2,1
"freemind.main.XHTMLWriter.html2xhtml(Reader,Writer)",6,1,n/a,20,0,2,5,1
"freemind.main.XHTMLWriter.main(String[])",7,0,n/a,19,1,1,7,2
"freemind.main.XHTMLWriter.write()",1,2,n/a,15,0,0,1,1
"freemind.main.XHTMLWriter.writeLineSeparator()",1,1,n/a,4,0,0,2,2
"freemind.main.XHTMLWriter.writeOption(Option)",3,0,n/a,7,0,1,5,1
"freemind.main.XMLElement.XMLElement()",2,31,n/a,32,0,0,1,1
"freemind.main.XMLElement.XMLElement(Hashtable<String, char[]>)",1,0,n/a,44,0,1,1,1
"freemind.main.XMLElement.XMLElement(Hashtable<String, char[]>,boolean)",1,0,n/a,45,0,2,1,1
"freemind.main.XMLElement.XMLElement(Hashtable<String, char[]>,boolean,boolean)",1,0,n/a,44,0,3,1,1
"freemind.main.XMLElement.XMLElement(Hashtable<String, char[]>,boolean,boolean,boolean)",13,6,n/a,70,2,4,20,4
"freemind.main.XMLElement.XMLElement(boolean)",2,0,n/a,37,0,1,1,1
"freemind.main.XMLElement.addChild(XMLElement)",1,26,n/a,38,0,1,1,1
"freemind.main.XMLElement.addProperty(String,Object)",1,0,n/a,11,0,2,1,1
"freemind.main.XMLElement.addProperty(String,double)",1,0,n/a,11,0,2,1,1
"freemind.main.XMLElement.addProperty(String,int)",1,0,n/a,11,0,2,1,1
"freemind.main.XMLElement.checkCDATA(StringBuffer)",12,2,n/a,60,5,1,37,11
"freemind.main.XMLElement.checkLiteral(String)",3,2,n/a,26,2,1,7,3
"freemind.main.XMLElement.completeElement()",0,3,n/a,3,0,0,0,1
"freemind.main.XMLElement.countChildren()",1,2,n/a,21,0,0,1,1
"freemind.main.XMLElement.createAnotherElement()",1,3,n/a,9,0,0,1,1
"freemind.main.XMLElement.enumerateAttributeNames()",2,3,n/a,55,0,0,1,1
"freemind.main.XMLElement.enumerateChildren()",1,3,n/a,21,0,0,1,1
"freemind.main.XMLElement.expectedInput(String)",2,11,n/a,23,0,1,2,1
"freemind.main.XMLElement.getAttribute(String)",1,2,n/a,33,0,1,1,1
"freemind.main.XMLElement.getAttribute(String,Hashtable,String,boolean)",4,1,n/a,56,2,4,12,5
"freemind.main.XMLElement.getAttribute(String,Object)",2,2,n/a,42,1,2,6,3
"freemind.main.XMLElement.getBooleanAttribute(String,String,String,boolean)",5,0,n/a,54,1,4,10,5
"freemind.main.XMLElement.getChildren()",1,10,n/a,27,1,0,3,2
"freemind.main.XMLElement.getContent()",0,4,n/a,10,0,0,1,1
"freemind.main.XMLElement.getContents()",1,0,n/a,9,0,0,1,1
"freemind.main.XMLElement.getDoubleAttribute(String)",1,0,n/a,31,0,1,1,1
"freemind.main.XMLElement.getDoubleAttribute(String,Hashtable<Object, Double>,String,boolean)",8,0,n/a,66,2,4,16,7
"freemind.main.XMLElement.getDoubleAttribute(String,double)",5,1,n/a,45,2,2,8,4
"freemind.main.XMLElement.getIntAttribute(String)",1,2,n/a,31,0,1,1,1
"freemind.main.XMLElement.getIntAttribute(String,Hashtable<Object, Integer>,String,boolean)",8,0,n/a,65,2,4,16,7
"freemind.main.XMLElement.getIntAttribute(String,int)",4,1,n/a,45,2,2,8,4
"freemind.main.XMLElement.getLineNr()",0,0,n/a,16,0,0,1,1
"freemind.main.XMLElement.getName()",0,44,n/a,8,0,0,1,1
"freemind.main.XMLElement.getStringAttribute(String)",1,46,n/a,33,0,1,1,1
"freemind.main.XMLElement.getStringAttribute(String,Hashtable<Object, String>,String,boolean)",1,0,n/a,42,0,4,1,1
"freemind.main.XMLElement.getStringAttribute(String,String)",1,1,n/a,35,0,2,1,1
"freemind.main.XMLElement.getUserObject()",0,14,n/a,4,0,0,1,1
"freemind.main.XMLElement.invalidValue(String,String)",2,8,n/a,24,0,2,2,1
"freemind.main.XMLElement.invalidValueSet(String)",2,2,n/a,21,0,1,2,1
"freemind.main.XMLElement.parseCharArray(char[],int,int)",1,0,n/a,38,0,3,1,1
"freemind.main.XMLElement.parseCharArray(char[],int,int,int)",2,1,n/a,43,1,4,3,2
"freemind.main.XMLElement.parseFromReader(Reader)",1,2,n/a,38,0,1,1,1
"freemind.main.XMLElement.parseFromReader(Reader,int)",6,4,n/a,55,2,2,13,5
"freemind.main.XMLElement.parseString(String)",2,2,n/a,38,1,1,2,2
"freemind.main.XMLElement.parseString(String,int)",2,0,n/a,35,0,2,1,1
"freemind.main.XMLElement.parseString(String,int,int)",2,0,n/a,38,0,3,1,1
"freemind.main.XMLElement.parseString(String,int,int,int)",3,0,n/a,43,1,4,3,2
"freemind.main.XMLElement.readChar()",2,24,n/a,20,2,0,11,4
"freemind.main.XMLElement.removeAttribute(String)",2,4,n/a,72,1,1,3,2
"freemind.main.XMLElement.removeChild(String)",1,0,n/a,11,0,1,1,1
"freemind.main.XMLElement.removeChild(XMLElement)",1,0,n/a,36,0,1,1,1
"freemind.main.XMLElement.removeProperty(String)",1,0,n/a,11,0,1,1,1
"freemind.main.XMLElement.resolveEntity(StringBuffer)",15,2,n/a,48,3,1,19,7
"freemind.main.XMLElement.scanElement(XMLElement)",73,2,n/a,169,5,1,95,29
"freemind.main.XMLElement.scanIdentifier(StringBuffer)",3,2,n/a,41,2,1,6,13
"freemind.main.XMLElement.scanPCData(StringBuffer)",6,3,n/a,33,3,1,11,5
"freemind.main.XMLElement.scanString(StringBuffer)",5,1,n/a,31,2,1,10,6
"freemind.main.XMLElement.scanWhitespace()",1,8,n/a,19,2,0,10,4
"freemind.main.XMLElement.scanWhitespace(StringBuffer)",2,2,n/a,31,2,1,11,5
"freemind.main.XMLElement.setAttribute(String,Object)",3,61,n/a,54,1,2,3,2
"freemind.main.XMLElement.setContent(String)",0,3,n/a,9,0,1,2,1
"freemind.main.XMLElement.setDoubleAttribute(String,double)",3,2,n/a,48,1,2,3,2
"freemind.main.XMLElement.setEncodedContent(String)",0,2,n/a,9,0,1,2,1
"freemind.main.XMLElement.setIntAttribute(String,int)",3,4,n/a,48,1,2,3,2
"freemind.main.XMLElement.setName(String)",0,30,n/a,21,0,1,1,1
"freemind.main.XMLElement.setTagName(String)",1,0,n/a,10,0,1,1,1
"freemind.main.XMLElement.skipComment()",3,2,n/a,27,2,0,8,4
"freemind.main.XMLElement.skipSpecialTag(int)",4,3,n/a,61,4,1,31,17
"freemind.main.XMLElement.syntaxError(String)",2,0,n/a,21,0,1,2,1
"freemind.main.XMLElement.toString()",7,1,n/a,17,1,0,7,2
"freemind.main.XMLElement.unexpectedEndOfData()",2,1,n/a,8,0,0,2,1
"freemind.main.XMLElement.unknownEntity(String)",2,2,n/a,21,0,1,2,1
"freemind.main.XMLElement.unreadChar(char)",0,11,n/a,20,0,1,1,1
"freemind.main.XMLElement.write(Writer)",1,4,n/a,24,0,1,1,1
"freemind.main.XMLElement.write(Writer,boolean)",37,2,n/a,62,2,2,44,13
"freemind.main.XMLElement.writeClosingTag(Writer)",5,1,n/a,7,0,1,5,1
"freemind.main.XMLElement.writeEncoded(Writer,String)",34,3,n/a,70,3,2,49,10
"freemind.main.XMLElement.writeWithoutClosingTag(Writer)",1,1,n/a,3,0,1,1,1
"freemind.main.XMLParseException.XMLParseException(String,String)",1,0,n/a,34,0,2,2,2
"freemind.main.XMLParseException.XMLParseException(String,int,String)",1,0,n/a,38,0,3,2,2
"freemind.main.XMLParseException.getLineNr()",0,0,n/a,8,0,0,1,1
"freemind.modes.ArrowLinkAdapter.ArrowLinkAdapter(MindMapNode,MindMapNode,MapFeedback)",1,2,n/a,6,0,3,3,1
"freemind.modes.ArrowLinkAdapter.clone()",5,2,n/a,12,0,0,6,5
"freemind.modes.ArrowLinkAdapter.copy(ArrowLinkAdapter)",24,1,n/a,14,0,1,12,1
"freemind.modes.ArrowLinkAdapter.createArrowLinkTarget(MindMapLinkRegistry)",4,0,n/a,6,0,1,4,1
"freemind.modes.ArrowLinkAdapter.getEndArrow()",0,3,n/a,3,0,0,1,1
"freemind.modes.ArrowLinkAdapter.getEndInclination()",1,5,n/a,5,0,0,3,2
"freemind.modes.ArrowLinkAdapter.getShowControlPointsFlag()",0,0,n/a,3,0,0,1,1
"freemind.modes.ArrowLinkAdapter.getStartArrow()",0,3,n/a,3,0,0,1,1
"freemind.modes.ArrowLinkAdapter.getStartInclination()",1,5,n/a,5,0,0,3,2
"freemind.modes.ArrowLinkAdapter.save()",28,1,n/a,32,1,0,21,10
"freemind.modes.ArrowLinkAdapter.setEndArrow(String)",5,3,n/a,11,1,1,7,4
"freemind.modes.ArrowLinkAdapter.setEndInclination(Point)",0,3,n/a,3,0,1,1,1
"freemind.modes.ArrowLinkAdapter.setStartArrow(String)",5,3,n/a,11,1,1,7,4
"freemind.modes.ArrowLinkAdapter.setStartInclination(Point)",0,3,n/a,3,0,1,1,1
"freemind.modes.ArrowLinkAdapter.showControlPoints(boolean)",0,0,n/a,3,0,1,1,1
"freemind.modes.ArrowLinkTarget.ArrowLinkTarget(MindMapNode,MindMapNode,MapFeedback)",1,1,n/a,9,0,3,1,1
"freemind.modes.ArrowLinkTarget.changeInclination(MapView,int,int,int,int)",0,0,n/a,6,0,5,0,1
"freemind.modes.ArrowLinkTarget.createArrowLinkAdapter(MindMapLinkRegistry)",2,0,n/a,5,0,1,3,1
"freemind.modes.ArrowLinkTarget.getSourceLabel()",0,2,n/a,3,0,0,1,1
"freemind.modes.ArrowLinkTarget.save()",5,0,n/a,8,1,0,5,2
"freemind.modes.ArrowLinkTarget.setSourceLabel(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.CloudAdapter.CloudAdapter(MindMapNode,MapFeedback)",3,2,n/a,12,1,2,6,2
"freemind.modes.CloudAdapter.CloudAdapterListener.propertyChanged(String,String,String)",3,3,n/a,9,1,3,4,3
"freemind.modes.CloudAdapter.calcIterativeLevel(MindMapNode)",4,1,n/a,17,3,1,9,4
"freemind.modes.CloudAdapter.changeIterativeLevel(int)",0,0,n/a,6,1,1,2,2
"freemind.modes.CloudAdapter.getExteriorColor()",2,0,n/a,3,0,0,1,1
"freemind.modes.CloudAdapter.getIterativeLevel()",1,0,n/a,7,1,0,3,2
"freemind.modes.CloudAdapter.getStandardColor()",0,0,n/a,3,0,0,1,1
"freemind.modes.CloudAdapter.getStandardColorPropertyString()",0,0,n/a,3,0,0,1,1
"freemind.modes.CloudAdapter.getStandardStyle()",0,0,n/a,3,0,0,1,1
"freemind.modes.CloudAdapter.getStandardStylePropertyString()",0,0,n/a,3,0,0,1,1
"freemind.modes.CloudAdapter.save()",7,0,n/a,14,1,0,9,4
"freemind.modes.CloudAdapter.setStandardColor(Color)",0,0,n/a,3,0,1,1,1
"freemind.modes.CloudAdapter.setStandardStyle(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.CloudAdapter.setTarget(MindMapNode)",1,0,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.ControllerAdapter(Mode)",1,2,n/a,12,0,1,1,1
"freemind.modes.ControllerAdapter.ControllerPopupMenuListener.popupMenuCanceled(PopupMenuEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.ControllerPopupMenuListener.popupMenuWillBecomeInvisible(PopupMenuEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.ControllerPopupMenuListener.popupMenuWillBecomeVisible(PopupMenuEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.FileOpener.dragEnter(DropTargetDragEvent)",2,0,n/a,6,1,1,3,2
"freemind.modes.ControllerAdapter.FileOpener.dragExit(DropTargetEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.ControllerAdapter.FileOpener.dragOver(DropTargetDragEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.ControllerAdapter.FileOpener.dragScroll(DropTargetDragEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.ControllerAdapter.FileOpener.drop(DropTargetDropEvent)",15,0,n/a,32,2,1,17,5
"freemind.modes.ControllerAdapter.FileOpener.dropActionChanged(DropTargetDragEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.ControllerAdapter.FileOpener.isDragAcceptable(DropTargetDragEvent)",2,1,n/a,12,2,1,7,3
"freemind.modes.ControllerAdapter.FileOpener.isDropAcceptable(DropTargetDropEvent)",2,1,n/a,10,2,1,7,3
"freemind.modes.ControllerAdapter.OpenAction.OpenAction(ControllerAdapter)",5,1,n/a,5,0,1,2,1
"freemind.modes.ControllerAdapter.OpenAction.actionPerformed(ActionEvent)",3,0,n/a,4,0,1,2,1
"freemind.modes.ControllerAdapter.SaveAction.SaveAction()",6,1,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.SaveAction.actionPerformed(ActionEvent)",10,0,n/a,11,1,1,7,2
"freemind.modes.ControllerAdapter.SaveAsAction.SaveAsAction()",5,1,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.SaveAsAction.actionPerformed(ActionEvent)",3,0,n/a,4,0,1,2,1
"freemind.modes.ControllerAdapter.add(JMenu,Action)",1,0,n/a,3,0,2,1,1
"freemind.modes.ControllerAdapter.add(JMenu,Action,String)",5,0,n/a,7,0,3,3,1
"freemind.modes.ControllerAdapter.add(StructuredMenuHolder,String,Action,String)",6,9,n/a,15,1,4,6,2
"freemind.modes.ControllerAdapter.addCheckBox(StructuredMenuHolder,String,Action,String)",6,1,n/a,15,1,4,4,2
"freemind.modes.ControllerAdapter.addRadioItem(StructuredMenuHolder,String,Action,String,boolean)",7,1,n/a,11,1,5,5,2
"freemind.modes.ControllerAdapter.centerNode(MindMapNode)",8,1,n/a,13,1,1,8,3
"freemind.modes.ControllerAdapter.centerNode(NodeView)",4,1,n/a,5,0,1,2,1
"freemind.modes.ControllerAdapter.changeSelection(NodeView,boolean)",3,2,n/a,10,2,2,5,3
"freemind.modes.ControllerAdapter.close(boolean,MapModuleManager)",43,0,n/a,57,3,2,35,11
"freemind.modes.ControllerAdapter.copy()",3,2,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.copy(List<MindMapNode>,boolean)",13,1,n/a,18,1,2,8,3
"freemind.modes.ControllerAdapter.copy(MindMapNode,boolean)",1,1,n/a,3,0,2,1,1
"freemind.modes.ControllerAdapter.copySingle()",3,1,n/a,4,0,0,2,1
"freemind.modes.ControllerAdapter.createForNodeIdsFlavor(List<MindMapNode>,boolean)",3,1,n/a,8,1,2,4,2
"freemind.modes.ControllerAdapter.createForNodesFlavor(List<MindMapNode>,boolean)",2,1,n/a,15,2,2,8,3
"freemind.modes.ControllerAdapter.deregisterNodeLifetimeListener(NodeLifetimeListener)",1,0,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.deregisterNodeSelectionListener(NodeSelectionListener)",1,0,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.displayNode(MindMapNode)",1,3,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.displayNode(MindMapNode,ArrayList<MindMapNode>)",5,1,n/a,18,2,2,9,4
"freemind.modes.ControllerAdapter.fireNodePostDeleteEvent(MindMapNode,MindMapNode)",1,0,n/a,6,1,2,2,2
"freemind.modes.ControllerAdapter.fireNodePreDeleteEvent(MindMapNode)",1,0,n/a,6,1,1,2,2
"freemind.modes.ControllerAdapter.firePreSaveEvent(MindMapNode)",2,0,n/a,7,1,1,3,2
"freemind.modes.ControllerAdapter.fireRecursiveNodeCreateEvent(MindMapNode)",5,2,n/a,10,1,1,6,3
"freemind.modes.ControllerAdapter.getController()",2,80,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getDefaultFont()",2,0,n/a,7,0,0,1,1
"freemind.modes.ControllerAdapter.getFileChooser()",2,4,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getFileChooser(FileFilter)",5,4,n/a,16,1,1,8,4
"freemind.modes.ControllerAdapter.getFileFilter()",0,1,n/a,7,0,0,1,1
"freemind.modes.ControllerAdapter.getFileNameProposal()",3,1,n/a,18,0,0,1,1
"freemind.modes.ControllerAdapter.getFontThroughMap(Font)",2,0,n/a,7,0,1,1,1
"freemind.modes.ControllerAdapter.getFrame()",2,83,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getLeftToolBar()",0,0,n/a,6,0,0,1,1
"freemind.modes.ControllerAdapter.getLinkShortText(MindMapNode)",6,0,n/a,14,2,1,9,4
"freemind.modes.ControllerAdapter.getMap()",0,49,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getMapModule()",3,0,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.getMapMouseMotionListener()",2,4,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.getMapMouseWheelListener()",2,2,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.getMapsParentFile()",9,2,n/a,7,1,0,3,4
"freemind.modes.ControllerAdapter.getMode()",0,5,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getModeController()",0,2,n/a,7,0,0,1,1
"freemind.modes.ControllerAdapter.getModeToolBar()",0,0,n/a,6,0,0,1,1
"freemind.modes.ControllerAdapter.getModel()",0,16,n/a,6,0,0,1,1
"freemind.modes.ControllerAdapter.getNodeDragListener()",2,0,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.getNodeDropListener()",2,2,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.getNodeFromID(String)",6,3,n/a,12,1,1,4,2
"freemind.modes.ControllerAdapter.getNodeID(MindMapNode)",3,3,n/a,4,0,1,1,1
"freemind.modes.ControllerAdapter.getNodeKeyListener()",2,4,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.getNodeLifetimeListeners()",0,0,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getNodeMotionListener()",2,2,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.getNodeMouseMotionListener()",2,4,n/a,4,0,0,1,1
"freemind.modes.ControllerAdapter.getNodeView(MindMapNode)",2,6,n/a,4,0,1,1,1
"freemind.modes.ControllerAdapter.getPopupForModel(Object)",0,0,n/a,4,0,1,1,1
"freemind.modes.ControllerAdapter.getProperty(String)",2,2,n/a,7,0,1,1,1
"freemind.modes.ControllerAdapter.getRegisteredMouseWheelEventHandler()",1,1,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getResource(String)",2,12,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.getResourceString(String)",2,0,n/a,7,0,1,1,1
"freemind.modes.ControllerAdapter.getRootNode()",2,3,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getSelected()",2,41,n/a,6,0,0,4,2
"freemind.modes.ControllerAdapter.getSelectedView()",3,10,n/a,5,0,0,3,2
"freemind.modes.ControllerAdapter.getSelecteds()",8,28,n/a,18,2,0,7,3
"freemind.modes.ControllerAdapter.getSelectedsByDepth()",2,0,n/a,6,0,0,3,1
"freemind.modes.ControllerAdapter.getSelectionColor()",0,0,n/a,5,0,0,1,1
"freemind.modes.ControllerAdapter.getText(String)",2,69,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.getView()",0,77,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.getViewAbstraction()",1,0,n/a,7,0,0,1,1
"freemind.modes.ControllerAdapter.getViewFeedback()",0,0,n/a,7,0,0,1,1
"freemind.modes.ControllerAdapter.handleLoadingException(Exception)",16,4,n/a,16,2,1,9,4
"freemind.modes.ControllerAdapter.isBlocked()",0,3,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.load(File)",8,7,n/a,16,1,1,6,3
"freemind.modes.ControllerAdapter.load(URL)",15,7,n/a,22,1,1,11,2
"freemind.modes.ControllerAdapter.loadInternally(URL,MapAdapter)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ControllerAdapter.loadURL()",3,5,n/a,6,1,0,3,2
"freemind.modes.ControllerAdapter.loadURL(String)",50,2,n/a,102,4,1,40,12
"freemind.modes.ControllerAdapter.newMap()",6,0,n/a,7,0,0,5,1
"freemind.modes.ControllerAdapter.newMap(MindMap,ModeController)",4,6,n/a,5,0,2,2,1
"freemind.modes.ControllerAdapter.newModel(ModeController)",1,2,n/a,10,0,1,1,1
"freemind.modes.ControllerAdapter.newNode(Object,MindMap)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ControllerAdapter.nodeChanged(MindMapNode)",2,1,n/a,8,0,1,2,1
"freemind.modes.ControllerAdapter.nodeRefresh(MindMapNode)",1,3,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.nodeRefresh(MindMapNode,boolean)",9,2,n/a,15,2,2,6,3
"freemind.modes.ControllerAdapter.nodeStructureChanged(MindMapNode)",2,1,n/a,5,0,1,1,1
"freemind.modes.ControllerAdapter.onFocusNode(NodeView)",6,2,n/a,16,2,1,7,4
"freemind.modes.ControllerAdapter.onLostFocusNode(NodeView)",6,2,n/a,16,2,1,7,4
"freemind.modes.ControllerAdapter.onViewCreatedHook(NodeView)",3,0,n/a,5,1,1,2,2
"freemind.modes.ControllerAdapter.onViewRemovedHook(NodeView)",3,0,n/a,5,1,1,2,2
"freemind.modes.ControllerAdapter.open()",11,1,n/a,26,3,0,17,5
"freemind.modes.ControllerAdapter.refreshMap()",3,0,n/a,4,0,0,2,1
"freemind.modes.ControllerAdapter.refreshMapFrom(MindMapNode)",4,2,n/a,6,1,1,3,2
"freemind.modes.ControllerAdapter.registerNodeLifetimeListener(NodeLifetimeListener,boolean)",3,0,n/a,9,1,2,3,2
"freemind.modes.ControllerAdapter.registerNodeSelectionListener(NodeSelectionListener,boolean)",10,1,n/a,18,3,2,9,5
"freemind.modes.ControllerAdapter.restoreMapsLastState(ModeController,MapAdapter)",26,1,n/a,33,3,2,20,4
"freemind.modes.ControllerAdapter.save()",10,4,n/a,9,1,0,5,4
"freemind.modes.ControllerAdapter.save(File)",28,2,n/a,38,2,1,19,6
"freemind.modes.ControllerAdapter.saveAs()",39,2,n/a,58,3,0,30,9
"freemind.modes.ControllerAdapter.select(MindMapNode,List<MindMapNode>)",14,1,n/a,19,3,2,13,5
"freemind.modes.ControllerAdapter.select(NodeView)",2,5,n/a,4,0,1,1,1
"freemind.modes.ControllerAdapter.selectBranch(NodeView,boolean)",4,1,n/a,4,0,2,2,1
"freemind.modes.ControllerAdapter.setAllActions(boolean)",6,4,n/a,10,0,1,3,1
"freemind.modes.ControllerAdapter.setBlocked(boolean)",0,8,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.setChosenDirectory(File)",0,0,n/a,10,0,1,1,1
"freemind.modes.ControllerAdapter.setMode(Mode)",0,1,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.setModel(MapAdapter)",0,0,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.setProperty(String,String)",2,0,n/a,5,0,2,1,1
"freemind.modes.ControllerAdapter.setSaved(boolean)",4,4,n/a,6,1,1,3,2
"freemind.modes.ControllerAdapter.setToolTip(MindMapNode,String,String)",2,0,n/a,4,0,3,2,1
"freemind.modes.ControllerAdapter.setView(MapView)",0,0,n/a,3,0,1,1,1
"freemind.modes.ControllerAdapter.setVisible(boolean)",4,0,n/a,17,2,1,6,3
"freemind.modes.ControllerAdapter.setWaitingCursor(boolean)",2,4,n/a,6,0,1,1,1
"freemind.modes.ControllerAdapter.showPopupMenu(MouseEvent)",8,0,n/a,11,2,1,6,3
"freemind.modes.ControllerAdapter.shutdownController()",3,2,n/a,7,0,0,2,1
"freemind.modes.ControllerAdapter.startupController()",10,2,n/a,14,1,0,5,2
"freemind.modes.ControllerAdapter.updateMapModuleName()",3,0,n/a,3,0,0,1,1
"freemind.modes.ControllerAdapter.updateNode(MindMapNode)",1,2,n/a,8,1,1,2,2
"freemind.modes.ControllerAdapter.updatePopupMenu(StructuredMenuHolder)",0,0,n/a,8,0,1,0,1
"freemind.modes.EdgeAdapter.EdgeAdapter(MindMapNode,MapFeedback)",3,3,n/a,8,1,2,5,2
"freemind.modes.EdgeAdapter.EdgeAdapterListener.propertyChanged(String,String,String)",3,3,n/a,9,1,3,4,3
"freemind.modes.EdgeAdapter.getColor()",6,0,n/a,9,2,0,5,3
"freemind.modes.EdgeAdapter.getRealColor()",0,2,n/a,3,0,0,1,1
"freemind.modes.EdgeAdapter.getRealWidth()",0,2,n/a,3,0,0,1,1
"freemind.modes.EdgeAdapter.getSource()",1,3,n/a,3,0,0,1,1
"freemind.modes.EdgeAdapter.getStandardColor()",0,1,n/a,3,0,0,1,1
"freemind.modes.EdgeAdapter.getStandardColorPropertyString()",0,0,n/a,3,0,0,1,1
"freemind.modes.EdgeAdapter.getStandardStyle()",0,0,n/a,3,0,0,1,1
"freemind.modes.EdgeAdapter.getStandardStylePropertyString()",0,1,n/a,3,0,0,1,1
"freemind.modes.EdgeAdapter.getStyle()",8,1,n/a,9,2,0,5,3
"freemind.modes.EdgeAdapter.getStyleAsInt()",6,0,n/a,17,1,0,10,5
"freemind.modes.EdgeAdapter.getWidth()",5,0,n/a,9,2,0,5,3
"freemind.modes.EdgeAdapter.hasStyle()",0,0,n/a,3,0,0,1,1
"freemind.modes.EdgeAdapter.save()",8,0,n/a,20,2,0,13,8
"freemind.modes.EdgeAdapter.setStandardColor(Color)",0,0,n/a,3,0,1,1,1
"freemind.modes.EdgeAdapter.setStandardStyle(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.EdgeAdapter.setWidth(int)",0,1,n/a,3,0,1,1,1
"freemind.modes.ExtendedMapFeedback.close(boolean)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.ExtendedMapFeedback.copy(List<MindMapNode>,boolean)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.ExtendedMapFeedback.copy(MindMapNode,boolean)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.ExtendedMapFeedback.doTransaction(String,ActionPair)",n/a,1,1,n/a,n/a,2,n/a,n/a
"freemind.modes.ExtendedMapFeedback.getActionRegistry()",n/a,1,1,n/a,n/a,0,n/a,n/a
"freemind.modes.ExtendedMapFeedback.getActorFactory()",n/a,1,1,n/a,n/a,0,n/a,n/a
"freemind.modes.ExtendedMapFeedback.getHookFactory()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.modes.ExtendedMapFeedback.getNodeFromID(String)",n/a,1,1,n/a,n/a,1,n/a,n/a
"freemind.modes.ExtendedMapFeedback.getNodeID(MindMapNode)",n/a,1,1,n/a,n/a,1,n/a,n/a
"freemind.modes.ExtendedMapFeedback.getSelected()",n/a,1,1,n/a,n/a,0,n/a,n/a
"freemind.modes.ExtendedMapFeedback.insertNodeInto(MindMapNode,MindMapNode,int)",n/a,0,0,n/a,n/a,3,n/a,n/a
"freemind.modes.ExtendedMapFeedback.load(File)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.ExtendedMapFeedback.newNode(Object,MindMap)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ExtendedMapFeedback.nodeStyleChanged(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ExtendedMapFeedback.removeNodeFromParent(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ExtendedMapFeedback.select(MindMapNode,List<MindMapNode>)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.ExtendedMapFeedback.setWaitingCursor(boolean)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.ExtendedMapFeedbackAdapter.DummyTransferable.getTransferData(DataFlavor)",1,0,n/a,5,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.DummyTransferable.getTransferDataFlavors()",0,0,n/a,4,0,0,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.DummyTransferable.isDataFlavorSupported(DataFlavor)",0,0,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.ExtendedMapFeedbackAdapter()",7,0,n/a,10,0,0,4,1
"freemind.modes.ExtendedMapFeedbackAdapter.addAttribute(MindMapNode,Attribute)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addHook(MindMapNode,List<MindMapNode>,String,Properties)",3,0,n/a,5,0,4,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addIcon(MindMapNode,MindIcon)",2,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addLink(MindMapNode,MindMapNode)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addNewNode(MindMapNode,int,boolean)",2,0,n/a,5,0,3,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.applyPattern(MindMapNode,Pattern)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.blendNodeColor(MindMapNode)",1,0,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.changeArrowsOfArrowLink(MindMapArrowLink,boolean,boolean)",3,0,n/a,6,0,3,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.close(boolean)",0,0,n/a,3,0,1,0,1
"freemind.modes.ExtendedMapFeedbackAdapter.copy(List<MindMapNode>,boolean)",1,0,n/a,7,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.copy(MindMapNode,boolean)",1,0,n/a,3,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.cut()",3,0,n/a,4,0,0,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.cut(List<MindMapNode>)",3,1,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.deleteNode(MindMapNode)",2,0,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.doTransaction(String,ActionPair)",1,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.edit(KeyEvent,boolean,boolean)",0,0,n/a,3,0,3,0,1
"freemind.modes.ExtendedMapFeedbackAdapter.getActionRegistry()",0,2,n/a,4,0,0,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.getActorFactory()",0,27,n/a,4,0,0,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.getHookFactory()",2,0,n/a,10,1,0,4,2
"freemind.modes.ExtendedMapFeedbackAdapter.getNodeFromID(String)",6,0,n/a,13,1,1,4,2
"freemind.modes.ExtendedMapFeedbackAdapter.getNodeID(MindMapNode)",3,0,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.getSelected()",0,0,n/a,4,0,0,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.insertAttribute(MindMapNode,int,Attribute)",3,0,n/a,5,0,3,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.insertNodeInto(MindMapNode,MindMapNode,int)",2,0,n/a,5,0,3,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.load(File)",0,0,n/a,8,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.moveNodePosition(MindMapNode,int,int,int)",3,0,n/a,5,0,4,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.moveNodes(MindMapNode,List<MindMapNode>,int)",3,0,n/a,4,0,3,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.newNode(Object,MindMap)",0,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.nodeStyleChanged(MindMapNode)",8,1,n/a,11,2,1,6,4
"freemind.modes.ExtendedMapFeedbackAdapter.paste(Transferable,MindMapNode,boolean,boolean)",2,0,n/a,5,0,4,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeAllIcons(MindMapNode)",2,0,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeAttribute(MindMapNode,int)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeHook(MindMapNode,List<MindMapNode>,String)",3,0,n/a,5,0,3,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeLastIcon(MindMapNode)",2,0,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeNodeFromParent(MindMapNode)",2,0,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeReference(MindMapLink)",3,0,n/a,4,0,1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.select(MindMapNode,List<MindMapNode>)",0,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setArrowLinkColor(MindMapLink,Color)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setArrowLinkEndPoints(MindMapArrowLink,Point,Point)",3,0,n/a,6,0,3,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setAttribute(MindMapNode,int,Attribute)",3,0,n/a,5,0,3,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setBold(MindMapNode,boolean)",2,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setCloud(MindMapNode,boolean)",2,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setCloudColor(MindMapNode,Color)",2,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setEdgeColor(MindMapNode,Color)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setEdgeStyle(MindMapNode,String)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setEdgeWidth(MindMapNode,int)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setFolded(MindMapNode,boolean)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setFontFamily(MindMapNode,String)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setFontSize(MindMapNode,String)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setItalic(MindMapNode,boolean)",2,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setLink(MindMapNode,String)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNodeBackgroundColor(MindMapNode,Color)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNodeColor(MindMapNode,Color)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNodeStyle(MindMapNode,String)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNodeText(MindMapNode,String)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNoteText(MindMapNode,String)",3,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setStrikethrough(MindMapNode,boolean)",2,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setWaitingCursor(boolean)",0,0,n/a,6,0,1,0,1
"freemind.modes.ExtendedMapFeedbackAdapter.toggleFolded()",6,0,n/a,4,0,0,1,1
"freemind.modes.ExtendedMapFeedbackImpl.copy(MindMapNode,boolean)",8,0,n/a,19,1,2,5,2
"freemind.modes.ExtendedMapFeedbackImpl.getDefaultFont()",2,0,n/a,7,0,0,4,1
"freemind.modes.ExtendedMapFeedbackImpl.getMap()",0,1,n/a,4,0,0,1,1
"freemind.modes.ExtendedMapFeedbackImpl.newNode(Object,MindMap)",1,0,n/a,4,0,2,1,1
"freemind.modes.ExtendedMapFeedbackImpl.setMap(MindMap)",0,0,n/a,3,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.DirFilter.accept(File)",1,0,n/a,3,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.DirFilter.getDescription()",0,0,n/a,6,0,0,1,1
"freemind.modes.FreeMindAwtFileDialog.FileAndDirFilter.accept(File)",2,0,n/a,3,0,1,1,2
"freemind.modes.FreeMindAwtFileDialog.FileAndDirFilter.getDescription()",0,0,n/a,6,0,0,1,1
"freemind.modes.FreeMindAwtFileDialog.FileOnlyFilter.accept(File)",1,0,n/a,3,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.FileOnlyFilter.getDescription()",0,0,n/a,6,0,0,1,1
"freemind.modes.FreeMindAwtFileDialog.FreeMindAwtFileDialog()",8,2,n/a,13,1,0,6,2
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter.FreeMindFilenameFilter()",0,1,n/a,5,0,0,0,1
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter.accept(File,String)",3,0,n/a,4,0,2,2,2
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter.setCustomFilter(FileFilter)",0,1,n/a,3,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter.setPrincipalFilter(FileFilter)",0,4,n/a,3,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.NullFilter.accept(File)",0,0,n/a,6,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.NullFilter.getDescription()",0,0,n/a,6,0,0,1,1
"freemind.modes.FreeMindAwtFileDialog.addChoosableFileFilter(FileFilter)",1,1,n/a,6,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.addChoosableFileFilterAsDefault(FileFilter)",1,0,n/a,6,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.callDirectoryListener()",6,2,n/a,13,3,0,5,4
"freemind.modes.FreeMindAwtFileDialog.getReturnValue()",1,2,n/a,3,0,0,1,2
"freemind.modes.FreeMindAwtFileDialog.getSelectedFile()",3,3,n/a,6,0,0,1,1
"freemind.modes.FreeMindAwtFileDialog.getSelectedFiles()",1,0,n/a,6,0,0,1,1
"freemind.modes.FreeMindAwtFileDialog.isMultiSelectionEnabled()",0,0,n/a,6,0,0,1,1
"freemind.modes.FreeMindAwtFileDialog.main(String[])",22,0,n/a,15,0,1,13,1
"freemind.modes.FreeMindAwtFileDialog.registerDirectoryResultListener(DirectoryResultListener)",0,0,n/a,7,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.setCurrentDirectory(File)",3,0,n/a,10,1,1,4,2
"freemind.modes.FreeMindAwtFileDialog.setDialogTitle(String)",1,0,n/a,6,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.setFileSelectionMode(int)",10,1,n/a,21,1,1,15,5
"freemind.modes.FreeMindAwtFileDialog.setMultiSelectionEnabled(boolean)",1,0,n/a,8,1,1,2,2
"freemind.modes.FreeMindAwtFileDialog.setSelectedFile(File)",2,0,n/a,6,0,1,1,1
"freemind.modes.FreeMindAwtFileDialog.showOpenDialog(Component)",4,1,n/a,9,0,1,4,1
"freemind.modes.FreeMindAwtFileDialog.showSaveDialog(Component)",4,1,n/a,9,0,1,4,1
"freemind.modes.FreeMindFileDialog.DirectoryResultListener.setChosenDirectory(File)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.addChoosableFileFilter(FileFilter)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.addChoosableFileFilterAsDefault(FileFilter)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.getSelectedFile()",n/a,8,0,n/a,n/a,0,n/a,n/a
"freemind.modes.FreeMindFileDialog.getSelectedFiles()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.FreeMindFileDialog.isMultiSelectionEnabled()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.FreeMindFileDialog.registerDirectoryResultListener(DirectoryResultListener)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.setCurrentDirectory(File)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.setDialogTitle(String)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.setFileSelectionMode(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.setMultiSelectionEnabled(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.setSelectedFile(File)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.showOpenDialog(Component)",n/a,5,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindFileDialog.showSaveDialog(Component)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.modes.FreeMindJFileDialog.addChoosableFileFilterAsDefault(FileFilter)",2,0,n/a,7,0,1,2,1
"freemind.modes.FreeMindJFileDialog.callDirectoryListener(int)",4,2,n/a,9,2,1,4,4
"freemind.modes.FreeMindJFileDialog.registerDirectoryResultListener(DirectoryResultListener)",0,0,n/a,7,0,1,1,1
"freemind.modes.FreeMindJFileDialog.showOpenDialog(Component)",2,0,n/a,9,0,1,3,1
"freemind.modes.FreeMindJFileDialog.showSaveDialog(Component)",2,0,n/a,8,0,1,3,1
"freemind.modes.FreemindAction.FreemindAction(String,ControllerAdapter)",1,1,n/a,8,0,2,1,1
"freemind.modes.FreemindAction.FreemindAction(String,Icon,ControllerAdapter)",5,1,n/a,13,1,3,4,2
"freemind.modes.FreemindAction.FreemindAction(String,String,ControllerAdapter)",5,1,n/a,12,0,3,1,2
"freemind.modes.FreemindAction.getControllerAdapter()",0,0,n/a,3,0,0,1,1
"freemind.modes.FreemindAction.isEnabled(JMenuItem,Action)",3,2,n/a,8,0,2,3,2
"freemind.modes.HistoryInformation.HistoryInformation()",2,0,n/a,8,0,0,3,1
"freemind.modes.HistoryInformation.HistoryInformation(Date,Date)",2,0,n/a,4,0,2,2,1
"freemind.modes.HistoryInformation.getCreatedAt()",1,0,n/a,3,0,0,1,1
"freemind.modes.HistoryInformation.getLastModifiedAt()",1,0,n/a,3,0,0,1,1
"freemind.modes.HistoryInformation.setCreatedAt(Date)",1,0,n/a,3,0,1,1,1
"freemind.modes.HistoryInformation.setLastModifiedAt(Date)",1,0,n/a,3,0,1,1,1
"freemind.modes.IconInformation.getDescription()",n/a,3,3,n/a,n/a,0,n/a,n/a
"freemind.modes.IconInformation.getIcon()",n/a,2,3,n/a,n/a,0,n/a,n/a
"freemind.modes.IconInformation.getKeyStroke()",n/a,1,3,n/a,n/a,0,n/a,n/a
"freemind.modes.IconInformation.getKeystrokeResourceName()",n/a,2,3,n/a,n/a,0,n/a,n/a
"freemind.modes.LineAdapter.LineAdapter(MindMapNode,MapFeedback)",1,0,n/a,9,0,2,4,1
"freemind.modes.LineAdapter.clone()",3,0,n/a,10,1,0,5,3
"freemind.modes.LineAdapter.getColor()",1,0,n/a,6,1,0,3,2
"freemind.modes.LineAdapter.getMapFeedback()",0,2,n/a,3,0,0,1,1
"freemind.modes.LineAdapter.getRealWidth()",1,0,n/a,6,0,0,1,1
"freemind.modes.LineAdapter.getStandardColor()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.LineAdapter.getStandardColorPropertyString()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.LineAdapter.getStandardStyle()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.LineAdapter.getStandardStylePropertyString()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.LineAdapter.getStyle()",1,0,n/a,6,1,0,3,2
"freemind.modes.LineAdapter.getTarget()",0,0,n/a,7,0,0,1,1
"freemind.modes.LineAdapter.getWidth()",0,1,n/a,5,0,0,3,2
"freemind.modes.LineAdapter.setColor(Color)",0,2,n/a,3,0,1,1,1
"freemind.modes.LineAdapter.setStandardColor(Color)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.LineAdapter.setStandardStyle(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.LineAdapter.setStyle(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.LineAdapter.setTarget(MindMapNode)",0,0,n/a,3,0,1,1,1
"freemind.modes.LineAdapter.setWidth(int)",0,0,n/a,3,0,1,1,1
"freemind.modes.LineAdapter.toString()",0,0,n/a,3,0,0,1,1
"freemind.modes.LineAdapter.updateStandards()",13,1,n/a,22,2,0,9,6
"freemind.modes.LinkAdapter.LinkAdapter(MindMapNode,MindMapNode,MapFeedback)",3,0,n/a,11,1,3,7,2
"freemind.modes.LinkAdapter.LinkAdapterListener.propertyChanged(String,String,String)",3,3,n/a,9,1,3,4,3
"freemind.modes.LinkAdapter.getDestinationLabel()",0,0,n/a,3,0,0,1,1
"freemind.modes.LinkAdapter.getReferenceText()",0,0,n/a,3,0,0,1,1
"freemind.modes.LinkAdapter.getSource()",0,0,n/a,3,0,0,1,1
"freemind.modes.LinkAdapter.getStandardColor()",0,0,n/a,3,0,0,1,1
"freemind.modes.LinkAdapter.getStandardColorPropertyString()",0,0,n/a,3,0,0,1,1
"freemind.modes.LinkAdapter.getStandardStyle()",0,0,n/a,3,0,0,1,1
"freemind.modes.LinkAdapter.getStandardStylePropertyString()",0,0,n/a,3,0,0,1,1
"freemind.modes.LinkAdapter.getUniqueId()",0,0,n/a,6,0,0,1,1
"freemind.modes.LinkAdapter.setDestinationLabel(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.LinkAdapter.setReferenceText(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.LinkAdapter.setSource(MindMapNode)",0,0,n/a,3,0,1,1,1
"freemind.modes.LinkAdapter.setStandardColor(Color)",0,0,n/a,3,0,1,1,1
"freemind.modes.LinkAdapter.setStandardStyle(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.LinkAdapter.setUniqueId(String)",0,0,n/a,7,0,1,1,1
"freemind.modes.MapAdapter.DontAskUserBeforeUpdateAdapter.askUserForUpdate()",0,0,n/a,7,0,0,1,1
"freemind.modes.MapAdapter.FileChangeInspectorTimerTask.run()",7,0,n/a,30,4,0,15,6
"freemind.modes.MapAdapter.MapAdapter(MapFeedback)",10,3,n/a,14,1,1,7,2
"freemind.modes.MapAdapter.addIcons(SortedMapListModel,MindMapNode)",6,2,n/a,12,1,2,5,2
"freemind.modes.MapAdapter.cancelFileChangeObservationTimer()",1,2,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.changeRoot(MindMapNode)",17,0,n/a,37,3,1,20,6
"freemind.modes.MapAdapter.createNodeTreeFromXml(Reader,HashMap<String, NodeAdapter>)",6,1,n/a,13,0,2,5,1
"freemind.modes.MapAdapter.deregisterMapSourceChangedObserver(MapSourceChangedObserver)",1,0,n/a,5,0,1,2,1
"freemind.modes.MapAdapter.destroy()",3,1,n/a,7,0,0,2,1
"freemind.modes.MapAdapter.fireTreeNodesChanged(Object,Object[],int[],Object[])",5,1,n/a,13,0,4,5,1
"freemind.modes.MapAdapter.fireTreeNodesChanged(Object,Object[],int[],Object[],Object[],TreeModelEvent)",2,2,n/a,13,2,6,8,4
"freemind.modes.MapAdapter.fireTreeNodesInserted(Object,Object[],int[],Object[])",5,0,n/a,28,0,4,5,1
"freemind.modes.MapAdapter.fireTreeNodesInserted(Object,Object[],int[],Object[],Object[],TreeModelEvent)",2,2,n/a,13,2,6,8,4
"freemind.modes.MapAdapter.fireTreeNodesRemoved(Object,Object[],int[],Object[])",5,0,n/a,13,0,4,5,1
"freemind.modes.MapAdapter.fireTreeNodesRemoved(Object,Object[],int[],Object[],Object[],TreeModelEvent)",2,2,n/a,13,2,6,8,4
"freemind.modes.MapAdapter.fireTreeStructureChanged(Object,Object[],int[],Object[])",5,0,n/a,13,0,4,5,1
"freemind.modes.MapAdapter.fireTreeStructureChanged(Object,Object[],int[],Object[],Object[],TreeModelEvent)",2,2,n/a,13,2,6,8,4
"freemind.modes.MapAdapter.getAsHTML(List<MindMapNode>)",0,0,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.getAsPlainText(List<MindMapNode>)",0,0,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.getAsRTF(List<MindMapNode>)",0,0,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.getFile()",0,8,n/a,6,0,0,1,1
"freemind.modes.MapAdapter.getFileTime()",2,2,n/a,11,1,0,7,2
"freemind.modes.MapAdapter.getFilter()",0,0,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.getIcons()",3,0,n/a,8,0,0,4,1
"freemind.modes.MapAdapter.getLinkRegistry()",0,1,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.getMapFeedback()",0,6,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.getNumberOfChangesSinceLastSave()",0,3,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.getRestorable()",0,0,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.getRootNode()",1,5,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.getText(String)",2,1,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.getURL()",3,0,n/a,6,0,0,1,2
"freemind.modes.MapAdapter.insertNodeInto(MindMapNode,MindMapNode,int)",2,0,n/a,10,0,3,2,1
"freemind.modes.MapAdapter.isReadOnly()",0,0,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.isSaved()",0,0,n/a,3,0,0,1,1
"freemind.modes.MapAdapter.loadTree(ReaderCreator,AskUserBeforeUpdateCallback)",25,1,n/a,56,3,2,34,10
"freemind.modes.MapAdapter.nodeChanged(TreeNode)",1,1,n/a,6,0,1,1,1
"freemind.modes.MapAdapter.nodeChangedInternal(TreeNode)",2,0,n/a,9,1,1,2,2
"freemind.modes.MapAdapter.nodeRefresh(TreeNode)",1,0,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.registerMapSourceChangedObserver(MapSourceChangedObserver,long)",4,0,n/a,14,2,2,5,4
"freemind.modes.MapAdapter.removeNodeFromParent(MindMapNode)",1,0,n/a,7,0,1,1,1
"freemind.modes.MapAdapter.removeNodes(MindMapNode)",6,2,n/a,11,1,1,6,2
"freemind.modes.MapAdapter.setFile(File)",0,2,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.setFileTime()",1,2,n/a,7,0,0,1,1
"freemind.modes.MapAdapter.setFilter(Filter)",0,0,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.setReadOnly(boolean)",0,4,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.setRoot(MindMapNode)",1,8,n/a,3,0,1,1,1
"freemind.modes.MapAdapter.setSaved(boolean)",0,0,n/a,19,2,1,8,3
"freemind.modes.MapAdapter.tryToLock(File)",0,1,n/a,10,0,1,1,1
"freemind.modes.MapFeedback.createNodeHook(String,MindMapNode)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MapFeedback.fireNodePostDeleteEvent(MindMapNode,MindMapNode)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MapFeedback.fireNodePreDeleteEvent(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.firePreSaveEvent(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.fireRecursiveNodeCreateEvent(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.getDefaultFont()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MapFeedback.getFontThroughMap(Font)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.getIntProperty(String,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MapFeedback.getMap()",n/a,6,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MapFeedback.getProperty(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.getResourceString(String)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.getViewAbstraction()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MapFeedback.getViewFeedback()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MapFeedback.invokeHooksRecursively(MindMapNode,MindMap)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MapFeedback.nodeChanged(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.nodeRefresh(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.out(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedback.paste(MindMapNode,MindMapNode)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MapFeedback.setProperty(String,String)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MapFeedback.sortNodesByDepth(List<MindMapNode>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MapFeedbackAdapter.MapFeedbackAdapter()",4,0,n/a,9,1,0,2,2
"freemind.modes.MapFeedbackAdapter.NodesDepthComparator.NodesDepthComparator()",0,1,n/a,2,0,0,0,1
"freemind.modes.MapFeedbackAdapter.NodesDepthComparator.compare(MindMapNode,MindMapNode)",9,0,n/a,14,0,2,10,4
"freemind.modes.MapFeedbackAdapter.changeSelection(NodeView,boolean)",0,0,n/a,3,0,2,0,1
"freemind.modes.MapFeedbackAdapter.createNodeHook(String,MindMapNode)",4,0,n/a,13,0,2,4,1
"freemind.modes.MapFeedbackAdapter.deRegisterMouseWheelEventHandler(MouseWheelEventHandler)",0,0,n/a,3,0,1,0,1
"freemind.modes.MapFeedbackAdapter.fireNodePostDeleteEvent(MindMapNode,MindMapNode)",0,0,n/a,6,0,2,0,1
"freemind.modes.MapFeedbackAdapter.fireNodePreDeleteEvent(MindMapNode)",0,0,n/a,10,0,1,0,1
"freemind.modes.MapFeedbackAdapter.firePreSaveEvent(MindMapNode)",0,0,n/a,9,0,1,0,1
"freemind.modes.MapFeedbackAdapter.fireRecursiveNodeCreateEvent(MindMapNode)",0,0,n/a,6,0,1,0,1
"freemind.modes.MapFeedbackAdapter.getDefaultFont()",0,0,n/a,9,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getFontThroughMap(Font)",6,0,n/a,7,1,1,3,2
"freemind.modes.MapFeedbackAdapter.getIntProperty(String,int)",2,0,n/a,7,0,2,1,1
"freemind.modes.MapFeedbackAdapter.getMapMouseMotionListener()",0,0,n/a,4,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getMapMouseWheelListener()",0,0,n/a,4,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getNodeDragListener()",0,0,n/a,4,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getNodeDropListener()",0,0,n/a,4,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getNodeKeyListener()",0,0,n/a,4,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getNodeMotionListener()",0,0,n/a,4,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getNodeMouseMotionListener()",0,0,n/a,4,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getNodeView(MindMapNode)",0,0,n/a,6,0,1,1,1
"freemind.modes.MapFeedbackAdapter.getProperty(String)",2,0,n/a,7,0,1,1,1
"freemind.modes.MapFeedbackAdapter.getResourceString(String)",2,0,n/a,9,0,1,1,1
"freemind.modes.MapFeedbackAdapter.getViewAbstraction()",0,0,n/a,7,0,0,1,1
"freemind.modes.MapFeedbackAdapter.getViewFeedback()",0,0,n/a,7,0,0,1,1
"freemind.modes.MapFeedbackAdapter.invokeHooksRecursively(MindMapNode,MindMap)",10,1,n/a,19,1,2,8,3
"freemind.modes.MapFeedbackAdapter.nodeChanged(MindMapNode)",3,0,n/a,11,1,1,2,2
"freemind.modes.MapFeedbackAdapter.nodeRefresh(MindMapNode)",0,0,n/a,8,0,1,0,1
"freemind.modes.MapFeedbackAdapter.onFocusNode(NodeView)",0,0,n/a,3,0,1,0,1
"freemind.modes.MapFeedbackAdapter.onLostFocusNode(NodeView)",0,0,n/a,3,0,1,0,1
"freemind.modes.MapFeedbackAdapter.onViewCreatedHook(NodeView)",0,0,n/a,3,0,1,0,1
"freemind.modes.MapFeedbackAdapter.onViewRemovedHook(NodeView)",0,0,n/a,3,0,1,0,1
"freemind.modes.MapFeedbackAdapter.out(String)",0,0,n/a,8,0,1,0,1
"freemind.modes.MapFeedbackAdapter.paste(MindMapNode,MindMapNode)",0,0,n/a,9,0,2,0,1
"freemind.modes.MapFeedbackAdapter.registerMouseWheelEventHandler(MouseWheelEventHandler)",0,0,n/a,3,0,1,0,1
"freemind.modes.MapFeedbackAdapter.select(NodeView)",0,0,n/a,5,0,1,0,1
"freemind.modes.MapFeedbackAdapter.setFolded(MindMapNode,boolean)",0,0,n/a,3,0,2,0,1
"freemind.modes.MapFeedbackAdapter.setProperty(String,String)",3,0,n/a,7,0,2,1,1
"freemind.modes.MapFeedbackAdapter.sortNodesByDepth(List<MindMapNode>)",3,0,n/a,4,0,1,2,1
"freemind.modes.MindIcon.MindIcon(String)",1,1,n/a,4,0,1,2,1
"freemind.modes.MindIcon.MindIcon(String,ImageIcon)",1,1,n/a,6,0,2,2,1
"freemind.modes.MindIcon.compareTo(MindIcon)",2,0,n/a,10,0,1,3,3
"freemind.modes.MindIcon.factory(String)",4,15,n/a,8,1,1,5,2
"freemind.modes.MindIcon.factory(String,ImageIcon)",6,2,n/a,11,1,2,6,2
"freemind.modes.MindIcon.getAllIconNames()",7,4,n/a,12,1,0,8,3
"freemind.modes.MindIcon.getDescription()",4,6,n/a,4,0,0,2,1
"freemind.modes.MindIcon.getIcon()",17,13,n/a,31,4,0,16,8
"freemind.modes.MindIcon.getIconBaseFileName()",1,1,n/a,3,0,0,1,1
"freemind.modes.MindIcon.getIconFileName()",2,2,n/a,3,0,0,1,1
"freemind.modes.MindIcon.getIconsPath()",0,1,n/a,3,0,0,1,1
"freemind.modes.MindIcon.getKeyStroke()",0,0,n/a,3,0,0,1,1
"freemind.modes.MindIcon.getKeystrokeResourceName()",0,2,n/a,3,0,0,1,1
"freemind.modes.MindIcon.getName()",0,16,n/a,10,0,0,1,2
"freemind.modes.MindIcon.getNumber()",2,2,n/a,9,1,0,5,3
"freemind.modes.MindIcon.getRendererComponent()",2,2,n/a,8,1,0,3,2
"freemind.modes.MindIcon.getUnscaledIcon()",1,1,n/a,7,1,0,4,2
"freemind.modes.MindIcon.setIcon(ImageIcon)",0,2,n/a,9,0,1,1,1
"freemind.modes.MindIcon.setName(String)",0,2,n/a,27,0,1,2,1
"freemind.modes.MindIcon.toString()",0,0,n/a,3,0,0,1,1
"freemind.modes.MindMap.AskUserBeforeUpdateCallback.askUserForUpdate()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.MapSourceChangedObserver.mapSourceChanged(MindMap)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.changeRoot(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.createArrowLinkAdapter(NodeAdapter,NodeAdapter)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMap.createArrowLinkTarget(NodeAdapter,NodeAdapter)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMap.createCloudAdapter(NodeAdapter)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.createEdgeAdapter(NodeAdapter)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.createEncryptedNode(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.createNodeAdapter(MindMap,String)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMap.createNodeTreeFromXml(Reader,HashMap<String, NodeAdapter>)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMap.deregisterMapSourceChangedObserver(MapSourceChangedObserver)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.destroy()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getAsHTML(List<MindMapNode>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.getAsPlainText(List<MindMapNode>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.getAsRTF(List<MindMapNode>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.getFile()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getFilter()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getFilteredXml(Writer)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.getIcons()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getLinkRegistry()",n/a,5,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getMapFeedback()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getPathToRoot(TreeNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.getRestorable()",n/a,4,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getRootNode()",n/a,6,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getURL()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.getXml(Writer)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.insertNodeInto(MindMapNode,MindMapNode,int)",n/a,1,0,n/a,n/a,3,n/a,n/a
"freemind.modes.MindMap.isReadOnly()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.isSaved()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMap.loadTree(ReaderCreator,AskUserBeforeUpdateCallback)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMap.nodeChanged(TreeNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.nodeRefresh(TreeNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.nodeStructureChanged(TreeNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.registerMapSourceChangedObserver(MapSourceChangedObserver,long)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMap.removeNodeFromParent(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.save(File)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.setFilter(Filter)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.setReadOnly(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMap.setSaved(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapArrowLink.changeInclination(MapView,int,int,int,int)",n/a,1,0,n/a,n/a,5,n/a,n/a
"freemind.modes.MindMapArrowLink.getEndArrow()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapArrowLink.getEndInclination()",n/a,10,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapArrowLink.getShowControlPointsFlag()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapArrowLink.getStartArrow()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapArrowLink.getStartInclination()",n/a,10,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapArrowLink.save()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapArrowLink.setEndInclination(Point)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapArrowLink.setStartInclination(Point)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapArrowLink.showControlPoints(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapCloud.changeIterativeLevel(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapCloud.getExteriorColor()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapCloud.getIterativeLevel()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapCloud.save()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapEdge.getStyleAsInt()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapEdge.hasStyle()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapEdge.save()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLine.clone()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLine.getColor()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLine.getRealWidth()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLine.getStyle()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLine.getWidth()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLine.setTarget(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapLine.toString()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLink.getDestinationLabel()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLink.getReferenceText()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLink.getSource()",n/a,5,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLink.getTarget()",n/a,4,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLink.getUniqueId()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapLinkRegistry.MindMapLinkRegistry()",9,3,n/a,14,1,0,7,2
"freemind.modes.MindMapLinkRegistry.SynchronousVector.add(MindMapLink)",7,0,n/a,17,2,1,8,3
"freemind.modes.MindMapLinkRegistry.SynchronousVector.removeElementAt(int)",7,0,n/a,17,2,1,8,3
"freemind.modes.MindMapLinkRegistry._registerLinkTarget(MindMapNode)",1,3,n/a,6,0,1,1,1
"freemind.modes.MindMapLinkRegistry._registerLinkTarget(MindMapNode,String)",6,2,n/a,20,1,2,9,3
"freemind.modes.MindMapLinkRegistry.deregisterLink(MindMapLink)",10,1,n/a,15,2,1,10,3
"freemind.modes.MindMapLinkRegistry.deregisterLinkTarget(MindMapNode)",12,1,n/a,22,1,1,15,4
"freemind.modes.MindMapLinkRegistry.generateUniqueID(String)",1,2,n/a,7,0,1,1,1
"freemind.modes.MindMapLinkRegistry.generateUniqueLinkId(String)",1,2,n/a,6,0,1,1,1
"freemind.modes.MindMapLinkRegistry.getAllLinks(MindMapNode)",5,1,n/a,9,0,1,4,1
"freemind.modes.MindMapLinkRegistry.getAllLinksFromMe(MindMapNode)",3,1,n/a,9,1,1,5,2
"freemind.modes.MindMapLinkRegistry.getAllLinksIntoMe(MindMapNode)",4,1,n/a,11,1,1,6,2
"freemind.modes.MindMapLinkRegistry.getAllSources(MindMapNode)",7,0,n/a,16,2,1,10,3
"freemind.modes.MindMapLinkRegistry.getAssignedLinksVector(String)",4,5,n/a,15,1,1,7,2
"freemind.modes.MindMapLinkRegistry.getLabel(MindMapNode)",1,0,n/a,3,0,1,1,1
"freemind.modes.MindMapLinkRegistry.getLinkForId(String)",2,0,n/a,10,1,1,3,2
"freemind.modes.MindMapLinkRegistry.getState(MindMapNode)",2,4,n/a,9,0,1,3,2
"freemind.modes.MindMapLinkRegistry.getTargetForId(String)",1,0,n/a,8,0,1,2,1
"freemind.modes.MindMapLinkRegistry.isTargetOfLocalHyperlinks(String)",1,0,n/a,3,0,1,1,1
"freemind.modes.MindMapLinkRegistry.registerLink(MindMapLink)",23,0,n/a,38,2,1,22,9
"freemind.modes.MindMapLinkRegistry.registerLinkTarget(MindMapNode)",1,1,n/a,3,0,1,1,1
"freemind.modes.MindMapLinkRegistry.registerLinkTarget(MindMapNode,String)",1,1,n/a,7,0,2,1,1
"freemind.modes.MindMapLinkRegistry.registerLocalHyperlinkId(String)",1,0,n/a,3,0,1,1,1
"freemind.modes.MindMapNode.addAttribute(Attribute)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.addHook(PermanentNodeHook)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.addIcon(MindIcon,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMapNode.addTreeModelListener(TreeModelListener)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.calcShiftY()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.childrenFolded()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.childrenUnfolded()",n/a,15,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getActivatedHooks()",n/a,13,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getAdditionalInfo()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getAttribute(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.getAttribute(int)",n/a,6,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.getAttributeKeyList()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getAttributePosition(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.getAttributeTableLength()",n/a,7,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getAttributes()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getBackgroundColor()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getBareStyle()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getChildPosition(MindMapNode)",n/a,6,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.getChildren()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getCloud()",n/a,15,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getColor()",n/a,8,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getEdge()",n/a,13,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getFilterInfo()",n/a,4,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getFont()",n/a,4,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getFontFamilyName()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getFontSize()",n/a,5,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getHGap()",n/a,8,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getHistoryInformation()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getHooks()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getIcons()",n/a,10,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getLink()",n/a,9,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getListeners()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getMap()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getMapFeedback()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getNodeLevel()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getNoteText()",n/a,5,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getObjectId(ModeController)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.getParentNode()",n/a,23,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getPath()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getPlainTextContent()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getShiftY()",n/a,7,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getShortText(ModeController)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.getStateIcons()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getStyle()",n/a,5,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getText()",n/a,8,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getToolTip()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getVGap()",n/a,6,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getXmlNoteText()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.getXmlText()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.hasChildren()",n/a,8,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.hasExactlyOneVisibleChild()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.hasFoldedParents()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.hasStyle()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.hasVisibleChilds()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.insertAttribute(int,Attribute)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMapNode.invokeHook(NodeHook)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.isBold()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isDescendantOf(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.isDescendantOfOrEqual(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.isFolded()",n/a,16,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isItalic()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isLeft()",n/a,9,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isNewChildLeft()",n/a,4,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isRoot()",n/a,29,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isStrikethrough()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isUnderlined()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isVisible()",n/a,7,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.isWriteable()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.removeAllHooks()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.removeAttribute(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.removeHook(PermanentNodeHook)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.removeIcon(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.removeTreeModelListener(TreeModelListener)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.save(Writer,MindMapLinkRegistry,boolean,boolean)",n/a,1,0,n/a,n/a,4,n/a,n/a
"freemind.modes.MindMapNode.setAdditionalInfo(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setAttribute(int,Attribute)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMapNode.setBackgroundColor(Color)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setCloud(MindMapCloud)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setColor(Color)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setFolded(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setFont(Font)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setFontSize(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setHGap(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setHistoryInformation(HistoryInformation)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setLeft(boolean)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setLink(String)",n/a,6,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setNoteText(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setShiftY(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setStateIcon(String,ImageIcon)",n/a,4,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMapNode.setStyle(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setText(String)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setToolTip(String,String)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.modes.MindMapNode.setVGap(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setXmlNoteText(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.setXmlText(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.MindMapNode.shallowCopy()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.sortedChildrenUnfolded()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.MindMapNode.toString()",n/a,10,0,n/a,n/a,0,n/a,n/a
"freemind.modes.Mode.activate()",n/a,1,3,n/a,n/a,0,n/a,n/a
"freemind.modes.Mode.createModeController()",n/a,0,3,n/a,n/a,0,n/a,n/a
"freemind.modes.Mode.getController()",n/a,2,3,n/a,n/a,0,n/a,n/a
"freemind.modes.Mode.getDefaultModeController()",n/a,3,3,n/a,n/a,0,n/a,n/a
"freemind.modes.Mode.init(Controller)",n/a,0,3,n/a,n/a,1,n/a,n/a
"freemind.modes.Mode.restore(String)",n/a,0,3,n/a,n/a,1,n/a,n/a
"freemind.modes.Mode.toLocalizedString()",3,2,n/a,3,0,0,1,1
"freemind.modes.Mode.toString()",n/a,2,3,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.NodeLifetimeListener.onCreateNodeHook(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.NodeLifetimeListener.onPostDeleteNode(MindMapNode,MindMapNode)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.NodeLifetimeListener.onPreDeleteNode(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.NodeSelectionListener.onFocusNode(NodeView)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.NodeSelectionListener.onLostFocusNode(NodeView)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.NodeSelectionListener.onSaveNode(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.NodeSelectionListener.onSelectionChange(NodeView,boolean)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.NodeSelectionListener.onUpdateNodeHook(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.centerNode(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.changeSelection(NodeView,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.close(boolean,MapModuleManager)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.copy()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.copy(List<MindMapNode>,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.copy(MindMapNode,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.copySingle()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.deregisterNodeLifetimeListener(NodeLifetimeListener)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.deregisterNodeSelectionListener(NodeSelectionListener)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.displayNode(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.doubleClick(MouseEvent)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.extendSelection(MouseEvent)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.fireNodePreDeleteEvent(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.firePreSaveEvent(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getController()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getFileChooser(FileFilter)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getFrame()",n/a,14,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getHookFactory()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getLeftToolBar()",n/a,4,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getLinkShortText(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getMap()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getMapModule()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getMode()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getModeToolBar()",n/a,5,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getNodeFromID(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getNodeID(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getNodeView(MindMapNode)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getPopupForModel(Object)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getPopupMenu()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getResource(String)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getSelected()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getSelectedView()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getSelecteds()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getSelectedsByDepth()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getSelectionColor()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.getText(String)",n/a,22,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.getView()",n/a,8,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.isBlocked()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.load(File)",n/a,5,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.load(URL)",n/a,5,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.loadURL(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.newMap()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.nodeChanged(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.nodeRefresh(MindMapNode)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.onFocusNode(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.onLostFocusNode(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.onViewCreatedHook(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.onViewRemovedHook(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.open()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.plainClick(MouseEvent)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.refreshMap()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.registerNodeLifetimeListener(NodeLifetimeListener,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.registerNodeSelectionListener(NodeSelectionListener,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.save()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.save(File)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.saveAs()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.select(MindMapNode,List<MindMapNode>)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.select(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.selectBranch(NodeView,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.setFolded(MindMapNode,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.ModeController.setModel(MapAdapter)",n/a,4,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.setSaved(boolean)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.setToolTip(MindMapNode,String,String)",n/a,0,0,n/a,n/a,3,n/a,n/a
"freemind.modes.ModeController.setView(MapView)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.setVisible(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.showPopupMenu(MouseEvent)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.shutdownController()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.sortNodesByDepth(List<MindMapNode>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.startupController()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.ModeController.updateMenus(StructuredMenuHolder)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModeController.updatePopupMenu(StructuredMenuHolder)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ModesCreator.ModesCreator(Controller)",0,1,n/a,3,0,1,1,1
"freemind.modes.ModesCreator.getAllModes()",17,2,n/a,19,2,0,14,4
"freemind.modes.ModesCreator.getMode(String)",15,1,n/a,25,2,1,15,4
"freemind.modes.NodeAdapter.NodeAdapter(Object,MindMap)",12,3,n/a,8,4,2,12,4
"freemind.modes.NodeAdapter.addAttribute(Attribute)",4,1,n/a,8,0,1,2,1
"freemind.modes.NodeAdapter.addHook(PermanentNodeHook)",3,0,n/a,13,0,1,5,2
"freemind.modes.NodeAdapter.addIcon(MindIcon,int)",3,0,n/a,8,1,2,4,2
"freemind.modes.NodeAdapter.addToPathVector(Vector<NodeAdapter>)",2,2,n/a,7,1,1,3,2
"freemind.modes.NodeAdapter.addTreeModelListener(TreeModelListener)",1,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.calcShiftY()",1,0,n/a,8,1,0,3,3
"freemind.modes.NodeAdapter.changeChildCloudIterativeLevels(int)",6,3,n/a,13,2,1,7,3
"freemind.modes.NodeAdapter.checkAttributePosition(int)",2,7,n/a,8,1,1,2,4
"freemind.modes.NodeAdapter.children()",1,0,n/a,9,0,0,1,1
"freemind.modes.NodeAdapter.childrenFolded()",3,0,n/a,6,1,0,3,2
"freemind.modes.NodeAdapter.childrenUnfolded()",2,8,n/a,4,0,0,1,2
"freemind.modes.NodeAdapter.convertToEncodedContent(String)",2,2,n/a,4,0,1,2,1
"freemind.modes.NodeAdapter.createActivatedHooks()",1,2,n/a,5,1,0,2,2
"freemind.modes.NodeAdapter.createHooks()",1,2,n/a,5,1,0,2,2
"freemind.modes.NodeAdapter.createIcons()",1,2,n/a,5,1,0,2,2
"freemind.modes.NodeAdapter.createStateIcons()",1,1,n/a,5,1,0,2,2
"freemind.modes.NodeAdapter.createToolTip()",1,1,n/a,5,1,0,2,2
"freemind.modes.NodeAdapter.establishOwnFont()",2,5,n/a,3,0,0,1,2
"freemind.modes.NodeAdapter.getActivatedHooks()",2,2,n/a,11,1,0,3,2
"freemind.modes.NodeAdapter.getAdditionalInfo()",0,2,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getAllowsChildren()",0,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getAttribute(String)",3,0,n/a,12,2,1,6,4
"freemind.modes.NodeAdapter.getAttribute(int)",4,1,n/a,5,0,1,2,1
"freemind.modes.NodeAdapter.getAttributeKeyList()",4,0,n/a,11,1,0,6,3
"freemind.modes.NodeAdapter.getAttributePosition(String)",2,0,n/a,14,2,1,8,4
"freemind.modes.NodeAdapter.getAttributeTableLength()",1,1,n/a,7,1,0,3,2
"freemind.modes.NodeAdapter.getAttributeVector()",1,4,n/a,6,1,0,3,2
"freemind.modes.NodeAdapter.getAttributes()",2,0,n/a,7,1,0,3,2
"freemind.modes.NodeAdapter.getBackgroundColor()",0,2,n/a,4,0,0,1,1
"freemind.modes.NodeAdapter.getBareStyle()",0,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getChildAt(int)",1,2,n/a,8,0,1,1,1
"freemind.modes.NodeAdapter.getChildCount()",1,8,n/a,3,0,0,1,2
"freemind.modes.NodeAdapter.getChildPosition(MindMapNode)",3,1,n/a,9,2,1,7,3
"freemind.modes.NodeAdapter.getChildren()",2,0,n/a,4,0,0,1,2
"freemind.modes.NodeAdapter.getCloud()",0,3,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getColor()",0,3,n/a,4,0,0,1,1
"freemind.modes.NodeAdapter.getEdge()",0,1,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getFilterInfo()",0,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getFont()",0,5,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getFontFamilyName()",5,0,n/a,7,1,0,3,2
"freemind.modes.NodeAdapter.getFontSize()",7,0,n/a,7,1,0,3,2
"freemind.modes.NodeAdapter.getHGap()",0,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getHistoryInformation()",0,2,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getHooks()",2,3,n/a,10,0,0,3,2
"freemind.modes.NodeAdapter.getIcons()",1,2,n/a,6,0,0,3,2
"freemind.modes.NodeAdapter.getIndex(TreeNode)",1,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.getLink()",0,8,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getListeners()",0,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getMap()",0,8,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getMapFeedback()",2,13,n/a,6,0,0,1,1
"freemind.modes.NodeAdapter.getNodeLevel()",3,0,n/a,10,2,0,8,3
"freemind.modes.NodeAdapter.getNoteText()",0,0,n/a,4,0,0,1,1
"freemind.modes.NodeAdapter.getObjectId(ModeController)",1,0,n/a,8,0,1,1,1
"freemind.modes.NodeAdapter.getParent()",0,1,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getParentNode()",0,12,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getPath()",4,0,n/a,8,0,0,5,1
"freemind.modes.NodeAdapter.getPlainTextContent()",1,1,n/a,4,0,0,1,1
"freemind.modes.NodeAdapter.getShiftY()",0,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getShortText(ModeController)",3,0,n/a,7,0,1,4,2
"freemind.modes.NodeAdapter.getStateIcons()",2,0,n/a,5,0,0,3,2
"freemind.modes.NodeAdapter.getStyle()",17,1,n/a,32,3,0,17,9
"freemind.modes.NodeAdapter.getText()",1,4,n/a,7,1,0,4,2
"freemind.modes.NodeAdapter.getToolTip()",26,0,n/a,55,4,0,33,15
"freemind.modes.NodeAdapter.getVGap()",0,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getXmlNoteText()",0,2,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.getXmlText()",0,1,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.hasChildren()",1,0,n/a,3,0,0,1,2
"freemind.modes.NodeAdapter.hasExactlyOneVisibleChild()",4,0,n/a,10,1,0,8,4
"freemind.modes.NodeAdapter.hasFoldedParents()",5,0,n/a,12,1,0,5,3
"freemind.modes.NodeAdapter.hasFoldedStrictDescendant()",5,1,n/a,14,2,0,6,4
"freemind.modes.NodeAdapter.hasStyle()",0,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.hasVisibleChilds()",4,0,n/a,7,1,0,5,3
"freemind.modes.NodeAdapter.insert(MutableTreeNode,int)",6,1,n/a,13,1,2,9,2
"freemind.modes.NodeAdapter.insertAttribute(int,Attribute)",3,1,n/a,8,0,2,2,1
"freemind.modes.NodeAdapter.invokeHook(NodeHook)",8,0,n/a,22,1,1,10,3
"freemind.modes.NodeAdapter.isBold()",1,4,n/a,3,0,0,1,2
"freemind.modes.NodeAdapter.isDescendantOf(MindMapNode)",4,1,n/a,8,0,1,5,3
"freemind.modes.NodeAdapter.isDescendantOfOrEqual(MindMapNode)",1,0,n/a,6,1,1,3,2
"freemind.modes.NodeAdapter.isFolded()",0,5,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.isItalic()",1,4,n/a,3,0,0,1,2
"freemind.modes.NodeAdapter.isLeaf()",1,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.isLeft()",9,3,n/a,10,1,0,5,5
"freemind.modes.NodeAdapter.isNewChildLeft()",6,1,n/a,14,2,0,11,5
"freemind.modes.NodeAdapter.isRoot()",0,11,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.isStrikethrough()",3,4,n/a,9,2,0,5,3
"freemind.modes.NodeAdapter.isUnderlined()",0,2,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.isVisible()",3,3,n/a,4,0,0,2,2
"freemind.modes.NodeAdapter.recursiveCallAddChildren(MindMapNode,MindMapNode)",8,2,n/a,14,3,2,7,6
"freemind.modes.NodeAdapter.recursiveCallRemoveChildren(MindMapNode,MindMapNode,MindMapNode)",8,2,n/a,16,2,3,6,5
"freemind.modes.NodeAdapter.remove(MutableTreeNode)",7,1,n/a,15,2,1,8,4
"freemind.modes.NodeAdapter.remove(int)",2,0,n/a,4,0,1,2,1
"freemind.modes.NodeAdapter.removeAllHooks()",9,0,n/a,11,2,0,6,4
"freemind.modes.NodeAdapter.removeAttribute(int)",2,1,n/a,5,0,1,2,1
"freemind.modes.NodeAdapter.removeFromParent()",1,0,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.removeHook(PermanentNodeHook)",10,1,n/a,25,2,1,12,4
"freemind.modes.NodeAdapter.removeIcon(int)",4,0,n/a,13,1,1,8,3
"freemind.modes.NodeAdapter.removeTreeModelListener(TreeModelListener)",1,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.save(Writer,MindMapLinkRegistry,boolean,boolean)",130,3,n/a,182,2,4,110,40
"freemind.modes.NodeAdapter.saveChildren(Writer,MindMapLinkRegistry,NodeAdapter,boolean)",6,2,n/a,10,1,4,6,4
"freemind.modes.NodeAdapter.setAdditionalInfo(String)",0,2,n/a,5,0,1,0,1
"freemind.modes.NodeAdapter.setAttribute(int,Attribute)",2,1,n/a,5,0,2,2,1
"freemind.modes.NodeAdapter.setBackgroundColor(Color)",0,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setBold(boolean)",2,1,n/a,5,1,1,2,2
"freemind.modes.NodeAdapter.setCloud(MindMapCloud)",2,0,n/a,9,1,1,5,5
"freemind.modes.NodeAdapter.setColor(Color)",0,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setEdge(MindMapEdge)",0,3,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setFolded(boolean)",0,2,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setFont(Font)",0,4,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setFontSize(int)",5,0,n/a,5,0,1,2,1
"freemind.modes.NodeAdapter.setHGap(int)",0,1,n/a,4,0,1,1,1
"freemind.modes.NodeAdapter.setHistoryInformation(HistoryInformation)",0,1,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setItalic(boolean)",2,1,n/a,5,1,1,2,2
"freemind.modes.NodeAdapter.setLeft(boolean)",3,3,n/a,9,2,1,7,4
"freemind.modes.NodeAdapter.setLink(String)",5,1,n/a,7,1,1,3,3
"freemind.modes.NodeAdapter.setMap(MindMap)",0,0,n/a,5,0,1,1,1
"freemind.modes.NodeAdapter.setNoteText(String)",3,0,n/a,9,1,1,6,2
"freemind.modes.NodeAdapter.setParent(MindMapNode)",0,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setParent(MutableTreeNode)",0,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setShiftY(int)",0,1,n/a,7,0,1,1,1
"freemind.modes.NodeAdapter.setStateIcon(String,ImageIcon)",5,0,n/a,12,1,2,7,4
"freemind.modes.NodeAdapter.setStrikethrough(boolean)",2,1,n/a,5,1,1,2,2
"freemind.modes.NodeAdapter.setStyle(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setText(String)",3,3,n/a,9,1,1,6,2
"freemind.modes.NodeAdapter.setToolTip(String,String)",5,0,n/a,14,2,2,7,4
"freemind.modes.NodeAdapter.setUnderlined(boolean)",0,1,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setUserObject(Object)",1,1,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setVGap(int)",1,0,n/a,3,0,1,1,1
"freemind.modes.NodeAdapter.setXmlNoteText(String)",3,0,n/a,9,1,1,6,2
"freemind.modes.NodeAdapter.setXmlText(String)",3,0,n/a,4,0,1,2,1
"freemind.modes.NodeAdapter.shallowCopy()",12,0,n/a,15,1,0,10,2
"freemind.modes.NodeAdapter.sortedChildrenUnfolded()",7,2,n/a,9,3,0,11,4
"freemind.modes.NodeAdapter.toString()",1,6,n/a,3,0,0,1,1
"freemind.modes.NodeAdapter.toggleBold()",6,1,n/a,4,0,0,2,1
"freemind.modes.NodeAdapter.toggleItalic()",6,1,n/a,4,0,0,2,1
"freemind.modes.NodeAdapter.toggleStrikethrough()",8,1,n/a,10,1,0,6,3
"freemind.modes.NodeDownAction.NodeDownAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.NodeDownAction.actionPerformed(ActionEvent)",4,0,n/a,6,0,1,4,1
"freemind.modes.NodeViewEvent.NodeViewEvent(MindMapNode)",1,0,n/a,4,0,1,2,1
"freemind.modes.NodeViewEventListener.nodeViewCreated(NodeViewEvent)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.NodeViewEventListener.nodeViewRemoved(NodeViewEvent)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.StylePattern.StylePattern()",0,0,n/a,5,0,0,0,1
"freemind.modes.StylePattern.StylePattern(MindMapNode)",18,0,n/a,20,0,1,11,2
"freemind.modes.StylePattern.StylePattern(XMLElement,List<StylePattern>)",1,1,n/a,3,0,2,1,1
"freemind.modes.StylePattern.getAppliesToChildren()",0,0,n/a,3,0,0,1,1
"freemind.modes.StylePattern.getAppliesToEdge()",0,0,n/a,3,0,0,1,3
"freemind.modes.StylePattern.getAppliesToNode()",0,0,n/a,4,0,0,1,3
"freemind.modes.StylePattern.getAppliesToNodeFont()",0,0,n/a,4,0,0,1,4
"freemind.modes.StylePattern.getAppliesToNodeIcon()",0,0,n/a,3,0,0,1,1
"freemind.modes.StylePattern.getChildrenStylePattern()",0,0,n/a,8,0,0,1,1
"freemind.modes.StylePattern.getEdgeColor()",0,0,n/a,8,0,0,1,1
"freemind.modes.StylePattern.getEdgeStyle()",0,0,n/a,8,0,0,1,1
"freemind.modes.StylePattern.getEdgeWidth()",0,0,n/a,8,0,0,1,1
"freemind.modes.StylePattern.getName()",0,3,n/a,8,0,0,1,1
"freemind.modes.StylePattern.getNodeBackgroundColor()",0,0,n/a,3,0,0,1,1
"freemind.modes.StylePattern.getNodeColor()",0,0,n/a,8,0,0,1,1
"freemind.modes.StylePattern.getNodeFontBold()",0,0,n/a,6,0,0,1,1
"freemind.modes.StylePattern.getNodeFontFamily()",0,0,n/a,6,0,0,1,1
"freemind.modes.StylePattern.getNodeFontItalic()",0,0,n/a,6,0,0,1,1
"freemind.modes.StylePattern.getNodeFontSize()",0,0,n/a,6,0,0,1,1
"freemind.modes.StylePattern.getNodeIcon()",0,0,n/a,8,0,0,1,1
"freemind.modes.StylePattern.getNodeStyle()",0,0,n/a,8,0,0,1,1
"freemind.modes.StylePattern.getRecursive()",0,0,n/a,9,0,0,1,1
"freemind.modes.StylePattern.getText()",0,0,n/a,8,0,0,1,1
"freemind.modes.StylePattern.loadPattern(XMLElement,List<StylePattern>)",84,1,n/a,103,5,2,52,29
"freemind.modes.StylePattern.loadPatterns(File)",3,0,n/a,3,0,1,1,1
"freemind.modes.StylePattern.loadPatterns(Reader)",8,0,n/a,9,1,1,7,2
"freemind.modes.StylePattern.setChildrenStylePattern(StylePattern)",0,2,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setEdgeColor(Color)",0,1,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setEdgeStyle(String)",0,1,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setEdgeWidth(Integer)",0,2,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setName(String)",0,1,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setNodeBackgroundColor(Color)",0,1,n/a,3,0,1,1,1
"freemind.modes.StylePattern.setNodeColor(Color)",0,1,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setNodeFontBold(Boolean)",0,1,n/a,7,0,1,1,1
"freemind.modes.StylePattern.setNodeFontFamily(String)",0,1,n/a,7,0,1,1,1
"freemind.modes.StylePattern.setNodeFontItalic(Boolean)",0,1,n/a,7,0,1,1,1
"freemind.modes.StylePattern.setNodeFontSize(Integer)",0,1,n/a,7,0,1,1,1
"freemind.modes.StylePattern.setNodeIcon(MindIcon)",0,1,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setNodeStyle(String)",0,1,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setRecursive(boolean)",0,1,n/a,9,0,1,1,1
"freemind.modes.StylePattern.setText(String)",0,1,n/a,9,0,1,1,1
"freemind.modes.StylePattern.toString()",0,0,n/a,6,0,0,1,1
"freemind.modes.StylePatternFactory.addSeparatorIfNecessary(String)",1,3,n/a,6,1,1,3,2
"freemind.modes.StylePatternFactory.addSubPatternToString(TextTranslator,String,PatternPropertyBase,String)",5,10,n/a,13,2,4,6,3
"freemind.modes.StylePatternFactory.applyPattern(MindMapNode,Pattern,List<Pattern>,Set<MindMapControllerPlugin>,ExtendedMapFeedback)",86,4,n/a,115,4,5,60,31
"freemind.modes.StylePatternFactory.applyPattern(Pattern,MindMapNode,MapFeedback)",92,0,n/a,99,4,3,50,26
"freemind.modes.StylePatternFactory.createPatternFromNode(MindMapNode)",70,2,n/a,58,1,1,47,13
"freemind.modes.StylePatternFactory.createPatternFromSelected(MindMapNode,List<MindMapNode>)",3,0,n/a,9,1,2,5,2
"freemind.modes.StylePatternFactory.getPatternFromString(String)",2,0,n/a,9,1,1,5,2
"freemind.modes.StylePatternFactory.getPatternsFromString(String)",2,0,n/a,9,1,1,5,2
"freemind.modes.StylePatternFactory.getRemoveAllPattern()",25,0,n/a,19,0,0,14,1
"freemind.modes.StylePatternFactory.intersectPattern(Pattern,Pattern)",61,1,n/a,45,0,2,14,1
"freemind.modes.StylePatternFactory.loadPatterns(File)",3,1,n/a,3,0,1,1,1
"freemind.modes.StylePatternFactory.loadPatterns(Reader)",22,1,n/a,38,5,1,21,7
"freemind.modes.StylePatternFactory.processPatternProperties(PatternPropertyBase,PatternPropertyBase,PatternPropertyBase)",5,12,n/a,13,1,3,6,4
"freemind.modes.StylePatternFactory.savePatterns(Writer,List<Pattern>)",24,1,n/a,33,2,2,18,6
"freemind.modes.StylePatternFactory.toString(Pattern,TextTranslator)",32,0,n/a,44,2,2,22,5
"freemind.modes.ViewAbstraction.deselect(NodeView)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ViewAbstraction.getNodeView(MindMapNode)",n/a,10,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ViewAbstraction.getSelected()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.modes.ViewAbstraction.getSelectedNodesSortedByY()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.modes.ViewAbstraction.getSelecteds()",n/a,2,1,n/a,n/a,0,n/a,n/a
"freemind.modes.ViewAbstraction.isSelected(NodeView)",n/a,3,0,n/a,n/a,1,n/a,n/a
"freemind.modes.ViewAbstraction.select(NodeView)",n/a,2,0,n/a,n/a,1,n/a,n/a
"freemind.modes.XMLElementAdapter.XMLElementAdapter(MapFeedback)",3,0,n/a,3,0,1,1,1
"freemind.modes.XMLElementAdapter.XMLElementAdapter(MapFeedback,Vector<ArrowLinkAdapter>,HashMap<String, NodeAdapter>)",4,2,n/a,10,1,3,5,2
"freemind.modes.XMLElementAdapter.addChild(XMLElement)",60,26,n/a,94,3,1,54,21
"freemind.modes.XMLElementAdapter.completeElement()",17,3,n/a,32,2,0,20,8
"freemind.modes.XMLElementAdapter.copyAttributesToNode(NodeAdapter)",3,1,n/a,12,1,1,2,2
"freemind.modes.XMLElementAdapter.createAnotherElement()",1,3,n/a,6,0,0,1,1
"freemind.modes.XMLElementAdapter.getIDToTarget()",0,0,n/a,3,0,0,1,1
"freemind.modes.XMLElementAdapter.getMap()",1,7,n/a,3,0,0,1,1
"freemind.modes.XMLElementAdapter.getMapChild()",0,0,n/a,3,0,0,1,1
"freemind.modes.XMLElementAdapter.getUserObject()",0,14,n/a,3,0,0,1,1
"freemind.modes.XMLElementAdapter.processUnfinishedLinks(MindMapLinkRegistry)",35,0,n/a,108,4,1,47,11
"freemind.modes.XMLElementAdapter.setAttribute(String,Object)",76,61,n/a,125,3,2,87,44
"freemind.modes.XMLElementAdapter.setIDToTarget(HashMap<String, NodeAdapter>)",0,0,n/a,3,0,1,1,1
"freemind.modes.XMLElementAdapter.setName(String)",29,30,n/a,38,1,1,31,15
"freemind.modes.XMLElementAdapter.setNodeAttribute(String,String,NodeAdapter)",51,2,n/a,53,2,3,39,20
"freemind.modes.XMLElementAdapter.setUserObject(Object)",0,1,n/a,3,0,1,1,1
"freemind.modes.attributes.Attribute.Attribute(Attribute)",0,0,n/a,8,0,1,2,1
"freemind.modes.attributes.Attribute.Attribute(String)",0,0,n/a,6,0,1,2,1
"freemind.modes.attributes.Attribute.Attribute(String,String)",0,4,n/a,4,0,2,2,1
"freemind.modes.attributes.Attribute.equals(Object)",4,1,n/a,21,1,1,18,10
"freemind.modes.attributes.Attribute.getName()",0,11,n/a,3,0,0,1,1
"freemind.modes.attributes.Attribute.getValue()",0,7,n/a,3,0,0,1,1
"freemind.modes.attributes.Attribute.hashCode()",2,0,n/a,8,0,0,5,3
"freemind.modes.attributes.Attribute.setName(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.attributes.Attribute.setValue(String)",0,0,n/a,3,0,1,1,1
"freemind.modes.attributes.Attribute.toString()",0,0,n/a,3,0,0,1,1
"freemind.modes.attributes.AttributeTableModel.fireTableDataChanged()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.attributes.AttributeTableModel.getColumnWidth(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.attributes.AttributeTableModel.getNode()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.attributes.AttributeTableModel.getRowCount()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.modes.attributes.AttributeTableModel.getValueAt(int,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.attributes.AttributeTableModel.setValueAt(Object,int,int)",n/a,0,0,n/a,n/a,3,n/a,n/a
"freemind.modes.browsemode.BrowseArrowLinkModel.BrowseArrowLinkModel(MindMapNode,MindMapNode,MapFeedback)",1,0,n/a,4,0,3,1,1
"freemind.modes.browsemode.BrowseArrowLinkModel.changeInclination(MapView,int,int,int,int)",0,0,n/a,7,0,5,0,1
"freemind.modes.browsemode.BrowseArrowLinkModel.clone()",1,2,n/a,4,0,0,1,1
"freemind.modes.browsemode.BrowseArrowLinkModel.save()",0,1,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseArrowLinkModel.toString()",2,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseCloudModel.BrowseCloudModel(MindMapNode,MapFeedback)",1,0,n/a,3,0,2,1,1
"freemind.modes.browsemode.BrowseCloudModel.save()",0,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseController.BrowseController(Mode)",9,0,n/a,13,0,1,8,1
"freemind.modes.browsemode.BrowseController.FollowLinkAction.FollowLinkAction()",2,1,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseController.FollowLinkAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.BrowseController.FollowMapLink.FollowMapLink(ViewControllerAdapter)",7,1,n/a,6,0,1,3,1
"freemind.modes.browsemode.BrowseController.FollowMapLink.actionPerformed(ActionEvent)",16,0,n/a,33,2,1,14,4
"freemind.modes.browsemode.BrowseController.FollowMapLink.getHook()",2,2,n/a,6,0,0,3,1
"freemind.modes.browsemode.BrowseController.FollowMapLink.isEnabled(JMenuItem,Action)",1,1,n/a,6,0,2,1,1
"freemind.modes.browsemode.BrowseController.doubleClick()",4,0,n/a,8,1,0,3,2
"freemind.modes.browsemode.BrowseController.getGotoLinkNodeAction(MindMapNode)",1,4,n/a,5,0,1,1,1
"freemind.modes.browsemode.BrowseController.getHookFactory()",0,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseController.getModeToolBar()",1,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseController.getPopupForModel(Object)",34,0,n/a,34,3,1,21,5
"freemind.modes.browsemode.BrowseController.getPopupMenu()",0,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseController.getToolBar()",0,1,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseController.load(File)",5,7,n/a,7,0,1,3,1
"freemind.modes.browsemode.BrowseController.load(URL)",4,7,n/a,8,0,1,3,1
"freemind.modes.browsemode.BrowseController.loadInternally(URL,MapAdapter)",4,0,n/a,15,1,2,5,2
"freemind.modes.browsemode.BrowseController.loadTree(URL)",17,1,n/a,29,1,1,17,4
"freemind.modes.browsemode.BrowseController.newMap(MindMap,ModeController)",3,0,n/a,4,0,2,2,1
"freemind.modes.browsemode.BrowseController.newModel(ModeController)",2,0,n/a,5,0,1,3,1
"freemind.modes.browsemode.BrowseController.newNode(Object,MindMap)",1,0,n/a,3,0,2,1,1
"freemind.modes.browsemode.BrowseController.out(String)",0,0,n/a,7,0,1,0,1
"freemind.modes.browsemode.BrowseController.plainClick(MouseEvent)",13,0,n/a,17,2,1,10,4
"freemind.modes.browsemode.BrowseController.restoreMapsLastState(ModeController,MapAdapter)",0,0,n/a,4,0,2,0,1
"freemind.modes.browsemode.BrowseController.setAllActions(boolean)",4,6,n/a,10,0,1,4,1
"freemind.modes.browsemode.BrowseController.setNoteIcon(MindMapNode)",11,2,n/a,15,2,1,8,5
"freemind.modes.browsemode.BrowseController.startupController()",4,3,n/a,4,0,0,2,1
"freemind.modes.browsemode.BrowseController.updateMenus(StructuredMenuHolder)",6,0,n/a,18,0,1,6,1
"freemind.modes.browsemode.BrowseEdgeModel.BrowseEdgeModel(MindMapNode,MapFeedback)",1,0,n/a,3,0,2,1,1
"freemind.modes.browsemode.BrowseEdgeModel.save()",0,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseEdgeModel.setColor(Color)",1,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.BrowseEdgeModel.setStyle(String)",1,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.BrowseHookFactory.BrowseHookFactory()",1,0,n/a,6,0,0,1,1
"freemind.modes.browsemode.BrowseHookFactory.createModeControllerHook(String)",0,0,n/a,11,0,1,1,1
"freemind.modes.browsemode.BrowseHookFactory.createNodeHook(String)",9,0,n/a,21,1,1,10,3
"freemind.modes.browsemode.BrowseHookFactory.getHookMenuPositions(String)",0,0,n/a,10,0,1,1,1
"freemind.modes.browsemode.BrowseHookFactory.getInstanciationMethod(String)",0,0,n/a,10,0,1,1,1
"freemind.modes.browsemode.BrowseHookFactory.getPluginBaseClass(String)",0,0,n/a,9,0,1,1,1
"freemind.modes.browsemode.BrowseHookFactory.getPossibleModeControllerHooks()",1,0,n/a,8,0,0,1,1
"freemind.modes.browsemode.BrowseHookFactory.getPossibleNodeHooks()",1,0,n/a,8,0,0,1,1
"freemind.modes.browsemode.BrowseHookFactory.getRegistrations()",0,0,n/a,9,0,0,1,1
"freemind.modes.browsemode.BrowseMapModel.BrowseMapModel(BrowseNodeModel,ModeController)",6,0,n/a,10,0,2,5,2
"freemind.modes.browsemode.BrowseMapModel.createArrowLinkAdapter(NodeAdapter,NodeAdapter)",1,0,n/a,4,0,2,1,1
"freemind.modes.browsemode.BrowseMapModel.createArrowLinkTarget(NodeAdapter,NodeAdapter)",0,0,n/a,5,0,2,1,1
"freemind.modes.browsemode.BrowseMapModel.createCloudAdapter(NodeAdapter)",1,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.BrowseMapModel.createEdgeAdapter(NodeAdapter)",1,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.BrowseMapModel.createEncryptedNode(String)",2,0,n/a,5,0,1,3,1
"freemind.modes.browsemode.BrowseMapModel.createNodeAdapter(MapFeedback,String)",3,0,n/a,6,1,2,3,2
"freemind.modes.browsemode.BrowseMapModel.createNodeAdapter(MindMap,String)",1,0,n/a,7,0,2,1,1
"freemind.modes.browsemode.BrowseMapModel.getFile()",0,8,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseMapModel.getFilteredXml(Writer)",1,0,n/a,10,0,1,1,1
"freemind.modes.browsemode.BrowseMapModel.getLinkRegistry()",0,1,n/a,6,0,0,1,1
"freemind.modes.browsemode.BrowseMapModel.getURL()",0,2,n/a,8,0,0,1,1
"freemind.modes.browsemode.BrowseMapModel.getXml(Writer)",1,0,n/a,10,0,1,1,1
"freemind.modes.browsemode.BrowseMapModel.isSaved()",0,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseMapModel.save(File)",0,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.BrowseMapModel.setFile()",0,0,n/a,2,0,0,0,1
"freemind.modes.browsemode.BrowseMapModel.setLinkInclinationChanged()",0,0,n/a,7,0,0,0,1
"freemind.modes.browsemode.BrowseMapModel.setURL(URL)",0,0,n/a,9,0,1,1,1
"freemind.modes.browsemode.BrowseMapModel.toString()",3,0,n/a,7,1,0,3,2
"freemind.modes.browsemode.BrowseMode.BrowseMode()",0,0,n/a,2,0,0,0,1
"freemind.modes.browsemode.BrowseMode.activate()",2,1,n/a,11,1,0,3,2
"freemind.modes.browsemode.BrowseMode.createModeController()",1,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseMode.getController()",0,2,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseMode.getDefaultModeController()",2,4,n/a,5,0,0,2,1
"freemind.modes.browsemode.BrowseMode.init(Controller)",1,0,n/a,4,0,1,2,1
"freemind.modes.browsemode.BrowseMode.restore(String)",6,0,n/a,9,1,1,4,2
"freemind.modes.browsemode.BrowseMode.toString()",0,2,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseNodeModel.BrowseNodeModel(Object,MindMap)",5,0,n/a,5,0,2,3,1
"freemind.modes.browsemode.BrowseNodeModel.isWriteable()",0,0,n/a,3,0,0,1,1
"freemind.modes.browsemode.BrowseNodeModel.save()",0,0,n/a,4,0,0,1,1
"freemind.modes.browsemode.BrowsePopupMenu.BrowsePopupMenu(BrowseController)",9,0,n/a,12,0,1,10,1
"freemind.modes.browsemode.BrowsePopupMenu.add(Action,String)",5,7,n/a,5,0,2,2,1
"freemind.modes.browsemode.BrowsePopupMenu.popupMenuCanceled(PopupMenuEvent)",0,0,n/a,5,0,1,0,1
"freemind.modes.browsemode.BrowsePopupMenu.popupMenuWillBecomeInvisible(PopupMenuEvent)",0,0,n/a,5,0,1,0,1
"freemind.modes.browsemode.BrowsePopupMenu.popupMenuWillBecomeVisible(PopupMenuEvent)",2,0,n/a,6,0,1,1,1
"freemind.modes.browsemode.BrowseReminderHook.BrowseReminderHook()",1,0,n/a,6,0,0,1,1
"freemind.modes.browsemode.BrowseReminderHook.nodeRefresh(MindMapNode)",2,2,n/a,10,0,1,1,1
"freemind.modes.browsemode.BrowseReminderHook.setToolTip(MindMapNode,String,String)",2,3,n/a,12,0,3,2,1
"freemind.modes.browsemode.BrowseToolBar.BrowseToolBar(ControllerAdapter)",19,0,n/a,13,3,1,14,4
"freemind.modes.browsemode.BrowseToolBar.setURLField(String)",1,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.EncryptedBrowseNode.EncryptedBrowseNode(MapFeedback)",1,0,n/a,5,0,1,1,1
"freemind.modes.browsemode.EncryptedBrowseNode.EncryptedBrowseNode(Object,MapFeedback)",11,1,n/a,16,1,2,9,4
"freemind.modes.browsemode.EncryptedBrowseNode.setAdditionalInfo(String)",0,0,n/a,7,0,1,2,1
"freemind.modes.browsemode.EncryptedBrowseNode.setFolded(boolean)",28,0,n/a,4,2,1,35,9
"freemind.modes.browsemode.EncryptedBrowseNode.updateIcon()",1,2,n/a,4,0,0,1,2
"freemind.modes.browsemode.NodeNoteViewer.NodeNoteViewer(ControllerAdapter)",0,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.NodeNoteViewer.getNoteViewerComponent(String)",7,1,n/a,11,1,1,8,2
"freemind.modes.browsemode.NodeNoteViewer.onFocusNode(NodeView)",7,0,n/a,9,1,1,4,4
"freemind.modes.browsemode.NodeNoteViewer.onLostFocusNode(NodeView)",2,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.NodeNoteViewer.onSaveNode(MindMapNode)",0,0,n/a,2,0,1,0,1
"freemind.modes.browsemode.NodeNoteViewer.onSelectionChange(NodeView,boolean)",0,0,n/a,5,0,2,0,1
"freemind.modes.browsemode.NodeNoteViewer.onUpdateNodeHook(MindMapNode)",1,0,n/a,3,0,1,1,1
"freemind.modes.browsemode.NodeNoteViewer.setStateIcon(MindMapNode,boolean)",4,1,n/a,9,1,2,3,3
"freemind.modes.common.CommonNodeKeyListener.CommonNodeKeyListener(ModeController,EditHandler)",20,2,n/a,22,1,2,14,2
"freemind.modes.common.CommonNodeKeyListener.EditHandler.edit(KeyEvent,boolean,boolean)",n/a,2,2,n/a,n/a,3,n/a,n/a
"freemind.modes.common.CommonNodeKeyListener.keyPressed(KeyEvent)",30,0,n/a,68,2,1,47,19
"freemind.modes.common.CommonNodeKeyListener.keyReleased(KeyEvent)",3,0,n/a,5,1,1,2,2
"freemind.modes.common.CommonNodeKeyListener.keyTyped(KeyEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.common.CommonToggleFoldedAction.CommonToggleFoldedAction(ControllerAdapter)",6,1,n/a,5,0,1,3,1
"freemind.modes.common.CommonToggleFoldedAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.common.CommonToggleFoldedAction.getFoldingState(ListIterator<MindMapNode>)",9,2,n/a,39,3,1,17,7
"freemind.modes.common.CommonToggleFoldedAction.reset(ListIterator)",2,5,n/a,6,1,1,3,2
"freemind.modes.common.CommonToggleFoldedAction.toggleFolded()",3,2,n/a,3,0,0,1,1
"freemind.modes.common.CommonToggleFoldedAction.toggleFolded(ListIterator)",6,2,n/a,7,1,1,5,2
"freemind.modes.common.GotoLinkNodeAction.GotoLinkNodeAction(ModeController,MindMapNode)",10,6,n/a,15,1,2,7,2
"freemind.modes.common.GotoLinkNodeAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.common.actions.FindAction.FindAction(ControllerAdapter)",1,2,n/a,4,0,1,2,1
"freemind.modes.common.actions.FindAction.FindNextAction.FindNextAction(ControllerAdapter,FindAction)",1,2,n/a,5,0,2,3,1
"freemind.modes.common.actions.FindAction.FindNextAction.actionPerformed(ActionEvent)",18,0,n/a,20,1,1,10,3
"freemind.modes.common.actions.FindAction.actionPerformed(ActionEvent)",17,0,n/a,24,1,1,14,5
"freemind.modes.common.actions.FindAction.breakSearchTermIntoSubterms(String)",14,1,n/a,29,2,1,23,15
"freemind.modes.common.actions.FindAction.centerNode(MindMapNode)",1,2,n/a,6,0,1,1,1
"freemind.modes.common.actions.FindAction.close(int)",7,3,n/a,14,1,1,6,3
"freemind.modes.common.actions.FindAction.displayDialog()",66,1,n/a,3,2,0,36,1
"freemind.modes.common.actions.FindAction.displayNode(MindMapNode,ArrayList<MindMapNode>)",5,1,n/a,18,2,2,9,4
"freemind.modes.common.actions.FindAction.find(LinkedList<MindMapNode>,Collection<String>,boolean)",25,2,n/a,70,4,3,42,15
"freemind.modes.common.actions.FindAction.find(MindMapNode,Collection<String>,boolean)",7,0,n/a,17,2,3,11,3
"freemind.modes.common.actions.FindAction.findNext()",1,1,n/a,17,1,0,3,2
"freemind.modes.common.actions.FindAction.getFindFromText()",5,2,n/a,6,0,0,2,2
"freemind.modes.common.actions.FindAction.getSearchTerm()",0,2,n/a,3,0,0,1,1
"freemind.modes.common.actions.FindAction.getSearchTermAsEscapedString(String)",5,2,n/a,11,0,1,3,2
"freemind.modes.common.actions.FindAction.getSubterms()",0,1,n/a,6,0,0,1,1
"freemind.modes.common.actions.FindAction.prepareTextContent(boolean,String)",4,2,n/a,13,1,2,8,4
"freemind.modes.common.actions.NewMapAction.NewMapAction(ModeController)",5,2,n/a,8,0,1,2,1
"freemind.modes.common.actions.NewMapAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.EnterPasswordDialog()",0,0,n/a,5,0,0,0,1
"freemind.modes.common.dialogs.EnterPasswordDialog.EnterPasswordDialog(JFrame,TextTranslator,boolean)",2,1,n/a,10,0,3,4,1
"freemind.modes.common.dialogs.EnterPasswordDialog.cancelPressed()",1,3,n/a,5,0,0,3,1
"freemind.modes.common.dialogs.EnterPasswordDialog.checkEqualAndMinimumSize()",2,1,n/a,20,3,0,13,6
"freemind.modes.common.dialogs.EnterPasswordDialog.close()",1,2,n/a,3,0,0,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.getJCancelButton()",6,1,n/a,3,3,0,6,2
"freemind.modes.common.dialogs.EnterPasswordDialog.getJContentPane()",32,1,n/a,55,2,0,44,3
"freemind.modes.common.dialogs.EnterPasswordDialog.getJOKButton()",6,2,n/a,3,3,0,6,2
"freemind.modes.common.dialogs.EnterPasswordDialog.getJPasswordField()",1,1,n/a,11,1,0,3,2
"freemind.modes.common.dialogs.EnterPasswordDialog.getJPasswordField1()",1,1,n/a,11,1,0,3,2
"freemind.modes.common.dialogs.EnterPasswordDialog.getPassword()",0,1,n/a,6,0,0,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.getResult()",0,1,n/a,6,0,0,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.initialize()",16,1,n/a,3,2,0,11,2
"freemind.modes.common.dialogs.EnterPasswordDialog.okPressed()",7,1,n/a,12,1,0,7,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.IconSelectionPopupDialog(JFrame,Vector<IconInformation>,FreeMindMain)",47,1,n/a,3,2,3,38,4
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position.Position(int,int)",0,7,n/a,4,0,2,2,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position.getX()",0,8,n/a,6,0,0,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position.getY()",0,8,n/a,6,0,0,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position.toString()",2,0,n/a,3,0,0,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.addIcon(int)",3,2,n/a,5,0,1,3,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.calculateIndex(Position)",2,5,n/a,3,0,1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.canSelect(Position)",5,4,n/a,4,0,1,1,5
"freemind.modes.common.dialogs.IconSelectionPopupDialog.close()",1,2,n/a,5,0,0,3,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.cursorDown()",7,1,n/a,6,0,0,3,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.cursorLeft()",7,1,n/a,6,0,0,3,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.cursorRight()",7,1,n/a,6,0,0,3,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.cursorUp()",7,1,n/a,6,0,0,3,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.findIndexByKeyEvent(KeyEvent)",12,1,n/a,17,2,1,8,9
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getModifiers()",0,0,n/a,14,0,0,8,4
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getPosition(JLabel)",1,1,n/a,8,1,1,7,3
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getPositionFromIndex(int)",1,2,n/a,3,0,1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getResult()",0,1,n/a,3,0,0,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getSelectedPosition()",0,11,n/a,3,0,0,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.highlight(Position)",3,1,n/a,4,0,1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.keyPressed(KeyEvent)",15,0,n/a,42,1,1,33,8
"freemind.modes.common.dialogs.IconSelectionPopupDialog.keyReleased(KeyEvent)",0,0,n/a,7,0,1,0,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.keyTyped(KeyEvent)",0,0,n/a,7,0,1,0,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mouseClicked(MouseEvent)",2,0,n/a,8,0,1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mouseEntered(MouseEvent)",3,0,n/a,8,0,1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mouseExited(MouseEvent)",0,0,n/a,7,0,1,0,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mousePressed(MouseEvent)",0,0,n/a,7,0,1,0,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mouseReleased(MouseEvent)",0,0,n/a,8,0,1,0,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.select(Position)",12,6,n/a,17,1,1,9,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.setSelectedPosition(Position)",0,2,n/a,4,0,1,2,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.unhighlight(Position)",3,1,n/a,4,0,1,1,1
"freemind.modes.common.dialogs.PersistentEditableComboBox.PersistentEditableComboBox(ModeController,String)",12,1,n/a,7,3,2,17,5
"freemind.modes.common.dialogs.PersistentEditableComboBox.addActionListener(ActionListener)",0,1,n/a,3,0,1,1,1
"freemind.modes.common.dialogs.PersistentEditableComboBox.addUrl(String,boolean)",20,4,n/a,25,3,2,20,6
"freemind.modes.common.dialogs.PersistentEditableComboBox.getText()",2,2,n/a,3,0,0,1,1
"freemind.modes.common.dialogs.PersistentEditableComboBox.setText(String)",1,1,n/a,5,0,1,3,1
"freemind.modes.common.listeners.CommonMouseMotionManager.CommonMouseMotionManager(ModeController)",1,1,n/a,7,0,1,2,1
"freemind.modes.common.listeners.CommonMouseMotionManager.mouseDragged(MouseEvent)",11,1,n/a,13,1,1,7,4
"freemind.modes.common.listeners.CommonMouseMotionManager.mousePressed(MouseEvent)",6,1,n/a,7,1,1,4,3
"freemind.modes.common.listeners.CommonMouseMotionManager.mouseReleased(MouseEvent)",0,1,n/a,4,0,1,2,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.CommonNodeMouseMotionListener(ModeController)",5,2,n/a,7,0,1,5,3
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.createTimer(MouseEvent)",8,2,n/a,15,0,1,4,2
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.getControlRegion(Point2D)",3,1,n/a,6,0,1,2,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.handlePopupMenu(MouseEvent)",5,1,n/a,11,0,1,5,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseClicked(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseDragged(MouseEvent)",7,0,n/a,10,0,1,5,2
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseEntered(MouseEvent)",5,0,n/a,7,0,1,4,2
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseExited(MouseEvent)",2,0,n/a,4,0,1,2,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseMoved(MouseEvent)",13,0,n/a,20,2,1,8,5
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mousePressed(MouseEvent)",1,0,n/a,5,0,1,2,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseReleased(MouseEvent)",8,0,n/a,30,1,1,10,5
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.stopTimerForDelayedSelection()",1,4,n/a,7,0,0,4,2
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.timeDelayedSelection.run()",8,0,n/a,6,3,0,3,4
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.timeDelayedSelection.timeDelayedSelection(ModeController,MouseEvent)",0,1,n/a,4,0,2,2,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.updateSelectionMethod()",14,2,n/a,24,1,0,7,4
"freemind.modes.common.listeners.MindMapMouseWheelEventHandler.MindMapMouseWheelEventHandler(ControllerAdapter)",12,1,n/a,6,3,1,9,3
"freemind.modes.common.listeners.MindMapMouseWheelEventHandler.mouseWheelMoved(MouseWheelEvent)",21,0,n/a,42,2,1,21,8
"freemind.modes.common.plugins.MapNodePositionHolderBase.MapNodePositionHolderBase()",1,1,n/a,6,0,0,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.getBarePosition()",6,1,n/a,8,0,0,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.getBaseHook(MindMapNode)",1,1,n/a,8,2,1,4,3
"freemind.modes.common.plugins.MapNodePositionHolderBase.getImageHtml()",1,1,n/a,6,0,0,4,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.getMapLocationIcon()",4,2,n/a,8,1,0,3,2
"freemind.modes.common.plugins.MapNodePositionHolderBase.hideTooltip()",1,1,n/a,6,0,0,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.invoke(MindMapNode)",3,0,n/a,11,0,1,3,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.isTooltipDesired()",3,1,n/a,4,0,0,1,2
"freemind.modes.common.plugins.MapNodePositionHolderBase.loadFrom(XMLElement)",3,2,n/a,7,0,1,3,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.setStateIcon(MindMapNode,boolean)",2,2,n/a,4,0,2,1,2
"freemind.modes.common.plugins.MapNodePositionHolderBase.setTooltip()",2,1,n/a,4,0,0,2,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.showTooltip()",2,1,n/a,7,2,0,3,3
"freemind.modes.common.plugins.MapNodePositionHolderBase.shutdownMapHook()",4,2,n/a,10,0,0,3,1
"freemind.modes.common.plugins.ReminderHookBase.ReminderHookBase()",1,1,n/a,6,0,0,1,1
"freemind.modes.common.plugins.ReminderHookBase.TimerBlinkTask.TimerBlinkTask(boolean)",1,1,n/a,6,0,1,2,1
"freemind.modes.common.plugins.ReminderHookBase.TimerBlinkTask.actionPerformed(ActionEvent)",7,0,n/a,18,1,1,8,3
"freemind.modes.common.plugins.ReminderHookBase.displayState(int,MindMapNode,boolean)",10,4,n/a,17,2,3,11,6
"freemind.modes.common.plugins.ReminderHookBase.getBellIcon()",2,1,n/a,7,1,0,3,2
"freemind.modes.common.plugins.ReminderHookBase.getClockIcon()",2,1,n/a,7,1,0,3,2
"freemind.modes.common.plugins.ReminderHookBase.getFlagIcon()",2,1,n/a,7,1,0,3,2
"freemind.modes.common.plugins.ReminderHookBase.getRemindUserAt()",0,0,n/a,3,0,0,1,1
"freemind.modes.common.plugins.ReminderHookBase.getRemindUserAtAsSecondsFromNow()",1,2,n/a,10,1,0,6,3
"freemind.modes.common.plugins.ReminderHookBase.getStateKey()",0,1,n/a,7,1,0,3,2
"freemind.modes.common.plugins.ReminderHookBase.invoke(MindMapNode)",13,0,n/a,17,1,1,12,3
"freemind.modes.common.plugins.ReminderHookBase.loadFrom(XMLElement)",7,2,n/a,8,1,1,5,2
"freemind.modes.common.plugins.ReminderHookBase.nodeRefresh(MindMapNode)",n/a,1,1,n/a,n/a,1,n/a,n/a
"freemind.modes.common.plugins.ReminderHookBase.save(XMLElement)",4,1,n/a,6,0,1,4,1
"freemind.modes.common.plugins.ReminderHookBase.scheduleTimer()",5,2,n/a,8,0,0,3,1
"freemind.modes.common.plugins.ReminderHookBase.setRemindUserAt(long)",0,2,n/a,3,0,1,1,1
"freemind.modes.common.plugins.ReminderHookBase.setToolTip(MindMapNode,String,String)",n/a,3,1,n/a,n/a,3,n/a,n/a
"freemind.modes.common.plugins.ReminderHookBase.shutdownMapHook()",7,2,n/a,8,1,0,5,2
"freemind.modes.filemode.FileController.CenterAction.CenterAction()",3,1,n/a,3,0,0,1,1
"freemind.modes.filemode.FileController.CenterAction.actionPerformed(ActionEvent)",6,0,n/a,12,1,1,3,2
"freemind.modes.filemode.FileController.FileController(Mode)",1,0,n/a,3,0,1,1,1
"freemind.modes.filemode.FileController.OpenPathAction.OpenPathAction()",3,1,n/a,3,0,0,1,1
"freemind.modes.filemode.FileController.OpenPathAction.actionPerformed(ActionEvent)",10,0,n/a,16,2,1,6,3
"freemind.modes.filemode.FileController.getHookFactory()",1,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileController.getModeToolBar()",2,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileController.getPopupMenu()",0,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileController.loadInternally(URL,MapAdapter)",0,0,n/a,8,0,2,0,1
"freemind.modes.filemode.FileController.newModel(ModeController)",3,0,n/a,5,0,1,3,1
"freemind.modes.filemode.FileController.newNode(Object,MindMap)",1,0,n/a,3,0,2,1,1
"freemind.modes.filemode.FileController.out(String)",2,0,n/a,7,0,1,1,1
"freemind.modes.filemode.FileController.plainClick(MouseEvent)",9,0,n/a,12,1,1,7,3
"freemind.modes.filemode.FileController.toggleFolded(MindMapNode)",4,1,n/a,5,1,1,2,3
"freemind.modes.filemode.FileController.updateMenus(StructuredMenuHolder)",3,0,n/a,12,0,1,3,1
"freemind.modes.filemode.FileEdgeModel.FileEdgeModel(MindMapNode,MapFeedback)",1,0,n/a,3,0,2,1,1
"freemind.modes.filemode.FileMapModel.FileMapModel(File,FreeMindMain,ModeController)",6,1,n/a,7,0,3,4,1
"freemind.modes.filemode.FileMapModel.FileMapModel(FreeMindMain,ModeController)",2,0,n/a,3,0,2,1,1
"freemind.modes.filemode.FileMapModel.changeNode(MindMapNode,String)",0,0,n/a,10,0,2,0,1
"freemind.modes.filemode.FileMapModel.createArrowLinkAdapter(NodeAdapter,NodeAdapter)",1,0,n/a,9,0,2,1,1
"freemind.modes.filemode.FileMapModel.createArrowLinkTarget(NodeAdapter,NodeAdapter)",1,0,n/a,9,0,2,1,1
"freemind.modes.filemode.FileMapModel.createCloudAdapter(NodeAdapter)",1,0,n/a,8,0,1,1,1
"freemind.modes.filemode.FileMapModel.createEdgeAdapter(NodeAdapter)",1,0,n/a,8,0,1,1,1
"freemind.modes.filemode.FileMapModel.createEncryptedNode(String)",1,0,n/a,8,0,1,1,1
"freemind.modes.filemode.FileMapModel.createNodeAdapter(MindMap,String)",1,0,n/a,8,0,2,1,1
"freemind.modes.filemode.FileMapModel.destroy()",1,1,n/a,11,0,0,1,1
"freemind.modes.filemode.FileMapModel.getFilteredXml(Writer)",1,0,n/a,10,0,1,1,1
"freemind.modes.filemode.FileMapModel.getLinkRegistry()",0,1,n/a,6,0,0,1,1
"freemind.modes.filemode.FileMapModel.getXml(Writer)",1,0,n/a,10,0,1,1,1
"freemind.modes.filemode.FileMapModel.isSaved()",0,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileMapModel.save(File)",0,0,n/a,6,0,1,1,1
"freemind.modes.filemode.FileMapModel.setLinkInclinationChanged()",0,0,n/a,7,0,0,0,1
"freemind.modes.filemode.FileMapModel.toString()",2,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileMode.FileMode()",0,0,n/a,2,0,0,0,1
"freemind.modes.filemode.FileMode.activate()",4,1,n/a,12,1,0,4,2
"freemind.modes.filemode.FileMode.createModeController()",1,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileMode.getController()",0,2,n/a,3,0,0,1,1
"freemind.modes.filemode.FileMode.getDefaultModeController()",0,4,n/a,3,0,0,1,1
"freemind.modes.filemode.FileMode.getToolbar()",0,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileMode.init(Controller)",2,0,n/a,5,0,1,3,1
"freemind.modes.filemode.FileMode.restore(String)",0,0,n/a,2,0,1,0,1
"freemind.modes.filemode.FileMode.toString()",0,2,n/a,3,0,0,1,1
"freemind.modes.filemode.FileNodeModel.FileNodeModel(File,MindMap)",6,1,n/a,6,0,2,4,1
"freemind.modes.filemode.FileNodeModel.childrenFolded()",5,0,n/a,12,2,0,4,4
"freemind.modes.filemode.FileNodeModel.childrenUnfolded()",14,9,n/a,25,4,0,16,7
"freemind.modes.filemode.FileNodeModel.getColor()",1,3,n/a,17,1,0,3,3
"freemind.modes.filemode.FileNodeModel.getFile()",0,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileNodeModel.getLink()",5,8,n/a,8,1,0,4,2
"freemind.modes.filemode.FileNodeModel.getStyle()",0,1,n/a,12,0,0,1,1
"freemind.modes.filemode.FileNodeModel.getText()",1,4,n/a,3,0,0,1,1
"freemind.modes.filemode.FileNodeModel.hasChildren()",2,0,n/a,3,0,0,1,3
"freemind.modes.filemode.FileNodeModel.isLeaf()",1,2,n/a,3,0,0,1,1
"freemind.modes.filemode.FileNodeModel.isWriteable()",0,0,n/a,3,0,0,1,1
"freemind.modes.filemode.FileNodeModel.toString()",2,7,n/a,7,1,0,4,2
"freemind.modes.filemode.FilePopupMenu.FilePopupMenu(FileController)",4,0,n/a,8,0,1,5,1
"freemind.modes.filemode.FilePopupMenu.add(Action,String)",5,4,n/a,5,0,2,2,1
"freemind.modes.filemode.FileToolBar.FileToolBar(FileController)",4,0,n/a,8,0,1,6,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.EncryptedMindMapNode(Object,MindMap)",6,0,n/a,14,1,2,7,4
"freemind.modes.mindmapmode.EncryptedMindMapNode.checkPassword(StringBuffer)",8,1,n/a,28,2,1,15,6
"freemind.modes.mindmapmode.EncryptedMindMapNode.childrenFolded()",4,0,n/a,6,1,0,3,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.childrenUnfolded()",4,0,n/a,6,1,0,3,3
"freemind.modes.mindmapmode.EncryptedMindMapNode.decrypt(StringBuffer)",16,0,n/a,44,4,1,28,7
"freemind.modes.mindmapmode.EncryptedMindMapNode.decryptXml(String,StringBuffer)",2,2,n/a,15,0,2,3,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.encrypt()",5,0,n/a,12,2,0,7,3
"freemind.modes.mindmapmode.EncryptedMindMapNode.encryptXml(StringBuffer)",6,1,n/a,15,1,1,6,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.equals(StringBuffer,StringBuffer)",5,1,n/a,13,1,2,10,4
"freemind.modes.mindmapmode.EncryptedMindMapNode.generateEncryptedContent()",7,2,n/a,15,1,0,7,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.getAdditionalInfo()",1,0,n/a,6,1,0,3,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.getChildCount()",2,0,n/a,6,1,0,3,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.getMindMapMapModel()",2,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.getNodeFromXml(String)",3,2,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.hasChildren()",2,0,n/a,6,1,0,3,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.insert(MutableTreeNode,int)",3,0,n/a,8,1,2,3,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.isAccessible()",0,12,n/a,7,0,0,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.isFolded()",2,0,n/a,9,1,0,3,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.isStoringEncryptedContent()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.isWriteable()",2,0,n/a,3,0,0,1,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.save(Writer,MindMapLinkRegistry,boolean,boolean)",10,0,n/a,27,2,4,13,4
"freemind.modes.mindmapmode.EncryptedMindMapNode.setAccessible(boolean)",1,6,n/a,8,0,1,2,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setAdditionalInfo(String)",1,0,n/a,8,0,1,3,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setFolded(boolean)",3,2,n/a,10,1,1,3,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.setMap(MindMap)",2,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setPassword(StringBuffer)",0,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setShuttingDown(boolean)",0,0,n/a,12,0,1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setStoringEncryptedContent(boolean)",0,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.updateIcon()",5,3,n/a,14,1,0,5,2
"freemind.modes.mindmapmode.JAutoScrollBarPane.JAutoScrollBarPane(Component)",1,0,n/a,5,0,1,1,1
"freemind.modes.mindmapmode.JAutoScrollBarPane.doLayout()",14,1,n/a,24,1,0,17,7
"freemind.modes.mindmapmode.JAutoScrollBarPane.getPreferredSize()",3,0,n/a,11,1,0,3,2
"freemind.modes.mindmapmode.MindMapArrowLinkModel.MindMapArrowLinkModel(MindMapNode,MindMapNode,MapFeedback)",1,2,n/a,4,0,3,1,1
"freemind.modes.mindmapmode.MindMapArrowLinkModel.changeInclination(MapView,int,int,int,int)",16,0,n/a,33,1,5,17,9
"freemind.modes.mindmapmode.MindMapArrowLinkModel.changeInclination(int,int,NodeView,Point)",4,2,n/a,21,2,4,11,6
"freemind.modes.mindmapmode.MindMapArrowLinkModel.clone()",1,2,n/a,4,0,0,1,1
"freemind.modes.mindmapmode.MindMapArrowLinkModel.toString()",4,0,n/a,4,0,0,1,1
"freemind.modes.mindmapmode.MindMapCloudModel.MindMapCloudModel(MindMapNode,MapFeedback)",1,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.DefaultMindMapNodeCreator.createNode(Object,MindMap)",1,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.EditLongAction.EditLongAction()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.EditLongAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction.ExportBranchToHTMLAction(MindMapController)",1,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction.actionPerformed(ActionEvent)",14,0,n/a,18,1,1,8,3
"freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction.ExportToHTMLAction(MindMapController)",1,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction.actionPerformed(ActionEvent)",16,0,n/a,18,1,1,8,3
"freemind.modes.mindmapmode.MindMapController.FollowLinkAction.FollowLinkAction()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.FollowLinkAction.actionPerformed(ActionEvent)",4,0,n/a,7,2,1,3,3
"freemind.modes.mindmapmode.MindMapController.ImportBranchAction.ImportBranchAction()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.ImportBranchAction.actionPerformed(ActionEvent)",11,0,n/a,18,2,1,11,4
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction.ImportLinkedBranchAction()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction.actionPerformed(ActionEvent)",22,0,n/a,27,1,1,16,5
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction.ImportLinkedBranchWithoutRootAction()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction.actionPerformed(ActionEvent)",21,0,n/a,31,2,1,18,6
"freemind.modes.mindmapmode.MindMapController.LinkActionBase.LinkActionBase(String)",1,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.LinkActionBase.isEnabled(JMenuItem,Action)",3,2,n/a,10,1,2,6,4
"freemind.modes.mindmapmode.MindMapController.MapSourceChangeDialog.MapSourceChangeDialog()",0,1,n/a,5,0,0,0,1
"freemind.modes.mindmapmode.MindMapController.MapSourceChangeDialog.getReturnValue()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.MapSourceChangeDialog.run()",16,0,n/a,21,1,0,6,2
"freemind.modes.mindmapmode.MindMapController.MindMapController(Mode)",6,0,n/a,11,0,1,6,1
"freemind.modes.mindmapmode.MindMapController.MindMapFilter.accept(File)",4,0,n/a,14,2,1,8,4
"freemind.modes.mindmapmode.MindMapController.MindMapFilter.getDescription()",1,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.NewNodeCreator.createNode(Object,MindMap)",n/a,1,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction.actionPerformed(ActionEvent)",1,0,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction.actionPerformedInternally(ActionEvent)",27,1,n/a,51,3,1,29,9
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction.interrupt()",3,1,n/a,16,2,0,8,4
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction.isRunning()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.OpenLinkDirectoryAction.OpenLinkDirectoryAction()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.OpenLinkDirectoryAction.actionPerformed(ActionEvent)",6,0,n/a,15,3,1,9,4
"freemind.modes.mindmapmode.MindMapController.SetImageByFileChooserAction.SetImageByFileChooserAction()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.SetImageByFileChooserAction.actionPerformed(ActionEvent)",3,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.MindMapController.SetLinkByFileChooserAction.SetLinkByFileChooserAction()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.SetLinkByFileChooserAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.addAttribute(MindMapNode,Attribute)",3,1,n/a,7,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.addHook(MindMapNode,List<MindMapNode>,String,Properties)",3,1,n/a,3,0,4,1,1
"freemind.modes.mindmapmode.MindMapController.addIcon(MindMapNode,MindIcon)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.addIconsToMenu(StructuredMenuHolder,String)",9,1,n/a,11,1,2,8,2
"freemind.modes.mindmapmode.MindMapController.addLink(MindMapNode,MindMapNode)",3,1,n/a,6,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.addNew(MindMapNode,int,KeyEvent)",2,4,n/a,5,0,3,2,1
"freemind.modes.mindmapmode.MindMapController.addNewNode(MindMapNode,int,boolean)",2,7,n/a,4,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.applyPattern(MindMapNode,Pattern)",3,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.applyPattern(MindMapNode,String)",7,1,n/a,9,2,2,7,3
"freemind.modes.mindmapmode.MindMapController.blendNodeColor(MindMapNode)",11,1,n/a,11,1,1,5,2
"freemind.modes.mindmapmode.MindMapController.changeArrowsOfArrowLink(MindMapArrowLink,boolean,boolean)",3,0,n/a,8,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.changeSelection(NodeView,boolean)",2,2,n/a,11,0,2,2,1
"freemind.modes.mindmapmode.MindMapController.clearNodeContents(MindMapNode)",27,0,n/a,21,0,1,15,1
"freemind.modes.mindmapmode.MindMapController.close(boolean)",2,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.copy(MindMapNode,boolean)",8,0,n/a,12,1,2,5,2
"freemind.modes.mindmapmode.MindMapController.createIconActions()",17,1,n/a,3,3,0,21,6
"freemind.modes.mindmapmode.MindMapController.createModeControllerHook(String)",4,1,n/a,9,0,1,4,1
"freemind.modes.mindmapmode.MindMapController.createNodeHook(String,MindMapNode)",9,1,n/a,19,3,2,12,4
"freemind.modes.mindmapmode.MindMapController.createNodeHookActions()",8,1,n/a,22,2,0,11,4
"freemind.modes.mindmapmode.MindMapController.createPatternSubMenu(StructuredMenuHolder,String)",5,1,n/a,12,1,2,5,2
"freemind.modes.mindmapmode.MindMapController.createPatterns(List<Pattern>)",9,1,n/a,14,2,1,10,4
"freemind.modes.mindmapmode.MindMapController.createStandardActions()",73,1,n/a,95,0,0,67,1
"freemind.modes.mindmapmode.MindMapController.cut()",3,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.cut(List<MindMapNode>)",3,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.deRegisterMouseWheelEventHandler(MouseWheelEventHandler)",2,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.MindMapController.decorateDialog(JDialog,String)",3,0,n/a,5,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.deleteNode(MindMapNode)",2,3,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.deregisterPlugin(MindMapControllerPlugin)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.doTransaction(String,ActionPair)",1,3,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.doubleClick(MouseEvent)",12,1,n/a,14,1,1,5,8
"freemind.modes.mindmapmode.MindMapController.edit(KeyEvent,boolean,boolean)",1,4,n/a,4,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.extendSelection(MouseEvent)",25,0,n/a,59,2,1,25,12
"freemind.modes.mindmapmode.MindMapController.getActionRegistry()",0,7,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getActorFactory()",0,31,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getClipboard()",3,2,n/a,7,1,0,4,2
"freemind.modes.mindmapmode.MindMapController.getClipboardContents()",2,3,n/a,6,0,0,2,1
"freemind.modes.mindmapmode.MindMapController.getContent(String,int)",25,1,n/a,62,3,2,39,16
"freemind.modes.mindmapmode.MindMapController.getFileFilter()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getHookFactory()",1,7,n/a,7,1,0,3,2
"freemind.modes.mindmapmode.MindMapController.getLeftToolBar()",1,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getLinkByFileChooser(FileFilter)",14,2,n/a,21,1,1,11,3
"freemind.modes.mindmapmode.MindMapController.getMindMapMapModel()",1,7,n/a,4,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getModeToolBar()",1,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getPatternReader()",8,1,n/a,17,1,0,7,3
"freemind.modes.mindmapmode.MindMapController.getPatternsList()",0,2,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getPlugins()",1,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getPopupForModel(Object)",66,0,n/a,70,3,1,45,9
"freemind.modes.mindmapmode.MindMapController.getPopupMenu()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getRegisteredMouseWheelEventHandler()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.getToolBar()",0,4,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.increaseFontSize(MindMapNode,int)",5,2,n/a,10,1,2,3,2
"freemind.modes.mindmapmode.MindMapController.init()",20,1,n/a,28,1,0,19,2
"freemind.modes.mindmapmode.MindMapController.insertAttribute(MindMapNode,int,Attribute)",3,0,n/a,8,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.insertNodeInto(MindMapNode,MindMapNode)",2,1,n/a,10,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.insertNodeInto(MindMapNode,MindMapNode,int)",3,0,n/a,5,0,3,2,1
"freemind.modes.mindmapmode.MindMapController.invokeHook(ModeControllerHook)",5,1,n/a,12,1,1,5,2
"freemind.modes.mindmapmode.MindMapController.isUndoAction()",2,2,n/a,3,0,0,1,2
"freemind.modes.mindmapmode.MindMapController.joinNodes(MindMapNode,List<MindMapNode>)",1,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.loadInternally(URL,MapAdapter)",32,0,n/a,41,3,2,21,6
"freemind.modes.mindmapmode.MindMapController.loadPatternActions()",16,1,n/a,50,3,0,16,5
"freemind.modes.mindmapmode.MindMapController.loadPatterns(Reader)",2,2,n/a,9,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.loadTree(File)",2,4,n/a,4,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.loadTree(ReaderCreator)",11,1,n/a,15,2,1,3,1
"freemind.modes.mindmapmode.MindMapController.loadURL(String)",6,6,n/a,11,2,1,6,3
"freemind.modes.mindmapmode.MindMapController.mapSourceChanged(MindMap)",3,0,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.MindMapController.marshall(XmlAction)",1,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.moveNodePosition(MindMapNode,int,int,int)",3,3,n/a,4,0,4,1,1
"freemind.modes.mindmapmode.MindMapController.moveNodes(MindMapNode,List<MindMapNode>,int)",3,2,n/a,3,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.newModel(ModeController)",2,0,n/a,5,0,1,3,1
"freemind.modes.mindmapmode.MindMapController.newNode(Object,MindMap)",2,0,n/a,7,1,2,3,2
"freemind.modes.mindmapmode.MindMapController.nodeChanged(MindMapNode)",7,2,n/a,10,1,1,5,3
"freemind.modes.mindmapmode.MindMapController.nodeStyleChanged(MindMapNode)",8,1,n/a,11,2,1,6,4
"freemind.modes.mindmapmode.MindMapController.obtainFocusForSelected()",2,2,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.onFocusNode(NodeView)",4,2,n/a,13,0,1,4,1
"freemind.modes.mindmapmode.MindMapController.onLostFocusNode(NodeView)",2,2,n/a,11,0,1,2,1
"freemind.modes.mindmapmode.MindMapController.out(String)",2,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.paste(MindMapNode,MindMapNode)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.paste(Transferable,MindMapNode)",2,1,n/a,4,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.paste(Transferable,MindMapNode,boolean,boolean)",6,3,n/a,17,1,4,3,4
"freemind.modes.mindmapmode.MindMapController.plainClick(MouseEvent)",11,0,n/a,17,2,1,10,4
"freemind.modes.mindmapmode.MindMapController.processMenuCategory(StructuredMenuHolder,List<Object>,String)",22,2,n/a,48,4,3,32,11
"freemind.modes.mindmapmode.MindMapController.recursiveCallUpdateHooks(MindMapNode,MindMapNode)",8,2,n/a,18,3,2,8,8
"freemind.modes.mindmapmode.MindMapController.registerMouseWheelEventHandler(MouseWheelEventHandler)",2,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.MindMapController.registerPlugin(MindMapControllerPlugin)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.removeAllIcons(MindMapNode)",2,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.removeAttribute(MindMapNode,int)",3,0,n/a,7,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.removeHook(MindMapNode,List<MindMapNode>,String)",3,0,n/a,3,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.removeLastIcon(MindMapNode)",2,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.removeNodeFromParent(MindMapNode)",7,0,n/a,7,0,1,4,1
"freemind.modes.mindmapmode.MindMapController.removeReference(MindMapLink)",3,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.repaintMap()",2,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.saveHTML(List<MindMapNodeModel>,Writer)",2,2,n/a,5,0,2,2,1
"freemind.modes.mindmapmode.MindMapController.saveHTML(MindMapNodeModel,File)",5,2,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.MindMapController.setAllActions(boolean)",72,4,n/a,86,1,1,82,6
"freemind.modes.mindmapmode.MindMapController.setArrowLinkColor(MindMapLink,Color)",3,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setArrowLinkEndPoints(MindMapArrowLink,Point,Point)",3,1,n/a,5,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.setAttribute(MindMapNode,int,Attribute)",3,0,n/a,8,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.setBold(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setClipboardContents(Transferable)",3,3,n/a,9,1,1,4,2
"freemind.modes.mindmapmode.MindMapController.setCloud(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setCloudColor(MindMapNode,Color)",2,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setEdgeColor(MindMapNode,Color)",3,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setEdgeStyle(MindMapNode,String)",3,0,n/a,6,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setEdgeWidth(MindMapNode,int)",3,0,n/a,6,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setFolded(MindMapNode,boolean)",3,4,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setFontFamily(MindMapNode,String)",3,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setFontSize(MindMapNode,String)",3,1,n/a,4,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setImageByFileChooser()",9,1,n/a,14,1,0,10,2
"freemind.modes.mindmapmode.MindMapController.setItalic(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setLink(MindMapNode,String)",3,7,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setLinkByFileChooser()",3,1,n/a,5,0,0,3,2
"freemind.modes.mindmapmode.MindMapController.setNewNodeCreator(NewNodeCreator)",0,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeBackgroundColor(MindMapNode,Color)",3,2,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeColor(MindMapNode,Color)",3,2,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeHookFactory(HookFactory)",0,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeStyle(MindMapNode,String)",3,0,n/a,6,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeText(MindMapNode,String)",3,13,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setNoteText(MindMapNode,String)",3,1,n/a,7,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.setStrikethrough(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapController.shutdownController()",19,2,n/a,17,1,0,12,2
"freemind.modes.mindmapmode.MindMapController.splitNode(MindMapNode,int,String)",13,3,n/a,22,1,3,14,4
"freemind.modes.mindmapmode.MindMapController.startupController()",37,2,n/a,4,2,0,22,3
"freemind.modes.mindmapmode.MindMapController.storeDialogPositions(JDialog,WindowConfigurationStorage,String)",3,0,n/a,6,0,3,1,1
"freemind.modes.mindmapmode.MindMapController.toggleFolded()",5,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapController.unMarshall(String)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapController.updateMenus(StructuredMenuHolder)",14,0,n/a,29,2,1,16,3
"freemind.modes.mindmapmode.MindMapController.updateMenusFromXml(InputStream)",6,1,n/a,14,1,1,6,2
"freemind.modes.mindmapmode.MindMapController.updateNode(MindMapNode)",2,0,n/a,7,0,1,2,1
"freemind.modes.mindmapmode.MindMapController.updateNodeInformation()",4,4,n/a,10,1,0,4,2
"freemind.modes.mindmapmode.MindMapController.updateToolbar(MindMapNode)",6,2,n/a,5,0,1,3,1
"freemind.modes.mindmapmode.MindMapEdgeModel.MindMapEdgeModel(MindMapNode,MapFeedback)",1,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.MindMapHTMLWriter(Writer)",2,0,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.convertSpecialChar(char)",1,1,n/a,48,1,1,27,9
"freemind.modes.mindmapmode.MindMapHTMLWriter.fontStyle(MindMapNodeModel)",15,1,n/a,26,2,1,16,8
"freemind.modes.mindmapmode.MindMapHTMLWriter.getProperty(String)",2,7,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.hasHtml(MindMapNodeModel)",2,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.isHeading(MindMapNodeModel,int)",2,1,n/a,4,0,2,1,4
"freemind.modes.mindmapmode.MindMapHTMLWriter.saveHTML(List<MindMapNodeModel>)",10,0,n/a,13,1,1,10,2
"freemind.modes.mindmapmode.MindMapHTMLWriter.saveHTML(MindMapNodeModel)",16,0,n/a,27,1,1,12,4
"freemind.modes.mindmapmode.MindMapHTMLWriter.saveHTML(MindMapNodeModel,String,int,boolean,boolean,int)",63,7,n/a,133,3,6,78,32
"freemind.modes.mindmapmode.MindMapHTMLWriter.saveHTML_escapeUnicodeAndSpecialCharacters(String)",14,2,n/a,43,4,1,37,10
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeBodyWithFolding(MindMapNodeModel)",7,1,n/a,15,0,1,7,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeFoldingButtons(String)",2,1,n/a,9,0,1,2,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeIcons(MindMapNodeModel)",9,1,n/a,9,1,1,4,2
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeJavaScript()",1,1,n/a,169,0,0,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeModelContent(MindMapNodeModel)",11,1,n/a,22,2,1,7,3
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeStyle()",5,2,n/a,51,1,0,6,2
"freemind.modes.mindmapmode.MindMapMapModel.DoAutomaticSave.DoAutomaticSave(MindMapMapModel,int,boolean,File)",2,1,n/a,9,0,4,6,2
"freemind.modes.mindmapmode.MindMapMapModel.DoAutomaticSave.run()",30,0,n/a,41,5,0,26,10
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.popLockingUserOfOldLock()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.releaseLock()",0,2,n/a,2,0,0,0,1
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.releaseTimer()",0,1,n/a,2,0,0,0,1
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.run()",0,0,n/a,2,0,0,0,1
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.tryToLock(File)",0,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.getSemaphoreFile(File)",4,1,n/a,5,0,1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.popLockingUserOfOldLock()",0,1,n/a,5,0,0,3,1
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.releaseLock()",1,2,n/a,6,1,0,3,2
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.releaseTimer()",1,1,n/a,6,1,0,3,2
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.run()",5,0,n/a,19,1,0,7,3
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.tryToLock(File)",14,1,n/a,34,2,1,20,5
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.writeSemaphoreFile(File)",17,2,n/a,30,2,1,16,5
"freemind.modes.mindmapmode.MindMapMapModel.MindMapMapModel(MapFeedback)",1,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.MindMapMapModel(MindMapNodeModel,MapFeedback)",12,2,n/a,3,2,2,9,3
"freemind.modes.mindmapmode.MindMapMapModel.changeNode(MindMapNode,String)",6,0,n/a,8,1,2,4,2
"freemind.modes.mindmapmode.MindMapMapModel.createArrowLinkAdapter(NodeAdapter,NodeAdapter)",1,0,n/a,4,0,2,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createArrowLinkTarget(NodeAdapter,NodeAdapter)",1,0,n/a,4,0,2,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createCloudAdapter(NodeAdapter)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createEdgeAdapter(NodeAdapter)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createEncryptedNode(String)",4,0,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.MindMapMapModel.createNodeAdapter(MindMap,String)",9,1,n/a,25,1,2,13,3
"freemind.modes.mindmapmode.MindMapMapModel.destroy()",4,1,n/a,10,1,0,5,2
"freemind.modes.mindmapmode.MindMapMapModel.getAsHTML(List)",7,0,n/a,13,1,1,8,2
"freemind.modes.mindmapmode.MindMapMapModel.getAsPlainText(List)",10,0,n/a,15,2,1,10,3
"freemind.modes.mindmapmode.MindMapMapModel.getAsRTF(List)",7,0,n/a,13,1,1,8,2
"freemind.modes.mindmapmode.MindMapMapModel.getFilteredXml(Writer)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.getLinkRegistry()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapMapModel.getRestorable()",3,0,n/a,4,0,0,1,2
"freemind.modes.mindmapmode.MindMapMapModel.getXml(Writer)",1,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.getXml(Writer,boolean)",2,2,n/a,9,0,2,1,1
"freemind.modes.mindmapmode.MindMapMapModel.getXml(Writer,boolean,MindMapNode)",8,1,n/a,15,0,3,7,1
"freemind.modes.mindmapmode.MindMapMapModel.save(File)",2,1,n/a,15,2,1,6,2
"freemind.modes.mindmapmode.MindMapMapModel.saveInternal(File,boolean)",8,2,n/a,27,2,2,12,5
"freemind.modes.mindmapmode.MindMapMapModel.saveRTF(List<MindMapNodeModel>,BufferedWriter)",16,1,n/a,35,2,2,21,5
"freemind.modes.mindmapmode.MindMapMapModel.saveTXT(MindMapNodeModel,File)",8,0,n/a,14,1,2,8,2
"freemind.modes.mindmapmode.MindMapMapModel.scheduleTimerForAutomaticSaving()",20,2,n/a,32,2,0,18,5
"freemind.modes.mindmapmode.MindMapMapModel.toString()",3,2,n/a,3,0,0,1,2
"freemind.modes.mindmapmode.MindMapMapModel.tryToLock(File)",7,1,n/a,24,1,1,7,3
"freemind.modes.mindmapmode.MindMapMode.MindMapMode()",0,0,n/a,2,0,0,0,1
"freemind.modes.mindmapmode.MindMapMode.activate()",2,1,n/a,11,1,0,3,2
"freemind.modes.mindmapmode.MindMapMode.createModeController()",3,1,n/a,7,0,0,4,1
"freemind.modes.mindmapmode.MindMapMode.getController()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapMode.getDefaultModeController()",0,4,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapMode.init(Controller)",5,0,n/a,7,1,1,4,2
"freemind.modes.mindmapmode.MindMapMode.restore(String)",3,0,n/a,5,0,1,1,1
"freemind.modes.mindmapmode.MindMapMode.toString()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.MindMapNodeModel(MindMap)",1,3,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.MindMapNodeModel(Object,MindMap)",5,3,n/a,5,0,2,3,1
"freemind.modes.mindmapmode.MindMapNodeModel.collectColors(HashSet<Color>)",6,1,n/a,8,1,1,5,3
"freemind.modes.mindmapmode.MindMapNodeModel.getPlainTextContent()",2,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.isWriteable()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.saveChildrenRTF(Writer,int,HashMap<Color, Integer>)",6,2,n/a,11,2,3,6,3
"freemind.modes.mindmapmode.MindMapNodeModel.saveChildrenText(Writer,int)",6,2,n/a,10,2,2,6,3
"freemind.modes.mindmapmode.MindMapNodeModel.saveRFT_escapeUnicodeAndSpecialCharacters(String)",13,2,n/a,31,3,1,27,8
"freemind.modes.mindmapmode.MindMapNodeModel.saveRTF(Writer,int,HashMap<Color, Integer>)",27,1,n/a,50,3,3,32,11
"freemind.modes.mindmapmode.MindMapNodeModel.saveTXT(Writer,int)",12,1,n/a,34,3,2,15,5
"freemind.modes.mindmapmode.MindMapPopupMenu.MindMapPopupMenu(MindMapController)",5,0,n/a,7,1,1,4,2
"freemind.modes.mindmapmode.MindMapPopupMenu.update(StructuredMenuHolder)",4,0,n/a,8,0,1,4,1
"freemind.modes.mindmapmode.MindMapToolBar.FreeMindComboBox.FreeMindComboBox(String[])",1,3,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.FreeMindComboBox.getMaximumSize()",1,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapToolBar.MindMapToolBar(MindMapController)",50,0,n/a,11,3,1,48,9
"freemind.modes.mindmapmode.MindMapToolBar.addIcon(String)",7,4,n/a,8,0,1,5,1
"freemind.modes.mindmapmode.MindMapToolBar.getController()",1,4,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapToolBar.getItemForZoom(float)",0,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.getLeftToolBar()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapToolBar.selectColor(Color)",11,0,n/a,23,2,1,16,4
"freemind.modes.mindmapmode.MindMapToolBar.selectFontName(String)",3,0,n/a,11,1,1,7,2
"freemind.modes.mindmapmode.MindMapToolBar.selectFontSize(String)",1,0,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.MindMapToolBar.setAllActions(boolean)",2,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.MindMapToolBar.setFontColorByItem(ColorPair)",2,1,n/a,5,1,1,2,2
"freemind.modes.mindmapmode.MindMapToolBar.setZoom(float)",7,0,n/a,15,2,1,9,3
"freemind.modes.mindmapmode.MindMapToolBar.setZoomByItem(Object)",6,1,n/a,10,0,1,6,2
"freemind.modes.mindmapmode.MindMapToolBar.shutdown()",2,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapToolBar.startup()",2,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.MindMapToolBar.update(StructuredMenuHolder)",23,0,n/a,25,1,1,21,2
"freemind.modes.mindmapmode.actions.AddArrowLinkAction.AddArrowLinkAction(MindMapController)",1,1,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.AddArrowLinkAction.actionPerformed(ActionEvent)",12,0,n/a,25,2,1,13,5
"freemind.modes.mindmapmode.actions.AddArrowLinkAction.isEnabled(JMenuItem,Action)",3,0,n/a,12,0,2,1,3
"freemind.modes.mindmapmode.actions.AddLocalLinkAction.AddLocalLinkAction(MindMapController)",1,1,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.AddLocalLinkAction.actionPerformed(ActionEvent)",10,0,n/a,23,2,1,13,5
"freemind.modes.mindmapmode.actions.AddLocalLinkAction.isEnabled(JMenuItem,Action)",3,0,n/a,12,0,2,1,3
"freemind.modes.mindmapmode.actions.ApplyPatternAction.ApplyPatternAction(MindMapController,Pattern)",4,1,n/a,6,0,2,4,1
"freemind.modes.mindmapmode.actions.ApplyPatternAction.ExternalPatternAction.act(MindMapNode,Pattern)",n/a,1,0,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.ApplyPatternAction.apply(MindMapMapModel,MindMapNodeModel)",6,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.ApplyPatternAction.edgeWidthIntToString(int)",1,1,n/a,9,1,1,5,3
"freemind.modes.mindmapmode.actions.ApplyPatternAction.getPattern()",0,2,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.actions.BoldAction.BoldAction(MindMapController)",2,1,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.BoldAction.isSelected(JMenuItem,Action)",2,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.ChangeArrowsInArrowLinkAction.ChangeArrowsInArrowLinkAction(MindMapController,String,String,MindMapArrowLinkModel,boolean,boolean)",1,5,n/a,9,0,6,5,1
"freemind.modes.mindmapmode.actions.ChangeArrowsInArrowLinkAction.actionPerformed(ActionEvent)",3,0,n/a,4,0,1,1,1
"freemind.modes.mindmapmode.actions.CloudAction.CloudAction(MindMapController)",3,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.CloudAction.getDoActionClass()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.CloudAction.isSelected(JMenuItem,Action)",2,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.CloudColorAction.CloudColorAction(MindMapController)",1,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.CloudColorAction.actionPerformed(ActionEvent)",11,0,n/a,15,1,1,8,4
"freemind.modes.mindmapmode.actions.CloudColorAction.isEnabled(JMenuItem,Action)",4,1,n/a,7,0,2,1,4
"freemind.modes.mindmapmode.actions.ColorArrowLinkAction.ColorArrowLinkAction(MindMapController,MindMapArrowLinkModel)",1,2,n/a,6,0,2,3,1
"freemind.modes.mindmapmode.actions.ColorArrowLinkAction.actionPerformed(ActionEvent)",6,0,n/a,9,0,1,5,2
"freemind.modes.mindmapmode.actions.CopyAction.CopyAction(MindMapController)",6,1,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.actions.CopyAction.actionPerformed(ActionEvent)",3,0,n/a,8,2,1,4,3
"freemind.modes.mindmapmode.actions.CopySingleAction.CopySingleAction(MindMapController)",3,1,n/a,5,0,1,3,1
"freemind.modes.mindmapmode.actions.CopySingleAction.actionPerformed(ActionEvent)",3,0,n/a,8,2,1,4,3
"freemind.modes.mindmapmode.actions.CutAction.CutAction(MindMapController)",10,1,n/a,10,1,1,5,2
"freemind.modes.mindmapmode.actions.CutAction.actionPerformed(ActionEvent)",19,0,n/a,23,1,1,9,3
"freemind.modes.mindmapmode.actions.DeleteChildAction.DeleteChildAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.DeleteChildAction.actionPerformed(ActionEvent)",15,0,n/a,25,2,1,8,4
"freemind.modes.mindmapmode.actions.DeleteChildAction.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.EdgeColorAction.EdgeColorAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.EdgeColorAction.actionPerformed(ActionEvent)",9,0,n/a,11,1,1,5,3
"freemind.modes.mindmapmode.actions.EdgeStyleAction.EdgeStyleAction(MindMapController,String)",3,4,n/a,6,0,2,3,1
"freemind.modes.mindmapmode.actions.EdgeStyleAction.getActionPair(MindMapNodeModel)",4,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.EdgeStyleAction.isSelected(JMenuItem,Action)",5,1,n/a,7,0,2,2,1
"freemind.modes.mindmapmode.actions.EdgeWidthAction.EdgeWidthAction(MindMapController,int)",3,6,n/a,5,0,2,3,1
"freemind.modes.mindmapmode.actions.EdgeWidthAction.getActionPair(MindMapNodeModel)",4,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.EdgeWidthAction.getWidth()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.EdgeWidthAction.getWidthTitle(MindMapController,int)",3,1,n/a,11,1,2,7,3
"freemind.modes.mindmapmode.actions.EdgeWidthAction.isSelected(JMenuItem,Action)",4,1,n/a,7,0,2,2,1
"freemind.modes.mindmapmode.actions.EditAction.EditAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.EditAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.EditAction.edit(KeyEvent,boolean,boolean)",7,1,n/a,16,2,3,8,6
"freemind.modes.mindmapmode.actions.EditAction.edit(NodeView,NodeView,KeyEvent,boolean,boolean,boolean)",75,3,n/a,2,4,6,73,19
"freemind.modes.mindmapmode.actions.EditAction.setHtmlText(NodeView,String)",4,2,n/a,4,0,2,2,1
"freemind.modes.mindmapmode.actions.EditAction.stopEditing()",1,2,n/a,7,1,0,3,2
"freemind.modes.mindmapmode.actions.ExportBranchAction.ExportBranchAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.ExportBranchAction.actionPerformed(ActionEvent)",68,0,n/a,11,4,1,52,13
"freemind.modes.mindmapmode.actions.FontFamilyAction.FontFamilyAction(MindMapController)",3,1,n/a,7,0,1,2,1
"freemind.modes.mindmapmode.actions.FontFamilyAction.actionPerformed(String)",1,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.FontFamilyAction.getActionPair(MindMapNodeModel)",4,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.FontSizeAction.FontSizeAction(MindMapController)",3,1,n/a,7,0,1,2,1
"freemind.modes.mindmapmode.actions.FontSizeAction.actionPerformed(String)",1,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.FontSizeAction.getActionPair(MindMapNodeModel)",4,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.HookAction.getHookName()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.modes.mindmapmode.actions.IconAction.IconAction(MindMapController,MindIcon,RemoveIconAction)",5,2,n/a,7,0,3,4,1
"freemind.modes.mindmapmode.actions.IconAction.actionPerformed(ActionEvent)",10,0,n/a,24,1,1,13,7
"freemind.modes.mindmapmode.actions.IconAction.addLastIcon()",3,2,n/a,5,1,0,2,2
"freemind.modes.mindmapmode.actions.IconAction.createAddIconAction(MindMapNode,MindIcon,int)",2,0,n/a,4,0,3,1,1
"freemind.modes.mindmapmode.actions.IconAction.getAddIconActor()",3,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.IconAction.getDescription()",1,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.IconAction.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.IconAction.getIcon()",1,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.IconAction.getKeyStroke()",5,1,n/a,6,0,0,3,1
"freemind.modes.mindmapmode.actions.IconAction.getKeystrokeResourceName()",1,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.IconAction.getMindIcon()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.IconAction.removeAllIcons()",4,1,n/a,7,2,0,3,3
"freemind.modes.mindmapmode.actions.IconAction.removeIcon(boolean)",3,2,n/a,5,1,1,2,2
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction.ImportExplorerFavoritesAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction.actionPerformed(ActionEvent)",14,0,n/a,21,1,1,9,2
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction.addNode(MindMapNode,String)",4,2,n/a,8,0,2,3,1
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction.importExplorerFavorites(File,MindMapNode,boolean)",23,2,n/a,51,6,3,30,12
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.ImportFolderStructureAction(MindMapController)",5,1,n/a,6,0,1,4,2
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.actionPerformed(ActionEvent)",16,0,n/a,29,2,1,14,3
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.addNode(MindMapNode,String,String)",5,2,n/a,10,0,3,4,1
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.getFrame()",1,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.importFolderStructure(File,MindMapNode,boolean)",18,2,n/a,27,4,3,17,7
"freemind.modes.mindmapmode.actions.ItalicAction.ItalicAction(MindMapController)",2,1,n/a,7,0,1,3,1
"freemind.modes.mindmapmode.actions.ItalicAction.isSelected(JMenuItem,Action)",2,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.JoinNodesAction.JoinNodesAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.JoinNodesAction.actionPerformed(ActionEvent)",6,0,n/a,7,0,1,3,1
"freemind.modes.mindmapmode.actions.JoinNodesAction.addContent(String,boolean,String,boolean)",5,1,n/a,23,2,4,15,8
"freemind.modes.mindmapmode.actions.JoinNodesAction.joinNodes(MindMapNode,List<MindMapNode>)",11,2,n/a,26,2,2,16,6
"freemind.modes.mindmapmode.actions.MindMapActions.addAttribute(MindMapNode,Attribute)",n/a,1,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.addHook(MindMapNode,List<MindMapNode>,String,Properties)",n/a,0,1,n/a,n/a,4,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.addIcon(MindMapNode,MindIcon)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.addLink(MindMapNode,MindMapNode)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.addNewNode(MindMapNode,int,boolean)",n/a,0,1,n/a,n/a,3,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.applyPattern(MindMapNode,Pattern)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.blendNodeColor(MindMapNode)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.changeArrowsOfArrowLink(MindMapArrowLink,boolean,boolean)",n/a,0,1,n/a,n/a,3,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.createNodeHook(String,MindMapNode)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.cut()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.cut(List<MindMapNode>)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.deleteNode(MindMapNode)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.edit(KeyEvent,boolean,boolean)",n/a,0,1,n/a,n/a,3,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.insertAttribute(MindMapNode,int,Attribute)",n/a,0,1,n/a,n/a,3,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.invokeHooksRecursively(MindMapNode,MindMap)",n/a,4,0,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.moveNodePosition(MindMapNode,int,int,int)",n/a,0,1,n/a,n/a,4,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.moveNodes(MindMapNode,List<MindMapNode>,int)",n/a,0,1,n/a,n/a,3,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.paste(MindMapNode,MindMapNode)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.paste(Transferable,MindMapNode,boolean,boolean)",n/a,0,1,n/a,n/a,4,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.removeAllIcons(MindMapNode)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.removeAttribute(MindMapNode,int)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.removeHook(MindMapNode,List<MindMapNode>,String)",n/a,0,1,n/a,n/a,3,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.removeLastIcon(MindMapNode)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.removeReference(MindMapLink)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setArrowLinkColor(MindMapLink,Color)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setArrowLinkEndPoints(MindMapArrowLink,Point,Point)",n/a,0,1,n/a,n/a,3,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setAttribute(MindMapNode,int,Attribute)",n/a,0,1,n/a,n/a,3,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setBold(MindMapNode,boolean)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setCloud(MindMapNode,boolean)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setCloudColor(MindMapNode,Color)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setEdgeColor(MindMapNode,Color)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setEdgeStyle(MindMapNode,String)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setEdgeWidth(MindMapNode,int)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setFolded(MindMapNode,boolean)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setFontFamily(MindMapNode,String)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setFontSize(MindMapNode,String)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setItalic(MindMapNode,boolean)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setLink(MindMapNode,String)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setNodeBackgroundColor(MindMapNode,Color)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setNodeColor(MindMapNode,Color)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setNodeStyle(MindMapNode,String)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setNodeText(MindMapNode,String)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setNoteText(MindMapNode,String)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.setStrikethrough(MindMapNode,boolean)",n/a,0,1,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapActions.toggleFolded()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction.MindMapControllerHookAction(String,MindMapController)",1,1,n/a,6,0,2,3,1
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction.actionPerformed(ActionEvent)",2,0,n/a,6,1,1,3,2
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction.getHookName()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction.isEnabled(JMenuItem,Action)",1,1,n/a,6,0,2,1,1
"freemind.modes.mindmapmode.actions.MindmapAction.MindmapAction(String,Icon,MindMapController)",1,2,n/a,9,0,3,2,1
"freemind.modes.mindmapmode.actions.MindmapAction.MindmapAction(String,MindMapController)",1,10,n/a,8,0,2,1,1
"freemind.modes.mindmapmode.actions.MindmapAction.MindmapAction(String,String,MindMapController)",5,2,n/a,12,0,3,1,2
"freemind.modes.mindmapmode.actions.MindmapAction.addActor(ActorXml)",3,0,n/a,5,0,1,1,1
"freemind.modes.mindmapmode.actions.MindmapAction.getMindMapController()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.MoveNodeAction.MoveNodeAction(MindMapController)",2,1,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.NewChildAction.NewChildAction(MindMapController)",4,1,n/a,7,1,1,4,2
"freemind.modes.mindmapmode.actions.NewChildAction.actionPerformed(ActionEvent)",2,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.NewChildAction.addNew(MindMapNode,int,KeyEvent)",30,1,n/a,48,4,3,31,10
"freemind.modes.mindmapmode.actions.NewChildAction.addNewNode(MindMapNode,int)",3,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.NewChildAction.getModeController()",0,11,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.NewPreviousSiblingAction.NewPreviousSiblingAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.NewPreviousSiblingAction.actionPerformed(ActionEvent)",2,0,n/a,4,0,1,1,1
"freemind.modes.mindmapmode.actions.NewSiblingAction.NewSiblingAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.NewSiblingAction.actionPerformed(ActionEvent)",2,0,n/a,4,0,1,1,1
"freemind.modes.mindmapmode.actions.NodeActorXml.apply(MindMap,MindMapNode)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.NodeBackgroundColorAction.NodeBackgroundColorAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.NodeBackgroundColorAction.RemoveNodeBackgroundColorAction.RemoveNodeBackgroundColorAction(MindMapController)",4,1,n/a,3,2,1,3,1
"freemind.modes.mindmapmode.actions.NodeBackgroundColorAction.actionPerformed(ActionEvent)",8,0,n/a,12,1,1,5,3
"freemind.modes.mindmapmode.actions.NodeColorAction.NodeColorAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.NodeColorAction.actionPerformed(ActionEvent)",8,0,n/a,12,1,1,5,3
"freemind.modes.mindmapmode.actions.NodeColorBlendAction.NodeColorBlendAction(MindMapController)",3,1,n/a,3,2,1,2,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.NodeGeneralAction(MindMapController,String,String)",10,2,n/a,19,1,3,7,4
"freemind.modes.mindmapmode.actions.NodeGeneralAction.NodeGeneralAction(MindMapController,String,String,NodeActorXml)",2,0,n/a,6,0,4,2,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.NodeGeneralAction(MindMapController,String,String,SingleNodeOperation)",1,0,n/a,5,0,4,2,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.getActionPair(MindMapNodeModel)",7,1,n/a,19,2,1,9,3
"freemind.modes.mindmapmode.actions.NodeGeneralAction.setDoActionClass(Class<?>)",0,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.setName(String)",3,1,n/a,6,1,1,3,2
"freemind.modes.mindmapmode.actions.NodeGeneralAction.setSingleNodeOperation(SingleNodeOperation)",0,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.xmlActionPerformed(ActionEvent)",21,1,n/a,35,3,1,17,6
"freemind.modes.mindmapmode.actions.NodeHookAction.NodeHookAction(String,MindMapController)",5,2,n/a,7,0,2,5,2
"freemind.modes.mindmapmode.actions.NodeHookAction.actionPerformed(ActionEvent)",7,0,n/a,8,0,1,3,1
"freemind.modes.mindmapmode.actions.NodeHookAction.getController()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.getHookFactory()",1,3,n/a,6,0,0,2,1
"freemind.modes.mindmapmode.actions.NodeHookAction.getHookName()",0,0,n/a,5,0,0,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.getInstanciationMethod(String)",2,1,n/a,9,0,1,3,1
"freemind.modes.mindmapmode.actions.NodeHookAction.invoke(MindMapNode,List<MindMapNode>)",1,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.isEnabled(JMenuItem,Action)",5,1,n/a,21,2,2,9,5
"freemind.modes.mindmapmode.actions.NodeHookAction.isSelected(JMenuItem,Action)",9,1,n/a,20,2,2,12,3
"freemind.modes.mindmapmode.actions.NodeStyleAction.NodeStyleAction(MindMapController,String)",1,2,n/a,4,0,2,2,1
"freemind.modes.mindmapmode.actions.NodeStyleAction.getActionPair(MindMapNodeModel)",4,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.NodeStyleAction.isSelected(JMenuItem,Action)",4,1,n/a,6,0,2,4,2
"freemind.modes.mindmapmode.actions.NodeUpAction.NodeUpAction(MindMapController)",5,1,n/a,8,1,1,4,2
"freemind.modes.mindmapmode.actions.NodeUpAction.actionPerformed(ActionEvent)",4,0,n/a,6,0,1,4,1
"freemind.modes.mindmapmode.actions.PasteAction.PasteAction(MindMapController)",10,1,n/a,10,1,1,5,2
"freemind.modes.mindmapmode.actions.PasteAction.actionPerformed(ActionEvent)",3,0,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.actions.PasteAction.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.PasteAsPlainTextAction.PasteAsPlainTextAction(MindMapController)",7,1,n/a,9,1,1,5,2
"freemind.modes.mindmapmode.actions.PasteAsPlainTextAction.actionPerformed(ActionEvent)",15,0,n/a,33,2,1,12,4
"freemind.modes.mindmapmode.actions.RedoAction.RedoAction(MindMapController)",5,1,n/a,5,0,1,2,1
"freemind.modes.mindmapmode.actions.RedoAction.informUndoPartner(ActionPair)",3,0,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.RemoveAllIconsAction(MindMapController,IconAction)",2,1,n/a,7,0,2,2,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.getDescription()",1,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.getIcon()",1,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.getKeyStroke()",5,1,n/a,4,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.getKeystrokeResourceName()",0,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction.RemoveArrowLinkAction(MindMapController,MindMapArrowLinkModel)",2,2,n/a,9,0,2,3,1
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction.getArrowLink()",0,0,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction.setArrowLink(MindMapArrowLinkModel)",0,2,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.RemoveIconAction(MindMapController)",2,1,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.getDescription()",1,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.getIcon()",1,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.getKeyStroke()",5,1,n/a,4,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.getKeystrokeResourceName()",0,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.setIconAction(IconAction)",0,1,n/a,6,0,1,0,1
"freemind.modes.mindmapmode.actions.RevertAction.RevertAction(MindMapController)",1,1,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.RevertAction.actionPerformed(ActionEvent)",10,1,n/a,22,2,1,8,3
"freemind.modes.mindmapmode.actions.SelectAllAction.SelectAllAction(MindMapController)",5,1,n/a,4,2,1,2,1
"freemind.modes.mindmapmode.actions.SelectBranchAction.SelectBranchAction(MindMapController)",1,1,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.SelectBranchAction.actionPerformed(ActionEvent)",4,0,n/a,4,0,1,1,1
"freemind.modes.mindmapmode.actions.SetLinkByTextFieldAction.SetLinkByTextFieldAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.SetLinkByTextFieldAction.actionPerformed(ActionEvent)",9,0,n/a,11,2,1,5,3
"freemind.modes.mindmapmode.actions.SingleNodeOperation.apply(MindMapMapModel,MindMapNodeModel)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.modes.mindmapmode.actions.StrikethroughAction.StrikethroughAction(MindMapController)",2,1,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.StrikethroughAction.isSelected(JMenuItem,Action)",2,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.ToggleChildrenFoldedAction.ToggleChildrenFoldedAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.ToggleChildrenFoldedAction.actionPerformed(ActionEvent)",10,0,n/a,7,0,1,5,1
"freemind.modes.mindmapmode.actions.ToggleFoldedAction.ToggleFoldedAction(MindMapController)",1,1,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.ToggleFoldedAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.UnderlinedAction.UnderlinedAction(MindMapController)",2,1,n/a,7,0,1,3,1
"freemind.modes.mindmapmode.actions.UnderlinedAction.isSelected(JMenuItem,Action)",2,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.UndoAction.UndoAction(MindMapController)",9,1,n/a,9,1,1,4,2
"freemind.modes.mindmapmode.actions.UndoAction.UndoAction(MindMapController,String,Icon,MindMapController)",2,1,n/a,7,0,4,4,1
"freemind.modes.mindmapmode.actions.UndoAction.add(ActionPair)",35,2,n/a,44,2,1,29,8
"freemind.modes.mindmapmode.actions.UndoAction.clear()",1,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.UndoAction.informUndoPartner(ActionPair)",3,1,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.actions.UndoAction.isUndoAction()",0,1,n/a,5,0,0,1,1
"freemind.modes.mindmapmode.actions.UndoAction.print()",4,0,n/a,8,1,0,4,2
"freemind.modes.mindmapmode.actions.UndoAction.setEnabled(boolean)",3,5,n/a,11,0,1,3,2
"freemind.modes.mindmapmode.actions.UndoAction.startActionFrame()",3,1,n/a,3,3,0,4,3
"freemind.modes.mindmapmode.actions.UndoAction.undoDoAction(ActionPair)",10,1,n/a,8,0,1,5,1
"freemind.modes.mindmapmode.actions.UndoAction.xmlActionPerformed(ActionEvent)",7,1,n/a,19,1,1,7,3
"freemind.modes.mindmapmode.actions.UsePlainTextAction.UsePlainTextAction(MindMapController)",6,1,n/a,10,3,1,4,2
"freemind.modes.mindmapmode.actions.UseRichFormattingAction.UseRichFormattingAction(MindMapController)",6,1,n/a,10,3,1,4,2
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.AbstractXmlAction(String,Icon,MindMapController)",1,2,n/a,5,0,3,2,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.actionPerformed(ActionEvent)",1,0,n/a,9,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.addActor(ActorXml)",4,0,n/a,8,1,1,3,2
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.getActor()",0,0,n/a,5,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.getMindMapController()",0,2,n/a,5,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.getShortDescription()",1,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.xmlActionPerformed(ActionEvent)",n/a,1,2,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.ActionFilter.filterAction(ActionPair)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.ActionHandler.endTransaction(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.ActionHandler.executeAction(XmlAction)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.ActionHandler.startTransaction(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.ActionPair.ActionPair(XmlAction,XmlAction)",0,47,n/a,7,0,2,2,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.getDoAction()",0,9,n/a,5,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.getUndoAction()",0,8,n/a,5,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.reverse()",3,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.setDoAction(XmlAction)",0,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.setUndoAction(XmlAction)",0,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.ActionRegistry()",8,2,n/a,13,1,0,6,2
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.deregisterActor(Class<?>)",1,0,n/a,5,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.deregisterFilter(ActionFilter)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.deregisterHandler(ActionHandler)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.doTransaction(String,ActionPair)",3,2,n/a,9,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.endTransaction(String)",4,1,n/a,6,1,1,4,2
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.executeAction(ActionPair)",12,2,n/a,37,2,1,23,7
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.getActor(Class<?>)",3,1,n/a,7,1,1,3,2
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.getActor(XmlAction)",8,1,n/a,14,2,1,6,3
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.registerActor(ActorXml,Class<?>)",1,3,n/a,5,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.registerFilter(ActionFilter)",8,0,n/a,29,4,1,13,6
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.registerHandler(ActionHandler)",3,2,n/a,10,1,1,3,2
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.registerUndoHandler(UndoActionHandler)",0,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.startTransaction(String)",4,1,n/a,6,1,1,4,2
"freemind.modes.mindmapmode.actions.xml.ActorXml.act(XmlAction)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.ActorXml.getDoActionClass()",n/a,3,0,n/a,n/a,0,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler.DefaultActionHandler(ActionRegistry)",0,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler.endTransaction(String)",0,0,n/a,9,0,1,0,1
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler.executeAction(XmlAction)",2,0,n/a,12,0,1,2,1
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler.startTransaction(String)",0,0,n/a,9,0,1,0,1
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler.PrintActionHandler(MindMapController)",5,0,n/a,9,0,1,4,2
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler.endTransaction(String)",0,0,n/a,9,0,1,0,1
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler.executeAction(XmlAction)",2,0,n/a,12,0,1,2,1
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler.startTransaction(String)",0,0,n/a,9,0,1,0,1
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler.UndoActionHandler(MindMapController,UndoAction,RedoAction)",0,1,n/a,8,0,3,3,1
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler.endTransaction(String)",0,0,n/a,2,0,1,0,1
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler.executeAction(ActionPair)",5,0,n/a,9,1,1,5,2
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler.startTransaction(String)",0,0,n/a,2,0,1,0,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.AddArrowLinkActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.act(XmlAction)",42,0,n/a,44,2,1,26,9
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.addLink(MindMapNode,MindMapNode)",2,0,n/a,7,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.createAddArrowLinkXmlAction(MindMapNode,MindMapNode,String)",6,1,n/a,8,0,3,5,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.getActionPair(MindMapNode,MindMapNode)",9,1,n/a,9,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.AddAttributeActor(ExtendedMapFeedback)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.act(XmlAction)",8,0,n/a,10,1,1,6,2
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.addAttribute(MindMapNode,Attribute)",3,0,n/a,6,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.getActionPair(MindMapNode,Attribute)",6,1,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.getAddAttributeAction(MindMapNode,Attribute)",7,1,n/a,13,0,2,5,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.AddHookActor(ExtendedMapFeedback)",5,0,n/a,10,1,1,3,2
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.act(XmlAction)",25,0,n/a,24,2,1,18,4
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.addHook(MindMapNode,List<MindMapNode>,String,Properties)",10,0,n/a,17,1,4,8,3
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.createHookNodeAction(MindMapNode,List<MindMapNode>,String,Properties)",15,3,n/a,21,2,4,14,4
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.createHookNodeUndoAction(MindMapNode,List<MindMapNode>,String)",29,2,n/a,57,8,3,27,9
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.finishInvocation(MindMapNode,List<MindMapNode>,MindMapNode,Collection<MindMapNode>)",5,1,n/a,18,1,4,2,2
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getHookFactory()",2,1,n/a,5,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getInstanciationMethod(String)",2,5,n/a,9,0,1,3,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getNodeView(MindMapNode)",2,1,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getViewAbstraction()",3,2,n/a,7,1,0,4,2
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.invoke(MindMapNode,List<MindMapNode>,String,XMLElement)",27,2,n/a,58,4,4,26,10
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.removeHook(MindMapNode,List<MindMapNode>,String)",7,0,n/a,12,1,3,6,2
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.AddIconActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.act(XmlAction)",8,0,n/a,12,1,1,8,2
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.addIcon(MindMapNode,MindIcon)",2,1,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.createAddIconAction(MindMapNode,MindIcon,int)",6,3,n/a,8,0,3,5,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getAddIconActionPair(MindMapNode,MindIcon,int)",5,1,n/a,7,0,3,3,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getAddLastIconActionPair(MindMapNode,MindIcon)",1,2,n/a,6,0,2,2,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getRemoveIconActionPair(MindMapNode,MindIcon,boolean)",5,1,n/a,11,0,3,2,3
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getRemoveIconActionPair(MindMapNode,MindIcon,int)",5,2,n/a,7,0,3,3,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getToggleIconActionPair(MindMapNode,MindIcon)",4,1,n/a,11,1,2,4,2
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.removeIcon(MindMapNode,MindIcon,boolean)",5,1,n/a,9,1,3,4,2
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.toggleIcon(MindMapNode,MindIcon)",5,0,n/a,4,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.BoldNodeActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.act(XmlAction)",7,0,n/a,10,2,1,6,3
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.apply(MindMap,MindMapNode)",3,0,n/a,5,0,2,2,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.getActionPair(MindMapNode,boolean)",4,2,n/a,5,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.setBold(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.toggleBold(MindMapNode,boolean)",4,2,n/a,6,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.ChangeArrowLinkEndPointsActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.act(XmlAction)",15,0,n/a,19,1,1,7,2
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.createArrowLinkPointXmlAction(MindMapArrowLink,Point,Point)",7,2,n/a,8,0,3,5,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.getActionPair(MindMapArrowLink,Point,Point)",5,1,n/a,8,0,3,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.setArrowLinkEndPoints(MindMapArrowLink,Point,Point)",2,0,n/a,4,0,3,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.ChangeArrowsInArrowLinkActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.act(XmlAction)",13,0,n/a,12,1,1,7,2
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.changeArrowsOfArrowLink(MindMapArrowLink,boolean,boolean)",2,0,n/a,4,0,3,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.createArrowLinkArrowXmlAction(MindMapArrowLink,String,String)",5,2,n/a,9,0,3,5,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.createArrowLinkArrowXmlAction(MindMapArrowLink,boolean,boolean)",1,1,n/a,7,0,3,1,3
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.getActionPair(MindMapArrowLink,boolean,boolean)",5,1,n/a,9,0,3,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.ChangeNoteTextActor(ExtendedMapFeedback)",1,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.act(XmlAction)",8,0,n/a,13,2,1,8,3
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.createEditNoteToNodeAction(MindMapNode,String)",8,2,n/a,13,1,2,6,4
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.setNoteText(MindMapNode,String)",9,0,n/a,13,1,2,8,2
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.CloudActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.act(XmlAction)",16,0,n/a,24,4,1,14,6
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.apply(MindMap,MindMapNode)",2,0,n/a,4,0,2,2,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.createAddCloudXmlAction(MindMapNode,boolean,Color)",6,3,n/a,8,0,3,5,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.getActionPair(MindMapNode,boolean)",7,2,n/a,12,1,2,6,2
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.setCloud(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.CloudColorActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.act(XmlAction)",17,0,n/a,21,2,1,12,5
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.createCloudColorXmlAction(MindMapNode,Color)",5,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.setCloudColor(MindMapNode,Color)",7,0,n/a,6,0,2,3,2
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.ColorArrowLinkActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.act(XmlAction)",9,0,n/a,10,1,1,5,2
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.createArrowLinkColorXmlAction(MindMapLink,Color)",5,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.getActionPair(MindMapLink,Color)",4,1,n/a,6,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.setArrowLinkColor(MindMapLink,Color)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CompoundActor.CompoundActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CompoundActor.act(XmlAction)",6,0,n/a,19,2,1,10,3
"freemind.modes.mindmapmode.actions.xml.actors.CompoundActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.CutActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.act(XmlAction)",5,0,n/a,13,0,1,3,1
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.cut(List<MindMapNode>)",23,0,n/a,28,1,1,18,4
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.getCutNodeAction(MindMapNode)",3,1,n/a,5,0,1,3,1
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.DeleteChildActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.act(XmlAction)",3,0,n/a,12,0,1,3,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.deleteNode(MindMapNode)",17,0,n/a,17,1,1,9,2
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.deleteWithoutUndo(MindMapNode)",28,1,n/a,39,3,1,22,6
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.getDeleteNodeAction(String)",2,1,n/a,5,0,1,3,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.getDoActionClass()",0,1,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.removeHooks(MindMapNode)",13,2,n/a,18,2,1,11,4
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.EdgeColorActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.act(XmlAction)",11,0,n/a,19,2,1,8,3
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.createEdgeColorFormatAction(MindMapNode,Color)",5,2,n/a,9,1,2,5,2
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.setEdgeColor(MindMapNode,Color)",6,0,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.EdgeStyleActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.act(XmlAction)",10,0,n/a,13,2,1,8,4
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.createNodeStyleFormatAction(MindMapNode,String)",4,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.getActionPair(MindMapNode,String)",4,1,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.getStyle(MindMapNode)",4,2,n/a,7,1,1,4,2
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.setEdgeStyle(MindMapNode,String)",6,0,n/a,25,3,2,14,6
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.EdgeWidthActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.act(XmlAction)",8,0,n/a,12,2,1,8,3
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.createEdgeWidthFormatAction(MindMapNode,int)",4,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.getActionPair(MindMapNode,int)",4,1,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.getWidth(MindMapNode)",2,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.setEdgeWidth(MindMapNode,int)",3,0,n/a,6,1,2,3,2
"freemind.modes.mindmapmode.actions.xml.actors.EditActor.EditActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EditActor.act(XmlAction)",9,0,n/a,16,1,1,5,2
"freemind.modes.mindmapmode.actions.xml.actors.EditActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EditActor.setNodeText(MindMapNode,String)",10,0,n/a,11,0,2,9,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.FontFamilyActor(ExtendedMapFeedback)",1,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.act(XmlAction)",16,0,n/a,17,2,1,8,3
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.createFontNodeAction(MindMapNode,String)",4,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.getActionPair(MindMapNode,String)",4,1,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.setFontFamily(MindMapNode,String)",2,0,n/a,5,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.FontSizeActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.act(XmlAction)",11,0,n/a,18,3,1,9,4
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.createFontSizeNodeAction(MindMapNode,String)",4,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.getActionPair(MindMapNode,String)",4,1,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.setFontSize(MindMapNode,String)",4,0,n/a,8,1,2,3,2
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.InsertAttributeActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.act(XmlAction)",10,0,n/a,12,1,1,8,2
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.getActionPair(MindMapNode,int,Attribute)",5,1,n/a,7,0,3,3,1
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.getInsertAttributeAction(MindMapNode,int,Attribute)",8,1,n/a,15,0,3,6,1
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.insertAttribute(MindMapNode,int,Attribute)",2,0,n/a,4,0,3,2,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.ItalicNodeActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.act(XmlAction)",7,0,n/a,8,1,1,5,2
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.apply(MindMap,MindMapNode)",3,0,n/a,5,0,2,2,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.getActionPair(MindMapNode,boolean)",4,2,n/a,6,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.setItalic(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.toggleItalic(MindMapNode,boolean)",4,2,n/a,6,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.MoveNodeActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.act(XmlAction)",12,0,n/a,9,0,1,7,2
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.apply(MindMap,MindMapNode)",2,0,n/a,6,0,2,3,2
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.getActionPair(MindMapNode,int,int,int)",7,2,n/a,9,0,4,3,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.moveNode(MindMapNode,int,int,int)",6,2,n/a,9,0,4,6,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.moveNodeTo(MindMapNode,int,int,int)",6,0,n/a,8,1,4,3,4
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.NewChildActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.act(XmlAction)",18,0,n/a,28,1,1,12,3
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.addNewNode(MindMapNode,int,boolean)",16,0,n/a,17,1,3,8,2
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.getAddNodeAction(MindMapNode,int,String,boolean)",6,1,n/a,10,0,4,7,2
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.getLinkRegistry()",3,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.NodeBackgroundColorActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.act(XmlAction)",9,0,n/a,13,2,1,8,3
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.createNodeBackgroundColorFormatAction(MindMapNode,Color)",5,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.setNodeBackgroundColor(MindMapNode,Color)",5,0,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.NodeColorActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.act(XmlAction)",9,0,n/a,13,2,1,8,3
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.createNodeColorFormatAction(MindMapNode,Color)",5,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.setNodeColor(MindMapNode,Color)",7,0,n/a,10,1,2,5,2
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.NodeStyleActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.act(XmlAction)",9,0,n/a,14,2,1,7,4
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.createNodeStyleFormatAction(MindMapNode,String)",4,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.getActionPair(MindMapNode,String)",4,2,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.setStyle(MindMapNode,String)",6,0,n/a,14,2,2,11,4
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.NodeUpActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor._moveNodes(MindMapNode,List<MindMapNode>,int)",21,1,n/a,3,3,3,20,8
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.act(XmlAction)",12,0,n/a,13,2,1,9,3
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.createMoveNodesAction(MindMapNode,List<MindMapNode>,int)",8,2,n/a,13,1,3,8,2
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.getSortedSiblings(MindMapNode)",9,2,n/a,5,2,1,9,4
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.moveNodeTo(MindMapNode,MindMapNode,int)",14,1,n/a,30,1,3,16,3
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.moveNodes(MindMapNode,List<MindMapNode>,int)",4,0,n/a,10,0,3,3,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeXmlActorAdapter.NodeXmlActorAdapter(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DataFlavorHandler.getDataFlavor()",n/a,1,5,n/a,n/a,0,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DataFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",n/a,1,5,n/a,n/a,5,n/a,n/a
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler.DirectHtmlFlavorHandler()",15,2,n/a,5,2,0,10,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler.getDataFlavor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",33,2,n/a,67,3,5,21,5
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler.setNodeCreator(NodeCreator)",0,1,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.FileListFlavorHandler.getDataFlavor()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.FileListFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",11,1,n/a,15,1,5,6,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.ImageFlavorHandler.getDataFlavor()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.ImageFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",29,1,n/a,39,1,5,21,3
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.MindMapNodesFlavorHandler.getDataFlavor()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.MindMapNodesFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",23,1,n/a,44,3,5,26,8
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.NodeCoordinate.NodeCoordinate(MindMapNode,boolean)",4,2,n/a,12,1,2,8,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.NodeCoordinate.NodeCoordinate(MindMapNode,boolean,boolean)",0,2,n/a,6,0,3,3,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.NodeCoordinate.getNode()",7,1,n/a,12,1,0,5,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.PasteActor(ExtendedMapFeedback)",5,0,n/a,10,1,1,3,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.StringFlavorHandler.getDataFlavor()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.StringFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",1,1,n/a,5,0,5,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor._paste(Transferable,MindMapNode,boolean,boolean)",10,1,n/a,31,3,4,15,6
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.act(XmlAction)",7,0,n/a,13,0,1,2,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.determineAmountOfNewNodes(Transferable)",20,1,n/a,3,3,1,15,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.determineAmountOfNewTextNodes(Transferable)",5,1,n/a,13,0,1,4,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getFlavorHandlers()",5,1,n/a,10,0,0,2,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getPasteNodeAction(Transferable,NodeCoordinate,UndoPasteNodeAction)",13,1,n/a,27,2,3,14,3
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getTransferable(TransferableContent)",15,1,n/a,15,1,1,7,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getTransferableContent(Transferable,UndoPasteNodeAction)",52,1,n/a,105,4,2,58,23
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.insertNodeInto(MindMapNode,MindMapNode)",3,6,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.insertNodeInto(MindMapNodeModel,MindMapNode,boolean,boolean,boolean)",6,3,n/a,20,1,5,10,4
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.insertNodeInto(MindMapNodeModel,MindMapNode,int)",2,1,n/a,5,0,3,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.paste(MindMapNode,MindMapNode)",4,0,n/a,7,1,2,3,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.paste(Transferable,MindMapNode,boolean,boolean)",6,0,n/a,32,0,4,4,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.pasteStringWithoutRedisplay(Transferable,MindMapNode,boolean,boolean)",55,2,n/a,125,5,4,72,23
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.pasteXMLWithoutRedisplay(String,MindMapNode,boolean,boolean,boolean,HashMap<String, NodeAdapter>)",13,0,n/a,18,1,6,9,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.processUnfinishedLinksInHooks(MindMapNode)",6,3,n/a,12,1,1,6,3
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.setWaitingCursor(boolean)",2,7,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.RemoveAllIconsActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.act(XmlAction)",7,0,n/a,11,2,1,6,3
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.apply(MindMap,MindMapNode)",9,1,n/a,9,1,2,4,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.createRemoveAllIconsXmlAction(MindMapNode)",3,1,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.removeAllIcons(MindMapNode)",7,0,n/a,4,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.RemoveArrowLinkActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.act(XmlAction)",13,0,n/a,15,2,1,8,3
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.createAddArrowLinkXmlAction(MindMapLink)",22,1,n/a,17,1,1,12,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.createRemoveArrowLinkXmlAction(String)",2,1,n/a,5,0,1,3,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.getActionPair(MindMapLink)",4,1,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.removeReference(MindMapLink)",2,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.RemoveAttributeActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.act(XmlAction)",7,0,n/a,10,1,1,7,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.getActionPair(MindMapNode,int)",11,1,n/a,13,1,2,6,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.getRemoveAttributeAction(MindMapNode,int)",4,1,n/a,13,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.removeAttribute(MindMapNode,int)",2,0,n/a,4,0,2,2,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.RemoveIconActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.act(XmlAction)",6,0,n/a,13,1,1,6,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.apply(MindMap,MindMapNode)",1,0,n/a,7,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.apply(MindMapNode)",9,2,n/a,9,0,1,5,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.createRemoveIconXmlAction(MindMapNode,int)",4,1,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.removeLastIcon(MindMapNode)",4,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.RevertActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.act(XmlAction)",23,0,n/a,37,4,1,16,5
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.createRevertXmlAction(File)",8,1,n/a,9,0,1,8,2
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.createRevertXmlAction(MindMap,String,String)",5,0,n/a,7,0,3,3,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.createRevertXmlAction(String,String,String)",4,1,n/a,13,0,3,5,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.openXmlInsteadOfMap(String)",8,0,n/a,11,1,1,5,2
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.revertMap(MindMap,File)",5,0,n/a,6,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.SetAttributeActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.act(XmlAction)",12,0,n/a,13,2,1,9,3
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.getActionPair(MindMapNode,int,Attribute)",4,1,n/a,5,0,3,3,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.getSetAttributeAction(MindMapNode,int,Attribute)",8,2,n/a,15,0,3,6,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.setAttribute(MindMapNode,int,Attribute)",2,0,n/a,5,0,3,2,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.SetLinkActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.act(XmlAction)",6,0,n/a,8,1,1,5,2
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.createAddLinkXmlAction(MindMapNode,String)",4,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.getActionPair(MindMapNode,String)",4,1,n/a,4,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.setLink(MindMapNode,String)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.StrikethroughNodeActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.act(XmlAction)",7,0,n/a,10,2,1,6,3
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.apply(MindMap,MindMapNode)",3,0,n/a,5,0,2,2,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.getActionPair(MindMapNode,boolean)",4,2,n/a,5,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.setStrikethrough(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.toggleStrikethrough(MindMapNode,boolean)",4,2,n/a,6,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.ToggleFoldedActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.act(XmlAction)",13,0,n/a,20,2,1,11,6
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.createFoldAction(ListIterator<MindMapNode>,boolean,boolean)",8,2,n/a,23,3,3,11,4
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.createSingleFoldAction(boolean,MindMapNode,boolean)",10,3,n/a,19,2,3,7,7
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.setFolded(MindMapNode,boolean)",4,0,n/a,10,1,2,5,3
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.toggleFolded(ListIterator)",8,0,n/a,9,0,1,4,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.UnderlineActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.act(XmlAction)",8,0,n/a,8,1,1,5,2
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.apply(MindMap,MindMapNode)",4,0,n/a,5,0,2,2,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.getActionPair(MindMapNode,boolean)",3,2,n/a,7,0,2,3,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.getDoActionClass()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.setUnderlined(MindMapNode,boolean)",2,0,n/a,3,0,2,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.toggleUnderlined(MindMapNode,boolean)",4,2,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.actions.xml.actors.UndoPasteActor.UndoPasteActor(ExtendedMapFeedback)",1,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UndoPasteActor.act(XmlAction)",10,0,n/a,21,2,1,9,3
"freemind.modes.mindmapmode.actions.xml.actors.UndoPasteActor.getDoActionClass()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.XmlActorAdapter(ExtendedMapFeedback)",5,0,n/a,11,1,1,4,2
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.addActor(ActorXml)",4,1,n/a,7,1,1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.execute(ActionPair)",4,0,n/a,6,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getExMapFeedback()",0,9,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getLinkRegistry()",3,0,n/a,5,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getModeController()",0,0,n/a,8,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getNodeFromID(String)",2,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getNodeID(MindMapNode)",2,0,n/a,7,0,1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getSelected()",2,0,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getViewFeedback()",2,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getXmlActorFactory()",2,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.XmlActorFactory(ExtendedMapFeedback)",40,2,n/a,43,0,1,41,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getAddArrowLinkActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getAddAttributeActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getAddHookActor()",0,4,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getAddIconActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getBoldActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getChangeArrowLinkEndPointsActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getChangeArrowsInArrowLinkActor()",0,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getChangeNoteTextActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getCloudActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getCloudColorActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getColorArrowLinkActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getCompoundActor()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getCutActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getDeleteChildActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getEdgeColorActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getEdgeStyleActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getEdgeWidthActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getEditActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getFontFamilyActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getFontSizeActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getInsertAttributeActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getItalicActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getMoveNodeActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNewChildActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNodeBackgroundColorActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNodeColorActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNodeStyleActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNodeUpActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getPasteActor()",0,3,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRemoveAllIconsActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRemoveArrowLinkActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRemoveAttributeActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRemoveIconActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRevertActor()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getSetAttributeActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getSetLinkActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getStrikethroughActor()",0,2,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getToggleFoldedActor()",0,5,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getUnderlineActor()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getUndoPasteActor()",0,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.setStrikethroughActor(StrikethroughNodeActor)",0,0,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.dialogs.IntegerComboProperty.IntegerComboProperty(String,String,String[],Vector<String>)",1,0,n/a,10,0,4,1,1
"freemind.modes.mindmapmode.dialogs.IntegerComboProperty.setValue(String)",8,3,n/a,28,4,1,15,6
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.EdgeWidthBackTransformer.transform(String)",1,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.EdgeWidthTransformer.transform(String)",1,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.IdentityTransformer.transform(String)",0,2,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.StylePatternFrame(TextTranslator,MindMapController,StylePatternFrameType)",1,0,n/a,11,0,3,4,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.StylePatternFrameType.StylePatternFrameType()",0,2,n/a,2,0,0,0,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.ValueTransformator.transform(String)",n/a,2,3,n/a,n/a,1,n/a,n/a
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.addListeners()",6,0,n/a,5,3,0,7,4
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getControls()",110,1,n/a,151,1,0,105,5
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getEdgeWidthTransformation()",13,2,n/a,11,0,0,8,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getPatternNames()",3,1,n/a,7,1,0,4,2
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getPatternResult(PatternPropertyBase,ThreeCheckBoxProperty,PropertyBean)",2,14,n/a,7,0,3,2,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getPatternResult(PatternPropertyBase,ThreeCheckBoxProperty,PropertyBean,ValueTransformator)",6,2,n/a,20,1,4,9,4
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getResultPattern()",2,0,n/a,4,0,0,2,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getResultPattern(Pattern)",49,1,n/a,41,1,1,18,2
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getText(String)",1,16,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.init()",10,0,n/a,18,1,0,11,2
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.propertyChange(PropertyChangeEvent)",7,1,n/a,19,1,1,5,2
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.setPattern(Pattern)",50,0,n/a,49,1,1,21,4
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.setPatternControls(PatternPropertyBase,PropertyBean,PropertyBean,String)",2,14,n/a,6,0,4,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.setPatternControls(PatternPropertyBase,PropertyBean,PropertyBean,String,ValueTransformator)",9,2,n/a,21,1,5,10,3
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.setPatternList(List<Pattern>)",2,0,n/a,9,0,1,3,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.transformEdgeWidth(String)",5,1,n/a,14,2,1,9,4
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.transformStringToWidth(String)",4,1,n/a,5,0,1,3,1
"freemind.modes.mindmapmode.hooks.MindMapHookAdapter.MindMapHookAdapter()",1,0,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookAdapter.addAccelerator(JMenuItem,String)",8,0,n/a,10,1,2,7,2
"freemind.modes.mindmapmode.hooks.MindMapHookAdapter.getMindMapController()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.MindMapHookFactory()",5,2,n/a,10,1,0,3,2
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.actualizePlugins()",26,2,n/a,58,5,0,27,8
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.createJavaHook(String,HookDescriptorPluginAction)",10,2,n/a,22,2,2,11,3
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.createModeControllerHook(String)",2,0,n/a,4,0,1,2,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.createNodeHook(String)",3,0,n/a,9,0,1,3,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.decorateAction(String,AbstractAction)",17,1,n/a,26,1,2,16,5
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.decorateHook(String,HookDescriptorPluginAction,MindMapHook)",6,1,n/a,3,2,3,5,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getHookDescriptor(String)",2,8,n/a,9,0,1,4,3
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getHookMenuPositions(String)",1,1,n/a,8,0,1,2,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getInstanciationMethod(String)",2,0,n/a,6,0,1,2,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getMenuItem(String,AbstractAction)",4,1,n/a,8,1,2,4,2
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getPluginBaseClass(HookDescriptorPluginAction)",4,2,n/a,11,1,1,5,2
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getPluginBaseClass(String)",3,0,n/a,12,0,1,3,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getPossibleModeControllerHooks()",1,1,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getPossibleNodeHooks()",1,2,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getRegistrations()",16,0,n/a,43,3,0,21,6
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.searchFor(Class,Class<?>)",15,2,n/a,29,5,2,14,6
"freemind.modes.mindmapmode.hooks.MindMapNodeHookAdapter.MindMapNodeHookAdapter()",1,0,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.hooks.MindMapNodeHookAdapter.getMindMapController()",1,0,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.hooks.PermanentMindMapNodeHookAdapter.PermanentMindMapNodeHookAdapter()",1,0,n/a,6,0,0,1,1
"freemind.modes.mindmapmode.hooks.PermanentMindMapNodeHookAdapter.getMindMapController()",1,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.hooks.PermanentMindMapNodeHookAdapter.propagate(MindMapNode)",4,0,n/a,12,0,1,3,1
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager.MindMapMouseMotionManager(MindMapController)",1,1,n/a,7,0,1,2,1
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager.mouseDragged(MouseEvent)",15,1,n/a,19,2,1,10,3
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager.mousePressed(MouseEvent)",14,1,n/a,15,2,1,10,4
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager.mouseReleased(MouseEvent)",8,1,n/a,18,1,1,11,2
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.MindMapNodeDropListener(MindMapController)",0,1,n/a,3,0,1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dragEnter(DropTargetDragEvent)",3,0,n/a,18,1,1,3,2
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dragExit(DropTargetEvent)",4,0,n/a,6,0,1,3,1
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dragOver(DropTargetDragEvent)",7,0,n/a,12,1,1,7,2
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dragScroll(DropTargetDragEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.drop(DropTargetDropEvent)",76,0,n/a,149,5,1,58,21
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dropActionChanged(DropTargetDragEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.isDragAcceptable(DropTargetDragEvent)",2,1,n/a,10,1,1,5,3
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.isDropAcceptable(DropTargetDropEvent)",7,1,n/a,9,0,1,5,3
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.MindMapNodeMotionListener(MindMapController)",4,1,n/a,5,0,1,3,2
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getDragStartingPoint()",0,1,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getHGap(Point,MindMapNode,Point)",4,1,n/a,10,0,3,6,2
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getNodeShiftY(Point,MindMapNode,Point)",3,1,n/a,8,0,3,4,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getNodeView(MouseEvent)",2,4,n/a,5,0,1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getVGap(Point,Point)",3,1,n/a,7,0,2,4,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.isActive()",1,4,n/a,3,0,0,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseClicked(MouseEvent)",13,0,n/a,17,2,1,11,5
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseDragged(MouseEvent)",42,0,n/a,59,4,1,38,9
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseEntered(MouseEvent)",7,0,n/a,9,1,1,6,3
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseExited(MouseEvent)",4,0,n/a,7,1,1,4,2
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseMoved(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseReleased(MouseEvent)",19,0,n/a,20,0,1,17,3
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.resetPositions(MindMapNode)",4,1,n/a,7,0,1,3,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.setDragStartingPoint(Point,MindMapNode)",4,2,n/a,10,1,2,6,2
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.stopDrag()",1,1,n/a,3,0,0,1,1
"freemind.modes.viewmodes.CommonToggleChildrenFoldedAction.CommonToggleChildrenFoldedAction(ViewControllerAdapter)",6,0,n/a,5,0,1,3,1
"freemind.modes.viewmodes.CommonToggleChildrenFoldedAction.actionPerformed(ActionEvent)",8,0,n/a,7,0,1,4,1
"freemind.modes.viewmodes.ViewControllerAdapter.ViewControllerAdapter(Mode)",5,2,n/a,9,0,1,5,1
"freemind.modes.viewmodes.ViewControllerAdapter.createNodeHook(String,MindMapNode)",1,0,n/a,7,0,2,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.doubleClick(MouseEvent)",0,1,n/a,2,0,1,0,1
"freemind.modes.viewmodes.ViewControllerAdapter.extendSelection(MouseEvent)",21,0,n/a,50,2,1,21,11
"freemind.modes.viewmodes.ViewControllerAdapter.paste(MindMapNode,MindMapNode)",0,0,n/a,6,0,2,0,1
"freemind.modes.viewmodes.ViewControllerAdapter.plainClick(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.modes.viewmodes.ViewControllerAdapter.setAllActions(boolean)",5,5,n/a,7,0,1,5,1
"freemind.modes.viewmodes.ViewControllerAdapter.setFolded(MindMapNode,boolean)",5,1,n/a,13,1,2,7,5
"freemind.modes.viewmodes.ViewControllerAdapter.shutdownController()",7,2,n/a,6,0,0,4,1
"freemind.modes.viewmodes.ViewControllerAdapter.startupController()",11,3,n/a,4,2,0,4,1
"freemind.preferences.FreemindPropertyContributor.getControls(TextTranslator)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.preferences.FreemindPropertyListener.propertyChanged(String,String,String)",n/a,3,9,n/a,n/a,3,n/a,n/a
"freemind.preferences.layout.GrabKeyDialog.ActionHandler.actionPerformed(ActionEvent)",12,0,n/a,18,1,1,14,7
"freemind.preferences.layout.GrabKeyDialog.ActionHandler.canClose()",15,1,n/a,53,2,0,24,11
"freemind.preferences.layout.GrabKeyDialog.Buffer.getLength()",0,2,n/a,6,0,0,1,1
"freemind.preferences.layout.GrabKeyDialog.Buffer.insert(int,String)",0,2,n/a,5,0,2,0,1
"freemind.preferences.layout.GrabKeyDialog.GrabKeyDialog(FreeMindMain,Dialog,KeyBinding,Vector<KeyBinding>,Buffer)",1,0,n/a,17,0,5,1,1
"freemind.preferences.layout.GrabKeyDialog.GrabKeyDialog(FreeMindMain,Dialog,KeyBinding,Vector<KeyBinding>,Buffer,int)",4,1,n/a,9,0,6,5,1
"freemind.preferences.layout.GrabKeyDialog.InputPane.getFocusTraversalKeysEnabled()",0,0,n/a,8,0,0,1,1
"freemind.preferences.layout.GrabKeyDialog.InputPane.processKeyEvent(KeyEvent)",33,2,n/a,50,2,1,31,13
"freemind.preferences.layout.GrabKeyDialog.KeyBinding.KeyBinding(String,String,String,boolean)",0,2,n/a,7,0,4,4,1
"freemind.preferences.layout.GrabKeyDialog.KeyBinding.isAssigned()",1,3,n/a,3,0,0,1,2
"freemind.preferences.layout.GrabKeyDialog.getFocusTraversalKeysEnabled()",0,0,n/a,8,0,0,1,1
"freemind.preferences.layout.GrabKeyDialog.getKeyBinding(String)",8,2,n/a,23,2,1,14,7
"freemind.preferences.layout.GrabKeyDialog.getModifierMask()",0,2,n/a,3,0,0,1,1
"freemind.preferences.layout.GrabKeyDialog.getShortcut()",1,0,n/a,11,0,0,3,2
"freemind.preferences.layout.GrabKeyDialog.getSymbolicName(int)",7,1,n/a,25,3,1,14,8
"freemind.preferences.layout.GrabKeyDialog.getText(String)",1,13,n/a,5,0,1,1,1
"freemind.preferences.layout.GrabKeyDialog.init(KeyBinding,Vector<KeyBinding>,Buffer)",53,1,n/a,8,2,3,42,5
"freemind.preferences.layout.GrabKeyDialog.isManagingFocus()",0,0,n/a,7,0,0,1,1
"freemind.preferences.layout.GrabKeyDialog.isOK()",0,0,n/a,8,0,0,1,1
"freemind.preferences.layout.GrabKeyDialog.processKeyEvent(KeyEvent)",1,0,n/a,4,0,1,1,1
"freemind.preferences.layout.GrabKeyDialog.toString(KeyEvent)",7,1,n/a,21,1,1,15,5
"freemind.preferences.layout.GrabKeyDialog.updateAssignedTo(String)",6,3,n/a,18,0,1,9,5
"freemind.preferences.layout.KeyEventTranslator.Key.Key(String,int,char)",0,10,n/a,5,0,3,3,1
"freemind.preferences.layout.KeyEventTranslator.Key.equals(Object)",1,0,n/a,10,2,1,5,5
"freemind.preferences.layout.KeyEventTranslator.Key.hashCode()",0,0,n/a,3,0,0,1,1
"freemind.preferences.layout.KeyEventTranslator.Key.toString()",2,0,n/a,5,0,0,1,2
"freemind.preferences.layout.KeyEventTranslator.addTranslation(Key,Key)",1,0,n/a,12,0,2,1,1
"freemind.preferences.layout.KeyEventTranslator.getModifierString(InputEvent)",15,0,n/a,21,0,1,10,6
"freemind.preferences.layout.KeyEventTranslator.getSymbolicModifierName(int)",0,8,n/a,21,0,1,9,5
"freemind.preferences.layout.KeyEventTranslator.modifiersToString(int)",16,9,n/a,33,1,1,22,9
"freemind.preferences.layout.KeyEventTranslator.parseKey(String)",17,0,n/a,56,3,1,33,12
"freemind.preferences.layout.KeyEventTranslator.setModifierMapping(int,int,int,int)",4,2,n/a,52,1,4,13,5
"freemind.preferences.layout.KeyEventTranslator.translateKeyEvent(KeyEvent)",21,0,n/a,93,4,1,46,22
"freemind.preferences.layout.KeyEventWorkaround.numericKeypadKey()",0,0,n/a,8,0,0,1,1
"freemind.preferences.layout.KeyEventWorkaround.processKeyEvent(KeyEvent)",12,0,n/a,185,5,1,136,54
"freemind.preferences.layout.OptionPanel.ChangeTabAction.ChangeTabAction(CardLayout,JPanel,String)",1,1,n/a,7,0,3,4,1
"freemind.preferences.layout.OptionPanel.ChangeTabAction.actionPerformed(ActionEvent)",5,1,n/a,10,1,1,6,2
"freemind.preferences.layout.OptionPanel.KeyProperty.KeyProperty(JDialog,String,String)",17,106,n/a,15,5,3,13,4
"freemind.preferences.layout.OptionPanel.KeyProperty.disableModifiers()",0,1,n/a,3,0,0,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.getLabel()",0,6,n/a,3,0,0,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.getValue()",1,4,n/a,3,0,0,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.layout(DefaultFormBuilder,TextTranslator)",15,0,n/a,20,1,2,14,4
"freemind.preferences.layout.OptionPanel.KeyProperty.setEnabled(boolean)",1,1,n/a,3,0,1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.setImageIcon(ImageIcon)",0,1,n/a,3,0,1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.setLabelText(String)",0,1,n/a,3,0,1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.setValue(String)",3,9,n/a,4,0,1,2,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.NewTabProperty(String)",1,5,n/a,3,0,1,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.NewTabProperty(String,String)",1,2,n/a,5,0,2,3,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.getDescription()",0,1,n/a,3,0,0,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.getLabel()",0,1,n/a,3,0,0,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.layout(DefaultFormBuilder,TextTranslator)",0,0,n/a,3,0,2,0,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.setEnabled(boolean)",0,1,n/a,2,0,1,0,1
"freemind.preferences.layout.OptionPanel.OptionPanel(FreeMind,JDialog,OptionPanelFeedback)",6,1,n/a,22,1,3,10,4
"freemind.preferences.layout.OptionPanel.OptionPanelFeedback.writeProperties(Properties)",n/a,1,1,n/a,n/a,1,n/a,n/a
"freemind.preferences.layout.OptionPanel.addContributor(FreemindPropertyContributor)",1,0,n/a,3,0,1,1,1
"freemind.preferences.layout.OptionPanel.buildPanel()",55,1,n/a,4,3,0,41,6
"freemind.preferences.layout.OptionPanel.checkConnectionToFreeMindMain()",1,1,n/a,5,1,0,2,2
"freemind.preferences.layout.OptionPanel.closeWindow()",7,4,n/a,9,0,0,5,1
"freemind.preferences.layout.OptionPanel.createBinding(String,String,String,KeyProperty)",3,1,n/a,9,0,4,5,3
"freemind.preferences.layout.OptionPanel.findControlByKB(KeyBinding)",1,1,n/a,10,2,1,6,4
"freemind.preferences.layout.OptionPanel.getAllButtons()",1,1,n/a,3,0,0,1,1
"freemind.preferences.layout.OptionPanel.getControls()",585,1,n/a,5,2,0,316,5
"freemind.preferences.layout.OptionPanel.getOptionProperties()",7,1,n/a,13,2,0,10,4
"freemind.preferences.layout.OptionPanel.getTabButton(String)",1,1,n/a,3,0,1,1,1
"freemind.preferences.layout.OptionPanel.getText(String)",2,27,n/a,8,0,1,4,2
"freemind.preferences.layout.OptionPanel.registerTabButton(JButton,String,ChangeTabAction)",2,1,n/a,11,1,3,4,2
"freemind.preferences.layout.OptionPanel.removeContributor(FreemindPropertyContributor)",1,0,n/a,3,0,1,1,1
"freemind.preferences.layout.OptionPanel.setProperties()",6,1,n/a,17,2,0,8,3
"freemind.preferences.layout.VariableSizeCardLayout.VariableSizeCardLayout()",1,0,n/a,3,0,0,1,1
"freemind.preferences.layout.VariableSizeCardLayout.VariableSizeCardLayout(int,int)",1,0,n/a,3,0,2,1,1
"freemind.preferences.layout.VariableSizeCardLayout.preferredLayoutSize(Container)",9,0,n/a,34,4,1,16,5
"freemind.swing.DefaultListModel.add(int,E)",2,1,n/a,14,0,2,2,1
"freemind.swing.DefaultListModel.addAll(Collection<E>)",1,0,n/a,3,0,1,1,1
"freemind.swing.DefaultListModel.addAll(int,Collection<E>)",1,0,n/a,3,0,2,1,1
"freemind.swing.DefaultListModel.addElement(E)",3,0,n/a,11,0,1,3,1
"freemind.swing.DefaultListModel.capacity()",1,0,n/a,9,0,0,1,1
"freemind.swing.DefaultListModel.clear()",3,1,n/a,11,1,0,4,2
"freemind.swing.DefaultListModel.contains(Object)",1,0,n/a,11,0,1,1,1
"freemind.swing.DefaultListModel.copyInto(Object[])",1,0,n/a,11,0,1,1,1
"freemind.swing.DefaultListModel.elementAt(int)",1,0,n/a,18,0,1,1,1
"freemind.swing.DefaultListModel.elements()",1,0,n/a,9,0,0,1,1
"freemind.swing.DefaultListModel.ensureCapacity(int)",1,0,n/a,11,0,1,1,1
"freemind.swing.DefaultListModel.firstElement()",1,0,n/a,10,0,0,1,1
"freemind.swing.DefaultListModel.get(int)",1,2,n/a,12,0,1,1,1
"freemind.swing.DefaultListModel.getElementAt(int)",1,0,n/a,17,0,1,1,1
"freemind.swing.DefaultListModel.getSize()",1,0,n/a,14,0,0,1,1
"freemind.swing.DefaultListModel.indexOf(Object)",1,1,n/a,11,0,1,1,1
"freemind.swing.DefaultListModel.indexOf(Object,int)",1,0,n/a,14,0,2,1,1
"freemind.swing.DefaultListModel.insertElementAt(E,int)",2,0,n/a,22,0,2,2,1
"freemind.swing.DefaultListModel.isEmpty()",1,0,n/a,11,0,0,1,1
"freemind.swing.DefaultListModel.lastElement()",1,0,n/a,11,0,0,1,1
"freemind.swing.DefaultListModel.lastIndexOf(Object)",1,0,n/a,11,0,1,1,1
"freemind.swing.DefaultListModel.lastIndexOf(Object,int)",1,0,n/a,14,0,2,1,1
"freemind.swing.DefaultListModel.remove(int)",3,2,n/a,17,0,1,4,1
"freemind.swing.DefaultListModel.removeAllElements()",3,0,n/a,18,1,0,4,2
"freemind.swing.DefaultListModel.removeElement(Object)",3,0,n/a,17,1,1,5,2
"freemind.swing.DefaultListModel.removeElementAt(int)",2,0,n/a,19,0,1,2,1
"freemind.swing.DefaultListModel.removeRange(int,int)",3,0,n/a,24,1,2,7,3
"freemind.swing.DefaultListModel.set(int,E)",3,1,n/a,18,0,2,4,1
"freemind.swing.DefaultListModel.setElementAt(E,int)",2,0,n/a,22,0,2,2,1
"freemind.swing.DefaultListModel.setSize(int)",4,0,n/a,16,1,1,6,3
"freemind.swing.DefaultListModel.size()",1,1,n/a,9,0,0,1,1
"freemind.swing.DefaultListModel.toArray()",2,0,n/a,12,0,0,3,1
"freemind.swing.DefaultListModel.toString()",1,0,n/a,9,0,0,1,1
"freemind.swing.DefaultListModel.trimToSize()",1,0,n/a,8,0,0,1,1
"freemind.swing.DefaultListModel.unmodifiableList()",1,0,n/a,3,0,0,1,1
"freemind.view.ImageFactory.createIcon(String)",13,2,n/a,21,4,1,9,5
"freemind.view.ImageFactory.createIcon(URL)",5,2,n/a,8,1,1,5,2
"freemind.view.ImageFactory.createUnscaledIcon(URL)",1,2,n/a,6,0,1,1,1
"freemind.view.ImageFactory.getInstance()",1,2,n/a,6,1,0,3,2
"freemind.view.MapModule.MapModule(MindMap,MapView,Mode,ModeController)",1,1,n/a,8,0,4,5,1
"freemind.view.MapModule.getDisplayName()",0,7,n/a,3,0,0,1,1
"freemind.view.MapModule.getMode()",0,5,n/a,3,0,0,1,1
"freemind.view.MapModule.getModeController()",0,6,n/a,3,0,0,1,1
"freemind.view.MapModule.getModel()",0,11,n/a,3,0,0,1,1
"freemind.view.MapModule.getName()",0,0,n/a,3,0,0,1,1
"freemind.view.MapModule.getView()",0,3,n/a,3,0,0,1,1
"freemind.view.MapModule.rename()",7,2,n/a,8,1,0,3,2
"freemind.view.MapModule.setDisplayName(String)",0,1,n/a,3,0,1,1,1
"freemind.view.MapModule.setName(String)",0,1,n/a,3,0,1,1,1
"freemind.view.MapModule.toString()",1,8,n/a,10,1,0,3,2
"freemind.view.ScalableImageIcon.ScalableImageIcon(URL)",1,0,n/a,3,0,1,1,1
"freemind.view.ScalableImageIcon.getIconHeight()",1,1,n/a,4,0,0,1,1
"freemind.view.ScalableImageIcon.getIconWidth()",1,1,n/a,4,0,0,1,1
"freemind.view.ScalableImageIcon.getImage()",4,0,n/a,8,1,0,4,2
"freemind.view.ScalableImageIcon.getScale()",0,0,n/a,3,0,0,1,1
"freemind.view.ScalableImageIcon.getUnscaledIcon()",2,1,n/a,4,0,0,2,1
"freemind.view.ScalableImageIcon.paintIcon(Component,Graphics,int,int)",9,0,n/a,15,1,4,11,2
"freemind.view.ScalableImageIcon.setScale(float)",0,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.ArrowLinkView.ArrowLinkView(MindMapArrowLink,NodeView,NodeView)",0,0,n/a,7,0,3,3,1
"freemind.view.mindmapview.ArrowLinkView.calcInclination(NodeView,double)",1,2,n/a,10,0,2,1,1
"freemind.view.mindmapview.ArrowLinkView.changeInclination(int,int,int,int)",0,0,n/a,5,0,4,0,1
"freemind.view.mindmapview.ArrowLinkView.detectCollision(Point)",7,0,n/a,43,2,1,23,7
"freemind.view.mindmapview.ArrowLinkView.getBounds()",2,0,n/a,5,0,0,3,2
"freemind.view.mindmapview.ArrowLinkView.getColor()",2,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.ArrowLinkView.getControlPoint(Point2D)",3,1,n/a,6,0,1,2,1
"freemind.view.mindmapview.ArrowLinkView.getMap()",2,5,n/a,3,0,0,1,2
"freemind.view.mindmapview.ArrowLinkView.getModel()",0,2,n/a,7,0,0,1,1
"freemind.view.mindmapview.ArrowLinkView.getRealWidth()",1,0,n/a,7,0,0,2,2
"freemind.view.mindmapview.ArrowLinkView.getStroke()",2,1,n/a,8,1,0,4,2
"freemind.view.mindmapview.ArrowLinkView.getWidth()",2,4,n/a,3,0,0,1,1
"freemind.view.mindmapview.ArrowLinkView.getZoom()",2,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.ArrowLinkView.isSourceVisible()",1,7,n/a,5,0,0,1,2
"freemind.view.mindmapview.ArrowLinkView.isTargetVisible()",1,7,n/a,5,0,0,1,2
"freemind.view.mindmapview.ArrowLinkView.paint(Graphics)",75,0,n/a,93,2,1,51,32
"freemind.view.mindmapview.ArrowLinkView.paintArrow(Point,Point,Graphics2D)",8,2,n/a,30,0,3,13,1
"freemind.view.mindmapview.BezierEdgeView.BezierEdgeView()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.BezierEdgeView.getColor()",2,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.BezierEdgeView.paint(Graphics2D)",14,0,n/a,15,1,1,12,2
"freemind.view.mindmapview.BezierEdgeView.update()",9,1,n/a,14,1,0,7,4
"freemind.view.mindmapview.BubbleMainView.getAlignment()",0,0,n/a,6,0,0,1,1
"freemind.view.mindmapview.BubbleMainView.getCenterPoint()",2,0,n/a,5,0,0,3,1
"freemind.view.mindmapview.BubbleMainView.getDeltaX()",8,0,n/a,6,1,0,3,3
"freemind.view.mindmapview.BubbleMainView.getLeftPoint()",2,2,n/a,4,0,0,2,1
"freemind.view.mindmapview.BubbleMainView.getMainViewWidthWithFoldingMark()",5,0,n/a,8,1,0,5,2
"freemind.view.mindmapview.BubbleMainView.getPreferredSize()",4,0,n/a,10,0,0,3,1
"freemind.view.mindmapview.BubbleMainView.getRightPoint()",2,0,n/a,5,0,0,3,1
"freemind.view.mindmapview.BubbleMainView.getStyle()",0,0,n/a,8,0,0,1,1
"freemind.view.mindmapview.BubbleMainView.getTextWidth()",4,0,n/a,8,0,0,1,1
"freemind.view.mindmapview.BubbleMainView.getTextX()",4,0,n/a,8,0,0,1,1
"freemind.view.mindmapview.BubbleMainView.paint(Graphics)",16,0,n/a,20,0,1,13,2
"freemind.view.mindmapview.BubbleMainView.paintBackground(Graphics2D,Color)",4,0,n/a,4,0,2,2,1
"freemind.view.mindmapview.BubbleMainView.paintSelected(Graphics2D)",7,1,n/a,8,1,1,4,2
"freemind.view.mindmapview.CloudView.CloudView(MindMapCloud,NodeView)",0,1,n/a,4,0,2,2,1
"freemind.view.mindmapview.CloudView.getAdditionalHeigth(MindMapCloud,NodeView)",1,0,n/a,7,0,2,3,1
"freemind.view.mindmapview.CloudView.getColor()",2,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.CloudView.getDistanceToConvexHull()",2,3,n/a,3,0,0,1,1
"freemind.view.mindmapview.CloudView.getExteriorColor()",2,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.CloudView.getIterativeLevel()",1,2,n/a,7,0,0,1,1
"freemind.view.mindmapview.CloudView.getMap()",1,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.CloudView.getModel()",0,3,n/a,3,0,0,1,1
"freemind.view.mindmapview.CloudView.getRealWidth()",1,0,n/a,7,0,0,2,2
"freemind.view.mindmapview.CloudView.getStroke()",2,2,n/a,8,1,0,4,2
"freemind.view.mindmapview.CloudView.getWidth()",2,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.CloudView.getZoom()",2,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.CloudView.paint(Graphics)",35,0,n/a,82,4,1,60,7
"freemind.view.mindmapview.CloudView.paintClouds(Graphics2D,Graphics2D,double,double,double,double,double)",4,2,n/a,22,0,7,14,2
"freemind.view.mindmapview.ConvexHull.calculateHull(LinkedList<Point>)",6,0,n/a,9,1,1,6,2
"freemind.view.mindmapview.ConvexHull.ccw(Point,Point,Point)",0,1,n/a,17,0,3,15,6
"freemind.view.mindmapview.ConvexHull.doGraham(Vector<Point>)",30,1,n/a,39,2,1,32,8
"freemind.view.mindmapview.ConvexHull.thetaComparator.compare(Point,Point)",3,0,n/a,25,0,2,18,6
"freemind.view.mindmapview.ConvexHull.thetaComparator.theta(Point,Point)",2,2,n/a,19,1,2,14,5
"freemind.view.mindmapview.ConvexHull.thetaComparator.thetaComparator(Point)",1,1,n/a,3,0,1,1,1
"freemind.view.mindmapview.EdgeView.createEnd()",4,1,n/a,4,0,0,2,1
"freemind.view.mindmapview.EdgeView.createStart()",4,1,n/a,4,0,0,2,1
"freemind.view.mindmapview.EdgeView.getColor()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.EdgeView.getEclipsedStroke()",1,0,n/a,8,1,0,4,2
"freemind.view.mindmapview.EdgeView.getMap()",2,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.EdgeView.getModel()",3,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.EdgeView.getSource()",0,0,n/a,6,0,0,1,1
"freemind.view.mindmapview.EdgeView.getStroke()",4,0,n/a,8,1,0,4,2
"freemind.view.mindmapview.EdgeView.getTarget()",0,5,n/a,6,0,0,1,1
"freemind.view.mindmapview.EdgeView.getWidth()",2,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.EdgeView.isTargetEclipsed()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EdgeView.paint(Graphics2D)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.EdgeView.paint(NodeView,Graphics2D)",4,0,n/a,15,0,2,7,1
"freemind.view.mindmapview.EdgeView.reset()",0,0,n/a,4,0,0,2,1
"freemind.view.mindmapview.EditNodeBase.EditControl.cancel()",n/a,0,4,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.EditNodeBase.EditControl.ok(String)",n/a,0,4,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.EditNodeBase.EditControl.split(String,int)",n/a,0,4,n/a,n/a,2,n/a,n/a
"freemind.view.mindmapview.EditNodeBase.EditCopyAction.EditCopyAction(JTextComponent)",2,1,n/a,4,0,1,2,1
"freemind.view.mindmapview.EditNodeBase.EditCopyAction.actionPerformed(ActionEvent)",4,0,n/a,6,1,1,3,2
"freemind.view.mindmapview.EditNodeBase.EditDialog.CancelAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.DialogWindowListener.windowClosing(WindowEvent)",2,0,n/a,12,1,1,2,2
"freemind.view.mindmapview.EditNodeBase.EditDialog.EditDialog(EditNodeBase)",9,0,n/a,9,0,1,6,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.SplitAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.SubmitAction.actionPerformed(ActionEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.cancel()",1,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.confirmedCancel()",4,1,n/a,10,1,0,5,3
"freemind.view.mindmapview.EditNodeBase.EditDialog.confirmedSubmit()",5,1,n/a,14,2,0,8,4
"freemind.view.mindmapview.EditNodeBase.EditDialog.getBase()",0,0,n/a,6,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.isChanged()",n/a,2,0,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.EditNodeBase.EditDialog.setBase(EditNodeBase)",0,0,n/a,7,0,1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.split()",1,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.submit()",1,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.EditNodeBase(NodeView,String,ModeController,EditControl)",0,0,n/a,8,0,4,4,1
"freemind.view.mindmapview.EditNodeBase.EditPopupMenu.EditPopupMenu(JTextComponent)",5,0,n/a,8,1,1,5,3
"freemind.view.mindmapview.EditNodeBase.binOptionIsTrue(String)",2,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeBase.closeEdit()",1,1,n/a,5,1,0,2,2
"freemind.view.mindmapview.EditNodeBase.getClipboard()",1,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.getController()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.getEditControl()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.getFrame()",1,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.getModeController()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.getNode()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.getText()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.getText(String)",1,4,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeBase.getTextFieldListener()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.getView()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeBase.redispatchKeyEvents(JTextComponent,KeyEvent)",23,0,n/a,2,3,2,28,7
"freemind.view.mindmapview.EditNodeBase.setText(String)",0,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeBase.setTextFieldListener(FocusListener)",0,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeDialog.EditNodeDialog(NodeView,String,KeyEvent,ModeController,EditControl)",1,1,n/a,6,0,5,2,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.LongNodeDialog()",133,1,n/a,11,4,0,85,13
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.cancel()",3,1,n/a,9,0,0,2,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.getMostRecentFocusOwner()",2,0,n/a,7,1,0,3,2
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.isChanged()",3,0,n/a,8,0,0,1,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.show()",2,0,n/a,4,0,0,2,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.split()",5,1,n/a,10,0,0,2,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.submit()",4,2,n/a,9,0,0,2,1
"freemind.view.mindmapview.EditNodeDialog.show()",8,1,n/a,8,0,0,5,1
"freemind.view.mindmapview.EditNodeExternalApplication.EditNodeExternalApplication(NodeView,String,KeyEvent,ModeController,EditControl)",1,1,n/a,6,0,5,2,1
"freemind.view.mindmapview.EditNodeExternalApplication.getFirstEvent()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeExternalApplication.show()",23,1,n/a,49,5,0,21,5
"freemind.view.mindmapview.EditNodeTextField.EditNodeTextField(NodeView,String,KeyEvent,ModeController,EditControl)",2,1,n/a,6,0,5,1,1
"freemind.view.mindmapview.EditNodeTextField.EditNodeTextField(NodeView,String,KeyEvent,ModeController,EditControl,JComponent,JComponent)",5,1,n/a,13,1,7,6,2
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.componentHidden(ComponentEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.componentMoved(ComponentEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.componentResized(ComponentEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.componentShown(ComponentEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.conditionallyShowPopup(MouseEvent)",12,2,n/a,12,2,1,8,3
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.focusGained(FocusEvent)",0,0,n/a,2,0,1,0,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.focusLost(FocusEvent)",12,4,n/a,22,2,1,10,5
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.keyPressed(KeyEvent)",15,0,n/a,27,2,1,17,9
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.keyReleased(KeyEvent)",0,0,n/a,2,0,1,0,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.keyTyped(KeyEvent)",0,0,n/a,2,0,1,0,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mouseClicked(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mouseEntered(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mouseExited(MouseEvent)",0,0,n/a,2,0,1,0,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mousePressed(MouseEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mouseReleased(MouseEvent)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeTextField.addTextfield()",1,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeTextField.hideMe()",9,3,n/a,16,0,0,10,1
"freemind.view.mindmapview.EditNodeTextField.setTextfieldLoaction(Point)",1,1,n/a,3,0,1,1,1
"freemind.view.mindmapview.EditNodeTextField.show()",75,1,n/a,6,4,0,70,17
"freemind.view.mindmapview.EditNodeWYSIWYG.EditNodeWYSIWYG(NodeView,String,KeyEvent,ModeController,EditControl)",1,1,n/a,6,0,5,2,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.HTMLDialog(EditNodeBase)",48,1,n/a,8,3,1,30,3
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.cancel()",5,1,n/a,10,0,0,3,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.createEditorPanel()",3,1,n/a,31,1,0,4,2
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.getHtmlEditorPanel()",0,1,n/a,6,0,0,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.getMostRecentFocusOwner()",3,0,n/a,7,1,0,3,2
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.isChanged()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.removeBodyStyle()",3,3,n/a,3,0,0,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.split()",8,1,n/a,13,0,0,3,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.submit()",11,1,n/a,16,1,0,5,2
"freemind.view.mindmapview.EditNodeWYSIWYG.show()",68,1,n/a,92,3,0,54,10
"freemind.view.mindmapview.ForkMainView.getAlignment()",0,0,n/a,6,0,0,1,1
"freemind.view.mindmapview.ForkMainView.getCenterPoint()",3,0,n/a,4,0,0,2,1
"freemind.view.mindmapview.ForkMainView.getDeltaX()",8,0,n/a,6,1,0,3,3
"freemind.view.mindmapview.ForkMainView.getEdgeWidth()",11,3,n/a,20,2,0,14,4
"freemind.view.mindmapview.ForkMainView.getLeftPoint()",3,0,n/a,5,0,0,3,1
"freemind.view.mindmapview.ForkMainView.getMainViewHeightWithFoldingMark()",5,0,n/a,7,1,0,4,2
"freemind.view.mindmapview.ForkMainView.getMainViewWidthWithFoldingMark()",6,0,n/a,8,1,0,4,2
"freemind.view.mindmapview.ForkMainView.getRightPoint()",4,0,n/a,5,0,0,3,1
"freemind.view.mindmapview.ForkMainView.getStyle()",0,0,n/a,8,0,0,1,1
"freemind.view.mindmapview.ForkMainView.paint(Graphics)",21,0,n/a,20,0,1,16,2
"freemind.view.mindmapview.IndependantMapViewCreator.createMapViewForFile(String,JPanel,FreeMindMain)",11,1,n/a,14,0,3,10,1
"freemind.view.mindmapview.IndependantMapViewCreator.createNodeHook(String,MindMapNode)",1,0,n/a,7,0,2,1,1
"freemind.view.mindmapview.IndependantMapViewCreator.exportFileToPng(String,String,FreeMindMain)",15,1,n/a,18,0,3,12,1
"freemind.view.mindmapview.IndependantMapViewCreator.getMap()",0,0,n/a,7,0,0,1,1
"freemind.view.mindmapview.IndependantMapViewCreator.main(String[])",16,0,n/a,27,1,1,16,5
"freemind.view.mindmapview.IndependantMapViewCreator.printToFile(MapView,String,boolean,int)",25,2,n/a,41,1,4,24,2
"freemind.view.mindmapview.LeftNodeViewLayout.getInstance()",1,0,n/a,5,0,0,3,2
"freemind.view.mindmapview.LeftNodeViewLayout.getMainViewInPoint(NodeView)",2,0,n/a,4,0,1,2,1
"freemind.view.mindmapview.LeftNodeViewLayout.getMainViewOutPoint(NodeView,NodeView,Point)",2,0,n/a,5,0,3,2,1
"freemind.view.mindmapview.LeftNodeViewLayout.layout()",22,0,n/a,20,1,0,14,2
"freemind.view.mindmapview.LeftNodeViewLayout.layoutNodeMotionListenerView(NodeMotionListenerView)",8,0,n/a,9,0,1,7,1
"freemind.view.mindmapview.LinearEdgeView.LinearEdgeView()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.LinearEdgeView.getColor()",2,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.LinearEdgeView.paint(Graphics2D)",25,0,n/a,32,2,1,25,5
"freemind.view.mindmapview.MainView.MainView()",7,0,n/a,10,1,0,6,2
"freemind.view.mindmapview.MainView.convertPointFromMap(Point)",3,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.MainView.convertPointToMap(Point)",3,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.MainView.dropAsSibling(double)",1,3,n/a,3,0,1,1,1
"freemind.view.mindmapview.MainView.dropPosition(double)",2,2,n/a,5,0,1,1,1
"freemind.view.mindmapview.MainView.getAlignment()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.MainView.getCenterPoint()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.MainView.getDeltaX()",0,0,n/a,4,0,0,1,1
"freemind.view.mindmapview.MainView.getDeltaY()",0,0,n/a,4,0,0,1,1
"freemind.view.mindmapview.MainView.getDraggedOver()",0,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.MainView.getHeight()",3,7,n/a,14,2,0,5,3
"freemind.view.mindmapview.MainView.getIconWidth()",5,2,n/a,7,1,0,4,2
"freemind.view.mindmapview.MainView.getLeftPoint()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.MainView.getMainViewHeightWithFoldingMark()",1,0,n/a,4,0,0,1,1
"freemind.view.mindmapview.MainView.getMainViewWidthWithFoldingMark()",1,0,n/a,4,0,0,1,1
"freemind.view.mindmapview.MainView.getMaximumSize()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MainView.getMinimumSize()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MainView.getNodeView()",1,34,n/a,4,0,0,1,1
"freemind.view.mindmapview.MainView.getPreferredSize()",26,1,n/a,36,1,0,17,9
"freemind.view.mindmapview.MainView.getRightPoint()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.MainView.getStyle()",n/a,0,0,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.MainView.getTextWidth()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MainView.getTextX()",7,0,n/a,8,1,0,5,4
"freemind.view.mindmapview.MainView.getWidth()",3,12,n/a,14,2,0,5,3
"freemind.view.mindmapview.MainView.getZoom()",3,3,n/a,4,0,0,2,1
"freemind.view.mindmapview.MainView.getZoomedFoldingSymbolHalfWidth()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MainView.isCurrentlyPrinting()",3,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.MainView.isInFollowLinkRegion(double)",6,4,n/a,6,0,1,2,4
"freemind.view.mindmapview.MainView.isInVerticalRegion(double,double)",4,2,n/a,9,0,2,1,2
"freemind.view.mindmapview.MainView.paint(Graphics)",6,0,n/a,17,1,1,11,2
"freemind.view.mindmapview.MainView.paintBackground(Graphics2D,Color)",4,2,n/a,4,0,2,2,1
"freemind.view.mindmapview.MainView.paintDragOver(Graphics2D)",33,0,n/a,22,2,1,9,4
"freemind.view.mindmapview.MainView.paintSelected(Graphics2D)",9,0,n/a,11,2,1,5,3
"freemind.view.mindmapview.MainView.printComponent(Graphics)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.MainView.setDraggedOver(Point)",3,0,n/a,4,0,1,1,2
"freemind.view.mindmapview.MainView.setDraggedOver(int)",0,2,n/a,3,0,1,1,1
"freemind.view.mindmapview.MainView.updateCursor(double)",5,1,n/a,13,1,1,5,4
"freemind.view.mindmapview.MapView.CheckLaterForCenterNodeTask.CheckLaterForCenterNodeTask(NodeView)",1,1,n/a,4,0,1,2,1
"freemind.view.mindmapview.MapView.CheckLaterForCenterNodeTask.run()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.MapView(MindMap,ViewFeedback)",66,1,n/a,4,2,2,61,9
"freemind.view.mindmapview.MapView.ResizeListener.ResizeListener()",1,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.ResizeListener.componentResized(ComponentEvent)",3,0,n/a,11,0,1,2,1
"freemind.view.mindmapview.MapView.ScrollPane.ScrollPane()",0,2,n/a,18,0,0,0,1
"freemind.view.mindmapview.MapView.ScrollPane.processKeyBinding(KeyStroke,KeyEvent,int,boolean)",3,0,n/a,12,0,4,3,3
"freemind.view.mindmapview.MapView.ScrollPane.validateTree()",4,0,n/a,7,1,0,4,2
"freemind.view.mindmapview.MapView.Selected.Selected()",0,1,n/a,2,0,0,0,1
"freemind.view.mindmapview.MapView.Selected.add(NodeView)",7,5,n/a,9,1,1,6,2
"freemind.view.mindmapview.MapView.Selected.addFocusForHooks(NodeView)",2,2,n/a,3,0,1,1,1
"freemind.view.mindmapview.MapView.Selected.changeSelection(NodeView,boolean)",3,3,n/a,8,0,2,3,2
"freemind.view.mindmapview.MapView.Selected.clear()",7,2,n/a,11,1,0,7,3
"freemind.view.mindmapview.MapView.Selected.contains(NodeView)",1,2,n/a,3,0,1,1,1
"freemind.view.mindmapview.MapView.Selected.get(int)",1,5,n/a,3,0,1,1,1
"freemind.view.mindmapview.MapView.Selected.moveToFirst(NodeView)",10,1,n/a,19,3,1,10,4
"freemind.view.mindmapview.MapView.Selected.remove(NodeView)",5,2,n/a,8,1,1,5,2
"freemind.view.mindmapview.MapView.Selected.removeFocusForHooks(NodeView)",3,4,n/a,5,0,1,3,2
"freemind.view.mindmapview.MapView.Selected.size()",1,10,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.acceptViewVisitor(MindMapNode,NodeViewVisitor)",5,0,n/a,13,1,2,3,2
"freemind.view.mindmapview.MapView.addViewer(MindMapNode,NodeView)",3,0,n/a,4,0,2,2,1
"freemind.view.mindmapview.MapView.autoscroll(Point)",4,0,n/a,11,0,1,2,1
"freemind.view.mindmapview.MapView.centerNode(NodeView)",12,3,n/a,25,1,1,9,2
"freemind.view.mindmapview.MapView.collectLabels(NodeView,HashMap<String, NodeView>)",9,2,n/a,13,1,2,7,4
"freemind.view.mindmapview.MapView.createPropertyChangeListener()",30,1,n/a,41,4,0,29,11
"freemind.view.mindmapview.MapView.deselect(NodeView)",3,4,n/a,6,1,1,3,2
"freemind.view.mindmapview.MapView.detectCollision(Point)",4,1,n/a,10,1,1,9,4
"freemind.view.mindmapview.MapView.endPrinting()",6,2,n/a,21,2,0,9,4
"freemind.view.mindmapview.MapView.extendSelectionWithKeyMove(NodeView,KeyEvent)",29,1,n/a,63,3,2,40,18
"freemind.view.mindmapview.MapView.getAntialiasAll()",0,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getAntialiasEdges()",0,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getAutoscrollInsets()",4,0,n/a,13,0,0,3,1
"freemind.view.mindmapview.MapView.getInnerBounds()",17,2,n/a,25,2,0,16,4
"freemind.view.mindmapview.MapView.getMainViewY(NodeView)",3,4,n/a,7,0,1,4,1
"freemind.view.mindmapview.MapView.getMaxNodeWidth()",6,0,n/a,13,2,0,6,3
"freemind.view.mindmapview.MapView.getModel()",0,7,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getNodeContentLocation(NodeView)",3,0,n/a,5,0,1,3,1
"freemind.view.mindmapview.MapView.getNodeDragListener()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getNodeDropListener()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getNodeKeyListener()",2,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getNodeMotionListener()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getNodeMouseMotionListener()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getNodeView(MindMapNode)",5,3,n/a,14,2,1,9,4
"freemind.view.mindmapview.MapView.getPreferredSize()",5,1,n/a,13,1,0,4,2
"freemind.view.mindmapview.MapView.getRoot()",0,16,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getScrollMode()",3,2,n/a,10,1,0,4,2
"freemind.view.mindmapview.MapView.getSelected()",2,27,n/a,7,0,0,3,2
"freemind.view.mindmapview.MapView.getSelected(int)",1,4,n/a,3,0,1,1,1
"freemind.view.mindmapview.MapView.getSelectedNodesSortedByY()",30,3,n/a,5,3,0,30,6
"freemind.view.mindmapview.MapView.getSelecteds()",4,14,n/a,9,1,0,6,2
"freemind.view.mindmapview.MapView.getSiblingMaxLevel()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getSingleSelectedNodes()",7,1,n/a,11,1,0,6,2
"freemind.view.mindmapview.MapView.getViewFeedback()",0,10,n/a,6,0,0,1,1
"freemind.view.mindmapview.MapView.getViewPosition()",4,3,n/a,11,1,0,5,2
"freemind.view.mindmapview.MapView.getViewers(MindMapNode)",5,4,n/a,9,1,1,5,3
"freemind.view.mindmapview.MapView.getViewportSize()",3,2,n/a,10,1,0,4,3
"freemind.view.mindmapview.MapView.getVisibleLeft(NodeView)",13,1,n/a,20,2,1,12,6
"freemind.view.mindmapview.MapView.getVisibleNeighbour(int)",14,1,n/a,32,2,1,27,10
"freemind.view.mindmapview.MapView.getVisibleRight(NodeView)",13,1,n/a,20,2,1,12,6
"freemind.view.mindmapview.MapView.getZoom()",0,11,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.getZoomed(int)",0,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.MapView.initRoot()",7,1,n/a,7,0,0,4,1
"freemind.view.mindmapview.MapView.isCurrentlyPrinting()",0,1,n/a,7,0,0,1,1
"freemind.view.mindmapview.MapView.isSelected(NodeView)",1,9,n/a,6,0,1,3,2
"freemind.view.mindmapview.MapView.makeTheSelected(NodeView)",6,5,n/a,13,1,1,5,2
"freemind.view.mindmapview.MapView.move(KeyEvent)",7,2,n/a,11,2,1,7,3
"freemind.view.mindmapview.MapView.moveToRoot()",4,3,n/a,4,0,0,2,1
"freemind.view.mindmapview.MapView.paint(Graphics)",25,0,n/a,54,1,1,23,8
"freemind.view.mindmapview.MapView.paintChildren(Graphics)",8,0,n/a,11,0,1,9,1
"freemind.view.mindmapview.MapView.paintLinks(NodeView,Graphics2D,HashMap<String, NodeView>,HashSet<MindMapLink>)",19,2,n/a,40,3,4,16,7
"freemind.view.mindmapview.MapView.paintSelected(Graphics2D,NodeView)",6,1,n/a,9,0,2,5,1
"freemind.view.mindmapview.MapView.paintSelecteds(Graphics2D)",15,1,n/a,21,1,1,16,5
"freemind.view.mindmapview.MapView.preparePrinting()",10,2,n/a,24,2,0,12,4
"freemind.view.mindmapview.MapView.print(Graphics,PageFormat,int)",29,3,n/a,62,3,3,29,6
"freemind.view.mindmapview.MapView.removeViewer(MindMapNode,NodeView)",5,0,n/a,8,1,2,5,2
"freemind.view.mindmapview.MapView.repaintSelecteds()",5,5,n/a,8,1,0,4,2
"freemind.view.mindmapview.MapView.resetShiftSelectionOrigin()",0,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.revalidateSelecteds()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MapView.scrollBy(int,int)",3,4,n/a,9,0,2,3,1
"freemind.view.mindmapview.MapView.scrollNodeToVisible(NodeView)",1,4,n/a,4,0,1,1,1
"freemind.view.mindmapview.MapView.scrollNodeToVisible(NodeView,int)",9,2,n/a,29,1,2,15,3
"freemind.view.mindmapview.MapView.select(NodeView)",6,0,n/a,10,1,1,6,2
"freemind.view.mindmapview.MapView.selectAsTheOnlyOneSelected(NodeView)",11,12,n/a,21,2,1,11,4
"freemind.view.mindmapview.MapView.selectBranch(NodeView,boolean)",6,5,n/a,19,1,2,6,5
"freemind.view.mindmapview.MapView.selectContinuous(NodeView)",46,2,n/a,89,3,1,53,30
"freemind.view.mindmapview.MapView.setAntialiasAll(boolean)",0,3,n/a,3,0,1,1,1
"freemind.view.mindmapview.MapView.setAntialiasEdges(boolean)",0,3,n/a,3,0,1,1,1
"freemind.view.mindmapview.MapView.setEdgesRenderingHint(Graphics2D)",3,2,n/a,8,0,1,3,2
"freemind.view.mindmapview.MapView.setMoveCursor(boolean)",4,2,n/a,9,1,1,3,5
"freemind.view.mindmapview.MapView.setScrollMode(int)",3,4,n/a,9,1,1,3,2
"freemind.view.mindmapview.MapView.setSiblingMaxLevel(int)",0,4,n/a,3,0,1,1,1
"freemind.view.mindmapview.MapView.setTextRenderingHint(Graphics2D)",4,1,n/a,8,0,1,2,3
"freemind.view.mindmapview.MapView.setViewLocation(int,int)",20,1,n/a,27,1,2,16,6
"freemind.view.mindmapview.MapView.setViewPosition(Point)",3,2,n/a,6,1,1,3,2
"freemind.view.mindmapview.MapView.setViewPositionAfterValidate()",16,1,n/a,30,1,0,21,4
"freemind.view.mindmapview.MapView.setZoom(float)",4,1,n/a,6,0,1,4,1
"freemind.view.mindmapview.MapView.toggleSelected(NodeView)",9,11,n/a,19,2,1,10,4
"freemind.view.mindmapview.MapView.validateSelecteds()",9,1,n/a,26,3,0,14,7
"freemind.view.mindmapview.MapView.validateTree()",3,0,n/a,10,0,0,3,1
"freemind.view.mindmapview.MindMapLayout.MindMapLayout()",4,0,n/a,6,1,0,2,2
"freemind.view.mindmapview.MindMapLayout.addLayoutComponent(String,Component)",0,0,n/a,2,0,2,0,1
"freemind.view.mindmapview.MindMapLayout.calcXBorderSize(MapView)",3,2,n/a,12,1,1,7,2
"freemind.view.mindmapview.MindMapLayout.calcYBorderSize(MapView)",3,2,n/a,15,1,1,7,2
"freemind.view.mindmapview.MindMapLayout.getRoot(Container)",1,4,n/a,3,0,1,1,1
"freemind.view.mindmapview.MindMapLayout.layoutContainer(Container)",15,0,n/a,16,2,1,13,3
"freemind.view.mindmapview.MindMapLayout.minimumLayoutSize(Container)",1,0,n/a,4,0,1,1,1
"freemind.view.mindmapview.MindMapLayout.preferredLayoutSize(Container)",5,0,n/a,7,0,1,3,1
"freemind.view.mindmapview.MindMapLayout.removeLayoutComponent(Component)",0,0,n/a,2,0,1,0,1
"freemind.view.mindmapview.MultipleImage.MultipleImage(double)",0,0,n/a,4,0,1,2,1
"freemind.view.mindmapview.MultipleImage.addImage(ImageIcon)",3,0,n/a,5,0,1,3,1
"freemind.view.mindmapview.MultipleImage.getIconHeight()",3,1,n/a,10,1,0,8,3
"freemind.view.mindmapview.MultipleImage.getIconWidth()",3,1,n/a,8,1,0,6,2
"freemind.view.mindmapview.MultipleImage.getImage()",13,1,n/a,26,1,0,17,5
"freemind.view.mindmapview.MultipleImage.getImageCount()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.MultipleImage.paintIcon(Component,Graphics,int,int)",2,0,n/a,5,1,4,2,2
"freemind.view.mindmapview.NodeFoldingComponent.NodeFoldingComponent(NodeView)",29,0,n/a,13,5,1,33,8
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.getColorForCounter()",7,1,n/a,9,0,0,3,1
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.getPreferredSize(JComponent)",3,0,n/a,6,0,1,4,1
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.initShape(JComponent)",5,5,n/a,7,1,1,4,2
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.installDefaults(AbstractButton)",10,0,n/a,12,0,1,10,1
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.installListeners(AbstractButton)",25,0,n/a,9,3,1,19,4
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.paint(Graphics,JComponent)",46,0,n/a,69,3,2,48,7
"freemind.view.mindmapview.NodeFoldingComponent.dispose()",1,0,n/a,6,1,0,3,2
"freemind.view.mindmapview.NodeFoldingComponent.getNodeView()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeFoldingComponent.getPreferredSize()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeFoldingComponent.getZoomedCircleRadius()",1,2,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeFoldingComponent.isFolded()",3,4,n/a,4,0,0,2,2
"freemind.view.mindmapview.NodeFoldingComponent.setCorrectedLocation(Point)",4,0,n/a,8,0,1,4,2
"freemind.view.mindmapview.NodeFoldingComponent.startTimer()",2,1,n/a,5,1,0,2,2
"freemind.view.mindmapview.NodeFoldingComponent.stopTimer()",2,2,n/a,5,1,0,2,2
"freemind.view.mindmapview.NodeMotionListenerView.NodeMotionListenerView(NodeView)",15,0,n/a,16,1,1,10,2
"freemind.view.mindmapview.NodeMotionListenerView.getMovedView()",0,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeMotionListenerView.isMouseEntered()",0,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeMotionListenerView.paintComponent(Graphics)",21,0,n/a,21,2,1,15,3
"freemind.view.mindmapview.NodeMotionListenerView.setMouseEntered()",1,1,n/a,7,0,0,2,1
"freemind.view.mindmapview.NodeMotionListenerView.setMouseExited()",1,2,n/a,4,0,0,2,1
"freemind.view.mindmapview.NodeView.NodeView(MindMapNode,int,MapView,Container)",16,0,n/a,10,4,4,14,5
"freemind.view.mindmapview.NodeView.addDragListener(DragGestureListener)",3,1,n/a,8,0,1,4,2
"freemind.view.mindmapview.NodeView.addDropListener(DropTargetListener)",3,1,n/a,6,0,1,4,2
"freemind.view.mindmapview.NodeView.addFoldingListener()",14,3,n/a,3,3,0,5,4
"freemind.view.mindmapview.NodeView.contains(int,int)",5,0,n/a,6,0,2,2,4
"freemind.view.mindmapview.NodeView.convertPointToMap(Point)",2,2,n/a,3,0,1,1,1
"freemind.view.mindmapview.NodeView.getAdditionalCloudHeigth()",4,0,n/a,14,1,0,6,3
"freemind.view.mindmapview.NodeView.getAlignment()",1,0,n/a,7,0,0,1,1
"freemind.view.mindmapview.NodeView.getAntiColor1(Color)",5,1,n/a,16,0,1,7,2
"freemind.view.mindmapview.NodeView.getAntiColor2(Color)",5,1,n/a,16,0,1,7,2
"freemind.view.mindmapview.NodeView.getBackgroundColor()",8,2,n/a,10,1,0,6,3
"freemind.view.mindmapview.NodeView.getChildrenViews()",3,9,n/a,15,2,0,10,3
"freemind.view.mindmapview.NodeView.getContent()",0,15,n/a,3,0,0,1,2
"freemind.view.mindmapview.NodeView.getContentPane()",5,0,n/a,9,1,0,6,2
"freemind.view.mindmapview.NodeView.getCoordinates(LinkedList<Point>)",1,0,n/a,7,0,1,1,1
"freemind.view.mindmapview.NodeView.getCoordinates(LinkedList<Point>,int,boolean,int,int)",31,2,n/a,35,2,5,20,6
"freemind.view.mindmapview.NodeView.getDeltaX()",1,1,n/a,4,0,0,1,1
"freemind.view.mindmapview.NodeView.getDeltaY()",1,1,n/a,4,0,0,1,1
"freemind.view.mindmapview.NodeView.getFirst(Component,boolean,boolean)",5,3,n/a,30,3,3,19,11
"freemind.view.mindmapview.NodeView.getFoldingMarkPosition()",2,0,n/a,9,0,0,2,1
"freemind.view.mindmapview.NodeView.getFoldingSymbolWidth()",2,1,n/a,7,1,0,3,2
"freemind.view.mindmapview.NodeView.getHGap()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getInPointInMap()",2,4,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeView.getInnerBounds()",5,0,n/a,5,0,0,2,1
"freemind.view.mindmapview.NodeView.getIsLong()",0,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getLast(Component,boolean,boolean)",5,3,n/a,27,3,3,19,11
"freemind.view.mindmapview.NodeView.getLeft(boolean)",4,2,n/a,11,1,1,8,4
"freemind.view.mindmapview.NodeView.getLinkPoint(Point)",37,2,n/a,39,2,1,23,8
"freemind.view.mindmapview.NodeView.getMainView()",0,9,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getMainViewHeightWithFoldingMark()",1,1,n/a,4,0,0,1,1
"freemind.view.mindmapview.NodeView.getMainViewInPoint()",2,1,n/a,8,0,0,3,1
"freemind.view.mindmapview.NodeView.getMainViewOutPoint(NodeView,Point)",2,1,n/a,13,0,2,3,1
"freemind.view.mindmapview.NodeView.getMainViewWidthWithFoldingMark()",1,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getMap()",0,22,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getMaxToolTipWidth()",3,1,n/a,11,2,0,5,3
"freemind.view.mindmapview.NodeView.getModel()",0,70,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getMotionListenerView()",0,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getNextPage()",11,0,n/a,36,2,0,13,6
"freemind.view.mindmapview.NodeView.getNextSiblingSingle()",15,1,n/a,25,3,0,17,6
"freemind.view.mindmapview.NodeView.getNextVisibleSibling()",13,3,n/a,29,2,0,17,7
"freemind.view.mindmapview.NodeView.getParentView()",1,21,n/a,6,0,0,4,2
"freemind.view.mindmapview.NodeView.getPreferredVisibleChild(boolean)",23,3,n/a,58,4,1,37,14
"freemind.view.mindmapview.NodeView.getPreviousPage()",11,0,n/a,24,2,0,13,6
"freemind.view.mindmapview.NodeView.getPreviousSiblingSingle()",14,1,n/a,25,3,0,17,6
"freemind.view.mindmapview.NodeView.getPreviousVisibleSibling()",13,3,n/a,28,2,0,17,7
"freemind.view.mindmapview.NodeView.getRight(boolean)",4,2,n/a,11,1,1,8,4
"freemind.view.mindmapview.NodeView.getSelectedColor()",0,0,n/a,26,0,0,1,1
"freemind.view.mindmapview.NodeView.getShift()",2,0,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeView.getSiblingViews()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getStyle()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getText()",1,0,n/a,5,0,0,1,1
"freemind.view.mindmapview.NodeView.getTextBackground()",3,0,n/a,7,1,0,4,2
"freemind.view.mindmapview.NodeView.getTextColor()",2,0,n/a,7,1,0,4,2
"freemind.view.mindmapview.NodeView.getTextFont()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getVGap()",2,0,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeView.getViewFeedback()",2,5,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.getVisibleParentView()",3,3,n/a,10,1,0,7,3
"freemind.view.mindmapview.NodeView.getZoomedFoldingSymbolHalfWidth()",4,1,n/a,5,0,0,2,1
"freemind.view.mindmapview.NodeView.insert()",5,2,n/a,6,1,0,3,2
"freemind.view.mindmapview.NodeView.insert(MindMapNode,int)",4,2,n/a,10,0,2,3,1
"freemind.view.mindmapview.NodeView.isChildOf(NodeView)",1,0,n/a,4,0,1,1,1
"freemind.view.mindmapview.NodeView.isContentVisible()",2,15,n/a,5,0,0,1,1
"freemind.view.mindmapview.NodeView.isLeft()",2,22,n/a,4,0,0,1,1
"freemind.view.mindmapview.NodeView.isParentHidden()",2,0,n/a,7,0,0,5,2
"freemind.view.mindmapview.NodeView.isParentOf(NodeView)",1,0,n/a,4,0,1,1,1
"freemind.view.mindmapview.NodeView.isRoot()",2,6,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.isSelected()",2,3,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeView.isSiblingOf(NodeView)",2,0,n/a,4,0,1,1,1
"freemind.view.mindmapview.NodeView.paint(Graphics)",7,0,n/a,25,1,1,9,3
"freemind.view.mindmapview.NodeView.paintCloud(Graphics)",5,2,n/a,6,1,1,3,3
"freemind.view.mindmapview.NodeView.paintCloudsAndEdges(Graphics2D)",15,2,n/a,22,2,1,18,4
"freemind.view.mindmapview.NodeView.propertyChanged(String,String,String)",0,0,n/a,3,0,3,0,1
"freemind.view.mindmapview.NodeView.remove()",13,4,n/a,16,1,0,8,3
"freemind.view.mindmapview.NodeView.removeFoldingListener()",2,4,n/a,7,1,0,4,2
"freemind.view.mindmapview.NodeView.removeFromMap()",7,1,n/a,10,1,0,7,2
"freemind.view.mindmapview.NodeView.repaintSelected()",2,0,n/a,4,0,0,2,1
"freemind.view.mindmapview.NodeView.setBounds(int,int,int,int)",3,0,n/a,9,1,4,5,3
"freemind.view.mindmapview.NodeView.setFocusCycleRoot(boolean)",0,2,n/a,4,0,1,0,1
"freemind.view.mindmapview.NodeView.setIcon(MultipleImage)",1,1,n/a,5,0,1,1,1
"freemind.view.mindmapview.NodeView.setMainView(MainView)",28,1,n/a,28,2,1,21,6
"freemind.view.mindmapview.NodeView.setModel(MindMapNode)",0,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.NodeView.setPreferredChild(NodeView)",2,1,n/a,10,1,1,6,3
"freemind.view.mindmapview.NodeView.setText(String)",1,6,n/a,5,0,1,1,1
"freemind.view.mindmapview.NodeView.setVisible(boolean)",3,0,n/a,9,1,1,5,3
"freemind.view.mindmapview.NodeView.toString()",3,0,n/a,8,0,0,1,1
"freemind.view.mindmapview.NodeView.treeNodesChanged(TreeModelEvent)",1,0,n/a,10,0,1,1,1
"freemind.view.mindmapview.NodeView.treeNodesInserted(TreeModelEvent)",8,0,n/a,19,1,1,10,3
"freemind.view.mindmapview.NodeView.treeNodesRemoved(TreeModelEvent)",26,0,n/a,60,5,1,41,16
"freemind.view.mindmapview.NodeView.treeStructureChanged(TreeModelEvent)",12,0,n/a,19,1,1,9,3
"freemind.view.mindmapview.NodeView.update()",15,2,n/a,22,1,0,15,3
"freemind.view.mindmapview.NodeView.updateAll()",7,1,n/a,8,1,0,6,2
"freemind.view.mindmapview.NodeView.updateFont()",6,1,n/a,10,1,0,5,3
"freemind.view.mindmapview.NodeView.updateIconPosition()",3,1,n/a,4,0,0,1,2
"freemind.view.mindmapview.NodeView.updateIcons()",29,1,n/a,50,2,0,30,11
"freemind.view.mindmapview.NodeView.updateStyle()",7,1,n/a,10,1,0,4,4
"freemind.view.mindmapview.NodeView.updateText()",41,1,n/a,92,3,0,45,19
"freemind.view.mindmapview.NodeView.updateTextColor()",3,2,n/a,8,1,0,5,2
"freemind.view.mindmapview.NodeView.updateToolTip()",19,1,n/a,24,2,0,14,3
"freemind.view.mindmapview.NodeView.useSelectionColors()",2,0,n/a,4,0,0,1,3
"freemind.view.mindmapview.NodeViewFactory.ContentPane.ContentPane()",1,1,n/a,3,0,0,1,1
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.addLayoutComponent(String,Component)",0,0,n/a,2,0,2,0,1
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.layoutContainer(Container)",8,0,n/a,21,3,1,14,4
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.minimumLayoutSize(Container)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.preferredLayoutSize(Container)",6,1,n/a,15,2,1,11,3
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.removeLayoutComponent(Component)",0,0,n/a,2,0,1,0,1
"freemind.view.mindmapview.NodeViewFactory.NodeViewFactory()",0,1,n/a,3,0,0,0,1
"freemind.view.mindmapview.NodeViewFactory.fireNodeViewCreated(NodeView)",3,1,n/a,4,0,1,1,1
"freemind.view.mindmapview.NodeViewFactory.getBezierEdgeView()",1,1,n/a,6,1,0,3,2
"freemind.view.mindmapview.NodeViewFactory.getEdge(NodeView)",8,0,n/a,15,1,1,12,6
"freemind.view.mindmapview.NodeViewFactory.getInstance()",1,0,n/a,6,1,0,3,2
"freemind.view.mindmapview.NodeViewFactory.getLinearEdgeView()",1,2,n/a,6,1,0,3,2
"freemind.view.mindmapview.NodeViewFactory.getSharpBezierEdgeView()",1,1,n/a,6,1,0,3,2
"freemind.view.mindmapview.NodeViewFactory.getSharpLinearEdgeView()",1,1,n/a,6,1,0,3,2
"freemind.view.mindmapview.NodeViewFactory.newContentPane(NodeView)",1,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.NodeViewFactory.newMainView(MindMapNode)",10,1,n/a,13,1,1,8,4
"freemind.view.mindmapview.NodeViewFactory.newNodeView(MindMapNode,int,MapView,Container)",16,0,n/a,23,2,4,13,3
"freemind.view.mindmapview.NodeViewLayout.getMainViewInPoint(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.NodeViewLayout.getMainViewOutPoint(NodeView,NodeView,Point)",n/a,0,0,n/a,n/a,3,n/a,n/a
"freemind.view.mindmapview.NodeViewLayout.layoutNodeFoldingComponent(NodeFoldingComponent)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.NodeViewLayout.layoutNodeMotionListenerView(NodeMotionListenerView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.NodeViewLayoutAdapter.NodeViewLayoutAdapter()",4,0,n/a,6,1,0,2,2
"freemind.view.mindmapview.NodeViewLayoutAdapter.addLayoutComponent(String,Component)",0,0,n/a,2,0,2,0,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getChildContentHeight(boolean)",7,0,n/a,22,3,1,17,5
"freemind.view.mindmapview.NodeViewLayoutAdapter.getChildCount()",0,6,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getChildHorizontalShift()",17,0,n/a,27,4,0,19,7
"freemind.view.mindmapview.NodeViewLayoutAdapter.getChildVerticalShift(boolean)",9,0,n/a,28,4,1,19,7
"freemind.view.mindmapview.NodeViewLayoutAdapter.getContent()",0,10,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getModel()",0,1,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getSpaceAround()",0,8,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getVGap()",0,2,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getView()",0,11,n/a,6,0,0,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.layout()",n/a,1,0,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.NodeViewLayoutAdapter.layoutContainer(Container)",7,0,n/a,9,0,1,6,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.layoutNodeFoldingComponent(NodeFoldingComponent)",8,1,n/a,13,0,1,7,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.layoutOtherItems()",4,1,n/a,16,2,0,11,4
"freemind.view.mindmapview.NodeViewLayoutAdapter.minimumLayoutSize(Container)",1,0,n/a,10,0,1,3,2
"freemind.view.mindmapview.NodeViewLayoutAdapter.placeLeftChildren(int)",40,0,n/a,49,3,1,29,7
"freemind.view.mindmapview.NodeViewLayoutAdapter.placeRightChildren(int)",38,0,n/a,50,3,1,29,7
"freemind.view.mindmapview.NodeViewLayoutAdapter.preferredLayoutSize(Container)",3,0,n/a,11,1,1,3,2
"freemind.view.mindmapview.NodeViewLayoutAdapter.removeLayoutComponent(Component)",0,0,n/a,7,0,1,0,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.setUp(Container)",14,1,n/a,17,1,1,14,3
"freemind.view.mindmapview.NodeViewLayoutAdapter.shutDown()",0,1,n/a,8,0,0,6,1
"freemind.view.mindmapview.NodeViewVisitor.visit(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.PathBBox.accum(double[],double,double)",4,6,n/a,6,0,3,4,1
"freemind.view.mindmapview.PathBBox.accumCubic(double[],double,double,double,double,double,double,double,double,double)",1,2,n/a,10,0,10,4,1
"freemind.view.mindmapview.PathBBox.accumQuad(double[],double,double,double,double,double,double,double)",1,2,n/a,7,0,8,4,1
"freemind.view.mindmapview.PathBBox.findCubicZeros(double[],double,double,double,double)",1,2,n/a,22,2,5,13,4
"freemind.view.mindmapview.PathBBox.findQuadZero(double,double,double)",0,2,n/a,12,0,3,1,1
"freemind.view.mindmapview.PathBBox.getBBox(Shape)",17,0,n/a,75,3,1,67,14
"freemind.view.mindmapview.RightNodeViewLayout.getInstance()",1,0,n/a,5,0,0,3,2
"freemind.view.mindmapview.RightNodeViewLayout.getMainViewInPoint(NodeView)",2,0,n/a,4,0,1,2,1
"freemind.view.mindmapview.RightNodeViewLayout.getMainViewOutPoint(NodeView,NodeView,Point)",2,0,n/a,5,0,3,2,1
"freemind.view.mindmapview.RightNodeViewLayout.layout()",24,0,n/a,22,1,0,15,2
"freemind.view.mindmapview.RightNodeViewLayout.layoutNodeMotionListenerView(NodeMotionListenerView)",7,0,n/a,9,0,1,7,1
"freemind.view.mindmapview.RootMainView.dropAsSibling(double)",0,0,n/a,3,0,1,1,1
"freemind.view.mindmapview.RootMainView.dropPosition(double)",1,1,n/a,4,0,1,1,1
"freemind.view.mindmapview.RootMainView.getAlignment()",0,0,n/a,6,0,0,1,1
"freemind.view.mindmapview.RootMainView.getCenterPoint()",2,0,n/a,5,0,0,3,1
"freemind.view.mindmapview.RootMainView.getLeftPoint()",2,2,n/a,4,0,0,2,1
"freemind.view.mindmapview.RootMainView.getPreferredSize()",1,0,n/a,11,0,0,4,1
"freemind.view.mindmapview.RootMainView.getRightPoint()",2,0,n/a,5,0,0,3,1
"freemind.view.mindmapview.RootMainView.getStyle()",2,0,n/a,9,0,0,1,1
"freemind.view.mindmapview.RootMainView.getTextWidth()",2,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.RootMainView.getTextX()",2,0,n/a,8,0,0,1,1
"freemind.view.mindmapview.RootMainView.paint(Graphics)",15,0,n/a,14,0,1,11,2
"freemind.view.mindmapview.RootMainView.paintBackground(Graphics2D,Color)",4,2,n/a,4,0,2,2,1
"freemind.view.mindmapview.RootMainView.paintDragOver(Graphics2D)",22,1,n/a,15,1,1,7,3
"freemind.view.mindmapview.RootMainView.paintSelected(Graphics2D)",8,1,n/a,7,1,1,3,2
"freemind.view.mindmapview.RootMainView.setDraggedOver(Point)",3,1,n/a,4,0,1,1,2
"freemind.view.mindmapview.SharpBezierEdgeView.SharpBezierEdgeView()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.SharpBezierEdgeView.createStart()",19,0,n/a,32,3,0,25,4
"freemind.view.mindmapview.SharpBezierEdgeView.getColor()",2,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.SharpBezierEdgeView.paint(Graphics2D)",8,0,n/a,8,0,1,6,1
"freemind.view.mindmapview.SharpBezierEdgeView.update()",15,1,n/a,23,1,0,15,2
"freemind.view.mindmapview.SharpLinearEdgeView.SharpLinearEdgeView()",1,0,n/a,3,0,0,1,1
"freemind.view.mindmapview.SharpLinearEdgeView.getColor()",2,2,n/a,3,0,0,1,1
"freemind.view.mindmapview.SharpLinearEdgeView.paint(Graphics2D)",9,0,n/a,10,0,1,7,1
"freemind.view.mindmapview.VerticalRootNodeViewLayout.getInstance()",1,0,n/a,5,0,0,3,2
"freemind.view.mindmapview.VerticalRootNodeViewLayout.getMainViewInPoint(NodeView)",2,0,n/a,4,0,1,2,1
"freemind.view.mindmapview.VerticalRootNodeViewLayout.getMainViewOutPoint(NodeView,NodeView,Point)",13,0,n/a,27,2,3,15,4
"freemind.view.mindmapview.VerticalRootNodeViewLayout.layout()",40,0,n/a,35,1,0,26,2
"freemind.view.mindmapview.VerticalRootNodeViewLayout.layoutNodeMotionListenerView(NodeMotionListenerView)",0,0,n/a,3,0,1,0,1
"freemind.view.mindmapview.ViewFeedback.MouseWheelEventHandler.handleMouseWheelEvent(MouseWheelEvent)",n/a,1,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.changeSelection(NodeView,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.deRegisterMouseWheelEventHandler(MouseWheelEventHandler)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getDefaultFont()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getMapMouseMotionListener()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getMapMouseWheelListener()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getNodeDragListener()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getNodeDropListener()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getNodeKeyListener()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getNodeMotionListener()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getNodeMouseMotionListener()",n/a,0,1,n/a,n/a,0,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.getProperty(String)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.onFocusNode(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.onLostFocusNode(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.onViewCreatedHook(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.onViewRemovedHook(NodeView)",n/a,0,0,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.registerMouseWheelEventHandler(MouseWheelEventHandler)",n/a,0,1,n/a,n/a,1,n/a,n/a
"freemind.view.mindmapview.ViewFeedback.setFolded(MindMapNode,boolean)",n/a,1,0,n/a,n/a,2,n/a,n/a
"null.apply(MindMapMapModel,MindMapNodeModel)",1,0,n/a,3,0,2,1,1

