Method,ev(G),iv(G),v(G)
"null.accept(AttributeSource)",1,1,1
"null.accept(String)",2,1,2
"null.add(BooleanClause)",1,1,1
"null.add(Query,Occur)",1,1,1
"null.addClause(BooleanQuery,Term,float)",1,1,1
"null.addClause(SpanOrQuery,Term,float)",1,1,1
"null.advance(int)",1,1,1
"null.apply(Statement,Description)",1,1,1
"null.apply(Statement,FrameworkMethod,Object)",1,1,1
"null.close()",1,1,1
"null.compare(DocFieldProcessorPerField,DocFieldProcessorPerField)",1,1,1
"null.compare(Fieldable,Fieldable)",1,1,1
"null.compare(InstantiatedTerm,InstantiatedTerm)",1,1,1
"null.compare(InstantiatedTermDocumentInformation,InstantiatedTermDocumentInformation)",1,1,1
"null.compare(InterestingTerm,InterestingTerm)",2,1,3
"null.compare(Long,Long)",1,1,1
"null.compare(MergeThread,MergeThread)",1,1,3
"null.compare(Object,Object)",3,1,4
"null.compare(Pair<Long, Long>,Pair<Long, Long>)",1,1,1
"null.compare(Query,Query)",1,1,1
"null.compare(SegmentInfo,SegmentInfo)",3,1,3
"null.compare(Spans,Spans)",1,1,1
"null.compare(String,String)",7,4,8
"null.compare(Token,Token)",1,1,1
"null.compare(byte[],byte[])",3,1,3
"null.computeNorm(String,FieldInvertState)",1,2,2
"null.createComponents(String,Reader)",1,1,1
"null.createFS(int,CASImpl)",3,3,3
"null.createValue(IndexReader,Object)",1,1,1
"null.difference()",1,1,1
"null.docFreq()",1,1,1
"null.docID()",1,1,1
"null.endEnum()",1,1,1
"null.equals(Object)",1,1,1
"null.failed(Throwable,FrameworkMethod)",1,4,4
"null.func(int,DocValues)",1,1,1
"null.func(int,DocValues,DocValues)",1,1,1
"null.getChain(DocumentsWriter)",1,1,1
"null.getComparator()",1,1,1
"null.getLabel()",1,1,1
"null.getNow()",1,1,1
"null.getStream(String,Reader)",3,1,6
"null.getTopLevelQuery()",1,1,1
"null.hashCode()",1,1,1
"null.initialValue()",1,1,2
"null.isAnalyzed()",1,1,1
"null.isCacheable()",1,1,1
"null.isIndexed()",1,1,1
"null.isStored()",1,1,1
"null.iterator()",1,1,1
"null.newComparator(String,int,int,boolean)",1,1,1
"null.next()",1,1,1
"null.nextDoc()",1,1,1
"null.omitNorms()",1,1,1
"null.onClose(IndexReader)",1,1,1
"null.onClose(SegmentReader)",1,1,1
"null.parse(FunctionQParser)",1,1,1
"null.parseByte(String)",1,1,1
"null.parseDouble(String)",2,1,3
"null.parseFloat(String)",2,1,3
"null.parseInt(String)",2,1,3
"null.parseLong(String)",2,1,3
"null.parseShort(String)",1,1,1
"null.put(String,String)",2,2,2
"null.read(String)",1,1,1
"null.readResolve()",1,1,1
"null.rewrite(IndexReader,MultiTermQuery)",1,1,1
"null.setBoost(float)",1,1,1
"null.setDocCountPercent(double)",1,1,1
"null.setTermCountCutoff(int)",1,1,1
"null.starting(FrameworkMethod)",1,1,1
"null.term()",1,1,1
"null.termCompare(Term)",1,1,1
"null.toQueryString()",1,1,1
"null.toString()",1,1,1
"null.tokenStream(String,Reader)",1,1,1
"null.val()",1,1,1
"null.withOffsets()",1,1,1
"null.withPositions()",1,1,1
"org.apache.lucene.LucenePackage.LucenePackage()",1,1,1
"org.apache.lucene.LucenePackage.get()",1,1,1
"org.apache.lucene.TestAssertions.TestAnalyzer1.reusableTokenStream(String,Reader)",1,1,1
"org.apache.lucene.TestAssertions.TestAnalyzer1.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.TestAssertions.TestAnalyzer2.reusableTokenStream(String,Reader)",1,1,1
"org.apache.lucene.TestAssertions.TestAnalyzer2.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.TestAssertions.TestAnalyzer3.reusableTokenStream(String,Reader)",1,1,1
"org.apache.lucene.TestAssertions.TestAnalyzer3.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.TestAssertions.TestAnalyzer4.reusableTokenStream(String,Reader)",1,1,1
"org.apache.lucene.TestAssertions.TestAnalyzer4.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.TestAssertions.TestTokenStream1.incrementToken()",1,1,1
"org.apache.lucene.TestAssertions.TestTokenStream2.incrementToken()",1,1,1
"org.apache.lucene.TestAssertions.TestTokenStream3.incrementToken()",1,1,1
"org.apache.lucene.TestAssertions.testTokenStreams()",1,1,4
"org.apache.lucene.TestDemo.testDemo()",1,2,3
"org.apache.lucene.TestMergeSchedulerExternal.FailOnlyOnMerge.eval(MockDirectoryWrapper)",3,2,3
"org.apache.lucene.TestMergeSchedulerExternal.MyMergeScheduler.MyMergeThread.MyMergeThread(IndexWriter,OneMerge)",1,1,1
"org.apache.lucene.TestMergeSchedulerExternal.MyMergeScheduler.doMerge(OneMerge)",1,1,1
"org.apache.lucene.TestMergeSchedulerExternal.MyMergeScheduler.getMergeThread(IndexWriter,OneMerge)",1,1,1
"org.apache.lucene.TestMergeSchedulerExternal.MyMergeScheduler.handleMergeException(Throwable)",1,1,1
"org.apache.lucene.TestMergeSchedulerExternal.ReportingMergeScheduler.close()",1,1,1
"org.apache.lucene.TestMergeSchedulerExternal.ReportingMergeScheduler.merge(IndexWriter)",1,3,3
"org.apache.lucene.TestMergeSchedulerExternal.testCustomMergeScheduler()",1,1,1
"org.apache.lucene.TestMergeSchedulerExternal.testSubclassConcurrentMergeScheduler()",1,2,2
"org.apache.lucene.TestSearch.Time(int,int,int)",1,1,1
"org.apache.lucene.TestSearch.doTestSearch(Random,PrintWriter,boolean)",1,5,6
"org.apache.lucene.TestSearch.main(String[])",1,1,1
"org.apache.lucene.TestSearch.testSearch()",1,1,1
"org.apache.lucene.TestSearchForDuplicates.checkHits(ScoreDoc[],int,Searcher)",1,3,5
"org.apache.lucene.TestSearchForDuplicates.doTest(Random,PrintWriter,boolean,int)",1,4,4
"org.apache.lucene.TestSearchForDuplicates.main(String[])",1,1,1
"org.apache.lucene.TestSearchForDuplicates.printHits(PrintWriter,ScoreDoc[],Searcher)",1,3,5
"org.apache.lucene.TestSearchForDuplicates.testRun()",1,1,1
"org.apache.lucene.analysis.ASCIIFoldingFilter.ASCIIFoldingFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ASCIIFoldingFilter.foldToASCII(char[],int)",1,2,2
"org.apache.lucene.analysis.ASCIIFoldingFilter.foldToASCII(char[],int,char[],int,int)",2,2,233
"org.apache.lucene.analysis.ASCIIFoldingFilter.incrementToken()",4,4,4
"org.apache.lucene.analysis.Analyzer.Analyzer()",1,1,1
"org.apache.lucene.analysis.Analyzer.assertFinal()",2,4,6
"org.apache.lucene.analysis.Analyzer.close()",1,1,1
"org.apache.lucene.analysis.Analyzer.getOffsetGap(Fieldable)",2,1,2
"org.apache.lucene.analysis.Analyzer.getPositionIncrementGap(String)",1,1,1
"org.apache.lucene.analysis.Analyzer.getPreviousTokenStream()",2,1,3
"org.apache.lucene.analysis.Analyzer.reusableTokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.Analyzer.setPreviousTokenStream(Object)",2,1,3
"org.apache.lucene.analysis.BaseCharFilter.BaseCharFilter(CharStream)",1,1,1
"org.apache.lucene.analysis.BaseCharFilter.addOffCorrectMap(int,int)",1,3,6
"org.apache.lucene.analysis.BaseCharFilter.correct(int)",7,1,9
"org.apache.lucene.analysis.BaseCharFilter.getLastCumulativeDiff()",1,1,2
"org.apache.lucene.analysis.BaseTokenStreamTestCase.AnalysisThread.AnalysisThread(Random,Analyzer,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.AnalysisThread.run()",1,2,2
"org.apache.lucene.analysis.BaseTokenStreamTestCase.CheckClearAttributesAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.CheckClearAttributesAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.CheckClearAttributesAttributeImpl.equals(Object)",1,1,2
"org.apache.lucene.analysis.BaseTokenStreamTestCase.CheckClearAttributesAttributeImpl.getAndResetClearCalled()",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.CheckClearAttributesAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesTo(Analyzer,String,String[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesTo(Analyzer,String,String[],String[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesTo(Analyzer,String,String[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesTo(Analyzer,String,String[],int[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesTo(Analyzer,String,String[],int[],int[],String[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesTo(Analyzer,String,String[],int[],int[],String[],int[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesTo(Analyzer,String,String[],int[],int[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesToPositions(Analyzer,String,String[],int[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesToReuse(Analyzer,String,String[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesToReuse(Analyzer,String,String[],String[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesToReuse(Analyzer,String,String[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesToReuse(Analyzer,String,String[],int[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesToReuse(Analyzer,String,String[],int[],int[],String[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertAnalyzesToReuse(Analyzer,String,String[],int[],int[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],String[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[],int[],Integer)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[],int[],String[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[],int[],String[],int[],Integer)",1,16,18
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[],int[],String[],int[],int[],Integer)",1,22,24
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[],int[],int[])",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[],int[],int[],Integer)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(TokenStream,String[],int[],int[],int[],int[],Integer)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.checkAnalysisConsistency(Random,Analyzer,boolean,String)",7,29,44
"org.apache.lucene.analysis.BaseTokenStreamTestCase.checkOneTerm(Analyzer,String,String)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.checkOneTermReuse(Analyzer,String,String)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(Random,Analyzer,int)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(Random,Analyzer,int,boolean)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(Random,Analyzer,int,int)",2,16,21
"org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(Random,Analyzer,int,int,boolean)",2,4,5
"org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(Random,Analyzer,int,int,boolean,boolean)",1,7,8
"org.apache.lucene.analysis.BaseTokenStreamTestCase.randomAnalysisString(Random,int,boolean)",2,5,5
"org.apache.lucene.analysis.BaseTokenStreamTestCase.randomSubString(Random,int,boolean)",2,10,11
"org.apache.lucene.analysis.BaseTokenStreamTestCase.toDot(Analyzer,String)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.toDotFile(Analyzer,String,String)",1,1,1
"org.apache.lucene.analysis.BaseTokenStreamTestCase.toIntArray(List<Integer>)",1,1,2
"org.apache.lucene.analysis.CachingTokenFilter.CachingTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.CachingTokenFilter.end()",1,2,2
"org.apache.lucene.analysis.CachingTokenFilter.fillCache()",1,2,2
"org.apache.lucene.analysis.CachingTokenFilter.incrementToken()",2,2,3
"org.apache.lucene.analysis.CachingTokenFilter.reset()",1,2,2
"org.apache.lucene.analysis.CannedTokenStream.CannedTokenStream(Token[])",1,1,1
"org.apache.lucene.analysis.CannedTokenStream.incrementToken()",2,2,2
"org.apache.lucene.analysis.CharArrayMap.CharArrayMap(CharArrayMap<V>)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.CharArrayMap(Version,Map<?, ? extends V>,boolean)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.CharArrayMap(Version,int,boolean)",1,1,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.EmptyCharArrayMap()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.containsKey(CharSequence)",2,1,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.containsKey(Object)",2,1,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.containsKey(char[],int,int)",2,1,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.get(CharSequence)",2,1,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.get(Object)",2,1,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.get(char[],int,int)",2,1,2
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.EntryIterator(boolean)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.currentValue()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.goNext()",1,1,3
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.hasNext()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.next()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.nextKey()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.nextKeyString()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.remove()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.setValue(V)",2,1,2
"org.apache.lucene.analysis.CharArrayMap.EntrySet.EntrySet(boolean)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntrySet.clear()",2,1,2
"org.apache.lucene.analysis.CharArrayMap.EntrySet.contains(Object)",2,2,3
"org.apache.lucene.analysis.CharArrayMap.EntrySet.iterator()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntrySet.remove(Object)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntrySet.size()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.MapEntry.MapEntry(int,boolean)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.MapEntry.getKey()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.MapEntry.getValue()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.MapEntry.setValue(V)",2,1,2
"org.apache.lucene.analysis.CharArrayMap.MapEntry.toString()",1,1,2
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.UnmodifiableCharArrayMap(CharArrayMap<V>)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.clear()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.createEntrySet()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.put(CharSequence,V)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.put(Object,V)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.put(String,V)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.put(char[],V)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.remove(Object)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.clear()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.containsKey(CharSequence)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.containsKey(Object)",2,2,2
"org.apache.lucene.analysis.CharArrayMap.containsKey(char[],int,int)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.copy(Version,Map<?, ? extends V>)",3,3,3
"org.apache.lucene.analysis.CharArrayMap.createEntrySet()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.emptyMap()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.entrySet()",1,2,2
"org.apache.lucene.analysis.CharArrayMap.equals(CharSequence,char[])",7,4,7
"org.apache.lucene.analysis.CharArrayMap.equals(char[],int,int,char[])",7,3,7
"org.apache.lucene.analysis.CharArrayMap.get(CharSequence)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.get(Object)",2,2,2
"org.apache.lucene.analysis.CharArrayMap.get(char[],int,int)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.getHashCode(CharSequence)",2,4,5
"org.apache.lucene.analysis.CharArrayMap.getHashCode(char[],int,int)",2,3,5
"org.apache.lucene.analysis.CharArrayMap.getSlot(CharSequence)",1,4,5
"org.apache.lucene.analysis.CharArrayMap.getSlot(char[],int,int)",1,4,5
"org.apache.lucene.analysis.CharArrayMap.keySet()",1,1,2
"org.apache.lucene.analysis.CharArrayMap.originalKeySet()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.put(CharSequence,V)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.put(Object,V)",2,2,2
"org.apache.lucene.analysis.CharArrayMap.put(String,V)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.put(char[],V)",2,4,5
"org.apache.lucene.analysis.CharArrayMap.rehash()",1,3,3
"org.apache.lucene.analysis.CharArrayMap.remove(Object)",1,1,1
"org.apache.lucene.analysis.CharArrayMap.size()",1,1,1
"org.apache.lucene.analysis.CharArrayMap.toString()",1,3,3
"org.apache.lucene.analysis.CharArrayMap.unmodifiableMap(CharArrayMap<V>)",4,3,5
"org.apache.lucene.analysis.CharArraySet.CharArraySet(CharArrayMap<Object>)",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySet(Collection<?>,boolean)",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySet(Version,Collection<?>,boolean)",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySet(Version,int,boolean)",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySet(int,boolean)",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.CharArraySetIterator()",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.goNext()",1,1,3
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.hasNext()",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.next()",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.nextCharArray()",1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.remove()",1,1,1
"org.apache.lucene.analysis.CharArraySet.add(CharSequence)",1,1,1
"org.apache.lucene.analysis.CharArraySet.add(Object)",1,1,1
"org.apache.lucene.analysis.CharArraySet.add(String)",1,1,1
"org.apache.lucene.analysis.CharArraySet.add(char[])",1,1,1
"org.apache.lucene.analysis.CharArraySet.clear()",1,1,1
"org.apache.lucene.analysis.CharArraySet.contains(CharSequence)",1,1,1
"org.apache.lucene.analysis.CharArraySet.contains(Object)",1,1,1
"org.apache.lucene.analysis.CharArraySet.contains(char[],int,int)",1,1,1
"org.apache.lucene.analysis.CharArraySet.copy(Set<?>)",2,1,2
"org.apache.lucene.analysis.CharArraySet.copy(Version,Set<?>)",3,2,3
"org.apache.lucene.analysis.CharArraySet.iterator()",1,2,2
"org.apache.lucene.analysis.CharArraySet.size()",1,1,1
"org.apache.lucene.analysis.CharArraySet.stringIterator()",1,1,1
"org.apache.lucene.analysis.CharArraySet.toString()",1,4,4
"org.apache.lucene.analysis.CharArraySet.unmodifiableSet(CharArraySet)",4,1,4
"org.apache.lucene.analysis.CharFilter.CharFilter(CharStream)",1,1,1
"org.apache.lucene.analysis.CharFilter.close()",1,1,1
"org.apache.lucene.analysis.CharFilter.correct(int)",1,1,1
"org.apache.lucene.analysis.CharFilter.correctOffset(int)",1,1,1
"org.apache.lucene.analysis.CharFilter.mark(int)",1,1,1
"org.apache.lucene.analysis.CharFilter.markSupported()",1,1,1
"org.apache.lucene.analysis.CharFilter.read(char[],int,int)",1,1,1
"org.apache.lucene.analysis.CharFilter.reset()",1,1,1
"org.apache.lucene.analysis.CharReader.CharReader(Reader)",1,1,1
"org.apache.lucene.analysis.CharReader.close()",1,1,1
"org.apache.lucene.analysis.CharReader.correctOffset(int)",1,1,1
"org.apache.lucene.analysis.CharReader.get(Reader)",1,1,2
"org.apache.lucene.analysis.CharReader.mark(int)",1,1,1
"org.apache.lucene.analysis.CharReader.markSupported()",1,1,1
"org.apache.lucene.analysis.CharReader.read(char[],int,int)",1,1,1
"org.apache.lucene.analysis.CharReader.reset()",1,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.end()",1,1,1
"org.apache.lucene.analysis.CharTokenizer.incrementToken()",9,9,11
"org.apache.lucene.analysis.CharTokenizer.incrementTokenOld()",8,8,10
"org.apache.lucene.analysis.CharTokenizer.isTokenChar(char)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.isTokenChar(int)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.normalize(char)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.normalize(int)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.CharTokenizer.useOldAPI(Version)",2,3,4
"org.apache.lucene.analysis.CollationTestBase.assertMatches(Searcher,Query,Sort,String)",1,3,3
"org.apache.lucene.analysis.CollationTestBase.assertThreadSafe(Analyzer)",1,6,7
"org.apache.lucene.analysis.CollationTestBase.encodeCollationKey(byte[])",1,1,1
"org.apache.lucene.analysis.CollationTestBase.testCollationKeySort(Analyzer,Analyzer,Analyzer,Analyzer,String,String,String,String)",1,6,6
"org.apache.lucene.analysis.CollationTestBase.testFarsiRangeFilterCollating(Analyzer,String,String,String,String)",1,1,1
"org.apache.lucene.analysis.CollationTestBase.testFarsiRangeQueryCollating(Analyzer,String,String,String,String)",1,1,1
"org.apache.lucene.analysis.CollationTestBase.testFarsiTermRangeQuery(Analyzer,String,String,String,String)",1,1,1
"org.apache.lucene.analysis.EmptyTokenizer.EmptyTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.EmptyTokenizer.incrementToken()",1,1,1
"org.apache.lucene.analysis.FilteringTokenFilter.FilteringTokenFilter(boolean,TokenStream)",1,1,1
"org.apache.lucene.analysis.FilteringTokenFilter.getEnablePositionIncrements()",1,1,1
"org.apache.lucene.analysis.FilteringTokenFilter.incrementToken()",6,9,9
"org.apache.lucene.analysis.FilteringTokenFilter.reset()",1,1,1
"org.apache.lucene.analysis.FilteringTokenFilter.setEnablePositionIncrements(boolean)",1,1,1
"org.apache.lucene.analysis.ISOLatin1AccentFilter.ISOLatin1AccentFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ISOLatin1AccentFilter.incrementToken()",4,4,5
"org.apache.lucene.analysis.ISOLatin1AccentFilter.removeAccents(char[],int)",2,2,39
"org.apache.lucene.analysis.KeywordAnalyzer.KeywordAnalyzer()",1,1,1
"org.apache.lucene.analysis.KeywordAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.KeywordMarkerFilter.KeywordMarkerFilter(TokenStream,CharArraySet)",1,1,1
"org.apache.lucene.analysis.KeywordMarkerFilter.KeywordMarkerFilter(TokenStream,Set<?>)",1,2,2
"org.apache.lucene.analysis.KeywordMarkerFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.KeywordTokenizer.KeywordTokenizer(AttributeFactory,Reader,int)",1,1,1
"org.apache.lucene.analysis.KeywordTokenizer.KeywordTokenizer(AttributeSource,Reader,int)",1,1,1
"org.apache.lucene.analysis.KeywordTokenizer.KeywordTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.KeywordTokenizer.KeywordTokenizer(Reader,int)",1,1,1
"org.apache.lucene.analysis.KeywordTokenizer.end()",1,1,1
"org.apache.lucene.analysis.KeywordTokenizer.incrementToken()",4,4,5
"org.apache.lucene.analysis.KeywordTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.LengthFilter.LengthFilter(TokenStream,int,int)",1,1,1
"org.apache.lucene.analysis.LengthFilter.LengthFilter(boolean,TokenStream,int,int)",1,1,1
"org.apache.lucene.analysis.LengthFilter.accept()",1,1,2
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.LetterTokenizer.isTokenChar(int)",1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.LimitTokenCountAnalyzer(Analyzer,int)",1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.getOffsetGap(Fieldable)",1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.getPositionIncrementGap(String)",1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.reusableTokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.toString()",1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.LimitTokenCountFilter.LimitTokenCountFilter(TokenStream,int)",1,1,1
"org.apache.lucene.analysis.LimitTokenCountFilter.incrementToken()",2,2,3
"org.apache.lucene.analysis.LimitTokenCountFilter.reset()",1,1,1
"org.apache.lucene.analysis.LowerCaseFilter.LowerCaseFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.LowerCaseFilter.LowerCaseFilter(Version,TokenStream)",1,1,1
"org.apache.lucene.analysis.LowerCaseFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.normalize(int)",1,1,1
"org.apache.lucene.analysis.MappingCharFilter.MappingCharFilter(NormalizeCharMap,CharStream)",1,1,1
"org.apache.lucene.analysis.MappingCharFilter.MappingCharFilter(NormalizeCharMap,Reader)",1,1,1
"org.apache.lucene.analysis.MappingCharFilter.match(NormalizeCharMap)",1,5,7
"org.apache.lucene.analysis.MappingCharFilter.nextChar()",2,3,3
"org.apache.lucene.analysis.MappingCharFilter.pushChar(int)",1,1,2
"org.apache.lucene.analysis.MappingCharFilter.pushLastChar(int)",1,1,2
"org.apache.lucene.analysis.MappingCharFilter.read()",6,8,11
"org.apache.lucene.analysis.MappingCharFilter.read(char[],int,int)",3,4,6
"org.apache.lucene.analysis.MockAnalyzer.MockAnalyzer(Random)",1,1,1
"org.apache.lucene.analysis.MockAnalyzer.MockAnalyzer(Random,int,boolean)",1,1,1
"org.apache.lucene.analysis.MockAnalyzer.MockAnalyzer(Random,int,boolean,CharArraySet,boolean)",1,1,1
"org.apache.lucene.analysis.MockAnalyzer.getPositionIncrementGap(String)",1,1,1
"org.apache.lucene.analysis.MockAnalyzer.maybePayload(TokenFilter,String)",4,4,8
"org.apache.lucene.analysis.MockAnalyzer.reusableTokenStream(String,Reader)",2,3,3
"org.apache.lucene.analysis.MockAnalyzer.setEnableChecks(boolean)",1,1,1
"org.apache.lucene.analysis.MockAnalyzer.setMaxTokenLength(int)",1,1,1
"org.apache.lucene.analysis.MockAnalyzer.setPositionIncrementGap(int)",1,1,1
"org.apache.lucene.analysis.MockAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.MockCharFilter.MockCharFilter(Reader,int)",1,1,2
"org.apache.lucene.analysis.MockCharFilter.addOffCorrectMap(int,int)",1,1,1
"org.apache.lucene.analysis.MockCharFilter.close()",1,1,1
"org.apache.lucene.analysis.MockCharFilter.correctOffset(int)",1,2,2
"org.apache.lucene.analysis.MockCharFilter.read()",4,4,6
"org.apache.lucene.analysis.MockCharFilter.read(char[],int,int)",3,2,4
"org.apache.lucene.analysis.MockFixedLengthPayloadFilter.MockFixedLengthPayloadFilter(Random,TokenStream,int)",1,1,1
"org.apache.lucene.analysis.MockFixedLengthPayloadFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.MockReaderWrapper.MockReaderWrapper(Random,Reader)",1,1,1
"org.apache.lucene.analysis.MockReaderWrapper.close()",1,1,1
"org.apache.lucene.analysis.MockReaderWrapper.isMyEvilException(Throwable)",1,2,2
"org.apache.lucene.analysis.MockReaderWrapper.markSupported()",1,1,1
"org.apache.lucene.analysis.MockReaderWrapper.read(char[],int,int)",2,3,6
"org.apache.lucene.analysis.MockReaderWrapper.ready()",1,1,1
"org.apache.lucene.analysis.MockReaderWrapper.throwExcAfterChar(int)",1,1,1
"org.apache.lucene.analysis.MockReaderWrapper.throwExcNext()",1,1,1
"org.apache.lucene.analysis.MockTokenizer.MockTokenizer(AttributeFactory,Reader,int,boolean,int)",1,1,1
"org.apache.lucene.analysis.MockTokenizer.MockTokenizer(Reader,int,boolean)",1,1,1
"org.apache.lucene.analysis.MockTokenizer.MockTokenizer(Reader,int,boolean,int)",1,1,1
"org.apache.lucene.analysis.MockTokenizer.close()",1,1,3
"org.apache.lucene.analysis.MockTokenizer.end()",1,1,2
"org.apache.lucene.analysis.MockTokenizer.incrementToken()",6,7,10
"org.apache.lucene.analysis.MockTokenizer.isTokenChar(int)",5,4,5
"org.apache.lucene.analysis.MockTokenizer.normalize(int)",1,2,2
"org.apache.lucene.analysis.MockTokenizer.readCodePoint()",4,4,4
"org.apache.lucene.analysis.MockTokenizer.reset()",1,1,2
"org.apache.lucene.analysis.MockTokenizer.reset(Reader)",1,1,2
"org.apache.lucene.analysis.MockTokenizer.setEnableChecks(boolean)",1,1,1
"org.apache.lucene.analysis.MockVariableLengthPayloadFilter.MockVariableLengthPayloadFilter(Random,TokenStream)",1,1,1
"org.apache.lucene.analysis.MockVariableLengthPayloadFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.NormalizeCharMap.add(String,String)",2,3,5
"org.apache.lucene.analysis.NumericTokenStream.NumericTokenStream()",1,1,1
"org.apache.lucene.analysis.NumericTokenStream.NumericTokenStream(AttributeFactory,int)",2,1,2
"org.apache.lucene.analysis.NumericTokenStream.NumericTokenStream(AttributeSource,int)",2,1,2
"org.apache.lucene.analysis.NumericTokenStream.NumericTokenStream(int)",2,1,2
"org.apache.lucene.analysis.NumericTokenStream.getPrecisionStep()",1,1,1
"org.apache.lucene.analysis.NumericTokenStream.incrementToken()",4,2,8
"org.apache.lucene.analysis.NumericTokenStream.reset()",2,1,2
"org.apache.lucene.analysis.NumericTokenStream.setDoubleValue(double)",1,1,1
"org.apache.lucene.analysis.NumericTokenStream.setFloatValue(float)",1,1,1
"org.apache.lucene.analysis.NumericTokenStream.setIntValue(int)",1,1,1
"org.apache.lucene.analysis.NumericTokenStream.setLongValue(long)",1,1,1
"org.apache.lucene.analysis.NumericTokenStream.toString()",1,1,1
"org.apache.lucene.analysis.PayloadSetter.PayloadSetter(TokenStream)",1,1,1
"org.apache.lucene.analysis.PayloadSetter.incrementToken()",2,1,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.PerFieldAnalyzerWrapper(Analyzer)",1,1,1
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.PerFieldAnalyzerWrapper(Analyzer,Map<String, Analyzer>)",1,2,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.addAnalyzer(String,Analyzer)",1,1,1
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.getOffsetGap(Fieldable)",1,1,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.getPositionIncrementGap(String)",1,1,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.reusableTokenStream(String,Reader)",1,1,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.toString()",1,1,1
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.tokenStream(String,Reader)",1,1,2
"org.apache.lucene.analysis.PorterStemFilter.PorterStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.PorterStemFilter.incrementToken()",2,3,4
"org.apache.lucene.analysis.PorterStemmer.PorterStemmer()",1,1,1
"org.apache.lucene.analysis.PorterStemmer.add(char)",1,2,2
"org.apache.lucene.analysis.PorterStemmer.cons(int)",4,4,5
"org.apache.lucene.analysis.PorterStemmer.cvc(int)",3,4,8
"org.apache.lucene.analysis.PorterStemmer.doublec(int)",3,1,3
"org.apache.lucene.analysis.PorterStemmer.ends(String)",4,2,4
"org.apache.lucene.analysis.PorterStemmer.getResultBuffer()",1,1,1
"org.apache.lucene.analysis.PorterStemmer.getResultLength()",1,1,1
"org.apache.lucene.analysis.PorterStemmer.m()",11,5,11
"org.apache.lucene.analysis.PorterStemmer.main(String[])",5,7,8
"org.apache.lucene.analysis.PorterStemmer.r(String)",1,2,2
"org.apache.lucene.analysis.PorterStemmer.reset()",1,1,1
"org.apache.lucene.analysis.PorterStemmer.setto(String)",1,2,2
"org.apache.lucene.analysis.PorterStemmer.stem()",1,1,1
"org.apache.lucene.analysis.PorterStemmer.stem(String)",2,2,2
"org.apache.lucene.analysis.PorterStemmer.stem(char[])",1,1,1
"org.apache.lucene.analysis.PorterStemmer.stem(char[],int)",1,1,1
"org.apache.lucene.analysis.PorterStemmer.stem(char[],int,int)",1,2,2
"org.apache.lucene.analysis.PorterStemmer.stem(int)",1,2,3
"org.apache.lucene.analysis.PorterStemmer.step1()",1,14,19
"org.apache.lucene.analysis.PorterStemmer.step2()",1,2,3
"org.apache.lucene.analysis.PorterStemmer.step3()",3,23,31
"org.apache.lucene.analysis.PorterStemmer.step4()",2,9,12
"org.apache.lucene.analysis.PorterStemmer.step5()",3,4,38
"org.apache.lucene.analysis.PorterStemmer.step6()",1,6,8
"org.apache.lucene.analysis.PorterStemmer.toString()",1,1,1
"org.apache.lucene.analysis.PorterStemmer.vowelinstem()",3,2,3
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents.TokenStreamComponents(Tokenizer)",1,1,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents.TokenStreamComponents(Tokenizer,TokenStream)",1,1,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents.getTokenStream()",1,1,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents.reset(Reader)",1,1,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.initReader(Reader)",1,1,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.reusableTokenStream(String,Reader)",1,3,3
"org.apache.lucene.analysis.ReusableAnalyzerBase.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.SimpleAnalyzer.SimpleAnalyzer()",1,1,1
"org.apache.lucene.analysis.SimpleAnalyzer.SimpleAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.SimpleAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.StopAnalyzer.StopAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.StopAnalyzer.StopAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.StopAnalyzer.StopAnalyzer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.StopAnalyzer.StopAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.StopAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.StopFilter.StopFilter(Version,TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.StopFilter.StopFilter(Version,TokenStream,Set<?>,boolean)",1,1,1
"org.apache.lucene.analysis.StopFilter.StopFilter(Version,boolean,TokenStream,Set<?>,boolean)",1,1,2
"org.apache.lucene.analysis.StopFilter.StopFilter(boolean,TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.StopFilter.StopFilter(boolean,TokenStream,Set<?>,boolean)",1,1,1
"org.apache.lucene.analysis.StopFilter.accept()",1,1,1
"org.apache.lucene.analysis.StopFilter.getEnablePositionIncrementsVersionDefault(Version)",1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(List<?>)",1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(List<?>,boolean)",1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(String...)",1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(String[],boolean)",1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(Version,List<?>)",1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(Version,List<?>,boolean)",1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(Version,String...)",1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(Version,String[],boolean)",1,1,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.StopwordAnalyzerBase(Version)",1,1,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.StopwordAnalyzerBase(Version,Set<?>)",1,2,2
"org.apache.lucene.analysis.StopwordAnalyzerBase.getStopwordSet()",1,1,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.loadStopwordSet(File,Version)",1,1,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.loadStopwordSet(Reader,Version)",1,1,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.loadStopwordSet(boolean,Class<? extends ReusableAnalyzerBase>,String,String)",1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkFilter.reset()",1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.SinkTokenStream(AttributeSource,SinkFilter)",1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.accept(AttributeSource)",1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.addState(State)",2,1,2
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.end()",1,2,2
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.incrementToken()",2,2,3
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.reset()",1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.setFinalState(State)",1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.TeeSinkTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.addSinkTokenStream(SinkTokenStream)",2,2,3
"org.apache.lucene.analysis.TeeSinkTokenFilter.consumeAllTokens()",1,1,2
"org.apache.lucene.analysis.TeeSinkTokenFilter.end()",1,3,3
"org.apache.lucene.analysis.TeeSinkTokenFilter.incrementToken()",2,6,6
"org.apache.lucene.analysis.TeeSinkTokenFilter.newSinkTokenStream()",1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.newSinkTokenStream(SinkFilter)",1,1,1
"org.apache.lucene.analysis.TestASCIIFoldingFilter.assertTermEquals(String,TokenStream,CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.TestASCIIFoldingFilter.testAllFoldings()",1,5,5
"org.apache.lucene.analysis.TestASCIIFoldingFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.TestASCIIFoldingFilter.testLatin1Accents()",1,1,1
"org.apache.lucene.analysis.TestASCIIFoldingFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.LowerCaseWhitespaceAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.LowerCaseWhitespaceAnalyzerBWComp.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.TestAnalyzers._testStandardConstants()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testLimitTokenCountAnalyzer()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testLowerCaseFilter()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testLowerCaseFilterBWComp()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testLowerCaseFilterLowSurrogateLeftover()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testNull()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testPayloadCopy()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testSimple()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.testStop()",1,1,1
"org.apache.lucene.analysis.TestAnalyzers.verifyPayload(TokenStream)",3,2,3
"org.apache.lucene.analysis.TestCachingTokenFilter.checkTokens(TokenStream)",1,2,2
"org.apache.lucene.analysis.TestCachingTokenFilter.testCaching()",2,2,2
"org.apache.lucene.analysis.TestCharArrayMap.doRandom(int,boolean)",1,4,4
"org.apache.lucene.analysis.TestCharArrayMap.testCharArrayMap()",1,2,2
"org.apache.lucene.analysis.TestCharArrayMap.testMethods()",1,4,5
"org.apache.lucene.analysis.TestCharArrayMap.testModifyOnUnmodifiable()",1,9,9
"org.apache.lucene.analysis.TestCharArrayMap.testToString()",1,1,1
"org.apache.lucene.analysis.TestCharArraySet.testClear()",1,3,3
"org.apache.lucene.analysis.TestCharArraySet.testContainsWithNull()",1,1,4
"org.apache.lucene.analysis.TestCharArraySet.testCopyCharArraySet()",1,5,5
"org.apache.lucene.analysis.TestCharArraySet.testCopyCharArraySetBWCompat()",1,5,5
"org.apache.lucene.analysis.TestCharArraySet.testCopyEmptySet()",1,1,1
"org.apache.lucene.analysis.TestCharArraySet.testCopyJDKSet()",1,5,5
"org.apache.lucene.analysis.TestCharArraySet.testEmptySet()",1,2,2
"org.apache.lucene.analysis.TestCharArraySet.testIterator()",1,2,3
"org.apache.lucene.analysis.TestCharArraySet.testModifyOnUnmodifiable()",1,10,10
"org.apache.lucene.analysis.TestCharArraySet.testNonZeroOffset()",1,1,1
"org.apache.lucene.analysis.TestCharArraySet.testObjectContains()",1,1,1
"org.apache.lucene.analysis.TestCharArraySet.testRehash()",1,3,3
"org.apache.lucene.analysis.TestCharArraySet.testSingleHighSurrogate()",1,5,5
"org.apache.lucene.analysis.TestCharArraySet.testSingleHighSurrogateBWComapt()",1,6,6
"org.apache.lucene.analysis.TestCharArraySet.testSupplementaryChars()",1,5,5
"org.apache.lucene.analysis.TestCharArraySet.testSupplementaryCharsBWCompat()",1,5,5
"org.apache.lucene.analysis.TestCharArraySet.testToString()",1,1,1
"org.apache.lucene.analysis.TestCharArraySet.testUnmodifiableSet()",1,2,3
"org.apache.lucene.analysis.TestCharFilter.CharFilter1.CharFilter1(CharStream)",1,1,1
"org.apache.lucene.analysis.TestCharFilter.CharFilter1.correct(int)",1,1,1
"org.apache.lucene.analysis.TestCharFilter.CharFilter2.CharFilter2(CharStream)",1,1,1
"org.apache.lucene.analysis.TestCharFilter.CharFilter2.correct(int)",1,1,1
"org.apache.lucene.analysis.TestCharFilter.testCharFilter1()",1,1,1
"org.apache.lucene.analysis.TestCharFilter.testCharFilter11()",1,1,1
"org.apache.lucene.analysis.TestCharFilter.testCharFilter12()",1,1,1
"org.apache.lucene.analysis.TestCharFilter.testCharFilter2()",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizer.TestingCharTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizer.isTokenChar(char)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizer.isTokenChar(int)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizerNormalize.TestingCharTokenizerNormalize(Version,Reader)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizerNormalize.normalize(char)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizerNormalize.normalize(int)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizerNormalizeIsTokenChar.TestingCharTokenizerNormalizeIsTokenChar(Version,Reader)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizerNormalizeIsTokenChar.isTokenChar(char)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizerNormalizeIsTokenChar.isTokenChar(int)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizerNormalizeIsTokenChar.normalize(char)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.TestingCharTokenizerNormalizeIsTokenChar.normalize(int)",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.testCrossPlaneNormalization()",2,4,5
"org.apache.lucene.analysis.TestCharTokenizers.testCrossPlaneNormalization2()",2,4,5
"org.apache.lucene.analysis.TestCharTokenizers.testExtendCharBuffer()",1,3,3
"org.apache.lucene.analysis.TestCharTokenizers.testIsTokenCharCharInSubclass()",1,1,2
"org.apache.lucene.analysis.TestCharTokenizers.testLowerCaseTokenizer()",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.testLowerCaseTokenizerBWCompat()",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.testMaxWordLength()",1,2,2
"org.apache.lucene.analysis.TestCharTokenizers.testMaxWordLengthWithSupplementary()",1,2,2
"org.apache.lucene.analysis.TestCharTokenizers.testNormalizeAndIsTokenCharCharInSubclass()",1,1,2
"org.apache.lucene.analysis.TestCharTokenizers.testNormalizeCharInSubclass()",1,1,2
"org.apache.lucene.analysis.TestCharTokenizers.testReadSupplementaryChars()",1,3,3
"org.apache.lucene.analysis.TestCharTokenizers.testWhitespaceTokenizer()",1,1,1
"org.apache.lucene.analysis.TestCharTokenizers.testWhitespaceTokenizerBWCompat()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testAcronyms()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testAlphanumeric()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testApostrophes()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testCPlusPlusHash()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testCompanyNames()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testComplianceFileName()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testComplianceManyTokens()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testComplianceNumericFile()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testComplianceNumericIncorrect()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testComplianceNumericLong()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testComplianceNumericWithDash()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testComplianceNumericWithUnderscores()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testDelimiters()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testDomainNames()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testEMailAddresses()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testJava14BWCompatibility()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testKorean()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testLucene1140()",1,2,2
"org.apache.lucene.analysis.TestClassicAnalyzer.testMaxTermLength()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testMaxTermLength2()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testMaxTermLength3()",1,1,2
"org.apache.lucene.analysis.TestClassicAnalyzer.testNumeric()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testTSADash()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testTextWithNumbers()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testUnderscores()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testVariousText()",1,1,1
"org.apache.lucene.analysis.TestClassicAnalyzer.testWickedLongTerm()",1,1,1
"org.apache.lucene.analysis.TestDuelingAnalyzers.assertEquals(String,TokenStream,TokenStream)",1,2,2
"org.apache.lucene.analysis.TestDuelingAnalyzers.newStringReader(String)",1,1,2
"org.apache.lucene.analysis.TestDuelingAnalyzers.testLetterAscii()",1,2,2
"org.apache.lucene.analysis.TestDuelingAnalyzers.testLetterAsciiHuge()",1,2,2
"org.apache.lucene.analysis.TestDuelingAnalyzers.testLetterHtmlish()",1,2,2
"org.apache.lucene.analysis.TestDuelingAnalyzers.testLetterHtmlishHuge()",1,2,2
"org.apache.lucene.analysis.TestDuelingAnalyzers.testLetterUnicode()",1,2,2
"org.apache.lucene.analysis.TestDuelingAnalyzers.testLetterUnicodeHuge()",1,2,2
"org.apache.lucene.analysis.TestISOLatin1AccentFilter.assertTermEquals(String,TokenStream,CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.TestISOLatin1AccentFilter.testU()",1,1,1
"org.apache.lucene.analysis.TestKeywordAnalyzer.setUp()",1,1,1
"org.apache.lucene.analysis.TestKeywordAnalyzer.testMutipleDocument()",1,1,1
"org.apache.lucene.analysis.TestKeywordAnalyzer.testOffsets()",1,1,1
"org.apache.lucene.analysis.TestKeywordAnalyzer.testPerFieldAnalyzer()",1,1,1
"org.apache.lucene.analysis.TestKeywordAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestKeywordMarkerFilter.LowerCaseFilterMock.LowerCaseFilterMock(TokenStream)",1,1,1
"org.apache.lucene.analysis.TestKeywordMarkerFilter.LowerCaseFilterMock.incrementToken()",2,3,3
"org.apache.lucene.analysis.TestKeywordMarkerFilter.testComposition()",1,1,1
"org.apache.lucene.analysis.TestKeywordMarkerFilter.testIncrementToken()",1,1,1
"org.apache.lucene.analysis.TestLengthFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.TestLengthFilter.testFilterNoPosIncr()",1,1,1
"org.apache.lucene.analysis.TestLengthFilter.testFilterWithPosIncr()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.setUp()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.test1to1()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.test1to2()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.test1to3()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.test2to1()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.test2to4()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.test3to1()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.test4to2()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.test5to0()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.testChained()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.testNothingChange()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.testRandom()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.testReaderReset()",1,1,1
"org.apache.lucene.analysis.TestMappingCharFilter.testTokenStream()",1,1,1
"org.apache.lucene.analysis.TestMockAnalyzer.testForwardOffsets()",1,2,3
"org.apache.lucene.analysis.TestMockAnalyzer.testKeyword()",1,1,1
"org.apache.lucene.analysis.TestMockAnalyzer.testLUCENE_3042()",1,1,2
"org.apache.lucene.analysis.TestMockAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestMockAnalyzer.testSimple()",1,1,1
"org.apache.lucene.analysis.TestMockAnalyzer.testStop()",1,1,1
"org.apache.lucene.analysis.TestMockAnalyzer.testWhitespace()",1,1,1
"org.apache.lucene.analysis.TestMockCharFilter.test()",1,1,1
"org.apache.lucene.analysis.TestNumericTokenStream.testIntStream()",1,2,3
"org.apache.lucene.analysis.TestNumericTokenStream.testLongStream()",1,2,3
"org.apache.lucene.analysis.TestNumericTokenStream.testNotInitialized()",1,1,3
"org.apache.lucene.analysis.TestPerFieldAnalzyerWrapper.testPerField()",1,1,1
"org.apache.lucene.analysis.TestPorterStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.TestPorterStemFilter.testPorterStemFilter()",1,1,1
"org.apache.lucene.analysis.TestPorterStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestPorterStemFilter.testWithKeywordAttribute()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testAlphanumericSA()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testAmharic()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testApostrophesSA()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testArabic()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testAramaic()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testArmenian()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testBengali()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testChinese()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testCombiningMarks()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testCombiningMarksBackwards()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testDelimitersSA()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testEmpty()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testFarsi()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testGreek()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testHugeDoc()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testJapanese()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testKorean()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testKoreanSA()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testLUCENE1545()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testLao()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testNumericSA()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testOffsets()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testSupplementary()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testTextWithNumbersSA()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testThai()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testTibetan()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testTypes()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testUnicodeWordBreaks()",1,1,1
"org.apache.lucene.analysis.TestStandardAnalyzer.testVariousTextSA()",1,1,1
"org.apache.lucene.analysis.TestStopAnalyzer.setUp()",1,2,2
"org.apache.lucene.analysis.TestStopAnalyzer.testDefaults()",1,2,2
"org.apache.lucene.analysis.TestStopAnalyzer.testStopList()",1,2,2
"org.apache.lucene.analysis.TestStopAnalyzer.testStopListPositions()",1,2,2
"org.apache.lucene.analysis.TestStopFilter.MockSynonymFilter.MockSynonymFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.TestStopFilter.MockSynonymFilter.incrementToken()",3,4,4
"org.apache.lucene.analysis.TestStopFilter.MockSynonymFilter.reset()",1,1,1
"org.apache.lucene.analysis.TestStopFilter.doTestStopPositons(StopFilter,boolean)",1,2,5
"org.apache.lucene.analysis.TestStopFilter.log(String)",1,2,2
"org.apache.lucene.analysis.TestStopFilter.testExactCase()",1,1,1
"org.apache.lucene.analysis.TestStopFilter.testFirstPosInc()",1,1,1
"org.apache.lucene.analysis.TestStopFilter.testIgnoreCase()",1,1,1
"org.apache.lucene.analysis.TestStopFilter.testStopFilt()",1,1,1
"org.apache.lucene.analysis.TestStopFilter.testStopPositons()",1,8,8
"org.apache.lucene.analysis.TestTeeSinkTokenFilter.ModuloSinkFilter.ModuloSinkFilter(int)",1,1,1
"org.apache.lucene.analysis.TestTeeSinkTokenFilter.ModuloSinkFilter.accept(AttributeSource)",1,1,2
"org.apache.lucene.analysis.TestTeeSinkTokenFilter.ModuloTokenFilter.ModuloTokenFilter(TokenStream,int)",1,1,1
"org.apache.lucene.analysis.TestTeeSinkTokenFilter.ModuloTokenFilter.incrementToken()",1,1,3
"org.apache.lucene.analysis.TestTeeSinkTokenFilter.performance()",1,11,11
"org.apache.lucene.analysis.TestTeeSinkTokenFilter.setUp()",1,3,3
"org.apache.lucene.analysis.TestTeeSinkTokenFilter.testGeneral()",1,1,1
"org.apache.lucene.analysis.TestTeeSinkTokenFilter.testMultipleSources()",1,2,2
"org.apache.lucene.analysis.TestToken.SenselessAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.TestToken.SenselessAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.TestToken.SenselessAttributeImpl.equals(Object)",1,1,1
"org.apache.lucene.analysis.TestToken.SenselessAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.analysis.TestToken.testAttributeReflection()",1,1,1
"org.apache.lucene.analysis.TestToken.testClone()",1,1,1
"org.apache.lucene.analysis.TestToken.testCopyTo()",1,1,1
"org.apache.lucene.analysis.TestToken.testCtor()",1,1,1
"org.apache.lucene.analysis.TestToken.testGrow()",1,6,6
"org.apache.lucene.analysis.TestToken.testMixedStringArray()",1,1,1
"org.apache.lucene.analysis.TestToken.testResize()",1,2,2
"org.apache.lucene.analysis.TestToken.testTermBufferEquals()",1,1,1
"org.apache.lucene.analysis.TestToken.testToString()",1,1,1
"org.apache.lucene.analysis.TestToken.testTokenAttributeFactory()",1,1,1
"org.apache.lucene.analysis.TestTypeTokenFilter.log(String)",1,2,2
"org.apache.lucene.analysis.TestTypeTokenFilter.testPositons(TypeTokenFilter)",1,2,3
"org.apache.lucene.analysis.TestTypeTokenFilter.testStopPositons()",1,3,3
"org.apache.lucene.analysis.TestTypeTokenFilter.testTypeFilter()",1,1,1
"org.apache.lucene.analysis.TestTypeTokenFilter.testTypeFilterWhitelist()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testAlphanumericSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testAmharic()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testApostrophesSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testArabic()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testAramaic()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testArmenian()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testBasicEmails()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testBasicURLs()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testBengali()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testChinese()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testCombiningMarks()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testCombiningMarksBackwards()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testDelimitersSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testEmpty()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testFarsi()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testGreek()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testHugeDoc()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testJapanese()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testKorean()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testKoreanSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testLUCENE1545()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testLao()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testMailtoSchemeEmails()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testNumericSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testOffsets()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testSupplementary()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testTextWithNumbersSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testThai()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testTibetan()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testTypes()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailAnalyzer.testVariousTextSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.EmailFilter.EmailFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.EmailFilter.incrementToken()",3,2,3
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.URLFilter.URLFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.URLFilter.incrementToken()",3,2,3
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testAlphanumericSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testAmharic()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testApostrophesSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testArabic()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testAramaic()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testArmenian()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testBengali()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testChinese()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testCombiningMarks()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testCombiningMarksBackwards()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testDelimitersSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testEmails()",1,7,8
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testEmpty()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testFarsi()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testGreek()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testHugeDoc()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testJapanese()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testKorean()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testKoreanSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testLUCENE1545()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testLao()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testMailtoSchemeEmails()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testNumericSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testOffsets()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testSupplementary()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testTextWithNumbersSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testThai()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testTibetan()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testTypes()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testURLs()",1,7,8
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testUnicodeWordBreaks()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testVariousTextSA()",1,1,1
"org.apache.lucene.analysis.TestUAX29URLEmailTokenizer.testWikiURLs()",1,7,8
"org.apache.lucene.analysis.TestWordlistLoader.checkSet(CharArraySet)",1,1,1
"org.apache.lucene.analysis.TestWordlistLoader.testComments()",1,1,1
"org.apache.lucene.analysis.TestWordlistLoader.testSnowballListLoading()",1,1,1
"org.apache.lucene.analysis.TestWordlistLoader.testWordlistLoading()",1,1,1
"org.apache.lucene.analysis.Token.Token()",1,1,1
"org.apache.lucene.analysis.Token.Token(String,int,int)",1,1,1
"org.apache.lucene.analysis.Token.Token(String,int,int,String)",1,1,1
"org.apache.lucene.analysis.Token.Token(String,int,int,int)",1,1,1
"org.apache.lucene.analysis.Token.Token(char[],int,int,int,int)",1,1,1
"org.apache.lucene.analysis.Token.Token(int,int)",1,1,1
"org.apache.lucene.analysis.Token.Token(int,int,String)",1,1,1
"org.apache.lucene.analysis.Token.Token(int,int,int)",1,1,1
"org.apache.lucene.analysis.Token.TokenAttributeFactory.TokenAttributeFactory(AttributeFactory)",1,1,1
"org.apache.lucene.analysis.Token.TokenAttributeFactory.createAttributeInstance(Class<? extends Attribute>)",1,2,2
"org.apache.lucene.analysis.Token.TokenAttributeFactory.equals(Object)",3,2,3
"org.apache.lucene.analysis.Token.TokenAttributeFactory.hashCode()",1,1,1
"org.apache.lucene.analysis.Token.clear()",1,1,1
"org.apache.lucene.analysis.Token.clearNoTermBuffer()",1,1,1
"org.apache.lucene.analysis.Token.clone()",1,2,2
"org.apache.lucene.analysis.Token.clone(char[],int,int,int,int)",1,2,2
"org.apache.lucene.analysis.Token.copyTo(AttributeImpl)",1,4,4
"org.apache.lucene.analysis.Token.endOffset()",1,1,1
"org.apache.lucene.analysis.Token.equals(Object)",3,10,11
"org.apache.lucene.analysis.Token.getFlags()",1,1,1
"org.apache.lucene.analysis.Token.getPayload()",1,1,1
"org.apache.lucene.analysis.Token.getPositionIncrement()",1,1,1
"org.apache.lucene.analysis.Token.hashCode()",1,3,3
"org.apache.lucene.analysis.Token.reflectWith(AttributeReflector)",1,1,1
"org.apache.lucene.analysis.Token.reinit(String,int,int)",1,1,1
"org.apache.lucene.analysis.Token.reinit(String,int,int,String)",1,1,1
"org.apache.lucene.analysis.Token.reinit(String,int,int,int,int)",1,1,1
"org.apache.lucene.analysis.Token.reinit(String,int,int,int,int,String)",1,1,1
"org.apache.lucene.analysis.Token.reinit(Token)",1,1,1
"org.apache.lucene.analysis.Token.reinit(Token,String)",1,1,1
"org.apache.lucene.analysis.Token.reinit(Token,char[],int,int)",1,1,1
"org.apache.lucene.analysis.Token.reinit(char[],int,int,int,int)",1,1,1
"org.apache.lucene.analysis.Token.reinit(char[],int,int,int,int,String)",1,1,1
"org.apache.lucene.analysis.Token.setEndOffset(int)",1,1,1
"org.apache.lucene.analysis.Token.setFlags(int)",1,1,1
"org.apache.lucene.analysis.Token.setOffset(int,int)",1,1,1
"org.apache.lucene.analysis.Token.setPayload(Payload)",1,1,1
"org.apache.lucene.analysis.Token.setPositionIncrement(int)",2,1,2
"org.apache.lucene.analysis.Token.setStartOffset(int)",1,1,1
"org.apache.lucene.analysis.Token.setType(String)",1,1,1
"org.apache.lucene.analysis.Token.startOffset()",1,1,1
"org.apache.lucene.analysis.Token.type()",1,1,1
"org.apache.lucene.analysis.TokenFilter.TokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.TokenFilter.close()",1,1,1
"org.apache.lucene.analysis.TokenFilter.end()",1,1,1
"org.apache.lucene.analysis.TokenFilter.reset()",1,1,1
"org.apache.lucene.analysis.TokenStream.TokenStream()",1,1,1
"org.apache.lucene.analysis.TokenStream.TokenStream(AttributeFactory)",1,1,1
"org.apache.lucene.analysis.TokenStream.TokenStream(AttributeSource)",1,1,1
"org.apache.lucene.analysis.TokenStream.assertFinal()",2,3,5
"org.apache.lucene.analysis.TokenStream.close()",1,1,1
"org.apache.lucene.analysis.TokenStream.end()",1,1,1
"org.apache.lucene.analysis.TokenStream.reset()",1,1,1
"org.apache.lucene.analysis.TokenStreamToDot.TokenStreamToDot(String,TokenStream,PrintWriter)",1,2,2
"org.apache.lucene.analysis.TokenStreamToDot.toDot()",1,9,10
"org.apache.lucene.analysis.TokenStreamToDot.writeArc(int,int,String,String)",1,3,3
"org.apache.lucene.analysis.TokenStreamToDot.writeHeader()",1,1,1
"org.apache.lucene.analysis.TokenStreamToDot.writeNode(int,String)",1,2,2
"org.apache.lucene.analysis.TokenStreamToDot.writeTrailer()",1,1,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer()",1,1,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(AttributeFactory)",1,1,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(AttributeSource)",1,1,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.Tokenizer.close()",1,2,2
"org.apache.lucene.analysis.Tokenizer.correctOffset(int)",1,2,2
"org.apache.lucene.analysis.Tokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.TypeTokenFilter.TypeTokenFilter(boolean,TokenStream,Set<String>)",1,1,1
"org.apache.lucene.analysis.TypeTokenFilter.TypeTokenFilter(boolean,TokenStream,Set<String>,boolean)",1,1,1
"org.apache.lucene.analysis.TypeTokenFilter.accept()",1,1,1
"org.apache.lucene.analysis.VocabularyAssert.assertVocabulary(Analyzer,File,String)",1,1,1
"org.apache.lucene.analysis.VocabularyAssert.assertVocabulary(Analyzer,File,String,String)",1,1,1
"org.apache.lucene.analysis.VocabularyAssert.assertVocabulary(Analyzer,InputStream)",3,3,4
"org.apache.lucene.analysis.VocabularyAssert.assertVocabulary(Analyzer,InputStream,InputStream)",1,2,2
"org.apache.lucene.analysis.WhitespaceAnalyzer.WhitespaceAnalyzer()",1,1,1
"org.apache.lucene.analysis.WhitespaceAnalyzer.WhitespaceAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.WhitespaceAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.isTokenChar(int)",1,1,1
"org.apache.lucene.analysis.WordBreakTestUnicode_6_0_0.test(Analyzer)",1,1,1
"org.apache.lucene.analysis.WordlistLoader.getBufferedReader(Reader)",1,1,2
"org.apache.lucene.analysis.WordlistLoader.getSnowballWordSet(Reader,CharArraySet)",1,5,5
"org.apache.lucene.analysis.WordlistLoader.getSnowballWordSet(Reader,Version)",1,1,1
"org.apache.lucene.analysis.WordlistLoader.getStemDict(Reader,CharArrayMap<String>)",1,2,2
"org.apache.lucene.analysis.WordlistLoader.getWordSet(Reader,CharArraySet)",1,2,2
"org.apache.lucene.analysis.WordlistLoader.getWordSet(Reader,String,CharArraySet)",1,3,3
"org.apache.lucene.analysis.WordlistLoader.getWordSet(Reader,String,Version)",1,1,1
"org.apache.lucene.analysis.WordlistLoader.getWordSet(Reader,Version)",1,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,Hashtable<?, ?>)",1,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.createComponents(String,Reader)",1,1,3
"org.apache.lucene.analysis.ar.ArabicAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.isTokenChar(int)",1,2,2
"org.apache.lucene.analysis.ar.ArabicNormalizationFilter.ArabicNormalizationFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ar.ArabicNormalizationFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.ar.ArabicNormalizer.normalize(char[],int)",2,3,7
"org.apache.lucene.analysis.ar.ArabicStemFilter.ArabicStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ar.ArabicStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.ar.ArabicStemmer.endsWithCheckLength(char[],int,char[])",4,1,4
"org.apache.lucene.analysis.ar.ArabicStemmer.startsWithCheckLength(char[],int,char[])",5,1,6
"org.apache.lucene.analysis.ar.ArabicStemmer.stem(char[],int)",1,1,1
"org.apache.lucene.analysis.ar.ArabicStemmer.stemPrefix(char[],int)",3,3,3
"org.apache.lucene.analysis.ar.ArabicStemmer.stemSuffix(char[],int)",1,3,3
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testBasicFeatures()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testCustomStopwords()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testEnglishInput()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testWithStemExclusionSet()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicLetterTokenizer.testArabicLetterTokenizer()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicLetterTokenizer.testArabicLetterTokenizerBWCompat()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.check(String,String)",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testAlifHamzaAbove()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testAlifHamzaBelow()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testAlifMadda()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testAlifMaksura()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testDamma()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testDammatan()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testFatha()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testFathatan()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testKasra()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testKasratan()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testShaddah()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testSukun()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testTatweel()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testTehMarbuta()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.check(String,String)",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testAhSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testAlPrefix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testAnSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testAtSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testBalPrefix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testComboPrefSuf()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testComboSuf()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testFalPrefix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testHSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testKalPrefix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testLlPrefix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testNonArabic()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testPSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testShouldntStem()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testWaPrefix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testWalPrefix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testWithKeywordAttribute()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testWnSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testYSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testYhSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testYnSuffix()",1,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testYpSuffix()",1,1,1
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.BulgarianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.BulgarianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.BulgarianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.bg.BulgarianStemFilter.BulgarianStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.bg.BulgarianStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.bg.BulgarianStemmer.removeArticle(char[],int)",5,8,11
"org.apache.lucene.analysis.bg.BulgarianStemmer.removePlural(char[],int)",14,4,15
"org.apache.lucene.analysis.bg.BulgarianStemmer.stem(char[],int)",3,6,13
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testBasicExamples()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testCustomStopwords()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testStopwords()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testWithStemExclusionSet()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testAdjectives()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testExceptions()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testFeminineNouns()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testMasculineNouns()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testNeuterNouns()",1,1,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testWithKeywordAttribute()",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.createComponents(String,Reader)",1,2,3
"org.apache.lucene.analysis.br.BrazilianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.setStemExclusionTable(File)",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.setStemExclusionTable(Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.setStemExclusionTable(String...)",1,1,1
"org.apache.lucene.analysis.br.BrazilianStemFilter.BrazilianStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.br.BrazilianStemFilter.BrazilianStemFilter(TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.br.BrazilianStemFilter.incrementToken()",2,7,7
"org.apache.lucene.analysis.br.BrazilianStemmer.BrazilianStemmer()",1,1,1
"org.apache.lucene.analysis.br.BrazilianStemmer.changeTerm(String)",10,8,16
"org.apache.lucene.analysis.br.BrazilianStemmer.createCT(String)",3,17,19
"org.apache.lucene.analysis.br.BrazilianStemmer.getR1(String)",8,3,8
"org.apache.lucene.analysis.br.BrazilianStemmer.getRV(String)",11,11,14
"org.apache.lucene.analysis.br.BrazilianStemmer.isIndexable(String)",1,2,2
"org.apache.lucene.analysis.br.BrazilianStemmer.isStemmable(String)",3,2,3
"org.apache.lucene.analysis.br.BrazilianStemmer.isVowel(char)",1,1,5
"org.apache.lucene.analysis.br.BrazilianStemmer.log()",1,1,1
"org.apache.lucene.analysis.br.BrazilianStemmer.removeSuffix(String,String)",2,3,4
"org.apache.lucene.analysis.br.BrazilianStemmer.replaceSuffix(String,String,String)",3,1,5
"org.apache.lucene.analysis.br.BrazilianStemmer.stem(String)",3,3,5
"org.apache.lucene.analysis.br.BrazilianStemmer.step1()",48,91,92
"org.apache.lucene.analysis.br.BrazilianStemmer.step2()",122,121,122
"org.apache.lucene.analysis.br.BrazilianStemmer.step3()",2,3,4
"org.apache.lucene.analysis.br.BrazilianStemmer.step4()",6,5,6
"org.apache.lucene.analysis.br.BrazilianStemmer.step5()",5,4,5
"org.apache.lucene.analysis.br.BrazilianStemmer.suffix(String,String)",3,1,4
"org.apache.lucene.analysis.br.BrazilianStemmer.suffixPreceded(String,String,String)",2,4,5
"org.apache.lucene.analysis.br.TestBrazilianStemmer.check(String,String)",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.checkReuse(Analyzer,String,String)",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testExclusionTableReuse()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testNormalization()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testStemExclusionTable()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testStemExclusionTableBWCompat()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testWithKeywordAttribute()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testWithKeywordAttributeAndExclusionTable()",1,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testWithSnowballExamples()",1,1,1
"org.apache.lucene.analysis.ca.CatalanAnalyzer.CatalanAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.ca.CatalanAnalyzer.CatalanAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.ca.CatalanAnalyzer.CatalanAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.ca.CatalanAnalyzer.createComponents(String,Reader)",1,1,3
"org.apache.lucene.analysis.ca.CatalanAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testContractions()",1,1,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.HTMLStripCharFilter(CharStream)",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.HTMLStripCharFilter(CharStream,Set<String>)",1,6,7
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.TextSegment(char[],int)",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.TextSegment(int)",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.clear()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.isRead()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.nextChar()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.restart()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.close()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.getInitialBufferSize()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.nextChar()",41,90,156
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.read()",3,2,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.read(char[],int,int)",3,2,5
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yybegin(int)",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yycharat(int)",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yyclose()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yylength()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yypushback(int)",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yyreset(Reader)",1,1,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yystate()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yytext()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzDoEOF()",2,6,6
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzRefill()",4,4,6
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzScanError(int)",1,1,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackAction()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackAction(String,int,int[])",1,2,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackAttribute()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackAttribute(String,int,int[])",1,2,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackCMap(String)",1,2,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackRowMap()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackRowMap(String,int,int[])",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackTrans()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackTrans(String,int,int[])",1,2,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.appendChars(StringBuilder,int)",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.assertLegalOffsets(String)",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.doTestOffsets(String)",1,3,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.newTestAnalyzer()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.processBuffer(String,String)",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.test()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testBR()",1,3,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testBufferOverflow()",1,4,4
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testCDATA()",1,3,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testCloseBR()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testComment()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testEntities()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testEscapeBR()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testEscapeScript()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testEscapeStyle()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testGamma()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testHTML()",1,3,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testInlineTagsNoSpace()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testLegalOffsets()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testMSWord14GeneratedHTML()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testMSWordMalformedProcessingInstruction()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testMalformedHTML()",1,3,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testMoreEntities()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testOffsets()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testRandom()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testRandomBrokenHTML()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testRandomText()",2,7,8
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testReserved()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testScriptQuotes()",1,3,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testServerSideIncludes()",1,3,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testStyle()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testSupplementaryCharsInTags()",1,2,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testUTF16Surrogates()",1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testUppercaseCharacterEntityVariants()",1,2,2
"org.apache.lucene.analysis.cjk.CJKAnalyzer.CJKAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.cjk.CJKAnalyzer.CJKAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.cjk.CJKAnalyzer.CJKAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.cjk.CJKAnalyzer.createComponents(String,Reader)",2,1,2
"org.apache.lucene.analysis.cjk.CJKAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.CJKBigramFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.CJKBigramFilter(TokenStream,int)",1,1,5
"org.apache.lucene.analysis.cjk.CJKBigramFilter.doNext()",4,3,4
"org.apache.lucene.analysis.cjk.CJKBigramFilter.flushBigram()",1,1,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.flushUnigram()",1,1,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.hasBufferedBigram()",1,1,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.hasBufferedUnigram()",1,1,2
"org.apache.lucene.analysis.cjk.CJKBigramFilter.incrementToken()",9,9,12
"org.apache.lucene.analysis.cjk.CJKBigramFilter.refill()",1,4,5
"org.apache.lucene.analysis.cjk.CJKBigramFilter.reset()",1,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.CJKTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.CJKTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.CJKTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.end()",1,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.incrementToken()",21,9,30
"org.apache.lucene.analysis.cjk.CJKTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.cjk.CJKWidthFilter.CJKWidthFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.cjk.CJKWidthFilter.combine(char[],int,char)",2,1,4
"org.apache.lucene.analysis.cjk.CJKWidthFilter.incrementToken()",2,8,11
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.FakeStandardTokenizer.FakeStandardTokenizer(TokenStream)",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.FakeStandardTokenizer.incrementToken()",2,2,2
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testC()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testChangedOffsets()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testFinalOffset()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testJa1()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testJa2()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testMix()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testMix2()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testNonIdeographic()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testNonIdeographicNonLetter()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testSingleChar()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testSingleChar2()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testSurrogates()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testTokenStream()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.checkCJKToken(String,TestToken[])",1,1,2
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.checkCJKTokenReusable(Analyzer,String,TestToken[])",1,1,2
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.newToken(String,int,int,int)",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testC()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testFinalOffset()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testFullWidth()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testJa1()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testJa2()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testMix()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testMix2()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testNonIdeographic()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testNonIdeographicNonLetter()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testSingleChar()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testTokenStream()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter.testFullWidthASCII()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter.testHalfWidthKana()",1,1,1
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter.testRandomData()",1,1,1
"org.apache.lucene.analysis.cn.ChineseAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.cn.ChineseFilter.ChineseFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.cn.ChineseFilter.incrementToken()",5,4,6
"org.apache.lucene.analysis.cn.ChineseTokenizer.ChineseTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.ChineseTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.ChineseTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.end()",1,1,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.flush()",2,2,2
"org.apache.lucene.analysis.cn.ChineseTokenizer.incrementToken()",7,9,10
"org.apache.lucene.analysis.cn.ChineseTokenizer.push(char)",1,1,2
"org.apache.lucene.analysis.cn.ChineseTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.JustChineseFilterAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.JustChineseTokenizerAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testEnglish()",1,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testNumerics()",1,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testOtherLetterOffset()",1,2,2
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.cn.smart.AnalyzerProfile.getAnalysisDataDir(File)",1,1,2
"org.apache.lucene.analysis.cn.smart.AnalyzerProfile.init()",4,7,8
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.SentenceTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.SentenceTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.SentenceTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.end()",1,1,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.incrementToken()",7,8,9
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.DefaultSetHolder.loadDefaultStopWordSet()",1,1,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.SmartChineseAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.SmartChineseAnalyzer(Version,Set)",1,1,2
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.SmartChineseAnalyzer(Version,boolean)",1,1,2
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.reusableTokenStream(String,Reader)",1,2,3
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.tokenStream(String,Reader)",1,1,2
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseAnalyzer()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWords2()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWordsDefault()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWordsDefaultTwoPhrases()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWordsDefaultTwoPhrasesIdeoSpace()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWordsOff()",1,2,2
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testDelimiters()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testFullWidth()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testInvalidOffset()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testLargeDocument()",1,2,3
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testLargeSentence()",1,2,3
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testMixedLatinChinese()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testNonChinese()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testNumerics()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testOOV()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testOffsets()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.cn.smart.Utility.compareArray(char[],int,char[],int)",9,1,13
"org.apache.lucene.analysis.cn.smart.Utility.compareArrayByPrefix(char[],int,char[],int)",5,1,10
"org.apache.lucene.analysis.cn.smart.Utility.getCharType(char)",9,1,28
"org.apache.lucene.analysis.cn.smart.WordSegmenter.convertSegToken(SegToken,String,int)",2,2,3
"org.apache.lucene.analysis.cn.smart.WordSegmenter.segmentSentence(String,int)",1,3,3
"org.apache.lucene.analysis.cn.smart.WordTokenFilter.WordTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.cn.smart.WordTokenFilter.incrementToken()",4,5,6
"org.apache.lucene.analysis.cn.smart.WordTokenFilter.reset()",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.getCCByGB2312Id(int)",2,1,4
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.getGB2312Id(char)",2,2,3
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.hash1(char)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.hash1(char[])",1,1,2
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.hash2(char)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.hash2(char[])",1,1,2
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.BiSegGraph(SegGraph)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.addSegTokenPair(SegTokenPair)",1,2,2
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.generateBiSegGraph(SegGraph)",7,7,8
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getShortPath()",1,5,6
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getToCount()",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getToList(int)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.isToExist(int)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.toString()",1,3,3
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.BigramDictionary()",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getAvaliableIndex(long,char[])",2,1,9
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getBigramItemIndex(char[])",2,1,9
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getFrequency(char[])",2,1,2
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getInstance()",2,3,4
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load()",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String)",2,4,5
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.loadFromFile(String)",3,4,8
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.loadFromInputStream(InputStream)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.loadFromObj(File)",1,4,4
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.saveToObj(File)",1,1,2
"org.apache.lucene.analysis.cn.smart.hhmm.HHMMSegmenter.createSegGraph(String)",5,7,28
"org.apache.lucene.analysis.cn.smart.hhmm.HHMMSegmenter.getCharTypes(String)",1,2,2
"org.apache.lucene.analysis.cn.smart.hhmm.HHMMSegmenter.process(String)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.PathNode.compareTo(PathNode)",3,1,3
"org.apache.lucene.analysis.cn.smart.hhmm.PathNode.equals(Object)",6,1,6
"org.apache.lucene.analysis.cn.smart.hhmm.PathNode.hashCode()",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.addToken(SegToken)",1,2,3
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.getMaxStart()",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.getStartList(int)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.isStartExist(int)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.makeIndex()",1,4,4
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.toString()",1,2,2
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.toTokenList()",1,4,4
"org.apache.lucene.analysis.cn.smart.hhmm.SegToken.SegToken(char[],int,int,int,int)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegToken.equals(Object)",10,1,10
"org.apache.lucene.analysis.cn.smart.hhmm.SegToken.hashCode()",1,1,2
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenFilter.filter(SegToken)",2,2,12
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair.SegTokenPair(char[],int,int,double)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair.equals(Object)",8,1,8
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair.hashCode()",1,1,2
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.WordDictionary()",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.expandDelimiterData()",1,4,7
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.findInTable(short,char[])",4,2,7
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getAvaliableTableIndex(char)",2,1,9
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char[])",3,1,3
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getInstance()",2,3,4
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char[])",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char[],int)",4,4,7
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getWordItemTableIndex(char)",2,1,8
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.isEqual(char[],int)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.load()",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.load(String)",2,4,5
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.loadFromObj(File)",1,4,4
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.loadFromObjectInputStream(InputStream)",1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.loadMainDataFromFile(String)",3,4,5
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.mergeSameWords()",3,5,8
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.saveToObj(File)",1,1,2
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.setTableIndex(char,int)",2,1,2
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.sortEachItems()",1,5,7
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundToken.CompoundToken(int,int)",1,1,2
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,Set<?>,boolean)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,Set<?>,int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,String[])",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,String[],boolean)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,String[],int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,Set<?>,boolean)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,Set<?>,int,int,int,boolean)",1,1,3
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,String[])",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,String[],boolean)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,String[],int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.incrementToken()",3,5,5
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.makeDictionary(Version,String[])",2,1,2
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.reset()",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(TokenStream,Set)",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(TokenStream,Set,int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(TokenStream,String[])",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(TokenStream,String[],int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(Version,TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(Version,TokenStream,Set<?>,int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(Version,TokenStream,String[])",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(Version,TokenStream,String[],int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.decompose()",4,7,10
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set<?>)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set<?>,int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,String[])",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,String[],int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set<?>)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set<?>,int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,String[])",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,String[],int,int,int,boolean)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,int,int,int)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.decompose()",6,11,17
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(File)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(InputSource)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(Reader)",1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(String)",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeFilter.MockRetainAttributeFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl.getRetain()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl.setRetain(boolean)",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testDumbCompoundWordsSE()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testDumbCompoundWordsSELongestMatch()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testHyphenationCompoundWordsDA()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testHyphenationCompoundWordsDELongestMatch()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testHyphenationOnly()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testInvalidOffsets()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testReset()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testRetainMockAttribute()",1,2,2
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testTokenEndingWithWordComponentOfMinimumLength()",1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testWordComponentWithLessThanMinimumLength()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.ByteVector()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.ByteVector(byte[])",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.ByteVector(byte[],int)",1,1,2
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.ByteVector(int)",1,1,2
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.alloc(int)",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.capacity()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.getArray()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.length()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.put(int,byte)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.trimToSize()",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.CharVector.CharVector()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.CharVector(char[])",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.CharVector(char[],int)",1,1,2
"org.apache.lucene.analysis.compound.hyphenation.CharVector.CharVector(int)",1,1,2
"org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int)",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.CharVector.capacity()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.clear()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.clone()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.length()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.put(int,char)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.trimToSize()",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.Hyphen.Hyphen(String)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.Hyphen.Hyphen(String,String,String)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.Hyphen.toString()",2,4,5
"org.apache.lucene.analysis.compound.hyphenation.Hyphenation.Hyphenation(int[])",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.Hyphenation.getHyphenationPoints()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.Hyphenation.length()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationException.HyphenationException(String)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.HyphenationTree()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.addClass(String)",1,3,3
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.addException(String,ArrayList<Object>)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.addPattern(String,String)",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.findPattern(String)",2,2,2
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.getValues(int)",3,3,4
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hstrcmp(char[],int,char[],int)",4,1,4
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(String,int,int)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(char[],int,int,int,int)",6,7,17
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(File)",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(InputSource)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.packValues(String)",1,2,4
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.printStats()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.searchPatterns(char[],int,byte[])",8,7,18
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.unpackValues(int)",3,2,3
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.PatternParser()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.PatternParser(PatternConsumer)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.addClass(String)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.addException(String,ArrayList<Object>)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.addPattern(String,String)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.characters(char[],int,int)",2,3,5
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.createParser()",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.endElement(String,String,String)",2,4,8
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.getExceptionWord(ArrayList<?>)",1,4,4
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.getInterletterValues(String)",1,3,3
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.getLocationString(SAXParseException)",1,3,3
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.getPattern(String)",1,3,3
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.main(String[])",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.normalizeException(ArrayList<?>)",1,6,6
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(File)",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(InputSource)",1,3,4
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(String)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.readToken(StringBuffer)",8,8,10
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.resolveEntity(String,String)",2,4,4
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.setConsumer(PatternConsumer)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.startElement(String,String,String,Attributes)",1,9,9
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Item.Item()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Item.Item(char,char)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Item.clone()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Iterator()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.getValue()",2,1,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.hasMoreElements()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.nextElement()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.rewind()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.run()",8,5,10
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.up()",6,5,11
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.TernaryTree()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.balance()",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.clone()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.compact(CharVector,TernaryTree,char)",2,4,5
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(String)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char[],int)",6,3,7
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.init()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char)",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(char,char[],int,char)",4,8,9
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(char[],int,char)",1,2,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insertBalanced(String[],char[],int,int)",2,1,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.keys()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.knows(String)",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.main(String[])",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.printStats()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.redimNodeArrays(int)",1,1,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.size()",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strcmp(String,char[],int)",5,2,5
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strcmp(char[],int,char[],int)",3,1,3
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strcpy(char[],int,char[],int)",1,1,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strlen(char[])",1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strlen(char[],int)",1,1,3
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.trimToSize()",1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,HashSet<?>)",1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.createComponents(String,Reader)",1,2,3
"org.apache.lucene.analysis.cz.CzechAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.loadStopWords(InputStream,String)",2,3,4
"org.apache.lucene.analysis.cz.CzechStemFilter.CzechStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.cz.CzechStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.cz.CzechStemmer.normalize(char[],int)",6,2,9
"org.apache.lucene.analysis.cz.CzechStemmer.removeCase(char[],int)",7,43,48
"org.apache.lucene.analysis.cz.CzechStemmer.removePossessives(char[],int)",2,4,5
"org.apache.lucene.analysis.cz.CzechStemmer.stem(char[],int)",1,2,2
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.UnreliableInputStream.read()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testInvalidStopWordFile()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testReusableTokenStreamLegacy()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testStopWord()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testStopWordFileReuse()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testStopWordLegacy()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testWithStemExclusionSet()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testAdjectives()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testDontStem()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testExceptions()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testFeminineNouns()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testMasculineNouns()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testNeuterNouns()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testPossessive()",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testWithKeywordAttribute()",1,1,1
"org.apache.lucene.analysis.da.DanishAnalyzer.DanishAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.da.DanishAnalyzer.DanishAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.da.DanishAnalyzer.DanishAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.da.DanishAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.da.DanishAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.da.TestDanishAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.da.TestDanishAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.da.TestDanishAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.da.TestDanishAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version)",1,1,2
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.createComponents(String,Reader)",1,2,3
"org.apache.lucene.analysis.de.GermanAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.setStemExclusionTable(File)",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.setStemExclusionTable(Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.setStemExclusionTable(String[])",1,1,1
"org.apache.lucene.analysis.de.GermanLightStemFilter.GermanLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.de.GermanLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.de.GermanLightStemmer.stEnding(char)",3,2,3
"org.apache.lucene.analysis.de.GermanLightStemmer.stem(char[],int)",2,2,6
"org.apache.lucene.analysis.de.GermanLightStemmer.step1(char[],int)",6,4,13
"org.apache.lucene.analysis.de.GermanLightStemmer.step2(char[],int)",4,4,13
"org.apache.lucene.analysis.de.GermanMinimalStemFilter.GermanMinimalStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.de.GermanMinimalStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.de.GermanMinimalStemmer.stem(char[],int)",14,4,20
"org.apache.lucene.analysis.de.GermanNormalizationFilter.GermanNormalizationFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.de.GermanNormalizationFilter.incrementToken()",3,6,15
"org.apache.lucene.analysis.de.GermanStemFilter.GermanStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.de.GermanStemFilter.GermanStemFilter(TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.de.GermanStemFilter.incrementToken()",2,7,7
"org.apache.lucene.analysis.de.GermanStemFilter.setExclusionSet(Set<?>)",1,1,1
"org.apache.lucene.analysis.de.GermanStemFilter.setStemmer(GermanStemmer)",1,1,2
"org.apache.lucene.analysis.de.GermanStemmer.isStemmable(String)",3,2,3
"org.apache.lucene.analysis.de.GermanStemmer.optimize(StringBuilder)",1,5,5
"org.apache.lucene.analysis.de.GermanStemmer.removeParticleDenotion(StringBuilder)",4,4,4
"org.apache.lucene.analysis.de.GermanStemmer.resubstitute(StringBuilder)",1,9,9
"org.apache.lucene.analysis.de.GermanStemmer.stem(String)",2,1,2
"org.apache.lucene.analysis.de.GermanStemmer.strip(StringBuilder)",1,13,13
"org.apache.lucene.analysis.de.GermanStemmer.substitute(StringBuilder)",1,23,23
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testExclusionTableBWCompat()",1,1,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testExclusionTableReuse()",1,1,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testGermanSpecials()",1,1,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testStemExclusionTable()",1,1,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testWithKeywordAttribute()",1,1,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testWithKeywordAttributeAndExclusionTable()",1,1,1
"org.apache.lucene.analysis.de.TestGermanLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.de.TestGermanLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.de.TestGermanLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter.testExamples()",1,1,1
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testBasicExamples()",1,1,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testSpecialFolding()",1,1,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testUHeuristic()",1,1,1
"org.apache.lucene.analysis.de.TestGermanStemFilter.testEmpty()",1,1,1
"org.apache.lucene.analysis.de.TestGermanStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.de.TestGermanStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.de.TestGermanStemFilter.testStemming()",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.GreekAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.GreekAnalyzer(Version,Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.GreekAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.GreekAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.createComponents(String,Reader)",1,1,3
"org.apache.lucene.analysis.el.GreekAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testAcronymBWCompat()",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testAnalyzer()",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testAnalyzerBWCompat()",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.el.GreekLowerCaseFilter.GreekLowerCaseFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.el.GreekLowerCaseFilter.GreekLowerCaseFilter(Version,TokenStream)",1,1,1
"org.apache.lucene.analysis.el.GreekLowerCaseFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.el.GreekLowerCaseFilter.lowerCase(int)",11,2,11
"org.apache.lucene.analysis.el.GreekStemFilter.GreekStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.el.GreekStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.el.GreekStemmer.endsWith(char[],int,String)",4,2,4
"org.apache.lucene.analysis.el.GreekStemmer.endsWithVowel(char[],int)",4,2,4
"org.apache.lucene.analysis.el.GreekStemmer.endsWithVowelNoY(char[],int)",4,2,4
"org.apache.lucene.analysis.el.GreekStemmer.rule0(char[],int)",16,40,55
"org.apache.lucene.analysis.el.GreekStemmer.rule1(char[],int)",1,13,14
"org.apache.lucene.analysis.el.GreekStemmer.rule10(char[],int)",1,5,7
"org.apache.lucene.analysis.el.GreekStemmer.rule11(char[],int)",1,7,9
"org.apache.lucene.analysis.el.GreekStemmer.rule12(char[],int)",1,5,7
"org.apache.lucene.analysis.el.GreekStemmer.rule13(char[],int)",1,16,19
"org.apache.lucene.analysis.el.GreekStemmer.rule14(char[],int)",1,19,21
"org.apache.lucene.analysis.el.GreekStemmer.rule15(char[],int)",1,17,20
"org.apache.lucene.analysis.el.GreekStemmer.rule16(char[],int)",1,6,8
"org.apache.lucene.analysis.el.GreekStemmer.rule17(char[],int)",1,3,4
"org.apache.lucene.analysis.el.GreekStemmer.rule18(char[],int)",1,6,8
"org.apache.lucene.analysis.el.GreekStemmer.rule19(char[],int)",1,6,8
"org.apache.lucene.analysis.el.GreekStemmer.rule2(char[],int)",1,11,12
"org.apache.lucene.analysis.el.GreekStemmer.rule20(char[],int)",1,5,6
"org.apache.lucene.analysis.el.GreekStemmer.rule21(char[],int)",10,79,88
"org.apache.lucene.analysis.el.GreekStemmer.rule22(char[],int)",3,7,9
"org.apache.lucene.analysis.el.GreekStemmer.rule3(char[],int)",1,18,19
"org.apache.lucene.analysis.el.GreekStemmer.rule4(char[],int)",1,4,5
"org.apache.lucene.analysis.el.GreekStemmer.rule5(char[],int)",1,6,8
"org.apache.lucene.analysis.el.GreekStemmer.rule6(char[],int)",1,8,10
"org.apache.lucene.analysis.el.GreekStemmer.rule7(char[],int)",2,11,14
"org.apache.lucene.analysis.el.GreekStemmer.rule8(char[],int)",1,19,22
"org.apache.lucene.analysis.el.GreekStemmer.rule9(char[],int)",1,36,38
"org.apache.lucene.analysis.el.GreekStemmer.stem(char[],int)",2,2,3
"org.apache.lucene.analysis.el.TestGreekStemmer.testAdjectives()",1,1,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testExceptions()",1,1,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testFeminineNouns()",1,1,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testMasculineNouns()",1,1,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testNeuterNouns()",1,1,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testVerbs()",1,1,1
"org.apache.lucene.analysis.en.EnglishAnalyzer.EnglishAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.en.EnglishAnalyzer.EnglishAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.en.EnglishAnalyzer.EnglishAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.en.EnglishAnalyzer.createComponents(String,Reader)",1,1,3
"org.apache.lucene.analysis.en.EnglishAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.en.EnglishMinimalStemFilter.EnglishMinimalStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.en.EnglishMinimalStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.en.EnglishMinimalStemmer.stem(char[],int)",7,2,14
"org.apache.lucene.analysis.en.EnglishPossessiveFilter.EnglishPossessiveFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.en.EnglishPossessiveFilter.EnglishPossessiveFilter(Version,TokenStream)",1,1,1
"org.apache.lucene.analysis.en.EnglishPossessiveFilter.incrementToken()",2,6,9
"org.apache.lucene.analysis.en.KStemData1.KStemData1()",1,1,1
"org.apache.lucene.analysis.en.KStemData2.KStemData2()",1,1,1
"org.apache.lucene.analysis.en.KStemData3.KStemData3()",1,1,1
"org.apache.lucene.analysis.en.KStemData4.KStemData4()",1,1,1
"org.apache.lucene.analysis.en.KStemData5.KStemData5()",1,1,1
"org.apache.lucene.analysis.en.KStemData6.KStemData6()",1,1,1
"org.apache.lucene.analysis.en.KStemData7.KStemData7()",1,1,1
"org.apache.lucene.analysis.en.KStemData8.KStemData8()",1,1,1
"org.apache.lucene.analysis.en.KStemFilter.KStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.en.KStemFilter.incrementToken()",2,3,4
"org.apache.lucene.analysis.en.KStemmer.DictEntry.DictEntry(String,boolean)",1,1,1
"org.apache.lucene.analysis.en.KStemmer.KStemmer()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.alEndings()",13,7,15
"org.apache.lucene.analysis.en.KStemmer.asCharSequence()",1,1,2
"org.apache.lucene.analysis.en.KStemmer.asString()",2,1,2
"org.apache.lucene.analysis.en.KStemmer.aspect()",9,7,12
"org.apache.lucene.analysis.en.KStemmer.bleEndings()",8,4,9
"org.apache.lucene.analysis.en.KStemmer.doubleC(int)",3,1,3
"org.apache.lucene.analysis.en.KStemmer.endsIn(char,char)",3,2,4
"org.apache.lucene.analysis.en.KStemmer.endsIn(char,char,char)",3,3,5
"org.apache.lucene.analysis.en.KStemmer.endsIn(char,char,char,char)",3,4,6
"org.apache.lucene.analysis.en.KStemmer.endsIn(char[])",4,2,4
"org.apache.lucene.analysis.en.KStemmer.erAndOrEndings()",13,7,14
"org.apache.lucene.analysis.en.KStemmer.finalChar()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.getChars()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.getLength()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.getString()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.icEndings()",6,2,6
"org.apache.lucene.analysis.en.KStemmer.initializeDictHash()",1,27,27
"org.apache.lucene.analysis.en.KStemmer.ionEndings()",14,6,14
"org.apache.lucene.analysis.en.KStemmer.isAlpha(char)",1,1,2
"org.apache.lucene.analysis.en.KStemmer.isCons(int)",3,2,8
"org.apache.lucene.analysis.en.KStemmer.isVowel(int)",1,1,1
"org.apache.lucene.analysis.en.KStemmer.ismEndings()",1,2,2
"org.apache.lucene.analysis.en.KStemmer.ityEndings()",8,11,14
"org.apache.lucene.analysis.en.KStemmer.iveEndings()",8,5,10
"org.apache.lucene.analysis.en.KStemmer.izeEndings()",6,3,6
"org.apache.lucene.analysis.en.KStemmer.lookup()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.lyEndings()",8,8,12
"org.apache.lucene.analysis.en.KStemmer.matched()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.mentEndings()",3,2,3
"org.apache.lucene.analysis.en.KStemmer.nceEndings()",5,2,6
"org.apache.lucene.analysis.en.KStemmer.ncyEndings()",4,3,5
"org.apache.lucene.analysis.en.KStemmer.nessEndings()",1,3,3
"org.apache.lucene.analysis.en.KStemmer.pastTense()",11,7,13
"org.apache.lucene.analysis.en.KStemmer.penultChar()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.plural()",7,11,14
"org.apache.lucene.analysis.en.KStemmer.setSuff(String,int)",1,2,2
"org.apache.lucene.analysis.en.KStemmer.setSuffix(String)",1,1,1
"org.apache.lucene.analysis.en.KStemmer.stem(String)",2,1,2
"org.apache.lucene.analysis.en.KStemmer.stem(char[],int)",23,3,25
"org.apache.lucene.analysis.en.KStemmer.stemLength()",1,1,1
"org.apache.lucene.analysis.en.KStemmer.vowelInStem()",3,2,3
"org.apache.lucene.analysis.en.KStemmer.wordInDict()",2,1,4
"org.apache.lucene.analysis.en.TestEnglishAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.en.TestEnglishAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.en.TestEnglishAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.en.TestEnglishAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.en.TestEnglishMinimalStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.en.TestEnglishMinimalStemFilter.testExamples()",1,1,1
"org.apache.lucene.analysis.en.TestEnglishMinimalStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.en.TestKStemmer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.en.TestKStemmer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.en.TestKStemmer.testVocabulary()",1,1,1
"org.apache.lucene.analysis.es.SpanishAnalyzer.SpanishAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.es.SpanishAnalyzer.SpanishAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.es.SpanishAnalyzer.SpanishAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.es.SpanishAnalyzer.createComponents(String,Reader)",1,1,3
"org.apache.lucene.analysis.es.SpanishAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.es.SpanishLightStemFilter.SpanishLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.es.SpanishLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.es.SpanishLightStemmer.stem(char[],int)",8,3,18
"org.apache.lucene.analysis.es.TestSpanishAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.es.TestSpanishAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.es.TestSpanishAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.es.TestSpanishAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.es.TestSpanishLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.es.TestSpanishLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.es.TestSpanishLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.eu.BasqueAnalyzer.BasqueAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.eu.BasqueAnalyzer.BasqueAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.eu.BasqueAnalyzer.BasqueAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.eu.BasqueAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.eu.BasqueAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version,Hashtable<?, ?>)",1,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.fa.PersianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.initReader(Reader)",1,2,2
"org.apache.lucene.analysis.fa.PersianCharFilter.PersianCharFilter(CharStream)",1,1,1
"org.apache.lucene.analysis.fa.PersianCharFilter.read(char[],int,int)",1,1,4
"org.apache.lucene.analysis.fa.PersianNormalizationFilter.PersianNormalizationFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.fa.PersianNormalizationFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.fa.PersianNormalizer.normalize(char[],int)",2,3,7
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testBehaviorNonPersian()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testBehaviorNouns()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testBehaviorVerbs()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testBehaviorVerbsDefective()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testCustomStopwords()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.check(String,String)",1,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testFarsiYeh()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testHehGoal()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testHehHamzaAbove()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testHehYeh()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testKeheh()",1,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testYehBarree()",1,1,1
"org.apache.lucene.analysis.fi.FinnishAnalyzer.FinnishAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.fi.FinnishAnalyzer.FinnishAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.fi.FinnishAnalyzer.FinnishAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.fi.FinnishAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.fi.FinnishAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.fi.FinnishLightStemFilter.FinnishLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.fi.FinnishLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.fi.FinnishLightStemmer.isVowel(char)",3,2,3
"org.apache.lucene.analysis.fi.FinnishLightStemmer.norm1(char[],int)",5,5,8
"org.apache.lucene.analysis.fi.FinnishLightStemmer.norm2(char[],int)",1,5,13
"org.apache.lucene.analysis.fi.FinnishLightStemmer.stem(char[],int)",3,2,5
"org.apache.lucene.analysis.fi.FinnishLightStemmer.step1(char[],int)",7,5,7
"org.apache.lucene.analysis.fi.FinnishLightStemmer.step2(char[],int)",5,4,7
"org.apache.lucene.analysis.fi.FinnishLightStemmer.step3(char[],int)",20,20,35
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.fi.TestFinnishLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.fi.TestFinnishLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.fi.TestFinnishLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(TokenStream,String[])",1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(Version,TokenStream)",1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(Version,TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.incrementToken()",5,7,7
"org.apache.lucene.analysis.fr.ElisionFilter.setArticles(Set<?>)",1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.setArticles(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version)",1,1,2
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.createComponents(String,Reader)",2,2,5
"org.apache.lucene.analysis.fr.FrenchAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.setStemExclusionTable(File)",1,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.setStemExclusionTable(Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.setStemExclusionTable(String...)",1,1,1
"org.apache.lucene.analysis.fr.FrenchLightStemFilter.FrenchLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.fr.FrenchLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.fr.FrenchLightStemmer.norm(char[],int)",2,6,18
"org.apache.lucene.analysis.fr.FrenchLightStemmer.stem(char[],int)",25,55,69
"org.apache.lucene.analysis.fr.FrenchMinimalStemFilter.FrenchMinimalStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.fr.FrenchMinimalStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.fr.FrenchMinimalStemmer.stem(char[],int)",3,1,10
"org.apache.lucene.analysis.fr.FrenchStemFilter.FrenchStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.fr.FrenchStemFilter.FrenchStemFilter(TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.fr.FrenchStemFilter.incrementToken()",2,7,7
"org.apache.lucene.analysis.fr.FrenchStemFilter.setExclusionTable(Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.fr.FrenchStemFilter.setStemmer(FrenchStemmer)",1,1,2
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteButSuffixFrom(String,String[],String,boolean)",5,6,6
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteButSuffixFromElseReplace(String,String[],String,boolean,String,String)",6,8,8
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteFrom(String,String[])",4,4,4
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteFromIfPrecededIn(String,String[],String,String)",5,6,6
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteFromIfTestVowelBeforeIn(String,String[],boolean,String)",6,6,7
"org.apache.lucene.analysis.fr.FrenchStemmer.isStemmable(String)",6,2,6
"org.apache.lucene.analysis.fr.FrenchStemmer.isVowel(char)",3,2,3
"org.apache.lucene.analysis.fr.FrenchStemmer.replaceFrom(String,String[],String)",4,4,4
"org.apache.lucene.analysis.fr.FrenchStemmer.retrieveR(StringBuilder)",7,5,8
"org.apache.lucene.analysis.fr.FrenchStemmer.retrieveRV(StringBuilder)",6,6,7
"org.apache.lucene.analysis.fr.FrenchStemmer.setStrings()",1,2,2
"org.apache.lucene.analysis.fr.FrenchStemmer.stem(String)",2,5,8
"org.apache.lucene.analysis.fr.FrenchStemmer.step1()",1,1,4
"org.apache.lucene.analysis.fr.FrenchStemmer.step2a()",1,1,1
"org.apache.lucene.analysis.fr.FrenchStemmer.step2b()",1,1,1
"org.apache.lucene.analysis.fr.FrenchStemmer.step3()",1,4,4
"org.apache.lucene.analysis.fr.FrenchStemmer.step4()",1,5,10
"org.apache.lucene.analysis.fr.FrenchStemmer.step5()",1,7,7
"org.apache.lucene.analysis.fr.FrenchStemmer.step6()",7,5,12
"org.apache.lucene.analysis.fr.FrenchStemmer.treatVowels(StringBuilder)",1,21,21
"org.apache.lucene.analysis.fr.TestElision.filter(TokenFilter)",1,2,2
"org.apache.lucene.analysis.fr.TestElision.testElision()",1,1,1
"org.apache.lucene.analysis.fr.TestElision.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testAccentInsensitive()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testAnalyzer()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testAnalyzer30()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testBuggyStopwordsCasing()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testElision()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testExclusionTableReuse()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testExclusionTableViaCtor()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testStopwordsCasing()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter.testExamples()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter.testExamples()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.ga.IrishAnalyzer.IrishAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.ga.IrishAnalyzer.IrishAnalyzer(Version,CharArraySet)",1,1,1
"org.apache.lucene.analysis.ga.IrishAnalyzer.IrishAnalyzer(Version,CharArraySet,CharArraySet)",1,1,1
"org.apache.lucene.analysis.ga.IrishAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.ga.IrishAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.ga.IrishLowerCaseFilter.IrishLowerCaseFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ga.IrishLowerCaseFilter.incrementToken()",2,6,8
"org.apache.lucene.analysis.ga.IrishLowerCaseFilter.isUpperVowel(int)",3,2,3
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testContractions()",1,1,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testHyphens()",1,1,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.ga.TestIrishLowerCaseFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ga.TestIrishLowerCaseFilter.testIrishLowerCaseFilter()",1,1,1
"org.apache.lucene.analysis.gl.GalicianAnalyzer.GalicianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.gl.GalicianAnalyzer.GalicianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.gl.GalicianAnalyzer.GalicianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.gl.GalicianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.gl.GalicianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.gl.GalicianMinimalStemFilter.GalicianMinimalStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.gl.GalicianMinimalStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.gl.GalicianMinimalStemmer.stem(char[],int)",1,1,1
"org.apache.lucene.analysis.gl.GalicianStemFilter.GalicianStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.gl.GalicianStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.gl.GalicianStemmer.stem(char[],int)",2,4,9
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter.testExceptions()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter.testPlural()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.gl.TestGalicianStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.hi.HindiAnalyzer.HindiAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.hi.HindiAnalyzer.HindiAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.hi.HindiAnalyzer.HindiAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.hi.HindiAnalyzer.createComponents(String,Reader)",1,1,3
"org.apache.lucene.analysis.hi.HindiAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.hi.HindiNormalizationFilter.HindiNormalizationFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.hi.HindiNormalizationFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.hi.HindiNormalizer.normalize(char[],int)",2,4,39
"org.apache.lucene.analysis.hi.HindiStemFilter.HindiStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.hi.HindiStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.hi.HindiStemmer.stem(char[],int)",6,68,73
"org.apache.lucene.analysis.hi.TestHindiAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiAnalyzer.testExclusionSet()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiNormalizer.check(String,String)",1,1,1
"org.apache.lucene.analysis.hi.TestHindiNormalizer.testBasics()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiNormalizer.testDecompositions()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiNormalizer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.check(String,String)",1,1,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testExceptions()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testFeminineNouns()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testMasculineNouns()",1,1,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testVerbs()",1,1,1
"org.apache.lucene.analysis.hu.HungarianAnalyzer.HungarianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.hu.HungarianAnalyzer.HungarianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.hu.HungarianAnalyzer.HungarianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.hu.HungarianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.hu.HungarianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.hu.HungarianLightStemFilter.HungarianLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.hu.HungarianLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.hu.HungarianLightStemmer.isVowel(char)",3,2,3
"org.apache.lucene.analysis.hu.HungarianLightStemmer.normalize(char[],int)",3,2,3
"org.apache.lucene.analysis.hu.HungarianLightStemmer.removeCase(char[],int)",12,34,41
"org.apache.lucene.analysis.hu.HungarianLightStemmer.removePlural(char[],int)",5,2,6
"org.apache.lucene.analysis.hu.HungarianLightStemmer.removePossessive(char[],int)",16,26,38
"org.apache.lucene.analysis.hu.HungarianLightStemmer.stem(char[],int)",2,2,7
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.hu.TestHungarianLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.hu.TestHungarianLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.checkCondition(CharSequence)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getAppend()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getAppendFlags()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getCondition()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getFlag()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getStrip()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.isCrossProduct()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setAppend(String)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setAppendFlags(char[])",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setCondition(String,String)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setCrossProduct(boolean)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setFlag(char)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setStrip(String)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.DoubleASCIIFlagParsingStrategy.parseFlags(String)",2,2,3
"org.apache.lucene.analysis.hunspell.HunspellDictionary.FlagParsingStrategy.parseFlag(String)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.HunspellDictionary(InputStream,InputStream,Version)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.HunspellDictionary(InputStream,InputStream,Version,boolean)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.HunspellDictionary(InputStream,List<InputStream>,Version,boolean)",1,2,2
"org.apache.lucene.analysis.hunspell.HunspellDictionary.NumFlagParsingStrategy.parseFlags(String)",1,2,2
"org.apache.lucene.analysis.hunspell.HunspellDictionary.SimpleFlagParsingStrategy.parseFlags(String)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.getDictionaryEncoding(InputStream)",7,7,10
"org.apache.lucene.analysis.hunspell.HunspellDictionary.getFlagParsingStrategy(String)",4,3,4
"org.apache.lucene.analysis.hunspell.HunspellDictionary.getJavaEncoding(String)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.getVersion()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.isIgnoreCase()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.lookupPrefix(char[],int,int)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.lookupSuffix(char[],int,int)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.lookupWord(char[],int,int)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.parseAffix(CharArrayMap<List<HunspellAffix>>,String,BufferedReader,String)",1,4,5
"org.apache.lucene.analysis.hunspell.HunspellDictionary.readAffixFile(InputStream,CharsetDecoder)",1,5,5
"org.apache.lucene.analysis.hunspell.HunspellDictionary.readDictionaryFile(InputStream,CharsetDecoder)",1,6,6
"org.apache.lucene.analysis.hunspell.HunspellDictionaryTest.testHunspellDictionary_loadDicAff()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilter.HunspellStemFilter(TokenStream,HunspellDictionary)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilter.HunspellStemFilter(TokenStream,HunspellDictionary,boolean)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilter.incrementToken()",5,5,8
"org.apache.lucene.analysis.hunspell.HunspellStemFilter.reset()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.beforeClass()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.createDict(boolean)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.testKeywordAttribute()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.HunspellStemmer(HunspellDictionary)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.Stem(char[],int)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.addPrefix(HunspellAffix)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.addSuffix(HunspellAffix)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getPrefixes()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getStem()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getStemLength()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getStemString()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getSuffixes()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.applyAffix(char[],int,HunspellAffix,int)",2,8,9
"org.apache.lucene.analysis.hunspell.HunspellStemmer.hasCrossCheckedFlag(char,char[])",1,2,2
"org.apache.lucene.analysis.hunspell.HunspellStemmer.hasText(String)",1,2,2
"org.apache.lucene.analysis.hunspell.HunspellStemmer.main(String[])",3,4,5
"org.apache.lucene.analysis.hunspell.HunspellStemmer.printStemResults(String,List<Stem>)",1,6,6
"org.apache.lucene.analysis.hunspell.HunspellStemmer.stem(String)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.stem(char[],int)",1,2,2
"org.apache.lucene.analysis.hunspell.HunspellStemmer.stem(char[],int,char[],int)",5,9,11
"org.apache.lucene.analysis.hunspell.HunspellStemmer.uniqueStems(char[],int)",1,4,4
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.beforeClass()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.createStemmer(boolean)",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_caseSensitive()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_ignoreCase()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_recursiveSuffix()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_simplePrefix()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_simpleSuffix()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellWord.HunspellWord()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellWord.HunspellWord(char[])",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellWord.getFlags()",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellWord.hasFlag(char)",1,2,2
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.ArmenianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.ArmenianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.ArmenianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.icu.GenerateHTMLStripCharFilterSupplementaryMacros.main(String[])",1,1,1
"org.apache.lucene.analysis.icu.GenerateHTMLStripCharFilterSupplementaryMacros.outputHeader()",1,1,1
"org.apache.lucene.analysis.icu.GenerateHTMLStripCharFilterSupplementaryMacros.outputMacro(String,String)",1,7,8
"org.apache.lucene.analysis.icu.GenerateJFlexSupplementaryMacros.main(String[])",1,1,1
"org.apache.lucene.analysis.icu.GenerateJFlexSupplementaryMacros.outputHeader()",1,1,1
"org.apache.lucene.analysis.icu.GenerateJFlexSupplementaryMacros.outputMacro(String,String)",1,5,6
"org.apache.lucene.analysis.icu.ICUFoldingFilter.ICUFoldingFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.icu.ICUNormalizer2Filter.ICUNormalizer2Filter(TokenStream)",1,1,1
"org.apache.lucene.analysis.icu.ICUNormalizer2Filter.ICUNormalizer2Filter(TokenStream,Normalizer2)",1,1,1
"org.apache.lucene.analysis.icu.ICUNormalizer2Filter.incrementToken()",2,3,3
"org.apache.lucene.analysis.icu.ICUTransformFilter.ICUTransformFilter(TokenStream,Transliterator)",1,5,5
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.char32At(int)",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.charAt(int)",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.copy(int,int,int)",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.getChars(int,int,char[],int)",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.hasMetaData()",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.length()",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.replace(int,int,String)",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.replace(int,int,char[],int,int)",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.setText(CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.shiftForReplace(int,int,int)",1,3,4
"org.apache.lucene.analysis.icu.ICUTransformFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.icu.RBBIRuleCompiler.compile(File,File)",2,3,4
"org.apache.lucene.analysis.icu.RBBIRuleCompiler.getRules(File)",1,3,3
"org.apache.lucene.analysis.icu.RBBIRuleCompiler.main(String[])",1,2,2
"org.apache.lucene.analysis.icu.TestICUFoldingFilter.testDefaults()",1,1,1
"org.apache.lucene.analysis.icu.TestICUFoldingFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.icu.TestICUFoldingFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter.testAlternate()",1,1,1
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter.testDefaults()",1,1,1
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.checkToken(Transliterator,String,String)",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testBasicFunctionality()",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testCustomFunctionality()",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testCustomFunctionality2()",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testOptimizer()",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testOptimizer2()",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testOptimizerSurrogate()",1,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.BIWrapper(BreakIterator)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.calcStatus(int,int)",5,3,6
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.current()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.getRuleStatus()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.next()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.setText(CharacterIterator)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.RBBIWrapper(RuleBasedBreakIterator)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.current()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.getRuleStatus()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.next()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.setText(CharacterIterator)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.setText(char[],int,int)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.wrap(BreakIterator)",2,1,3
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.clone()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.current()",1,1,2
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.first()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getBeginIndex()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getEndIndex()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getIndex()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getLength()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getStart()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getText()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.last()",1,1,2
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.next()",2,2,2
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.previous()",2,2,2
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.setIndex(int)",2,2,3
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.setText(char[],int,int)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.CompositeBreakIterator(ICUTokenizerConfig)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.current()",1,2,2
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.getBreakIterator(int)",1,2,2
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.getRuleStatus()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.getScriptCode()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.next()",1,4,4
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.setText(char[],int,int)",1,2,2
"org.apache.lucene.analysis.icu.segmentation.DefaultICUTokenizerConfig.getBreakIterator(int)",7,7,7
"org.apache.lucene.analysis.icu.segmentation.DefaultICUTokenizerConfig.getType(int,int)",6,2,8
"org.apache.lucene.analysis.icu.segmentation.DefaultICUTokenizerConfig.readBreakIterator(String)",1,1,2
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.ICUTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.ICUTokenizer(Reader,ICUTokenizerConfig)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.end()",1,1,2
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.findSafeEnd()",3,2,3
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.incrementToken()",3,3,4
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.incrementTokenBuffer()",3,3,5
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.read(Reader,char[],int,int)",3,2,3
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.refill()",1,2,3
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.LaoBreakIterator(RuleBasedBreakIterator)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.ccReorder(char[],int,int)",1,3,5
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.clone()",1,4,4
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.current()",1,1,2
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.first()",1,1,2
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.following(int)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.getText()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.last()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.next()",4,5,6
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.next(int)",2,2,3
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.previous()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.setText(CharacterIterator)",2,1,2
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.setText(String)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.verifyPushBack(int,int)",2,3,4
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.getScript(int)",2,2,3
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.getScriptCode()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.getScriptLimit()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.getScriptStart()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.isSameScript(int,int)",1,1,3
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.next()",4,4,7
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.setText(char[],int,int)",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testBasicUsage()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testClone()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testCurrent()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testFirst()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testLast()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testNext()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testSetIndex()",1,2,2
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testAlphanumericSA()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testAmharic()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testApostrophesSA()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testArabic()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testAramaic()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testArmenian()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testBengali()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testChinese()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testDelimitersSA()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testEmpty()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testFarsi()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testGreek()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testHugeDoc()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testHugeTerm2()",1,2,2
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testJapanese()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testKorean()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testKoreanSA()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testLUCENE1545()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testLao()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testNumericSA()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testOffsets()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testTextWithNumbersSA()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testThai()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testTibetan()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testTypes()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testVariousTextSA()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.assertBreaksTo(BreakIterator,String,String[])",1,4,4
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.isWord(char[],int,int)",3,2,3
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.setUp()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.testBasicUsage()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.testNumerics()",1,1,1
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.testTextAndNumerics()",1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.equals(Object)",3,1,3
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.getCode()",1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.getName()",1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.getShortName()",1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.reflectWith(AttributeReflector)",1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.setCode(int)",1,1,1
"org.apache.lucene.analysis.id.IndonesianAnalyzer.IndonesianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.id.IndonesianAnalyzer.IndonesianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.id.IndonesianAnalyzer.IndonesianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.id.IndonesianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.id.IndonesianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.id.IndonesianStemFilter.IndonesianStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.id.IndonesianStemFilter.IndonesianStemFilter(TokenStream,boolean)",1,1,1
"org.apache.lucene.analysis.id.IndonesianStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.id.IndonesianStemmer.isVowel(char)",3,2,3
"org.apache.lucene.analysis.id.IndonesianStemmer.removeFirstOrderPrefix(char[],int)",15,21,21
"org.apache.lucene.analysis.id.IndonesianStemmer.removeParticle(char[],int)",2,3,4
"org.apache.lucene.analysis.id.IndonesianStemmer.removePossessivePronoun(char[],int)",3,2,4
"org.apache.lucene.analysis.id.IndonesianStemmer.removeSecondOrderPrefix(char[],int)",7,13,13
"org.apache.lucene.analysis.id.IndonesianStemmer.removeSuffix(char[],int)",4,11,14
"org.apache.lucene.analysis.id.IndonesianStemmer.stem(char[],int,boolean)",1,5,6
"org.apache.lucene.analysis.id.IndonesianStemmer.stemDerivational(char[],int)",1,8,8
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testExamples()",1,1,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testIRExamples()",1,1,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testInflectionalOnly()",1,1,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testShouldntStem()",1,1,1
"org.apache.lucene.analysis.in.IndicNormalizationFilter.IndicNormalizationFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.in.IndicNormalizationFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.in.IndicNormalizer.ScriptData.ScriptData(int,int)",1,1,1
"org.apache.lucene.analysis.in.IndicNormalizer.compose(int,UnicodeBlock,ScriptData,char[],int,int)",6,6,13
"org.apache.lucene.analysis.in.IndicNormalizer.flag(UnicodeBlock)",1,1,1
"org.apache.lucene.analysis.in.IndicNormalizer.normalize(char[],int)",1,4,4
"org.apache.lucene.analysis.in.IndicTokenizer.IndicTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.in.IndicTokenizer.IndicTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.in.IndicTokenizer.IndicTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.in.IndicTokenizer.isTokenChar(int)",1,4,4
"org.apache.lucene.analysis.in.TestIndicNormalizer.check(String,String)",1,1,1
"org.apache.lucene.analysis.in.TestIndicNormalizer.testBasics()",1,1,1
"org.apache.lucene.analysis.in.TestIndicNormalizer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.it.ItalianAnalyzer.ItalianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.it.ItalianAnalyzer.ItalianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.it.ItalianAnalyzer.ItalianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.it.ItalianAnalyzer.createComponents(String,Reader)",1,1,4
"org.apache.lucene.analysis.it.ItalianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.it.ItalianLightStemFilter.ItalianLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.it.ItalianLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.it.ItalianLightStemmer.stem(char[],int)",11,3,18
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testContractions()",1,1,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testContractionsBackwards()",1,1,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.it.TestItalianLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.it.TestItalianLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.it.TestItalianLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.GraphvizFormatter(ConnectionCosts)",1,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.finish()",1,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.formatHeader()",1,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.formatNodes(JapaneseTokenizer,WrappedPositionArray,int,Position,char[])",1,6,7
"org.apache.lucene.analysis.ja.GraphvizFormatter.formatTrailer()",1,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.getNodeID(int,int)",1,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.onBacktrace(JapaneseTokenizer,WrappedPositionArray,int,Position,int,char[],boolean)",1,2,2
"org.apache.lucene.analysis.ja.GraphvizFormatter.setBestPathMap(WrappedPositionArray,int,Position,int)",1,2,2
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.JapaneseAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.JapaneseAnalyzer(Version,UserDictionary,Mode,CharArraySet,Set<String>)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.getDefaultStopTags()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseBaseFormFilter.JapaneseBaseFormFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseBaseFormFilter.incrementToken()",2,4,4
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.JapaneseKatakanaStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.JapaneseKatakanaStemFilter(TokenStream,int)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.isKatakana(char[],int)",3,2,3
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.stem(char[],int)",4,1,4
"org.apache.lucene.analysis.ja.JapanesePartOfSpeechStopFilter.JapanesePartOfSpeechStopFilter(boolean,TokenStream,Set<String>)",1,1,1
"org.apache.lucene.analysis.ja.JapanesePartOfSpeechStopFilter.accept()",1,2,2
"org.apache.lucene.analysis.ja.JapaneseReadingFormFilter.JapaneseReadingFormFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseReadingFormFilter.JapaneseReadingFormFilter(TokenStream,boolean)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseReadingFormFilter.incrementToken()",2,4,4
"org.apache.lucene.analysis.ja.JapaneseTokenizer.JapaneseTokenizer(Reader,UserDictionary,boolean,Mode)",2,3,5
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.add(int,int,int,int,int,Type)",1,2,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.addForward(int,int,int,Type)",1,2,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.grow()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.growForward()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.reset()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.WrappedPositionArray()",1,1,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.freeBefore(int)",1,2,4
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.get(int)",1,3,5
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.getIndex(int)",1,1,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.getNextPos()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.inBounds(int)",1,1,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.reset()",1,2,3
"org.apache.lucene.analysis.ja.JapaneseTokenizer.add(Dictionary,Position,int,int,Type,boolean)",1,9,12
"org.apache.lucene.analysis.ja.JapaneseTokenizer.backtrace(Position,int)",1,30,38
"org.apache.lucene.analysis.ja.JapaneseTokenizer.computePenalty(int,int)",6,3,6
"org.apache.lucene.analysis.ja.JapaneseTokenizer.computeSecondBestThreshold(int,int)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.end()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.getDict(Type)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.incrementToken()",3,4,5
"org.apache.lucene.analysis.ja.JapaneseTokenizer.isPunctuation(char)",3,2,3
"org.apache.lucene.analysis.ja.JapaneseTokenizer.parse()",22,30,48
"org.apache.lucene.analysis.ja.JapaneseTokenizer.pruneAndRescore(int,int,int)",3,17,18
"org.apache.lucene.analysis.ja.JapaneseTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.resetState()",1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.setGraphvizFormatter(GraphvizFormatter)",1,1,1
"org.apache.lucene.analysis.ja.TestExtendedMode.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.ja.TestExtendedMode.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ja.TestExtendedMode.testSurrogates()",1,1,1
"org.apache.lucene.analysis.ja.TestExtendedMode.testSurrogates2()",1,3,3
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testAnotherCuriousString()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testCuriousString()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testDecomposition()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testRandom()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testUserDict3()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testYetAnotherCuriousString()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter.testBasics()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter.testEnglish()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter.testRandomData()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter.testStemVariants()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter.testUnsupportedHalfWidthVariants()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter.testKatakanaReadings()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter.testRandomData()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter.testRomajiReadings()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertBaseForms(String,String...)",1,2,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertInflectionForms(String,String...)",1,2,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertInflectionTypes(String,String...)",1,2,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertPartsOfSpeech(String,String...)",1,2,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertPronunciations(String,String...)",1,2,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertReadings(String,String...)",1,2,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.doTestBocchan(int)",1,7,9
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.readDict()",2,1,3
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testBasicForms()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testBocchan()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testBocchanBig()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition1()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition2()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition3()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition4()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition5()",1,1,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testEnd()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testInflectionForms()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testInflectionTypes()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testLargeDocReliability()",1,2,3
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testLatticeToDot()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testNormalMode()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testOnlyPunctuation()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testOnlyPunctuationExtended()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testPartOfSpeech()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testPronunciations()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testPronunciations2()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testReadings()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testReadings2()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testSegmentation()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testSurrogates()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testSurrogates2()",1,4,4
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testTsukitosha()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testTwoSentences()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testUserDict()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testUserDict2()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testUserDict3()",1,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testYabottai()",1,1,1
"org.apache.lucene.analysis.ja.TestSearchMode.testSearchSegmentation()",4,5,7
"org.apache.lucene.analysis.ja.Token.Token(int,char[],int,int,Type,int,Dictionary)",1,1,1
"org.apache.lucene.analysis.ja.Token.getBaseForm()",1,1,1
"org.apache.lucene.analysis.ja.Token.getInflectionForm()",1,1,1
"org.apache.lucene.analysis.ja.Token.getInflectionType()",1,1,1
"org.apache.lucene.analysis.ja.Token.getLength()",1,1,1
"org.apache.lucene.analysis.ja.Token.getOffset()",1,1,1
"org.apache.lucene.analysis.ja.Token.getPartOfSpeech()",1,1,1
"org.apache.lucene.analysis.ja.Token.getPosition()",1,1,1
"org.apache.lucene.analysis.ja.Token.getPositionLength()",1,1,1
"org.apache.lucene.analysis.ja.Token.getPronunciation()",1,1,1
"org.apache.lucene.analysis.ja.Token.getReading()",1,1,1
"org.apache.lucene.analysis.ja.Token.getSurfaceForm()",1,1,1
"org.apache.lucene.analysis.ja.Token.getSurfaceFormString()",1,1,1
"org.apache.lucene.analysis.ja.Token.isKnown()",1,1,1
"org.apache.lucene.analysis.ja.Token.isUnknown()",1,1,1
"org.apache.lucene.analysis.ja.Token.isUser()",1,1,1
"org.apache.lucene.analysis.ja.Token.setPositionLength(int)",1,1,1
"org.apache.lucene.analysis.ja.Token.toString()",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.BinaryDictionary()",3,3,9
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.baseFormOffset(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getBaseForm(int,char[],int,int)",2,3,3
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getClassResource(Class<?>,String)",2,2,2
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getInflectionForm(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getInflectionType(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getLeftId(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getPartOfSpeech(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getPronunciation(int,char[],int,int)",2,2,2
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getReading(int,char[],int,int)",2,2,5
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getResource(String)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getRightId(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getWordCost(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.hasBaseFormData(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.hasPronunciationData(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.hasReadingData(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.lookupWordIds(int,IntsRef)",1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.pronunciationOffset(int)",2,2,3
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.readString(int,int,boolean)",1,4,4
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.readingOffset(int)",2,2,2
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.CharacterDefinition()",1,2,3
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.getCharacterClass(char)",1,1,1
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.getInstance()",1,1,1
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.isGroup(char)",1,1,1
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.isInvoke(char)",1,1,1
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.isKanji(char)",1,1,2
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.lookupCharacterClass(String)",1,1,1
"org.apache.lucene.analysis.ja.dict.ConnectionCosts.ConnectionCosts()",1,3,4
"org.apache.lucene.analysis.ja.dict.ConnectionCosts.get(int,int)",1,1,1
"org.apache.lucene.analysis.ja.dict.ConnectionCosts.getInstance()",1,1,1
"org.apache.lucene.analysis.ja.dict.TestTokenInfoDictionary.testEnumerateAll()",1,9,10
"org.apache.lucene.analysis.ja.dict.TokenInfoDictionary.TokenInfoDictionary()",1,1,2
"org.apache.lucene.analysis.ja.dict.TokenInfoDictionary.getFST()",1,1,1
"org.apache.lucene.analysis.ja.dict.TokenInfoDictionary.getInstance()",1,1,1
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.TokenInfoFST(FST<Long>,boolean)",1,1,2
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.cacheRootArcs()",1,3,3
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,Arc<Long>,Arc<Long>,boolean,BytesReader)",3,3,5
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.getBytesReader(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.getFirstArc(Arc<Long>)",1,1,1
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.getInternalFST()",1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.UnknownDictionary()",1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getCharacterDefinition()",1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getInflectionForm(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getInflectionType(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getInstance()",1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getReading(int,char[],int,int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.lookup(char[],int,int)",4,2,4
"org.apache.lucene.analysis.ja.dict.UnknownDictionaryTest.testPut()",1,1,2
"org.apache.lucene.analysis.ja.dict.UnknownDictionaryTest.testPutCharacterCategory()",1,1,3
"org.apache.lucene.analysis.ja.dict.UserDictionary.UserDictionary(Reader)",5,5,7
"org.apache.lucene.analysis.ja.dict.UserDictionary.getAllFeaturesArray(int)",2,1,2
"org.apache.lucene.analysis.ja.dict.UserDictionary.getBaseForm(int,char[],int,int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getFST()",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getFeature(int,int...)",2,5,6
"org.apache.lucene.analysis.ja.dict.UserDictionary.getInflectionForm(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getInflectionType(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getLeftId(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getPartOfSpeech(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getPronunciation(int,char[],int,int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getReading(int,char[],int,int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getRightId(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getWordCost(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.lookup(char[],int,int)",4,5,6
"org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int)",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.toIndexArray(Map<Integer, int[]>)",1,3,3
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest.testLookup()",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest.testPartOfSpeech()",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest.testRead()",1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest.testReadings()",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.getBaseForm()",1,2,2
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.reflectWith(AttributeReflector)",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.setToken(Token)",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.getInflectionForm()",1,2,2
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.getInflectionType()",1,2,2
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.reflectWith(AttributeReflector)",1,3,3
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.setToken(Token)",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.getPartOfSpeech()",1,2,2
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.reflectWith(AttributeReflector)",1,2,2
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.setToken(Token)",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.getPronunciation()",1,2,2
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.getReading()",1,2,2
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.reflectWith(AttributeReflector)",1,3,3
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.setToken(Token)",1,1,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.BinaryDictionaryWriter(Class<? extends BinaryDictionary>,int)",1,1,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.addMapping(int,int)",1,2,3
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.getBaseFileName(String)",1,1,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.isKatakana(String)",3,2,4
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.put(String[])",1,18,21
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.sharedPrefix(String,String)",3,3,4
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.toKatakana(String)",1,2,4
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.write(String)",1,1,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.writeDictionary(String)",1,1,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.writeKatakana(String)",1,2,2
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.writePosDict(String)",1,3,3
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.writeTargetMap(String)",1,3,3
"org.apache.lucene.analysis.ja.util.CSVUtil.CSVUtil()",1,1,1
"org.apache.lucene.analysis.ja.util.CSVUtil.parse(String)",4,3,6
"org.apache.lucene.analysis.ja.util.CSVUtil.quoteEscape(String)",1,2,3
"org.apache.lucene.analysis.ja.util.CSVUtil.unQuoteUnEscape(String)",1,4,4
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter.CharacterDefinitionWriter()",1,1,1
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter.putCharacterCategory(int,String)",1,1,2
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter.putInvokeDefinition(String,int,int,int)",1,1,1
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter.write(String)",1,2,4
"org.apache.lucene.analysis.ja.util.ConnectionCostsBuilder.ConnectionCostsBuilder()",1,1,1
"org.apache.lucene.analysis.ja.util.ConnectionCostsBuilder.build(String)",1,2,3
"org.apache.lucene.analysis.ja.util.ConnectionCostsWriter.ConnectionCostsWriter(int,int)",1,1,1
"org.apache.lucene.analysis.ja.util.ConnectionCostsWriter.add(int,int,int)",1,1,1
"org.apache.lucene.analysis.ja.util.ConnectionCostsWriter.write(String)",1,3,3
"org.apache.lucene.analysis.ja.util.DictionaryBuilder.DictionaryBuilder()",1,1,1
"org.apache.lucene.analysis.ja.util.DictionaryBuilder.build(DictionaryFormat,String,String,String,boolean)",1,1,1
"org.apache.lucene.analysis.ja.util.DictionaryBuilder.main(String[])",1,3,3
"org.apache.lucene.analysis.ja.util.TestToStringUtil.testHepburn()",1,1,1
"org.apache.lucene.analysis.ja.util.TestToStringUtil.testPOS()",1,1,1
"org.apache.lucene.analysis.ja.util.ToStringUtil.getInflectedFormTranslation(String)",1,1,1
"org.apache.lucene.analysis.ja.util.ToStringUtil.getInflectionTypeTranslation(String)",1,1,1
"org.apache.lucene.analysis.ja.util.ToStringUtil.getPOSTranslation(String)",1,1,1
"org.apache.lucene.analysis.ja.util.ToStringUtil.getRomanization(Appendable,CharSequence)",8,116,245
"org.apache.lucene.analysis.ja.util.ToStringUtil.getRomanization(String)",1,1,2
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder.TokenInfoDictionaryBuilder(DictionaryFormat,String,boolean)",1,2,2
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder.build(String)",1,2,2
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder.buildDictionary(List<File>)",8,10,11
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder.formatEntry(String[])",2,2,3
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.TokenInfoDictionaryWriter(int)",1,1,1
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.setFST(FST<Long>)",1,1,1
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.write(String)",1,1,1
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.writeFST(String)",1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.UnknownDictionaryBuilder(String)",1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.build(String)",1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.readCharacterDefinition(String,UnknownDictionaryWriter)",3,5,6
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.readDictionaryFile(String)",1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.readDictionaryFile(String,String)",1,3,3
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.UnknownDictionaryWriter(int)",1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.put(String[])",1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.putCharacterCategory(int,String)",1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.putInvokeDefinition(String,int,int,int)",1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.write(String)",1,1,1
"org.apache.lucene.analysis.lv.LatvianAnalyzer.LatvianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.lv.LatvianAnalyzer.LatvianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.lv.LatvianAnalyzer.LatvianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.lv.LatvianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.lv.LatvianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.lv.LatvianStemFilter.LatvianStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.lv.LatvianStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.lv.LatvianStemmer.Affix.Affix(String,int,boolean)",1,1,1
"org.apache.lucene.analysis.lv.LatvianStemmer.numVowels(char[],int)",2,2,3
"org.apache.lucene.analysis.lv.LatvianStemmer.stem(char[],int)",3,6,6
"org.apache.lucene.analysis.lv.LatvianStemmer.unpalatalize(char[],int)",14,11,17
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testAdjectives()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testLength()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns1()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns2()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns3()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns4()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns5()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns6()",1,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testPalatalization()",1,1,1
"org.apache.lucene.analysis.miscellaneous.EmptyTokenStream.incrementToken()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringReader.FastStringReader(String)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringReader.getString()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.FastStringTokenizer(Reader,String,boolean,boolean,Set<?>)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.end()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.incrementToken()",2,7,10
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.isStopWord(String)",1,2,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.isTokenChar(char,boolean)",1,2,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternAnalyzer(Version,Pattern,boolean,Set<?>)",2,3,6
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.PatternTokenizer(Reader,String,Pattern,boolean)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.end()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.incrementToken()",5,5,7
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.createComponents(String,Reader,String)",4,1,5
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.eq(Object,Object)",1,3,3
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.eqPattern(Pattern,Pattern)",1,3,3
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.equals(Object)",5,4,9
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.hashCode()",3,2,5
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.toString(Reader)",2,4,4
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.check(PatternAnalyzer,String,String[])",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.isJREBug7104012(Throwable)",5,4,6
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testCustomPattern()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testHugeDocument()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testNonWordPattern()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testRandomStrings()",1,2,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testWhitespacePattern()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.PrefixAndSuffixAwareTokenFilter(TokenStream,TokenStream,TokenStream)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.close()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.end()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.incrementToken()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.reset()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.updateInputToken(Token,Token)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.updateSuffixToken(Token,Token)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.PrefixAwareTokenFilter(TokenStream,TokenStream)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.close()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.end()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.getNextPrefixInputToken(Token)",2,1,2
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.getNextSuffixInputToken(Token)",2,1,2
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.getPrefix()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.getSuffix()",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.incrementToken()",4,4,5
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.reset()",1,3,3
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.setCurrentToken(Token)",2,1,2
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.setPrefix(TokenStream)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.setSuffix(TokenStream)",1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.updateSuffixToken(Token,Token)",1,1,1
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.SingleTokenTokenStream(Token)",1,1,1
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.getToken()",1,1,1
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.incrementToken()",2,2,2
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.reset()",1,1,1
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.setToken(Token)",1,1,1
"org.apache.lucene.analysis.miscellaneous.StemmerOverrideFilter.StemmerOverrideFilter(Version,TokenStream,Map<?, String>)",1,2,2
"org.apache.lucene.analysis.miscellaneous.StemmerOverrideFilter.incrementToken()",2,4,4
"org.apache.lucene.analysis.miscellaneous.TestEmptyTokenStream.test()",1,1,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAndSuffixAwareTokenFilter.createToken(String,int,int)",1,1,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAndSuffixAwareTokenFilter.test()",1,1,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAwareTokenFilter.createToken(String,int,int)",1,1,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAwareTokenFilter.test()",1,1,1
"org.apache.lucene.analysis.miscellaneous.TestSingleTokenTokenFilter.test()",1,1,1
"org.apache.lucene.analysis.miscellaneous.TestStemmerOverrideFilter.testOverride()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.EdgeNGramTokenFilter(TokenStream,Side,int,int)",4,1,4
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.EdgeNGramTokenFilter(TokenStream,String,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.Side.getSide(String)",3,1,3
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.incrementToken()",6,7,9
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.reset()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.setUp()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testBackRangeOfNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testBackUnigram()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testFrontRangeOfNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testFrontUnigram()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testInvalidInput()",1,1,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testInvalidInput2()",1,1,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testInvalidInput3()",1,1,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testInvalidOffsets()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testOversizedNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testReset()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testSmallTokenInStream()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(AttributeFactory,Reader,Side,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(AttributeFactory,Reader,String,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(AttributeSource,Reader,Side,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(AttributeSource,Reader,String,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(Reader,Side,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(Reader,String,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.Side.getSide(String)",3,1,3
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.end()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.incrementToken()",10,5,11
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.init(Side,int,int)",4,1,4
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.setUp()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testBackRangeOfNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testBackUnigram()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testFrontRangeOfNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testFrontUnigram()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testInvalidInput()",1,1,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testInvalidInput2()",1,1,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testInvalidInput3()",1,1,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testOversizedNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testReset()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilter.NGramTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilter.NGramTokenFilter(TokenStream,int,int)",3,1,3
"org.apache.lucene.analysis.ngram.NGramTokenFilter.incrementToken()",6,7,7
"org.apache.lucene.analysis.ngram.NGramTokenFilter.reset()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.setUp()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testBigrams()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testInvalidInput()",1,1,2
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testInvalidInput2()",1,1,2
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testInvalidOffsets()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testOversizedNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testReset()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testSmallTokenInStream()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testUnigrams()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.NGramTokenizer(AttributeFactory,Reader,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.NGramTokenizer(AttributeSource,Reader,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.NGramTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.NGramTokenizer(Reader,int,int)",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.end()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.incrementToken()",11,5,11
"org.apache.lucene.analysis.ngram.NGramTokenizer.init(int,int)",3,1,3
"org.apache.lucene.analysis.ngram.NGramTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.setUp()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testBigrams()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testInvalidInput()",1,1,2
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testInvalidInput2()",1,1,2
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testOversizedNgrams()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testReset()",1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testUnigrams()",1,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,File)",1,1,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,HashSet<?>)",1,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,Set<?>)",1,2,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,Set<?>,Set<?>)",1,2,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,Set<?>,Set<?>,CharArrayMap<String>)",1,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.createComponents(String,Reader)",2,2,5
"org.apache.lucene.analysis.nl.DutchAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.setStemDictionary(File)",1,1,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.setStemExclusionTable(File)",1,1,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.setStemExclusionTable(HashSet<?>)",1,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.setStemExclusionTable(String...)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemFilter.DutchStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemFilter.DutchStemFilter(TokenStream,Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemFilter.DutchStemFilter(TokenStream,Set<?>)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemFilter.DutchStemFilter(TokenStream,Set<?>,Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemFilter.incrementToken()",2,7,7
"org.apache.lucene.analysis.nl.DutchStemFilter.setExclusionTable(HashSet<?>)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemFilter.setStemDictionary(HashMap<?, ?>)",1,2,2
"org.apache.lucene.analysis.nl.DutchStemFilter.setStemmer(DutchStemmer)",1,1,2
"org.apache.lucene.analysis.nl.DutchStemmer.enEnding(StringBuilder)",3,5,5
"org.apache.lucene.analysis.nl.DutchStemmer.getRIndex(StringBuilder,int)",3,3,5
"org.apache.lucene.analysis.nl.DutchStemmer.isStemmable(String)",3,2,3
"org.apache.lucene.analysis.nl.DutchStemmer.isValidEnEnding(StringBuilder,int)",4,3,6
"org.apache.lucene.analysis.nl.DutchStemmer.isValidSEnding(StringBuilder,int)",2,2,3
"org.apache.lucene.analysis.nl.DutchStemmer.isVowel(char)",2,2,2
"org.apache.lucene.analysis.nl.DutchStemmer.reStoreYandI(StringBuilder)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemmer.setStemDictionary(Map)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemmer.stem(String)",4,4,5
"org.apache.lucene.analysis.nl.DutchStemmer.step1(StringBuilder)",5,8,10
"org.apache.lucene.analysis.nl.DutchStemmer.step2(StringBuilder)",2,4,5
"org.apache.lucene.analysis.nl.DutchStemmer.step3a(StringBuilder)",2,4,5
"org.apache.lucene.analysis.nl.DutchStemmer.step3b(StringBuilder)",7,17,18
"org.apache.lucene.analysis.nl.DutchStemmer.step4(StringBuilder)",2,7,8
"org.apache.lucene.analysis.nl.DutchStemmer.storeYandI(StringBuilder)",2,11,11
"org.apache.lucene.analysis.nl.DutchStemmer.substitute(StringBuilder)",2,7,7
"org.apache.lucene.analysis.nl.DutchStemmer.unDouble(StringBuilder)",1,1,1
"org.apache.lucene.analysis.nl.DutchStemmer.unDouble(StringBuilder,int)",1,7,7
"org.apache.lucene.analysis.nl.TestDutchStemmer.check(String,String)",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testBuggyStemOverrides()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testBuggyStopwordsCasing()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testExclusionTableReuse()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testExclusionTableViaCtor()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testOldBuggyStemmer()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testSnowballCorrectness()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testStemDictionaryReuse()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testStemOverrides()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testStopwordsCasing()",1,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testWithSnowballExamples()",1,1,1
"org.apache.lucene.analysis.no.NorwegianAnalyzer.NorwegianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.no.NorwegianAnalyzer.NorwegianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.no.NorwegianAnalyzer.NorwegianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.no.NorwegianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.no.NorwegianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.no.NorwegianLightStemFilter.NorwegianLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.no.NorwegianLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.no.NorwegianLightStemmer.stem(char[],int)",9,20,29
"org.apache.lucene.analysis.no.NorwegianMinimalStemFilter.NorwegianMinimalStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.no.NorwegianMinimalStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.no.NorwegianMinimalStemmer.stem(char[],int)",5,6,11
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianMinimalStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianMinimalStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.no.TestNorwegianMinimalStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,char,char)",1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,char,char,int)",1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,int)",1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,int,char)",1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,int,char,char,int)",1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.end()",1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.incrementToken()",7,12,14
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,char,char)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,char,char,int)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,char,int)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,int)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,int,char)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,int,char,char)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,int,char,char,int)",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.end()",1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.incrementToken()",5,7,8
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testBasic()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testBasicSkip()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testEndOfDelimiter()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testEndOfDelimiterSkip()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testNormalizeWinDelimToLinuxDelim()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testOnlyDelimiter()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testOnlyDelimiterSkip()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testOnlyDelimiters()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testOnlyDelimitersSkip()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testReplace()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testStartOfChar()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testStartOfCharEndOfDelimiter()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testStartOfCharEndOfDelimiterSkip()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testStartOfCharSkip()",1,1,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testWindowsPath()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testBasicReverse()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testEndOfDelimiterReverse()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testEndOfDelimiterReverseSkip()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testOnlyDelimiterReverse()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testOnlyDelimiterReverseSkip()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testOnlyDelimitersReverse()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testOnlyDelimitersReverseSkip()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testReverseSkip2()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testStartOfCharEndOfDelimiterReverse()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testStartOfCharEndOfDelimiterReverseSkip()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testStartOfCharReverse()",1,1,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testStartOfCharReverseSkip()",1,1,1
"org.apache.lucene.analysis.payloads.AbstractEncoder.encode(char[])",1,1,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilter.DelimitedPayloadTokenFilter(TokenStream,char,PayloadEncoder)",1,1,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilter.incrementToken()",4,4,4
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.assertTermEquals(String,TokenStream,CharTermAttribute,PayloadAttribute,byte[])",1,3,3
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.assertTermEquals(String,TokenStream,byte[])",1,3,3
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.testFloatEncoding()",1,1,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.testIntEncoding()",1,1,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.testNext()",1,1,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.testPayloads()",1,1,1
"org.apache.lucene.analysis.payloads.FloatEncoder.encode(char[],int,int)",1,1,1
"org.apache.lucene.analysis.payloads.IdentityEncoder.IdentityEncoder()",1,1,1
"org.apache.lucene.analysis.payloads.IdentityEncoder.IdentityEncoder(Charset)",1,1,1
"org.apache.lucene.analysis.payloads.IdentityEncoder.encode(char[],int,int)",2,2,2
"org.apache.lucene.analysis.payloads.IntegerEncoder.encode(char[],int,int)",1,1,1
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilter.NumericPayloadTokenFilter(TokenStream,float,String)",1,1,1
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilterTest.WordTokenFilter.WordTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilterTest.WordTokenFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilterTest.test()",1,3,3
"org.apache.lucene.analysis.payloads.PayloadHelper.decodeFloat(byte[])",1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.decodeFloat(byte[],int)",1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.decodeInt(byte[],int)",1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.encodeFloat(float)",1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.encodeFloat(float,byte[],int)",1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.encodeInt(int)",1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.encodeInt(int,byte[],int)",1,1,1
"org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilter.TokenOffsetPayloadTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilterTest.test()",1,2,2
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter.TypeAsPayloadTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter.incrementToken()",2,4,4
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilterTest.WordTokenFilter.WordTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilterTest.WordTokenFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilterTest.test()",1,2,2
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter.BeiderMorseFilter(TokenStream,PhoneticEngine)",1,1,1
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter.BeiderMorseFilter(TokenStream,PhoneticEngine,LanguageSet)",1,1,1
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter.incrementToken()",3,5,5
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter.reset()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter.DoubleMetaphoneFilter(TokenStream,int,boolean)",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter.incrementToken()",6,14,17
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter.reset()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testAlternateInjectFalse()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testNonConvertableStringsWithInject()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testNonConvertableStringsWithoutInject()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testRandom()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testSize4FalseInject()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testSize4TrueInject()",1,1,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testSize8FalseInject()",1,1,1
"org.apache.lucene.analysis.phonetic.PhoneticFilter.PhoneticFilter(TokenStream,Encoder,boolean)",1,1,1
"org.apache.lucene.analysis.phonetic.PhoneticFilter.incrementToken()",6,4,9
"org.apache.lucene.analysis.phonetic.PhoneticFilter.reset()",1,1,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testBasicUsage()",1,1,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testLanguageSet()",1,1,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testNumbers()",1,1,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testRandom()",1,1,1
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter.assertAlgorithm(Encoder,boolean,String,String[])",1,1,1
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter.testAlgorithms()",1,1,1
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter.testEmptyTerm()",1,2,2
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter.testRandomStrings()",1,2,2
"org.apache.lucene.analysis.pl.PolishAnalyzer.PolishAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.pl.PolishAnalyzer.PolishAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.pl.PolishAnalyzer.PolishAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.pl.PolishAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.pl.PolishAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.pl.TestPolishAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.pl.TestPolishAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.pl.TestPolishAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.pl.TestPolishAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.position.PositionFilter.PositionFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.position.PositionFilter.PositionFilter(TokenStream,int)",1,1,1
"org.apache.lucene.analysis.position.PositionFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.position.PositionFilter.reset()",1,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.TestTokenStream.TestTokenStream(String[])",1,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.TestTokenStream.incrementToken()",2,2,2
"org.apache.lucene.analysis.position.PositionFilterTest.TestTokenStream.reset()",1,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.test6GramFilterNoPositions()",1,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.testFilter()",1,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.testNonZeroPositionIncrement()",1,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.testReset()",1,1,1
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.PortugueseAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.PortugueseAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.PortugueseAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.createComponents(String,Reader)",1,1,3
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.pt.PortugueseLightStemFilter.PortugueseLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.pt.PortugueseLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.pt.PortugueseLightStemmer.normFeminine(char[],int)",8,10,16
"org.apache.lucene.analysis.pt.PortugueseLightStemmer.removeSuffix(char[],int)",11,12,22
"org.apache.lucene.analysis.pt.PortugueseLightStemmer.stem(char[],int)",4,4,13
"org.apache.lucene.analysis.pt.PortugueseMinimalStemFilter.PortugueseMinimalStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.pt.PortugueseMinimalStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.pt.PortugueseMinimalStemmer.stem(char[],int)",1,1,1
"org.apache.lucene.analysis.pt.PortugueseStemFilter.PortugueseStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.pt.PortugueseStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.pt.PortugueseStemmer.stem(char[],int)",2,4,12
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Rule.Rule(String,int,String)",1,1,1
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Rule.matches(char[],int)",1,2,2
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Rule.replace(char[],int)",1,2,2
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSetExceptions.RuleWithSetExceptions(String,int,String,String[])",1,3,3
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSetExceptions.matches(char[],int)",1,2,2
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSuffixExceptions.RuleWithSuffixExceptions(String,int,String,String[])",1,4,4
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSuffixExceptions.matches(char[],int)",4,2,4
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Step.Step(String,Rule[],int,String[])",1,5,6
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Step.apply(char[],int)",8,5,8
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parse(Class<? extends RSLPStemmerBase>,String)",1,2,3
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parseList(String)",2,2,3
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parseRules(LineNumberReader,int)",6,7,7
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parseStep(LineNumberReader,String)",2,2,2
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parseString(String)",1,1,1
"org.apache.lucene.analysis.pt.RSLPStemmerBase.readLine(LineNumberReader)",3,3,4
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testExamples()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testMoreExamples()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter.testExamples()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter.testExamples()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer)",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader)",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,Collection<String>,float)",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,Collection<String>,int)",5,4,6
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,float)",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int)",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader)",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader,String,float)",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader,String,int)",4,4,6
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader,float)",1,2,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader,int)",1,2,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.getStopWords()",1,3,3
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.getStopWords(String)",1,2,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.reusableTokenStream(String,Reader)",1,4,6
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.tokenStream(String,Reader)",1,2,3
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.NonreusableAnalyzer.tokenStream(String,Reader)",2,1,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.search(Analyzer,String)",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.setUp()",1,2,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.tearDown()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testDefaultStopwordsAllFields()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testNoFieldNamePollution()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testNoStopwords()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testStopwordsAllFieldsMaxPercentDocs()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testStopwordsPerFieldMaxDocFreq()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testStopwordsPerFieldMaxPercentDocs()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testTokenStream()",1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testWrappingNonReusableAnalyzer()",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.ReverseStringFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.ReverseStringFilter(TokenStream,char)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.ReverseStringFilter(Version,TokenStream)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.ReverseStringFilter(Version,TokenStream,char)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(String)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(Version,String)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(Version,char[])",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(Version,char[],int)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(Version,char[],int,int)",5,5,15
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(char[])",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(char[],int)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(char[],int,int)",1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverseUnicode3(char[],int,int)",2,1,3
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testBackCompat()",1,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testFilter()",1,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testFilterWithMark()",1,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testReverseChar()",1,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testReverseString()",1,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testReverseSupplementary()",1,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testReverseSupplementaryChar()",1,1,1
"org.apache.lucene.analysis.ro.RomanianAnalyzer.RomanianAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.ro.RomanianAnalyzer.RomanianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.ro.RomanianAnalyzer.RomanianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.ro.RomanianAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.ro.RomanianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version)",1,1,2
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version,Map<?, ?>)",1,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version,String...)",1,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.createComponents(String,Reader)",2,2,4
"org.apache.lucene.analysis.ru.RussianAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.isTokenChar(int)",1,2,3
"org.apache.lucene.analysis.ru.RussianLightStemFilter.RussianLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ru.RussianLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.ru.RussianLightStemmer.normalize(char[],int)",5,2,5
"org.apache.lucene.analysis.ru.RussianLightStemmer.removeCase(char[],int)",6,49,53
"org.apache.lucene.analysis.ru.RussianLightStemmer.stem(char[],int)",1,1,1
"org.apache.lucene.analysis.ru.RussianLowerCaseFilter.RussianLowerCaseFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ru.RussianLowerCaseFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.ru.RussianStemFilter.RussianStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.ru.RussianStemFilter.incrementToken()",2,5,5
"org.apache.lucene.analysis.ru.RussianStemFilter.setStemmer(RussianStemmer)",1,1,2
"org.apache.lucene.analysis.ru.RussianStemmer.RussianStemmer()",1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.adjectival(StringBuilder)",2,2,3
"org.apache.lucene.analysis.ru.RussianStemmer.derivational(StringBuilder)",3,3,3
"org.apache.lucene.analysis.ru.RussianStemmer.findAndRemoveEnding(StringBuilder,char[][])",2,2,2
"org.apache.lucene.analysis.ru.RussianStemmer.findAndRemoveEnding(StringBuilder,char[][],char[][])",3,3,3
"org.apache.lucene.analysis.ru.RussianStemmer.findEnding(StringBuilder,char[][])",1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.findEnding(StringBuilder,int,char[][])",6,3,6
"org.apache.lucene.analysis.ru.RussianStemmer.isVowel(char)",3,1,3
"org.apache.lucene.analysis.ru.RussianStemmer.markPositions(String)",5,5,13
"org.apache.lucene.analysis.ru.RussianStemmer.noun(StringBuilder)",1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.perfectiveGerund(StringBuilder)",1,2,2
"org.apache.lucene.analysis.ru.RussianStemmer.reflexive(StringBuilder)",1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.removeI(StringBuilder)",2,3,3
"org.apache.lucene.analysis.ru.RussianStemmer.removeSoft(StringBuilder)",2,3,3
"org.apache.lucene.analysis.ru.RussianStemmer.stem(String)",2,4,5
"org.apache.lucene.analysis.ru.RussianStemmer.stemWord(String)",1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.superlative(StringBuilder)",1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.undoubleN(StringBuilder)",2,2,2
"org.apache.lucene.analysis.ru.RussianStemmer.verb(StringBuilder)",1,2,2
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testDigitsInRussianCharset()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testReusableTokenStream30()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testUnicode30()",3,3,4
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testWithStemExclusionSet()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianLetterTokenizer.testRussianLetterTokenizer()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianLetterTokenizer.testRussianLetterTokenizerBWCompat()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.ru.TestRussianStem.testStem()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Analyzer)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Analyzer,int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Analyzer,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Analyzer,int,int,String,boolean,boolean)",4,1,5
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Version)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Version,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.getMaxShingleSize()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.getMinShingleSize()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.getTokenSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.isOutputUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.isOutputUnigramsIfNoShingles()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.reusableTokenStream(String,Reader)",1,2,3
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setMaxShingleSize(int)",2,1,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setMinShingleSize(int)",3,1,3
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setOutputUnigrams(boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setOutputUnigramsIfNoShingles(boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setTokenSeparator(String)",1,1,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.tokenStream(String,Reader)",1,2,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.NonreusableAnalyzer.tokenStream(String,Reader)",2,1,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.compareRanks(ScoreDoc[],int[])",1,2,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.queryParsingTest(Analyzer,String)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.setUpSearcher(Analyzer)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testAltTokenSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testNoTokenSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testNonDefaultMinAndSameMaxShingleSize()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testNonDefaultMinShingleSize()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testNullTokenSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testOutputUnigramsIfNoShinglesSingleToken()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperBooleanQuery()",1,2,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperPhraseQuery()",1,2,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperPhraseQueryParsing()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperPhraseQueryParsingFails()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperQueryParsing()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperRequiredQueryParsing()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testWrappedAnalyzerDoesNotReuse()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.CircularSequence()",1,1,2
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.advance()",1,3,3
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.atMinValue()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.getPreviousValue()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.getValue()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.reset()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.InputWindowToken.InputWindowToken(AttributeSource)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.ShingleFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.ShingleFilter(TokenStream,String)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.ShingleFilter(TokenStream,int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.ShingleFilter(TokenStream,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.getNextToken(InputWindowToken)",1,10,10
"org.apache.lucene.analysis.shingle.ShingleFilter.incrementToken()",1,13,15
"org.apache.lucene.analysis.shingle.ShingleFilter.reset()",1,1,3
"org.apache.lucene.analysis.shingle.ShingleFilter.setMaxShingleSize(int)",2,1,2
"org.apache.lucene.analysis.shingle.ShingleFilter.setMinShingleSize(int)",3,1,3
"org.apache.lucene.analysis.shingle.ShingleFilter.setOutputUnigrams(boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.setOutputUnigramsIfNoShingles(boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.setTokenSeparator(String)",1,1,2
"org.apache.lucene.analysis.shingle.ShingleFilter.setTokenType(String)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.shiftInputWindow()",5,9,10
"org.apache.lucene.analysis.shingle.ShingleFilterTest.TestTokenStream.TestTokenStream(Token[])",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.TestTokenStream.incrementToken()",2,2,2
"org.apache.lucene.analysis.shingle.ShingleFilterTest.createToken(String,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.createToken(String,int,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.setUp()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTest(String,int,int,Token[],Token[],int[],String[],boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTest(int,Token[],Token[],int[],String[],boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTest(int,int,Token[],Token[],int[],String[],boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTest(int,int,Token[],Token[],int[],String[],boolean,boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTestCommon(ShingleFilter,Token[],int[],String[])",1,2,2
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilter()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterAltSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterNoSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithEmptyTokenStream()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithEmptyTokenStreamWithoutUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithHoles()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithHolesWithoutUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithSingleToken()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithSingleTokenWithoutUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithoutUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithoutUnigramsAltSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithoutUnigramsNoSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilter()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterMinFourGram()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterMinTriGram()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterWithoutUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterWithoutUnigramsMinFourGram()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterWithoutUnigramsMinTriGram()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesSingleTokenCase()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesWithMultipleInputTokens()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesWithSimpleBigram()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesWithSimpleUnigramlessBigram()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testPositionIncrementEqualToN()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testPositionIncrementEqualToNWithoutUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testPositionIncrementGreaterThanN()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testPositionIncrementGreaterThanNWithoutUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testReset()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilter()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterAltSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterMinTriGram()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterNoSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterNullSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterWithoutUnigrams()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterWithoutUnigramsAltSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterWithoutUnigramsMinTriGram()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterWithoutUnigramsNoSeparator()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Column()",1,2,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Column(Token)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.Row()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.getColumn()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.getIndex()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.getTokens()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.setTokens(List<Token>)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.toString()",1,1,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.getIndex()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.getMatrix()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.getRows()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.isFirst()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.isLast()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.setFirst(boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.setLast(boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.toString()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.getColumns()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.permutationIterator()",4,6,8
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.toString()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec.getTokenPositioner(Token)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec.getWeight(Token)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec.setTokenPositioner(Token,TokenPositioner)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec.setWeight(Token,float)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(TokenStream,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(TokenStream,int,int,Character)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(TokenStream,int,int,Character,boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(TokenStream,int,int,Character,boolean,TokenSettingsCodec)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec.getTokenPositioner(Token)",4,2,4
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec.getWeight(Token)",2,3,3
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec.setTokenPositioner(Token,TokenPositioner)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec.setWeight(Token,float)",1,2,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenPositioner.TokenPositioner(int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenPositioner.getIndex()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec.getTokenPositioner(Token)",2,1,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec.getWeight(Token)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec.setTokenPositioner(Token,TokenPositioner)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec.setWeight(Token,float)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.calculateShingleWeight(Token,List<Token>,int,List<Row>,List<Token>)",1,2,4
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getMatrix()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getMaximumShingleSize()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getMinimumShingleSize()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getNextInputToken(Token)",2,1,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getNextToken(Token)",2,1,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getSpacerCharacter()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.incrementToken()",2,4,6
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.isIgnoringSinglePrefixOrSuffixShingle()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.nextTokensPermutation()",1,3,3
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.produceNextToken(Token)",13,20,27
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.readColumn()",2,7,8
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.reset()",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setIgnoringSinglePrefixOrSuffixShingle(boolean)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setMatrix(Matrix)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setMaximumShingleSize(int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setMinimumShingleSize(int)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setSpacerCharacter(Character)",1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.updateToken(Token,List<Token>,int,List<Row>,List<Token>)",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.TokenListStream.TokenListStream(Collection<Token>)",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.TokenListStream.incrementToken()",2,2,3
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.TokenListStream.reset()",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.assertNext(TokenStream,String)",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.assertNext(TokenStream,String,int,float,int,int)",1,2,2
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.assertNext(TokenStream,String,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.createToken(String,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.testBehavingAsShingleFilter()",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.testIterator()",1,1,2
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.testMatrix()",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.testTokenStream()",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.tokenFactory(String,int)",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.tokenFactory(String,int,float,int,int)",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.tokenFactory(String,int,float,int,int,TokenPositioner)",1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.tokenFactory(String,int,int,int)",1,1,1
"org.apache.lucene.analysis.sinks.DateRecognizerSinkFilter.DateRecognizerSinkFilter()",1,1,1
"org.apache.lucene.analysis.sinks.DateRecognizerSinkFilter.DateRecognizerSinkFilter(DateFormat)",1,1,1
"org.apache.lucene.analysis.sinks.DateRecognizerSinkFilter.accept(AttributeSource)",2,2,4
"org.apache.lucene.analysis.sinks.DateRecognizerSinkTokenizerTest.test()",1,1,3
"org.apache.lucene.analysis.sinks.TokenRangeSinkFilter.TokenRangeSinkFilter(int,int)",1,1,1
"org.apache.lucene.analysis.sinks.TokenRangeSinkFilter.accept(AttributeSource)",2,1,3
"org.apache.lucene.analysis.sinks.TokenRangeSinkFilter.reset()",1,1,1
"org.apache.lucene.analysis.sinks.TokenRangeSinkTokenizerTest.test()",1,1,3
"org.apache.lucene.analysis.sinks.TokenTypeSinkFilter.TokenTypeSinkFilter(String)",1,1,1
"org.apache.lucene.analysis.sinks.TokenTypeSinkFilter.accept(AttributeSource)",1,2,2
"org.apache.lucene.analysis.sinks.TokenTypeSinkTokenizerTest.WordTokenFilter.WordTokenFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.sinks.TokenTypeSinkTokenizerTest.WordTokenFilter.incrementToken()",2,2,3
"org.apache.lucene.analysis.sinks.TokenTypeSinkTokenizerTest.test()",1,3,4
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.SnowballAnalyzer(Version,String)",1,1,1
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.SnowballAnalyzer(Version,String,Set<?>)",1,1,1
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.SnowballAnalyzer(Version,String,String[])",1,1,1
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.reusableTokenStream(String,Reader)",1,3,5
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.tokenStream(String,Reader)",1,5,8
"org.apache.lucene.analysis.snowball.SnowballFilter.SnowballFilter(TokenStream,SnowballProgram)",1,1,1
"org.apache.lucene.analysis.snowball.SnowballFilter.SnowballFilter(TokenStream,String)",1,2,2
"org.apache.lucene.analysis.snowball.SnowballFilter.incrementToken()",2,4,4
"org.apache.lucene.analysis.snowball.TestSnowball.TestTokenStream.TestTokenStream()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.TestTokenStream.incrementToken()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.testEmptyTerm()",1,2,2
"org.apache.lucene.analysis.snowball.TestSnowball.testEnglish()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.testEnglishLowerCase()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.testFilterTokens()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.testStopwords()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.testTurkish()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.testTurkishBWComp()",1,1,1
"org.apache.lucene.analysis.snowball.TestSnowballVocab.assertCorrectOutput(String,String)",1,2,2
"org.apache.lucene.analysis.snowball.TestSnowballVocab.testStemmers()",1,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.ClassicAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.ClassicAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.ClassicAnalyzer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.ClassicAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.getMaxTokenLength()",1,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.setMaxTokenLength(int)",1,1,1
"org.apache.lucene.analysis.standard.ClassicFilter.ClassicFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.standard.ClassicFilter.incrementToken()",2,3,10
"org.apache.lucene.analysis.standard.ClassicTokenizer.ClassicTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.ClassicTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.ClassicTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.end()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.getMaxTokenLength()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.incrementToken()",4,5,6
"org.apache.lucene.analysis.standard.ClassicTokenizer.init(Version)",1,1,2
"org.apache.lucene.analysis.standard.ClassicTokenizer.isReplaceInvalidAcronym()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.setMaxTokenLength(int)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.setReplaceInvalidAcronym(boolean)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.ClassicTokenizerImpl(InputStream)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.ClassicTokenizerImpl(Reader)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.getNextToken()",20,7,34
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.getText(CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yybegin(int)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yychar()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yycharat(int)",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yyclose()",1,2,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yylength()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yypushback(int)",1,2,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yyreset(Reader)",1,1,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yystate()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yytext()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzRefill()",4,4,6
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzScanError(int)",1,1,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackAction()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackAction(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackAttribute()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackAttribute(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackCMap(String)",1,2,3
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackRowMap()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackRowMap(String,int,int[])",1,2,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackTrans()",1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackTrans(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.GenerateJflexTLDMacros.GenerateJflexTLDMacros(String,String)",1,1,1
"org.apache.lucene.analysis.standard.GenerateJflexTLDMacros.execute()",1,1,1
"org.apache.lucene.analysis.standard.GenerateJflexTLDMacros.getCaseInsensitiveRegex(String)",1,4,4
"org.apache.lucene.analysis.standard.GenerateJflexTLDMacros.getIANARootZoneDatabase()",1,4,4
"org.apache.lucene.analysis.standard.GenerateJflexTLDMacros.main(String...)",1,4,4
"org.apache.lucene.analysis.standard.GenerateJflexTLDMacros.writeOutput(SortedSet<String>)",1,4,4
"org.apache.lucene.analysis.standard.StandardAnalyzer.StandardAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.StandardAnalyzer(Version,File)",1,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.StandardAnalyzer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.StandardAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.getMaxTokenLength()",1,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.setMaxTokenLength(int)",1,1,1
"org.apache.lucene.analysis.standard.StandardFilter.StandardFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.standard.StandardFilter.StandardFilter(Version,TokenStream)",1,1,1
"org.apache.lucene.analysis.standard.StandardFilter.incrementToken()",2,2,2
"org.apache.lucene.analysis.standard.StandardFilter.incrementTokenClassic()",2,3,10
"org.apache.lucene.analysis.standard.StandardTokenizer.StandardTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.StandardTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.StandardTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.end()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.getMaxTokenLength()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.incrementToken()",4,5,6
"org.apache.lucene.analysis.standard.StandardTokenizer.init(Version)",1,2,4
"org.apache.lucene.analysis.standard.StandardTokenizer.isReplaceInvalidAcronym()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.setMaxTokenLength(int)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.setReplaceInvalidAcronym(boolean)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.StandardTokenizerImpl(InputStream)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.StandardTokenizerImpl(Reader)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.getNextToken()",18,7,30
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.getText(CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yybegin(int)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yychar()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yycharat(int)",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyclose()",1,2,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yylength()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yypushback(int)",1,2,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyreset(Reader)",1,1,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yystate()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yytext()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzRefill()",4,4,6
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzScanError(int)",1,1,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackAction()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackAction(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackAttribute()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackAttribute(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackCMap(String)",1,2,3
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackRowMap()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackRowMap(String,int,int[])",1,2,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackTrans()",1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackTrans(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.UAX29URLEmailAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.UAX29URLEmailAnalyzer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.UAX29URLEmailAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.createComponents(String,Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.getMaxTokenLength()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.setMaxTokenLength(int)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(InputStream)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(Version,AttributeFactory,Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(Version,AttributeSource,Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(Version,Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.end()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.getMaxTokenLength()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.getScannerFor(Version,Reader)",3,2,3
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.incrementToken()",4,3,4
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.setMaxTokenLength(int)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.UAX29URLEmailTokenizerImpl(InputStream)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.UAX29URLEmailTokenizerImpl(Reader)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.getNextToken()",20,7,36
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.getText(CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yybegin(int)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yychar()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yycharat(int)",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yyclose()",1,2,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yylength()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yypushback(int)",1,2,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yyreset(Reader)",1,1,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yystate()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yytext()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzRefill()",4,4,6
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzScanError(int)",1,1,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackAction()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackAction(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackAttribute()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackAttribute(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackCMap(String)",1,2,3
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackRowMap()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackRowMap(String,int,int[])",1,2,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackTrans()",1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackTrans(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.StandardTokenizerImpl31(InputStream)",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.StandardTokenizerImpl31(Reader)",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.getNextToken()",18,7,30
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.getText(CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yybegin(int)",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yychar()",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yycharat(int)",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yyclose()",1,2,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yylength()",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yypushback(int)",1,2,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yyreset(Reader)",1,1,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yystate()",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yytext()",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzRefill()",4,4,6
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzScanError(int)",1,1,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackAction()",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackAction(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackAttribute()",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackAttribute(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackCMap(String)",1,2,3
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackRowMap()",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackRowMap(String,int,int[])",1,2,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackTrans()",1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackTrans(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.UAX29URLEmailTokenizerImpl31(InputStream)",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.UAX29URLEmailTokenizerImpl31(Reader)",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.getNextToken()",20,7,34
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.getText(CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yybegin(int)",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yychar()",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yycharat(int)",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yyclose()",1,2,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yylength()",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yypushback(int)",1,2,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yyreset(Reader)",1,1,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yystate()",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yytext()",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzRefill()",4,4,6
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzScanError(int)",1,1,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackAction()",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackAction(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackAttribute()",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackAttribute(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackCMap(String)",1,2,3
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackRowMap()",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackRowMap(String,int,int[])",1,2,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackTrans()",1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackTrans(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.UAX29URLEmailTokenizerImpl34(InputStream)",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.UAX29URLEmailTokenizerImpl34(Reader)",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.getNextToken()",20,7,34
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.getText(CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yybegin(int)",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yychar()",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yycharat(int)",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yyclose()",1,2,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yylength()",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yypushback(int)",1,2,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yyreset(Reader)",1,1,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yystate()",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yytext()",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzRefill()",4,4,6
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzScanError(int)",1,1,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackAction()",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackAction(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackAttribute()",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackAttribute(String,int,int[])",1,2,3
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackCMap(String)",1,2,3
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackRowMap()",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackRowMap(String,int,int[])",1,2,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackTrans()",1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackTrans(String,int,int[])",1,2,3
"org.apache.lucene.analysis.stempel.StempelFilter.StempelFilter(TokenStream,StempelStemmer)",1,1,1
"org.apache.lucene.analysis.stempel.StempelFilter.StempelFilter(TokenStream,StempelStemmer,int)",1,1,1
"org.apache.lucene.analysis.stempel.StempelFilter.incrementToken()",2,5,5
"org.apache.lucene.analysis.stempel.StempelStemmer.StempelStemmer(InputStream)",1,1,1
"org.apache.lucene.analysis.stempel.StempelStemmer.StempelStemmer(Trie)",1,1,1
"org.apache.lucene.analysis.stempel.StempelStemmer.load(InputStream)",2,1,2
"org.apache.lucene.analysis.stempel.StempelStemmer.stem(CharSequence)",3,1,3
"org.apache.lucene.analysis.sv.SwedishAnalyzer.SwedishAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.sv.SwedishAnalyzer.SwedishAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.sv.SwedishAnalyzer.SwedishAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.sv.SwedishAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.sv.SwedishAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.sv.SwedishLightStemFilter.SwedishLightStemFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.sv.SwedishLightStemFilter.incrementToken()",2,3,3
"org.apache.lucene.analysis.sv.SwedishLightStemmer.stem(char[],int)",7,21,28
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.sv.TestSwedishLightStemFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.sv.TestSwedishLightStemFilter.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.sv.TestSwedishLightStemFilter.testVocabulary()",1,1,1
"org.apache.lucene.analysis.synonym.SolrSynonymParser.SolrSynonymParser(boolean,boolean,Analyzer)",1,1,1
"org.apache.lucene.analysis.synonym.SolrSynonymParser.add(Reader)",1,2,2
"org.apache.lucene.analysis.synonym.SolrSynonymParser.addInternal(BufferedReader)",5,9,12
"org.apache.lucene.analysis.synonym.SolrSynonymParser.split(String,String)",5,6,7
"org.apache.lucene.analysis.synonym.SolrSynonymParser.unescape(String)",2,5,5
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingInput.reset()",1,1,1
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.PendingOutputs()",1,1,1
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.add(char[],int,int,int)",1,3,4
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.getLastEndOffset()",1,1,1
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.pullNext()",1,2,2
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.reset()",1,1,1
"org.apache.lucene.analysis.synonym.SynonymFilter.SynonymFilter(TokenStream,SynonymMap,boolean)",2,1,3
"org.apache.lucene.analysis.synonym.SynonymFilter.addOutput(BytesRef,int,int)",1,5,8
"org.apache.lucene.analysis.synonym.SynonymFilter.capture()",1,1,1
"org.apache.lucene.analysis.synonym.SynonymFilter.getCaptureCount()",1,1,1
"org.apache.lucene.analysis.synonym.SynonymFilter.incrementToken()",7,11,15
"org.apache.lucene.analysis.synonym.SynonymFilter.parse()",8,13,16
"org.apache.lucene.analysis.synonym.SynonymFilter.reset()",1,3,3
"org.apache.lucene.analysis.synonym.SynonymFilter.rollIncr(int)",2,1,2
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.Builder(boolean)",1,1,1
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.add(CharsRef,CharsRef,boolean)",1,1,1
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.add(CharsRef,int,CharsRef,int,boolean)",5,2,7
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.analyze(Analyzer,String,CharsRef)",5,2,6
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.build()",5,5,8
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.countWords(CharsRef)",1,1,3
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.hasHoles(CharsRef)",5,1,6
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.join(String[],CharsRef)",1,5,5
"org.apache.lucene.analysis.synonym.SynonymMap.SynonymMap(FST<BytesRef>,BytesRefHash,int)",1,1,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testEscapedStuff()",1,1,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidAnalyzesToNothingInput()",1,1,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidAnalyzesToNothingOutput()",1,1,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidDoubleMap()",1,1,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidPositionsInput()",1,1,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidPositionsOutput()",1,1,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testSimple()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.add(String,String,boolean)",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.assertEquals(CharTermAttribute,String)",1,2,2
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.getRandomString(char,int,int)",1,2,2
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.pruneDups(List<OneSyn>)",1,4,4
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.randomNonEmptyString()",3,3,4
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.slowSynMatcher(String,List<OneSyn>,int)",10,17,28
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testBasic()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testBasic2()",1,2,2
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testEmptyTerm()",1,3,3
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testIncludeOrig()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testMatching()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testMultiwordOffsets()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testOutputHangsOffEnd()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRandom()",1,8,8
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRandom2()",1,3,3
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRandomHuge()",1,3,3
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRecursion()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRecursion2()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRecursion3()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRecursion4()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRepeatsOff()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRepeatsOn()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testVanishingTerms()",1,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.verify(String,String)",1,9,10
"org.apache.lucene.analysis.synonym.TestWordnetSynonymParser.testSynonyms()",1,1,1
"org.apache.lucene.analysis.synonym.WordnetSynonymParser.WordnetSynonymParser(boolean,boolean,Analyzer)",1,1,1
"org.apache.lucene.analysis.synonym.WordnetSynonymParser.add(Reader)",1,5,5
"org.apache.lucene.analysis.synonym.WordnetSynonymParser.addInternal(CharsRef[],int)",2,5,6
"org.apache.lucene.analysis.synonym.WordnetSynonymParser.parseSynonym(String,CharsRef)",1,1,2
"org.apache.lucene.analysis.th.TestThaiAnalyzer.setUp()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testAnalyzer30()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testAttributeReuse()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testBackwardsStopWords()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testBuggyTokenType30()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testOffsets()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testPositionIncrements()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testReusableTokenStream()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testReusableTokenStream30()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testStopWords()",1,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testTokenType()",1,1,1
"org.apache.lucene.analysis.th.ThaiAnalyzer.ThaiAnalyzer(Version)",1,1,2
"org.apache.lucene.analysis.th.ThaiAnalyzer.ThaiAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.th.ThaiAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.th.ThaiAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.th.ThaiWordFilter.ThaiWordFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.th.ThaiWordFilter.ThaiWordFilter(Version,TokenStream)",2,1,3
"org.apache.lucene.analysis.th.ThaiWordFilter.incrementToken()",6,9,11
"org.apache.lucene.analysis.th.ThaiWordFilter.reset()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(CharSequence)",2,2,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(CharSequence,int,int)",9,10,15
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(CharTermAttribute)",2,2,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(String)",2,2,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(StringBuilder)",2,2,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.appendNull()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.buffer()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.charAt(int)",2,1,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyBuffer(char[],int,int)",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyTo(AttributeImpl)",1,2,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.equals(Object)",6,1,6
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.growTermBuffer(int)",1,2,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.length()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.reflectWith(AttributeReflector)",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.resizeBuffer(int)",1,2,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.resizeTermBuffer(int)",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setEmpty()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setLength(int)",2,1,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setTermBuffer(String)",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setTermBuffer(String,int,int)",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setTermBuffer(char[],int,int)",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setTermLength(int)",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.subSequence(int,int)",2,1,3
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.term()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.termBuffer()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.termLength()",1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.toString()",1,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.equals(Object)",3,1,3
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.getFlags()",1,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.setFlags(int)",1,1,1
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.equals(Object)",3,1,3
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.hashCode()",1,1,2
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.isKeyword()",1,1,1
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.setKeyword(boolean)",1,1,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.endOffset()",1,1,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.equals(Object)",3,1,4
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.setOffset(int,int)",1,1,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.startOffset()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.PayloadAttributeImpl()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.PayloadAttributeImpl(Payload)",1,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()",1,2,2
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.copyTo(AttributeImpl)",1,2,2
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.equals(Object)",4,2,6
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.getPayload()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.hashCode()",1,2,2
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.setPayload(Payload)",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.equals(Object)",3,1,3
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.getPositionIncrement()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.setPositionIncrement(int)",2,1,2
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.equals(Object)",3,1,3
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.getPositionLength()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.setPositionLength(int)",2,1,2
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testAppendableInterface()",1,1,3
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testAppendableInterfaceWithLongSequences()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testAttributeReflection()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testCharSequenceInterface()",1,2,2
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testClone()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testCopyTo()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testEquals()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testExceptions()",1,1,5
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testGrow()",1,4,4
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testNonCharSequenceAppend()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testResize()",1,2,2
"org.apache.lucene.analysis.tokenattributes.TestCharTermAttributeImpl.testToString()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestSimpleAttributeImpls.assertCloneIsEqual(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestSimpleAttributeImpls.assertCopyIsEqual(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestSimpleAttributeImpls.testFlagsAttribute()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestSimpleAttributeImpls.testKeywordAttribute()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestSimpleAttributeImpls.testOffsetAttribute()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestSimpleAttributeImpls.testPayloadAttribute()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestSimpleAttributeImpls.testPositionIncrementAttribute()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestSimpleAttributeImpls.testTypeAttribute()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestTermAttributeImpl.testClone()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestTermAttributeImpl.testCopyTo()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestTermAttributeImpl.testEquals()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestTermAttributeImpl.testGrow()",1,6,6
"org.apache.lucene.analysis.tokenattributes.TestTermAttributeImpl.testMixedStringArray()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TestTermAttributeImpl.testResize()",1,2,2
"org.apache.lucene.analysis.tokenattributes.TestTermAttributeImpl.testToString()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.TypeAttributeImpl()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.TypeAttributeImpl(String)",1,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.clear()",1,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.equals(Object)",3,3,4
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.hashCode()",1,2,2
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.setType(String)",1,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.type()",1,1,1
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer.testBasics()",1,1,1
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer.testExclude()",1,1,1
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer.testResourcesAvailable()",1,1,1
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter.testDecomposed()",1,1,1
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter.testDecomposed2()",1,1,1
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter.testEmptyTerm()",1,1,1
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter.testTurkishLowerCaseFilter()",1,1,1
"org.apache.lucene.analysis.tr.TurkishAnalyzer.TurkishAnalyzer(Version)",1,1,1
"org.apache.lucene.analysis.tr.TurkishAnalyzer.TurkishAnalyzer(Version,Set<?>)",1,1,1
"org.apache.lucene.analysis.tr.TurkishAnalyzer.TurkishAnalyzer(Version,Set<?>,Set<?>)",1,1,1
"org.apache.lucene.analysis.tr.TurkishAnalyzer.createComponents(String,Reader)",1,1,2
"org.apache.lucene.analysis.tr.TurkishAnalyzer.getDefaultStopSet()",1,1,1
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter.TurkishLowerCaseFilter(TokenStream)",1,1,1
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter.delete(char[],int,int)",1,2,2
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter.incrementToken()",5,7,9
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter.isBeforeDot(char[],int,int)",4,2,4
"org.apache.lucene.analysis.util.CharArrayIterator.clone()",1,1,2
"org.apache.lucene.analysis.util.CharArrayIterator.current()",1,2,2
"org.apache.lucene.analysis.util.CharArrayIterator.first()",1,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getBeginIndex()",1,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getEndIndex()",1,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getIndex()",1,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getLength()",1,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getStart()",1,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getText()",1,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.last()",1,1,2
"org.apache.lucene.analysis.util.CharArrayIterator.newSentenceInstance()",2,1,4
"org.apache.lucene.analysis.util.CharArrayIterator.newWordInstance()",2,1,4
"org.apache.lucene.analysis.util.CharArrayIterator.next()",2,2,2
"org.apache.lucene.analysis.util.CharArrayIterator.previous()",2,2,2
"org.apache.lucene.analysis.util.CharArrayIterator.setIndex(int)",2,2,3
"org.apache.lucene.analysis.util.CharArrayIterator.setText(char[],int,int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.OpenStringBuilder()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.OpenStringBuilder(char[],int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.OpenStringBuilder(int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.append(CharSequence)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.append(CharSequence,int,int)",1,2,2
"org.apache.lucene.analysis.util.OpenStringBuilder.append(char)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.capacity()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.charAt(int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.flush()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.getArray()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.length()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.reserve(int)",1,2,2
"org.apache.lucene.analysis.util.OpenStringBuilder.reset()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.resize(int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.set(char[],int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.setCharAt(int,char)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.setLength(int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.size()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.subSequence(int,int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.toCharArray()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.toString()",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.unsafeWrite(char)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.unsafeWrite(char[],int,int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.unsafeWrite(int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(OpenStringBuilder)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(String)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(char)",1,2,2
"org.apache.lucene.analysis.util.OpenStringBuilder.write(char[])",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(char[],int,int)",1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(int)",1,1,1
"org.apache.lucene.analysis.util.StemmerUtil.delete(char[],int,int)",1,2,2
"org.apache.lucene.analysis.util.StemmerUtil.deleteN(char[],int,int,int)",1,2,2
"org.apache.lucene.analysis.util.StemmerUtil.endsWith(char[],int,String)",4,2,4
"org.apache.lucene.analysis.util.StemmerUtil.endsWith(char[],int,char[])",4,1,4
"org.apache.lucene.analysis.util.StemmerUtil.startsWith(char[],int,String)",4,2,4
"org.apache.lucene.analysis.util.TestCharArrayIterator.consume(BreakIterator,CharacterIterator)",1,1,2
"org.apache.lucene.analysis.util.TestCharArrayIterator.doTests(CharArrayIterator)",1,2,2
"org.apache.lucene.analysis.util.TestCharArrayIterator.testConsumeSentenceInstance()",1,2,2
"org.apache.lucene.analysis.util.TestCharArrayIterator.testConsumeWordInstance()",1,2,2
"org.apache.lucene.analysis.util.TestCharArrayIterator.testSentenceInstance()",1,1,1
"org.apache.lucene.analysis.util.TestCharArrayIterator.testWordInstance()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.WikipediaTokenizer(AttributeFactory,Reader,int,Set<String>)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.WikipediaTokenizer(AttributeSource,Reader,int,Set<String>)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.WikipediaTokenizer(Reader)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.WikipediaTokenizer(Reader,int,Set<String>)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.collapseAndSaveTokens(int,String)",1,6,6
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.collapseTokens(int)",1,6,6
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.end()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.incrementToken()",3,8,11
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.init(int,Set<String>)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.reset()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.setupSavedToken(int,String)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.setupToken()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.WikipediaTokenizerImpl(InputStream)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.WikipediaTokenizerImpl(Reader)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.getNextToken()",29,42,108
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.getNumWikiTokensSeen()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.getPositionIncrement()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.getText(CharTermAttribute)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.reset()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.setText(StringBuilder)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yybegin(int)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yychar()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yycharat(int)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yyclose()",1,2,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yylength()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yypushback(int)",1,2,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yyreset(Reader)",1,1,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yystate()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yytext()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzRefill()",4,4,6
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzScanError(int)",1,1,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackAction()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackAction(String,int,int[])",1,2,3
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackAttribute()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackAttribute(String,int,int[])",1,2,3
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackCMap(String)",1,2,3
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackRowMap()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackRowMap(String,int,int[])",1,2,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackTrans()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackTrans(String,int,int[])",1,2,3
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.checkLinkPhrases(WikipediaTokenizer)",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testBoth()",1,2,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testHandwritten()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testLinkPhrases()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testLinks()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testLucene1133()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testRandomHugeStrings()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testRandomStrings()",1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testSimple()",1,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.afterClassBenchmarkTestCase()",1,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.algLinesToText(String[])",1,3,3
"org.apache.lucene.benchmark.BenchmarkTestCase.beforeClassBenchmarkTestCase()",1,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.copyToWorkDir(String)",1,2,2
"org.apache.lucene.benchmark.BenchmarkTestCase.execBenchmark(String[])",1,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.getWorkDir()",1,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.getWorkDirPath()",1,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.getWorkDirResourcePath(String)",1,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.logTstLogic(String)",2,1,2
"org.apache.lucene.benchmark.byTask.Benchmark.Benchmark(Reader)",1,2,3
"org.apache.lucene.benchmark.byTask.Benchmark.exec(String[])",1,7,7
"org.apache.lucene.benchmark.byTask.Benchmark.execute()",2,1,2
"org.apache.lucene.benchmark.byTask.Benchmark.getAlgorithm()",1,1,1
"org.apache.lucene.benchmark.byTask.Benchmark.getRunData()",1,1,1
"org.apache.lucene.benchmark.byTask.Benchmark.main(String[])",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.PerfRunData(Config)",1,2,2
"org.apache.lucene.benchmark.byTask.PerfRunData.close()",1,3,3
"org.apache.lucene.benchmark.byTask.PerfRunData.createDirectory(boolean,String,String)",2,4,4
"org.apache.lucene.benchmark.byTask.PerfRunData.getAnalyzer()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getConfig()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getDirectory()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getDocMaker()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getFacetSource()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getIndexReader()",1,2,2
"org.apache.lucene.benchmark.byTask.PerfRunData.getIndexSearcher()",1,2,2
"org.apache.lucene.benchmark.byTask.PerfRunData.getIndexWriter()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getLocale()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getPerfObject(String)",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getPoints()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getQueryMaker(ReadTask)",2,2,3
"org.apache.lucene.benchmark.byTask.PerfRunData.getStartTimeMillis()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getTaxonomyDir()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getTaxonomyReader()",1,2,2
"org.apache.lucene.benchmark.byTask.PerfRunData.getTaxonomyWriter()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.reinit(boolean)",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.resetInputs()",1,2,2
"org.apache.lucene.benchmark.byTask.PerfRunData.setAnalyzer(Analyzer)",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setDirectory(Directory)",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setIndexReader(IndexReader)",2,3,4
"org.apache.lucene.benchmark.byTask.PerfRunData.setIndexWriter(IndexWriter)",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setLocale(Locale)",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setPerfObject(String,Object)",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setStartTimeMillis()",1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setTaxonomyReader(TaxonomyReader)",2,3,4
"org.apache.lucene.benchmark.byTask.PerfRunData.setTaxonomyWriter(TaxonomyWriter)",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.MyMergePolicy.MyMergePolicy()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.MyMergeScheduler.MyMergeScheduler()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.assertEqualCollation(Analyzer,Analyzer,String)",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.assertEqualShingle(Analyzer,String,String[])",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.disableCountingLines(boolean)",1,1,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.doTestDisableCounting(boolean)",1,5,6
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.getCollatorConfig(String,String)",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.getLocaleConfig(String)",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.getReuters20LinesFile()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.getShingleConfig(String)",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.setUp()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testBGSearchTaskThreads()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testCloseIndexFalse()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testCollator()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testDeleteByPercent()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testDisableCounting()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testDocMakerThreadSafety()",1,2,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testExhaustContentSource()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testExhaustedLooped()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testForceMerge()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testHighlighting()",1,1,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testHighlightingNoTvNoStore()",1,2,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testHighlightingTV()",1,1,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testIndexAndSearchTasks()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testIndexWriterSettings()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testIndexingWithFacets()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testLineDocFile()",3,3,4
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testLocale()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testMergePolicy()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testMergeScheduler()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testParallelDocMaker()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testParallelExhausted()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testReadTokens()",1,9,9
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testShingleAnalyzer()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testTimedSearchTask()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.MockContentSource.close()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.MockContentSource.getNextDocData(DocData)",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.MockQueryMaker.prepareQueries()",1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.testParseExamples()",1,9,9
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.testParseParallelTaskSequenceRepetition()",1,3,4
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.testParseTaskSequenceRepetition()",1,3,4
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.makeQuery()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.makeQuery(int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.nextQnum()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.printQueries()",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.setConfig(Config)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.addBytes(long)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.addItem()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.collectFiles(File,ArrayList<File>)",2,4,5
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getBytesCount()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getConfig()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getItemsCount()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getTotalBytesCount()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getTotalItemsCount()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.printStatistics(String)",2,5,6
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.setConfig(Config)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.shouldLog()",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.DemoHTMLParser.parse(DocData,String,Date,String,Reader,DateFormat)",1,7,7
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.DateFormatInfo.DateFormatInfo()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.Comparator.compare(File,File)",1,1,5
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.Iterator(File)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.find()",3,1,3
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.getCount()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.hasNext()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.next()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.push(File)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.push(File[])",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.remove()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.close()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.getDateFormatInfo()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.getNextDocData(DocData)",3,2,4
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.parseDate(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.setConfig(Config)",2,2,3
"org.apache.lucene.benchmark.byTask.feeds.DocData.clear()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getBody()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getDate()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getID()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getName()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getProps()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getTitle()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setBody(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setDate(Date)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.DocData.setDate(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setID(int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setName(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setProps(Properties)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setTitle(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DateUtil.DateUtil()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DocState.DocState(boolean,Store,Store,Index,Index,TermVector)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DocState.getField(String,Store,Index,TermVector)",2,2,3
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DocState.getNumericField(String)",2,2,3
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.LeftOver.LeftOver()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.close()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.createDocument(DocData,int,int)",5,15,21
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.getBytesCount()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.getDocState()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.getTotalBytesCount()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.makeDocument(int)",1,11,12
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.resetLeftovers()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.setConfig(Config)",1,2,17
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.OneDocSource.close()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.OneDocSource.getNextDocData(DocData)",2,1,2
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.createTestNormsDocument(boolean,boolean,boolean,boolean)",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.doTestIndexProperties(boolean,boolean,int)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.testDocMakerLeak()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.testIndexProperties()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.testNorms()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.Parser()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.characters(char[],int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.endElement(String,String,String)",4,7,14
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.next()",4,3,9
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.run()",4,4,8
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.startElement(String,String,String,Attributes)",2,2,4
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.time(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.close()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.getElementType(String)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.getNextDocData(DocData)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.setConfig(Config)",2,1,2
"org.apache.lucene.benchmark.byTask.feeds.EnwikiQueryMaker.createQueries(List<Object>,Analyzer)",1,6,6
"org.apache.lucene.benchmark.byTask.feeds.EnwikiQueryMaker.getPrebuiltQueries(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiQueryMaker.prepareQueries()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.FacetSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.FileBasedQueryMaker.prepareQueries()",1,8,9
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.HeaderLineParser.HeaderLineParser(String[])",1,5,6
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.HeaderLineParser.parseLine(DocData,String)",4,2,4
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.HeaderLineParser.setDocDataField(DocData,int,String)",2,3,7
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.LineParser.LineParser(String[])",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.SimpleLineParser.SimpleLineParser(String[])",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.SimpleLineParser.parseLine(DocData,String)",4,1,4
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.close()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.createDocDataLineReader(String)",3,3,5
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.getNextDocData(DocData)",5,4,5
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.openFile()",1,3,4
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.setConfig(Config)",2,1,3
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.createBZ2LineFile(File,boolean)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.createRegularLineFile(File,boolean)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.createRegularLineFileWithMoreFields(File,String...)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.doIndexAndSearchTest(File,Class<? extends LineParser>,String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.doIndexAndSearchTestWithRepeats(File,Class<? extends LineParser>,int,String)",1,3,4
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testBZip2()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testBZip2NoHeaderLine()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testInvalidFormat()",1,2,3
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testRegularFile()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testRegularFileNoHeaderLine()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testRegularFileSpecialHeader()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testWithDocsName()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testWithProperties()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.writeDocsToFile(BufferedWriter,boolean,Properties)",1,6,6
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishContentSource.close()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishContentSource.getNextDocData(DocData)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishContentSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.getNextCounter()",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.makeQuery()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.makeQuery(int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.printQueries()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.setConfig(Config)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource.close()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource.getNextFacets(CategoryContainer)",1,4,4
"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource.setConfig(Config)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.DateFormatInfo.DateFormatInfo()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.close()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.getDateFormatInfo()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.getNextDocData(DocData)",3,2,4
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.parseDate(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.setConfig(Config)",2,2,3
"org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker.createQueries(List<Object>,Analyzer)",1,6,6
"org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker.getPrebuiltQueries(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker.prepareQueries()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker.prepareQueries()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.SimpleSloppyPhraseQueryMaker.prepareQueries()",1,8,10
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource.close()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource.getNextDocData(DocData)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource.newdocid()",2,1,3
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource.getNextDocData(DocData)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource.nextInt(int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource.setConfig(Config)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.DateFormatInfo.DateFormatInfo()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.close()",2,3,4
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getDateFormatInfo()",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getDocBuffer()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getHtmlParser()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getNextDocData(DocData)",1,2,4
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getTrecDocReader(StringBuilder)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.openNextFile()",5,5,7
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.parseDate(String)",3,3,4
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.read(StringBuilder,String,boolean,boolean)",4,7,7
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.resetInputs()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.setConfig(Config)",2,1,6
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.StringableTrecSource.StringableTrecSource(String,boolean)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.StringableTrecSource.openNextFile()",3,1,3
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.StringableTrecSource.setConfig(Config)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.assertDocData(DocData,String,String,String,Date)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.assertNoMoreDataException(StringableTrecSource)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testBadDate()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testForever()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testMissingDate()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testOneDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testTrecFeedDirAllTypes()",2,3,9
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testTwoDocuments()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.extract(StringBuilder,String,String,int,String[])",3,6,11
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.pathType(File)",3,2,4
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.stripTags(String,int)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.stripTags(StringBuilder,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecFBISParser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.TrecFR94Parser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.TrecFTParser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.TrecGov2Parser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.TrecLATimesParser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",1,5,5
"org.apache.lucene.benchmark.byTask.feeds.TrecParserByPath.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Entities.add(String,int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Entities.decode(String)",3,4,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Entities.encode(String)",1,4,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ArgValue()",11,9,17
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.CommentTag()",6,9,13
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.Decl()",5,6,11
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLDocument()",4,6,15
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLParser(HTMLParserTokenManager)",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLParser(InputStream)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLParser(InputStream,String)",1,1,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLParser(Reader)",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.MyPipedInputStream.MyPipedInputStream()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.MyPipedInputStream.MyPipedInputStream(PipedOutputStream)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.MyPipedInputStream.full()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ReInit(HTMLParserTokenManager)",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ReInit(InputStream)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ReInit(InputStream,String)",1,1,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ReInit(Reader)",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ScriptTag()",3,4,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.Tag()",5,21,26
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.addMetaTag()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.addSpace()",1,3,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.addText(String)",2,4,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.addToSummary(String)",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.disable_tracing()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.enable_tracing()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.generateParseException()",1,4,9
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getMetaTags()",3,4,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getNextToken()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getReader()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getSummary()",4,5,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getTitle()",3,4,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getToken(int)",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_2_1(int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_2_2(int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_3_1()",3,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_3_2()",3,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_add_error_token(int,int)",6,5,10
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_consume_token(int)",2,2,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_la1_init_0()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_ntk()",2,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_rescan_token()",2,5,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_save(int,int)",3,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_scan_token(int)",3,5,10
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.HTMLParserTokenManager(SimpleCharStream)",2,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.HTMLParserTokenManager(SimpleCharStream,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.ReInit(SimpleCharStream)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.ReInit(SimpleCharStream,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.ReInitRounds()",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.SwitchTo(int)",2,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.getNextToken()",5,11,24
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjAddStates(int,int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjCanMove_0(int,int,int,long,long)",4,2,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjCheckNAdd(int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjCheckNAddStates(int,int)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjCheckNAddTwoStates(int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjFillToken()",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_0(int,int)",6,23,109
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_1(int,int)",6,15,52
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_2(int,int)",6,13,37
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_3(int,int)",6,13,29
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_4(int,int)",6,12,25
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_5(int,int)",6,12,25
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_6(int,int)",6,12,25
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_7(int,int)",6,9,20
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_0()",3,3,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_1()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_2()",5,5,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_3()",4,4,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_4()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_5()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_6()",3,3,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_7()",3,3,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa1_0(long)",3,4,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa1_6(long)",3,4,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa2_0(long,long)",5,6,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa2_6(long,long)",4,5,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa3_0(long,long)",5,6,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa4_0(long,long)",4,5,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa5_0(long,long)",4,5,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa6_0(long,long)",4,5,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfaWithStates_0(int,int,int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfaWithStates_2(int,int,int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_0(int,long)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_2(int,long)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_3(int,long)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_6(int,long)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_7(int,long)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopAtPos(int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_0(int,long)",15,2,16
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_2(int,long)",2,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_3(int,long)",2,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_6(int,long)",6,2,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_7(int,long)",2,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.setDebugStream(PrintStream)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.ParseException()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.ParseException(String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.ParseException(Token,int[][],String[])",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.add_escapes(String)",4,5,14
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.getMessage()",4,6,10
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParserThread.ParserThread(HTMLParser)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParserThread.run()",1,4,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.BeginToken()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.Done()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ExpandBuff(boolean)",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.FillBuff()",2,9,10
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.GetImage()",2,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.GetSuffix(int)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,String,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,String,int,int,int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,int,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(Reader)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(Reader,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(Reader,int,int,int)",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,String,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,String,int,int,int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,int,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(Reader)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(Reader,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(Reader,int,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.UpdateLineColumn(char)",2,2,8
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.adjustBeginLineColumn(int,int)",1,1,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.backup(int)",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getBeginColumn()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getBeginLine()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getColumn()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getEndColumn()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getEndLine()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getLine()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getTabSize(int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.readChar()",2,2,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.setTabSize(int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.assertReadsTo(String,HTMLParser)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testComments()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testDoctype()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testEntities()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testMeta()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testScript()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testStyle()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testSummary()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testSummaryTitle()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testTitle()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testTurkish()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testUnicode()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.Token()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.Token(int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.Token(int,String)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.getValue()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.newToken(int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.newToken(int,String)",2,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.toString()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.LexicalError(boolean,int,int,int,String,char)",1,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.TokenMgrError()",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.TokenMgrError(String,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.TokenMgrError(boolean,int,int,int,String,char,int)",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.addEscapes(String)",4,5,14
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.getMessage()",1,1,1
"org.apache.lucene.benchmark.byTask.programmatic.Sample.initProps()",1,1,1
"org.apache.lucene.benchmark.byTask.programmatic.Sample.main(String[])",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.Points(Config)",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.clearData()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.getCurrentStats()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.markTaskEnd(TaskStats,int)",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.markTaskStart(PerfTask,int)",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.nextTaskRunNum()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.taskStats()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.Report(String,int,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.getOutOf()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.getReported()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.getSize()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.getText()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.TaskStats(PerfTask,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.add(TaskStats)",4,1,7
"org.apache.lucene.benchmark.byTask.stats.TaskStats.clone()",1,2,2
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getCount()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getCountsByTime()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getCountsByTimeStepMSec()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getElapsed()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getMaxTotMem()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getMaxUsedMem()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getNumParallelTasks()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getNumRuns()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getRound()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getTask()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getTaskRunNum()",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.markEnd(int,int)",1,1,3
"org.apache.lucene.benchmark.byTask.stats.TaskStats.setCountsByTime(int[],long)",1,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.toString()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.AddDocTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.getLogMessage(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.setup()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.tearDown()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask.AddFacetedDocTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask.doLogic()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask.getLogMessage(int)",2,2,2
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask.setup()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.ClearStatsTask.ClearStatsTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ClearStatsTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ClearStatsTask.shouldNotRecordStats()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask.CloseIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask.doLogic()",1,3,5
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseReaderTask.CloseReaderTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseReaderTask.doLogic()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyIndexTask.CloseTaxonomyIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyIndexTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyReaderTask.CloseTaxonomyReaderTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyReaderTask.doLogic()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask.CommitIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask.doLogic()",3,3,3
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CommitTaxonomyIndexTask.CommitTaxonomyIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CommitTaxonomyIndexTask.doLogic()",2,2,2
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask.ConsumeContentSourceTask(PerfRunData)",2,1,3
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask.close()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask.getLogMessage(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingHighlighterTestTask.CountingHighlighterTestTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingHighlighterTestTask.getBenchmarkHighlighter(Query)",1,1,3
"org.apache.lucene.benchmark.byTask.tasks.CountingHighlighterTestTask.retrieveDoc(IndexReader,int)",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask.CountingSearchTestTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask.getElapsedMillis()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask.incrNumSearches()",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.CreateIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.configureWriter(Config,PerfRunData,OpenMode,IndexCommit)",1,4,4
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit)",3,10,13
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.getIndexDeletionPolicy(Config)",2,2,3
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.createPerfRunData(String)",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testInfoStream_File()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testInfoStream_SystemOutErr()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testNoDeletionPolicy()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testNoMergePolicy()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testNoMergeScheduler()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateTaxonomyIndexTask.CreateTaxonomyIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateTaxonomyIndexTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.DeleteByPercentTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.doLogic()",1,6,6
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.setup()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.DeleteDocTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.getLogMessage(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.setup()",1,2,3
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask.FlushReaderTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask.doLogic()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask.ForceMergeTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask.doLogic()",2,1,2
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.NearRealtimeReaderTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.close()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.doLogic()",3,5,7
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.NewAnalyzerTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.createAnalyzer(String)",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.doLogic()",1,3,7
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.setParams(String)",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.Implementation.Implementation(String,String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.NewCollationAnalyzerTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.createAnalyzer(Locale,Implementation)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.doLogic()",2,1,3
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.setParams(String)",5,4,5
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.NewLocaleTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.createLocale(String,String,String)",2,2,4
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.doLogic()",1,2,3
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.setParams(String)",1,4,4
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewRoundTask.NewRoundTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewRoundTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewRoundTask.shouldNotRecordStats()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.NewShingleAnalyzerTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.doLogic()",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.setAnalyzer()",1,4,6
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.setParams(String)",5,5,5
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask.OpenIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask.doLogic()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask.setParams(String)",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.OpenReaderTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.doLogic()",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.findIndexCommit(Directory,String)",3,4,5
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.setParams(String)",1,3,4
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyIndexTask.OpenTaxonomyIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyIndexTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyReaderTask.OpenTaxonomyReaderTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyReaderTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.PerfTask()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.PerfTask(PerfRunData)",1,1,3
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.clone()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.close()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getBackgroundDeltaPriority()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getDepth()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getLogMessage(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getMaxDepthLogStart()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getName()",2,1,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getPadding()",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getRunData()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getRunInBackground()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.isDisableCounting()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.runAndMaybeStats(boolean)",2,6,8
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setDepth(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setDisableCounting(boolean)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setName(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setParams(String)",2,2,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setRunInBackground(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setup()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.shouldNeverLogAtStart()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.shouldNotRecordStats()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.stopNow()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.tearDown()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.toString()",1,4,4
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.MyPerfTask.MyPerfTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.MyPerfTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.MyPerfTask.getLogStep()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.createPerfRunData(boolean,int,boolean,int)",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.doLogStepTest(boolean,int,boolean,int,int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.testLogStep()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask.PrintReaderTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask.doLogic()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.ReadTask(PerfRunData)",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.createCollector()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.doLogic()",1,21,24
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.getBenchmarkHighlighter(Query)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.getFieldsToHighlight(Document)",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.getSort()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.numHits()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.numToHighlight()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.retrieveDoc(IndexReader,int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.setup()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.traversalSize()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withCollector()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withMaxScore()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withScore()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReadTokensTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.ReusableStringReader()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.close()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.init(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.read(char[])",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.read(char[],int,int)",3,3,3
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.doLogic()",6,5,8
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.getLogMessage(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.setup()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.tearDown()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReopenReaderTask.ReopenReaderTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReopenReaderTask.doLogic()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.RepAllTask.RepAllTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepAllTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepAllTask.reportAll(List<TaskStats>)",1,7,7
"org.apache.lucene.benchmark.byTask.tasks.RepSelectByPrefTask.RepSelectByPrefTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSelectByPrefTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSelectByPrefTask.reportSelectByPrefix(List<TaskStats>)",1,8,8
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameRoundTask.RepSumByNameRoundTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameRoundTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameRoundTask.reportSumByNameRound(List<TaskStats>)",4,4,5
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameTask.RepSumByNameTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameTask.reportSumByName(List<TaskStats>)",4,4,5
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefRoundTask.RepSumByPrefRoundTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefRoundTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefRoundTask.reportSumByPrefixRound(List<TaskStats>)",4,5,6
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.RepSumByPrefTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.reportSumByPrefix(List<TaskStats>)",4,5,6
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.setPrefix(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.toString()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.ReportTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.genPartialReport(int,LinkedHashMap<String, TaskStats>,int)",5,9,11
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.longestOp(Iterable<TaskStats>)",1,3,4
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.shouldNeverLogAtStart()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.shouldNotRecordStats()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.tableTitle(String)",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.taskReportLine(String,TaskStats)",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.ResetInputsTask.ResetInputsTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetInputsTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetInputsTask.shouldNotRecordStats()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemEraseTask.ResetSystemEraseTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemEraseTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemSoftTask.ResetSystemSoftTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemSoftTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RollbackIndexTask.RollbackIndexTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RollbackIndexTask.doLogic()",1,3,5
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.SearchTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.getQueryMaker()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.withSearch()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.withTraverse()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.withWarm()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.SearchTravRetHighlightTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.getBenchmarkHighlighter(Query)",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.getFieldsToHighlight(Document)",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.numToHighlight()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.setParams(String)",1,8,8
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.setup()",2,1,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.SearchTravRetLoadFieldSelectorTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.retrieveDoc(IndexReader,int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.setParams(String)",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetTask.SearchTravRetTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.SearchTravRetVectorHighlightTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.getBenchmarkHighlighter(Query)",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.getFieldsToHighlight(Document)",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.numToHighlight()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.setParams(String)",1,8,8
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.setup()",4,1,4
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.SearchTravTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.getQueryMaker()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.traversalSize()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.withSearch()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.withTraverse()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.withWarm()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.SearchWithCollectorTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.createCollector()",1,4,4
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.getQueryMaker()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.setup()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withCollector()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withSearch()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withTraverse()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withWarm()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.SearchWithSortTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.getQueryMaker()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.getSort()",2,1,2
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.getType(String)",9,8,9
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.setParams(String)",7,8,8
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withMaxScore()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withScore()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withSearch()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withTraverse()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withWarm()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTaskTest.testSetParams_docField()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask.SetPropTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask.doLogic()",2,2,3
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.ParallelTask.ParallelTask(PerfTask)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.ParallelTask.run()",1,2,4
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask.RunBackgroundTask(PerfTask,boolean)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask.getCount()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask.run()",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask.stopNow()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.TaskSequence(PerfRunData,String,TaskSequence,boolean)",1,1,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.addTask(PerfTask)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.clone()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.close()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doLogic()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doParallelTasks()",1,9,10
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doSerialTasks()",5,13,20
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doSerialTasksWithRate()",7,8,14
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getName()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getParent()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getRate()",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getRepetitions()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getTasks()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.initTasksArray()",1,3,6
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.isCollapsable()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.isParallel()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setNoChildReport()",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setRate(int,boolean)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setRepetitions(int)",3,2,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setRunTime(double)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setSequenceName()",1,2,7
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.startThreads(ParallelTask[])",2,3,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.startlThreadsWithRate(ParallelTask[])",1,3,4
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.stopNow()",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.toString()",1,8,12
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.updateExhausted(PerfTask)",1,1,4
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.UpdateDocTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.doLogic()",2,1,2
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.getLogMessage(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.setup()",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.tearDown()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WaitForMergesTask.WaitForMergesTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WaitForMergesTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WaitTask.WaitTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WaitTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WaitTask.setParams(String)",2,5,5
"org.apache.lucene.benchmark.byTask.tasks.WaitTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.WarmTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.getQueryMaker()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.withRetrieve()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.withSearch()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.withTraverse()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.withWarm()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.WriteLineDocTask(PerfRunData)",4,4,7
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.close()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.doLogic()",1,8,8
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.getLogMessage(int)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.setParams(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.supportsParams()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.writeHeader()",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.EmptyDocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.JustDateDocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.LegalJustDateDocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NewLinesDocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NoBodyDocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NoTitleDocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.ThreadingDocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.WriteLineDocMaker.makeDocument()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.assertHeaderLine(String)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.createPerfRunData(File,boolean,String)",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.doReadTest(File,Type,String,String,String)",2,3,7
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testBZip2()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testCharsReplace()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testEmptyBody()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testEmptyDoc()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testEmptyTitle()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testGZip()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testJustDate()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testLegalJustDate()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testMultiThreaded()",1,5,6
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testRegularFile()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.alt.AltPackageTaskTest.altAlg(boolean)",2,2,2
"org.apache.lucene.benchmark.byTask.tasks.alt.AltPackageTaskTest.testWithAlt()",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.alt.AltPackageTaskTest.testWithoutAlt()",1,1,2
"org.apache.lucene.benchmark.byTask.tasks.alt.AltTestTask.AltTestTask(PerfRunData)",1,1,1
"org.apache.lucene.benchmark.byTask.tasks.alt.AltTestTask.doLogic()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Algorithm.Algorithm(PerfRunData)",28,36,46
"org.apache.lucene.benchmark.byTask.utils.Algorithm.execute()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Algorithm.extractTasks()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Algorithm.extractTasks(ArrayList<PerfTask>,TaskSequence)",3,3,5
"org.apache.lucene.benchmark.byTask.utils.Algorithm.initTasksPackages(Config)",2,2,3
"org.apache.lucene.benchmark.byTask.utils.Algorithm.taskClass(Config,String)",2,2,3
"org.apache.lucene.benchmark.byTask.utils.Algorithm.toString()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Config.Config(Properties)",1,2,2
"org.apache.lucene.benchmark.byTask.utils.Config.Config(Reader)",1,7,7
"org.apache.lucene.benchmark.byTask.utils.Config.get(String,String)",5,3,6
"org.apache.lucene.benchmark.byTask.utils.Config.get(String,boolean)",3,2,3
"org.apache.lucene.benchmark.byTask.utils.Config.get(String,double)",3,2,3
"org.apache.lucene.benchmark.byTask.utils.Config.get(String,int)",3,2,3
"org.apache.lucene.benchmark.byTask.utils.Config.getAlgorithmText()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Config.getColsNamesForValsByRound()",2,2,3
"org.apache.lucene.benchmark.byTask.utils.Config.getColsValuesForValsByRound(int)",2,6,7
"org.apache.lucene.benchmark.byTask.utils.Config.getRoundNumber()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Config.newRound()",1,6,6
"org.apache.lucene.benchmark.byTask.utils.Config.printProps()",1,2,2
"org.apache.lucene.benchmark.byTask.utils.Config.propToBooleanArray(String)",2,4,4
"org.apache.lucene.benchmark.byTask.utils.Config.propToDoubleArray(String)",2,4,4
"org.apache.lucene.benchmark.byTask.utils.Config.propToIntArray(String)",2,4,4
"org.apache.lucene.benchmark.byTask.utils.Config.propToStringArray(String)",2,2,3
"org.apache.lucene.benchmark.byTask.utils.Config.set(String,String)",2,1,2
"org.apache.lucene.benchmark.byTask.utils.FileUtils.fullyDelete(File)",7,5,8
"org.apache.lucene.benchmark.byTask.utils.Format.format(String,String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Format.format(int,String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Format.format(int,double,String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Format.format(int,float,String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Format.formatPaddLeft(String,String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Format.formatPaddRight(int,double,String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.Format.formatPaddRight(int,float,String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.Type.Type(String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.Type.inputStream(InputStream)",1,3,3
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.Type.outputStream(OutputStream)",1,3,3
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.fileType(File)",1,2,3
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.inputStream(File)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.outputStream(File)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.assertReadText(File)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.autoOutFile(String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.rawBzip2File(String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.rawGzipFile(String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.rawTextFile(String)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.setUp()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.tearDown()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetInputStreamBzip2()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetInputStreamGzip()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetInputStreamPlainText()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetOutputStreamBzip2()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetOutputStreamGzip()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetOutputStreamPlain()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.writeText(OutputStream)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.StringBuilderReader(StringBuilder)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.close()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.ensureOpen()",2,1,2
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.mark(int)",2,1,2
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.markSupported()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.read()",1,2,2
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.read(char[],int,int)",4,1,7
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.ready()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.reset()",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.set(StringBuilder)",1,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.skip(long)",2,1,2
"org.apache.lucene.benchmark.byTask.utils.TestConfig.testAbsolutePathNamesWindows()",1,1,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.QualityBenchmark(QualityQuery[],QualityQueryParser,IndexSearcher,String)",1,1,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.analyzeQueryResults(QualityQuery,Query,TopDocs,Judge,PrintWriter,long)",1,3,3
"org.apache.lucene.benchmark.quality.QualityBenchmark.execute(Judge,SubmissionReport,PrintWriter)",1,5,5
"org.apache.lucene.benchmark.quality.QualityBenchmark.getMaxQueries()",1,1,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.getMaxResults()",1,1,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.setMaxQueries(int)",1,1,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.setMaxResults(int)",1,1,1
"org.apache.lucene.benchmark.quality.QualityQuery.QualityQuery(String,Map<String, String>)",1,1,1
"org.apache.lucene.benchmark.quality.QualityQuery.compareTo(QualityQuery)",1,2,2
"org.apache.lucene.benchmark.quality.QualityQuery.getNames()",1,1,1
"org.apache.lucene.benchmark.quality.QualityQuery.getQueryID()",1,1,1
"org.apache.lucene.benchmark.quality.QualityQuery.getValue(String)",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.QualityStats(double,long)",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.RecallPoint.RecallPoint(int,double)",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.RecallPoint.getRank()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.RecallPoint.getRecall()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.addResult(int,boolean,long)",2,3,8
"org.apache.lucene.benchmark.quality.QualityStats.average(QualityStats[])",2,4,6
"org.apache.lucene.benchmark.quality.QualityStats.format(String,int)",1,1,2
"org.apache.lucene.benchmark.quality.QualityStats.fracFormat(String)",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getAvp()",1,1,2
"org.apache.lucene.benchmark.quality.QualityStats.getDocNamesExtractTime()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getMRR()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getMaxGoodPoints()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getNumGoodPoints()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getNumPoints()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getPrecisionAt(int)",3,1,4
"org.apache.lucene.benchmark.quality.QualityStats.getRecall()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getRecallPoints()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getSearchTime()",1,1,1
"org.apache.lucene.benchmark.quality.QualityStats.log(String,int,PrintWriter,String)",1,6,8
"org.apache.lucene.benchmark.quality.TestQualityRun.createReutersIndex()",1,1,1
"org.apache.lucene.benchmark.quality.TestQualityRun.setUp()",1,1,1
"org.apache.lucene.benchmark.quality.TestQualityRun.testTrecQuality()",2,9,14
"org.apache.lucene.benchmark.quality.TestQualityRun.testTrecTopicsReader()",1,1,1
"org.apache.lucene.benchmark.quality.trec.QueryDriver.main(String[])",1,5,7
"org.apache.lucene.benchmark.quality.trec.Trec1MQReader.Trec1MQReader(String)",1,1,1
"org.apache.lucene.benchmark.quality.trec.Trec1MQReader.readQueries(BufferedReader)",3,2,3
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement.QRelJudgement(String)",1,1,1
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement.addRelevandDoc(String)",1,1,1
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement.isRelevant(String)",1,1,1
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement.maxRecall()",1,1,1
"org.apache.lucene.benchmark.quality.trec.TrecJudge.TrecJudge(BufferedReader)",3,7,8
"org.apache.lucene.benchmark.quality.trec.TrecJudge.isRelevant(String,QualityQuery)",1,2,2
"org.apache.lucene.benchmark.quality.trec.TrecJudge.maxRecall(QualityQuery)",2,2,2
"org.apache.lucene.benchmark.quality.trec.TrecJudge.validateData(QualityQuery[],PrintWriter)",1,9,9
"org.apache.lucene.benchmark.quality.trec.TrecTopicsReader.TrecTopicsReader()",1,1,1
"org.apache.lucene.benchmark.quality.trec.TrecTopicsReader.read(BufferedReader,String,StringBuilder,boolean,boolean)",4,5,7
"org.apache.lucene.benchmark.quality.trec.TrecTopicsReader.readQueries(BufferedReader)",6,6,8
"org.apache.lucene.benchmark.quality.utils.DocNameExtractor.DocNameExtractor(String)",1,1,2
"org.apache.lucene.benchmark.quality.utils.DocNameExtractor.docName(IndexSearcher,int)",1,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.QualityQueriesFinder(Directory)",1,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.TermDf.TermDf(String,int)",1,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.TermsDfQueue.TermsDfQueue(int)",1,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.TermsDfQueue.lessThan(TermDf,TermDf)",1,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestQueries(String,int)",1,1,2
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestTerms(String,int)",3,4,5
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.formatQueryAsTrecTopic(int,String,String,String)",1,1,4
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.main(String[])",1,3,3
"org.apache.lucene.benchmark.quality.utils.SimpleQQParser.SimpleQQParser(String,String)",1,1,1
"org.apache.lucene.benchmark.quality.utils.SimpleQQParser.SimpleQQParser(String[],String)",1,1,1
"org.apache.lucene.benchmark.quality.utils.SimpleQQParser.parse(QualityQuery)",1,3,3
"org.apache.lucene.benchmark.quality.utils.SubmissionReport.SubmissionReport(PrintWriter,String)",1,1,1
"org.apache.lucene.benchmark.quality.utils.SubmissionReport.flush()",1,2,2
"org.apache.lucene.benchmark.quality.utils.SubmissionReport.format(String,int)",1,1,2
"org.apache.lucene.benchmark.quality.utils.SubmissionReport.report(QualityQuery,TopDocs,String,IndexSearcher)",2,2,3
"org.apache.lucene.benchmark.utils.ExtractReuters.ExtractReuters(File,File)",1,2,2
"org.apache.lucene.benchmark.utils.ExtractReuters.extract()",1,3,4
"org.apache.lucene.benchmark.utils.ExtractReuters.extractFile(File)",1,7,8
"org.apache.lucene.benchmark.utils.ExtractReuters.main(String[])",3,3,3
"org.apache.lucene.benchmark.utils.ExtractReuters.usage(String)",1,1,1
"org.apache.lucene.benchmark.utils.ExtractWikipedia.ExtractWikipedia(DocMaker,File)",1,2,2
"org.apache.lucene.benchmark.utils.ExtractWikipedia.create(String,String,String,String)",1,1,2
"org.apache.lucene.benchmark.utils.ExtractWikipedia.directory(int,File)",2,1,4
"org.apache.lucene.benchmark.utils.ExtractWikipedia.extract()",1,2,3
"org.apache.lucene.benchmark.utils.ExtractWikipedia.main(String[])",1,8,9
"org.apache.lucene.benchmark.utils.ExtractWikipedia.printUsage()",1,1,1
"org.apache.lucene.collation.CollationKeyAnalyzer.CollationKeyAnalyzer(Collator)",1,1,1
"org.apache.lucene.collation.CollationKeyAnalyzer.reusableTokenStream(String,Reader)",1,2,2
"org.apache.lucene.collation.CollationKeyAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.collation.CollationKeyFilter.CollationKeyFilter(TokenStream,Collator)",1,1,1
"org.apache.lucene.collation.CollationKeyFilter.incrementToken()",2,2,2
"org.apache.lucene.collation.ICUCollationKeyAnalyzer.ICUCollationKeyAnalyzer(Collator)",1,1,1
"org.apache.lucene.collation.ICUCollationKeyAnalyzer.reusableTokenStream(String,Reader)",1,2,2
"org.apache.lucene.collation.ICUCollationKeyAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.collation.ICUCollationKeyFilter.ICUCollationKeyFilter(TokenStream,Collator)",1,1,2
"org.apache.lucene.collation.ICUCollationKeyFilter.incrementToken()",2,3,3
"org.apache.lucene.collation.TestCollationKeyAnalyzer.testCollationKeySort()",1,1,2
"org.apache.lucene.collation.TestCollationKeyAnalyzer.testFarsiRangeFilterCollating()",1,1,1
"org.apache.lucene.collation.TestCollationKeyAnalyzer.testFarsiRangeQueryCollating()",1,1,1
"org.apache.lucene.collation.TestCollationKeyAnalyzer.testFarsiTermRangeQuery()",1,1,1
"org.apache.lucene.collation.TestCollationKeyAnalyzer.testThreadSafe()",1,2,2
"org.apache.lucene.collation.TestCollationKeyFilter.TestAnalyzer.TestAnalyzer(Collator)",1,1,1
"org.apache.lucene.collation.TestCollationKeyFilter.TestAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.collation.TestCollationKeyFilter.testCollationKeySort()",1,1,2
"org.apache.lucene.collation.TestCollationKeyFilter.testFarsiRangeFilterCollating()",1,1,1
"org.apache.lucene.collation.TestCollationKeyFilter.testFarsiRangeQueryCollating()",1,1,1
"org.apache.lucene.collation.TestCollationKeyFilter.testFarsiTermRangeQuery()",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testCollationKeySort()",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testFarsiRangeFilterCollating()",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testFarsiRangeQueryCollating()",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testFarsiTermRangeQuery()",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testThreadSafe()",1,2,2
"org.apache.lucene.collation.TestICUCollationKeyFilter.TestAnalyzer.TestAnalyzer(Collator)",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.TestAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.testCollationKeySort()",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.testFarsiRangeFilterCollating()",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.testFarsiRangeQueryCollating()",1,1,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.testFarsiTermRangeQuery()",1,1,1
"org.apache.lucene.demo.IndexFiles.IndexFiles()",1,1,1
"org.apache.lucene.demo.IndexFiles.indexDocs(IndexWriter,File)",3,6,7
"org.apache.lucene.demo.IndexFiles.main(String[])",1,9,10
"org.apache.lucene.demo.SearchFiles.SearchFiles()",1,1,1
"org.apache.lucene.demo.SearchFiles.doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean)",14,16,22
"org.apache.lucene.demo.SearchFiles.main(String[])",5,19,25
"org.apache.lucene.demo.TestDemo.testIndexSearch()",1,1,1
"org.apache.lucene.demo.TestDemo.testOneSearch(File,String,int)",1,1,1
"org.apache.lucene.document.AbstractField.AbstractField()",1,1,1
"org.apache.lucene.document.AbstractField.AbstractField(String,Store,Index,TermVector)",2,1,2
"org.apache.lucene.document.AbstractField.getBinaryLength()",3,1,3
"org.apache.lucene.document.AbstractField.getBinaryOffset()",1,1,1
"org.apache.lucene.document.AbstractField.getBinaryValue()",1,1,1
"org.apache.lucene.document.AbstractField.getBinaryValue(byte[])",2,1,3
"org.apache.lucene.document.AbstractField.getBoost()",1,1,1
"org.apache.lucene.document.AbstractField.getIndexOptions()",1,1,1
"org.apache.lucene.document.AbstractField.getOmitNorms()",1,1,1
"org.apache.lucene.document.AbstractField.getOmitTermFreqAndPositions()",1,1,1
"org.apache.lucene.document.AbstractField.isBinary()",1,1,1
"org.apache.lucene.document.AbstractField.isIndexed()",1,1,1
"org.apache.lucene.document.AbstractField.isLazy()",1,1,1
"org.apache.lucene.document.AbstractField.isStoreOffsetWithTermVector()",1,1,1
"org.apache.lucene.document.AbstractField.isStorePositionWithTermVector()",1,1,1
"org.apache.lucene.document.AbstractField.isStored()",1,1,1
"org.apache.lucene.document.AbstractField.isTermVectorStored()",1,1,1
"org.apache.lucene.document.AbstractField.isTokenized()",1,1,1
"org.apache.lucene.document.AbstractField.name()",1,1,1
"org.apache.lucene.document.AbstractField.setBoost(float)",1,1,1
"org.apache.lucene.document.AbstractField.setIndexOptions(IndexOptions)",1,1,1
"org.apache.lucene.document.AbstractField.setOmitNorms(boolean)",1,1,1
"org.apache.lucene.document.AbstractField.setOmitTermFreqAndPositions(boolean)",1,1,2
"org.apache.lucene.document.AbstractField.setStoreTermVector(TermVector)",1,1,1
"org.apache.lucene.document.AbstractField.toString()",1,18,19
"org.apache.lucene.document.CompressionTools.CompressionTools()",1,1,1
"org.apache.lucene.document.CompressionTools.compress(byte[])",1,1,1
"org.apache.lucene.document.CompressionTools.compress(byte[],int,int)",1,1,1
"org.apache.lucene.document.CompressionTools.compress(byte[],int,int,int)",1,2,2
"org.apache.lucene.document.CompressionTools.compressString(String)",1,1,1
"org.apache.lucene.document.CompressionTools.compressString(String,int)",1,1,1
"org.apache.lucene.document.CompressionTools.decompress(byte[])",1,2,2
"org.apache.lucene.document.CompressionTools.decompressString(byte[])",1,1,1
"org.apache.lucene.document.DateField.DateField()",1,1,1
"org.apache.lucene.document.DateField.MAX_DATE_STRING()",1,1,2
"org.apache.lucene.document.DateField.MIN_DATE_STRING()",1,1,1
"org.apache.lucene.document.DateField.dateToString(Date)",1,1,1
"org.apache.lucene.document.DateField.stringToDate(String)",1,1,1
"org.apache.lucene.document.DateField.stringToTime(String)",1,1,1
"org.apache.lucene.document.DateField.timeToString(long)",3,3,5
"org.apache.lucene.document.DateTools.DateTools()",1,1,1
"org.apache.lucene.document.DateTools.Resolution.Resolution(int)",1,1,1
"org.apache.lucene.document.DateTools.Resolution.toString()",1,1,1
"org.apache.lucene.document.DateTools.dateToString(Date,Resolution)",1,1,1
"org.apache.lucene.document.DateTools.round(Date,Resolution)",1,1,1
"org.apache.lucene.document.DateTools.round(long,Resolution)",2,8,9
"org.apache.lucene.document.DateTools.stringToDate(String)",1,1,2
"org.apache.lucene.document.DateTools.stringToTime(String)",1,1,1
"org.apache.lucene.document.DateTools.timeToString(long,Resolution)",1,1,1
"org.apache.lucene.document.Document.Document()",1,1,1
"org.apache.lucene.document.Document.add(Fieldable)",1,1,1
"org.apache.lucene.document.Document.get(String)",3,4,4
"org.apache.lucene.document.Document.getBinaryValue(String)",3,4,4
"org.apache.lucene.document.Document.getBinaryValues(String)",2,4,5
"org.apache.lucene.document.Document.getBoost()",1,1,1
"org.apache.lucene.document.Document.getField(String)",1,1,1
"org.apache.lucene.document.Document.getFieldable(String)",3,2,3
"org.apache.lucene.document.Document.getFieldables(String)",2,3,4
"org.apache.lucene.document.Document.getFields()",1,1,1
"org.apache.lucene.document.Document.getFields(String)",2,3,4
"org.apache.lucene.document.Document.getValues(String)",2,4,5
"org.apache.lucene.document.Document.removeField(String)",3,3,3
"org.apache.lucene.document.Document.removeFields(String)",1,3,3
"org.apache.lucene.document.Document.setBoost(float)",1,1,1
"org.apache.lucene.document.Document.toString()",1,3,3
"org.apache.lucene.document.Field.Field(String,Reader)",1,1,1
"org.apache.lucene.document.Field.Field(String,Reader,TermVector)",3,1,3
"org.apache.lucene.document.Field.Field(String,String,Store,Index)",1,1,1
"org.apache.lucene.document.Field.Field(String,String,Store,Index,TermVector)",1,1,1
"org.apache.lucene.document.Field.Field(String,TokenStream)",1,1,1
"org.apache.lucene.document.Field.Field(String,TokenStream,TermVector)",3,1,3
"org.apache.lucene.document.Field.Field(String,boolean,String,Store,Index,TermVector)",5,2,9
"org.apache.lucene.document.Field.Field(String,byte[])",1,1,1
"org.apache.lucene.document.Field.Field(String,byte[],Store)",2,1,2
"org.apache.lucene.document.Field.Field(String,byte[],int,int)",3,1,3
"org.apache.lucene.document.Field.Field(String,byte[],int,int,Store)",2,1,2
"org.apache.lucene.document.Field.Index.toIndex(boolean,boolean)",1,1,1
"org.apache.lucene.document.Field.Index.toIndex(boolean,boolean,boolean)",5,1,5
"org.apache.lucene.document.Field.TermVector.toTermVector(boolean,boolean,boolean)",5,1,5
"org.apache.lucene.document.Field.readerValue()",1,1,2
"org.apache.lucene.document.Field.setTokenStream(TokenStream)",1,1,1
"org.apache.lucene.document.Field.setValue(Reader)",3,1,3
"org.apache.lucene.document.Field.setValue(String)",2,1,2
"org.apache.lucene.document.Field.setValue(byte[])",2,1,2
"org.apache.lucene.document.Field.setValue(byte[],int,int)",2,1,2
"org.apache.lucene.document.Field.stringValue()",1,1,2
"org.apache.lucene.document.Field.tokenStreamValue()",1,1,1
"org.apache.lucene.document.LoadFirstFieldSelector.accept(String)",1,1,1
"org.apache.lucene.document.MapFieldSelector.MapFieldSelector(List<String>)",1,2,2
"org.apache.lucene.document.MapFieldSelector.MapFieldSelector(Map<String, FieldSelectorResult>)",1,1,1
"org.apache.lucene.document.MapFieldSelector.MapFieldSelector(String...)",1,1,1
"org.apache.lucene.document.MapFieldSelector.accept(String)",1,1,2
"org.apache.lucene.document.NumberTools.longToString(long)",2,3,4
"org.apache.lucene.document.NumberTools.stringToLong(String)",6,1,6
"org.apache.lucene.document.NumericField.NumericField(String)",1,1,1
"org.apache.lucene.document.NumericField.NumericField(String,Store,boolean)",1,1,1
"org.apache.lucene.document.NumericField.NumericField(String,int)",1,1,1
"org.apache.lucene.document.NumericField.NumericField(String,int,Store,boolean)",2,1,3
"org.apache.lucene.document.NumericField.getBinaryValue(byte[])",1,1,1
"org.apache.lucene.document.NumericField.getDataType()",1,1,1
"org.apache.lucene.document.NumericField.getNumericValue()",1,1,1
"org.apache.lucene.document.NumericField.getPrecisionStep()",1,1,1
"org.apache.lucene.document.NumericField.readerValue()",1,1,1
"org.apache.lucene.document.NumericField.setDoubleValue(double)",1,2,2
"org.apache.lucene.document.NumericField.setFloatValue(float)",1,2,2
"org.apache.lucene.document.NumericField.setIntValue(int)",1,2,2
"org.apache.lucene.document.NumericField.setLongValue(long)",1,2,2
"org.apache.lucene.document.NumericField.stringValue()",1,2,2
"org.apache.lucene.document.NumericField.tokenStreamValue()",3,4,9
"org.apache.lucene.document.SetBasedFieldSelector.SetBasedFieldSelector(Set<String>,Set<String>)",1,1,1
"org.apache.lucene.document.SetBasedFieldSelector.accept(String)",1,1,3
"org.apache.lucene.document.TestBinaryDocument.testBinaryFieldInIndex()",1,1,2
"org.apache.lucene.document.TestBinaryDocument.testCompressionTools()",1,1,1
"org.apache.lucene.document.TestDateTools.isoFormat(Date)",1,1,1
"org.apache.lucene.document.TestDateTools.testDateAndTimetoString()",1,1,1
"org.apache.lucene.document.TestDateTools.testDateToolsUTC()",1,1,1
"org.apache.lucene.document.TestDateTools.testRound()",1,1,1
"org.apache.lucene.document.TestDateTools.testStringToDate()",1,1,4
"org.apache.lucene.document.TestDateTools.testStringtoTime()",1,1,1
"org.apache.lucene.document.TestDocument.doAssert(Document,boolean)",1,3,3
"org.apache.lucene.document.TestDocument.makeDocumentWithFields()",1,1,1
"org.apache.lucene.document.TestDocument.testBinaryField()",1,1,1
"org.apache.lucene.document.TestDocument.testBoost()",1,1,2
"org.apache.lucene.document.TestDocument.testConstructorExceptions()",1,1,3
"org.apache.lucene.document.TestDocument.testFieldSetValue()",1,5,5
"org.apache.lucene.document.TestDocument.testFieldSetValueChangeBinary()",1,1,3
"org.apache.lucene.document.TestDocument.testGetValuesForIndexedDocument()",1,1,1
"org.apache.lucene.document.TestDocument.testGetValuesForNewDocument()",1,1,1
"org.apache.lucene.document.TestDocument.testRemoveForNewDocument()",1,1,1
"org.apache.lucene.document.TestNumberTools.subtestTwoLongs(long,long)",1,3,3
"org.apache.lucene.document.TestNumberTools.testMax()",1,2,2
"org.apache.lucene.document.TestNumberTools.testMin()",1,2,2
"org.apache.lucene.document.TestNumberTools.testNearZero()",1,3,3
"org.apache.lucene.facet.FacetException.FacetException()",1,1,1
"org.apache.lucene.facet.FacetException.FacetException(String)",1,1,1
"org.apache.lucene.facet.FacetException.FacetException(String,Throwable)",1,1,1
"org.apache.lucene.facet.FacetException.FacetException(Throwable)",1,1,1
"org.apache.lucene.facet.FacetTestBase.NotSameResultError.NotSameResultError()",1,1,1
"org.apache.lucene.facet.FacetTestBase.SearchTaxoDirPair.SearchTaxoDirPair()",1,1,1
"org.apache.lucene.facet.FacetTestBase.afterClassFacetTestBase()",1,2,2
"org.apache.lucene.facet.FacetTestBase.assertCountsAndCardinality(Map<CategoryPath, Integer>,FacetResultNode,int)",1,3,3
"org.apache.lucene.facet.FacetTestBase.assertCountsAndCardinality(Map<CategoryPath, Integer>,List<FacetResult>)",1,3,3
"org.apache.lucene.facet.FacetTestBase.assertSameResults(List<FacetResult>,List<FacetResult>)",2,2,2
"org.apache.lucene.facet.FacetTestBase.beforeClassFacetTestBase()",1,1,1
"org.apache.lucene.facet.FacetTestBase.closeAll()",1,1,1
"org.apache.lucene.facet.FacetTestBase.facetCountsTruth()",5,4,7
"org.apache.lucene.facet.FacetTestBase.getAnalyzer()",1,1,1
"org.apache.lucene.facet.FacetTestBase.getCategories(int)",1,1,1
"org.apache.lucene.facet.FacetTestBase.getContent(int)",1,1,1
"org.apache.lucene.facet.FacetTestBase.getFacetIndexingParams(int)",1,1,1
"org.apache.lucene.facet.FacetTestBase.getFacetedSearchParams()",1,1,1
"org.apache.lucene.facet.FacetTestBase.getFacetedSearchParams(int)",1,1,1
"org.apache.lucene.facet.FacetTestBase.getIndexWriterConfig(Analyzer)",1,1,1
"org.apache.lucene.facet.FacetTestBase.indexDoc(FacetIndexingParams,RandomIndexWriter,TaxonomyWriter,String,List<CategoryPath>)",1,1,1
"org.apache.lucene.facet.FacetTestBase.initIndex()",1,1,1
"org.apache.lucene.facet.FacetTestBase.initIndex(int)",1,1,1
"org.apache.lucene.facet.FacetTestBase.initIndex(int,boolean)",1,4,4
"org.apache.lucene.facet.FacetTestBase.numDocsToIndex()",1,1,1
"org.apache.lucene.facet.FacetTestBase.populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams)",1,2,2
"org.apache.lucene.facet.FacetTestBase.resStringValueOnly(List<FacetResult>)",1,2,2
"org.apache.lucene.facet.FacetTestBase.resultNodesAsArray(FacetResultNode)",1,2,2
"org.apache.lucene.facet.FacetTestUtils.IndexTaxonomyReaderPair.close()",1,1,1
"org.apache.lucene.facet.FacetTestUtils.IndexTaxonomyWriterPair.close()",1,1,1
"org.apache.lucene.facet.FacetTestUtils.IndexTaxonomyWriterPair.commit()",1,1,1
"org.apache.lucene.facet.FacetTestUtils.add(FacetIndexingParams,RandomIndexWriter,TaxonomyWriter,String...)",1,1,1
"org.apache.lucene.facet.FacetTestUtils.createIndexTaxonomyDirs(int)",1,2,2
"org.apache.lucene.facet.FacetTestUtils.createIndexTaxonomyReaderPair(Directory[][])",1,2,2
"org.apache.lucene.facet.FacetTestUtils.createIndexTaxonomyWriterPair(Directory[][])",1,2,2
"org.apache.lucene.facet.FacetTestUtils.search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...)",1,2,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.equals(Object)",2,1,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.extractCategoryTokenData(byte[],int,int)",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.generatesCategoryList()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.getCategoryListTermText()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.getCategoryTokenBytes(CategoryAttribute)",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.getRetainableProperty()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.hashCode()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.equals(Object)",2,1,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.extractCategoryTokenData(byte[],int,int)",2,1,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.generatesCategoryList()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.getCategoryListTermText()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.getCategoryTokenBytes(CategoryAttribute)",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.getRetainableProperty()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.hashCode()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.equals(Object)",2,1,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.extractCategoryTokenData(byte[],int,int)",2,1,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.generatesCategoryList()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.getCategoryListTermText()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.getCategoryTokenBytes(CategoryAttribute)",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.getRetainableProperty()",1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.hashCode()",1,1,1
"org.apache.lucene.facet.enhancements.EnhancementsCategoryTokenizer.EnhancementsCategoryTokenizer(TokenStream,EnhancementsIndexingParams)",1,2,2
"org.apache.lucene.facet.enhancements.EnhancementsCategoryTokenizer.setPayload()",2,7,8
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder.EnhancementsDocumentBuilder(TaxonomyWriter,EnhancementsIndexingParams)",1,1,1
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder.getCategoryListTokenizer(TokenStream)",1,3,3
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder.getCategoryTokenizer(TokenStream)",1,1,1
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder.getParentsStream(CategoryAttributesStream)",2,3,3
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIterator.EnhancementsPayloadIterator(List<CategoryEnhancement>,IndexReader,Term)",1,1,1
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIterator.getCategoryData(CategoryEnhancement)",3,3,3
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIterator.setdoc(int)",2,2,4
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.buildAssociationIndex()",1,2,2
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.closeDirectories()",1,1,1
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.testEmptyIterator()",1,1,1
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.testFullIterator()",1,1,1
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.testPartialIterator()",1,1,1
"org.apache.lucene.facet.enhancements.TwoEnhancementsTest.testTwoEmptyAndNonEmptyByteArrays()",1,1,1
"org.apache.lucene.facet.enhancements.TwoEnhancementsTest.testTwoNonEmptyByteArrays()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.equals(Object)",2,1,2
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.extractCategoryTokenData(byte[],int,int)",2,1,2
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.generatesCategoryList()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getAssociationProperty(CategoryAttribute)",4,3,4
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getCategoryListTermText()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getCategoryTokenBytes(CategoryAttribute)",2,1,2
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getRetainableProperty()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.hashCode()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.isAssociationProperty(Class<? extends CategoryProperty>)",4,2,4
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.AssociationFloatProperty(float)",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.equals(Object)",3,1,3
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.getFloatAssociation()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.hashCode()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.merge(CategoryProperty)",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.toString()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty.AssociationIntProperty(int)",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty.equals(Object)",3,1,3
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty.hashCode()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty.merge(CategoryProperty)",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationListTokenizer.AssociationListTokenizer(TokenStream,EnhancementsIndexingParams,CategoryEnhancement)",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationListTokenizer.handleStartOfInput()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationListTokenizer.incrementToken()",6,6,8
"org.apache.lucene.facet.enhancements.association.AssociationProperty.AssociationProperty(int)",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationProperty.getAssociation()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationProperty.hasBeenSet()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationProperty.toString()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationPropertyTest.testAssociationCountProperty()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationPropertyTest.testAssociationFloatProperty()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationPropertyTest.testEquals()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.AssociationsPayloadIterator(IndexReader,String)",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.equals(Object)",7,2,7
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.fetchAssociations(int)",6,2,6
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.getAssociatedOrdinals()",1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.getAssociation(int)",2,2,2
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.hashCode()",1,2,2
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.setNextDoc(int)",1,2,2
"org.apache.lucene.facet.enhancements.association.CustomAssociationPropertyTest.testCustomProperty()",1,3,3
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.DefaultEnhancementsIndexingParams(CategoryEnhancement...)",1,1,1
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.DefaultEnhancementsIndexingParams(CategoryListParams,CategoryEnhancement...)",1,1,1
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.addCategoryEnhancements(CategoryEnhancement...)",1,2,3
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.getCategoryEnhancements()",2,2,3
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.getRetainableProperties()",3,3,5
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.validateparams(CategoryEnhancement...)",2,1,3
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParamsTest.testCategoryEnhancements()",1,1,1
"org.apache.lucene.facet.example.ExampleResult.getFacetResults()",1,1,1
"org.apache.lucene.facet.example.ExampleResult.setFacetResults(List<FacetResult>)",1,1,1
"org.apache.lucene.facet.example.ExampleUtils.log(Object)",1,2,2
"org.apache.lucene.facet.example.TestAdaptiveExample.testAdaptive()",1,1,1
"org.apache.lucene.facet.example.TestAssociationExample.assertExampleResult(ExampleResult,double[])",1,2,2
"org.apache.lucene.facet.example.TestAssociationExample.testAssociationExamples()",1,1,1
"org.apache.lucene.facet.example.TestMultiCLExample.assertCorrectMultiResults(ExampleResult)",1,1,1
"org.apache.lucene.facet.example.TestMultiCLExample.testMulti()",1,1,1
"org.apache.lucene.facet.example.TestSimpleExample.testDrillDown()",1,1,1
"org.apache.lucene.facet.example.TestSimpleExample.testSimple()",1,1,1
"org.apache.lucene.facet.example.adaptive.AdaptiveMain.main(String[])",1,1,1
"org.apache.lucene.facet.example.adaptive.AdaptiveMain.runSample()",1,1,1
"org.apache.lucene.facet.example.adaptive.AdaptiveSearcher.searchWithFacets(Directory,Directory)",1,2,2
"org.apache.lucene.facet.example.association.AssociationIndexer.index(Directory,Directory)",1,4,4
"org.apache.lucene.facet.example.association.AssociationMain.main(String[])",1,1,1
"org.apache.lucene.facet.example.association.AssociationMain.runSumFloatAssociationSample()",1,1,1
"org.apache.lucene.facet.example.association.AssociationMain.runSumIntAssociationSample()",1,1,1
"org.apache.lucene.facet.example.association.AssociationSearcher.searchSumFloatAssociation(Directory,Directory)",1,1,1
"org.apache.lucene.facet.example.association.AssociationSearcher.searchSumIntAssociation(Directory,Directory)",1,1,1
"org.apache.lucene.facet.example.merge.TaxonomyMergeUtils.merge(Directory,Directory,Directory,Directory)",1,1,1
"org.apache.lucene.facet.example.merge.TaxonomyMergeUtils.merge(Directory,Directory,IndexWriter,DirectoryTaxonomyWriter)",1,1,1
"org.apache.lucene.facet.example.merge.TaxonomyMergeUtils.merge(Directory,Directory,OrdinalMap,IndexWriter,DirectoryTaxonomyWriter)",1,1,1
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer.index(Directory,Directory)",1,5,5
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer.index(Directory,Directory,FacetIndexingParams,String[],String[],CategoryPath[][])",1,1,1
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer.index(IndexWriter,DirectoryTaxonomyWriter,FacetIndexingParams,String[],String[],CategoryPath[][])",1,2,2
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer.main(String[])",1,1,1
"org.apache.lucene.facet.example.multiCL.MultiCLMain.main(String[])",1,1,1
"org.apache.lucene.facet.example.multiCL.MultiCLMain.runSample()",1,1,1
"org.apache.lucene.facet.example.multiCL.MultiCLSearcher.searchWithFacets(Directory,Directory,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.example.multiCL.MultiCLSearcher.searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams)",1,2,2
"org.apache.lucene.facet.example.simple.SimpleIndexer.index(Directory,Directory)",1,2,2
"org.apache.lucene.facet.example.simple.SimpleMain.main(String[])",1,1,1
"org.apache.lucene.facet.example.simple.SimpleMain.runDrillDown()",1,1,1
"org.apache.lucene.facet.example.simple.SimpleMain.runSimple()",1,1,1
"org.apache.lucene.facet.example.simple.SimpleSearcher.searchWithDrillDown(IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.example.simple.SimpleSearcher.searchWithFacets(IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.example.simple.SimpleSearcher.searchWithRequest(IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...)",1,1,1
"org.apache.lucene.facet.example.simple.SimpleSearcher.searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...)",1,3,4
"org.apache.lucene.facet.example.simple.SimpleUtils.categoryPathArrayToList(CategoryPath...)",1,2,2
"org.apache.lucene.facet.index.CategoryContainer.CategoryContainer()",1,1,1
"org.apache.lucene.facet.index.CategoryContainer.addCategory(CategoryAttribute)",1,3,3
"org.apache.lucene.facet.index.CategoryContainer.addCategory(CategoryPath)",1,1,1
"org.apache.lucene.facet.index.CategoryContainer.addCategory(CategoryPath,CategoryProperty)",1,1,1
"org.apache.lucene.facet.index.CategoryContainer.addCategory(CategoryPath,CategoryProperty...)",1,2,2
"org.apache.lucene.facet.index.CategoryContainer.clear()",1,1,1
"org.apache.lucene.facet.index.CategoryContainer.deserializeCategoryAttribute(ObjectInputStream)",1,3,3
"org.apache.lucene.facet.index.CategoryContainer.equals(Object)",2,1,2
"org.apache.lucene.facet.index.CategoryContainer.getCategoryAttribute(CategoryPath)",1,1,1
"org.apache.lucene.facet.index.CategoryContainer.hashCode()",1,1,1
"org.apache.lucene.facet.index.CategoryContainer.iterator()",1,1,1
"org.apache.lucene.facet.index.CategoryContainer.mapCategoryAttribute(CategoryPath)",1,2,2
"org.apache.lucene.facet.index.CategoryContainer.merge(CategoryContainer)",1,2,2
"org.apache.lucene.facet.index.CategoryContainer.readObject(ObjectInputStream)",1,2,2
"org.apache.lucene.facet.index.CategoryContainer.serializeCategoryAttribute(ObjectOutputStream,CategoryAttribute)",1,3,3
"org.apache.lucene.facet.index.CategoryContainer.size()",1,1,1
"org.apache.lucene.facet.index.CategoryContainer.toString()",1,2,2
"org.apache.lucene.facet.index.CategoryContainer.writeObject(ObjectOutputStream)",1,2,2
"org.apache.lucene.facet.index.CategoryContainerTest.basicTest()",1,1,1
"org.apache.lucene.facet.index.CategoryContainerTest.testAddCategoryAttributeWithProperty()",1,2,3
"org.apache.lucene.facet.index.CategoryContainerTest.testAddCategoryAttributeWithoutProperties()",1,1,1
"org.apache.lucene.facet.index.CategoryContainerTest.testAddNewCategoryWithProperty()",1,2,3
"org.apache.lucene.facet.index.CategoryContainerTest.testCategoryAttributeMerge()",1,3,3
"org.apache.lucene.facet.index.CategoryContainerTest.testCategoryAttributesStream()",1,1,2
"org.apache.lucene.facet.index.CategoryContainerTest.testExistingNewCategoryWithProperty()",1,2,3
"org.apache.lucene.facet.index.CategoryContainerTest.testIterator()",1,2,2
"org.apache.lucene.facet.index.CategoryContainerTest.testMultipleCategoriesWithProperties()",1,2,4
"org.apache.lucene.facet.index.CategoryContainerTest.testSerialization()",1,1,1
"org.apache.lucene.facet.index.CategoryContainerTestBase.setCategoryContainer()",1,2,2
"org.apache.lucene.facet.index.CategoryDocumentBuilder.CategoryDocumentBuilder(TaxonomyWriter)",1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.CategoryDocumentBuilder(TaxonomyWriter,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.build(Document)",1,2,2
"org.apache.lucene.facet.index.CategoryDocumentBuilder.fillCategoriesMap(Iterable<CategoryAttribute>)",1,3,3
"org.apache.lucene.facet.index.CategoryDocumentBuilder.getCategoryListTokenizer(TokenStream)",1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.getCategoryTokenizer(TokenStream)",1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.getCountingListTokenizer(TokenStream)",1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.getParentsStream(CategoryAttributesStream)",1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.setCategories(Iterable<CategoryAttribute>)",2,2,3
"org.apache.lucene.facet.index.CategoryDocumentBuilder.setCategoryPaths(Iterable<CategoryPath>)",2,2,2
"org.apache.lucene.facet.index.CategoryListPayloadStream.CategoryListPayloadStream(IntEncoder)",1,1,1
"org.apache.lucene.facet.index.CategoryListPayloadStream.appendIntToStream(int)",1,1,1
"org.apache.lucene.facet.index.CategoryListPayloadStream.convertStreamToByteArray()",1,1,2
"org.apache.lucene.facet.index.CategoryListPayloadStream.reset()",1,1,1
"org.apache.lucene.facet.index.CategoryListPayloadStreamTest.testStream()",1,1,1
"org.apache.lucene.facet.index.DummyProperty.equals(Object)",2,1,2
"org.apache.lucene.facet.index.DummyProperty.hashCode()",1,1,1
"org.apache.lucene.facet.index.DummyProperty.merge(CategoryProperty)",1,1,1
"org.apache.lucene.facet.index.DummyProperty.toString()",1,1,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsDirPayloadProcessor.FacetsDirPayloadProcessor(FacetIndexingParams,int[])",1,2,2
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsDirPayloadProcessor.getProcessor(Term)",2,1,2
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessor.FacetsPayloadProcessor(CategoryListParams,int[])",1,1,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessor.payloadLength()",1,1,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessor.processPayload(byte[],int,int)",1,2,2
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessorProvider(Directory,int[],FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.getReaderProcessor(IndexReader)",1,1,2
"org.apache.lucene.facet.index.FacetsPayloadProcessorProviderTest.buildIndexWithFacets(Directory,Directory,boolean)",1,3,4
"org.apache.lucene.facet.index.FacetsPayloadProcessorProviderTest.testTaxonomyMergeUtils()",1,1,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProviderTest.verifyResults(Directory,Directory)",1,3,3
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.CategoryAttributeImpl()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.CategoryAttributeImpl(CategoryPath)",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.addProperty(CategoryProperty)",1,2,3
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.clear()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.clearProperties()",1,2,2
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.clone()",1,4,4
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.equals(Object)",6,4,8
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.getCategoryPath()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.getProperty(Class<? extends CategoryProperty>)",2,1,2
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.getProperty(Collection<Class<? extends CategoryProperty>>)",4,2,4
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.getPropertyClasses()",2,2,3
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.hashCode()",2,3,4
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.remove(Class<? extends CategoryProperty>)",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.set(CategoryAttribute)",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.setCategoryPath(CategoryPath)",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImplTest.testCategoryPath()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImplTest.testCloneCopyToAndSet()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImplTest.testProperties()",1,2,3
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterable(Iterable<CategoryPath>)",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator.CategoryAttributesIterator(Iterable<CategoryPath>)",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator.hasNext()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator.next()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator.remove()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.iterator()",1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterableTest.testIterator()",1,3,3
"org.apache.lucene.facet.index.attributes.OrdinalProperty.clear()",1,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.equals(Object)",3,1,3
"org.apache.lucene.facet.index.attributes.OrdinalProperty.getOrdinal()",1,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.hasBeenSet()",1,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.hashCode()",1,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.merge(CategoryProperty)",1,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.setOrdinal(int)",1,1,1
"org.apache.lucene.facet.index.categorypolicy.DefaultOrdinalPolicy.init(TaxonomyWriter)",1,1,1
"org.apache.lucene.facet.index.categorypolicy.DefaultOrdinalPolicy.shouldAdd(int)",1,1,1
"org.apache.lucene.facet.index.categorypolicy.DefaultPathPolicy.shouldAdd(CategoryPath)",1,1,1
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelOrdinalPolicy.NonTopLevelOrdinalPolicy()",1,1,1
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelOrdinalPolicy.init(TaxonomyWriter)",1,1,1
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelOrdinalPolicy.shouldAdd(int)",3,2,4
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelPathPolicy.shouldAdd(CategoryPath)",1,1,1
"org.apache.lucene.facet.index.categorypolicy.OrdinalPolicyTest.testDefaultOrdinalPolicy()",1,2,2
"org.apache.lucene.facet.index.categorypolicy.OrdinalPolicyTest.testNonTopLevelOrdinalPolicy()",1,6,6
"org.apache.lucene.facet.index.categorypolicy.PathPolicyTest.testDefaultPathPolicy()",1,3,3
"org.apache.lucene.facet.index.categorypolicy.PathPolicyTest.testNonTopLevelPathPolicy()",1,6,6
"org.apache.lucene.facet.index.params.CategoryListParams.CategoryListParams()",1,1,1
"org.apache.lucene.facet.index.params.CategoryListParams.CategoryListParams(Term)",1,1,1
"org.apache.lucene.facet.index.params.CategoryListParams.createCategoryListIterator(IndexReader,int)",1,1,1
"org.apache.lucene.facet.index.params.CategoryListParams.createEncoder()",1,1,1
"org.apache.lucene.facet.index.params.CategoryListParams.equals(Object)",4,1,4
"org.apache.lucene.facet.index.params.CategoryListParams.getTerm()",1,1,1
"org.apache.lucene.facet.index.params.CategoryListParams.hashCode()",1,1,1
"org.apache.lucene.facet.index.params.CategoryListParamsTest.testDefaultSettings()",1,1,1
"org.apache.lucene.facet.index.params.CategoryListParamsTest.testIdentity()",1,1,1
"org.apache.lucene.facet.index.params.CategoryListParamsTest.testIdentityConsistency()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.DefaultFacetIndexingParams()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.DefaultFacetIndexingParams(CategoryListParams)",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.drillDownTermText(CategoryPath,char[])",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.equals(Object)",14,4,14
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.fixedOrdinalPolicy()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.fixedPartitionSize()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.fixedPathPolicy()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getAllCategoryListParams()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getCategoryListParams(CategoryPath)",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getFacetDelimChar()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getOrdinalPolicy()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getPartitionSize()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getPathPolicy()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.hashCode()",1,5,5
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParamsTest.testCategoryListParamsWithDefaultIndexingParams()",1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParamsTest.testCategoryPolicies()",1,4,4
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParamsTest.testDefaultSettings()",1,1,1
"org.apache.lucene.facet.index.params.FacetParamsMissingPropertyException.FacetParamsMissingPropertyException(String)",1,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.PerDimensionIndexingParams()",1,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.PerDimensionIndexingParams(CategoryListParams)",1,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.addCategoryListParams(CategoryPath,CategoryListParams)",1,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.getAllCategoryListParams()",1,2,2
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.getCategoryListParams(CategoryPath)",3,2,3
"org.apache.lucene.facet.index.params.PerDimensionIndexingParamsTest.testCategoryListParamsAddition()",1,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParamsTest.testTopLevelSettings()",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryAttributesStream.CategoryAttributesStream(Iterable<CategoryAttribute>)",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryAttributesStream.incrementToken()",4,3,4
"org.apache.lucene.facet.index.streaming.CategoryAttributesStream.reset()",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryAttributesStreamTest.testStream()",1,5,7
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.CategoryListTokenizer(TokenStream,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.handleEndOfInput()",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.handleStartOfInput()",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.reset()",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryParentsStream.CategoryParentsStream(CategoryAttributesStream,TaxonomyWriter,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryParentsStream.addRetainableProperty(Class<? extends CategoryProperty>)",1,1,2
"org.apache.lucene.facet.index.streaming.CategoryParentsStream.clearCategoryProperties()",1,6,6
"org.apache.lucene.facet.index.streaming.CategoryParentsStream.incrementToken()",6,10,11
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.MyCategoryListTokenizer.MyCategoryListTokenizer(TokenStream,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.MyCategoryListTokenizer.incrementToken()",5,3,5
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.testNoRetainableAttributes()",1,2,3
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.testRetainableAttributes()",1,3,4
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.testStreamDefaultParams()",1,1,2
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.testStreamNonTopLevelParams()",1,1,2
"org.apache.lucene.facet.index.streaming.CategoryTokenizer.CategoryTokenizer(TokenStream,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryTokenizer.incrementToken()",2,4,4
"org.apache.lucene.facet.index.streaming.CategoryTokenizer.setPayload()",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryTokenizerBase.CategoryTokenizerBase(TokenStream,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.index.streaming.CategoryTokenizerTest.testLongCategoryPath()",1,2,2
"org.apache.lucene.facet.index.streaming.CategoryTokenizerTest.testTokensDefaultParams()",1,4,4
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.CountingListTokenizer(TokenStream,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.getPayloadStream(CategoryPath,int)",1,2,2
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.handleStartOfInput()",1,1,1
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.incrementToken()",3,7,7
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.legalCategory()",1,1,1
"org.apache.lucene.facet.search.AdaptiveAccumulatorTest.getSamplingAccumulator(Sampler,TaxonomyReader,IndexReader,FacetSearchParams)",1,1,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.AdaptiveFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.AdaptiveFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator)",1,1,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.accumulate(ScoredDocIDs)",2,2,2
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.appropriateFacetCountingAccumulator(ScoredDocIDs)",3,2,4
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.getSampler()",1,1,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.setSampler(Sampler)",1,1,1
"org.apache.lucene.facet.search.BaseTestTopK.getCategories(int)",1,2,2
"org.apache.lucene.facet.search.BaseTestTopK.getContent(int)",2,1,2
"org.apache.lucene.facet.search.BaseTestTopK.getIndexWriterConfig(Analyzer)",1,1,1
"org.apache.lucene.facet.search.BaseTestTopK.nextInt(int)",2,1,2
"org.apache.lucene.facet.search.BaseTestTopK.numDocsToIndex()",1,1,1
"org.apache.lucene.facet.search.BaseTestTopK.populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.search.BaseTestTopK.searchParamsWithRequests(int)",1,1,1
"org.apache.lucene.facet.search.BaseTestTopK.searchParamsWithRequests(int,int)",1,1,1
"org.apache.lucene.facet.search.CategoryListIteratorTest.DataTokenStream.DataTokenStream(String,IntEncoder)",1,1,1
"org.apache.lucene.facet.search.CategoryListIteratorTest.DataTokenStream.incrementToken()",2,2,3
"org.apache.lucene.facet.search.CategoryListIteratorTest.DataTokenStream.setIdx(int)",1,1,1
"org.apache.lucene.facet.search.CategoryListIteratorTest.testPayloadIntDecodingIterator()",1,5,5
"org.apache.lucene.facet.search.CategoryListIteratorTest.testPayloadIteratorWithInvalidDoc()",1,7,7
"org.apache.lucene.facet.search.DrillDown.query(FacetIndexingParams,CategoryPath...)",3,3,5
"org.apache.lucene.facet.search.DrillDown.query(FacetIndexingParams,Query,CategoryPath...)",1,1,1
"org.apache.lucene.facet.search.DrillDown.query(FacetSearchParams,CategoryPath...)",1,1,1
"org.apache.lucene.facet.search.DrillDown.query(FacetSearchParams,Query,CategoryPath...)",1,1,1
"org.apache.lucene.facet.search.DrillDown.query(Query,CategoryPath...)",1,1,1
"org.apache.lucene.facet.search.DrillDown.term(FacetIndexingParams,CategoryPath)",1,1,1
"org.apache.lucene.facet.search.DrillDown.term(FacetSearchParams,CategoryPath)",1,1,1
"org.apache.lucene.facet.search.DrillDownTest.DrillDownTest()",1,1,1
"org.apache.lucene.facet.search.DrillDownTest.closeIndexes()",1,3,3
"org.apache.lucene.facet.search.DrillDownTest.createIndexes()",1,6,6
"org.apache.lucene.facet.search.DrillDownTest.testQuery()",1,1,1
"org.apache.lucene.facet.search.DrillDownTest.testQueryImplicitDefaultParams()",1,1,1
"org.apache.lucene.facet.search.DrillDownTest.testTermDefault()",1,1,1
"org.apache.lucene.facet.search.DrillDownTest.testTermNonDefault()",1,1,1
"org.apache.lucene.facet.search.FacetArrays.FacetArrays(IntArrayAllocator,FloatArrayAllocator)",1,1,1
"org.apache.lucene.facet.search.FacetArrays.free()",1,3,3
"org.apache.lucene.facet.search.FacetArrays.getArraysLength()",1,1,1
"org.apache.lucene.facet.search.FacetArrays.getFloatArray()",1,2,2
"org.apache.lucene.facet.search.FacetArrays.getIntArray()",1,2,2
"org.apache.lucene.facet.search.FacetResultsHandler.FacetResultsHandler(TaxonomyReader,FacetRequest)",1,1,1
"org.apache.lucene.facet.search.FacetResultsHandler.getFacetRequest()",1,1,1
"org.apache.lucene.facet.search.FacetResultsHandler.getTaxonomyReader()",1,1,1
"org.apache.lucene.facet.search.FacetResultsHandler.isSelfPartition(int,FacetArrays,int)",1,1,1
"org.apache.lucene.facet.search.FacetsAccumulator.FacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.FacetsAccumulator.getComplementThreshold()",1,1,1
"org.apache.lucene.facet.search.FacetsAccumulator.isAllowLabeling()",1,1,1
"org.apache.lucene.facet.search.FacetsAccumulator.mayComplement()",3,2,3
"org.apache.lucene.facet.search.FacetsAccumulator.setAllowLabeling(boolean)",1,1,1
"org.apache.lucene.facet.search.FacetsAccumulator.setComplementThreshold(double)",1,1,1
"org.apache.lucene.facet.search.FacetsCollector.FacetsCollector(FacetSearchParams,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.FacetsCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.facet.search.FacetsCollector.collect(int)",1,1,1
"org.apache.lucene.facet.search.FacetsCollector.getFacetResults()",1,2,2
"org.apache.lucene.facet.search.FacetsCollector.initFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.FacetsCollector.initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader)",3,3,3
"org.apache.lucene.facet.search.FacetsCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.facet.search.FacetsCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.facet.search.FloatArrayAllocator.FloatArrayAllocator(int,int)",1,1,1
"org.apache.lucene.facet.search.FloatArrayAllocator.clear(float[])",1,1,1
"org.apache.lucene.facet.search.FloatArrayAllocator.create()",1,1,1
"org.apache.lucene.facet.search.IntArrayAllocator.IntArrayAllocator(int,int)",1,1,1
"org.apache.lucene.facet.search.IntArrayAllocator.clear(int[])",1,1,1
"org.apache.lucene.facet.search.IntArrayAllocator.create()",1,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.PayloadIntDecodingIterator(IndexReader,Term,IntDecoder)",1,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.PayloadIntDecodingIterator(IndexReader,Term,IntDecoder,byte[])",1,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.equals(Object)",3,2,4
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.hashCode()",1,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.init()",1,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.nextCategory()",1,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.skipTo(int)",2,1,2
"org.apache.lucene.facet.search.PayloadIterator.PayloadIterator(IndexReader,Term)",1,1,1
"org.apache.lucene.facet.search.PayloadIterator.PayloadIterator(IndexReader,Term,byte[])",1,1,1
"org.apache.lucene.facet.search.PayloadIterator.getBuffer()",1,1,1
"org.apache.lucene.facet.search.PayloadIterator.getPayloadLength()",1,1,1
"org.apache.lucene.facet.search.PayloadIterator.init()",1,1,1
"org.apache.lucene.facet.search.PayloadIterator.setdoc(int)",7,2,8
"org.apache.lucene.facet.search.SamplingWrapper.SamplingWrapper(FacetsAccumulator,Sampler)",1,1,1
"org.apache.lucene.facet.search.SamplingWrapper.accumulate(ScoredDocIDs)",1,3,3
"org.apache.lucene.facet.search.SamplingWrapper.getComplementThreshold()",1,1,1
"org.apache.lucene.facet.search.SamplingWrapper.isAllowLabeling()",1,1,1
"org.apache.lucene.facet.search.SamplingWrapper.setAllowLabeling(boolean)",1,1,1
"org.apache.lucene.facet.search.SamplingWrapper.setComplementThreshold(double)",1,1,1
"org.apache.lucene.facet.search.SamplingWrapperTest.getSamplingAccumulator(Sampler,TaxonomyReader,IndexReader,FacetSearchParams)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.NonScoringDocIdCollector(int)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.collect(int)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.getDefaultScore()",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.scoredDocIdsIterator()",1,1,2
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.setDefaultScore(float)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoredDocIdCollector(int)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.ScoringDocIdCollector(int)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.collect(int)",1,2,2
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.getDefaultScore()",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.scoredDocIdsIterator()",2,1,3
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.setDefaultScore(float)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.create(int,boolean)",1,1,2
"org.apache.lucene.facet.search.ScoredDocIdCollector.getScoredDocIDs()",1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.facet.search.StandardFacetsAccumulator.StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.StandardFacetsAccumulator.StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator)",1,2,5
"org.apache.lucene.facet.search.StandardFacetsAccumulator.accumulate(ScoredDocIDs)",4,13,14
"org.apache.lucene.facet.search.StandardFacetsAccumulator.actualDocsToAccumulate(ScoredDocIDs)",1,1,1
"org.apache.lucene.facet.search.StandardFacetsAccumulator.fillArraysForPartition(ScoredDocIDs,FacetArrays,int)",5,5,7
"org.apache.lucene.facet.search.StandardFacetsAccumulator.getCategoryListMap(FacetArrays,int)",3,3,4
"org.apache.lucene.facet.search.StandardFacetsAccumulator.getTotalCountsFactor()",1,1,1
"org.apache.lucene.facet.search.StandardFacetsAccumulator.initArraysByTotalCounts(FacetArrays,int,int)",1,1,3
"org.apache.lucene.facet.search.StandardFacetsAccumulator.shouldComplement(ScoredDocIDs)",1,2,2
"org.apache.lucene.facet.search.TemporaryObjectAllocator.TemporaryObjectAllocator(int)",1,1,1
"org.apache.lucene.facet.search.TemporaryObjectAllocator.allocate()",2,2,2
"org.apache.lucene.facet.search.TemporaryObjectAllocator.free(T)",1,3,3
"org.apache.lucene.facet.search.TestCategoryListCache.TestCategoryListCache()",1,1,1
"org.apache.lucene.facet.search.TestCategoryListCache.doTest(boolean,boolean)",1,4,4
"org.apache.lucene.facet.search.TestCategoryListCache.messCachedData(CategoryListCache,CategoryListParams)",2,1,3
"org.apache.lucene.facet.search.TestCategoryListCache.setUp()",1,1,1
"org.apache.lucene.facet.search.TestCategoryListCache.tearDown()",1,1,1
"org.apache.lucene.facet.search.TestCategoryListCache.testCorrectClCache()",1,1,1
"org.apache.lucene.facet.search.TestCategoryListCache.testNoClCache()",1,1,1
"org.apache.lucene.facet.search.TestCategoryListCache.testWrongClCache()",1,1,1
"org.apache.lucene.facet.search.TestFacetArrays.testSimple()",1,1,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.doTestComplements()",1,2,2
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.findFacets(ScoredDocIDs,boolean)",1,3,4
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.getFacetedSearchParams()",1,1,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.setUp()",1,1,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.tearDown()",1,1,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.testComplements()",1,1,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.testComplementsWithMultiReader()",1,1,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.testComplementsWithParallerReader()",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.assertCorrectResults(FacetsCollector)",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.assertPostingListExists(String,String,IndexReader)",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.checkResult(FacetResultNode,String,double)",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.getDirs()",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher)",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.seedIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testCustom()",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testDefault()",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testDifferentFieldsAndText()",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testSomeSameSomeDifferent()",1,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testTwoCustomsSameField()",1,1,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.findFacets(ScoredDocIDs,FacetSearchParams)",1,3,3
"org.apache.lucene.facet.search.TestScoredDocIdCollector.getFacetedSearchParams()",1,1,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.setUp()",1,1,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.sumScoreSearchParams()",1,1,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.tearDown()",1,1,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.testConstantScore()",1,4,4
"org.apache.lucene.facet.search.TestScoredDocIdCollector.testOutOfOrderCollectionScoringDisabled()",1,3,3
"org.apache.lucene.facet.search.TestScoredDocIdCollector.testOutOfOrderCollectionScoringEnabled()",1,1,1
"org.apache.lucene.facet.search.TestTopKInEachNodeResultHandler.prvt_add(DefaultFacetIndexingParams,RandomIndexWriter,TaxonomyWriter,String...)",1,1,1
"org.apache.lucene.facet.search.TestTopKInEachNodeResultHandler.testSimple()",3,15,15
"org.apache.lucene.facet.search.TestTopKResultsHandler.getCategories(int)",1,1,1
"org.apache.lucene.facet.search.TestTopKResultsHandler.getContent(int)",1,1,1
"org.apache.lucene.facet.search.TestTopKResultsHandler.numDocsToIndex()",1,1,1
"org.apache.lucene.facet.search.TestTopKResultsHandler.testGetMaxIntFacets()",1,3,3
"org.apache.lucene.facet.search.TestTopKResultsHandler.testSimple()",1,3,3
"org.apache.lucene.facet.search.TestTopKResultsHandler.testSimpleSearchForNonexistentFacet()",1,3,3
"org.apache.lucene.facet.search.TestTopKResultsHandlerRandom.countFacets(int,int,boolean)",1,1,2
"org.apache.lucene.facet.search.TestTopKResultsHandlerRandom.numDocsToIndex()",1,1,2
"org.apache.lucene.facet.search.TestTopKResultsHandlerRandom.testTopCountsOrder()",1,10,10
"org.apache.lucene.facet.search.TestTotalFacetCounts.doTestWriteRead(int)",1,2,2
"org.apache.lucene.facet.search.TestTotalFacetCounts.initCache(int)",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCounts.testWriteRead()",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.TFCThread.TFCThread(IndexReader,DirectoryTaxonomyReader,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.TFCThread.run()",1,1,2
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.addFacets(FacetIndexingParams,IndexWriter,TaxonomyWriter,String...)",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.assertReadFromDisc(TotalFacetCounts,int,String)",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.assertRecomputed(TotalFacetCounts,int,String)",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.doTestGeneralSynchronization(int,int,int)",1,5,7
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.initCache()",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.setUp()",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testGeneralSynchronization()",1,3,3
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testGeneralSynchronizationBig()",1,4,4
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testGenerationalConsistency()",1,1,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testGrowingTaxonomy()",1,2,2
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testMemoryCacheSynchronization()",1,2,2
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testMultipleIndices()",1,2,2
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResult.TopKFacetResult(FacetRequest,MutableFacetResultNode,int)",1,1,1
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResult.getHeap()",1,1,1
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResult.setHeap(Heap<FacetResultNode>)",1,1,1
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResultsHandler(TaxonomyReader,FacetRequest)",1,1,1
"org.apache.lucene.facet.search.TopKFacetResultsHandler.fetchPartitionResult(FacetArrays,int)",1,3,3
"org.apache.lucene.facet.search.TopKFacetResultsHandler.heapDescendants(int,Heap<FacetResultNode>,MutableFacetResultNode,FacetArrays,int)",3,7,11
"org.apache.lucene.facet.search.TopKFacetResultsHandler.labelResult(FacetResult)",5,4,5
"org.apache.lucene.facet.search.TopKFacetResultsHandler.mergeResults(IntermediateFacetResult...)",3,4,5
"org.apache.lucene.facet.search.TopKFacetResultsHandler.rearrangeFacetResult(FacetResult)",1,3,3
"org.apache.lucene.facet.search.TopKFacetResultsHandler.renderFacetResult(IntermediateFacetResult)",1,3,3
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AACO.AACO(int[],double[],double)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ACComparator.ACComparator()",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AggregatedCategory.AggregatedCategory(int,double)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AggregatedCategoryHeap.AggregatedCategoryHeap(int,ACComparator)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AggregatedCategoryHeap.lessThan(AggregatedCategory,AggregatedCategory)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscOrdACComparator.AscOrdACComparator()",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscOrdACComparator.leftGoesNow(int,double,int,double)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscValueACComparator.AscValueACComparator()",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscValueACComparator.leftGoesNow(int,double,int,double)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescOrdACComparator.DescOrdACComparator()",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescOrdACComparator.leftGoesNow(int,double,int,double)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescValueACComparator.DescValueACComparator()",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescValueACComparator.leftGoesNow(int,double,int,double)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.IntermediateFacetResultWithHash.IntermediateFacetResultWithHash(FacetRequest,IntToObjectMap<AACO>)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.IntermediateFacetResultWithHash.getFacetRequest()",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ResultNodeHeap.ResultNodeHeap(int,ACComparator)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ResultNodeHeap.lessThan(FacetResultNode,FacetResultNode)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.TopKInEachNodeHandler(TaxonomyReader,FacetRequest)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.countOnly(int,int[],int[],FacetArrays,int,int,int,int,int)",2,3,6
"org.apache.lucene.facet.search.TopKInEachNodeHandler.fetchPartitionResult(FacetArrays,int)",8,11,19
"org.apache.lucene.facet.search.TopKInEachNodeHandler.generateNode(int,double,IntToObjectMap<AACO>)",2,2,3
"org.apache.lucene.facet.search.TopKInEachNodeHandler.getSuitableACComparator()",6,4,6
"org.apache.lucene.facet.search.TopKInEachNodeHandler.labelResult(FacetResult)",2,1,2
"org.apache.lucene.facet.search.TopKInEachNodeHandler.mergeResults(IntermediateFacetResult...)",9,5,16
"org.apache.lucene.facet.search.TopKInEachNodeHandler.rearrangeChilrenOfNode(FacetResultNode,PriorityQueue<FacetResultNode>)",1,4,4
"org.apache.lucene.facet.search.TopKInEachNodeHandler.rearrangeFacetResult(FacetResult)",1,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.recursivelyLabel(FacetResultNode,int)",5,2,5
"org.apache.lucene.facet.search.TopKInEachNodeHandler.renderFacetResult(IntermediateFacetResult)",2,1,4
"org.apache.lucene.facet.search.TotalFacetCounts.TotalFacetCounts(TaxonomyReader,FacetIndexingParams,int[][],CreationType)",1,1,1
"org.apache.lucene.facet.search.TotalFacetCounts.clIteraor(CategoryListCache,CategoryListParams,IndexReader,int)",3,3,3
"org.apache.lucene.facet.search.TotalFacetCounts.compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache)",1,2,2
"org.apache.lucene.facet.search.TotalFacetCounts.fillTotalCountsForPartition(int[],int)",1,1,2
"org.apache.lucene.facet.search.TotalFacetCounts.getTotalCount(int)",1,1,1
"org.apache.lucene.facet.search.TotalFacetCounts.loadFromFile(File,TaxonomyReader,FacetIndexingParams)",1,4,4
"org.apache.lucene.facet.search.TotalFacetCounts.storeToFile(File,TotalFacetCounts)",1,4,4
"org.apache.lucene.facet.search.TotalFacetCountsCache.TFCKey.TFCKey(IndexReader,TaxonomyReader,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.TFCKey.equals(Object)",4,3,7
"org.apache.lucene.facet.search.TotalFacetCountsCache.TFCKey.hashCode()",1,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.TotalFacetCountsCache()",1,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.clear()",1,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.computeAndCache(TFCKey,CategoryListCache)",1,2,2
"org.apache.lucene.facet.search.TotalFacetCountsCache.getCacheSize()",1,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.getSingleton()",1,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.getTotalCounts(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache)",2,2,2
"org.apache.lucene.facet.search.TotalFacetCountsCache.load(File,IndexReader,TaxonomyReader,FacetIndexingParams)",2,3,4
"org.apache.lucene.facet.search.TotalFacetCountsCache.markRecentlyUsed(TFCKey)",1,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.setCacheSize(int)",1,2,3
"org.apache.lucene.facet.search.TotalFacetCountsCache.store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache)",2,6,7
"org.apache.lucene.facet.search.TotalFacetCountsCache.trimCache()",1,3,3
"org.apache.lucene.facet.search.aggregator.ComplementCountingAggregator.ComplementCountingAggregator(int[])",1,1,1
"org.apache.lucene.facet.search.aggregator.ComplementCountingAggregator.aggregate(int)",1,1,1
"org.apache.lucene.facet.search.aggregator.CountingAggregator.CountingAggregator(int[])",1,1,1
"org.apache.lucene.facet.search.aggregator.CountingAggregator.aggregate(int)",1,1,1
"org.apache.lucene.facet.search.aggregator.CountingAggregator.equals(Object)",2,2,3
"org.apache.lucene.facet.search.aggregator.CountingAggregator.hashCode()",1,2,2
"org.apache.lucene.facet.search.aggregator.CountingAggregator.setNextDoc(int,float)",1,1,1
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.ScoringAggregator(float[])",1,2,2
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.aggregate(int)",1,1,1
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.equals(Object)",2,2,3
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.hashCode()",1,1,1
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.setNextDoc(int,float)",1,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.AssociationFloatSumAggregator(IndexReader,float[])",1,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.AssociationFloatSumAggregator(String,IndexReader,float[])",1,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.aggregate(int)",1,2,2
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.equals(Object)",2,3,4
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.hashCode()",1,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.setNextDoc(int,float)",1,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.AssociationIntSumAggregator(IndexReader,int[])",1,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.AssociationIntSumAggregator(String,IndexReader,int[])",1,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.aggregate(int)",1,1,2
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.equals(Object)",2,3,4
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.hashCode()",1,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.setNextDoc(int,float)",1,1,1
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.afterClassAssociationsFacetRequestTest()",1,1,1
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.beforeClassAssociationsFacetRequestTest()",1,3,3
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.testDifferentAggregatorsSameCategoryList()",1,1,2
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.testFloatSumAssociation()",1,1,1
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.testIntSumAssociation()",1,1,1
"org.apache.lucene.facet.search.cache.CategoryListCache.get(CategoryListParams)",1,1,1
"org.apache.lucene.facet.search.cache.CategoryListCache.loadAndRegister(CategoryListParams,IndexReader,TaxonomyReader,FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.search.cache.CategoryListCache.register(CategoryListParams,CategoryListData)",1,1,1
"org.apache.lucene.facet.search.cache.CategoryListData.CategoryListData()",1,1,1
"org.apache.lucene.facet.search.cache.CategoryListData.CategoryListData(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListParams)",1,7,8
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator.RAMCategoryListIterator(int,int[][][])",1,1,1
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator.init()",1,1,2
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator.nextCategory()",2,1,2
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator.skipTo(int)",1,1,4
"org.apache.lucene.facet.search.cache.CategoryListData.iterator(int)",1,1,1
"org.apache.lucene.facet.search.params.CountFacetRequest.CountFacetRequest(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.search.params.CountFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",2,1,2
"org.apache.lucene.facet.search.params.CountFacetRequest.getValueOf(FacetArrays,int)",1,1,1
"org.apache.lucene.facet.search.params.CountFacetRequest.requireDocumentScore()",1,1,1
"org.apache.lucene.facet.search.params.CountFacetRequest.supportsComplements()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.FacetRequest(CategoryPath,int)",3,1,3
"org.apache.lucene.facet.search.params.FacetRequest.clone()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.createCategoryListIterator(IndexReader,TaxonomyReader,FacetSearchParams,int)",3,3,3
"org.apache.lucene.facet.search.params.FacetRequest.createFacetResultsHandler(TaxonomyReader)",2,2,3
"org.apache.lucene.facet.search.params.FacetRequest.equals(Object)",2,7,7
"org.apache.lucene.facet.search.params.FacetRequest.getCategoryPath()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getDepth()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getNumLabel()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getNumResults()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getResultMode()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getSortBy()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getSortOrder()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.hashCode()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setDepth(int)",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setNumLabel(int)",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setResultMode(ResultMode)",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setSortBy(SortBy)",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setSortOrder(SortOrder)",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.supportsComplements()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.toString()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testClone()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testGetFacetResultHandlerDifferentTaxonomy()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testHashAndEquals()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testIllegalCategoryPath()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testIllegalNumResults()",1,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testImmutability()",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.FacetSearchParams()",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.FacetSearchParams(FacetIndexingParams)",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.addFacetRequest(FacetRequest)",2,1,2
"org.apache.lucene.facet.search.params.FacetSearchParams.getClCache()",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.getFacetIndexingParams()",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.getFacetRequests()",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.setClCache(CategoryListCache)",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.toString()",1,2,2
"org.apache.lucene.facet.search.params.FacetSearchParamsTest.testAddFacetRequest()",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParamsTest.testDefaultSettings()",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParamsTest.testPartitionSizeWithCategories()",1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParamsTest.testSearchParamsWithNullRequest()",1,1,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimCountFacetRequest.PerDimCountFacetRequest(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimCountFacetRequest.createCategoryListIterator(IndexReader,TaxonomyReader,FacetSearchParams,int)",1,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimCountFacetRequest.createFacetResultsHandler(TaxonomyReader)",1,2,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.PerDimensionCLI(TaxonomyReader,CategoryListIterator,CategoryPath)",1,2,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.init()",1,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.isInDimension(int)",3,1,3
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.nextCategory()",1,2,3
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.skipTo(int)",1,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.doTestCLParamMultiIteratorsByRequest(boolean)",1,2,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.populateIndex(FacetIndexingParams,Directory,Directory)",1,2,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.testCLParamMultiIteratorsByRequest()",1,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.testCLParamMultiIteratorsByRequestCacheCLI()",1,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String,int,int)",1,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[])",1,3,3
"org.apache.lucene.facet.search.params.ScoreFacetRequest.ScoreFacetRequest(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.search.params.ScoreFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.params.ScoreFacetRequest.getValueOf(FacetArrays,int)",1,1,1
"org.apache.lucene.facet.search.params.ScoreFacetRequest.requireDocumentScore()",1,1,1
"org.apache.lucene.facet.search.params.ScoreFacetRequest.supportsComplements()",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.AssociationFloatSumFacetRequest(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.getValueOf(FacetArrays,int)",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.requireDocumentScore()",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.supportsComplements()",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.AssociationIntSumFacetRequest(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.getValueOf(FacetArrays,int)",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.requireDocumentScore()",1,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.supportsComplements()",1,1,1
"org.apache.lucene.facet.search.results.FacetResult.FacetResult(FacetRequest,FacetResultNode,int)",1,1,1
"org.apache.lucene.facet.search.results.FacetResult.getFacetRequest()",1,1,1
"org.apache.lucene.facet.search.results.FacetResult.getFacetResultNode()",1,1,1
"org.apache.lucene.facet.search.results.FacetResult.getNumValidDescendants()",1,1,1
"org.apache.lucene.facet.search.results.FacetResult.toString()",1,1,1
"org.apache.lucene.facet.search.results.FacetResult.toString(String)",1,3,3
"org.apache.lucene.facet.search.results.MutableFacetResultNode.MutableFacetResultNode(FacetResultNode,boolean)",1,2,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.MutableFacetResultNode(int,double)",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.MutableFacetResultNode(int,double,double,CategoryPath,List<FacetResultNode>)",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.appendSubResult(FacetResultNode)",1,1,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getLabel()",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getLabel(TaxonomyReader)",1,2,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getNumSubResults()",1,2,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getOrdinal()",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getResidue()",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getSubResults()",1,1,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getValue()",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.increaseResidue(double)",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.increaseValue(double)",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.insertSubResult(FacetResultNode)",1,1,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.numSubResults()",2,1,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.reset(int,double)",1,2,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.resultsToList(Iterable<? extends FacetResultNode>)",2,2,3
"org.apache.lucene.facet.search.results.MutableFacetResultNode.setLabel(CategoryPath)",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.setResidue(double)",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.setSubResults(List<FacetResultNode>)",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.setValue(double)",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.toImpl(FacetResultNode)",2,1,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.toString()",1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.toString(String)",1,3,3
"org.apache.lucene.facet.search.results.MutableFacetResultNode.trimSubResults(int)",2,5,6
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.assertSampling(List<FacetResult>,Query,Sampler,FacetSearchParams,boolean)",1,1,1
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.createSampler(int,ScoredDocIDs,boolean)",1,2,2
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.samplingCollector(boolean,Sampler,FacetSearchParams)",1,1,2
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.testCountUsingSamping()",4,3,5
"org.apache.lucene.facet.search.sampling.RandomSampler.RandomSampler()",1,1,1
"org.apache.lucene.facet.search.sampling.RandomSampler.RandomSampler(SamplingParams,Random)",1,1,1
"org.apache.lucene.facet.search.sampling.RandomSampler.createSample(ScoredDocIDs,int,int)",1,4,5
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.IntPriorityQueue(int)",1,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.MI.MI()",1,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.getHeap()",1,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.insertWithReuse(int)",1,1,2
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.lessThan(Object,Object)",1,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.RepeatableSampler(SamplingParams)",1,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.createSample(ScoredDocIDs,int,int)",1,4,4
"org.apache.lucene.facet.search.sampling.RepeatableSampler.findGoodStepSize(int,int)",1,2,3
"org.apache.lucene.facet.search.sampling.RepeatableSampler.findNextPrimeAfter(int)",8,2,9
"org.apache.lucene.facet.search.sampling.RepeatableSampler.repeatableSample(ScoredDocIDs,int,int)",1,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.repeatableSample(ScoredDocIDs,int,int,Algorithm,Sorted)",6,6,9
"org.apache.lucene.facet.search.sampling.RepeatableSampler.sample1(ScoredDocIDs,int,int[],long[])",1,8,8
"org.apache.lucene.facet.search.sampling.RepeatableSampler.sample2(ScoredDocIDs,int,int[],long[])",1,5,6
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest.OverSampledFacetRequest(FacetRequest,int)",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest.getValueOf(FacetArrays,int)",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest.requireDocumentScore()",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.SampleResult.SampleResult(ScoredDocIDs,double)",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.Sampler()",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.Sampler(SamplingParams)",2,1,2
"org.apache.lucene.facet.search.sampling.Sampler.getSampleFixer(IndexReader,TaxonomyReader,FacetSearchParams)",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.getSampleSet(ScoredDocIDs)",2,1,2
"org.apache.lucene.facet.search.sampling.Sampler.getSamplingParams()",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.overSampledSearchParams(FacetSearchParams)",1,3,3
"org.apache.lucene.facet.search.sampling.Sampler.shouldSample(ScoredDocIDs)",1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.trimResult(FacetResult)",2,1,3
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.SamplingAccumulator(Sampler,FacetSearchParams,IndexReader,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.SamplingAccumulator(Sampler,FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.accumulate(ScoredDocIDs)",1,3,3
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.actualDocsToAccumulate(ScoredDocIDs)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.getTotalCountsFactor()",2,1,2
"org.apache.lucene.facet.search.sampling.SamplingAccumulatorTest.getSamplingAccumulator(Sampler,TaxonomyReader,IndexReader,FacetSearchParams)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getMaxSampleSize()",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getMinSampleSize()",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getOversampleFactor()",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getSampleRatio()",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getSamplingThreshold()",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setMaxSampleSize(int)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setMinSampleSize(int)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setOversampleFactor(double)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setSampingThreshold(int)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setSampleRatio(double)",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.validate()",1,1,4
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.TakmiSampleFixer(IndexReader,TaxonomyReader,FacetSearchParams)",1,1,1
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.advance(ScoredDocIDsIterator,int)",3,2,3
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.countIntersection(TermDocs,ScoredDocIDsIterator)",10,4,10
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.fixResult(ScoredDocIDs,FacetResult)",1,1,1
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.fixResultNode(FacetResultNode,ScoredDocIDs)",1,2,2
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.recount(FacetResultNode,ScoredDocIDs)",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath()",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(CategoryPath)",2,1,2
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(CategoryPath,int)",2,1,4
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(CharSequence...)",1,8,8
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(String,char)",2,1,3
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.add(CharSequence)",1,4,5
"org.apache.lucene.facet.taxonomy.CategoryPath.add(CharSequence,char)",2,6,8
"org.apache.lucene.facet.taxonomy.CategoryPath.appendTo(Appendable,char)",2,4,5
"org.apache.lucene.facet.taxonomy.CategoryPath.appendTo(Appendable,char,int)",2,4,7
"org.apache.lucene.facet.taxonomy.CategoryPath.appendTo(Appendable,char,int,int)",2,4,9
"org.apache.lucene.facet.taxonomy.CategoryPath.capacityChars()",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.capacityComponents()",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.charsNeededForFullPath()",2,1,2
"org.apache.lucene.facet.taxonomy.CategoryPath.clear()",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.clone()",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.compareTo(CategoryPath)",8,2,9
"org.apache.lucene.facet.taxonomy.CategoryPath.copyToCharArray(char[],int,int,char)",2,2,6
"org.apache.lucene.facet.taxonomy.CategoryPath.deserializeFromStreamReader(InputStreamReader)",2,2,7
"org.apache.lucene.facet.taxonomy.CategoryPath.equals(Object)",8,1,8
"org.apache.lucene.facet.taxonomy.CategoryPath.equalsToSerialized(CharSequence,int)",7,3,7
"org.apache.lucene.facet.taxonomy.CategoryPath.equalsToSerialized(int,CharSequence,int)",7,3,9
"org.apache.lucene.facet.taxonomy.CategoryPath.getComponent(int)",3,1,4
"org.apache.lucene.facet.taxonomy.CategoryPath.hashCode()",2,1,4
"org.apache.lucene.facet.taxonomy.CategoryPath.hashCode(int)",2,1,6
"org.apache.lucene.facet.taxonomy.CategoryPath.hashCodeOfSerialized(CharSequence,int)",2,3,4
"org.apache.lucene.facet.taxonomy.CategoryPath.isDescendantOf(CategoryPath)",6,1,6
"org.apache.lucene.facet.taxonomy.CategoryPath.lastComponent()",3,1,3
"org.apache.lucene.facet.taxonomy.CategoryPath.length()",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.longHashCode()",2,1,4
"org.apache.lucene.facet.taxonomy.CategoryPath.longHashCode(int)",2,1,6
"org.apache.lucene.facet.taxonomy.CategoryPath.readObject(ObjectInputStream)",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.serializeAppendTo(Appendable)",2,3,4
"org.apache.lucene.facet.taxonomy.CategoryPath.serializeAppendTo(int,Appendable)",2,3,6
"org.apache.lucene.facet.taxonomy.CategoryPath.serializeToStreamWriter(OutputStreamWriter)",2,2,3
"org.apache.lucene.facet.taxonomy.CategoryPath.setFromSerialized(CharSequence,int)",2,5,6
"org.apache.lucene.facet.taxonomy.CategoryPath.toString()",1,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.toString(char)",2,1,3
"org.apache.lucene.facet.taxonomy.CategoryPath.toString(char,int)",2,1,5
"org.apache.lucene.facet.taxonomy.CategoryPath.toString(char,int,int)",2,1,7
"org.apache.lucene.facet.taxonomy.CategoryPath.trim(int)",1,2,3
"org.apache.lucene.facet.taxonomy.CategoryPath.writeObject(ObjectOutputStream)",1,1,1
"org.apache.lucene.facet.taxonomy.InconsistentTaxonomyException.InconsistentTaxonomyException()",1,1,1
"org.apache.lucene.facet.taxonomy.InconsistentTaxonomyException.InconsistentTaxonomyException(String)",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS.CS(String)",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS.charAt(int)",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS.length()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS.subSequence(int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testAddEmpty()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testAppendTo()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testArrayConstructor()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testBasic()",1,2,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCharSequenceCtor()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCharSerialization()",1,7,7
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCharsLimit()",1,2,3
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCharsNeededForFullPath()",1,2,3
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testClear()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCompareTo()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testComponentsLimit()",1,2,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testConstructorCapacity()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCopyConstructor()",1,2,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCopyToCharArray()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testDefaultConstructor()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testDelimiterAdd()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testDelimiterConstructor()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testEquals()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testGetComponent()",1,3,3
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testHashCode()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testHashCodePrefix()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testIsDescendantOf()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testLastComponent()",1,2,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testLongHashCode()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testLongHashCodePrefix()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testPrefixCopyConstructor()",1,2,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testStreamWriterSerialization()",1,3,3
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testToString()",1,2,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testToStringPrefix()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testToStringSubpath()",1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testTrim()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.assertConsistentYoungestChild(CategoryPath,int,int,int,int)",1,4,5
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.checkPaths(TaxonomyWriter)",1,4,4
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.checkWriterParent(TaxonomyReader,TaxonomyWriter)",1,4,7
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.fillTaxonomy(TaxonomyWriter)",1,3,3
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.fillTaxonomyCheckPaths(TaxonomyWriter)",1,5,5
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.showcat(CategoryPath)",3,1,3
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.showcat(String[])",4,3,6
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.stackTraceStr(Throwable)",2,1,2
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testChildrenArrays()",6,7,9
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testChildrenArraysGrowth()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testChildrenArraysInvariants()",9,9,14
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testReaderBasic()",1,6,6
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testReaderParent()",1,4,7
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testReaderParentArray()",1,2,2
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testRootOnly()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testRootOnly2()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testSeparateReaderAndWriter()",1,2,6
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testSeparateReaderAndWriter2()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testTaxonomyReaderRefreshRaces()",1,3,3
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriter()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterCheckPaths()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterCheckPaths2()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterLock()",1,1,2
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterParent1()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterParent2()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterSimpler()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterTwice()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterTwice2()",1,1,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterTwice3()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ChildrenArraysImpl.ChildrenArraysImpl(int[],int[])",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ChildrenArraysImpl.getOlderSiblingArray()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ChildrenArraysImpl.getYoungestChildArray()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.DirectoryTaxonomyReader(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.close()",1,3,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.decRef()",3,3,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.doClose()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ensureOpen()",2,1,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getChildrenArrays()",2,3,7
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getCommitUserData()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getInternalIndexReader()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getLabel(int)",3,2,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getOrdinal(CategoryPath)",3,3,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getParent(int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getParentArray()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getPath(int)",2,1,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getPath(int,CategoryPath)",2,1,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getRefCount()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getSize()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.incRef()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.openIndexReader(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.refresh()",5,6,7
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.setCacheSize(int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.setDelimiter(char)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.toString(int)",4,6,6
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DirectoryTaxonomyWriter(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DirectoryTaxonomyWriter(Directory,OpenMode)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DirectoryTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache)",1,6,6
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.DiskOrdinalMap(File)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.addDone()",1,2,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.addMapping(int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.getMap()",2,3,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.setSize(int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap.addDone()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap.addMapping(int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap.getMap()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap.setSize(int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.SinglePositionTokenStream.SinglePositionTokenStream(String)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.SinglePositionTokenStream.incrementToken()",2,1,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.SinglePositionTokenStream.set(int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addCategory(CategoryPath)",1,2,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addCategoryDocument(CategoryPath,int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addTaxonomies(Directory[],OrdinalMap[])",4,14,19
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addToCache(CategoryPath,int)",1,2,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addToCache(CategoryPath,int,int)",1,2,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.close()",1,2,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.closeResources()",1,3,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.combinedCommitData(Map<String, String>)",1,3,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.commit()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.commit(Map<String, String>)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.createIndexWriterConfig(OpenMode)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.defaultTaxonomyWriterCache()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.doClose()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.ensureOpen()",2,1,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.findCategory(CategoryPath)",5,3,6
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.findCategory(CategoryPath,int)",5,3,6
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.getCacheMemoryUsage()",2,1,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.getParent(int)",2,1,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.getParentArray()",1,3,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.getSize()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.internalAddCategory(CategoryPath,int)",1,3,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.nextTE(TermEnum)",3,3,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.openIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.openReader()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.perhapsFillCache()",7,4,8
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.prepareCommit()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.prepareCommit(Map<String, String>)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.readCommitData(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.refreshReader()",1,3,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.rollback()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.setCacheMissesUntilFill(int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.setDelimiter(char)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.unlock(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.ParentArray.add(int,int)",1,2,2
"org.apache.lucene.facet.taxonomy.directory.ParentArray.getArray()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.ParentArray.refresh(IndexReader)",9,5,11
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies.dotest(int,int,int,boolean)",4,19,21
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies.test1()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies.testbig()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies.testmedium()",1,2,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.doTestReadRecreatedTaxono(Random,boolean)",1,6,6
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testAlreadyClosed()",1,1,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testCloseAfterIncRef()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testCloseTwice()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testFreshReadRecreatedTaxonomy()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testReaderRefreshResult()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testRefreshAndRefCount()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testRefreshReadRecreatedTaxonomy()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.NoOpCache()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.close()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.get(CategoryPath)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.get(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.hasRoom(int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.put(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.put(CategoryPath,int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testCommit()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testCommitUserData()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testEnsureOpen()",1,1,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testRecreateAndRefresh()",1,1,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testRollback()",1,1,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testUndefinedCreateTime()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.touchTaxo(DirectoryTaxonomyWriter,CategoryPath)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexReader.InstrumentedIndexReader(IndexReader)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexReader.doClose()",1,2,2
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexReader.doOpenIfChanged()",2,1,2
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexWriter.InstrumentedIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexWriter.close()",1,2,2
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyReader.InstrumentedTaxonomyReader(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyReader.openIndexReader(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter.InstrumentedTaxonomyWriter(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter.createIndexWriterConfig(OpenMode)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter.openIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter.openReader()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.LeakChecker()",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.nopen()",1,3,3
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.openReader(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.openWriter(Directory)",1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.testLeaks()",1,3,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.Block.Block(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.CharBlockArray()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.CharBlockArray(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.addBlock()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(CharSequence)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(CharSequence,int,int)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(String)",1,3,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(char)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(char[],int,int)",1,3,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.blockIndex(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.charAt(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.flush(OutputStream)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.indexInBlock(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.length()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.open(InputStream)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.subSequence(int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.toString()",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.Cl2oTaxonomyWriterCache(int,float,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.close()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.get(CategoryPath)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.get(CategoryPath,int)",1,3,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.getMemoryUsage()",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.hasRoom(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.put(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.put(CategoryPath,int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.CollisionMap(CharBlockArray)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.CollisionMap(int,CharBlockArray)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.CollisionMap(int,float,CharBlockArray)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.Entry.Entry(int,int,int,Entry)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator.EntryIterator(Entry[],int)",1,1,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator.hasNext()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator.next()",2,1,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator.remove()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.addEntry(int,int,int,int)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.addLabel(CategoryPath,int,int)",3,3,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.addLabel(CategoryPath,int,int,int)",3,3,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.addLabelOffset(int,int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.capacity()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.entryIterator()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.get(CategoryPath,int)",2,3,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.get(CategoryPath,int,int)",2,3,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.getMemoryUsage()",1,1,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.grow()",1,4,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.indexFor(int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.size()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.CompactLabelToOrdinal()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.CompactLabelToOrdinal(int,float,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.HashArray.HashArray(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabel(CategoryPath,int)",4,4,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabel(CategoryPath,int,int)",4,4,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabel(HashArray,CategoryPath,int,int)",2,2,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabel(HashArray,CategoryPath,int,int,int)",2,2,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabelOffset(int,int,int)",3,3,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabelOffsetToHashArray(HashArray,int,int,int)",2,1,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.determineCapacity(int,int)",1,1,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.flush(File)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getMemoryUsage()",1,3,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getOrdinal(CategoryPath)",4,2,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getOrdinal(CategoryPath,int)",4,2,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getOrdinal(HashArray,CategoryPath,int)",4,1,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getOrdinal(HashArray,CategoryPath,int,int)",4,1,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.grow()",1,7,10
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.indexFor(int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.init()",1,1,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.open(File,float,int)",1,6,7
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.sizeOfMap()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.stringHashCode(CategoryPath)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.stringHashCode(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.stringHashCode(CharBlockArray,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal.getMaxOrdinal()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal.getNextOrdinal()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCharBlockArray.assertEqualsInternal(String,StringBuilder,CharBlockArray)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCharBlockArray.testArray()",1,5,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.LabelToOrdinalMap()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.addLabel(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.addLabel(CategoryPath,int,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.getOrdinal(CategoryPath)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.getOrdinal(CategoryPath,int)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.testL2O()",1,6,9
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.LruTaxonomyWriterCache(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.LruTaxonomyWriterCache(int,LRUType)",1,1,2
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.close()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.get(CategoryPath)",2,1,2
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.get(CategoryPath,int)",2,3,4
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.hasRoom(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.put(CategoryPath,int)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.put(CategoryPath,int,int)",1,2,2
"org.apache.lucene.facet.taxonomy.writercache.lru.NameHashIntCacheLRU.NameHashIntCacheLRU(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameHashIntCacheLRU.key(CategoryPath)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameHashIntCacheLRU.key(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.NameIntCacheLRU(int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.clear()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.createCache(int)",1,1,2
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.get(CategoryPath)",1,1,2
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.getMaxSize()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.getSize()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.isCacheFull()",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.key(CategoryPath)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.key(CategoryPath,int)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.makeRoomLRU()",3,3,5
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.put(CategoryPath,Integer)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.put(CategoryPath,int,Integer)",1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.stats()",1,1,1
"org.apache.lucene.facet.util.MultiCategoryListIterator.MultiCategoryListIterator(CategoryListIterator...)",1,1,1
"org.apache.lucene.facet.util.MultiCategoryListIterator.init()",1,3,3
"org.apache.lucene.facet.util.MultiCategoryListIterator.nextCategory()",3,2,3
"org.apache.lucene.facet.util.MultiCategoryListIterator.skipTo(int)",1,3,3
"org.apache.lucene.facet.util.PartitionsUtils.partitionName(CategoryListParams,int)",2,1,2
"org.apache.lucene.facet.util.PartitionsUtils.partitionNameByOrdinal(FacetIndexingParams,CategoryListParams,int)",1,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionNumber(FacetIndexingParams,int)",1,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionNumber(FacetSearchParams,int)",1,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionOffset(FacetIndexingParams,int,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionOffset(FacetSearchParams,int,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionSize(FacetIndexingParams,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionSize(FacetSearchParams,TaxonomyReader)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.AllValueHeap(boolean)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.add(FacetResultNode)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.clear()",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.insertWithOverflow(FacetResultNode)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.pop()",1,3,4
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.size()",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.top()",2,2,2
"org.apache.lucene.facet.util.ResultSortUtils.MaxOrdinalHeap.MaxOrdinalHeap(int)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MaxOrdinalHeap.lessThan(FacetResultNode,FacetResultNode)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MaxValueHeap.MaxValueHeap(int)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MaxValueHeap.lessThan(FacetResultNode,FacetResultNode)",2,2,2
"org.apache.lucene.facet.util.ResultSortUtils.MinOrdinalHeap.MinOrdinalHeap(int)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MinOrdinalHeap.lessThan(FacetResultNode,FacetResultNode)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MinValueHeap.MinValueHeap(int)",1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MinValueHeap.lessThan(FacetResultNode,FacetResultNode)",2,2,2
"org.apache.lucene.facet.util.ResultSortUtils.createSuitableHeap(FacetRequest)",7,4,7
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs.AllDocsScoredDocIDs(IndexReader)",1,1,1
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs.getDocIDs()",1,1,4
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs.iterator()",1,1,3
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs.size()",1,1,1
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs.AllLiveDocsScoredDocIDs(IndexReader)",1,1,1
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs.getDocIDs()",1,2,5
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs.iterator()",1,1,3
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs.size()",1,1,1
"org.apache.lucene.facet.util.ScoredDocIdsUtils.clearDeleted(IndexReader,OpenBitSet)",2,3,4
"org.apache.lucene.facet.util.ScoredDocIdsUtils.createAllDocsScoredDocIDs(IndexReader)",2,1,2
"org.apache.lucene.facet.util.ScoredDocIdsUtils.createScoredDocIDsSubset(ScoredDocIDs,int[])",2,4,8
"org.apache.lucene.facet.util.ScoredDocIdsUtils.createScoredDocIds(DocIdSet,int)",2,2,4
"org.apache.lucene.facet.util.ScoredDocIdsUtils.getComplementSet(ScoredDocIDs,IndexReader)",1,2,2
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory.DocumentFactory(int)",1,1,1
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory.getDoc(int)",1,3,3
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory.haveAlpha(int)",1,1,1
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory.markedDeleted(int)",1,1,1
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.createReaderWithNDocs(Random,int,Directory)",1,1,1
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.createReaderWithNDocs(Random,int,DocumentFactory,Directory)",1,2,2
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.testAllDocs()",1,2,2
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.testComplementIterator()",1,2,2
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.testWithDeletions()",1,3,7
"org.apache.lucene.index.AbstractAllTermDocs.AbstractAllTermDocs(int)",1,1,1
"org.apache.lucene.index.AbstractAllTermDocs.close()",1,1,1
"org.apache.lucene.index.AbstractAllTermDocs.doc()",1,1,1
"org.apache.lucene.index.AbstractAllTermDocs.freq()",1,1,1
"org.apache.lucene.index.AbstractAllTermDocs.next()",1,1,1
"org.apache.lucene.index.AbstractAllTermDocs.read(int[],int[])",1,2,4
"org.apache.lucene.index.AbstractAllTermDocs.seek(Term)",2,1,2
"org.apache.lucene.index.AbstractAllTermDocs.seek(TermEnum)",1,1,1
"org.apache.lucene.index.AbstractAllTermDocs.skipTo(int)",3,2,3
"org.apache.lucene.index.AllTermDocs.AllTermDocs(SegmentReader)",1,1,1
"org.apache.lucene.index.AllTermDocs.isDeleted(int)",1,2,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.BalancedSegmentMergePolicy()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.MergePolicyParams()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getMaxMergeDocs()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getMaxSmallSegments()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getMergeFactor()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getNumLargeSegments()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getPartialExpunge()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.isUseCompoundFile()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setMaxMergeDocs(int)",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setMaxSmallSegments(int)",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setMergeFactor(int)",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setNumLargeSegments(int)",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setPartialExpunge(boolean)",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setUseCompoundFile(boolean)",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.createVarianceTable(SegmentInfos,int,int)",1,2,5
"org.apache.lucene.index.BalancedSegmentMergePolicy.findBalancedMerges(SegmentInfos,int,int,boolean)",2,5,13
"org.apache.lucene.index.BalancedSegmentMergePolicy.findForcedDeletesMerges(SegmentInfos)",1,4,6
"org.apache.lucene.index.BalancedSegmentMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",4,8,9
"org.apache.lucene.index.BalancedSegmentMergePolicy.findMerges(SegmentInfos)",7,9,13
"org.apache.lucene.index.BalancedSegmentMergePolicy.findOneSegmentToExpunge(SegmentInfos,int)",2,3,4
"org.apache.lucene.index.BalancedSegmentMergePolicy.getMaxSmallSegments()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.getNumLargeSegments()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.getPartialExpunge()",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.setMaxSmallSegments(int)",2,1,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.setMergeFactor(int)",1,2,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.setMergePolicyParams(MergePolicyParams)",1,2,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.setNumLargeSegments(int)",2,1,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.setPartialExpunge(boolean)",1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.size(SegmentInfo)",1,2,3
"org.apache.lucene.index.BufferedDeletes.addDocID(int)",1,1,1
"org.apache.lucene.index.BufferedDeletes.addQuery(Query,int)",1,2,2
"org.apache.lucene.index.BufferedDeletes.addTerm(Term,int)",2,2,4
"org.apache.lucene.index.BufferedDeletes.any()",1,3,3
"org.apache.lucene.index.BufferedDeletes.clear()",1,1,1
"org.apache.lucene.index.BufferedDeletes.clearDocIDs()",1,1,1
"org.apache.lucene.index.BufferedDeletes.toString()",2,6,6
"org.apache.lucene.index.BufferedDeletesStream.ApplyDeletesResult.ApplyDeletesResult(boolean,long,List<SegmentInfo>)",1,1,1
"org.apache.lucene.index.BufferedDeletesStream.BufferedDeletesStream(int)",1,1,1
"org.apache.lucene.index.BufferedDeletesStream.QueryAndLimit.QueryAndLimit(Query,int)",1,1,1
"org.apache.lucene.index.BufferedDeletesStream.any()",1,1,1
"org.apache.lucene.index.BufferedDeletesStream.applyDeletes(ReaderPool,List<SegmentInfo>)",3,14,25
"org.apache.lucene.index.BufferedDeletesStream.applyQueryDeletes(Iterable<QueryAndLimit>,SegmentReader)",6,5,6
"org.apache.lucene.index.BufferedDeletesStream.applyTermDeletes(Iterable<Term>,SegmentReader)",1,3,3
"org.apache.lucene.index.BufferedDeletesStream.bytesUsed()",1,1,1
"org.apache.lucene.index.BufferedDeletesStream.checkDeleteStats()",1,1,2
"org.apache.lucene.index.BufferedDeletesStream.checkDeleteTerm(Term)",1,4,4
"org.apache.lucene.index.BufferedDeletesStream.clear()",1,1,1
"org.apache.lucene.index.BufferedDeletesStream.getNextGen()",1,1,1
"org.apache.lucene.index.BufferedDeletesStream.message(String)",1,2,2
"org.apache.lucene.index.BufferedDeletesStream.numTerms()",1,1,1
"org.apache.lucene.index.BufferedDeletesStream.prune(SegmentInfos)",3,5,5
"org.apache.lucene.index.BufferedDeletesStream.prune(int)",1,4,4
"org.apache.lucene.index.BufferedDeletesStream.push(FrozenBufferedDeletes)",1,2,2
"org.apache.lucene.index.BufferedDeletesStream.setInfoStream(PrintStream)",1,1,1
"org.apache.lucene.index.BugReproAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.index.BugReproAnalyzerTokenizer.incrementToken()",2,2,2
"org.apache.lucene.index.BugReproAnalyzerTokenizer.reset()",1,1,1
"org.apache.lucene.index.BugReproTokenStream.incrementToken()",2,2,2
"org.apache.lucene.index.BugReproTokenStream.reset()",1,1,1
"org.apache.lucene.index.ByteBlockPool.ByteBlockPool(Allocator)",1,1,1
"org.apache.lucene.index.ByteBlockPool.allocSlice(byte[],int)",1,2,2
"org.apache.lucene.index.ByteBlockPool.newSlice(int)",1,2,2
"org.apache.lucene.index.ByteBlockPool.nextBuffer()",1,2,2
"org.apache.lucene.index.ByteBlockPool.reset()",1,4,4
"org.apache.lucene.index.ByteSliceReader.close()",1,1,1
"org.apache.lucene.index.ByteSliceReader.eof()",1,1,1
"org.apache.lucene.index.ByteSliceReader.getFilePointer()",1,1,1
"org.apache.lucene.index.ByteSliceReader.init(ByteBlockPool,int,int)",1,1,2
"org.apache.lucene.index.ByteSliceReader.length()",1,1,1
"org.apache.lucene.index.ByteSliceReader.nextSlice()",1,1,2
"org.apache.lucene.index.ByteSliceReader.readByte()",1,2,2
"org.apache.lucene.index.ByteSliceReader.readBytes(byte[],int,int)",3,3,3
"org.apache.lucene.index.ByteSliceReader.seek(long)",1,1,1
"org.apache.lucene.index.ByteSliceReader.writeTo(IndexOutput)",3,3,3
"org.apache.lucene.index.ByteSliceWriter.ByteSliceWriter(ByteBlockPool)",1,1,1
"org.apache.lucene.index.ByteSliceWriter.getAddress()",1,1,1
"org.apache.lucene.index.ByteSliceWriter.init(int)",1,1,1
"org.apache.lucene.index.ByteSliceWriter.writeByte(byte)",1,2,2
"org.apache.lucene.index.ByteSliceWriter.writeBytes(byte[],int,int)",1,3,3
"org.apache.lucene.index.ByteSliceWriter.writeVInt(int)",1,2,2
"org.apache.lucene.index.CharBlockPool.CharBlockPool(DocumentsWriter)",1,1,1
"org.apache.lucene.index.CharBlockPool.nextBuffer()",1,2,2
"org.apache.lucene.index.CharBlockPool.reset()",1,1,1
"org.apache.lucene.index.CheckIndex.CheckIndex(Directory)",1,1,1
"org.apache.lucene.index.CheckIndex.MySegmentTermDocs.MySegmentTermDocs(SegmentReader)",1,1,1
"org.apache.lucene.index.CheckIndex.MySegmentTermDocs.seek(Term)",1,1,1
"org.apache.lucene.index.CheckIndex.MySegmentTermDocs.skippingDoc()",1,1,1
"org.apache.lucene.index.CheckIndex.assertsOn()",1,1,1
"org.apache.lucene.index.CheckIndex.checkIndex()",1,1,1
"org.apache.lucene.index.CheckIndex.checkIndex(List<String>)",28,39,65
"org.apache.lucene.index.CheckIndex.fixIndex(Status)",2,1,2
"org.apache.lucene.index.CheckIndex.main(String[])",1,18,19
"org.apache.lucene.index.CheckIndex.msg(String)",1,2,2
"org.apache.lucene.index.CheckIndex.setInfoStream(PrintStream)",1,1,1
"org.apache.lucene.index.CheckIndex.testAsserts()",1,1,1
"org.apache.lucene.index.CheckIndex.testFieldNorms(FieldInfos,SegmentReader)",1,6,6
"org.apache.lucene.index.CheckIndex.testStoredFields(SegmentInfo,SegmentReader,NumberFormat)",2,6,7
"org.apache.lucene.index.CheckIndex.testTermIndex(SegmentInfo,FieldInfos,SegmentReader)",25,14,33
"org.apache.lucene.index.CheckIndex.testTermVectors(SegmentInfo,SegmentReader,NumberFormat)",1,6,7
"org.apache.lucene.index.CoalescedDeletes.TermMergeQueue.TermMergeQueue(int)",1,1,1
"org.apache.lucene.index.CoalescedDeletes.TermMergeQueue.lessThan(SubIterator,SubIterator)",2,1,2
"org.apache.lucene.index.CoalescedDeletes.mergedIterator(List<Iterator<Term>>)",6,9,12
"org.apache.lucene.index.CoalescedDeletes.queriesIterable()",1,1,1
"org.apache.lucene.index.CoalescedDeletes.termsIterable()",1,2,2
"org.apache.lucene.index.CoalescedDeletes.toString()",1,1,1
"org.apache.lucene.index.CoalescedDeletes.update(FrozenBufferedDeletes)",1,2,2
"org.apache.lucene.index.CompoundFileExtractor.main(String[])",2,14,15
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.CSIndexInput(IndexInput,long,long)",1,1,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.CSIndexInput(IndexInput,long,long,int)",1,1,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.clone()",1,1,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.close()",1,1,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.copyBytes(IndexOutput,long)",3,2,3
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.length()",1,1,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.readInternal(byte[],int,int)",2,1,2
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.seekInternal(long)",1,1,1
"org.apache.lucene.index.CompoundFileReader.CompoundFileReader(Directory,String)",1,1,1
"org.apache.lucene.index.CompoundFileReader.CompoundFileReader(Directory,String,int)",3,6,10
"org.apache.lucene.index.CompoundFileReader.close()",2,1,2
"org.apache.lucene.index.CompoundFileReader.createOutput(String)",1,1,1
"org.apache.lucene.index.CompoundFileReader.deleteFile(String)",1,1,1
"org.apache.lucene.index.CompoundFileReader.fileExists(String)",1,1,1
"org.apache.lucene.index.CompoundFileReader.fileLength(String)",2,1,2
"org.apache.lucene.index.CompoundFileReader.fileModified(String)",1,1,1
"org.apache.lucene.index.CompoundFileReader.getDirectory()",1,1,1
"org.apache.lucene.index.CompoundFileReader.getName()",1,1,1
"org.apache.lucene.index.CompoundFileReader.listAll()",1,1,2
"org.apache.lucene.index.CompoundFileReader.makeLock(String)",1,1,1
"org.apache.lucene.index.CompoundFileReader.openInput(String)",1,1,1
"org.apache.lucene.index.CompoundFileReader.openInput(String,int)",3,2,3
"org.apache.lucene.index.CompoundFileReader.renameFile(String,String)",1,1,1
"org.apache.lucene.index.CompoundFileReader.touchFile(String)",1,1,1
"org.apache.lucene.index.CompoundFileWriter.CompoundFileWriter(Directory,String)",1,1,1
"org.apache.lucene.index.CompoundFileWriter.CompoundFileWriter(Directory,String,CheckAbort)",3,1,3
"org.apache.lucene.index.CompoundFileWriter.addFile(String)",1,1,1
"org.apache.lucene.index.CompoundFileWriter.addFile(String,Directory)",4,1,4
"org.apache.lucene.index.CompoundFileWriter.close()",3,4,7
"org.apache.lucene.index.CompoundFileWriter.copyFile(FileEntry,IndexOutput)",2,2,3
"org.apache.lucene.index.CompoundFileWriter.getDirectory()",1,1,1
"org.apache.lucene.index.CompoundFileWriter.getName()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.ConcurrentMergeScheduler()",1,2,2
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.MergeThread(IndexWriter,OneMerge)",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.getCurrentMerge()",3,1,3
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.getRunningMerge()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.run()",3,9,9
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.setRunningMerge(OneMerge)",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.setThreadPriority(int)",1,1,3
"org.apache.lucene.index.ConcurrentMergeScheduler.addMyself()",1,4,4
"org.apache.lucene.index.ConcurrentMergeScheduler.anyUnhandledExceptions()",2,2,3
"org.apache.lucene.index.ConcurrentMergeScheduler.clearSuppressExceptions()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.clearUnhandledExceptions()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.close()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(OneMerge)",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.getMaxMergeCount()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.getMaxThreadCount()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.getMergeThread(IndexWriter,OneMerge)",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.getMergeThreadPriority()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(Throwable)",1,1,2
"org.apache.lucene.index.ConcurrentMergeScheduler.initMergeThreadPriority()",1,2,3
"org.apache.lucene.index.ConcurrentMergeScheduler.merge(IndexWriter)",4,11,12
"org.apache.lucene.index.ConcurrentMergeScheduler.mergeThreadCount()",1,3,4
"org.apache.lucene.index.ConcurrentMergeScheduler.message(String)",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergeCount(int)",3,1,3
"org.apache.lucene.index.ConcurrentMergeScheduler.setMaxThreadCount(int)",3,1,3
"org.apache.lucene.index.ConcurrentMergeScheduler.setMergeThreadPriority(int)",2,1,3
"org.apache.lucene.index.ConcurrentMergeScheduler.setSuppressExceptions()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.setTestMode()",1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.sync()",5,4,6
"org.apache.lucene.index.ConcurrentMergeScheduler.updateMergeThreads()",5,11,12
"org.apache.lucene.index.ConcurrentMergeScheduler.verbose()",1,2,2
"org.apache.lucene.index.CorruptIndexException.CorruptIndexException(String)",1,1,1
"org.apache.lucene.index.DefaultSkipListReader.DefaultSkipListReader(IndexInput,int,int)",1,1,1
"org.apache.lucene.index.DefaultSkipListReader.getFreqPointer()",1,1,1
"org.apache.lucene.index.DefaultSkipListReader.getPayloadLength()",1,1,1
"org.apache.lucene.index.DefaultSkipListReader.getProxPointer()",1,1,1
"org.apache.lucene.index.DefaultSkipListReader.init(long,long,long,int,boolean)",1,1,1
"org.apache.lucene.index.DefaultSkipListReader.readSkipData(int,IndexInput)",1,3,3
"org.apache.lucene.index.DefaultSkipListReader.seekChild(int)",1,1,1
"org.apache.lucene.index.DefaultSkipListReader.setLastSkipData(int)",1,1,1
"org.apache.lucene.index.DefaultSkipListWriter.DefaultSkipListWriter(int,int,int,IndexOutput,IndexOutput)",1,1,1
"org.apache.lucene.index.DefaultSkipListWriter.resetSkip()",1,2,2
"org.apache.lucene.index.DefaultSkipListWriter.setFreqOutput(IndexOutput)",1,1,1
"org.apache.lucene.index.DefaultSkipListWriter.setProxOutput(IndexOutput)",1,1,1
"org.apache.lucene.index.DefaultSkipListWriter.setSkipData(int,boolean,int)",1,2,2
"org.apache.lucene.index.DefaultSkipListWriter.writeSkipData(int,IndexOutput)",1,3,3
"org.apache.lucene.index.DirectoryReader.DirectoryReader(Directory,SegmentInfos,IndexDeletionPolicy,boolean,int)",1,3,4
"org.apache.lucene.index.DirectoryReader.DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],Map<String, byte[]>,boolean,boolean,int)",6,18,23
"org.apache.lucene.index.DirectoryReader.DirectoryReader(IndexWriter,SegmentInfos,int,boolean)",1,5,6
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.MultiTermDocs(IndexReader,IndexReader[],int[])",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.close()",1,3,3
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.doc()",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.freq()",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.next()",6,5,7
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.read(int[],int[])",7,4,8
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.seek(Term)",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.seek(TermEnum)",1,1,3
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.skipTo(int)",6,5,7
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.termDocs(IndexReader)",1,2,2
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.termDocs(int)",1,3,3
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.MultiTermEnum(IndexReader,IndexReader[],int[],Term)",1,7,7
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.close()",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.docFreq()",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.next()",4,5,7
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.term()",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.MultiTermPositions(IndexReader,IndexReader[],int[])",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.getPayload(byte[],int)",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.getPayloadLength()",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.isPayloadAvailable()",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.nextPosition()",1,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.termDocs(IndexReader)",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.ReaderCommit(SegmentInfos,Directory)",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.delete()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getDirectory()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getFileNames()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getGeneration()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getSegmentCount()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getSegmentsFileName()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getUserData()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getVersion()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.isDeleted()",1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.toString()",1,1,1
"org.apache.lucene.index.DirectoryReader.acquireWriteLock()",6,5,7
"org.apache.lucene.index.DirectoryReader.clone()",1,1,2
"org.apache.lucene.index.DirectoryReader.clone(boolean)",1,1,4
"org.apache.lucene.index.DirectoryReader.directory()",1,1,1
"org.apache.lucene.index.DirectoryReader.doClose()",2,3,6
"org.apache.lucene.index.DirectoryReader.doCommit(Map<String, String>)",1,5,6
"org.apache.lucene.index.DirectoryReader.doDelete(int)",1,1,1
"org.apache.lucene.index.DirectoryReader.doOpenFromWriter(boolean,IndexCommit)",5,2,5
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged()",1,1,1
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(IndexCommit)",1,1,1
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(IndexWriter,boolean)",2,2,3
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(SegmentInfos,boolean,boolean)",1,1,2
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(boolean)",1,1,1
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(boolean,IndexCommit)",2,2,3
"org.apache.lucene.index.DirectoryReader.doOpenNoWriter(boolean,IndexCommit)",9,9,10
"org.apache.lucene.index.DirectoryReader.doSetNorm(int,String,byte)",1,1,1
"org.apache.lucene.index.DirectoryReader.doUndeleteAll()",1,2,2
"org.apache.lucene.index.DirectoryReader.docFreq(Term)",1,2,2
"org.apache.lucene.index.DirectoryReader.document(int,FieldSelector)",1,1,1
"org.apache.lucene.index.DirectoryReader.getCommitUserData()",1,1,1
"org.apache.lucene.index.DirectoryReader.getFieldInfos()",1,1,1
"org.apache.lucene.index.DirectoryReader.getIndexCommit()",1,1,1
"org.apache.lucene.index.DirectoryReader.getSequentialSubReaders()",1,1,1
"org.apache.lucene.index.DirectoryReader.getTermFreqVector(int,String)",1,1,1
"org.apache.lucene.index.DirectoryReader.getTermFreqVector(int,String,TermVectorMapper)",1,1,1
"org.apache.lucene.index.DirectoryReader.getTermFreqVector(int,TermVectorMapper)",1,1,1
"org.apache.lucene.index.DirectoryReader.getTermFreqVectors(int)",1,1,1
"org.apache.lucene.index.DirectoryReader.getTermInfosIndexDivisor()",1,1,1
"org.apache.lucene.index.DirectoryReader.getVersion()",1,1,1
"org.apache.lucene.index.DirectoryReader.hasDeletions()",1,1,1
"org.apache.lucene.index.DirectoryReader.hasNorms(String)",3,2,3
"org.apache.lucene.index.DirectoryReader.initialize(SegmentReader[])",1,3,4
"org.apache.lucene.index.DirectoryReader.isCurrent()",2,3,3
"org.apache.lucene.index.DirectoryReader.isDeleted(int)",1,1,1
"org.apache.lucene.index.DirectoryReader.isOptimized()",1,2,2
"org.apache.lucene.index.DirectoryReader.listCommits(Directory)",1,6,7
"org.apache.lucene.index.DirectoryReader.maxDoc()",1,1,1
"org.apache.lucene.index.DirectoryReader.norms(String)",3,2,4
"org.apache.lucene.index.DirectoryReader.norms(String,byte[],int)",1,5,5
"org.apache.lucene.index.DirectoryReader.numDocs()",1,3,3
"org.apache.lucene.index.DirectoryReader.open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int)",2,1,2
"org.apache.lucene.index.DirectoryReader.readerIndex(int)",1,1,1
"org.apache.lucene.index.DirectoryReader.readerIndex(int,int[],int)",4,1,6
"org.apache.lucene.index.DirectoryReader.rollbackCommit()",1,2,2
"org.apache.lucene.index.DirectoryReader.startCommit()",1,2,2
"org.apache.lucene.index.DirectoryReader.termDocs()",2,2,2
"org.apache.lucene.index.DirectoryReader.termDocs(Term)",2,2,2
"org.apache.lucene.index.DirectoryReader.termPositions()",2,2,2
"org.apache.lucene.index.DirectoryReader.terms()",2,2,2
"org.apache.lucene.index.DirectoryReader.terms(Term)",2,2,2
"org.apache.lucene.index.DirectoryReader.toString()",1,5,5
"org.apache.lucene.index.DocFieldConsumer.setFieldInfos(FieldInfos)",1,1,1
"org.apache.lucene.index.DocFieldProcessor.DocFieldProcessor(DocumentsWriter,DocFieldConsumer)",1,1,1
"org.apache.lucene.index.DocFieldProcessor.abort()",1,1,1
"org.apache.lucene.index.DocFieldProcessor.addThread(DocumentsWriterThreadState)",1,1,1
"org.apache.lucene.index.DocFieldProcessor.flush(Collection<DocConsumerPerThread>,SegmentWriteState)",1,2,2
"org.apache.lucene.index.DocFieldProcessor.freeRAM()",1,1,1
"org.apache.lucene.index.DocFieldProcessorPerField.DocFieldProcessorPerField(DocFieldProcessorPerThread,FieldInfo)",1,1,1
"org.apache.lucene.index.DocFieldProcessorPerField.abort()",1,1,1
"org.apache.lucene.index.DocFieldProcessorPerThread.DocFieldProcessorPerThread(DocumentsWriterThreadState,DocFieldProcessor)",1,1,1
"org.apache.lucene.index.DocFieldProcessorPerThread.PerDoc.abort()",1,1,1
"org.apache.lucene.index.DocFieldProcessorPerThread.PerDoc.finish()",1,1,1
"org.apache.lucene.index.DocFieldProcessorPerThread.PerDoc.sizeInBytes()",1,1,1
"org.apache.lucene.index.DocFieldProcessorPerThread.abort()",4,3,12
"org.apache.lucene.index.DocFieldProcessorPerThread.fields()",1,3,3
"org.apache.lucene.index.DocFieldProcessorPerThread.freePerDoc(PerDoc)",1,1,1
"org.apache.lucene.index.DocFieldProcessorPerThread.getPerDoc()",2,3,3
"org.apache.lucene.index.DocFieldProcessorPerThread.processDocument()",3,13,15
"org.apache.lucene.index.DocFieldProcessorPerThread.rehash()",1,3,3
"org.apache.lucene.index.DocFieldProcessorPerThread.trimFields(SegmentWriteState)",1,5,6
"org.apache.lucene.index.DocHelper.add(Map<String, Fieldable>,Fieldable)",1,1,1
"org.apache.lucene.index.DocHelper.createDocument(int,String,int)",1,2,2
"org.apache.lucene.index.DocHelper.numFields(Document)",1,1,1
"org.apache.lucene.index.DocHelper.setupDoc(Document)",1,2,2
"org.apache.lucene.index.DocHelper.writeDoc(Random,Directory,Analyzer,Similarity,Document)",1,1,1
"org.apache.lucene.index.DocHelper.writeDoc(Random,Directory,Document)",1,1,1
"org.apache.lucene.index.DocInverter.DocInverter(InvertedDocConsumer,InvertedDocEndConsumer)",1,1,1
"org.apache.lucene.index.DocInverter.abort()",1,1,1
"org.apache.lucene.index.DocInverter.addThread(DocFieldProcessorPerThread)",1,1,1
"org.apache.lucene.index.DocInverter.flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>,SegmentWriteState)",1,3,3
"org.apache.lucene.index.DocInverter.freeRAM()",1,1,1
"org.apache.lucene.index.DocInverter.setFieldInfos(FieldInfos)",1,1,1
"org.apache.lucene.index.DocInverterPerField.DocInverterPerField(DocInverterPerThread,FieldInfo)",1,1,1
"org.apache.lucene.index.DocInverterPerField.abort()",1,1,1
"org.apache.lucene.index.DocInverterPerField.processFields(Fieldable[],int)",13,19,22
"org.apache.lucene.index.DocInverterPerThread.DocInverterPerThread(DocFieldProcessorPerThread,DocInverter)",1,1,1
"org.apache.lucene.index.DocInverterPerThread.SingleTokenAttributeSource.SingleTokenAttributeSource()",1,1,1
"org.apache.lucene.index.DocInverterPerThread.SingleTokenAttributeSource.reinit(String,int,int)",1,1,1
"org.apache.lucene.index.DocInverterPerThread.abort()",1,1,1
"org.apache.lucene.index.DocInverterPerThread.addField(FieldInfo)",1,1,1
"org.apache.lucene.index.DocInverterPerThread.finishDocument()",1,1,1
"org.apache.lucene.index.DocInverterPerThread.startDocument()",1,1,1
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator.ByteBlockAllocator(int)",1,1,1
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator.getByteBlock()",1,2,2
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator.recycleByteBlocks(List<byte[]>)",1,2,2
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator.recycleByteBlocks(byte[][],int,int)",1,2,2
"org.apache.lucene.index.DocumentsWriter.DocState.clear()",1,1,1
"org.apache.lucene.index.DocumentsWriter.DocState.testPoint(String)",1,1,1
"org.apache.lucene.index.DocumentsWriter.DocWriter.setNext(DocWriter)",1,1,1
"org.apache.lucene.index.DocumentsWriter.DocumentsWriter(IndexWriterConfig,Directory,IndexWriter,FieldInfos,BufferedDeletesStream)",1,1,1
"org.apache.lucene.index.DocumentsWriter.PerDocBuffer.newBuffer(int)",1,1,1
"org.apache.lucene.index.DocumentsWriter.PerDocBuffer.recycle()",1,2,2
"org.apache.lucene.index.DocumentsWriter.SkipDocWriter.abort()",1,1,1
"org.apache.lucene.index.DocumentsWriter.SkipDocWriter.finish()",1,1,1
"org.apache.lucene.index.DocumentsWriter.SkipDocWriter.sizeInBytes()",1,1,1
"org.apache.lucene.index.DocumentsWriter.WaitQueue.WaitQueue()",1,1,1
"org.apache.lucene.index.DocumentsWriter.WaitQueue.abort()",1,3,3
"org.apache.lucene.index.DocumentsWriter.WaitQueue.add(DocWriter)",4,5,6
"org.apache.lucene.index.DocumentsWriter.WaitQueue.doPause()",1,1,2
"org.apache.lucene.index.DocumentsWriter.WaitQueue.doResume()",1,1,2
"org.apache.lucene.index.DocumentsWriter.WaitQueue.reset()",1,1,1
"org.apache.lucene.index.DocumentsWriter.WaitQueue.writeDocument(DocWriter)",1,2,4
"org.apache.lucene.index.DocumentsWriter.abort()",1,5,8
"org.apache.lucene.index.DocumentsWriter.addDocument(Document,Analyzer)",1,1,1
"org.apache.lucene.index.DocumentsWriter.allThreadsIdle()",3,1,3
"org.apache.lucene.index.DocumentsWriter.anyChanges()",1,2,2
"org.apache.lucene.index.DocumentsWriter.anyDeletions()",1,1,1
"org.apache.lucene.index.DocumentsWriter.balanceRAM()",8,22,27
"org.apache.lucene.index.DocumentsWriter.bytesUsed()",1,1,1
"org.apache.lucene.index.DocumentsWriter.bytesUsed(long)",1,1,1
"org.apache.lucene.index.DocumentsWriter.close()",1,1,1
"org.apache.lucene.index.DocumentsWriter.deleteDocID(int)",1,1,1
"org.apache.lucene.index.DocumentsWriter.deleteQueries(Query...)",1,2,2
"org.apache.lucene.index.DocumentsWriter.deleteQuery(Query)",1,1,1
"org.apache.lucene.index.DocumentsWriter.deleteTerm(Term,boolean)",1,1,1
"org.apache.lucene.index.DocumentsWriter.deleteTerms(Term...)",1,2,2
"org.apache.lucene.index.DocumentsWriter.doAfterFlush()",1,2,2
"org.apache.lucene.index.DocumentsWriter.finishDocument(DocumentsWriterThreadState,DocWriter)",2,5,7
"org.apache.lucene.index.DocumentsWriter.flush(IndexWriter,IndexFileDeleter,MergePolicy,SegmentInfos)",3,21,23
"org.apache.lucene.index.DocumentsWriter.getCharBlock()",1,2,2
"org.apache.lucene.index.DocumentsWriter.getFieldInfos()",1,1,1
"org.apache.lucene.index.DocumentsWriter.getIntBlock()",1,2,2
"org.apache.lucene.index.DocumentsWriter.getNumDocs()",1,1,1
"org.apache.lucene.index.DocumentsWriter.getPendingDeletes()",1,1,1
"org.apache.lucene.index.DocumentsWriter.getSegment()",1,1,1
"org.apache.lucene.index.DocumentsWriter.getThreadState(Term,int)",1,6,11
"org.apache.lucene.index.DocumentsWriter.message(String)",1,2,2
"org.apache.lucene.index.DocumentsWriter.newPerDocBuffer()",1,1,1
"org.apache.lucene.index.DocumentsWriter.pushDeletes(SegmentInfo,SegmentInfos)",1,9,9
"org.apache.lucene.index.DocumentsWriter.recycleCharBlocks(char[][],int)",1,2,2
"org.apache.lucene.index.DocumentsWriter.recycleIntBlocks(int[][],int,int)",1,2,2
"org.apache.lucene.index.DocumentsWriter.setAborting()",1,2,2
"org.apache.lucene.index.DocumentsWriter.setInfoStream(PrintStream)",1,1,2
"org.apache.lucene.index.DocumentsWriter.setMaxFieldLength(int)",1,1,2
"org.apache.lucene.index.DocumentsWriter.setSimilarity(Similarity)",1,1,2
"org.apache.lucene.index.DocumentsWriter.toMB(long)",1,1,1
"org.apache.lucene.index.DocumentsWriter.updateDocument(Document,Analyzer,Term)",4,6,7
"org.apache.lucene.index.DocumentsWriter.updateDocuments(Collection<Document>,Analyzer,Term)",8,14,17
"org.apache.lucene.index.DocumentsWriter.waitForWaitQueue()",2,2,3
"org.apache.lucene.index.DocumentsWriter.waitIdle()",2,2,3
"org.apache.lucene.index.DocumentsWriter.waitReady(DocumentsWriterThreadState)",3,2,6
"org.apache.lucene.index.DocumentsWriterThreadState.DocumentsWriterThreadState(DocumentsWriter)",1,1,1
"org.apache.lucene.index.DocumentsWriterThreadState.doAfterFlush()",1,1,1
"org.apache.lucene.index.FieldInfo.FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions)",1,1,3
"org.apache.lucene.index.FieldInfo.clone()",1,1,1
"org.apache.lucene.index.FieldInfo.update(boolean,boolean,boolean,boolean,IndexOptions)",1,3,9
"org.apache.lucene.index.FieldInfos.FieldInfos()",1,1,1
"org.apache.lucene.index.FieldInfos.FieldInfos(Directory,String)",2,3,4
"org.apache.lucene.index.FieldInfos.add(Document)",1,2,2
"org.apache.lucene.index.FieldInfos.add(FieldInfo)",1,1,1
"org.apache.lucene.index.FieldInfos.add(FieldInfos)",1,2,2
"org.apache.lucene.index.FieldInfos.add(String,boolean)",1,1,1
"org.apache.lucene.index.FieldInfos.add(String,boolean,boolean)",1,1,1
"org.apache.lucene.index.FieldInfos.add(String,boolean,boolean,boolean)",1,1,1
"org.apache.lucene.index.FieldInfos.add(String,boolean,boolean,boolean,boolean,IndexOptions)",2,2,3
"org.apache.lucene.index.FieldInfos.addInternal(String,boolean,boolean,boolean,boolean,IndexOptions)",1,1,1
"org.apache.lucene.index.FieldInfos.clone()",1,2,2
"org.apache.lucene.index.FieldInfos.fieldInfo(String)",1,1,1
"org.apache.lucene.index.FieldInfos.fieldInfo(int)",1,2,2
"org.apache.lucene.index.FieldInfos.fieldName(int)",1,1,2
"org.apache.lucene.index.FieldInfos.fieldNumber(String)",1,1,2
"org.apache.lucene.index.FieldInfos.hasProx()",3,2,4
"org.apache.lucene.index.FieldInfos.hasVectors()",3,2,3
"org.apache.lucene.index.FieldInfos.iterator()",1,1,1
"org.apache.lucene.index.FieldInfos.read(IndexInput,String)",7,4,12
"org.apache.lucene.index.FieldInfos.size()",1,1,1
"org.apache.lucene.index.FieldInfos.write(Directory,String)",1,1,1
"org.apache.lucene.index.FieldInfos.write(IndexOutput)",1,2,9
"org.apache.lucene.index.FieldInvertState.FieldInvertState()",1,1,1
"org.apache.lucene.index.FieldInvertState.FieldInvertState(int,int,int,int,float)",1,1,1
"org.apache.lucene.index.FieldInvertState.getAttributeSource()",1,1,1
"org.apache.lucene.index.FieldInvertState.getBoost()",1,1,1
"org.apache.lucene.index.FieldInvertState.getLength()",1,1,1
"org.apache.lucene.index.FieldInvertState.getMaxTermFrequency()",1,1,1
"org.apache.lucene.index.FieldInvertState.getNumOverlap()",1,1,1
"org.apache.lucene.index.FieldInvertState.getOffset()",1,1,1
"org.apache.lucene.index.FieldInvertState.getPosition()",1,1,1
"org.apache.lucene.index.FieldInvertState.getUniqueTermCount()",1,1,1
"org.apache.lucene.index.FieldInvertState.reset(float)",1,1,1
"org.apache.lucene.index.FieldInvertState.setBoost(float)",1,1,1
"org.apache.lucene.index.FieldInvertState.setLength(int)",1,1,1
"org.apache.lucene.index.FieldInvertState.setNumOverlap(int)",1,1,1
"org.apache.lucene.index.FieldNormModifier.FieldNormModifier(Directory,Similarity)",1,1,1
"org.apache.lucene.index.FieldNormModifier.main(String[])",1,5,5
"org.apache.lucene.index.FieldNormModifier.reSetNorms(String)",1,12,12
"org.apache.lucene.index.FieldReaderException.FieldReaderException()",1,1,1
"org.apache.lucene.index.FieldReaderException.FieldReaderException(String)",1,1,1
"org.apache.lucene.index.FieldReaderException.FieldReaderException(String,Throwable)",1,1,1
"org.apache.lucene.index.FieldReaderException.FieldReaderException(Throwable)",1,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.FieldSortedTermVectorMapper(Comparator<TermVectorEntry>)",1,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.FieldSortedTermVectorMapper(boolean,boolean,Comparator<TermVectorEntry>)",1,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.getComparator()",1,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.getFieldToTerms()",1,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",1,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.setExpectations(String,int,boolean,boolean)",1,1,1
"org.apache.lucene.index.FieldsReader.FieldsReader(Directory,String,FieldInfos)",1,1,1
"org.apache.lucene.index.FieldsReader.FieldsReader(Directory,String,FieldInfos,int)",1,1,1
"org.apache.lucene.index.FieldsReader.FieldsReader(Directory,String,FieldInfos,int,int,int)",2,3,7
"org.apache.lucene.index.FieldsReader.FieldsReader(FieldInfos,int,int,int,int,int,IndexInput,IndexInput)",1,1,1
"org.apache.lucene.index.FieldsReader.LazyField.LazyField(String,Store,Index,TermVector,int,long,boolean,boolean,boolean)",1,1,2
"org.apache.lucene.index.FieldsReader.LazyField.LazyField(String,Store,int,long,boolean,boolean,boolean)",1,1,2
"org.apache.lucene.index.FieldsReader.LazyField.getBinaryValue(byte[])",3,4,8
"org.apache.lucene.index.FieldsReader.LazyField.getFieldStream()",1,2,2
"org.apache.lucene.index.FieldsReader.LazyField.readerValue()",1,1,1
"org.apache.lucene.index.FieldsReader.LazyField.stringValue()",3,5,7
"org.apache.lucene.index.FieldsReader.LazyField.tokenStreamValue()",1,1,1
"org.apache.lucene.index.FieldsReader.addField(Document,FieldInfo,boolean,boolean,boolean,int)",1,5,5
"org.apache.lucene.index.FieldsReader.addFieldLazy(Document,FieldInfo,boolean,boolean,boolean,boolean,int)",1,5,5
"org.apache.lucene.index.FieldsReader.addFieldSize(Document,FieldInfo,boolean,boolean,int)",2,2,7
"org.apache.lucene.index.FieldsReader.canReadRawDocs()",1,1,1
"org.apache.lucene.index.FieldsReader.clone()",1,1,1
"org.apache.lucene.index.FieldsReader.close()",1,3,3
"org.apache.lucene.index.FieldsReader.detectCodeVersion(Directory,String)",2,1,2
"org.apache.lucene.index.FieldsReader.doc(int,FieldSelector)",3,4,11
"org.apache.lucene.index.FieldsReader.ensureOpen()",2,1,2
"org.apache.lucene.index.FieldsReader.loadNumericField(FieldInfo,int)",6,6,6
"org.apache.lucene.index.FieldsReader.rawDocs(int[],int,int)",1,3,3
"org.apache.lucene.index.FieldsReader.seekIndex(int)",1,1,1
"org.apache.lucene.index.FieldsReader.size()",1,1,1
"org.apache.lucene.index.FieldsReader.skipField(boolean,boolean,int)",2,2,5
"org.apache.lucene.index.FieldsReader.skipFieldBytes(boolean,boolean,int)",1,2,4
"org.apache.lucene.index.FieldsReader.uncompress(byte[])",1,2,2
"org.apache.lucene.index.FieldsWriter.FieldsWriter(Directory,String,FieldInfos)",1,2,2
"org.apache.lucene.index.FieldsWriter.FieldsWriter(IndexOutput,IndexOutput,FieldInfos)",1,1,1
"org.apache.lucene.index.FieldsWriter.abort()",1,2,5
"org.apache.lucene.index.FieldsWriter.addDocument(Document)",1,4,5
"org.apache.lucene.index.FieldsWriter.addRawDocuments(IndexInput,int[],int)",1,2,2
"org.apache.lucene.index.FieldsWriter.close()",1,2,2
"org.apache.lucene.index.FieldsWriter.finish(int)",2,2,2
"org.apache.lucene.index.FieldsWriter.flushDocument(int,RAMOutputStream)",1,1,1
"org.apache.lucene.index.FieldsWriter.setFieldsStream(IndexOutput)",1,1,1
"org.apache.lucene.index.FieldsWriter.skipDocument()",1,1,1
"org.apache.lucene.index.FieldsWriter.writeField(FieldInfo,Fieldable)",3,6,16
"org.apache.lucene.index.FilterIndexReader.FilterIndexReader(IndexReader)",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.FilterTermDocs(TermDocs)",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.close()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.doc()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.freq()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.next()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.read(int[],int[])",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.seek(Term)",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.seek(TermEnum)",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.skipTo(int)",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.FilterTermEnum(TermEnum)",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.close()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.docFreq()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.next()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.term()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.FilterTermPositions(TermPositions)",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.getPayload(byte[],int)",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.getPayloadLength()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.isPayloadAvailable()",1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.nextPosition()",1,1,1
"org.apache.lucene.index.FilterIndexReader.directory()",1,1,1
"org.apache.lucene.index.FilterIndexReader.doClose()",1,1,1
"org.apache.lucene.index.FilterIndexReader.doCommit(Map<String, String>)",1,1,1
"org.apache.lucene.index.FilterIndexReader.doDelete(int)",1,1,1
"org.apache.lucene.index.FilterIndexReader.doSetNorm(int,String,byte)",1,1,1
"org.apache.lucene.index.FilterIndexReader.doUndeleteAll()",1,1,1
"org.apache.lucene.index.FilterIndexReader.docFreq(Term)",1,1,1
"org.apache.lucene.index.FilterIndexReader.document(int,FieldSelector)",1,1,1
"org.apache.lucene.index.FilterIndexReader.getCommitUserData()",1,1,1
"org.apache.lucene.index.FilterIndexReader.getCoreCacheKey()",1,1,1
"org.apache.lucene.index.FilterIndexReader.getDeletesCacheKey()",1,1,1
"org.apache.lucene.index.FilterIndexReader.getFieldInfos()",1,1,1
"org.apache.lucene.index.FilterIndexReader.getIndexCommit()",1,1,1
"org.apache.lucene.index.FilterIndexReader.getSequentialSubReaders()",1,1,1
"org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int,String)",1,1,1
"org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int,String,TermVectorMapper)",1,1,1
"org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int,TermVectorMapper)",1,1,1
"org.apache.lucene.index.FilterIndexReader.getTermFreqVectors(int)",1,1,1
"org.apache.lucene.index.FilterIndexReader.getTermInfosIndexDivisor()",1,1,1
"org.apache.lucene.index.FilterIndexReader.getUniqueTermCount()",1,1,1
"org.apache.lucene.index.FilterIndexReader.getVersion()",1,1,1
"org.apache.lucene.index.FilterIndexReader.hasDeletions()",1,1,1
"org.apache.lucene.index.FilterIndexReader.hasNorms(String)",1,1,1
"org.apache.lucene.index.FilterIndexReader.isCurrent()",1,1,1
"org.apache.lucene.index.FilterIndexReader.isDeleted(int)",1,1,1
"org.apache.lucene.index.FilterIndexReader.isOptimized()",1,1,1
"org.apache.lucene.index.FilterIndexReader.maxDoc()",1,1,1
"org.apache.lucene.index.FilterIndexReader.norms(String)",1,1,1
"org.apache.lucene.index.FilterIndexReader.norms(String,byte[],int)",1,1,1
"org.apache.lucene.index.FilterIndexReader.numDocs()",1,1,1
"org.apache.lucene.index.FilterIndexReader.termDocs()",1,1,1
"org.apache.lucene.index.FilterIndexReader.termDocs(Term)",1,1,1
"org.apache.lucene.index.FilterIndexReader.termPositions()",1,1,1
"org.apache.lucene.index.FilterIndexReader.terms()",1,1,1
"org.apache.lucene.index.FilterIndexReader.terms(Term)",1,1,1
"org.apache.lucene.index.FilterIndexReader.toString()",1,1,1
"org.apache.lucene.index.FormatPostingsDocsWriter.FormatPostingsDocsWriter(SegmentWriteState,FormatPostingsTermsWriter)",1,2,2
"org.apache.lucene.index.FormatPostingsDocsWriter.addDoc(int,int)",2,4,7
"org.apache.lucene.index.FormatPostingsDocsWriter.close()",1,1,1
"org.apache.lucene.index.FormatPostingsDocsWriter.finish()",1,2,2
"org.apache.lucene.index.FormatPostingsDocsWriter.setField(FieldInfo)",1,1,1
"org.apache.lucene.index.FormatPostingsFieldsWriter.FormatPostingsFieldsWriter(SegmentWriteState,FieldInfos)",1,2,2
"org.apache.lucene.index.FormatPostingsFieldsWriter.addField(FieldInfo)",1,1,1
"org.apache.lucene.index.FormatPostingsFieldsWriter.finish()",1,1,1
"org.apache.lucene.index.FormatPostingsPositionsWriter.FormatPostingsPositionsWriter(SegmentWriteState,FormatPostingsDocsWriter)",1,2,2
"org.apache.lucene.index.FormatPostingsPositionsWriter.addPosition(int,byte[],int,int)",1,4,4
"org.apache.lucene.index.FormatPostingsPositionsWriter.close()",1,1,1
"org.apache.lucene.index.FormatPostingsPositionsWriter.finish()",1,1,1
"org.apache.lucene.index.FormatPostingsPositionsWriter.setField(FieldInfo)",1,1,2
"org.apache.lucene.index.FormatPostingsTermsConsumer.addTerm(String)",1,2,3
"org.apache.lucene.index.FormatPostingsTermsWriter.FormatPostingsTermsWriter(SegmentWriteState,FormatPostingsFieldsWriter)",1,1,1
"org.apache.lucene.index.FormatPostingsTermsWriter.addTerm(char[],int)",1,2,2
"org.apache.lucene.index.FormatPostingsTermsWriter.close()",1,1,1
"org.apache.lucene.index.FormatPostingsTermsWriter.finish()",1,1,1
"org.apache.lucene.index.FormatPostingsTermsWriter.setField(FieldInfo)",1,1,1
"org.apache.lucene.index.FreqProxFieldMergeState.FreqProxFieldMergeState(FreqProxTermsWriterPerField)",1,1,1
"org.apache.lucene.index.FreqProxFieldMergeState.nextDoc()",3,3,6
"org.apache.lucene.index.FreqProxFieldMergeState.nextTerm()",2,2,3
"org.apache.lucene.index.FreqProxFieldMergeState.termText()",1,1,2
"org.apache.lucene.index.FreqProxTermsWriter.abort()",1,1,1
"org.apache.lucene.index.FreqProxTermsWriter.addThread(TermsHashPerThread)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriter.appendPostings(String,SegmentWriteState,FreqProxTermsWriterPerField[],FormatPostingsFieldsConsumer)",1,12,26
"org.apache.lucene.index.FreqProxTermsWriter.compareText(char[],int,char[],int)",6,1,6
"org.apache.lucene.index.FreqProxTermsWriter.flush(Map<TermsHashConsumerPerThread, Collection<TermsHashConsumerPerField>>,SegmentWriteState)",1,9,11
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray.FreqProxPostingsArray(int)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray.bytesPerPosting()",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray.copyTo(ParallelPostingsArray,int)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray.newInstance(int)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxTermsWriterPerField(TermsHashPerField,FreqProxTermsWriterPerThread,FieldInfo)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.abort()",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.addTerm(int)",1,7,8
"org.apache.lucene.index.FreqProxTermsWriterPerField.compareTo(FreqProxTermsWriterPerField)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.createPostingsArray(int)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.finish()",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.getStreamCount()",2,1,2
"org.apache.lucene.index.FreqProxTermsWriterPerField.newTerm(int)",1,3,3
"org.apache.lucene.index.FreqProxTermsWriterPerField.reset()",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.skippingLongTerm()",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.start(Fieldable)",1,2,2
"org.apache.lucene.index.FreqProxTermsWriterPerField.start(Fieldable[],int)",3,2,3
"org.apache.lucene.index.FreqProxTermsWriterPerField.writeProx(int,int)",1,3,4
"org.apache.lucene.index.FreqProxTermsWriterPerThread.FreqProxTermsWriterPerThread(TermsHashPerThread)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerThread.abort()",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerThread.addField(TermsHashPerField,FieldInfo)",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerThread.finishDocument()",1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerThread.startDocument()",1,1,1
"org.apache.lucene.index.FrozenBufferedDeletes.FrozenBufferedDeletes(BufferedDeletes,long)",1,3,3
"org.apache.lucene.index.FrozenBufferedDeletes.any()",1,1,2
"org.apache.lucene.index.FrozenBufferedDeletes.queriesIterable()",1,1,1
"org.apache.lucene.index.FrozenBufferedDeletes.termsIterable()",1,1,1
"org.apache.lucene.index.FrozenBufferedDeletes.toString()",1,1,4
"org.apache.lucene.index.IndexCommit.compareTo(IndexCommit)",4,1,4
"org.apache.lucene.index.IndexCommit.equals(Object)",2,3,3
"org.apache.lucene.index.IndexCommit.getTimestamp()",1,1,1
"org.apache.lucene.index.IndexCommit.hashCode()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.CommitPoint(Collection<CommitPoint>,Directory,SegmentInfos)",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.delete()",1,2,2
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getDirectory()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getFileNames()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getGeneration()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getSegmentCount()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getSegmentsFileName()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getUserData()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getVersion()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.isDeleted()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.toString()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,IndexWriter)",6,20,26
"org.apache.lucene.index.IndexFileDeleter.RefCount.DecRef()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.RefCount.IncRef()",1,2,2
"org.apache.lucene.index.IndexFileDeleter.RefCount.RefCount(String)",1,1,1
"org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean)",1,4,4
"org.apache.lucene.index.IndexFileDeleter.close()",1,3,3
"org.apache.lucene.index.IndexFileDeleter.decRef(Collection<String>)",1,2,2
"org.apache.lucene.index.IndexFileDeleter.decRef(SegmentInfos)",1,2,2
"org.apache.lucene.index.IndexFileDeleter.decRef(String)",1,3,4
"org.apache.lucene.index.IndexFileDeleter.deleteCommits()",1,9,9
"org.apache.lucene.index.IndexFileDeleter.deleteFile(String)",1,5,6
"org.apache.lucene.index.IndexFileDeleter.deleteFiles(List<String>)",1,2,2
"org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection<String>)",1,4,4
"org.apache.lucene.index.IndexFileDeleter.deletePendingFiles()",1,4,4
"org.apache.lucene.index.IndexFileDeleter.exists(String)",2,2,2
"org.apache.lucene.index.IndexFileDeleter.getLastSegmentInfos()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.getRefCount(String)",1,2,2
"org.apache.lucene.index.IndexFileDeleter.incRef(Collection<String>)",1,2,2
"org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean)",1,2,2
"org.apache.lucene.index.IndexFileDeleter.incRef(String)",1,2,3
"org.apache.lucene.index.IndexFileDeleter.locked()",1,2,2
"org.apache.lucene.index.IndexFileDeleter.message(String)",1,1,1
"org.apache.lucene.index.IndexFileDeleter.refresh()",1,1,1
"org.apache.lucene.index.IndexFileDeleter.refresh(String)",1,9,10
"org.apache.lucene.index.IndexFileDeleter.revisitPolicy()",1,3,3
"org.apache.lucene.index.IndexFileDeleter.setInfoStream(PrintStream)",1,2,2
"org.apache.lucene.index.IndexFileNameFilter.IndexFileNameFilter()",1,3,3
"org.apache.lucene.index.IndexFileNameFilter.accept(File,String)",7,7,9
"org.apache.lucene.index.IndexFileNameFilter.getFilter()",1,1,1
"org.apache.lucene.index.IndexFileNameFilter.isCFSFile(String)",4,3,5
"org.apache.lucene.index.IndexFileNames.fileNameFromGeneration(String,String,long)",3,4,4
"org.apache.lucene.index.IndexFileNames.isDocStoreFile(String)",4,2,4
"org.apache.lucene.index.IndexFileNames.isSeparateNormsFile(String)",2,1,2
"org.apache.lucene.index.IndexFileNames.matchesExtension(String,String)",1,1,1
"org.apache.lucene.index.IndexFileNames.segmentFileName(String,String)",2,2,2
"org.apache.lucene.index.IndexFileNames.stripSegmentName(String)",1,3,3
"org.apache.lucene.index.IndexFormatTooNewException.IndexFormatTooNewException(DataInput,int,int,int)",1,1,1
"org.apache.lucene.index.IndexFormatTooNewException.IndexFormatTooNewException(String,int,int,int)",1,1,1
"org.apache.lucene.index.IndexFormatTooOldException.IndexFormatTooOldException(DataInput,String)",1,1,1
"org.apache.lucene.index.IndexFormatTooOldException.IndexFormatTooOldException(DataInput,int,int,int)",1,1,1
"org.apache.lucene.index.IndexFormatTooOldException.IndexFormatTooOldException(String,String)",1,1,1
"org.apache.lucene.index.IndexFormatTooOldException.IndexFormatTooOldException(String,int,int,int)",1,1,1
"org.apache.lucene.index.IndexNotFoundException.IndexNotFoundException(String)",1,1,1
"org.apache.lucene.index.IndexReader.IndexReader()",1,1,1
"org.apache.lucene.index.IndexReader.acquireWriteLock()",1,1,1
"org.apache.lucene.index.IndexReader.addReaderClosedListener(ReaderClosedListener)",1,1,1
"org.apache.lucene.index.IndexReader.clone()",1,1,1
"org.apache.lucene.index.IndexReader.clone(boolean)",1,1,1
"org.apache.lucene.index.IndexReader.close()",1,2,2
"org.apache.lucene.index.IndexReader.commit()",1,1,1
"org.apache.lucene.index.IndexReader.commit(Map<String, String>)",1,1,1
"org.apache.lucene.index.IndexReader.decRef()",3,3,4
"org.apache.lucene.index.IndexReader.deleteDocument(int)",1,1,1
"org.apache.lucene.index.IndexReader.deleteDocuments(Term)",2,2,3
"org.apache.lucene.index.IndexReader.directory()",1,1,1
"org.apache.lucene.index.IndexReader.doOpenIfChanged()",1,1,1
"org.apache.lucene.index.IndexReader.doOpenIfChanged(IndexCommit)",1,1,1
"org.apache.lucene.index.IndexReader.doOpenIfChanged(IndexWriter,boolean)",1,1,1
"org.apache.lucene.index.IndexReader.doOpenIfChanged(boolean)",1,1,1
"org.apache.lucene.index.IndexReader.document(int)",2,3,3
"org.apache.lucene.index.IndexReader.ensureOpen()",2,1,2
"org.apache.lucene.index.IndexReader.flush()",1,1,1
"org.apache.lucene.index.IndexReader.flush(Map<String, String>)",1,1,1
"org.apache.lucene.index.IndexReader.getCommitUserData()",1,1,1
"org.apache.lucene.index.IndexReader.getCommitUserData(Directory)",1,1,1
"org.apache.lucene.index.IndexReader.getCoreCacheKey()",1,1,1
"org.apache.lucene.index.IndexReader.getCurrentVersion(Directory)",1,1,1
"org.apache.lucene.index.IndexReader.getDeletesCacheKey()",1,1,1
"org.apache.lucene.index.IndexReader.getIndexCommit()",1,1,1
"org.apache.lucene.index.IndexReader.getRefCount()",1,1,1
"org.apache.lucene.index.IndexReader.getSequentialSubReaders()",1,1,1
"org.apache.lucene.index.IndexReader.getTermInfosIndexDivisor()",1,1,1
"org.apache.lucene.index.IndexReader.getUniqueTermCount()",1,1,1
"org.apache.lucene.index.IndexReader.getVersion()",1,1,1
"org.apache.lucene.index.IndexReader.hasNorms(String)",1,1,1
"org.apache.lucene.index.IndexReader.incRef()",1,1,1
"org.apache.lucene.index.IndexReader.indexExists(Directory)",1,1,2
"org.apache.lucene.index.IndexReader.isCurrent()",1,1,1
"org.apache.lucene.index.IndexReader.isOptimized()",1,1,1
"org.apache.lucene.index.IndexReader.lastModified(Directory)",1,1,1
"org.apache.lucene.index.IndexReader.listCommits(Directory)",1,1,1
"org.apache.lucene.index.IndexReader.notifyReaderClosedListeners()",1,2,2
"org.apache.lucene.index.IndexReader.numDeletedDocs()",1,1,1
"org.apache.lucene.index.IndexReader.open(Directory)",1,1,1
"org.apache.lucene.index.IndexReader.open(Directory,IndexDeletionPolicy,boolean)",1,1,1
"org.apache.lucene.index.IndexReader.open(Directory,IndexDeletionPolicy,boolean,int)",1,1,1
"org.apache.lucene.index.IndexReader.open(Directory,boolean)",1,1,1
"org.apache.lucene.index.IndexReader.open(Directory,int)",1,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit)",1,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit,IndexDeletionPolicy,boolean)",1,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit,IndexDeletionPolicy,boolean,int)",1,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit,boolean)",1,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit,int)",1,1,1
"org.apache.lucene.index.IndexReader.open(IndexWriter,boolean)",1,1,1
"org.apache.lucene.index.IndexReader.openIfChanged(IndexReader)",3,2,3
"org.apache.lucene.index.IndexReader.openIfChanged(IndexReader,IndexCommit)",3,2,3
"org.apache.lucene.index.IndexReader.openIfChanged(IndexReader,IndexWriter,boolean)",3,2,3
"org.apache.lucene.index.IndexReader.openIfChanged(IndexReader,boolean)",3,2,3
"org.apache.lucene.index.IndexReader.removeReaderClosedListener(ReaderClosedListener)",1,1,1
"org.apache.lucene.index.IndexReader.reopen()",2,1,2
"org.apache.lucene.index.IndexReader.reopen(IndexCommit)",2,1,2
"org.apache.lucene.index.IndexReader.reopen(IndexWriter,boolean)",2,1,2
"org.apache.lucene.index.IndexReader.reopen(boolean)",2,1,2
"org.apache.lucene.index.IndexReader.setNorm(int,String,byte)",1,1,1
"org.apache.lucene.index.IndexReader.setNorm(int,String,float)",1,1,1
"org.apache.lucene.index.IndexReader.termDocs(Term)",1,1,1
"org.apache.lucene.index.IndexReader.termPositions(Term)",1,1,1
"org.apache.lucene.index.IndexReader.toString()",1,4,5
"org.apache.lucene.index.IndexReader.tryIncRef()",3,2,3
"org.apache.lucene.index.IndexReader.undeleteAll()",1,1,1
"org.apache.lucene.index.IndexSorter.DocScore.compareTo(DocScore)",2,1,3
"org.apache.lucene.index.IndexSorter.DocScore.toString()",1,1,1
"org.apache.lucene.index.IndexSorter.IndexSorter()",1,1,1
"org.apache.lucene.index.IndexSorter.PostingMap.compareTo(PostingMap)",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.SortedTermPositions(TermPositions,int[])",1,2,2
"org.apache.lucene.index.IndexSorter.SortedTermPositions.close()",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.doc()",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.freq()",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.getPayload(byte[],int)",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.getPayloadLength()",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.isPayloadAvailable()",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.next()",2,2,2
"org.apache.lucene.index.IndexSorter.SortedTermPositions.nextPosition()",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.read(int[],int[])",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.seek(Term)",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.seek(TermEnum)",1,4,5
"org.apache.lucene.index.IndexSorter.SortedTermPositions.skipTo(int)",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.SortingReader(IndexReader,int[])",1,1,3
"org.apache.lucene.index.IndexSorter.SortingReader.doDelete(int)",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.doSetNorm(int,String,byte)",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.document(int,FieldSelector)",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.getFieldInfos()",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.getSequentialSubReaders()",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.getTermFreqVectors(int)",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.isDeleted(int)",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.norms(String)",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.norms(String,byte[],int)",1,1,3
"org.apache.lucene.index.IndexSorter.SortingReader.termDocs()",1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.termPositions()",1,1,1
"org.apache.lucene.index.IndexSorter.main(String[])",1,4,4
"org.apache.lucene.index.IndexSorter.oldToNew(IndexReader,String)",1,3,5
"org.apache.lucene.index.IndexSorter.sort(Directory,Directory,String)",1,1,1
"org.apache.lucene.index.IndexSplitter.IndexSplitter(File)",1,1,1
"org.apache.lucene.index.IndexSplitter.copyFile(File,File)",1,2,2
"org.apache.lucene.index.IndexSplitter.getIdx(String)",3,2,3
"org.apache.lucene.index.IndexSplitter.getInfo(String)",3,3,3
"org.apache.lucene.index.IndexSplitter.listSegments()",1,2,2
"org.apache.lucene.index.IndexSplitter.main(String[])",3,7,7
"org.apache.lucene.index.IndexSplitter.remove(String[])",1,2,2
"org.apache.lucene.index.IndexSplitter.split(File,String[])",1,3,3
"org.apache.lucene.index.IndexUpgrader.IndexUpgrader(Directory,IndexWriterConfig,PrintStream,boolean)",1,1,1
"org.apache.lucene.index.IndexUpgrader.IndexUpgrader(Directory,Version)",1,1,1
"org.apache.lucene.index.IndexUpgrader.IndexUpgrader(Directory,Version,PrintStream,boolean)",1,1,1
"org.apache.lucene.index.IndexUpgrader.main(String[])",1,9,9
"org.apache.lucene.index.IndexUpgrader.printUsage()",1,1,1
"org.apache.lucene.index.IndexUpgrader.upgrade()",4,3,4
"org.apache.lucene.index.IndexWriter.FlushControl.clearDeletes()",1,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.clearFlushPending()",1,2,2
"org.apache.lucene.index.IndexWriter.FlushControl.flushByRAMUsage(String)",4,4,4
"org.apache.lucene.index.IndexWriter.FlushControl.getFlushDeletes()",1,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.getFlushPending()",1,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.setFlushPending(String,boolean)",4,5,8
"org.apache.lucene.index.IndexWriter.FlushControl.setFlushPendingNoWait(String)",1,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.waitUpdate(int,int)",1,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.waitUpdate(int,int,boolean)",5,4,8
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength)",1,1,1
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit)",1,1,1
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,MaxFieldLength)",1,1,1
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength)",1,1,2
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)",1,1,2
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,IndexWriterConfig)",5,10,14
"org.apache.lucene.index.IndexWriter.MaxFieldLength.MaxFieldLength(String,int)",1,1,1
"org.apache.lucene.index.IndexWriter.MaxFieldLength.MaxFieldLength(int)",1,1,1
"org.apache.lucene.index.IndexWriter.MaxFieldLength.getLimit()",1,1,1
"org.apache.lucene.index.IndexWriter.MaxFieldLength.toString()",1,1,1
"org.apache.lucene.index.IndexWriter.ReaderPool.clear(List<SegmentInfo>)",1,4,5
"org.apache.lucene.index.IndexWriter.ReaderPool.close()",1,3,3
"org.apache.lucene.index.IndexWriter.ReaderPool.commit(SegmentInfos)",1,3,4
"org.apache.lucene.index.IndexWriter.ReaderPool.drop(List<SegmentInfo>)",1,2,2
"org.apache.lucene.index.IndexWriter.ReaderPool.drop(SegmentInfo)",1,2,2
"org.apache.lucene.index.IndexWriter.ReaderPool.dropAll()",1,2,2
"org.apache.lucene.index.IndexWriter.ReaderPool.get(SegmentInfo,boolean)",1,1,1
"org.apache.lucene.index.IndexWriter.ReaderPool.get(SegmentInfo,boolean,int,int)",1,7,8
"org.apache.lucene.index.IndexWriter.ReaderPool.getIfExists(SegmentInfo)",1,2,2
"org.apache.lucene.index.IndexWriter.ReaderPool.getReadOnlyClone(SegmentInfo,boolean,int)",1,1,1
"org.apache.lucene.index.IndexWriter.ReaderPool.infoIsLive(SegmentInfo)",1,1,1
"org.apache.lucene.index.IndexWriter.ReaderPool.mapToLive(SegmentInfo)",1,2,2
"org.apache.lucene.index.IndexWriter.ReaderPool.release(SegmentReader)",1,1,1
"org.apache.lucene.index.IndexWriter.ReaderPool.release(SegmentReader,boolean)",2,7,7
"org.apache.lucene.index.IndexWriter._mergeInit(OneMerge)",4,11,17
"org.apache.lucene.index.IndexWriter.addDocument(Document)",1,1,1
"org.apache.lucene.index.IndexWriter.addDocument(Document,Analyzer)",1,4,5
"org.apache.lucene.index.IndexWriter.addDocuments(Collection<Document>)",1,1,1
"org.apache.lucene.index.IndexWriter.addDocuments(Collection<Document>,Analyzer)",1,1,1
"org.apache.lucene.index.IndexWriter.addIndexes(Directory...)",1,7,7
"org.apache.lucene.index.IndexWriter.addIndexes(IndexReader...)",3,7,7
"org.apache.lucene.index.IndexWriter.addIndexesNoOptimize(Directory...)",1,1,1
"org.apache.lucene.index.IndexWriter.addMergeException(OneMerge)",1,3,3
"org.apache.lucene.index.IndexWriter.checkpoint()",1,1,1
"org.apache.lucene.index.IndexWriter.close()",1,1,1
"org.apache.lucene.index.IndexWriter.close(boolean)",1,3,3
"org.apache.lucene.index.IndexWriter.closeInternal(boolean)",2,11,12
"org.apache.lucene.index.IndexWriter.closeMergeReaders(OneMerge,boolean)",5,6,16
"org.apache.lucene.index.IndexWriter.commit()",1,1,1
"org.apache.lucene.index.IndexWriter.commit(Map<String, String>)",1,1,1
"org.apache.lucene.index.IndexWriter.commitInternal(Map<String, String>)",1,6,6
"org.apache.lucene.index.IndexWriter.commitMerge(OneMerge,SegmentReader)",3,10,15
"org.apache.lucene.index.IndexWriter.commitMergedDeletes(OneMerge,SegmentReader)",3,12,13
"org.apache.lucene.index.IndexWriter.copySegmentAsIs(SegmentInfo,String,Map<String, String>,Set<String>)",4,5,6
"org.apache.lucene.index.IndexWriter.deleteAll()",1,3,3
"org.apache.lucene.index.IndexWriter.deleteDocuments(Query)",1,3,3
"org.apache.lucene.index.IndexWriter.deleteDocuments(Query...)",1,3,3
"org.apache.lucene.index.IndexWriter.deleteDocuments(Term)",1,3,3
"org.apache.lucene.index.IndexWriter.deleteDocuments(Term...)",1,3,3
"org.apache.lucene.index.IndexWriter.deletePendingFiles()",1,1,1
"org.apache.lucene.index.IndexWriter.deleteUnusedFiles()",1,1,1
"org.apache.lucene.index.IndexWriter.doAfterFlush()",1,1,1
"org.apache.lucene.index.IndexWriter.doBeforeFlush()",1,1,1
"org.apache.lucene.index.IndexWriter.doFlush(boolean)",2,19,22
"org.apache.lucene.index.IndexWriter.doWait()",1,1,2
"org.apache.lucene.index.IndexWriter.ensureOpen()",1,1,1
"org.apache.lucene.index.IndexWriter.ensureOpen(boolean)",2,1,4
"org.apache.lucene.index.IndexWriter.ensureValidMerge(OneMerge)",3,3,3
"org.apache.lucene.index.IndexWriter.expungeDeletes()",1,1,1
"org.apache.lucene.index.IndexWriter.expungeDeletes(boolean)",1,1,1
"org.apache.lucene.index.IndexWriter.filesExist(SegmentInfos)",1,2,2
"org.apache.lucene.index.IndexWriter.finishCommit()",1,6,6
"org.apache.lucene.index.IndexWriter.finishMerges(boolean)",1,9,9
"org.apache.lucene.index.IndexWriter.flush(boolean,boolean)",1,3,3
"org.apache.lucene.index.IndexWriter.flush(boolean,boolean,boolean)",1,1,1
"org.apache.lucene.index.IndexWriter.forceMerge(int)",1,1,1
"org.apache.lucene.index.IndexWriter.forceMerge(int,boolean)",9,12,14
"org.apache.lucene.index.IndexWriter.forceMergeDeletes()",1,1,1
"org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean)",6,10,13
"org.apache.lucene.index.IndexWriter.getAnalyzer()",1,1,1
"org.apache.lucene.index.IndexWriter.getBufferedDeleteTermsSize()",1,1,1
"org.apache.lucene.index.IndexWriter.getConfig()",1,1,1
"org.apache.lucene.index.IndexWriter.getCurrentFieldInfos()",1,5,5
"org.apache.lucene.index.IndexWriter.getDefaultInfoStream()",1,1,1
"org.apache.lucene.index.IndexWriter.getDefaultWriteLockTimeout()",1,1,1
"org.apache.lucene.index.IndexWriter.getDirectory()",1,1,1
"org.apache.lucene.index.IndexWriter.getDocCount(int)",2,3,3
"org.apache.lucene.index.IndexWriter.getFieldInfos(SegmentInfo)",1,4,4
"org.apache.lucene.index.IndexWriter.getFlushCount()",1,1,1
"org.apache.lucene.index.IndexWriter.getFlushDeletesCount()",1,1,1
"org.apache.lucene.index.IndexWriter.getInfoStream()",1,1,1
"org.apache.lucene.index.IndexWriter.getKeepFullyDeletedSegments()",1,1,1
"org.apache.lucene.index.IndexWriter.getLogMergePolicy()",2,1,2
"org.apache.lucene.index.IndexWriter.getMaxBufferedDeleteTerms()",1,1,1
"org.apache.lucene.index.IndexWriter.getMaxBufferedDocs()",1,1,1
"org.apache.lucene.index.IndexWriter.getMaxFieldLength()",1,1,1
"org.apache.lucene.index.IndexWriter.getMaxMergeDocs()",1,1,1
"org.apache.lucene.index.IndexWriter.getMergeFactor()",1,1,1
"org.apache.lucene.index.IndexWriter.getMergePolicy()",1,1,1
"org.apache.lucene.index.IndexWriter.getMergeScheduler()",1,1,1
"org.apache.lucene.index.IndexWriter.getMergedSegmentWarmer()",1,1,1
"org.apache.lucene.index.IndexWriter.getMergingSegments()",1,1,1
"org.apache.lucene.index.IndexWriter.getNextMerge()",2,2,2
"org.apache.lucene.index.IndexWriter.getNumBufferedDeleteTerms()",1,1,1
"org.apache.lucene.index.IndexWriter.getNumBufferedDocuments()",1,1,1
"org.apache.lucene.index.IndexWriter.getPayloadProcessorProvider()",1,1,1
"org.apache.lucene.index.IndexWriter.getRAMBufferSizeMB()",1,1,1
"org.apache.lucene.index.IndexWriter.getReader()",1,1,1
"org.apache.lucene.index.IndexWriter.getReader(boolean)",1,1,1
"org.apache.lucene.index.IndexWriter.getReader(int)",1,1,1
"org.apache.lucene.index.IndexWriter.getReader(int,boolean)",1,4,4
"org.apache.lucene.index.IndexWriter.getReaderTermsIndexDivisor()",1,1,1
"org.apache.lucene.index.IndexWriter.getSegmentCount()",1,1,1
"org.apache.lucene.index.IndexWriter.getSimilarity()",1,1,1
"org.apache.lucene.index.IndexWriter.getTermIndexInterval()",1,1,1
"org.apache.lucene.index.IndexWriter.getUseCompoundFile()",1,1,1
"org.apache.lucene.index.IndexWriter.getWriteLockTimeout()",1,1,1
"org.apache.lucene.index.IndexWriter.handleMergeException(Throwable,OneMerge)",6,2,7
"org.apache.lucene.index.IndexWriter.handleOOM(OutOfMemoryError,String)",1,2,2
"org.apache.lucene.index.IndexWriter.hasDeletions()",5,2,5
"org.apache.lucene.index.IndexWriter.isClosed()",1,1,1
"org.apache.lucene.index.IndexWriter.isLocked(Directory)",1,1,1
"org.apache.lucene.index.IndexWriter.keepFullyDeletedSegments()",1,1,1
"org.apache.lucene.index.IndexWriter.maxDoc()",1,2,2
"org.apache.lucene.index.IndexWriter.maxNumSegmentsMergesPending()",5,1,5
"org.apache.lucene.index.IndexWriter.maybeMerge()",1,1,1
"org.apache.lucene.index.IndexWriter.maybeMerge(int)",1,1,1
"org.apache.lucene.index.IndexWriter.merge(OneMerge)",1,12,15
"org.apache.lucene.index.IndexWriter.mergeFinish(OneMerge)",1,3,3
"org.apache.lucene.index.IndexWriter.mergeInit(OneMerge)",1,3,3
"org.apache.lucene.index.IndexWriter.mergeMiddle(OneMerge)",4,20,22
"org.apache.lucene.index.IndexWriter.mergeSuccess(OneMerge)",1,1,1
"org.apache.lucene.index.IndexWriter.message(String)",1,2,2
"org.apache.lucene.index.IndexWriter.messageState()",1,1,1
"org.apache.lucene.index.IndexWriter.newSegmentName()",1,1,1
"org.apache.lucene.index.IndexWriter.newestSegment()",1,2,2
"org.apache.lucene.index.IndexWriter.noDupDirs(Directory...)",4,2,4
"org.apache.lucene.index.IndexWriter.nrtIsCurrent(SegmentInfos)",1,3,3
"org.apache.lucene.index.IndexWriter.numDeletedDocs(SegmentInfo)",2,3,3
"org.apache.lucene.index.IndexWriter.numDocs()",1,3,3
"org.apache.lucene.index.IndexWriter.numRamDocs()",1,1,1
"org.apache.lucene.index.IndexWriter.optimize()",1,1,1
"org.apache.lucene.index.IndexWriter.optimize(boolean)",1,1,1
"org.apache.lucene.index.IndexWriter.optimize(int)",1,1,1
"org.apache.lucene.index.IndexWriter.prepareCommit()",1,1,1
"org.apache.lucene.index.IndexWriter.prepareCommit(Map<String, String>)",3,6,9
"org.apache.lucene.index.IndexWriter.pushMaxBufferedDocs()",1,5,5
"org.apache.lucene.index.IndexWriter.ramSizeInBytes()",1,1,1
"org.apache.lucene.index.IndexWriter.registerMerge(OneMerge)",6,5,10
"org.apache.lucene.index.IndexWriter.resetMergeExceptions()",1,1,1
"org.apache.lucene.index.IndexWriter.rollback()",1,2,2
"org.apache.lucene.index.IndexWriter.rollbackInternal()",1,8,8
"org.apache.lucene.index.IndexWriter.segString()",1,1,1
"org.apache.lucene.index.IndexWriter.segString(Iterable<SegmentInfo>)",1,3,3
"org.apache.lucene.index.IndexWriter.segString(SegmentInfo)",1,4,4
"org.apache.lucene.index.IndexWriter.setDefaultInfoStream(PrintStream)",1,1,1
"org.apache.lucene.index.IndexWriter.setDefaultWriteLockTimeout(long)",1,1,1
"org.apache.lucene.index.IndexWriter.setDiagnostics(SegmentInfo,String)",1,1,1
"org.apache.lucene.index.IndexWriter.setDiagnostics(SegmentInfo,String,Map<String, String>)",1,2,2
"org.apache.lucene.index.IndexWriter.setInfoStream(PrintStream)",1,2,2
"org.apache.lucene.index.IndexWriter.setMaxBufferedDeleteTerms(int)",1,2,2
"org.apache.lucene.index.IndexWriter.setMaxBufferedDocs(int)",1,2,2
"org.apache.lucene.index.IndexWriter.setMaxFieldLength(int)",1,2,2
"org.apache.lucene.index.IndexWriter.setMaxMergeDocs(int)",1,1,1
"org.apache.lucene.index.IndexWriter.setMergeFactor(int)",1,1,1
"org.apache.lucene.index.IndexWriter.setMergePolicy(MergePolicy)",2,3,4
"org.apache.lucene.index.IndexWriter.setMergeScheduler(MergeScheduler)",2,3,4
"org.apache.lucene.index.IndexWriter.setMergedSegmentWarmer(IndexReaderWarmer)",1,1,1
"org.apache.lucene.index.IndexWriter.setPayloadProcessorProvider(PayloadProcessorProvider)",1,1,1
"org.apache.lucene.index.IndexWriter.setRAMBufferSizeMB(double)",1,2,2
"org.apache.lucene.index.IndexWriter.setReaderTermsIndexDivisor(int)",1,2,2
"org.apache.lucene.index.IndexWriter.setSimilarity(Similarity)",1,1,1
"org.apache.lucene.index.IndexWriter.setTermIndexInterval(int)",1,1,1
"org.apache.lucene.index.IndexWriter.setUseCompoundFile(boolean)",1,1,1
"org.apache.lucene.index.IndexWriter.setWriteLockTimeout(long)",1,1,1
"org.apache.lucene.index.IndexWriter.shouldClose()",4,4,4
"org.apache.lucene.index.IndexWriter.startCommit(SegmentInfos,Map<String, String>)",3,10,11
"org.apache.lucene.index.IndexWriter.testPoint(String)",1,1,1
"org.apache.lucene.index.IndexWriter.unlock(Directory)",1,1,1
"org.apache.lucene.index.IndexWriter.updateDocument(Term,Document)",1,1,1
"org.apache.lucene.index.IndexWriter.updateDocument(Term,Document,Analyzer)",1,4,5
"org.apache.lucene.index.IndexWriter.updateDocuments(Term,Collection<Document>)",1,1,1
"org.apache.lucene.index.IndexWriter.updateDocuments(Term,Collection<Document>,Analyzer)",1,4,5
"org.apache.lucene.index.IndexWriter.updatePendingMerges(int)",3,6,9
"org.apache.lucene.index.IndexWriter.verbose()",1,1,1
"org.apache.lucene.index.IndexWriter.waitForMerges()",1,5,5
"org.apache.lucene.index.IndexWriterConfig.IndexWriterConfig(Version,Analyzer)",1,1,2
"org.apache.lucene.index.IndexWriterConfig.clone()",1,1,2
"org.apache.lucene.index.IndexWriterConfig.getAnalyzer()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getDefaultWriteLockTimeout()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getIndexCommit()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getIndexDeletionPolicy()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getIndexingChain()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDeleteTerms()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getMaxThreadStates()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getMergePolicy()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getMergeScheduler()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getMergedSegmentWarmer()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getOpenMode()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getRAMBufferSizeMB()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getReaderPooling()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getReaderTermsIndexDivisor()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getSimilarity()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getTermIndexInterval()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.getWriteLockTimeout()",1,1,1
"org.apache.lucene.index.IndexWriterConfig.setDefaultWriteLockTimeout(long)",1,1,1
"org.apache.lucene.index.IndexWriterConfig.setIndexCommit(IndexCommit)",1,1,1
"org.apache.lucene.index.IndexWriterConfig.setIndexDeletionPolicy(IndexDeletionPolicy)",1,1,2
"org.apache.lucene.index.IndexWriterConfig.setIndexingChain(IndexingChain)",1,1,2
"org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDeleteTerms(int)",2,1,3
"org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)",3,1,5
"org.apache.lucene.index.IndexWriterConfig.setMaxThreadStates(int)",1,1,2
"org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy)",1,1,2
"org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler)",1,1,2
"org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer)",1,1,1
"org.apache.lucene.index.IndexWriterConfig.setOpenMode(OpenMode)",1,1,1
"org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)",4,1,6
"org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean)",1,1,1
"org.apache.lucene.index.IndexWriterConfig.setReaderTermsIndexDivisor(int)",2,1,3
"org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity)",1,2,2
"org.apache.lucene.index.IndexWriterConfig.setTermIndexInterval(int)",1,1,1
"org.apache.lucene.index.IndexWriterConfig.setWriteLockTimeout(long)",1,1,1
"org.apache.lucene.index.IndexWriterConfig.toString()",1,2,3
"org.apache.lucene.index.IntBlockPool.IntBlockPool(DocumentsWriter)",1,1,1
"org.apache.lucene.index.IntBlockPool.nextBuffer()",1,2,2
"org.apache.lucene.index.IntBlockPool.reset()",1,3,3
"org.apache.lucene.index.InvertedDocConsumer.setFieldInfos(FieldInfos)",1,1,1
"org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,2,2
"org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onInit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.LogByteSizeMergePolicy()",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMB()",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMBForForcedMerge()",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMBForOptimize()",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.getMinMergeMB()",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMB(double)",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMBForForcedMerge(double)",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMBForOptimize(double)",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.setMinMergeMB(double)",1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.size(SegmentInfo)",1,1,1
"org.apache.lucene.index.LogDocMergePolicy.LogDocMergePolicy()",1,1,1
"org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs()",1,1,1
"org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int)",1,1,1
"org.apache.lucene.index.LogDocMergePolicy.size(SegmentInfo)",1,1,1
"org.apache.lucene.index.LogMergePolicy.LogMergePolicy()",1,1,1
"org.apache.lucene.index.LogMergePolicy.SegmentInfoAndLevel.SegmentInfoAndLevel(SegmentInfo,float,int)",1,1,1
"org.apache.lucene.index.LogMergePolicy.SegmentInfoAndLevel.compareTo(SegmentInfoAndLevel)",3,1,3
"org.apache.lucene.index.LogMergePolicy.close()",1,1,1
"org.apache.lucene.index.LogMergePolicy.findForcedDeletesMerges(SegmentInfos)",1,12,12
"org.apache.lucene.index.LogMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",9,12,15
"org.apache.lucene.index.LogMergePolicy.findForcedMergesMaxNumSegments(SegmentInfos,int,int)",1,11,13
"org.apache.lucene.index.LogMergePolicy.findForcedMergesSizeLimit(SegmentInfos,int,int)",1,12,13
"org.apache.lucene.index.LogMergePolicy.findMerges(SegmentInfos)",7,17,27
"org.apache.lucene.index.LogMergePolicy.getCalibrateSizeByDeletes()",1,1,1
"org.apache.lucene.index.LogMergePolicy.getMaxMergeDocs()",1,1,1
"org.apache.lucene.index.LogMergePolicy.getMergeFactor()",1,1,1
"org.apache.lucene.index.LogMergePolicy.getNoCFSRatio()",1,1,1
"org.apache.lucene.index.LogMergePolicy.getUseCompoundFile()",1,1,1
"org.apache.lucene.index.LogMergePolicy.isMerged(SegmentInfo)",1,5,5
"org.apache.lucene.index.LogMergePolicy.isMerged(SegmentInfos,int,Map<SegmentInfo, Boolean>)",1,5,7
"org.apache.lucene.index.LogMergePolicy.message(String)",1,2,2
"org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean)",1,1,1
"org.apache.lucene.index.LogMergePolicy.setMaxMergeDocs(int)",1,1,1
"org.apache.lucene.index.LogMergePolicy.setMergeFactor(int)",2,1,2
"org.apache.lucene.index.LogMergePolicy.setNoCFSRatio(double)",2,1,3
"org.apache.lucene.index.LogMergePolicy.setUseCompoundFile(boolean)",1,1,1
"org.apache.lucene.index.LogMergePolicy.sizeBytes(SegmentInfo)",2,2,4
"org.apache.lucene.index.LogMergePolicy.sizeDocs(SegmentInfo)",2,2,2
"org.apache.lucene.index.LogMergePolicy.toString()",1,1,1
"org.apache.lucene.index.LogMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",1,4,4
"org.apache.lucene.index.LogMergePolicy.verbose()",1,2,2
"org.apache.lucene.index.MergeDocIDRemapper.MergeDocIDRemapper(SegmentInfos,int[][],int[],OneMerge,int)",3,4,5
"org.apache.lucene.index.MergeDocIDRemapper.remap(int)",8,1,10
"org.apache.lucene.index.MergePolicy.MergeAbortedException.MergeAbortedException()",1,1,1
"org.apache.lucene.index.MergePolicy.MergeAbortedException.MergeAbortedException(String)",1,1,1
"org.apache.lucene.index.MergePolicy.MergeException.MergeException(String,Directory)",1,1,1
"org.apache.lucene.index.MergePolicy.MergeException.MergeException(Throwable,Directory)",1,1,1
"org.apache.lucene.index.MergePolicy.MergeException.getDirectory()",1,1,1
"org.apache.lucene.index.MergePolicy.MergePolicy()",1,1,1
"org.apache.lucene.index.MergePolicy.MergeSpecification.add(OneMerge)",1,1,1
"org.apache.lucene.index.MergePolicy.MergeSpecification.segString(Directory)",1,2,2
"org.apache.lucene.index.MergePolicy.OneMerge.OneMerge(List<SegmentInfo>)",2,1,3
"org.apache.lucene.index.MergePolicy.OneMerge.abort()",1,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.checkAborted(Directory)",4,4,5
"org.apache.lucene.index.MergePolicy.OneMerge.getException()",1,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.getPause()",1,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.isAborted()",1,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.segString(Directory)",1,6,6
"org.apache.lucene.index.MergePolicy.OneMerge.setException(Throwable)",1,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.setPause(boolean)",1,2,2
"org.apache.lucene.index.MergePolicy.OneMerge.totalBytesSize()",1,2,2
"org.apache.lucene.index.MergePolicy.OneMerge.totalNumDocs()",1,1,2
"org.apache.lucene.index.MergePolicy.setIndexWriter(IndexWriter)",1,1,1
"org.apache.lucene.index.MockIndexInput.MockIndexInput(byte[])",1,1,1
"org.apache.lucene.index.MockIndexInput.close()",1,1,1
"org.apache.lucene.index.MockIndexInput.length()",1,1,1
"org.apache.lucene.index.MockIndexInput.readInternal(byte[],int,int)",1,2,3
"org.apache.lucene.index.MockIndexInput.seekInternal(long)",1,1,1
"org.apache.lucene.index.MockRandomMergePolicy.MockRandomMergePolicy(Random)",1,1,1
"org.apache.lucene.index.MockRandomMergePolicy.close()",1,1,1
"org.apache.lucene.index.MockRandomMergePolicy.findForcedDeletesMerges(SegmentInfos)",1,1,1
"org.apache.lucene.index.MockRandomMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",1,11,11
"org.apache.lucene.index.MockRandomMergePolicy.findMerges(SegmentInfos)",1,3,3
"org.apache.lucene.index.MockRandomMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.MultiLevelSkipListReader(IndexInput,int,int)",1,1,2
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.SkipBuffer(IndexInput,int)",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.close()",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.getFilePointer()",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.length()",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.readByte()",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.readBytes(byte[],int,int)",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.seek(long)",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.close()",1,3,3
"org.apache.lucene.index.MultiLevelSkipListReader.getDoc()",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.init(long,int)",1,1,2
"org.apache.lucene.index.MultiLevelSkipListReader.loadNextSkip(int)",2,2,4
"org.apache.lucene.index.MultiLevelSkipListReader.loadSkipLevels()",1,5,7
"org.apache.lucene.index.MultiLevelSkipListReader.seekChild(int)",1,2,2
"org.apache.lucene.index.MultiLevelSkipListReader.setLastSkipData(int)",1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.skipTo(int)",4,6,9
"org.apache.lucene.index.MultiLevelSkipListWriter.MultiLevelSkipListWriter(int,int,int)",1,2,3
"org.apache.lucene.index.MultiLevelSkipListWriter.bufferSkip(int)",1,3,5
"org.apache.lucene.index.MultiLevelSkipListWriter.init()",1,1,2
"org.apache.lucene.index.MultiLevelSkipListWriter.resetSkip()",1,3,3
"org.apache.lucene.index.MultiLevelSkipListWriter.writeSkip(IndexOutput)",2,3,5
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.FakeDeleteAtomicIndexReader(IndexReader)",1,4,4
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.doDelete(int)",1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.doUndeleteAll()",1,2,2
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.getSequentialSubReaders()",1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.hasDeletions()",1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.isDeleted(int)",1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.numDocs()",1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.termPositions()",3,2,3
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteIndexReader.FakeDeleteIndexReader(IndexReader)",1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteIndexReader.initSubReaders(IndexReader)",1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.main(String[])",11,12,16
"org.apache.lucene.index.MultiPassIndexSplitter.split(IndexReader,Directory[],boolean)",1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.split(Version,IndexReader,Directory[],boolean)",3,9,12
"org.apache.lucene.index.MultiReader.MultiReader(IndexReader...)",1,1,1
"org.apache.lucene.index.MultiReader.MultiReader(IndexReader[],boolean)",1,3,3
"org.apache.lucene.index.MultiReader.MultiReader(IndexReader[],boolean[])",1,2,3
"org.apache.lucene.index.MultiReader.clone()",1,1,2
"org.apache.lucene.index.MultiReader.clone(boolean)",1,1,1
"org.apache.lucene.index.MultiReader.doClose()",2,3,6
"org.apache.lucene.index.MultiReader.doCommit(Map<String, String>)",1,2,2
"org.apache.lucene.index.MultiReader.doDelete(int)",1,1,1
"org.apache.lucene.index.MultiReader.doOpenIfChanged()",1,1,1
"org.apache.lucene.index.MultiReader.doOpenIfChanged(boolean)",1,1,1
"org.apache.lucene.index.MultiReader.doReopen(boolean)",2,9,12
"org.apache.lucene.index.MultiReader.doSetNorm(int,String,byte)",1,1,1
"org.apache.lucene.index.MultiReader.doUndeleteAll()",1,2,2
"org.apache.lucene.index.MultiReader.docFreq(Term)",1,2,2
"org.apache.lucene.index.MultiReader.document(int,FieldSelector)",1,1,1
"org.apache.lucene.index.MultiReader.getFieldInfos()",1,1,1
"org.apache.lucene.index.MultiReader.getSequentialSubReaders()",1,1,1
"org.apache.lucene.index.MultiReader.getTermFreqVector(int,String)",1,1,1
"org.apache.lucene.index.MultiReader.getTermFreqVector(int,String,TermVectorMapper)",1,1,1
"org.apache.lucene.index.MultiReader.getTermFreqVector(int,TermVectorMapper)",1,1,1
"org.apache.lucene.index.MultiReader.getTermFreqVectors(int)",1,1,1
"org.apache.lucene.index.MultiReader.getVersion()",1,1,1
"org.apache.lucene.index.MultiReader.hasDeletions()",1,1,1
"org.apache.lucene.index.MultiReader.hasNorms(String)",3,2,3
"org.apache.lucene.index.MultiReader.isCurrent()",3,2,3
"org.apache.lucene.index.MultiReader.isDeleted(int)",1,1,1
"org.apache.lucene.index.MultiReader.isOptimized()",1,1,1
"org.apache.lucene.index.MultiReader.maxDoc()",1,1,1
"org.apache.lucene.index.MultiReader.norms(String)",3,2,4
"org.apache.lucene.index.MultiReader.norms(String,byte[],int)",1,6,6
"org.apache.lucene.index.MultiReader.numDocs()",1,3,3
"org.apache.lucene.index.MultiReader.readerIndex(int)",1,1,1
"org.apache.lucene.index.MultiReader.termDocs()",2,2,2
"org.apache.lucene.index.MultiReader.termDocs(Term)",2,2,2
"org.apache.lucene.index.MultiReader.termPositions()",2,2,2
"org.apache.lucene.index.MultiReader.terms()",2,2,2
"org.apache.lucene.index.MultiReader.terms(Term)",2,2,2
"org.apache.lucene.index.MultipleTermPositions.IntQueue.add(int)",1,2,2
"org.apache.lucene.index.MultipleTermPositions.IntQueue.clear()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.IntQueue.growArray()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.IntQueue.next()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.IntQueue.size()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.IntQueue.sort()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.MultipleTermPositions(IndexReader,Term[])",1,2,2
"org.apache.lucene.index.MultipleTermPositions.TermPositionsQueue.TermPositionsQueue(List<TermPositions>)",1,3,3
"org.apache.lucene.index.MultipleTermPositions.TermPositionsQueue.lessThan(TermPositions,TermPositions)",1,1,1
"org.apache.lucene.index.MultipleTermPositions.TermPositionsQueue.peek()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.close()",1,2,2
"org.apache.lucene.index.MultipleTermPositions.doc()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.freq()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.getPayload(byte[],int)",1,1,1
"org.apache.lucene.index.MultipleTermPositions.getPayloadLength()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.isPayloadAvailable()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.next()",2,5,6
"org.apache.lucene.index.MultipleTermPositions.nextPosition()",1,1,1
"org.apache.lucene.index.MultipleTermPositions.read(int[],int[])",1,1,1
"org.apache.lucene.index.MultipleTermPositions.seek(Term)",1,1,1
"org.apache.lucene.index.MultipleTermPositions.seek(TermEnum)",1,1,1
"org.apache.lucene.index.MultipleTermPositions.skipTo(int)",1,4,4
"org.apache.lucene.index.NoDeletionPolicy.NoDeletionPolicy()",1,1,1
"org.apache.lucene.index.NoDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.NoDeletionPolicy.onInit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.NoMergePolicy.NoMergePolicy(boolean)",1,1,1
"org.apache.lucene.index.NoMergePolicy.close()",1,1,1
"org.apache.lucene.index.NoMergePolicy.findForcedDeletesMerges(SegmentInfos)",1,1,1
"org.apache.lucene.index.NoMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",1,1,1
"org.apache.lucene.index.NoMergePolicy.findMerges(SegmentInfos)",1,1,1
"org.apache.lucene.index.NoMergePolicy.setIndexWriter(IndexWriter)",1,1,1
"org.apache.lucene.index.NoMergePolicy.toString()",1,1,1
"org.apache.lucene.index.NoMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",1,1,1
"org.apache.lucene.index.NoMergeScheduler.NoMergeScheduler()",1,1,1
"org.apache.lucene.index.NoMergeScheduler.close()",1,1,1
"org.apache.lucene.index.NoMergeScheduler.merge(IndexWriter)",1,1,1
"org.apache.lucene.index.NormsWriter.abort()",1,1,1
"org.apache.lucene.index.NormsWriter.addThread(DocInverterPerThread)",1,1,1
"org.apache.lucene.index.NormsWriter.files(Collection<String>)",1,1,1
"org.apache.lucene.index.NormsWriter.flush(Map<InvertedDocEndConsumerPerThread, Collection<InvertedDocEndConsumerPerField>>,SegmentWriteState)",1,15,19
"org.apache.lucene.index.NormsWriter.setFieldInfos(FieldInfos)",1,1,1
"org.apache.lucene.index.NormsWriterPerField.NormsWriterPerField(DocInverterPerField,NormsWriterPerThread,FieldInfo)",1,1,1
"org.apache.lucene.index.NormsWriterPerField.abort()",1,1,1
"org.apache.lucene.index.NormsWriterPerField.compareTo(NormsWriterPerField)",1,1,1
"org.apache.lucene.index.NormsWriterPerField.finish()",1,4,5
"org.apache.lucene.index.NormsWriterPerField.reset()",1,1,1
"org.apache.lucene.index.NormsWriterPerThread.NormsWriterPerThread(DocInverterPerThread,NormsWriter)",1,1,1
"org.apache.lucene.index.NormsWriterPerThread.abort()",1,1,1
"org.apache.lucene.index.NormsWriterPerThread.addField(DocInverterPerField,FieldInfo)",1,1,1
"org.apache.lucene.index.NormsWriterPerThread.finishDocument()",1,1,1
"org.apache.lucene.index.NormsWriterPerThread.freeRAM()",1,1,1
"org.apache.lucene.index.NormsWriterPerThread.startDocument()",1,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.DocumentFilteredAtomicIndexReader(IndexReader,Filter,boolean)",1,7,7
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.getSequentialSubReaders()",1,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.hasDeletions()",1,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.isDeleted(int)",1,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.numDocs()",1,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.termPositions()",3,2,3
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Directory,Directory,Directory,Filter)",1,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Directory,Directory,Directory,Filter,IndexWriterConfig,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Directory,Directory,Directory,Term)",1,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Directory,Directory,Directory,Term,IndexWriterConfig,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Version,Directory,Directory,Directory,Filter)",1,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Version,Directory,Directory,Directory,Term)",1,1,1
"org.apache.lucene.index.PKIndexSplitter.createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean)",1,3,3
"org.apache.lucene.index.PKIndexSplitter.newDefaultConfig(Version)",1,1,1
"org.apache.lucene.index.PKIndexSplitter.split()",1,2,2
"org.apache.lucene.index.ParallelArrayTermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",1,1,3
"org.apache.lucene.index.ParallelArrayTermVectorMapper.materializeVector()",1,1,5
"org.apache.lucene.index.ParallelArrayTermVectorMapper.setExpectations(String,int,boolean,boolean)",1,1,3
"org.apache.lucene.index.ParallelPostingsArray.ParallelPostingsArray(int)",1,1,1
"org.apache.lucene.index.ParallelPostingsArray.bytesPerPosting()",1,1,1
"org.apache.lucene.index.ParallelPostingsArray.copyTo(ParallelPostingsArray,int)",1,1,1
"org.apache.lucene.index.ParallelPostingsArray.grow()",1,1,1
"org.apache.lucene.index.ParallelPostingsArray.newInstance(int)",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelReader()",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelReader(boolean)",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.ParallelTermDocs()",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.ParallelTermDocs(Term)",1,3,3
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.close()",1,2,2
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.doc()",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.freq()",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.next()",2,1,2
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.read(int[],int[])",2,1,2
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.seek(Term)",1,2,2
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.seek(TermEnum)",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.skipTo(int)",2,1,2
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.ParallelTermEnum()",1,2,3
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.ParallelTermEnum(Term)",1,2,2
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.close()",1,2,2
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.docFreq()",2,1,2
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.next()",5,6,8
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.term()",2,1,2
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.ParallelTermPositions()",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.getPayload(byte[],int)",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.getPayloadLength()",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.isPayloadAvailable()",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.nextPosition()",1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.seek(Term)",1,2,2
"org.apache.lucene.index.ParallelReader.add(IndexReader)",1,1,1
"org.apache.lucene.index.ParallelReader.add(IndexReader,boolean)",3,8,8
"org.apache.lucene.index.ParallelReader.clone()",1,1,2
"org.apache.lucene.index.ParallelReader.clone(boolean)",1,1,1
"org.apache.lucene.index.ParallelReader.doClose()",1,3,3
"org.apache.lucene.index.ParallelReader.doCommit(Map<String, String>)",1,2,2
"org.apache.lucene.index.ParallelReader.doDelete(int)",1,2,2
"org.apache.lucene.index.ParallelReader.doOpenIfChanged()",1,1,1
"org.apache.lucene.index.ParallelReader.doOpenIfChanged(boolean)",1,1,1
"org.apache.lucene.index.ParallelReader.doReopen(boolean)",2,9,12
"org.apache.lucene.index.ParallelReader.doSetNorm(int,String,byte)",1,2,2
"org.apache.lucene.index.ParallelReader.doUndeleteAll()",1,2,2
"org.apache.lucene.index.ParallelReader.docFreq(Term)",1,2,2
"org.apache.lucene.index.ParallelReader.document(int,FieldSelector)",5,6,7
"org.apache.lucene.index.ParallelReader.getFieldInfos()",1,1,1
"org.apache.lucene.index.ParallelReader.getSubReaders()",1,1,1
"org.apache.lucene.index.ParallelReader.getTermFreqVector(int,String)",1,2,2
"org.apache.lucene.index.ParallelReader.getTermFreqVector(int,String,TermVectorMapper)",1,2,2
"org.apache.lucene.index.ParallelReader.getTermFreqVector(int,TermVectorMapper)",1,2,2
"org.apache.lucene.index.ParallelReader.getTermFreqVectors(int)",1,3,3
"org.apache.lucene.index.ParallelReader.getVersion()",1,1,1
"org.apache.lucene.index.ParallelReader.hasDeletions()",1,1,1
"org.apache.lucene.index.ParallelReader.hasNorms(String)",1,2,2
"org.apache.lucene.index.ParallelReader.isCurrent()",3,2,3
"org.apache.lucene.index.ParallelReader.isDeleted(int)",2,2,2
"org.apache.lucene.index.ParallelReader.isOptimized()",3,2,3
"org.apache.lucene.index.ParallelReader.maxDoc()",1,1,1
"org.apache.lucene.index.ParallelReader.norms(String)",1,2,2
"org.apache.lucene.index.ParallelReader.norms(String,byte[],int)",1,2,2
"org.apache.lucene.index.ParallelReader.numDocs()",1,1,1
"org.apache.lucene.index.ParallelReader.termDocs()",1,1,1
"org.apache.lucene.index.ParallelReader.termDocs(Term)",1,1,1
"org.apache.lucene.index.ParallelReader.termPositions()",1,1,1
"org.apache.lucene.index.ParallelReader.terms()",1,1,1
"org.apache.lucene.index.ParallelReader.terms(Term)",1,1,1
"org.apache.lucene.index.ParallelReader.toString()",1,3,3
"org.apache.lucene.index.Payload.Payload()",1,1,1
"org.apache.lucene.index.Payload.Payload(byte[])",1,1,1
"org.apache.lucene.index.Payload.Payload(byte[],int,int)",2,1,3
"org.apache.lucene.index.Payload.byteAt(int)",2,1,3
"org.apache.lucene.index.Payload.clone()",1,2,4
"org.apache.lucene.index.Payload.copyTo(byte[],int)",2,1,2
"org.apache.lucene.index.Payload.equals(Object)",6,1,6
"org.apache.lucene.index.Payload.getData()",1,1,1
"org.apache.lucene.index.Payload.getOffset()",1,1,1
"org.apache.lucene.index.Payload.hashCode()",1,1,1
"org.apache.lucene.index.Payload.length()",1,1,1
"org.apache.lucene.index.Payload.setData(byte[])",1,1,1
"org.apache.lucene.index.Payload.setData(byte[],int,int)",1,1,1
"org.apache.lucene.index.Payload.toByteArray()",1,1,1
"org.apache.lucene.index.PayloadProcessorProvider.getDirProcessor(Directory)",1,1,1
"org.apache.lucene.index.PayloadProcessorProvider.getReaderProcessor(IndexReader)",1,1,1
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version)",1,5,5
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.close()",1,1,1
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.onInit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.persistSnapshotInfos(String,String)",1,3,3
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.readSnapshotsInfo(Directory)",4,3,5
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.release(String)",1,1,1
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.snapshot(String)",2,1,2
"org.apache.lucene.index.PositionBasedTermVectorMapper.PositionBasedTermVectorMapper()",1,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.PositionBasedTermVectorMapper(boolean)",1,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.TVPositionInfo(int,boolean)",1,1,2
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.addTerm(String,TermVectorOffsetInfo)",1,2,2
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.getOffsets()",1,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.getPosition()",1,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.getTerms()",1,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.getFieldToTerms()",1,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.isIgnoringPositions()",1,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",1,3,4
"org.apache.lucene.index.PositionBasedTermVectorMapper.setExpectations(String,int,boolean,boolean)",2,1,3
"org.apache.lucene.index.PrefixCodedTerms.Builder.add(Term)",1,3,4
"org.apache.lucene.index.PrefixCodedTerms.Builder.finish()",1,1,2
"org.apache.lucene.index.PrefixCodedTerms.Builder.sharedPrefix(BytesRef,BytesRef)",3,1,3
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTerms(RAMFile)",1,1,1
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator.PrefixCodedTermsIterator()",1,1,2
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator.hasNext()",1,1,1
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator.next()",1,2,3
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator.remove()",1,1,1
"org.apache.lucene.index.PrefixCodedTerms.getSizeInBytes()",1,1,1
"org.apache.lucene.index.PrefixCodedTerms.iterator()",1,1,1
"org.apache.lucene.index.PruningReader.PruningReader(IndexReader,StorePruningPolicy,TermPruningPolicy)",1,1,1
"org.apache.lucene.index.PruningReader.PruningTermEnum.PruningTermEnum(TermEnum)",1,1,1
"org.apache.lucene.index.PruningReader.PruningTermEnum.next()",4,4,6
"org.apache.lucene.index.PruningReader.PruningTermPositions.PruningTermPositions(TermPositions)",1,1,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.freq()",1,1,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.informPolicy(Term)",1,1,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.isPayloadAvailable()",3,1,3
"org.apache.lucene.index.PruningReader.PruningTermPositions.next()",7,3,8
"org.apache.lucene.index.PruningReader.PruningTermPositions.nextPosition()",1,1,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.seek(Term)",1,1,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.seek(TermEnum)",1,1,1
"org.apache.lucene.index.PruningReader.document(int,FieldSelector)",2,3,3
"org.apache.lucene.index.PruningReader.getFieldInfos()",2,1,2
"org.apache.lucene.index.PruningReader.getSequentialSubReaders()",2,1,3
"org.apache.lucene.index.PruningReader.getTermFreqVectors(int)",13,11,25
"org.apache.lucene.index.PruningReader.termPositions()",1,1,1
"org.apache.lucene.index.PruningReader.terms()",1,1,1
"org.apache.lucene.index.RandomIndexWriter.MockIndexWriter.MockIndexWriter(Random,Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.MockIndexWriter.testPoint(String)",1,2,2
"org.apache.lucene.index.RandomIndexWriter.RandomIndexWriter(Random,Directory)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.RandomIndexWriter(Random,Directory,Analyzer)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.RandomIndexWriter(Random,Directory,IndexWriterConfig)",1,2,2
"org.apache.lucene.index.RandomIndexWriter.RandomIndexWriter(Random,Directory,Version,Analyzer)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.addDocument(Document)",1,2,2
"org.apache.lucene.index.RandomIndexWriter.addDocuments(Collection<Document>)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.addIndexes(Directory...)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.addIndexes(IndexReader...)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.close()",1,3,3
"org.apache.lucene.index.RandomIndexWriter.commit()",1,1,1
"org.apache.lucene.index.RandomIndexWriter.deleteAll()",1,1,1
"org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Query)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.deleteDocuments(Term)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.doRandomForceMerge()",1,5,5
"org.apache.lucene.index.RandomIndexWriter.forceMerge(int)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.forceMergeDeletes()",1,1,1
"org.apache.lucene.index.RandomIndexWriter.forceMergeDeletes(boolean)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.getReader()",1,1,1
"org.apache.lucene.index.RandomIndexWriter.getReader(boolean)",3,7,7
"org.apache.lucene.index.RandomIndexWriter.maxDoc()",1,1,1
"org.apache.lucene.index.RandomIndexWriter.maybeCommit()",1,3,4
"org.apache.lucene.index.RandomIndexWriter.numDocs()",1,1,1
"org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMerge(boolean)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.setDoRandomForceMergeAssert(boolean)",1,1,1
"org.apache.lucene.index.RandomIndexWriter.updateDocument(Term,Document)",1,2,2
"org.apache.lucene.index.RandomIndexWriter.updateDocuments(Term,Collection<Document>)",1,1,1
"org.apache.lucene.index.ReadOnlyDirectoryReader.ReadOnlyDirectoryReader(Directory,SegmentInfos,IndexDeletionPolicy,int)",1,1,1
"org.apache.lucene.index.ReadOnlyDirectoryReader.ReadOnlyDirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],Map<String, byte[]>,boolean,int)",1,1,1
"org.apache.lucene.index.ReadOnlyDirectoryReader.ReadOnlyDirectoryReader(IndexWriter,SegmentInfos,int,boolean)",1,1,1
"org.apache.lucene.index.ReadOnlyDirectoryReader.acquireWriteLock()",1,1,1
"org.apache.lucene.index.ReadOnlySegmentReader.acquireWriteLock()",1,1,1
"org.apache.lucene.index.ReadOnlySegmentReader.isDeleted(int)",1,2,2
"org.apache.lucene.index.ReadOnlySegmentReader.noWrite()",1,1,1
"org.apache.lucene.index.RepeatingTokenStream.RepeatingTokenStream(Reader,String,Random,float,int)",1,1,1
"org.apache.lucene.index.RepeatingTokenStream.RepeatingTokenStream(String,Random,float,int)",1,1,1
"org.apache.lucene.index.RepeatingTokenStream.incrementToken()",2,2,2
"org.apache.lucene.index.RepeatingTokenStream.reset()",1,2,2
"org.apache.lucene.index.ReusableStringReader.close()",1,1,1
"org.apache.lucene.index.ReusableStringReader.init(String)",1,1,1
"org.apache.lucene.index.ReusableStringReader.read(char[])",1,1,1
"org.apache.lucene.index.ReusableStringReader.read(char[],int,int)",3,3,3
"org.apache.lucene.index.SegmentCoreReaders.SegmentCoreReaders(SegmentReader,Directory,SegmentInfo,int,int)",1,4,5
"org.apache.lucene.index.SegmentCoreReaders.addCoreClosedListener(CoreClosedListener)",1,1,1
"org.apache.lucene.index.SegmentCoreReaders.decRef()",1,2,2
"org.apache.lucene.index.SegmentCoreReaders.getCFSReader()",1,1,1
"org.apache.lucene.index.SegmentCoreReaders.getFieldsReaderOrig()",1,1,1
"org.apache.lucene.index.SegmentCoreReaders.getTermVectorsReaderOrig()",1,1,1
"org.apache.lucene.index.SegmentCoreReaders.getTermsReader()",2,1,2
"org.apache.lucene.index.SegmentCoreReaders.incRef()",1,1,1
"org.apache.lucene.index.SegmentCoreReaders.loadTermsIndex(SegmentInfo,int)",1,4,4
"org.apache.lucene.index.SegmentCoreReaders.notifyCoreClosedListeners()",1,2,2
"org.apache.lucene.index.SegmentCoreReaders.openDocStores(SegmentInfo)",3,10,10
"org.apache.lucene.index.SegmentCoreReaders.removeCoreClosedListener(CoreClosedListener)",1,1,1
"org.apache.lucene.index.SegmentCoreReaders.termsIndexIsLoaded()",1,1,1
"org.apache.lucene.index.SegmentCoreReaders.toString()",1,1,1
"org.apache.lucene.index.SegmentInfo.SegmentInfo(Directory,int,IndexInput)",1,15,15
"org.apache.lucene.index.SegmentInfo.SegmentInfo(String,int,Directory,boolean,boolean,boolean,boolean)",1,1,2
"org.apache.lucene.index.SegmentInfo.addIfExists(Set<String>,String)",1,2,2
"org.apache.lucene.index.SegmentInfo.advanceDelGen()",1,1,2
"org.apache.lucene.index.SegmentInfo.advanceNormGen(int)",1,1,2
"org.apache.lucene.index.SegmentInfo.clearDelGen()",1,1,1
"org.apache.lucene.index.SegmentInfo.clearFiles()",1,1,1
"org.apache.lucene.index.SegmentInfo.clone()",1,2,2
"org.apache.lucene.index.SegmentInfo.equals(Object)",3,3,4
"org.apache.lucene.index.SegmentInfo.files()",2,29,33
"org.apache.lucene.index.SegmentInfo.getBufferedDeletesGen()",1,1,1
"org.apache.lucene.index.SegmentInfo.getDelCount()",1,3,3
"org.apache.lucene.index.SegmentInfo.getDelFileName()",2,2,2
"org.apache.lucene.index.SegmentInfo.getDiagnostics()",1,1,1
"org.apache.lucene.index.SegmentInfo.getDocStoreIsCompoundFile()",1,1,1
"org.apache.lucene.index.SegmentInfo.getDocStoreOffset()",1,1,1
"org.apache.lucene.index.SegmentInfo.getDocStoreSegment()",1,1,1
"org.apache.lucene.index.SegmentInfo.getHasProx()",1,1,1
"org.apache.lucene.index.SegmentInfo.getHasVectors()",1,1,1
"org.apache.lucene.index.SegmentInfo.getNormFileName(int)",3,3,4
"org.apache.lucene.index.SegmentInfo.getUseCompoundFile()",3,3,3
"org.apache.lucene.index.SegmentInfo.getVersion()",1,1,1
"org.apache.lucene.index.SegmentInfo.hasDeletions()",3,3,3
"org.apache.lucene.index.SegmentInfo.hasSeparateNorms()",11,8,13
"org.apache.lucene.index.SegmentInfo.hasSeparateNorms(int)",3,2,7
"org.apache.lucene.index.SegmentInfo.hashCode()",1,1,1
"org.apache.lucene.index.SegmentInfo.reset(SegmentInfo)",1,2,2
"org.apache.lucene.index.SegmentInfo.setBufferedDeletesGen(long)",1,1,1
"org.apache.lucene.index.SegmentInfo.setDelCount(int)",1,1,1
"org.apache.lucene.index.SegmentInfo.setDiagnostics(Map<String, String>)",1,1,1
"org.apache.lucene.index.SegmentInfo.setDocStore(int,String,boolean)",1,1,1
"org.apache.lucene.index.SegmentInfo.setDocStoreIsCompoundFile(boolean)",1,1,1
"org.apache.lucene.index.SegmentInfo.setDocStoreOffset(int)",1,1,1
"org.apache.lucene.index.SegmentInfo.setDocStoreSegment(String)",1,1,1
"org.apache.lucene.index.SegmentInfo.setHasProx(boolean)",1,1,1
"org.apache.lucene.index.SegmentInfo.setHasVectors(boolean)",1,1,1
"org.apache.lucene.index.SegmentInfo.setNumFields(int)",1,1,4
"org.apache.lucene.index.SegmentInfo.setUseCompoundFile(boolean)",1,1,2
"org.apache.lucene.index.SegmentInfo.setVersion(String)",1,1,1
"org.apache.lucene.index.SegmentInfo.sizeInBytes(boolean)",6,6,9
"org.apache.lucene.index.SegmentInfo.toString()",1,1,1
"org.apache.lucene.index.SegmentInfo.toString(Directory,int)",1,7,12
"org.apache.lucene.index.SegmentInfo.write(IndexOutput)",1,4,8
"org.apache.lucene.index.SegmentInfos.FindSegmentsFile.FindSegmentsFile(Directory)",1,1,1
"org.apache.lucene.index.SegmentInfos.FindSegmentsFile.run()",1,1,1
"org.apache.lucene.index.SegmentInfos.FindSegmentsFile.run(IndexCommit)",13,27,39
"org.apache.lucene.index.SegmentInfos.add(SegmentInfo)",2,1,2
"org.apache.lucene.index.SegmentInfos.addAll(Iterable<SegmentInfo>)",1,2,2
"org.apache.lucene.index.SegmentInfos.applyMergeChanges(OneMerge,boolean)",1,6,8
"org.apache.lucene.index.SegmentInfos.asList()",1,2,2
"org.apache.lucene.index.SegmentInfos.asSet()",1,2,2
"org.apache.lucene.index.SegmentInfos.changed()",1,1,1
"org.apache.lucene.index.SegmentInfos.clear()",1,1,1
"org.apache.lucene.index.SegmentInfos.clone()",1,2,3
"org.apache.lucene.index.SegmentInfos.commit(Directory)",1,1,1
"org.apache.lucene.index.SegmentInfos.contains(SegmentInfo)",1,1,1
"org.apache.lucene.index.SegmentInfos.createBackupSegmentInfos(boolean)",2,3,3
"org.apache.lucene.index.SegmentInfos.files(Directory,boolean)",1,5,5
"org.apache.lucene.index.SegmentInfos.finishCommit(Directory)",3,4,8
"org.apache.lucene.index.SegmentInfos.generationFromSegmentsFileName(String)",3,3,3
"org.apache.lucene.index.SegmentInfos.getDefaultGenLookahedCount()",1,1,1
"org.apache.lucene.index.SegmentInfos.getFormat()",1,1,1
"org.apache.lucene.index.SegmentInfos.getGeneration()",1,1,1
"org.apache.lucene.index.SegmentInfos.getInfoStream()",1,1,1
"org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(Directory)",1,1,2
"org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(String[])",2,4,6
"org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(Directory)",1,1,1
"org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(String[])",1,1,1
"org.apache.lucene.index.SegmentInfos.getLastGeneration()",1,1,1
"org.apache.lucene.index.SegmentInfos.getNextSegmentFileName()",1,1,2
"org.apache.lucene.index.SegmentInfos.getSegmentsFileName()",1,1,1
"org.apache.lucene.index.SegmentInfos.getUserData()",1,1,1
"org.apache.lucene.index.SegmentInfos.getVersion()",1,1,1
"org.apache.lucene.index.SegmentInfos.indexOf(SegmentInfo)",2,2,2
"org.apache.lucene.index.SegmentInfos.info(int)",1,1,1
"org.apache.lucene.index.SegmentInfos.iterator()",1,1,1
"org.apache.lucene.index.SegmentInfos.message(String)",1,1,1
"org.apache.lucene.index.SegmentInfos.prepareCommit(Directory)",2,1,2
"org.apache.lucene.index.SegmentInfos.pruneDeletedSegments()",1,3,3
"org.apache.lucene.index.SegmentInfos.range(int,int)",1,1,1
"org.apache.lucene.index.SegmentInfos.read(Directory)",1,1,1
"org.apache.lucene.index.SegmentInfos.read(Directory,String)",5,15,18
"org.apache.lucene.index.SegmentInfos.readCurrentVersion(Directory)",1,1,1
"org.apache.lucene.index.SegmentInfos.remove(SegmentInfo)",1,2,2
"org.apache.lucene.index.SegmentInfos.remove(int)",1,1,1
"org.apache.lucene.index.SegmentInfos.replace(SegmentInfos)",1,1,1
"org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory)",1,2,4
"org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(List<SegmentInfo>)",1,1,1
"org.apache.lucene.index.SegmentInfos.setDefaultGenLookaheadCount(int)",1,1,1
"org.apache.lucene.index.SegmentInfos.setFormat(int)",1,1,1
"org.apache.lucene.index.SegmentInfos.setInfoStream(PrintStream)",1,1,1
"org.apache.lucene.index.SegmentInfos.setUserData(Map<String, String>)",1,2,2
"org.apache.lucene.index.SegmentInfos.size()",1,1,1
"org.apache.lucene.index.SegmentInfos.toString(Directory)",1,3,3
"org.apache.lucene.index.SegmentInfos.totalDocCount()",1,1,2
"org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos)",1,1,1
"org.apache.lucene.index.SegmentInfos.write(Directory)",1,3,5
"org.apache.lucene.index.SegmentMergeInfo.SegmentMergeInfo(int,TermEnum,IndexReader)",1,1,1
"org.apache.lucene.index.SegmentMergeInfo.close()",1,2,2
"org.apache.lucene.index.SegmentMergeInfo.getDocMap()",1,4,5
"org.apache.lucene.index.SegmentMergeInfo.getPositions()",1,2,2
"org.apache.lucene.index.SegmentMergeInfo.next()",2,2,2
"org.apache.lucene.index.SegmentMergeQueue.SegmentMergeQueue(int)",1,1,1
"org.apache.lucene.index.SegmentMergeQueue.close()",1,2,2
"org.apache.lucene.index.SegmentMergeQueue.lessThan(SegmentMergeInfo,SegmentMergeInfo)",2,1,2
"org.apache.lucene.index.SegmentMerger.CheckAbort.CheckAbort(OneMerge,Directory)",1,1,1
"org.apache.lucene.index.SegmentMerger.CheckAbort.work(double)",1,2,2
"org.apache.lucene.index.SegmentMerger.SegmentMerger(Directory,int,String,OneMerge,PayloadProcessorProvider,FieldInfos)",1,1,2
"org.apache.lucene.index.SegmentMerger.add(IndexReader)",1,1,1
"org.apache.lucene.index.SegmentMerger.appendPostings(FormatPostingsTermsConsumer,SegmentMergeInfo[],int)",1,8,11
"org.apache.lucene.index.SegmentMerger.copyFieldsNoDeletions(FieldsWriter,IndexReader,FieldsReader)",1,4,4
"org.apache.lucene.index.SegmentMerger.copyFieldsWithDeletions(FieldsWriter,IndexReader,FieldsReader)",9,5,9
"org.apache.lucene.index.SegmentMerger.copyVectorsNoDeletions(TermVectorsWriter,TermVectorsReader,IndexReader)",1,4,4
"org.apache.lucene.index.SegmentMerger.copyVectorsWithDeletions(TermVectorsWriter,TermVectorsReader,IndexReader)",9,5,9
"org.apache.lucene.index.SegmentMerger.createCompoundFile(String,SegmentInfo)",1,2,2
"org.apache.lucene.index.SegmentMerger.fieldInfos()",1,1,1
"org.apache.lucene.index.SegmentMerger.getAnyNonBulkMerges()",1,1,1
"org.apache.lucene.index.SegmentMerger.getMatchedSubReaderCount()",1,1,1
"org.apache.lucene.index.SegmentMerger.merge()",1,2,2
"org.apache.lucene.index.SegmentMerger.mergeFields()",1,6,7
"org.apache.lucene.index.SegmentMerger.mergeNorms()",1,10,12
"org.apache.lucene.index.SegmentMerger.mergeTermInfos(FormatPostingsFieldsConsumer)",1,11,13
"org.apache.lucene.index.SegmentMerger.mergeTerms()",1,2,2
"org.apache.lucene.index.SegmentMerger.mergeVectors()",1,5,6
"org.apache.lucene.index.SegmentMerger.setMatchingSegmentReaders()",5,4,6
"org.apache.lucene.index.SegmentNorms.SegmentNorms(IndexInput,int,long,SegmentReader)",1,1,1
"org.apache.lucene.index.SegmentNorms.bytes()",1,3,5
"org.apache.lucene.index.SegmentNorms.bytes(byte[],int,int)",1,3,5
"org.apache.lucene.index.SegmentNorms.bytesRef()",1,1,1
"org.apache.lucene.index.SegmentNorms.clone()",1,2,6
"org.apache.lucene.index.SegmentNorms.closeInput()",1,4,4
"org.apache.lucene.index.SegmentNorms.copyOnWrite()",1,2,4
"org.apache.lucene.index.SegmentNorms.decRef()",1,4,6
"org.apache.lucene.index.SegmentNorms.incRef()",1,1,3
"org.apache.lucene.index.SegmentNorms.reWrite(SegmentInfo)",1,2,5
"org.apache.lucene.index.SegmentReader.FieldsReaderLocal.initialValue()",1,1,1
"org.apache.lucene.index.SegmentReader.addCoreClosedListener(CoreClosedListener)",1,1,1
"org.apache.lucene.index.SegmentReader.checkDeletedCounts()",1,1,1
"org.apache.lucene.index.SegmentReader.clone()",1,1,2
"org.apache.lucene.index.SegmentReader.clone(boolean)",1,1,1
"org.apache.lucene.index.SegmentReader.cloneDeletedDocs(BitVector)",1,1,1
"org.apache.lucene.index.SegmentReader.cloneNormBytes(byte[])",1,1,1
"org.apache.lucene.index.SegmentReader.commitChanges(Map<String, String>)",1,6,7
"org.apache.lucene.index.SegmentReader.directory()",1,1,1
"org.apache.lucene.index.SegmentReader.doClose()",1,4,4
"org.apache.lucene.index.SegmentReader.doCommit(Map<String, String>)",1,3,3
"org.apache.lucene.index.SegmentReader.doDelete(int)",1,3,4
"org.apache.lucene.index.SegmentReader.doOpenIfChanged()",1,1,1
"org.apache.lucene.index.SegmentReader.doOpenIfChanged(boolean)",1,1,1
"org.apache.lucene.index.SegmentReader.doSetNorm(int,String,byte)",2,1,2
"org.apache.lucene.index.SegmentReader.doUndeleteAll()",1,2,2
"org.apache.lucene.index.SegmentReader.docFreq(Term)",2,1,2
"org.apache.lucene.index.SegmentReader.document(int,FieldSelector)",2,3,3
"org.apache.lucene.index.SegmentReader.fieldInfos()",1,1,1
"org.apache.lucene.index.SegmentReader.files()",1,1,1
"org.apache.lucene.index.SegmentReader.get(boolean,Directory,SegmentInfo,int,boolean,int)",1,3,4
"org.apache.lucene.index.SegmentReader.get(boolean,SegmentInfo,int)",1,1,1
"org.apache.lucene.index.SegmentReader.getCoreCacheKey()",1,1,1
"org.apache.lucene.index.SegmentReader.getDeletesCacheKey()",1,1,1
"org.apache.lucene.index.SegmentReader.getFieldInfos()",1,1,1
"org.apache.lucene.index.SegmentReader.getFieldsReader()",1,1,1
"org.apache.lucene.index.SegmentReader.getOnlySegmentReader(Directory)",1,1,1
"org.apache.lucene.index.SegmentReader.getOnlySegmentReader(IndexReader)",4,2,4
"org.apache.lucene.index.SegmentReader.getPostingsSkipInterval()",1,1,1
"org.apache.lucene.index.SegmentReader.getSegmentInfo()",1,1,1
"org.apache.lucene.index.SegmentReader.getSegmentName()",1,1,1
"org.apache.lucene.index.SegmentReader.getTermFreqVector(int,String)",3,1,4
"org.apache.lucene.index.SegmentReader.getTermFreqVector(int,String,TermVectorMapper)",3,1,4
"org.apache.lucene.index.SegmentReader.getTermFreqVector(int,TermVectorMapper)",2,1,2
"org.apache.lucene.index.SegmentReader.getTermFreqVectors(int)",2,1,2
"org.apache.lucene.index.SegmentReader.getTermInfosIndexDivisor()",1,1,1
"org.apache.lucene.index.SegmentReader.getTermVectorsReader()",3,3,4
"org.apache.lucene.index.SegmentReader.getTermVectorsReaderOrig()",1,1,1
"org.apache.lucene.index.SegmentReader.getUniqueTermCount()",1,1,1
"org.apache.lucene.index.SegmentReader.hasDeletions()",1,1,1
"org.apache.lucene.index.SegmentReader.hasDeletions(SegmentInfo)",1,1,1
"org.apache.lucene.index.SegmentReader.hasNorms(String)",1,1,1
"org.apache.lucene.index.SegmentReader.hasSeparateNorms(SegmentInfo)",1,1,1
"org.apache.lucene.index.SegmentReader.isDeleted(int)",1,2,2
"org.apache.lucene.index.SegmentReader.loadDeletedDocs()",3,3,3
"org.apache.lucene.index.SegmentReader.loadTermsIndex(int)",1,1,1
"org.apache.lucene.index.SegmentReader.maxDoc()",1,1,1
"org.apache.lucene.index.SegmentReader.norms(String)",2,1,2
"org.apache.lucene.index.SegmentReader.norms(String,byte[],int)",2,2,2
"org.apache.lucene.index.SegmentReader.normsClosed()",4,1,4
"org.apache.lucene.index.SegmentReader.normsClosed(String)",1,1,1
"org.apache.lucene.index.SegmentReader.numDocs()",1,2,2
"org.apache.lucene.index.SegmentReader.openDocStores()",1,1,1
"org.apache.lucene.index.SegmentReader.openNorms(Directory,int)",3,9,13
"org.apache.lucene.index.SegmentReader.rawTermDocs(Term)",2,1,2
"org.apache.lucene.index.SegmentReader.removeCoreClosedListener(CoreClosedListener)",1,1,1
"org.apache.lucene.index.SegmentReader.reopenSegment(SegmentInfo,boolean,boolean)",2,13,25
"org.apache.lucene.index.SegmentReader.rollbackCommit()",1,1,2
"org.apache.lucene.index.SegmentReader.setSegmentInfo(SegmentInfo)",1,1,1
"org.apache.lucene.index.SegmentReader.startCommit()",1,1,2
"org.apache.lucene.index.SegmentReader.termDocs()",1,1,1
"org.apache.lucene.index.SegmentReader.termDocs(Term)",2,2,2
"org.apache.lucene.index.SegmentReader.termPositions()",1,1,1
"org.apache.lucene.index.SegmentReader.terms()",1,1,1
"org.apache.lucene.index.SegmentReader.terms(Term)",1,1,1
"org.apache.lucene.index.SegmentReader.termsIndexLoaded()",1,1,1
"org.apache.lucene.index.SegmentReader.toString()",1,2,2
"org.apache.lucene.index.SegmentReader.usesCompoundFile(SegmentInfo)",1,1,1
"org.apache.lucene.index.SegmentTermDocs.SegmentTermDocs(SegmentReader)",1,1,1
"org.apache.lucene.index.SegmentTermDocs.SegmentTermDocs(SegmentReader,boolean)",1,1,2
"org.apache.lucene.index.SegmentTermDocs.close()",1,2,2
"org.apache.lucene.index.SegmentTermDocs.doc()",1,1,1
"org.apache.lucene.index.SegmentTermDocs.freq()",1,1,1
"org.apache.lucene.index.SegmentTermDocs.next()",4,5,7
"org.apache.lucene.index.SegmentTermDocs.read(int[],int[])",2,5,7
"org.apache.lucene.index.SegmentTermDocs.readNoTf(int[],int[],int)",1,3,5
"org.apache.lucene.index.SegmentTermDocs.seek(Term)",1,1,1
"org.apache.lucene.index.SegmentTermDocs.seek(TermEnum)",1,2,3
"org.apache.lucene.index.SegmentTermDocs.seek(TermInfo,Term)",1,2,4
"org.apache.lucene.index.SegmentTermDocs.skipProx(long,int)",1,1,1
"org.apache.lucene.index.SegmentTermDocs.skipTo(int)",3,6,8
"org.apache.lucene.index.SegmentTermDocs.skippingDoc()",1,1,1
"org.apache.lucene.index.SegmentTermEnum.SegmentTermEnum(IndexInput,FieldInfos,boolean)",3,6,7
"org.apache.lucene.index.SegmentTermEnum.clone()",1,1,2
"org.apache.lucene.index.SegmentTermEnum.close()",1,1,1
"org.apache.lucene.index.SegmentTermEnum.docFreq()",1,1,1
"org.apache.lucene.index.SegmentTermEnum.freqPointer()",1,1,1
"org.apache.lucene.index.SegmentTermEnum.next()",2,7,7
"org.apache.lucene.index.SegmentTermEnum.prev()",1,1,1
"org.apache.lucene.index.SegmentTermEnum.proxPointer()",1,1,1
"org.apache.lucene.index.SegmentTermEnum.scanTo(Term)",1,3,4
"org.apache.lucene.index.SegmentTermEnum.seek(long,long,Term,TermInfo)",1,1,1
"org.apache.lucene.index.SegmentTermEnum.term()",1,1,1
"org.apache.lucene.index.SegmentTermEnum.termInfo()",1,1,1
"org.apache.lucene.index.SegmentTermEnum.termInfo(TermInfo)",1,1,1
"org.apache.lucene.index.SegmentTermPositionVector.SegmentTermPositionVector(String,String[],int[],int[][],TermVectorOffsetInfo[][])",1,1,1
"org.apache.lucene.index.SegmentTermPositionVector.getOffsets(int)",2,1,4
"org.apache.lucene.index.SegmentTermPositionVector.getTermPositions(int)",2,1,4
"org.apache.lucene.index.SegmentTermPositions.SegmentTermPositions(SegmentReader)",1,1,1
"org.apache.lucene.index.SegmentTermPositions.close()",1,2,2
"org.apache.lucene.index.SegmentTermPositions.getPayload(byte[],int)",2,1,4
"org.apache.lucene.index.SegmentTermPositions.getPayloadLength()",1,1,1
"org.apache.lucene.index.SegmentTermPositions.isPayloadAvailable()",1,1,2
"org.apache.lucene.index.SegmentTermPositions.lazySkip()",1,4,4
"org.apache.lucene.index.SegmentTermPositions.next()",2,1,2
"org.apache.lucene.index.SegmentTermPositions.nextPosition()",2,1,2
"org.apache.lucene.index.SegmentTermPositions.read(int[],int[])",1,1,1
"org.apache.lucene.index.SegmentTermPositions.readDeltaPosition()",1,3,3
"org.apache.lucene.index.SegmentTermPositions.seek(TermInfo,Term)",1,1,2
"org.apache.lucene.index.SegmentTermPositions.skipPayload()",1,2,3
"org.apache.lucene.index.SegmentTermPositions.skipPositions(int)",1,2,2
"org.apache.lucene.index.SegmentTermPositions.skipProx(long,int)",1,1,1
"org.apache.lucene.index.SegmentTermPositions.skippingDoc()",1,1,1
"org.apache.lucene.index.SegmentTermVector.SegmentTermVector(String,String[],int[])",1,1,1
"org.apache.lucene.index.SegmentTermVector.getField()",1,1,1
"org.apache.lucene.index.SegmentTermVector.getTermFrequencies()",1,1,1
"org.apache.lucene.index.SegmentTermVector.getTerms()",1,1,1
"org.apache.lucene.index.SegmentTermVector.indexOf(String)",2,1,3
"org.apache.lucene.index.SegmentTermVector.indexesOf(String[],int,int)",1,2,2
"org.apache.lucene.index.SegmentTermVector.size()",1,1,2
"org.apache.lucene.index.SegmentTermVector.toString()",1,4,4
"org.apache.lucene.index.SegmentWriteState.SegmentWriteState(PrintStream,Directory,String,FieldInfos,int,int,BufferedDeletes)",1,1,1
"org.apache.lucene.index.SerialMergeScheduler.close()",1,1,1
"org.apache.lucene.index.SerialMergeScheduler.merge(IndexWriter)",3,2,3
"org.apache.lucene.index.SlowMultiReaderWrapper.SlowMultiReaderWrapper(IndexReader)",1,1,1
"org.apache.lucene.index.SlowMultiReaderWrapper.getFieldInfos()",1,2,2
"org.apache.lucene.index.SlowMultiReaderWrapper.getSequentialSubReaders()",1,1,1
"org.apache.lucene.index.SlowMultiReaderWrapper.subReaders(IndexReader)",1,1,1
"org.apache.lucene.index.SlowMultiReaderWrapper.toString()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.SnapshotCommitPoint(IndexCommit)",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.delete()",1,2,2
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getDirectory()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getFileNames()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getGeneration()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getSegmentCount()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getSegmentsFileName()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getUserData()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getVersion()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.isDeleted()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.shouldDelete(String)",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.toString()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotDeletionPolicy(IndexDeletionPolicy)",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotDeletionPolicy(IndexDeletionPolicy,Map<String, String>)",1,3,3
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotInfo.SnapshotInfo(String,String,IndexCommit)",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotInfo.toString()",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.checkSnapshotted(String)",2,1,2
"org.apache.lucene.index.SnapshotDeletionPolicy.getSnapshot(String)",2,1,2
"org.apache.lucene.index.SnapshotDeletionPolicy.getSnapshots()",1,2,2
"org.apache.lucene.index.SnapshotDeletionPolicy.isSnapshotted(String)",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.onInit(List<? extends IndexCommit>)",1,8,9
"org.apache.lucene.index.SnapshotDeletionPolicy.registerSnapshotInfo(String,String,IndexCommit)",1,2,2
"org.apache.lucene.index.SnapshotDeletionPolicy.release(String)",2,3,4
"org.apache.lucene.index.SnapshotDeletionPolicy.snapshot(String)",2,1,2
"org.apache.lucene.index.SnapshotDeletionPolicy.wrapCommits(List<? extends IndexCommit>)",1,2,2
"org.apache.lucene.index.SortedTermVectorMapper.SortedTermVectorMapper(Comparator<TermVectorEntry>)",1,1,1
"org.apache.lucene.index.SortedTermVectorMapper.SortedTermVectorMapper(boolean,boolean,Comparator<TermVectorEntry>)",1,1,1
"org.apache.lucene.index.SortedTermVectorMapper.getTermVectorEntrySet()",1,1,1
"org.apache.lucene.index.SortedTermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",1,8,18
"org.apache.lucene.index.SortedTermVectorMapper.setExpectations(String,int,boolean,boolean)",1,1,1
"org.apache.lucene.index.StaleReaderException.StaleReaderException(String)",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.PerDoc.abort()",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.PerDoc.finish()",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.PerDoc.reset()",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.PerDoc.sizeInBytes()",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.StoredFieldsWriter(DocumentsWriter,FieldInfos)",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.abort()",1,2,2
"org.apache.lucene.index.StoredFieldsWriter.addThread(DocState)",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.fill(int)",1,2,2
"org.apache.lucene.index.StoredFieldsWriter.finishDocument(PerDoc)",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.flush(SegmentWriteState)",1,3,3
"org.apache.lucene.index.StoredFieldsWriter.free(PerDoc)",1,1,1
"org.apache.lucene.index.StoredFieldsWriter.getPerDoc()",2,3,3
"org.apache.lucene.index.StoredFieldsWriter.initFieldsWriter()",1,2,2
"org.apache.lucene.index.StoredFieldsWriterPerThread.StoredFieldsWriterPerThread(DocState,StoredFieldsWriter)",1,1,1
"org.apache.lucene.index.StoredFieldsWriterPerThread.abort()",1,2,2
"org.apache.lucene.index.StoredFieldsWriterPerThread.addField(Fieldable,FieldInfo)",1,2,2
"org.apache.lucene.index.StoredFieldsWriterPerThread.finishDocument()",1,1,1
"org.apache.lucene.index.StoredFieldsWriterPerThread.startDocument()",1,2,2
"org.apache.lucene.index.Term.Term(String)",1,1,1
"org.apache.lucene.index.Term.Term(String,String)",1,1,1
"org.apache.lucene.index.Term.Term(String,String,boolean)",1,2,2
"org.apache.lucene.index.Term.compareTo(Term)",2,2,2
"org.apache.lucene.index.Term.createTerm(String)",1,1,1
"org.apache.lucene.index.Term.equals(Object)",10,2,10
"org.apache.lucene.index.Term.field()",1,1,1
"org.apache.lucene.index.Term.hashCode()",1,3,3
"org.apache.lucene.index.Term.readObject(ObjectInputStream)",1,1,1
"org.apache.lucene.index.Term.set(String,String)",1,1,1
"org.apache.lucene.index.Term.text()",1,1,1
"org.apache.lucene.index.Term.toString()",1,1,1
"org.apache.lucene.index.TermBuffer.clone()",1,1,2
"org.apache.lucene.index.TermBuffer.compareChars(char[],int,char[],int)",3,1,4
"org.apache.lucene.index.TermBuffer.compareTo(TermBuffer)",2,2,2
"org.apache.lucene.index.TermBuffer.read(IndexInput,FieldInfos)",1,3,3
"org.apache.lucene.index.TermBuffer.reset()",1,1,1
"org.apache.lucene.index.TermBuffer.set(Term)",2,2,2
"org.apache.lucene.index.TermBuffer.set(TermBuffer)",1,1,1
"org.apache.lucene.index.TermBuffer.setPreUTF8Strings()",1,1,1
"org.apache.lucene.index.TermBuffer.toTerm()",2,1,3
"org.apache.lucene.index.TermInfo.TermInfo()",1,1,1
"org.apache.lucene.index.TermInfo.TermInfo(TermInfo)",1,1,1
"org.apache.lucene.index.TermInfo.TermInfo(int,long,long)",1,1,1
"org.apache.lucene.index.TermInfo.set(TermInfo)",1,1,1
"org.apache.lucene.index.TermInfo.set(int,long,long,int)",1,1,1
"org.apache.lucene.index.TermInfosReader.CloneableTerm.CloneableTerm(Term)",1,1,1
"org.apache.lucene.index.TermInfosReader.CloneableTerm.clone()",1,1,1
"org.apache.lucene.index.TermInfosReader.CloneableTerm.equals(Object)",1,1,1
"org.apache.lucene.index.TermInfosReader.CloneableTerm.hashCode()",1,1,1
"org.apache.lucene.index.TermInfosReader.TermInfoAndOrd.TermInfoAndOrd(TermInfo,long)",1,1,1
"org.apache.lucene.index.TermInfosReader.TermInfosReader(Directory,String,FieldInfos,int,int)",2,3,5
"org.apache.lucene.index.TermInfosReader.close()",1,2,2
"org.apache.lucene.index.TermInfosReader.ensureIndexIsRead()",2,1,2
"org.apache.lucene.index.TermInfosReader.get(Term)",1,1,1
"org.apache.lucene.index.TermInfosReader.get(Term,boolean,BytesRef)",5,15,18
"org.apache.lucene.index.TermInfosReader.getMaxSkipLevels()",1,1,1
"org.apache.lucene.index.TermInfosReader.getPosition(Term)",3,2,5
"org.apache.lucene.index.TermInfosReader.getSkipInterval()",1,1,1
"org.apache.lucene.index.TermInfosReader.getThreadResources()",1,2,2
"org.apache.lucene.index.TermInfosReader.sameTermInfo(TermInfo,TermInfo,SegmentTermEnum)",5,1,6
"org.apache.lucene.index.TermInfosReader.size()",1,1,1
"org.apache.lucene.index.TermInfosReader.terms()",1,1,1
"org.apache.lucene.index.TermInfosReader.terms(Term)",1,1,1
"org.apache.lucene.index.TermInfosReaderIndex.TermInfosReaderIndex(SegmentTermEnum,int,long,int)",4,6,7
"org.apache.lucene.index.TermInfosReaderIndex.compareField(Term,int,PagedBytesDataInput)",1,1,1
"org.apache.lucene.index.TermInfosReaderIndex.compareTo(Term,BytesRef,int)",1,1,1
"org.apache.lucene.index.TermInfosReaderIndex.compareTo(Term,BytesRef,int,PagedBytesDataInput,BytesRef)",2,2,2
"org.apache.lucene.index.TermInfosReaderIndex.estimatePageBits(long)",1,1,1
"org.apache.lucene.index.TermInfosReaderIndex.getIndexOffset(Term,BytesRef)",4,2,4
"org.apache.lucene.index.TermInfosReaderIndex.getTerm(int)",1,1,1
"org.apache.lucene.index.TermInfosReaderIndex.length()",1,1,1
"org.apache.lucene.index.TermInfosReaderIndex.seekEnum(SegmentTermEnum,int)",1,2,2
"org.apache.lucene.index.TermInfosWriter.TermInfosWriter(Directory,String,FieldInfos,int)",1,2,2
"org.apache.lucene.index.TermInfosWriter.TermInfosWriter(Directory,String,FieldInfos,int,boolean)",1,1,1
"org.apache.lucene.index.TermInfosWriter.add(Term,TermInfo)",1,1,1
"org.apache.lucene.index.TermInfosWriter.add(int,byte[],int,TermInfo)",1,5,8
"org.apache.lucene.index.TermInfosWriter.close()",1,2,2
"org.apache.lucene.index.TermInfosWriter.compareToLastTerm(int,byte[],int)",6,2,9
"org.apache.lucene.index.TermInfosWriter.initUTF16Results()",1,1,1
"org.apache.lucene.index.TermInfosWriter.initialize(Directory,String,FieldInfos,int,boolean)",1,2,3
"org.apache.lucene.index.TermInfosWriter.writeTerm(int,byte[],int)",3,2,5
"org.apache.lucene.index.TermVectorAccessor.TermVectorAccessor()",1,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.isIgnoringOffsets()",1,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.isIgnoringPositions()",1,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.map(String,int,TermVectorOffsetInfo[],int[])",1,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.setDocumentNumber(int)",1,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.setExpectations(String,int,boolean,boolean)",1,1,1
"org.apache.lucene.index.TermVectorAccessor.accept(IndexReader,int,String,TermVectorMapper)",1,2,2
"org.apache.lucene.index.TermVectorAccessor.build(IndexReader,String,TermVectorMapper,int)",4,8,9
"org.apache.lucene.index.TermVectorEntry.TermVectorEntry()",1,1,1
"org.apache.lucene.index.TermVectorEntry.TermVectorEntry(String,String,int,TermVectorOffsetInfo[],int[])",1,1,1
"org.apache.lucene.index.TermVectorEntry.equals(Object)",4,3,6
"org.apache.lucene.index.TermVectorEntry.getField()",1,1,1
"org.apache.lucene.index.TermVectorEntry.getFrequency()",1,1,1
"org.apache.lucene.index.TermVectorEntry.getOffsets()",1,1,1
"org.apache.lucene.index.TermVectorEntry.getPositions()",1,1,1
"org.apache.lucene.index.TermVectorEntry.getTerm()",1,1,1
"org.apache.lucene.index.TermVectorEntry.hashCode()",1,2,2
"org.apache.lucene.index.TermVectorEntry.setFrequency(int)",1,1,1
"org.apache.lucene.index.TermVectorEntry.setOffsets(TermVectorOffsetInfo[])",1,1,1
"org.apache.lucene.index.TermVectorEntry.setPositions(int[])",1,1,1
"org.apache.lucene.index.TermVectorEntry.toString()",1,1,1
"org.apache.lucene.index.TermVectorEntryFreqSortedComparator.compare(TermVectorEntry,TermVectorEntry)",1,3,3
"org.apache.lucene.index.TermVectorMapper.TermVectorMapper()",1,1,1
"org.apache.lucene.index.TermVectorMapper.TermVectorMapper(boolean,boolean)",1,1,1
"org.apache.lucene.index.TermVectorMapper.isIgnoringOffsets()",1,1,1
"org.apache.lucene.index.TermVectorMapper.isIgnoringPositions()",1,1,1
"org.apache.lucene.index.TermVectorMapper.setDocumentNumber(int)",1,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.TermVectorOffsetInfo()",1,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.TermVectorOffsetInfo(int,int)",1,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.equals(Object)",5,1,5
"org.apache.lucene.index.TermVectorOffsetInfo.getEndOffset()",1,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.getStartOffset()",1,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.hashCode()",1,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.setEndOffset(int)",1,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.setStartOffset(int)",1,1,1
"org.apache.lucene.index.TermVectorsReader.TermVectorsReader(Directory,String,FieldInfos)",1,1,1
"org.apache.lucene.index.TermVectorsReader.TermVectorsReader(Directory,String,FieldInfos,int)",1,1,1
"org.apache.lucene.index.TermVectorsReader.TermVectorsReader(Directory,String,FieldInfos,int,int,int)",1,3,5
"org.apache.lucene.index.TermVectorsReader.canReadRawDocs()",1,1,1
"org.apache.lucene.index.TermVectorsReader.checkValidFormat(String,IndexInput)",2,1,2
"org.apache.lucene.index.TermVectorsReader.clone()",1,2,4
"org.apache.lucene.index.TermVectorsReader.close()",1,1,1
"org.apache.lucene.index.TermVectorsReader.get(int)",1,3,3
"org.apache.lucene.index.TermVectorsReader.get(int,String)",1,1,1
"org.apache.lucene.index.TermVectorsReader.get(int,String,TermVectorMapper)",1,7,8
"org.apache.lucene.index.TermVectorsReader.get(int,TermVectorMapper)",1,3,3
"org.apache.lucene.index.TermVectorsReader.getTvdStream()",1,1,1
"org.apache.lucene.index.TermVectorsReader.getTvfStream()",1,1,1
"org.apache.lucene.index.TermVectorsReader.rawDocs(int[],int[],int,int)",3,4,5
"org.apache.lucene.index.TermVectorsReader.readFields(int)",1,3,3
"org.apache.lucene.index.TermVectorsReader.readTermVector(String,long,TermVectorMapper)",2,14,16
"org.apache.lucene.index.TermVectorsReader.readTermVectors(String[],long[],TermVectorMapper)",1,2,2
"org.apache.lucene.index.TermVectorsReader.readTermVectors(int,String[],long[])",1,2,2
"org.apache.lucene.index.TermVectorsReader.readTvfPointers(int)",1,3,3
"org.apache.lucene.index.TermVectorsReader.seekTvx(int)",1,2,2
"org.apache.lucene.index.TermVectorsReader.size()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.abort()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.addField(int)",1,3,3
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.finish()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.reset()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.sizeInBytes()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.TermVectorsTermsWriter(DocumentsWriter)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.abort()",1,1,5
"org.apache.lucene.index.TermVectorsTermsWriter.addThread(TermsHashPerThread)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.fill(int)",1,3,3
"org.apache.lucene.index.TermVectorsTermsWriter.finishDocument(PerDoc)",1,4,4
"org.apache.lucene.index.TermVectorsTermsWriter.flush(Map<TermsHashConsumerPerThread, Collection<TermsHashConsumerPerField>>,SegmentWriteState)",3,5,5
"org.apache.lucene.index.TermVectorsTermsWriter.free(PerDoc)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.getPerDoc()",2,3,3
"org.apache.lucene.index.TermVectorsTermsWriter.initTermVectorsWriter()",1,3,3
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray.TermVectorsPostingsArray(int)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray.bytesPerPosting()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray.copyTo(ParallelPostingsArray,int)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray.newInstance(int)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsTermsWriterPerField(TermsHashPerField,TermVectorsTermsWriterPerThread,FieldInfo)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.abort()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.addTerm(int)",1,3,3
"org.apache.lucene.index.TermVectorsTermsWriterPerField.createPostingsArray(int)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.finish()",6,4,13
"org.apache.lucene.index.TermVectorsTermsWriterPerField.getStreamCount()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.newTerm(int)",1,3,3
"org.apache.lucene.index.TermVectorsTermsWriterPerField.shrinkHash()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.skippingLongTerm()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.start(Fieldable)",1,2,2
"org.apache.lucene.index.TermVectorsTermsWriterPerField.start(Fieldable[],int)",1,7,7
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.TermVectorsTermsWriterPerThread(TermsHashPerThread,TermVectorsTermsWriter)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.abort()",1,2,2
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.addField(TermsHashPerField,FieldInfo)",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.clearLastVectorFieldName()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.finishDocument()",1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.startDocument()",1,2,2
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.vectorFieldsInOrder(FieldInfo)",2,2,2
"org.apache.lucene.index.TermVectorsWriter.TermVectorsWriter(Directory,String,FieldInfos)",1,2,2
"org.apache.lucene.index.TermVectorsWriter.addAllDocVectors(TermFreqVector[])",8,13,17
"org.apache.lucene.index.TermVectorsWriter.addRawDocuments(TermVectorsReader,int[],int[],int)",1,2,2
"org.apache.lucene.index.TermVectorsWriter.close()",1,1,1
"org.apache.lucene.index.TermVectorsWriter.finish(int)",2,2,2
"org.apache.lucene.index.TermsHash.TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash)",1,1,1
"org.apache.lucene.index.TermsHash.abort()",1,2,2
"org.apache.lucene.index.TermsHash.addThread(DocInverterPerThread)",1,1,1
"org.apache.lucene.index.TermsHash.addThread(DocInverterPerThread,TermsHashPerThread)",1,1,1
"org.apache.lucene.index.TermsHash.flush(Map<InvertedDocConsumerPerThread, Collection<InvertedDocConsumerPerField>>,SegmentWriteState)",1,6,8
"org.apache.lucene.index.TermsHash.freeRAM()",1,1,1
"org.apache.lucene.index.TermsHash.setFieldInfos(FieldInfos)",1,1,1
"org.apache.lucene.index.TermsHashConsumer.setFieldInfos(FieldInfos)",1,1,1
"org.apache.lucene.index.TermsHashPerField.TermsHashPerField(DocInverterPerField,TermsHashPerThread,TermsHashPerThread,FieldInfo)",1,2,2
"org.apache.lucene.index.TermsHashPerField.abort()",1,2,2
"org.apache.lucene.index.TermsHashPerField.add()",8,13,24
"org.apache.lucene.index.TermsHashPerField.add(int)",1,7,11
"org.apache.lucene.index.TermsHashPerField.bytesUsed(long)",1,2,2
"org.apache.lucene.index.TermsHashPerField.compactPostings()",1,1,4
"org.apache.lucene.index.TermsHashPerField.finish()",1,2,2
"org.apache.lucene.index.TermsHashPerField.growParallelPostingsArray()",1,1,1
"org.apache.lucene.index.TermsHashPerField.initPostingsArray()",1,1,1
"org.apache.lucene.index.TermsHashPerField.initReader(ByteSliceReader,int,int)",1,1,1
"org.apache.lucene.index.TermsHashPerField.postingEquals(int,char[],int)",3,1,3
"org.apache.lucene.index.TermsHashPerField.rehashPostings(int)",1,1,8
"org.apache.lucene.index.TermsHashPerField.reset()",1,4,4
"org.apache.lucene.index.TermsHashPerField.shrinkHash(int)",1,3,4
"org.apache.lucene.index.TermsHashPerField.sortPostings()",7,1,8
"org.apache.lucene.index.TermsHashPerField.start(Fieldable)",1,2,2
"org.apache.lucene.index.TermsHashPerField.start(Fieldable[],int)",1,3,4
"org.apache.lucene.index.TermsHashPerField.writeByte(int,byte)",1,2,2
"org.apache.lucene.index.TermsHashPerField.writeBytes(int,byte[],int,int)",1,2,2
"org.apache.lucene.index.TermsHashPerField.writeVInt(int,int)",1,2,2
"org.apache.lucene.index.TermsHashPerThread.TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread)",1,2,3
"org.apache.lucene.index.TermsHashPerThread.abort()",1,2,2
"org.apache.lucene.index.TermsHashPerThread.addField(DocInverterPerField,FieldInfo)",1,1,1
"org.apache.lucene.index.TermsHashPerThread.finishDocument()",2,3,3
"org.apache.lucene.index.TermsHashPerThread.reset(boolean)",1,2,2
"org.apache.lucene.index.TermsHashPerThread.startDocument()",1,2,2
"org.apache.lucene.index.Test2BPostings.MyTokenStream.MyTokenStream()",1,1,1
"org.apache.lucene.index.Test2BPostings.MyTokenStream.incrementToken()",2,1,2
"org.apache.lucene.index.Test2BPostings.MyTokenStream.reset()",1,1,1
"org.apache.lucene.index.Test2BPostings.test()",1,5,6
"org.apache.lucene.index.Test2BTerms.MyTokenStream.MyTokenStream(int)",1,1,1
"org.apache.lucene.index.Test2BTerms.MyTokenStream.incrementToken()",2,2,3
"org.apache.lucene.index.Test2BTerms.MyTokenStream.reset()",1,1,1
"org.apache.lucene.index.Test2BTerms.findTerms(IndexReader)",1,3,3
"org.apache.lucene.index.Test2BTerms.test2BTerms()",1,5,5
"org.apache.lucene.index.Test2BTerms.testSavedTerms(IndexReader,List<String>)",1,4,4
"org.apache.lucene.index.Test2BTerms.toHexString(String)",1,3,4
"org.apache.lucene.index.TestAddIndexes.CommitAndAddIndexes.CommitAndAddIndexes(int)",1,1,1
"org.apache.lucene.index.TestAddIndexes.CommitAndAddIndexes.doBody(int,Directory[])",2,7,11
"org.apache.lucene.index.TestAddIndexes.CommitAndAddIndexes.handle(Throwable)",1,1,1
"org.apache.lucene.index.TestAddIndexes.CommitAndAddIndexes2.CommitAndAddIndexes2(int)",1,1,1
"org.apache.lucene.index.TestAddIndexes.CommitAndAddIndexes2.handle(Throwable)",1,2,3
"org.apache.lucene.index.TestAddIndexes.CommitAndAddIndexes3.CommitAndAddIndexes3(int)",1,1,1
"org.apache.lucene.index.TestAddIndexes.CommitAndAddIndexes3.doBody(int,Directory[])",2,7,11
"org.apache.lucene.index.TestAddIndexes.CommitAndAddIndexes3.handle(Throwable)",1,5,8
"org.apache.lucene.index.TestAddIndexes.RunAddIndexesThreads.RunAddIndexesThreads(int)",1,3,4
"org.apache.lucene.index.TestAddIndexes.RunAddIndexesThreads.close(boolean)",1,1,1
"org.apache.lucene.index.TestAddIndexes.RunAddIndexesThreads.closeDir()",1,2,2
"org.apache.lucene.index.TestAddIndexes.RunAddIndexesThreads.joinThreads()",1,2,2
"org.apache.lucene.index.TestAddIndexes.RunAddIndexesThreads.launchThreads(int)",3,5,8
"org.apache.lucene.index.TestAddIndexes.addDoc(IndexWriter)",1,1,1
"org.apache.lucene.index.TestAddIndexes.addDocs(IndexWriter,int)",1,2,2
"org.apache.lucene.index.TestAddIndexes.addDocs2(IndexWriter,int)",1,2,2
"org.apache.lucene.index.TestAddIndexes.newWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestAddIndexes.setUpDirs(Directory,Directory)",1,2,2
"org.apache.lucene.index.TestAddIndexes.testAddIndexesWithClose()",1,1,1
"org.apache.lucene.index.TestAddIndexes.testAddIndexesWithCloseNoWait()",1,4,4
"org.apache.lucene.index.TestAddIndexes.testAddIndexesWithRollback()",1,2,3
"org.apache.lucene.index.TestAddIndexes.testAddIndexesWithThreads()",1,2,4
"org.apache.lucene.index.TestAddIndexes.testAddSelf()",1,2,2
"org.apache.lucene.index.TestAddIndexes.testExistingDeletes()",1,3,3
"org.apache.lucene.index.TestAddIndexes.testFieldNamesChanged()",1,3,3
"org.apache.lucene.index.TestAddIndexes.testHangOnClose()",1,3,3
"org.apache.lucene.index.TestAddIndexes.testMergeAfterCopy()",1,2,2
"org.apache.lucene.index.TestAddIndexes.testMoreMerges()",1,3,4
"org.apache.lucene.index.TestAddIndexes.testNoCopySegments()",1,1,1
"org.apache.lucene.index.TestAddIndexes.testNoMergeAfterCopy()",1,1,1
"org.apache.lucene.index.TestAddIndexes.testNoTailSegments()",1,1,1
"org.apache.lucene.index.TestAddIndexes.testNonCFSLeftovers()",1,2,2
"org.apache.lucene.index.TestAddIndexes.testSimpleCase()",1,1,1
"org.apache.lucene.index.TestAddIndexes.testWithPendingDeletes()",1,2,4
"org.apache.lucene.index.TestAddIndexes.testWithPendingDeletes2()",1,2,2
"org.apache.lucene.index.TestAddIndexes.testWithPendingDeletes3()",1,2,2
"org.apache.lucene.index.TestAddIndexes.verifyNumDocs(Directory,int)",1,1,1
"org.apache.lucene.index.TestAddIndexes.verifyTermDocs(Directory,Term,int)",1,1,2
"org.apache.lucene.index.TestAllZerosSegmentsFile.test()",1,2,2
"org.apache.lucene.index.TestAtomicUpdate.IndexerThread.IndexerThread(IndexWriter,TimedThread[])",1,1,1
"org.apache.lucene.index.TestAtomicUpdate.IndexerThread.doWork()",1,2,2
"org.apache.lucene.index.TestAtomicUpdate.MockIndexWriter.MockIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestAtomicUpdate.MockIndexWriter.testPoint(String)",1,2,2
"org.apache.lucene.index.TestAtomicUpdate.SearcherThread.SearcherThread(Directory,TimedThread[])",1,1,1
"org.apache.lucene.index.TestAtomicUpdate.SearcherThread.doWork()",1,1,1
"org.apache.lucene.index.TestAtomicUpdate.TimedThread.TimedThread(TimedThread[])",1,1,1
"org.apache.lucene.index.TestAtomicUpdate.TimedThread.anyErrors()",3,1,4
"org.apache.lucene.index.TestAtomicUpdate.TimedThread.run()",3,3,4
"org.apache.lucene.index.TestAtomicUpdate.runTest(Directory)",1,3,4
"org.apache.lucene.index.TestAtomicUpdate.testAtomicUpdates()",1,1,1
"org.apache.lucene.index.TestBackwardsCompatibility.addDoc(IndexWriter,int)",1,1,1
"org.apache.lucene.index.TestBackwardsCompatibility.addNoProxDoc(IndexWriter)",1,1,1
"org.apache.lucene.index.TestBackwardsCompatibility.asString(String[])",1,1,3
"org.apache.lucene.index.TestBackwardsCompatibility.assertCompressedFields29(Directory,boolean)",7,8,13
"org.apache.lucene.index.TestBackwardsCompatibility.changeIndexNoAdds(Random,File)",1,1,1
"org.apache.lucene.index.TestBackwardsCompatibility.changeIndexWithAdds(Random,File,String)",1,2,4
"org.apache.lucene.index.TestBackwardsCompatibility.checkAllSegmentsUpgraded(Directory)",1,3,3
"org.apache.lucene.index.TestBackwardsCompatibility.compare(String,String)",1,1,1
"org.apache.lucene.index.TestBackwardsCompatibility.createIndex(String,boolean,boolean)",1,4,4
"org.apache.lucene.index.TestBackwardsCompatibility.createSurrogatesIndex(String)",1,3,3
"org.apache.lucene.index.TestBackwardsCompatibility.getNumberOfSegments(Directory)",1,1,1
"org.apache.lucene.index.TestBackwardsCompatibility.searchIndex(File,String)",1,12,13
"org.apache.lucene.index.TestBackwardsCompatibility.testAddOldIndexes()",1,2,2
"org.apache.lucene.index.TestBackwardsCompatibility.testAddOldIndexesReader()",1,2,2
"org.apache.lucene.index.TestBackwardsCompatibility.testExactFileNames()",3,4,5
"org.apache.lucene.index.TestBackwardsCompatibility.testHits(ScoreDoc[],int,IndexReader)",1,2,2
"org.apache.lucene.index.TestBackwardsCompatibility.testIndexOldIndex()",1,3,3
"org.apache.lucene.index.TestBackwardsCompatibility.testIndexOldIndexNoAdds()",1,2,2
"org.apache.lucene.index.TestBackwardsCompatibility.testNumericFields()",3,5,8
"org.apache.lucene.index.TestBackwardsCompatibility.testSearchOldIndex()",1,2,2
"org.apache.lucene.index.TestBackwardsCompatibility.testUpgrade29Compression()",1,4,5
"org.apache.lucene.index.TestBackwardsCompatibility.testUpgradeOldIndex()",1,3,4
"org.apache.lucene.index.TestBackwardsCompatibility.testUpgradeOldSingleSegmentIndexWithAdditions()",1,7,9
"org.apache.lucene.index.TestByteSlices.ByteBlockAllocator.getByteBlock()",1,2,2
"org.apache.lucene.index.TestByteSlices.ByteBlockAllocator.recycleByteBlocks(List<byte[]>)",1,2,2
"org.apache.lucene.index.TestByteSlices.ByteBlockAllocator.recycleByteBlocks(byte[][],int,int)",1,2,2
"org.apache.lucene.index.TestByteSlices.testBasic()",1,13,15
"org.apache.lucene.index.TestCheckIndex.testDeletedDocs()",1,4,4
"org.apache.lucene.index.TestCheckIndex.testLuceneConstantVersion()",1,2,2
"org.apache.lucene.index.TestCompoundFile.assertEqualArrays(String,byte[],byte[],int,int)",1,2,2
"org.apache.lucene.index.TestCompoundFile.assertSameSeekBehavior(String,IndexInput,IndexInput)",1,1,1
"org.apache.lucene.index.TestCompoundFile.assertSameStreams(String,IndexInput,IndexInput)",1,2,2
"org.apache.lucene.index.TestCompoundFile.assertSameStreams(String,IndexInput,IndexInput,long)",1,3,3
"org.apache.lucene.index.TestCompoundFile.createRandomFile(Directory,String,int)",1,2,2
"org.apache.lucene.index.TestCompoundFile.createSequenceFile(Directory,String,byte,int)",1,2,2
"org.apache.lucene.index.TestCompoundFile.demo_FSIndexInputBug(Directory,String)",1,2,3
"org.apache.lucene.index.TestCompoundFile.isCSIndexInput(IndexInput)",1,1,1
"org.apache.lucene.index.TestCompoundFile.isCSIndexInputOpen(IndexInput)",2,2,2
"org.apache.lucene.index.TestCompoundFile.setUp()",1,1,1
"org.apache.lucene.index.TestCompoundFile.setUp_2()",1,2,2
"org.apache.lucene.index.TestCompoundFile.tearDown()",1,1,1
"org.apache.lucene.index.TestCompoundFile.testAddExternalFile()",1,1,1
"org.apache.lucene.index.TestCompoundFile.testClonedStreamsClosing()",1,1,1
"org.apache.lucene.index.TestCompoundFile.testFileNotFound()",1,1,2
"org.apache.lucene.index.TestCompoundFile.testLargeWrites()",1,2,2
"org.apache.lucene.index.TestCompoundFile.testManySubFiles()",1,6,6
"org.apache.lucene.index.TestCompoundFile.testRandomAccess()",1,1,1
"org.apache.lucene.index.TestCompoundFile.testRandomAccessClones()",1,1,1
"org.apache.lucene.index.TestCompoundFile.testRandomFiles()",1,3,3
"org.apache.lucene.index.TestCompoundFile.testReadAfterClose()",1,1,1
"org.apache.lucene.index.TestCompoundFile.testReadPastEOF()",1,1,3
"org.apache.lucene.index.TestCompoundFile.testSingleFile()",1,2,2
"org.apache.lucene.index.TestCompoundFile.testTwoFiles()",1,1,1
"org.apache.lucene.index.TestConcurrentMergeScheduler.FailOnlyOnFlush.clearDoFail()",1,1,1
"org.apache.lucene.index.TestConcurrentMergeScheduler.FailOnlyOnFlush.eval(MockDirectoryWrapper)",3,7,9
"org.apache.lucene.index.TestConcurrentMergeScheduler.FailOnlyOnFlush.setDoFail()",1,1,1
"org.apache.lucene.index.TestConcurrentMergeScheduler.testDeleteMerging()",1,6,7
"org.apache.lucene.index.TestConcurrentMergeScheduler.testFlushExceptions()",3,8,9
"org.apache.lucene.index.TestConcurrentMergeScheduler.testNoExtraFiles()",1,4,6
"org.apache.lucene.index.TestConcurrentMergeScheduler.testNoWaitClose()",1,4,4
"org.apache.lucene.index.TestCrash.crash(IndexWriter)",1,1,1
"org.apache.lucene.index.TestCrash.initIndex(Random,MockDirectoryWrapper,boolean)",1,3,3
"org.apache.lucene.index.TestCrash.initIndex(Random,boolean)",1,1,1
"org.apache.lucene.index.TestCrash.testCrashAfterClose()",1,1,1
"org.apache.lucene.index.TestCrash.testCrashAfterCloseNoWait()",1,1,1
"org.apache.lucene.index.TestCrash.testCrashAfterReopen()",1,1,1
"org.apache.lucene.index.TestCrash.testCrashReaderDeletes()",1,1,1
"org.apache.lucene.index.TestCrash.testCrashReaderDeletesAfterClose()",1,1,1
"org.apache.lucene.index.TestCrash.testCrashWhileIndexing()",1,1,1
"org.apache.lucene.index.TestCrash.testWriterAfterCrash()",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.CrashAfterCreateOutput(Directory)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.close()",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.createOutput(String)",2,4,4
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.deleteFile(String)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.fileExists(String)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.fileLength(String)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.fileModified(String)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.listAll()",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.openInput(String)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.setCrashAfterCreateOutput(String)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashAfterCreateOutput.touchFile(String)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.CrashingException.CrashingException(String)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.getDocument()",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.indexAfterRestart()",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.indexAndCrashOnCreateOutputSegments2()",1,1,2
"org.apache.lucene.index.TestCrashCausesCorruptIndex.searchForFleas(int)",1,1,1
"org.apache.lucene.index.TestCrashCausesCorruptIndex.testCrashCorruptsIndexing()",1,1,1
"org.apache.lucene.index.TestDeletionPolicy.ExpirationTimeDeletionPolicy.ExpirationTimeDeletionPolicy(Directory,double)",1,1,1
"org.apache.lucene.index.TestDeletionPolicy.ExpirationTimeDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,3,4
"org.apache.lucene.index.TestDeletionPolicy.ExpirationTimeDeletionPolicy.onInit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestDeletionPolicy.KeepAllDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestDeletionPolicy.KeepAllDeletionPolicy.onInit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestDeletionPolicy.KeepLastNDeletionPolicy.KeepLastNDeletionPolicy(int)",1,1,1
"org.apache.lucene.index.TestDeletionPolicy.KeepLastNDeletionPolicy.doDeletes(List<? extends IndexCommit>,boolean)",3,3,4
"org.apache.lucene.index.TestDeletionPolicy.KeepLastNDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,2,2
"org.apache.lucene.index.TestDeletionPolicy.KeepLastNDeletionPolicy.onInit(List<? extends IndexCommit>)",1,2,2
"org.apache.lucene.index.TestDeletionPolicy.KeepNoneOnInitDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,2,2
"org.apache.lucene.index.TestDeletionPolicy.KeepNoneOnInitDeletionPolicy.onInit(List<? extends IndexCommit>)",1,2,2
"org.apache.lucene.index.TestDeletionPolicy.addDoc(IndexWriter)",1,1,1
"org.apache.lucene.index.TestDeletionPolicy.testExpirationTimeDeletionPolicy()",2,7,9
"org.apache.lucene.index.TestDeletionPolicy.testKeepAllDeletionPolicy()",1,11,15
"org.apache.lucene.index.TestDeletionPolicy.testKeepLastNDeletionPolicy()",4,8,10
"org.apache.lucene.index.TestDeletionPolicy.testKeepLastNDeletionPolicyWithCreates()",4,9,14
"org.apache.lucene.index.TestDeletionPolicy.testKeepLastNDeletionPolicyWithReader()",4,14,20
"org.apache.lucene.index.TestDeletionPolicy.testKeepNoneOnInitDeletionPolicy()",1,5,5
"org.apache.lucene.index.TestDeletionPolicy.testOpenPriorSnapshot()",1,5,6
"org.apache.lucene.index.TestDeletionPolicy.verifyCommitOrder(List<? extends IndexCommit>)",1,2,2
"org.apache.lucene.index.TestDirectoryReader.addDoc(Random,Directory,String,boolean)",1,1,2
"org.apache.lucene.index.TestDirectoryReader.createDirectory()",1,1,1
"org.apache.lucene.index.TestDirectoryReader.doTestDocument()",1,1,1
"org.apache.lucene.index.TestDirectoryReader.doTestUndeleteAll()",1,3,3
"org.apache.lucene.index.TestDirectoryReader.openReader()",1,1,1
"org.apache.lucene.index.TestDirectoryReader.setUp()",1,1,1
"org.apache.lucene.index.TestDirectoryReader.tearDown()",1,3,3
"org.apache.lucene.index.TestDirectoryReader.test()",1,1,1
"org.apache.lucene.index.TestDirectoryReader.testAllTermDocs()",1,2,2
"org.apache.lucene.index.TestDirectoryReader.testIsCurrent()",1,1,2
"org.apache.lucene.index.TestDirectoryReader.testMultiTermDocs()",1,2,2
"org.apache.lucene.index.TestDoc.createOutput(String,String)",1,4,4
"org.apache.lucene.index.TestDoc.indexDoc(IndexWriter,String)",1,1,1
"org.apache.lucene.index.TestDoc.main(String[])",1,1,1
"org.apache.lucene.index.TestDoc.merge(SegmentInfo,SegmentInfo,String,boolean)",1,3,3
"org.apache.lucene.index.TestDoc.printSegment(PrintWriter,SegmentInfo)",1,5,5
"org.apache.lucene.index.TestDoc.setUp()",1,1,1
"org.apache.lucene.index.TestDoc.testIndexAndMerge()",1,1,1
"org.apache.lucene.index.TestDocumentWriter.setUp()",1,1,1
"org.apache.lucene.index.TestDocumentWriter.tearDown()",1,1,1
"org.apache.lucene.index.TestDocumentWriter.test()",1,1,1
"org.apache.lucene.index.TestDocumentWriter.testAddDocument()",1,3,8
"org.apache.lucene.index.TestDocumentWriter.testLUCENE_1590()",1,1,1
"org.apache.lucene.index.TestDocumentWriter.testMixedTermVectorSettingsSameField()",1,1,1
"org.apache.lucene.index.TestDocumentWriter.testPositionIncrementGap()",1,1,1
"org.apache.lucene.index.TestDocumentWriter.testPreAnalyzedField()",2,2,2
"org.apache.lucene.index.TestDocumentWriter.testTokenReuse()",3,4,5
"org.apache.lucene.index.TestFieldInfos.setUp()",1,1,1
"org.apache.lucene.index.TestFieldInfos.test()",1,1,1
"org.apache.lucene.index.TestFieldNormModifier.setUp()",1,3,3
"org.apache.lucene.index.TestFieldNormModifier.tearDown()",1,1,1
"org.apache.lucene.index.TestFieldNormModifier.testFieldWithNoNorm()",1,1,2
"org.apache.lucene.index.TestFieldNormModifier.testGoodCases()",1,3,3
"org.apache.lucene.index.TestFieldNormModifier.testMissingField()",1,1,2
"org.apache.lucene.index.TestFieldNormModifier.testNormKiller()",1,2,2
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.FaultyFSDirectory(File)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.close()",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.createOutput(String)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.deleteFile(String)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.fileExists(String)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.fileLength(String)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.fileModified(String)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.listAll()",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.openInput(String)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.sync(Collection<String>)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyFSDirectory.touchFile(String)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyIndexInput.FaultyIndexInput(IndexInput)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyIndexInput.clone()",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyIndexInput.close()",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyIndexInput.length()",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyIndexInput.readInternal(byte[],int,int)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyIndexInput.seekInternal(long)",1,1,1
"org.apache.lucene.index.TestFieldsReader.FaultyIndexInput.simOutage()",2,1,3
"org.apache.lucene.index.TestFieldsReader.afterClass()",1,1,1
"org.apache.lucene.index.TestFieldsReader.assertSizeEquals(int,byte[])",1,1,1
"org.apache.lucene.index.TestFieldsReader.beforeClass()",1,1,1
"org.apache.lucene.index.TestFieldsReader.setUp()",1,1,1
"org.apache.lucene.index.TestFieldsReader.test()",1,1,1
"org.apache.lucene.index.TestFieldsReader.testExceptions()",1,4,6
"org.apache.lucene.index.TestFieldsReader.testLatentFields()",2,2,3
"org.apache.lucene.index.TestFieldsReader.testLazyFields()",1,2,2
"org.apache.lucene.index.TestFieldsReader.testLazyFieldsAfterClose()",1,1,2
"org.apache.lucene.index.TestFieldsReader.testLazyPerformance()",1,3,3
"org.apache.lucene.index.TestFieldsReader.testLoadFirst()",1,2,2
"org.apache.lucene.index.TestFieldsReader.testLoadSize()",3,3,4
"org.apache.lucene.index.TestFieldsReader.testNumericField()",1,7,7
"org.apache.lucene.index.TestFilterIndexReader.TestReader.TestReader(IndexReader)",1,1,1
"org.apache.lucene.index.TestFilterIndexReader.TestReader.TestTermEnum.TestTermEnum(TermEnum)",1,1,1
"org.apache.lucene.index.TestFilterIndexReader.TestReader.TestTermEnum.next()",3,2,3
"org.apache.lucene.index.TestFilterIndexReader.TestReader.TestTermPositions.TestTermPositions(TermPositions)",1,1,1
"org.apache.lucene.index.TestFilterIndexReader.TestReader.TestTermPositions.next()",3,2,3
"org.apache.lucene.index.TestFilterIndexReader.TestReader.getFieldInfos()",1,1,1
"org.apache.lucene.index.TestFilterIndexReader.TestReader.termPositions()",1,1,1
"org.apache.lucene.index.TestFilterIndexReader.TestReader.terms()",1,1,1
"org.apache.lucene.index.TestFilterIndexReader.checkOverrideMethods(Class<?>)",3,5,7
"org.apache.lucene.index.TestFilterIndexReader.main(String[])",1,1,1
"org.apache.lucene.index.TestFilterIndexReader.testFilterIndexReader()",1,4,4
"org.apache.lucene.index.TestFilterIndexReader.testOverrideMethods()",3,9,10
"org.apache.lucene.index.TestForTooMuchCloning.test()",1,3,3
"org.apache.lucene.index.TestForceMergeForever.MyIndexWriter.MyIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestForceMergeForever.MyIndexWriter.merge(OneMerge)",1,5,5
"org.apache.lucene.index.TestForceMergeForever.test()",3,5,6
"org.apache.lucene.index.TestIndexCommit.testEqualsHashCode()",1,1,1
"org.apache.lucene.index.TestIndexFileDeleter.addDoc(IndexWriter,int)",1,1,1
"org.apache.lucene.index.TestIndexFileDeleter.asString(String[])",1,1,3
"org.apache.lucene.index.TestIndexFileDeleter.copyFile(Directory,String,String)",1,2,2
"org.apache.lucene.index.TestIndexFileDeleter.difFiles(String[],String[])",1,7,7
"org.apache.lucene.index.TestIndexFileDeleter.testDeleteLeftoverFiles()",3,5,7
"org.apache.lucene.index.TestIndexInput.afterClass()",1,1,1
"org.apache.lucene.index.TestIndexInput.beforeClass()",1,3,3
"org.apache.lucene.index.TestIndexInput.checkRandomReads(DataInput)",1,2,2
"org.apache.lucene.index.TestIndexInput.checkReads(DataInput,Class<? extends Exception>)",1,3,3
"org.apache.lucene.index.TestIndexInput.checkReads(IndexInput)",1,1,1
"org.apache.lucene.index.TestIndexInput.testBufferedIndexInputRead()",1,1,1
"org.apache.lucene.index.TestIndexInput.testByteArrayDataInput()",1,1,1
"org.apache.lucene.index.TestIndexInput.testRawIndexInputRead()",1,1,1
"org.apache.lucene.index.TestIndexInput.testSkipChars()",1,1,1
"org.apache.lucene.index.TestIndexReader.IncThread.IncThread(IndexReader,Random)",1,1,1
"org.apache.lucene.index.TestIndexReader.IncThread.run()",1,2,3
"org.apache.lucene.index.TestIndexReader.addDoc(IndexWriter,String)",1,1,1
"org.apache.lucene.index.TestIndexReader.addDocumentWithDifferentFields(IndexWriter)",1,1,1
"org.apache.lucene.index.TestIndexReader.addDocumentWithFields(IndexWriter)",1,1,1
"org.apache.lucene.index.TestIndexReader.addDocumentWithTermVectorFields(IndexWriter)",1,1,1
"org.apache.lucene.index.TestIndexReader.arrayToString(String[])",1,1,3
"org.apache.lucene.index.TestIndexReader.assertIndexEquals(IndexReader,IndexReader)",1,13,14
"org.apache.lucene.index.TestIndexReader.assertTermDocsCount(String,IndexReader,Term,int)",1,2,3
"org.apache.lucene.index.TestIndexReader.createDocument(String)",1,1,1
"org.apache.lucene.index.TestIndexReader.testBinaryFields()",1,5,5
"org.apache.lucene.index.TestIndexReader.testChangesAfterClose()",1,2,5
"org.apache.lucene.index.TestIndexReader.testCommitUserData()",1,4,4
"org.apache.lucene.index.TestIndexReader.testDocsOutOfOrderJIRA140()",1,4,5
"org.apache.lucene.index.TestIndexReader.testExceptionReleaseWriteLockJIRA768()",1,3,5
"org.apache.lucene.index.TestIndexReader.testFieldCacheReuseAfterClone()",1,1,1
"org.apache.lucene.index.TestIndexReader.testFieldCacheReuseAfterReopen()",1,1,1
"org.apache.lucene.index.TestIndexReader.testFilesOpenClose()",1,1,1
"org.apache.lucene.index.TestIndexReader.testGetFieldNames()",1,7,7
"org.apache.lucene.index.TestIndexReader.testGetIndexCommit()",1,3,3
"org.apache.lucene.index.TestIndexReader.testIndexExists()",1,1,1
"org.apache.lucene.index.TestIndexReader.testIndexReader()",1,1,1
"org.apache.lucene.index.TestIndexReader.testIsCurrent()",1,1,1
"org.apache.lucene.index.TestIndexReader.testLastModified()",1,3,3
"org.apache.lucene.index.TestIndexReader.testListCommits()",1,2,2
"org.apache.lucene.index.TestIndexReader.testLock()",1,2,3
"org.apache.lucene.index.TestIndexReader.testLockObtainFailed()",1,2,5
"org.apache.lucene.index.TestIndexReader.testNoDir()",1,1,2
"org.apache.lucene.index.TestIndexReader.testNoDupCommitFileNames()",1,3,3
"org.apache.lucene.index.TestIndexReader.testNoTermsIndex()",1,2,3
"org.apache.lucene.index.TestIndexReader.testOOBDocID()",1,1,2
"org.apache.lucene.index.TestIndexReader.testOpenReaderAfterDelete()",1,1,3
"org.apache.lucene.index.TestIndexReader.testPrepareCommitIsCurrent()",1,1,1
"org.apache.lucene.index.TestIndexReader.testReadOnly()",1,1,4
"org.apache.lucene.index.TestIndexReader.testReaderFinishedListener()",1,1,2
"org.apache.lucene.index.TestIndexReader.testStressTryIncRef()",1,3,3
"org.apache.lucene.index.TestIndexReader.testTermVectors()",1,4,4
"org.apache.lucene.index.TestIndexReader.testTryIncRef()",1,1,1
"org.apache.lucene.index.TestIndexReader.testUniqueTermCount()",1,2,3
"org.apache.lucene.index.TestIndexReader.testVersion()",1,1,1
"org.apache.lucene.index.TestIndexReader.testWritingNorms()",1,1,1
"org.apache.lucene.index.TestIndexReader.testWritingNormsNoReader()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.assertDelDocsRefCountEquals(int,SegmentReader)",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.assertDocDeleted(SegmentReader,SegmentReader,int)",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.deleteWorked(int,IndexReader)",1,1,2
"org.apache.lucene.index.TestIndexReaderClone.isReadOnly(IndexReader)",2,1,3
"org.apache.lucene.index.TestIndexReaderClone.performDefaultTests(IndexReader)",1,1,2
"org.apache.lucene.index.TestIndexReaderClone.testCloneNoChangesStillReadOnly()",1,2,2
"org.apache.lucene.index.TestIndexReaderClone.testCloneReadOnlyDirectoryReader()",1,2,2
"org.apache.lucene.index.TestIndexReaderClone.testCloneReadOnlySegmentReader()",1,3,3
"org.apache.lucene.index.TestIndexReaderClone.testCloneReadOnlyToWriteable()",1,3,3
"org.apache.lucene.index.TestIndexReaderClone.testCloneSubreaders()",1,3,3
"org.apache.lucene.index.TestIndexReaderClone.testCloneWithDeletes()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testCloneWithSetNorm()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testCloneWriteToClone()",1,2,2
"org.apache.lucene.index.TestIndexReaderClone.testCloneWriteToOrig()",1,2,2
"org.apache.lucene.index.TestIndexReaderClone.testCloneWriteableToReadOnly()",1,4,4
"org.apache.lucene.index.TestIndexReaderClone.testCloseStoredFields()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testLucene1516Bug()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testMixedReaders()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testParallelReader()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testReadOnlyCloneAfterFullMerge()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testReopenSegmentReaderToMultiReader()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testReopenWriteableToReadOnly()",1,2,2
"org.apache.lucene.index.TestIndexReaderClone.testSegmentReaderCloseReferencing()",1,1,1
"org.apache.lucene.index.TestIndexReaderClone.testSegmentReaderDelDocsReferenceCounting()",1,1,3
"org.apache.lucene.index.TestIndexReaderClone.testSegmentReaderUndeleteall()",1,1,1
"org.apache.lucene.index.TestIndexReaderCloneNorms.SimilarityOne.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.index.TestIndexReaderCloneNorms.addDocs(Random,Directory,int,boolean)",1,2,2
"org.apache.lucene.index.TestIndexReaderCloneNorms.createIndex(Random,Directory)",1,1,1
"org.apache.lucene.index.TestIndexReaderCloneNorms.doTestNorms(Random,Directory)",1,1,1
"org.apache.lucene.index.TestIndexReaderCloneNorms.modifyNormsForF1(IndexReader)",1,2,2
"org.apache.lucene.index.TestIndexReaderCloneNorms.newDoc()",1,2,2
"org.apache.lucene.index.TestIndexReaderCloneNorms.nextNorm()",3,2,4
"org.apache.lucene.index.TestIndexReaderCloneNorms.setUp()",1,1,1
"org.apache.lucene.index.TestIndexReaderCloneNorms.testNorms()",1,2,2
"org.apache.lucene.index.TestIndexReaderCloneNorms.testNormsClose()",1,1,1
"org.apache.lucene.index.TestIndexReaderCloneNorms.testNormsRefCounting()",1,1,2
"org.apache.lucene.index.TestIndexReaderCloneNorms.verifyIndex(Directory)",1,1,1
"org.apache.lucene.index.TestIndexReaderCloneNorms.verifyIndex(IndexReader)",1,3,4
"org.apache.lucene.index.TestIndexReaderDelete.deleteReaderReaderConflict(boolean)",1,3,4
"org.apache.lucene.index.TestIndexReaderDelete.deleteReaderWriterConflict(boolean)",1,4,5
"org.apache.lucene.index.TestIndexReaderDelete.testBasicDelete()",1,2,3
"org.apache.lucene.index.TestIndexReaderDelete.testDeleteReaderReaderConflictFullMerge()",1,1,1
"org.apache.lucene.index.TestIndexReaderDelete.testDeleteReaderReaderConflictNoFullMerge()",1,1,1
"org.apache.lucene.index.TestIndexReaderDelete.testDeleteReaderWriterConflictFullMerge()",1,1,1
"org.apache.lucene.index.TestIndexReaderDelete.testDeleteReaderWriterConflictNoFullMerge()",1,1,1
"org.apache.lucene.index.TestIndexReaderDelete.testIndexReaderUnDeleteAll()",1,1,1
"org.apache.lucene.index.TestIndexReaderDelete.testMultiReaderDeletes()",1,1,1
"org.apache.lucene.index.TestIndexReaderDelete.testUndeleteAll()",1,1,1
"org.apache.lucene.index.TestIndexReaderDelete.testUndeleteAllAfterClose()",1,1,1
"org.apache.lucene.index.TestIndexReaderDelete.testUndeleteAllAfterCloseThenReopen()",1,1,1
"org.apache.lucene.index.TestIndexReaderOnDiskFull.testDiskFull()",4,23,28
"org.apache.lucene.index.TestIndexReaderReopen.KeepAllCommits.onCommit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.KeepAllCommits.onInit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.ReaderCouple.ReaderCouple(IndexReader,IndexReader)",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.ReaderThread.ReaderThread(ReaderThreadTask)",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.ReaderThread.run()",1,2,2
"org.apache.lucene.index.TestIndexReaderReopen.ReaderThread.stopThread()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.ReaderThreadTask.stop()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.assertReaderClosed(IndexReader,boolean,boolean)",1,9,10
"org.apache.lucene.index.TestIndexReaderReopen.assertRefCountEquals(int,IndexReader)",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.createDocument(int,int)",1,2,2
"org.apache.lucene.index.TestIndexReaderReopen.createIndex(Random,Directory,boolean)",1,5,6
"org.apache.lucene.index.TestIndexReaderReopen.doTestReopenWithCommit(Random,Directory,boolean)",1,6,6
"org.apache.lucene.index.TestIndexReaderReopen.modifyIndex(int,Directory)",2,8,9
"org.apache.lucene.index.TestIndexReaderReopen.performDefaultTests(TestReopen)",1,2,2
"org.apache.lucene.index.TestIndexReaderReopen.performTestsWithExceptionInReopen(TestReopen)",1,1,2
"org.apache.lucene.index.TestIndexReaderReopen.refreshReader(IndexReader,TestReopen,int,boolean)",1,6,8
"org.apache.lucene.index.TestIndexReaderReopen.refreshReader(IndexReader,boolean)",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testCloseOrig()",1,1,2
"org.apache.lucene.index.TestIndexReaderReopen.testCommitRecreate()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testCommitReopen()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testDeletes()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testDeletes2()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testMixedReaders()",1,2,2
"org.apache.lucene.index.TestIndexReaderReopen.testMultiReaderReopen()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testNormsRefCounting()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testParallelReaderReopen()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testReferenceCounting()",2,10,13
"org.apache.lucene.index.TestIndexReaderReopen.testReferenceCountingMultiReader()",1,4,4
"org.apache.lucene.index.TestIndexReaderReopen.testReferenceCountingParallelReader()",1,4,4
"org.apache.lucene.index.TestIndexReaderReopen.testReopen()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testReopenChangeReadonly()",1,1,1
"org.apache.lucene.index.TestIndexReaderReopen.testReopenOnCommit()",1,6,7
"org.apache.lucene.index.TestIndexReaderReopen.testThreadSafety()",3,21,25
"org.apache.lucene.index.TestIndexSorter.setUp()",1,9,10
"org.apache.lucene.index.TestIndexSorter.testSorting()",1,2,2
"org.apache.lucene.index.TestIndexSplitter.test()",1,4,4
"org.apache.lucene.index.TestIndexSplitter.testDeleteThenFullMerge()",1,1,1
"org.apache.lucene.index.TestIndexWriter.FlushCountingIndexWriter.FlushCountingIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestIndexWriter.FlushCountingIndexWriter.doAfterFlush()",1,1,1
"org.apache.lucene.index.TestIndexWriter.IndexerThreadInterrupt.run()",5,13,17
"org.apache.lucene.index.TestIndexWriter.MockIndexWriter.MockIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestIndexWriter.MockIndexWriter.doAfterFlush()",1,1,1
"org.apache.lucene.index.TestIndexWriter.MockIndexWriter.doBeforeFlush()",1,1,1
"org.apache.lucene.index.TestIndexWriter.MyMergeScheduler.close()",1,1,1
"org.apache.lucene.index.TestIndexWriter.MyMergeScheduler.merge(IndexWriter)",3,3,4
"org.apache.lucene.index.TestIndexWriter.StringSplitAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.index.TestIndexWriter.StringSplitTokenizer.StringSplitTokenizer(Reader)",1,1,2
"org.apache.lucene.index.TestIndexWriter.StringSplitTokenizer.incrementToken()",2,2,2
"org.apache.lucene.index.TestIndexWriter.StringSplitTokenizer.reset(Reader)",1,2,2
"org.apache.lucene.index.TestIndexWriter.addDoc(IndexWriter)",1,1,1
"org.apache.lucene.index.TestIndexWriter.addDocWithIndex(IndexWriter,int)",1,1,1
"org.apache.lucene.index.TestIndexWriter.arrayToString(String[])",1,1,3
"org.apache.lucene.index.TestIndexWriter.assertNoUnreferencedFiles(Directory,String)",1,2,2
"org.apache.lucene.index.TestIndexWriter.testBadSegment()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testBinaryFieldOffsetLength()",1,1,2
"org.apache.lucene.index.TestIndexWriter.testChangesAfterClose()",1,1,2
"org.apache.lucene.index.TestIndexWriter.testChangingRAMBuffer()",1,13,13
"org.apache.lucene.index.TestIndexWriter.testChangingRAMBuffer2()",1,14,14
"org.apache.lucene.index.TestIndexWriter.testChangingRAMBuffer2WithIWC()",1,14,14
"org.apache.lucene.index.TestIndexWriter.testChangingRAMBufferWithIWC()",1,13,13
"org.apache.lucene.index.TestIndexWriter.testCreateWithReader()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testDeadlock()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testDeleteAllNRTLeftoverFiles()",1,3,3
"org.apache.lucene.index.TestIndexWriter.testDeleteUnsedFiles2()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testDeleteUnusedFiles()",1,5,5
"org.apache.lucene.index.TestIndexWriter.testDiverseDocs()",1,7,7
"org.apache.lucene.index.TestIndexWriter.testDoBeforeAfterFlush()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testDocCount()",1,3,3
"org.apache.lucene.index.TestIndexWriter.testEmptyDirRollback()",1,2,3
"org.apache.lucene.index.TestIndexWriter.testEmptyDocAfterFlushingRealDoc()",1,2,3
"org.apache.lucene.index.TestIndexWriter.testEmptyFSDirWithNoLock()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testEmptyFieldName()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testEmptyFieldNameEmptyTerm()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testEmptyFieldNameTIIOne()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testEmptyFieldNameTerms()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testEnablingNorms()",1,5,5
"org.apache.lucene.index.TestIndexWriter.testFlushWithNoMerging()",1,2,2
"org.apache.lucene.index.TestIndexWriter.testHighFreqTerm()",1,2,2
"org.apache.lucene.index.TestIndexWriter.testIndexNoDocuments()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testIndexStoreCombos()",1,1,2
"org.apache.lucene.index.TestIndexWriter.testManyFields()",1,3,3
"org.apache.lucene.index.TestIndexWriter.testMaxThreadPriority()",1,2,2
"org.apache.lucene.index.TestIndexWriter.testNRTReaderVersion()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testNegativePositions()",2,1,3
"org.apache.lucene.index.TestIndexWriter.testNoDocsIndex()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testNoSegmentFile()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testNoUnwantedTVFiles()",1,3,3
"org.apache.lucene.index.TestIndexWriter.testNoWaitClose()",6,12,16
"org.apache.lucene.index.TestIndexWriter.testNullLockFactory()",1,2,2
"org.apache.lucene.index.TestIndexWriter.testOnlyUpdateDocuments()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testOtherFiles()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testPositionIncrementGapEmptyField()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testPrepareCommitThenClose()",1,1,2
"org.apache.lucene.index.TestIndexWriter.testPrepareCommitThenRollback()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testPrepareCommitThenRollback2()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testRandomStoredFields()",1,17,17
"org.apache.lucene.index.TestIndexWriter.testSmallRAMBuffer()",1,2,2
"org.apache.lucene.index.TestIndexWriter.testStoredFieldsOrder()",1,1,1
"org.apache.lucene.index.TestIndexWriter.testThreadInterruptDeadlock()",3,3,4
"org.apache.lucene.index.TestIndexWriter.testUnlimitedMaxFieldLength()",1,2,2
"org.apache.lucene.index.TestIndexWriter.testUserSpecifiedMaxFieldLength()",1,2,2
"org.apache.lucene.index.TestIndexWriter.testVariableSchema()",1,7,8
"org.apache.lucene.index.TestIndexWriter.testWhetherDeleteAllDeletesWriteLock()",1,1,2
"org.apache.lucene.index.TestIndexWriter.testWickedLongTerm()",1,1,1
"org.apache.lucene.index.TestIndexWriterCommit.testCommitOnClose()",1,4,4
"org.apache.lucene.index.TestIndexWriterCommit.testCommitOnCloseAbort()",1,5,5
"org.apache.lucene.index.TestIndexWriterCommit.testCommitOnCloseDiskUsage()",1,4,4
"org.apache.lucene.index.TestIndexWriterCommit.testCommitOnCloseForceMerge()",1,6,6
"org.apache.lucene.index.TestIndexWriterCommit.testCommitThreadSafety()",3,6,7
"org.apache.lucene.index.TestIndexWriterCommit.testCommitUserData()",1,3,3
"org.apache.lucene.index.TestIndexWriterCommit.testForceCommit()",1,3,3
"org.apache.lucene.index.TestIndexWriterCommit.testFutureCommit()",7,4,7
"org.apache.lucene.index.TestIndexWriterCommit.testNoCommits()",1,1,2
"org.apache.lucene.index.TestIndexWriterCommit.testPrepareCommit()",1,3,3
"org.apache.lucene.index.TestIndexWriterCommit.testPrepareCommitNoChanges()",1,1,1
"org.apache.lucene.index.TestIndexWriterCommit.testPrepareCommitRollback()",1,3,3
"org.apache.lucene.index.TestIndexWriterConfig.MyIndexingChain.getChain(DocumentsWriter)",1,1,1
"org.apache.lucene.index.TestIndexWriterConfig.MyWarmer.warm(IndexReader)",1,1,1
"org.apache.lucene.index.TestIndexWriterConfig.testClone()",1,1,1
"org.apache.lucene.index.TestIndexWriterConfig.testConstants()",1,1,1
"org.apache.lucene.index.TestIndexWriterConfig.testDefaults()",1,4,4
"org.apache.lucene.index.TestIndexWriterConfig.testIndexWriterSetters()",1,1,1
"org.apache.lucene.index.TestIndexWriterConfig.testInvalidValues()",1,1,7
"org.apache.lucene.index.TestIndexWriterConfig.testSettersChaining()",1,5,5
"org.apache.lucene.index.TestIndexWriterConfig.testToString()",4,4,5
"org.apache.lucene.index.TestIndexWriterDelete.addDoc(IndexWriter,int,int)",1,1,1
"org.apache.lucene.index.TestIndexWriterDelete.arrayToString(String[])",1,1,3
"org.apache.lucene.index.TestIndexWriterDelete.doTestOperationsOnDiskFull(boolean)",1,23,32
"org.apache.lucene.index.TestIndexWriterDelete.getHitCount(Directory,Term)",1,1,1
"org.apache.lucene.index.TestIndexWriterDelete.testApplyDeletesOnFlush()",3,7,8
"org.apache.lucene.index.TestIndexWriterDelete.testBatchDeletes()",1,3,3
"org.apache.lucene.index.TestIndexWriterDelete.testBothDeletes()",1,4,4
"org.apache.lucene.index.TestIndexWriterDelete.testDeleteAll()",1,2,2
"org.apache.lucene.index.TestIndexWriterDelete.testDeleteAllNRT()",1,2,2
"org.apache.lucene.index.TestIndexWriterDelete.testDeleteAllRollback()",1,2,2
"org.apache.lucene.index.TestIndexWriterDelete.testDeleteAllSlowly()",1,5,5
"org.apache.lucene.index.TestIndexWriterDelete.testDeletesOnDiskFull()",1,1,1
"org.apache.lucene.index.TestIndexWriterDelete.testErrorAfterApplyDeletes()",9,15,20
"org.apache.lucene.index.TestIndexWriterDelete.testErrorInDocsWriterAdd()",3,4,5
"org.apache.lucene.index.TestIndexWriterDelete.testFlushPushedDeletesByCount()",3,4,7
"org.apache.lucene.index.TestIndexWriterDelete.testFlushPushedDeletesByRAM()",3,5,7
"org.apache.lucene.index.TestIndexWriterDelete.testIndexingThenDeleting()",1,6,8
"org.apache.lucene.index.TestIndexWriterDelete.testMaxBufferedDeletes()",1,1,2
"org.apache.lucene.index.TestIndexWriterDelete.testNonRAMDelete()",1,2,3
"org.apache.lucene.index.TestIndexWriterDelete.testRAMDeletes()",1,5,6
"org.apache.lucene.index.TestIndexWriterDelete.testSimpleCase()",1,2,2
"org.apache.lucene.index.TestIndexWriterDelete.testUpdatesOnDiskFull()",1,1,1
"org.apache.lucene.index.TestIndexWriterDelete.updateDoc(IndexWriter,int,int)",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.CrashingFilter.CrashingFilter(String,TokenStream)",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.CrashingFilter.incrementToken()",2,2,3
"org.apache.lucene.index.TestIndexWriterExceptions.CrashingFilter.reset()",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.FailOnlyInCommit.eval(MockDirectoryWrapper)",3,4,8
"org.apache.lucene.index.TestIndexWriterExceptions.FailOnlyInSync.eval(MockDirectoryWrapper)",4,5,6
"org.apache.lucene.index.TestIndexWriterExceptions.FailOnlyOnFlush.clearDoFail()",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.FailOnlyOnFlush.eval(MockDirectoryWrapper)",3,4,9
"org.apache.lucene.index.TestIndexWriterExceptions.FailOnlyOnFlush.setDoFail()",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.IndexerThread.IndexerThread(int,IndexWriter)",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.IndexerThread.run()",2,10,10
"org.apache.lucene.index.TestIndexWriterExceptions.MockIndexWriter.MockIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.MockIndexWriter.testPoint(String)",2,5,5
"org.apache.lucene.index.TestIndexWriterExceptions.MockIndexWriter2.MockIndexWriter2(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.MockIndexWriter2.testPoint(String)",2,2,3
"org.apache.lucene.index.TestIndexWriterExceptions.MockIndexWriter3.MockIndexWriter3(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.MockIndexWriter3.testPoint(String)",2,2,3
"org.apache.lucene.index.TestIndexWriterExceptions.MockIndexWriter4.MockIndexWriter4(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.MockIndexWriter4.testPoint(String)",2,2,3
"org.apache.lucene.index.TestIndexWriterExceptions.UOEDirectory.openInput(String)",4,4,5
"org.apache.lucene.index.TestIndexWriterExceptions.addDoc(IndexWriter)",1,1,1
"org.apache.lucene.index.TestIndexWriterExceptions.testAddDocsNonAbortingException()",1,6,6
"org.apache.lucene.index.TestIndexWriterExceptions.testDocumentsWriterAbort()",1,3,3
"org.apache.lucene.index.TestIndexWriterExceptions.testDocumentsWriterExceptionThreads()",1,12,13
"org.apache.lucene.index.TestIndexWriterExceptions.testDocumentsWriterExceptions()",1,13,14
"org.apache.lucene.index.TestIndexWriterExceptions.testExceptionDocumentsWriterInit()",1,1,3
"org.apache.lucene.index.TestIndexWriterExceptions.testExceptionDuringSync()",1,3,4
"org.apache.lucene.index.TestIndexWriterExceptions.testExceptionFromTokenStream()",2,1,4
"org.apache.lucene.index.TestIndexWriterExceptions.testExceptionJustBeforeFlush()",1,1,3
"org.apache.lucene.index.TestIndexWriterExceptions.testExceptionOnCtor()",1,1,2
"org.apache.lucene.index.TestIndexWriterExceptions.testExceptionOnMergeInit()",2,2,3
"org.apache.lucene.index.TestIndexWriterExceptions.testExceptionsDuringCommit()",1,2,4
"org.apache.lucene.index.TestIndexWriterExceptions.testForceMergeExceptions()",1,6,8
"org.apache.lucene.index.TestIndexWriterExceptions.testIllegalPositions()",1,1,2
"org.apache.lucene.index.TestIndexWriterExceptions.testLegalbutVeryLargePositions()",1,2,2
"org.apache.lucene.index.TestIndexWriterExceptions.testOutOfMemoryErrorCausesCloseToFail()",2,3,4
"org.apache.lucene.index.TestIndexWriterExceptions.testRandomExceptions()",1,7,7
"org.apache.lucene.index.TestIndexWriterExceptions.testRandomExceptionsThreads()",1,7,7
"org.apache.lucene.index.TestIndexWriterExceptions.testRollbackExceptionHang()",1,1,2
"org.apache.lucene.index.TestIndexWriterExceptions.testSegmentsChecksumError()",1,3,3
"org.apache.lucene.index.TestIndexWriterExceptions.testSimulatedCorruptIndex1()",1,4,5
"org.apache.lucene.index.TestIndexWriterExceptions.testSimulatedCorruptIndex2()",3,5,6
"org.apache.lucene.index.TestIndexWriterExceptions.testSimulatedCrashedWriter()",1,6,6
"org.apache.lucene.index.TestIndexWriterExceptions.testUpdateDocsNonAbortingException()",1,8,8
"org.apache.lucene.index.TestIndexWriterForceMerge.testBackgroundForceMerge()",1,4,4
"org.apache.lucene.index.TestIndexWriterForceMerge.testForceMergeTempSpaceUsage()",1,6,6
"org.apache.lucene.index.TestIndexWriterForceMerge.testMaxNumSegments2()",1,4,4
"org.apache.lucene.index.TestIndexWriterForceMerge.testPartialMerge()",1,4,5
"org.apache.lucene.index.TestIndexWriterLockRelease.setUp()",4,5,5
"org.apache.lucene.index.TestIndexWriterLockRelease.tearDown()",5,5,5
"org.apache.lucene.index.TestIndexWriterLockRelease.testIndexWriterLockRelease()",1,2,3
"org.apache.lucene.index.TestIndexWriterMergePolicy.addDoc(IndexWriter)",1,1,1
"org.apache.lucene.index.TestIndexWriterMergePolicy.checkInvariants(IndexWriter)",1,5,6
"org.apache.lucene.index.TestIndexWriterMergePolicy.testForceFlush()",1,2,2
"org.apache.lucene.index.TestIndexWriterMergePolicy.testMaxBufferedDocsChange()",1,5,5
"org.apache.lucene.index.TestIndexWriterMergePolicy.testMergeDocCount0()",1,3,3
"org.apache.lucene.index.TestIndexWriterMergePolicy.testMergeFactorChange()",1,3,4
"org.apache.lucene.index.TestIndexWriterMergePolicy.testNoOverMerge()",1,2,3
"org.apache.lucene.index.TestIndexWriterMergePolicy.testNormalCase()",1,2,2
"org.apache.lucene.index.TestIndexWriterMerging.MyMergeScheduler.close()",1,1,1
"org.apache.lucene.index.TestIndexWriterMerging.MyMergeScheduler.merge(IndexWriter)",3,3,4
"org.apache.lucene.index.TestIndexWriterMerging.fillIndex(Random,Directory,int,int)",1,2,2
"org.apache.lucene.index.TestIndexWriterMerging.testForceMergeDeletes()",1,2,3
"org.apache.lucene.index.TestIndexWriterMerging.testForceMergeDeletes2()",1,3,3
"org.apache.lucene.index.TestIndexWriterMerging.testForceMergeDeletes3()",1,3,3
"org.apache.lucene.index.TestIndexWriterMerging.testLucene()",1,3,4
"org.apache.lucene.index.TestIndexWriterMerging.testNoWaitClose()",6,12,16
"org.apache.lucene.index.TestIndexWriterMerging.testSetMaxMergeDocs()",1,2,3
"org.apache.lucene.index.TestIndexWriterMerging.verifyIndex(Directory,int)",1,3,3
"org.apache.lucene.index.TestIndexWriterNRTIsCurrent.ReaderThread.ReaderThread(ReaderHolder,CountDownLatch)",1,1,1
"org.apache.lucene.index.TestIndexWriterNRTIsCurrent.ReaderThread.run()",3,6,9
"org.apache.lucene.index.TestIndexWriterNRTIsCurrent.WriterThread.WriterThread(ReaderHolder,IndexWriter,int,Random,CountDownLatch)",1,1,1
"org.apache.lucene.index.TestIndexWriterNRTIsCurrent.WriterThread.run()",1,12,15
"org.apache.lucene.index.TestIndexWriterNRTIsCurrent.testIsCurrentWithThreads()",1,6,6
"org.apache.lucene.index.TestIndexWriterOnDiskFull.FailTwiceDuringMerge.eval(MockDirectoryWrapper)",5,6,9
"org.apache.lucene.index.TestIndexWriterOnDiskFull.addDoc(IndexWriter)",1,1,1
"org.apache.lucene.index.TestIndexWriterOnDiskFull.addDocWithIndex(IndexWriter,int)",1,1,1
"org.apache.lucene.index.TestIndexWriterOnDiskFull.testAddDocumentOnDiskFull()",4,18,19
"org.apache.lucene.index.TestIndexWriterOnDiskFull.testAddIndexOnDiskFull()",5,38,51
"org.apache.lucene.index.TestIndexWriterOnDiskFull.testCorruptionAfterDiskFullDuringMerge()",1,2,3
"org.apache.lucene.index.TestIndexWriterOnDiskFull.testImmediateDiskFull()",1,1,4
"org.apache.lucene.index.TestIndexWriterOnJRECrash.checkIndexes(File)",5,5,6
"org.apache.lucene.index.TestIndexWriterOnJRECrash.crashJRE()",1,2,2
"org.apache.lucene.index.TestIndexWriterOnJRECrash.forkTest()",1,5,5
"org.apache.lucene.index.TestIndexWriterOnJRECrash.setUp()",1,1,1
"org.apache.lucene.index.TestIndexWriterOnJRECrash.testNRTThreads()",4,6,8
"org.apache.lucene.index.TestIndexWriterReader.AddDirectoriesThreads.AddDirectoriesThreads(int,IndexWriter)",1,3,3
"org.apache.lucene.index.TestIndexWriterReader.AddDirectoriesThreads.close(boolean)",1,2,2
"org.apache.lucene.index.TestIndexWriterReader.AddDirectoriesThreads.closeDir()",1,2,2
"org.apache.lucene.index.TestIndexWriterReader.AddDirectoriesThreads.doBody(int,Directory[])",2,2,5
"org.apache.lucene.index.TestIndexWriterReader.AddDirectoriesThreads.handle(Throwable)",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.AddDirectoriesThreads.joinThreads()",2,2,3
"org.apache.lucene.index.TestIndexWriterReader.AddDirectoriesThreads.launchThreads(int)",1,5,6
"org.apache.lucene.index.TestIndexWriterReader.MyWarmer.warm(IndexReader)",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.count(Term,IndexReader)",1,2,2
"org.apache.lucene.index.TestIndexWriterReader.createIndex(Random,Directory,String,boolean)",1,3,5
"org.apache.lucene.index.TestIndexWriterReader.createIndexNoClose(boolean,String,IndexWriter)",1,3,3
"org.apache.lucene.index.TestIndexWriterReader.doTestIndexWriterReopenSegment(boolean)",1,2,2
"org.apache.lucene.index.TestIndexWriterReader.testAddCloseOpen()",2,4,6
"org.apache.lucene.index.TestIndexWriterReader.testAddIndexes()",1,3,3
"org.apache.lucene.index.TestIndexWriterReader.testAddIndexes2()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testAddIndexesAndDoDeletesThreads()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testAfterClose()",1,1,2
"org.apache.lucene.index.TestIndexWriterReader.testAfterCommit()",1,3,3
"org.apache.lucene.index.TestIndexWriterReader.testDeleteFromIndexWriter()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testDeletesNumDocs()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testDuringAddDelete()",2,10,10
"org.apache.lucene.index.TestIndexWriterReader.testDuringAddIndexes()",2,8,9
"org.apache.lucene.index.TestIndexWriterReader.testEmptyIndex()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testForceMergeDeletes()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testIndexWriterReopenSegment()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testIndexWriterReopenSegmentFullMerge()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testIsCurrent()",1,1,1
"org.apache.lucene.index.TestIndexWriterReader.testMergeWarmer()",1,2,2
"org.apache.lucene.index.TestIndexWriterReader.testNoTermsIndex()",1,1,2
"org.apache.lucene.index.TestIndexWriterReader.testReopenAfterNoRealChange()",1,1,2
"org.apache.lucene.index.TestIndexWriterReader.testSegmentWarmer()",1,2,2
"org.apache.lucene.index.TestIndexWriterReader.testUpdateDocument()",1,3,3
"org.apache.lucene.index.TestIndexWriterUnicode.asUnicodeChar(char)",1,1,1
"org.apache.lucene.index.TestIndexWriterUnicode.fillUnicode(char[],char[],int,int)",1,10,15
"org.apache.lucene.index.TestIndexWriterUnicode.getInt(Random,int,int)",1,1,1
"org.apache.lucene.index.TestIndexWriterUnicode.nextInt(int)",1,1,1
"org.apache.lucene.index.TestIndexWriterUnicode.nextInt(int,int)",1,1,1
"org.apache.lucene.index.TestIndexWriterUnicode.termDesc(String)",1,2,2
"org.apache.lucene.index.TestIndexWriterUnicode.testAllUnicodeChars()",1,3,5
"org.apache.lucene.index.TestIndexWriterUnicode.testEmbeddedFFFF()",1,1,1
"org.apache.lucene.index.TestIndexWriterUnicode.testIncrementalUnicodeStrings()",5,7,12
"org.apache.lucene.index.TestIndexWriterUnicode.testInvalidUTF16()",1,3,3
"org.apache.lucene.index.TestIndexWriterUnicode.testRandomUnicodeStrings()",1,5,5
"org.apache.lucene.index.TestIndexWriterWithThreads.DelayedIndexAndCloseRunnable.DelayedIndexAndCloseRunnable(Directory,CountDownLatch)",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.DelayedIndexAndCloseRunnable.run()",1,2,2
"org.apache.lucene.index.TestIndexWriterWithThreads.DelayedIndexAndCloseRunnable.startIndexing()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.FailOnlyInWriteSegment.FailOnlyInWriteSegment(boolean)",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.FailOnlyInWriteSegment.eval(MockDirectoryWrapper)",4,4,6
"org.apache.lucene.index.TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush.FailOnlyOnAbortOrFlush(boolean)",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.FailOnlyOnAbortOrFlush.eval(MockDirectoryWrapper)",3,4,9
"org.apache.lucene.index.TestIndexWriterWithThreads.IndexerThread.IndexerThread(IndexWriter,boolean)",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.IndexerThread.run()",4,9,11
"org.apache.lucene.index.TestIndexWriterWithThreads._testMultipleThreadsFailure(Failure)",1,9,11
"org.apache.lucene.index.TestIndexWriterWithThreads._testSingleThreadFailure(Failure)",1,2,3
"org.apache.lucene.index.TestIndexWriterWithThreads.testCloseWithThreads()",5,9,11
"org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringAbort()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringAbortOnlyOnce()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringAbortWithThreads()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringAbortWithThreadsOnlyOnce()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringWriteSegment()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringWriteSegmentOnlyOnce()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringWriteSegmentWithThreads()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.testIOExceptionDuringWriteSegmentWithThreadsOnlyOnce()",1,1,1
"org.apache.lucene.index.TestIndexWriterWithThreads.testImmediateDiskFullWithThreads()",1,5,7
"org.apache.lucene.index.TestIndexWriterWithThreads.testOpenTwoIndexWritersOnDifferentThreads()",1,1,1
"org.apache.lucene.index.TestIsCurrent.setUp()",1,1,1
"org.apache.lucene.index.TestIsCurrent.tearDown()",1,1,1
"org.apache.lucene.index.TestIsCurrent.testDeleteAllIsCurrent()",1,1,1
"org.apache.lucene.index.TestIsCurrent.testDeleteByTermIsCurrent()",1,1,1
"org.apache.lucene.index.TestLazyBug.afterClass()",1,1,1
"org.apache.lucene.index.TestLazyBug.beforeClass()",1,1,1
"org.apache.lucene.index.TestLazyBug.doTest(int[])",3,6,6
"org.apache.lucene.index.TestLazyBug.makeIndex()",1,3,4
"org.apache.lucene.index.TestLazyBug.testLazyAlsoWorks()",1,1,1
"org.apache.lucene.index.TestLazyBug.testLazyBroken()",1,1,1
"org.apache.lucene.index.TestLazyBug.testLazyWorks()",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeekCountingDirectory.SeekCountingDirectory(Directory)",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeekCountingDirectory.openInput(String)",1,1,2
"org.apache.lucene.index.TestLazyProxSkipping.SeeksCountingStream.SeeksCountingStream(IndexInput)",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeeksCountingStream.clone()",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeeksCountingStream.close()",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeeksCountingStream.getFilePointer()",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeeksCountingStream.length()",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeeksCountingStream.readByte()",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeeksCountingStream.readBytes(byte[],int,int)",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.SeeksCountingStream.seek(long)",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.createIndex(int)",1,2,4
"org.apache.lucene.index.TestLazyProxSkipping.performTest(int)",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.search()",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.testLazySkipping()",1,1,1
"org.apache.lucene.index.TestLazyProxSkipping.testSeek()",1,4,4
"org.apache.lucene.index.TestLongPostings.doTestLongPostingsNoPositions(IndexOptions)",12,27,33
"org.apache.lucene.index.TestLongPostings.getRandomTerm(String)",6,5,8
"org.apache.lucene.index.TestLongPostings.testLongPostings()",12,33,39
"org.apache.lucene.index.TestLongPostings.testLongPostingsNoPositions()",1,1,1
"org.apache.lucene.index.TestMaxTermFrequency.TestSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.index.TestMaxTermFrequency.TestSimilarity.decodeNormValue(byte)",1,1,1
"org.apache.lucene.index.TestMaxTermFrequency.TestSimilarity.encodeNormValue(float)",1,1,1
"org.apache.lucene.index.TestMaxTermFrequency.addValue()",1,3,3
"org.apache.lucene.index.TestMaxTermFrequency.setUp()",1,2,2
"org.apache.lucene.index.TestMaxTermFrequency.tearDown()",1,1,1
"org.apache.lucene.index.TestMaxTermFrequency.test()",1,2,2
"org.apache.lucene.index.TestMultiLevelSkipList.CountingStream.CountingStream(IndexInput)",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.CountingStream.clone()",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.CountingStream.close()",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.CountingStream.getFilePointer()",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.CountingStream.length()",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.CountingStream.readByte()",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.CountingStream.readBytes(byte[],int,int)",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.CountingStream.seek(long)",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.PayloadAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.PayloadFilter.PayloadFilter(TokenStream)",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.PayloadFilter.incrementToken()",1,2,2
"org.apache.lucene.index.TestMultiLevelSkipList.checkSkipTo(TermPositions,int,int)",1,2,2
"org.apache.lucene.index.TestMultiLevelSkipList.setUp()",1,1,1
"org.apache.lucene.index.TestMultiLevelSkipList.testSimpleSkip()",1,3,3
"org.apache.lucene.index.TestMultiPassIndexSplitter.setUp()",1,3,3
"org.apache.lucene.index.TestMultiPassIndexSplitter.tearDown()",1,1,1
"org.apache.lucene.index.TestMultiPassIndexSplitter.testSplitRR()",1,2,2
"org.apache.lucene.index.TestMultiPassIndexSplitter.testSplitSeq()",1,2,2
"org.apache.lucene.index.TestMultiReader.createDirectory()",1,1,1
"org.apache.lucene.index.TestMultiReader.openReader()",1,1,1
"org.apache.lucene.index.TestNRTReaderWithThreads.RunThread.RunThread(int,IndexWriter)",1,1,1
"org.apache.lucene.index.TestNRTReaderWithThreads.RunThread.run()",1,5,5
"org.apache.lucene.index.TestNRTReaderWithThreads.testIndexing()",1,6,7
"org.apache.lucene.index.TestNRTThreads.doSearching(ExecutorService,long)",1,12,12
"org.apache.lucene.index.TestNRTThreads.getCurrentSearcher()",1,1,1
"org.apache.lucene.index.TestNRTThreads.getFinalSearcher()",1,2,2
"org.apache.lucene.index.TestNRTThreads.releaseSearcher(IndexSearcher)",1,2,2
"org.apache.lucene.index.TestNRTThreads.testNRTThreads()",1,1,1
"org.apache.lucene.index.TestNeverDelete.testIndexing()",1,9,11
"org.apache.lucene.index.TestNewestSegment.testNewestSegment()",1,1,1
"org.apache.lucene.index.TestNoDeletionPolicy.testAllCommitsRemain()",1,2,2
"org.apache.lucene.index.TestNoDeletionPolicy.testFinalSingleton()",1,1,1
"org.apache.lucene.index.TestNoDeletionPolicy.testMethodsOverridden()",1,3,3
"org.apache.lucene.index.TestNoDeletionPolicy.testNoDeletionPolicy()",1,1,1
"org.apache.lucene.index.TestNoMergePolicy.testCompoundFiles()",1,1,1
"org.apache.lucene.index.TestNoMergePolicy.testFinalSingleton()",1,1,1
"org.apache.lucene.index.TestNoMergePolicy.testMethodsOverridden()",1,3,3
"org.apache.lucene.index.TestNoMergePolicy.testNoMergePolicy()",1,1,1
"org.apache.lucene.index.TestNoMergeScheduler.testFinalSingleton()",1,1,1
"org.apache.lucene.index.TestNoMergeScheduler.testMethodsOverridden()",1,3,3
"org.apache.lucene.index.TestNoMergeScheduler.testNoMergeScheduler()",1,1,1
"org.apache.lucene.index.TestNorms.CustomNormEncodingSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.index.TestNorms.CustomNormEncodingSimilarity.decodeNormValue(byte)",1,1,1
"org.apache.lucene.index.TestNorms.CustomNormEncodingSimilarity.encodeNormValue(float)",1,1,1
"org.apache.lucene.index.TestNorms.SimilarityOne.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.index.TestNorms.addDocs(Random,Directory,int,boolean)",1,2,2
"org.apache.lucene.index.TestNorms.createIndex(Random,Directory)",1,1,1
"org.apache.lucene.index.TestNorms.doTestNorms(Random,Directory)",1,2,2
"org.apache.lucene.index.TestNorms.modifyNormsForF1(Directory)",1,2,2
"org.apache.lucene.index.TestNorms.newDoc()",1,2,2
"org.apache.lucene.index.TestNorms.nextNorm()",3,2,4
"org.apache.lucene.index.TestNorms.setUp()",1,1,1
"org.apache.lucene.index.TestNorms.testCustomEncoder()",1,4,4
"org.apache.lucene.index.TestNorms.testNorms()",1,1,1
"org.apache.lucene.index.TestNorms.verifyIndex(Directory)",1,3,4
"org.apache.lucene.index.TestOmitPositions.assertNoPrx(Directory)",1,2,2
"org.apache.lucene.index.TestOmitPositions.testBasic()",1,4,4
"org.apache.lucene.index.TestOmitPositions.testNoPrxFile()",1,3,3
"org.apache.lucene.index.TestOmitPositions.testPositions()",1,1,1
"org.apache.lucene.index.TestOmitTf.CountingHitCollector.CountingHitCollector()",1,1,1
"org.apache.lucene.index.TestOmitTf.CountingHitCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.index.TestOmitTf.CountingHitCollector.collect(int)",1,1,1
"org.apache.lucene.index.TestOmitTf.CountingHitCollector.getCount()",1,1,1
"org.apache.lucene.index.TestOmitTf.CountingHitCollector.getSum()",1,1,1
"org.apache.lucene.index.TestOmitTf.CountingHitCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.index.TestOmitTf.CountingHitCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.index.TestOmitTf.SimpleSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.index.TestOmitTf.SimpleSimilarity.coord(int,int)",1,1,1
"org.apache.lucene.index.TestOmitTf.SimpleSimilarity.idf(int,int)",1,1,1
"org.apache.lucene.index.TestOmitTf.SimpleSimilarity.idfExplain(Collection<Term>,Searcher)",1,1,1
"org.apache.lucene.index.TestOmitTf.SimpleSimilarity.queryNorm(float)",1,1,1
"org.apache.lucene.index.TestOmitTf.SimpleSimilarity.sloppyFreq(int)",1,1,1
"org.apache.lucene.index.TestOmitTf.SimpleSimilarity.tf(float)",1,1,1
"org.apache.lucene.index.TestOmitTf.assertNoPrx(Directory)",1,2,2
"org.apache.lucene.index.TestOmitTf.testBasic()",1,2,5
"org.apache.lucene.index.TestOmitTf.testMixedMerge()",1,3,4
"org.apache.lucene.index.TestOmitTf.testMixedRAM()",1,3,3
"org.apache.lucene.index.TestOmitTf.testNoPrxFile()",1,3,3
"org.apache.lucene.index.TestOmitTf.testOmitTermFreqAndPositions()",1,1,1
"org.apache.lucene.index.TestPKIndexSplitter.checkContents(IndexReader,String)",1,3,3
"org.apache.lucene.index.TestPKIndexSplitter.checkSplitting(Directory,Term,int,int)",1,1,1
"org.apache.lucene.index.TestPKIndexSplitter.createDocument(int,String,int,NumberFormat)",1,2,2
"org.apache.lucene.index.TestPKIndexSplitter.testSplit()",1,5,5
"org.apache.lucene.index.TestParallelReader.getDir1(Random)",1,1,1
"org.apache.lucene.index.TestParallelReader.getDir2(Random)",1,1,1
"org.apache.lucene.index.TestParallelReader.parallel(Random)",1,1,1
"org.apache.lucene.index.TestParallelReader.queryTest(Query)",1,2,2
"org.apache.lucene.index.TestParallelReader.setUp()",1,1,1
"org.apache.lucene.index.TestParallelReader.single(Random)",1,1,1
"org.apache.lucene.index.TestParallelReader.tearDown()",1,1,1
"org.apache.lucene.index.TestParallelReader.testAllTermDocs()",1,2,2
"org.apache.lucene.index.TestParallelReader.testDocument()",1,1,1
"org.apache.lucene.index.TestParallelReader.testFieldNames()",1,1,1
"org.apache.lucene.index.TestParallelReader.testIncompatibleIndexes()",1,1,2
"org.apache.lucene.index.TestParallelReader.testIsCurrent()",1,1,1
"org.apache.lucene.index.TestParallelReader.testQueries()",1,1,1
"org.apache.lucene.index.TestParallelReaderEmptyIndex.testEmptyIndex()",1,1,1
"org.apache.lucene.index.TestParallelReaderEmptyIndex.testEmptyIndexWithVectors()",1,1,1
"org.apache.lucene.index.TestParallelTermEnum.setUp()",1,1,1
"org.apache.lucene.index.TestParallelTermEnum.tearDown()",1,1,1
"org.apache.lucene.index.TestParallelTermEnum.test1()",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.DeletePayloadProcessor.payloadLength()",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.DeletePayloadProcessor.processPayload(byte[],int,int)",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.PayloadTokenStream.PayloadTokenStream(String)",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.PayloadTokenStream.incrementToken()",2,1,2
"org.apache.lucene.index.TestPayloadProcessorProvider.PayloadTokenStream.reset()",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.PerDirPayloadProcessor.PerDirPayloadProcessor(Map<Directory, DirPayloadProcessor>)",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.PerDirPayloadProcessor.PerDirPayloadProcessor(Map<Directory, ReaderPayloadProcessor>)",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.PerDirPayloadProcessor.getDirProcessor(Directory)",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.PerDirPayloadProcessor.getReaderProcessor(IndexReader)",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.PerTermPayloadProcessor.getProcessor(Term)",2,2,3
"org.apache.lucene.index.TestPayloadProcessorProvider.doTest(Random,boolean,int,boolean)",1,6,7
"org.apache.lucene.index.TestPayloadProcessorProvider.getConfig(Random)",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.populateDirs(Random,Directory[],boolean)",1,2,2
"org.apache.lucene.index.TestPayloadProcessorProvider.populateDocs(Random,Directory,boolean)",1,3,4
"org.apache.lucene.index.TestPayloadProcessorProvider.testAddIndexes()",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.testAddIndexesIntoExisting()",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.testRegularMerges()",1,1,1
"org.apache.lucene.index.TestPayloadProcessorProvider.verifyPayloadExists(Directory,Term,int)",1,3,3
"org.apache.lucene.index.TestPayloads.ByteArrayPool.ByteArrayPool(int,int)",1,2,2
"org.apache.lucene.index.TestPayloads.ByteArrayPool.get()",1,1,1
"org.apache.lucene.index.TestPayloads.ByteArrayPool.release(byte[])",1,1,1
"org.apache.lucene.index.TestPayloads.ByteArrayPool.size()",1,1,1
"org.apache.lucene.index.TestPayloads.PayloadAnalyzer.PayloadData.PayloadData(int,byte[],int,int)",1,1,1
"org.apache.lucene.index.TestPayloads.PayloadAnalyzer.setPayloadData(String,byte[],int,int)",1,1,1
"org.apache.lucene.index.TestPayloads.PayloadAnalyzer.setPayloadData(String,int,byte[],int,int)",1,1,1
"org.apache.lucene.index.TestPayloads.PayloadAnalyzer.tokenStream(String,Reader)",1,1,3
"org.apache.lucene.index.TestPayloads.PayloadFilter.PayloadFilter(TokenStream,byte[],int,int)",1,1,1
"org.apache.lucene.index.TestPayloads.PayloadFilter.incrementToken()",1,3,3
"org.apache.lucene.index.TestPayloads.PayloadFilter.reset()",1,1,1
"org.apache.lucene.index.TestPayloads.PoolingPayloadTokenStream.PoolingPayloadTokenStream(ByteArrayPool)",1,1,2
"org.apache.lucene.index.TestPayloads.PoolingPayloadTokenStream.close()",1,1,1
"org.apache.lucene.index.TestPayloads.PoolingPayloadTokenStream.incrementToken()",2,1,2
"org.apache.lucene.index.TestPayloads.assertByteArrayEquals(byte[],byte[])",1,4,4
"org.apache.lucene.index.TestPayloads.generateRandomData(byte[])",1,1,2
"org.apache.lucene.index.TestPayloads.generateRandomData(int)",1,1,1
"org.apache.lucene.index.TestPayloads.generateTerms(String,int)",1,3,3
"org.apache.lucene.index.TestPayloads.performTest(Directory)",1,11,12
"org.apache.lucene.index.TestPayloads.testAcrossFields()",1,1,1
"org.apache.lucene.index.TestPayloads.testPayload()",1,4,6
"org.apache.lucene.index.TestPayloads.testPayloadFieldBit()",1,1,1
"org.apache.lucene.index.TestPayloads.testPayloadsEncoding()",1,1,1
"org.apache.lucene.index.TestPayloads.testThreadSafety()",1,8,8
"org.apache.lucene.index.TestPerSegmentDeletes.RangeMergePolicy.RangeMergePolicy(boolean)",1,1,1
"org.apache.lucene.index.TestPerSegmentDeletes.RangeMergePolicy.close()",1,1,1
"org.apache.lucene.index.TestPerSegmentDeletes.RangeMergePolicy.findForcedDeletesMerges(SegmentInfos)",1,1,1
"org.apache.lucene.index.TestPerSegmentDeletes.RangeMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",1,1,1
"org.apache.lucene.index.TestPerSegmentDeletes.RangeMergePolicy.findMerges(SegmentInfos)",2,2,2
"org.apache.lucene.index.TestPerSegmentDeletes.RangeMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",1,1,1
"org.apache.lucene.index.TestPerSegmentDeletes.part2(IndexWriter,RangeMergePolicy)",1,3,3
"org.apache.lucene.index.TestPerSegmentDeletes.segThere(SegmentInfo,SegmentInfos)",3,2,3
"org.apache.lucene.index.TestPerSegmentDeletes.testDeletes1()",1,4,5
"org.apache.lucene.index.TestPerSegmentDeletes.toArray(TermDocs)",2,3,3
"org.apache.lucene.index.TestPerSegmentDeletes.toDocsArray(Term,IndexReader)",1,1,1
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.getDeletionPolicy()",1,2,2
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.getDeletionPolicy(Map<String, String>)",1,3,3
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.setUp()",1,1,1
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.tearDown()",1,2,2
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.testExistingSnapshots()",1,1,1
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.testIllegalSnapshotId()",1,1,1
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.testInvalidSnapshotInfos()",1,1,2
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.testNoSnapshotInfos()",1,1,1
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.testSnapshotRelease()",1,1,1
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.testStaticRead()",1,1,2
"org.apache.lucene.index.TestPersistentSnapshotDeletionPolicy.testTooManySnapshotInfos()",1,1,1
"org.apache.lucene.index.TestPositionBasedTermVectorMapper.setUp()",1,1,4
"org.apache.lucene.index.TestPositionBasedTermVectorMapper.test()",1,4,4
"org.apache.lucene.index.TestPrefixCodedTerms.testEmpty()",1,1,1
"org.apache.lucene.index.TestPrefixCodedTerms.testMergeEmpty()",1,1,1
"org.apache.lucene.index.TestPrefixCodedTerms.testMergeOne()",1,1,1
"org.apache.lucene.index.TestPrefixCodedTerms.testMergeRandom()",1,6,6
"org.apache.lucene.index.TestPrefixCodedTerms.testOne()",1,1,1
"org.apache.lucene.index.TestPrefixCodedTerms.testRandom()",1,4,4
"org.apache.lucene.index.TestPruningReader.assertTD(IndexReader,Term,int[])",1,2,2
"org.apache.lucene.index.TestPruningReader.assertTDCount(IndexReader,Term,int)",1,1,2
"org.apache.lucene.index.TestPruningReader.initFullScores()",1,1,1
"org.apache.lucene.index.TestPruningReader.initPrunedScores()",1,1,1
"org.apache.lucene.index.TestPruningReader.printDocScores(Map<Term, ScoreDoc[]>,IndexReader,Term)",1,2,2
"org.apache.lucene.index.TestPruningReader.setUp()",1,1,1
"org.apache.lucene.index.TestPruningReader.testCarmelTopKPruning()",1,1,1
"org.apache.lucene.index.TestPruningReader.testRIDFPruning()",1,1,1
"org.apache.lucene.index.TestPruningReader.testRemoveFields()",1,2,2
"org.apache.lucene.index.TestPruningReader.testTfPruning()",1,1,1
"org.apache.lucene.index.TestPruningReader.testThresholds()",1,1,1
"org.apache.lucene.index.TestPruningReader.validateDocScores(Map<Term, ScoreDoc[]>,IndexReader,Term,boolean,boolean)",1,4,4
"org.apache.lucene.index.TestPruningReader.validateDocScores(Map<Term, ScoreDoc[]>,IndexReader,boolean,boolean)",1,1,1
"org.apache.lucene.index.TestRandomStoredFields.testRandomStoredFields()",1,17,17
"org.apache.lucene.index.TestReaderClosed.setUp()",1,2,2
"org.apache.lucene.index.TestReaderClosed.tearDown()",1,1,1
"org.apache.lucene.index.TestReaderClosed.test()",1,1,2
"org.apache.lucene.index.TestRollback.testRollbackIntegrityWithBufferFlush()",1,3,3
"org.apache.lucene.index.TestRollingUpdates.IndexingThread.IndexingThread(LineFileDocs,IndexWriter,int)",1,1,1
"org.apache.lucene.index.TestRollingUpdates.IndexingThread.run()",1,6,7
"org.apache.lucene.index.TestRollingUpdates.testRollingUpdates()",1,8,10
"org.apache.lucene.index.TestRollingUpdates.testUpdateSameDoc()",1,4,4
"org.apache.lucene.index.TestSameTokenSamePosition.test()",1,1,1
"org.apache.lucene.index.TestSameTokenSamePosition.testMoreDocs()",1,2,2
"org.apache.lucene.index.TestSegmentInfo.testFilesConcurrency()",1,5,6
"org.apache.lucene.index.TestSegmentInfo.testSizeInBytesCache()",1,1,1
"org.apache.lucene.index.TestSegmentMerger.setUp()",1,1,1
"org.apache.lucene.index.TestSegmentMerger.tearDown()",1,1,1
"org.apache.lucene.index.TestSegmentMerger.test()",1,1,1
"org.apache.lucene.index.TestSegmentMerger.testInvalidFilesToCreateCompound()",1,1,3
"org.apache.lucene.index.TestSegmentMerger.testMerge()",1,2,4
"org.apache.lucene.index.TestSegmentReader.checkNorms(IndexReader)",1,5,5
"org.apache.lucene.index.TestSegmentReader.setUp()",1,1,1
"org.apache.lucene.index.TestSegmentReader.tearDown()",1,1,1
"org.apache.lucene.index.TestSegmentReader.test()",1,1,1
"org.apache.lucene.index.TestSegmentReader.testDelete()",1,1,1
"org.apache.lucene.index.TestSegmentReader.testDocument()",1,2,2
"org.apache.lucene.index.TestSegmentReader.testGetFieldNameVariations()",1,9,9
"org.apache.lucene.index.TestSegmentReader.testNorms()",1,1,1
"org.apache.lucene.index.TestSegmentReader.testTermVectors()",1,2,5
"org.apache.lucene.index.TestSegmentReader.testTerms()",1,2,2
"org.apache.lucene.index.TestSegmentTermDocs.addDoc(IndexWriter,String)",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.setUp()",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.tearDown()",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.test()",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.testBadSeek()",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.testBadSeek(int)",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.testIndexDivisor()",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.testSkipTo()",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.testSkipTo(int)",1,4,4
"org.apache.lucene.index.TestSegmentTermDocs.testTermDocs()",1,1,1
"org.apache.lucene.index.TestSegmentTermDocs.testTermDocs(int)",1,2,2
"org.apache.lucene.index.TestSegmentTermEnum.addDoc(IndexWriter,String)",1,1,1
"org.apache.lucene.index.TestSegmentTermEnum.setUp()",1,1,1
"org.apache.lucene.index.TestSegmentTermEnum.tearDown()",1,1,1
"org.apache.lucene.index.TestSegmentTermEnum.testPrevTermAtEnd()",1,1,1
"org.apache.lucene.index.TestSegmentTermEnum.testTermEnum()",1,2,2
"org.apache.lucene.index.TestSegmentTermEnum.verifyDocFreq()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.addDocs(IndexWriter,int)",1,2,2
"org.apache.lucene.index.TestSizeBoundedForceMerge.newWriterConfig()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testAllSegmentsLarge()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testAllSegmentsSmall()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testByteSizeLimit()",1,2,3
"org.apache.lucene.index.TestSizeBoundedForceMerge.testFirstSegmentTooLarge()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testLastSegmentTooLarge()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testMergeFactor()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testNumDocsLimit()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testOneLargeOneSmall()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testSingleMergeableSegment()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testSingleMergeableTooLargeSegment()",1,1,1
"org.apache.lucene.index.TestSizeBoundedForceMerge.testSingleNonMergeableSegment()",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.assertSnapshotExists(Directory,SnapshotDeletionPolicy,int)",1,2,2
"org.apache.lucene.index.TestSnapshotDeletionPolicy.backupIndex(Directory,SnapshotDeletionPolicy)",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.checkMaxDoc(IndexCommit,int)",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.checkSnapshotExists(Directory,IndexCommit)",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.copyFiles(Directory,IndexCommit)",1,2,2
"org.apache.lucene.index.TestSnapshotDeletionPolicy.getConfig(Random,IndexDeletionPolicy)",1,2,2
"org.apache.lucene.index.TestSnapshotDeletionPolicy.getDeletionPolicy()",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.getDeletionPolicy(Map<String, String>)",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.prepareIndexAndSnapshots(SnapshotDeletionPolicy,IndexWriter,int,String)",1,2,2
"org.apache.lucene.index.TestSnapshotDeletionPolicy.readFile(Directory,String)",1,2,3
"org.apache.lucene.index.TestSnapshotDeletionPolicy.runTest(Random,Directory)",4,6,8
"org.apache.lucene.index.TestSnapshotDeletionPolicy.testBasicSnapshots()",1,2,3
"org.apache.lucene.index.TestSnapshotDeletionPolicy.testExistingSnapshots()",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.testMissingCommits()",1,1,2
"org.apache.lucene.index.TestSnapshotDeletionPolicy.testMultiThreadedSnapshotting()",1,5,6
"org.apache.lucene.index.TestSnapshotDeletionPolicy.testReleaseSnapshot()",1,1,2
"org.apache.lucene.index.TestSnapshotDeletionPolicy.testRollbackToOldSnapshot()",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.testSnapshotDeletionPolicy()",1,1,1
"org.apache.lucene.index.TestSnapshotDeletionPolicy.testSnapshotLastCommitTwice()",1,1,1
"org.apache.lucene.index.TestStressAdvance.testOne(TermDocs,List<Integer>)",1,13,13
"org.apache.lucene.index.TestStressAdvance.testStressAdvance()",1,9,9
"org.apache.lucene.index.TestStressIndexing.IndexerThread.IndexerThread(IndexWriter,TimedThread[])",1,1,1
"org.apache.lucene.index.TestStressIndexing.IndexerThread.doWork()",1,3,3
"org.apache.lucene.index.TestStressIndexing.SearcherThread.SearcherThread(Directory,TimedThread[])",1,1,1
"org.apache.lucene.index.TestStressIndexing.SearcherThread.doWork()",1,2,2
"org.apache.lucene.index.TestStressIndexing.TimedThread.TimedThread(TimedThread[])",1,1,1
"org.apache.lucene.index.TestStressIndexing.TimedThread.anyErrors()",3,1,4
"org.apache.lucene.index.TestStressIndexing.TimedThread.run()",3,3,4
"org.apache.lucene.index.TestStressIndexing.runStressTest(Directory,MergeScheduler)",1,3,3
"org.apache.lucene.index.TestStressIndexing.testStressIndexAndSearching()",1,1,1
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.addUTF8Token(int)",1,10,11
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.deleteByQuery()",1,2,2
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.deleteDoc()",1,2,2
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.getIdString()",1,1,1
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.getString(int)",2,4,4
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.getUTF8String(int)",1,2,2
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.indexDoc()",3,7,13
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.nextInt(int)",1,1,1
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.nextInt(int,int)",1,1,1
"org.apache.lucene.index.TestStressIndexing2.IndexingThread.run()",1,5,5
"org.apache.lucene.index.TestStressIndexing2.MockIndexWriter.MockIndexWriter(Directory,IndexWriterConfig)",1,1,1
"org.apache.lucene.index.TestStressIndexing2.MockIndexWriter.testPoint(String)",1,2,2
"org.apache.lucene.index.TestStressIndexing2.indexRandom(int,int,int,Directory,int,boolean)",1,6,8
"org.apache.lucene.index.TestStressIndexing2.indexRandomIWReader(int,int,int,Directory)",1,4,6
"org.apache.lucene.index.TestStressIndexing2.indexSerial(Random,Map<String, Document>,Directory)",1,3,3
"org.apache.lucene.index.TestStressIndexing2.printDocs(IndexReader)",1,4,4
"org.apache.lucene.index.TestStressIndexing2.testMultiConfig()",1,6,6
"org.apache.lucene.index.TestStressIndexing2.testRandom()",1,1,1
"org.apache.lucene.index.TestStressIndexing2.testRandomIWReader()",1,1,1
"org.apache.lucene.index.TestStressIndexing2.verifyEquals(Directory,Directory,String)",1,1,1
"org.apache.lucene.index.TestStressIndexing2.verifyEquals(Document,Document)",1,3,3
"org.apache.lucene.index.TestStressIndexing2.verifyEquals(IndexReader,IndexReader,String)",14,20,28
"org.apache.lucene.index.TestStressIndexing2.verifyEquals(Random,IndexReader,Directory,String)",1,1,1
"org.apache.lucene.index.TestStressIndexing2.verifyEquals(TermFreqVector[],TermFreqVector[])",2,12,13
"org.apache.lucene.index.TestStressNRT.initModel(int)",1,2,2
"org.apache.lucene.index.TestStressNRT.test()",5,43,51
"org.apache.lucene.index.TestTerm.testEquals()",1,1,1
"org.apache.lucene.index.TestTermInfosReaderIndex.afterClass()",1,1,1
"org.apache.lucene.index.TestTermInfosReaderIndex.beforeClass()",1,1,1
"org.apache.lucene.index.TestTermInfosReaderIndex.findTermThatWouldBeAtIndex(SegmentTermEnum,int)",1,2,2
"org.apache.lucene.index.TestTermInfosReaderIndex.getText()",1,1,1
"org.apache.lucene.index.TestTermInfosReaderIndex.populate(Directory)",1,3,3
"org.apache.lucene.index.TestTermInfosReaderIndex.populate(Directory,IndexWriterConfig)",1,3,3
"org.apache.lucene.index.TestTermInfosReaderIndex.sample(IndexReader,int)",1,3,3
"org.apache.lucene.index.TestTermInfosReaderIndex.setUp()",1,1,1
"org.apache.lucene.index.TestTermInfosReaderIndex.tearDown()",1,1,1
"org.apache.lucene.index.TestTermInfosReaderIndex.testCompareTo()",1,2,2
"org.apache.lucene.index.TestTermInfosReaderIndex.testRandomSearchPerformance()",1,2,2
"org.apache.lucene.index.TestTermInfosReaderIndex.testSeekEnum()",1,1,1
"org.apache.lucene.index.TestTermVectorAccessor.test()",1,2,2
"org.apache.lucene.index.TestTermVectorsReader.DocNumAwareMapper.DocNumAwareMapper()",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.DocNumAwareMapper.getDocumentNumber()",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.DocNumAwareMapper.map(String,int,TermVectorOffsetInfo[],int[])",2,1,2
"org.apache.lucene.index.TestTermVectorsReader.DocNumAwareMapper.setDocumentNumber(int)",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.DocNumAwareMapper.setExpectations(String,int,boolean,boolean)",2,1,2
"org.apache.lucene.index.TestTermVectorsReader.MyAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.MyTokenStream.MyTokenStream()",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.MyTokenStream.incrementToken()",2,3,3
"org.apache.lucene.index.TestTermVectorsReader.MyTokenStream.reset()",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.MyTokenizer.MyTokenizer(Reader)",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.MyTokenizer.incrementToken()",2,3,3
"org.apache.lucene.index.TestTermVectorsReader.MyTokenizer.reset()",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.TestToken.compareTo(TestToken)",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.setUp()",1,5,11
"org.apache.lucene.index.TestTermVectorsReader.tearDown()",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.test()",1,1,1
"org.apache.lucene.index.TestTermVectorsReader.testBadParams()",1,2,4
"org.apache.lucene.index.TestTermVectorsReader.testMapper()",1,11,11
"org.apache.lucene.index.TestTermVectorsReader.testOffsetReader()",1,4,4
"org.apache.lucene.index.TestTermVectorsReader.testPositionReader()",1,5,5
"org.apache.lucene.index.TestTermVectorsReader.testReader()",1,3,3
"org.apache.lucene.index.TestTermVectorsWriter.testDoubleOffsetCounting()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testDoubleOffsetCounting2()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testEndOffsetPositionCharAnalyzer()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testEndOffsetPositionStandard()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testEndOffsetPositionStandardEmptyField()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testEndOffsetPositionStandardEmptyField2()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testEndOffsetPositionStopFilter()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testEndOffsetPositionWithCachingTokenFilter()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testEndOffsetPositionWithTeeSinkTokenFilter()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testNoTermVectorAfterTermVector()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testNoTermVectorAfterTermVectorMerge()",1,1,1
"org.apache.lucene.index.TestTermVectorsWriter.testTermVectorCorruption()",1,3,3
"org.apache.lucene.index.TestTermVectorsWriter.testTermVectorCorruption2()",1,2,2
"org.apache.lucene.index.TestTermVectorsWriter.testTermVectorCorruption3()",1,4,4
"org.apache.lucene.index.TestTermdocPerf.addDocs(Random,Directory,int,String,String,int,float)",1,2,2
"org.apache.lucene.index.TestTermdocPerf.doTest(int,int,int,float)",1,5,5
"org.apache.lucene.index.TestTermdocPerf.testTermDocPerf()",1,1,1
"org.apache.lucene.index.TestTermsEnum.close()",1,1,1
"org.apache.lucene.index.TestTermsEnum.docFreq(IndexReader,String)",1,1,1
"org.apache.lucene.index.TestTermsEnum.getNonExistTerm(BytesRef[])",3,2,3
"org.apache.lucene.index.TestTermsEnum.getRandomString()",1,1,1
"org.apache.lucene.index.TestTermsEnum.makeIndex(String...)",1,3,4
"org.apache.lucene.index.TestTermsEnum.test()",3,21,22
"org.apache.lucene.index.TestTermsEnum.testEasy()",1,1,1
"org.apache.lucene.index.TestTermsEnum.testFloorBlocks()",1,1,2
"org.apache.lucene.index.TestTermsEnum.testRandomSeeks(IndexReader,String...)",6,23,24
"org.apache.lucene.index.TestTermsEnum.testRandomTerms()",5,11,12
"org.apache.lucene.index.TestTermsEnum.testZeroTerms()",1,3,4
"org.apache.lucene.index.TestThreadedForceMerge.runTest(Random,Directory)",1,10,10
"org.apache.lucene.index.TestThreadedForceMerge.setFailed()",1,1,1
"org.apache.lucene.index.TestThreadedForceMerge.testThreadedForceMerge()",1,1,1
"org.apache.lucene.index.TestTieredMergePolicy.testForceMergeDeletes()",1,4,5
"org.apache.lucene.index.TestTieredMergePolicy.testForceMergeDeletesMaxSegSize()",1,2,2
"org.apache.lucene.index.TestTieredMergePolicy.testPartialMerge()",1,5,6
"org.apache.lucene.index.TestTransactionRollback.DeleteLastCommitPolicy.onCommit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestTransactionRollback.DeleteLastCommitPolicy.onInit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestTransactionRollback.KeepAllDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestTransactionRollback.KeepAllDeletionPolicy.onInit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestTransactionRollback.RollbackDeletionPolicy.RollbackDeletionPolicy(int)",1,1,1
"org.apache.lucene.index.TestTransactionRollback.RollbackDeletionPolicy.onCommit(List<? extends IndexCommit>)",1,1,1
"org.apache.lucene.index.TestTransactionRollback.RollbackDeletionPolicy.onInit(List<? extends IndexCommit>)",1,4,4
"org.apache.lucene.index.TestTransactionRollback.checkExpecteds(BitSet)",1,4,4
"org.apache.lucene.index.TestTransactionRollback.rollBackLast(int)",2,3,5
"org.apache.lucene.index.TestTransactionRollback.setUp()",1,3,3
"org.apache.lucene.index.TestTransactionRollback.tearDown()",1,1,1
"org.apache.lucene.index.TestTransactionRollback.testRepeatedRollBacks()",1,2,2
"org.apache.lucene.index.TestTransactionRollback.testRollbackDeletionPolicy()",1,2,2
"org.apache.lucene.index.TestTransactions.IndexerThread.IndexerThread(Object,Directory,Directory,TimedThread[])",1,1,1
"org.apache.lucene.index.TestTransactions.IndexerThread.doWork()",1,3,3
"org.apache.lucene.index.TestTransactions.IndexerThread.update(IndexWriter)",1,3,3
"org.apache.lucene.index.TestTransactions.RandomFailure.eval(MockDirectoryWrapper)",2,2,3
"org.apache.lucene.index.TestTransactions.SearcherThread.SearcherThread(Object,Directory,Directory,TimedThread[])",1,1,1
"org.apache.lucene.index.TestTransactions.SearcherThread.doWork()",2,2,2
"org.apache.lucene.index.TestTransactions.TimedThread.TimedThread(TimedThread[])",1,1,1
"org.apache.lucene.index.TestTransactions.TimedThread.anyErrors()",3,1,4
"org.apache.lucene.index.TestTransactions.TimedThread.run()",3,3,4
"org.apache.lucene.index.TestTransactions.initIndex(Directory)",1,2,2
"org.apache.lucene.index.TestTransactions.testTransactions()",1,3,3
"org.apache.lucene.index.TestUniqueTermCount.TestSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.index.TestUniqueTermCount.TestSimilarity.encodeNormValue(float)",1,1,1
"org.apache.lucene.index.TestUniqueTermCount.addValue()",1,2,2
"org.apache.lucene.index.TestUniqueTermCount.setUp()",1,2,2
"org.apache.lucene.index.TestUniqueTermCount.tearDown()",1,1,1
"org.apache.lucene.index.TestUniqueTermCount.test()",1,2,2
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.SubDocs.SubDocs(String,List<String>)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.addDocument(Term,Document)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.addDocuments(Term,Collection<Document>)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.deleteDocuments(Term)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.doAfterIndexingThreadDone()",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.doAfterWriter(ExecutorService)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.doClose()",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.getDirectory(Directory)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.launchIndexingThreads(LineFileDocs,int,long,Set<String>,Set<String>,List<SubDocs>)",7,36,38
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.releaseSearcher(IndexSearcher)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.runQuery(IndexSearcher,Query)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.runSearchThreads(long)",6,12,14
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.runTest(String)",1,33,34
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.smokeTestSearcher(IndexSearcher)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.updateDocument(Term,Document)",1,1,1
"org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.updateDocuments(Term,Collection<Document>)",1,1,1
"org.apache.lucene.index.TieredMergePolicy.SegmentByteSizeDescending.compare(SegmentInfo,SegmentInfo)",3,3,4
"org.apache.lucene.index.TieredMergePolicy.close()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.findForcedDeletesMerges(SegmentInfos)",2,8,10
"org.apache.lucene.index.TieredMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",3,17,20
"org.apache.lucene.index.TieredMergePolicy.findMerges(SegmentInfos)",11,21,31
"org.apache.lucene.index.TieredMergePolicy.floorSize(long)",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getForceMergeDeletesPctAllowed()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnceExplicit()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getNoCFSRatio()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getReclaimDeletesWeight()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.getUseCompoundFile()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.isMerged(SegmentInfo)",1,5,5
"org.apache.lucene.index.TieredMergePolicy.message(String)",1,2,2
"org.apache.lucene.index.TieredMergePolicy.score(List<SegmentInfo>,boolean,long)",1,3,3
"org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double)",2,1,2
"org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double)",2,1,3
"org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int)",2,1,2
"org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int)",2,1,2
"org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double)",1,1,1
"org.apache.lucene.index.TieredMergePolicy.setNoCFSRatio(double)",2,1,3
"org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double)",2,1,2
"org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double)",2,1,2
"org.apache.lucene.index.TieredMergePolicy.setUseCompoundFile(boolean)",1,1,1
"org.apache.lucene.index.TieredMergePolicy.size(SegmentInfo)",1,1,2
"org.apache.lucene.index.TieredMergePolicy.toString()",1,1,1
"org.apache.lucene.index.TieredMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",1,4,4
"org.apache.lucene.index.TieredMergePolicy.verbose()",1,2,2
"org.apache.lucene.index.UpgradeIndexMergePolicy.UpgradeIndexMergePolicy(MergePolicy)",1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.close()",1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedDeletesMerges(SegmentInfos)",1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",2,11,13
"org.apache.lucene.index.UpgradeIndexMergePolicy.findMerges(SegmentInfos)",1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.message(String)",1,2,2
"org.apache.lucene.index.UpgradeIndexMergePolicy.setIndexWriter(IndexWriter)",1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.shouldUpgradeSegment(SegmentInfo)",1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.toString()",1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.verbose()",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.ArrayIntList(int)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.add(int)",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.add(int,int,int)",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.ensureCapacity(int)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.get(int)",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.size()",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.throwIndex(int)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.toArray(int)",1,2,3
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.toString(int)",1,4,4
"org.apache.lucene.index.memory.MemoryIndex.Info.Info(HashMap<String, ArrayIntList>,int,int,float)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.Info.getBoost()",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.Info.getPositions(String)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.Info.getPositions(int)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.Info.sortTerms()",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndex()",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndex(boolean)",1,1,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.MemoryIndexReader()",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doClose()",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doCommit(Map<String, String>)",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doDelete(int)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doSetNorm(int,String,byte)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doUndeleteAll()",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.docFreq(Term)",1,3,4
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.document(int,FieldSelector)",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getFieldInfos()",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getInfo(String)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getInfo(int)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getSimilarity()",2,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getTermFreqVector(int,String)",3,6,9
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getTermFreqVector(int,String,TermVectorMapper)",2,4,5
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getTermFreqVector(int,TermVectorMapper)",1,3,3
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getTermFreqVectors(int)",1,3,3
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.hasDeletions()",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.isDeleted(int)",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.maxDoc()",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.norms(String)",1,4,7
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.norms(String,byte[],int)",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.numDocs()",1,2,3
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.setSearcher(Searcher)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.termDocs()",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.termPositions()",2,14,16
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.terms()",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.terms(Term)",8,14,21
"org.apache.lucene.index.memory.MemoryIndex.addField(String,String,Analyzer)",4,1,5
"org.apache.lucene.index.memory.MemoryIndex.addField(String,TokenStream)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.addField(String,TokenStream,float)",7,6,14
"org.apache.lucene.index.memory.MemoryIndex.createSearcher()",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.getMemorySize()",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.keywordTokenStream(Collection<T>)",4,1,4
"org.apache.lucene.index.memory.MemoryIndex.numPositions(ArrayIntList)",1,1,1
"org.apache.lucene.index.memory.MemoryIndex.search(Query)",2,1,3
"org.apache.lucene.index.memory.MemoryIndex.sort(HashMap<K, V>)",1,3,3
"org.apache.lucene.index.memory.MemoryIndex.sortFields()",1,2,2
"org.apache.lucene.index.memory.MemoryIndex.toString()",1,3,3
"org.apache.lucene.index.memory.MemoryIndexTest.EmptyMTQ.getEnum(IndexReader)",1,1,1
"org.apache.lucene.index.memory.MemoryIndexTest.EmptyMTQ.getField()",1,1,1
"org.apache.lucene.index.memory.MemoryIndexTest.EmptyMTQ.toString(String)",1,1,1
"org.apache.lucene.index.memory.MemoryIndexTest.assertAgainstRAMDirectory()",1,4,4
"org.apache.lucene.index.memory.MemoryIndexTest.assertAllQueries(MemoryIndex,Directory,Analyzer)",1,2,2
"org.apache.lucene.index.memory.MemoryIndexTest.randomAnalyzer()",4,2,4
"org.apache.lucene.index.memory.MemoryIndexTest.randomTerm()",2,2,2
"org.apache.lucene.index.memory.MemoryIndexTest.readQueries(String)",1,5,5
"org.apache.lucene.index.memory.MemoryIndexTest.setUp()",1,1,1
"org.apache.lucene.index.memory.MemoryIndexTest.testNullPointerException()",1,1,1
"org.apache.lucene.index.memory.MemoryIndexTest.testPassesIfWrapped()",1,1,1
"org.apache.lucene.index.memory.MemoryIndexTest.testRandomQueries()",1,2,2
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ByDocComparator.compare(ScoreDoc,ScoreDoc)",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.CarmelTopKTermPruningPolicy(IndexReader,Map<String, Integer>)",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.CarmelTopKTermPruningPolicy(IndexReader,Map<String, Integer>,int,float,int,Similarity)",1,1,2
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.ThresholdCollector(float)",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.collect(int)",1,2,2
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.initPositionsTerm(TermPositions,Term)",2,2,4
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.pruneAllPositions(TermPositions,Term)",5,3,7
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.pruneSomePositions(int,int[],Term)",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.pruneTermEnum(TermEnum)",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",1,1,1
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.ByDocComparator.compare(ScoreDoc,ScoreDoc)",1,1,1
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.CarmelUniformTermPruningPolicy(IndexReader,Map<String, Integer>,Map<String, Float>,float,Similarity)",1,2,3
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.initPositionsTerm(TermPositions,Term)",1,3,4
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.pruneAllPositions(TermPositions,Term)",4,3,6
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.pruneSomePositions(int,int[],Term)",1,1,1
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.pruneTermEnum(TermEnum)",1,1,1
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",1,1,1
"org.apache.lucene.index.pruning.PruningTool.main(String[])",1,1,1
"org.apache.lucene.index.pruning.PruningTool.run(String[])",21,20,31
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.RIDFTermPruningPolicy(IndexReader,Map<String, Integer>,Map<String, Double>,double)",1,2,2
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.initPositionsTerm(TermPositions,Term)",1,2,2
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.pruneAllPositions(TermPositions,Term)",2,3,4
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.pruneSomePositions(int,int[],Term)",1,1,1
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.pruneTermEnum(TermEnum)",1,1,1
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",1,1,1
"org.apache.lucene.index.pruning.StorePruningPolicy.DelFieldSelector.DelFieldSelector(Map<String, Integer>)",1,1,1
"org.apache.lucene.index.pruning.StorePruningPolicy.DelFieldSelector.accept(String)",3,6,6
"org.apache.lucene.index.pruning.StorePruningPolicy.DelFieldSelector.setParent(FieldSelector)",1,1,1
"org.apache.lucene.index.pruning.StorePruningPolicy.StorePruningPolicy(IndexReader,Map<String, Integer>)",1,4,4
"org.apache.lucene.index.pruning.StorePruningPolicy.getFieldInfos(FieldInfos)",1,3,3
"org.apache.lucene.index.pruning.StorePruningPolicy.pruneDocument(int,FieldSelector)",2,2,2
"org.apache.lucene.index.pruning.TFTermPruningPolicy.TFTermPruningPolicy(IndexReader,Map<String, Integer>,Map<String, Integer>,int)",1,2,2
"org.apache.lucene.index.pruning.TFTermPruningPolicy.initPositionsTerm(TermPositions,Term)",1,3,3
"org.apache.lucene.index.pruning.TFTermPruningPolicy.pruneAllPositions(TermPositions,Term)",2,1,2
"org.apache.lucene.index.pruning.TFTermPruningPolicy.pruneSomePositions(int,int[],Term)",1,1,1
"org.apache.lucene.index.pruning.TFTermPruningPolicy.pruneTermEnum(TermEnum)",3,4,5
"org.apache.lucene.index.pruning.TFTermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",1,4,5
"org.apache.lucene.index.pruning.TermPruningPolicy.TermPruningPolicy(IndexReader,Map<String, Integer>)",1,2,2
"org.apache.lucene.index.pruning.TermPruningPolicy.pruneAllFieldPostings(String)",2,2,3
"org.apache.lucene.index.pruning.TermPruningPolicy.prunePayload(TermPositions,Term)",2,2,3
"org.apache.lucene.index.pruning.TermPruningPolicy.pruneWholeTermVector(int,String)",2,2,3
"org.apache.lucene.messages.MessageImpl.MessageImpl(String)",1,1,1
"org.apache.lucene.messages.MessageImpl.MessageImpl(String,Object...)",1,1,1
"org.apache.lucene.messages.MessageImpl.getArguments()",1,1,1
"org.apache.lucene.messages.MessageImpl.getKey()",1,1,1
"org.apache.lucene.messages.MessageImpl.getLocalizedMessage()",1,1,1
"org.apache.lucene.messages.MessageImpl.getLocalizedMessage(Locale)",1,1,1
"org.apache.lucene.messages.MessageImpl.toString()",1,3,4
"org.apache.lucene.messages.MessagesTestBundle.MessagesTestBundle()",1,1,1
"org.apache.lucene.messages.NLS.NLS()",1,1,1
"org.apache.lucene.messages.NLS.getLocalizedMessage(String)",1,1,1
"org.apache.lucene.messages.NLS.getLocalizedMessage(String,Locale)",2,1,2
"org.apache.lucene.messages.NLS.getLocalizedMessage(String,Locale,Object...)",1,2,2
"org.apache.lucene.messages.NLS.getLocalizedMessage(String,Object...)",1,1,1
"org.apache.lucene.messages.NLS.getResourceBundleObject(String,Locale)",4,3,5
"org.apache.lucene.messages.NLS.initializeMessages(String,Class<? extends NLS>)",1,2,3
"org.apache.lucene.messages.NLS.load(Class<? extends NLS>)",1,2,2
"org.apache.lucene.messages.NLS.loadfieldValue(Field,boolean,Class<? extends NLS>)",2,2,5
"org.apache.lucene.messages.NLS.makeAccessible(Field)",1,2,2
"org.apache.lucene.messages.NLS.validateMessage(String,Class<? extends NLS>)",1,4,5
"org.apache.lucene.messages.TestNLS.testMessageLoading()",1,2,2
"org.apache.lucene.messages.TestNLS.testMessageLoading_ja()",1,1,1
"org.apache.lucene.messages.TestNLS.testMissingMessage()",1,1,1
"org.apache.lucene.messages.TestNLS.testNLSLoading()",1,3,3
"org.apache.lucene.messages.TestNLS.testNLSLoading_ja()",1,1,1
"org.apache.lucene.messages.TestNLS.testNLSLoading_xx_XX()",1,3,3
"org.apache.lucene.misc.GetTermInfo.getTermInfo(Directory,Term)",1,1,1
"org.apache.lucene.misc.GetTermInfo.main(String[])",1,2,2
"org.apache.lucene.misc.GetTermInfo.usage()",1,1,1
"org.apache.lucene.misc.HighFreqTerms.getHighFreqTerms(IndexReader,int,String)",5,7,8
"org.apache.lucene.misc.HighFreqTerms.getTotalTermFreq(IndexReader,Term)",1,2,2
"org.apache.lucene.misc.HighFreqTerms.main(String[])",1,8,10
"org.apache.lucene.misc.HighFreqTerms.sortByTotalTermFreq(IndexReader,TermStats[])",1,2,2
"org.apache.lucene.misc.HighFreqTerms.usage()",1,1,1
"org.apache.lucene.misc.IndexMergeTool.main(String[])",1,3,3
"org.apache.lucene.misc.SweetSpotSimilarity.SweetSpotSimilarity()",1,1,1
"org.apache.lucene.misc.SweetSpotSimilarity.baselineTf(float)",2,2,3
"org.apache.lucene.misc.SweetSpotSimilarity.computeLengthNorm(String,int)",1,4,4
"org.apache.lucene.misc.SweetSpotSimilarity.computeNorm(String,FieldInvertState)",1,3,3
"org.apache.lucene.misc.SweetSpotSimilarity.hyperbolicTf(float)",2,1,3
"org.apache.lucene.misc.SweetSpotSimilarity.setBaselineTfFactors(float,float)",1,1,1
"org.apache.lucene.misc.SweetSpotSimilarity.setHyperbolicTfFactors(float,float,double,float)",1,1,1
"org.apache.lucene.misc.SweetSpotSimilarity.setLengthNormFactors(String,int,int,float,boolean)",1,1,1
"org.apache.lucene.misc.SweetSpotSimilarity.setLengthNormFactors(int,int,float)",1,1,1
"org.apache.lucene.misc.SweetSpotSimilarity.tf(int)",1,1,1
"org.apache.lucene.misc.SweetSpotSimilarityTest.testHyperbolicSweetSpot()",1,2,2
"org.apache.lucene.misc.SweetSpotSimilarityTest.testSweetSpotComputeNorm()",1,11,11
"org.apache.lucene.misc.SweetSpotSimilarityTest.testSweetSpotTf()",1,6,6
"org.apache.lucene.misc.TermInfoWiTFQueue.TermInfoWiTFQueue(int)",1,1,1
"org.apache.lucene.misc.TermInfoWiTFQueue.lessThan(TermStats,TermStats)",1,1,1
"org.apache.lucene.misc.TermStats.TermStats(Term,int)",1,1,1
"org.apache.lucene.misc.TermStats.TermStats(Term,int,long)",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.getContent(int)",1,3,3
"org.apache.lucene.misc.TestHighFreqTerms.getExpecteddocFreq(int)",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.getExpectedtotalTermFreq(int)",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.indexDocs(IndexWriter)",1,4,7
"org.apache.lucene.misc.TestHighFreqTerms.setUpClass()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.tearDownClass()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.testFirstTermHighestDocFreq()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.testFirstTermHighestDocFreqAllFields()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.testFirstTermHighestTotalTermFreq()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.testFirstTermHighestTotalTermFreqDifferentField()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.testGetHighFreqTerms()",1,4,4
"org.apache.lucene.misc.TestHighFreqTerms.testGetTermFreqOrdered()",1,4,4
"org.apache.lucene.misc.TestHighFreqTerms.testGetTotalTermFreq()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.testGetTotalTermFreqBadTerm()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.testNumTerms()",1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.testOrderedByDocFreqDescending()",1,3,3
"org.apache.lucene.misc.TestHighFreqTerms.testOrderedByTermFreqDescending()",1,3,3
"org.apache.lucene.misc.TestLengthNormModifier.setUp()",1,3,3
"org.apache.lucene.misc.TestLengthNormModifier.tearDown()",1,1,1
"org.apache.lucene.misc.TestLengthNormModifier.testFieldWithNoNorm()",1,1,2
"org.apache.lucene.misc.TestLengthNormModifier.testGoodCases()",1,4,4
"org.apache.lucene.misc.TestLengthNormModifier.testMissingField()",1,1,2
"org.apache.lucene.misc.TotalTermFreqComparatorSortDescending.compare(TermStats,TermStats)",3,1,3
"org.apache.lucene.queryParser.FastCharStream.BeginToken()",1,1,1
"org.apache.lucene.queryParser.FastCharStream.Done()",1,2,2
"org.apache.lucene.queryParser.FastCharStream.FastCharStream(Reader)",1,1,1
"org.apache.lucene.queryParser.FastCharStream.GetImage()",1,1,1
"org.apache.lucene.queryParser.FastCharStream.GetSuffix(int)",1,1,1
"org.apache.lucene.queryParser.FastCharStream.backup(int)",1,1,1
"org.apache.lucene.queryParser.FastCharStream.getBeginColumn()",1,1,1
"org.apache.lucene.queryParser.FastCharStream.getBeginLine()",1,1,1
"org.apache.lucene.queryParser.FastCharStream.getColumn()",1,1,1
"org.apache.lucene.queryParser.FastCharStream.getEndColumn()",1,1,1
"org.apache.lucene.queryParser.FastCharStream.getEndLine()",1,1,1
"org.apache.lucene.queryParser.FastCharStream.getLine()",1,1,1
"org.apache.lucene.queryParser.FastCharStream.readChar()",1,2,2
"org.apache.lucene.queryParser.FastCharStream.refill()",2,4,5
"org.apache.lucene.queryParser.MultiFieldQueryParser.MultiFieldQueryParser(Version,String[],Analyzer)",1,1,1
"org.apache.lucene.queryParser.MultiFieldQueryParser.MultiFieldQueryParser(Version,String[],Analyzer,Map<String, Float>)",1,1,1
"org.apache.lucene.queryParser.MultiFieldQueryParser.applySlop(Query,int)",1,3,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.getFieldQuery(String,String,boolean)",3,6,7
"org.apache.lucene.queryParser.MultiFieldQueryParser.getFieldQuery(String,String,int)",3,6,7
"org.apache.lucene.queryParser.MultiFieldQueryParser.getFuzzyQuery(String,String,float)",2,3,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.getPrefixQuery(String,String)",2,3,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.getRangeQuery(String,String,String,boolean)",2,3,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.getWildcardQuery(String,String)",2,3,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.parse(Version,String,String[],Occur[],Analyzer)",2,5,6
"org.apache.lucene.queryParser.MultiFieldQueryParser.parse(Version,String[],String[],Analyzer)",2,5,6
"org.apache.lucene.queryParser.MultiFieldQueryParser.parse(Version,String[],String[],Occur[],Analyzer)",2,5,7
"org.apache.lucene.queryParser.ParseException.ParseException()",1,1,1
"org.apache.lucene.queryParser.ParseException.ParseException(String)",1,1,1
"org.apache.lucene.queryParser.ParseException.ParseException(Token,int[][],String[])",1,1,1
"org.apache.lucene.queryParser.ParseException.add_escapes(String)",4,5,14
"org.apache.lucene.queryParser.ParseException.getMessage()",4,6,10
"org.apache.lucene.queryParser.QueryParser.Clause(String)",6,9,16
"org.apache.lucene.queryParser.QueryParser.Conjunction()",4,5,9
"org.apache.lucene.queryParser.QueryParser.Modifiers()",4,5,10
"org.apache.lucene.queryParser.QueryParser.Query(String)",6,7,10
"org.apache.lucene.queryParser.QueryParser.QueryParser(CharStream)",1,1,3
"org.apache.lucene.queryParser.QueryParser.QueryParser(QueryParserTokenManager)",1,1,3
"org.apache.lucene.queryParser.QueryParser.QueryParser(Version,String,Analyzer)",1,2,3
"org.apache.lucene.queryParser.QueryParser.ReInit(CharStream)",1,1,3
"org.apache.lucene.queryParser.QueryParser.ReInit(QueryParserTokenManager)",1,1,3
"org.apache.lucene.queryParser.QueryParser.Term(String)",22,46,83
"org.apache.lucene.queryParser.QueryParser.TopLevelQuery(String)",2,1,2
"org.apache.lucene.queryParser.QueryParser.addClause(List<BooleanClause>,int,int,Query)",5,11,19
"org.apache.lucene.queryParser.QueryParser.disable_tracing()",1,1,1
"org.apache.lucene.queryParser.QueryParser.discardEscapeChar(String)",3,3,9
"org.apache.lucene.queryParser.QueryParser.enable_tracing()",1,1,1
"org.apache.lucene.queryParser.QueryParser.escape(String)",1,3,20
"org.apache.lucene.queryParser.QueryParser.generateParseException()",1,4,10
"org.apache.lucene.queryParser.QueryParser.getAllowLeadingWildcard()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getAnalyzer()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getAutoGeneratePhraseQueries()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getBooleanQuery(List<BooleanClause>)",1,1,1
"org.apache.lucene.queryParser.QueryParser.getBooleanQuery(List<BooleanClause>,boolean)",2,2,3
"org.apache.lucene.queryParser.QueryParser.getDateResolution(String)",3,1,4
"org.apache.lucene.queryParser.QueryParser.getDefaultOperator()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getEnablePositionIncrements()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getField()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getFieldQuery(String,String)",1,1,1
"org.apache.lucene.queryParser.QueryParser.getFieldQuery(String,String,boolean)",5,22,36
"org.apache.lucene.queryParser.QueryParser.getFieldQuery(String,String,int)",1,4,4
"org.apache.lucene.queryParser.QueryParser.getFuzzyMinSim()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getFuzzyPrefixLength()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getFuzzyQuery(String,String,float)",1,2,2
"org.apache.lucene.queryParser.QueryParser.getLocale()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getLowercaseExpandedTerms()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getMultiTermRewriteMethod()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getNextToken()",1,2,2
"org.apache.lucene.queryParser.QueryParser.getPhraseSlop()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getPrefixQuery(String,String)",2,3,4
"org.apache.lucene.queryParser.QueryParser.getRangeCollator()",1,1,1
"org.apache.lucene.queryParser.QueryParser.getRangeQuery(String,String,String,boolean)",1,7,9
"org.apache.lucene.queryParser.QueryParser.getToken(int)",1,3,3
"org.apache.lucene.queryParser.QueryParser.getWildcardQuery(String,String)",4,6,7
"org.apache.lucene.queryParser.QueryParser.hexToInt(char)",4,1,7
"org.apache.lucene.queryParser.QueryParser.jj_2_1(int)",1,1,2
"org.apache.lucene.queryParser.QueryParser.jj_3R_2()",3,1,3
"org.apache.lucene.queryParser.QueryParser.jj_3R_3()",3,1,3
"org.apache.lucene.queryParser.QueryParser.jj_3_1()",3,2,3
"org.apache.lucene.queryParser.QueryParser.jj_add_error_token(int,int)",6,5,10
"org.apache.lucene.queryParser.QueryParser.jj_consume_token(int)",2,2,7
"org.apache.lucene.queryParser.QueryParser.jj_la1_init_0()",1,1,1
"org.apache.lucene.queryParser.QueryParser.jj_la1_init_1()",1,1,1
"org.apache.lucene.queryParser.QueryParser.jj_ntk()",2,2,2
"org.apache.lucene.queryParser.QueryParser.jj_rescan_token()",2,5,6
"org.apache.lucene.queryParser.QueryParser.jj_save(int,int)",3,1,3
"org.apache.lucene.queryParser.QueryParser.jj_scan_token(int)",3,5,10
"org.apache.lucene.queryParser.QueryParser.main(String[])",1,2,2
"org.apache.lucene.queryParser.QueryParser.newBooleanClause(Query,Occur)",1,1,1
"org.apache.lucene.queryParser.QueryParser.newBooleanQuery(boolean)",1,1,1
"org.apache.lucene.queryParser.QueryParser.newFuzzyQuery(Term,float,int)",1,1,1
"org.apache.lucene.queryParser.QueryParser.newMatchAllDocsQuery()",1,1,1
"org.apache.lucene.queryParser.QueryParser.newMultiPhraseQuery()",1,1,1
"org.apache.lucene.queryParser.QueryParser.newPhraseQuery()",1,1,1
"org.apache.lucene.queryParser.QueryParser.newPrefixQuery(Term)",1,1,1
"org.apache.lucene.queryParser.QueryParser.newRangeQuery(String,String,String,boolean)",1,1,1
"org.apache.lucene.queryParser.QueryParser.newTermQuery(Term)",1,1,1
"org.apache.lucene.queryParser.QueryParser.newWildcardQuery(Term)",1,1,1
"org.apache.lucene.queryParser.QueryParser.parse(String)",1,5,5
"org.apache.lucene.queryParser.QueryParser.setAllowLeadingWildcard(boolean)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setAutoGeneratePhraseQueries(boolean)",2,1,3
"org.apache.lucene.queryParser.QueryParser.setDateResolution(Resolution)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setDateResolution(String,Resolution)",2,1,3
"org.apache.lucene.queryParser.QueryParser.setDefaultOperator(Operator)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setEnablePositionIncrements(boolean)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setFuzzyMinSim(float)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setFuzzyPrefixLength(int)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setLocale(Locale)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setLowercaseExpandedTerms(boolean)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setMultiTermRewriteMethod(RewriteMethod)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setPhraseSlop(int)",1,1,1
"org.apache.lucene.queryParser.QueryParser.setRangeCollator(Collator)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.QPTestAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.QPTestFilter.QPTestFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.QPTestFilter.incrementToken()",5,4,5
"org.apache.lucene.queryParser.QueryParserTestBase.QPTestParser.QPTestParser(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.QPTestParser.getFuzzyQuery(String,String,float)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.QPTestParser.getWildcardQuery(String,String)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.addDateDoc(String,int,int,int,int,int,int,IndexWriter)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.assertDateRangeQueryEquals(QueryParser,String,String,String,Date,Resolution)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.assertEscapedQueryEquals(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.assertHits(int,String,IndexSearcher)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.assertParseException(String)",1,1,2
"org.apache.lucene.queryParser.QueryParserTestBase.assertQueryEquals(QueryParser,String,String,String)",1,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.assertQueryEquals(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.assertQueryEqualsDOA(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.assertWildcardQueryEquals(String,String)",1,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.assertWildcardQueryEquals(String,boolean,String)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.assertWildcardQueryEquals(String,boolean,String,boolean)",1,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.escapeDateString(String)",2,1,2
"org.apache.lucene.queryParser.QueryParserTestBase.getDate(Date,Resolution)",2,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.getDate(String,Resolution)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.getLegacyDate(String)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.getLocalizedDate(int,int,int)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.getQuery(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.getQueryDOA(String,Analyzer)",1,1,2
"org.apache.lucene.queryParser.QueryParserTestBase.setUp()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.tearDown()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testAutoGeneratePhraseQueriesOn()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testBooleanQuery()",1,1,2
"org.apache.lucene.queryParser.QueryParserTestBase.testBoost()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testCJK()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testCJKBoostedPhrase()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testCJKBoostedTerm()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testCJKPhrase()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testCJKSloppyPhrase()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testCJKTerm()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testCustomQueryParserFuzzy()",1,1,2
"org.apache.lucene.queryParser.QueryParserTestBase.testCustomQueryParserWildcard()",1,1,2
"org.apache.lucene.queryParser.QueryParserTestBase.testDateRange()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testEscaped()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testException()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testFarsiRangeCollating()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testLeadingWildcardType()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testLegacyDateRange()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testLocalDateFormat()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testMatchAllDocs()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testNumber()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testPositionIncrement()",1,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.testPositionIncrements()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testPrecedence()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testProtectedCtors()",1,1,3
"org.apache.lucene.queryParser.QueryParserTestBase.testPunct()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testQPA()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testQueryStringEscaping()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testRange()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testSimple()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testSimpleDAO()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testSlop()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testStarParsing()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testStopwords()",1,2,2
"org.apache.lucene.queryParser.QueryParserTestBase.testTabNewlineCarriageReturn()",1,1,1
"org.apache.lucene.queryParser.QueryParserTestBase.testWildcard()",1,1,3
"org.apache.lucene.queryParser.QueryParserTokenManager.QueryParserTokenManager(CharStream)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.QueryParserTokenManager(CharStream,int)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.ReInit(CharStream)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.ReInit(CharStream,int)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.ReInitRounds()",1,1,2
"org.apache.lucene.queryParser.QueryParserTokenManager.SwitchTo(int)",2,1,3
"org.apache.lucene.queryParser.QueryParserTokenManager.getNextToken()",5,11,18
"org.apache.lucene.queryParser.QueryParserTokenManager.jjAddStates(int,int)",1,1,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCanMove_0(int,int,int,long,long)",3,2,3
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCanMove_1(int,int,int,long,long)",4,2,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCanMove_2(int,int,int,long,long)",5,2,5
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCheckNAdd(int)",1,1,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCheckNAddStates(int,int)",1,2,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCheckNAddTwoStates(int,int)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjFillToken()",1,2,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveNfa_0(int,int)",6,9,22
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveNfa_1(int,int)",6,19,48
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveNfa_2(int,int)",6,19,48
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveNfa_3(int,int)",6,35,179
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa0_0()",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa0_1()",4,4,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa0_2()",4,4,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa0_3()",11,11,11
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa1_1(long)",3,4,5
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa1_2(long)",3,4,5
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfaWithStates_1(int,int,int)",1,1,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfaWithStates_2(int,int,int)",1,1,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfaWithStates_3(int,int,int)",1,1,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfa_1(int,long)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfa_2(int,long)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfa_3(int,long)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStopAtPos(int,int)",1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStopStringLiteralDfa_1(int,long)",4,2,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStopStringLiteralDfa_2(int,long)",4,2,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStopStringLiteralDfa_3(int,long)",2,2,2
"org.apache.lucene.queryParser.QueryParserTokenManager.setDebugStream(PrintStream)",1,1,1
"org.apache.lucene.queryParser.TestAttributes.testAttributes()",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.DumbQueryParser.DumbQueryParser(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.DumbQueryParser.getFieldQuery(String,String,boolean)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.DumbQueryParser.getSuperFieldQuery(String,String,boolean)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.DumbQueryWrapper.DumbQueryWrapper(Query)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.DumbQueryWrapper.toString(String)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.MultiAnalyzer.MultiAnalyzer()",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.MultiAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.PosIncrementAnalyzer.PosIncrementAnalyzer()",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.PosIncrementAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.TestFilter.TestFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.TestFilter.incrementToken()",5,3,5
"org.apache.lucene.queryParser.TestMultiAnalyzer.TestFilter.reset()",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.TestPosIncrementFilter.TestPosIncrementFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.TestPosIncrementFilter.incrementToken()",4,4,4
"org.apache.lucene.queryParser.TestMultiAnalyzer.testMultiAnalyzer()",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.testMultiAnalyzerWithSubclassOfQueryParser()",1,1,1
"org.apache.lucene.queryParser.TestMultiAnalyzer.testPosIncrementAnalyzer()",1,1,1
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.AnalyzerReturningNull.AnalyzerReturningNull()",1,1,1
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.AnalyzerReturningNull.EmptyTokenStream.incrementToken()",1,1,1
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.AnalyzerReturningNull.tokenStream(String,Reader)",2,2,2
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.assertStopQueryEquals(String,String)",1,1,1
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testAnalyzerReturningNull()",1,1,1
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testBoostsSimple()",1,1,1
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testSimple()",1,1,1
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testStaticMethod1()",1,1,2
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testStaticMethod2()",1,1,2
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testStaticMethod2Old()",1,1,2
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testStaticMethod3()",1,1,2
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testStaticMethod3Old()",1,1,2
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testStopWordSearching()",1,1,1
"org.apache.lucene.queryParser.TestMultiFieldQueryParser.testStopwordsParsing()",1,1,1
"org.apache.lucene.queryParser.TestQueryParser.getParser(Analyzer)",1,1,2
"org.apache.lucene.queryParser.Token.Token()",1,1,1
"org.apache.lucene.queryParser.Token.Token(int)",1,1,1
"org.apache.lucene.queryParser.Token.Token(int,String)",1,1,1
"org.apache.lucene.queryParser.Token.getValue()",1,1,1
"org.apache.lucene.queryParser.Token.newToken(int)",1,1,1
"org.apache.lucene.queryParser.Token.newToken(int,String)",2,2,2
"org.apache.lucene.queryParser.Token.toString()",1,1,1
"org.apache.lucene.queryParser.TokenMgrError.LexicalError(boolean,int,int,int,String,char)",1,2,2
"org.apache.lucene.queryParser.TokenMgrError.TokenMgrError()",1,1,1
"org.apache.lucene.queryParser.TokenMgrError.TokenMgrError(String,int)",1,1,1
"org.apache.lucene.queryParser.TokenMgrError.TokenMgrError(boolean,int,int,int,String,char,int)",1,1,1
"org.apache.lucene.queryParser.TokenMgrError.addEscapes(String)",4,5,14
"org.apache.lucene.queryParser.TokenMgrError.getMessage()",1,1,1
"org.apache.lucene.queryParser.analyzing.ASCIIAnalyzer.ASCIIAnalyzer()",1,1,1
"org.apache.lucene.queryParser.analyzing.ASCIIAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.AnalyzingQueryParser(Version,String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.getFuzzyQuery(String,String,float)",2,4,6
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.getPrefixQuery(String,String)",4,3,8
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.getRangeQuery(String,String,String,boolean)",7,9,15
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.getWildcardQuery(String,String)",7,17,23
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.parseWithAnalyzingQueryParser(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.setUp()",1,1,1
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.testFuzzyQuery()",1,2,2
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.testPrefixQuery()",1,2,2
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.testRangeQuery()",1,2,2
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.testWildCardQuery()",1,2,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.ComplexPhraseQuery(String,String,int)",1,1,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.addComplexPhraseClause(List<SpanQuery>,BooleanQuery)",5,5,7
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.equals(Object)",11,3,11
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.hashCode()",1,3,3
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.parsePhraseElements(QueryParser)",1,1,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.rewrite(IndexReader)",7,8,12
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.toString(String)",1,1,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQueryParser(Version,String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.checkPhraseClauseIsForSameField(String)",2,1,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.getFieldQuery(String,String,int)",1,1,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.getFuzzyQuery(String,String,float)",1,2,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.getRangeQuery(String,String,String,boolean)",1,2,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.getWildcardQuery(String,String)",1,2,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.newRangeQuery(String,String,String,boolean)",2,2,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.newTermQuery(Term)",2,2,3
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.parse(String)",2,3,3
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.DocData.DocData(String,String)",1,1,1
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.checkBadQuery(String)",1,1,2
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.checkMatches(String,String)",1,4,4
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.setUp()",1,2,2
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.tearDown()",1,1,1
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.testComplexPhrases()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeError.QueryNodeError(Message)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeError.QueryNodeError(Message,Throwable)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeError.QueryNodeError(Throwable)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeError.getMessageObject()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.QueryNodeException(Message)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.QueryNodeException(Message,Throwable)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.QueryNodeException(Throwable)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.getLocalizedMessage()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.getLocalizedMessage(Locale)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.getMessage()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.getMessageObject()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.toString()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.QueryNodeParseException(Message)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.QueryNodeParseException(Message,Throwable)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.QueryNodeParseException(Throwable)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.getBeginColumn()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.getBeginLine()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.getErrorToken()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.getQuery()",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setBeginColumn(int)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setBeginLine(int)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setErrorToken(String)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setNonLocalizedMessage(Message)",1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setQuery(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.QueryParserHelper(QueryConfigHandler,SyntaxParser,QueryNodeProcessor,QueryBuilder)",1,2,2
"org.apache.lucene.queryParser.core.QueryParserHelper.getQueryBuilder()",1,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.getQueryConfigHandler()",1,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.getQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.getSyntaxParser()",1,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.parse(String,String)",1,2,2
"org.apache.lucene.queryParser.core.QueryParserHelper.setQueryBuilder(QueryBuilder)",2,1,2
"org.apache.lucene.queryParser.core.QueryParserHelper.setQueryConfigHandler(QueryConfigHandler)",1,2,2
"org.apache.lucene.queryParser.core.QueryParserHelper.setQueryNodeProcessor(QueryNodeProcessor)",1,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.setSyntaxParser(SyntaxParser)",2,1,2
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.QueryTreeBuilder()",1,1,1
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.getBuilder(QueryNode)",6,7,10
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.getQueryBuilder(Class<?>)",2,2,2
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.process(QueryNode)",1,5,5
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.processNode(QueryNode,QueryBuilder)",2,3,3
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.setBuilder(CharSequence,QueryBuilder)",1,1,1
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.setBuilder(Class<? extends QueryNode>,QueryBuilder)",1,1,2
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.setBuilder(String,QueryBuilder)",1,1,2
"org.apache.lucene.queryParser.core.builders.TestQueryTreeBuilder.DummyBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.builders.TestQueryTreeBuilder.testSetFieldBuilder()",1,1,1
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.AbstractQueryConfig()",1,1,1
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.addAttribute(Class<A>)",2,3,3
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.get(ConfigurationKey<T>)",2,1,2
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.get(ConfigurationKey<T>,T)",3,2,3
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.has(ConfigurationKey<T>)",2,1,2
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.set(ConfigurationKey<T>,T)",2,2,3
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.unset(ConfigurationKey<T>)",2,1,2
"org.apache.lucene.queryParser.core.config.ConfigurationKey.ConfigurationKey()",1,1,1
"org.apache.lucene.queryParser.core.config.ConfigurationKey.newInstance()",1,1,1
"org.apache.lucene.queryParser.core.config.FieldConfig.FieldConfig(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.config.FieldConfig.FieldConfig(String)",2,1,2
"org.apache.lucene.queryParser.core.config.FieldConfig.getField()",1,1,1
"org.apache.lucene.queryParser.core.config.FieldConfig.getFieldName()",1,1,1
"org.apache.lucene.queryParser.core.config.FieldConfig.toString()",1,1,1
"org.apache.lucene.queryParser.core.config.QueryConfigHandler.addFieldConfigListener(FieldConfigListener)",1,1,1
"org.apache.lucene.queryParser.core.config.QueryConfigHandler.getFieldConfig(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.config.QueryConfigHandler.getFieldConfig(String)",1,2,2
"org.apache.lucene.queryParser.core.messages.QueryParserMessages.QueryParserMessages()",1,1,1
"org.apache.lucene.queryParser.core.nodes.AndQueryNode.AndQueryNode(List<QueryNode>)",2,2,3
"org.apache.lucene.queryParser.core.nodes.AndQueryNode.toQueryString(EscapeQuerySyntax)",3,6,7
"org.apache.lucene.queryParser.core.nodes.AndQueryNode.toString()",2,3,4
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.AnyQueryNode(List<QueryNode>,CharSequence,int)",1,5,6
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.getField()",1,1,1
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.getFieldAsString()",2,2,2
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.getMinimumMatchingElements()",1,1,1
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.setField(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.toQueryString(EscapeQuerySyntax)",2,5,5
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.toString()",2,3,4
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode.BooleanQueryNode(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode.toQueryString(EscapeQuerySyntax)",3,6,7
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode.toString()",2,3,4
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.BoostQueryNode(QueryNode,float)",2,1,2
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.getChild()",2,2,3
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.getValue()",1,1,1
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.getValueString()",2,2,2
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.toQueryString(EscapeQuerySyntax)",2,1,2
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode.DeletedQueryNode()",1,1,1
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode.toQueryString(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.FieldQueryNode(CharSequence,CharSequence,int,int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getBegin()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getEnd()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getField()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getFieldAsString()",2,2,2
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getPositionIncrement()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getTermEscapeQuoted(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getTermEscaped(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getText()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getTextAsString()",2,2,2
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getValue()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setBegin(int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setEnd(int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setField(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setPositionIncrement(int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setText(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setValue(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.toQueryString(EscapeQuerySyntax)",2,2,2
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.FuzzyQueryNode(CharSequence,CharSequence,float,int,int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.getPrefixLength()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.getSimilarity()",1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.setPrefixLength(int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.setSimilarity(float)",1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.toQueryString(EscapeQuerySyntax)",2,2,2
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.GroupQueryNode(QueryNode)",2,1,2
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.getChild()",1,1,1
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.setChild(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.toQueryString(EscapeQuerySyntax)",2,1,2
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode.MatchAllDocsQueryNode()",1,1,1
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode.toQueryString(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.MatchNoDocsQueryNode.MatchNoDocsQueryNode()",1,1,1
"org.apache.lucene.queryParser.core.nodes.MatchNoDocsQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.Modifier.toDigitString()",4,2,4
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.Modifier.toLargeString()",4,2,4
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.Modifier.toString()",4,2,4
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.ModifierQueryNode(QueryNode,Modifier)",2,1,2
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.getChild()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.getModifier()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.setChild(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.toQueryString(EscapeQuerySyntax)",3,3,5
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode.NoTokenFoundQueryNode()",1,1,1
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode.toQueryString(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.OpaqueQueryNode(CharSequence,CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.getSchema()",1,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.getValue()",1,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.toQueryString(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.OrQueryNode.OrQueryNode(List<QueryNode>)",2,2,3
"org.apache.lucene.queryParser.core.nodes.OrQueryNode.toQueryString(EscapeQuerySyntax)",3,6,7
"org.apache.lucene.queryParser.core.nodes.OrQueryNode.toString()",2,3,4
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.ParametricQueryNode(CharSequence,CompareOperator,CharSequence,int,int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.getOperand()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.getOperator()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.toQueryString(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.ParametricRangeQueryNode(ParametricQueryNode,ParametricQueryNode)",4,5,8
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.getField()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.getLowerBound()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.getUpperBound()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.isLowerInclusive()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.isUpperInclusive()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.setField(CharSequence)",1,4,4
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.toQueryString(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.PathQueryNode(List<QueryText>)",2,1,2
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.QueryText(CharSequence,int,int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.clone()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.getBegin()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.getEnd()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.getValue()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.cloneTree()",1,3,3
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getFirstPathElement()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getPathElement(int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getPathElements()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getPathElements(int)",1,2,3
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getPathString()",1,2,2
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.setPathElements(List<QueryText>)",1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.toQueryString(EscapeQuerySyntax)",1,2,2
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.PhraseSlopQueryNode(QueryNode,int)",2,1,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.getChild()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.getField()",2,2,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.getValue()",1,1,1
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.getValueString()",2,2,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.setField(CharSequence)",1,2,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.toQueryString(EscapeQuerySyntax)",2,1,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityQueryNode(List<QueryNode>,CharSequence,Type,boolean)",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityQueryNode(List<QueryNode>,CharSequence,Type,int,boolean)",3,1,3
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityType.ProximityType(Type)",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityType.ProximityType(Type,int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.clearFields(List<QueryNode>,CharSequence)",2,4,5
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.getDistance()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.getField()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.getFieldAsString()",2,2,2
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.getProximityType()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.isInOrder()",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.setField(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.toQueryString(EscapeQuerySyntax)",2,5,7
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.toString()",2,4,5
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.add(List<QueryNode>)",2,4,4
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.add(QueryNode)",2,4,4
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.allocate()",1,2,2
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.clone()",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.cloneTree()",1,3,3
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.containsTag(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.containsTag(String)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getChildren()",2,2,3
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getParent()",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getTag(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getTag(String)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getTagMap()",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getTags()",1,2,2
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.isDefaultField(CharSequence)",4,1,4
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.isLeaf()",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.isRoot()",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.set(List<QueryNode>)",2,5,5
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.setLeaf(boolean)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.setParent(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.setTag(CharSequence,Object)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.setTag(String,Object)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.unsetTag(CharSequence)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.unsetTag(String)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode.QuotedFieldQueryNode(CharSequence,CharSequence,int,int)",1,1,1
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode.toQueryString(EscapeQuerySyntax)",2,2,2
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.SlopQueryNode(QueryNode,int)",2,1,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.getChild()",1,1,1
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.getField()",2,2,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.getValue()",1,1,1
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.getValueString()",2,2,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.setField(CharSequence)",1,2,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.toQueryString(EscapeQuerySyntax)",2,1,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.core.nodes.TestQueryNode.testAddChildren()",1,1,1
"org.apache.lucene.queryParser.core.nodes.TestQueryNode.testTags()",1,1,1
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.TokenizedPhraseQueryNode()",1,1,1
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.getField()",2,3,3
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.setField(CharSequence)",1,4,4
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.toQueryString(EscapeQuerySyntax)",2,3,4
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.toString()",2,3,4
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor.NoChildOptimizationQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor.postProcessNode(QueryNode)",5,3,9
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.QueryNodeProcessorImpl()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.QueryNodeProcessorImpl(QueryConfigHandler)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.allocateChildrenList()",3,4,4
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.getQueryConfigHandler()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.process(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.processChildren(QueryNode)",4,4,5
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.processIteration(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.setQueryConfigHandler(QueryConfigHandler)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.QueryNodeProcessorPipeline()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.QueryNodeProcessorPipeline(QueryConfigHandler)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.add(QueryNodeProcessor)",1,2,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.add(int,QueryNodeProcessor)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.addAll(Collection<? extends QueryNodeProcessor>)",1,2,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.addAll(int,Collection<? extends QueryNodeProcessor>)",1,2,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.addProcessor(QueryNodeProcessor)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.clear()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.contains(Object)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.containsAll(Collection<?>)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.get(int)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.getQueryConfigHandler()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.indexOf(Object)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.isEmpty()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.iterator()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.lastIndexOf(Object)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.listIterator()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.listIterator(int)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.process(QueryNode)",1,2,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.remove(Object)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.remove(int)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.removeAll(Collection<?>)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.retainAll(Collection<?>)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.set(int,QueryNodeProcessor)",1,2,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.setQueryConfigHandler(QueryConfigHandler)",1,2,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.size()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.subList(int,int)",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.toArray()",1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.toArray(T[])",1,1,1
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.RemoveDeletedQueryNodesProcessor()",1,1,1
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.postProcessNode(QueryNode)",6,5,7
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.process(QueryNode)",2,1,3
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.setChildrenOrder(List<QueryNode>)",1,3,3
"org.apache.lucene.queryParser.core.util.QueryNodeOperation.QueryNodeOperation()",1,1,1
"org.apache.lucene.queryParser.core.util.QueryNodeOperation.logicalAnd(QueryNode,QueryNode)",4,2,12
"org.apache.lucene.queryParser.core.util.StringUtils.toString(Object)",2,2,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.UnescapedCharSequence(CharSequence)",1,2,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.UnescapedCharSequence(UnescapedCharSequence)",1,1,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.UnescapedCharSequence(char[],boolean[],int,int)",1,1,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.charAt(int)",1,1,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.length()",1,1,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.subSequence(int,int)",1,1,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.toLowerCase(CharSequence)",2,2,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.toString()",1,1,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.toStringEscaped()",1,4,4
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.toStringEscaped(char[])",5,5,6
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.wasEscaped(CharSequence,int)",2,1,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.wasEscaped(int)",1,1,1
"org.apache.lucene.queryParser.ext.ExtendableQueryParser.ExtendableQueryParser(Version,String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.ext.ExtendableQueryParser.ExtendableQueryParser(Version,String,Analyzer,Extensions)",1,1,1
"org.apache.lucene.queryParser.ext.ExtendableQueryParser.getExtensionFieldDelimiter()",1,1,1
"org.apache.lucene.queryParser.ext.ExtendableQueryParser.getFieldQuery(String,String,boolean)",2,2,2
"org.apache.lucene.queryParser.ext.ExtensionQuery.ExtensionQuery(QueryParser,String,String)",1,1,1
"org.apache.lucene.queryParser.ext.ExtensionQuery.getField()",1,1,1
"org.apache.lucene.queryParser.ext.ExtensionQuery.getRawQueryString()",1,1,1
"org.apache.lucene.queryParser.ext.ExtensionQuery.getTopLevelParser()",1,1,1
"org.apache.lucene.queryParser.ext.ExtensionStub.parse(ExtensionQuery)",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.Extensions()",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.Extensions(char)",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.Pair.Pair(Cur,Cud)",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.add(String,ParserExtension)",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.buildExtensionField(String)",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.buildExtensionField(String,String)",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.escapeExtensionField(String)",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.getExtension(String)",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.getExtensionFieldDelimiter()",1,1,1
"org.apache.lucene.queryParser.ext.Extensions.splitExtensionField(String,String)",2,2,3
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.getParser(Analyzer)",1,1,1
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.getParser(Analyzer,Extensions)",1,1,3
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.newExtensions(char)",1,1,1
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.testExtDefaultField()",1,2,2
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.testExtField()",1,2,2
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.testExtFieldUnqoted()",1,2,2
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.testUnescapedExtDelimiter()",1,1,2
"org.apache.lucene.queryParser.ext.TestExtensions.setUp()",1,1,1
"org.apache.lucene.queryParser.ext.TestExtensions.testAddGetExtension()",1,1,1
"org.apache.lucene.queryParser.ext.TestExtensions.testBuildExtensionField()",1,1,1
"org.apache.lucene.queryParser.ext.TestExtensions.testEscapeExtension()",1,1,2
"org.apache.lucene.queryParser.ext.TestExtensions.testGetExtDelimiter()",1,1,1
"org.apache.lucene.queryParser.ext.TestExtensions.testSplitExtensionField()",1,1,1
"org.apache.lucene.queryParser.precedence.PrecedenceQueryParser.PrecedenceQueryParser()",1,1,1
"org.apache.lucene.queryParser.precedence.PrecedenceQueryParser.PrecedenceQueryParser(Analyzer)",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestFilter.QPTestFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestFilter.incrementToken()",5,4,5
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestFilter.reset()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertDateRangeQueryEquals(PrecedenceQueryParser,String,String,String,Date,Resolution)",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertQueryEquals(PrecedenceQueryParser,String,String,String)",1,2,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertQueryEquals(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertQueryEqualsDOA(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertWildcardQueryEquals(String,String)",1,2,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertWildcardQueryEquals(String,boolean,String)",1,2,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.escapeDateString(String)",2,1,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getDate(Date,Resolution)",2,2,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getDate(String)",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getDate(String,Resolution)",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getLocalizedDate(int,int,int,boolean)",1,2,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getParser(Analyzer)",1,1,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getQuery(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getQueryDOA(String,Analyzer)",1,1,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.setUp()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.tearDown()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testBooleanQuery()",1,1,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testBoost()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testDateRange()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testEscaped()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testException()",1,1,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testNOT()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testNumber()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testPrecedence()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testPunct()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testQPA()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testRange()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testSimple()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testSimpleDAO()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testSlop()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testTabNewlineCarriageReturn()",1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testWildcard()",1,1,2
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.BooleanModifiersQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.applyModifier(QueryNode,Modifier)",3,3,3
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.postProcessNode(QueryNode)",1,5,7
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.process(QueryNode)",2,1,2
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.precedence.processors.PrecedenceQueryNodeProcessorPipeline.PrecedenceQueryNodeProcessorPipeline(QueryConfigHandler)",1,3,3
"org.apache.lucene.queryParser.spans.SpanOrQueryNodeBuilder.build(QueryNode)",1,2,2
"org.apache.lucene.queryParser.spans.SpanTermQueryNodeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.spans.SpansQueryConfigHandler.SpansQueryConfigHandler()",1,1,1
"org.apache.lucene.queryParser.spans.SpansQueryConfigHandler.getFieldConfig(String)",1,1,1
"org.apache.lucene.queryParser.spans.SpansQueryTreeBuilder.SpansQueryTreeBuilder()",1,1,1
"org.apache.lucene.queryParser.spans.SpansQueryTreeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.spans.SpansValidatorQueryNodeProcessor.postProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.spans.SpansValidatorQueryNodeProcessor.preProcessNode(QueryNode)",2,2,4
"org.apache.lucene.queryParser.spans.SpansValidatorQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.TestSpanQueryParser()",1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.getSpanQuery(CharSequence)",1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.getSpanQuery(String,CharSequence)",1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.setUp()",1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.testOrSpans()",1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.testQueryValidator()",1,1,8
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.testTermSpans()",1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.testUniqueField()",1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParserSimpleSample.testBasicDemo()",1,3,3
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.UniqueFieldAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.copyTo(AttributeImpl)",2,2,2
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.equals(Object)",2,2,2
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.getUniqueField()",1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.setUniqueField(CharSequence)",1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldQueryNodeProcessor.postProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldQueryNodeProcessor.preProcessNode(QueryNode)",4,2,4
"org.apache.lucene.queryParser.spans.UniqueFieldQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.MultiFieldQueryParserWrapper(String[],Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.MultiFieldQueryParserWrapper(String[],Analyzer,Map<String, Float>)",1,1,1
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.parse(String,String[],Occur[],Analyzer)",2,5,6
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.parse(String[],String[],Analyzer)",2,5,6
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.parse(String[],String[],Occur[],Analyzer)",2,5,7
"org.apache.lucene.queryParser.standard.QueryParserUtil.escape(String)",1,3,20
"org.apache.lucene.queryParser.standard.QueryParserUtil.parse(String,String[],Occur[],Analyzer)",2,5,6
"org.apache.lucene.queryParser.standard.QueryParserUtil.parse(String[],String[],Analyzer)",2,5,6
"org.apache.lucene.queryParser.standard.QueryParserUtil.parse(String[],String[],Occur[],Analyzer)",2,5,7
"org.apache.lucene.queryParser.standard.QueryParserWrapper.QueryParserWrapper(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.escape(String)",1,3,20
"org.apache.lucene.queryParser.standard.QueryParserWrapper.generateParseException()",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getAllowLeadingWildcard()",2,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getAnalyzer()",2,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getBooleanQuery(List<BooleanClause>,boolean)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getDateResolution(String)",3,3,3
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getDefaultOperator()",2,2,3
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getEnablePositionIncrements()",2,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getField()",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFieldQuery(String,String)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFieldQuery(String,String,boolean)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFieldQuery(String,String,int)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFuzzyMinSim()",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFuzzyPrefixLength()",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFuzzyQuery(String,String,float)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getLocale()",2,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getLowercaseExpandedTerms()",2,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getMultiTermRewriteMethod()",2,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getPhraseSlop()",2,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getPrefixQuery(String,String)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getQueryConfigHandler()",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getQueryParserHelper()",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getQueryProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getRangeCollator()",2,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getRangeQuery(String,String,String,boolean)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getUseOldRangeQuery()",2,1,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getWildcardQuery(String,String)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.parse(String)",1,1,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setAllowLeadingWildcard(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setDateResolution(Resolution)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setDateResolution(String,Resolution)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setDefaultOperator(Operator)",1,1,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setEnablePositionIncrements(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setFuzzyMinSim(float)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setFuzzyPrefixLength(int)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setLocale(Locale)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setLowercaseExpandedTerms(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setMultiTermRewriteMethod(RewriteMethod)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setPhraseSlop(int)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setQueryBuilder(StandardQueryBuilder)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setQueryConfig(StandardQueryConfigHandler)",1,2,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setQueryProcessor(QueryNodeProcessor)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setRangeCollator(Collator)",1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setUseOldRangeQuery(boolean)",1,2,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.StandardQueryParser()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.StandardQueryParser(Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getAllowLeadingWildcard()",2,1,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getDateResolution()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getDateResolutionMap()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getDefaultOperator()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getEnablePositionIncrements()",2,1,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getFieldsBoost()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getFuzzyMinSim()",2,2,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getFuzzyPrefixLength()",2,2,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getLocale()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getLowercaseExpandedTerms()",2,1,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getMultiFields(CharSequence[])",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getMultiTermRewriteMethod()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getNumericConfigMap()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getPhraseSlop()",2,1,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getRangeCollator()",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.parse(String,String)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setAllowLeadingWildcard(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setAnalyzer(Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDateResolution(Map<CharSequence, Resolution>)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDateResolution(Resolution)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDateResolutionMap(Map<CharSequence, Resolution>)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDefaultOperator(Operator)",1,1,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDefaultPhraseSlop(int)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setEnablePositionIncrements(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setFieldsBoost(Map<String, Float>)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setFuzzyMinSim(float)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setFuzzyPrefixLength(int)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setLocale(Locale)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setLowercaseExpandedTerms(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setMultiFields(CharSequence[])",1,1,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.setMultiTermRewriteMethod(RewriteMethod)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setNumericConfigMap(Map<String, NumericConfig>)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setPhraseSlop(int)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setRangeCollator(Collator)",1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.toString()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.MultiAnalyzer.MultiAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.MultiAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.PosIncrementAnalyzer.PosIncrementAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.PosIncrementAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestFilter.TestFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestFilter.incrementToken()",5,3,5
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestFilter.reset()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestPosIncrementFilter.TestPosIncrementFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestPosIncrementFilter.incrementToken()",4,4,4
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.testMultiAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.testPosIncrementAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.MultiAnalyzer.MultiAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.MultiAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.PosIncrementAnalyzer.PosIncrementAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.PosIncrementAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestFilter.TestFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestFilter.incrementToken()",5,3,5
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestPosIncrementFilter.TestPosIncrementFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestPosIncrementFilter.incrementToken()",4,4,4
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.testMultiAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.testPosIncrementAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.AnalyzerReturningNull.AnalyzerReturningNull()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.AnalyzerReturningNull.EmptyTokenStream.incrementToken()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.AnalyzerReturningNull.tokenStream(String,Reader)",2,2,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.assertStopQueryEquals(String,String)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testAnalyzerReturningNull()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testBoostsSimple()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testSimple()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod1()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod2()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod2Old()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod3()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod3Old()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStopWordSearching()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStopwordsParsing()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.AnalyzerReturningNull.AnalyzerReturningNull()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.AnalyzerReturningNull.EmptyTokenStream.incrementToken()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.AnalyzerReturningNull.tokenStream(String,Reader)",2,2,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.assertStopQueryEquals(String,String)",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testAnalyzerReturningNull()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testBoostsSimple()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testSimple()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod1()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod2()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod2Old()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod3()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod3Old()",1,1,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStopWordSearching()",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStopwordsParsing()",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.afterClass()",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.assertOpenRangeQuery(NumberType,String,int)",1,2,2
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.assertRangeQuery(NumberType,NumberType,boolean,boolean,int)",1,4,6
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.assertSimpleQuery(NumberType,int)",1,2,2
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.beforeClass()",1,7,11
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.checkDateFormatSanity(DateFormat,long)",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.getNumberType(NumberType,String)",8,8,10
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.normalizeNumber(Number)",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.numberToString(Number)",1,2,2
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.randomDateStyle(Random)",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.setFieldValues(NumberType,HashMap<String, NumericField>)",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.testExclusiveNumericRange()",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.testInclusiveNumericRange()",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.testQuery(String,int)",1,4,4
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.testSimpleNumericQuery()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedTokenizer.CannedTokenizer(Reader)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedTokenizer.incrementToken()",2,4,5
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedTokenizer.reset()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestFilter.QPTestFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestFilter.incrementToken()",5,4,5
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestFilter.reset()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParser(Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParserQueryNodeProcessor.postProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParserQueryNodeProcessor.preProcessNode(QueryNode)",2,1,3
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParserQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.addDateDoc(String,int,int,int,int,int,int,IndexWriter)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.assertDateRangeQueryEquals(StandardQueryParser,String,String,String,Date,Resolution)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.assertEscapedQueryEquals(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertHits(int,String,IndexSearcher)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryEquals(StandardQueryParser,String,String,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryEquals(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryEqualsAllowLeadingWildcard(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryEqualsDOA(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryNodeException(String)",1,1,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertWildcardQueryEquals(String,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertWildcardQueryEquals(String,boolean,String)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.assertWildcardQueryEquals(String,boolean,String,boolean)",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.escapeDateString(String)",2,1,2
"org.apache.lucene.queryParser.standard.TestQPHelper.getDate(Date,Resolution)",2,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.getDate(String,Resolution)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getLegacyDate(String)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getLocalizedDate(int,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getParser(Analyzer)",1,1,2
"org.apache.lucene.queryParser.standard.TestQPHelper.getQuery(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getQueryAllowLeadingWildcard(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getQueryDOA(String,Analyzer)",1,1,2
"org.apache.lucene.queryParser.standard.TestQPHelper.setUp()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.tearDown()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testBooleanQuery()",1,1,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testBoost()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJK()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKBoostedPhrase()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKBoostedTerm()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKPhrase()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKSloppyPhrase()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKTerm()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testConstantScoreAutoRewrite()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCustomQueryParserFuzzy()",1,1,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testCustomQueryParserWildcard()",1,1,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testDateRange()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testEscaped()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testException()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testFarsiRangeCollating()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testLeadingWildcardType()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testLegacyDateRange()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testLocalDateFormat()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testMatchAllDocs()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testMultiPhraseQuery()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testNumber()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testPositionIncrement()",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testPrecedence()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testPunct()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testQPA()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testQueryStringEscaping()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testRange()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testSimple()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testSimpleDAO()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testSlop()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testStarParsing()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testStopwords()",1,2,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testTabNewlineCarriageReturn()",1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testWildcard()",1,1,3
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestFilter.QPTestFilter(TokenStream)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestFilter.incrementToken()",5,4,5
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParser(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParserQueryNodeProcessor.postProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParserQueryNodeProcessor.preProcessNode(QueryNode)",2,1,3
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParserQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.getFuzzyQuery(String,String,float)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.getWildcardQuery(String,String)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.addDateDoc(String,int,int,int,int,int,int,IndexWriter)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertDateRangeQueryEquals(QueryParserWrapper,String,String,String,Date,Resolution)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertEscapedQueryEquals(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertHits(int,String,IndexSearcher)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertParseException(String)",1,1,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertQueryEquals(QueryParserWrapper,String,String,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertQueryEquals(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertQueryEqualsAllowLeadingWildcard(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertQueryEqualsDOA(String,Analyzer,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertWildcardQueryEquals(String,String)",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertWildcardQueryEquals(String,boolean,String)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertWildcardQueryEquals(String,boolean,String,boolean)",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.escapeDateString(String)",2,1,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getDate(Date,Resolution)",2,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getDate(String,Resolution)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getLegacyDate(String)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getLocalizedDate(int,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getParser(Analyzer)",1,1,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getQuery(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getQueryAllowLeadingWildcard(String,Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getQueryDOA(String,Analyzer)",1,1,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.setUp()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.tearDown()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testBooleanQuery()",1,1,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testBoost()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJK()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKBoostedPhrase()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKBoostedTerm()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKPhrase()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKSloppyPhrase()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKTerm()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCustomQueryParserFuzzy()",1,1,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCustomQueryParserWildcard()",1,1,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testDateRange()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testEscaped()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testException()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testFarsiRangeCollating()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testLeadingWildcardType()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testLegacyDateRange()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testLocalDateFormat()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testMatchAllDocs()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testNumber()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testPositionIncrement()",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testPrecedence()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testPunct()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testQPA()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testQueryStringEscaping()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testRange()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testSimple()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testSimpleDAO()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testSlop()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testStarParsing()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testStopwords()",1,2,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testTabNewlineCarriageReturn()",1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testWildcard()",1,1,3
"org.apache.lucene.queryParser.standard.builders.AnyQueryNodeBuilder.AnyQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.AnyQueryNodeBuilder.build(QueryNode)",4,4,5
"org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder.BooleanQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder.build(QueryNode)",4,5,5
"org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder.getModifierValue(QueryNode)",5,3,5
"org.apache.lucene.queryParser.standard.builders.BoostQueryNodeBuilder.BoostQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.BoostQueryNodeBuilder.build(QueryNode)",2,1,2
"org.apache.lucene.queryParser.standard.builders.DummyQueryNodeBuilder.DummyQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.DummyQueryNodeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.builders.FieldQueryNodeBuilder.FieldQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.FieldQueryNodeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.builders.FuzzyQueryNodeBuilder.FuzzyQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.FuzzyQueryNodeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.builders.GroupQueryNodeBuilder.GroupQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.GroupQueryNodeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.builders.MatchAllDocsQueryNodeBuilder.MatchAllDocsQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.MatchAllDocsQueryNodeBuilder.build(QueryNode)",2,2,2
"org.apache.lucene.queryParser.standard.builders.MatchNoDocsQueryNodeBuilder.MatchNoDocsQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.MatchNoDocsQueryNodeBuilder.build(QueryNode)",2,2,2
"org.apache.lucene.queryParser.standard.builders.ModifierQueryNodeBuilder.ModifierQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.ModifierQueryNodeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.builders.MultiPhraseQueryNodeBuilder.MultiPhraseQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.MultiPhraseQueryNodeBuilder.build(QueryNode)",1,5,5
"org.apache.lucene.queryParser.standard.builders.NumericRangeQueryNodeBuilder.NumericRangeQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.NumericRangeQueryNodeBuilder.build(QueryNode)",6,8,8
"org.apache.lucene.queryParser.standard.builders.PhraseQueryNodeBuilder.PhraseQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.PhraseQueryNodeBuilder.build(QueryNode)",1,3,3
"org.apache.lucene.queryParser.standard.builders.PrefixWildcardQueryNodeBuilder.PrefixWildcardQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.PrefixWildcardQueryNodeBuilder.build(QueryNode)",1,2,2
"org.apache.lucene.queryParser.standard.builders.RangeQueryNodeBuilder.RangeQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.RangeQueryNodeBuilder.build(QueryNode)",1,2,4
"org.apache.lucene.queryParser.standard.builders.SlopQueryNodeBuilder.SlopQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.SlopQueryNodeBuilder.build(QueryNode)",1,2,2
"org.apache.lucene.queryParser.standard.builders.StandardBooleanQueryNodeBuilder.StandardBooleanQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.StandardBooleanQueryNodeBuilder.build(QueryNode)",4,5,5
"org.apache.lucene.queryParser.standard.builders.StandardBooleanQueryNodeBuilder.getModifierValue(QueryNode)",4,3,4
"org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder.StandardQueryTreeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder.build(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.builders.TermRangeQueryNodeBuilder.TermRangeQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.TermRangeQueryNodeBuilder.build(QueryNode)",1,2,2
"org.apache.lucene.queryParser.standard.builders.WildcardQueryNodeBuilder.WildcardQueryNodeBuilder()",1,1,1
"org.apache.lucene.queryParser.standard.builders.WildcardQueryNodeBuilder.build(QueryNode)",1,2,2
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.hashCode()",1,1,2
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.isAllowLeadingWildcard()",1,1,1
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.setAllowLeadingWildcard(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.AnalyzerAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.equals(Object)",3,5,6
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.getAnalyzer()",1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.hashCode()",1,2,2
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.setAnalyzer(Analyzer)",1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.BoostAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.getBoost()",1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.setBoost(float)",1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.DateResolutionAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.equals(Object)",3,3,4
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.getDateResolution()",1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.hashCode()",1,2,2
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.setDateResolution(Resolution)",1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.DefaultOperatorAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.equals(Object)",3,2,3
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.getOperator()",1,1,2
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.setOperator(Operator)",2,1,3
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.DefaultPhraseSlopAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.getDefaultPhraseSlop()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.setDefaultPhraseSlop(int)",1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.FieldBoostMapAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.getFieldBoostMap()",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.hashCode()",2,2,2
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.setFieldBoostMap(Map<String, Float>)",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapFCListener.FieldBoostMapFCListener(QueryConfigHandler)",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapFCListener.buildFieldConfig(FieldConfig)",1,3,3
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionFCListener.FieldDateResolutionFCListener(QueryConfigHandler)",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionFCListener.buildFieldConfig(FieldConfig)",1,3,3
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.FieldDateResolutionMapAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.getFieldDateResolutionMap()",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.hashCode()",2,2,2
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.setFieldDateResolutionMap(Map<CharSequence, Resolution>)",1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.FuzzyAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.getFuzzyConfig()",1,2,2
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.getFuzzyMinSimilarity()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.getPrefixLength()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.setFuzzyMinSimilarity(float)",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.setPrefixLength(int)",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.FuzzyConfig()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.getMinSimilarity()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.getPrefixLength()",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.setMinSimilarity(float)",1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.setPrefixLength(int)",1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.LocaleAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.equals(Object)",3,5,6
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.getLocale()",1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.hashCode()",1,2,2
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.setLocale(Locale)",1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.LowercaseExpandedTermsAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.hashCode()",1,1,2
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.isLowercaseExpandedTerms()",1,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.setLowercaseExpandedTerms(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.MultiFieldAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.equals(Object)",2,2,2
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.getFields()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.setFields(CharSequence[])",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.MultiTermRewriteMethodAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.getMultiTermRewriteMethod()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.hashCode()",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.setMultiTermRewriteMethod(RewriteMethod)",1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.NumberDateFormat(DateFormat)",1,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.format(Object,StringBuffer,FieldPosition)",1,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.format(double,StringBuffer,FieldPosition)",1,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.format(long,StringBuffer,FieldPosition)",1,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.parse(String,ParsePosition)",1,2,2
"org.apache.lucene.queryParser.standard.config.NumericConfig.NumericConfig(int,NumberFormat,DataType)",1,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.equals(Object)",4,5,7
"org.apache.lucene.queryParser.standard.config.NumericConfig.getNumberFormat()",1,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.getPrecisionStep()",1,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.getType()",1,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.setNumberFormat(NumberFormat)",2,1,2
"org.apache.lucene.queryParser.standard.config.NumericConfig.setPrecisionStep(int)",1,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.setType(DataType)",2,1,2
"org.apache.lucene.queryParser.standard.config.NumericFieldConfigListener.NumericFieldConfigListener(QueryConfigHandler)",2,1,2
"org.apache.lucene.queryParser.standard.config.NumericFieldConfigListener.buildFieldConfig(FieldConfig)",1,3,3
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.PositionIncrementsAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.equals(Object)",2,2,3
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.hashCode()",1,1,2
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.isPositionIncrementsEnabled()",1,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.setPositionIncrementsEnabled(boolean)",1,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,2,2
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.RangeCollatorAttributeImpl()",1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.clear()",1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.equals(Object)",3,3,4
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.getRangeCollator()",1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.hashCode()",1,2,2
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.setDateResolution(Collator)",1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.toString()",1,1,1
"org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler.StandardQueryConfigHandler()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.AbstractRangeQueryNode()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.getField()",1,3,3
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.getLowerBound()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.getUpperBound()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.isLowerInclusive()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.isUpperInclusive()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.setBounds(T,T,boolean,boolean)",3,5,8
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.setField(CharSequence)",1,3,3
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.toQueryString(EscapeQuerySyntax)",1,5,5
"org.apache.lucene.queryParser.standard.nodes.BooleanModifierNode.BooleanModifierNode(QueryNode,Modifier)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.MultiPhraseQueryNode()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.getField()",2,3,3
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.setField(CharSequence)",1,4,4
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.toQueryString(EscapeQuerySyntax)",2,3,4
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.toString()",2,3,4
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.NumericQueryNode(CharSequence,Number,NumberFormat)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.getField()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.getNumberFormat()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.getTermEscaped(EscapeQuerySyntax)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.getValue()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.setField(CharSequence)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.setNumberFormat(NumberFormat)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.setValue(Number)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.toQueryString(EscapeQuerySyntax)",2,2,2
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.NumericRangeQueryNode(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.getNumericConfig()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.getNumericDataType(Number)",5,5,5
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig)",4,9,10
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode.PrefixWildcardQueryNode(CharSequence,CharSequence,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode.PrefixWildcardQueryNode(FieldQueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.RangeQueryNode(ParametricQueryNode,ParametricQueryNode,Collator)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.getCollator()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.getLowerBound()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.getUpperBound()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.setBounds(FieldQueryNode,FieldQueryNode,boolean,boolean)",3,3,5
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.StandardBooleanQueryNode.StandardBooleanQueryNode(List<QueryNode>,boolean)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.StandardBooleanQueryNode.isDisableCoord()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.TermRangeQueryNode.TermRangeQueryNode(FieldQueryNode,FieldQueryNode,boolean,boolean)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.WildcardQueryNode(CharSequence,CharSequence,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.WildcardQueryNode(FieldQueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.cloneTree()",1,1,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.toQueryString(EscapeQuerySyntax)",2,2,2
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.toString()",1,1,1
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.discardEscapeChar(CharSequence)",3,3,9
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escape(CharSequence,Locale,Type)",3,4,5
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escapeChar(CharSequence,Locale)",4,5,6
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escapeQuoted(CharSequence,Locale)",2,3,4
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escapeTerm(CharSequence,Locale)",4,2,4
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escapeWhiteChar(CharSequence,Locale)",2,3,4
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.hexToInt(char)",4,1,7
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.replaceIgnoreCase(CharSequence,CharSequence,CharSequence,Locale)",10,8,15
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.AdjustBuffSize()",1,5,5
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.BeginToken()",2,1,3
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.Done()",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ExpandBuff(boolean)",1,3,3
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.FillBuff()",2,4,5
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.GetImage()",2,1,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.GetSuffix(int)",1,2,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,String)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,String,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,String,int,int,int)",1,1,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,int,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(Reader)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(Reader,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(Reader,int,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,String)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,String,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,String,int,int,int)",1,1,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,int,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(Reader)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(Reader,int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(Reader,int,int,int)",1,1,3
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReadByte()",1,2,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.UpdateLineColumn(char)",2,2,8
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.adjustBeginLineColumn(int,int)",1,1,7
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.backup(int)",1,1,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getBeginColumn()",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getBeginLine()",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getColumn()",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getEndColumn()",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getEndLine()",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getLine()",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getTabSize(int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.hexval(char)",17,2,17
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.readChar()",7,9,16
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.setTabSize(int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.ParseException.ParseException()",1,1,1
"org.apache.lucene.queryParser.standard.parser.ParseException.ParseException(Message)",1,1,1
"org.apache.lucene.queryParser.standard.parser.ParseException.ParseException(Token,int[][],String[])",1,1,1
"org.apache.lucene.queryParser.standard.parser.ParseException.add_escapes(String)",4,5,14
"org.apache.lucene.queryParser.standard.parser.ParseException.initialise(Token,int[][],String[])",3,5,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Clause(CharSequence)",4,7,14
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ConjQuery(CharSequence)",6,5,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Conjunction()",4,5,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.DisjQuery(CharSequence)",6,5,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ModClause(CharSequence)",2,1,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Modifiers()",4,5,10
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Query(CharSequence)",6,5,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ReInit(InputStream)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ReInit(InputStream,String)",1,1,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ReInit(Reader)",1,1,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ReInit(StandardSyntaxParserTokenManager)",1,1,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser()",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser(InputStream)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser(InputStream,String)",1,1,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser(Reader)",1,1,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser(StandardSyntaxParserTokenManager)",1,1,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Term(CharSequence)",20,38,69
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.TopLevelQuery(CharSequence)",2,1,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.disable_tracing()",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.enable_tracing()",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.generateParseException()",1,4,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.getNextToken()",1,2,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.getToken(int)",1,3,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_2_1(int)",1,1,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_3_1()",3,1,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_add_error_token(int,int)",6,5,10
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_consume_token(int)",2,2,7
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_la1_init_0()",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_ntk()",2,2,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_rescan_token()",2,5,6
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_save(int,int)",3,1,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_scan_token(int)",3,5,10
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.parse(CharSequence,CharSequence)",1,3,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.ReInit(JavaCharStream)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.ReInit(JavaCharStream,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.ReInitRounds()",1,1,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.StandardSyntaxParserTokenManager(JavaCharStream)",2,1,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.StandardSyntaxParserTokenManager(JavaCharStream,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.SwitchTo(int)",2,1,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.getNextToken()",5,11,18
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjAddStates(int,int)",1,1,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCanMove_0(int,int,int,long,long)",3,2,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCanMove_1(int,int,int,long,long)",4,2,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCanMove_2(int,int,int,long,long)",5,2,5
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCheckNAdd(int)",1,1,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCheckNAddStates(int,int)",1,2,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCheckNAddTwoStates(int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjFillToken()",1,2,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveNfa_0(int,int)",6,9,22
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveNfa_1(int,int)",6,19,48
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveNfa_2(int,int)",6,19,48
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveNfa_3(int,int)",6,25,119
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa0_0()",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa0_1()",4,4,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa0_2()",4,4,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa0_3()",10,10,10
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa1_1(long)",3,4,5
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa1_2(long)",3,4,5
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfaWithStates_1(int,int,int)",1,1,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfaWithStates_2(int,int,int)",1,1,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfa_1(int,long)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfa_2(int,long)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfa_3(int,long)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStopAtPos(int,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStopStringLiteralDfa_1(int,long)",4,2,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStopStringLiteralDfa_2(int,long)",4,2,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStopStringLiteralDfa_3(int,long)",2,2,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.setDebugStream(PrintStream)",1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.Token()",1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.Token(int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.Token(int,String)",1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.getValue()",1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.newToken(int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.newToken(int,String)",2,2,2
"org.apache.lucene.queryParser.standard.parser.Token.toString()",1,1,1
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.LexicalError(boolean,int,int,int,String,char)",1,2,2
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.TokenMgrError()",1,1,1
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.TokenMgrError(String,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.TokenMgrError(boolean,int,int,int,String,char,int)",1,1,1
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.addEscapes(String)",4,5,14
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.getMessage()",1,1,1
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.AllowLeadingWildcardProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.postProcessNode(QueryNode)",5,4,5
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.process(QueryNode)",3,3,3
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.AnalyzerQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.postProcessNode(QueryNode)",7,21,35
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.process(QueryNode)",3,3,4
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor.BooleanSingleChildOptimizationQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor.postProcessNode(QueryNode)",5,6,7
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor.postProcessNode(QueryNode)",5,6,7
"org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.DefaultPhraseSlopQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.postProcessNode(QueryNode)",2,1,3
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.preProcessNode(QueryNode)",1,1,2
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.process(QueryNode)",3,3,3
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.processChildren(QueryNode)",1,2,2
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor.postProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor.preProcessNode(QueryNode)",4,5,6
"org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.GroupQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.applyModifier(QueryNode,QueryNode)",10,10,10
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.getQueryConfigHandler()",1,1,1
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.process(QueryNode)",3,5,6
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.processNode(QueryNode)",1,5,6
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.readTree(QueryNode)",1,5,5
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.setQueryConfigHandler(QueryConfigHandler)",1,1,1
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.LowercaseExpandedTermsQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.postProcessNode(QueryNode)",1,2,4
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.process(QueryNode)",2,2,3
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor.MatchAllDocsQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor.postProcessNode(QueryNode)",3,3,4
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.MultiFieldQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.postProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.preProcessNode(QueryNode)",6,6,9
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.processChildren(QueryNode)",1,2,2
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor.postProcessNode(QueryNode)",3,2,4
"org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor.NumericQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor.postProcessNode(QueryNode)",6,7,11
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor.NumericRangeQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor.postProcessNode(QueryNode)",6,8,11
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor.ParametricRangeQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor.postProcessNode(QueryNode)",2,7,9
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor.PhraseSlopQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor.postProcessNode(QueryNode)",3,4,4
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.RemoveEmptyNonLeafQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.postProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.process(QueryNode)",3,3,4
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,5,5
"org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline.StandardQueryNodeProcessorPipeline(QueryConfigHandler)",1,1,1
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.WildcardQueryNodeProcessor()",1,1,1
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.isPrefixWildcard(CharSequence)",9,6,12
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.isWildcard(CharSequence)",4,5,7
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.postProcessNode(QueryNode)",5,5,8
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.preProcessNode(QueryNode)",1,1,1
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.BeginToken()",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.Done()",1,2,2
"org.apache.lucene.queryParser.surround.parser.FastCharStream.FastCharStream(Reader)",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.GetImage()",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.GetSuffix(int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.backup(int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getBeginColumn()",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getBeginLine()",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getColumn()",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getEndColumn()",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getEndLine()",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getLine()",1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.readChar()",1,2,2
"org.apache.lucene.queryParser.surround.parser.FastCharStream.refill()",2,4,5
"org.apache.lucene.queryParser.surround.parser.ParseException.ParseException()",1,1,1
"org.apache.lucene.queryParser.surround.parser.ParseException.ParseException(String)",1,1,1
"org.apache.lucene.queryParser.surround.parser.ParseException.ParseException(Token,int[][],String[])",1,1,1
"org.apache.lucene.queryParser.surround.parser.ParseException.add_escapes(String)",4,5,14
"org.apache.lucene.queryParser.surround.parser.ParseException.getMessage()",4,6,10
"org.apache.lucene.queryParser.surround.parser.QueryParser.AndQuery()",4,7,8
"org.apache.lucene.queryParser.surround.parser.QueryParser.FieldsQuery()",2,3,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.FieldsQueryList()",4,4,6
"org.apache.lucene.queryParser.surround.parser.QueryParser.NQuery()",4,4,6
"org.apache.lucene.queryParser.surround.parser.QueryParser.NotQuery()",4,7,8
"org.apache.lucene.queryParser.surround.parser.QueryParser.OptionalFields()",4,2,5
"org.apache.lucene.queryParser.surround.parser.QueryParser.OptionalWeights(SrndQuery)",6,4,9
"org.apache.lucene.queryParser.surround.parser.QueryParser.OrQuery()",4,7,8
"org.apache.lucene.queryParser.surround.parser.QueryParser.PrefixOperatorQuery()",6,7,11
"org.apache.lucene.queryParser.surround.parser.QueryParser.PrimaryQuery()",3,3,7
"org.apache.lucene.queryParser.surround.parser.QueryParser.QueryParser()",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.QueryParser(CharStream)",1,1,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.QueryParser(QueryParserTokenManager)",1,1,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.ReInit(CharStream)",1,1,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.ReInit(QueryParserTokenManager)",1,1,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.SimpleTerm()",13,8,19
"org.apache.lucene.queryParser.surround.parser.QueryParser.TopSrndQuery()",2,1,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.WQuery()",4,4,6
"org.apache.lucene.queryParser.surround.parser.QueryParser.allowedSuffix(String)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.allowedTruncation(String)",1,2,4
"org.apache.lucene.queryParser.surround.parser.QueryParser.checkDistanceSubQueries(DistanceQuery,String)",2,1,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.disable_tracing()",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.enable_tracing()",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.generateParseException()",1,4,9
"org.apache.lucene.queryParser.surround.parser.QueryParser.getAndQuery(List<SrndQuery>,boolean,Token)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getDistanceQuery(List<SrndQuery>,boolean,Token,boolean)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getFieldsQuery(SrndQuery,ArrayList<String>)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getNextToken()",1,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.getNotQuery(List<SrndQuery>,Token)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getOpDistance(String)",1,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.getOrQuery(List<SrndQuery>,boolean,Token)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getPrefixQuery(String,boolean)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getTermQuery(String,boolean)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getToken(int)",1,3,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.getTruncQuery(String)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_2_1(int)",1,1,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_3_1()",3,1,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_add_error_token(int,int)",6,5,10
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_consume_token(int)",2,2,7
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_la1_init_0()",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_ntk()",2,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_rescan_token()",2,5,6
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_save(int,int)",3,1,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_scan_token(int)",3,5,10
"org.apache.lucene.queryParser.surround.parser.QueryParser.parse(String)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.parse2(String)",1,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.QueryParserTokenManager(CharStream)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.QueryParserTokenManager(CharStream,int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.ReInit(CharStream)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.ReInit(CharStream,int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.ReInitRounds()",1,1,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.SwitchTo(int)",2,1,3
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.getNextToken()",5,11,16
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjAddStates(int,int)",1,1,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjCanMove_0(int,int,int,long,long)",4,2,4
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjCheckNAdd(int)",1,1,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjCheckNAddStates(int,int)",1,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjCheckNAddTwoStates(int,int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjFillToken()",1,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjMoveNfa_0(int,int)",6,9,22
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjMoveNfa_1(int,int)",6,35,159
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjMoveStringLiteralDfa0_0()",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjMoveStringLiteralDfa0_1()",7,7,7
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjStartNfa_1(int,long)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjStopAtPos(int,int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjStopStringLiteralDfa_1(int,long)",2,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.setDebugStream(PrintStream)",1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.Token()",1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.Token(int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.Token(int,String)",1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.getValue()",1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.newToken(int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.newToken(int,String)",2,2,2
"org.apache.lucene.queryParser.surround.parser.Token.toString()",1,1,1
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.LexicalError(boolean,int,int,int,String,char)",1,2,2
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.TokenMgrError()",1,1,1
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.TokenMgrError(String,int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.TokenMgrError(boolean,int,int,int,String,char,int)",1,1,1
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.addEscapes(String)",4,5,14
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.getMessage()",1,1,1
"org.apache.lucene.queryParser.surround.query.AndQuery.AndQuery(List<SrndQuery>,boolean,String)",1,1,1
"org.apache.lucene.queryParser.surround.query.AndQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.BasicQueryFactory()",1,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.BasicQueryFactory(int)",1,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.checkMax()",2,2,2
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.getMaxBasicQueries()",1,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.getNrQueriesMade()",1,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.newSpanTermQuery(Term)",1,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.newTermQuery(Term)",1,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.BooleanQueryTst(String,int[],SingleFieldTestDb,String,Assert,BasicQueryFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.TestCollector()",1,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.checkNrHits()",1,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.collect(int)",3,2,5
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.doTest()",1,2,2
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.setVerbose(boolean)",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.ComposedQuery(List,boolean,String)",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getBracketClose()",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getBracketOpen()",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getNrSubQueries()",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getOperatorName()",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getPrefixSeparator()",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getSubQueriesIterator()",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getSubQuery(int)",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.infixToString(StringBuilder)",1,3,3
"org.apache.lucene.queryParser.surround.query.ComposedQuery.isFieldsSubQueryAcceptable()",3,2,3
"org.apache.lucene.queryParser.surround.query.ComposedQuery.isOperatorInfix()",1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.makeLuceneSubQueriesField(String,BasicQueryFactory)",1,2,2
"org.apache.lucene.queryParser.surround.query.ComposedQuery.prefixToString(StringBuilder)",1,3,3
"org.apache.lucene.queryParser.surround.query.ComposedQuery.recompose(List)",2,1,2
"org.apache.lucene.queryParser.surround.query.ComposedQuery.toString()",1,2,2
"org.apache.lucene.queryParser.surround.query.DistanceQuery.DistanceQuery(List<SrndQuery>,boolean,int,String,boolean)",1,1,1
"org.apache.lucene.queryParser.surround.query.DistanceQuery.addSpanQueries(SpanNearClauseFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.DistanceQuery.distanceSubQueryNotAllowed()",4,3,4
"org.apache.lucene.queryParser.surround.query.DistanceQuery.getOpDistance()",1,1,1
"org.apache.lucene.queryParser.surround.query.DistanceQuery.getSpanNearQuery(IndexReader,String,float,BasicQueryFactory)",3,4,4
"org.apache.lucene.queryParser.surround.query.DistanceQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.DistanceQuery.subQueriesOrdered()",1,1,1
"org.apache.lucene.queryParser.surround.query.ExceptionQueryTst.ExceptionQueryTst(String,boolean)",1,1,1
"org.apache.lucene.queryParser.surround.query.ExceptionQueryTst.doTest(StringBuilder)",1,5,5
"org.apache.lucene.queryParser.surround.query.ExceptionQueryTst.getFailQueries(String[],boolean)",1,2,2
"org.apache.lucene.queryParser.surround.query.FieldsQuery.FieldsQuery(SrndQuery,List<String>,char)",1,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.FieldsQuery(SrndQuery,String,char)",1,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.fieldNamesToString(StringBuilder)",1,2,2
"org.apache.lucene.queryParser.surround.query.FieldsQuery.getFieldNames()",1,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.getFieldOperator()",1,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.isFieldsSubQueryAcceptable()",1,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.makeLuceneQueryNoBoost(BasicQueryFactory)",2,3,3
"org.apache.lucene.queryParser.surround.query.FieldsQuery.toString()",1,1,1
"org.apache.lucene.queryParser.surround.query.NotQuery.NotQuery(List<SrndQuery>,String)",1,1,1
"org.apache.lucene.queryParser.surround.query.NotQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.OrQuery.OrQuery(List<SrndQuery>,boolean,String)",1,1,1
"org.apache.lucene.queryParser.surround.query.OrQuery.addSpanQueries(SpanNearClauseFactory)",1,2,2
"org.apache.lucene.queryParser.surround.query.OrQuery.distanceSubQueryNotAllowed()",4,3,4
"org.apache.lucene.queryParser.surround.query.OrQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.SimpleTerm(boolean)",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.addSpanQueries(SpanNearClauseFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.compareTo(SimpleTerm)",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.distanceSubQueryNotAllowed()",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.getFieldOperator()",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.getQuote()",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.isQuoted()",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",1,3,3
"org.apache.lucene.queryParser.surround.query.SimpleTerm.suffixToString(StringBuilder)",1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.toString()",1,3,3
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb.SingleFieldTestDb(Random,String[],String)",1,2,3
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb.getDb()",1,1,1
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb.getDocs()",1,1,1
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb.getFieldname()",1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.SpanNearClauseFactory(IndexReader,String,BasicQueryFactory)",1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.addSpanNearQuery(Query)",3,2,3
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.addSpanQueryWeighted(SpanQuery,float)",1,2,2
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.addTermWeighted(Term,float)",1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.clear()",1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.getBasicQueryFactory()",1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.getFieldName()",1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.getIndexReader()",1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.getTermEnum(String)",1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.makeSpanNearClause()",2,2,3
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.size()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndBooleanQuery.addQueriesToBoolean(BooleanQuery,List<Query>,Occur)",1,2,2
"org.apache.lucene.queryParser.surround.query.SrndBooleanQuery.makeBooleanQuery(List<Query>,Occur)",2,2,2
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.SrndPrefixQuery(String,boolean,char)",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.getLucenePrefixTerm(String)",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.getPrefix()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.getSuffixOperator()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.suffixToString(StringBuilder)",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.toStringUnquoted()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.visitMatchingTerms(IndexReader,String,MatchingTermVisitor)",3,5,5
"org.apache.lucene.queryParser.surround.query.SrndQuery.SrndQuery()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.clone()",1,1,2
"org.apache.lucene.queryParser.surround.query.SrndQuery.getWeight()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.getWeightOperator()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.getWeightString()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.isFieldsSubQueryAcceptable()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.isWeighted()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.makeLuceneQueryField(String,BasicQueryFactory)",1,2,2
"org.apache.lucene.queryParser.surround.query.SrndQuery.setWeight(float)",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.weightToString(StringBuilder)",1,2,2
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.SrndTermQuery(String,boolean)",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.getLuceneTerm(String)",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.getTermText()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.toStringUnquoted()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.visitMatchingTerms(IndexReader,String,MatchingTermVisitor)",1,4,4
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.SrndTruncQuery(String,char,char)",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.appendRegExpForChar(char,StringBuilder)",1,3,3
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.getTruncated()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.matchingChar(char)",1,1,2
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.toStringUnquoted()",1,1,1
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.truncatedToPrefixAndPattern()",1,3,4
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.visitMatchingTerms(IndexReader,String,MatchingTermVisitor)",4,6,6
"org.apache.lucene.queryParser.surround.query.Test01Exceptions.main(String[])",1,1,1
"org.apache.lucene.queryParser.surround.query.Test01Exceptions.test01Exceptions()",1,2,2
"org.apache.lucene.queryParser.surround.query.Test02Boolean.main(String[])",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.normalTest1(String,int[])",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms03()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms04()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms05()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms06()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms10()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms13()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms14()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms20()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms21()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms22()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms23()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test03And01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test03And02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test03And03()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test04Or01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test04Or02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test04Or03()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test05Not01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test05Not02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test06AndOr01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test07AndOrNot02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.distanceTest1(String,int[])",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.distanceTest2(String,int[])",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.distanceTest3(String,int[])",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.distanceTst(String,int[],SingleFieldTestDb)",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.main(String[])",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test00Exceptions()",1,2,2
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N01r()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N03()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N03r()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N04()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N04r()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W03()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W04()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W05()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W06()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc02r()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc03()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc04()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc05()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc06()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc06r()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc09()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc02r()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc03()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc04()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc05()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc06()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc07()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc08()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc09()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nnested01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nnested02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nprefix01a()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nprefix01b()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nprefix02a()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nprefix02b()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Wnested01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Wnested02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Wprefix01()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Wprefix02()",1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test3Example01()",1,1,1
"org.apache.lucene.queryParser.surround.query.TooManyBasicQueries.TooManyBasicQueries(int)",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.AssertingIndexSearcher(IndexReader)",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.AssertingIndexSearcher(IndexReader,ExecutorService)",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.UnmodifiableWeight.UnmodifiableWeight(Weight)",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.UnmodifiableWeight.explain(IndexReader,int)",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.UnmodifiableWeight.getQuery()",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.UnmodifiableWeight.getValue()",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.UnmodifiableWeight.normalize(float)",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.UnmodifiableWeight.scorer(IndexReader,boolean,boolean)",1,2,4
"org.apache.lucene.search.AssertingIndexSearcher.UnmodifiableWeight.scoresDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.UnmodifiableWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.AssertingIndexSearcher.createNormalizedWeight(Query)",1,1,1
"org.apache.lucene.search.BaseTestRangeFilter.TestIndex.TestIndex(Random,int,int,boolean)",1,1,2
"org.apache.lucene.search.BaseTestRangeFilter.afterClassBaseTestRangeFilter()",1,1,1
"org.apache.lucene.search.BaseTestRangeFilter.beforeClassBaseTestRangeFilter()",1,1,1
"org.apache.lucene.search.BaseTestRangeFilter.build(Random,TestIndex)",3,5,10
"org.apache.lucene.search.BaseTestRangeFilter.pad(int)",1,2,3
"org.apache.lucene.search.BaseTestRangeFilter.testPad()",1,2,2
"org.apache.lucene.search.BooleanClause.BooleanClause(Query,Occur)",1,1,1
"org.apache.lucene.search.BooleanClause.equals(Object)",2,2,4
"org.apache.lucene.search.BooleanClause.getOccur()",1,1,1
"org.apache.lucene.search.BooleanClause.getQuery()",1,1,1
"org.apache.lucene.search.BooleanClause.hashCode()",1,1,3
"org.apache.lucene.search.BooleanClause.isProhibited()",1,1,1
"org.apache.lucene.search.BooleanClause.isRequired()",1,1,1
"org.apache.lucene.search.BooleanClause.setOccur(Occur)",1,1,1
"org.apache.lucene.search.BooleanClause.setQuery(Query)",1,1,1
"org.apache.lucene.search.BooleanClause.toString()",1,1,1
"org.apache.lucene.search.BooleanFilter.add(Filter,Occur)",1,1,1
"org.apache.lucene.search.BooleanFilter.add(FilterClause)",1,1,1
"org.apache.lucene.search.BooleanFilter.clauses()",1,1,1
"org.apache.lucene.search.BooleanFilter.equals(Object)",3,2,4
"org.apache.lucene.search.BooleanFilter.getDISI(Filter,IndexReader)",1,2,3
"org.apache.lucene.search.BooleanFilter.getDocIdSet(IndexReader)",8,11,16
"org.apache.lucene.search.BooleanFilter.hashCode()",1,1,1
"org.apache.lucene.search.BooleanFilter.iterator()",1,1,1
"org.apache.lucene.search.BooleanFilter.toString()",1,3,3
"org.apache.lucene.search.BooleanFilterTest.addDoc(RandomIndexWriter,String,String,String,String)",1,1,1
"org.apache.lucene.search.BooleanFilterTest.getEmptyFilter()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.getNullDISFilter()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.getNullDISIFilter()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.getRangeFilter(String,String,String)",1,1,1
"org.apache.lucene.search.BooleanFilterTest.getTermsFilter(String,String)",1,1,1
"org.apache.lucene.search.BooleanFilterTest.getWrappedTermQuery(String,String)",1,1,1
"org.apache.lucene.search.BooleanFilterTest.setUp()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.tearDown()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testCombinedNullDocIdSets()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testEmpty()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testJustMust()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testJustMustNot()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testJustNullDocIdSets()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testMustAndMustNot()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testNonMatchingShouldsAndMusts()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testShould()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testShoulds()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testShouldsAndMust()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testShouldsAndMustNot()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testShouldsAndMusts()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.testShouldsAndMustsAndMustNot()",1,1,1
"org.apache.lucene.search.BooleanFilterTest.tstFilterCard(String,int,Filter)",1,1,2
"org.apache.lucene.search.BooleanQuery.BooleanQuery()",1,1,1
"org.apache.lucene.search.BooleanQuery.BooleanQuery(boolean)",1,1,1
"org.apache.lucene.search.BooleanQuery.BooleanWeight.BooleanWeight(Searcher,boolean)",1,2,3
"org.apache.lucene.search.BooleanQuery.BooleanWeight.explain(IndexReader,int)",6,11,13
"org.apache.lucene.search.BooleanQuery.BooleanWeight.getQuery()",1,1,1
"org.apache.lucene.search.BooleanQuery.BooleanWeight.getValue()",1,1,1
"org.apache.lucene.search.BooleanQuery.BooleanWeight.normalize(float)",1,2,2
"org.apache.lucene.search.BooleanQuery.BooleanWeight.scorer(IndexReader,boolean,boolean)",7,9,12
"org.apache.lucene.search.BooleanQuery.BooleanWeight.scoresDocsOutOfOrder()",3,2,3
"org.apache.lucene.search.BooleanQuery.BooleanWeight.sumOfSquaredWeights()",1,2,3
"org.apache.lucene.search.BooleanQuery.TooManyClauses.TooManyClauses()",1,1,1
"org.apache.lucene.search.BooleanQuery.add(BooleanClause)",2,1,2
"org.apache.lucene.search.BooleanQuery.add(Query,Occur)",1,1,1
"org.apache.lucene.search.BooleanQuery.clauses()",1,1,1
"org.apache.lucene.search.BooleanQuery.clone()",1,1,1
"org.apache.lucene.search.BooleanQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.BooleanQuery.equals(Object)",2,4,5
"org.apache.lucene.search.BooleanQuery.extractTerms(Set<Term>)",1,2,2
"org.apache.lucene.search.BooleanQuery.getClauses()",1,1,1
"org.apache.lucene.search.BooleanQuery.getMaxClauseCount()",1,1,1
"org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch()",1,1,1
"org.apache.lucene.search.BooleanQuery.hashCode()",1,1,2
"org.apache.lucene.search.BooleanQuery.isCoordDisabled()",1,1,1
"org.apache.lucene.search.BooleanQuery.iterator()",1,1,1
"org.apache.lucene.search.BooleanQuery.rewrite(IndexReader)",4,9,10
"org.apache.lucene.search.BooleanQuery.setMaxClauseCount(int)",2,1,2
"org.apache.lucene.search.BooleanQuery.setMinimumNumberShouldMatch(int)",1,1,1
"org.apache.lucene.search.BooleanQuery.toString(String)",1,12,12
"org.apache.lucene.search.BooleanScorer.BooleanScorer(Weight,boolean,Similarity,int,List<Scorer>,List<Scorer>,int)",1,11,11
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.BooleanScorerCollector(int,BucketTable)",1,1,1
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.collect(int)",1,2,2
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.BucketScorer(Weight)",1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.advance(int)",1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.docID()",1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.freq()",1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.nextDoc()",1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.score()",1,1,1
"org.apache.lucene.search.BooleanScorer.BucketTable.BucketTable()",1,1,2
"org.apache.lucene.search.BooleanScorer.BucketTable.newCollector(int)",1,1,1
"org.apache.lucene.search.BooleanScorer.BucketTable.size()",1,1,1
"org.apache.lucene.search.BooleanScorer.SubScorer.SubScorer(Scorer,boolean,boolean,Collector,SubScorer)",2,1,2
"org.apache.lucene.search.BooleanScorer.advance(int)",1,1,1
"org.apache.lucene.search.BooleanScorer.docID()",1,1,1
"org.apache.lucene.search.BooleanScorer.nextDoc()",1,1,1
"org.apache.lucene.search.BooleanScorer.score()",1,1,1
"org.apache.lucene.search.BooleanScorer.score(Collector)",1,1,1
"org.apache.lucene.search.BooleanScorer.score(Collector,int,int)",6,7,10
"org.apache.lucene.search.BooleanScorer.toString()",1,2,2
"org.apache.lucene.search.BooleanScorer.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",1,2,3
"org.apache.lucene.search.BooleanScorer2.BooleanScorer2(Weight,boolean,Similarity,int,List<Scorer>,List<Scorer>,List<Scorer>,int)",2,1,2
"org.apache.lucene.search.BooleanScorer2.Coordinator.init(Similarity,boolean)",1,3,3
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.SingleMatchScorer(Scorer)",1,1,1
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.advance(int)",1,1,1
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.docID()",1,1,1
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.nextDoc()",1,1,1
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.score()",1,3,3
"org.apache.lucene.search.BooleanScorer2.addProhibitedScorers(Scorer)",1,3,3
"org.apache.lucene.search.BooleanScorer2.advance(int)",1,1,1
"org.apache.lucene.search.BooleanScorer2.countingConjunctionSumScorer(boolean,Similarity,List<Scorer>)",1,4,4
"org.apache.lucene.search.BooleanScorer2.countingDisjunctionSumScorer(List<Scorer>,int)",1,3,3
"org.apache.lucene.search.BooleanScorer2.docID()",1,1,1
"org.apache.lucene.search.BooleanScorer2.dualConjunctionSumScorer(boolean,Similarity,Scorer,Scorer)",1,2,2
"org.apache.lucene.search.BooleanScorer2.freq()",1,1,1
"org.apache.lucene.search.BooleanScorer2.makeCountingSumScorer(boolean,Similarity)",1,2,2
"org.apache.lucene.search.BooleanScorer2.makeCountingSumScorerNoReq(boolean,Similarity)",1,3,4
"org.apache.lucene.search.BooleanScorer2.makeCountingSumScorerSomeReq(boolean,Similarity)",3,5,5
"org.apache.lucene.search.BooleanScorer2.nextDoc()",1,1,1
"org.apache.lucene.search.BooleanScorer2.score()",1,1,1
"org.apache.lucene.search.BooleanScorer2.score(Collector)",1,2,2
"org.apache.lucene.search.BooleanScorer2.score(Collector,int,int)",1,2,2
"org.apache.lucene.search.BooleanScorer2.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",1,4,4
"org.apache.lucene.search.BoostingQuery.BoostingQuery(Query,Query,float)",1,1,1
"org.apache.lucene.search.BoostingQuery.equals(Object)",11,3,11
"org.apache.lucene.search.BoostingQuery.hashCode()",1,3,3
"org.apache.lucene.search.BoostingQuery.rewrite(IndexReader)",4,2,4
"org.apache.lucene.search.BoostingQuery.toString(String)",1,1,1
"org.apache.lucene.search.BoostingQueryTest.testBoostingQueryEquals()",1,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.CachedScorer()",1,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.advance(int)",1,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.docID()",1,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.freq()",1,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.nextDoc()",1,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.score()",1,1,1
"org.apache.lucene.search.CachingCollector.CachingCollector(Collector,double,boolean)",1,1,2
"org.apache.lucene.search.CachingCollector.CachingCollector(Collector,int)",1,1,1
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.NoScoreCachingCollector(Collector,double)",1,1,1
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.NoScoreCachingCollector(Collector,int)",1,1,1
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.collect(int)",5,5,6
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.replay(Collector)",1,4,4
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.toString()",2,1,2
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.ScoreCachingCollector(Collector,double)",1,1,1
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.ScoreCachingCollector(Collector,int)",1,1,1
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.collect(int)",5,5,6
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.replay(Collector)",1,4,4
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.toString()",2,1,2
"org.apache.lucene.search.CachingCollector.SegStart.SegStart(IndexReader,int,int)",1,1,1
"org.apache.lucene.search.CachingCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.CachingCollector.create(Collector,boolean,double)",1,1,2
"org.apache.lucene.search.CachingCollector.create(Collector,boolean,int)",1,1,2
"org.apache.lucene.search.CachingCollector.create(boolean,boolean,double)",1,1,1
"org.apache.lucene.search.CachingCollector.isCached()",1,1,1
"org.apache.lucene.search.CachingCollector.replayInit(Collector)",3,3,5
"org.apache.lucene.search.CachingCollector.setNextReader(IndexReader,int)",1,2,2
"org.apache.lucene.search.CachingSpanFilter.CachingSpanFilter(SpanFilter)",1,1,1
"org.apache.lucene.search.CachingSpanFilter.CachingSpanFilter(SpanFilter,DeletesMode)",2,1,2
"org.apache.lucene.search.CachingSpanFilter.bitSpans(IndexReader)",1,1,1
"org.apache.lucene.search.CachingSpanFilter.equals(Object)",2,1,2
"org.apache.lucene.search.CachingSpanFilter.getCachedResult(IndexReader)",2,2,3
"org.apache.lucene.search.CachingSpanFilter.getDocIdSet(IndexReader)",1,2,2
"org.apache.lucene.search.CachingSpanFilter.hashCode()",1,1,1
"org.apache.lucene.search.CachingSpanFilter.toString()",1,1,1
"org.apache.lucene.search.CachingWrapperFilter.CachingWrapperFilter(Filter)",1,1,1
"org.apache.lucene.search.CachingWrapperFilter.CachingWrapperFilter(Filter,DeletesMode)",1,1,1
"org.apache.lucene.search.CachingWrapperFilter.FilterCache.FilterCache(DeletesMode)",1,1,1
"org.apache.lucene.search.CachingWrapperFilter.FilterCache.get(IndexReader,Object,Object)",1,6,7
"org.apache.lucene.search.CachingWrapperFilter.FilterCache.put(Object,Object,T)",1,3,3
"org.apache.lucene.search.CachingWrapperFilter.docIdSetToCache(DocIdSet,IndexReader)",4,4,4
"org.apache.lucene.search.CachingWrapperFilter.equals(Object)",2,1,2
"org.apache.lucene.search.CachingWrapperFilter.getDocIdSet(IndexReader)",2,3,4
"org.apache.lucene.search.CachingWrapperFilter.hashCode()",1,1,1
"org.apache.lucene.search.CachingWrapperFilter.toString()",1,1,1
"org.apache.lucene.search.CachingWrapperFilterHelper.CachingWrapperFilterHelper(Filter)",1,1,1
"org.apache.lucene.search.CachingWrapperFilterHelper.equals(Object)",2,1,2
"org.apache.lucene.search.CachingWrapperFilterHelper.getDocIdSet(IndexReader)",1,2,2
"org.apache.lucene.search.CachingWrapperFilterHelper.hashCode()",1,1,1
"org.apache.lucene.search.CachingWrapperFilterHelper.setShouldHaveCache(boolean)",1,1,1
"org.apache.lucene.search.CachingWrapperFilterHelper.toString()",1,1,1
"org.apache.lucene.search.ChainedFilter.ChainedFilter(Filter[])",1,1,1
"org.apache.lucene.search.ChainedFilter.ChainedFilter(Filter[],int)",1,1,1
"org.apache.lucene.search.ChainedFilter.ChainedFilter(Filter[],int[])",1,1,1
"org.apache.lucene.search.ChainedFilter.doChain(OpenBitSetDISI,int,DocIdSet)",3,6,14
"org.apache.lucene.search.ChainedFilter.finalResult(OpenBitSetDISI,int)",1,1,1
"org.apache.lucene.search.ChainedFilter.getDISI(Filter,IndexReader)",3,3,3
"org.apache.lucene.search.ChainedFilter.getDocIdSet(IndexReader)",3,3,3
"org.apache.lucene.search.ChainedFilter.getDocIdSet(IndexReader,int,int[])",1,2,2
"org.apache.lucene.search.ChainedFilter.getDocIdSet(IndexReader,int[],int[])",2,2,3
"org.apache.lucene.search.ChainedFilter.initialResult(IndexReader,int,int[])",1,3,3
"org.apache.lucene.search.ChainedFilter.toString()",1,2,2
"org.apache.lucene.search.ChainedFilterTest.getChainedFilter(Filter[],int)",1,1,1
"org.apache.lucene.search.ChainedFilterTest.getChainedFilter(Filter[],int[])",2,1,2
"org.apache.lucene.search.ChainedFilterTest.setUp()",1,2,3
"org.apache.lucene.search.ChainedFilterTest.tearDown()",1,1,1
"org.apache.lucene.search.ChainedFilterTest.testAND()",1,1,1
"org.apache.lucene.search.ChainedFilterTest.testANDNOT()",1,1,1
"org.apache.lucene.search.ChainedFilterTest.testOR()",1,1,1
"org.apache.lucene.search.ChainedFilterTest.testSingleFilter()",1,1,1
"org.apache.lucene.search.ChainedFilterTest.testWithCachingFilter()",1,1,1
"org.apache.lucene.search.ChainedFilterTest.testXOR()",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAsserter.ExplanationAsserter(Query,String,Searcher)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAsserter.ExplanationAsserter(Query,String,Searcher,boolean)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAsserter.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAsserter.collect(int)",1,1,2
"org.apache.lucene.search.CheckHits.ExplanationAsserter.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAsserter.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAssertingSearcher.ExplanationAssertingSearcher(IndexReader)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAssertingSearcher.checkExplanations(Query)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAssertingSearcher.search(Query,Collector)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAssertingSearcher.search(Query,Filter,Collector)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAssertingSearcher.search(Query,Filter,int)",1,1,1
"org.apache.lucene.search.CheckHits.ExplanationAssertingSearcher.search(Query,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.CheckHits.SetCollector.SetCollector(Set<Integer>)",1,1,1
"org.apache.lucene.search.CheckHits.SetCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.CheckHits.SetCollector.collect(int)",1,1,1
"org.apache.lucene.search.CheckHits.SetCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.CheckHits.SetCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.CheckHits.checkDocIds(String,int[],ScoreDoc[])",1,2,2
"org.apache.lucene.search.CheckHits.checkEqual(Query,ScoreDoc[],ScoreDoc[])",1,6,6
"org.apache.lucene.search.CheckHits.checkExplanations(Query,String,Searcher)",1,1,1
"org.apache.lucene.search.CheckHits.checkExplanations(Query,String,Searcher,boolean)",1,1,1
"org.apache.lucene.search.CheckHits.checkHitCollector(Random,Query,String,Searcher,int[])",2,4,5
"org.apache.lucene.search.CheckHits.checkHits(Random,Query,String,Searcher,int[])",1,3,3
"org.apache.lucene.search.CheckHits.checkHitsQuery(Query,ScoreDoc[],ScoreDoc[],int[])",1,1,1
"org.apache.lucene.search.CheckHits.checkNoMatchExplanations(Query,String,Searcher,int[])",3,3,4
"org.apache.lucene.search.CheckHits.hits2str(ScoreDoc[],ScoreDoc[],int,int)",1,5,7
"org.apache.lucene.search.CheckHits.topdocsString(TopDocs,int,int)",1,3,3
"org.apache.lucene.search.CheckHits.verifyExplanation(String,int,float,boolean,Explanation)",2,10,18
"org.apache.lucene.search.ComplexExplanation.ComplexExplanation()",1,1,1
"org.apache.lucene.search.ComplexExplanation.ComplexExplanation(boolean,float,String)",1,1,1
"org.apache.lucene.search.ComplexExplanation.getMatch()",1,1,1
"org.apache.lucene.search.ComplexExplanation.getSummary()",2,2,3
"org.apache.lucene.search.ComplexExplanation.isMatch()",1,2,2
"org.apache.lucene.search.ComplexExplanation.setMatch(Boolean)",1,1,1
"org.apache.lucene.search.ConjunctionScorer.ConjunctionScorer(Weight,float,Collection<Scorer>)",1,1,1
"org.apache.lucene.search.ConjunctionScorer.ConjunctionScorer(Weight,float,Scorer...)",4,2,5
"org.apache.lucene.search.ConjunctionScorer.advance(int)",2,3,3
"org.apache.lucene.search.ConjunctionScorer.doNext()",1,2,3
"org.apache.lucene.search.ConjunctionScorer.docID()",1,1,1
"org.apache.lucene.search.ConjunctionScorer.nextDoc()",3,3,3
"org.apache.lucene.search.ConjunctionScorer.score()",1,2,2
"org.apache.lucene.search.ConstantScoreAutoRewrite.CutOffTermCollector.CutOffTermCollector(IndexReader,int,int)",1,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.CutOffTermCollector.collect(Term,float)",2,2,3
"org.apache.lucene.search.ConstantScoreAutoRewrite.addClause(BooleanQuery,Term,float)",1,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.equals(Object)",6,1,6
"org.apache.lucene.search.ConstantScoreAutoRewrite.getDocCountPercent()",1,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.getTermCountCutoff()",1,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.getTopLevelQuery()",1,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.hashCode()",1,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.rewrite(IndexReader,MultiTermQuery)",2,4,4
"org.apache.lucene.search.ConstantScoreAutoRewrite.setDocCountPercent(double)",1,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.setTermCountCutoff(int)",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScoreQuery(Filter)",2,1,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantScoreQuery(Query)",2,1,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.ConstantScorer(Similarity,DocIdSetIterator,Weight)",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.advance(int)",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.docID()",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.nextDoc()",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.score()",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.score(Collector)",1,2,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.score(Collector,int,int)",2,2,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.wrapCollector(Collector)",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.ConstantWeight(Searcher)",1,2,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.explain(IndexReader,int)",1,3,3
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.getQuery()",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.getValue()",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.normalize(float)",1,2,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.scorer(IndexReader,boolean,boolean)",4,2,5
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.scoresDocsOutOfOrder()",1,2,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.sumOfSquaredWeights()",1,2,2
"org.apache.lucene.search.ConstantScoreQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.equals(Object)",4,5,7
"org.apache.lucene.search.ConstantScoreQuery.extractTerms(Set<Term>)",1,2,2
"org.apache.lucene.search.ConstantScoreQuery.getFilter()",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.getQuery()",1,1,1
"org.apache.lucene.search.ConstantScoreQuery.hashCode()",1,1,2
"org.apache.lucene.search.ConstantScoreQuery.rewrite(IndexReader)",3,3,3
"org.apache.lucene.search.ConstantScoreQuery.toString(String)",1,2,2
"org.apache.lucene.search.DefaultSimilarity.computeNorm(String,FieldInvertState)",1,2,2
"org.apache.lucene.search.DefaultSimilarity.coord(int,int)",1,1,1
"org.apache.lucene.search.DefaultSimilarity.getDiscountOverlaps()",1,1,1
"org.apache.lucene.search.DefaultSimilarity.idf(int,int)",1,1,1
"org.apache.lucene.search.DefaultSimilarity.queryNorm(float)",1,1,1
"org.apache.lucene.search.DefaultSimilarity.setDiscountOverlaps(boolean)",1,1,1
"org.apache.lucene.search.DefaultSimilarity.sloppyFreq(int)",1,1,1
"org.apache.lucene.search.DefaultSimilarity.tf(float)",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxQuery(Collection<Query>,float)",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxQuery(float)",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.DisjunctionMaxWeight(Searcher)",1,2,2
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.explain(IndexReader,int)",2,4,5
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.getQuery()",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.getValue()",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.normalize(float)",1,2,2
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.scorer(IndexReader,boolean,boolean)",2,3,5
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.sumOfSquaredWeights()",1,2,2
"org.apache.lucene.search.DisjunctionMaxQuery.add(Collection<Query>)",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.add(Query)",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.clone()",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.equals(Object)",2,3,4
"org.apache.lucene.search.DisjunctionMaxQuery.extractTerms(Set<Term>)",1,2,2
"org.apache.lucene.search.DisjunctionMaxQuery.hashCode()",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.iterator()",1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.rewrite(IndexReader)",3,7,8
"org.apache.lucene.search.DisjunctionMaxQuery.toString(String)",1,6,6
"org.apache.lucene.search.DisjunctionMaxScorer.DisjunctionMaxScorer(Weight,float,Similarity,Scorer[],int)",1,1,1
"org.apache.lucene.search.DisjunctionMaxScorer.advance(int)",5,3,5
"org.apache.lucene.search.DisjunctionMaxScorer.docID()",1,1,1
"org.apache.lucene.search.DisjunctionMaxScorer.heapAdjust(int)",4,3,6
"org.apache.lucene.search.DisjunctionMaxScorer.heapRemoveRoot()",1,2,2
"org.apache.lucene.search.DisjunctionMaxScorer.heapify()",1,2,2
"org.apache.lucene.search.DisjunctionMaxScorer.nextDoc()",5,3,5
"org.apache.lucene.search.DisjunctionMaxScorer.score()",1,1,1
"org.apache.lucene.search.DisjunctionMaxScorer.scoreAll(int,int,int)",1,3,3
"org.apache.lucene.search.DisjunctionSumScorer.DisjunctionSumScorer(Weight,List<Scorer>)",1,1,1
"org.apache.lucene.search.DisjunctionSumScorer.DisjunctionSumScorer(Weight,List<Scorer>,int)",3,1,3
"org.apache.lucene.search.DisjunctionSumScorer.advance(int)",7,4,8
"org.apache.lucene.search.DisjunctionSumScorer.advanceAfterCurrent()",8,5,8
"org.apache.lucene.search.DisjunctionSumScorer.docID()",1,1,1
"org.apache.lucene.search.DisjunctionSumScorer.initScorerDocQueue()",1,3,3
"org.apache.lucene.search.DisjunctionSumScorer.nextDoc()",1,2,3
"org.apache.lucene.search.DisjunctionSumScorer.nrMatchers()",1,1,1
"org.apache.lucene.search.DisjunctionSumScorer.score()",1,1,1
"org.apache.lucene.search.DisjunctionSumScorer.score(Collector)",1,2,2
"org.apache.lucene.search.DisjunctionSumScorer.score(Collector,int,int)",3,2,3
"org.apache.lucene.search.DocIdSet.isCacheable()",1,1,1
"org.apache.lucene.search.DuplicateFilter.DuplicateFilter(String)",1,1,1
"org.apache.lucene.search.DuplicateFilter.DuplicateFilter(String,int,int)",1,1,1
"org.apache.lucene.search.DuplicateFilter.correctBits(IndexReader)",4,7,8
"org.apache.lucene.search.DuplicateFilter.equals(Object)",3,6,8
"org.apache.lucene.search.DuplicateFilter.fastBits(IndexReader)",4,8,9
"org.apache.lucene.search.DuplicateFilter.getDocIdSet(IndexReader)",2,2,2
"org.apache.lucene.search.DuplicateFilter.getFieldName()",1,1,1
"org.apache.lucene.search.DuplicateFilter.getKeepMode()",1,1,1
"org.apache.lucene.search.DuplicateFilter.getProcessingMode()",1,1,1
"org.apache.lucene.search.DuplicateFilter.hashCode()",1,1,1
"org.apache.lucene.search.DuplicateFilter.setFieldName(String)",1,1,1
"org.apache.lucene.search.DuplicateFilter.setKeepMode(int)",1,1,1
"org.apache.lucene.search.DuplicateFilter.setProcessingMode(int)",1,1,1
"org.apache.lucene.search.DuplicateFilterTest.addDoc(RandomIndexWriter,String,String,String)",1,1,1
"org.apache.lucene.search.DuplicateFilterTest.setUp()",1,1,1
"org.apache.lucene.search.DuplicateFilterTest.tearDown()",1,1,1
"org.apache.lucene.search.DuplicateFilterTest.testDefaultFilter()",1,2,2
"org.apache.lucene.search.DuplicateFilterTest.testFastFilter()",1,2,2
"org.apache.lucene.search.DuplicateFilterTest.testKeepsFirstFilter()",1,2,2
"org.apache.lucene.search.DuplicateFilterTest.testKeepsLastFilter()",1,3,3
"org.apache.lucene.search.DuplicateFilterTest.testNoFilter()",1,3,3
"org.apache.lucene.search.ElevationComparatorSource.ElevationComparatorSource(Map<String, Integer>)",1,1,1
"org.apache.lucene.search.ElevationComparatorSource.newComparator(String,int,int,boolean)",1,2,2
"org.apache.lucene.search.ExactPhraseScorer.ChunkState.ChunkState(TermPositions,int,boolean)",1,1,1
"org.apache.lucene.search.ExactPhraseScorer.ExactPhraseScorer(Weight,PostingsAndFreq[],Similarity,byte[])",3,4,5
"org.apache.lucene.search.ExactPhraseScorer.advance(int)",10,7,10
"org.apache.lucene.search.ExactPhraseScorer.docID()",1,1,1
"org.apache.lucene.search.ExactPhraseScorer.freq()",1,1,1
"org.apache.lucene.search.ExactPhraseScorer.nextDoc()",14,11,14
"org.apache.lucene.search.ExactPhraseScorer.phraseFreq()",11,8,22
"org.apache.lucene.search.ExactPhraseScorer.score()",1,3,3
"org.apache.lucene.search.ExactPhraseScorer.toString()",1,1,1
"org.apache.lucene.search.Explanation.Explanation()",1,1,1
"org.apache.lucene.search.Explanation.Explanation(float,String)",1,1,1
"org.apache.lucene.search.Explanation.addDetail(Explanation)",1,1,2
"org.apache.lucene.search.Explanation.getDescription()",1,1,1
"org.apache.lucene.search.Explanation.getDetails()",2,1,2
"org.apache.lucene.search.Explanation.getSummary()",1,1,1
"org.apache.lucene.search.Explanation.getValue()",1,1,1
"org.apache.lucene.search.Explanation.isMatch()",1,1,1
"org.apache.lucene.search.Explanation.setDescription(String)",1,1,1
"org.apache.lucene.search.Explanation.setValue(float)",1,1,1
"org.apache.lucene.search.Explanation.toHtml()",1,3,3
"org.apache.lucene.search.Explanation.toString()",1,1,1
"org.apache.lucene.search.Explanation.toString(int)",1,4,4
"org.apache.lucene.search.FieldCache.CacheEntry.estimateSize()",1,1,1
"org.apache.lucene.search.FieldCache.CacheEntry.getEstimatedSize()",1,1,1
"org.apache.lucene.search.FieldCache.CacheEntry.setEstimatedSize(String)",1,1,1
"org.apache.lucene.search.FieldCache.CacheEntry.toString()",1,2,2
"org.apache.lucene.search.FieldCache.StringIndex.StringIndex(int[],String[])",1,1,1
"org.apache.lucene.search.FieldCache.StringIndex.binarySearchLookup(String)",5,2,5
"org.apache.lucene.search.FieldCacheDocIdSet.FieldCacheDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.search.FieldCacheDocIdSet.isCacheable()",1,1,1
"org.apache.lucene.search.FieldCacheDocIdSet.iterator()",11,5,11
"org.apache.lucene.search.FieldCacheImpl.ByteCache.ByteCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.ByteCache.createValue(IndexReader,Entry,boolean)",4,7,10
"org.apache.lucene.search.FieldCacheImpl.Cache.Cache()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.Cache.Cache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.Cache.get(IndexReader,Entry,boolean)",2,8,9
"org.apache.lucene.search.FieldCacheImpl.Cache.printNewInsanity(PrintStream,Object)",4,4,4
"org.apache.lucene.search.FieldCacheImpl.Cache.purge(IndexReader)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.Cache.put(IndexReader,Entry,Object)",1,4,4
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.CacheEntryImpl(Object,String,Class<?>,Object,Object)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getCacheType()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getCustom()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getFieldName()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getReaderKey()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getValue()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.DocsWithFieldCache.DocsWithFieldCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.DocsWithFieldCache.createValue(IndexReader,Entry,boolean)",5,7,8
"org.apache.lucene.search.FieldCacheImpl.DoubleCache.DoubleCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.DoubleCache.createValue(IndexReader,Entry,boolean)",4,8,13
"org.apache.lucene.search.FieldCacheImpl.Entry.Entry(String,Object)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.Entry.equals(Object)",6,4,6
"org.apache.lucene.search.FieldCacheImpl.Entry.hashCode()",1,2,2
"org.apache.lucene.search.FieldCacheImpl.FieldCacheImpl()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.FloatCache.FloatCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.FloatCache.createValue(IndexReader,Entry,boolean)",4,8,13
"org.apache.lucene.search.FieldCacheImpl.IntCache.IntCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.IntCache.createValue(IndexReader,Entry,boolean)",4,8,13
"org.apache.lucene.search.FieldCacheImpl.LongCache.LongCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.LongCache.createValue(IndexReader,Entry,boolean)",4,8,13
"org.apache.lucene.search.FieldCacheImpl.ShortCache.ShortCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.ShortCache.createValue(IndexReader,Entry,boolean)",4,7,10
"org.apache.lucene.search.FieldCacheImpl.StringCache.StringCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.StringCache.createValue(IndexReader,Entry,boolean)",4,4,6
"org.apache.lucene.search.FieldCacheImpl.StringIndexCache.StringIndexCache(FieldCacheImpl)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.StringIndexCache.createValue(IndexReader,Entry,boolean)",3,7,8
"org.apache.lucene.search.FieldCacheImpl.getBytes(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getBytes(IndexReader,String,ByteParser)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getBytes(IndexReader,String,ByteParser,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getCacheEntries()",4,4,5
"org.apache.lucene.search.FieldCacheImpl.getDocsWithField(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getDoubles(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getDoubles(IndexReader,String,DoubleParser)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getDoubles(IndexReader,String,DoubleParser,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getFloats(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getFloats(IndexReader,String,FloatParser)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getFloats(IndexReader,String,FloatParser,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getInfoStream()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getInts(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getInts(IndexReader,String,IntParser)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getInts(IndexReader,String,IntParser,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getLongs(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getLongs(IndexReader,String,LongParser)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getLongs(IndexReader,String,LongParser,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getShorts(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getShorts(IndexReader,String,ShortParser)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getShorts(IndexReader,String,ShortParser,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getStringIndex(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.getStrings(IndexReader,String)",1,1,1
"org.apache.lucene.search.FieldCacheImpl.init()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.purge(IndexReader)",1,2,2
"org.apache.lucene.search.FieldCacheImpl.purgeAllCaches()",1,1,1
"org.apache.lucene.search.FieldCacheImpl.setDocsWithField(IndexReader,String,Bits)",1,3,4
"org.apache.lucene.search.FieldCacheImpl.setInfoStream(PrintStream)",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.FieldCacheRangeFilter(String,Parser,T,T,boolean,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.equals(Object)",7,6,12
"org.apache.lucene.search.FieldCacheRangeFilter.getField()",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.getLowerVal()",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.getParser()",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.getUpperVal()",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.hashCode()",1,4,6
"org.apache.lucene.search.FieldCacheRangeFilter.includesLower()",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.includesUpper()",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newByteRange(String,Byte,Byte,boolean,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newByteRange(String,ByteParser,Byte,Byte,boolean,boolean)",6,3,11
"org.apache.lucene.search.FieldCacheRangeFilter.newDoubleRange(String,Double,Double,boolean,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newDoubleRange(String,DoubleParser,Double,Double,boolean,boolean)",6,7,13
"org.apache.lucene.search.FieldCacheRangeFilter.newFloatRange(String,Float,Float,boolean,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newFloatRange(String,FloatParser,Float,Float,boolean,boolean)",6,7,13
"org.apache.lucene.search.FieldCacheRangeFilter.newIntRange(String,IntParser,Integer,Integer,boolean,boolean)",6,3,11
"org.apache.lucene.search.FieldCacheRangeFilter.newIntRange(String,Integer,Integer,boolean,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newLongRange(String,Long,Long,boolean,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newLongRange(String,LongParser,Long,Long,boolean,boolean)",6,3,11
"org.apache.lucene.search.FieldCacheRangeFilter.newShortRange(String,Short,Short,boolean,boolean)",1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newShortRange(String,ShortParser,Short,Short,boolean,boolean)",6,3,11
"org.apache.lucene.search.FieldCacheRangeFilter.newStringRange(String,String,String,boolean,boolean)",2,4,13
"org.apache.lucene.search.FieldCacheRangeFilter.toString()",1,3,5
"org.apache.lucene.search.FieldCacheTermsFilter.FieldCacheTermsFilter(String,String...)",1,1,1
"org.apache.lucene.search.FieldCacheTermsFilter.getDocIdSet(IndexReader)",1,3,3
"org.apache.lucene.search.FieldCacheTermsFilter.getFieldCache()",1,1,1
"org.apache.lucene.search.FieldComparator.ByteComparator.ByteComparator(int,String,Parser,Byte)",1,1,1
"org.apache.lucene.search.FieldComparator.ByteComparator.compare(int,int)",1,1,1
"org.apache.lucene.search.FieldComparator.ByteComparator.compareBottom(int)",1,3,4
"org.apache.lucene.search.FieldComparator.ByteComparator.copy(int,int)",1,3,4
"org.apache.lucene.search.FieldComparator.ByteComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.ByteComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.ByteComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.DocComparator(int)",1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.compare(int,int)",1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.compareBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.copy(int,int)",1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.DoubleComparator.DoubleComparator(int,String,Parser,Double)",1,1,1
"org.apache.lucene.search.FieldComparator.DoubleComparator.compare(int,int)",3,1,3
"org.apache.lucene.search.FieldComparator.DoubleComparator.compareBottom(int)",3,3,6
"org.apache.lucene.search.FieldComparator.DoubleComparator.copy(int,int)",1,3,4
"org.apache.lucene.search.FieldComparator.DoubleComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.DoubleComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.DoubleComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.FloatComparator.FloatComparator(int,String,Parser,Float)",1,1,1
"org.apache.lucene.search.FieldComparator.FloatComparator.compare(int,int)",3,1,3
"org.apache.lucene.search.FieldComparator.FloatComparator.compareBottom(int)",3,3,6
"org.apache.lucene.search.FieldComparator.FloatComparator.copy(int,int)",1,3,4
"org.apache.lucene.search.FieldComparator.FloatComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.FloatComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.FloatComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.IntComparator.IntComparator(int,String,Parser,Integer)",1,1,1
"org.apache.lucene.search.FieldComparator.IntComparator.compare(int,int)",3,1,3
"org.apache.lucene.search.FieldComparator.IntComparator.compareBottom(int)",3,3,6
"org.apache.lucene.search.FieldComparator.IntComparator.copy(int,int)",1,3,4
"org.apache.lucene.search.FieldComparator.IntComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.IntComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.IntComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.LongComparator.LongComparator(int,String,Parser,Long)",1,1,1
"org.apache.lucene.search.FieldComparator.LongComparator.compare(int,int)",3,1,3
"org.apache.lucene.search.FieldComparator.LongComparator.compareBottom(int)",3,3,6
"org.apache.lucene.search.FieldComparator.LongComparator.copy(int,int)",1,3,4
"org.apache.lucene.search.FieldComparator.LongComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.LongComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.LongComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.NumericComparator.NumericComparator(String,T)",1,1,1
"org.apache.lucene.search.FieldComparator.NumericComparator.setNextReader(IndexReader,int)",1,2,3
"org.apache.lucene.search.FieldComparator.RelevanceComparator.RelevanceComparator(int)",1,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.compare(int,int)",1,1,3
"org.apache.lucene.search.FieldComparator.RelevanceComparator.compareBottom(int)",1,1,3
"org.apache.lucene.search.FieldComparator.RelevanceComparator.compareValues(Float,Float)",1,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.copy(int,int)",1,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.setScorer(Scorer)",1,1,2
"org.apache.lucene.search.FieldComparator.RelevanceComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.ShortComparator.ShortComparator(int,String,Parser,Short)",1,1,1
"org.apache.lucene.search.FieldComparator.ShortComparator.compare(int,int)",1,1,1
"org.apache.lucene.search.FieldComparator.ShortComparator.compareBottom(int)",1,3,4
"org.apache.lucene.search.FieldComparator.ShortComparator.copy(int,int)",1,3,4
"org.apache.lucene.search.FieldComparator.ShortComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.ShortComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.ShortComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.StringComparatorLocale(int,String,Locale)",1,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.compare(int,int)",4,1,4
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.compareBottom(int)",4,1,4
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.compareValues(String,String)",4,1,4
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.copy(int,int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.StringOrdValComparator(int,String,int,boolean)",1,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.compare(int,int)",5,1,5
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.compareBottom(int)",3,1,3
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.compareValues(String,String)",4,1,4
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.copy(int,int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.getBottomSlot()",1,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.getField()",1,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.getValues()",1,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.setBottom(int)",1,3,4
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.setNextReader(IndexReader,int)",1,2,2
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.StringValComparator(int,String)",1,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.compare(int,int)",4,1,4
"org.apache.lucene.search.FieldComparator.StringValComparator.compareBottom(int)",4,1,4
"org.apache.lucene.search.FieldComparator.StringValComparator.compareValues(String,String)",4,3,4
"org.apache.lucene.search.FieldComparator.StringValComparator.copy(int,int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.value(int)",1,1,1
"org.apache.lucene.search.FieldComparator.binarySearch(String[],String)",1,1,1
"org.apache.lucene.search.FieldComparator.binarySearch(String[],String,int,int)",4,3,5
"org.apache.lucene.search.FieldComparator.compareValues(T,T)",4,3,4
"org.apache.lucene.search.FieldComparator.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.FieldDoc.FieldDoc(int,float)",1,1,1
"org.apache.lucene.search.FieldDoc.FieldDoc(int,float,Object[])",1,1,1
"org.apache.lucene.search.FieldDoc.FieldDoc(int,float,Object[],int)",1,1,1
"org.apache.lucene.search.FieldDoc.toString()",1,2,2
"org.apache.lucene.search.FieldDocSortedHitQueue.FieldDocSortedHitQueue(int)",1,1,1
"org.apache.lucene.search.FieldDocSortedHitQueue.getFields()",1,1,1
"org.apache.lucene.search.FieldDocSortedHitQueue.hasCollators(SortField[])",2,3,4
"org.apache.lucene.search.FieldDocSortedHitQueue.lessThan(FieldDoc,FieldDoc)",2,6,10
"org.apache.lucene.search.FieldDocSortedHitQueue.setFields(SortField[])",1,2,2
"org.apache.lucene.search.FieldValueFilter.FieldValueFilter(String)",1,1,1
"org.apache.lucene.search.FieldValueFilter.FieldValueFilter(String,boolean)",1,1,1
"org.apache.lucene.search.FieldValueFilter.equals(Object)",8,2,8
"org.apache.lucene.search.FieldValueFilter.field()",1,1,1
"org.apache.lucene.search.FieldValueFilter.getDocIdSet(IndexReader)",5,4,6
"org.apache.lucene.search.FieldValueFilter.hashCode()",1,2,3
"org.apache.lucene.search.FieldValueFilter.negate()",1,1,1
"org.apache.lucene.search.FieldValueFilter.toString()",1,1,1
"org.apache.lucene.search.FieldValueHitQueue.Entry.Entry(int,int,float)",1,1,1
"org.apache.lucene.search.FieldValueHitQueue.Entry.toString()",1,1,1
"org.apache.lucene.search.FieldValueHitQueue.FieldValueHitQueue(SortField[])",1,1,1
"org.apache.lucene.search.FieldValueHitQueue.MultiComparatorsFieldValueHitQueue.MultiComparatorsFieldValueHitQueue(SortField[],int)",1,2,3
"org.apache.lucene.search.FieldValueHitQueue.MultiComparatorsFieldValueHitQueue.lessThan(Entry,Entry)",3,2,3
"org.apache.lucene.search.FieldValueHitQueue.OneComparatorFieldValueHitQueue.OneComparatorFieldValueHitQueue(SortField[],int)",1,1,2
"org.apache.lucene.search.FieldValueHitQueue.OneComparatorFieldValueHitQueue.lessThan(Entry,Entry)",2,1,2
"org.apache.lucene.search.FieldValueHitQueue.create(SortField[],int)",3,1,3
"org.apache.lucene.search.FieldValueHitQueue.fillFields(Entry)",1,2,2
"org.apache.lucene.search.FieldValueHitQueue.getComparators()",1,1,1
"org.apache.lucene.search.FieldValueHitQueue.getFields()",1,1,1
"org.apache.lucene.search.FieldValueHitQueue.getReverseMul()",1,1,1
"org.apache.lucene.search.FilterClause.FilterClause(Filter,Occur)",1,1,1
"org.apache.lucene.search.FilterClause.equals(Object)",3,2,5
"org.apache.lucene.search.FilterClause.getFilter()",1,1,1
"org.apache.lucene.search.FilterClause.getOccur()",1,1,1
"org.apache.lucene.search.FilterClause.hashCode()",1,1,1
"org.apache.lucene.search.FilterClause.toString()",1,1,1
"org.apache.lucene.search.FilterManager.FilterCleaner.FilterCleaner()",3,1,3
"org.apache.lucene.search.FilterManager.FilterCleaner.run()",2,5,6
"org.apache.lucene.search.FilterManager.FilterItem.FilterItem(Filter)",1,1,1
"org.apache.lucene.search.FilterManager.FilterManager()",1,1,1
"org.apache.lucene.search.FilterManager.getFilter(Filter)",2,2,2
"org.apache.lucene.search.FilterManager.getInstance()",1,1,2
"org.apache.lucene.search.FilterManager.setCacheSize(int)",1,1,1
"org.apache.lucene.search.FilterManager.setCleanThreadSleepTime(long)",1,1,1
"org.apache.lucene.search.FilteredDocIdSet.FilteredDocIdSet(DocIdSet)",1,1,1
"org.apache.lucene.search.FilteredDocIdSet.isCacheable()",1,1,1
"org.apache.lucene.search.FilteredDocIdSet.iterator()",2,1,2
"org.apache.lucene.search.FilteredDocIdSetIterator.FilteredDocIdSetIterator(DocIdSetIterator)",2,1,2
"org.apache.lucene.search.FilteredDocIdSetIterator.advance(int)",5,4,5
"org.apache.lucene.search.FilteredDocIdSetIterator.docID()",1,1,1
"org.apache.lucene.search.FilteredDocIdSetIterator.nextDoc()",3,2,3
"org.apache.lucene.search.FilteredQuery.FilteredQuery(Query,Filter)",1,1,1
"org.apache.lucene.search.FilteredQuery.createWeight(Searcher)",2,4,4
"org.apache.lucene.search.FilteredQuery.equals(Object)",2,4,4
"org.apache.lucene.search.FilteredQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.FilteredQuery.getFilter()",1,1,1
"org.apache.lucene.search.FilteredQuery.getFilteredScorer(IndexReader,Similarity,Weight,Weight,Filter)",9,9,12
"org.apache.lucene.search.FilteredQuery.getQuery()",1,1,1
"org.apache.lucene.search.FilteredQuery.hashCode()",1,1,1
"org.apache.lucene.search.FilteredQuery.rewrite(IndexReader)",2,2,2
"org.apache.lucene.search.FilteredQuery.toString(String)",1,1,1
"org.apache.lucene.search.FilteredTermEnum.FilteredTermEnum()",1,1,1
"org.apache.lucene.search.FilteredTermEnum.close()",1,2,2
"org.apache.lucene.search.FilteredTermEnum.docFreq()",2,1,2
"org.apache.lucene.search.FilteredTermEnum.next()",6,3,6
"org.apache.lucene.search.FilteredTermEnum.setEnum(TermEnum)",1,3,3
"org.apache.lucene.search.FilteredTermEnum.term()",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.FieldVals.FieldVals(String,float,int,String)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.FieldVals.equals(Object)",12,3,12
"org.apache.lucene.search.FuzzyLikeThisQuery.FieldVals.hashCode()",1,3,3
"org.apache.lucene.search.FuzzyLikeThisQuery.FuzzyLikeThisQuery(int,Analyzer)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.FuzzyTermQuery.FuzzyTermQuery(Term,boolean)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.FuzzyTermQuery.getSimilarity(Searcher)",2,1,2
"org.apache.lucene.search.FuzzyLikeThisQuery.ScoreTerm.ScoreTerm(Term,float,Term)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.ScoreTermQueue.ScoreTermQueue(int)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.ScoreTermQueue.lessThan(ScoreTerm,ScoreTerm)",2,2,2
"org.apache.lucene.search.FuzzyLikeThisQuery.addTerms(IndexReader,FieldVals)",2,10,12
"org.apache.lucene.search.FuzzyLikeThisQuery.addTerms(String,String,float,int)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.equals(Object)",12,3,12
"org.apache.lucene.search.FuzzyLikeThisQuery.hashCode()",1,3,4
"org.apache.lucene.search.FuzzyLikeThisQuery.isIgnoreTF()",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.rewrite(IndexReader)",2,7,8
"org.apache.lucene.search.FuzzyLikeThisQuery.setIgnoreTF(boolean)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.toString(String)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.addDoc(RandomIndexWriter,String,String)",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.setUp()",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.tearDown()",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.testClosestEditDistanceMatchComesFirst()",1,1,2
"org.apache.lucene.search.FuzzyLikeThisQueryTest.testFuzzyLikeThisQueryEquals()",1,1,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.testMultiWord()",1,1,2
"org.apache.lucene.search.FuzzyLikeThisQueryTest.testNoMatchFirstWordBug()",1,1,2
"org.apache.lucene.search.FuzzyQuery.FuzzyQuery(Term)",1,1,1
"org.apache.lucene.search.FuzzyQuery.FuzzyQuery(Term,float)",1,1,1
"org.apache.lucene.search.FuzzyQuery.FuzzyQuery(Term,float,int)",1,1,1
"org.apache.lucene.search.FuzzyQuery.FuzzyQuery(Term,float,int,int)",5,1,6
"org.apache.lucene.search.FuzzyQuery.equals(Object)",9,2,9
"org.apache.lucene.search.FuzzyQuery.getEnum(IndexReader)",2,1,2
"org.apache.lucene.search.FuzzyQuery.getMinSimilarity()",1,1,1
"org.apache.lucene.search.FuzzyQuery.getPrefixLength()",1,1,1
"org.apache.lucene.search.FuzzyQuery.getTerm()",1,1,1
"org.apache.lucene.search.FuzzyQuery.hashCode()",1,2,2
"org.apache.lucene.search.FuzzyQuery.toString(String)",1,2,2
"org.apache.lucene.search.FuzzyTermEnum.FuzzyTermEnum(IndexReader,Term)",1,1,1
"org.apache.lucene.search.FuzzyTermEnum.FuzzyTermEnum(IndexReader,Term,float)",1,1,1
"org.apache.lucene.search.FuzzyTermEnum.FuzzyTermEnum(IndexReader,Term,float,int)",4,1,5
"org.apache.lucene.search.FuzzyTermEnum.calculateMaxDistance(int)",1,1,1
"org.apache.lucene.search.FuzzyTermEnum.close()",1,1,1
"org.apache.lucene.search.FuzzyTermEnum.difference()",1,1,1
"org.apache.lucene.search.FuzzyTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.FuzzyTermEnum.similarity(String)",6,8,12
"org.apache.lucene.search.FuzzyTermEnum.termCompare(Term)",2,3,3
"org.apache.lucene.search.HitQueue.HitQueue(int,boolean)",1,1,1
"org.apache.lucene.search.HitQueue.getSentinelObject()",1,1,2
"org.apache.lucene.search.HitQueue.lessThan(ScoreDoc,ScoreDoc)",2,1,2
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.ExecutionHelper(Executor)",1,1,1
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.hasNext()",1,1,1
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.iterator()",1,1,1
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.next()",2,1,4
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.remove()",1,1,1
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.submit(Callable<T>)",1,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(Directory)",1,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(Directory,boolean)",1,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader)",1,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,ExecutorService)",1,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,IndexReader[],int[])",1,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,IndexReader[],int[],ExecutorService)",1,1,3
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,boolean,ExecutorService)",1,2,4
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,int)",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableNoSort.MultiSearcherCallableNoSort(Lock,IndexSearcher,Weight,Filter,ScoreDoc,int,HitQueue)",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableNoSort.call()",3,3,4
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.FakeScorer()",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.advance(int)",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.docID()",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.freq()",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.nextDoc()",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.score()",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.MultiSearcherCallableWithSort(Lock,IndexSearcher,Weight,Filter,int,TopFieldCollector,Sort)",1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.call()",3,5,5
"org.apache.lucene.search.IndexSearcher.close()",1,2,2
"org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query)",1,1,1
"org.apache.lucene.search.IndexSearcher.doc(int)",1,1,1
"org.apache.lucene.search.IndexSearcher.doc(int,FieldSelector)",1,1,1
"org.apache.lucene.search.IndexSearcher.docFreq(Term)",2,4,4
"org.apache.lucene.search.IndexSearcher.explain(Query,int)",1,1,1
"org.apache.lucene.search.IndexSearcher.explain(Weight,int)",1,1,1
"org.apache.lucene.search.IndexSearcher.gatherSubReaders(List<IndexReader>,IndexReader)",1,1,1
"org.apache.lucene.search.IndexSearcher.getIndexReader()",1,1,1
"org.apache.lucene.search.IndexSearcher.getSimilarity()",1,1,1
"org.apache.lucene.search.IndexSearcher.getSubReaders()",1,1,1
"org.apache.lucene.search.IndexSearcher.maxDoc()",1,1,1
"org.apache.lucene.search.IndexSearcher.rewrite(Query)",1,1,2
"org.apache.lucene.search.IndexSearcher.search(Query,Collector)",1,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,Filter,Collector)",1,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,Filter,int)",1,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,int)",1,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,int,Sort)",1,1,1
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,Collector)",1,4,4
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,ScoreDoc,int)",2,6,7
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,int)",1,1,1
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,int,Sort,boolean)",3,5,7
"org.apache.lucene.search.IndexSearcher.searchAfter(ScoreDoc,Query,Filter,int)",1,1,1
"org.apache.lucene.search.IndexSearcher.searchAfter(ScoreDoc,Query,int)",1,1,1
"org.apache.lucene.search.IndexSearcher.setDefaultFieldSortScoring(boolean,boolean)",1,3,3
"org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity)",1,1,1
"org.apache.lucene.search.IndexSearcher.toString()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileCollector.collect(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileDocIdSet.iterator()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileDocIdSetIterator.advance(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileDocIdSetIterator.docID()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileDocIdSetIterator.nextDoc()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileExtendedFieldCacheDoubleParser.parseDouble(String)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileExtendedFieldCacheLongParser.parseLong(String)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFieldComparator.compare(int,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFieldComparator.compareBottom(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFieldComparator.copy(int,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFieldComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFieldComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFieldComparator.value(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFieldComparatorSource.newComparator(String,int,int,boolean)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFilteredDocIdSet.JustCompileFilteredDocIdSet(DocIdSet)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFilteredDocIdSet.match(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFilteredDocIdSetIterator.JustCompileFilteredDocIdSetIterator(DocIdSetIterator)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFilteredDocIdSetIterator.match(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFilteredTermEnum.difference()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFilteredTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileFilteredTermEnum.termCompare(Term)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompilePhraseScorer.JustCompilePhraseScorer(Weight,PostingsAndFreq[],Similarity,byte[])",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompilePhraseScorer.phraseFreq()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileQuery.toString(String)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileScorer.JustCompileScorer(Weight)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileScorer.advance(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileScorer.docID()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileScorer.nextDoc()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileScorer.score()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileScorer.score(Collector,int,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.close()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.createNormalizedWeight(Query)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.doc(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.doc(int,FieldSelector)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.docFreq(Term)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.docFreqs(Term[])",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.explain(Query,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.explain(Weight,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.getSimilarity()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.maxDoc()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.rewrite(Query)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.search(Query,Collector)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.search(Query,Filter,Collector)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.search(Query,Filter,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.search(Query,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.search(Query,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.search(Weight,Filter,Collector)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.search(Weight,Filter,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.search(Weight,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSearcher.setSimilarity(Similarity)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSimilarity.coord(int,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSimilarity.idf(int,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSimilarity.queryNorm(float)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSimilarity.sloppyFreq(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSimilarity.tf(float)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSpanFilter.bitSpans(IndexReader)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileSpanFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileTopDocsCollector.JustCompileTopDocsCollector(PriorityQueue<ScoreDoc>)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileTopDocsCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileTopDocsCollector.collect(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileTopDocsCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileTopDocsCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileTopDocsCollector.topDocs()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileTopDocsCollector.topDocs(int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileTopDocsCollector.topDocs(int,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileWeight.explain(IndexReader,int)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileWeight.getQuery()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileWeight.getValue()",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileWeight.normalize(float)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileWeight.scorer(IndexReader,boolean,boolean)",1,1,1
"org.apache.lucene.search.JustCompileSearch.JustCompileWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsQuery()",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsQuery(String)",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.MatchAllDocsWeight(Searcher)",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.explain(IndexReader,int)",1,2,2
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.getQuery()",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.getValue()",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.normalize(float)",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.scorer(IndexReader,boolean,boolean)",1,2,2
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.toString()",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.MatchAllScorer(IndexReader,Similarity,Weight,byte[])",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.advance(int)",1,2,2
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.docID()",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.nextDoc()",1,2,2
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.score()",1,2,2
"org.apache.lucene.search.MatchAllDocsQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.equals(Object)",2,1,2
"org.apache.lucene.search.MatchAllDocsQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.hashCode()",1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.toString(String)",1,1,1
"org.apache.lucene.search.MockFilter.clear()",1,1,1
"org.apache.lucene.search.MockFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.search.MockFilter.wasCalled()",1,1,1
"org.apache.lucene.search.MultiCollector.MultiCollector(Collector...)",1,1,1
"org.apache.lucene.search.MultiCollector.acceptsDocsOutOfOrder()",3,2,3
"org.apache.lucene.search.MultiCollector.collect(int)",1,2,2
"org.apache.lucene.search.MultiCollector.setNextReader(IndexReader,int)",1,2,2
"org.apache.lucene.search.MultiCollector.setScorer(Scorer)",1,2,2
"org.apache.lucene.search.MultiCollector.wrap(Collector...)",6,1,10
"org.apache.lucene.search.MultiCollectorTest.DummyCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.MultiCollectorTest.DummyCollector.collect(int)",1,1,1
"org.apache.lucene.search.MultiCollectorTest.DummyCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.MultiCollectorTest.DummyCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.MultiCollectorTest.testCollector()",1,2,2
"org.apache.lucene.search.MultiCollectorTest.testNullCollectors()",1,1,2
"org.apache.lucene.search.MultiCollectorTest.testSingleCollector()",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.MultiPhraseWeight(Searcher)",1,3,3
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.explain(IndexReader,int)",3,4,6
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.getQuery()",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.getValue()",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.normalize(float)",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.scorer(IndexReader,boolean,boolean)",7,6,9
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.add(Term)",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.add(Term[])",1,2,2
"org.apache.lucene.search.MultiPhraseQuery.add(Term[],int)",3,3,4
"org.apache.lucene.search.MultiPhraseQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.equals(Object)",2,4,5
"org.apache.lucene.search.MultiPhraseQuery.extractTerms(Set<Term>)",1,3,3
"org.apache.lucene.search.MultiPhraseQuery.getPositions()",1,2,2
"org.apache.lucene.search.MultiPhraseQuery.getSlop()",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.getTermArrays()",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.hashCode()",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.rewrite(IndexReader)",2,3,3
"org.apache.lucene.search.MultiPhraseQuery.setSlop(int)",1,1,1
"org.apache.lucene.search.MultiPhraseQuery.termArraysEquals(List<Term[]>,List<Term[]>)",4,3,5
"org.apache.lucene.search.MultiPhraseQuery.termArraysHashCode()",1,3,3
"org.apache.lucene.search.MultiPhraseQuery.toString(String)",1,10,10
"org.apache.lucene.search.MultiSearcher.CachedDfSource.CachedDfSource(Map<Term, Integer>,int,Similarity)",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.close()",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.doc(int)",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.doc(int,FieldSelector)",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.docFreq(Term)",1,2,2
"org.apache.lucene.search.MultiSearcher.CachedDfSource.docFreqs(Term[])",1,2,2
"org.apache.lucene.search.MultiSearcher.CachedDfSource.explain(Weight,int)",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.maxDoc()",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.rewrite(Query)",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.search(Weight,Filter,Collector)",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.search(Weight,Filter,int)",1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.search(Weight,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.MultiSearcher.MultiSearcher(Searchable...)",1,2,2
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableNoSort.MultiSearcherCallableNoSort(Lock,Searchable,Weight,Filter,int,HitQueue,int,int[])",1,1,1
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableNoSort.call()",3,2,3
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableWithSort.MultiSearcherCallableWithSort(Lock,Searchable,Weight,Filter,int,FieldDocSortedHitQueue,Sort,int,int[])",1,1,1
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableWithSort.call()",5,5,6
"org.apache.lucene.search.MultiSearcher.close()",1,2,2
"org.apache.lucene.search.MultiSearcher.createDocFrequencyMap(Set<Term>)",1,3,4
"org.apache.lucene.search.MultiSearcher.createNormalizedWeight(Query)",1,1,1
"org.apache.lucene.search.MultiSearcher.doc(int)",1,1,1
"org.apache.lucene.search.MultiSearcher.doc(int,FieldSelector)",1,1,1
"org.apache.lucene.search.MultiSearcher.docFreq(Term)",1,2,2
"org.apache.lucene.search.MultiSearcher.explain(Weight,int)",1,1,1
"org.apache.lucene.search.MultiSearcher.getSearchables()",1,1,1
"org.apache.lucene.search.MultiSearcher.getStarts()",1,1,1
"org.apache.lucene.search.MultiSearcher.maxDoc()",1,1,1
"org.apache.lucene.search.MultiSearcher.rewrite(Query)",1,2,2
"org.apache.lucene.search.MultiSearcher.search(Weight,Filter,Collector)",1,2,2
"org.apache.lucene.search.MultiSearcher.search(Weight,Filter,int)",1,3,4
"org.apache.lucene.search.MultiSearcher.search(Weight,Filter,int,Sort)",1,3,3
"org.apache.lucene.search.MultiSearcher.subDoc(int)",1,1,1
"org.apache.lucene.search.MultiSearcher.subSearcher(int)",1,1,1
"org.apache.lucene.search.MultiTermQuery.MultiTermQuery()",1,1,1
"org.apache.lucene.search.MultiTermQuery.RewriteMethod.getTermsEnum(IndexReader,MultiTermQuery)",1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.TopTermsBoostOnlyBooleanQueryRewrite(int)",1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.addClause(BooleanQuery,Term,float)",1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.getMaxSize()",1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.getTopLevelQuery()",1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.TopTermsScoringBooleanQueryRewrite(int)",1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.addClause(BooleanQuery,Term,float)",1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.getMaxSize()",1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.getTopLevelQuery()",1,1,1
"org.apache.lucene.search.MultiTermQuery.clearTotalNumberOfTerms()",1,1,1
"org.apache.lucene.search.MultiTermQuery.equals(Object)",6,1,6
"org.apache.lucene.search.MultiTermQuery.getRewriteMethod()",1,1,1
"org.apache.lucene.search.MultiTermQuery.getTotalNumberOfTerms()",1,1,1
"org.apache.lucene.search.MultiTermQuery.hashCode()",1,1,1
"org.apache.lucene.search.MultiTermQuery.incTotalNumberOfTerms(int)",1,1,1
"org.apache.lucene.search.MultiTermQuery.rewrite(IndexReader)",1,1,1
"org.apache.lucene.search.MultiTermQuery.setRewriteMethod(RewriteMethod)",1,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.MultiTermQueryWrapperFilter(Q)",1,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.clearTotalNumberOfTerms()",1,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.equals(Object)",4,2,4
"org.apache.lucene.search.MultiTermQueryWrapperFilter.getDocIdSet(IndexReader)",6,5,7
"org.apache.lucene.search.MultiTermQueryWrapperFilter.getTotalNumberOfTerms()",1,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.hashCode()",1,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.toString()",1,1,1
"org.apache.lucene.search.MultiThreadTermVectorsReader.init(IndexReader)",1,1,1
"org.apache.lucene.search.MultiThreadTermVectorsReader.isAlive()",2,1,2
"org.apache.lucene.search.MultiThreadTermVectorsReader.run()",1,3,3
"org.apache.lucene.search.MultiThreadTermVectorsReader.testTermVectors()",1,2,2
"org.apache.lucene.search.MultiThreadTermVectorsReader.verifyVectors(TermFreqVector[],int)",1,4,4
"org.apache.lucene.search.NGramPhraseQuery.NGramPhraseQuery(int)",1,1,1
"org.apache.lucene.search.NGramPhraseQuery.equals(Object)",3,1,3
"org.apache.lucene.search.NGramPhraseQuery.hashCode()",1,1,1
"org.apache.lucene.search.NGramPhraseQuery.rewrite(IndexReader)",5,8,9
"org.apache.lucene.search.NRTManager.NRTManager(TrackingIndexWriter,SearcherFactory)",1,1,1
"org.apache.lucene.search.NRTManager.NRTManager(TrackingIndexWriter,SearcherFactory,boolean)",1,1,2
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.TrackingIndexWriter(IndexWriter)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addDocument(Document)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addDocument(Document,Analyzer)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addDocuments(Collection<Document>)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addDocuments(Collection<Document>,Analyzer)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addIndexes(Directory...)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addIndexes(IndexReader...)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteAll()",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteDocuments(Query)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteDocuments(Query...)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteDocuments(Term)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteDocuments(Term...)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.getAndIncrementGeneration()",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.getGeneration()",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.getIndexWriter()",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.updateDocument(Term,Document)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.updateDocument(Term,Document,Analyzer)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.updateDocuments(Term,Collection<Document>)",1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.updateDocuments(Term,Collection<Document>,Analyzer)",1,1,1
"org.apache.lucene.search.NRTManager.addWaitingListener(WaitingListener)",1,1,1
"org.apache.lucene.search.NRTManager.afterClose()",1,1,1
"org.apache.lucene.search.NRTManager.afterRefresh()",1,1,2
"org.apache.lucene.search.NRTManager.decRef(IndexSearcher)",1,1,1
"org.apache.lucene.search.NRTManager.getCurrentSearchingGen()",1,1,1
"org.apache.lucene.search.NRTManager.isSearcherCurrent()",1,1,1
"org.apache.lucene.search.NRTManager.refreshIfNeeded(IndexSearcher)",1,3,3
"org.apache.lucene.search.NRTManager.removeWaitingListener(WaitingListener)",1,1,1
"org.apache.lucene.search.NRTManager.tryIncRef(IndexSearcher)",1,1,1
"org.apache.lucene.search.NRTManager.waitForGeneration(long)",1,1,1
"org.apache.lucene.search.NRTManager.waitForGeneration(long,long,TimeUnit)",5,4,7
"org.apache.lucene.search.NRTManager.waitOnGenCondition(long,TimeUnit)",2,2,2
"org.apache.lucene.search.NRTManagerReopenThread.NRTManagerReopenThread(NRTManager,double,double)",2,1,2
"org.apache.lucene.search.NRTManagerReopenThread.close()",1,1,2
"org.apache.lucene.search.NRTManagerReopenThread.run()",5,5,9
"org.apache.lucene.search.NRTManagerReopenThread.waiting(long)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.NumericRangeFilter(NumericRangeQuery<T>)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.getField()",1,1,1
"org.apache.lucene.search.NumericRangeFilter.getMax()",1,1,1
"org.apache.lucene.search.NumericRangeFilter.getMin()",1,1,1
"org.apache.lucene.search.NumericRangeFilter.getPrecisionStep()",1,1,1
"org.apache.lucene.search.NumericRangeFilter.includesMax()",1,1,1
"org.apache.lucene.search.NumericRangeFilter.includesMin()",1,1,1
"org.apache.lucene.search.NumericRangeFilter.newDoubleRange(String,Double,Double,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.newDoubleRange(String,int,Double,Double,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.newFloatRange(String,Float,Float,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.newFloatRange(String,int,Float,Float,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.newIntRange(String,Integer,Integer,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.newIntRange(String,int,Integer,Integer,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.newLongRange(String,Long,Long,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeFilter.newLongRange(String,int,Long,Long,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeQuery(String,int,DataType,T,T,boolean,boolean)",3,4,9
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.NumericRangeTermEnum(IndexReader)",2,16,28
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.close()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.difference()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.next()",6,7,9
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.setEnum(TermEnum)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.termCompare(Term)",1,2,2
"org.apache.lucene.search.NumericRangeQuery.equals(Object)",4,9,11
"org.apache.lucene.search.NumericRangeQuery.getEnum(IndexReader)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.getField()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.getMax()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.getMin()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.getPrecisionStep()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.hashCode()",1,3,3
"org.apache.lucene.search.NumericRangeQuery.includesMax()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.includesMin()",1,1,1
"org.apache.lucene.search.NumericRangeQuery.newDoubleRange(String,Double,Double,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.newDoubleRange(String,int,Double,Double,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.newFloatRange(String,Float,Float,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.newFloatRange(String,int,Float,Float,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.newIntRange(String,Integer,Integer,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.newIntRange(String,int,Integer,Integer,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.newLongRange(String,Long,Long,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.newLongRange(String,int,Long,Long,boolean,boolean)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.readObject(ObjectInputStream)",1,1,1
"org.apache.lucene.search.NumericRangeQuery.toString(String)",1,4,6
"org.apache.lucene.search.ParallelMultiSearcher.DocumentFrequencyCallable.DocumentFrequencyCallable(Searchable,Term[])",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.DocumentFrequencyCallable.call()",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.ExecutionHelper(Executor)",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.hasNext()",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.iterator()",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.next()",2,1,4
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.remove()",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.submit(Callable<T>)",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ParallelMultiSearcher(ExecutorService,Searchable...)",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ParallelMultiSearcher(Searchable...)",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.close()",1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.createDocFrequencyMap(Set<Term>)",1,3,5
"org.apache.lucene.search.ParallelMultiSearcher.docFreq(Term)",1,3,3
"org.apache.lucene.search.ParallelMultiSearcher.search(Weight,Filter,Collector)",1,2,2
"org.apache.lucene.search.ParallelMultiSearcher.search(Weight,Filter,int)",1,4,4
"org.apache.lucene.search.ParallelMultiSearcher.search(Weight,Filter,int,Sort)",2,4,5
"org.apache.lucene.search.PayloadFilter.PayloadFilter(TokenStream,String)",1,1,1
"org.apache.lucene.search.PayloadFilter.incrementToken()",2,3,4
"org.apache.lucene.search.PhrasePositions.PhrasePositions(TermPositions,int,int,Term[])",1,1,1
"org.apache.lucene.search.PhrasePositions.firstPosition()",1,1,1
"org.apache.lucene.search.PhrasePositions.next()",2,2,2
"org.apache.lucene.search.PhrasePositions.nextPosition()",2,2,2
"org.apache.lucene.search.PhrasePositions.skipTo(int)",2,2,2
"org.apache.lucene.search.PhrasePositions.toString()",1,1,2
"org.apache.lucene.search.PhraseQuery.PhraseQuery()",1,1,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.PhraseWeight(Searcher)",1,1,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.explain(IndexReader,int)",2,6,7
"org.apache.lucene.search.PhraseQuery.PhraseWeight.getQuery()",1,1,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.getValue()",1,1,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.normalize(float)",1,1,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.scorer(IndexReader,boolean,boolean)",6,4,7
"org.apache.lucene.search.PhraseQuery.PhraseWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.toString()",1,1,1
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq.PostingsAndFreq(TermPositions,int,int,Term...)",1,3,4
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq.compareTo(PostingsAndFreq)",7,2,7
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq.equals(Object)",7,1,7
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq.hashCode()",1,2,2
"org.apache.lucene.search.PhraseQuery.add(Term)",1,2,2
"org.apache.lucene.search.PhraseQuery.add(Term,int)",3,2,4
"org.apache.lucene.search.PhraseQuery.createWeight(Searcher)",2,2,2
"org.apache.lucene.search.PhraseQuery.equals(Object)",2,4,5
"org.apache.lucene.search.PhraseQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.PhraseQuery.getPositions()",1,2,2
"org.apache.lucene.search.PhraseQuery.getSlop()",1,1,1
"org.apache.lucene.search.PhraseQuery.getTerms()",1,1,1
"org.apache.lucene.search.PhraseQuery.hashCode()",1,1,1
"org.apache.lucene.search.PhraseQuery.rewrite(IndexReader)",2,2,2
"org.apache.lucene.search.PhraseQuery.setSlop(int)",1,1,1
"org.apache.lucene.search.PhraseQuery.toString(String)",1,9,9
"org.apache.lucene.search.PhraseQueue.PhraseQueue(int)",1,1,1
"org.apache.lucene.search.PhraseQueue.lessThan(PhrasePositions,PhrasePositions)",4,1,4
"org.apache.lucene.search.PhraseScorer.PhraseScorer(Weight,PostingsAndFreq[],Similarity,byte[])",1,1,3
"org.apache.lucene.search.PhraseScorer.advance(int)",5,3,6
"org.apache.lucene.search.PhraseScorer.advanceMin(int)",2,1,2
"org.apache.lucene.search.PhraseScorer.docID()",1,1,1
"org.apache.lucene.search.PhraseScorer.freq()",1,1,1
"org.apache.lucene.search.PhraseScorer.nextDoc()",1,1,1
"org.apache.lucene.search.PhraseScorer.score()",1,2,2
"org.apache.lucene.search.PhraseScorer.toString()",1,1,1
"org.apache.lucene.search.PositiveScoresOnlyCollector.PositiveScoresOnlyCollector(Collector)",1,1,1
"org.apache.lucene.search.PositiveScoresOnlyCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.PositiveScoresOnlyCollector.collect(int)",1,2,2
"org.apache.lucene.search.PositiveScoresOnlyCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.PositiveScoresOnlyCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.PrefixFilter.PrefixFilter(Term)",1,1,1
"org.apache.lucene.search.PrefixFilter.getPrefix()",1,1,1
"org.apache.lucene.search.PrefixFilter.toString()",1,1,1
"org.apache.lucene.search.PrefixQuery.PrefixQuery(Term)",1,1,1
"org.apache.lucene.search.PrefixQuery.equals(Object)",7,2,7
"org.apache.lucene.search.PrefixQuery.getEnum(IndexReader)",1,1,1
"org.apache.lucene.search.PrefixQuery.getPrefix()",1,1,1
"org.apache.lucene.search.PrefixQuery.hashCode()",1,2,2
"org.apache.lucene.search.PrefixQuery.toString(String)",1,2,2
"org.apache.lucene.search.PrefixTermEnum.PrefixTermEnum(IndexReader,Term)",1,1,1
"org.apache.lucene.search.PrefixTermEnum.difference()",1,1,1
"org.apache.lucene.search.PrefixTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.PrefixTermEnum.getPrefixTerm()",1,1,1
"org.apache.lucene.search.PrefixTermEnum.termCompare(Term)",2,2,3
"org.apache.lucene.search.Query.clone()",1,2,2
"org.apache.lucene.search.Query.combine(Query[])",2,8,9
"org.apache.lucene.search.Query.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.Query.equals(Object)",5,1,5
"org.apache.lucene.search.Query.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.Query.getBoost()",1,1,1
"org.apache.lucene.search.Query.getSimilarity(Searcher)",1,1,1
"org.apache.lucene.search.Query.hashCode()",1,1,1
"org.apache.lucene.search.Query.mergeBooleanQueries(BooleanQuery...)",1,5,5
"org.apache.lucene.search.Query.rewrite(IndexReader)",1,1,1
"org.apache.lucene.search.Query.setBoost(float)",1,1,1
"org.apache.lucene.search.Query.toString()",1,1,1
"org.apache.lucene.search.Query.weight(Searcher)",1,1,1
"org.apache.lucene.search.QueryTermVector.QueryTermVector(String,Analyzer)",1,4,6
"org.apache.lucene.search.QueryTermVector.QueryTermVector(String[])",1,1,1
"org.apache.lucene.search.QueryTermVector.getField()",1,1,1
"org.apache.lucene.search.QueryTermVector.getTermFrequencies()",1,1,1
"org.apache.lucene.search.QueryTermVector.getTerms()",1,1,1
"org.apache.lucene.search.QueryTermVector.indexOf(String)",1,1,2
"org.apache.lucene.search.QueryTermVector.indexesOf(String[],int,int)",1,2,2
"org.apache.lucene.search.QueryTermVector.processTerms(String[])",1,5,5
"org.apache.lucene.search.QueryTermVector.size()",1,1,1
"org.apache.lucene.search.QueryTermVector.toString()",1,3,3
"org.apache.lucene.search.QueryUtils.check(Query)",1,1,1
"org.apache.lucene.search.QueryUtils.check(Random,Query,Searcher)",1,1,1
"org.apache.lucene.search.QueryUtils.check(Random,Query,Searcher,boolean)",1,5,6
"org.apache.lucene.search.QueryUtils.checkEqual(Query,Query)",1,1,1
"org.apache.lucene.search.QueryUtils.checkExplanations(Query,Searcher)",1,1,1
"org.apache.lucene.search.QueryUtils.checkFirstSkipTo(Query,IndexSearcher)",1,6,7
"org.apache.lucene.search.QueryUtils.checkHashEquals(Query)",1,1,1
"org.apache.lucene.search.QueryUtils.checkSerialization(Query,Searcher)",1,2,2
"org.apache.lucene.search.QueryUtils.checkSkipTo(Query,IndexSearcher)",3,10,21
"org.apache.lucene.search.QueryUtils.checkUnequal(Query,Query)",1,1,1
"org.apache.lucene.search.QueryUtils.makeEmptyIndex(Random,int)",1,3,3
"org.apache.lucene.search.QueryUtils.wrapSearcher(Random,Searcher,int)",1,4,7
"org.apache.lucene.search.QueryUtils.wrapUnderlyingReader(Random,IndexSearcher,int)",1,4,7
"org.apache.lucene.search.QueryWrapperFilter.QueryWrapperFilter(Query)",1,1,1
"org.apache.lucene.search.QueryWrapperFilter.equals(Object)",2,1,2
"org.apache.lucene.search.QueryWrapperFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.search.QueryWrapperFilter.hashCode()",1,1,1
"org.apache.lucene.search.QueryWrapperFilter.toString()",1,1,1
"org.apache.lucene.search.ReferenceManager.acquire()",3,1,3
"org.apache.lucene.search.ReferenceManager.afterClose()",1,1,1
"org.apache.lucene.search.ReferenceManager.afterRefresh()",1,1,1
"org.apache.lucene.search.ReferenceManager.close()",1,2,2
"org.apache.lucene.search.ReferenceManager.ensureOpen()",2,1,2
"org.apache.lucene.search.ReferenceManager.maybeRefresh()",1,4,4
"org.apache.lucene.search.ReferenceManager.release(G)",1,1,1
"org.apache.lucene.search.ReferenceManager.swapReference(G)",1,1,1
"org.apache.lucene.search.RemoteCachingWrapperFilter.RemoteCachingWrapperFilter(Filter)",1,1,1
"org.apache.lucene.search.RemoteCachingWrapperFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.search.RemoteCachingWrapperFilterHelper.RemoteCachingWrapperFilterHelper(Filter,boolean)",1,1,1
"org.apache.lucene.search.RemoteCachingWrapperFilterHelper.getDocIdSet(IndexReader)",1,3,3
"org.apache.lucene.search.RemoteCachingWrapperFilterHelper.shouldHaveCache(boolean)",1,1,1
"org.apache.lucene.search.RemoteSearchable.RemoteSearchable(Searchable)",1,1,1
"org.apache.lucene.search.RemoteSearchable.close()",1,1,1
"org.apache.lucene.search.RemoteSearchable.doc(int)",1,1,1
"org.apache.lucene.search.RemoteSearchable.doc(int,FieldSelector)",1,1,1
"org.apache.lucene.search.RemoteSearchable.docFreq(Term)",1,1,1
"org.apache.lucene.search.RemoteSearchable.docFreqs(Term[])",1,1,1
"org.apache.lucene.search.RemoteSearchable.explain(Weight,int)",1,1,1
"org.apache.lucene.search.RemoteSearchable.main(String[])",2,3,5
"org.apache.lucene.search.RemoteSearchable.maxDoc()",1,1,1
"org.apache.lucene.search.RemoteSearchable.rewrite(Query)",1,1,1
"org.apache.lucene.search.RemoteSearchable.search(Weight,Filter,Collector)",1,1,1
"org.apache.lucene.search.RemoteSearchable.search(Weight,Filter,int)",1,1,1
"org.apache.lucene.search.RemoteSearchable.search(Weight,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.RemoteTestCase.lookupRemote()",1,1,1
"org.apache.lucene.search.RemoteTestCase.startServer(Searchable)",1,1,1
"org.apache.lucene.search.RemoteTestCase.stopServer()",1,1,4
"org.apache.lucene.search.ReqExclScorer.ReqExclScorer(Scorer,DocIdSetIterator)",1,1,1
"org.apache.lucene.search.ReqExclScorer.advance(int)",4,2,4
"org.apache.lucene.search.ReqExclScorer.docID()",1,1,1
"org.apache.lucene.search.ReqExclScorer.nextDoc()",4,1,4
"org.apache.lucene.search.ReqExclScorer.score()",1,1,1
"org.apache.lucene.search.ReqExclScorer.toNonExcluded()",6,4,6
"org.apache.lucene.search.ReqOptSumScorer.ReqOptSumScorer(Scorer,Scorer)",1,1,1
"org.apache.lucene.search.ReqOptSumScorer.advance(int)",1,1,1
"org.apache.lucene.search.ReqOptSumScorer.docID()",1,1,1
"org.apache.lucene.search.ReqOptSumScorer.nextDoc()",1,1,1
"org.apache.lucene.search.ReqOptSumScorer.score()",3,3,5
"org.apache.lucene.search.ScoreCachingWrappingScorer.ScoreCachingWrappingScorer(Scorer)",1,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.advance(int)",1,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.docID()",1,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.getSimilarity()",1,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.nextDoc()",1,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.score()",1,2,2
"org.apache.lucene.search.ScoreCachingWrappingScorer.score(Collector)",1,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.score(Collector,int,int)",1,1,1
"org.apache.lucene.search.ScoreDoc.ScoreDoc(int,float)",1,1,1
"org.apache.lucene.search.ScoreDoc.ScoreDoc(int,float,int)",1,1,1
"org.apache.lucene.search.ScoreDoc.toString()",1,1,1
"org.apache.lucene.search.Scorer.Scorer(Similarity)",1,1,1
"org.apache.lucene.search.Scorer.Scorer(Similarity,Weight)",1,1,1
"org.apache.lucene.search.Scorer.Scorer(Weight)",1,1,1
"org.apache.lucene.search.Scorer.ScorerVisitor.visitOptional(P,C,S)",1,1,1
"org.apache.lucene.search.Scorer.ScorerVisitor.visitProhibited(P,C,S)",1,1,1
"org.apache.lucene.search.Scorer.ScorerVisitor.visitRequired(P,C,S)",1,1,1
"org.apache.lucene.search.Scorer.freq()",1,1,1
"org.apache.lucene.search.Scorer.getSimilarity()",1,1,1
"org.apache.lucene.search.Scorer.score(Collector)",1,2,2
"org.apache.lucene.search.Scorer.score(Collector,int,int)",1,2,2
"org.apache.lucene.search.Scorer.visitScorers(ScorerVisitor<Query, Query, Scorer>)",1,1,1
"org.apache.lucene.search.Scorer.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",3,2,5
"org.apache.lucene.search.ScoringRewrite.rewrite(IndexReader,MultiTermQuery)",1,1,1
"org.apache.lucene.search.SearchEquivalenceTestBase.afterClass()",1,1,1
"org.apache.lucene.search.SearchEquivalenceTestBase.assertSameSet(Query,Query)",1,1,1
"org.apache.lucene.search.SearchEquivalenceTestBase.assertSubsetOf(Query,Query)",1,1,1
"org.apache.lucene.search.SearchEquivalenceTestBase.assertSubsetOf(Query,Query,Filter)",1,3,3
"org.apache.lucene.search.SearchEquivalenceTestBase.beforeClass()",1,4,4
"org.apache.lucene.search.SearchEquivalenceTestBase.randomChar()",1,1,1
"org.apache.lucene.search.SearchEquivalenceTestBase.randomFieldContents()",1,3,3
"org.apache.lucene.search.SearchEquivalenceTestBase.randomFilter()",1,1,1
"org.apache.lucene.search.SearchEquivalenceTestBase.randomTerm()",1,1,1
"org.apache.lucene.search.Searcher.createNormalizedWeight(Query)",1,2,3
"org.apache.lucene.search.Searcher.createWeight(Query)",1,1,1
"org.apache.lucene.search.Searcher.docFreqs(Term[])",1,2,2
"org.apache.lucene.search.Searcher.explain(Query,int)",1,1,1
"org.apache.lucene.search.Searcher.getSimilarity()",1,1,1
"org.apache.lucene.search.Searcher.search(Query,Collector)",1,1,1
"org.apache.lucene.search.Searcher.search(Query,Filter,Collector)",1,1,1
"org.apache.lucene.search.Searcher.search(Query,Filter,int)",1,1,1
"org.apache.lucene.search.Searcher.search(Query,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.Searcher.search(Query,int)",1,1,1
"org.apache.lucene.search.Searcher.search(Query,int,Sort)",1,1,1
"org.apache.lucene.search.Searcher.setSimilarity(Similarity)",1,1,1
"org.apache.lucene.search.SearcherFactory.newSearcher(IndexReader)",1,1,1
"org.apache.lucene.search.SearcherLifetimeManager.PruneByAge.PruneByAge(double)",2,1,2
"org.apache.lucene.search.SearcherLifetimeManager.PruneByAge.doPrune(double,IndexSearcher)",1,1,1
"org.apache.lucene.search.SearcherLifetimeManager.SearcherTracker.SearcherTracker(IndexSearcher)",1,1,1
"org.apache.lucene.search.SearcherLifetimeManager.SearcherTracker.close()",1,1,1
"org.apache.lucene.search.SearcherLifetimeManager.SearcherTracker.compareTo(SearcherTracker)",3,1,3
"org.apache.lucene.search.SearcherLifetimeManager.acquire(long)",2,2,3
"org.apache.lucene.search.SearcherLifetimeManager.close()",2,2,3
"org.apache.lucene.search.SearcherLifetimeManager.ensureOpen()",2,1,2
"org.apache.lucene.search.SearcherLifetimeManager.prune(Pruner)",1,4,5
"org.apache.lucene.search.SearcherLifetimeManager.record(IndexSearcher)",3,3,4
"org.apache.lucene.search.SearcherLifetimeManager.release(IndexSearcher)",1,1,1
"org.apache.lucene.search.SearcherManager.SearcherManager(Directory,SearcherFactory)",1,1,2
"org.apache.lucene.search.SearcherManager.SearcherManager(IndexWriter,boolean,SearcherFactory)",1,1,2
"org.apache.lucene.search.SearcherManager.decRef(IndexSearcher)",1,1,1
"org.apache.lucene.search.SearcherManager.getSearcher(SearcherFactory,IndexReader)",2,3,3
"org.apache.lucene.search.SearcherManager.isSearcherCurrent()",1,1,1
"org.apache.lucene.search.SearcherManager.maybeReopen()",1,1,1
"org.apache.lucene.search.SearcherManager.refreshIfNeeded(IndexSearcher)",2,2,2
"org.apache.lucene.search.SearcherManager.tryIncRef(IndexSearcher)",1,1,1
"org.apache.lucene.search.Similarity.decodeNorm(byte)",1,1,1
"org.apache.lucene.search.Similarity.decodeNormValue(byte)",1,1,1
"org.apache.lucene.search.Similarity.encodeNorm(float)",1,1,1
"org.apache.lucene.search.Similarity.encodeNormValue(float)",1,1,1
"org.apache.lucene.search.Similarity.getDefault()",1,1,1
"org.apache.lucene.search.Similarity.getNormDecoder()",1,1,1
"org.apache.lucene.search.Similarity.idfExplain(Collection<Term>,Searcher)",1,2,2
"org.apache.lucene.search.Similarity.idfExplain(Term,Searcher)",1,1,1
"org.apache.lucene.search.Similarity.idfExplain(Term,Searcher,int)",2,2,2
"org.apache.lucene.search.Similarity.lengthNorm(String,int)",1,1,1
"org.apache.lucene.search.Similarity.scorePayload(int,String,int,int,byte[],int,int)",1,1,1
"org.apache.lucene.search.Similarity.setDefault(Similarity)",1,1,1
"org.apache.lucene.search.Similarity.tf(int)",1,1,1
"org.apache.lucene.search.SimilarityDelegator.SimilarityDelegator(Similarity)",1,1,1
"org.apache.lucene.search.SimilarityDelegator.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.search.SimilarityDelegator.coord(int,int)",1,1,1
"org.apache.lucene.search.SimilarityDelegator.idf(int,int)",1,1,1
"org.apache.lucene.search.SimilarityDelegator.queryNorm(float)",1,1,1
"org.apache.lucene.search.SimilarityDelegator.scorePayload(int,String,int,int,byte[],int,int)",1,1,1
"org.apache.lucene.search.SimilarityDelegator.sloppyFreq(int)",1,1,1
"org.apache.lucene.search.SimilarityDelegator.tf(float)",1,1,1
"org.apache.lucene.search.SingleDocTestFilter.SingleDocTestFilter(int)",1,1,1
"org.apache.lucene.search.SingleDocTestFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.search.SingleTermEnum.SingleTermEnum(IndexReader,Term)",1,1,1
"org.apache.lucene.search.SingleTermEnum.difference()",1,1,1
"org.apache.lucene.search.SingleTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.SingleTermEnum.termCompare(Term)",2,1,2
"org.apache.lucene.search.SloppyPhraseScorer.SloppyPhraseScorer(Weight,PostingsAndFreq[],Similarity,int,byte[])",1,1,2
"org.apache.lucene.search.SloppyPhraseScorer.advancePP(PhrasePositions)",2,1,3
"org.apache.lucene.search.SloppyPhraseScorer.advanceRepeatGroups()",10,7,10
"org.apache.lucene.search.SloppyPhraseScorer.advanceRpts(PhrasePositions)",4,7,9
"org.apache.lucene.search.SloppyPhraseScorer.collide(PhrasePositions)",3,3,4
"org.apache.lucene.search.SloppyPhraseScorer.fillQueue()",1,2,3
"org.apache.lucene.search.SloppyPhraseScorer.gatherRptGroups(LinkedHashMap<Term, Integer>)",6,12,15
"org.apache.lucene.search.SloppyPhraseScorer.initComplex()",2,1,2
"org.apache.lucene.search.SloppyPhraseScorer.initFirstTime()",3,2,3
"org.apache.lucene.search.SloppyPhraseScorer.initPhrasePositions()",3,3,3
"org.apache.lucene.search.SloppyPhraseScorer.initSimple()",1,2,3
"org.apache.lucene.search.SloppyPhraseScorer.lesser(PhrasePositions,PhrasePositions)",2,1,4
"org.apache.lucene.search.SloppyPhraseScorer.phraseFreq()",4,6,9
"org.apache.lucene.search.SloppyPhraseScorer.placeFirstPositions()",1,2,2
"org.apache.lucene.search.SloppyPhraseScorer.ppTermsBitSets(PhrasePositions[],HashMap<Term, Integer>)",1,4,4
"org.apache.lucene.search.SloppyPhraseScorer.repeatingPPs(HashMap<Term, Integer>)",4,4,4
"org.apache.lucene.search.SloppyPhraseScorer.repeatingTerms()",1,5,5
"org.apache.lucene.search.SloppyPhraseScorer.sortRptGroups(ArrayList<ArrayList<PhrasePositions>>)",1,2,3
"org.apache.lucene.search.SloppyPhraseScorer.termGroups(LinkedHashMap<Term, Integer>,ArrayList<OpenBitSet>)",1,3,3
"org.apache.lucene.search.SloppyPhraseScorer.tpPos(PhrasePositions)",1,1,1
"org.apache.lucene.search.SloppyPhraseScorer.unionTermGroups(ArrayList<OpenBitSet>)",1,4,4
"org.apache.lucene.search.Sort.Sort()",1,1,1
"org.apache.lucene.search.Sort.Sort(SortField)",1,1,1
"org.apache.lucene.search.Sort.Sort(SortField...)",1,1,1
"org.apache.lucene.search.Sort.equals(Object)",3,1,3
"org.apache.lucene.search.Sort.getSort()",1,1,1
"org.apache.lucene.search.Sort.hashCode()",1,1,1
"org.apache.lucene.search.Sort.setSort(SortField)",1,1,1
"org.apache.lucene.search.Sort.setSort(SortField...)",1,1,1
"org.apache.lucene.search.Sort.toString()",1,3,3
"org.apache.lucene.search.SortField.SortField(String,FieldComparatorSource)",1,1,1
"org.apache.lucene.search.SortField.SortField(String,FieldComparatorSource,boolean)",1,1,1
"org.apache.lucene.search.SortField.SortField(String,Locale)",1,1,1
"org.apache.lucene.search.SortField.SortField(String,Locale,boolean)",1,1,1
"org.apache.lucene.search.SortField.SortField(String,Parser)",1,1,1
"org.apache.lucene.search.SortField.SortField(String,Parser,boolean)",7,7,7
"org.apache.lucene.search.SortField.SortField(String,int)",1,1,1
"org.apache.lucene.search.SortField.SortField(String,int,boolean)",1,1,1
"org.apache.lucene.search.SortField.equals(Object)",3,9,11
"org.apache.lucene.search.SortField.getComparator(int,int)",13,2,14
"org.apache.lucene.search.SortField.getComparatorSource()",1,1,1
"org.apache.lucene.search.SortField.getField()",1,1,1
"org.apache.lucene.search.SortField.getLocale()",1,1,1
"org.apache.lucene.search.SortField.getParser()",1,1,1
"org.apache.lucene.search.SortField.getReverse()",1,1,1
"org.apache.lucene.search.SortField.getType()",1,1,1
"org.apache.lucene.search.SortField.hashCode()",1,5,5
"org.apache.lucene.search.SortField.initFieldType(String,int)",3,2,4
"org.apache.lucene.search.SortField.readObject(ObjectInputStream)",1,2,2
"org.apache.lucene.search.SortField.setMissingValue(Object)",2,1,7
"org.apache.lucene.search.SortField.toString()",2,5,16
"org.apache.lucene.search.SpanFilterResult.PositionInfo.PositionInfo(int)",1,1,1
"org.apache.lucene.search.SpanFilterResult.PositionInfo.addPosition(int,int)",1,1,1
"org.apache.lucene.search.SpanFilterResult.PositionInfo.getDoc()",1,1,1
"org.apache.lucene.search.SpanFilterResult.PositionInfo.getPositions()",1,1,1
"org.apache.lucene.search.SpanFilterResult.SpanFilterResult(DocIdSet,List<PositionInfo>)",1,1,1
"org.apache.lucene.search.SpanFilterResult.StartEnd.StartEnd(int,int)",1,1,1
"org.apache.lucene.search.SpanFilterResult.StartEnd.getEnd()",1,1,1
"org.apache.lucene.search.SpanFilterResult.StartEnd.getStart()",1,1,1
"org.apache.lucene.search.SpanFilterResult.getDocIdSet()",1,1,1
"org.apache.lucene.search.SpanFilterResult.getPositions()",1,1,1
"org.apache.lucene.search.SpanQueryFilter.SpanQueryFilter()",1,1,1
"org.apache.lucene.search.SpanQueryFilter.SpanQueryFilter(SpanQuery)",1,1,1
"org.apache.lucene.search.SpanQueryFilter.bitSpans(IndexReader)",1,3,3
"org.apache.lucene.search.SpanQueryFilter.equals(Object)",1,2,2
"org.apache.lucene.search.SpanQueryFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.search.SpanQueryFilter.getQuery()",1,1,1
"org.apache.lucene.search.SpanQueryFilter.hashCode()",1,1,1
"org.apache.lucene.search.SpanQueryFilter.toString()",1,1,1
"org.apache.lucene.search.TermCollectingRewrite.collectTerms(IndexReader,MultiTermQuery,TermCollector)",3,3,4
"org.apache.lucene.search.TermQuery.TermQuery(Term)",1,1,1
"org.apache.lucene.search.TermQuery.TermWeight.TermWeight(Searcher)",1,3,3
"org.apache.lucene.search.TermQuery.TermWeight.explain(IndexReader,int)",2,6,7
"org.apache.lucene.search.TermQuery.TermWeight.getQuery()",1,1,1
"org.apache.lucene.search.TermQuery.TermWeight.getValue()",1,1,1
"org.apache.lucene.search.TermQuery.TermWeight.normalize(float)",1,1,1
"org.apache.lucene.search.TermQuery.TermWeight.scorer(IndexReader,boolean,boolean)",3,3,5
"org.apache.lucene.search.TermQuery.TermWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.TermQuery.TermWeight.toString()",1,1,1
"org.apache.lucene.search.TermQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.TermQuery.equals(Object)",2,2,3
"org.apache.lucene.search.TermQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.TermQuery.getTerm()",1,1,1
"org.apache.lucene.search.TermQuery.hashCode()",1,1,1
"org.apache.lucene.search.TermQuery.toString(String)",1,2,2
"org.apache.lucene.search.TermRangeFilter.Less(String,String)",1,1,1
"org.apache.lucene.search.TermRangeFilter.More(String,String)",1,1,1
"org.apache.lucene.search.TermRangeFilter.TermRangeFilter(String,String,String,boolean,boolean)",1,1,1
"org.apache.lucene.search.TermRangeFilter.TermRangeFilter(String,String,String,boolean,boolean,Collator)",1,1,1
"org.apache.lucene.search.TermRangeFilter.getCollator()",1,1,1
"org.apache.lucene.search.TermRangeFilter.getField()",1,1,1
"org.apache.lucene.search.TermRangeFilter.getLowerTerm()",1,1,1
"org.apache.lucene.search.TermRangeFilter.getUpperTerm()",1,1,1
"org.apache.lucene.search.TermRangeFilter.includesLower()",1,1,1
"org.apache.lucene.search.TermRangeFilter.includesUpper()",1,1,1
"org.apache.lucene.search.TermRangeQuery.TermRangeQuery(String,String,String,boolean,boolean)",1,1,1
"org.apache.lucene.search.TermRangeQuery.TermRangeQuery(String,String,String,boolean,boolean,Collator)",1,1,1
"org.apache.lucene.search.TermRangeQuery.equals(Object)",18,5,18
"org.apache.lucene.search.TermRangeQuery.getCollator()",1,1,1
"org.apache.lucene.search.TermRangeQuery.getEnum(IndexReader)",1,1,1
"org.apache.lucene.search.TermRangeQuery.getField()",1,1,1
"org.apache.lucene.search.TermRangeQuery.getLowerTerm()",1,1,1
"org.apache.lucene.search.TermRangeQuery.getUpperTerm()",1,1,1
"org.apache.lucene.search.TermRangeQuery.hashCode()",1,5,7
"org.apache.lucene.search.TermRangeQuery.includesLower()",1,1,1
"org.apache.lucene.search.TermRangeQuery.includesUpper()",1,1,1
"org.apache.lucene.search.TermRangeQuery.toString(String)",1,4,8
"org.apache.lucene.search.TermRangeTermEnum.TermRangeTermEnum(IndexReader,String,String,String,boolean,boolean,Collator)",1,1,4
"org.apache.lucene.search.TermRangeTermEnum.difference()",1,1,1
"org.apache.lucene.search.TermRangeTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.TermRangeTermEnum.termCompare(Term)",8,15,20
"org.apache.lucene.search.TermScorer.TermScorer(Weight,TermDocs,Similarity,byte[])",1,2,2
"org.apache.lucene.search.TermScorer.advance(int)",3,2,4
"org.apache.lucene.search.TermScorer.docID()",1,1,1
"org.apache.lucene.search.TermScorer.freq()",1,1,1
"org.apache.lucene.search.TermScorer.nextDoc()",3,3,3
"org.apache.lucene.search.TermScorer.score()",1,3,3
"org.apache.lucene.search.TermScorer.score(Collector)",1,1,1
"org.apache.lucene.search.TermScorer.score(Collector,int,int)",4,4,4
"org.apache.lucene.search.TermScorer.toString()",1,1,1
"org.apache.lucene.search.TermsFilter.addTerm(Term)",1,1,1
"org.apache.lucene.search.TermsFilter.equals(Object)",3,4,6
"org.apache.lucene.search.TermsFilter.getDocIdSet(IndexReader)",1,3,3
"org.apache.lucene.search.TermsFilter.hashCode()",1,2,2
"org.apache.lucene.search.TermsFilterTest.testCachability()",1,1,1
"org.apache.lucene.search.TermsFilterTest.testMissingField()",1,2,2
"org.apache.lucene.search.TermsFilterTest.testMissingTerms()",1,2,2
"org.apache.lucene.search.TestBlockJoin.addSkillless(RandomIndexWriter)",1,2,3
"org.apache.lucene.search.TestBlockJoin.compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs)",1,2,2
"org.apache.lucene.search.TestBlockJoin.compareHits(IndexReader,IndexReader,TopDocs,TopGroups<Integer>)",5,5,6
"org.apache.lucene.search.TestBlockJoin.getParentDoc(IndexReader,Filter,int)",1,2,2
"org.apache.lucene.search.TestBlockJoin.getRandomFields(int)",1,4,4
"org.apache.lucene.search.TestBlockJoin.getRandomSort(String,int)",1,3,3
"org.apache.lucene.search.TestBlockJoin.makeJob(String,int)",1,1,1
"org.apache.lucene.search.TestBlockJoin.makeQualification(String,int)",1,1,1
"org.apache.lucene.search.TestBlockJoin.makeResume(String,String)",1,1,1
"org.apache.lucene.search.TestBlockJoin.randomChildTerm(String[])",1,1,1
"org.apache.lucene.search.TestBlockJoin.randomParentTerm(String[])",1,1,1
"org.apache.lucene.search.TestBlockJoin.skill(String)",1,1,1
"org.apache.lucene.search.TestBlockJoin.testAdvanceSingleParentNoChild()",1,2,2
"org.apache.lucene.search.TestBlockJoin.testAdvanceSingleParentSingleChild()",1,2,2
"org.apache.lucene.search.TestBlockJoin.testBoostBug()",1,1,1
"org.apache.lucene.search.TestBlockJoin.testMultiChildTypes()",1,2,2
"org.apache.lucene.search.TestBlockJoin.testRandom()",1,63,73
"org.apache.lucene.search.TestBlockJoin.testSimple()",1,1,1
"org.apache.lucene.search.TestBlockJoin.testSimpleFilter()",1,1,3
"org.apache.lucene.search.TestBoolean2.afterClass()",1,1,1
"org.apache.lucene.search.TestBoolean2.beforeClass()",1,5,5
"org.apache.lucene.search.TestBoolean2.makeQuery(String)",1,1,1
"org.apache.lucene.search.TestBoolean2.queriesTest(String,int[])",1,1,1
"org.apache.lucene.search.TestBoolean2.randBoolQuery(Random,boolean,int,String,String[],Callback)",1,6,9
"org.apache.lucene.search.TestBoolean2.testQueries01()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries02()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries03()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries04()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries05()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries06()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries07()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries08()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries09()",1,1,1
"org.apache.lucene.search.TestBoolean2.testQueries10()",1,1,1
"org.apache.lucene.search.TestBoolean2.testRandomQueries()",1,3,3
"org.apache.lucene.search.TestBooleanMinShouldMatch.afterClass()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.beforeClass()",1,3,3
"org.apache.lucene.search.TestBooleanMinShouldMatch.printHits(String,ScoreDoc[],Searcher)",1,2,2
"org.apache.lucene.search.TestBooleanMinShouldMatch.testAllOptional()",1,2,2
"org.apache.lucene.search.TestBooleanMinShouldMatch.testMinEqualToNumOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testMinHigherThenNumOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testNoOptionalButMin()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testNoOptionalButMin2()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testOneOptionalEqualToMin()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testOneProhibAndSomeOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testOneReqAndSomeOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testOneReqOneProhibAndSomeOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testOneReqSomeProhibAndSomeOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testRandomQueries()",1,9,10
"org.apache.lucene.search.TestBooleanMinShouldMatch.testSomeProhibAndSomeOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testSomeReqAndSomeOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testSomeReqOneProhibAndSomeOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.testSomeReqSomeProhibAndSomeOptional()",1,1,1
"org.apache.lucene.search.TestBooleanMinShouldMatch.verifyNrHits(Query,int)",1,2,2
"org.apache.lucene.search.TestBooleanOr.search(Query)",1,1,1
"org.apache.lucene.search.TestBooleanOr.setUp()",1,1,1
"org.apache.lucene.search.TestBooleanOr.tearDown()",1,1,1
"org.apache.lucene.search.TestBooleanOr.testElements()",1,1,1
"org.apache.lucene.search.TestBooleanOr.testFlat()",1,1,1
"org.apache.lucene.search.TestBooleanOr.testParenthesisMust()",1,1,1
"org.apache.lucene.search.TestBooleanOr.testParenthesisMust2()",1,1,1
"org.apache.lucene.search.TestBooleanOr.testParenthesisShould()",1,1,1
"org.apache.lucene.search.TestBooleanQuery.testBS2DisjunctionNextVsAdvance()",1,15,20
"org.apache.lucene.search.TestBooleanQuery.testDeMorgan()",1,2,2
"org.apache.lucene.search.TestBooleanQuery.testEquality()",1,1,1
"org.apache.lucene.search.TestBooleanQuery.testException()",1,1,2
"org.apache.lucene.search.TestBooleanQuery.testNullOrSubScorer()",1,1,1
"org.apache.lucene.search.TestBooleanScorer.testEmptyBucketWithMoreDocs()",1,1,3
"org.apache.lucene.search.TestBooleanScorer.testMethod()",1,2,2
"org.apache.lucene.search.TestBooleanScorer.testMoreThan32ProhibitedClauses()",1,2,2
"org.apache.lucene.search.TestCachingCollector.MockScorer.MockScorer()",1,1,1
"org.apache.lucene.search.TestCachingCollector.MockScorer.advance(int)",1,1,1
"org.apache.lucene.search.TestCachingCollector.MockScorer.docID()",1,1,1
"org.apache.lucene.search.TestCachingCollector.MockScorer.nextDoc()",1,1,1
"org.apache.lucene.search.TestCachingCollector.MockScorer.score()",1,1,1
"org.apache.lucene.search.TestCachingCollector.NoOpCollector.NoOpCollector(boolean)",1,1,1
"org.apache.lucene.search.TestCachingCollector.NoOpCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TestCachingCollector.NoOpCollector.collect(int)",1,1,1
"org.apache.lucene.search.TestCachingCollector.NoOpCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestCachingCollector.NoOpCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TestCachingCollector.testBasic()",1,3,3
"org.apache.lucene.search.TestCachingCollector.testCachedArraysAllocation()",1,3,4
"org.apache.lucene.search.TestCachingCollector.testIllegalCollectorOnReplay()",1,3,4
"org.apache.lucene.search.TestCachingCollector.testIllegalStateOnReplay()",1,2,3
"org.apache.lucene.search.TestCachingCollector.testNoWrappedCollector()",1,2,2
"org.apache.lucene.search.TestCachingSpanFilter.refreshReader(IndexReader)",2,2,2
"org.apache.lucene.search.TestCachingSpanFilter.testEnforceDeletions()",1,1,1
"org.apache.lucene.search.TestCachingWrapperFilter.assertDocIdSetCacheable(IndexReader,Filter,boolean)",1,2,3
"org.apache.lucene.search.TestCachingWrapperFilter.refreshReader(IndexReader)",2,2,2
"org.apache.lucene.search.TestCachingWrapperFilter.testCachingWorks()",1,1,1
"org.apache.lucene.search.TestCachingWrapperFilter.testEnforceDeletions()",1,1,1
"org.apache.lucene.search.TestCachingWrapperFilter.testIsCacheAble()",1,1,1
"org.apache.lucene.search.TestCachingWrapperFilter.testNullDocIdSet()",1,1,1
"org.apache.lucene.search.TestCachingWrapperFilter.testNullDocIdSetIterator()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.createQnorm1Similarity()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.setUp()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.tearDown()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.test1()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.test2()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testBQ12()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testBQ13()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testBQ18()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testBQ21()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testBQ22()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testCSQ4()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testDMQ10()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testFQ5()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testMA3()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testMPQ7()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testSF3()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testSF7()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testSNot3()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testSNot6()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testSNot8()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testSNot9()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testST3()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testST6()",1,1,1
"org.apache.lucene.search.TestComplexExplanations.testT3()",1,1,1
"org.apache.lucene.search.TestComplexExplanationsOfNonMatches.qtest(Query,int[])",1,1,1
"org.apache.lucene.search.TestConstantScoreQuery.checkHits(Searcher,Query,float,String,String)",1,2,3
"org.apache.lucene.search.TestConstantScoreQuery.testCSQ()",1,1,1
"org.apache.lucene.search.TestConstantScoreQuery.testWrapped2Times()",1,4,4
"org.apache.lucene.search.TestCustomSearcherSort.CustomSearcher.CustomSearcher(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestCustomSearcherSort.CustomSearcher.search(Query,Filter,int)",1,1,1
"org.apache.lucene.search.TestCustomSearcherSort.CustomSearcher.search(Query,Filter,int,Sort)",1,1,1
"org.apache.lucene.search.TestCustomSearcherSort.RandomGen.RandomGen(Random)",1,1,1
"org.apache.lucene.search.TestCustomSearcherSort.RandomGen.getLuceneDate()",1,1,1
"org.apache.lucene.search.TestCustomSearcherSort.checkHits(ScoreDoc[],String)",1,4,4
"org.apache.lucene.search.TestCustomSearcherSort.log(String)",1,2,2
"org.apache.lucene.search.TestCustomSearcherSort.matchHits(Searcher,Sort)",1,5,5
"org.apache.lucene.search.TestCustomSearcherSort.setUp()",1,4,4
"org.apache.lucene.search.TestCustomSearcherSort.tearDown()",1,1,1
"org.apache.lucene.search.TestCustomSearcherSort.testFieldSortCustomSearcher()",1,1,1
"org.apache.lucene.search.TestCustomSearcherSort.testFieldSortMultiCustomSearcher()",1,1,1
"org.apache.lucene.search.TestCustomSearcherSort.testFieldSortSingleSearcher()",1,1,1
"org.apache.lucene.search.TestDateFilter.testAfter()",1,1,1
"org.apache.lucene.search.TestDateFilter.testBefore()",1,1,1
"org.apache.lucene.search.TestDateSort.createDocument(String,long)",1,1,1
"org.apache.lucene.search.TestDateSort.setUp()",1,1,1
"org.apache.lucene.search.TestDateSort.tearDown()",1,1,1
"org.apache.lucene.search.TestDateSort.testReverseDateSort()",1,2,2
"org.apache.lucene.search.TestDisjunctionMaxQuery.TestSimilarity.TestSimilarity()",1,1,1
"org.apache.lucene.search.TestDisjunctionMaxQuery.TestSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.search.TestDisjunctionMaxQuery.TestSimilarity.idf(int,int)",1,1,1
"org.apache.lucene.search.TestDisjunctionMaxQuery.TestSimilarity.tf(float)",2,1,2
"org.apache.lucene.search.TestDisjunctionMaxQuery.printHits(String,ScoreDoc[],Searcher)",1,2,2
"org.apache.lucene.search.TestDisjunctionMaxQuery.setUp()",1,1,1
"org.apache.lucene.search.TestDisjunctionMaxQuery.tearDown()",1,1,1
"org.apache.lucene.search.TestDisjunctionMaxQuery.testBooleanOptionalNoTiebreaker()",1,3,3
"org.apache.lucene.search.TestDisjunctionMaxQuery.testBooleanOptionalWithTiebreaker()",1,4,4
"org.apache.lucene.search.TestDisjunctionMaxQuery.testBooleanOptionalWithTiebreakerAndBoost()",1,2,2
"org.apache.lucene.search.TestDisjunctionMaxQuery.testBooleanRequiredEqualScores()",1,3,3
"org.apache.lucene.search.TestDisjunctionMaxQuery.testSimpleEqualScores1()",1,3,3
"org.apache.lucene.search.TestDisjunctionMaxQuery.testSimpleEqualScores2()",1,3,3
"org.apache.lucene.search.TestDisjunctionMaxQuery.testSimpleEqualScores3()",1,3,3
"org.apache.lucene.search.TestDisjunctionMaxQuery.testSimpleTiebreaker()",1,2,2
"org.apache.lucene.search.TestDisjunctionMaxQuery.testSkipToFirsttimeHit()",1,2,2
"org.apache.lucene.search.TestDisjunctionMaxQuery.testSkipToFirsttimeMiss()",1,3,3
"org.apache.lucene.search.TestDisjunctionMaxQuery.tq(String,String)",1,1,1
"org.apache.lucene.search.TestDisjunctionMaxQuery.tq(String,String,float)",1,1,1
"org.apache.lucene.search.TestDocBoost.testDocBoost()",1,2,2
"org.apache.lucene.search.TestDocIdSet.testFilteredDocIdSet()",1,5,7
"org.apache.lucene.search.TestDocIdSet.testNullDocIdSet()",1,1,1
"org.apache.lucene.search.TestDocIdSet.testNullIteratorFilteredDocIdSet()",1,1,1
"org.apache.lucene.search.TestElevationComparator.adoc(String[])",1,2,2
"org.apache.lucene.search.TestElevationComparator.getElevatedQuery(String[])",1,2,2
"org.apache.lucene.search.TestElevationComparator.runTest(IndexSearcher,boolean)",1,2,2
"org.apache.lucene.search.TestElevationComparator.testSorting()",1,1,1
"org.apache.lucene.search.TestExplanations.ItemizedFilter.ItemizedFilter(String,int[])",1,1,1
"org.apache.lucene.search.TestExplanations.ItemizedFilter.ItemizedFilter(int[])",1,1,1
"org.apache.lucene.search.TestExplanations.ItemizedFilter.int2str(int[])",1,1,2
"org.apache.lucene.search.TestExplanations.bqtest(Query,int[])",1,1,1
"org.apache.lucene.search.TestExplanations.bqtest(String,int[])",1,1,1
"org.apache.lucene.search.TestExplanations.makeQuery(String)",1,1,1
"org.apache.lucene.search.TestExplanations.optB(Query)",1,1,1
"org.apache.lucene.search.TestExplanations.optB(String)",1,1,1
"org.apache.lucene.search.TestExplanations.qtest(Query,int[])",1,1,1
"org.apache.lucene.search.TestExplanations.qtest(String,int[])",1,1,1
"org.apache.lucene.search.TestExplanations.reqB(Query)",1,1,1
"org.apache.lucene.search.TestExplanations.reqB(String)",1,1,1
"org.apache.lucene.search.TestExplanations.setUp()",1,2,2
"org.apache.lucene.search.TestExplanations.sf(String,int)",1,1,1
"org.apache.lucene.search.TestExplanations.snear(SpanQuery,SpanQuery,SpanQuery,int,boolean)",1,1,1
"org.apache.lucene.search.TestExplanations.snear(SpanQuery,SpanQuery,int,boolean)",1,1,1
"org.apache.lucene.search.TestExplanations.snear(String,String,String,int,boolean)",1,1,1
"org.apache.lucene.search.TestExplanations.snear(String,String,int,boolean)",1,1,1
"org.apache.lucene.search.TestExplanations.snot(SpanQuery,SpanQuery)",1,1,1
"org.apache.lucene.search.TestExplanations.sor(SpanQuery,SpanQuery)",1,1,1
"org.apache.lucene.search.TestExplanations.sor(SpanQuery,SpanQuery,SpanQuery)",1,1,1
"org.apache.lucene.search.TestExplanations.sor(String,String)",1,1,1
"org.apache.lucene.search.TestExplanations.sor(String,String,String)",1,1,1
"org.apache.lucene.search.TestExplanations.st(String)",1,1,1
"org.apache.lucene.search.TestExplanations.ta(String[])",1,1,2
"org.apache.lucene.search.TestExplanations.tearDown()",1,1,1
"org.apache.lucene.search.TestExplanations.testNoop()",1,1,1
"org.apache.lucene.search.TestFieldCache.setUp()",1,4,4
"org.apache.lucene.search.TestFieldCache.tearDown()",1,1,1
"org.apache.lucene.search.TestFieldCache.test()",1,9,9
"org.apache.lucene.search.TestFieldCache.testDocsWithField()",1,5,5
"org.apache.lucene.search.TestFieldCache.testGetDocsWithFieldThreadSafety()",4,10,11
"org.apache.lucene.search.TestFieldCache.testInfoStream()",1,1,1
"org.apache.lucene.search.TestFieldCacheRangeFilter.testFieldCacheRangeFilterDoubles()",1,1,1
"org.apache.lucene.search.TestFieldCacheRangeFilter.testFieldCacheRangeFilterFloats()",1,1,1
"org.apache.lucene.search.TestFieldCacheRangeFilter.testFieldCacheRangeFilterInts()",1,1,1
"org.apache.lucene.search.TestFieldCacheRangeFilter.testFieldCacheRangeFilterLongs()",1,1,1
"org.apache.lucene.search.TestFieldCacheRangeFilter.testFieldCacheRangeFilterRand()",1,1,1
"org.apache.lucene.search.TestFieldCacheRangeFilter.testFieldCacheRangeFilterShorts()",1,1,1
"org.apache.lucene.search.TestFieldCacheRangeFilter.testRangeFilterId()",1,1,1
"org.apache.lucene.search.TestFieldCacheRangeFilter.testSparseIndex()",1,2,2
"org.apache.lucene.search.TestFieldCacheTermsFilter.testMissingTerms()",1,2,2
"org.apache.lucene.search.TestFieldValueFilter.buildIndex(RandomIndexWriter,int)",1,4,4
"org.apache.lucene.search.TestFieldValueFilter.testFieldValueFilter()",1,2,4
"org.apache.lucene.search.TestFieldValueFilter.testFieldValueFilterNoValue()",1,2,4
"org.apache.lucene.search.TestFilteredQuery.assertScoreEquals(Query,Query)",1,2,2
"org.apache.lucene.search.TestFilteredQuery.newStaticFilterA()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.newStaticFilterB()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.setUp()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.tearDown()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.testBoolean2()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.testBooleanMUST()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.testBooleanSHOULD()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.testChainedFilters()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.testFilteredQuery()",1,1,1
"org.apache.lucene.search.TestFilteredQuery.testRangeQuery()",1,1,1
"org.apache.lucene.search.TestFilteredSearch.SimpleDocIdSetFilter.SimpleDocIdSetFilter(int[])",1,1,1
"org.apache.lucene.search.TestFilteredSearch.SimpleDocIdSetFilter.getDocIdSet(IndexReader)",3,3,5
"org.apache.lucene.search.TestFilteredSearch.SimpleDocIdSetFilter.reset()",1,1,1
"org.apache.lucene.search.TestFilteredSearch.SimpleDocIdSetFilter.setDocBases(IndexReader)",1,2,2
"org.apache.lucene.search.TestFilteredSearch.searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean)",1,4,4
"org.apache.lucene.search.TestFilteredSearch.testFilteredSearch()",1,1,1
"org.apache.lucene.search.TestFuzzyQuery.addDoc(String,RandomIndexWriter)",1,1,1
"org.apache.lucene.search.TestFuzzyQuery.testBoostOnlyRewrite()",1,1,1
"org.apache.lucene.search.TestFuzzyQuery.testFuzziness()",1,3,3
"org.apache.lucene.search.TestFuzzyQuery.testFuzzinessLong()",1,1,3
"org.apache.lucene.search.TestFuzzyQuery.testGiga()",1,1,1
"org.apache.lucene.search.TestFuzzyQuery.testTokenLengthOpt()",1,1,1
"org.apache.lucene.search.TestJoinUtil.RandomDoc.RandomDoc(String,int,String)",1,1,1
"org.apache.lucene.search.TestJoinUtil.createContext(int,RandomIndexWriter,RandomIndexWriter,boolean)",1,14,15
"org.apache.lucene.search.TestJoinUtil.createContext(int,RandomIndexWriter,boolean)",1,1,1
"org.apache.lucene.search.TestJoinUtil.createExpectedResult(String,boolean,IndexSearcher,IndexIterationContext)",5,5,7
"org.apache.lucene.search.TestJoinUtil.testRandom()",1,12,12
"org.apache.lucene.search.TestJoinUtil.testSimple()",1,1,1
"org.apache.lucene.search.TestLocaleMethods.afterClass()",1,1,1
"org.apache.lucene.search.TestLocaleMethods.beforeClass()",1,2,2
"org.apache.lucene.search.TestLocaleMethods.doTestRanges(String,String,Query)",1,4,4
"org.apache.lucene.search.TestLocaleMethods.testRangeFilter()",1,2,2
"org.apache.lucene.search.TestLocaleMethods.testRangeQuery()",1,2,2
"org.apache.lucene.search.TestLocaleMethods.testSort()",1,2,2
"org.apache.lucene.search.TestLocaleMethods.testSort2()",1,2,2
"org.apache.lucene.search.TestMatchAllDocsQuery.addDoc(String,IndexWriter,float)",1,1,1
"org.apache.lucene.search.TestMatchAllDocsQuery.testEquals()",1,1,1
"org.apache.lucene.search.TestMatchAllDocsQuery.testQuery()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.CannedAnalyzer.CannedAnalyzer(TokenAndPos[])",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.CannedAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.CannedTokenizer.CannedTokenizer(Reader,TokenAndPos[])",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.CannedTokenizer.CannedTokenizer(TokenAndPos[])",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.CannedTokenizer.incrementToken()",2,2,2
"org.apache.lucene.search.TestMultiPhraseQuery.CannedTokenizer.reset()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.TokenAndPos.TokenAndPos(String,int)",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.add(String,RandomIndexWriter)",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.add(String,String,RandomIndexWriter)",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.doTestZeroPosIncrSloppy(Query,int)",1,4,4
"org.apache.lucene.search.TestMultiPhraseQuery.tapTerms(TokenAndPos[])",1,1,2
"org.apache.lucene.search.TestMultiPhraseQuery.testBooleanQueryContainingSingleTermPrefixQuery()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testCustomIDF()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testEmptyToString()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testHashCodeAndEquals()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testMultiExactWithRepeats()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testMultiSloppyWithRepeats()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testNoDocs()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testPhrasePrefix()",1,5,6
"org.apache.lucene.search.TestMultiPhraseQuery.testPhrasePrefixWithBooleanQuery()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testTall()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testZeroPosIncr()",1,2,2
"org.apache.lucene.search.TestMultiPhraseQuery.testZeroPosIncrSloppyMpqAnd()",1,2,2
"org.apache.lucene.search.TestMultiPhraseQuery.testZeroPosIncrSloppyMpqAndOrMatch()",1,2,2
"org.apache.lucene.search.TestMultiPhraseQuery.testZeroPosIncrSloppyMpqAndOrNoMatch()",1,2,2
"org.apache.lucene.search.TestMultiPhraseQuery.testZeroPosIncrSloppyParsedAnd()",1,1,1
"org.apache.lucene.search.TestMultiPhraseQuery.testZeroPosIncrSloppyPqAnd()",1,2,2
"org.apache.lucene.search.TestMultiSearcher.createDocument(String,String)",1,2,2
"org.apache.lucene.search.TestMultiSearcher.getMultiSearcherInstance(Searcher[])",1,1,1
"org.apache.lucene.search.TestMultiSearcher.initIndex(Random,Directory,int,boolean,String)",1,3,4
"org.apache.lucene.search.TestMultiSearcher.testCreateDocFrequencyMap()",1,3,3
"org.apache.lucene.search.TestMultiSearcher.testCustomSimilarity()",1,1,1
"org.apache.lucene.search.TestMultiSearcher.testDocFreq()",1,1,1
"org.apache.lucene.search.TestMultiSearcher.testEmptyIndex()",1,4,4
"org.apache.lucene.search.TestMultiSearcher.testFieldSelector()",1,1,1
"org.apache.lucene.search.TestMultiSearcher.testNormalization(int,String)",1,1,1
"org.apache.lucene.search.TestMultiSearcher.testNormalization10()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.add(String,IndexWriter)",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.addCollection1(IndexWriter)",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.addCollection2(IndexWriter)",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.checkQuery(String)",1,6,6
"org.apache.lucene.search.TestMultiSearcherRanking.setUp()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.tearDown()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.testFuzzyQuery()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.testMultiPhraseQuery()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.testNoMatchQuery()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.testOneTermQuery()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.testPrefixQuery()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.testRangeQuery()",1,1,1
"org.apache.lucene.search.TestMultiSearcherRanking.testTwoTermQuery()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.afterClass()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.assertEquals(String,float,float)",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.assertEquals(String,int,int)",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.beforeClass()",1,3,3
"org.apache.lucene.search.TestMultiTermConstantScore.cspq(Term)",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.csrq(String,String,String,boolean,boolean)",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.csrq(String,String,String,boolean,boolean,Collator)",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.csrq(String,String,String,boolean,boolean,RewriteMethod)",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.cswcq(Term)",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.testBasics()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.testBasicsRngCollating()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.testBooleanOrderUnAffected()",1,2,2
"org.apache.lucene.search.TestMultiTermConstantScore.testBoost()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.testDanish()",1,2,2
"org.apache.lucene.search.TestMultiTermConstantScore.testEqualScores()",1,3,3
"org.apache.lucene.search.TestMultiTermConstantScore.testFarsi()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.testRangeQueryId()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.testRangeQueryIdCollating()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.testRangeQueryRand()",1,1,1
"org.apache.lucene.search.TestMultiTermConstantScore.testRangeQueryRandCollating()",1,1,1
"org.apache.lucene.search.TestMultiThreadTermVectors.setUp()",1,2,2
"org.apache.lucene.search.TestMultiThreadTermVectors.tearDown()",1,1,1
"org.apache.lucene.search.TestMultiThreadTermVectors.test()",1,5,5
"org.apache.lucene.search.TestMultiThreadTermVectors.testTermPositionVectors(IndexReader,int)",4,4,6
"org.apache.lucene.search.TestMultiValuedNumericRangeQuery.testMultiValuedNRQ()",1,4,5
"org.apache.lucene.search.TestNGramPhraseQuery.afterClass()",1,1,1
"org.apache.lucene.search.TestNGramPhraseQuery.beforeClass()",1,1,1
"org.apache.lucene.search.TestNGramPhraseQuery.testRewrite()",1,1,1
"org.apache.lucene.search.TestNRTManager.LatchedIndexWriter.LatchedIndexWriter(Directory,IndexWriterConfig,CountDownLatch,CountDownLatch)",1,1,1
"org.apache.lucene.search.TestNRTManager.LatchedIndexWriter.updateDocument(Term,Document,Analyzer)",1,2,3
"org.apache.lucene.search.TestNRTManager.addDocument(Term,Document)",1,4,4
"org.apache.lucene.search.TestNRTManager.addDocuments(Term,Collection<Document>)",1,4,4
"org.apache.lucene.search.TestNRTManager.addMaxGen(long)",1,1,1
"org.apache.lucene.search.TestNRTManager.deleteDocuments(Term)",1,4,4
"org.apache.lucene.search.TestNRTManager.doAfterIndexingThreadDone()",1,2,2
"org.apache.lucene.search.TestNRTManager.doAfterWriter(ExecutorService)",1,2,2
"org.apache.lucene.search.TestNRTManager.doClose()",1,2,2
"org.apache.lucene.search.TestNRTManager.doSearching(ExecutorService,long)",1,1,1
"org.apache.lucene.search.TestNRTManager.getCurrentSearcher()",1,1,2
"org.apache.lucene.search.TestNRTManager.getDirectory(Directory)",2,3,3
"org.apache.lucene.search.TestNRTManager.getFinalSearcher()",1,2,2
"org.apache.lucene.search.TestNRTManager.releaseSearcher(IndexSearcher)",1,1,1
"org.apache.lucene.search.TestNRTManager.testEvilSearcherFactory()",1,1,2
"org.apache.lucene.search.TestNRTManager.testNRTManager()",1,1,1
"org.apache.lucene.search.TestNRTManager.testThreadStarvationNoDeleteNRTReader()",1,4,4
"org.apache.lucene.search.TestNRTManager.updateDocument(Term,Document)",1,4,4
"org.apache.lucene.search.TestNRTManager.updateDocuments(Term,Collection<Document>)",1,4,4
"org.apache.lucene.search.TestNot.testNot()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.afterClass()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.beforeClass()",1,2,2
"org.apache.lucene.search.TestNumericRangeQuery32.checkTermCounts(int,int,int)",1,2,2
"org.apache.lucene.search.TestNumericRangeQuery32.countTerms(MultiTermQuery,String)",3,4,4
"org.apache.lucene.search.TestNumericRangeQuery32.setUp()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testEmptyEnums()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testEqualsAndHash()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testFloatRange(int)",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testFloatRange_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testFloatRange_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testFloatRange_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testInfiniteValues()",1,2,2
"org.apache.lucene.search.TestNumericRangeQuery32.testInverseRange()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testLeftOpenRange(int)",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testLeftOpenRange_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testLeftOpenRange_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testLeftOpenRange_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testOneMatchQuery()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRandomTrieAndClassicRangeQuery(int)",1,3,5
"org.apache.lucene.search.TestNumericRangeQuery32.testRandomTrieAndClassicRangeQuery_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRandomTrieAndClassicRangeQuery_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRandomTrieAndClassicRangeQuery_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRandomTrieAndClassicRangeQuery_NoTrie()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRange(int)",3,3,6
"org.apache.lucene.search.TestNumericRangeQuery32.testRangeSplit(int)",1,2,3
"org.apache.lucene.search.TestNumericRangeQuery32.testRangeSplit_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRangeSplit_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRangeSplit_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRange_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRange_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRange_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRightOpenRange(int)",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRightOpenRange_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRightOpenRange_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testRightOpenRange_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testSorting(int)",3,3,5
"org.apache.lucene.search.TestNumericRangeQuery32.testSorting_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testSorting_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery32.testSorting_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.afterClass()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.beforeClass()",1,2,2
"org.apache.lucene.search.TestNumericRangeQuery64.checkTermCounts(int,int,int)",1,2,2
"org.apache.lucene.search.TestNumericRangeQuery64.countTerms(MultiTermQuery,String)",3,4,4
"org.apache.lucene.search.TestNumericRangeQuery64.setUp()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testDoubleRange(int)",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testDoubleRange_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testDoubleRange_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testDoubleRange_6bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testDoubleRange_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testEmptyEnums()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testEqualsAndHash()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testInfiniteValues()",1,2,2
"org.apache.lucene.search.TestNumericRangeQuery64.testInverseRange()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testLeftOpenRange(int)",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testLeftOpenRange_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testLeftOpenRange_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testLeftOpenRange_6bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testLeftOpenRange_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testOneMatchQuery()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRandomTrieAndClassicRangeQuery(int)",1,3,5
"org.apache.lucene.search.TestNumericRangeQuery64.testRandomTrieAndClassicRangeQuery_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRandomTrieAndClassicRangeQuery_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRandomTrieAndClassicRangeQuery_6bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRandomTrieAndClassicRangeQuery_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRandomTrieAndClassicRangeQuery_NoTrie()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRange(int)",3,3,6
"org.apache.lucene.search.TestNumericRangeQuery64.testRangeSplit(int)",1,2,3
"org.apache.lucene.search.TestNumericRangeQuery64.testRangeSplit_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRangeSplit_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRangeSplit_6bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRangeSplit_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRange_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRange_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRange_6bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRange_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRightOpenRange(int)",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRightOpenRange_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRightOpenRange_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRightOpenRange_6bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testRightOpenRange_8bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testSorting(int)",3,3,5
"org.apache.lucene.search.TestNumericRangeQuery64.testSorting_2bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testSorting_4bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testSorting_6bit()",1,1,1
"org.apache.lucene.search.TestNumericRangeQuery64.testSorting_8bit()",1,1,1
"org.apache.lucene.search.TestParallelMultiSearcher.getMultiSearcherInstance(Searcher[])",1,1,1
"org.apache.lucene.search.TestParallelMultiSearcher.tearDown()",1,2,2
"org.apache.lucene.search.TestPayloadAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.TestPhrasePrefixQuery.testPhrasePrefix()",1,3,3
"org.apache.lucene.search.TestPhraseQuery.afterClass()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.beforeClass()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.setUp()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testBarelyCloseEnough()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testEmptyPhraseQuery()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testExact()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testMulipleTerms()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testNonExistingPhrase()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testNotCloseEnough()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testOrderDoesntMatter()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testPalyndrome2()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testPalyndrome3()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testPhraseQueryInConjunctionScorer()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testPhraseQueryWithStopAnalyzer()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testRandomPhrases()",9,10,13
"org.apache.lucene.search.TestPhraseQuery.testRewrite()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testSlop1()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testSlopScoring()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testToString()",1,1,1
"org.apache.lucene.search.TestPhraseQuery.testWrappedPhrase()",1,1,1
"org.apache.lucene.search.TestPositionIncrement.StopWhitespaceAnalyzer.StopWhitespaceAnalyzer(boolean)",1,1,1
"org.apache.lucene.search.TestPositionIncrement.StopWhitespaceAnalyzer.tokenStream(String,Reader)",1,1,2
"org.apache.lucene.search.TestPositionIncrement.testPayloadsPos0()",1,4,4
"org.apache.lucene.search.TestPositionIncrement.testSetPosition()",2,1,2
"org.apache.lucene.search.TestPositiveScoresOnlyCollector.SimpleScorer.SimpleScorer(Weight)",1,1,1
"org.apache.lucene.search.TestPositiveScoresOnlyCollector.SimpleScorer.advance(int)",1,1,2
"org.apache.lucene.search.TestPositiveScoresOnlyCollector.SimpleScorer.docID()",1,1,1
"org.apache.lucene.search.TestPositiveScoresOnlyCollector.SimpleScorer.nextDoc()",1,1,2
"org.apache.lucene.search.TestPositiveScoresOnlyCollector.SimpleScorer.score()",1,1,2
"org.apache.lucene.search.TestPositiveScoresOnlyCollector.testNegativeScores()",1,3,5
"org.apache.lucene.search.TestPrefixFilter.testPrefixFilter()",1,2,2
"org.apache.lucene.search.TestPrefixInBooleanQuery.afterClass()",1,1,1
"org.apache.lucene.search.TestPrefixInBooleanQuery.beforeClass()",1,3,3
"org.apache.lucene.search.TestPrefixInBooleanQuery.testPrefixBooleanQuery()",1,1,1
"org.apache.lucene.search.TestPrefixInBooleanQuery.testPrefixQuery()",1,1,1
"org.apache.lucene.search.TestPrefixInBooleanQuery.testTermBooleanQuery()",1,1,1
"org.apache.lucene.search.TestPrefixInBooleanQuery.testTermQuery()",1,1,1
"org.apache.lucene.search.TestPrefixQuery.testPrefixQuery()",1,2,2
"org.apache.lucene.search.TestPrefixRandom.DumbPrefixQuery.DumbPrefixQuery(Term)",1,1,1
"org.apache.lucene.search.TestPrefixRandom.DumbPrefixQuery.SimplePrefixTermEnum.SimplePrefixTermEnum(IndexReader,Term)",1,1,1
"org.apache.lucene.search.TestPrefixRandom.DumbPrefixQuery.SimplePrefixTermEnum.difference()",1,1,1
"org.apache.lucene.search.TestPrefixRandom.DumbPrefixQuery.SimplePrefixTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.TestPrefixRandom.DumbPrefixQuery.SimplePrefixTermEnum.termCompare(Term)",2,2,2
"org.apache.lucene.search.TestPrefixRandom.DumbPrefixQuery.getEnum(IndexReader)",1,1,1
"org.apache.lucene.search.TestPrefixRandom.DumbPrefixQuery.toString(String)",1,1,1
"org.apache.lucene.search.TestPrefixRandom.assertSame(String)",1,1,1
"org.apache.lucene.search.TestPrefixRandom.setUp()",1,2,2
"org.apache.lucene.search.TestPrefixRandom.tearDown()",1,1,1
"org.apache.lucene.search.TestPrefixRandom.testPrefixes()",1,2,2
"org.apache.lucene.search.TestQueryTermVector.checkGold(String[],String[],int[],int[])",1,2,2
"org.apache.lucene.search.TestQueryTermVector.testConstructor()",1,1,1
"org.apache.lucene.search.TestQueryWrapperFilter.testBasic()",1,1,1
"org.apache.lucene.search.TestQueryWrapperFilter.testRandom()",1,5,5
"org.apache.lucene.search.TestQueryWrapperFilter.testThousandDocuments()",1,3,3
"org.apache.lucene.search.TestQueryWrapperFilter.test_LUCENE3442()",1,2,2
"org.apache.lucene.search.TestRemoteCachingWrapperFilter.afterClass()",1,1,1
"org.apache.lucene.search.TestRemoteCachingWrapperFilter.beforeClass()",1,1,1
"org.apache.lucene.search.TestRemoteCachingWrapperFilter.search(Query,Filter,int,String)",1,1,1
"org.apache.lucene.search.TestRemoteCachingWrapperFilter.testTermRemoteFilter()",1,1,1
"org.apache.lucene.search.TestRemoteSearchable.afterClass()",1,1,1
"org.apache.lucene.search.TestRemoteSearchable.beforeClass()",1,1,1
"org.apache.lucene.search.TestRemoteSearchable.search(Query)",1,1,1
"org.apache.lucene.search.TestRemoteSearchable.testBooleanQuery()",1,1,1
"org.apache.lucene.search.TestRemoteSearchable.testConstantScoreQuery()",1,1,1
"org.apache.lucene.search.TestRemoteSearchable.testPhraseQuery()",1,1,1
"org.apache.lucene.search.TestRemoteSearchable.testQueryFilter()",1,1,1
"org.apache.lucene.search.TestRemoteSearchable.testTermQuery()",1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.MyFieldComparator(int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.compare(int,int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.compareBottom(int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.copy(int,int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.value(int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparatorSource.newComparator(String,int,int,boolean)",1,1,1
"org.apache.lucene.search.TestRemoteSort.afterClass()",1,1,1
"org.apache.lucene.search.TestRemoteSort.assertMatches(Searcher,Query,Sort,String)",1,3,3
"org.apache.lucene.search.TestRemoteSort.assertSameValues(HashMap<?, ?>,HashMap<?, ?>)",1,3,3
"org.apache.lucene.search.TestRemoteSort.beforeClass()",1,12,12
"org.apache.lucene.search.TestRemoteSort.getRandomCharString(int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.getRandomCharString(int,int,int)",1,2,2
"org.apache.lucene.search.TestRemoteSort.getRandomNumber(int,int)",1,1,1
"org.apache.lucene.search.TestRemoteSort.getRandomNumberString(int,int,int)",1,2,2
"org.apache.lucene.search.TestRemoteSort.getScores(ScoreDoc[],Searcher)",1,2,2
"org.apache.lucene.search.TestRemoteSort.runMultiSorts(Searcher,boolean)",1,1,5
"org.apache.lucene.search.TestRemoteSort.setUp()",1,1,1
"org.apache.lucene.search.TestRemoteSort.testNormalizedScores()",1,1,1
"org.apache.lucene.search.TestRemoteSort.testRemoteSort()",1,1,1
"org.apache.lucene.search.TestScoreCachingWrappingScorer.ScoreCachingCollector.ScoreCachingCollector(int)",1,1,1
"org.apache.lucene.search.TestScoreCachingWrappingScorer.ScoreCachingCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TestScoreCachingWrappingScorer.ScoreCachingCollector.collect(int)",2,1,2
"org.apache.lucene.search.TestScoreCachingWrappingScorer.ScoreCachingCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestScoreCachingWrappingScorer.ScoreCachingCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TestScoreCachingWrappingScorer.SimpleScorer.SimpleScorer()",1,1,1
"org.apache.lucene.search.TestScoreCachingWrappingScorer.SimpleScorer.advance(int)",1,1,2
"org.apache.lucene.search.TestScoreCachingWrappingScorer.SimpleScorer.docID()",1,1,1
"org.apache.lucene.search.TestScoreCachingWrappingScorer.SimpleScorer.nextDoc()",1,1,2
"org.apache.lucene.search.TestScoreCachingWrappingScorer.SimpleScorer.score()",1,1,2
"org.apache.lucene.search.TestScoreCachingWrappingScorer.testGetScores()",1,3,3
"org.apache.lucene.search.TestScorerPerf.CountingHitCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TestScorerPerf.CountingHitCollector.collect(int)",1,1,1
"org.apache.lucene.search.TestScorerPerf.CountingHitCollector.getCount()",1,1,1
"org.apache.lucene.search.TestScorerPerf.CountingHitCollector.getSum()",1,1,1
"org.apache.lucene.search.TestScorerPerf.CountingHitCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestScorerPerf.CountingHitCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TestScorerPerf.MatchingHitCollector.MatchingHitCollector(BitSet)",1,1,1
"org.apache.lucene.search.TestScorerPerf.MatchingHitCollector.collect(int,float)",2,1,2
"org.apache.lucene.search.TestScorerPerf.addClause(BooleanQuery,BitSet)",1,3,3
"org.apache.lucene.search.TestScorerPerf.createDummySearcher()",1,1,1
"org.apache.lucene.search.TestScorerPerf.createRandomTerms(int,int,double,Directory)",1,5,5
"org.apache.lucene.search.TestScorerPerf.doConjunctions(int,int)",1,4,5
"org.apache.lucene.search.TestScorerPerf.doNestedConjunctions(int,int,int)",1,6,7
"org.apache.lucene.search.TestScorerPerf.doNestedTermConjunctions(IndexSearcher,int,int,int,int)",1,7,8
"org.apache.lucene.search.TestScorerPerf.doSloppyPhrase(IndexSearcher,int,int,int)",1,3,3
"org.apache.lucene.search.TestScorerPerf.doTermConjunctions(IndexSearcher,int,int,int)",1,6,7
"org.apache.lucene.search.TestScorerPerf.randBitSet(int,int)",1,2,2
"org.apache.lucene.search.TestScorerPerf.randBitSets(int,int)",1,2,2
"org.apache.lucene.search.TestScorerPerf.testConjunctions()",1,1,1
"org.apache.lucene.search.TestSearchAfter.assertPage(int,TopDocs,TopDocs)",1,2,2
"org.apache.lucene.search.TestSearchAfter.assertQuery(Query,Filter)",3,2,3
"org.apache.lucene.search.TestSearchAfter.setUp()",1,2,3
"org.apache.lucene.search.TestSearchAfter.tearDown()",1,1,1
"org.apache.lucene.search.TestSearchAfter.testQueries()",1,2,2
"org.apache.lucene.search.TestSearchWithThreads.test()",1,11,13
"org.apache.lucene.search.TestSearcherManager.doAfterWriter(ExecutorService)",1,2,2
"org.apache.lucene.search.TestSearcherManager.doClose()",1,2,2
"org.apache.lucene.search.TestSearcherManager.doSearching(ExecutorService,long)",1,5,5
"org.apache.lucene.search.TestSearcherManager.getCurrentSearcher()",3,9,9
"org.apache.lucene.search.TestSearcherManager.getFinalSearcher()",1,3,3
"org.apache.lucene.search.TestSearcherManager.releaseSearcher(IndexSearcher)",1,1,1
"org.apache.lucene.search.TestSearcherManager.testCloseTwice()",1,1,1
"org.apache.lucene.search.TestSearcherManager.testEnsureOpen()",1,1,3
"org.apache.lucene.search.TestSearcherManager.testEvilSearcherFactory()",1,1,3
"org.apache.lucene.search.TestSearcherManager.testIntermediateClose()",1,11,14
"org.apache.lucene.search.TestSearcherManager.testSearcherManager()",1,2,2
"org.apache.lucene.search.TestSetNorm.testSetNorm()",1,2,2
"org.apache.lucene.search.TestSimilarity.SimpleSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.search.TestSimilarity.SimpleSimilarity.coord(int,int)",1,1,1
"org.apache.lucene.search.TestSimilarity.SimpleSimilarity.idf(int,int)",1,1,1
"org.apache.lucene.search.TestSimilarity.SimpleSimilarity.idfExplain(Collection<Term>,Searcher)",1,1,1
"org.apache.lucene.search.TestSimilarity.SimpleSimilarity.queryNorm(float)",1,1,1
"org.apache.lucene.search.TestSimilarity.SimpleSimilarity.sloppyFreq(int)",1,1,1
"org.apache.lucene.search.TestSimilarity.SimpleSimilarity.tf(float)",1,1,1
"org.apache.lucene.search.TestSimilarity.testSimilarity()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ10()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ11()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ14()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ15()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ16()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ17()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ19()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ20()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ3()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ4()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ5()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ6()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ7()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ8()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testBQ9()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testCSQ1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testCSQ2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testCSQ3()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ3()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ4()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ5()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ6()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ7()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ8()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testDMQ9()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testFQ1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testFQ2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testFQ3()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testFQ4()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testFQ6()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMA1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMA2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMPQ1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMPQ2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMPQ3()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMPQ4()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMPQ5()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMPQ6()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ10()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ3()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ4()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ5()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ6()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ7()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ8()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQ9()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQofPQ1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQofPQ2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQofPQ3()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQofPQ4()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQofPQ5()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQofPQ6()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testMultiFieldBQofPQ7()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testP1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testP2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testP3()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testP4()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testP5()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testP6()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testP7()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testT1()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testT2()",1,1,1
"org.apache.lucene.search.TestSimpleExplanations.testTermQueryMultiSearcherExplain()",1,1,1
"org.apache.lucene.search.TestSimpleExplanationsOfNonMatches.qtest(Query,int[])",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testBooleanAndVersusBooleanOr()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testBooleanReqExclVersusTerm()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testDisjunctionSumVersusDisjunctionMax()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testExactPhraseVersusBooleanAnd()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testExactPhraseVersusBooleanAndWithHoles()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testExactPhraseVersusMultiPhrase()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testExactPhraseVersusMultiPhraseWithHoles()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testPhraseVersusSloppyPhrase()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testPhraseVersusSloppyPhraseWithHoles()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testSloppyPhraseVersusBooleanAnd()",1,2,2
"org.apache.lucene.search.TestSimpleSearchEquivalence.testTermVersusBooleanOr()",1,1,1
"org.apache.lucene.search.TestSimpleSearchEquivalence.testTermVersusBooleanReqOpt()",1,1,1
"org.apache.lucene.search.TestSloppyPhraseQuery.assertSaneScoring(PhraseQuery,IndexSearcher)",1,1,1
"org.apache.lucene.search.TestSloppyPhraseQuery.checkPhraseQuery(Document,PhraseQuery,int,int)",1,1,1
"org.apache.lucene.search.TestSloppyPhraseQuery.makeDocument(String)",1,1,1
"org.apache.lucene.search.TestSloppyPhraseQuery.makePhraseQuery(String)",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery.testDoc1_Query1_All_Slops_Should_match()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery.testDoc2_Query1_Slop_6_or_more_Should_match()",1,3,4
"org.apache.lucene.search.TestSloppyPhraseQuery.testDoc2_Query2_All_Slops_Should_match()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery.testDoc3_Query1_All_Slops_Should_match()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery.testDoc4_Query4_All_Slops_Should_match()",1,2,3
"org.apache.lucene.search.TestSloppyPhraseQuery.testDoc5_Query5_Any_Slop_Should_be_consistent()",1,4,4
"org.apache.lucene.search.TestSloppyPhraseQuery.testInfiniteFreq1()",1,1,1
"org.apache.lucene.search.TestSloppyPhraseQuery.testInfiniteFreq2()",1,1,1
"org.apache.lucene.search.TestSloppyPhraseQuery.testSlopWithHoles()",1,1,1
"org.apache.lucene.search.TestSloppyPhraseQuery2.randomPhraseQuery(long)",1,3,3
"org.apache.lucene.search.TestSloppyPhraseQuery2.testIncreasingSloppiness()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery2.testIncreasingSloppiness3()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery2.testIncreasingSloppiness3WithHoles()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery2.testIncreasingSloppinessWithHoles()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery2.testRandomIncreasingSloppiness()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery2.testRepetitiveIncreasingSloppiness()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery2.testRepetitiveIncreasingSloppiness3()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery2.testRepetitiveIncreasingSloppiness3WithHoles()",1,2,2
"org.apache.lucene.search.TestSloppyPhraseQuery2.testRepetitiveIncreasingSloppinessWithHoles()",1,2,2
"org.apache.lucene.search.TestSort.MyFieldComparator.MyFieldComparator(int)",1,1,1
"org.apache.lucene.search.TestSort.MyFieldComparator.compare(int,int)",1,1,1
"org.apache.lucene.search.TestSort.MyFieldComparator.compareBottom(int)",1,1,1
"org.apache.lucene.search.TestSort.MyFieldComparator.copy(int,int)",1,1,1
"org.apache.lucene.search.TestSort.MyFieldComparator.setBottom(int)",1,1,1
"org.apache.lucene.search.TestSort.MyFieldComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestSort.MyFieldComparator.value(int)",1,1,1
"org.apache.lucene.search.TestSort.MyFieldComparatorSource.newComparator(String,int,int,boolean)",1,1,1
"org.apache.lucene.search.TestSort.RandomFilter.RandomFilter(Random,float,List<String>)",1,1,1
"org.apache.lucene.search.TestSort.RandomFilter.getDocIdSet(IndexReader)",1,3,3
"org.apache.lucene.search.TestSort.SortMissingLastTestHelper.SortMissingLastTestHelper(SortField,Object,Object)",1,1,1
"org.apache.lucene.search.TestSort.assertIntResultsOrder(TopFieldCollector,int,boolean,int)",1,3,3
"org.apache.lucene.search.TestSort.assertMatches(Searcher,Query,Sort,String)",1,1,1
"org.apache.lucene.search.TestSort.assertMatches(String,Searcher,Query,Sort,String)",1,3,3
"org.apache.lucene.search.TestSort.assertSameValues(HashMap<K, V>,HashMap<K, V>)",1,3,3
"org.apache.lucene.search.TestSort.beforeClass()",1,1,1
"org.apache.lucene.search.TestSort.dataIntVal(int,int)",1,2,2
"org.apache.lucene.search.TestSort.getEmptyIndex()",1,1,1
"org.apache.lucene.search.TestSort.getFullIndex()",1,1,1
"org.apache.lucene.search.TestSort.getFullStrings()",1,2,2
"org.apache.lucene.search.TestSort.getIndex(boolean,boolean)",1,13,16
"org.apache.lucene.search.TestSort.getRandomCharString(int)",1,1,1
"org.apache.lucene.search.TestSort.getRandomCharString(int,int,int)",1,2,2
"org.apache.lucene.search.TestSort.getRandomNumber(int,int)",1,1,1
"org.apache.lucene.search.TestSort.getRandomNumberString(int,int,int)",1,2,2
"org.apache.lucene.search.TestSort.getScores(ScoreDoc[],Searcher)",1,2,2
"org.apache.lucene.search.TestSort.getXIndex()",1,1,1
"org.apache.lucene.search.TestSort.getYIndex()",1,1,1
"org.apache.lucene.search.TestSort.runMultiSorts(Searcher,boolean)",1,1,6
"org.apache.lucene.search.TestSort.setUp()",1,1,1
"org.apache.lucene.search.TestSort.tearDown()",1,2,2
"org.apache.lucene.search.TestSort.testBuiltInSorts()",1,1,1
"org.apache.lucene.search.TestSort.testCountingCollector()",1,2,2
"org.apache.lucene.search.TestSort.testCustomFieldParserSort()",1,1,1
"org.apache.lucene.search.TestSort.testEmptyFieldSort()",1,1,1
"org.apache.lucene.search.TestSort.testEmptyIndex()",1,1,1
"org.apache.lucene.search.TestSort.testEmptyStringVsNullStringSort()",1,1,1
"org.apache.lucene.search.TestSort.testInternationalMultiSearcherSort()",1,1,2
"org.apache.lucene.search.TestSort.testInternationalSort()",1,1,2
"org.apache.lucene.search.TestSort.testLUCENE2142()",1,2,2
"org.apache.lucene.search.TestSort.testLocaleSort()",1,1,1
"org.apache.lucene.search.TestSort.testMultiSort()",1,1,1
"org.apache.lucene.search.TestSort.testNewCustomFieldParserSort()",1,1,1
"org.apache.lucene.search.TestSort.testNormalizedScores()",1,1,1
"org.apache.lucene.search.TestSort.testOutOfOrderDocsScoringSort()",1,3,3
"org.apache.lucene.search.TestSort.testOutOfOrderDocsScoringSortMulti()",1,3,3
"org.apache.lucene.search.TestSort.testParallelMultiSort()",1,1,1
"org.apache.lucene.search.TestSort.testRandomStringSort()",8,17,19
"org.apache.lucene.search.TestSort.testReverseSort()",1,1,1
"org.apache.lucene.search.TestSort.testSimultaneousSorts()",1,1,1
"org.apache.lucene.search.TestSort.testSortCombos()",1,1,1
"org.apache.lucene.search.TestSort.testSortMissingLast()",1,3,3
"org.apache.lucene.search.TestSort.testSortWithScoreAndMaxScoreTracking()",1,3,3
"org.apache.lucene.search.TestSort.testSortWithScoreAndMaxScoreTrackingNoResults()",1,2,2
"org.apache.lucene.search.TestSort.testSortWithScoreNoMaxScoreTracking()",1,3,3
"org.apache.lucene.search.TestSort.testSortWithScoreNoMaxScoreTrackingMulti()",1,3,3
"org.apache.lucene.search.TestSort.testSortWithoutFillFields()",1,3,3
"org.apache.lucene.search.TestSort.testSortWithoutScoreTracking()",1,3,3
"org.apache.lucene.search.TestSort.testStringSort()",1,10,10
"org.apache.lucene.search.TestSort.testTopDocsScores()",1,1,1
"org.apache.lucene.search.TestSort.testTypedSort()",1,1,1
"org.apache.lucene.search.TestSpanQueryFilter.assertContainsDocId(String,DocIdSet,int)",1,1,1
"org.apache.lucene.search.TestSpanQueryFilter.getDocIdSetSize(DocIdSet)",1,1,2
"org.apache.lucene.search.TestSpanQueryFilter.testFilterWorks()",1,3,3
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.CountingCollector(Collector)",1,1,1
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.CountingCollector(Collector,EnumSet<Occur>)",1,1,1
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.MockScorerVisitor.visitOptional(Query,Query,Scorer)",1,2,2
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.MockScorerVisitor.visitProhibited(Query,Query,Scorer)",1,2,2
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.MockScorerVisitor.visitRequired(Query,Query,Scorer)",1,2,2
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.collect(int)",1,3,3
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestSubScorerFreqs.CountingCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TestSubScorerFreqs.finish()",1,1,1
"org.apache.lucene.search.TestSubScorerFreqs.makeIndex()",1,2,2
"org.apache.lucene.search.TestSubScorerFreqs.testBooleanQuery()",1,5,7
"org.apache.lucene.search.TestSubScorerFreqs.testPhraseQuery()",1,2,2
"org.apache.lucene.search.TestSubScorerFreqs.testTermQuery()",1,2,2
"org.apache.lucene.search.TestTermRangeFilter.testDanish()",1,2,2
"org.apache.lucene.search.TestTermRangeFilter.testFarsi()",1,1,1
"org.apache.lucene.search.TestTermRangeFilter.testRangeFilterId()",1,1,1
"org.apache.lucene.search.TestTermRangeFilter.testRangeFilterIdCollating()",1,1,1
"org.apache.lucene.search.TestTermRangeFilter.testRangeFilterRand()",1,1,1
"org.apache.lucene.search.TestTermRangeFilter.testRangeFilterRandCollating()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.SingleCharAnalyzer.SingleCharTokenizer.SingleCharTokenizer(Reader)",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.SingleCharAnalyzer.SingleCharTokenizer.incrementToken()",2,3,3
"org.apache.lucene.search.TestTermRangeQuery.SingleCharAnalyzer.SingleCharTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.SingleCharAnalyzer.reusableTokenStream(String,Reader)",1,2,2
"org.apache.lucene.search.TestTermRangeQuery.SingleCharAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.addDoc(String)",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.checkBooleanTerms(Searcher,TermRangeQuery,String...)",1,2,2
"org.apache.lucene.search.TestTermRangeQuery.initializeIndex(String[])",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.initializeIndex(String[],Analyzer)",1,2,2
"org.apache.lucene.search.TestTermRangeQuery.insertDoc(IndexWriter,String)",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.setUp()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.tearDown()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testDanish()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testEqualsHashcode()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testExclusive()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testExclusiveCollating()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testExclusiveLowerNull()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testFarsi()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testInclusive()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testInclusiveCollating()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testInclusiveLowerNull()",1,1,1
"org.apache.lucene.search.TestTermRangeQuery.testTopTermsRewrite()",1,1,1
"org.apache.lucene.search.TestTermScorer.TestHit.TestHit(int,float)",1,1,1
"org.apache.lucene.search.TestTermScorer.TestHit.toString()",1,1,1
"org.apache.lucene.search.TestTermScorer.setUp()",1,2,2
"org.apache.lucene.search.TestTermScorer.tearDown()",1,1,1
"org.apache.lucene.search.TestTermScorer.test()",1,2,3
"org.apache.lucene.search.TestTermScorer.testAdvance()",1,2,2
"org.apache.lucene.search.TestTermScorer.testNext()",1,2,2
"org.apache.lucene.search.TestTermVectors.afterClass()",1,1,1
"org.apache.lucene.search.TestTermVectors.beforeClass()",1,2,6
"org.apache.lucene.search.TestTermVectors.createDir(Directory)",1,1,1
"org.apache.lucene.search.TestTermVectors.createDoc()",1,1,1
"org.apache.lucene.search.TestTermVectors.createWriter(Directory)",1,1,1
"org.apache.lucene.search.TestTermVectors.setUp()",1,2,6
"org.apache.lucene.search.TestTermVectors.setupDoc(Document,String)",1,1,1
"org.apache.lucene.search.TestTermVectors.tearDown()",1,1,1
"org.apache.lucene.search.TestTermVectors.test()",1,1,1
"org.apache.lucene.search.TestTermVectors.testFullMergeAddDocs()",1,2,2
"org.apache.lucene.search.TestTermVectors.testFullMergeAddIndexesDir()",1,2,2
"org.apache.lucene.search.TestTermVectors.testFullMergeAddIndexesReader()",1,3,3
"org.apache.lucene.search.TestTermVectors.testKnownSetOfDocuments()",1,8,10
"org.apache.lucene.search.TestTermVectors.testMixedVectrosVectors()",1,3,3
"org.apache.lucene.search.TestTermVectors.testRareVectors()",1,7,8
"org.apache.lucene.search.TestTermVectors.testTermOffsetVectors()",1,3,3
"org.apache.lucene.search.TestTermVectors.testTermPositionVectors()",1,7,16
"org.apache.lucene.search.TestTermVectors.testTermVectors()",1,3,3
"org.apache.lucene.search.TestTermVectors.testTermVectorsFieldOrder()",1,3,3
"org.apache.lucene.search.TestTermVectors.verifyIndex(Directory)",1,2,2
"org.apache.lucene.search.TestThreadSafe.Thr.Thr(int,Random,AtomicBoolean)",1,1,1
"org.apache.lucene.search.TestThreadSafe.Thr.loadDoc(IndexReader)",4,3,5
"org.apache.lucene.search.TestThreadSafe.Thr.run()",2,4,4
"org.apache.lucene.search.TestThreadSafe.buildDir(Directory,int,int,int)",1,4,4
"org.apache.lucene.search.TestThreadSafe.doTest(int,int)",1,3,3
"org.apache.lucene.search.TestThreadSafe.testLazyLoadThreadSafety()",1,2,2
"org.apache.lucene.search.TestThreadSafe.validateField(Fieldable)",2,3,3
"org.apache.lucene.search.TestTimeLimitingCollector.MyHitCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.MyHitCollector.collect(int)",2,2,3
"org.apache.lucene.search.TestTimeLimitingCollector.MyHitCollector.getLastDocCollected()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.MyHitCollector.hitCount()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.MyHitCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.MyHitCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.MyHitCollector.setSlowDown(int)",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.add(String,RandomIndexWriter)",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.createTimedCollector(MyHitCollector,long,boolean)",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.doTestMultiThreads(boolean)",1,5,5
"org.apache.lucene.search.TestTimeLimitingCollector.doTestSearch()",1,2,2
"org.apache.lucene.search.TestTimeLimitingCollector.doTestTimeout(boolean,boolean)",1,4,5
"org.apache.lucene.search.TestTimeLimitingCollector.maxTime(boolean)",1,1,2
"org.apache.lucene.search.TestTimeLimitingCollector.maxTimeStr(boolean)",1,1,2
"org.apache.lucene.search.TestTimeLimitingCollector.search(Collector)",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.setUp()",1,2,3
"org.apache.lucene.search.TestTimeLimitingCollector.tearDown()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.testModifyResolution()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.testSearch()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.testSearchMultiThreaded()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.testTimeoutGreedy()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.testTimeoutMultiThreaded()",1,1,1
"org.apache.lucene.search.TestTimeLimitingCollector.testTimeoutNotGreedy()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.MyTopsDocCollector.MyTopsDocCollector(int)",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.MyTopsDocCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.MyTopsDocCollector.collect(int)",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.MyTopsDocCollector.newTopDocs(ScoreDoc[],int)",2,3,4
"org.apache.lucene.search.TestTopDocsCollector.MyTopsDocCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.MyTopsDocCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.doSearch(int)",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.setUp()",1,2,2
"org.apache.lucene.search.TestTopDocsCollector.tearDown()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.testFirstResultsPage()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.testGetAllResults()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.testGetResultsFromStart()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.testInvalidArguments()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.testMaxScore()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.testResultsOrder()",1,2,2
"org.apache.lucene.search.TestTopDocsCollector.testSecondResultsPages()",1,1,1
"org.apache.lucene.search.TestTopDocsCollector.testZeroResults()",1,1,1
"org.apache.lucene.search.TestTopDocsMerge.ShardSearcher.ShardSearcher(IndexReader)",1,1,1
"org.apache.lucene.search.TestTopDocsMerge.ShardSearcher.search(Weight,Collector)",1,1,1
"org.apache.lucene.search.TestTopDocsMerge.ShardSearcher.search(Weight,int)",1,1,1
"org.apache.lucene.search.TestTopDocsMerge.ShardSearcher.toString()",1,1,1
"org.apache.lucene.search.TestTopDocsMerge.rebaseDocIDs(int,TopDocs)",1,8,8
"org.apache.lucene.search.TestTopDocsMerge.testSort()",1,29,33
"org.apache.lucene.search.TestTopScoreDocCollector.testOutOfOrderCollection()",1,4,4
"org.apache.lucene.search.TestWildcard.assertMatches(IndexSearcher,Query,int)",1,1,1
"org.apache.lucene.search.TestWildcard.getIndexStore(String,String[])",1,2,2
"org.apache.lucene.search.TestWildcard.setUp()",1,1,1
"org.apache.lucene.search.TestWildcard.testAsterisk()",1,1,1
"org.apache.lucene.search.TestWildcard.testEmptyTerm()",1,1,1
"org.apache.lucene.search.TestWildcard.testEquals()",1,1,1
"org.apache.lucene.search.TestWildcard.testLotsOfAsterisks()",1,2,2
"org.apache.lucene.search.TestWildcard.testParsingAndSearching()",1,12,12
"org.apache.lucene.search.TestWildcard.testPrefixTerm()",1,1,1
"org.apache.lucene.search.TestWildcard.testQuestionmark()",1,1,1
"org.apache.lucene.search.TestWildcard.testTermWithoutWildcard()",1,1,1
"org.apache.lucene.search.TestWildcardRandom.N()",1,1,1
"org.apache.lucene.search.TestWildcardRandom.assertPatternHits(String,int)",1,1,1
"org.apache.lucene.search.TestWildcardRandom.fillPattern(String)",2,3,4
"org.apache.lucene.search.TestWildcardRandom.setUp()",1,2,2
"org.apache.lucene.search.TestWildcardRandom.tearDown()",1,1,1
"org.apache.lucene.search.TestWildcardRandom.testWildcards()",1,3,3
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException.TimeExceededException(long,long,int)",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException.getLastDocCollected()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException.getTimeAllowed()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException.getTimeElapsed()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimeLimitingCollector(Collector,Counter,long)",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.TimerThread(Counter)",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.TimerThread(long,Counter)",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.getMilliseconds()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.getResolution()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.run()",2,2,3
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.setResolution(long)",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.stopTimer()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.collect(int)",2,3,3
"org.apache.lucene.search.TimeLimitingCollector.getGlobalCounter()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.getGlobalTimerThread()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.isGreedy()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.setBaseline()",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.setBaseline(long)",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.setCollector(Collector)",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean)",1,1,1
"org.apache.lucene.search.TimeLimitingCollector.setNextReader(IndexReader,int)",1,2,2
"org.apache.lucene.search.TimeLimitingCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TopDocs.MergeSortQueue.MergeSortQueue(Sort,TopDocs[])",6,2,8
"org.apache.lucene.search.TopDocs.MergeSortQueue.lessThan(ShardRef,ShardRef)",5,2,5
"org.apache.lucene.search.TopDocs.ScoreMergeSortQueue.ScoreMergeSortQueue(TopDocs[])",1,1,2
"org.apache.lucene.search.TopDocs.ScoreMergeSortQueue.lessThan(ShardRef,ShardRef)",5,1,5
"org.apache.lucene.search.TopDocs.ShardRef.ShardRef(int)",1,1,1
"org.apache.lucene.search.TopDocs.ShardRef.toString()",1,1,1
"org.apache.lucene.search.TopDocs.TopDocs(int,ScoreDoc[])",1,1,1
"org.apache.lucene.search.TopDocs.TopDocs(int,ScoreDoc[],float)",1,1,1
"org.apache.lucene.search.TopDocs.getMaxScore()",1,1,1
"org.apache.lucene.search.TopDocs.merge(Sort,int,TopDocs[])",2,6,9
"org.apache.lucene.search.TopDocs.setMaxScore(float)",1,1,1
"org.apache.lucene.search.TopDocsCollector.TopDocsCollector(PriorityQueue<T>)",1,1,1
"org.apache.lucene.search.TopDocsCollector.getTotalHits()",1,1,1
"org.apache.lucene.search.TopDocsCollector.newTopDocs(ScoreDoc[],int)",1,1,2
"org.apache.lucene.search.TopDocsCollector.populateResults(ScoreDoc[],int)",1,2,2
"org.apache.lucene.search.TopDocsCollector.topDocs()",1,1,1
"org.apache.lucene.search.TopDocsCollector.topDocs(int)",1,1,1
"org.apache.lucene.search.TopDocsCollector.topDocs(int,int)",2,3,5
"org.apache.lucene.search.TopDocsCollector.topDocsSize()",1,2,2
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.MultiComparatorNonScoringCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.collect(int)",6,8,11
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.setNextReader(IndexReader,int)",1,2,2
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.setScorer(Scorer)",1,2,2
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.updateBottom(int)",1,1,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector.MultiComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector.collect(int)",6,8,12
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector.updateBottom(int,float)",1,1,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector.MultiComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector.collect(int)",6,8,11
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector.updateBottom(int,float)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.OneComparatorNonScoringCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.collect(int)",3,3,4
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.updateBottom(int)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector.OneComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector.collect(int)",3,3,5
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector.updateBottom(int,float)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector.OneComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector.collect(int)",3,3,4
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector.updateBottom(int,float)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorNonScoringCollector.OutOfOrderMultiComparatorNonScoringCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorNonScoringCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorNonScoringCollector.collect(int)",7,8,12
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector.collect(int)",7,8,13
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector.collect(int)",7,8,12
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorNonScoringCollector.OutOfOrderOneComparatorNonScoringCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorNonScoringCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorNonScoringCollector.collect(int)",3,3,6
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringMaxScoreCollector.OutOfOrderOneComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringMaxScoreCollector.collect(int)",3,3,7
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector.collect(int)",3,3,6
"org.apache.lucene.search.TopFieldCollector.TopFieldCollector(PriorityQueue<Entry>,int,boolean)",1,1,1
"org.apache.lucene.search.TopFieldCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopFieldCollector.add(int,int,float)",1,1,1
"org.apache.lucene.search.TopFieldCollector.create(Sort,int,boolean,boolean,boolean,boolean)",14,1,14
"org.apache.lucene.search.TopFieldCollector.newTopDocs(ScoreDoc[],int)",1,1,2
"org.apache.lucene.search.TopFieldCollector.populateResults(ScoreDoc[],int)",1,4,4
"org.apache.lucene.search.TopFieldDocs.TopFieldDocs(int,ScoreDoc[],SortField[],float)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.InOrderPagingScoreDocCollector(ScoreDoc,int)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.collect(int)",3,1,5
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.newTopDocs(ScoreDoc[],int)",1,1,2
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.topDocsSize()",1,2,2
"org.apache.lucene.search.TopScoreDocCollector.InOrderTopScoreDocCollector.InOrderTopScoreDocCollector(int)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderTopScoreDocCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderTopScoreDocCollector.collect(int)",2,1,2
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.OutOfOrderPagingScoreDocCollector(ScoreDoc,int)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.collect(int)",4,1,7
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.newTopDocs(ScoreDoc[],int)",1,1,2
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.topDocsSize()",1,2,2
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderTopScoreDocCollector.OutOfOrderTopScoreDocCollector(int)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderTopScoreDocCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderTopScoreDocCollector.collect(int)",3,1,4
"org.apache.lucene.search.TopScoreDocCollector.TopScoreDocCollector(int)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.create(int,ScoreDoc,boolean)",3,1,5
"org.apache.lucene.search.TopScoreDocCollector.create(int,boolean)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.newTopDocs(ScoreDoc[],int)",2,3,4
"org.apache.lucene.search.TopScoreDocCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TopScoreDocCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.TopTermsRewrite.ScoreTerm.compareTo(ScoreTerm)",2,2,2
"org.apache.lucene.search.TopTermsRewrite.TopTermsRewrite(int)",1,1,1
"org.apache.lucene.search.TopTermsRewrite.equals(Object)",5,1,5
"org.apache.lucene.search.TopTermsRewrite.getSize()",1,1,1
"org.apache.lucene.search.TopTermsRewrite.hashCode()",1,1,1
"org.apache.lucene.search.TopTermsRewrite.rewrite(IndexReader,MultiTermQuery)",2,4,5
"org.apache.lucene.search.TotalHitCountCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.TotalHitCountCollector.collect(int)",1,1,1
"org.apache.lucene.search.TotalHitCountCollector.getTotalHits()",1,1,1
"org.apache.lucene.search.TotalHitCountCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.TotalHitCountCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.Weight.scoresDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.WildcardQuery.WildcardQuery(Term)",1,4,4
"org.apache.lucene.search.WildcardQuery.equals(Object)",7,2,7
"org.apache.lucene.search.WildcardQuery.getEnum(IndexReader)",3,3,3
"org.apache.lucene.search.WildcardQuery.getTerm()",1,1,1
"org.apache.lucene.search.WildcardQuery.hashCode()",1,2,2
"org.apache.lucene.search.WildcardQuery.toString(String)",1,2,2
"org.apache.lucene.search.WildcardTermEnum.WildcardTermEnum(IndexReader,Term)",1,4,4
"org.apache.lucene.search.WildcardTermEnum.difference()",1,1,1
"org.apache.lucene.search.WildcardTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.WildcardTermEnum.termCompare(Term)",3,3,3
"org.apache.lucene.search.WildcardTermEnum.wildcardEquals(String,int,String,int)",13,8,18
"org.apache.lucene.search.function.ByteFieldSource.ByteFieldSource(String)",1,1,1
"org.apache.lucene.search.function.ByteFieldSource.ByteFieldSource(String,ByteParser)",1,1,1
"org.apache.lucene.search.function.ByteFieldSource.cachedFieldSourceEquals(FieldCacheSource)",2,2,3
"org.apache.lucene.search.function.ByteFieldSource.cachedFieldSourceHashCode()",1,2,2
"org.apache.lucene.search.function.ByteFieldSource.description()",1,1,1
"org.apache.lucene.search.function.ByteFieldSource.getCachedFieldValues(FieldCache,String,IndexReader)",1,1,1
"org.apache.lucene.search.function.CustomScoreProvider.CustomScoreProvider(IndexReader)",1,1,1
"org.apache.lucene.search.function.CustomScoreProvider.customExplain(int,Explanation,Explanation)",1,2,2
"org.apache.lucene.search.function.CustomScoreProvider.customExplain(int,Explanation,Explanation[])",3,4,5
"org.apache.lucene.search.function.CustomScoreProvider.customScore(int,float,float)",1,1,1
"org.apache.lucene.search.function.CustomScoreProvider.customScore(int,float,float[])",3,3,4
"org.apache.lucene.search.function.CustomScoreQuery.CustomScoreQuery(Query)",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomScoreQuery(Query,ValueSourceQuery)",1,1,2
"org.apache.lucene.search.function.CustomScoreQuery.CustomScoreQuery(Query,ValueSourceQuery...)",2,1,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.CustomScorer(Similarity,IndexReader,CustomWeight,Scorer,Scorer[])",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.advance(int)",1,3,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.docID()",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.nextDoc()",1,3,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.score()",1,2,2
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.CustomWeight(Searcher)",1,2,2
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.doExplain(IndexReader,int)",2,2,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.explain(IndexReader,int)",1,1,2
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.getQuery()",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.getValue()",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.normalize(float)",1,3,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.scorer(IndexReader,boolean,boolean)",2,2,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.scoresDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.sumOfSquaredWeights()",1,3,3
"org.apache.lucene.search.function.CustomScoreQuery.clone()",1,2,2
"org.apache.lucene.search.function.CustomScoreQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.equals(Object)",5,4,8
"org.apache.lucene.search.function.CustomScoreQuery.extractTerms(Set<Term>)",1,2,2
"org.apache.lucene.search.function.CustomScoreQuery.getCustomScoreProvider(IndexReader)",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.hashCode()",1,1,2
"org.apache.lucene.search.function.CustomScoreQuery.isStrict()",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.name()",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.rewrite(IndexReader)",1,5,6
"org.apache.lucene.search.function.CustomScoreQuery.setStrict(boolean)",1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.toString(String)",1,2,3
"org.apache.lucene.search.function.DocValues.compute()",3,4,7
"org.apache.lucene.search.function.DocValues.doubleVal(int)",1,1,1
"org.apache.lucene.search.function.DocValues.explain(int)",1,1,1
"org.apache.lucene.search.function.DocValues.getAverageValue()",1,1,1
"org.apache.lucene.search.function.DocValues.getInnerArray()",1,1,1
"org.apache.lucene.search.function.DocValues.getMaxValue()",1,1,1
"org.apache.lucene.search.function.DocValues.getMinValue()",1,1,1
"org.apache.lucene.search.function.DocValues.intVal(int)",1,1,1
"org.apache.lucene.search.function.DocValues.longVal(int)",1,1,1
"org.apache.lucene.search.function.DocValues.strVal(int)",1,1,1
"org.apache.lucene.search.function.FieldCacheSource.FieldCacheSource(String)",1,1,1
"org.apache.lucene.search.function.FieldCacheSource.description()",1,1,1
"org.apache.lucene.search.function.FieldCacheSource.equals(Object)",2,2,3
"org.apache.lucene.search.function.FieldCacheSource.getValues(IndexReader)",1,1,1
"org.apache.lucene.search.function.FieldCacheSource.hashCode()",1,1,1
"org.apache.lucene.search.function.FieldScoreQuery.FieldScoreQuery(String,Type)",1,1,1
"org.apache.lucene.search.function.FieldScoreQuery.Type.Type(String)",1,1,1
"org.apache.lucene.search.function.FieldScoreQuery.Type.toString()",1,1,1
"org.apache.lucene.search.function.FieldScoreQuery.getValueSource(String,Type)",5,1,5
"org.apache.lucene.search.function.FloatFieldSource.FloatFieldSource(String)",1,1,1
"org.apache.lucene.search.function.FloatFieldSource.FloatFieldSource(String,FloatParser)",1,1,1
"org.apache.lucene.search.function.FloatFieldSource.cachedFieldSourceEquals(FieldCacheSource)",2,2,3
"org.apache.lucene.search.function.FloatFieldSource.cachedFieldSourceHashCode()",1,2,2
"org.apache.lucene.search.function.FloatFieldSource.description()",1,1,1
"org.apache.lucene.search.function.FloatFieldSource.getCachedFieldValues(FieldCache,String,IndexReader)",1,1,1
"org.apache.lucene.search.function.FunctionTestSetup.addDoc(RandomIndexWriter,int)",1,1,1
"org.apache.lucene.search.function.FunctionTestSetup.afterClassFunctionTestSetup()",1,1,1
"org.apache.lucene.search.function.FunctionTestSetup.createIndex(boolean)",3,7,9
"org.apache.lucene.search.function.FunctionTestSetup.expectedFieldScore(String)",1,1,1
"org.apache.lucene.search.function.FunctionTestSetup.id2String(int)",1,1,1
"org.apache.lucene.search.function.FunctionTestSetup.log(Object)",1,2,2
"org.apache.lucene.search.function.FunctionTestSetup.textLine(int)",1,1,1
"org.apache.lucene.search.function.IntFieldSource.IntFieldSource(String)",1,1,1
"org.apache.lucene.search.function.IntFieldSource.IntFieldSource(String,IntParser)",1,1,1
"org.apache.lucene.search.function.IntFieldSource.cachedFieldSourceEquals(FieldCacheSource)",2,2,3
"org.apache.lucene.search.function.IntFieldSource.cachedFieldSourceHashCode()",1,2,2
"org.apache.lucene.search.function.IntFieldSource.description()",1,1,1
"org.apache.lucene.search.function.IntFieldSource.getCachedFieldValues(FieldCache,String,IndexReader)",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileDocValues.floatVal(int)",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileDocValues.toString(int)",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileFieldCacheSource.JustCompileFieldCacheSource(String)",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileFieldCacheSource.cachedFieldSourceEquals(FieldCacheSource)",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileFieldCacheSource.cachedFieldSourceHashCode()",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileFieldCacheSource.getCachedFieldValues(FieldCache,String,IndexReader)",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileValueSource.description()",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileValueSource.equals(Object)",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileValueSource.getValues(IndexReader)",1,1,1
"org.apache.lucene.search.function.JustCompileSearchFunction.JustCompileValueSource.hashCode()",1,1,1
"org.apache.lucene.search.function.OrdFieldSource.OrdFieldSource(String)",1,1,1
"org.apache.lucene.search.function.OrdFieldSource.description()",1,1,1
"org.apache.lucene.search.function.OrdFieldSource.equals(Object)",4,1,4
"org.apache.lucene.search.function.OrdFieldSource.getValues(IndexReader)",1,1,1
"org.apache.lucene.search.function.OrdFieldSource.hashCode()",1,1,1
"org.apache.lucene.search.function.ReverseOrdFieldSource.ReverseOrdFieldSource(String)",1,1,1
"org.apache.lucene.search.function.ReverseOrdFieldSource.description()",1,1,1
"org.apache.lucene.search.function.ReverseOrdFieldSource.equals(Object)",4,1,4
"org.apache.lucene.search.function.ReverseOrdFieldSource.getValues(IndexReader)",1,1,1
"org.apache.lucene.search.function.ReverseOrdFieldSource.hashCode()",1,1,1
"org.apache.lucene.search.function.ShortFieldSource.ShortFieldSource(String)",1,1,1
"org.apache.lucene.search.function.ShortFieldSource.ShortFieldSource(String,ShortParser)",1,1,1
"org.apache.lucene.search.function.ShortFieldSource.cachedFieldSourceEquals(FieldCacheSource)",2,2,3
"org.apache.lucene.search.function.ShortFieldSource.cachedFieldSourceHashCode()",1,2,2
"org.apache.lucene.search.function.ShortFieldSource.description()",1,1,1
"org.apache.lucene.search.function.ShortFieldSource.getCachedFieldValues(FieldCache,String,IndexReader)",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.CustomAddQuery.CustomAddQuery(Query,ValueSourceQuery)",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.CustomAddQuery.getCustomScoreProvider(IndexReader)",1,3,3
"org.apache.lucene.search.function.TestCustomScoreQuery.CustomAddQuery.name()",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.CustomExternalQuery.CustomExternalQuery(Query)",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.CustomExternalQuery.getCustomScoreProvider(IndexReader)",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.CustomMulAddQuery.CustomMulAddQuery(Query,ValueSourceQuery,ValueSourceQuery)",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.CustomMulAddQuery.getCustomScoreProvider(IndexReader)",5,2,5
"org.apache.lucene.search.function.TestCustomScoreQuery.CustomMulAddQuery.name()",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.beforeClass()",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.doTestCustomScore(String,Type,double)",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.logResult(String,Searcher,Query,int,float)",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.testCustomExternalQuery()",1,2,2
"org.apache.lucene.search.function.TestCustomScoreQuery.testCustomScoreByte()",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.testCustomScoreFloat()",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.testCustomScoreInt()",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.testCustomScoreShort()",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.testRewrite()",1,1,1
"org.apache.lucene.search.function.TestCustomScoreQuery.topDocsToMap(TopDocs)",1,2,2
"org.apache.lucene.search.function.TestCustomScoreQuery.verifyResults(float,IndexSearcher,Map<Integer, Float>,Map<Integer, Float>,Map<Integer, Float>,Map<Integer, Float>,Map<Integer, Float>,Query,Query,Query,Query,Query)",1,2,2
"org.apache.lucene.search.function.TestDocValues.DocValuesTestImpl.DocValuesTestImpl(float[])",1,1,1
"org.apache.lucene.search.function.TestDocValues.DocValuesTestImpl.floatVal(int)",1,1,1
"org.apache.lucene.search.function.TestDocValues.DocValuesTestImpl.toString(int)",1,1,1
"org.apache.lucene.search.function.TestDocValues.testGetAverageValue()",1,1,1
"org.apache.lucene.search.function.TestDocValues.testGetMaxValue()",1,1,1
"org.apache.lucene.search.function.TestDocValues.testGetMinValue()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.beforeClass()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.doTestCaching(String,Type)",1,9,9
"org.apache.lucene.search.function.TestFieldScoreQuery.doTestExactScore(String,Type)",1,2,2
"org.apache.lucene.search.function.TestFieldScoreQuery.doTestRank(String,Type)",1,2,2
"org.apache.lucene.search.function.TestFieldScoreQuery.testCachingByte()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testCachingFloat()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testCachingInt()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testCachingShort()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testExactScoreByte()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testExactScoreFloat()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testExactScoreInt()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testExactScoreShort()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testName()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testRankByte()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testRankFloat()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testRankInt()",1,1,1
"org.apache.lucene.search.function.TestFieldScoreQuery.testRankShort()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.beforeClass()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.doTestCaching(String,boolean)",1,12,15
"org.apache.lucene.search.function.TestOrdValues.doTestExactScore(String,boolean)",1,3,4
"org.apache.lucene.search.function.TestOrdValues.doTestRank(String,boolean)",1,3,5
"org.apache.lucene.search.function.TestOrdValues.testCachingOrd()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.testCachingReverseOrd()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.testEqualsNull()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.testName()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.testOrdFieldExactScore()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.testOrdFieldRank()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.testReverseOrdFieldExactScore()",1,1,1
"org.apache.lucene.search.function.TestOrdValues.testReverseOrdFieldRank()",1,1,1
"org.apache.lucene.search.function.ValueSource.toString()",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceQuery(ValueSource)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.ValueSourceScorer(Similarity,IndexReader,ValueSourceWeight)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.advance(int)",1,2,2
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.docID()",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.nextDoc()",1,2,2
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.score()",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.ValueSourceWeight(Searcher)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.explain(IndexReader,int)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.getQuery()",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.getValue()",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.normalize(float)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.scorer(IndexReader,boolean,boolean)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.equals(Object)",4,2,5
"org.apache.lucene.search.function.ValueSourceQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.hashCode()",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.rewrite(IndexReader)",1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.toString(String)",1,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.AbstractAllGroupHeadsCollector(int)",1,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.GroupHead.GroupHead(GROUP_VALUE_TYPE,int)",1,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.collect(int)",6,2,6
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.groupHeadsSize()",1,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads()",1,1,2
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads(int)",1,2,2
"org.apache.lucene.search.grouping.AbstractAllGroupsCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupsCollector.getGroupCount()",1,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupsCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.AbstractFirstPassGroupingCollector(Sort,int)",2,2,4
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.buildSortedSet()",4,3,5
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.collect(int)",12,17,22
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean)",5,5,8
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.setNextReader(IndexReader,int)",1,2,2
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.setScorer(Scorer)",1,2,2
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>>,Sort,Sort,int,boolean,boolean,boolean)",2,3,4
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.SearchGroupDocs.SearchGroupDocs(GROUP_VALUE_TYPE,TopDocsCollector<?>)",1,1,1
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.collect(int)",1,2,2
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int)",1,3,3
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.setNextReader(IndexReader,int)",1,2,2
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.setScorer(Scorer)",1,2,2
"org.apache.lucene.search.grouping.BlockGroupingCollector.BlockGroupingCollector(Sort,int,boolean,Filter)",2,2,5
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.FakeScorer()",1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.advance(int)",1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.docID()",1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.nextDoc()",1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.score()",1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.GroupQueue.GroupQueue(int)",1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.GroupQueue.lessThan(OneGroup,OneGroup)",3,2,3
"org.apache.lucene.search.grouping.BlockGroupingCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.collect(int)",11,13,19
"org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean)",5,8,11
"org.apache.lucene.search.grouping.BlockGroupingCollector.processGroup()",1,6,8
"org.apache.lucene.search.grouping.BlockGroupingCollector.setNextReader(IndexReader,int)",1,3,3
"org.apache.lucene.search.grouping.BlockGroupingCollector.setScorer(Scorer)",1,2,2
"org.apache.lucene.search.grouping.GroupDocs.GroupDocs(float,int,ScoreDoc[],GROUP_VALUE_TYPE,Object[])",1,1,1
"org.apache.lucene.search.grouping.SearchGroup.GroupComparator.GroupComparator(Sort)",1,2,3
"org.apache.lucene.search.grouping.SearchGroup.GroupComparator.compare(MergedGroup<T>,MergedGroup<T>)",4,2,4
"org.apache.lucene.search.grouping.SearchGroup.GroupMerger.GroupMerger(Sort)",1,1,1
"org.apache.lucene.search.grouping.SearchGroup.GroupMerger.merge(List<Collection<SearchGroup<T>>>,int,int)",5,6,8
"org.apache.lucene.search.grouping.SearchGroup.GroupMerger.updateNextGroup(int,ShardIter<T>)",7,8,12
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup.MergedGroup(T)",1,1,1
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup.equals(Object)",3,3,3
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup.hashCode()",2,2,2
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup.neverEquals(Object)",1,3,3
"org.apache.lucene.search.grouping.SearchGroup.ShardIter.ShardIter(Collection<SearchGroup<T>>,int)",1,1,1
"org.apache.lucene.search.grouping.SearchGroup.ShardIter.next()",2,1,2
"org.apache.lucene.search.grouping.SearchGroup.ShardIter.toString()",1,1,1
"org.apache.lucene.search.grouping.SearchGroup.equals(Object)",6,3,7
"org.apache.lucene.search.grouping.SearchGroup.hashCode()",1,2,2
"org.apache.lucene.search.grouping.SearchGroup.merge(List<Collection<SearchGroup<T>>>,int,int,Sort)",2,2,2
"org.apache.lucene.search.grouping.SearchGroup.toString()",1,1,1
"org.apache.lucene.search.grouping.SentinelIntSet.SentinelIntSet(int,int)",1,2,3
"org.apache.lucene.search.grouping.SentinelIntSet.clear()",1,1,1
"org.apache.lucene.search.grouping.SentinelIntSet.exists(int)",1,1,1
"org.apache.lucene.search.grouping.SentinelIntSet.find(int)",6,1,6
"org.apache.lucene.search.grouping.SentinelIntSet.getSlot(int)",2,1,5
"org.apache.lucene.search.grouping.SentinelIntSet.hash(int)",1,1,1
"org.apache.lucene.search.grouping.SentinelIntSet.put(int)",1,3,3
"org.apache.lucene.search.grouping.SentinelIntSet.rehash()",3,3,4
"org.apache.lucene.search.grouping.SentinelIntSet.size()",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GeneralAllGroupHeadsCollector(String,Sort)",1,2,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead.GroupHead(String,Sort,int)",1,2,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead.compare(int,int)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead.updateDocHead(int)",1,2,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.getCollectedGroupHeads()",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",1,2,4
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.setNextReader(IndexReader,int)",1,3,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.setScorer(Scorer)",1,3,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.GroupHead.GroupHead(int,String)",1,1,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.GroupHead.compare(int,int)",5,2,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.GroupHead.updateDocHead(int)",1,1,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.OrdAllGroupHeadsCollector(String,Sort,int)",1,2,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.getCollectedGroupHeads()",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",1,2,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.setNextReader(IndexReader,int)",1,5,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.GroupHead.GroupHead(int,String)",1,3,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.GroupHead.compare(int,int)",8,3,8
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.GroupHead.updateDocHead(int)",1,3,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector(String,Sort,int)",1,2,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.getCollectedGroupHeads()",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",1,2,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.setNextReader(IndexReader,int)",7,5,7
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.GroupHead.GroupHead(int,String)",1,1,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.GroupHead.compare(int,int)",3,1,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.GroupHead.updateDocHead(int)",1,1,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.ScoreAllGroupHeadsCollector(String,Sort,int)",1,2,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.getCollectedGroupHeads()",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",1,2,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.setNextReader(IndexReader,int)",1,3,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.TermAllGroupHeadsCollector(String,int)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.create(String,Sort)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.create(String,Sort,int)",6,3,6
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.needGeneralImpl(SortField)",1,1,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.GroupDoc.GroupDoc(int,String,String,String,String,String)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.arrayContains(int[],int[])",4,1,6
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[])",4,4,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.getComparator(Sort,boolean,int[])",3,7,11
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.getRandomSort(boolean)",1,9,9
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.openBitSetContains(int[],FixedBitSet,int)",4,3,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.testBasic()",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.testRandom()",1,23,28
"org.apache.lucene.search.grouping.TermAllGroupsCollector.TermAllGroupsCollector(String)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupsCollector.TermAllGroupsCollector(String,int)",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupsCollector.collect(int)",1,2,3
"org.apache.lucene.search.grouping.TermAllGroupsCollector.getGroups()",1,1,1
"org.apache.lucene.search.grouping.TermAllGroupsCollector.setNextReader(IndexReader,int)",1,3,3
"org.apache.lucene.search.grouping.TermAllGroupsCollectorTest.testTotalGroupCount()",1,1,1
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector.TermFirstPassGroupingCollector(String,Sort,int)",1,1,1
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector.copyDocGroupValue(String,String)",1,1,1
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector.getDocGroupValue(int)",1,1,2
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.grouping.TermSecondPassGroupingCollector.TermSecondPassGroupingCollector(String,Collection<SearchGroup<String>>,Sort,Sort,int,boolean,boolean,boolean)",1,1,1
"org.apache.lucene.search.grouping.TermSecondPassGroupingCollector.retrieveGroup(int)",2,1,2
"org.apache.lucene.search.grouping.TermSecondPassGroupingCollector.setNextReader(IndexReader,int)",1,4,4
"org.apache.lucene.search.grouping.TestGrouping.GroupDoc.GroupDoc(int,String,String,String,String)",1,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher.ShardSearcher(IndexReader)",1,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher.search(Weight,Collector)",1,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher.search(Weight,int)",1,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher.toString()",1,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardState.ShardState(IndexSearcher)",1,3,4
"org.apache.lucene.search.grouping.TestGrouping.assertEquals(Collection<SearchGroup<String>>,Collection<SearchGroup<String>>,boolean)",1,3,3
"org.apache.lucene.search.grouping.TestGrouping.assertEquals(int[],TopGroups,TopGroups,boolean,boolean,boolean,boolean)",2,10,11
"org.apache.lucene.search.grouping.TestGrouping.fillFields(GroupDoc,Sort)",1,5,5
"org.apache.lucene.search.grouping.TestGrouping.getComparator(Sort)",3,6,9
"org.apache.lucene.search.grouping.TestGrouping.getDocBlockReader(Directory,GroupDoc[])",1,9,9
"org.apache.lucene.search.grouping.TestGrouping.getDocIDSortLocs(Sort)",1,3,3
"org.apache.lucene.search.grouping.TestGrouping.getRandomSort()",1,5,5
"org.apache.lucene.search.grouping.TestGrouping.groupToString(String)",2,1,2
"org.apache.lucene.search.grouping.TestGrouping.rebaseDocIDs(Sort,Sort,int,TopGroups<String>)",1,8,8
"org.apache.lucene.search.grouping.TestGrouping.searchShards(IndexSearcher,ShardState,Query,Sort,Sort,int,int,int,int,boolean,boolean)",2,11,11
"org.apache.lucene.search.grouping.TestGrouping.slowGrouping(GroupDoc[],String,boolean,boolean,boolean,boolean,Sort,Sort,int,int,int,int)",5,12,16
"org.apache.lucene.search.grouping.TestGrouping.testBasic()",1,1,1
"org.apache.lucene.search.grouping.TestGrouping.testRandom()",1,75,87
"org.apache.lucene.search.grouping.TestGrouping.verifyShards(int[],TopGroups<String>)",1,3,3
"org.apache.lucene.search.grouping.TopGroups.TopGroups(SortField[],SortField[],int,int,GroupDocs<GROUP_VALUE_TYPE>[])",1,1,1
"org.apache.lucene.search.grouping.TopGroups.TopGroups(TopGroups<GROUP_VALUE_TYPE>,Integer)",1,1,1
"org.apache.lucene.search.grouping.TopGroups.merge(TopGroups<T>[],Sort,Sort,int,int)",10,9,16
"org.apache.lucene.search.highlight.DefaultEncoder.DefaultEncoder()",1,1,1
"org.apache.lucene.search.highlight.DefaultEncoder.encodeText(String)",1,1,1
"org.apache.lucene.search.highlight.FragmentQueue.FragmentQueue(int)",1,1,1
"org.apache.lucene.search.highlight.FragmentQueue.lessThan(TextFragment,TextFragment)",2,2,2
"org.apache.lucene.search.highlight.GradientFormatter.GradientFormatter(float,String,String,String,String)",7,3,9
"org.apache.lucene.search.highlight.GradientFormatter.getBackgroundColorString(float)",1,1,1
"org.apache.lucene.search.highlight.GradientFormatter.getColorVal(int,int,float)",2,1,2
"org.apache.lucene.search.highlight.GradientFormatter.getForegroundColorString(float)",1,1,1
"org.apache.lucene.search.highlight.GradientFormatter.hexToInt(String)",4,2,4
"org.apache.lucene.search.highlight.GradientFormatter.highlightTerm(String,TokenGroup)",3,3,5
"org.apache.lucene.search.highlight.GradientFormatter.intToHex(int)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.Highlighter(Formatter,Encoder,Scorer)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.Highlighter(Formatter,Scorer)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.Highlighter(Scorer)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.getBestFragment(Analyzer,String,String)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.getBestFragment(TokenStream,String)",2,1,2
"org.apache.lucene.search.highlight.Highlighter.getBestFragments(Analyzer,String,String,int)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.getBestFragments(TokenStream,String,int)",1,4,4
"org.apache.lucene.search.highlight.Highlighter.getBestFragments(TokenStream,String,int,String)",1,3,3
"org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int)",3,21,23
"org.apache.lucene.search.highlight.Highlighter.getEncoder()",1,1,1
"org.apache.lucene.search.highlight.Highlighter.getFragmentScorer()",1,1,1
"org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze()",1,1,1
"org.apache.lucene.search.highlight.Highlighter.getTextFragmenter()",1,1,1
"org.apache.lucene.search.highlight.Highlighter.mergeContiguousFragments(TextFragment[])",8,7,12
"org.apache.lucene.search.highlight.Highlighter.setEncoder(Encoder)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.setFragmentScorer(Scorer)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int)",1,1,1
"org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter)",1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamConcurrent.TokenStreamConcurrent()",1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamConcurrent.incrementToken()",2,1,2
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamConcurrent.reset()",1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamSparse.TokenStreamSparse()",1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamSparse.incrementToken()",2,1,2
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamSparse.reset()",1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testConcurrentPhrase()",1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testConcurrentSpan()",1,2,3
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testSparsePhrase()",1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testSparsePhraseWithNoPositions()",1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testSparseSpan()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.addDoc(IndexWriter,String)",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.assertExpectedHighlightCount(int,int)",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.createToken(String,int,int)",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.deleteDocument()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.doSearching(Query)",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.doSearching(String)",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.doc(String,String)",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.getTS2()",2,2,2
"org.apache.lucene.search.highlight.HighlighterTest.getTS2a()",2,2,2
"org.apache.lucene.search.highlight.HighlighterTest.highlightField(Query,String,String)",1,1,2
"org.apache.lucene.search.highlight.HighlighterTest.highlightTerm(String,TokenGroup)",2,1,2
"org.apache.lucene.search.highlight.HighlighterTest.makeIndex()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.searchIndex()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.setUp()",1,2,2
"org.apache.lucene.search.highlight.HighlighterTest.tearDown()",1,2,2
"org.apache.lucene.search.highlight.HighlighterTest.testConstantScoreMultiTermQuery()",1,8,8
"org.apache.lucene.search.highlight.HighlighterTest.testEncoding()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testFieldSpecificHighlighting()",1,1,5
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsFilteredPhraseQuery()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsFilteredQuery()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsMultiTerm()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsPhrase()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsQueryScorer()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsSimpleQuery()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsWithOr()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestSingleFragment()",1,5,5
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestSingleFragmentWithWeights()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetFuzzyFragments()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetMidWildCardFragments()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetRangeFragments()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetSimpleHighlight()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testGetTextFragments()",1,4,4
"org.apache.lucene.search.highlight.HighlighterTest.testGetWildCardFragments()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testHighlightingWithDefaultField()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testMaxSizeEndHighlight()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testMaxSizeHighlight()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testMaxSizeHighlightTruncates()",1,2,2
"org.apache.lucene.search.highlight.HighlighterTest.testMultiSearcher()",1,4,4
"org.apache.lucene.search.highlight.HighlighterTest.testNearSpanSimpleQuery()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testNoFragments()",1,2,2
"org.apache.lucene.search.highlight.HighlighterTest.testNotSpanSimpleQuery()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testNumericRangeQuery()",1,2,2
"org.apache.lucene.search.highlight.HighlighterTest.testOffByOne()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testOverlapAnalyzer()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testOverlapAnalyzer2()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testPosTermStdTerm()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testQueryScorerHits()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testQueryScorerMultiPhraseQueryHighlighting()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testQueryScorerMultiPhraseQueryHighlightingWithGap()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testRegexQuery()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testRepeatingTermsInMultBooleans()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleQueryScorerPhraseHighlighting()",1,7,7
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleQueryScorerPhraseHighlighting2()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleQueryScorerPhraseHighlighting3()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleQueryTermScorerHighlighter()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleSpanFragmenter()",1,5,5
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleSpanHighlighter()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testSpanHighlighting()",1,1,1
"org.apache.lucene.search.highlight.HighlighterTest.testSpanRegexQuery()",1,3,3
"org.apache.lucene.search.highlight.HighlighterTest.testUnRewrittenQuery()",1,5,5
"org.apache.lucene.search.highlight.HighlighterTest.testWeightedTermsWithDeletes()",1,1,1
"org.apache.lucene.search.highlight.InvalidTokenOffsetsException.InvalidTokenOffsetsException(String)",1,1,1
"org.apache.lucene.search.highlight.NullFragmenter.isNewFragment()",1,1,1
"org.apache.lucene.search.highlight.NullFragmenter.start(String,TokenStream)",1,1,1
"org.apache.lucene.search.highlight.OffsetLimitTokenFilter.OffsetLimitTokenFilter(TokenStream,int)",1,1,1
"org.apache.lucene.search.highlight.OffsetLimitTokenFilter.incrementToken()",2,3,3
"org.apache.lucene.search.highlight.OffsetLimitTokenFilter.reset()",1,1,1
"org.apache.lucene.search.highlight.OffsetLimitTokenFilterTest.testFilter()",1,1,1
"org.apache.lucene.search.highlight.PositionSpan.PositionSpan(int,int)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query,IndexReader,String)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query,IndexReader,String,String)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query,String)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query,String,String)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(WeightedSpanTerm[])",1,3,4
"org.apache.lucene.search.highlight.QueryScorer.getFragmentScore()",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.getMaxTermWeight()",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.getTokenScore()",3,3,5
"org.apache.lucene.search.highlight.QueryScorer.getWeightedSpanTerm(String)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.init(Query,String,IndexReader,boolean)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.init(TokenStream)",2,3,3
"org.apache.lucene.search.highlight.QueryScorer.initExtractor(TokenStream)",2,3,3
"org.apache.lucene.search.highlight.QueryScorer.isExpandMultiTermQuery()",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.newTermExtractor(String)",1,1,2
"org.apache.lucene.search.highlight.QueryScorer.setExpandMultiTermQuery(boolean)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.setMaxDocCharsToAnalyze(int)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.setWrapIfNotCachingTokenFilter(boolean)",1,1,1
"org.apache.lucene.search.highlight.QueryScorer.startFragment(TextFragment)",1,1,1
"org.apache.lucene.search.highlight.QueryTermExtractor.getIdfWeightedTerms(Query,IndexReader,String)",1,2,4
"org.apache.lucene.search.highlight.QueryTermExtractor.getTerms(Query)",1,1,1
"org.apache.lucene.search.highlight.QueryTermExtractor.getTerms(Query,HashSet<WeightedTerm>,boolean,String)",1,6,7
"org.apache.lucene.search.highlight.QueryTermExtractor.getTerms(Query,boolean)",1,1,1
"org.apache.lucene.search.highlight.QueryTermExtractor.getTerms(Query,boolean,String)",1,2,2
"org.apache.lucene.search.highlight.QueryTermExtractor.getTermsFromBooleanQuery(BooleanQuery,HashSet<WeightedTerm>,boolean,String)",1,4,4
"org.apache.lucene.search.highlight.QueryTermExtractor.getTermsFromFilteredQuery(FilteredQuery,HashSet<WeightedTerm>,boolean,String)",1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.QueryTermScorer(Query)",1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.QueryTermScorer(Query,IndexReader,String)",1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.QueryTermScorer(Query,String)",1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.QueryTermScorer(WeightedTerm[])",1,3,4
"org.apache.lucene.search.highlight.QueryTermScorer.allFragmentsProcessed()",1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.getFragmentScore()",1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.getMaxTermWeight()",1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.getTokenScore()",2,2,3
"org.apache.lucene.search.highlight.QueryTermScorer.init(TokenStream)",1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.startFragment(TextFragment)",1,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.SimpleFragmenter()",1,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.SimpleFragmenter(int)",1,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.getFragmentSize()",1,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.isNewFragment()",1,1,2
"org.apache.lucene.search.highlight.SimpleFragmenter.setFragmentSize(int)",1,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.start(String,TokenStream)",1,1,1
"org.apache.lucene.search.highlight.SimpleHTMLEncoder.SimpleHTMLEncoder()",1,1,1
"org.apache.lucene.search.highlight.SimpleHTMLEncoder.encodeText(String)",1,1,1
"org.apache.lucene.search.highlight.SimpleHTMLEncoder.htmlEncode(String)",3,5,10
"org.apache.lucene.search.highlight.SimpleHTMLFormatter.SimpleHTMLFormatter()",1,1,1
"org.apache.lucene.search.highlight.SimpleHTMLFormatter.SimpleHTMLFormatter(String,String)",1,1,1
"org.apache.lucene.search.highlight.SimpleHTMLFormatter.highlightTerm(String,TokenGroup)",2,1,2
"org.apache.lucene.search.highlight.SimpleSpanFragmenter.SimpleSpanFragmenter(QueryScorer)",1,1,1
"org.apache.lucene.search.highlight.SimpleSpanFragmenter.SimpleSpanFragmenter(QueryScorer,int)",1,1,1
"org.apache.lucene.search.highlight.SimpleSpanFragmenter.isNewFragment()",6,5,8
"org.apache.lucene.search.highlight.SimpleSpanFragmenter.start(String,TokenStream)",1,1,1
"org.apache.lucene.search.highlight.SpanGradientFormatter.SpanGradientFormatter(float,String,String,String,String)",1,1,1
"org.apache.lucene.search.highlight.SpanGradientFormatter.highlightTerm(String,TokenGroup)",3,3,5
"org.apache.lucene.search.highlight.SynonymAnalyzer.SynonymAnalyzer(Map<String, String>)",1,1,1
"org.apache.lucene.search.highlight.SynonymAnalyzer.tokenStream(String,Reader)",1,1,2
"org.apache.lucene.search.highlight.SynonymTokenizer.SynonymTokenizer(TokenStream,Map<String, String>)",1,1,1
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter)",1,1,1
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean)",1,3,5
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.getHighlighter(Query,String,TokenStream,Formatter)",1,1,1
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.getHighlighter(Query,String,TokenStream,Formatter,boolean)",3,3,4
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.getHighlighter(WeightedTerm[],Formatter)",3,1,3
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.start()",1,3,3
"org.apache.lucene.search.highlight.SynonymTokenizer.incrementToken()",4,3,6
"org.apache.lucene.search.highlight.SynonymTokenizer.reset()",1,1,1
"org.apache.lucene.search.highlight.TextFragment.TextFragment(CharSequence,int,int)",1,1,1
"org.apache.lucene.search.highlight.TextFragment.TextFragment(StringBuffer,int,int)",1,1,1
"org.apache.lucene.search.highlight.TextFragment.follows(TextFragment)",1,1,1
"org.apache.lucene.search.highlight.TextFragment.getFragNum()",1,1,1
"org.apache.lucene.search.highlight.TextFragment.getScore()",1,1,1
"org.apache.lucene.search.highlight.TextFragment.merge(TextFragment)",1,1,1
"org.apache.lucene.search.highlight.TextFragment.setScore(float)",1,1,1
"org.apache.lucene.search.highlight.TextFragment.toString()",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.TokenGroup(TokenStream)",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.addToken(float)",1,5,5
"org.apache.lucene.search.highlight.TokenGroup.clear()",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.getEndOffset()",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.getNumTokens()",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.getScore(int)",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.getStartOffset()",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.getToken(int)",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.getTotalScore()",1,1,1
"org.apache.lucene.search.highlight.TokenGroup.isDistinct()",1,1,1
"org.apache.lucene.search.highlight.TokenSources.getAnyTokenStream(IndexReader,int,String,Analyzer)",1,4,4
"org.apache.lucene.search.highlight.TokenSources.getAnyTokenStream(IndexReader,int,String,Document,Analyzer)",1,4,4
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(Document,String,Analyzer)",2,1,2
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(IndexReader,int,String)",3,2,3
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(IndexReader,int,String,Analyzer)",1,1,1
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(String,String,Analyzer)",1,1,2
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(TermPositionVector)",1,1,1
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(TermPositionVector,boolean)",6,10,16
"org.apache.lucene.search.highlight.TokenSourcesTest.OverlappingTokenStream.incrementToken()",2,1,2
"org.apache.lucene.search.highlight.TokenSourcesTest.OverlappingTokenStream.reset()",1,1,1
"org.apache.lucene.search.highlight.TokenSourcesTest.testOverlapWithOffset()",1,1,1
"org.apache.lucene.search.highlight.TokenSourcesTest.testOverlapWithOffsetExactPhrase()",1,1,1
"org.apache.lucene.search.highlight.TokenSourcesTest.testOverlapWithPositionsAndOffset()",1,1,1
"org.apache.lucene.search.highlight.TokenSourcesTest.testOverlapWithPositionsAndOffsetExactPhrase()",1,1,1
"org.apache.lucene.search.highlight.TokenStreamFromTermPositionVector.TokenStreamFromTermPositionVector(TermPositionVector)",1,5,5
"org.apache.lucene.search.highlight.TokenStreamFromTermPositionVector.incrementToken()",2,2,2
"org.apache.lucene.search.highlight.TokenStreamFromTermPositionVector.reset()",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.WeightedSpanTerm(float,String)",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.WeightedSpanTerm(float,String,boolean)",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List<PositionSpan>)",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.checkPosition(int)",3,2,4
"org.apache.lucene.search.highlight.WeightedSpanTerm.getPositionSpans()",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.isPositionSensitive()",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.setPositionSensitive(boolean)",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.FakeReader.FakeReader()",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.FakeReader.terms(Term)",1,2,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.PositionCheckingMap.put(K,WeightedSpanTerm)",2,1,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.PositionCheckingMap.putAll(Map<? extends K, ? extends WeightedSpanTerm>)",1,2,2
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.WeightedSpanTermExtractor()",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.WeightedSpanTermExtractor(String)",1,2,2
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.closeReaders()",1,2,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.collectSpanQueryFields(SpanQuery,Set<String>)",1,8,8
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extract(Query,Map<String, WeightedSpanTerm>)",1,19,29
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extractUnknownQuery(Query,Map<String, WeightedSpanTerm>)",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extractWeightedSpanTerms(Map<String, WeightedSpanTerm>,SpanQuery)",2,12,13
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extractWeightedTerms(Map<String, WeightedSpanTerm>,Query)",1,3,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.fieldNameComparator(String)",1,1,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getExpandMultiTermQuery()",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getReaderForField(String)",1,2,5
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getTokenStream()",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,TokenStream)",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,TokenStream,String)",1,2,2
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTermsWithScores(Query,TokenStream,String,IndexReader)",1,3,4
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.isCachedTokenStream()",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.mustRewriteQuery(SpanQuery)",12,10,13
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setExpandMultiTermQuery(boolean)",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setMaxDocCharsToAnalyze(int)",1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setWrapIfNotCachingTokenFilter(boolean)",1,1,1
"org.apache.lucene.search.highlight.WeightedTerm.WeightedTerm(float,String)",1,1,1
"org.apache.lucene.search.highlight.WeightedTerm.getTerm()",1,1,1
"org.apache.lucene.search.highlight.WeightedTerm.getWeight()",1,1,1
"org.apache.lucene.search.highlight.WeightedTerm.setTerm(String)",1,1,1
"org.apache.lucene.search.highlight.WeightedTerm.setWeight(float)",1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.CustomQuery(Term)",1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.equals(Object)",7,2,7
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.hashCode()",1,2,2
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.rewrite(IndexReader)",1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.toString(String)",1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyQueryScorer.MyQueryScorer(Query,String,String)",1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyQueryScorer.newTermExtractor(String)",1,1,2
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyWeightedSpanTermExtractor.MyWeightedSpanTermExtractor()",1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyWeightedSpanTermExtractor.MyWeightedSpanTermExtractor(String)",1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyWeightedSpanTermExtractor.extractUnknownQuery(Query,Map<String, WeightedSpanTerm>)",1,2,2
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.highlightField(Query,String,String)",1,1,2
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.testHighlightCustomQuery()",1,3,3
"org.apache.lucene.search.join.JoinUtil.JoinUtil()",1,1,1
"org.apache.lucene.search.join.JoinUtil.createJoinQuery(String,String,Query,IndexSearcher)",1,1,1
"org.apache.lucene.search.join.RawTermFilter.RawTermFilter(Term)",1,1,1
"org.apache.lucene.search.join.RawTermFilter.getDocIdSet(IndexReader)",2,3,4
"org.apache.lucene.search.join.TermsCollector.TermsCollector(String)",1,1,1
"org.apache.lucene.search.join.TermsCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.join.TermsCollector.collect(int)",1,1,1
"org.apache.lucene.search.join.TermsCollector.getCollectorTerms()",1,1,1
"org.apache.lucene.search.join.TermsCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.search.join.TermsCollector.setScorer(Scorer)",1,1,1
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum.SeekingTermsEnum(TermEnum,Term,String,String[])",1,1,2
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum.difference()",1,1,1
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum.endEnum()",1,1,1
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum.termCompare(Term)",8,3,9
"org.apache.lucene.search.join.TermsQuery.TermsQuery(String,Set<String>)",1,1,1
"org.apache.lucene.search.join.TermsQuery.getEnum(IndexReader)",3,2,4
"org.apache.lucene.search.join.TermsQuery.toString(String)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinQuery(Query,Filter,boolean)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinQuery(Query,Query,Filter,boolean)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.ToChildBlockJoinScorer(Weight,Scorer,FixedBitSet,boolean)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.advance(int)",4,4,8
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.docID()",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.nextDoc()",5,6,7
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.score()",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.ToChildBlockJoinWeight(Query,Weight,Filter,boolean)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.explain(IndexReader,int)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.getQuery()",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.getValue()",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.normalize(float)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.scorer(IndexReader,boolean,boolean)",4,1,4
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.scoresDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.clone()",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.equals(Object)",2,4,4
"org.apache.lucene.search.join.ToChildBlockJoinQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.hashCode()",1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.rewrite(IndexReader)",2,2,2
"org.apache.lucene.search.join.ToChildBlockJoinQuery.toString(String)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.FakeScorer()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.advance(int)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.docID()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.nextDoc()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.score()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.OneGroup.OneGroup(int,int,float,int,boolean)",1,1,4
"org.apache.lucene.search.join.ToParentBlockJoinCollector.ToParentBlockJoinCollector(Sort,int,boolean,boolean)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.collect(int)",6,10,15
"org.apache.lucene.search.join.ToParentBlockJoinCollector.copyGroups(OneGroup)",1,7,8
"org.apache.lucene.search.join.ToParentBlockJoinCollector.enroll(ToParentBlockJoinQuery,BlockJoinScorer)",1,2,2
"org.apache.lucene.search.join.ToParentBlockJoinCollector.getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean)",9,8,14
"org.apache.lucene.search.join.ToParentBlockJoinCollector.setNextReader(IndexReader,int)",1,2,2
"org.apache.lucene.search.join.ToParentBlockJoinCollector.setScorer(Scorer)",1,5,5
"org.apache.lucene.search.join.ToParentBlockJoinCollector.sortQueue()",1,2,2
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.BlockJoinScorer(Weight,Scorer,FixedBitSet,int,ScoreMode)",1,1,2
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.advance(int)",3,3,4
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.docID()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.getChildCount()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.nextDoc()",3,6,11
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.score()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.swapChildDocs(int[])",1,1,2
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.swapChildScores(float[])",2,1,3
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.BlockJoinWeight(Query,Weight,Filter,ScoreMode)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.explain(IndexReader,int)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.getQuery()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.getValue()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.normalize(float)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.scorer(IndexReader,boolean,boolean)",5,1,5
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.scoresDocsOutOfOrder()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.ToParentBlockJoinQuery(Query,Filter,ScoreMode)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.ToParentBlockJoinQuery(Query,Query,Filter,ScoreMode)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.clone()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.equals(Object)",2,4,4
"org.apache.lucene.search.join.ToParentBlockJoinQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.hashCode()",1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.rewrite(IndexReader)",2,2,2
"org.apache.lucene.search.join.ToParentBlockJoinQuery.toString(String)",1,1,1
"org.apache.lucene.search.payloads.AveragePayloadFunction.currentScore(int,String,int,int,int,float,float)",1,1,1
"org.apache.lucene.search.payloads.AveragePayloadFunction.docScore(int,String,int,float)",1,1,2
"org.apache.lucene.search.payloads.AveragePayloadFunction.equals(Object)",4,1,4
"org.apache.lucene.search.payloads.AveragePayloadFunction.explain(int,int,float)",1,1,2
"org.apache.lucene.search.payloads.AveragePayloadFunction.hashCode()",1,1,1
"org.apache.lucene.search.payloads.MaxPayloadFunction.currentScore(int,String,int,int,int,float,float)",2,2,2
"org.apache.lucene.search.payloads.MaxPayloadFunction.docScore(int,String,int,float)",1,1,2
"org.apache.lucene.search.payloads.MaxPayloadFunction.equals(Object)",4,1,4
"org.apache.lucene.search.payloads.MaxPayloadFunction.explain(int,int,float)",1,1,2
"org.apache.lucene.search.payloads.MaxPayloadFunction.hashCode()",1,1,1
"org.apache.lucene.search.payloads.MinPayloadFunction.currentScore(int,String,int,int,int,float,float)",2,2,2
"org.apache.lucene.search.payloads.MinPayloadFunction.docScore(int,String,int,float)",1,1,2
"org.apache.lucene.search.payloads.MinPayloadFunction.equals(Object)",4,1,4
"org.apache.lucene.search.payloads.MinPayloadFunction.explain(int,int,float)",1,1,2
"org.apache.lucene.search.payloads.MinPayloadFunction.hashCode()",1,1,1
"org.apache.lucene.search.payloads.PayloadFunction.explain(int,int,float)",1,1,1
"org.apache.lucene.search.payloads.PayloadHelper.PayloadAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.payloads.PayloadHelper.PayloadFilter.PayloadFilter(TokenStream,String)",1,1,1
"org.apache.lucene.search.payloads.PayloadHelper.PayloadFilter.incrementToken()",2,5,5
"org.apache.lucene.search.payloads.PayloadHelper.PayloadFilter.reset()",1,1,1
"org.apache.lucene.search.payloads.PayloadHelper.setUp(Random,Similarity,int)",1,2,2
"org.apache.lucene.search.payloads.PayloadHelper.tearDown()",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearQuery(SpanQuery[],int,boolean)",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearQuery(SpanQuery[],int,boolean,PayloadFunction)",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.PayloadNearSpanScorer(Spans,Weight,Similarity,byte[])",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.explain(int)",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.getPayloads(Spans[])",1,6,6
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.processPayloads(Collection<byte[]>,int,int)",1,2,2
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.score()",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.setFreqCurrentDoc()",2,3,4
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanWeight.PayloadNearSpanWeight(SpanQuery,Searcher)",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanWeight.scorer(IndexReader,boolean,boolean)",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.clone()",1,2,2
"org.apache.lucene.search.payloads.PayloadNearQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.equals(Object)",10,3,10
"org.apache.lucene.search.payloads.PayloadNearQuery.hashCode()",1,3,3
"org.apache.lucene.search.payloads.PayloadNearQuery.toString(String)",1,3,3
"org.apache.lucene.search.payloads.PayloadSpanUtil.PayloadSpanUtil(IndexReader)",1,1,1
"org.apache.lucene.search.payloads.PayloadSpanUtil.getPayloads(Collection<byte[]>,SpanQuery)",1,4,4
"org.apache.lucene.search.payloads.PayloadSpanUtil.getPayloadsForQuery(Query)",1,1,1
"org.apache.lucene.search.payloads.PayloadSpanUtil.queryToSpanQuery(Query,Collection<byte[]>)",1,16,21
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermQuery(Term,PayloadFunction)",1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermQuery(Term,PayloadFunction,boolean)",1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.PayloadTermSpanScorer(TermSpans,Weight,Similarity,byte[])",1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.explain(int)",1,2,3
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.getPayloadScore()",1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.getSpanScore()",1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.processPayload(Similarity)",1,2,2
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.score()",1,2,2
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.setFreqCurrentDoc()",2,3,5
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermWeight(PayloadTermQuery,Searcher)",1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.explain(IndexReader,int)",2,2,2
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.scorer(IndexReader,boolean,boolean)",1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.equals(Object)",8,2,8
"org.apache.lucene.search.payloads.PayloadTermQuery.hashCode()",1,2,3
"org.apache.lucene.search.payloads.TestPayloadExplanations.PayloadBoostSimilarity.scorePayload(int,String,int,int,byte[],int,int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadExplanations.pt(String,PayloadFunction,boolean)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadExplanations.setUp()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadExplanations.testPT1()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadExplanations.testPT2()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadExplanations.testPT4()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadExplanations.testPT5()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadNearQuery.BoostingSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.BoostingSimilarity.coord(int,int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.BoostingSimilarity.idfExplain(Collection<Term>,Searcher)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.BoostingSimilarity.queryNorm(float)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.BoostingSimilarity.scorePayload(int,String,int,int,byte[],int,int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.BoostingSimilarity.sloppyFreq(int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.BoostingSimilarity.tf(float)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.PayloadAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.PayloadFilter.PayloadFilter(TokenStream,String)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.PayloadFilter.incrementToken()",1,3,3
"org.apache.lucene.search.payloads.TestPayloadNearQuery.PayloadFilter.reset()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.afterClass()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.beforeClass()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadNearQuery.getClauses()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.newPhraseQuery(String,String,boolean,PayloadFunction)",1,1,2
"org.apache.lucene.search.payloads.TestPayloadNearQuery.spanNearQuery(String,String)",1,1,2
"org.apache.lucene.search.payloads.TestPayloadNearQuery.test()",1,4,4
"org.apache.lucene.search.payloads.TestPayloadNearQuery.testAverageFunction()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadNearQuery.testComplexNested()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.testLongerSpan()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadNearQuery.testMaxFunction()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadNearQuery.testMinFunction()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadNearQuery.testPayloadNear()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.BoostingSimilarity.computeNorm(String,FieldInvertState)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.BoostingSimilarity.coord(int,int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.BoostingSimilarity.idf(int,int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.BoostingSimilarity.queryNorm(float)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.BoostingSimilarity.scorePayload(int,String,int,int,byte[],int,int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.BoostingSimilarity.sloppyFreq(int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.BoostingSimilarity.tf(float)",1,1,2
"org.apache.lucene.search.payloads.TestPayloadTermQuery.FullSimilarity.scorePayload(int,String,byte[],int,int)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.PayloadAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.PayloadFilter.PayloadFilter(TokenStream,String)",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.PayloadFilter.incrementToken()",2,5,5
"org.apache.lucene.search.payloads.TestPayloadTermQuery.PayloadFilter.reset()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.setUp()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadTermQuery.tearDown()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.test()",1,2,2
"org.apache.lucene.search.payloads.TestPayloadTermQuery.testIgnoreSpanScorer()",1,3,4
"org.apache.lucene.search.payloads.TestPayloadTermQuery.testMultipleMatchesPerDoc()",1,3,4
"org.apache.lucene.search.payloads.TestPayloadTermQuery.testNoMatch()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.testNoPayload()",1,1,1
"org.apache.lucene.search.payloads.TestPayloadTermQuery.testQuery()",1,1,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.JakartaRegexpCapabilities()",1,1,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.JakartaRegexpCapabilities(int)",1,1,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.compile(String)",1,1,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.equals(Object)",4,3,6
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.hashCode()",1,2,2
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.match(String)",1,1,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.prefix()",3,3,5
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.JavaUtilRegexCapabilities()",1,1,1
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.JavaUtilRegexCapabilities(int)",1,1,1
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.compile(String)",1,1,1
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.equals(Object)",4,3,6
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.hashCode()",1,2,2
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.match(String)",1,1,1
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.prefix()",1,1,1
"org.apache.lucene.search.regex.RegexQuery.RegexQuery(Term)",1,1,1
"org.apache.lucene.search.regex.RegexQuery.equals(Object)",4,2,5
"org.apache.lucene.search.regex.RegexQuery.getEnum(IndexReader)",1,1,1
"org.apache.lucene.search.regex.RegexQuery.getRegexImplementation()",1,1,1
"org.apache.lucene.search.regex.RegexQuery.getTerm()",1,1,1
"org.apache.lucene.search.regex.RegexQuery.hashCode()",1,1,1
"org.apache.lucene.search.regex.RegexQuery.setRegexImplementation(RegexCapabilities)",1,1,1
"org.apache.lucene.search.regex.RegexQuery.toString(String)",1,2,2
"org.apache.lucene.search.regex.RegexTermEnum.RegexTermEnum(IndexReader,Term,RegexCapabilities)",1,1,2
"org.apache.lucene.search.regex.RegexTermEnum.close()",1,1,1
"org.apache.lucene.search.regex.RegexTermEnum.difference()",1,1,1
"org.apache.lucene.search.regex.RegexTermEnum.endEnum()",1,1,1
"org.apache.lucene.search.regex.RegexTermEnum.termCompare(Term)",3,3,3
"org.apache.lucene.search.regex.SpanRegexQuery.SpanRegexQuery(Term)",1,1,1
"org.apache.lucene.search.regex.SpanRegexQuery.getRegexImplementation()",1,1,1
"org.apache.lucene.search.regex.SpanRegexQuery.getTerm()",1,1,1
"org.apache.lucene.search.regex.SpanRegexQuery.setRegexImplementation(RegexCapabilities)",1,1,1
"org.apache.lucene.search.regex.TestJakartaRegexpCapabilities.testGetPrefix()",1,1,1
"org.apache.lucene.search.regex.TestJakartaRegexpCapabilities.testShakyPrefix()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.newTerm(String)",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.regexQueryNrHits(String,RegexCapabilities)",1,2,2
"org.apache.lucene.search.regex.TestRegexQuery.setUp()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.spanRegexQueryNrHits(String,String,int,boolean)",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.tearDown()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testEquals()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testJakartaCaseInsensative()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testJakartaCaseSensativeFail()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testJavaUtilCaseInsensative()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testJavaUtilCaseSensativeFail()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testMatchAll()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testRegex1()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testRegex2()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testRegex3()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testSpanRegex1()",1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testSpanRegex2()",1,1,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.createRAMDirectories()",1,1,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.setUp()",1,1,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.tearDown()",1,1,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.testSpanRegex()",1,1,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.testSpanRegexBug()",1,1,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.testSpanRegexBugOld()",1,1,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.testSpanRegexOld()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.FreqQ.FreqQ(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.FreqQ.lessThan(Object[],Object[])",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.Int.Int()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.MoreLikeThis(IndexReader)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.MoreLikeThis(IndexReader,Similarity)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.addTermFrequencies(Map<String, Int>,TermFreqVector)",3,3,4
"org.apache.lucene.search.similar.MoreLikeThis.addTermFrequencies(Reader,Map<String, Int>,String)",4,3,5
"org.apache.lucene.search.similar.MoreLikeThis.createQuery(PriorityQueue<Object[]>)",3,4,7
"org.apache.lucene.search.similar.MoreLikeThis.createQueue(Map<String, Int>)",6,3,11
"org.apache.lucene.search.similar.MoreLikeThis.describeParams()",1,2,2
"org.apache.lucene.search.similar.MoreLikeThis.getAnalyzer()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getBoostFactor()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getFieldNames()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMaxDocFreq()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMaxNumTokensParsed()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMaxQueryTerms()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMaxWordLen()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMinDocFreq()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMinTermFreq()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMinWordLen()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getSimilarity()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getStopWords()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.isBoost()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.isNoiseWord(String)",4,2,7
"org.apache.lucene.search.similar.MoreLikeThis.like(File)",1,2,2
"org.apache.lucene.search.similar.MoreLikeThis.like(InputStream)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.like(Reader)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.like(Reader,String)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.like(URL)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.like(int)",1,2,2
"org.apache.lucene.search.similar.MoreLikeThis.retrieveInterestingTerms(Reader)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.retrieveInterestingTerms(Reader,String)",1,3,3
"org.apache.lucene.search.similar.MoreLikeThis.retrieveInterestingTerms(int)",1,3,3
"org.apache.lucene.search.similar.MoreLikeThis.retrieveTerms(Reader)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.retrieveTerms(Reader,String)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.retrieveTerms(int)",1,5,5
"org.apache.lucene.search.similar.MoreLikeThis.setAnalyzer(Analyzer)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setBoost(boolean)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setBoostFactor(float)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setFieldNames(String[])",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxDocFreq(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxDocFreqPct(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxNumTokensParsed(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxQueryTerms(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxWordLen(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMinDocFreq(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMinTermFreq(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMinWordLen(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setSimilarity(Similarity)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setStopWords(Set<?>)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.MoreLikeThisQuery(String,String[],Analyzer)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.MoreLikeThisQuery(String,String[],Analyzer,String)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getAnalyzer()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getLikeText()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getMaxQueryTerms()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getMinDocFreq()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getMinTermFrequency()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getMoreLikeFields()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getPercentTermsToMatch()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getStopWords()",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.rewrite(IndexReader)",1,2,2
"org.apache.lucene.search.similar.MoreLikeThisQuery.setAnalyzer(Analyzer)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setLikeText(String)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setMaxQueryTerms(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setMinDocFreq(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setMinTermFrequency(int)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setMoreLikeFields(String[])",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setPercentTermsToMatch(float)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setStopWords(Set<?>)",1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.toString(String)",1,1,1
"org.apache.lucene.search.similar.SimilarityQueries.SimilarityQueries()",1,1,1
"org.apache.lucene.search.similar.SimilarityQueries.formSimilarQuery(String,Analyzer,String,Set<?>)",4,3,6
"org.apache.lucene.search.similar.TestMoreLikeThis.addDoc(RandomIndexWriter,String)",1,1,1
"org.apache.lucene.search.similar.TestMoreLikeThis.getOriginalValues()",1,2,2
"org.apache.lucene.search.similar.TestMoreLikeThis.setUp()",1,1,1
"org.apache.lucene.search.similar.TestMoreLikeThis.tearDown()",1,1,1
"org.apache.lucene.search.similar.TestMoreLikeThis.testBoostFactor()",1,2,2
"org.apache.lucene.search.similar.TestMoreLikeThis.testMultiFields()",1,1,1
"org.apache.lucene.search.similar.TestMoreLikeThis.testMultiFieldsDeprecated()",1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.FieldMaskingSpanQuery(SpanQuery,String)",1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.equals(Object)",2,3,4
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.getField()",1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.getMaskedQuery()",1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.getSpans(IndexReader)",1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.hashCode()",1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.rewrite(IndexReader)",2,2,3
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.toString(String)",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompilePayloadSpans.doc()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompilePayloadSpans.end()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompilePayloadSpans.getPayload()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompilePayloadSpans.isPayloadAvailable()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompilePayloadSpans.next()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompilePayloadSpans.skipTo(int)",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompilePayloadSpans.start()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpanQuery.getField()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpanQuery.getSpans(IndexReader)",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpanQuery.toString(String)",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpanScorer.JustCompileSpanScorer(Spans,Weight,Similarity,byte[])",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpanScorer.setFreqCurrentDoc()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpans.doc()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpans.end()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpans.getPayload()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpans.isPayloadAvailable()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpans.next()",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpans.skipTo(int)",1,1,1
"org.apache.lucene.search.spans.JustCompileSearchSpans.JustCompileSpans.start()",1,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.NearSpansOrdered(SpanNearQuery,IndexReader)",1,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.NearSpansOrdered(SpanNearQuery,IndexReader,boolean)",2,2,3
"org.apache.lucene.search.spans.NearSpansOrdered.advanceAfterOrdered()",3,5,6
"org.apache.lucene.search.spans.NearSpansOrdered.doc()",1,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.docSpansOrdered(Spans,Spans)",1,2,2
"org.apache.lucene.search.spans.NearSpansOrdered.docSpansOrdered(int,int,int,int)",1,1,2
"org.apache.lucene.search.spans.NearSpansOrdered.end()",1,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.getPayload()",1,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.getSubSpans()",1,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.isPayloadAvailable()",1,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.next()",4,4,5
"org.apache.lucene.search.spans.NearSpansOrdered.shrinkToAfterShortestMatch()",6,15,17
"org.apache.lucene.search.spans.NearSpansOrdered.skipTo(int)",6,6,8
"org.apache.lucene.search.spans.NearSpansOrdered.start()",1,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.stretchToOrder()",5,4,6
"org.apache.lucene.search.spans.NearSpansOrdered.toSameDoc()",3,3,5
"org.apache.lucene.search.spans.NearSpansOrdered.toString()",1,3,3
"org.apache.lucene.search.spans.NearSpansUnordered.CellQueue.CellQueue(int)",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.CellQueue.lessThan(SpansCell,SpansCell)",2,2,2
"org.apache.lucene.search.spans.NearSpansUnordered.NearSpansUnordered(SpanNearQuery,IndexReader)",1,2,2
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.SpansCell(Spans,int)",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.adjust(boolean)",1,5,7
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.doc()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.end()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.getPayload()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.isPayloadAvailable()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.next()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.skipTo(int)",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.start()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.toString()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.addToList(SpansCell)",1,1,2
"org.apache.lucene.search.spans.NearSpansUnordered.atMatch()",1,2,2
"org.apache.lucene.search.spans.NearSpansUnordered.doc()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.end()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.firstToLast()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.getPayload()",1,3,3
"org.apache.lucene.search.spans.NearSpansUnordered.getSubSpans()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.initList(boolean)",1,5,5
"org.apache.lucene.search.spans.NearSpansUnordered.isPayloadAvailable()",3,2,3
"org.apache.lucene.search.spans.NearSpansUnordered.listToQueue()",1,2,2
"org.apache.lucene.search.spans.NearSpansUnordered.min()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.next()",4,10,12
"org.apache.lucene.search.spans.NearSpansUnordered.queueToList()",1,2,2
"org.apache.lucene.search.spans.NearSpansUnordered.skipTo(int)",1,9,10
"org.apache.lucene.search.spans.NearSpansUnordered.start()",1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.toString()",1,3,3
"org.apache.lucene.search.spans.SpanFirstQuery.SpanFirstQuery(SpanQuery,int)",1,1,1
"org.apache.lucene.search.spans.SpanFirstQuery.acceptPosition(Spans)",3,2,3
"org.apache.lucene.search.spans.SpanFirstQuery.clone()",1,1,1
"org.apache.lucene.search.spans.SpanFirstQuery.equals(Object)",3,3,5
"org.apache.lucene.search.spans.SpanFirstQuery.hashCode()",1,1,1
"org.apache.lucene.search.spans.SpanFirstQuery.toString(String)",1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.SpanMultiTermQueryWrapper(Q)",1,4,5
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.TopTermsSpanBooleanQueryRewrite(int)",1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.equals(Object)",4,1,4
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.getSize()",1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.hashCode()",1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.rewrite(IndexReader,MultiTermQuery)",1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.equals(Object)",4,1,4
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getField()",2,2,3
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getRewriteMethod()",2,1,2
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getSpans(IndexReader)",1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.hashCode()",1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.rewrite(IndexReader)",2,1,2
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.setRewriteMethod(SpanRewriteMethod)",1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.toString(String)",1,1,1
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.SpanNearPayloadCheckQuery(SpanNearQuery,Collection<byte[]>)",1,1,1
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.acceptPosition(Spans)",7,5,7
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()",1,1,1
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.equals(Object)",3,3,5
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.hashCode()",1,1,1
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.toString(String)",1,2,2
"org.apache.lucene.search.spans.SpanNearQuery.SpanNearQuery(SpanQuery[],int,boolean)",1,1,1
"org.apache.lucene.search.spans.SpanNearQuery.SpanNearQuery(SpanQuery[],int,boolean,boolean)",4,3,4
"org.apache.lucene.search.spans.SpanNearQuery.clone()",1,2,2
"org.apache.lucene.search.spans.SpanNearQuery.equals(Object)",6,1,6
"org.apache.lucene.search.spans.SpanNearQuery.extractTerms(Set<Term>)",1,2,2
"org.apache.lucene.search.spans.SpanNearQuery.getClauses()",1,1,1
"org.apache.lucene.search.spans.SpanNearQuery.getField()",1,1,1
"org.apache.lucene.search.spans.SpanNearQuery.getSlop()",1,1,1
"org.apache.lucene.search.spans.SpanNearQuery.getSpans(IndexReader)",3,3,4
"org.apache.lucene.search.spans.SpanNearQuery.hashCode()",1,1,2
"org.apache.lucene.search.spans.SpanNearQuery.isInOrder()",1,1,1
"org.apache.lucene.search.spans.SpanNearQuery.rewrite(IndexReader)",2,4,5
"org.apache.lucene.search.spans.SpanNearQuery.toString(String)",1,3,3
"org.apache.lucene.search.spans.SpanNotQuery.SpanNotQuery(SpanQuery,SpanQuery)",2,1,2
"org.apache.lucene.search.spans.SpanNotQuery.clone()",1,1,1
"org.apache.lucene.search.spans.SpanNotQuery.equals(Object)",3,3,5
"org.apache.lucene.search.spans.SpanNotQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.spans.SpanNotQuery.getExclude()",1,1,1
"org.apache.lucene.search.spans.SpanNotQuery.getField()",1,1,1
"org.apache.lucene.search.spans.SpanNotQuery.getInclude()",1,1,1
"org.apache.lucene.search.spans.SpanNotQuery.getSpans(IndexReader)",5,18,22
"org.apache.lucene.search.spans.SpanNotQuery.hashCode()",1,1,1
"org.apache.lucene.search.spans.SpanNotQuery.rewrite(IndexReader)",2,4,5
"org.apache.lucene.search.spans.SpanNotQuery.toString(String)",1,1,1
"org.apache.lucene.search.spans.SpanOrQuery.SpanOrQuery(SpanQuery...)",1,2,2
"org.apache.lucene.search.spans.SpanOrQuery.SpanQueue.SpanQueue(int)",1,1,1
"org.apache.lucene.search.spans.SpanOrQuery.SpanQueue.lessThan(Spans,Spans)",3,3,3
"org.apache.lucene.search.spans.SpanOrQuery.addClause(SpanQuery)",3,2,3
"org.apache.lucene.search.spans.SpanOrQuery.clone()",1,2,2
"org.apache.lucene.search.spans.SpanOrQuery.equals(Object)",5,3,7
"org.apache.lucene.search.spans.SpanOrQuery.extractTerms(Set<Term>)",1,2,2
"org.apache.lucene.search.spans.SpanOrQuery.getClauses()",1,1,1
"org.apache.lucene.search.spans.SpanOrQuery.getField()",1,1,1
"org.apache.lucene.search.spans.SpanOrQuery.getSpans(IndexReader)",7,19,20
"org.apache.lucene.search.spans.SpanOrQuery.hashCode()",1,1,1
"org.apache.lucene.search.spans.SpanOrQuery.rewrite(IndexReader)",2,4,5
"org.apache.lucene.search.spans.SpanOrQuery.toString(String)",1,3,3
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.SpanPayloadCheckQuery(SpanQuery,Collection<byte[]>)",2,1,2
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.acceptPosition(Spans)",5,4,5
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()",1,1,1
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.equals(Object)",3,3,5
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.hashCode()",1,1,1
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.toString(String)",1,2,2
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.PositionCheckSpan(IndexReader)",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.doNext()",6,3,7
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.doc()",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.end()",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.getPayload()",1,2,2
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.isPayloadAvailable()",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.next()",2,1,2
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.skipTo(int)",2,1,2
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.start()",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.toString()",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.SpanPositionCheckQuery(SpanQuery)",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.getField()",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.getMatch()",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.getSpans(IndexReader)",1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.rewrite(IndexReader)",2,2,3
"org.apache.lucene.search.spans.SpanPositionRangeQuery.SpanPositionRangeQuery(SpanQuery,int,int)",1,1,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.acceptPosition(Spans)",3,3,4
"org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()",1,1,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.equals(Object)",3,4,6
"org.apache.lucene.search.spans.SpanPositionRangeQuery.getEnd()",1,1,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.getStart()",1,1,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.hashCode()",1,1,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.toString(String)",1,1,1
"org.apache.lucene.search.spans.SpanQuery.createWeight(Searcher)",1,1,1
"org.apache.lucene.search.spans.SpanScorer.SpanScorer(Spans,Weight,Similarity,byte[])",1,1,2
"org.apache.lucene.search.spans.SpanScorer.advance(int)",2,2,4
"org.apache.lucene.search.spans.SpanScorer.docID()",1,1,1
"org.apache.lucene.search.spans.SpanScorer.explain(int)",1,1,2
"org.apache.lucene.search.spans.SpanScorer.freq()",1,1,1
"org.apache.lucene.search.spans.SpanScorer.nextDoc()",1,1,2
"org.apache.lucene.search.spans.SpanScorer.score()",1,2,2
"org.apache.lucene.search.spans.SpanScorer.setFreqCurrentDoc()",2,3,4
"org.apache.lucene.search.spans.SpanTermQuery.SpanTermQuery(Term)",1,1,1
"org.apache.lucene.search.spans.SpanTermQuery.equals(Object)",7,2,7
"org.apache.lucene.search.spans.SpanTermQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.lucene.search.spans.SpanTermQuery.getField()",1,1,1
"org.apache.lucene.search.spans.SpanTermQuery.getSpans(IndexReader)",1,1,1
"org.apache.lucene.search.spans.SpanTermQuery.getTerm()",1,1,1
"org.apache.lucene.search.spans.SpanTermQuery.hashCode()",1,2,2
"org.apache.lucene.search.spans.SpanTermQuery.toString(String)",1,2,2
"org.apache.lucene.search.spans.SpanWeight.SpanWeight(SpanQuery,Searcher)",1,1,1
"org.apache.lucene.search.spans.SpanWeight.explain(IndexReader,int)",2,3,4
"org.apache.lucene.search.spans.SpanWeight.getQuery()",1,1,1
"org.apache.lucene.search.spans.SpanWeight.getValue()",1,1,1
"org.apache.lucene.search.spans.SpanWeight.normalize(float)",1,1,1
"org.apache.lucene.search.spans.SpanWeight.scorer(IndexReader,boolean,boolean)",2,2,2
"org.apache.lucene.search.spans.SpanWeight.sumOfSquaredWeights()",1,1,1
"org.apache.lucene.search.spans.TermSpans.TermSpans(TermPositions,Term)",1,1,1
"org.apache.lucene.search.spans.TermSpans.doc()",1,1,1
"org.apache.lucene.search.spans.TermSpans.end()",1,1,1
"org.apache.lucene.search.spans.TermSpans.getPayload()",1,1,1
"org.apache.lucene.search.spans.TermSpans.getPositions()",1,1,1
"org.apache.lucene.search.spans.TermSpans.isPayloadAvailable()",1,1,1
"org.apache.lucene.search.spans.TermSpans.next()",3,2,3
"org.apache.lucene.search.spans.TermSpans.skipTo(int)",2,1,2
"org.apache.lucene.search.spans.TermSpans.start()",1,1,1
"org.apache.lucene.search.spans.TermSpans.toString()",1,1,3
"org.apache.lucene.search.spans.TestBasics.SimplePayloadFilter.SimplePayloadFilter(TokenStream,String)",1,1,1
"org.apache.lucene.search.spans.TestBasics.SimplePayloadFilter.incrementToken()",2,2,2
"org.apache.lucene.search.spans.TestBasics.SimplePayloadFilter.reset()",1,1,1
"org.apache.lucene.search.spans.TestBasics.afterClass()",1,1,1
"org.apache.lucene.search.spans.TestBasics.beforeClass()",1,2,2
"org.apache.lucene.search.spans.TestBasics.checkHits(Query,int[])",1,1,1
"org.apache.lucene.search.spans.TestBasics.skipToAccoringToJavaDocs(Spans,int)",3,2,3
"org.apache.lucene.search.spans.TestBasics.testBoolean()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testBoolean2()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testComplexSpanChecks()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testNpeInSpanNearInSpanFirstInSpanNot()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testNpeInSpanNearWithSpanNot()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testPhrase()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testPhrase2()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanComplex1()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanExactNested()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanFirst()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanNearExact()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanNearOr()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanNearOrdered()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanNearUnordered()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanNot()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanOr()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanPayloadCheck()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanPositionRange()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanTermQuery()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanWithMultipleNotMany()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpanWithMultipleNotSingle()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testSpansSkipTo()",1,2,2
"org.apache.lucene.search.spans.TestBasics.testTerm()",1,1,1
"org.apache.lucene.search.spans.TestBasics.testTerm2()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.afterClass()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.beforeClass()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.check(SpanQuery,int[])",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.doc(Field[])",1,2,2
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.field(String,String)",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.s(Spans)",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.s(int,int,int)",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testEquality1()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testNoop0()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testNoop1()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testRewrite0()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testRewrite1()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testRewrite2()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testSimple1()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testSimple2()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testSpans0()",1,1,1
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testSpans1()",1,2,2
"org.apache.lucene.search.spans.TestFieldMaskingSpanQuery.testSpans2()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.makeQuery()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.makeQuery(String,String,String,int,boolean)",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.s(Spans)",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.s(int,int,int)",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.setUp()",1,2,2
"org.apache.lucene.search.spans.TestNearSpansOrdered.tearDown()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testNearSpansNext()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testNearSpansNextThenSkipPast()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testNearSpansNextThenSkipTo()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testNearSpansSkipPast()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testNearSpansSkipTo0()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testNearSpansSkipTo1()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testNearSpansSkipToLikeNext()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testSpanNearQuery()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testSpanNearScorerExplain()",1,1,1
"org.apache.lucene.search.spans.TestNearSpansOrdered.testSpanNearScorerSkipTo1()",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.PayloadAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.PayloadFilter.PayloadFilter(TokenStream,String)",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.PayloadFilter.incrementToken()",2,4,4
"org.apache.lucene.search.spans.TestPayloadSpans.TestPayloadAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.checkSpans(Spans,int,int,int,int)",1,5,5
"org.apache.lucene.search.spans.TestPayloadSpans.checkSpans(Spans,int,int[])",1,7,8
"org.apache.lucene.search.spans.TestPayloadSpans.getSearcher()",1,2,2
"org.apache.lucene.search.spans.TestPayloadSpans.setUp()",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.testFirstClauseWithoutPayload()",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.testHeavilyNestedSpanQuery()",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.testNestedSpans()",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.testPayloadSpanUtil()",1,4,4
"org.apache.lucene.search.spans.TestPayloadSpans.testShrinkToAfterShortestMatch()",1,4,4
"org.apache.lucene.search.spans.TestPayloadSpans.testShrinkToAfterShortestMatch2()",1,4,4
"org.apache.lucene.search.spans.TestPayloadSpans.testShrinkToAfterShortestMatch3()",1,6,6
"org.apache.lucene.search.spans.TestPayloadSpans.testSpanFirst()",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.testSpanNot()",1,1,1
"org.apache.lucene.search.spans.TestPayloadSpans.testSpanTermQuery()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSF1()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSF2()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSF4()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSF5()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSF6()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear1()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear10()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear11()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear2()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear3()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear4()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear5()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear6()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear7()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear8()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNear9()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNot1()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNot10()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNot2()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNot4()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNot5()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSNot7()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSO1()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSO2()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSO3()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testSO4()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testST1()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testST2()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testST4()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanations.testST5()",1,1,1
"org.apache.lucene.search.spans.TestSpanExplanationsOfNonMatches.qtest(Query,int[])",1,1,1
"org.apache.lucene.search.spans.TestSpanFirstQuery.testStartPositions()",1,1,1
"org.apache.lucene.search.spans.TestSpanMultiTermQueryWrapper.setUp()",1,1,1
"org.apache.lucene.search.spans.TestSpanMultiTermQueryWrapper.tearDown()",1,1,1
"org.apache.lucene.search.spans.TestSpanMultiTermQueryWrapper.testFuzzy()",1,1,1
"org.apache.lucene.search.spans.TestSpanMultiTermQueryWrapper.testFuzzy2()",1,1,1
"org.apache.lucene.search.spans.TestSpanMultiTermQueryWrapper.testPrefix()",1,1,1
"org.apache.lucene.search.spans.TestSpanMultiTermQueryWrapper.testWildcard()",1,1,1
"org.apache.lucene.search.spans.TestSpanSearchEquivalence.testSpanFirstVersusSpanTerm()",1,1,1
"org.apache.lucene.search.spans.TestSpanSearchEquivalence.testSpanNearInOrderVersusOutOfOrder()",1,1,1
"org.apache.lucene.search.spans.TestSpanSearchEquivalence.testSpanNearVersusBooleanAnd()",1,1,1
"org.apache.lucene.search.spans.TestSpanSearchEquivalence.testSpanNearVersusPhrase()",1,1,1
"org.apache.lucene.search.spans.TestSpanSearchEquivalence.testSpanNearVersusSloppySpanNear()",1,1,1
"org.apache.lucene.search.spans.TestSpanSearchEquivalence.testSpanNotVersusSpanTerm()",1,1,1
"org.apache.lucene.search.spans.TestSpanSearchEquivalence.testSpanOrVersusBoolean()",1,1,1
"org.apache.lucene.search.spans.TestSpanSearchEquivalence.testSpanTermVersusTerm()",1,1,1
"org.apache.lucene.search.spans.TestSpans.addDoc(IndexWriter,String,String)",1,1,1
"org.apache.lucene.search.spans.TestSpans.checkHits(Query,int[])",1,1,1
"org.apache.lucene.search.spans.TestSpans.createSpan(String)",1,1,1
"org.apache.lucene.search.spans.TestSpans.createSpan(int,boolean,SpanQuery[])",1,1,1
"org.apache.lucene.search.spans.TestSpans.createSpan(int,boolean,String,String)",1,1,1
"org.apache.lucene.search.spans.TestSpans.hitCount(Searcher,String)",1,1,1
"org.apache.lucene.search.spans.TestSpans.makeSpanTermQuery(String)",1,1,1
"org.apache.lucene.search.spans.TestSpans.orSpans(String[])",1,2,2
"org.apache.lucene.search.spans.TestSpans.orderedSlopTest1Equal(int,int[])",1,1,1
"org.apache.lucene.search.spans.TestSpans.orderedSlopTest3(int,int[])",1,1,1
"org.apache.lucene.search.spans.TestSpans.orderedSlopTest3Equal(int,int[])",1,1,1
"org.apache.lucene.search.spans.TestSpans.orderedSlopTest3SQ(SpanQuery,SpanQuery,SpanQuery,int,int[])",1,1,1
"org.apache.lucene.search.spans.TestSpans.setUp()",1,2,2
"org.apache.lucene.search.spans.TestSpans.tearDown()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testNPESpanQuery()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrdered01()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrdered02()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrdered03()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrdered04()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrdered05()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual01()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual02()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual03()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual04()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual11()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual12()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual13()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual14()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedEqual15()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearOrderedOverlap()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanNearUnOrdered()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanOrDouble()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanOrDoubleSkip()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanOrEmpty()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanOrMovesForward()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanOrSingle()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanOrTripleSameDoc()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanOrUnused()",1,1,1
"org.apache.lucene.search.spans.TestSpans.testSpanScorerZeroSloppyFreq()",1,1,1
"org.apache.lucene.search.spans.TestSpans.tstNextSpans(Spans,int,int,int)",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced.addDocument(RandomIndexWriter,String,String)",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced.assertHits(Searcher,Query,String,String[],float[])",1,3,3
"org.apache.lucene.search.spans.TestSpansAdvanced.doTestBooleanQueryWithSpanQueries(IndexSearcher,float)",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced.setUp()",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced.tearDown()",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced.testBooleanQueryWithSpanQueries()",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced2.setUp()",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced2.tearDown()",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced2.testBooleanQueryWithSpanQueries()",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced2.testMultipleDifferentSpanQueries()",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced2.testSingleSpanQuery()",1,1,1
"org.apache.lucene.search.spans.TestSpansAdvanced2.testVerifyIndex()",1,1,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyDictionary(IndexReader,String,float)",1,1,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.HighFrequencyIterator()",1,3,3
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.getComparator()",1,1,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.isFrequent(int)",1,1,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.next()",5,5,6
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.weight()",1,1,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.getWordsIterator()",1,1,1
"org.apache.lucene.search.spell.JaroWinklerDistance.getDistance(String,String)",2,2,3
"org.apache.lucene.search.spell.JaroWinklerDistance.getThreshold()",1,1,1
"org.apache.lucene.search.spell.JaroWinklerDistance.matches(String,String)",6,9,14
"org.apache.lucene.search.spell.JaroWinklerDistance.setThreshold(float)",1,1,1
"org.apache.lucene.search.spell.LevensteinDistance.LevensteinDistance()",1,1,1
"org.apache.lucene.search.spell.LevensteinDistance.getDistance(String,String)",3,3,8
"org.apache.lucene.search.spell.LuceneDictionary.LuceneDictionary(IndexReader,String)",1,1,1
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator.TermIterator()",1,3,3
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator.getComparator()",1,1,1
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator.next()",4,4,5
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator.weight()",1,1,1
"org.apache.lucene.search.spell.LuceneDictionary.getWordsIterator()",1,1,1
"org.apache.lucene.search.spell.NGramDistance.NGramDistance()",1,1,1
"org.apache.lucene.search.spell.NGramDistance.NGramDistance(int)",1,1,1
"org.apache.lucene.search.spell.NGramDistance.getDistance(String,String)",4,9,19
"org.apache.lucene.search.spell.PlainTextDictionary.FileIterator.getComparator()",1,1,1
"org.apache.lucene.search.spell.PlainTextDictionary.FileIterator.next()",2,3,4
"org.apache.lucene.search.spell.PlainTextDictionary.PlainTextDictionary(File)",1,1,1
"org.apache.lucene.search.spell.PlainTextDictionary.PlainTextDictionary(InputStream)",1,1,1
"org.apache.lucene.search.spell.PlainTextDictionary.PlainTextDictionary(Reader)",1,1,1
"org.apache.lucene.search.spell.PlainTextDictionary.getWordsIterator()",1,1,1
"org.apache.lucene.search.spell.SpellChecker.SpellChecker(Directory)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.SpellChecker(Directory,StringDistance)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.SpellChecker(Directory,StringDistance,Comparator<SuggestWord>)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.add(BooleanQuery,String,String)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.add(BooleanQuery,String,String,float)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.addGram(String,Document,int,int)",1,5,5
"org.apache.lucene.search.spell.SpellChecker.clearIndex()",1,1,1
"org.apache.lucene.search.spell.SpellChecker.close()",1,2,2
"org.apache.lucene.search.spell.SpellChecker.createDocument(String,int,int)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.createSearcher(Directory)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.ensureOpen()",2,1,2
"org.apache.lucene.search.spell.SpellChecker.exist(String)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.formGrams(String,int)",1,2,2
"org.apache.lucene.search.spell.SpellChecker.getAccuracy()",1,1,1
"org.apache.lucene.search.spell.SpellChecker.getComparator()",1,1,1
"org.apache.lucene.search.spell.SpellChecker.getMax(int)",3,1,3
"org.apache.lucene.search.spell.SpellChecker.getMin(int)",3,1,3
"org.apache.lucene.search.spell.SpellChecker.getStringDistance()",1,1,1
"org.apache.lucene.search.spell.SpellChecker.indexDictionary(Dictionary,IndexWriterConfig,boolean)",6,6,8
"org.apache.lucene.search.spell.SpellChecker.isClosed()",1,1,1
"org.apache.lucene.search.spell.SpellChecker.obtainSearcher()",1,1,1
"org.apache.lucene.search.spell.SpellChecker.releaseSearcher(IndexSearcher)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.setAccuracy(float)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.setComparator(Comparator<SuggestWord>)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.setSpellIndex(Directory)",1,2,2
"org.apache.lucene.search.spell.SpellChecker.setStringDistance(StringDistance)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,IndexReader,String,SuggestMode)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,IndexReader,String,SuggestMode,float)",9,10,24
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,IndexReader,String,boolean)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,IndexReader,String,boolean,float)",1,1,2
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,float)",1,1,1
"org.apache.lucene.search.spell.SpellChecker.swapSearcher(Directory)",2,3,3
"org.apache.lucene.search.spell.SuggestWordFrequencyComparator.compare(SuggestWord,SuggestWord)",5,1,5
"org.apache.lucene.search.spell.SuggestWordQueue.SuggestWordQueue(int)",1,1,1
"org.apache.lucene.search.spell.SuggestWordQueue.SuggestWordQueue(int,Comparator<SuggestWord>)",1,1,1
"org.apache.lucene.search.spell.SuggestWordQueue.lessThan(SuggestWord,SuggestWord)",1,1,1
"org.apache.lucene.search.spell.SuggestWordScoreComparator.compare(SuggestWord,SuggestWord)",5,1,5
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper.TermFreqIteratorWrapper(BytesRefIterator)",1,1,1
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper.getComparator()",1,1,1
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper.next()",1,1,1
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper.weight()",1,1,1
"org.apache.lucene.search.spell.TestJaroWinklerDistance.testGetDistance()",1,1,6
"org.apache.lucene.search.spell.TestLevenshteinDistance.testEmpty()",1,1,1
"org.apache.lucene.search.spell.TestLevenshteinDistance.testGetDistance()",1,1,1
"org.apache.lucene.search.spell.TestLuceneDictionary.setUp()",1,1,1
"org.apache.lucene.search.spell.TestLuceneDictionary.tearDown()",1,2,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldAaa()",1,2,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldContents_1()",1,2,3
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldContents_2()",1,2,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldNonExistent()",1,2,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldZzz()",1,2,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testSpellchecker()",1,1,1
"org.apache.lucene.search.spell.TestNGramDistance.testEmpty()",1,1,1
"org.apache.lucene.search.spell.TestNGramDistance.testGetDistance1()",1,1,1
"org.apache.lucene.search.spell.TestNGramDistance.testGetDistance2()",1,1,1
"org.apache.lucene.search.spell.TestNGramDistance.testGetDistance3()",1,1,1
"org.apache.lucene.search.spell.TestPlainTextDictionary.testBuild()",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckWorker.SpellCheckWorker(IndexReader)",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckWorker.run()",2,3,4
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock.SpellCheckerMock(Directory)",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock.SpellCheckerMock(Directory,StringDistance)",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock.SpellCheckerMock(Directory,StringDistance,Comparator<SuggestWord>)",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock.createSearcher(Directory)",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.addwords(IndexReader,SpellChecker,String)",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.assertLastSearcherOpen(int)",1,3,3
"org.apache.lucene.search.spell.TestSpellChecker.assertSearchersClosed()",1,2,2
"org.apache.lucene.search.spell.TestSpellChecker.checkCommonSuggestions(IndexReader)",1,2,2
"org.apache.lucene.search.spell.TestSpellChecker.checkJaroWinklerSuggestions()",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.checkLevenshteinSuggestions(IndexReader)",1,2,2
"org.apache.lucene.search.spell.TestSpellChecker.checkNGramSuggestions()",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.numdoc()",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.setUp()",1,2,3
"org.apache.lucene.search.spell.TestSpellChecker.tearDown()",1,2,2
"org.apache.lucene.search.spell.TestSpellChecker.testBogusField()",1,2,2
"org.apache.lucene.search.spell.TestSpellChecker.testBuild()",1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.testClose()",1,1,6
"org.apache.lucene.search.spell.TestSpellChecker.testComparator()",1,2,2
"org.apache.lucene.search.spell.TestSpellChecker.testConcurrentAccess()",1,4,4
"org.apache.lucene.search.spell.TestSpellChecker.testSuggestModes()",1,1,1
"org.apache.lucene.search.suggest.Average.Average(double,double)",1,1,1
"org.apache.lucene.search.suggest.Average.from(List<Double>)",1,1,2
"org.apache.lucene.search.suggest.Average.toString()",1,1,1
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper.BufferingTermFreqIteratorWrapper(TermFreqIterator)",1,3,3
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper.getComparator()",1,1,1
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper.next()",2,2,2
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper.weight()",1,1,1
"org.apache.lucene.search.suggest.BytesRefList.BytesRefList()",1,1,1
"org.apache.lucene.search.suggest.BytesRefList.append(BytesRef)",1,2,2
"org.apache.lucene.search.suggest.BytesRefList.bytesUsed()",1,1,1
"org.apache.lucene.search.suggest.BytesRefList.clear()",1,1,1
"org.apache.lucene.search.suggest.BytesRefList.get(BytesRef,int)",2,2,3
"org.apache.lucene.search.suggest.BytesRefList.iterator()",1,1,1
"org.apache.lucene.search.suggest.BytesRefList.iterator(Comparator<BytesRef>)",2,3,4
"org.apache.lucene.search.suggest.BytesRefList.size()",1,1,1
"org.apache.lucene.search.suggest.BytesRefList.sort(Comparator<BytesRef>)",1,1,2
"org.apache.lucene.search.suggest.FileDictionary.FileDictionary(InputStream)",1,1,1
"org.apache.lucene.search.suggest.FileDictionary.FileDictionary(Reader)",1,1,1
"org.apache.lucene.search.suggest.FileDictionary.FileIterator.getComparator()",1,1,1
"org.apache.lucene.search.suggest.FileDictionary.FileIterator.next()",3,4,5
"org.apache.lucene.search.suggest.FileDictionary.FileIterator.weight()",1,1,1
"org.apache.lucene.search.suggest.FileDictionary.getWordsIterator()",1,1,1
"org.apache.lucene.search.suggest.Lookup.CharSequenceComparator.compare(CharSequence,CharSequence)",3,2,3
"org.apache.lucene.search.suggest.Lookup.LookupPriorityQueue.LookupPriorityQueue(int)",1,1,1
"org.apache.lucene.search.suggest.Lookup.LookupPriorityQueue.getResults()",1,2,2
"org.apache.lucene.search.suggest.Lookup.LookupPriorityQueue.lessThan(LookupResult,LookupResult)",1,1,1
"org.apache.lucene.search.suggest.Lookup.LookupResult.LookupResult(CharSequence,long)",1,1,1
"org.apache.lucene.search.suggest.Lookup.LookupResult.compareTo(LookupResult)",1,1,1
"org.apache.lucene.search.suggest.Lookup.LookupResult.toString()",1,1,1
"org.apache.lucene.search.suggest.Lookup.build(Dictionary)",1,1,2
"org.apache.lucene.search.suggest.LookupBenchmarkTest.BenchmarkResult.BenchmarkResult(List<Double>,int,int)",1,1,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.buildLookup(Class<? extends Lookup>,TermFreq[])",1,1,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.measure(Callable<Integer>)",1,2,3
"org.apache.lucene.search.suggest.LookupBenchmarkTest.readTop50KWiki()",1,2,2
"org.apache.lucene.search.suggest.LookupBenchmarkTest.runPerformanceTest(int,int,int,boolean)",1,4,4
"org.apache.lucene.search.suggest.LookupBenchmarkTest.setup()",1,1,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testConstructionTime()",1,2,2
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testPerformanceOnFullHits()",1,1,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testPerformanceOnPrefixes2_4()",1,1,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testPerformanceOnPrefixes6_9()",1,1,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testStorageNeeds()",1,2,2
"org.apache.lucene.search.suggest.PersistenceTest.runTest(Class<? extends Lookup>,boolean)",1,3,4
"org.apache.lucene.search.suggest.PersistenceTest.testFSTPersistence()",1,1,1
"org.apache.lucene.search.suggest.PersistenceTest.testJaspellPersistence()",1,1,1
"org.apache.lucene.search.suggest.PersistenceTest.testTSTPersistence()",1,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.BytesOnlyComparator.BytesOnlyComparator(Comparator<BytesRef>)",1,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.BytesOnlyComparator.compare(BytesRef,BytesRef)",1,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.BytesOnlyComparator.wrap(BytesRef,BytesRef)",1,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator<BytesRef>)",1,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator<BytesRef>,boolean)",1,1,2
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.close()",1,3,3
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.decode(BytesRef,ByteArrayDataInput)",1,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,long)",1,2,2
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.getComparator()",1,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.next()",3,3,4
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.sort(Comparator<BytesRef>)",1,3,3
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.weight()",1,1,1
"org.apache.lucene.search.suggest.TermFreq.TermFreq(BytesRef,long)",1,1,1
"org.apache.lucene.search.suggest.TermFreq.TermFreq(String,long)",1,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.TermFreqArrayIterator(Iterable<TermFreq>)",1,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.TermFreqArrayIterator(Iterator<TermFreq>)",1,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.TermFreqArrayIterator(TermFreq[])",1,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.getComparator()",1,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.next()",2,2,2
"org.apache.lucene.search.suggest.TermFreqArrayIterator.weight()",1,1,1
"org.apache.lucene.search.suggest.TestBytesRefList.testAppend()",1,9,9
"org.apache.lucene.search.suggest.TestBytesRefList.testSort()",1,6,6
"org.apache.lucene.search.suggest.TestHighFrequencyDictionary.testEmpty()",1,1,1
"org.apache.lucene.search.suggest.TestTermFreqIterator.asIntInternal(BytesRef,int)",1,1,1
"org.apache.lucene.search.suggest.TestTermFreqIterator.asLong(BytesRef)",1,1,1
"org.apache.lucene.search.suggest.TestTermFreqIterator.testEmpty()",1,1,1
"org.apache.lucene.search.suggest.TestTermFreqIterator.testRaw()",1,5,5
"org.apache.lucene.search.suggest.TestTermFreqIterator.testTerms()",1,6,6
"org.apache.lucene.search.suggest.UnsortedTermFreqIteratorWrapper.UnsortedTermFreqIteratorWrapper(TermFreqIterator)",1,2,3
"org.apache.lucene.search.suggest.UnsortedTermFreqIteratorWrapper.next()",2,2,2
"org.apache.lucene.search.suggest.UnsortedTermFreqIteratorWrapper.weight()",1,1,1
"org.apache.lucene.search.suggest.fst.BytesRefSortersTest.check(BytesRefSorter)",1,4,5
"org.apache.lucene.search.suggest.fst.BytesRefSortersTest.testExternalRefSorter()",1,1,1
"org.apache.lucene.search.suggest.fst.BytesRefSortersTest.testInMemorySorter()",1,1,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ByteSequenceIterator.ByteSequenceIterator(ByteSequencesReader,Comparator<BytesRef>)",1,1,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ByteSequenceIterator.getComparator()",1,1,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ByteSequenceIterator.next()",2,3,4
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ExternalRefSorter(Sort)",1,1,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.add(BytesRef)",2,1,2
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.close()",1,3,3
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.closeWriter()",1,2,2
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.getComparator()",1,1,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.iterator()",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletion.Completion.Completion(BytesRef,int)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.Completion.compareTo(Completion)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.Completion.toString()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.FSTCompletion(FST<Object>)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.FSTCompletion(FST<Object>,boolean,boolean)",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletion.cacheRootArcs(FST<Object>)",3,2,4
"org.apache.lucene.search.suggest.fst.FSTCompletion.checkExistingAndReorder(ArrayList<Completion>,BytesRef)",3,3,3
"org.apache.lucene.search.suggest.fst.FSTCompletion.collect(List<Completion>,int,int,BytesRef,Arc<Object>)",6,4,7
"org.apache.lucene.search.suggest.fst.FSTCompletion.descendWithPrefix(Arc<Object>,BytesRef)",3,2,3
"org.apache.lucene.search.suggest.fst.FSTCompletion.getBucket(CharSequence)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.getBucketCount()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.getExactMatchStartingFromRootArc(int,BytesRef)",4,3,5
"org.apache.lucene.search.suggest.fst.FSTCompletion.getFST()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.lookup(CharSequence,int)",3,3,6
"org.apache.lucene.search.suggest.fst.FSTCompletion.lookupSortedAlphabetically(BytesRef,int)",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletion.lookupSortedByWeight(BytesRef,int,boolean)",4,9,9
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.FSTCompletionBuilder()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.FSTCompletionBuilder(int,BytesRefSorter,int)",3,1,4
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.add(BytesRef,int)",2,2,4
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.build()",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.buildAutomaton(BytesRefSorter)",1,4,4
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.FSTCompletionLookup()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.FSTCompletionLookup(FSTCompletion,boolean)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.FSTCompletionLookup(int,boolean)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.build(TermFreqIterator)",1,5,7
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.encodeWeight(long)",2,1,3
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.get(CharSequence)",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.load(InputStream)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.lookup(CharSequence,boolean,int)",1,3,3
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.store(OutputStream)",2,2,3
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.assertMatchEquals(List<Completion>,String...)",1,4,6
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.evalKeys()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.maxLen(String[])",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.setUp()",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.stripScore(String[])",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testAlphabeticWithWeights()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testEmptyInput()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testExactMatchHighPriority()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testExactMatchLowPriority()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testExactMatchReordering()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testFullMatchList()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testLargeInputConstantWeights()",1,4,4
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testMiss()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testMultilingualInput()",1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testRandom()",1,5,5
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testRequestedCount()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testThreeByte()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.tf(String,int)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.Entry.Entry(char[],float)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.FSTLookup()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.FSTLookup(int,boolean)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.build(TermFreqIterator)",1,4,4
"org.apache.lucene.search.suggest.fst.FSTLookup.buildAutomaton(List<Entry>)",4,4,8
"org.apache.lucene.search.suggest.fst.FSTLookup.cacheRootArcs()",4,3,4
"org.apache.lucene.search.suggest.fst.FSTLookup.checkExistingAndReorder(ArrayList<LookupResult>,CharSequence)",3,3,3
"org.apache.lucene.search.suggest.fst.FSTLookup.collect(List<LookupResult>,int,long,StringBuilder,Arc<Object>)",6,3,6
"org.apache.lucene.search.suggest.fst.FSTLookup.descendWithPrefix(Arc<Object>,CharSequence)",3,2,3
"org.apache.lucene.search.suggest.fst.FSTLookup.encodeWeightPrefix(List<Entry>)",1,1,3
"org.apache.lucene.search.suggest.fst.FSTLookup.get(CharSequence)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.getExactMatchStartingFromRootArc(int,CharSequence)",4,3,5
"org.apache.lucene.search.suggest.fst.FSTLookup.load(InputStream)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.lookup(CharSequence,boolean,int)",3,3,6
"org.apache.lucene.search.suggest.fst.FSTLookup.lookupSortedAlphabetically(CharSequence,int)",1,2,2
"org.apache.lucene.search.suggest.fst.FSTLookup.lookupSortedByWeight(CharSequence,int,boolean)",4,9,9
"org.apache.lucene.search.suggest.fst.FSTLookup.redistributeWeightsProportionalMinMax(List<Entry>,int)",1,2,3
"org.apache.lucene.search.suggest.fst.FSTLookup.store(OutputStream)",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.assertMatchEquals(List<LookupResult>,String...)",1,4,6
"org.apache.lucene.search.suggest.fst.FSTLookupTest.evalKeys()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.maxLen(String[])",1,2,2
"org.apache.lucene.search.suggest.fst.FSTLookupTest.setUp()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testAlphabeticWithWeights()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testEmptyInput()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testExactMatchHighPriority()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testExactMatchLowPriority()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testFullMatchList()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testMiss()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testMultilingualInput()",1,2,2
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testRandom()",1,5,5
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testRequestedCount()",1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.tf(String,long)",1,1,1
"org.apache.lucene.search.suggest.fst.InMemorySorter.InMemorySorter(Comparator<BytesRef>)",1,1,1
"org.apache.lucene.search.suggest.fst.InMemorySorter.add(BytesRef)",2,1,2
"org.apache.lucene.search.suggest.fst.InMemorySorter.getComparator()",1,1,1
"org.apache.lucene.search.suggest.fst.InMemorySorter.iterator()",1,1,1
"org.apache.lucene.search.suggest.fst.LargeInputFST.main(String[])",1,3,3
"org.apache.lucene.search.suggest.fst.Sort.BufferSize.BufferSize(long)",2,1,2
"org.apache.lucene.search.suggest.fst.Sort.BufferSize.automatic()",2,2,2
"org.apache.lucene.search.suggest.fst.Sort.BufferSize.megabytes(int)",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.ByteSequencesReader(DataInput)",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.ByteSequencesReader(File)",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.close()",1,2,2
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.read()",1,1,2
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.read(BytesRef)",1,1,2
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.ByteSequencesWriter(DataOutput)",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.ByteSequencesWriter(File)",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.close()",1,2,2
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.write(BytesRef)",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.write(byte[])",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.write(byte[],int,int)",1,1,2
"org.apache.lucene.search.suggest.fst.Sort.FileAndTop.FileAndTop(int,byte[])",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.Sort()",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.Sort(Comparator<BytesRef>)",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.Sort(Comparator<BytesRef>,BufferSize,File,int)",3,1,3
"org.apache.lucene.search.suggest.fst.Sort.SortInfo.toString()",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.copy(File,File)",1,2,2
"org.apache.lucene.search.suggest.fst.Sort.defaultTempDir()",3,3,4
"org.apache.lucene.search.suggest.fst.Sort.getComparator()",1,1,1
"org.apache.lucene.search.suggest.fst.Sort.mergePartitions(List<File>,File)",1,5,5
"org.apache.lucene.search.suggest.fst.Sort.readPartition(ByteSequencesReader)",3,2,3
"org.apache.lucene.search.suggest.fst.Sort.sort(File,File)",1,8,8
"org.apache.lucene.search.suggest.fst.Sort.sortPartition(int)",1,2,2
"org.apache.lucene.search.suggest.fst.TestSort.assertFilesIdentical(File,File)",1,3,3
"org.apache.lucene.search.suggest.fst.TestSort.checkSort(Sort,byte[][])",1,1,1
"org.apache.lucene.search.suggest.fst.TestSort.cleanup()",1,2,2
"org.apache.lucene.search.suggest.fst.TestSort.generateRandom(int)",1,2,2
"org.apache.lucene.search.suggest.fst.TestSort.prepareTempDir()",1,1,1
"org.apache.lucene.search.suggest.fst.TestSort.testEmpty()",1,1,1
"org.apache.lucene.search.suggest.fst.TestSort.testIntermediateMerges()",1,1,1
"org.apache.lucene.search.suggest.fst.TestSort.testLargerRandom()",1,1,1
"org.apache.lucene.search.suggest.fst.TestSort.testSingleLine()",1,1,1
"org.apache.lucene.search.suggest.fst.TestSort.testSmallRandom()",1,1,1
"org.apache.lucene.search.suggest.fst.TestSort.writeAll(String,byte[][])",1,2,2
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTCompletionLookup()",1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTCompletionLookup(boolean)",1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTTermFreqIteratorWrapper.WFSTTermFreqIteratorWrapper(TermFreqIterator,Comparator<BytesRef>)",1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTTermFreqIteratorWrapper.decode(BytesRef,ByteArrayDataInput)",1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTTermFreqIteratorWrapper.encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,long)",1,2,2
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.build(TermFreqIterator)",4,3,4
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.decodeWeight(long)",1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.encodeWeight(long)",2,1,3
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.get(CharSequence)",2,3,4
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.load(InputStream)",1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.lookup(CharSequence,boolean,int)",4,5,8
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.lookupPrefix(BytesRef,Arc<Long>)",3,3,3
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.store(OutputStream)",2,1,2
"org.apache.lucene.search.suggest.fst.WFSTCompletionTest.test()",1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionTest.testRandom()",5,10,11
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.add(CharSequence,Object)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.build(TermFreqIterator)",3,2,4
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.get(CharSequence)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.load(InputStream)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.lookup(CharSequence,boolean,int)",2,7,9
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.readRecursively(DataInputStream,TSTNode)",1,5,5
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.store(OutputStream)",2,1,2
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.writeRecursively(DataOutputStream,TSTNode)",2,2,7
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.JaspellTernarySearchTrie()",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.JaspellTernarySearchTrie(File)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.JaspellTernarySearchTrie(File,boolean)",7,9,14
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.TSTNode.TSTNode(char,TSTNode)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.compareCharsAlphabetically(char,char)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.deleteNode(TSTNode)",2,2,3
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.deleteNodeRecursion(TSTNode)",9,2,17
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.get(CharSequence)",2,1,2
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getAndIncrement(String)",2,2,3
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getKey(TSTNode)",1,3,3
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getNode(CharSequence)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getNode(CharSequence,TSTNode)",6,5,9
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getOrCreateNode(CharSequence)",6,8,11
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getRoot()",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchAlmost(CharSequence,int)",1,1,2
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchAlmost(String)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchAlmostRecursion(TSTNode,int,int,CharSequence,int,List<String>,boolean)",2,10,15
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchPrefix(CharSequence,int)",2,2,4
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchPrefix(String)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.numDataNodes()",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.numDataNodes(TSTNode)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.numNodes()",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.numNodes(TSTNode)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.put(CharSequence,Object)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.recursiveNodeCalculator(TSTNode,boolean,int)",2,1,4
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.remove(String)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.setMatchAlmostDiff(int)",1,1,3
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.setNumReturnValues(int)",1,1,2
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.setRoot(TSTNode)",1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.sortKeys(TSTNode,int)",1,1,2
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.sortKeysRecursion(TSTNode,int,List<String>)",3,3,5
"org.apache.lucene.search.suggest.tst.TSTAutocomplete.balancedTree(Object[],Object[],int,int,TernaryTreeNode)",2,1,2
"org.apache.lucene.search.suggest.tst.TSTAutocomplete.insert(TernaryTreeNode,CharSequence,Object,int)",7,7,8
"org.apache.lucene.search.suggest.tst.TSTAutocomplete.prefixCompletion(TernaryTreeNode,CharSequence,int)",8,11,16
"org.apache.lucene.search.suggest.tst.TSTLookup.add(CharSequence,Object)",1,1,1
"org.apache.lucene.search.suggest.tst.TSTLookup.build(TermFreqIterator)",1,3,3
"org.apache.lucene.search.suggest.tst.TSTLookup.charSeqEquals(CharSequence,CharSequence)",4,2,4
"org.apache.lucene.search.suggest.tst.TSTLookup.get(CharSequence)",4,3,5
"org.apache.lucene.search.suggest.tst.TSTLookup.load(InputStream)",1,1,1
"org.apache.lucene.search.suggest.tst.TSTLookup.lookup(CharSequence,boolean,int)",2,6,7
"org.apache.lucene.search.suggest.tst.TSTLookup.readRecursively(DataInputStream,TernaryTreeNode)",1,6,6
"org.apache.lucene.search.suggest.tst.TSTLookup.store(OutputStream)",1,1,1
"org.apache.lucene.search.suggest.tst.TSTLookup.writeRecursively(DataOutputStream,TernaryTreeNode)",1,6,11
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.BasicNGramTokenizer(Reader)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.BasicNGramTokenizer(Reader,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.BasicNGramTokenizer(Reader,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.BasicNGramTokenizer(Reader,int,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.end()",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.getFinalOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.getNextPartialSnippet()",2,2,3
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.getNextSnippet()",6,6,8
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.incrementToken()",2,1,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.isDelimiter(int)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.readCharFromBuffer()",3,2,3
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.reset()",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.reset(Reader)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BigramAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.assertCollectionQueries(Collection<Query>,Query...)",1,2,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.dmq(Query...)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.dmq(float,Query...)",1,2,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1d1fIndex(String)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1d1fIndexB(String)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1dmfIndex(Analyzer,String...)",1,3,3
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1dmfIndex(String...)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1dmfIndexB(String...)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1dmfIndexNA(String...)",1,3,3
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.makeIndexLongMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.makeIndexLongMVB()",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.makeIndexShortMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.makeIndexStrMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pq(String,String...)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pq(float,String,String...)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pq(float,int,String,String...)",1,2,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pqF(String...)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pqF(float,String...)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pqF(float,int,String...)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.setUp()",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tearDown()",1,2,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tq(String)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tq(String,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tq(float,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tq(float,String,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.BaseFragmentsBuilder()",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.BaseFragmentsBuilder(BoundaryScanner)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.BaseFragmentsBuilder(String[],String[])",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.BaseFragmentsBuilder(String[],String[],BoundaryScanner)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.checkTagsArgument(Object)",3,1,3
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragment(IndexReader,int,String,FieldFragList)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragment(IndexReader,int,String,FieldFragList,String[],String[],Encoder)",2,1,3
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragments(IndexReader,int,String,FieldFragList,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder)",3,3,5
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFieldValues(IndexReader,int,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFields(IndexReader,int,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFragmentSource(StringBuilder,int[],Field[],int,int)",1,5,5
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFragmentSource(StringBuilder,int[],String[],int,int)",1,4,4
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFragmentSourceMSO(StringBuilder,int[],Field[],int,int,int[])",1,5,6
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getMultiValuedSeparator()",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getPostTag(String[],int)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getPostTag(int)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getPreTag(String[],int)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getPreTag(int)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.makeFragment(StringBuilder,int[],Field[],WeightedFragInfo,String[],String[],Encoder)",1,3,3
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.makeFragment(StringBuilder,int[],String[],WeightedFragInfo)",1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.makeFragment(WeightedFragInfo,String,int,String[],String[],Encoder)",1,3,3
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.setMultiValuedSeparator(char)",1,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner.BreakIteratorBoundaryScanner(BreakIterator)",1,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner.findEndOffset(StringBuilder,int)",2,2,3
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner.findStartOffset(StringBuilder,int)",2,2,3
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testFindEndOffset(StringBuilder,int,int,BoundaryScanner)",1,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testFindStartOffset(StringBuilder,int,int,BoundaryScanner)",1,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testLineBoundary()",1,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testOutOfRange()",1,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testSentenceBoundary()",1,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testWordBoundary()",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.FastVectorHighlighter()",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.FastVectorHighlighter(boolean,boolean)",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.FastVectorHighlighter(boolean,boolean,FragListBuilder,FragmentsBuilder)",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragment(FieldQuery,IndexReader,int,String,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragment(FieldQuery,IndexReader,int,String,int,FragListBuilder,FragmentsBuilder,String[],String[],Encoder)",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragments(FieldQuery,IndexReader,int,String,int,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragments(FieldQuery,IndexReader,int,String,int,int,FragListBuilder,FragmentsBuilder,String[],String[],Encoder)",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldFragList(FragListBuilder,FieldQuery,IndexReader,int,String,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query)",1,1,2
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query,IndexReader)",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getPhraseLimit()",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.isFieldMatch()",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.isPhraseHighlight()",1,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.setPhraseLimit(int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.FieldFragList(int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo.SubInfo(String,List<Toffs>,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo.getSeqnum()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo.getTermsOffsets()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo.toString()",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.WeightedFragInfo(int,int,List<WeightedPhraseInfo>)",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.getEndOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.getStartOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.getSubInfos()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.getTotalBoost()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.toString()",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldFragList.add(int,int,List<WeightedPhraseInfo>)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.getFragInfos()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.FieldPhraseList(FieldTermStack,FieldQuery)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.FieldPhraseList(FieldTermStack,FieldQuery,int)",8,10,12
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.Toffs(int,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.getEndOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.getStartOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.setEndOffset(int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.toString()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.WeightedPhraseInfo(LinkedList<TermInfo>,float)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.WeightedPhraseInfo(LinkedList<TermInfo>,float,int)",2,4,4
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.getEndOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.getStartOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.isOffsetOverlap(WeightedPhraseInfo)",5,1,9
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.toString()",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.addIfNoOverlap(WeightedPhraseInfo)",3,2,3
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseIndex()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseIndexB()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseLongMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseLongMVB()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseShortMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1TermIndex()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test2ConcatTermsIndexB()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test2PhrasesOverlap()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test2Terms1PhraseIndex()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test2TermsIndex()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test3TermsPhrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.testPhraseSlop()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.testSearchLongestPhrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.FieldQuery(Query,IndexReader,boolean,boolean)",1,5,6
"org.apache.lucene.search.vectorhighlight.FieldQuery.FieldQuery(Query,boolean,boolean)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.QueryPhraseMap(FieldQuery)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.add(Query,IndexReader)",3,4,4
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.addTerm(Term,float)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getBoost()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getOrNewMap(Map<String, QueryPhraseMap>,String)",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getSlop()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getTermMap(String)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getTermOrPhraseNumber()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.isTerminal()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.isValidTermOrPhrase(List<TermInfo>)",5,2,5
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.markTerminal(float)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.markTerminal(int,float)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.searchPhrase(List<TermInfo>)",3,2,4
"org.apache.lucene.search.vectorhighlight.FieldQuery.checkOverlap(Collection<Query>,PhraseQuery,PhraseQuery)",3,2,4
"org.apache.lucene.search.vectorhighlight.FieldQuery.checkOverlap(Collection<Query>,Term[],Term[],int,float)",4,8,10
"org.apache.lucene.search.vectorhighlight.FieldQuery.expand(Collection<Query>)",5,3,5
"org.apache.lucene.search.vectorhighlight.FieldQuery.flatten(Query,IndexReader,Collection<Query>)",1,13,14
"org.apache.lucene.search.vectorhighlight.FieldQuery.getFieldTermMap(String,String)",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.getKey(Query)",9,8,9
"org.apache.lucene.search.vectorhighlight.FieldQuery.getRootMap(Query)",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.getRootMap(String)",1,1,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.getTermSet(Query)",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.getTermSet(String)",1,1,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.nextTermOrPhraseNumber()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.saveTerms(Collection<Query>,IndexReader)",5,7,8
"org.apache.lucene.search.vectorhighlight.FieldQuery.searchPhrase(String,List<TermInfo>)",2,1,2
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.defgMultiTermQueryTest(Query)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testExpand()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testExpandNotFieldMatch()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlatten1TermPhrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlattenBoolean()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlattenDisjunctionMaxQuery()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlattenTermAndPhrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlattenTermAndPhrase2gram()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testGetFieldTermMap()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testGetRootMap()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testGetRootMapNotFieldMatch()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testGetTermSet()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testHighlightQuery()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testNoExpand()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testPrefixQuery()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap1Phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap1PhraseAnother()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap1Term()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap2Phrases()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap2PhrasesFields()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMapOverlap2gram()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMapOverlapPhrases()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMapOverlapPhrases2()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMapOverlapPhrases3()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testRangeQuery()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testRegexQuery()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testSearchPhrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testSearchPhraseSlop()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.FieldTermStack(IndexReader,int,String,FieldQuery)",7,3,9
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.TermInfo(String,int,int,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.compareTo(TermInfo)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.getEndOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.getPosition()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.getStartOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.getText()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.toString()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.getFieldName()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.isEmpty()",1,2,2
"org.apache.lucene.search.vectorhighlight.FieldTermStack.main(String[])",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.pop()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.push(TermInfo)",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.makeIndex()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.makeIndexB()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1Phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1PhraseB()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1PhraseLongMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1PhraseMVB()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1PhraseShortMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1Term()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1TermB()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test2Terms()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test2TermsB()",1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.testWildcard()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.TokenArrayAnalyzer.TokenArrayAnalyzer(Token...)",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.TokenArrayAnalyzer.tokenStream(String,Reader)",2,1,2
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.makeIndex1w()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.makeIndex1w2w()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.makeIndex2w1w()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.makeSynonymIndex(String,Token...)",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.t(String,int,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.t(String,int,int,int)",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex1w2wSearch1partial()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex1w2wSearch1phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex1w2wSearch1term1phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex2w1wSearch1partial()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex2w1wSearch1phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex2w1wSearch1term()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex2w1wSearch1term1phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1w2wSearch1partial()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1w2wSearch1phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1w2wSearch1term()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1w2wSearch1term1phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1wSearch1term()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1wSearch2terms()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex2w1wSearch1partial()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex2w1wSearch1phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex2w1wSearch1term()",1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex2w1wSearch1term1phrase()",1,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreComparator.compare(WeightedFragInfo,WeightedFragInfo)",5,1,5
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreOrderFragmentsBuilder()",1,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreOrderFragmentsBuilder(BoundaryScanner)",1,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreOrderFragmentsBuilder(String[],String[])",1,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreOrderFragmentsBuilder(String[],String[],BoundaryScanner)",1,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.getWeightedFragInfoList(List<WeightedFragInfo>)",1,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilderTest.ffl(String,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilderTest.test3Frags()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner(Character[])",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner(int)",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner(int,Character[])",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner(int,Set<Character>)",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.findEndOffset(StringBuilder,int)",4,4,6
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.findStartOffset(StringBuilder,int)",5,3,7
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScannerTest.testFindEndOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScannerTest.testFindStartOffset()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilder.SimpleFragListBuilder()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilder.SimpleFragListBuilder(int)",2,1,2
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilder.createFieldFragList(FieldPhraseList,int)",11,8,13
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.fpl(String,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test1PhraseLongMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test1PhraseLongMVB()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test1PhraseShortMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test1TermIndex()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test2TermsIndex1Frag()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test2TermsIndex2Frags()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test2TermsQuery()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testNullFieldFragList()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testPhraseQuery()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testPhraseQuerySlop()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testSmallerFragSizeThanPhraseQuery()",1,2,2
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testSmallerFragSizeThanTermQuery()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testTooSmallFragSize()",1,1,2
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.SimpleFragmentsBuilder()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.SimpleFragmentsBuilder(BoundaryScanner)",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.SimpleFragmentsBuilder(String[],String[])",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.SimpleFragmentsBuilder(String[],String[],BoundaryScanner)",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.getWeightedFragInfoList(List<WeightedFragInfo>)",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.ffl(String,String)",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.makeUnstoredIndex()",1,2,2
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1PhraseLongMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1PhraseLongMVB()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1PhraseShortMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1StrMV()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1TermIndex()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test2Frags()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test3Frags()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.testMVSeparator()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.testTagsAndEncoder()",1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.testUnstoredField()",1,1,1
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilder.createFieldFragList(FieldPhraseList,int)",4,3,5
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest.fpl(String,String...)",1,1,1
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest.testLongFieldFragList()",1,1,1
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest.testNullFieldFragList()",1,1,1
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest.testShortFieldFragList()",1,1,1
"org.apache.lucene.spatial.DistanceUtils.angularDistance(double,double)",1,1,1
"org.apache.lucene.spatial.DistanceUtils.getBoundary(double,double,double)",1,1,1
"org.apache.lucene.spatial.DistanceUtils.getDistanceMi(double,double,double,double)",1,1,1
"org.apache.lucene.spatial.DistanceUtils.getLLMDistance(double,double,double,double)",1,1,1
"org.apache.lucene.spatial.DistanceUtils.haversine(double,double,double,double,double)",1,2,3
"org.apache.lucene.spatial.DistanceUtils.latLonCorner(double,double,double,double[],boolean,double)",1,1,2
"org.apache.lucene.spatial.DistanceUtils.latLonCornerDegs(double,double,double,double[],boolean,double)",1,1,1
"org.apache.lucene.spatial.DistanceUtils.normLat(double[])",1,1,5
"org.apache.lucene.spatial.DistanceUtils.normLng(double[])",1,1,3
"org.apache.lucene.spatial.DistanceUtils.parseLatitudeLongitude(String)",1,1,1
"org.apache.lucene.spatial.DistanceUtils.parseLatitudeLongitude(double[],String)",3,1,6
"org.apache.lucene.spatial.DistanceUtils.parsePoint(String[],String,int)",6,9,15
"org.apache.lucene.spatial.DistanceUtils.parsePointDouble(double[],String,int)",6,9,15
"org.apache.lucene.spatial.DistanceUtils.pointOnBearing(double,double,double,double,double[],double)",1,1,3
"org.apache.lucene.spatial.DistanceUtils.squaredEuclideanDistance(double[],double[])",1,1,2
"org.apache.lucene.spatial.DistanceUtils.vectorBoxCorner(double[],double[],double,boolean)",1,1,5
"org.apache.lucene.spatial.DistanceUtils.vectorDistance(double[],double[],double)",1,1,1
"org.apache.lucene.spatial.DistanceUtils.vectorDistance(double[],double[],double,double)",1,8,11
"org.apache.lucene.spatial.DistanceUtilsTest.testBoxCorner()",1,1,1
"org.apache.lucene.spatial.DistanceUtilsTest.testHaversine()",1,1,1
"org.apache.lucene.spatial.DistanceUtilsTest.testLatLonCorner()",1,1,1
"org.apache.lucene.spatial.DistanceUtilsTest.testNormLatLon()",1,1,1
"org.apache.lucene.spatial.DistanceUtilsTest.testParse()",1,1,7
"org.apache.lucene.spatial.DistanceUtilsTest.testPointBearing()",1,1,1
"org.apache.lucene.spatial.DistanceUtilsTest.testVectorDistance()",1,1,1
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter.GeoHashDistanceFilter(Filter,double,double,double,String)",1,1,1
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter.equals(Object)",4,5,8
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter.getDocIdSet(IndexReader)",2,3,3
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter.hashCode()",1,1,1
"org.apache.lucene.spatial.geohash.GeoHashUtils.GeoHashUtils()",1,1,1
"org.apache.lucene.spatial.geohash.GeoHashUtils.decode(String)",1,2,6
"org.apache.lucene.spatial.geohash.GeoHashUtils.encode(double,double)",1,3,6
"org.apache.lucene.spatial.geohash.TestGeoHashUtils.testDecodeEncode()",1,1,1
"org.apache.lucene.spatial.geohash.TestGeoHashUtils.testDecodeImpreciseLongitudeLatitude()",1,1,1
"org.apache.lucene.spatial.geohash.TestGeoHashUtils.testDecodePreciseLongitudeLatitude()",1,1,1
"org.apache.lucene.spatial.geohash.TestGeoHashUtils.testEncode()",1,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.CartesianPoint(int,int)",1,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.equals(Object)",6,1,6
"org.apache.lucene.spatial.geometry.CartesianPoint.getX()",1,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.getY()",1,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.hashCode()",1,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.toString()",1,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.translate(int,int)",1,1,1
"org.apache.lucene.spatial.geometry.DistanceUnits.DistanceUnits(String,double,double)",1,1,1
"org.apache.lucene.spatial.geometry.DistanceUnits.convert(double,DistanceUnits)",2,1,3
"org.apache.lucene.spatial.geometry.DistanceUnits.earthCircumference()",1,1,1
"org.apache.lucene.spatial.geometry.DistanceUnits.earthRadius()",1,1,1
"org.apache.lucene.spatial.geometry.DistanceUnits.findDistanceUnit(String)",3,2,4
"org.apache.lucene.spatial.geometry.DistanceUnits.getUnit()",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.FixedLatLng(LatLng)",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.FixedLatLng(int,int)",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.calculateMidpoint(LatLng)",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.copy()",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.doubleToFixed(double)",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.equals(Object)",6,1,6
"org.apache.lucene.spatial.geometry.FixedLatLng.fixedToDouble(int)",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.getFixedLat()",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.getFixedLng()",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.getLat()",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.getLng()",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.hashCode()",1,1,2
"org.apache.lucene.spatial.geometry.FixedLatLng.isFixedPoint()",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.isNormalized()",1,1,3
"org.apache.lucene.spatial.geometry.FixedLatLng.normalize()",2,1,6
"org.apache.lucene.spatial.geometry.FixedLatLng.setLat(int)",2,1,3
"org.apache.lucene.spatial.geometry.FixedLatLng.setLng(int)",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.toFixed()",1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.toFloat()",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.FloatLatLng(LatLng)",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.FloatLatLng(double,double)",2,1,3
"org.apache.lucene.spatial.geometry.FloatLatLng.calculateMidpoint(LatLng)",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.copy()",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.equals(Object)",6,1,6
"org.apache.lucene.spatial.geometry.FloatLatLng.getFixedLat()",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.getFixedLng()",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.getLat()",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.getLng()",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.hashCode()",1,1,2
"org.apache.lucene.spatial.geometry.FloatLatLng.isFixedPoint()",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.isNormalized()",1,1,3
"org.apache.lucene.spatial.geometry.FloatLatLng.normalize()",2,1,6
"org.apache.lucene.spatial.geometry.FloatLatLng.toFixed()",1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.toFloat()",1,1,1
"org.apache.lucene.spatial.geometry.LatLng.arcDistance(LatLng)",1,1,1
"org.apache.lucene.spatial.geometry.LatLng.arcDistance(LatLng,DistanceUnits)",4,3,6
"org.apache.lucene.spatial.geometry.LatLng.fromCartesian(CartesianPoint)",1,1,1
"org.apache.lucene.spatial.geometry.LatLng.radians(double)",1,1,1
"org.apache.lucene.spatial.geometry.LatLng.toCartesian()",1,1,1
"org.apache.lucene.spatial.geometry.LatLng.toString()",1,1,1
"org.apache.lucene.spatial.geometry.TestDistanceUnits.testConvert()",1,1,1
"org.apache.lucene.spatial.geometry.TestDistanceUnits.testFindDistanceUnit()",1,1,1
"org.apache.lucene.spatial.geometry.TestDistanceUnits.testFindDistanceUnit_unknownUnit()",1,1,2
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.DistanceApproximation()",1,1,1
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.getDistanceSq(double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.getDistanceSq(double,double,double,double)",3,3,3
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.getMilesPerLatDeg()",1,1,1
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.getMilesPerLngDeg(double)",1,2,2
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.setTestPoint(double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.Ellipse()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.Ellipse(Point2D,Point2D,double)",1,1,2
"org.apache.lucene.spatial.geometry.shape.Ellipse.SQR(double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.area()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.centroid()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.contains(Point2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.intersect(LineSegment,Point2D,Point2D)",4,6,12
"org.apache.lucene.spatial.geometry.shape.Ellipse.intersect(Rectangle)",6,4,10
"org.apache.lucene.spatial.geometry.shape.Ellipse.translate(Vector2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.LLRect(LLRect)",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.LLRect(LatLng,LatLng)",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.area()",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.boxCorners(LatLng,double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.createBox(LatLng,double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.equals(Object)",10,3,10
"org.apache.lucene.spatial.geometry.shape.LLRect.getLowerLeft()",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.getMidpoint()",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.getUpperRight()",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.hashCode()",1,3,3
"org.apache.lucene.spatial.geometry.shape.LLRect.normLat(double,double)",1,1,5
"org.apache.lucene.spatial.geometry.shape.LLRect.normLng(double,double)",1,1,3
"org.apache.lucene.spatial.geometry.shape.LLRect.toRectangle()",1,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.toString()",1,1,1
"org.apache.lucene.spatial.geometry.shape.LineSegment.LineSegment()",1,1,1
"org.apache.lucene.spatial.geometry.shape.LineSegment.LineSegment(Point2D,Point2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.LineSegment.distance(Point2D,Point2D)",3,3,4
"org.apache.lucene.spatial.geometry.shape.LineSegment.equals(Object)",10,3,10
"org.apache.lucene.spatial.geometry.shape.LineSegment.hashCode()",1,3,3
"org.apache.lucene.spatial.geometry.shape.Point2D.Point2D()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.Point2D(Point2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.Point2D(double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.add(Point2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.add(Vector2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.equals(Object)",6,1,6
"org.apache.lucene.spatial.geometry.shape.Point2D.getX()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.getY()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.hashCode()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.set(Point2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.set(Vector2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.set(double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.setX(double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.setY(double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.toString()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.x()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.x(double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.y()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.y(double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.MaxPt()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.MinPt()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.Rectangle()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.Rectangle(Point2D,Point2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.Rectangle(double,double,double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.area()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.centroid()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.contains(Point2D)",1,4,4
"org.apache.lucene.spatial.geometry.shape.Rectangle.equals(Object)",10,3,10
"org.apache.lucene.spatial.geometry.shape.Rectangle.getMaxPoint()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.getMinPoint()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.hashCode()",1,3,3
"org.apache.lucene.spatial.geometry.shape.Rectangle.intersect(Rectangle)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.set(double,double,double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.toString()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.translate(Vector2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D(Point2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D(Point2D,Point2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D(Vector2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D(double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.dot(Vector2D)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.equals(Object)",6,1,6
"org.apache.lucene.spatial.geometry.shape.Vector2D.equals(Vector2D)",1,1,3
"org.apache.lucene.spatial.geometry.shape.Vector2D.getX()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.getY()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.hashCode()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.mult(double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.norm()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.normSqr()",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.set(double,double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.setX(double)",1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.setY(double)",1,1,1
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.CartesianPolyFilterBuilder(String,int,int)",1,1,1
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.getBoundingArea(double,double,double)",1,1,1
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.getBoxShape(double,double,double)",1,6,10
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double)",1,3,4
"org.apache.lucene.spatial.tier.CartesianShapeFilter.CartesianShapeFilter(Shape,String)",1,1,1
"org.apache.lucene.spatial.tier.CartesianShapeFilter.getDocIdSet(IndexReader)",1,3,3
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceFieldComparatorSource(Filter)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.DistanceScoreDocLookupComparator(int)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.cleanUp()",1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.compare(int,int)",3,1,3
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.compareBottom(int)",3,1,3
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.copy(int,int)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.setBottom(int)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.value(int)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.cleanUp()",1,2,2
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.newComparator(String,int,int,boolean)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFilter.DistanceFilter(Filter,double)",2,1,2
"org.apache.lucene.spatial.tier.DistanceFilter.getDistance(int)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFilter.getDistances()",1,1,1
"org.apache.lucene.spatial.tier.DistanceFilter.readObject(ObjectInputStream)",1,1,1
"org.apache.lucene.spatial.tier.DistanceFilter.reset()",1,1,1
"org.apache.lucene.spatial.tier.DistanceFilter.setDistances(Map<Integer, Double>)",1,1,1
"org.apache.lucene.spatial.tier.DistanceHandler.DistanceHandler(Map<Integer, Double>,Map<String, Double>,Precision)",1,1,1
"org.apache.lucene.spatial.tier.DistanceHandler.getDistance(int,double,double,double,double)",5,5,5
"org.apache.lucene.spatial.tier.DistanceHandler.getPrecision()",1,1,1
"org.apache.lucene.spatial.tier.DistanceHandler.getPrecision(double,Precision)",4,2,6
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.DistanceQueryBuilder(double,double,double,String,String,String,boolean,int,int)",1,1,2
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.DistanceQueryBuilder(double,double,double,String,String,boolean,int,int)",1,1,2
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getDistanceFilter()",1,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getFilter()",1,2,2
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getFilter(Query)",1,2,2
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getLat()",1,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getLng()",1,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getMiles()",1,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getQuery(Query)",1,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.toString()",1,1,1
"org.apache.lucene.spatial.tier.InvalidGeoException.InvalidGeoException(String)",1,1,1
"org.apache.lucene.spatial.tier.LatLongDistanceFilter.LatLongDistanceFilter(Filter,double,double,double,String,String)",1,1,1
"org.apache.lucene.spatial.tier.LatLongDistanceFilter.equals(Object)",4,6,9
"org.apache.lucene.spatial.tier.LatLongDistanceFilter.getDocIdSet(IndexReader)",2,3,3
"org.apache.lucene.spatial.tier.LatLongDistanceFilter.hashCode()",1,1,1
"org.apache.lucene.spatial.tier.Shape.Shape(String)",1,1,1
"org.apache.lucene.spatial.tier.Shape.addBox(double)",1,1,1
"org.apache.lucene.spatial.tier.Shape.getArea()",1,1,1
"org.apache.lucene.spatial.tier.Shape.getTierId()",1,1,1
"org.apache.lucene.spatial.tier.Shape.isInside(double)",1,1,1
"org.apache.lucene.spatial.tier.TestCartesian.addData(IndexWriter)",1,1,1
"org.apache.lucene.spatial.tier.TestCartesian.addPoint(IndexWriter,String,double,double)",1,2,2
"org.apache.lucene.spatial.tier.TestCartesian.setUp()",1,1,1
"org.apache.lucene.spatial.tier.TestCartesian.setUpPlotter(int,int)",1,2,2
"org.apache.lucene.spatial.tier.TestCartesian.tearDown()",1,1,1
"org.apache.lucene.spatial.tier.TestCartesian.testAntiM()",2,7,9
"org.apache.lucene.spatial.tier.TestCartesian.testDistances()",1,3,3
"org.apache.lucene.spatial.tier.TestCartesian.testGeoHashRange()",2,7,9
"org.apache.lucene.spatial.tier.TestCartesian.testPoleFlipping()",2,9,11
"org.apache.lucene.spatial.tier.TestCartesian.testRange()",2,7,9
"org.apache.lucene.spatial.tier.TestCartesianShapeFilter.testSerializable()",1,2,2
"org.apache.lucene.spatial.tier.TestDistance.addData(IndexWriter)",1,1,1
"org.apache.lucene.spatial.tier.TestDistance.addPoint(IndexWriter,String,double,double)",1,1,1
"org.apache.lucene.spatial.tier.TestDistance.setUp()",1,1,1
"org.apache.lucene.spatial.tier.TestDistance.tearDown()",1,1,1
"org.apache.lucene.spatial.tier.TestDistance.testLatLongFilterOnDeletedDocs()",1,2,2
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.CartesianTierPlotter(int,IProjector,String)",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.bestFit(double)",2,1,2
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getBoxId(double)",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getBoxId(double,int)",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getTierBoxId(double,double)",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getTierFieldName()",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getTierFieldName(int)",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getTierVerticalPosDivider()",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.log2(double)",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.setTierBoxes()",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.setTierLength()",1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.setTierVerticalPosDivider()",1,1,1
"org.apache.lucene.spatial.tier.projections.SinusoidalProjector.coords(double,double)",1,1,1
"org.apache.lucene.spatial.tier.projections.SinusoidalProjector.coordsAsString(double,double)",1,1,1
"org.apache.lucene.spatial.tier.projections.SinusoidalProjectorTest.testProjection()",1,1,1
"org.apache.lucene.store.AlreadyClosedException.AlreadyClosedException(String)",1,1,1
"org.apache.lucene.store.BufferedIndexInput.BufferedIndexInput()",1,1,1
"org.apache.lucene.store.BufferedIndexInput.BufferedIndexInput(String)",1,1,1
"org.apache.lucene.store.BufferedIndexInput.BufferedIndexInput(String,int)",1,1,1
"org.apache.lucene.store.BufferedIndexInput.BufferedIndexInput(int)",1,1,1
"org.apache.lucene.store.BufferedIndexInput.checkBufferSize(int)",2,1,2
"org.apache.lucene.store.BufferedIndexInput.clone()",1,1,1
"org.apache.lucene.store.BufferedIndexInput.copyBytes(IndexOutput,long)",1,3,3
"org.apache.lucene.store.BufferedIndexInput.flushBuffer(IndexOutput,long)",1,2,3
"org.apache.lucene.store.BufferedIndexInput.getBufferSize()",1,1,1
"org.apache.lucene.store.BufferedIndexInput.getFilePointer()",1,1,1
"org.apache.lucene.store.BufferedIndexInput.newBuffer(byte[])",1,1,1
"org.apache.lucene.store.BufferedIndexInput.readByte()",1,2,2
"org.apache.lucene.store.BufferedIndexInput.readBytes(byte[],int,int)",1,1,1
"org.apache.lucene.store.BufferedIndexInput.readBytes(byte[],int,int,boolean)",5,6,8
"org.apache.lucene.store.BufferedIndexInput.readInt()",2,2,2
"org.apache.lucene.store.BufferedIndexInput.readLong()",2,2,2
"org.apache.lucene.store.BufferedIndexInput.readShort()",2,2,2
"org.apache.lucene.store.BufferedIndexInput.readVInt()",7,2,7
"org.apache.lucene.store.BufferedIndexInput.readVLong()",11,2,11
"org.apache.lucene.store.BufferedIndexInput.refill()",2,3,4
"org.apache.lucene.store.BufferedIndexInput.seek(long)",1,2,3
"org.apache.lucene.store.BufferedIndexInput.setBufferSize(int)",1,3,6
"org.apache.lucene.store.BufferedIndexOutput.close()",1,1,1
"org.apache.lucene.store.BufferedIndexOutput.flush()",1,1,1
"org.apache.lucene.store.BufferedIndexOutput.flushBuffer(byte[],int)",1,1,1
"org.apache.lucene.store.BufferedIndexOutput.getFilePointer()",1,1,1
"org.apache.lucene.store.BufferedIndexOutput.seek(long)",1,1,1
"org.apache.lucene.store.BufferedIndexOutput.writeByte(byte)",1,2,2
"org.apache.lucene.store.BufferedIndexOutput.writeBytes(byte[],int,int)",1,7,8
"org.apache.lucene.store.ByteArrayDataInput.ByteArrayDataInput()",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.ByteArrayDataInput(byte[])",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.ByteArrayDataInput(byte[],int,int)",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.eof()",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.getPosition()",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.readByte()",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.readBytes(byte[],int,int)",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.readInt()",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.readLong()",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.readShort()",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.readVInt()",6,1,6
"org.apache.lucene.store.ByteArrayDataInput.readVLong()",10,1,10
"org.apache.lucene.store.ByteArrayDataInput.reset(byte[])",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.reset(byte[],int,int)",1,1,1
"org.apache.lucene.store.ByteArrayDataInput.skipBytes(int)",1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.ByteArrayDataOutput()",1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.ByteArrayDataOutput(byte[])",1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.ByteArrayDataOutput(byte[],int,int)",1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.getPosition()",1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.reset(byte[])",1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.reset(byte[],int,int)",1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.writeByte(byte)",1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte[],int,int)",1,1,1
"org.apache.lucene.store.ChecksumIndexInput.ChecksumIndexInput(IndexInput)",1,1,1
"org.apache.lucene.store.ChecksumIndexInput.close()",1,1,1
"org.apache.lucene.store.ChecksumIndexInput.getChecksum()",1,1,1
"org.apache.lucene.store.ChecksumIndexInput.getFilePointer()",1,1,1
"org.apache.lucene.store.ChecksumIndexInput.length()",1,1,1
"org.apache.lucene.store.ChecksumIndexInput.readByte()",1,1,1
"org.apache.lucene.store.ChecksumIndexInput.readBytes(byte[],int,int)",1,1,1
"org.apache.lucene.store.ChecksumIndexInput.seek(long)",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.ChecksumIndexOutput(IndexOutput)",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.close()",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.finishCommit()",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.flush()",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.getChecksum()",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.getFilePointer()",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.length()",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.prepareCommit()",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.seek(long)",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.writeByte(byte)",1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.writeBytes(byte[],int,int)",1,1,1
"org.apache.lucene.store.DataInput.clone()",1,1,2
"org.apache.lucene.store.DataInput.readBytes(byte[],int,int,boolean)",1,1,1
"org.apache.lucene.store.DataInput.readChars(char[],int,int)",1,4,4
"org.apache.lucene.store.DataInput.readInt()",1,1,1
"org.apache.lucene.store.DataInput.readLong()",1,1,1
"org.apache.lucene.store.DataInput.readModifiedUTF8String()",1,1,1
"org.apache.lucene.store.DataInput.readShort()",1,1,1
"org.apache.lucene.store.DataInput.readString()",2,2,2
"org.apache.lucene.store.DataInput.readStringStringMap()",1,2,2
"org.apache.lucene.store.DataInput.readVInt()",6,1,6
"org.apache.lucene.store.DataInput.readVLong()",10,1,10
"org.apache.lucene.store.DataInput.setModifiedUTF8StringsMode()",1,1,1
"org.apache.lucene.store.DataOutput.copyBytes(DataInput,long)",1,2,4
"org.apache.lucene.store.DataOutput.writeBytes(byte[],int)",1,1,1
"org.apache.lucene.store.DataOutput.writeChars(String,int,int)",1,4,7
"org.apache.lucene.store.DataOutput.writeChars(char[],int,int)",1,4,7
"org.apache.lucene.store.DataOutput.writeInt(int)",1,1,1
"org.apache.lucene.store.DataOutput.writeLong(long)",1,1,1
"org.apache.lucene.store.DataOutput.writeShort(short)",1,1,1
"org.apache.lucene.store.DataOutput.writeString(String)",1,1,1
"org.apache.lucene.store.DataOutput.writeStringStringMap(Map<String, String>)",1,3,3
"org.apache.lucene.store.DataOutput.writeVInt(int)",1,2,2
"org.apache.lucene.store.DataOutput.writeVLong(long)",1,2,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxDirectory(File,LockFactory,int)",1,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.DirectIOLinuxIndexInput(DirectIOLinuxIndexInput)",1,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.DirectIOLinuxIndexInput(File,int)",1,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.clone()",1,1,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.close()",1,3,4
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.getFilePointer()",1,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.length()",1,1,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.readByte()",1,2,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.readBytes(byte[],int,int)",3,3,3
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.refill()",2,2,3
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.seek(long)",1,2,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.DirectIOLinuxIndexOutput(File,int)",1,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.close()",1,2,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.dump()",1,1,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.flush()",1,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.getFilePointer()",1,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.length()",1,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.seek(long)",1,3,3
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.writeByte(byte)",1,2,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.writeBytes(byte[],int,int)",3,3,3
"org.apache.lucene.store.DirectIOLinuxDirectory.createOutput(String)",1,1,2
"org.apache.lucene.store.DirectIOLinuxDirectory.openInput(String,int)",1,1,2
"org.apache.lucene.store.Directory.clearLock(String)",1,2,2
"org.apache.lucene.store.Directory.copy(Directory,Directory,boolean)",1,4,4
"org.apache.lucene.store.Directory.copy(Directory,String,String)",1,1,2
"org.apache.lucene.store.Directory.ensureOpen()",2,1,2
"org.apache.lucene.store.Directory.getLockFactory()",1,1,1
"org.apache.lucene.store.Directory.getLockID()",1,1,1
"org.apache.lucene.store.Directory.makeLock(String)",1,1,1
"org.apache.lucene.store.Directory.openInput(String,int)",1,1,1
"org.apache.lucene.store.Directory.setLockFactory(LockFactory)",1,1,1
"org.apache.lucene.store.Directory.sync(Collection<String>)",1,2,2
"org.apache.lucene.store.Directory.sync(String)",1,1,1
"org.apache.lucene.store.Directory.toString()",1,1,1
"org.apache.lucene.store.FSDirectory.FSDirectory(File,LockFactory)",2,2,4
"org.apache.lucene.store.FSDirectory.FSIndexOutput.FSIndexOutput(FSDirectory,String)",1,1,1
"org.apache.lucene.store.FSDirectory.FSIndexOutput.close()",1,3,4
"org.apache.lucene.store.FSDirectory.FSIndexOutput.flushBuffer(byte[],int,int)",1,1,1
"org.apache.lucene.store.FSDirectory.FSIndexOutput.length()",1,1,1
"org.apache.lucene.store.FSDirectory.FSIndexOutput.seek(long)",1,1,1
"org.apache.lucene.store.FSDirectory.FSIndexOutput.setLength(long)",1,1,1
"org.apache.lucene.store.FSDirectory.close()",1,1,1
"org.apache.lucene.store.FSDirectory.createOutput(String)",1,1,1
"org.apache.lucene.store.FSDirectory.deleteFile(String)",2,1,2
"org.apache.lucene.store.FSDirectory.ensureCanWrite(String)",4,3,5
"org.apache.lucene.store.FSDirectory.fileExists(String)",1,1,1
"org.apache.lucene.store.FSDirectory.fileLength(String)",2,2,3
"org.apache.lucene.store.FSDirectory.fileModified(File,String)",1,1,1
"org.apache.lucene.store.FSDirectory.fileModified(String)",1,1,1
"org.apache.lucene.store.FSDirectory.fsync(String)",3,4,8
"org.apache.lucene.store.FSDirectory.getCanonicalPath(File)",1,1,1
"org.apache.lucene.store.FSDirectory.getDirectory()",1,1,1
"org.apache.lucene.store.FSDirectory.getFile()",1,1,1
"org.apache.lucene.store.FSDirectory.getLockID()",1,3,3
"org.apache.lucene.store.FSDirectory.getReadChunkSize()",1,1,1
"org.apache.lucene.store.FSDirectory.listAll()",1,1,1
"org.apache.lucene.store.FSDirectory.listAll(File)",4,2,4
"org.apache.lucene.store.FSDirectory.onIndexOutputClosed(FSIndexOutput)",1,1,1
"org.apache.lucene.store.FSDirectory.open(File)",1,1,1
"org.apache.lucene.store.FSDirectory.open(File,LockFactory)",3,1,7
"org.apache.lucene.store.FSDirectory.openInput(String)",1,1,1
"org.apache.lucene.store.FSDirectory.setLockFactory(LockFactory)",1,4,4
"org.apache.lucene.store.FSDirectory.setReadChunkSize(int)",2,1,3
"org.apache.lucene.store.FSDirectory.sync(Collection<String>)",1,2,2
"org.apache.lucene.store.FSDirectory.sync(String)",1,1,1
"org.apache.lucene.store.FSDirectory.toString()",1,1,1
"org.apache.lucene.store.FSDirectory.touchFile(String)",1,1,1
"org.apache.lucene.store.FSLockFactory.getLockDir()",1,1,1
"org.apache.lucene.store.FSLockFactory.setLockDir(File)",2,1,2
"org.apache.lucene.store.FileSwitchDirectory.FileSwitchDirectory(Set<String>,Directory,Directory,boolean)",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.close()",1,2,2
"org.apache.lucene.store.FileSwitchDirectory.createOutput(String)",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.deleteFile(String)",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.fileExists(String)",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.fileLength(String)",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.fileModified(String)",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.getDirectory(String)",2,1,2
"org.apache.lucene.store.FileSwitchDirectory.getExtension(String)",2,1,2
"org.apache.lucene.store.FileSwitchDirectory.getPrimaryDir()",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.getSecondaryDir()",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.listAll()",4,5,9
"org.apache.lucene.store.FileSwitchDirectory.openInput(String)",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.sync(Collection<String>)",1,3,3
"org.apache.lucene.store.FileSwitchDirectory.sync(String)",1,1,1
"org.apache.lucene.store.FileSwitchDirectory.touchFile(String)",1,1,1
"org.apache.lucene.store.IndexInput.IndexInput()",1,1,1
"org.apache.lucene.store.IndexInput.IndexInput(String)",2,1,2
"org.apache.lucene.store.IndexInput.copyBytes(IndexOutput,long)",1,2,3
"org.apache.lucene.store.IndexInput.skipChars(int)",1,4,4
"org.apache.lucene.store.IndexInput.toString()",1,1,1
"org.apache.lucene.store.IndexOutput.setLength(long)",1,1,1
"org.apache.lucene.store.InputStreamDataInput.InputStreamDataInput(InputStream)",1,1,1
"org.apache.lucene.store.InputStreamDataInput.close()",1,1,1
"org.apache.lucene.store.InputStreamDataInput.readByte()",2,1,2
"org.apache.lucene.store.InputStreamDataInput.readBytes(byte[],int,int)",3,2,3
"org.apache.lucene.store.Lock.With.With(Lock,long)",1,1,1
"org.apache.lucene.store.Lock.With.run()",1,2,2
"org.apache.lucene.store.Lock.obtain(long)",4,4,9
"org.apache.lucene.store.LockFactory.getLockPrefix()",1,1,1
"org.apache.lucene.store.LockFactory.setLockPrefix(String)",1,1,1
"org.apache.lucene.store.LockObtainFailedException.LockObtainFailedException(String)",1,1,1
"org.apache.lucene.store.LockReleaseFailedException.LockReleaseFailedException(String)",1,1,1
"org.apache.lucene.store.LockStressTest.main(String[])",1,7,12
"org.apache.lucene.store.LockVerifyServer.getTime(long)",1,1,1
"org.apache.lucene.store.LockVerifyServer.main(String[])",4,8,8
"org.apache.lucene.store.MMapDirectory.MMapDirectory(File)",1,1,1
"org.apache.lucene.store.MMapDirectory.MMapDirectory(File,LockFactory)",1,1,1
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.MMapIndexInput(String,RandomAccessFile,int)",3,3,6
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.clone()",2,2,4
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.close()",2,3,5
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.equals(Object)",1,1,1
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.getFilePointer()",1,1,2
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.hashCode()",1,1,1
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.length()",1,1,1
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readByte()",3,3,5
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readBytes(byte[],int,int)",3,3,5
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readInt()",1,2,3
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readLong()",1,2,3
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readShort()",1,2,3
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.seek(long)",3,1,6
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.unsetBuffers()",1,1,1
"org.apache.lucene.store.MMapDirectory.cleanMapping(ByteBuffer)",2,4,4
"org.apache.lucene.store.MMapDirectory.getMaxChunkSize()",1,1,1
"org.apache.lucene.store.MMapDirectory.getUseUnmap()",1,1,1
"org.apache.lucene.store.MMapDirectory.openInput(String,int)",1,1,1
"org.apache.lucene.store.MMapDirectory.setMaxChunkSize(int)",2,1,3
"org.apache.lucene.store.MMapDirectory.setUseUnmap(boolean)",2,1,3
"org.apache.lucene.store.MockDirectoryWrapper.Failure.clearDoFail()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.Failure.eval(MockDirectoryWrapper)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.Failure.reset()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.Failure.setDoFail()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.MockDirectoryWrapper(Random,Directory)",1,1,2
"org.apache.lucene.store.MockDirectoryWrapper.addFileHandle(Closeable,String,boolean)",1,2,3
"org.apache.lucene.store.MockDirectoryWrapper.clearCrash()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.clearLock(String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.close()",3,8,10
"org.apache.lucene.store.MockDirectoryWrapper.copy(Directory,String,String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.crash()",1,7,8
"org.apache.lucene.store.MockDirectoryWrapper.createOutput(String)",8,14,18
"org.apache.lucene.store.MockDirectoryWrapper.deleteFile(String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.deleteFile(String,boolean)",4,4,7
"org.apache.lucene.store.MockDirectoryWrapper.failOn(Failure)",1,1,2
"org.apache.lucene.store.MockDirectoryWrapper.fileExists(String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.fileLength(String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.fileModified(String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.fillOpenTrace(IOException,String,boolean)",4,8,8
"org.apache.lucene.store.MockDirectoryWrapper.getCheckIndexOnClose()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getInputCloneCount()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getLockFactory()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getLockID()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getMaxSizeInBytes()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getMaxUsedSizeInBytes()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getNoDeleteOpenFile()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getOpenDeletedFiles()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getRandomIOExceptionRate()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.getRecomputedActualSizeInBytes()",2,2,3
"org.apache.lucene.store.MockDirectoryWrapper.getRecomputedSizeInBytes()",2,3,3
"org.apache.lucene.store.MockDirectoryWrapper.indexPossiblyExists(Directory)",3,2,4
"org.apache.lucene.store.MockDirectoryWrapper.init()",1,1,4
"org.apache.lucene.store.MockDirectoryWrapper.isOpen()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.listAll()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.makeLock(String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.maybeThrowDeterministicException()",1,3,3
"org.apache.lucene.store.MockDirectoryWrapper.maybeThrowIOException()",3,4,4
"org.apache.lucene.store.MockDirectoryWrapper.maybeYield()",1,2,2
"org.apache.lucene.store.MockDirectoryWrapper.openInput(String)",3,4,5
"org.apache.lucene.store.MockDirectoryWrapper.removeIndexInput(IndexInput,String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.removeIndexOutput(IndexOutput,String)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.removeOpenFile(Closeable,String)",1,3,3
"org.apache.lucene.store.MockDirectoryWrapper.resetMaxUsedSizeInBytes()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setAssertNoUnrefencedFilesOnClose(boolean)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setCheckIndexOnClose(boolean)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setFailOnCreateOutput(boolean)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setFailOnOpenInput(boolean)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setLockFactory(LockFactory)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setMaxSizeInBytes(long)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setNoDeleteOpenFile(boolean)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setPreventDoubleWrite(boolean)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setRandomIOExceptionRate(double)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setThrottling(Throttling)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.setTrackDiskUsage(boolean)",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.sizeInBytes()",2,3,3
"org.apache.lucene.store.MockDirectoryWrapper.sync(Collection<String>)",2,1,2
"org.apache.lucene.store.MockDirectoryWrapper.sync(String)",2,1,2
"org.apache.lucene.store.MockDirectoryWrapper.toString()",1,1,1
"org.apache.lucene.store.MockDirectoryWrapper.touchFile(String)",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.MockIndexInputWrapper(MockDirectoryWrapper,String,IndexInput)",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.clone()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.close()",1,2,2
"org.apache.lucene.store.MockIndexInputWrapper.copyBytes(IndexOutput,long)",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.ensureOpen()",2,1,2
"org.apache.lucene.store.MockIndexInputWrapper.getFilePointer()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.length()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readByte()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readBytes(byte[],int,int)",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readBytes(byte[],int,int,boolean)",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readChars(char[],int,int)",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readInt()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readLong()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readString()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readStringStringMap()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readVInt()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.readVLong()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.seek(long)",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.setModifiedUTF8StringsMode()",1,1,1
"org.apache.lucene.store.MockIndexInputWrapper.skipChars(int)",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.MockIndexOutputWrapper(MockDirectoryWrapper,IndexOutput,String)",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.close()",1,2,3
"org.apache.lucene.store.MockIndexOutputWrapper.copyBytes(DataInput,long)",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.flush()",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.getFilePointer()",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.length()",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.seek(long)",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.setLength(long)",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.writeByte(byte)",1,1,1
"org.apache.lucene.store.MockIndexOutputWrapper.writeBytes(byte[],int,int)",3,8,13
"org.apache.lucene.store.MockLockFactoryWrapper.MockLock.MockLock(Lock,String)",1,1,1
"org.apache.lucene.store.MockLockFactoryWrapper.MockLock.isLocked()",1,1,1
"org.apache.lucene.store.MockLockFactoryWrapper.MockLock.obtain()",2,2,2
"org.apache.lucene.store.MockLockFactoryWrapper.MockLock.release()",1,1,1
"org.apache.lucene.store.MockLockFactoryWrapper.MockLockFactoryWrapper(MockDirectoryWrapper,LockFactory)",1,1,1
"org.apache.lucene.store.MockLockFactoryWrapper.clearLock(String)",1,1,1
"org.apache.lucene.store.MockLockFactoryWrapper.getLockPrefix()",1,1,1
"org.apache.lucene.store.MockLockFactoryWrapper.makeLock(String)",1,1,1
"org.apache.lucene.store.MockLockFactoryWrapper.setLockPrefix(String)",1,1,1
"org.apache.lucene.store.MockLockFactoryWrapper.toString()",1,1,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSDirectory(File)",1,1,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSDirectory(File,LockFactory)",1,1,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput.NIOFSIndexInput(File,int,int)",1,1,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput.close()",1,2,3
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput.newBuffer(byte[])",1,1,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput.readInternal(byte[],int,int)",3,7,10
"org.apache.lucene.store.NIOFSDirectory.openInput(String,int)",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.NRTCachingDirectory(Directory,double,double)",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.clearLock(String)",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.close()",1,2,2
"org.apache.lucene.store.NRTCachingDirectory.createOutput(String)",2,4,6
"org.apache.lucene.store.NRTCachingDirectory.deleteFile(String)",1,3,3
"org.apache.lucene.store.NRTCachingDirectory.doCacheWrite(String)",1,3,4
"org.apache.lucene.store.NRTCachingDirectory.fileExists(String)",1,2,2
"org.apache.lucene.store.NRTCachingDirectory.fileLength(String)",2,2,2
"org.apache.lucene.store.NRTCachingDirectory.fileModified(String)",2,2,2
"org.apache.lucene.store.NRTCachingDirectory.getLockFactory()",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.getLockID()",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.getMergeScheduler()",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.listAll()",2,4,5
"org.apache.lucene.store.NRTCachingDirectory.listCachedFiles()",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.makeLock(String)",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.openInput(String)",2,4,4
"org.apache.lucene.store.NRTCachingDirectory.openInput(String,int)",2,2,2
"org.apache.lucene.store.NRTCachingDirectory.setLockFactory(LockFactory)",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.sizeInBytes()",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.sync(Collection<String>)",1,3,3
"org.apache.lucene.store.NRTCachingDirectory.toString()",1,1,1
"org.apache.lucene.store.NRTCachingDirectory.touchFile(String)",1,2,2
"org.apache.lucene.store.NRTCachingDirectory.unCache(String)",3,2,4
"org.apache.lucene.store.NativeFSLock.NativeFSLock(File,String)",1,1,1
"org.apache.lucene.store.NativeFSLock.isLocked()",3,2,5
"org.apache.lucene.store.NativeFSLock.lockExists()",1,1,1
"org.apache.lucene.store.NativeFSLock.obtain()",6,11,14
"org.apache.lucene.store.NativeFSLock.release()",3,3,4
"org.apache.lucene.store.NativeFSLock.toString()",1,1,1
"org.apache.lucene.store.NativeFSLockFactory.NativeFSLockFactory()",1,1,1
"org.apache.lucene.store.NativeFSLockFactory.NativeFSLockFactory(File)",1,1,1
"org.apache.lucene.store.NativeFSLockFactory.NativeFSLockFactory(String)",1,1,1
"org.apache.lucene.store.NativeFSLockFactory.clearLock(String)",1,2,3
"org.apache.lucene.store.NativeFSLockFactory.makeLock(String)",1,1,2
"org.apache.lucene.store.NativePosixUtil.advise(FileDescriptor,long,long,int)",2,1,2
"org.apache.lucene.store.NativePosixUtil.madvise(ByteBuffer,int)",1,1,1
"org.apache.lucene.store.NativePosixUtil.open_direct(String,boolean)",1,1,1
"org.apache.lucene.store.NativePosixUtil.posix_fadvise(FileDescriptor,long,long,int)",1,1,1
"org.apache.lucene.store.NativePosixUtil.posix_madvise(ByteBuffer,int)",1,1,1
"org.apache.lucene.store.NativePosixUtil.pread(FileDescriptor,long,ByteBuffer)",1,1,1
"org.apache.lucene.store.NoLock.isLocked()",1,1,1
"org.apache.lucene.store.NoLock.obtain()",1,1,1
"org.apache.lucene.store.NoLock.release()",1,1,1
"org.apache.lucene.store.NoLock.toString()",1,1,1
"org.apache.lucene.store.NoLockFactory.NoLockFactory()",1,1,1
"org.apache.lucene.store.NoLockFactory.clearLock(String)",1,1,1
"org.apache.lucene.store.NoLockFactory.getNoLockFactory()",1,1,1
"org.apache.lucene.store.NoLockFactory.makeLock(String)",1,1,1
"org.apache.lucene.store.NoSuchDirectoryException.NoSuchDirectoryException(String)",1,1,1
"org.apache.lucene.store.OutputStreamDataOutput.OutputStreamDataOutput(OutputStream)",1,1,1
"org.apache.lucene.store.OutputStreamDataOutput.close()",1,1,1
"org.apache.lucene.store.OutputStreamDataOutput.writeByte(byte)",1,1,1
"org.apache.lucene.store.OutputStreamDataOutput.writeBytes(byte[],int,int)",1,1,1
"org.apache.lucene.store.RAMDirectory.RAMDirectory()",1,1,2
"org.apache.lucene.store.RAMDirectory.RAMDirectory(Directory)",1,1,1
"org.apache.lucene.store.RAMDirectory.RAMDirectory(Directory,boolean)",1,4,4
"org.apache.lucene.store.RAMDirectory.close()",1,1,1
"org.apache.lucene.store.RAMDirectory.createOutput(String)",1,2,2
"org.apache.lucene.store.RAMDirectory.deleteFile(String)",2,2,2
"org.apache.lucene.store.RAMDirectory.fileExists(String)",1,1,1
"org.apache.lucene.store.RAMDirectory.fileLength(String)",2,1,2
"org.apache.lucene.store.RAMDirectory.fileModified(String)",2,1,2
"org.apache.lucene.store.RAMDirectory.listAll()",1,2,2
"org.apache.lucene.store.RAMDirectory.newRAMFile()",1,1,1
"org.apache.lucene.store.RAMDirectory.openInput(String)",2,1,2
"org.apache.lucene.store.RAMDirectory.sizeInBytes()",1,1,1
"org.apache.lucene.store.RAMDirectory.touchFile(String)",3,2,4
"org.apache.lucene.store.RAMFile.RAMFile()",1,1,1
"org.apache.lucene.store.RAMFile.RAMFile(RAMDirectory)",1,1,1
"org.apache.lucene.store.RAMFile.addBuffer(int)",1,2,2
"org.apache.lucene.store.RAMFile.getBuffer(int)",1,1,1
"org.apache.lucene.store.RAMFile.getLastModified()",1,1,1
"org.apache.lucene.store.RAMFile.getLength()",1,1,1
"org.apache.lucene.store.RAMFile.getSizeInBytes()",1,1,1
"org.apache.lucene.store.RAMFile.newBuffer(int)",1,1,1
"org.apache.lucene.store.RAMFile.numBuffers()",1,1,1
"org.apache.lucene.store.RAMFile.setLastModified(long)",1,1,1
"org.apache.lucene.store.RAMFile.setLength(long)",1,1,1
"org.apache.lucene.store.RAMInputStream.RAMInputStream(RAMFile)",1,1,1
"org.apache.lucene.store.RAMInputStream.RAMInputStream(String,RAMFile)",2,1,2
"org.apache.lucene.store.RAMInputStream.close()",1,1,1
"org.apache.lucene.store.RAMInputStream.copyBytes(IndexOutput,long)",1,3,4
"org.apache.lucene.store.RAMInputStream.getFilePointer()",1,1,2
"org.apache.lucene.store.RAMInputStream.length()",1,1,1
"org.apache.lucene.store.RAMInputStream.readByte()",1,2,2
"org.apache.lucene.store.RAMInputStream.readBytes(byte[],int,int)",1,3,4
"org.apache.lucene.store.RAMInputStream.seek(long)",1,2,4
"org.apache.lucene.store.RAMInputStream.switchCurrentBuffer(boolean)",3,2,4
"org.apache.lucene.store.RAMOutputStream.RAMOutputStream()",1,1,1
"org.apache.lucene.store.RAMOutputStream.RAMOutputStream(RAMFile)",1,1,1
"org.apache.lucene.store.RAMOutputStream.close()",1,1,1
"org.apache.lucene.store.RAMOutputStream.copyBytes(DataInput,long)",1,3,4
"org.apache.lucene.store.RAMOutputStream.flush()",1,1,1
"org.apache.lucene.store.RAMOutputStream.getFilePointer()",1,1,2
"org.apache.lucene.store.RAMOutputStream.length()",1,1,1
"org.apache.lucene.store.RAMOutputStream.reset()",1,1,1
"org.apache.lucene.store.RAMOutputStream.seek(long)",1,2,3
"org.apache.lucene.store.RAMOutputStream.setFileLength()",1,2,2
"org.apache.lucene.store.RAMOutputStream.sizeInBytes()",1,1,1
"org.apache.lucene.store.RAMOutputStream.switchCurrentBuffer()",1,2,2
"org.apache.lucene.store.RAMOutputStream.writeByte(byte)",1,2,2
"org.apache.lucene.store.RAMOutputStream.writeBytes(byte[],int,int)",1,3,4
"org.apache.lucene.store.RAMOutputStream.writeTo(IndexOutput)",1,2,3
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSDirectory(File)",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSDirectory(File,LockFactory)",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.Descriptor.Descriptor(File,String)",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.Descriptor.close()",1,2,2
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.SimpleFSIndexInput(File,int,int)",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.SimpleFSIndexInput(String,File,int,int)",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.clone()",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.close()",1,2,2
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.copyBytes(IndexOutput,long)",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.isFDValid()",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.length()",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.readInternal(byte[],int,int)",3,5,7
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.seekInternal(long)",1,1,1
"org.apache.lucene.store.SimpleFSDirectory.openInput(String,int)",1,1,1
"org.apache.lucene.store.SimpleFSLock.SimpleFSLock(File,String)",1,1,1
"org.apache.lucene.store.SimpleFSLock.isLocked()",1,1,1
"org.apache.lucene.store.SimpleFSLock.obtain()",4,4,4
"org.apache.lucene.store.SimpleFSLock.release()",2,2,3
"org.apache.lucene.store.SimpleFSLock.toString()",1,1,1
"org.apache.lucene.store.SimpleFSLockFactory.SimpleFSLockFactory()",1,1,1
"org.apache.lucene.store.SimpleFSLockFactory.SimpleFSLockFactory(File)",1,1,1
"org.apache.lucene.store.SimpleFSLockFactory.SimpleFSLockFactory(String)",1,1,1
"org.apache.lucene.store.SimpleFSLockFactory.clearLock(String)",3,3,5
"org.apache.lucene.store.SimpleFSLockFactory.makeLock(String)",1,1,2
"org.apache.lucene.store.SingleInstanceLock.SingleInstanceLock(HashSet<String>,String)",1,1,1
"org.apache.lucene.store.SingleInstanceLock.isLocked()",1,1,1
"org.apache.lucene.store.SingleInstanceLock.obtain()",1,1,1
"org.apache.lucene.store.SingleInstanceLock.release()",1,1,1
"org.apache.lucene.store.SingleInstanceLock.toString()",1,1,1
"org.apache.lucene.store.SingleInstanceLockFactory.clearLock(String)",1,2,2
"org.apache.lucene.store.SingleInstanceLockFactory.makeLock(String)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.MockFSDirectory(File,Random)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.close()",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.createOutput(String)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.deleteFile(String)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.fileExists(String)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.fileLength(String)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.fileModified(String)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.listAll()",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.openInput(String)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.openInput(String,int)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.touchFile(String)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MockFSDirectory.tweakBufferSizes()",1,2,2
"org.apache.lucene.store.TestBufferedIndexInput.MyBufferedIndexInput.MyBufferedIndexInput()",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MyBufferedIndexInput.MyBufferedIndexInput(long)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MyBufferedIndexInput.close()",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MyBufferedIndexInput.length()",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.MyBufferedIndexInput.readInternal(byte[],int,int)",1,2,2
"org.apache.lucene.store.TestBufferedIndexInput.MyBufferedIndexInput.seekInternal(long)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.byten(long)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.checkReadBytes(IndexInput,int,int)",2,2,4
"org.apache.lucene.store.TestBufferedIndexInput.runReadBytes(IndexInput,int,Random)",1,7,7
"org.apache.lucene.store.TestBufferedIndexInput.runReadBytesAndClose(IndexInput,int,Random)",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.testEOF()",1,1,4
"org.apache.lucene.store.TestBufferedIndexInput.testReadByte()",1,2,2
"org.apache.lucene.store.TestBufferedIndexInput.testReadBytes()",1,1,1
"org.apache.lucene.store.TestBufferedIndexInput.testSetBufferSize()",1,2,2
"org.apache.lucene.store.TestBufferedIndexInput.writeBytes(File,long)",1,3,3
"org.apache.lucene.store.TestByteArrayDataInput.testBasic()",1,1,1
"org.apache.lucene.store.TestCopyBytes.CopyThread.CopyThread(IndexInput,IndexOutput)",1,1,1
"org.apache.lucene.store.TestCopyBytes.CopyThread.run()",1,1,2
"org.apache.lucene.store.TestCopyBytes.testCopyBytes()",1,10,10
"org.apache.lucene.store.TestCopyBytes.testCopyBytesWithThreads()",1,5,5
"org.apache.lucene.store.TestCopyBytes.value(int)",1,1,1
"org.apache.lucene.store.TestDirectory.checkDirectoryFilter(Directory)",1,1,1
"org.apache.lucene.store.TestDirectory.testCopySubdir()",1,1,1
"org.apache.lucene.store.TestDirectory.testDetectClose()",1,2,3
"org.apache.lucene.store.TestDirectory.testDirectInstantiation()",4,6,8
"org.apache.lucene.store.TestDirectory.testDontCreate()",1,1,1
"org.apache.lucene.store.TestDirectory.testFSDirectoryFilter()",1,1,1
"org.apache.lucene.store.TestDirectory.testNotDirectory()",1,1,2
"org.apache.lucene.store.TestDirectory.testRAMDirectoryFilter()",1,1,1
"org.apache.lucene.store.TestFileSwitchDirectory.newFSSwitchDirectory(Set<String>)",1,1,1
"org.apache.lucene.store.TestFileSwitchDirectory.testBasic()",1,4,4
"org.apache.lucene.store.TestFileSwitchDirectory.testDirectoryFilter()",1,1,1
"org.apache.lucene.store.TestFileSwitchDirectory.testNoDir()",1,1,2
"org.apache.lucene.store.TestHugeRamFile.DenseRAMFile.newBuffer(int)",2,3,3
"org.apache.lucene.store.TestHugeRamFile.testHugeFile()",1,5,8
"org.apache.lucene.store.TestLock.LockMock.isLocked()",1,1,1
"org.apache.lucene.store.TestLock.LockMock.obtain()",1,1,1
"org.apache.lucene.store.TestLock.LockMock.release()",1,1,1
"org.apache.lucene.store.TestLock.testObtain()",1,2,2
"org.apache.lucene.store.TestLockFactory.MockLockFactory.MockLock.isLocked()",1,1,1
"org.apache.lucene.store.TestLockFactory.MockLockFactory.MockLock.obtain()",1,1,1
"org.apache.lucene.store.TestLockFactory.MockLockFactory.MockLock.release()",1,1,1
"org.apache.lucene.store.TestLockFactory.MockLockFactory.clearLock(String)",1,1,1
"org.apache.lucene.store.TestLockFactory.MockLockFactory.makeLock(String)",1,1,1
"org.apache.lucene.store.TestLockFactory.MockLockFactory.setLockPrefix(String)",1,1,1
"org.apache.lucene.store.TestLockFactory.SearcherThread.SearcherThread(int,Directory)",1,1,1
"org.apache.lucene.store.TestLockFactory.SearcherThread.run()",2,5,5
"org.apache.lucene.store.TestLockFactory.WriterThread.WriterThread(int,Directory)",1,1,1
"org.apache.lucene.store.TestLockFactory.WriterThread.run()",3,8,8
"org.apache.lucene.store.TestLockFactory._testStressLocks(LockFactory,File)",1,3,3
"org.apache.lucene.store.TestLockFactory.addDoc(IndexWriter)",1,1,1
"org.apache.lucene.store.TestLockFactory.testCustomLockFactory()",1,3,3
"org.apache.lucene.store.TestLockFactory.testDefaultFSLockFactoryPrefix()",1,1,1
"org.apache.lucene.store.TestLockFactory.testDefaultRAMDirectory()",1,2,3
"org.apache.lucene.store.TestLockFactory.testNativeFSLockFactory()",1,1,1
"org.apache.lucene.store.TestLockFactory.testNativeFSLockFactoryLockExists()",1,2,2
"org.apache.lucene.store.TestLockFactory.testNativeFSLockFactoryPrefix()",1,1,1
"org.apache.lucene.store.TestLockFactory.testNativeFSLockReleaseByOtherLock()",1,1,2
"org.apache.lucene.store.TestLockFactory.testRAMDirectoryNoLocking()",1,3,3
"org.apache.lucene.store.TestLockFactory.testSimpleFSLockFactory()",1,1,1
"org.apache.lucene.store.TestLockFactory.testStressLocks()",1,1,1
"org.apache.lucene.store.TestLockFactory.testStressLocksNativeFSLockFactory()",1,1,1
"org.apache.lucene.store.TestMultiMMap.assertChunking(Random,int)",1,4,4
"org.apache.lucene.store.TestMultiMMap.setUp()",1,1,1
"org.apache.lucene.store.TestMultiMMap.testCloneSafety()",1,1,4
"org.apache.lucene.store.TestMultiMMap.testRandomChunkSizes()",1,2,2
"org.apache.lucene.store.TestMultiMMap.testSeekEnd()",1,2,2
"org.apache.lucene.store.TestMultiMMap.testSeekZero()",1,2,2
"org.apache.lucene.store.TestMultiMMap.testSeeking()",1,4,4
"org.apache.lucene.store.TestNRTCachingDirectory.createSequenceFile(Directory,String,byte,int)",1,2,2
"org.apache.lucene.store.TestNRTCachingDirectory.testDeleteFile()",1,1,1
"org.apache.lucene.store.TestNRTCachingDirectory.testDirectoryFilter()",1,1,1
"org.apache.lucene.store.TestNRTCachingDirectory.testNRTAndCommit()",1,9,10
"org.apache.lucene.store.TestNRTCachingDirectory.testNoDir()",1,1,2
"org.apache.lucene.store.TestNRTCachingDirectory.verifyCompiles()",1,1,1
"org.apache.lucene.store.TestRAMDirectory.rmDir(File)",1,2,2
"org.apache.lucene.store.TestRAMDirectory.setUp()",1,2,2
"org.apache.lucene.store.TestRAMDirectory.tearDown()",1,3,3
"org.apache.lucene.store.TestRAMDirectory.testIllegalEOF()",1,1,1
"org.apache.lucene.store.TestRAMDirectory.testRAMDirectory()",1,2,2
"org.apache.lucene.store.TestRAMDirectory.testRAMDirectorySize()",2,5,6
"org.apache.lucene.store.TestRAMDirectory.testSeekToEOFThenBack()",1,1,1
"org.apache.lucene.store.TestRAMDirectory.testSerializable()",1,1,1
"org.apache.lucene.store.TestWindowsMMap.randomField()",1,2,2
"org.apache.lucene.store.TestWindowsMMap.randomToken()",1,2,2
"org.apache.lucene.store.TestWindowsMMap.rmDir(File)",2,2,3
"org.apache.lucene.store.TestWindowsMMap.setUp()",1,1,1
"org.apache.lucene.store.TestWindowsMMap.testMmapIndex()",1,2,2
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.CheckedLock(Lock)",1,1,1
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.isLocked()",1,1,1
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.obtain()",1,1,1
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.obtain(long)",1,2,2
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.release()",1,2,2
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.verify(byte)",2,1,3
"org.apache.lucene.store.VerifyingLockFactory.VerifyingLockFactory(byte,LockFactory,String,int)",1,1,1
"org.apache.lucene.store.VerifyingLockFactory.clearLock(String)",1,1,1
"org.apache.lucene.store.VerifyingLockFactory.makeLock(String)",1,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsDirectory(File)",1,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsDirectory(File,LockFactory)",1,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.WindowsIndexInput(File,int)",1,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.clone()",1,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.close()",1,2,3
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.length()",1,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.readInternal(byte[],int,int)",2,2,3
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.seekInternal(long)",1,1,1
"org.apache.lucene.store.WindowsDirectory.close(long)",1,1,1
"org.apache.lucene.store.WindowsDirectory.length(long)",1,1,1
"org.apache.lucene.store.WindowsDirectory.open(String)",1,1,1
"org.apache.lucene.store.WindowsDirectory.openInput(String,int)",1,1,1
"org.apache.lucene.store.WindowsDirectory.read(long,byte[],int,int,long)",1,1,1
"org.apache.lucene.store._TestHelper.isSimpleFSIndexInput(IndexInput)",1,1,1
"org.apache.lucene.store._TestHelper.isSimpleFSIndexInputClone(IndexInput)",2,1,2
"org.apache.lucene.store._TestHelper.isSimpleFSIndexInputOpen(IndexInput)",2,2,2
"org.apache.lucene.store.instantiated.FieldSetting.FieldSetting()",1,1,1
"org.apache.lucene.store.instantiated.FieldSetting.FieldSetting(String)",1,1,1
"org.apache.lucene.store.instantiated.FieldSetting.equals(Object)",3,2,4
"org.apache.lucene.store.instantiated.FieldSetting.hashCode()",1,1,1
"org.apache.lucene.store.instantiated.FieldSettings.FieldSettings()",1,1,1
"org.apache.lucene.store.instantiated.FieldSettings.get(String)",1,1,1
"org.apache.lucene.store.instantiated.FieldSettings.get(String,boolean)",1,2,3
"org.apache.lucene.store.instantiated.FieldSettings.merge(FieldSetting)",1,3,10
"org.apache.lucene.store.instantiated.FieldSettings.values()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedAllTermDocs.InstantiatedAllTermDocs(InstantiatedIndexReader)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedAllTermDocs.isDeleted(int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.InstantiatedDocument()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.InstantiatedDocument(Document)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.getDocument()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.getDocumentNumber()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.getVectorSpace()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.setDocumentNumber(Integer)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.setVectorSpace(Map<String, List<InstantiatedTermDocumentInformation>>)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.toString()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.InstantiatedIndex()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.InstantiatedIndex(IndexReader)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.InstantiatedIndex(IndexReader,Set<String>)",3,34,35
"org.apache.lucene.store.instantiated.InstantiatedIndex.close()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.findTerm(String,String)",2,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndex.findTerm(Term)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getDeletedDocuments()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getDocumentsByNumber()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getFieldInfos()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getFieldSettings()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getNormsByFieldNameAndDocumentNumber()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getOrderedTerms()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getTermsByFieldAndText()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getVersion()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.indexReaderFactory()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.indexWriterFactory(Analyzer,boolean)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.initialize()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.readObject(ObjectInputStream)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.rebuildFieldInfos()",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndex.setDeletedDocuments(BitVector)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.setDocumentsByNumber(InstantiatedDocument[])",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.setNormsByFieldNameAndDocumentNumber(Map<String, byte[]>)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.setOrderedTerms(InstantiatedTerm[])",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.setVersion(long)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.InstantiatedIndexReader(InstantiatedIndex)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.NormUpdate.NormUpdate(int,byte)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.directory()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doClose()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doCommit(Map<String, String>)",1,7,8
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doDelete(int)",2,5,6
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doSetNorm(int,String,byte)",1,3,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doUndeleteAll()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.docFreq(Term)",2,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.document(int,FieldSelector)",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getFieldInfos()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getIndex()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getTermFreqVector(int,String)",2,2,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getTermFreqVector(int,String,TermVectorMapper)",1,4,4
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getTermFreqVector(int,TermVectorMapper)",1,3,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getTermFreqVectors(int)",2,2,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getVersion()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.hasDeletions()",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.isCurrent()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.isDeleted(int)",1,4,4
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.isOptimized()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.maxDoc()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.norms(String)",2,2,5
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.norms(String,byte[],int)",2,1,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.numDocs()",1,3,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.termDocs()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.termDocs(Term)",2,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.termPositions()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.terms()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.terms(Term)",2,2,3
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.FieldSetting.FieldSetting()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.FieldSetting.FieldSetting(String)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.InstantiatedIndexWriter(InstantiatedIndex)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.InstantiatedIndexWriter(InstantiatedIndex,Analyzer)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.InstantiatedIndexWriter(InstantiatedIndex,Analyzer,boolean)",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.abort()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.addDocument(Document)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.addDocument(Document,Analyzer)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.addDocument(InstantiatedDocument,Analyzer)",7,19,31
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.addIndexes(IndexReader[])",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.close()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.commit()",1,35,35
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.deleteDocuments(Term)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.deleteDocuments(Term[])",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.docCount()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getAnalyzer()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getInfoStream()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getMaxFieldLength()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getMergeFactor()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getSimilarity()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.setInfoStream(PrintStream)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.setMaxFieldLength(int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.setMergeFactor(int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.setSimilarity(Similarity)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.updateDocument(Term,Document)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.updateDocument(Term,Document,Analyzer)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.InstantiatedTerm(String,String)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.binarySearchAssociatedDocuments(int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.binarySearchAssociatedDocuments(int,int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.binarySearchAssociatedDocuments(int,int,int)",7,2,10
"org.apache.lucene.store.instantiated.InstantiatedTerm.field()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.getAssociatedDocument(int)",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedTerm.getAssociatedDocuments()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.getTerm()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.getTermIndex()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.seekCeilingDocumentInformationIndex(int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.seekCeilingDocumentInformationIndex(int,int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.seekCeilingDocumentInformationIndex(int,int,int)",2,1,3
"org.apache.lucene.store.instantiated.InstantiatedTerm.setAssociatedDocuments(InstantiatedTermDocumentInformation[])",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.setTermIndex(int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.text()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.toString()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.InstantiatedTermDocs(InstantiatedIndexReader)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.close()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.doc()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.freq()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.next()",4,4,4
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.read(int[],int[])",3,2,3
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.seek(Term)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.seek(TermEnum)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.skipTo(int)",5,5,7
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.InstantiatedTermDocumentInformation(InstantiatedTerm,InstantiatedDocument,int[],byte[][])",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getDocument()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getPayloads()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getTerm()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getTermOffsets()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getTermPositions()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.setDocument(InstantiatedDocument)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.setTerm(InstantiatedTerm)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.setTermOffsets(TermVectorOffsetInfo[])",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.setTermPositions(int[])",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.InstantiatedTermEnum(InstantiatedIndexReader)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.InstantiatedTermEnum(InstantiatedIndexReader,int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.close()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.docFreq()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.next()",2,2,2
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.term()",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.InstantiatedTermFreqVector(InstantiatedDocument,String)",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.getField()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.getTermDocumentInformations()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.getTermFrequencies()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.getTerms()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.indexOf(String)",2,1,3
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.indexesOf(String[],int,int)",1,2,2
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.size()",1,1,2
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.toString()",1,4,4
"org.apache.lucene.store.instantiated.InstantiatedTermPositionVector.InstantiatedTermPositionVector(InstantiatedDocument,String)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositionVector.getOffsets(int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositionVector.getTermPositions(int)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.InstantiatedTermPositions(InstantiatedIndexReader)",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.getPayload(byte[],int)",2,3,3
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.getPayloadLength()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.isPayloadAvailable()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.next()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.nextPosition()",1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.skipTo(int)",1,1,1
"org.apache.lucene.store.instantiated.TestEmptyIndex.termEnumTest(IndexReader)",1,1,1
"org.apache.lucene.store.instantiated.TestEmptyIndex.testNorms()",1,1,1
"org.apache.lucene.store.instantiated.TestEmptyIndex.testNorms(IndexReader)",1,3,3
"org.apache.lucene.store.instantiated.TestEmptyIndex.testSearch()",1,1,1
"org.apache.lucene.store.instantiated.TestEmptyIndex.testTermEnum()",1,1,1
"org.apache.lucene.store.instantiated.TestIndicesEquals.assembleDocument(Document,int)",2,6,7
"org.apache.lucene.store.instantiated.TestIndicesEquals.createToken(String,int,int)",1,1,1
"org.apache.lucene.store.instantiated.TestIndicesEquals.createToken(String,int,int,String)",1,1,1
"org.apache.lucene.store.instantiated.TestIndicesEquals.testEqualBehaviour(Directory,InstantiatedIndex)",1,2,2
"org.apache.lucene.store.instantiated.TestIndicesEquals.testEquals(Directory,InstantiatedIndex)",5,27,28
"org.apache.lucene.store.instantiated.TestIndicesEquals.testInstantiatedIndexWriter()",1,4,5
"org.apache.lucene.store.instantiated.TestIndicesEquals.testLoadIndexReader()",1,2,2
"org.apache.lucene.store.instantiated.TestIndicesEquals.testTermDocsSomeMore(Directory,InstantiatedIndex)",1,10,10
"org.apache.lucene.store.instantiated.TestMultiSegmentReaderOnConstructor.addDocument(IndexWriter,String)",1,1,1
"org.apache.lucene.store.instantiated.TestMultiSegmentReaderOnConstructor.test()",1,2,2
"org.apache.lucene.store.instantiated.TestRealTime.Collector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.lucene.store.instantiated.TestRealTime.Collector.collect(int)",1,1,1
"org.apache.lucene.store.instantiated.TestRealTime.Collector.setNextReader(IndexReader,int)",1,1,1
"org.apache.lucene.store.instantiated.TestRealTime.Collector.setScorer(Scorer)",1,1,1
"org.apache.lucene.store.instantiated.TestRealTime.test()",1,1,1
"org.apache.lucene.store.instantiated.TestSerialization.test()",1,1,1
"org.apache.lucene.store.instantiated.TestUnoptimizedReaderOnConstructor.addDocument(IndexWriter,String)",1,1,1
"org.apache.lucene.store.instantiated.TestUnoptimizedReaderOnConstructor.test()",1,2,2
"org.apache.lucene.util.ArrayUtil.ArrayUtil()",1,1,1
"org.apache.lucene.util.ArrayUtil.equals(char[],int,char[],int,int)",4,1,5
"org.apache.lucene.util.ArrayUtil.equals(int[],int,int[],int,int)",4,1,5
"org.apache.lucene.util.ArrayUtil.getShrinkSize(int,int,int)",2,1,2
"org.apache.lucene.util.ArrayUtil.getSorter(T[])",1,1,1
"org.apache.lucene.util.ArrayUtil.getSorter(T[],Comparator<? super T>)",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(boolean[])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(boolean[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(byte[])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(byte[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(char[])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(char[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(double[])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(double[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(float[])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(float[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(float[][])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(float[][],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(int[])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(int[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(int[][])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(int[][],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(long[])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(long[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.grow(short[])",1,1,1
"org.apache.lucene.util.ArrayUtil.grow(short[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.hashCode(byte[],int,int)",1,1,2
"org.apache.lucene.util.ArrayUtil.hashCode(char[],int,int)",1,1,2
"org.apache.lucene.util.ArrayUtil.insertionSort(T[])",1,1,1
"org.apache.lucene.util.ArrayUtil.insertionSort(T[],Comparator<? super T>)",1,1,1
"org.apache.lucene.util.ArrayUtil.insertionSort(T[],int,int)",2,1,2
"org.apache.lucene.util.ArrayUtil.insertionSort(T[],int,int,Comparator<? super T>)",2,1,2
"org.apache.lucene.util.ArrayUtil.mergeSort(T[])",1,1,1
"org.apache.lucene.util.ArrayUtil.mergeSort(T[],Comparator<? super T>)",1,1,1
"org.apache.lucene.util.ArrayUtil.mergeSort(T[],int,int)",2,1,2
"org.apache.lucene.util.ArrayUtil.mergeSort(T[],int,int,Comparator<? super T>)",2,1,2
"org.apache.lucene.util.ArrayUtil.oversize(int,int)",12,3,13
"org.apache.lucene.util.ArrayUtil.parse(char[],int,int,int,boolean)",7,2,7
"org.apache.lucene.util.ArrayUtil.parseInt(char[])",1,1,1
"org.apache.lucene.util.ArrayUtil.parseInt(char[],int,int)",1,1,1
"org.apache.lucene.util.ArrayUtil.parseInt(char[],int,int,int)",4,1,8
"org.apache.lucene.util.ArrayUtil.quickSort(T[])",1,1,1
"org.apache.lucene.util.ArrayUtil.quickSort(T[],Comparator<? super T>)",1,1,1
"org.apache.lucene.util.ArrayUtil.quickSort(T[],int,int)",2,1,2
"org.apache.lucene.util.ArrayUtil.quickSort(T[],int,int,Comparator<? super T>)",2,1,2
"org.apache.lucene.util.ArrayUtil.shrink(boolean[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.shrink(byte[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.shrink(char[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.shrink(float[][],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.shrink(int[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.shrink(int[][],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.shrink(long[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.shrink(short[],int)",2,2,2
"org.apache.lucene.util.ArrayUtil.toIntArray(Collection<Integer>)",1,1,2
"org.apache.lucene.util.AttributeImpl.assertExternalClass(Class<? extends AttributeImpl>)",1,3,3
"org.apache.lucene.util.AttributeImpl.clone()",1,1,2
"org.apache.lucene.util.AttributeImpl.reflectAsString(boolean)",1,3,4
"org.apache.lucene.util.AttributeImpl.reflectWith(AttributeReflector)",7,6,9
"org.apache.lucene.util.AttributeImpl.toString()",1,1,1
"org.apache.lucene.util.AttributeSource.AttributeFactory.DefaultAttributeFactory.DefaultAttributeFactory()",1,1,1
"org.apache.lucene.util.AttributeSource.AttributeFactory.DefaultAttributeFactory.createAttributeInstance(Class<? extends Attribute>)",1,3,3
"org.apache.lucene.util.AttributeSource.AttributeFactory.DefaultAttributeFactory.getClassForInterface(Class<? extends Attribute>)",2,5,5
"org.apache.lucene.util.AttributeSource.AttributeSource()",1,1,1
"org.apache.lucene.util.AttributeSource.AttributeSource(AttributeFactory)",1,1,1
"org.apache.lucene.util.AttributeSource.AttributeSource(AttributeSource)",2,1,2
"org.apache.lucene.util.AttributeSource.State.clone()",1,2,2
"org.apache.lucene.util.AttributeSource.addAttribute(Class<A>)",3,4,4
"org.apache.lucene.util.AttributeSource.addAttributeImpl(AttributeImpl)",2,3,4
"org.apache.lucene.util.AttributeSource.captureState()",1,2,2
"org.apache.lucene.util.AttributeSource.clearAttributes()",1,2,2
"org.apache.lucene.util.AttributeSource.cloneAttributes()",1,4,4
"org.apache.lucene.util.AttributeSource.copyTo(AttributeSource)",3,3,3
"org.apache.lucene.util.AttributeSource.equals(Object)",8,5,10
"org.apache.lucene.util.AttributeSource.getAttribute(Class<A>)",2,2,2
"org.apache.lucene.util.AttributeSource.getAttributeClassesIterator()",1,1,1
"org.apache.lucene.util.AttributeSource.getAttributeFactory()",1,1,1
"org.apache.lucene.util.AttributeSource.getAttributeImplsIterator()",3,2,3
"org.apache.lucene.util.AttributeSource.getAttributeInterfaces(Class<? extends AttributeImpl>)",1,6,6
"org.apache.lucene.util.AttributeSource.getCurrentState()",2,3,4
"org.apache.lucene.util.AttributeSource.hasAttribute(Class<? extends Attribute>)",1,1,1
"org.apache.lucene.util.AttributeSource.hasAttributes()",1,1,1
"org.apache.lucene.util.AttributeSource.hashCode()",1,2,2
"org.apache.lucene.util.AttributeSource.reflectAsString(boolean)",1,3,4
"org.apache.lucene.util.AttributeSource.reflectWith(AttributeReflector)",1,2,2
"org.apache.lucene.util.AttributeSource.restoreState(State)",4,3,4
"org.apache.lucene.util.AttributeSource.toString()",1,4,4
"org.apache.lucene.util.BitUtil.BitUtil()",1,1,1
"org.apache.lucene.util.BitUtil.isPowerOfTwo(int)",1,1,1
"org.apache.lucene.util.BitUtil.isPowerOfTwo(long)",1,1,1
"org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(int)",1,1,1
"org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(long)",1,1,1
"org.apache.lucene.util.BitUtil.nlz(long)",1,1,4
"org.apache.lucene.util.BitUtil.ntz(int)",4,1,4
"org.apache.lucene.util.BitUtil.ntz(long)",8,1,8
"org.apache.lucene.util.BitUtil.ntz2(long)",1,1,4
"org.apache.lucene.util.BitUtil.ntz3(long)",1,1,6
"org.apache.lucene.util.BitUtil.pop(long)",1,1,1
"org.apache.lucene.util.BitUtil.pop_andnot(long[],long[],int,int)",1,5,5
"org.apache.lucene.util.BitUtil.pop_array(long[],int,int)",1,5,5
"org.apache.lucene.util.BitUtil.pop_intersect(long[],long[],int,int)",1,5,5
"org.apache.lucene.util.BitUtil.pop_union(long[],long[],int,int)",1,5,5
"org.apache.lucene.util.BitUtil.pop_xor(long[],long[],int,int)",1,5,5
"org.apache.lucene.util.BitVector.BitVector(Directory,String)",1,3,3
"org.apache.lucene.util.BitVector.BitVector(byte[],int)",1,1,1
"org.apache.lucene.util.BitVector.BitVector(int)",1,1,1
"org.apache.lucene.util.BitVector.clear(int)",2,1,2
"org.apache.lucene.util.BitVector.clone()",1,1,1
"org.apache.lucene.util.BitVector.count()",1,1,3
"org.apache.lucene.util.BitVector.get(int)",1,1,2
"org.apache.lucene.util.BitVector.getAndSet(int)",3,1,4
"org.apache.lucene.util.BitVector.getNumBytes(int)",1,1,2
"org.apache.lucene.util.BitVector.getRecomputedCount()",1,1,2
"org.apache.lucene.util.BitVector.isSparse()",2,1,6
"org.apache.lucene.util.BitVector.length()",1,1,1
"org.apache.lucene.util.BitVector.readBits(IndexInput)",1,1,1
"org.apache.lucene.util.BitVector.readDgaps(IndexInput)",1,2,2
"org.apache.lucene.util.BitVector.set(int)",2,1,2
"org.apache.lucene.util.BitVector.size()",1,1,1
"org.apache.lucene.util.BitVector.write(Directory,String)",1,2,2
"org.apache.lucene.util.BitVector.writeBits(IndexOutput)",1,1,1
"org.apache.lucene.util.BitVector.writeDgaps(IndexOutput)",1,3,4
"org.apache.lucene.util.Bits.MatchAllBits.MatchAllBits(int)",1,1,1
"org.apache.lucene.util.Bits.MatchAllBits.get(int)",1,1,1
"org.apache.lucene.util.Bits.MatchAllBits.length()",1,1,1
"org.apache.lucene.util.Bits.MatchNoBits.MatchNoBits(int)",1,1,1
"org.apache.lucene.util.Bits.MatchNoBits.get(int)",1,1,1
"org.apache.lucene.util.Bits.MatchNoBits.length()",1,1,1
"org.apache.lucene.util.ByteBlockPool.Allocator.Allocator(int)",1,1,1
"org.apache.lucene.util.ByteBlockPool.Allocator.getByteBlock()",1,1,1
"org.apache.lucene.util.ByteBlockPool.Allocator.recycleByteBlocks(List<byte[]>)",1,1,1
"org.apache.lucene.util.ByteBlockPool.ByteBlockPool(Allocator)",1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectAllocator.DirectAllocator()",1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectAllocator.DirectAllocator(int)",1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectAllocator.recycleByteBlocks(byte[][],int,int)",1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator.DirectTrackingAllocator(AtomicLong)",1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator.DirectTrackingAllocator(int,AtomicLong)",1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator.getByteBlock()",1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator.recycleByteBlocks(byte[][],int,int)",1,1,2
"org.apache.lucene.util.ByteBlockPool.allocSlice(byte[],int)",1,2,2
"org.apache.lucene.util.ByteBlockPool.copy(BytesRef)",3,3,3
"org.apache.lucene.util.ByteBlockPool.copyFrom(BytesRef)",3,3,3
"org.apache.lucene.util.ByteBlockPool.dropBuffersAndReset()",1,2,2
"org.apache.lucene.util.ByteBlockPool.newSlice(int)",1,2,2
"org.apache.lucene.util.ByteBlockPool.nextBuffer()",1,2,2
"org.apache.lucene.util.ByteBlockPool.reset()",1,4,4
"org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int)",1,1,2
"org.apache.lucene.util.ByteBlockPool.writePool(DataOutput)",1,2,2
"org.apache.lucene.util.BytesRef.BytesRef()",1,1,1
"org.apache.lucene.util.BytesRef.BytesRef(CharSequence)",1,1,1
"org.apache.lucene.util.BytesRef.BytesRef(byte[])",1,1,1
"org.apache.lucene.util.BytesRef.BytesRef(byte[],int,int)",1,1,1
"org.apache.lucene.util.BytesRef.BytesRef(int)",1,1,1
"org.apache.lucene.util.BytesRef.UTF8SortedAsUTF16Comparator.UTF8SortedAsUTF16Comparator()",1,1,1
"org.apache.lucene.util.BytesRef.UTF8SortedAsUTF16Comparator.compare(BytesRef,BytesRef)",3,1,8
"org.apache.lucene.util.BytesRef.UTF8SortedAsUnicodeComparator.UTF8SortedAsUnicodeComparator()",1,1,1
"org.apache.lucene.util.BytesRef.UTF8SortedAsUnicodeComparator.compare(BytesRef,BytesRef)",3,1,3
"org.apache.lucene.util.BytesRef.append(BytesRef)",1,2,2
"org.apache.lucene.util.BytesRef.bytesEquals(BytesRef)",4,1,4
"org.apache.lucene.util.BytesRef.clone()",1,1,1
"org.apache.lucene.util.BytesRef.compareTo(BytesRef)",1,1,1
"org.apache.lucene.util.BytesRef.copyBytes(BytesRef)",1,1,2
"org.apache.lucene.util.BytesRef.copyChars(CharSequence)",1,1,1
"org.apache.lucene.util.BytesRef.copyChars(char[],int,int)",1,1,1
"org.apache.lucene.util.BytesRef.deepCopyOf(BytesRef)",1,1,1
"org.apache.lucene.util.BytesRef.endsWith(BytesRef)",1,1,1
"org.apache.lucene.util.BytesRef.equals(Object)",3,2,3
"org.apache.lucene.util.BytesRef.getUTF8SortedAsUTF16Comparator()",1,1,1
"org.apache.lucene.util.BytesRef.getUTF8SortedAsUnicodeComparator()",1,1,1
"org.apache.lucene.util.BytesRef.grow(int)",1,1,1
"org.apache.lucene.util.BytesRef.hashCode()",1,1,2
"org.apache.lucene.util.BytesRef.sliceEquals(BytesRef,int)",4,1,5
"org.apache.lucene.util.BytesRef.startsWith(BytesRef)",1,1,1
"org.apache.lucene.util.BytesRef.toString()",1,3,3
"org.apache.lucene.util.BytesRef.utf8ToString()",1,1,2
"org.apache.lucene.util.BytesRefHash.BytesRefHash()",1,1,1
"org.apache.lucene.util.BytesRefHash.BytesRefHash(ByteBlockPool)",1,1,1
"org.apache.lucene.util.BytesRefHash.BytesRefHash(ByteBlockPool,int,BytesStartArray)",1,2,2
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.DirectBytesStartArray(int)",1,1,1
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.bytesUsed()",1,1,1
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.clear()",1,1,1
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.grow()",1,1,1
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.init()",1,1,1
"org.apache.lucene.util.BytesRefHash.MaxBytesLengthExceededException.MaxBytesLengthExceededException(String)",1,1,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.TrackingDirectBytesStartArray(int,AtomicLong)",1,1,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.bytesUsed()",1,1,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.clear()",1,2,2
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.grow()",1,1,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.init()",1,1,1
"org.apache.lucene.util.BytesRefHash.add(BytesRef)",1,1,1
"org.apache.lucene.util.BytesRefHash.add(BytesRef,int)",4,9,11
"org.apache.lucene.util.BytesRefHash.addByPoolOffset(int)",2,4,8
"org.apache.lucene.util.BytesRefHash.byteStart(int)",1,1,2
"org.apache.lucene.util.BytesRefHash.clear()",1,1,1
"org.apache.lucene.util.BytesRefHash.clear(boolean)",2,3,4
"org.apache.lucene.util.BytesRefHash.close()",1,1,1
"org.apache.lucene.util.BytesRefHash.compact()",1,1,4
"org.apache.lucene.util.BytesRefHash.equals(int,BytesRef)",1,1,1
"org.apache.lucene.util.BytesRefHash.get(int,BytesRef)",1,1,1
"org.apache.lucene.util.BytesRefHash.rehash(int,boolean)",1,1,8
"org.apache.lucene.util.BytesRefHash.reinit()",1,3,3
"org.apache.lucene.util.BytesRefHash.shrink(int)",2,2,4
"org.apache.lucene.util.BytesRefHash.size()",1,1,1
"org.apache.lucene.util.BytesRefHash.sort(Comparator<BytesRef>)",1,1,2
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.CharacterBuffer(char[],int,int)",1,1,1
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.getBuffer()",1,1,1
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.getLength()",1,1,1
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.getOffset()",1,1,1
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.reset()",1,1,1
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.Java4CharacterUtils()",1,1,1
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.codePointAt(CharSequence,int)",1,1,1
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.codePointAt(char[],int)",1,1,1
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.codePointAt(char[],int,int)",2,1,2
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.fill(CharacterBuffer,Reader)",2,1,2
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.Java5CharacterUtils()",1,1,1
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.codePointAt(CharSequence,int)",1,1,1
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.codePointAt(char[],int)",1,1,1
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.codePointAt(char[],int,int)",1,1,1
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.fill(CharacterBuffer,Reader)",4,4,8
"org.apache.lucene.util.CharacterUtils.getInstance(Version)",1,1,2
"org.apache.lucene.util.CharacterUtils.newCharacterBuffer(int)",2,1,2
"org.apache.lucene.util.CharsRef.CharsRef()",1,1,1
"org.apache.lucene.util.CharsRef.CharsRef(String)",1,1,1
"org.apache.lucene.util.CharsRef.CharsRef(char[],int,int)",1,1,1
"org.apache.lucene.util.CharsRef.CharsRef(int)",1,1,1
"org.apache.lucene.util.CharsRef.UTF16SortedAsUTF8Comparator.UTF16SortedAsUTF8Comparator()",1,1,1
"org.apache.lucene.util.CharsRef.UTF16SortedAsUTF8Comparator.compare(CharsRef,CharsRef)",4,1,8
"org.apache.lucene.util.CharsRef.append(char[],int,int)",1,1,1
"org.apache.lucene.util.CharsRef.charAt(int)",1,1,1
"org.apache.lucene.util.CharsRef.charsEquals(CharsRef)",4,1,4
"org.apache.lucene.util.CharsRef.clone()",1,1,1
"org.apache.lucene.util.CharsRef.compareTo(CharsRef)",5,1,5
"org.apache.lucene.util.CharsRef.copyChars(CharsRef)",1,2,2
"org.apache.lucene.util.CharsRef.copyChars(char[],int,int)",1,1,1
"org.apache.lucene.util.CharsRef.deepCopyOf(CharsRef)",1,1,1
"org.apache.lucene.util.CharsRef.equals(Object)",3,2,3
"org.apache.lucene.util.CharsRef.getUTF16SortedAsUTF8Comparator()",1,1,1
"org.apache.lucene.util.CharsRef.grow(int)",1,2,2
"org.apache.lucene.util.CharsRef.hashCode()",1,1,2
"org.apache.lucene.util.CharsRef.length()",1,1,1
"org.apache.lucene.util.CharsRef.subSequence(int,int)",1,1,1
"org.apache.lucene.util.CharsRef.toString()",1,1,1
"org.apache.lucene.util.CloseableThreadLocal.close()",1,2,2
"org.apache.lucene.util.CloseableThreadLocal.get()",3,3,3
"org.apache.lucene.util.CloseableThreadLocal.initialValue()",1,1,1
"org.apache.lucene.util.CloseableThreadLocal.maybePurge()",1,2,2
"org.apache.lucene.util.CloseableThreadLocal.purge()",1,3,4
"org.apache.lucene.util.CloseableThreadLocal.set(T)",1,1,1
"org.apache.lucene.util.CodecUtil.CodecUtil()",1,1,1
"org.apache.lucene.util.CodecUtil.checkHeader(DataInput,String,int,int)",5,1,5
"org.apache.lucene.util.CodecUtil.headerLength(String)",1,1,1
"org.apache.lucene.util.CodecUtil.writeHeader(DataOutput,String,int)",2,2,3
"org.apache.lucene.util.CollectionUtil.CollectionUtil()",1,1,1
"org.apache.lucene.util.CollectionUtil.getSorter(List<T>)",2,1,2
"org.apache.lucene.util.CollectionUtil.getSorter(List<T>,Comparator<? super T>)",2,1,2
"org.apache.lucene.util.CollectionUtil.insertionSort(List<T>)",2,1,2
"org.apache.lucene.util.CollectionUtil.insertionSort(List<T>,Comparator<? super T>)",2,1,2
"org.apache.lucene.util.CollectionUtil.mergeSort(List<T>)",2,1,2
"org.apache.lucene.util.CollectionUtil.mergeSort(List<T>,Comparator<? super T>)",2,1,2
"org.apache.lucene.util.CollectionUtil.quickSort(List<T>)",2,1,2
"org.apache.lucene.util.CollectionUtil.quickSort(List<T>,Comparator<? super T>)",2,1,2
"org.apache.lucene.util.CommandLineUtil.CommandLineUtil()",1,1,1
"org.apache.lucene.util.CommandLineUtil.adjustDirectoryClassName(String)",2,4,4
"org.apache.lucene.util.CommandLineUtil.loadDirectoryClass(String)",1,1,1
"org.apache.lucene.util.CommandLineUtil.loadFSDirectoryClass(String)",1,1,1
"org.apache.lucene.util.CommandLineUtil.newFSDirectory(Class<? extends FSDirectory>,File)",1,1,1
"org.apache.lucene.util.CommandLineUtil.newFSDirectory(String,File)",1,4,5
"org.apache.lucene.util.Constants.Constants()",1,1,1
"org.apache.lucene.util.Constants.ident(String)",1,1,1
"org.apache.lucene.util.Counter.AtomicCounter.addAndGet(long)",1,1,1
"org.apache.lucene.util.Counter.AtomicCounter.get()",1,1,1
"org.apache.lucene.util.Counter.SerialCounter.addAndGet(long)",1,1,1
"org.apache.lucene.util.Counter.SerialCounter.get()",1,1,1
"org.apache.lucene.util.Counter.newCounter()",1,1,1
"org.apache.lucene.util.Counter.newCounter(boolean)",1,1,2
"org.apache.lucene.util.DocIdBitSet.DocIdBitSet(BitSet)",1,1,1
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator.DocIdBitSetIterator(BitSet)",1,1,1
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator.advance(int)",1,1,2
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator.docID()",1,1,1
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator.nextDoc()",1,1,2
"org.apache.lucene.util.DocIdBitSet.getBitSet()",1,1,1
"org.apache.lucene.util.DocIdBitSet.isCacheable()",1,1,1
"org.apache.lucene.util.DocIdBitSet.iterator()",1,1,1
"org.apache.lucene.util.DoubleBarrelLRUCache.DoubleBarrelLRUCache(int)",1,1,1
"org.apache.lucene.util.DoubleBarrelLRUCache.get(K)",1,3,4
"org.apache.lucene.util.DoubleBarrelLRUCache.put(K,V)",1,2,3
"org.apache.lucene.util.DummyConcurrentLock.lock()",1,1,1
"org.apache.lucene.util.DummyConcurrentLock.lockInterruptibly()",1,1,1
"org.apache.lucene.util.DummyConcurrentLock.newCondition()",1,1,1
"org.apache.lucene.util.DummyConcurrentLock.tryLock()",1,1,1
"org.apache.lucene.util.DummyConcurrentLock.tryLock(long,TimeUnit)",1,1,1
"org.apache.lucene.util.DummyConcurrentLock.unlock()",1,1,1
"org.apache.lucene.util.English.English()",1,1,1
"org.apache.lucene.util.English.intToEnglish(int)",1,1,1
"org.apache.lucene.util.English.intToEnglish(int,StringBuilder)",1,1,1
"org.apache.lucene.util.English.longToEnglish(long)",1,1,1
"org.apache.lucene.util.English.longToEnglish(long,StringBuilder)",4,14,40
"org.apache.lucene.util.FieldCacheSanityChecker.FieldCacheSanityChecker()",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.Insanity(InsanityType,String,CacheEntry...)",3,1,4
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.getCacheEntries()",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.getMsg()",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.getType()",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.toString()",1,3,3
"org.apache.lucene.util.FieldCacheSanityChecker.InsanityType.InsanityType(String)",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.InsanityType.toString()",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField.ReaderField(Object,String)",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField.equals(Object)",2,2,3
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField.hashCode()",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField.toString()",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.check(CacheEntry...)",5,5,9
"org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(CacheEntry...)",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(FieldCache)",1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.checkSubreaders(MapOfSets<Integer, CacheEntry>,MapOfSets<ReaderField, Integer>)",3,9,10
"org.apache.lucene.util.FieldCacheSanityChecker.checkValueMismatch(MapOfSets<Integer, CacheEntry>,MapOfSets<ReaderField, Integer>,Set<ReaderField>)",1,5,5
"org.apache.lucene.util.FieldCacheSanityChecker.getAllDescendantReaderKeys(Object)",1,4,5
"org.apache.lucene.util.FieldCacheSanityChecker.setRamUsageEstimator(boolean)",1,1,1
"org.apache.lucene.util.FixedBitSet.FixedBitSet(FixedBitSet)",1,1,1
"org.apache.lucene.util.FixedBitSet.FixedBitSet(int)",1,1,1
"org.apache.lucene.util.FixedBitSet.and(DocIdSetIterator)",3,7,8
"org.apache.lucene.util.FixedBitSet.and(FixedBitSet)",1,1,1
"org.apache.lucene.util.FixedBitSet.and(long[],int)",1,2,3
"org.apache.lucene.util.FixedBitSet.andNot(DocIdSetIterator)",1,4,4
"org.apache.lucene.util.FixedBitSet.andNot(FixedBitSet)",1,1,1
"org.apache.lucene.util.FixedBitSet.andNot(long[],int)",1,1,2
"org.apache.lucene.util.FixedBitSet.bits2words(int)",1,1,2
"org.apache.lucene.util.FixedBitSet.cardinality()",1,1,1
"org.apache.lucene.util.FixedBitSet.clear(int)",1,1,2
"org.apache.lucene.util.FixedBitSet.clear(int,int)",3,1,5
"org.apache.lucene.util.FixedBitSet.clone()",1,1,1
"org.apache.lucene.util.FixedBitSet.equals(Object)",4,1,4
"org.apache.lucene.util.FixedBitSet.flip(int,int)",3,1,6
"org.apache.lucene.util.FixedBitSet.get(int)",1,1,2
"org.apache.lucene.util.FixedBitSet.getAndClear(int)",1,1,2
"org.apache.lucene.util.FixedBitSet.getAndSet(int)",1,1,2
"org.apache.lucene.util.FixedBitSet.getBits()",1,1,1
"org.apache.lucene.util.FixedBitSet.hashCode()",1,1,2
"org.apache.lucene.util.FixedBitSet.isCacheable()",1,1,1
"org.apache.lucene.util.FixedBitSet.iterator()",1,1,1
"org.apache.lucene.util.FixedBitSet.length()",1,1,1
"org.apache.lucene.util.FixedBitSet.nextSetBit(int)",4,4,5
"org.apache.lucene.util.FixedBitSet.or(DocIdSetIterator)",1,4,4
"org.apache.lucene.util.FixedBitSet.or(FixedBitSet)",1,1,1
"org.apache.lucene.util.FixedBitSet.or(long[],int)",1,1,2
"org.apache.lucene.util.FixedBitSet.prevSetBit(int)",4,4,5
"org.apache.lucene.util.FixedBitSet.set(int)",1,1,2
"org.apache.lucene.util.FixedBitSet.set(int,int)",3,1,5
"org.apache.lucene.util.IOUtils.IOUtils()",1,1,1
"org.apache.lucene.util.IOUtils.addSuppressed(Throwable,Throwable)",1,2,5
"org.apache.lucene.util.IOUtils.close(Closeable...)",5,4,9
"org.apache.lucene.util.IOUtils.close(Iterable<? extends Closeable>)",5,4,9
"org.apache.lucene.util.IOUtils.closeWhileHandlingException(Closeable...)",1,3,4
"org.apache.lucene.util.IOUtils.closeWhileHandlingException(E,Closeable...)",6,4,11
"org.apache.lucene.util.IOUtils.closeWhileHandlingException(E,Iterable<? extends Closeable>)",6,4,11
"org.apache.lucene.util.IOUtils.closeWhileHandlingException(Iterable<? extends Closeable>)",1,3,4
"org.apache.lucene.util.IOUtils.getDecodingReader(Class<?>,String,Charset)",1,2,2
"org.apache.lucene.util.IOUtils.getDecodingReader(File,Charset)",1,2,2
"org.apache.lucene.util.IOUtils.getDecodingReader(InputStream,Charset)",1,1,1
"org.apache.lucene.util.IndexableBinaryStringTools.CodingCase.CodingCase(int,int)",1,1,2
"org.apache.lucene.util.IndexableBinaryStringTools.CodingCase.CodingCase(int,int,int)",1,1,1
"org.apache.lucene.util.IndexableBinaryStringTools.IndexableBinaryStringTools()",1,1,1
"org.apache.lucene.util.IndexableBinaryStringTools.decode(CharBuffer)",1,1,1
"org.apache.lucene.util.IndexableBinaryStringTools.decode(CharBuffer,ByteBuffer)",2,3,3
"org.apache.lucene.util.IndexableBinaryStringTools.decode(char[],int,int,byte[],int,int)",1,1,10
"org.apache.lucene.util.IndexableBinaryStringTools.encode(ByteBuffer)",1,1,1
"org.apache.lucene.util.IndexableBinaryStringTools.encode(ByteBuffer,CharBuffer)",2,3,3
"org.apache.lucene.util.IndexableBinaryStringTools.encode(byte[],int,int,char[],int,int)",1,1,8
"org.apache.lucene.util.IndexableBinaryStringTools.getDecodedLength(CharBuffer)",2,2,2
"org.apache.lucene.util.IndexableBinaryStringTools.getDecodedLength(char[],int,int)",2,1,2
"org.apache.lucene.util.IndexableBinaryStringTools.getEncodedLength(ByteBuffer)",2,2,2
"org.apache.lucene.util.IndexableBinaryStringTools.getEncodedLength(byte[],int,int)",1,1,1
"org.apache.lucene.util.InternalAssumptionViolatedException.InternalAssumptionViolatedException(String)",1,1,1
"org.apache.lucene.util.InternalAssumptionViolatedException.InternalAssumptionViolatedException(String,Throwable)",2,1,2
"org.apache.lucene.util.InternalAssumptionViolatedException.describeTo(Description)",1,2,2
"org.apache.lucene.util.InternalAssumptionViolatedException.getMessage()",1,1,1
"org.apache.lucene.util.IntsRef.IntsRef()",1,1,1
"org.apache.lucene.util.IntsRef.IntsRef(int)",1,1,1
"org.apache.lucene.util.IntsRef.IntsRef(int[],int,int)",1,1,1
"org.apache.lucene.util.IntsRef.clone()",1,1,1
"org.apache.lucene.util.IntsRef.compareTo(IntsRef)",5,1,5
"org.apache.lucene.util.IntsRef.copyInts(IntsRef)",1,2,2
"org.apache.lucene.util.IntsRef.deepCopyOf(IntsRef)",1,1,1
"org.apache.lucene.util.IntsRef.equals(Object)",3,2,3
"org.apache.lucene.util.IntsRef.grow(int)",1,2,2
"org.apache.lucene.util.IntsRef.hashCode()",1,1,2
"org.apache.lucene.util.IntsRef.intsEquals(IntsRef)",4,1,4
"org.apache.lucene.util.IntsRef.toString()",1,3,3
"org.apache.lucene.util.LineFileDocs.DocState.DocState()",1,1,1
"org.apache.lucene.util.LineFileDocs.LineFileDocs(Random)",1,1,1
"org.apache.lucene.util.LineFileDocs.LineFileDocs(Random,String)",1,1,1
"org.apache.lucene.util.LineFileDocs.close()",1,2,2
"org.apache.lucene.util.LineFileDocs.nextDoc()",3,4,6
"org.apache.lucene.util.LineFileDocs.open(Random)",1,5,9
"org.apache.lucene.util.LineFileDocs.reset(Random)",1,1,1
"org.apache.lucene.util.LuceneJUnitDividingSelector.isSelected(File,String,File)",1,1,1
"org.apache.lucene.util.LuceneJUnitDividingSelector.setParameters(Parameter[])",4,4,4
"org.apache.lucene.util.LuceneJUnitDividingSelector.verifySettings()",3,1,4
"org.apache.lucene.util.LuceneJUnitResultFormatter.LuceneJUnitResultFormatter()",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.addError(Test,Throwable)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.addFailure(Test,AssertionFailedError)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.addFailure(Test,Throwable)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.append(String)",1,1,3
"org.apache.lucene.util.LuceneJUnitResultFormatter.append(long)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.endTest(Test)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.endTestSuite(JUnitTest)",2,8,13
"org.apache.lucene.util.LuceneJUnitResultFormatter.formatError(String,Test,Throwable)",1,2,2
"org.apache.lucene.util.LuceneJUnitResultFormatter.formatTest(Test)",2,2,2
"org.apache.lucene.util.LuceneJUnitResultFormatter.setOutput(OutputStream)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.setSystemError(String)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.setSystemOutput(String)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.startTest(Test)",1,1,1
"org.apache.lucene.util.LuceneJUnitResultFormatter.startTestSuite(JUnitTest)",2,1,3
"org.apache.lucene.util.LuceneTestCase.InternalSetupTeardownRule.apply(Statement,Description)",1,3,3
"org.apache.lucene.util.LuceneTestCase.SaveThreadAndTestNameRule.apply(Statement,Description)",1,1,1
"org.apache.lucene.util.LuceneTestCase.SubclassSetupTeardownRule.apply(Statement,Description)",1,3,3
"org.apache.lucene.util.LuceneTestCase.TestResultInterceptorRule.apply(Statement,Description)",1,3,3
"org.apache.lucene.util.LuceneTestCase.TestResultInterceptorRule.assumptionIgnored(AssumptionViolatedException,Description)",1,2,2
"org.apache.lucene.util.LuceneTestCase.TestResultInterceptorRule.failed(Throwable,Description)",1,1,1
"org.apache.lucene.util.LuceneTestCase.UncaughtExceptionEntry.UncaughtExceptionEntry(Thread,Throwable)",1,1,1
"org.apache.lucene.util.LuceneTestCase.afterClassLuceneTestCaseJ4()",2,7,14
"org.apache.lucene.util.LuceneTestCase.alwaysIgnoredTestMethod()",1,1,1
"org.apache.lucene.util.LuceneTestCase.asSet(T...)",1,1,1
"org.apache.lucene.util.LuceneTestCase.assertEquals(String,double,double)",1,1,1
"org.apache.lucene.util.LuceneTestCase.assertEquals(String,float,float)",1,1,1
"org.apache.lucene.util.LuceneTestCase.assertEquals(double,double)",1,1,1
"org.apache.lucene.util.LuceneTestCase.assertEquals(float,float)",1,1,1
"org.apache.lucene.util.LuceneTestCase.assertSaneFieldCaches(String)",1,3,3
"org.apache.lucene.util.LuceneTestCase.assertionsEnabled()",1,1,2
"org.apache.lucene.util.LuceneTestCase.assumeFalse(String,boolean)",1,1,1
"org.apache.lucene.util.LuceneTestCase.assumeNoException(String,Exception)",1,1,2
"org.apache.lucene.util.LuceneTestCase.assumeTrue(String,boolean)",1,1,2
"org.apache.lucene.util.LuceneTestCase.atLeast(Random,int)",1,1,2
"org.apache.lucene.util.LuceneTestCase.atLeast(int)",1,1,1
"org.apache.lucene.util.LuceneTestCase.beforeClassLuceneTestCaseJ4()",1,7,8
"org.apache.lucene.util.LuceneTestCase.checkResourcesAfterClass()",5,4,5
"org.apache.lucene.util.LuceneTestCase.checkRogueThreadsAfter()",1,4,5
"org.apache.lucene.util.LuceneTestCase.checkUncaughtExceptionsAfter()",1,3,3
"org.apache.lucene.util.LuceneTestCase.clearTempDirectoriesAfterClass()",4,4,5
"org.apache.lucene.util.LuceneTestCase.dumpArray(String,Object[],PrintStream)",1,2,2
"org.apache.lucene.util.LuceneTestCase.dumpIterator(String,Iterator<?>,PrintStream)",1,3,3
"org.apache.lucene.util.LuceneTestCase.getDataFile(String)",1,1,2
"org.apache.lucene.util.LuceneTestCase.getName()",1,1,1
"org.apache.lucene.util.LuceneTestCase.getTestClass()",1,1,1
"org.apache.lucene.util.LuceneTestCase.getTestLabel()",1,1,1
"org.apache.lucene.util.LuceneTestCase.initRandom()",1,2,2
"org.apache.lucene.util.LuceneTestCase.isTestThread()",1,1,1
"org.apache.lucene.util.LuceneTestCase.localeForName(String)",5,2,5
"org.apache.lucene.util.LuceneTestCase.maybeNRTWrap(Random,Directory)",2,2,2
"org.apache.lucene.util.LuceneTestCase.newDirectory()",1,1,1
"org.apache.lucene.util.LuceneTestCase.newDirectory(Directory)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newDirectory(Random)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newDirectory(Random,Directory)",1,2,2
"org.apache.lucene.util.LuceneTestCase.newDirectoryImpl(Random,String)",2,3,5
"org.apache.lucene.util.LuceneTestCase.newFSDirectory(File)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newFSDirectory(File,LockFactory)",1,4,7
"org.apache.lucene.util.LuceneTestCase.newFSDirectoryImpl(Class<? extends FSDirectory>,File)",1,2,2
"org.apache.lucene.util.LuceneTestCase.newField(Random,String,String,Index)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newField(Random,String,String,Store,Index)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newField(Random,String,String,Store,Index,TermVector)",3,2,5
"org.apache.lucene.util.LuceneTestCase.newField(String,String,Index)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newField(String,String,Store,Index)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newField(String,String,Store,Index,TermVector)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newIndexWriterConfig(Random,Version,Analyzer)",1,11,11
"org.apache.lucene.util.LuceneTestCase.newIndexWriterConfig(Version,Analyzer)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newLogMergePolicy()",1,1,1
"org.apache.lucene.util.LuceneTestCase.newLogMergePolicy(Random)",1,2,3
"org.apache.lucene.util.LuceneTestCase.newLogMergePolicy(boolean)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newLogMergePolicy(boolean,int)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newLogMergePolicy(int)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newSearcher(IndexReader)",1,1,1
"org.apache.lucene.util.LuceneTestCase.newSearcher(IndexReader,boolean)",2,5,7
"org.apache.lucene.util.LuceneTestCase.newTieredMergePolicy()",1,1,1
"org.apache.lucene.util.LuceneTestCase.newTieredMergePolicy(Random)",1,2,2
"org.apache.lucene.util.LuceneTestCase.printDebuggingInformation()",1,2,3
"org.apache.lucene.util.LuceneTestCase.purgeFieldCache(FieldCache)",1,1,1
"org.apache.lucene.util.LuceneTestCase.randomDirectory(Random)",2,2,2
"org.apache.lucene.util.LuceneTestCase.randomLocale(Random)",1,1,1
"org.apache.lucene.util.LuceneTestCase.randomTVSetting(Random,TermVector)",6,6,8
"org.apache.lucene.util.LuceneTestCase.randomTimeZone(Random)",1,1,1
"org.apache.lucene.util.LuceneTestCase.rarely()",1,1,1
"org.apache.lucene.util.LuceneTestCase.rarely(Random)",1,1,2
"org.apache.lucene.util.LuceneTestCase.registerTempDir(File)",1,1,1
"org.apache.lucene.util.LuceneTestCase.reportAdditionalFailureInfo()",1,1,1
"org.apache.lucene.util.LuceneTestCase.reportPartialFailureInfo()",1,1,1
"org.apache.lucene.util.LuceneTestCase.reproduceWithExtraParams()",1,6,6
"org.apache.lucene.util.LuceneTestCase.setMergeFactor(MergePolicy,int)",1,3,3
"org.apache.lucene.util.LuceneTestCase.setUp()",1,3,3
"org.apache.lucene.util.LuceneTestCase.setUpInternal()",1,2,2
"org.apache.lucene.util.LuceneTestCase.setUseCompoundFile(MergePolicy,boolean)",1,3,3
"org.apache.lucene.util.LuceneTestCase.shutdownExecutorService(ExecutorService)",1,3,3
"org.apache.lucene.util.LuceneTestCase.tearDown()",2,2,6
"org.apache.lucene.util.LuceneTestCase.tearDownInternal()",2,2,4
"org.apache.lucene.util.LuceneTestCase.threadCleanup(String)",5,12,12
"org.apache.lucene.util.LuceneTestCase.usually()",1,1,1
"org.apache.lucene.util.LuceneTestCase.usually(Random)",1,1,1
"org.apache.lucene.util.LuceneTestCaseRunner.LuceneTestCaseRunner(Class<?>)",1,2,3
"org.apache.lucene.util.LuceneTestCaseRunner.computeTestMethods()",8,14,18
"org.apache.lucene.util.LuceneTestCaseRunner.runChild(FrameworkMethod,RunNotifier)",4,5,8
"org.apache.lucene.util.MapBackedSet.MapBackedSet(Map<E, Boolean>)",1,1,1
"org.apache.lucene.util.MapBackedSet.add(E)",1,1,1
"org.apache.lucene.util.MapBackedSet.clear()",1,1,1
"org.apache.lucene.util.MapBackedSet.contains(Object)",1,1,1
"org.apache.lucene.util.MapBackedSet.iterator()",1,1,1
"org.apache.lucene.util.MapBackedSet.remove(Object)",1,1,1
"org.apache.lucene.util.MapBackedSet.size()",1,1,1
"org.apache.lucene.util.MapOfSets.MapOfSets(Map<K, Set<V>>)",1,1,1
"org.apache.lucene.util.MapOfSets.getMap()",1,1,1
"org.apache.lucene.util.MapOfSets.put(K,V)",1,2,2
"org.apache.lucene.util.MapOfSets.putAll(K,Collection<? extends V>)",1,2,2
"org.apache.lucene.util.NamedThreadFactory.NamedThreadFactory(String)",1,2,2
"org.apache.lucene.util.NamedThreadFactory.checkPrefix(String)",1,2,3
"org.apache.lucene.util.NamedThreadFactory.newThread(Runnable)",1,1,1
"org.apache.lucene.util.NumericUtils.IntRangeBuilder.addRange(String,String)",1,1,1
"org.apache.lucene.util.NumericUtils.IntRangeBuilder.addRange(int,int,int)",1,1,1
"org.apache.lucene.util.NumericUtils.LongRangeBuilder.addRange(String,String)",1,1,1
"org.apache.lucene.util.NumericUtils.LongRangeBuilder.addRange(long,long,int)",1,1,1
"org.apache.lucene.util.NumericUtils.NumericUtils()",1,1,1
"org.apache.lucene.util.NumericUtils.addRange(Object,int,long,long,int)",2,2,4
"org.apache.lucene.util.NumericUtils.doubleToPrefixCoded(double)",1,1,1
"org.apache.lucene.util.NumericUtils.doubleToSortableLong(double)",1,1,2
"org.apache.lucene.util.NumericUtils.floatToPrefixCoded(float)",1,1,1
"org.apache.lucene.util.NumericUtils.floatToSortableInt(float)",1,1,2
"org.apache.lucene.util.NumericUtils.intToPrefixCoded(int)",1,1,1
"org.apache.lucene.util.NumericUtils.intToPrefixCoded(int,int)",1,1,1
"org.apache.lucene.util.NumericUtils.intToPrefixCoded(int,int,char[])",2,1,4
"org.apache.lucene.util.NumericUtils.longToPrefixCoded(long)",1,1,1
"org.apache.lucene.util.NumericUtils.longToPrefixCoded(long,int)",1,1,1
"org.apache.lucene.util.NumericUtils.longToPrefixCoded(long,int,char[])",2,1,4
"org.apache.lucene.util.NumericUtils.prefixCodedToDouble(String)",1,1,1
"org.apache.lucene.util.NumericUtils.prefixCodedToFloat(String)",1,1,1
"org.apache.lucene.util.NumericUtils.prefixCodedToInt(String)",4,3,5
"org.apache.lucene.util.NumericUtils.prefixCodedToLong(String)",4,3,5
"org.apache.lucene.util.NumericUtils.sortableIntToFloat(int)",1,1,2
"org.apache.lucene.util.NumericUtils.sortableLongToDouble(long)",1,1,2
"org.apache.lucene.util.NumericUtils.splitIntRange(IntRangeBuilder,int,int,int)",1,1,1
"org.apache.lucene.util.NumericUtils.splitLongRange(LongRangeBuilder,int,long,long)",1,1,1
"org.apache.lucene.util.NumericUtils.splitRange(Object,int,int,long,long)",5,5,12
"org.apache.lucene.util.OpenBitSet.OpenBitSet()",1,1,1
"org.apache.lucene.util.OpenBitSet.OpenBitSet(long)",1,1,1
"org.apache.lucene.util.OpenBitSet.OpenBitSet(long[],int)",1,1,1
"org.apache.lucene.util.OpenBitSet.and(OpenBitSet)",1,1,1
"org.apache.lucene.util.OpenBitSet.andNot(OpenBitSet)",1,1,1
"org.apache.lucene.util.OpenBitSet.andNotCount(OpenBitSet,OpenBitSet)",1,2,2
"org.apache.lucene.util.OpenBitSet.bits2words(long)",1,1,1
"org.apache.lucene.util.OpenBitSet.capacity()",1,1,1
"org.apache.lucene.util.OpenBitSet.cardinality()",1,1,1
"org.apache.lucene.util.OpenBitSet.clear(int,int)",4,1,5
"org.apache.lucene.util.OpenBitSet.clear(long)",2,1,2
"org.apache.lucene.util.OpenBitSet.clear(long,long)",4,1,5
"org.apache.lucene.util.OpenBitSet.clone()",1,1,2
"org.apache.lucene.util.OpenBitSet.ensureCapacity(long)",1,1,1
"org.apache.lucene.util.OpenBitSet.ensureCapacityWords(int)",1,2,2
"org.apache.lucene.util.OpenBitSet.equals(Object)",7,1,8
"org.apache.lucene.util.OpenBitSet.expandingWordNum(long)",1,2,2
"org.apache.lucene.util.OpenBitSet.fastClear(int)",1,1,2
"org.apache.lucene.util.OpenBitSet.fastClear(long)",1,1,2
"org.apache.lucene.util.OpenBitSet.fastFlip(int)",1,1,2
"org.apache.lucene.util.OpenBitSet.fastFlip(long)",1,1,2
"org.apache.lucene.util.OpenBitSet.fastGet(int)",1,1,2
"org.apache.lucene.util.OpenBitSet.fastGet(long)",1,1,2
"org.apache.lucene.util.OpenBitSet.fastSet(int)",1,1,2
"org.apache.lucene.util.OpenBitSet.fastSet(long)",1,1,2
"org.apache.lucene.util.OpenBitSet.flip(long)",1,1,1
"org.apache.lucene.util.OpenBitSet.flip(long,long)",3,1,4
"org.apache.lucene.util.OpenBitSet.flipAndGet(int)",1,1,2
"org.apache.lucene.util.OpenBitSet.flipAndGet(long)",1,1,2
"org.apache.lucene.util.OpenBitSet.get(int)",2,1,2
"org.apache.lucene.util.OpenBitSet.get(long)",2,1,2
"org.apache.lucene.util.OpenBitSet.getAndSet(int)",1,1,2
"org.apache.lucene.util.OpenBitSet.getAndSet(long)",1,1,2
"org.apache.lucene.util.OpenBitSet.getBit(int)",1,1,2
"org.apache.lucene.util.OpenBitSet.getBits()",1,1,1
"org.apache.lucene.util.OpenBitSet.getNumWords()",1,1,1
"org.apache.lucene.util.OpenBitSet.hashCode()",1,1,2
"org.apache.lucene.util.OpenBitSet.intersect(OpenBitSet)",1,2,3
"org.apache.lucene.util.OpenBitSet.intersectionCount(OpenBitSet,OpenBitSet)",1,1,1
"org.apache.lucene.util.OpenBitSet.intersects(OpenBitSet)",3,1,3
"org.apache.lucene.util.OpenBitSet.isCacheable()",1,1,1
"org.apache.lucene.util.OpenBitSet.isEmpty()",1,1,1
"org.apache.lucene.util.OpenBitSet.iterator()",1,1,1
"org.apache.lucene.util.OpenBitSet.length()",1,1,1
"org.apache.lucene.util.OpenBitSet.nextSetBit(int)",5,4,5
"org.apache.lucene.util.OpenBitSet.nextSetBit(long)",5,4,5
"org.apache.lucene.util.OpenBitSet.or(OpenBitSet)",1,1,1
"org.apache.lucene.util.OpenBitSet.prevSetBit(int)",7,4,7
"org.apache.lucene.util.OpenBitSet.prevSetBit(long)",7,4,7
"org.apache.lucene.util.OpenBitSet.remove(OpenBitSet)",1,1,2
"org.apache.lucene.util.OpenBitSet.set(long)",1,1,1
"org.apache.lucene.util.OpenBitSet.set(long,long)",3,1,3
"org.apache.lucene.util.OpenBitSet.setBits(long[])",1,1,1
"org.apache.lucene.util.OpenBitSet.setNumWords(int)",1,1,1
"org.apache.lucene.util.OpenBitSet.size()",1,1,1
"org.apache.lucene.util.OpenBitSet.trimTrailingZeros()",1,1,3
"org.apache.lucene.util.OpenBitSet.union(OpenBitSet)",1,2,3
"org.apache.lucene.util.OpenBitSet.unionCount(OpenBitSet,OpenBitSet)",1,3,3
"org.apache.lucene.util.OpenBitSet.xor(OpenBitSet)",1,2,3
"org.apache.lucene.util.OpenBitSet.xorCount(OpenBitSet,OpenBitSet)",1,3,3
"org.apache.lucene.util.OpenBitSetDISI.OpenBitSetDISI(DocIdSetIterator,int)",1,1,1
"org.apache.lucene.util.OpenBitSetDISI.OpenBitSetDISI(int)",1,1,1
"org.apache.lucene.util.OpenBitSetDISI.inPlaceAnd(DocIdSetIterator)",1,4,4
"org.apache.lucene.util.OpenBitSetDISI.inPlaceNot(DocIdSetIterator)",1,2,2
"org.apache.lucene.util.OpenBitSetDISI.inPlaceOr(DocIdSetIterator)",1,2,2
"org.apache.lucene.util.OpenBitSetDISI.inPlaceXor(DocIdSetIterator)",1,2,2
"org.apache.lucene.util.OpenBitSetIterator.OpenBitSetIterator(OpenBitSet)",1,1,1
"org.apache.lucene.util.OpenBitSetIterator.OpenBitSetIterator(long[],int)",1,1,1
"org.apache.lucene.util.OpenBitSetIterator.advance(int)",5,1,5
"org.apache.lucene.util.OpenBitSetIterator.docID()",1,1,1
"org.apache.lucene.util.OpenBitSetIterator.nextDoc()",4,2,5
"org.apache.lucene.util.OpenBitSetIterator.shift()",1,1,4
"org.apache.lucene.util.PagedBytes.PagedBytes(int)",1,1,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.PagedBytesDataInput()",1,1,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.clone()",1,1,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.getPosition()",1,1,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.nextBlock()",1,1,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.readByte()",1,2,2
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.readBytes(byte[],int,int)",3,3,3
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.setPosition(long)",1,1,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataOutput.getPosition()",2,2,2
"org.apache.lucene.util.PagedBytes.PagedBytesDataOutput.writeByte(byte)",1,3,3
"org.apache.lucene.util.PagedBytes.PagedBytesDataOutput.writeBytes(byte[],int,int)",4,5,6
"org.apache.lucene.util.PagedBytes.Reader.Reader(PagedBytes)",1,3,3
"org.apache.lucene.util.PagedBytes.Reader.fill(BytesRef,long)",1,1,2
"org.apache.lucene.util.PagedBytes.Reader.fillAndGetIndex(BytesRef,long)",1,1,2
"org.apache.lucene.util.PagedBytes.Reader.fillAndGetStart(BytesRef,long)",1,1,2
"org.apache.lucene.util.PagedBytes.Reader.fillSlice(BytesRef,long,int)",1,2,2
"org.apache.lucene.util.PagedBytes.Reader.fillSliceWithPrefix(BytesRef,long)",1,2,3
"org.apache.lucene.util.PagedBytes.Reader.getBlockEnds()",1,1,1
"org.apache.lucene.util.PagedBytes.Reader.getBlocks()",1,1,1
"org.apache.lucene.util.PagedBytes.copy(BytesRef)",3,5,5
"org.apache.lucene.util.PagedBytes.copy(BytesRef,BytesRef)",1,3,4
"org.apache.lucene.util.PagedBytes.copy(IndexInput,long)",3,5,5
"org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef)",4,3,6
"org.apache.lucene.util.PagedBytes.freeze(boolean)",3,2,6
"org.apache.lucene.util.PagedBytes.getDataInput()",2,1,2
"org.apache.lucene.util.PagedBytes.getDataOutput()",2,1,2
"org.apache.lucene.util.PagedBytes.getPointer()",2,2,2
"org.apache.lucene.util.Parameter.Parameter(String)",2,1,2
"org.apache.lucene.util.Parameter.makeKey(String)",1,1,1
"org.apache.lucene.util.Parameter.readResolve()",2,1,2
"org.apache.lucene.util.Parameter.toString()",1,1,1
"org.apache.lucene.util.PriorityQueue.add(T)",1,1,1
"org.apache.lucene.util.PriorityQueue.clear()",1,1,2
"org.apache.lucene.util.PriorityQueue.downHeap()",1,5,7
"org.apache.lucene.util.PriorityQueue.getHeapArray()",1,1,1
"org.apache.lucene.util.PriorityQueue.getSentinelObject()",1,1,1
"org.apache.lucene.util.PriorityQueue.initialize(int)",1,3,5
"org.apache.lucene.util.PriorityQueue.insertWithOverflow(T)",3,4,4
"org.apache.lucene.util.PriorityQueue.pop()",2,2,2
"org.apache.lucene.util.PriorityQueue.size()",1,1,1
"org.apache.lucene.util.PriorityQueue.top()",1,1,1
"org.apache.lucene.util.PriorityQueue.upHeap()",1,2,3
"org.apache.lucene.util.PriorityQueue.updateTop()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.ClassCache.ClassCache(long,Field[])",1,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.IdentityHashSet()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.IdentityHashSet(int)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.IdentityHashSet(int,float)",1,1,2
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.add(KType)",3,2,4
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.allocateBuffers(int)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.clear()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.contains(KType)",3,1,3
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.expandAndRehash()",1,3,4
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.isEmpty()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.iterator()",2,1,5
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.nextCapacity(int)",1,2,3
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.rehash(Object)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.roundCapacity(int)",2,1,3
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.size()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.JvmFeature.JvmFeature(String)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.JvmFeature.toString()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.RamUsageEstimator()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.RamUsageEstimator(boolean)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.adjustForField(long,Field)",4,4,7
"org.apache.lucene.util.RamUsageEstimator.alignObjectSize(long)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.createCacheEntry(Class<?>)",1,5,5
"org.apache.lucene.util.RamUsageEstimator.estimateRamUsage(Object)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.getSupportedFeatures()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.getUnsupportedFeatures()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long,DecimalFormat)",4,4,4
"org.apache.lucene.util.RamUsageEstimator.humanSizeOf(Object)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.isSupportedJVM()",1,1,1
"org.apache.lucene.util.RamUsageEstimator.measureObjectSize(Object,boolean)",5,15,18
"org.apache.lucene.util.RamUsageEstimator.shallowSizeOf(Object)",3,2,3
"org.apache.lucene.util.RamUsageEstimator.shallowSizeOfArray(Object)",1,3,3
"org.apache.lucene.util.RamUsageEstimator.shallowSizeOfInstance(Class<?>)",3,5,6
"org.apache.lucene.util.RamUsageEstimator.sizeOf(Object)",1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(boolean[])",1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(byte[])",1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(char[])",1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(double[])",1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(float[])",1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(int[])",1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(long[])",1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(short[])",1,1,1
"org.apache.lucene.util.ReaderUtil.Gather.Gather(IndexReader)",1,1,1
"org.apache.lucene.util.ReaderUtil.Gather.run()",1,1,1
"org.apache.lucene.util.ReaderUtil.Gather.run(int)",1,1,1
"org.apache.lucene.util.ReaderUtil.Gather.run(int,IndexReader)",1,3,3
"org.apache.lucene.util.ReaderUtil.ReaderUtil()",1,1,1
"org.apache.lucene.util.ReaderUtil.gatherSubReaders(List<IndexReader>,IndexReader)",1,3,3
"org.apache.lucene.util.ReaderUtil.getIndexedFields(IndexReader)",1,3,3
"org.apache.lucene.util.ReaderUtil.getMergedFieldInfos(IndexReader)",1,2,2
"org.apache.lucene.util.ReaderUtil.subIndex(int,int[])",4,1,6
"org.apache.lucene.util.RecyclingByteBlockAllocator.RecyclingByteBlockAllocator()",1,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.RecyclingByteBlockAllocator(int,int)",1,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.RecyclingByteBlockAllocator(int,int,AtomicLong)",1,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.bytesUsed()",1,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.freeBlocks(int)",1,1,3
"org.apache.lucene.util.RecyclingByteBlockAllocator.getByteBlock()",2,2,2
"org.apache.lucene.util.RecyclingByteBlockAllocator.maxBufferedBlocks()",1,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.numBufferedBlocks()",1,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.recycleByteBlocks(byte[][],int,int)",1,2,4
"org.apache.lucene.util.Rethrow.Rethrower.rethrow(Throwable)",1,1,1
"org.apache.lucene.util.Rethrow.rethrow(Throwable)",1,1,1
"org.apache.lucene.util.RollingCharBuffer.freeBefore(int)",1,1,1
"org.apache.lucene.util.RollingCharBuffer.get(int)",4,3,6
"org.apache.lucene.util.RollingCharBuffer.get(int,int)",1,2,3
"org.apache.lucene.util.RollingCharBuffer.getIndex(int)",1,1,2
"org.apache.lucene.util.RollingCharBuffer.inBounds(int)",1,1,3
"org.apache.lucene.util.RollingCharBuffer.reset(Reader)",1,1,1
"org.apache.lucene.util.ScorerDocQueue.HeapedScorerDoc.HeapedScorerDoc(Scorer)",1,1,1
"org.apache.lucene.util.ScorerDocQueue.HeapedScorerDoc.HeapedScorerDoc(Scorer,int)",1,1,1
"org.apache.lucene.util.ScorerDocQueue.HeapedScorerDoc.adjust()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.ScorerDocQueue(int)",1,1,1
"org.apache.lucene.util.ScorerDocQueue.adjustTop()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.checkAdjustElsePop(boolean)",1,2,2
"org.apache.lucene.util.ScorerDocQueue.clear()",1,1,2
"org.apache.lucene.util.ScorerDocQueue.downHeap()",1,1,7
"org.apache.lucene.util.ScorerDocQueue.insert(Scorer)",3,3,4
"org.apache.lucene.util.ScorerDocQueue.pop()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.popNoResult()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.put(Scorer)",1,1,1
"org.apache.lucene.util.ScorerDocQueue.size()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.top()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.topDoc()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.topNextAndAdjustElsePop()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.topScore()",1,1,1
"org.apache.lucene.util.ScorerDocQueue.topSkipToAndAdjustElsePop(int)",1,1,1
"org.apache.lucene.util.ScorerDocQueue.upHeap()",1,1,3
"org.apache.lucene.util.SetOnce.AlreadySetException.AlreadySetException()",1,1,1
"org.apache.lucene.util.SetOnce.SetOnce()",1,1,1
"org.apache.lucene.util.SetOnce.SetOnce(T)",1,1,1
"org.apache.lucene.util.SetOnce.get()",1,1,1
"org.apache.lucene.util.SetOnce.set(T)",2,1,2
"org.apache.lucene.util.SimpleStringInterner.Entry.Entry(String,int,Entry)",1,1,1
"org.apache.lucene.util.SimpleStringInterner.SimpleStringInterner(int,int)",1,1,1
"org.apache.lucene.util.SimpleStringInterner.intern(String)",3,4,7
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.SlowIndexInput(IndexInput)",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.clone()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.close()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.equals(Object)",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.getFilePointer()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.hashCode()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.length()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.readByte()",1,2,2
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.readBytes(byte[],int,int)",1,2,2
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.seek(long)",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.SlowIndexOutput(IndexOutput)",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.close()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.flush()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.getFilePointer()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.length()",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.seek(long)",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.writeByte(byte)",1,2,2
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.writeBytes(byte[],int,int)",1,2,2
"org.apache.lucene.util.SlowRAMDirectory.SlowRAMDirectory(int,Random)",1,1,1
"org.apache.lucene.util.SlowRAMDirectory.createOutput(String)",2,2,2
"org.apache.lucene.util.SlowRAMDirectory.doSleep(int)",1,3,4
"org.apache.lucene.util.SlowRAMDirectory.openInput(String)",2,2,2
"org.apache.lucene.util.SlowRAMDirectory.openInput(String,int)",2,2,2
"org.apache.lucene.util.SlowRAMDirectory.setSleepMillis(int)",1,1,1
"org.apache.lucene.util.SmallFloat.byte315ToFloat(byte)",2,1,2
"org.apache.lucene.util.SmallFloat.byte52ToFloat(byte)",2,1,2
"org.apache.lucene.util.SmallFloat.byteToFloat(byte,int,int)",2,1,2
"org.apache.lucene.util.SmallFloat.floatToByte(float,int,int)",3,1,4
"org.apache.lucene.util.SmallFloat.floatToByte315(float)",3,1,4
"org.apache.lucene.util.SmallFloat.floatToByte52(float)",3,1,4
"org.apache.lucene.util.SmartRandom.SmartRandom(long)",1,1,1
"org.apache.lucene.util.SmartRandom.next(int)",1,2,2
"org.apache.lucene.util.SortedVIntList.SortedVIntList(BitSet)",1,2,2
"org.apache.lucene.util.SortedVIntList.SortedVIntList(DocIdSetIterator)",1,2,2
"org.apache.lucene.util.SortedVIntList.SortedVIntList(int...)",1,1,1
"org.apache.lucene.util.SortedVIntList.SortedVIntList(int[],int)",1,2,2
"org.apache.lucene.util.SortedVIntList.SortedVIntListBuilder.SortedVIntListBuilder()",1,1,1
"org.apache.lucene.util.SortedVIntList.SortedVIntListBuilder.addInt(int)",2,2,4
"org.apache.lucene.util.SortedVIntList.SortedVIntListBuilder.done()",1,1,1
"org.apache.lucene.util.SortedVIntList.getByteSize()",1,1,1
"org.apache.lucene.util.SortedVIntList.initBytes()",1,1,1
"org.apache.lucene.util.SortedVIntList.isCacheable()",1,1,1
"org.apache.lucene.util.SortedVIntList.iterator()",3,3,5
"org.apache.lucene.util.SortedVIntList.resizeBytes(int)",1,2,2
"org.apache.lucene.util.SortedVIntList.size()",1,1,1
"org.apache.lucene.util.SorterTemplate.insertionSort(int,int)",4,4,4
"org.apache.lucene.util.SorterTemplate.lower(int,int,int)",1,2,3
"org.apache.lucene.util.SorterTemplate.merge(int,int,int,int,int)",3,4,6
"org.apache.lucene.util.SorterTemplate.mergeSort(int,int)",2,2,2
"org.apache.lucene.util.SorterTemplate.quickSort(int,int)",2,1,2
"org.apache.lucene.util.SorterTemplate.quickSort(int,int,int)",5,9,11
"org.apache.lucene.util.SorterTemplate.rotate(int,int,int)",1,4,4
"org.apache.lucene.util.SorterTemplate.upper(int,int,int)",1,2,3
"org.apache.lucene.util.StoreClassNameRule.apply(Statement,Description)",2,1,2
"org.apache.lucene.util.StoreClassNameRule.getTestClass()",2,1,2
"org.apache.lucene.util.StressRamUsageEstimator.Entry.createNext(Object)",1,1,1
"org.apache.lucene.util.StressRamUsageEstimator.causeGc()",1,4,4
"org.apache.lucene.util.StressRamUsageEstimator.shallowSizeOf(Object[])",1,2,2
"org.apache.lucene.util.StressRamUsageEstimator.shallowSizeOf(Object[][])",1,3,3
"org.apache.lucene.util.StressRamUsageEstimator.testChainedEstimation()",1,3,4
"org.apache.lucene.util.StressRamUsageEstimator.testLargeSetOfByteArrays()",1,2,2
"org.apache.lucene.util.StressRamUsageEstimator.testSimpleByteArrays()",3,3,5
"org.apache.lucene.util.StringHelper.StringHelper()",1,1,1
"org.apache.lucene.util.StringHelper.bytesDifference(byte[],int,byte[],int)",3,1,4
"org.apache.lucene.util.StringHelper.getVersionComparator()",1,1,1
"org.apache.lucene.util.StringHelper.intern(String)",1,1,1
"org.apache.lucene.util.StringInterner.intern(String)",1,1,1
"org.apache.lucene.util.StringInterner.intern(char[],int,int)",1,1,1
"org.apache.lucene.util.SystemPropertiesInvariantRule.SystemPropertiesInvariantRule()",1,1,1
"org.apache.lucene.util.SystemPropertiesInvariantRule.SystemPropertiesInvariantRule(Set<String>)",1,1,1
"org.apache.lucene.util.SystemPropertiesInvariantRule.SystemPropertiesInvariantRule(String...)",1,1,1
"org.apache.lucene.util.SystemPropertiesInvariantRule.apply(Statement,Description)",1,12,13
"org.apache.lucene.util.SystemPropertiesRestoreRule.SystemPropertiesRestoreRule()",1,1,1
"org.apache.lucene.util.SystemPropertiesRestoreRule.SystemPropertiesRestoreRule(Set<String>)",1,1,1
"org.apache.lucene.util.SystemPropertiesRestoreRule.SystemPropertiesRestoreRule(String...)",1,1,1
"org.apache.lucene.util.SystemPropertiesRestoreRule.apply(Statement,Description)",1,2,2
"org.apache.lucene.util.SystemPropertiesRestoreRule.cloneAsMap(Properties)",5,4,5
"org.apache.lucene.util.SystemPropertiesRestoreRule.restore(TreeMap<String, String>,TreeMap<String, String>,Set<String>)",1,6,6
"org.apache.lucene.util.TestArrayUtil.Item.Item(int,int)",1,1,1
"org.apache.lucene.util.TestArrayUtil.Item.compareTo(Item)",1,1,1
"org.apache.lucene.util.TestArrayUtil.Item.toString()",1,1,1
"org.apache.lucene.util.TestArrayUtil.createRandomArray(int)",1,2,2
"org.apache.lucene.util.TestArrayUtil.createSparseRandomArray(int)",1,2,2
"org.apache.lucene.util.TestArrayUtil.testEmptyArraySort()",1,1,1
"org.apache.lucene.util.TestArrayUtil.testGrowth()",1,3,3
"org.apache.lucene.util.TestArrayUtil.testInsertionSort()",1,2,2
"org.apache.lucene.util.TestArrayUtil.testInvalidElementSizes()",1,2,2
"org.apache.lucene.util.TestArrayUtil.testMaxSize()",1,2,2
"org.apache.lucene.util.TestArrayUtil.testMergeSort()",1,2,2
"org.apache.lucene.util.TestArrayUtil.testMergeSortStability()",1,7,8
"org.apache.lucene.util.TestArrayUtil.testParseInt()",1,2,6
"org.apache.lucene.util.TestArrayUtil.testQuickSort()",1,2,2
"org.apache.lucene.util.TestArrayUtil.testQuickToMergeSortFallback()",1,2,2
"org.apache.lucene.util.TestAttributeSource.TestAttributeImpl.clear()",1,1,1
"org.apache.lucene.util.TestAttributeSource.TestAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.lucene.util.TestAttributeSource.TestAttributeImpl.getFlags()",1,1,1
"org.apache.lucene.util.TestAttributeSource.TestAttributeImpl.setFlags(int)",1,1,1
"org.apache.lucene.util.TestAttributeSource.TestAttributeImpl.toString()",1,1,1
"org.apache.lucene.util.TestAttributeSource.testCaptureState()",1,1,2
"org.apache.lucene.util.TestAttributeSource.testCloneAttributes()",1,1,1
"org.apache.lucene.util.TestAttributeSource.testDefaultAttributeFactory()",1,1,1
"org.apache.lucene.util.TestAttributeSource.testInvalidArguments()",1,1,4
"org.apache.lucene.util.TestAttributeSource.testLUCENE_3042()",1,1,1
"org.apache.lucene.util.TestAttributeSource.testReflectionOfToString()",1,1,2
"org.apache.lucene.util.TestAttributeSource.testToStringAndMultiAttributeImplementations()",1,1,1
"org.apache.lucene.util.TestBitUtil.checkNlz(long)",1,1,1
"org.apache.lucene.util.TestBitUtil.nlzBitUtilBasicLoop(int)",1,3,3
"org.apache.lucene.util.TestBitUtil.nlzLongBasicLoop(int)",1,3,3
"org.apache.lucene.util.TestBitUtil.slowNlz(long)",2,1,3
"org.apache.lucene.util.TestBitUtil.testArg(int)",1,1,1
"org.apache.lucene.util.TestBitUtil.testBitUtils()",1,2,2
"org.apache.lucene.util.TestBitUtil.testNlz()",1,2,2
"org.apache.lucene.util.TestBitUtil.tstPerfNlz()",1,3,3
"org.apache.lucene.util.TestBitVector.doCompare(BitVector,BitVector)",3,2,3
"org.apache.lucene.util.TestBitVector.doTestClearVectorOfSize(int)",1,2,2
"org.apache.lucene.util.TestBitVector.doTestConstructOfSize(int)",1,1,1
"org.apache.lucene.util.TestBitVector.doTestCountVectorOfSize(int)",1,3,3
"org.apache.lucene.util.TestBitVector.doTestDgaps(int,int,int)",1,4,4
"org.apache.lucene.util.TestBitVector.doTestGetSetVectorOfSize(int)",1,2,2
"org.apache.lucene.util.TestBitVector.doTestWriteRead(int)",1,2,2
"org.apache.lucene.util.TestBitVector.testClear()",1,1,1
"org.apache.lucene.util.TestBitVector.testConstructSize()",1,1,1
"org.apache.lucene.util.TestBitVector.testCount()",1,1,1
"org.apache.lucene.util.TestBitVector.testDgaps()",1,1,1
"org.apache.lucene.util.TestBitVector.testGetSet()",1,1,1
"org.apache.lucene.util.TestBitVector.testWriteRead()",1,1,1
"org.apache.lucene.util.TestByteBlockPool.testCopyRefAndWrite()",1,3,4
"org.apache.lucene.util.TestBytesRef.testEmpty()",1,1,1
"org.apache.lucene.util.TestBytesRef.testFromBytes()",1,1,1
"org.apache.lucene.util.TestBytesRef.testFromChars()",1,2,2
"org.apache.lucene.util.TestBytesRefHash.assertAllIn(Set<String>,BytesRefHash)",1,2,2
"org.apache.lucene.util.TestBytesRefHash.newHash(ByteBlockPool)",1,1,2
"org.apache.lucene.util.TestBytesRefHash.newPool()",1,3,3
"org.apache.lucene.util.TestBytesRefHash.setUp()",1,1,1
"org.apache.lucene.util.TestBytesRefHash.testAdd()",1,5,5
"org.apache.lucene.util.TestBytesRefHash.testAddByPoolOffset()",1,6,6
"org.apache.lucene.util.TestBytesRefHash.testCompact()",1,6,6
"org.apache.lucene.util.TestBytesRefHash.testGet()",1,6,6
"org.apache.lucene.util.TestBytesRefHash.testLargeValue()",2,4,4
"org.apache.lucene.util.TestBytesRefHash.testSize()",1,6,6
"org.apache.lucene.util.TestBytesRefHash.testSort()",1,5,5
"org.apache.lucene.util.TestCharacterUtils.testCodePointAtCharArrayInt()",1,1,3
"org.apache.lucene.util.TestCharacterUtils.testCodePointAtCharArrayIntInt()",1,1,1
"org.apache.lucene.util.TestCharacterUtils.testCodePointAtCharSequenceInt()",1,1,3
"org.apache.lucene.util.TestCharacterUtils.testFillJava14()",1,1,1
"org.apache.lucene.util.TestCharacterUtils.testFillJava15()",1,1,1
"org.apache.lucene.util.TestCharacterUtils.testFillNoHighSurrogate()",1,2,2
"org.apache.lucene.util.TestCharacterUtils.testNewCharacterBuffer()",1,1,2
"org.apache.lucene.util.TestCharsRef.testAppend()",1,2,2
"org.apache.lucene.util.TestCharsRef.testCopy()",1,2,2
"org.apache.lucene.util.TestCharsRef.testUTF16InUTF8Order()",1,3,3
"org.apache.lucene.util.TestCloseableThreadLocal.InitValueThreadLocal.initialValue()",1,1,1
"org.apache.lucene.util.TestCloseableThreadLocal.testDefaultValueWithoutSetting()",1,1,1
"org.apache.lucene.util.TestCloseableThreadLocal.testInitValue()",1,1,1
"org.apache.lucene.util.TestCloseableThreadLocal.testNullValue()",1,1,1
"org.apache.lucene.util.TestCollectionUtil.createRandomList(int)",1,2,2
"org.apache.lucene.util.TestCollectionUtil.testEmptyListSort()",1,1,1
"org.apache.lucene.util.TestCollectionUtil.testInsertionSort()",1,2,2
"org.apache.lucene.util.TestCollectionUtil.testMergeSort()",1,2,2
"org.apache.lucene.util.TestCollectionUtil.testOneElementListSort()",1,1,1
"org.apache.lucene.util.TestCollectionUtil.testQuickSort()",1,2,2
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CacheThread.CacheThread(DoubleBarrelLRUCache<CloneableObject, Object>,CloneableObject[],long)",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CacheThread.run()",4,4,6
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CloneableInteger.CloneableInteger(Integer)",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CloneableInteger.clone()",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CloneableInteger.equals(Object)",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CloneableInteger.hashCode()",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CloneableObject.CloneableObject(Object)",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CloneableObject.clone()",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CloneableObject.equals(Object)",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.CloneableObject.hashCode()",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.addResults(long,long)",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.testCache(DoubleBarrelLRUCache<CloneableInteger, Object>,int)",1,7,7
"org.apache.lucene.util.TestDoubleBarrelLRUCache.testLRUCache()",1,1,1
"org.apache.lucene.util.TestDoubleBarrelLRUCache.testThreadCorrectness()",1,3,4
"org.apache.lucene.util.TestFieldCacheSanityChecker.setUp()",1,3,3
"org.apache.lucene.util.TestFieldCacheSanityChecker.tearDown()",1,1,1
"org.apache.lucene.util.TestFieldCacheSanityChecker.testInsanity1()",1,1,1
"org.apache.lucene.util.TestFieldCacheSanityChecker.testInsanity2()",1,1,1
"org.apache.lucene.util.TestFieldCacheSanityChecker.testInsanity3()",1,1,1
"org.apache.lucene.util.TestFieldCacheSanityChecker.testSanity()",1,2,2
"org.apache.lucene.util.TestFixedBitSet.checkPrevSetBitArray(int[],int)",1,1,1
"org.apache.lucene.util.TestFixedBitSet.doGet(BitSet,FixedBitSet)",1,3,3
"org.apache.lucene.util.TestFixedBitSet.doIterate(BitSet,FixedBitSet,int)",1,3,3
"org.apache.lucene.util.TestFixedBitSet.doIterate1(BitSet,FixedBitSet)",1,4,5
"org.apache.lucene.util.TestFixedBitSet.doIterate2(BitSet,FixedBitSet)",1,3,4
"org.apache.lucene.util.TestFixedBitSet.doNextSetBit(BitSet,FixedBitSet)",1,3,3
"org.apache.lucene.util.TestFixedBitSet.doPrevSetBit(BitSet,FixedBitSet)",1,7,8
"org.apache.lucene.util.TestFixedBitSet.doRandomSets(int,int,int)",1,7,7
"org.apache.lucene.util.TestFixedBitSet.makeBitSet(int[])",1,2,2
"org.apache.lucene.util.TestFixedBitSet.makeFixedBitSet(int[],int)",1,2,2
"org.apache.lucene.util.TestFixedBitSet.testEquals()",1,3,3
"org.apache.lucene.util.TestFixedBitSet.testHashCodeEquals()",1,3,3
"org.apache.lucene.util.TestFixedBitSet.testPrevSetBit()",1,1,1
"org.apache.lucene.util.TestFixedBitSet.testSmall()",1,1,1
"org.apache.lucene.util.TestFixedBitSet.testSmallBitSets()",1,3,3
"org.apache.lucene.util.TestIOUtils.BrokenCloseable.BrokenCloseable(int)",1,1,1
"org.apache.lucene.util.TestIOUtils.BrokenCloseable.close()",1,1,1
"org.apache.lucene.util.TestIOUtils.TestException.TestException()",1,1,1
"org.apache.lucene.util.TestIOUtils.testSuppressedExceptions()",1,10,10
"org.apache.lucene.util.TestIdentityHashSet.testCheck()",1,3,3
"org.apache.lucene.util.TestIndexableBinaryStringTools.beforeClass()",1,1,1
"org.apache.lucene.util.TestIndexableBinaryStringTools.binaryDump(byte[],int)",1,4,4
"org.apache.lucene.util.TestIndexableBinaryStringTools.binaryDumpNIO(ByteBuffer)",1,1,1
"org.apache.lucene.util.TestIndexableBinaryStringTools.charArrayDump(char[],int)",1,4,4
"org.apache.lucene.util.TestIndexableBinaryStringTools.charArrayDumpNIO(CharBuffer)",1,1,1
"org.apache.lucene.util.TestIndexableBinaryStringTools.testAllNullInput()",1,1,1
"org.apache.lucene.util.TestIndexableBinaryStringTools.testAllNullInputNIO()",1,1,1
"org.apache.lucene.util.TestIndexableBinaryStringTools.testEmptyInput()",1,1,1
"org.apache.lucene.util.TestIndexableBinaryStringTools.testEmptyInputNIO()",1,1,1
"org.apache.lucene.util.TestIndexableBinaryStringTools.testEncodedSortability()",1,6,10
"org.apache.lucene.util.TestIndexableBinaryStringTools.testEncodedSortabilityNIO()",1,4,8
"org.apache.lucene.util.TestIndexableBinaryStringTools.testRandomBinaryRoundTrip()",1,4,4
"org.apache.lucene.util.TestIndexableBinaryStringTools.testRandomBinaryRoundTripNIO()",1,3,3
"org.apache.lucene.util.TestIndexableBinaryStringTools.testSingleBinaryRoundTrip()",1,1,1
"org.apache.lucene.util.TestIndexableBinaryStringTools.testSingleBinaryRoundTripNIO()",1,1,1
"org.apache.lucene.util.TestNumericUtils.assertIntRangeSplit(int,int,int,boolean,Iterable<Integer>,Iterable<Integer>)",5,6,12
"org.apache.lucene.util.TestNumericUtils.assertLongRangeSplit(long,long,int,boolean,Iterable<Long>,Iterable<Integer>)",5,6,13
"org.apache.lucene.util.TestNumericUtils.executeOneRandomSplit(Random)",1,1,2
"org.apache.lucene.util.TestNumericUtils.randomLong(Random)",2,4,9
"org.apache.lucene.util.TestNumericUtils.testDoubles()",1,3,3
"org.apache.lucene.util.TestNumericUtils.testFloats()",1,3,3
"org.apache.lucene.util.TestNumericUtils.testIntConversionAndOrdering()",1,3,3
"org.apache.lucene.util.TestNumericUtils.testIntSpecialValues()",1,5,6
"org.apache.lucene.util.TestNumericUtils.testLongConversionAndOrdering()",1,3,3
"org.apache.lucene.util.TestNumericUtils.testLongExtremeValues()",1,1,1
"org.apache.lucene.util.TestNumericUtils.testLongSpecialValues()",1,5,6
"org.apache.lucene.util.TestNumericUtils.testRandomSplit()",1,2,2
"org.apache.lucene.util.TestNumericUtils.testSortableDoubleNaN()",1,2,2
"org.apache.lucene.util.TestNumericUtils.testSortableFloatNaN()",1,2,2
"org.apache.lucene.util.TestNumericUtils.testSplitIntRange()",1,1,1
"org.apache.lucene.util.TestNumericUtils.testSplitLongRange()",1,1,1
"org.apache.lucene.util.TestOpenBitSet.checkPrevSetBitArray(int[])",1,1,1
"org.apache.lucene.util.TestOpenBitSet.doGet(BitSet,OpenBitSet)",1,4,4
"org.apache.lucene.util.TestOpenBitSet.doGetFast(BitSet,OpenBitSet,int)",1,4,4
"org.apache.lucene.util.TestOpenBitSet.doIterate(BitSet,OpenBitSet,int)",1,3,3
"org.apache.lucene.util.TestOpenBitSet.doIterate1(BitSet,OpenBitSet)",1,3,4
"org.apache.lucene.util.TestOpenBitSet.doIterate2(BitSet,OpenBitSet)",1,3,4
"org.apache.lucene.util.TestOpenBitSet.doNextSetBit(BitSet,OpenBitSet)",1,2,2
"org.apache.lucene.util.TestOpenBitSet.doNextSetBitLong(BitSet,OpenBitSet)",1,2,2
"org.apache.lucene.util.TestOpenBitSet.doPrevSetBit(BitSet,OpenBitSet)",1,3,4
"org.apache.lucene.util.TestOpenBitSet.doPrevSetBitLong(BitSet,OpenBitSet)",1,3,4
"org.apache.lucene.util.TestOpenBitSet.doRandomSets(int,int,int)",1,6,6
"org.apache.lucene.util.TestOpenBitSet.makeBitSet(int[])",1,2,2
"org.apache.lucene.util.TestOpenBitSet.makeOpenBitSet(int[])",1,2,2
"org.apache.lucene.util.TestOpenBitSet.testEquals()",1,1,1
"org.apache.lucene.util.TestOpenBitSet.testHashCodeEquals()",1,1,1
"org.apache.lucene.util.TestOpenBitSet.testPrevSetBit()",1,1,1
"org.apache.lucene.util.TestOpenBitSet.testSmall()",1,1,1
"org.apache.lucene.util.TestPagedBytes.testDataInputOutput()",1,8,8
"org.apache.lucene.util.TestPagedBytes.testLengthPrefix()",1,5,5
"org.apache.lucene.util.TestPagedBytes.testLengthPrefixAcrossTwoBlocks()",1,2,2
"org.apache.lucene.util.TestPriorityQueue.IntegerQueue.IntegerQueue(int)",1,1,1
"org.apache.lucene.util.TestPriorityQueue.IntegerQueue.lessThan(Integer,Integer)",1,1,1
"org.apache.lucene.util.TestPriorityQueue.testClear()",1,1,1
"org.apache.lucene.util.TestPriorityQueue.testFixedSize()",1,1,1
"org.apache.lucene.util.TestPriorityQueue.testInsertWithOverflow()",1,1,1
"org.apache.lucene.util.TestPriorityQueue.testPQ()",1,1,1
"org.apache.lucene.util.TestPriorityQueue.testPQ(int,Random)",1,3,3
"org.apache.lucene.util.TestRamUsageEstimator.Holder.Holder()",1,1,1
"org.apache.lucene.util.TestRamUsageEstimator.Holder.Holder(String,long)",1,1,1
"org.apache.lucene.util.TestRamUsageEstimator.testBasic()",1,1,1
"org.apache.lucene.util.TestRamUsageEstimator.testReferenceSize()",1,5,6
"org.apache.lucene.util.TestRamUsageEstimator.testSanity()",1,1,1
"org.apache.lucene.util.TestRamUsageEstimator.testStaticOverloads()",1,1,1
"org.apache.lucene.util.TestRamUsageEstimatorOnWildAnimals.testOverflowMaxChainLength()",1,3,5
"org.apache.lucene.util.TestRecyclingByteBlockAllocator.newAllocator()",1,1,1
"org.apache.lucene.util.TestRecyclingByteBlockAllocator.setUp()",1,1,1
"org.apache.lucene.util.TestRecyclingByteBlockAllocator.testAllocate()",1,2,2
"org.apache.lucene.util.TestRecyclingByteBlockAllocator.testAllocateAndFree()",1,5,5
"org.apache.lucene.util.TestRecyclingByteBlockAllocator.testAllocateAndRecycle()",1,5,5
"org.apache.lucene.util.TestRollingCharBuffer.test()",1,18,18
"org.apache.lucene.util.TestSetOnce.SetOnceThread.SetOnceThread(Random)",1,1,1
"org.apache.lucene.util.TestSetOnce.SetOnceThread.run()",1,1,3
"org.apache.lucene.util.TestSetOnce.testEmptyCtor()",1,1,1
"org.apache.lucene.util.TestSetOnce.testSetMultiThreaded()",1,6,6
"org.apache.lucene.util.TestSetOnce.testSetOnce()",1,1,1
"org.apache.lucene.util.TestSetOnce.testSettingCtor()",1,1,1
"org.apache.lucene.util.TestSmallFloat.orig_byteToFloat(byte)",2,1,2
"org.apache.lucene.util.TestSmallFloat.orig_floatToByte(float)",2,1,7
"org.apache.lucene.util.TestSmallFloat.orig_floatToByte_v13(float)",2,1,5
"org.apache.lucene.util.TestSmallFloat.testByteToFloat()",1,2,2
"org.apache.lucene.util.TestSmallFloat.testFloatToByte()",3,2,3
"org.apache.lucene.util.TestSortedVIntList.fibArray(int,int,int)",1,1,2
"org.apache.lucene.util.TestSortedVIntList.main(String[])",1,1,1
"org.apache.lucene.util.TestSortedVIntList.reverseDiffs(int[])",1,1,2
"org.apache.lucene.util.TestSortedVIntList.test01()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test02()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test04a()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test04b()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test04c()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test05()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test05b()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test06()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test06b()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test07a()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test07b()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test07c()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test08a()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test08b()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test08c()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test10()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test11()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test12()",1,1,1
"org.apache.lucene.util.TestSortedVIntList.test13Allocation()",1,1,2
"org.apache.lucene.util.TestSortedVIntList.tstIllegalArgExc(int[])",1,1,2
"org.apache.lucene.util.TestSortedVIntList.tstInts(int[])",1,1,2
"org.apache.lucene.util.TestSortedVIntList.tstIterator(SortedVIntList,int[])",3,2,5
"org.apache.lucene.util.TestSortedVIntList.tstVIntList(SortedVIntList,int[],int)",1,1,1
"org.apache.lucene.util.TestSortedVIntList.tstViaBitSet(int[],int)",4,2,5
"org.apache.lucene.util.TestSortedVIntList.vIntByteSize(int)",5,1,5
"org.apache.lucene.util.TestSortedVIntList.vIntListByteSize(int[])",1,2,2
"org.apache.lucene.util.TestStringIntern.makeStrings(int)",1,2,2
"org.apache.lucene.util.TestStringIntern.randStr(int)",1,2,2
"org.apache.lucene.util.TestStringIntern.testStringIntern()",1,6,9
"org.apache.lucene.util.TestTwoPhaseCommitTool.TwoPhaseCommitImpl.TwoPhaseCommitImpl(boolean,boolean,boolean)",1,1,1
"org.apache.lucene.util.TestTwoPhaseCommitTool.TwoPhaseCommitImpl.commit()",1,1,1
"org.apache.lucene.util.TestTwoPhaseCommitTool.TwoPhaseCommitImpl.commit(Map<String, String>)",2,1,2
"org.apache.lucene.util.TestTwoPhaseCommitTool.TwoPhaseCommitImpl.prepareCommit()",1,1,1
"org.apache.lucene.util.TestTwoPhaseCommitTool.TwoPhaseCommitImpl.prepareCommit(Map<String, String>)",2,1,2
"org.apache.lucene.util.TestTwoPhaseCommitTool.TwoPhaseCommitImpl.rollback()",2,1,2
"org.apache.lucene.util.TestTwoPhaseCommitTool.setUp()",1,1,1
"org.apache.lucene.util.TestTwoPhaseCommitTool.testNullTPCs()",1,3,4
"org.apache.lucene.util.TestTwoPhaseCommitTool.testPrepareThenCommit()",1,1,2
"org.apache.lucene.util.TestTwoPhaseCommitTool.testRollback()",1,4,5
"org.apache.lucene.util.TestTwoPhaseCommitTool.testWrapper()",1,1,1
"org.apache.lucene.util.TestVersion.test()",1,2,2
"org.apache.lucene.util.TestVersionComparator.testVersions()",1,1,1
"org.apache.lucene.util.TestVirtualMethod.TestClass1.protectedTest(int)",1,1,1
"org.apache.lucene.util.TestVirtualMethod.TestClass1.publicTest(String)",1,1,1
"org.apache.lucene.util.TestVirtualMethod.TestClass2.protectedTest(int)",1,1,1
"org.apache.lucene.util.TestVirtualMethod.TestClass3.publicTest(String)",1,1,1
"org.apache.lucene.util.TestVirtualMethod.protectedTest(int)",1,1,1
"org.apache.lucene.util.TestVirtualMethod.publicTest(String)",1,1,1
"org.apache.lucene.util.TestVirtualMethod.testExceptions()",1,1,5
"org.apache.lucene.util.TestVirtualMethod.testGeneral()",1,1,1
"org.apache.lucene.util.TestWeakIdentityMap.testConcurrentHashMap()",2,8,15
"org.apache.lucene.util.TestWeakIdentityMap.testSimpleHashMap()",1,2,4
"org.apache.lucene.util.ThreadInterruptedException.ThreadInterruptedException(InterruptedException)",1,1,1
"org.apache.lucene.util.ThreeLongs.ThreeLongs(long,long,long)",1,1,1
"org.apache.lucene.util.ThreeLongs.fromString(String)",1,1,1
"org.apache.lucene.util.ThreeLongs.toString()",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.ThrottledIndexOutput(int,long,IndexOutput)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.ThrottledIndexOutput(int,long,int,IndexOutput)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.ThrottledIndexOutput(int,long,long,long,long,IndexOutput)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.close()",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.copyBytes(DataInput,long)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.flush()",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.getDelay(boolean)",3,1,5
"org.apache.lucene.util.ThrottledIndexOutput.getFilePointer()",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.length()",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.mBitsToBytes(int)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.newFromDelegate(IndexOutput)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.seek(long)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.setLength(long)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.sleep(long)",2,1,3
"org.apache.lucene.util.ThrottledIndexOutput.writeByte(byte)",1,1,1
"org.apache.lucene.util.ThrottledIndexOutput.writeBytes(byte[],int,int)",1,1,1
"org.apache.lucene.util.ToStringUtils.ToStringUtils()",1,1,1
"org.apache.lucene.util.ToStringUtils.boost(float)",2,2,2
"org.apache.lucene.util.ToStringUtils.byteArray(StringBuilder,byte[])",1,3,3
"org.apache.lucene.util.TwoPhaseCommitTool.CommitFailException.CommitFailException(Throwable,TwoPhaseCommit)",1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.PrepareCommitFailException.PrepareCommitFailException(Throwable,TwoPhaseCommit)",1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.TwoPhaseCommitWrapper(TwoPhaseCommit,Map<String, String>)",1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.commit()",1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.commit(Map<String, String>)",1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.prepareCommit()",1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.prepareCommit(Map<String, String>)",1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.rollback()",1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.execute(TwoPhaseCommit...)",1,7,7
"org.apache.lucene.util.TwoPhaseCommitTool.rollback(TwoPhaseCommit...)",1,3,4
"org.apache.lucene.util.UncaughtExceptionsRule.UncaughtExceptionEntry.UncaughtExceptionEntry(Thread,Throwable)",1,1,1
"org.apache.lucene.util.UncaughtExceptionsRule.UncaughtExceptionsInBackgroundThread.UncaughtExceptionsInBackgroundThread(UncaughtExceptionEntry)",1,1,1
"org.apache.lucene.util.UncaughtExceptionsRule.UncaughtExceptionsRule(LuceneTestCase)",1,1,1
"org.apache.lucene.util.UncaughtExceptionsRule.apply(Statement,Description)",1,5,5
"org.apache.lucene.util.UncaughtExceptionsRule.hasNonAssumptionErrors(ArrayList<Throwable>)",3,1,3
"org.apache.lucene.util.UncaughtExceptionsRule.hasUncaughtExceptions()",1,1,1
"org.apache.lucene.util.UncaughtExceptionsRule.restoreHandler()",1,1,1
"org.apache.lucene.util.UncaughtExceptionsRule.setupHandler()",4,4,4
"org.apache.lucene.util.UnicodeUtil.UTF16Result.copyText(UTF16Result)",1,1,1
"org.apache.lucene.util.UnicodeUtil.UTF16Result.setLength(int)",1,2,2
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(CharSequence,int,int,BytesRef)",7,6,11
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(String,int,int,UTF8Result)",7,7,11
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[],int,UTF8Result)",8,3,12
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[],int,int,BytesRef)",7,1,11
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[],int,int,UTF8Result)",7,3,12
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8WithHash(char[],int,int,BytesRef)",7,2,11
"org.apache.lucene.util.UnicodeUtil.UTF8Result.setLength(int)",1,2,2
"org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(BytesRef,CharsRef)",1,1,1
"org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[],int,int,CharsRef)",1,1,6
"org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[],int,int,UTF16Result)",1,3,9
"org.apache.lucene.util.UnicodeUtil.UnicodeUtil()",1,1,1
"org.apache.lucene.util.UnicodeUtil.newString(int[],int,int)",5,4,8
"org.apache.lucene.util.UnicodeUtil.validUTF16String(CharSequence)",6,4,9
"org.apache.lucene.util.UnsafeByteArrayInputStream.UnsafeByteArrayInputStream()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.UnsafeByteArrayInputStream(byte[])",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.UnsafeByteArrayInputStream(byte[],int,int)",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.available()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.mark(int)",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.markSupported()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.reInit(byte[])",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.reInit(byte[],int,int)",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.read()",1,1,2
"org.apache.lucene.util.UnsafeByteArrayInputStream.reset()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testDefaultCtor()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testMark()",1,3,3
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testReinit()",1,3,5
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testSimple()",1,2,3
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testStartPos()",1,3,4
"org.apache.lucene.util.UnsafeByteArrayOutputStream.UnsafeByteArrayOutputStream()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.UnsafeByteArrayOutputStream(byte[])",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.UnsafeByteArrayOutputStream(byte[],int)",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.getStartPos()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.grow(int)",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.length()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.reInit(byte[])",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.reInit(byte[],int)",2,1,2
"org.apache.lucene.util.UnsafeByteArrayOutputStream.toByteArray()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.write(byte[],int,int)",1,2,3
"org.apache.lucene.util.UnsafeByteArrayOutputStream.write(int)",1,2,2
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testArrayWrite()",1,4,5
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testArrayWriteStartNotZero()",1,4,5
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testBufferGrow()",1,6,7
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testDefaultCtor()",1,3,3
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testIllegalBufferSize()",1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testSimpleWrite()",1,3,3
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testStartPos()",1,5,6
"org.apache.lucene.util.Version.onOrAfter(Version)",1,1,1
"org.apache.lucene.util.Vint8.Position.Position()",1,1,1
"org.apache.lucene.util.Vint8.Position.Position(int)",1,1,1
"org.apache.lucene.util.Vint8.Vint8()",1,1,1
"org.apache.lucene.util.Vint8.bytesNeeded(int)",5,1,5
"org.apache.lucene.util.Vint8.decode(InputStream)",4,2,4
"org.apache.lucene.util.Vint8.decode(byte[],Position)",3,1,3
"org.apache.lucene.util.Vint8.encode(int,OutputStream)",1,5,5
"org.apache.lucene.util.Vint8.encode(int,byte[],int)",5,1,5
"org.apache.lucene.util.Vint8Test.testArrayEncodingAndDecoding()",1,3,3
"org.apache.lucene.util.Vint8Test.testBytesNeeded()",1,2,2
"org.apache.lucene.util.Vint8Test.testLegacyCompatibility()",1,2,2
"org.apache.lucene.util.Vint8Test.testPosition()",1,1,1
"org.apache.lucene.util.Vint8Test.testStreamEncodingAndDecoding()",1,3,3
"org.apache.lucene.util.VirtualMethod.VirtualMethod(Class<C>,String,Class<?>...)",2,2,3
"org.apache.lucene.util.VirtualMethod.compareImplementationDistance(Class<? extends C>,VirtualMethod<C>,VirtualMethod<C>)",1,1,1
"org.apache.lucene.util.VirtualMethod.getImplementationDistance(Class<? extends C>)",1,2,2
"org.apache.lucene.util.VirtualMethod.isOverriddenAsOf(Class<? extends C>)",1,1,1
"org.apache.lucene.util.VirtualMethod.reflectImplementationDistance(Class<? extends C>)",2,4,7
"org.apache.lucene.util.WeakIdentityMap.IdentityWeakReference.IdentityWeakReference(Object,ReferenceQueue<Object>)",1,1,2
"org.apache.lucene.util.WeakIdentityMap.IdentityWeakReference.equals(Object)",4,2,4
"org.apache.lucene.util.WeakIdentityMap.IdentityWeakReference.hashCode()",1,1,1
"org.apache.lucene.util.WeakIdentityMap.WeakIdentityMap(Map<IdentityWeakReference, V>)",1,1,1
"org.apache.lucene.util.WeakIdentityMap.clear()",1,1,1
"org.apache.lucene.util.WeakIdentityMap.containsKey(Object)",1,1,1
"org.apache.lucene.util.WeakIdentityMap.get(Object)",1,1,1
"org.apache.lucene.util.WeakIdentityMap.isEmpty()",1,1,1
"org.apache.lucene.util.WeakIdentityMap.newConcurrentHashMap()",1,1,1
"org.apache.lucene.util.WeakIdentityMap.newHashMap()",1,1,1
"org.apache.lucene.util.WeakIdentityMap.put(K,V)",1,1,1
"org.apache.lucene.util.WeakIdentityMap.reap()",1,2,2
"org.apache.lucene.util.WeakIdentityMap.remove(Object)",1,1,1
"org.apache.lucene.util.WeakIdentityMap.size()",2,1,2
"org.apache.lucene.util._TestIgnoredException._TestIgnoredException(String)",1,1,1
"org.apache.lucene.util._TestIgnoredException._TestIgnoredException(String,Throwable)",1,1,1
"org.apache.lucene.util._TestIgnoredException.getMessage()",1,2,2
"org.apache.lucene.util._TestIgnoredException.printStackTrace(PrintStream)",1,2,2
"org.apache.lucene.util._TestUtil.anyFilesExceptWriteLock(Directory)",2,3,4
"org.apache.lucene.util._TestUtil.arrayToString(Object[])",1,3,3
"org.apache.lucene.util._TestUtil.arrayToString(int[])",1,3,3
"org.apache.lucene.util._TestUtil.assertAttributeReflection(AttributeImpl,Map<String, T>)",1,1,1
"org.apache.lucene.util._TestUtil.assertEquals(TopDocs,TopDocs)",1,3,3
"org.apache.lucene.util._TestUtil.bytesToCharSequence(BytesRef,Random)",3,3,4
"org.apache.lucene.util._TestUtil.checkIndex(Directory)",2,2,3
"org.apache.lucene.util._TestUtil.cloneDocument(Document)",1,3,5
"org.apache.lucene.util._TestUtil.createTempFile(String,String,File)",2,2,4
"org.apache.lucene.util._TestUtil.genTempFile(String,String,File)",1,2,2
"org.apache.lucene.util._TestUtil.getTempDir(String)",1,1,2
"org.apache.lucene.util._TestUtil.keepFullyDeletedSegments(IndexWriter)",1,1,2
"org.apache.lucene.util._TestUtil.nextInt(Random,int,int)",1,1,1
"org.apache.lucene.util._TestUtil.randomFixedByteLengthUnicodeString(Random,int)",1,10,11
"org.apache.lucene.util._TestUtil.randomFixedLengthUnicodeString(Random,char[],int,int)",1,7,8
"org.apache.lucene.util._TestUtil.randomHtmlishString(Random,int)",5,17,39
"org.apache.lucene.util._TestUtil.randomRealisticUnicodeString(Random)",1,1,1
"org.apache.lucene.util._TestUtil.randomRealisticUnicodeString(Random,int)",1,1,1
"org.apache.lucene.util._TestUtil.randomRealisticUnicodeString(Random,int,int)",1,2,2
"org.apache.lucene.util._TestUtil.randomRegexpishString(Random)",1,1,1
"org.apache.lucene.util._TestUtil.randomRegexpishString(Random,int)",2,3,14
"org.apache.lucene.util._TestUtil.randomSimpleString(Random)",2,2,3
"org.apache.lucene.util._TestUtil.randomSimpleString(Random,int)",2,2,3
"org.apache.lucene.util._TestUtil.randomUnicodeString(Random)",1,1,1
"org.apache.lucene.util._TestUtil.randomUnicodeString(Random,int)",2,1,2
"org.apache.lucene.util._TestUtil.randomlyRecaseCodePoints(Random,String)",2,3,5
"org.apache.lucene.util._TestUtil.reduceOpenFiles(IndexWriter)",1,4,4
"org.apache.lucene.util._TestUtil.rmDir(File)",7,5,8
"org.apache.lucene.util._TestUtil.setUseCompoundFile(MergePolicy,boolean)",1,3,3
"org.apache.lucene.util._TestUtil.stringToCharSequence(String,Random)",1,1,1
"org.apache.lucene.util._TestUtil.syncConcurrentMerges(IndexWriter)",1,1,1
"org.apache.lucene.util._TestUtil.syncConcurrentMerges(MergeScheduler)",1,2,2
"org.apache.lucene.util._TestUtil.unzip(File,File)",1,5,5
"org.apache.lucene.util.collections.ArrayHashMap.ArrayHashMap()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ArrayHashMap(int)",1,1,2
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator.IndexIterator()",3,1,3
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator.next()",1,1,3
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator.KeyIterator()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator.next()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator.ValueIterator()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator.next()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.calcBaseHashIndex(K)",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.clear()",1,1,2
"org.apache.lucene.util.collections.ArrayHashMap.containsKey(K)",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.containsValue(Object)",3,2,3
"org.apache.lucene.util.collections.ArrayHashMap.equals(Object)",4,4,8
"org.apache.lucene.util.collections.ArrayHashMap.find(K)",3,2,3
"org.apache.lucene.util.collections.ArrayHashMap.findForRemove(K,int)",3,2,3
"org.apache.lucene.util.collections.ArrayHashMap.get(K)",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.grow()",1,2,2
"org.apache.lucene.util.collections.ArrayHashMap.hashCode()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.isEmpty()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.iterator()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.keyIterator()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.printBaseHash()",1,2,2
"org.apache.lucene.util.collections.ArrayHashMap.prvt_put(K,V)",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.put(K,V)",2,2,3
"org.apache.lucene.util.collections.ArrayHashMap.remove(K)",2,1,3
"org.apache.lucene.util.collections.ArrayHashMap.size()",1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.toArray()",1,2,2
"org.apache.lucene.util.collections.ArrayHashMap.toArray(V[])",1,3,4
"org.apache.lucene.util.collections.ArrayHashMap.toString()",1,3,3
"org.apache.lucene.util.collections.ArrayHashMapTest.test0()",1,10,12
"org.apache.lucene.util.collections.ArrayHashMapTest.test1()",3,7,7
"org.apache.lucene.util.collections.ArrayHashMapTest.test2()",1,5,5
"org.apache.lucene.util.collections.ArrayHashMapTest.test3()",1,10,10
"org.apache.lucene.util.collections.ArrayHashMapTest.test4()",1,3,3
"org.apache.lucene.util.collections.ArrayHashMapTest.testEquals()",1,4,4
"org.apache.lucene.util.collections.FloatToObjectMap.FloatToObjectMap()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.FloatToObjectMap(int)",1,1,2
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator.IndexIterator()",3,1,3
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator.next()",1,1,3
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator.remove()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator.KeyIterator()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator.next()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator.remove()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator.ValueIterator()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator.next()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator.remove()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.calcBaseHashIndex(float)",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.clear()",1,1,2
"org.apache.lucene.util.collections.FloatToObjectMap.containsKey(float)",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.containsValue(Object)",3,2,3
"org.apache.lucene.util.collections.FloatToObjectMap.equals(Object)",5,4,9
"org.apache.lucene.util.collections.FloatToObjectMap.find(float)",3,1,3
"org.apache.lucene.util.collections.FloatToObjectMap.findForRemove(float,int)",3,1,3
"org.apache.lucene.util.collections.FloatToObjectMap.get(float)",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.grow()",1,2,2
"org.apache.lucene.util.collections.FloatToObjectMap.hashCode()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.isEmpty()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.iterator()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.keyIterator()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.printBaseHash()",1,2,2
"org.apache.lucene.util.collections.FloatToObjectMap.prvt_put(float,T)",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.put(float,T)",2,2,3
"org.apache.lucene.util.collections.FloatToObjectMap.remove(float)",2,1,3
"org.apache.lucene.util.collections.FloatToObjectMap.size()",1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.toArray()",1,2,2
"org.apache.lucene.util.collections.FloatToObjectMap.toArray(T[])",1,3,4
"org.apache.lucene.util.collections.FloatToObjectMap.toString()",1,3,3
"org.apache.lucene.util.collections.FloatToObjectMapTest.test0()",1,10,12
"org.apache.lucene.util.collections.FloatToObjectMapTest.test1()",3,7,7
"org.apache.lucene.util.collections.FloatToObjectMapTest.test2()",1,5,5
"org.apache.lucene.util.collections.FloatToObjectMapTest.test3()",1,10,10
"org.apache.lucene.util.collections.FloatToObjectMapTest.test4()",1,3,3
"org.apache.lucene.util.collections.FloatToObjectMapTest.testEquals()",1,4,4
"org.apache.lucene.util.collections.IntArray.IntArray()",1,1,1
"org.apache.lucene.util.collections.IntArray.addToArray(int)",1,2,2
"org.apache.lucene.util.collections.IntArray.clear(boolean)",1,1,1
"org.apache.lucene.util.collections.IntArray.equals(Object)",3,1,5
"org.apache.lucene.util.collections.IntArray.get(int)",2,1,2
"org.apache.lucene.util.collections.IntArray.hashCode()",1,1,2
"org.apache.lucene.util.collections.IntArray.init(boolean)",1,1,2
"org.apache.lucene.util.collections.IntArray.intersect(IntArray)",6,1,18
"org.apache.lucene.util.collections.IntArray.intersect(IntHashSet)",1,2,3
"org.apache.lucene.util.collections.IntArray.set(int,int)",2,1,2
"org.apache.lucene.util.collections.IntArray.size()",1,1,1
"org.apache.lucene.util.collections.IntArray.sort()",1,2,2
"org.apache.lucene.util.collections.IntArray.toString()",1,1,2
"org.apache.lucene.util.collections.IntArrayTest.test0()",1,3,3
"org.apache.lucene.util.collections.IntArrayTest.test1()",1,4,4
"org.apache.lucene.util.collections.IntArrayTest.test2()",1,4,4
"org.apache.lucene.util.collections.IntArrayTest.testSet()",1,4,5
"org.apache.lucene.util.collections.IntHashSet.IndexIterator.IndexIterator()",3,1,3
"org.apache.lucene.util.collections.IntHashSet.IndexIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.IndexIterator.next()",1,1,3
"org.apache.lucene.util.collections.IntHashSet.IndexIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.IntHashSet()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.IntHashSet(int)",1,1,2
"org.apache.lucene.util.collections.IntHashSet.KeyIterator.KeyIterator()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.KeyIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.KeyIterator.next()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.KeyIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.add(int)",2,2,3
"org.apache.lucene.util.collections.IntHashSet.calcBaseHashIndex(int)",1,1,1
"org.apache.lucene.util.collections.IntHashSet.clear()",1,1,2
"org.apache.lucene.util.collections.IntHashSet.contains(int)",1,1,1
"org.apache.lucene.util.collections.IntHashSet.find(int)",3,1,3
"org.apache.lucene.util.collections.IntHashSet.findForRemove(int,int)",3,1,3
"org.apache.lucene.util.collections.IntHashSet.grow()",1,2,2
"org.apache.lucene.util.collections.IntHashSet.isEmpty()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.iterator()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.printBaseHash()",1,3,3
"org.apache.lucene.util.collections.IntHashSet.prvt_add(int)",1,1,1
"org.apache.lucene.util.collections.IntHashSet.remove(int)",2,1,3
"org.apache.lucene.util.collections.IntHashSet.size()",1,1,1
"org.apache.lucene.util.collections.IntHashSet.toArray()",1,2,2
"org.apache.lucene.util.collections.IntHashSet.toArray(int[])",1,3,4
"org.apache.lucene.util.collections.IntHashSet.toHashString()",1,4,4
"org.apache.lucene.util.collections.IntHashSet.toString()",1,3,3
"org.apache.lucene.util.collections.IntHashSetTest.test0()",1,1,1
"org.apache.lucene.util.collections.IntHashSetTest.test1()",1,3,3
"org.apache.lucene.util.collections.IntHashSetTest.test2()",1,2,2
"org.apache.lucene.util.collections.IntHashSetTest.test3()",1,5,5
"org.apache.lucene.util.collections.IntHashSetTest.test4()",1,4,4
"org.apache.lucene.util.collections.IntHashSetTest.testMySet()",1,4,4
"org.apache.lucene.util.collections.IntHashSetTest.testRegularJavaSet()",1,4,4
"org.apache.lucene.util.collections.IntHashSetTest.testToArray()",1,6,6
"org.apache.lucene.util.collections.IntHashSetTest.testZZMySet()",1,4,4
"org.apache.lucene.util.collections.IntHashSetTest.testZZRegularJavaSet()",1,4,4
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator.IndexIterator()",3,1,3
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator.next()",1,1,3
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.IntToDoubleMap()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.IntToDoubleMap(int)",1,1,2
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator.KeyIterator()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator.next()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator.ValueIterator()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator.next()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.calcBaseHashIndex(int)",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.clear()",1,1,2
"org.apache.lucene.util.collections.IntToDoubleMap.containsKey(int)",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.containsValue(double)",3,2,3
"org.apache.lucene.util.collections.IntToDoubleMap.equals(Object)",5,2,5
"org.apache.lucene.util.collections.IntToDoubleMap.find(int)",3,1,3
"org.apache.lucene.util.collections.IntToDoubleMap.findForRemove(int,int)",3,1,3
"org.apache.lucene.util.collections.IntToDoubleMap.get(int)",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.grow()",1,2,2
"org.apache.lucene.util.collections.IntToDoubleMap.hashCode()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.isEmpty()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.iterator()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.keyIterator()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.printBaseHash()",1,2,2
"org.apache.lucene.util.collections.IntToDoubleMap.prvt_put(int,double)",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.put(int,double)",2,2,3
"org.apache.lucene.util.collections.IntToDoubleMap.remove(int)",2,1,3
"org.apache.lucene.util.collections.IntToDoubleMap.size()",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.toArray()",1,2,2
"org.apache.lucene.util.collections.IntToDoubleMap.toArray(double[])",1,3,4
"org.apache.lucene.util.collections.IntToDoubleMap.toString()",1,3,3
"org.apache.lucene.util.collections.IntToDoubleMapTest.assertGround(double)",1,1,1
"org.apache.lucene.util.collections.IntToDoubleMapTest.test0()",1,10,12
"org.apache.lucene.util.collections.IntToDoubleMapTest.test1()",3,7,7
"org.apache.lucene.util.collections.IntToDoubleMapTest.test2()",1,5,5
"org.apache.lucene.util.collections.IntToDoubleMapTest.test3()",1,10,10
"org.apache.lucene.util.collections.IntToDoubleMapTest.test4()",1,3,3
"org.apache.lucene.util.collections.IntToDoubleMapTest.testEquals()",1,4,4
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator.IndexIterator()",3,1,3
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator.next()",1,1,3
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.IntToIntMap()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.IntToIntMap(int)",1,1,2
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator.KeyIterator()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator.next()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator.ValueIterator()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator.next()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.calcBaseHashIndex(int)",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.clear()",1,1,2
"org.apache.lucene.util.collections.IntToIntMap.containsKey(int)",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.containsValue(int)",3,2,3
"org.apache.lucene.util.collections.IntToIntMap.equals(Object)",5,2,5
"org.apache.lucene.util.collections.IntToIntMap.find(int)",3,1,3
"org.apache.lucene.util.collections.IntToIntMap.findForRemove(int,int)",3,1,3
"org.apache.lucene.util.collections.IntToIntMap.get(int)",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.grow()",1,2,2
"org.apache.lucene.util.collections.IntToIntMap.hashCode()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.isEmpty()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.iterator()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.keyIterator()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.printBaseHash()",1,2,2
"org.apache.lucene.util.collections.IntToIntMap.prvt_put(int,int)",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.put(int,int)",2,2,3
"org.apache.lucene.util.collections.IntToIntMap.remove(int)",2,1,3
"org.apache.lucene.util.collections.IntToIntMap.size()",1,1,1
"org.apache.lucene.util.collections.IntToIntMap.toArray()",1,2,2
"org.apache.lucene.util.collections.IntToIntMap.toArray(int[])",1,3,4
"org.apache.lucene.util.collections.IntToIntMap.toString()",1,3,3
"org.apache.lucene.util.collections.IntToIntMapTest.assertGround(int)",1,1,1
"org.apache.lucene.util.collections.IntToIntMapTest.test0()",1,10,12
"org.apache.lucene.util.collections.IntToIntMapTest.test1()",3,7,7
"org.apache.lucene.util.collections.IntToIntMapTest.test2()",1,5,5
"org.apache.lucene.util.collections.IntToIntMapTest.test3()",1,10,10
"org.apache.lucene.util.collections.IntToIntMapTest.test4()",1,3,3
"org.apache.lucene.util.collections.IntToIntMapTest.testEquals()",1,4,4
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator.IndexIterator()",3,1,3
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator.next()",1,1,3
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.IntToObjectMap()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.IntToObjectMap(int)",1,1,2
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator.KeyIterator()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator.next()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator.ValueIterator()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator.next()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator.remove()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.calcBaseHashIndex(int)",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.clear()",1,1,2
"org.apache.lucene.util.collections.IntToObjectMap.containsKey(int)",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.containsValue(Object)",3,2,3
"org.apache.lucene.util.collections.IntToObjectMap.equals(Object)",5,4,9
"org.apache.lucene.util.collections.IntToObjectMap.find(int)",3,1,3
"org.apache.lucene.util.collections.IntToObjectMap.findForRemove(int,int)",3,1,3
"org.apache.lucene.util.collections.IntToObjectMap.get(int)",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.grow()",1,2,2
"org.apache.lucene.util.collections.IntToObjectMap.hashCode()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.isEmpty()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.iterator()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.keyIterator()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.printBaseHash()",1,2,2
"org.apache.lucene.util.collections.IntToObjectMap.prvt_put(int,T)",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.put(int,T)",2,2,3
"org.apache.lucene.util.collections.IntToObjectMap.remove(int)",2,1,3
"org.apache.lucene.util.collections.IntToObjectMap.size()",1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.toArray()",1,2,2
"org.apache.lucene.util.collections.IntToObjectMap.toArray(T[])",1,3,4
"org.apache.lucene.util.collections.IntToObjectMap.toString()",1,3,3
"org.apache.lucene.util.collections.IntToObjectMapTest.test0()",1,10,12
"org.apache.lucene.util.collections.IntToObjectMapTest.test1()",3,7,7
"org.apache.lucene.util.collections.IntToObjectMapTest.test2()",1,5,5
"org.apache.lucene.util.collections.IntToObjectMapTest.test3()",1,10,10
"org.apache.lucene.util.collections.IntToObjectMapTest.test4()",1,3,3
"org.apache.lucene.util.collections.IntToObjectMapTest.testEquals()",1,4,4
"org.apache.lucene.util.collections.LRUHashMap.LRUHashMap(int)",1,1,1
"org.apache.lucene.util.collections.LRUHashMap.getMaxSize()",1,1,1
"org.apache.lucene.util.collections.LRUHashMap.removeEldestEntry(Entry<K, V>)",1,1,1
"org.apache.lucene.util.collections.LRUHashMap.setMaxSize(int)",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator.IndexIterator()",3,1,3
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator.next()",1,1,3
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator.KeyIterator()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator.next()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ObjectToFloatMap()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ObjectToFloatMap(int)",1,1,2
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator.ValueIterator()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator.next()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.calcBaseHashIndex(K)",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.clear()",1,1,2
"org.apache.lucene.util.collections.ObjectToFloatMap.containsKey(K)",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.containsValue(float)",3,2,3
"org.apache.lucene.util.collections.ObjectToFloatMap.equals(Object)",4,2,4
"org.apache.lucene.util.collections.ObjectToFloatMap.find(K)",3,2,3
"org.apache.lucene.util.collections.ObjectToFloatMap.findForRemove(K,int)",3,2,3
"org.apache.lucene.util.collections.ObjectToFloatMap.get(K)",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.grow()",1,2,2
"org.apache.lucene.util.collections.ObjectToFloatMap.hashCode()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.isEmpty()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.iterator()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.keyIterator()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.printBaseHash()",1,2,2
"org.apache.lucene.util.collections.ObjectToFloatMap.prvt_put(K,float)",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.put(K,float)",2,2,3
"org.apache.lucene.util.collections.ObjectToFloatMap.remove(K)",2,1,3
"org.apache.lucene.util.collections.ObjectToFloatMap.size()",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.toArray()",1,2,2
"org.apache.lucene.util.collections.ObjectToFloatMap.toArray(float[])",1,3,4
"org.apache.lucene.util.collections.ObjectToFloatMap.toString()",1,3,3
"org.apache.lucene.util.collections.ObjectToFloatMapTest.assertNaN(float)",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMapTest.assertNotNaN(float)",1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test0()",1,10,12
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test1()",3,7,7
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test2()",1,5,5
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test3()",1,10,10
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test4()",1,3,3
"org.apache.lucene.util.collections.ObjectToFloatMapTest.testEquals()",1,4,4
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator.IndexIterator()",3,1,3
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator.next()",1,1,3
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator.KeyIterator()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator.next()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ObjectToIntMap()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ObjectToIntMap(int)",1,1,2
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator.ValueIterator()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator.hasNext()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator.next()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator.remove()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.calcBaseHashIndex(K)",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.clear()",1,1,2
"org.apache.lucene.util.collections.ObjectToIntMap.containsKey(K)",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.containsValue(int)",3,2,3
"org.apache.lucene.util.collections.ObjectToIntMap.equals(Object)",4,2,4
"org.apache.lucene.util.collections.ObjectToIntMap.find(K)",3,2,3
"org.apache.lucene.util.collections.ObjectToIntMap.findForRemove(K,int)",3,2,3
"org.apache.lucene.util.collections.ObjectToIntMap.get(K)",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.grow()",1,2,2
"org.apache.lucene.util.collections.ObjectToIntMap.hashCode()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.isEmpty()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.iterator()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.keyIterator()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.printBaseHash()",1,2,2
"org.apache.lucene.util.collections.ObjectToIntMap.prvt_put(K,int)",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.put(K,int)",2,2,3
"org.apache.lucene.util.collections.ObjectToIntMap.remove(K)",2,1,3
"org.apache.lucene.util.collections.ObjectToIntMap.size()",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.toArray()",1,2,2
"org.apache.lucene.util.collections.ObjectToIntMap.toArray(int[])",1,3,4
"org.apache.lucene.util.collections.ObjectToIntMap.toString()",1,3,3
"org.apache.lucene.util.collections.ObjectToIntMapTest.assertIntegerMaxValue(int)",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMapTest.assertNotIntegerMaxValue(int)",1,1,1
"org.apache.lucene.util.collections.ObjectToIntMapTest.test0()",1,10,12
"org.apache.lucene.util.collections.ObjectToIntMapTest.test1()",3,7,7
"org.apache.lucene.util.collections.ObjectToIntMapTest.test2()",1,5,5
"org.apache.lucene.util.collections.ObjectToIntMapTest.test3()",1,10,10
"org.apache.lucene.util.collections.ObjectToIntMapTest.test4()",1,3,3
"org.apache.lucene.util.collections.ObjectToIntMapTest.testEquals()",1,4,4
"org.apache.lucene.util.collections.TestLRUHashMap.testLRU()",1,1,1
"org.apache.lucene.util.encoding.ChunksIntEncoder.ChunksIntEncoder(int)",1,1,1
"org.apache.lucene.util.encoding.ChunksIntEncoder.close()",1,2,2
"org.apache.lucene.util.encoding.ChunksIntEncoder.encodeChunk()",1,2,2
"org.apache.lucene.util.encoding.ChunksIntEncoder.reInit(OutputStream)",1,1,1
"org.apache.lucene.util.encoding.DGapIntDecoder.DGapIntDecoder(IntDecoder)",1,1,1
"org.apache.lucene.util.encoding.DGapIntDecoder.decode()",2,1,2
"org.apache.lucene.util.encoding.DGapIntDecoder.reInit(InputStream)",1,1,1
"org.apache.lucene.util.encoding.DGapIntDecoder.toString()",1,1,1
"org.apache.lucene.util.encoding.DGapIntEncoder.DGapIntEncoder(IntEncoder)",1,1,1
"org.apache.lucene.util.encoding.DGapIntEncoder.createMatchingDecoder()",1,1,1
"org.apache.lucene.util.encoding.DGapIntEncoder.encode(int)",1,1,1
"org.apache.lucene.util.encoding.DGapIntEncoder.reInit(OutputStream)",1,1,1
"org.apache.lucene.util.encoding.DGapIntEncoder.toString()",1,1,1
"org.apache.lucene.util.encoding.EightFlagsIntDecoder.decode()",4,3,5
"org.apache.lucene.util.encoding.EightFlagsIntDecoder.reInit(InputStream)",1,1,1
"org.apache.lucene.util.encoding.EightFlagsIntDecoder.toString()",1,1,1
"org.apache.lucene.util.encoding.EightFlagsIntEncoder.EightFlagsIntEncoder()",1,1,1
"org.apache.lucene.util.encoding.EightFlagsIntEncoder.createMatchingDecoder()",1,1,1
"org.apache.lucene.util.encoding.EightFlagsIntEncoder.encode(int)",1,2,3
"org.apache.lucene.util.encoding.EightFlagsIntEncoder.toString()",1,1,1
"org.apache.lucene.util.encoding.EncodingSpeed.encoderTest(IntEncoder,int[],int)",1,7,9
"org.apache.lucene.util.encoding.EncodingSpeed.main(String[])",1,1,1
"org.apache.lucene.util.encoding.EncodingSpeed.testFacetIDs(int[],int)",1,1,1
"org.apache.lucene.util.encoding.EncodingTest.decoding(ByteArrayOutputStream,IntDecoder)",1,3,3
"org.apache.lucene.util.encoding.EncodingTest.encoderTest(IntEncoder)",1,3,3
"org.apache.lucene.util.encoding.EncodingTest.encoding(IntEncoder,ByteArrayOutputStream)",1,3,3
"org.apache.lucene.util.encoding.EncodingTest.setData()",1,2,2
"org.apache.lucene.util.encoding.EncodingTest.testSimpleInt()",1,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGap()",1,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGapEightFlags()",1,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGapFourFlags()",1,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGapNOnes3()",1,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGapNOnes4()",1,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueValues()",1,1,1
"org.apache.lucene.util.encoding.EncodingTest.testVInt8()",1,1,1
"org.apache.lucene.util.encoding.FourFlagsIntDecoder.decode()",4,3,5
"org.apache.lucene.util.encoding.FourFlagsIntDecoder.reInit(InputStream)",1,1,1
"org.apache.lucene.util.encoding.FourFlagsIntDecoder.toString()",1,1,1
"org.apache.lucene.util.encoding.FourFlagsIntEncoder.FourFlagsIntEncoder()",1,1,1
"org.apache.lucene.util.encoding.FourFlagsIntEncoder.createMatchingDecoder()",1,1,1
"org.apache.lucene.util.encoding.FourFlagsIntEncoder.encode(int)",1,2,3
"org.apache.lucene.util.encoding.FourFlagsIntEncoder.toString()",1,1,1
"org.apache.lucene.util.encoding.IntDecoder.reInit(InputStream)",1,1,1
"org.apache.lucene.util.encoding.IntEncoder.IntEncoder()",1,1,1
"org.apache.lucene.util.encoding.IntEncoder.close()",1,2,2
"org.apache.lucene.util.encoding.IntEncoder.reInit(OutputStream)",1,1,1
"org.apache.lucene.util.encoding.IntEncoderFilter.IntEncoderFilter(IntEncoder)",1,1,1
"org.apache.lucene.util.encoding.IntEncoderFilter.close()",1,1,1
"org.apache.lucene.util.encoding.IntEncoderFilter.reInit(OutputStream)",1,1,1
"org.apache.lucene.util.encoding.NOnesIntDecoder.NOnesIntDecoder(int)",1,1,1
"org.apache.lucene.util.encoding.NOnesIntDecoder.decode()",5,1,6
"org.apache.lucene.util.encoding.NOnesIntDecoder.reInit(InputStream)",1,1,1
"org.apache.lucene.util.encoding.NOnesIntDecoder.toString()",1,1,1
"org.apache.lucene.util.encoding.NOnesIntEncoder.NOnesIntEncoder(int)",1,1,1
"org.apache.lucene.util.encoding.NOnesIntEncoder.close()",1,2,2
"org.apache.lucene.util.encoding.NOnesIntEncoder.createMatchingDecoder()",1,1,1
"org.apache.lucene.util.encoding.NOnesIntEncoder.encode(int)",2,4,4
"org.apache.lucene.util.encoding.NOnesIntEncoder.reInit(OutputStream)",1,1,1
"org.apache.lucene.util.encoding.NOnesIntEncoder.toString()",1,1,1
"org.apache.lucene.util.encoding.SimpleIntDecoder.decode()",4,2,4
"org.apache.lucene.util.encoding.SimpleIntDecoder.toString()",1,1,1
"org.apache.lucene.util.encoding.SimpleIntEncoder.createMatchingDecoder()",1,1,1
"org.apache.lucene.util.encoding.SimpleIntEncoder.encode(int)",1,1,1
"org.apache.lucene.util.encoding.SimpleIntEncoder.toString()",1,1,1
"org.apache.lucene.util.encoding.SortingIntEncoder.SortingIntEncoder(IntEncoder)",1,1,1
"org.apache.lucene.util.encoding.SortingIntEncoder.close()",2,2,3
"org.apache.lucene.util.encoding.SortingIntEncoder.createMatchingDecoder()",1,1,1
"org.apache.lucene.util.encoding.SortingIntEncoder.encode(int)",1,2,2
"org.apache.lucene.util.encoding.SortingIntEncoder.reInit(OutputStream)",1,1,1
"org.apache.lucene.util.encoding.SortingIntEncoder.toString()",1,1,1
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.UniqueValuesIntEncoder(IntEncoder)",1,1,1
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.createMatchingDecoder()",1,1,1
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.encode(int)",1,2,2
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.reInit(OutputStream)",1,1,1
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.toString()",1,1,1
"org.apache.lucene.util.encoding.VInt8IntDecoder.decode()",5,2,5
"org.apache.lucene.util.encoding.VInt8IntDecoder.toString()",1,1,1
"org.apache.lucene.util.encoding.VInt8IntEncoder.createMatchingDecoder()",1,1,1
"org.apache.lucene.util.encoding.VInt8IntEncoder.encode(int)",1,5,5
"org.apache.lucene.util.encoding.VInt8IntEncoder.toString()",1,1,1
"org.apache.lucene.util.fst.Builder.Builder(INPUT_TYPE,Outputs<T>)",1,1,1
"org.apache.lucene.util.fst.Builder.Builder(INPUT_TYPE,int,int,boolean,boolean,int,Outputs<T>,FreezeTail<T>,boolean)",1,1,3
"org.apache.lucene.util.fst.Builder.CompiledNode.isCompiled()",1,1,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.UnCompiledNode(Builder<T>,int)",1,1,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.addArc(int,Node)",1,2,4
"org.apache.lucene.util.fst.Builder.UnCompiledNode.clear()",1,1,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.deleteLast(int,Node)",1,1,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.getLastOutput(int)",1,1,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.isCompiled()",1,1,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.prependOutput(T)",1,3,3
"org.apache.lucene.util.fst.Builder.UnCompiledNode.replaceLast(int,Node,T,boolean)",1,1,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.setLastOutput(int,T)",1,1,1
"org.apache.lucene.util.fst.Builder.add(IntsRef,T)",4,8,14
"org.apache.lucene.util.fst.Builder.compileAllTargets(UnCompiledNode<T>,int)",1,3,4
"org.apache.lucene.util.fst.Builder.compileNode(UnCompiledNode<T>,int)",1,3,6
"org.apache.lucene.util.fst.Builder.finish()",4,3,8
"org.apache.lucene.util.fst.Builder.freezeTail(int)",1,8,18
"org.apache.lucene.util.fst.Builder.getMappedStateCount()",1,1,2
"org.apache.lucene.util.fst.Builder.getTermCount()",1,1,1
"org.apache.lucene.util.fst.Builder.getTotStateCount()",1,1,1
"org.apache.lucene.util.fst.Builder.setAllowArrayArcs(boolean)",1,1,1
"org.apache.lucene.util.fst.Builder.validOutput(T)",1,2,2
"org.apache.lucene.util.fst.ByteSequenceOutputs.ByteSequenceOutputs()",1,1,1
"org.apache.lucene.util.fst.ByteSequenceOutputs.add(BytesRef,BytesRef)",3,3,3
"org.apache.lucene.util.fst.ByteSequenceOutputs.common(BytesRef,BytesRef)",6,1,6
"org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()",1,1,1
"org.apache.lucene.util.fst.ByteSequenceOutputs.getSingleton()",1,1,1
"org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(BytesRef)",1,1,1
"org.apache.lucene.util.fst.ByteSequenceOutputs.read(DataInput)",2,2,2
"org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(BytesRef,BytesRef)",3,1,3
"org.apache.lucene.util.fst.ByteSequenceOutputs.write(BytesRef,DataOutput)",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.BytesRefFSTEnum(FST<T>)",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.current()",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.getCurrentLabel()",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.getTargetLabel()",2,1,2
"org.apache.lucene.util.fst.BytesRefFSTEnum.grow()",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.next()",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.seekCeil(BytesRef)",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.seekExact(BytesRef)",2,2,2
"org.apache.lucene.util.fst.BytesRefFSTEnum.seekFloor(BytesRef)",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.setCurrentLabel(int)",1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.setResult()",2,1,2
"org.apache.lucene.util.fst.FST.Arc.copyFrom(Arc<T>)",1,1,2
"org.apache.lucene.util.fst.FST.Arc.flag(int)",1,1,1
"org.apache.lucene.util.fst.FST.Arc.isFinal()",1,1,1
"org.apache.lucene.util.fst.FST.Arc.isLast()",1,1,1
"org.apache.lucene.util.fst.FST.Arc.toString()",1,7,7
"org.apache.lucene.util.fst.FST.ArcAndState.ArcAndState(Arc<T>,IntsRef)",1,1,1
"org.apache.lucene.util.fst.FST.BytesReader.BytesReader(byte[],int)",1,1,1
"org.apache.lucene.util.fst.FST.BytesWriter.BytesWriter()",1,1,1
"org.apache.lucene.util.fst.FST.BytesWriter.setPosWrite(int)",1,2,2
"org.apache.lucene.util.fst.FST.BytesWriter.writeByte(byte)",1,2,2
"org.apache.lucene.util.fst.FST.BytesWriter.writeBytes(byte[],int,int)",1,1,1
"org.apache.lucene.util.fst.FST.FST(DataInput,Outputs<T>)",2,6,9
"org.apache.lucene.util.fst.FST.FST(INPUT_TYPE,Outputs<T>,boolean)",1,1,2
"org.apache.lucene.util.fst.FST.FST(INPUT_TYPE,int[],Outputs<T>)",1,1,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.ForwardBytesReader(byte[],int)",1,1,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.readByte()",1,1,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.readBytes(byte[],int,int)",1,1,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.skip(int)",1,1,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.skip(int,int)",1,1,1
"org.apache.lucene.util.fst.FST.NodeAndInCount.NodeAndInCount(int,int)",1,1,1
"org.apache.lucene.util.fst.FST.NodeAndInCount.compareTo(NodeAndInCount)",3,1,3
"org.apache.lucene.util.fst.FST.NodeQueue.NodeQueue(int)",1,1,1
"org.apache.lucene.util.fst.FST.NodeQueue.lessThan(NodeAndInCount,NodeAndInCount)",1,1,1
"org.apache.lucene.util.fst.FST.ReverseBytesReader.ReverseBytesReader(byte[],int)",1,1,1
"org.apache.lucene.util.fst.FST.ReverseBytesReader.readByte()",1,1,1
"org.apache.lucene.util.fst.FST.ReverseBytesReader.readBytes(byte[],int,int)",1,1,2
"org.apache.lucene.util.fst.FST.ReverseBytesReader.skip(int)",1,1,1
"org.apache.lucene.util.fst.FST.ReverseBytesReader.skip(int,int)",1,1,1
"org.apache.lucene.util.fst.FST.addNode(UnCompiledNode<T>)",3,13,25
"org.apache.lucene.util.fst.FST.cacheRootArcs()",5,4,5
"org.apache.lucene.util.fst.FST.findTargetArc(int,Arc<T>,Arc<T>,BytesReader)",14,13,17
"org.apache.lucene.util.fst.FST.finish(int)",2,1,4
"org.apache.lucene.util.fst.FST.flag(int,int)",1,1,1
"org.apache.lucene.util.fst.FST.getArcCount()",1,1,1
"org.apache.lucene.util.fst.FST.getArcWithOutputCount()",1,1,1
"org.apache.lucene.util.fst.FST.getBytesReader(int)",2,1,2
"org.apache.lucene.util.fst.FST.getEmptyOutput()",1,1,1
"org.apache.lucene.util.fst.FST.getFirstArc(Arc<T>)",1,1,2
"org.apache.lucene.util.fst.FST.getInputType()",1,1,1
"org.apache.lucene.util.fst.FST.getNodeAddress(int)",2,1,2
"org.apache.lucene.util.fst.FST.getNodeCount()",1,1,1
"org.apache.lucene.util.fst.FST.isExpandedTarget(Arc<T>)",2,2,2
"org.apache.lucene.util.fst.FST.pack(int,int)",9,23,48
"org.apache.lucene.util.fst.FST.read(File,Outputs<T>)",1,2,2
"org.apache.lucene.util.fst.FST.readFirstRealTargetArc(int,Arc<T>,BytesReader)",1,3,3
"org.apache.lucene.util.fst.FST.readFirstTargetArc(Arc<T>,Arc<T>)",2,2,3
"org.apache.lucene.util.fst.FST.readLabel(DataInput)",1,3,3
"org.apache.lucene.util.fst.FST.readLastTargetArc(Arc<T>,Arc<T>)",2,10,10
"org.apache.lucene.util.fst.FST.readNextArc(Arc<T>)",3,2,3
"org.apache.lucene.util.fst.FST.readNextArcLabel(Arc<T>)",1,5,5
"org.apache.lucene.util.fst.FST.readNextRealArc(Arc<T>,BytesReader)",1,10,13
"org.apache.lucene.util.fst.FST.save(DataOutput)",3,5,9
"org.apache.lucene.util.fst.FST.save(File)",1,2,2
"org.apache.lucene.util.fst.FST.seekToNextNode(BytesReader)",3,7,8
"org.apache.lucene.util.fst.FST.setAllowArrayArcs(boolean)",1,1,1
"org.apache.lucene.util.fst.FST.setEmptyOutput(T)",1,2,4
"org.apache.lucene.util.fst.FST.shouldExpand(UnCompiledNode<T>)",1,1,4
"org.apache.lucene.util.fst.FST.sizeInBytes()",1,1,3
"org.apache.lucene.util.fst.FST.targetHasArcs(Arc<T>)",1,1,1
"org.apache.lucene.util.fst.FST.writeLabel(int)",1,3,3
"org.apache.lucene.util.fst.FSTEnum.FSTEnum(FST<T>)",1,1,1
"org.apache.lucene.util.fst.FSTEnum.doNext()",4,2,4
"org.apache.lucene.util.fst.FSTEnum.doSeekCeil()",19,13,21
"org.apache.lucene.util.fst.FSTEnum.doSeekExact()",4,3,4
"org.apache.lucene.util.fst.FSTEnum.doSeekFloor()",20,19,27
"org.apache.lucene.util.fst.FSTEnum.getArc(int)",1,1,2
"org.apache.lucene.util.fst.FSTEnum.incr()",1,3,3
"org.apache.lucene.util.fst.FSTEnum.pushFirst()",3,2,3
"org.apache.lucene.util.fst.FSTEnum.pushLast()",3,2,3
"org.apache.lucene.util.fst.FSTEnum.rewindPrefix()",5,5,6
"org.apache.lucene.util.fst.IntSequenceOutputs.IntSequenceOutputs()",1,1,1
"org.apache.lucene.util.fst.IntSequenceOutputs.add(IntsRef,IntsRef)",3,3,3
"org.apache.lucene.util.fst.IntSequenceOutputs.common(IntsRef,IntsRef)",6,1,6
"org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()",1,1,1
"org.apache.lucene.util.fst.IntSequenceOutputs.getSingleton()",1,1,1
"org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(IntsRef)",1,1,1
"org.apache.lucene.util.fst.IntSequenceOutputs.read(DataInput)",2,3,3
"org.apache.lucene.util.fst.IntSequenceOutputs.subtract(IntsRef,IntsRef)",3,1,3
"org.apache.lucene.util.fst.IntSequenceOutputs.write(IntsRef,DataOutput)",1,2,2
"org.apache.lucene.util.fst.IntsRefFSTEnum.IntsRefFSTEnum(FST<T>)",1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.current()",1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.getCurrentLabel()",1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.getTargetLabel()",2,1,2
"org.apache.lucene.util.fst.IntsRefFSTEnum.grow()",1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.next()",1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.seekCeil(IntsRef)",1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.seekExact(IntsRef)",2,2,2
"org.apache.lucene.util.fst.IntsRefFSTEnum.seekFloor(IntsRef)",1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.setCurrentLabel(int)",1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.setResult()",2,1,2
"org.apache.lucene.util.fst.NoOutputs.NoOutputs()",1,1,1
"org.apache.lucene.util.fst.NoOutputs.add(Object,Object)",1,1,1
"org.apache.lucene.util.fst.NoOutputs.common(Object,Object)",1,1,1
"org.apache.lucene.util.fst.NoOutputs.getNoOutput()",1,1,1
"org.apache.lucene.util.fst.NoOutputs.getSingleton()",1,1,1
"org.apache.lucene.util.fst.NoOutputs.outputToString(Object)",1,1,1
"org.apache.lucene.util.fst.NoOutputs.read(DataInput)",1,1,1
"org.apache.lucene.util.fst.NoOutputs.subtract(Object,Object)",1,1,1
"org.apache.lucene.util.fst.NoOutputs.write(Object,DataOutput)",1,1,1
"org.apache.lucene.util.fst.NodeHash.NodeHash(FST<T>)",1,1,1
"org.apache.lucene.util.fst.NodeHash.add(UnCompiledNode<T>)",4,4,5
"org.apache.lucene.util.fst.NodeHash.addNew(int)",3,1,3
"org.apache.lucene.util.fst.NodeHash.count()",1,1,1
"org.apache.lucene.util.fst.NodeHash.hash(UnCompiledNode<T>)",1,2,3
"org.apache.lucene.util.fst.NodeHash.hash(int)",3,2,4
"org.apache.lucene.util.fst.NodeHash.nodesEqual(UnCompiledNode<T>,int,BytesReader)",6,6,11
"org.apache.lucene.util.fst.NodeHash.rehash()",1,3,3
"org.apache.lucene.util.fst.Outputs.merge(T,T)",1,1,1
"org.apache.lucene.util.fst.PairOutputs.Pair.Pair(A,B)",1,1,1
"org.apache.lucene.util.fst.PairOutputs.Pair.equals(Object)",3,4,4
"org.apache.lucene.util.fst.PairOutputs.Pair.hashCode()",1,1,1
"org.apache.lucene.util.fst.PairOutputs.PairOutputs(Outputs<A>,Outputs<B>)",1,1,1
"org.apache.lucene.util.fst.PairOutputs.add(Pair<A, B>,Pair<A, B>)",1,1,1
"org.apache.lucene.util.fst.PairOutputs.common(Pair<A, B>,Pair<A, B>)",1,1,1
"org.apache.lucene.util.fst.PairOutputs.getNoOutput()",1,1,1
"org.apache.lucene.util.fst.PairOutputs.newPair(A,B)",2,5,5
"org.apache.lucene.util.fst.PairOutputs.outputToString(Pair<A, B>)",1,1,1
"org.apache.lucene.util.fst.PairOutputs.read(DataInput)",1,1,1
"org.apache.lucene.util.fst.PairOutputs.subtract(Pair<A, B>,Pair<A, B>)",1,1,1
"org.apache.lucene.util.fst.PairOutputs.toString()",1,1,1
"org.apache.lucene.util.fst.PairOutputs.valid(Pair<A, B>)",5,3,8
"org.apache.lucene.util.fst.PairOutputs.write(Pair<A, B>,DataOutput)",1,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.PositiveIntOutputs(boolean)",1,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.add(Long,Long)",3,1,3
"org.apache.lucene.util.fst.PositiveIntOutputs.common(Long,Long)",4,3,5
"org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()",1,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.getSingleton(boolean)",1,1,2
"org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(Long)",1,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.read(DataInput)",2,1,2
"org.apache.lucene.util.fst.PositiveIntOutputs.subtract(Long,Long)",3,2,3
"org.apache.lucene.util.fst.PositiveIntOutputs.toString()",1,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.valid(Long)",1,1,2
"org.apache.lucene.util.fst.PositiveIntOutputs.write(Long,DataOutput)",1,1,1
"org.apache.lucene.util.fst.TestFSTs.FSTTester.FSTTester(Random,Directory,int,List<InputOutput<T>>,Outputs<T>,boolean)",1,1,1
"org.apache.lucene.util.fst.TestFSTs.FSTTester.InputOutput.InputOutput(IntsRef,T)",1,1,1
"org.apache.lucene.util.fst.TestFSTs.FSTTester.InputOutput.compareTo(InputOutput<T>)",2,2,2
"org.apache.lucene.util.fst.TestFSTs.FSTTester.doTest()",1,2,2
"org.apache.lucene.util.fst.TestFSTs.FSTTester.doTest(int,int,boolean)",1,19,24
"org.apache.lucene.util.fst.TestFSTs.FSTTester.randomAcceptedWord(FST<T>,IntsRef)",3,4,5
"org.apache.lucene.util.fst.TestFSTs.FSTTester.run(FST<T>,IntsRef,int[])",4,2,7
"org.apache.lucene.util.fst.TestFSTs.FSTTester.verifyPruned(int,FST<T>,int,int)",2,26,36
"org.apache.lucene.util.fst.TestFSTs.FSTTester.verifyUnPruned(int,FST<T>)",14,55,58
"org.apache.lucene.util.fst.TestFSTs.TwoLongs.TwoLongs(long,long)",1,1,1
"org.apache.lucene.util.fst.TestFSTs.VisitTerms.VisitTerms(String,String,int,int,Outputs<T>,boolean,boolean)",1,1,2
"org.apache.lucene.util.fst.TestFSTs.VisitTerms.run(int,boolean,boolean)",17,12,23
"org.apache.lucene.util.fst.TestFSTs.assertSame(TermEnum,IntsRefFSTEnum<?>,boolean)",1,5,5
"org.apache.lucene.util.fst.TestFSTs.checkStopNodes(FST<Long>,PositiveIntOutputs)",1,1,1
"org.apache.lucene.util.fst.TestFSTs.doTest(int,IntsRef[])",1,15,15
"org.apache.lucene.util.fst.TestFSTs.getRandomString()",1,2,2
"org.apache.lucene.util.fst.TestFSTs.inputModeToString(int)",2,1,2
"org.apache.lucene.util.fst.TestFSTs.inputToString(int,IntsRef)",1,1,1
"org.apache.lucene.util.fst.TestFSTs.inputToString(int,IntsRef,boolean)",3,3,3
"org.apache.lucene.util.fst.TestFSTs.main(String[])",1,18,21
"org.apache.lucene.util.fst.TestFSTs.setUp()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.simpleRandomString(Random)",2,2,3
"org.apache.lucene.util.fst.TestFSTs.tearDown()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.testBasicFSA()",1,9,9
"org.apache.lucene.util.fst.TestFSTs.testBigSet()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.testExpandedCloseToRoot()",6,6,12
"org.apache.lucene.util.fst.TestFSTs.testFinalOutputOnEndState()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.testInternalFinalState()",1,1,2
"org.apache.lucene.util.fst.TestFSTs.testLargeOutputsOnArrayArcs()",1,4,4
"org.apache.lucene.util.fst.TestFSTs.testNonFinalStopNode()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.testPrimaryKeys()",10,21,27
"org.apache.lucene.util.fst.TestFSTs.testRandomTermLookup()",1,8,9
"org.apache.lucene.util.fst.TestFSTs.testRandomWords()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.testRandomWords(int,int)",1,5,5
"org.apache.lucene.util.fst.TestFSTs.testRealTerms()",11,28,32
"org.apache.lucene.util.fst.TestFSTs.testShortestPaths()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.testShortestPathsRandom()",4,12,13
"org.apache.lucene.util.fst.TestFSTs.testShortestPathsWFST()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.testShortestPathsWFSTRandom()",4,12,13
"org.apache.lucene.util.fst.TestFSTs.testSimple()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.testSingleString()",1,1,1
"org.apache.lucene.util.fst.TestFSTs.toBytesRef(IntsRef)",1,1,3
"org.apache.lucene.util.fst.TestFSTs.toIntsRef(BytesRef,IntsRef)",1,2,3
"org.apache.lucene.util.fst.TestFSTs.toIntsRef(String)",1,2,2
"org.apache.lucene.util.fst.TestFSTs.toIntsRef(String,int)",1,1,1
"org.apache.lucene.util.fst.TestFSTs.toIntsRef(String,int,IntsRef)",2,2,2
"org.apache.lucene.util.fst.TestFSTs.toIntsRefUTF32(String,IntsRef)",1,3,3
"org.apache.lucene.util.fst.TestFSTs.toString(IntsRef)",1,2,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs.TwoLongs(long,long)",1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs.equals(Object)",2,1,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs.hashCode()",1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs.toString()",1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.UpToTwoPositiveIntOutputs(boolean)",1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.add(Object,Object)",4,1,4
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.common(Object,Object)",4,3,5
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.get(long)",2,2,2
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.get(long,long)",1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.getNoOutput()",1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.getSingleton(boolean)",1,1,2
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.merge(Object,Object)",1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.outputToString(Object)",1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.read(DataInput)",3,3,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.subtract(Object,Object)",3,2,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.valid(Long)",1,1,2
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.valid(Object,boolean)",3,3,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.write(Object,DataOutput)",1,2,2
"org.apache.lucene.util.fst.Util.FSTPath.FSTPath(T,Arc<T>,Comparator<T>)",1,1,1
"org.apache.lucene.util.fst.Util.FSTPath.compareTo(FSTPath<T>)",2,2,2
"org.apache.lucene.util.fst.Util.FSTPath.toString()",1,1,1
"org.apache.lucene.util.fst.Util.MinResult.MinResult(IntsRef,T,Comparator<T>)",1,1,1
"org.apache.lucene.util.fst.Util.MinResult.compareTo(MinResult<T>)",2,2,2
"org.apache.lucene.util.fst.Util.TopNSearcher.TopNSearcher(FST<T>,Arc<T>,int,Comparator<T>)",1,1,1
"org.apache.lucene.util.fst.Util.TopNSearcher.addIfCompetitive(FSTPath<T>)",5,6,7
"org.apache.lucene.util.fst.Util.TopNSearcher.search()",14,20,25
"org.apache.lucene.util.fst.Util.Util()",1,1,1
"org.apache.lucene.util.fst.Util.emitDotState(Writer,String,String,String,String)",1,1,4
"org.apache.lucene.util.fst.Util.get(FST<T>,BytesRef)",4,3,4
"org.apache.lucene.util.fst.Util.get(FST<T>,IntsRef)",4,3,4
"org.apache.lucene.util.fst.Util.getByOutput(FST<Long>,long)",15,12,19
"org.apache.lucene.util.fst.Util.printableLabel(int)",2,2,3
"org.apache.lucene.util.fst.Util.shortestPaths(FST<T>,Arc<T>,Comparator<T>,int)",1,1,1
"org.apache.lucene.util.fst.Util.toBytesRef(IntsRef,BytesRef)",1,1,2
"org.apache.lucene.util.fst.Util.toDot(FST<T>,Writer,boolean,boolean)",6,17,26
"org.apache.lucene.util.fst.Util.toIntsRef(BytesRef,IntsRef)",1,1,2
"org.apache.lucene.util.fst.Util.toUTF32(CharSequence,IntsRef)",1,2,2
"org.apache.lucene.util.fst.Util.toUTF32(char[],int,int,IntsRef)",1,2,2
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.Nested1.beforeClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.Nested1.test()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.Nested2.test1()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.Nested2.test2()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.Nested2.test3()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.Nested3.runBeforeTest()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.Nested3.test1()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.TestExceptionInBeforeClassHooks()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.testExceptionInBeforeClassFailsTheTest()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.testExceptionWithinBefore()",1,1,1
"org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.testExceptionWithinTestFailsTheTest()",1,3,3
"org.apache.lucene.util.junitcompat.TestJUnitRuleOrder.Nested.after()",1,1,1
"org.apache.lucene.util.junitcompat.TestJUnitRuleOrder.Nested.afterClassCheck()",1,1,1
"org.apache.lucene.util.junitcompat.TestJUnitRuleOrder.Nested.before()",1,1,1
"org.apache.lucene.util.junitcompat.TestJUnitRuleOrder.Nested.beforeClassCleanup()",1,1,1
"org.apache.lucene.util.junitcompat.TestJUnitRuleOrder.Nested.test()",1,1,1
"org.apache.lucene.util.junitcompat.TestJUnitRuleOrder.TestJUnitRuleOrder()",1,1,1
"org.apache.lucene.util.junitcompat.TestJUnitRuleOrder.testRuleOrder()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.Nested.Nested()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.Nested.after()",1,2,2
"org.apache.lucene.util.junitcompat.TestReproduceMessage.Nested.afterClass()",1,2,2
"org.apache.lucene.util.junitcompat.TestReproduceMessage.Nested.before()",1,2,2
"org.apache.lucene.util.junitcompat.TestReproduceMessage.Nested.beforeClass()",1,2,2
"org.apache.lucene.util.junitcompat.TestReproduceMessage.Nested.test()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.Nested.triggerOn(SorePoint)",4,4,5
"org.apache.lucene.util.junitcompat.TestReproduceMessage.TestReproduceMessage()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.runAndReturnSyserr()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testAssumeAfter()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testAssumeAfterClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testAssumeBefore()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testAssumeBeforeClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testAssumeInitializer()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testAssumeRule()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testAssumeTest()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testErrorAfter()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testErrorAfterClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testErrorBefore()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testErrorBeforeClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testErrorInitializer()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testErrorRule()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testErrorTest()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testFailureAfter()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testFailureAfterClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testFailureBefore()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testFailureBeforeClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testFailureInitializer()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testFailureRule()",1,1,1
"org.apache.lucene.util.junitcompat.TestReproduceMessage.testFailureTest()",1,1,1
"org.apache.lucene.util.junitcompat.TestSeedFromUncaught.TestSeedFromUncaught()",1,1,1
"org.apache.lucene.util.junitcompat.TestSeedFromUncaught.ThrowInUncaught.testFoo()",1,1,1
"org.apache.lucene.util.junitcompat.TestSeedFromUncaught.testUncaughtDumpsSeed()",1,1,1
"org.apache.lucene.util.junitcompat.TestSetupTeardownChaining.NestedSetupChain.setUp()",1,1,1
"org.apache.lucene.util.junitcompat.TestSetupTeardownChaining.NestedSetupChain.testMe()",1,1,1
"org.apache.lucene.util.junitcompat.TestSetupTeardownChaining.NestedTeardownChain.tearDown()",1,1,1
"org.apache.lucene.util.junitcompat.TestSetupTeardownChaining.NestedTeardownChain.testMe()",1,1,1
"org.apache.lucene.util.junitcompat.TestSetupTeardownChaining.TestSetupTeardownChaining()",1,1,1
"org.apache.lucene.util.junitcompat.TestSetupTeardownChaining.testSetupChaining()",1,1,1
"org.apache.lucene.util.junitcompat.TestSetupTeardownChaining.testTeardownChaining()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.Base.testEmpty()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.IgnoredProperty.testMethod1()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.InAfterClass.afterClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.InBeforeClass.beforeClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.InTestMethod.testMethod1()",2,1,2
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.InTestMethod.testMethod2()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.NonStringProperties.cleanup()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.NonStringProperties.testMethod1()",2,1,2
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.NonStringProperties.testMethod2()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.TestSystemPropertiesInvariantRule()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.cleanup()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.testIgnoredProperty()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.testNonStringProperties()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.testRuleInvariantAfterClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.testRuleInvariantBeforeClass()",1,1,1
"org.apache.lucene.util.junitcompat.TestSystemPropertiesInvariantRule.testRuleInvariantInTestMethod()",1,2,2
"org.apache.lucene.util.junitcompat.WithNestedTests.AbstractNestedTest.isRunningNested()",1,2,2
"org.apache.lucene.util.junitcompat.WithNestedTests.WithNestedTests(boolean)",1,1,1
"org.apache.lucene.util.junitcompat.WithNestedTests.after()",1,2,2
"org.apache.lucene.util.junitcompat.WithNestedTests.before()",2,2,3
"org.apache.lucene.util.junitcompat.WithNestedTests.getSysErr()",1,1,2
"org.apache.lucene.util.junitcompat.WithNestedTests.getSysOut()",1,1,2
"org.apache.lucene.util.packed.Direct16.Direct16(DataInput,int)",1,4,4
"org.apache.lucene.util.packed.Direct16.Direct16(int)",1,1,1
"org.apache.lucene.util.packed.Direct16.Direct16(short[])",1,1,1
"org.apache.lucene.util.packed.Direct16.clear()",1,1,1
"org.apache.lucene.util.packed.Direct16.get(int)",1,2,2
"org.apache.lucene.util.packed.Direct16.getArray()",1,1,1
"org.apache.lucene.util.packed.Direct16.hasArray()",1,1,1
"org.apache.lucene.util.packed.Direct16.ramBytesUsed()",1,1,1
"org.apache.lucene.util.packed.Direct16.set(int,long)",1,1,1
"org.apache.lucene.util.packed.Direct32.Direct32(DataInput,int)",1,3,3
"org.apache.lucene.util.packed.Direct32.Direct32(int)",1,1,1
"org.apache.lucene.util.packed.Direct32.Direct32(int[])",1,1,1
"org.apache.lucene.util.packed.Direct32.clear()",1,1,1
"org.apache.lucene.util.packed.Direct32.get(int)",1,2,2
"org.apache.lucene.util.packed.Direct32.getArray()",1,1,1
"org.apache.lucene.util.packed.Direct32.hasArray()",1,1,1
"org.apache.lucene.util.packed.Direct32.ramBytesUsed()",1,1,1
"org.apache.lucene.util.packed.Direct32.set(int,long)",1,1,1
"org.apache.lucene.util.packed.Direct64.Direct64(DataInput,int)",1,2,2
"org.apache.lucene.util.packed.Direct64.Direct64(int)",1,1,1
"org.apache.lucene.util.packed.Direct64.Direct64(long[])",1,1,1
"org.apache.lucene.util.packed.Direct64.clear()",1,1,1
"org.apache.lucene.util.packed.Direct64.get(int)",1,2,2
"org.apache.lucene.util.packed.Direct64.getArray()",1,1,1
"org.apache.lucene.util.packed.Direct64.hasArray()",1,1,1
"org.apache.lucene.util.packed.Direct64.ramBytesUsed()",1,1,1
"org.apache.lucene.util.packed.Direct64.set(int,long)",1,1,1
"org.apache.lucene.util.packed.Direct8.Direct8(DataInput,int)",1,4,4
"org.apache.lucene.util.packed.Direct8.Direct8(byte[])",1,1,1
"org.apache.lucene.util.packed.Direct8.Direct8(int)",1,1,1
"org.apache.lucene.util.packed.Direct8.clear()",1,1,1
"org.apache.lucene.util.packed.Direct8.get(int)",1,2,2
"org.apache.lucene.util.packed.Direct8.getArray()",1,1,1
"org.apache.lucene.util.packed.Direct8.hasArray()",1,1,1
"org.apache.lucene.util.packed.Direct8.ramBytesUsed()",1,1,1
"org.apache.lucene.util.packed.Direct8.set(int,long)",1,1,1
"org.apache.lucene.util.packed.GrowableWriter.GrowableWriter(int,int,boolean)",1,1,1
"org.apache.lucene.util.packed.GrowableWriter.clear()",1,1,1
"org.apache.lucene.util.packed.GrowableWriter.get(int)",1,1,1
"org.apache.lucene.util.packed.GrowableWriter.getArray()",1,1,1
"org.apache.lucene.util.packed.GrowableWriter.getBitsPerValue()",1,1,1
"org.apache.lucene.util.packed.GrowableWriter.getMutable()",1,1,1
"org.apache.lucene.util.packed.GrowableWriter.getSize(int)",2,2,2
"org.apache.lucene.util.packed.GrowableWriter.hasArray()",1,1,1
"org.apache.lucene.util.packed.GrowableWriter.resize(int)",1,2,2
"org.apache.lucene.util.packed.GrowableWriter.set(int,long)",1,3,5
"org.apache.lucene.util.packed.GrowableWriter.size()",1,1,1
"org.apache.lucene.util.packed.Packed32.Packed32(DataInput,int,int)",1,3,3
"org.apache.lucene.util.packed.Packed32.Packed32(int,int)",1,1,1
"org.apache.lucene.util.packed.Packed32.Packed32(int[],int,int)",2,2,2
"org.apache.lucene.util.packed.Packed32.clear()",1,1,1
"org.apache.lucene.util.packed.Packed32.get(int)",1,2,2
"org.apache.lucene.util.packed.Packed32.ramBytesUsed()",1,1,1
"org.apache.lucene.util.packed.Packed32.set(int,long)",1,1,1
"org.apache.lucene.util.packed.Packed32.size(int,int)",1,1,2
"org.apache.lucene.util.packed.Packed32.toString()",1,1,1
"org.apache.lucene.util.packed.Packed32.updateCached()",1,1,1
"org.apache.lucene.util.packed.Packed64.Packed64(DataInput,int,int)",1,2,2
"org.apache.lucene.util.packed.Packed64.Packed64(int,int)",1,1,1
"org.apache.lucene.util.packed.Packed64.Packed64(long[],int,int)",1,1,1
"org.apache.lucene.util.packed.Packed64.clear()",1,1,1
"org.apache.lucene.util.packed.Packed64.get(int)",1,2,2
"org.apache.lucene.util.packed.Packed64.ramBytesUsed()",1,1,1
"org.apache.lucene.util.packed.Packed64.set(int,long)",1,1,1
"org.apache.lucene.util.packed.Packed64.size(int,int)",1,1,2
"org.apache.lucene.util.packed.Packed64.toString()",1,1,1
"org.apache.lucene.util.packed.Packed64.updateCached()",1,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.ReaderImpl(int,int)",1,1,2
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.getArray()",1,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.getBitsPerValue()",1,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.getMaxValue()",1,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.hasArray()",1,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.size()",1,1,1
"org.apache.lucene.util.packed.PackedInts.Writer.Writer(DataOutput,int,int)",1,1,1
"org.apache.lucene.util.packed.PackedInts.bitsRequired(long)",3,1,3
"org.apache.lucene.util.packed.PackedInts.getMutable(int,int)",7,2,8
"org.apache.lucene.util.packed.PackedInts.getNextFixedSize(int)",4,1,4
"org.apache.lucene.util.packed.PackedInts.getReader(DataInput)",7,2,9
"org.apache.lucene.util.packed.PackedInts.getRoundedFixedSize(int)",2,2,4
"org.apache.lucene.util.packed.PackedInts.getWriter(DataOutput,int,int)",1,1,1
"org.apache.lucene.util.packed.PackedInts.maxValue(int)",1,1,2
"org.apache.lucene.util.packed.PackedWriter.PackedWriter(DataOutput,int,int)",1,1,2
"org.apache.lucene.util.packed.PackedWriter.add(long)",1,3,3
"org.apache.lucene.util.packed.PackedWriter.finish()",1,3,3
"org.apache.lucene.util.packed.PackedWriter.toString()",1,1,1
"org.apache.lucene.util.packed.TestPackedInts.assertListEquality(List<? extends Reader>)",1,1,1
"org.apache.lucene.util.packed.TestPackedInts.assertListEquality(String,List<? extends Reader>)",2,4,5
"org.apache.lucene.util.packed.TestPackedInts.assertRandomEquality(int,int,long)",1,3,3
"org.apache.lucene.util.packed.TestPackedInts.createPackedInts(int,int)",1,6,6
"org.apache.lucene.util.packed.TestPackedInts.fill(Mutable,long,long)",1,2,2
"org.apache.lucene.util.packed.TestPackedInts.testBitsRequired()",1,1,1
"org.apache.lucene.util.packed.TestPackedInts.testControlledEquality()",1,3,3
"org.apache.lucene.util.packed.TestPackedInts.testIntOverflow()",1,1,1
"org.apache.lucene.util.packed.TestPackedInts.testMaxValues()",1,1,1
"org.apache.lucene.util.packed.TestPackedInts.testPackedInts()",1,5,6
"org.apache.lucene.util.packed.TestPackedInts.testRandomEquality()",1,3,3
"org.apache.lucene.util.packed.TestPackedInts.testSecondaryBlockChange()",1,1,1
"org.apache.lucene.util.packed.TestPackedInts.testSingleValue()",1,1,1
"org.apache.lucene.validation.LicenseCheckTask.add(ResourceCollection)",1,1,1
"org.apache.lucene.validation.LicenseCheckTask.addConfiguredLicenseMapper(Mapper)",2,1,2
"org.apache.lucene.validation.LicenseCheckTask.checkJarFile(File)",7,12,15
"org.apache.lucene.validation.LicenseCheckTask.createChecksumString(byte[])",1,2,2
"org.apache.lucene.validation.LicenseCheckTask.execute()",3,1,3
"org.apache.lucene.validation.LicenseCheckTask.processJars()",4,4,6
"org.apache.lucene.validation.LicenseCheckTask.readChecksumFile(File)",2,2,4
"org.apache.lucene.validation.LicenseCheckTask.setVerbose(boolean)",1,1,2
"org.apache.lucene.validation.LicenseType.LicenseType(String,boolean)",1,1,1
"org.apache.lucene.validation.LicenseType.getDisplay()",1,1,1
"org.apache.lucene.validation.LicenseType.isNoticeRequired()",1,1,1
"org.apache.lucene.validation.LicenseType.licenseFileSuffix()",1,1,1
"org.apache.lucene.validation.LicenseType.noticeFileSuffix()",1,1,1
"org.apache.lucene.validation.LicenseType.toString()",1,1,1
"org.apache.lucene.xmlparser.CoreParser.CoreParser(Analyzer,QueryParser)",1,1,1
"org.apache.lucene.xmlparser.CoreParser.CoreParser(String,Analyzer)",1,1,1
"org.apache.lucene.xmlparser.CoreParser.CoreParser(String,Analyzer,QueryParser)",1,2,2
"org.apache.lucene.xmlparser.CoreParser.addFilterBuilder(String,FilterBuilder)",1,1,1
"org.apache.lucene.xmlparser.CoreParser.addQueryBuilder(String,QueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.CoreParser.getQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.CoreParser.parse(InputStream)",1,1,1
"org.apache.lucene.xmlparser.CoreParser.parseXML(InputStream)",1,1,3
"org.apache.lucene.xmlparser.CorePlusExtensionsParser.CorePlusExtensionsParser(Analyzer,QueryParser)",1,1,1
"org.apache.lucene.xmlparser.CorePlusExtensionsParser.CorePlusExtensionsParser(String,Analyzer)",1,1,1
"org.apache.lucene.xmlparser.CorePlusExtensionsParser.CorePlusExtensionsParser(String,Analyzer,QueryParser)",1,1,1
"org.apache.lucene.xmlparser.DOMUtils.getAttribute(Element,String,String)",2,2,3
"org.apache.lucene.xmlparser.DOMUtils.getAttribute(Element,String,boolean)",2,2,3
"org.apache.lucene.xmlparser.DOMUtils.getAttribute(Element,String,float)",2,2,3
"org.apache.lucene.xmlparser.DOMUtils.getAttribute(Element,String,int)",2,2,3
"org.apache.lucene.xmlparser.DOMUtils.getAttributeOrFail(Element,String)",2,2,2
"org.apache.lucene.xmlparser.DOMUtils.getAttributeWithInheritance(Element,String)",4,4,6
"org.apache.lucene.xmlparser.DOMUtils.getAttributeWithInheritanceOrFail(Element,String)",2,2,2
"org.apache.lucene.xmlparser.DOMUtils.getChildByTagName(Element,String)",3,3,4
"org.apache.lucene.xmlparser.DOMUtils.getChildByTagOrFail(Element,String)",2,2,2
"org.apache.lucene.xmlparser.DOMUtils.getChildTextByTagName(Element,String)",2,2,2
"org.apache.lucene.xmlparser.DOMUtils.getFirstChildElement(Element)",3,2,3
"org.apache.lucene.xmlparser.DOMUtils.getFirstChildOrFail(Element)",2,2,2
"org.apache.lucene.xmlparser.DOMUtils.getNonBlankTextOrFail(Element)",2,4,4
"org.apache.lucene.xmlparser.DOMUtils.getText(Node)",1,1,1
"org.apache.lucene.xmlparser.DOMUtils.getTextBuffer(Node,StringBuilder)",2,5,5
"org.apache.lucene.xmlparser.DOMUtils.insertChild(Element,String,String)",1,2,2
"org.apache.lucene.xmlparser.DOMUtils.loadXML(Reader)",1,1,3
"org.apache.lucene.xmlparser.FilterBuilderFactory.addBuilder(String,FilterBuilder)",1,1,1
"org.apache.lucene.xmlparser.FilterBuilderFactory.getFilter(Element)",2,2,2
"org.apache.lucene.xmlparser.FilterBuilderFactory.getFilterBuilder(String)",1,1,1
"org.apache.lucene.xmlparser.ParserException.ParserException()",1,1,1
"org.apache.lucene.xmlparser.ParserException.ParserException(String)",1,1,1
"org.apache.lucene.xmlparser.ParserException.ParserException(String,Throwable)",1,1,1
"org.apache.lucene.xmlparser.ParserException.ParserException(Throwable)",1,1,1
"org.apache.lucene.xmlparser.QueryBuilderFactory.addBuilder(String,QueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.QueryBuilderFactory.getQuery(Element)",2,2,2
"org.apache.lucene.xmlparser.QueryBuilderFactory.getQueryBuilder(String)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.QueryTemplateManager()",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.QueryTemplateManager(InputStream)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.addDefaultQueryTemplate(InputStream)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.addQueryTemplate(String,InputStream)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsDOM(Properties)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsDOM(Properties,InputStream)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsDOM(Properties,String)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsDOM(Properties,Templates)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsXmlString(Properties)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsXmlString(Properties,InputStream)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsXmlString(Properties,String)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsXmlString(Properties,Templates)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getTemplates(InputStream)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.transformCriteria(Properties,InputStream,Result)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.transformCriteria(Properties,Templates,Result)",1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.transformCriteria(Properties,Transformer,Result)",1,4,4
"org.apache.lucene.xmlparser.TestParser.afterClass()",1,1,1
"org.apache.lucene.xmlparser.TestParser.beforeClass()",1,2,2
"org.apache.lucene.xmlparser.TestParser.dumpResults(String,Query,int)",1,3,3
"org.apache.lucene.xmlparser.TestParser.parse(String)",1,1,1
"org.apache.lucene.xmlparser.TestParser.testBooleanFilterXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testBooleanQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testBoostingQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testBoostingTermQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testCachedFilterXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testConstantScoreQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testCustomFieldUserQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testDuplicateFilterQueryXML()",1,2,2
"org.apache.lucene.xmlparser.TestParser.testFuzzyLikeThisQueryXML()",1,2,2
"org.apache.lucene.xmlparser.TestParser.testLikeThisQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testMatchAllDocsPlusFilterXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testNestedBooleanQuery()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testNumericRangeFilterQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testNumericRangeQueryQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testRangeFilterQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testSimpleTermsQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testSimpleXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testSpanTermXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testTermsFilterXML()",1,1,1
"org.apache.lucene.xmlparser.TestParser.testUserQueryXML()",1,1,1
"org.apache.lucene.xmlparser.TestQueryTemplateManager.getDocumentFromString(String)",1,3,3
"org.apache.lucene.xmlparser.TestQueryTemplateManager.getPropsFromString(String)",1,3,3
"org.apache.lucene.xmlparser.TestQueryTemplateManager.setUp()",1,2,2
"org.apache.lucene.xmlparser.TestQueryTemplateManager.tearDown()",1,1,1
"org.apache.lucene.xmlparser.TestQueryTemplateManager.testFormTransforms()",1,5,5
"org.apache.lucene.xmlparser.builders.BooleanFilterBuilder.BooleanFilterBuilder(FilterBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.BooleanFilterBuilder.getFilter(Element)",1,3,3
"org.apache.lucene.xmlparser.builders.BooleanQueryBuilder.BooleanQueryBuilder(QueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.BooleanQueryBuilder.getOccursValue(Element)",5,4,6
"org.apache.lucene.xmlparser.builders.BooleanQueryBuilder.getQuery(Element)",1,3,3
"org.apache.lucene.xmlparser.builders.BoostingQueryBuilder.BoostingQueryBuilder(QueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.BoostingQueryBuilder.getQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.BoostingTermBuilder.getSpanQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.CachedFilterBuilder(QueryBuilderFactory,FilterBuilderFactory,int)",1,1,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.LRUCache.LRUCache(int)",1,1,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.LRUCache.removeEldestEntry(Entry<K, V>)",1,1,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.getFilter(Element)",2,2,5
"org.apache.lucene.xmlparser.builders.ConstantScoreQueryBuilder.ConstantScoreQueryBuilder(FilterBuilderFactory)",1,1,1
"org.apache.lucene.xmlparser.builders.ConstantScoreQueryBuilder.getQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.DuplicateFilterBuilder.getFilter(Element)",5,5,5
"org.apache.lucene.xmlparser.builders.FilteredQueryBuilder.FilteredQueryBuilder(FilterBuilder,QueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.FilteredQueryBuilder.getQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.FuzzyLikeThisQueryBuilder.FuzzyLikeThisQueryBuilder(Analyzer)",1,1,1
"org.apache.lucene.xmlparser.builders.FuzzyLikeThisQueryBuilder.getQuery(Element)",1,2,2
"org.apache.lucene.xmlparser.builders.LikeThisQueryBuilder.LikeThisQueryBuilder(Analyzer,String[])",1,1,1
"org.apache.lucene.xmlparser.builders.LikeThisQueryBuilder.getQuery(Element)",3,9,10
"org.apache.lucene.xmlparser.builders.MatchAllDocsQueryBuilder.getQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder.NoMatchFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder.getFilter(Element)",6,5,7
"org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder.setStrictMode(boolean)",1,1,1
"org.apache.lucene.xmlparser.builders.NumericRangeQueryBuilder.getQuery(Element)",5,5,6
"org.apache.lucene.xmlparser.builders.RangeFilterBuilder.getFilter(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanBuilderBase.getQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanFirstBuilder.SpanFirstBuilder(SpanQueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanFirstBuilder.getSpanQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanNearBuilder.SpanNearBuilder(SpanQueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanNearBuilder.getSpanQuery(Element)",1,3,3
"org.apache.lucene.xmlparser.builders.SpanNotBuilder.SpanNotBuilder(SpanQueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanNotBuilder.getSpanQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanOrBuilder.SpanOrBuilder(SpanQueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanOrBuilder.getSpanQuery(Element)",1,3,3
"org.apache.lucene.xmlparser.builders.SpanOrTermsBuilder.SpanOrTermsBuilder(Analyzer)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanOrTermsBuilder.getSpanQuery(Element)",1,2,3
"org.apache.lucene.xmlparser.builders.SpanQueryBuilderFactory.addBuilder(String,SpanQueryBuilder)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanQueryBuilderFactory.getQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.SpanQueryBuilderFactory.getSpanQuery(Element)",2,2,2
"org.apache.lucene.xmlparser.builders.SpanTermBuilder.getSpanQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.TermQueryBuilder.getQuery(Element)",1,1,1
"org.apache.lucene.xmlparser.builders.TermsFilterBuilder.TermsFilterBuilder(Analyzer)",1,1,1
"org.apache.lucene.xmlparser.builders.TermsFilterBuilder.getFilter(Element)",1,3,4
"org.apache.lucene.xmlparser.builders.TermsQueryBuilder.TermsQueryBuilder(Analyzer)",1,1,1
"org.apache.lucene.xmlparser.builders.TermsQueryBuilder.getQuery(Element)",1,3,4
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.getDocumentFromString(String)",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterDouble()",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterFloat()",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterHandleNumericParseError()",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterHandleNumericParseErrorStrict()",1,1,2
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterInt()",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterLong()",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.getDocumentFromString(String)",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterDouble()",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterFloat()",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterHandleNumericParseErrorStrict()",1,1,2
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterInt()",1,1,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterLong()",1,1,1
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder.UserInputQueryBuilder(QueryParser)",1,1,1
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder.UserInputQueryBuilder(String,Analyzer)",1,1,1
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder.createQueryParser(String,Analyzer)",1,1,1
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder.getQuery(Element)",1,3,3
"org.apache.lucene.xmlparser.webdemo.FormBasedXmlQueryDemo.doPost(HttpServletRequest,HttpServletResponse)",1,6,7
"org.apache.lucene.xmlparser.webdemo.FormBasedXmlQueryDemo.init(ServletConfig)",1,1,2
"org.apache.lucene.xmlparser.webdemo.FormBasedXmlQueryDemo.openExampleIndex()",1,3,3
"org.apache.noggit.CharArr.CharArr()",1,1,1
"org.apache.noggit.CharArr.CharArr(char[],int,int)",1,1,1
"org.apache.noggit.CharArr.CharArr(int)",1,1,1
"org.apache.noggit.CharArr.append(CharSequence)",1,1,1
"org.apache.noggit.CharArr.append(CharSequence,int,int)",1,1,1
"org.apache.noggit.CharArr.append(char)",1,1,1
"org.apache.noggit.CharArr.capacity()",1,1,1
"org.apache.noggit.CharArr.charAt(int)",1,1,1
"org.apache.noggit.CharArr.close()",1,1,1
"org.apache.noggit.CharArr.fill()",1,1,1
"org.apache.noggit.CharArr.flush()",1,1,1
"org.apache.noggit.CharArr.getArray()",1,1,1
"org.apache.noggit.CharArr.getEnd()",1,1,1
"org.apache.noggit.CharArr.getStart()",1,1,1
"org.apache.noggit.CharArr.length()",1,1,1
"org.apache.noggit.CharArr.read()",2,1,2
"org.apache.noggit.CharArr.read(CharBuffer)",3,3,5
"org.apache.noggit.CharArr.read(char[],int,int)",1,1,1
"org.apache.noggit.CharArr.reserve(int)",1,2,2
"org.apache.noggit.CharArr.reset()",1,1,1
"org.apache.noggit.CharArr.resize(int)",1,1,1
"org.apache.noggit.CharArr.set(char[],int,int)",1,1,1
"org.apache.noggit.CharArr.setEnd(int)",1,1,1
"org.apache.noggit.CharArr.setStart(int)",1,1,1
"org.apache.noggit.CharArr.size()",1,1,1
"org.apache.noggit.CharArr.subSequence(int,int)",1,1,1
"org.apache.noggit.CharArr.toCharArray()",1,1,1
"org.apache.noggit.CharArr.toString()",1,1,1
"org.apache.noggit.CharArr.unsafeWrite(char)",1,1,1
"org.apache.noggit.CharArr.unsafeWrite(char[],int,int)",1,1,1
"org.apache.noggit.CharArr.unsafeWrite(int)",1,1,1
"org.apache.noggit.CharArr.write(CharArr)",1,1,1
"org.apache.noggit.CharArr.write(String)",1,1,1
"org.apache.noggit.CharArr.write(String,int,int)",1,1,1
"org.apache.noggit.CharArr.write(char)",1,2,2
"org.apache.noggit.CharArr.write(char[])",1,1,1
"org.apache.noggit.CharArr.write(char[],int,int)",1,1,1
"org.apache.noggit.CharArr.write(int)",1,1,1
"org.apache.noggit.CharArrReader.CharArrReader(Reader,int)",1,1,1
"org.apache.noggit.CharArrReader.fill()",1,3,4
"org.apache.noggit.CharArrReader.read()",1,2,3
"org.apache.noggit.CharArrReader.read(CharBuffer)",2,2,4
"org.apache.noggit.CharArrWriter.flush()",1,1,2
"org.apache.noggit.CharArrWriter.write(String,int,int)",3,3,4
"org.apache.noggit.CharArrWriter.write(char)",1,2,2
"org.apache.noggit.CharArrWriter.write(char[],int,int)",3,3,4
"org.apache.noggit.CharUtil.compare(char[],int,int,char[],int,int)",3,1,3
"org.apache.noggit.CharUtil.parseLong(char[],int,int)",1,1,4
"org.apache.noggit.JSONParser.JSONParser(Reader)",1,1,1
"org.apache.noggit.JSONParser.JSONParser(Reader,char[])",1,1,1
"org.apache.noggit.JSONParser.JSONParser(String)",1,1,1
"org.apache.noggit.JSONParser.JSONParser(String,int,int)",1,1,1
"org.apache.noggit.JSONParser.JSONParser(char[],int,int)",1,1,1
"org.apache.noggit.JSONParser.continueNumber(CharArr)",7,8,11
"org.apache.noggit.JSONParser.err(String)",1,1,6
"org.apache.noggit.JSONParser.errEscape(int,int)",2,1,2
"org.apache.noggit.JSONParser.expect(char[])",3,3,3
"org.apache.noggit.JSONParser.fill()",1,2,4
"org.apache.noggit.JSONParser.getBoolean()",1,1,1
"org.apache.noggit.JSONParser.getChar()",3,2,3
"org.apache.noggit.JSONParser.getCharNWS()",3,2,6
"org.apache.noggit.JSONParser.getContext()",1,3,3
"org.apache.noggit.JSONParser.getDouble()",1,1,1
"org.apache.noggit.JSONParser.getEventString(int)",12,2,12
"org.apache.noggit.JSONParser.getLevel()",1,1,1
"org.apache.noggit.JSONParser.getLong()",1,1,1
"org.apache.noggit.JSONParser.getMore()",2,2,2
"org.apache.noggit.JSONParser.getNull()",1,1,1
"org.apache.noggit.JSONParser.getNumberChars()",3,4,5
"org.apache.noggit.JSONParser.getNumberChars(CharArr)",3,4,5
"org.apache.noggit.JSONParser.getPosition()",1,1,1
"org.apache.noggit.JSONParser.getString()",1,1,1
"org.apache.noggit.JSONParser.getString(CharArr)",1,1,1
"org.apache.noggit.JSONParser.getStringChars()",1,1,1
"org.apache.noggit.JSONParser.goTo(int)",4,3,4
"org.apache.noggit.JSONParser.hexval(int)",4,1,7
"org.apache.noggit.JSONParser.lastEvent()",1,1,1
"org.apache.noggit.JSONParser.next(int)",8,8,21
"org.apache.noggit.JSONParser.nextEvent()",12,14,18
"org.apache.noggit.JSONParser.pop()",2,2,2
"org.apache.noggit.JSONParser.push()",1,2,2
"org.apache.noggit.JSONParser.readEscapedChar()",10,2,10
"org.apache.noggit.JSONParser.readExp(CharArr,int)",2,3,5
"org.apache.noggit.JSONParser.readExpDigits(CharArr,int)",3,3,5
"org.apache.noggit.JSONParser.readFrac(CharArr,int)",4,4,7
"org.apache.noggit.JSONParser.readNumber(int,boolean)",3,3,10
"org.apache.noggit.JSONParser.readStringChars()",4,3,4
"org.apache.noggit.JSONParser.readStringChars2(CharArr,int)",3,7,7
"org.apache.noggit.JSONParser.toString()",1,1,1
"org.apache.noggit.JSONParser.wasKey()",1,1,1
"org.apache.noggit.JSONUtil.toJSON(Object)",1,1,1
"org.apache.noggit.JSONUtil.unicodeEscape(int,CharArr)",1,1,1
"org.apache.noggit.JSONUtil.writeBoolean(boolean,CharArr)",1,1,2
"org.apache.noggit.JSONUtil.writeNull(CharArr)",1,1,1
"org.apache.noggit.JSONUtil.writeNumber(double,CharArr)",1,1,1
"org.apache.noggit.JSONUtil.writeNumber(long,CharArr)",1,1,1
"org.apache.noggit.JSONUtil.writeString(CharArr,CharArr)",1,1,1
"org.apache.noggit.JSONUtil.writeString(CharSequence,int,int,CharArr)",1,1,1
"org.apache.noggit.JSONUtil.writeString(char[],int,int,CharArr)",1,1,1
"org.apache.noggit.JSONUtil.writeStringPart(CharSequence,int,int,CharArr)",2,4,10
"org.apache.noggit.JSONUtil.writeStringPart(char[],int,int,CharArr)",2,4,10
"org.apache.noggit.JSONWriter.JSONWriter(CharArr)",1,1,1
"org.apache.noggit.JSONWriter.endArray()",1,1,1
"org.apache.noggit.JSONWriter.endObject()",1,1,1
"org.apache.noggit.JSONWriter.startArray()",1,1,1
"org.apache.noggit.JSONWriter.startObject()",1,1,1
"org.apache.noggit.JSONWriter.write(boolean)",1,1,1
"org.apache.noggit.JSONWriter.write(double)",1,1,1
"org.apache.noggit.JSONWriter.write(long)",1,1,1
"org.apache.noggit.JSONWriter.writeNameSeparator()",1,1,1
"org.apache.noggit.JSONWriter.writeNull()",1,1,1
"org.apache.noggit.JSONWriter.writeNumber(CharArr)",1,1,1
"org.apache.noggit.JSONWriter.writePartialNumber(CharArr)",1,1,1
"org.apache.noggit.JSONWriter.writeString(CharArr)",1,1,1
"org.apache.noggit.JSONWriter.writeString(CharSequence)",1,1,1
"org.apache.noggit.JSONWriter.writeStringChars(CharArr)",1,1,1
"org.apache.noggit.JSONWriter.writeStringEnd()",1,1,1
"org.apache.noggit.JSONWriter.writeStringStart()",1,1,1
"org.apache.noggit.JSONWriter.writeValueSeparator()",1,1,1
"org.apache.noggit.NullCharArr.NullCharArr()",1,1,1
"org.apache.noggit.NullCharArr.append(CharSequence,int,int)",1,1,1
"org.apache.noggit.NullCharArr.charAt(int)",1,1,1
"org.apache.noggit.NullCharArr.reserve(int)",1,1,1
"org.apache.noggit.NullCharArr.resize(int)",1,1,1
"org.apache.noggit.NullCharArr.unsafeWrite(char)",1,1,1
"org.apache.noggit.NullCharArr.unsafeWrite(char[],int,int)",1,1,1
"org.apache.noggit.NullCharArr.unsafeWrite(int)",1,1,1
"org.apache.noggit.NullCharArr.write(String,int,int)",1,1,1
"org.apache.noggit.NullCharArr.write(char)",1,1,1
"org.apache.noggit.NullCharArr.write(char[],int,int)",1,1,1
"org.apache.noggit.ObjectBuilder.ObjectBuilder(JSONParser)",1,2,2
"org.apache.noggit.ObjectBuilder.addArrayVal(Object,Object)",1,1,1
"org.apache.noggit.ObjectBuilder.addKeyVal(Object,Object,Object)",1,1,1
"org.apache.noggit.ObjectBuilder.endArray(Object)",1,1,1
"org.apache.noggit.ObjectBuilder.fromJSON(String)",1,1,1
"org.apache.noggit.ObjectBuilder.getArray()",3,3,3
"org.apache.noggit.ObjectBuilder.getBigNumber()",3,1,5
"org.apache.noggit.ObjectBuilder.getBoolean()",1,1,1
"org.apache.noggit.ObjectBuilder.getKey()",1,1,1
"org.apache.noggit.ObjectBuilder.getLong()",1,1,1
"org.apache.noggit.ObjectBuilder.getNull()",1,1,1
"org.apache.noggit.ObjectBuilder.getNumber()",2,2,2
"org.apache.noggit.ObjectBuilder.getObject()",3,3,3
"org.apache.noggit.ObjectBuilder.getString()",1,1,1
"org.apache.noggit.ObjectBuilder.getVal()",13,10,13
"org.apache.noggit.ObjectBuilder.getVal(JSONParser)",1,1,1
"org.apache.noggit.ObjectBuilder.newArray()",1,1,1
"org.apache.noggit.ObjectBuilder.newObject()",1,1,1
"org.apache.noggit.ObjectBuilder.objectEnd(Object)",1,1,1
"org.apache.noggit.TextSerializer.serialize(TextWriter,Collection)",1,3,3
"org.apache.noggit.TextSerializer.serialize(TextWriter,Map)",1,3,3
"org.apache.noggit.TextSerializer.serialize(TextWriter,Object)",1,9,11
"org.apache.solr.BaseDistributedSearchTestCase.RandDate.val()",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.RandVal.uval()",3,2,3
"org.apache.solr.BaseDistributedSearchTestCase.addFields(SolrInputDocument,Object...)",1,2,2
"org.apache.solr.BaseDistributedSearchTestCase.commit()",1,2,2
"org.apache.solr.BaseDistributedSearchTestCase.compare(Map,Map,int,Map<String, Integer>)",2,1,2
"org.apache.solr.BaseDistributedSearchTestCase.compare(NamedList,NamedList,int,Map<String, Integer>)",12,7,14
"org.apache.solr.BaseDistributedSearchTestCase.compare(Object,Object,int,Map<String, Integer>)",12,11,20
"org.apache.solr.BaseDistributedSearchTestCase.compare(Object[],Object[],int,Map<String, Integer>)",4,3,4
"org.apache.solr.BaseDistributedSearchTestCase.compare(SolrDocument,SolrDocument,int,Map<String, Integer>)",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.compare(SolrDocumentList,SolrDocumentList,int,Map<String, Integer>)",16,9,16
"org.apache.solr.BaseDistributedSearchTestCase.compare1(Map,Map,int,Map<String, Integer>)",6,3,6
"org.apache.solr.BaseDistributedSearchTestCase.compareResponses(QueryResponse,QueryResponse)",1,2,2
"org.apache.solr.BaseDistributedSearchTestCase.createJetty(File,String)",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.createNewSolrServer(int)",1,1,2
"org.apache.solr.BaseDistributedSearchTestCase.createServers(int)",1,3,3
"org.apache.solr.BaseDistributedSearchTestCase.del(String)",1,2,2
"org.apache.solr.BaseDistributedSearchTestCase.destroyServers()",1,2,2
"org.apache.solr.BaseDistributedSearchTestCase.eq(String,String)",1,3,3
"org.apache.solr.BaseDistributedSearchTestCase.err(String)",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.flags(Map<String, Integer>,Object)",2,1,3
"org.apache.solr.BaseDistributedSearchTestCase.getFieldNames()",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.getRandFields(String[],RandVal[])",1,2,2
"org.apache.solr.BaseDistributedSearchTestCase.getRandValues()",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.getSolrHome()",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.index(Object...)",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.indexDoc(SolrInputDocument)",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.index_specific(int,Object...)",1,2,2
"org.apache.solr.BaseDistributedSearchTestCase.indexr(Object...)",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.query(Object...)",2,7,8
"org.apache.solr.BaseDistributedSearchTestCase.queryServer(ModifiableSolrParams)",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.setUp()",1,1,1
"org.apache.solr.BaseDistributedSearchTestCase.tearDown()",1,2,2
"org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch()",1,3,3
"org.apache.solr.BaseDistributedSearchTestCase.validateControlData(QueryResponse)",1,1,1
"org.apache.solr.BasicFunctionalityTest.beforeTests()",1,1,1
"org.apache.solr.BasicFunctionalityTest.getCoreName()",1,1,1
"org.apache.solr.BasicFunctionalityTest.mkstr(int)",1,2,2
"org.apache.solr.BasicFunctionalityTest.testAbuseOfSort()",1,2,2
"org.apache.solr.BasicFunctionalityTest.testConfigDefaults()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testDateMath()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testDateRoundtrip()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testDefaultFieldValues()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testDocBoost()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testFieldBoost()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testHTMLStrip()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testIgnoredFields()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testKeywordTokenizerFactory()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testLazyField()",1,2,2
"org.apache.solr.BasicFunctionalityTest.testLocalSolrQueryRequestParams()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testMultipleUpdatesPerAdd()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testNotLazyField()",1,2,2
"org.apache.solr.BasicFunctionalityTest.testPatternReplaceFilter()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testRemoveDuplicatesTokenFilter()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testRequestHandlerBaseException()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testSolrParams()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testSomeStuff()",1,2,2
"org.apache.solr.BasicFunctionalityTest.testTermVectorFields()",1,6,6
"org.apache.solr.BasicFunctionalityTest.testTokenizer()",1,1,1
"org.apache.solr.BasicFunctionalityTest.testXMLWriter()",1,1,1
"org.apache.solr.CollectionTester.CollectionTester(Object)",1,1,1
"org.apache.solr.CollectionTester.CollectionTester(Object,double)",1,1,1
"org.apache.solr.CollectionTester.asList()",2,1,2
"org.apache.solr.CollectionTester.asMap()",2,1,2
"org.apache.solr.CollectionTester.getPath()",3,4,5
"org.apache.solr.CollectionTester.match()",9,7,17
"org.apache.solr.CollectionTester.match(Object)",1,1,1
"org.apache.solr.CollectionTester.matchList()",6,5,8
"org.apache.solr.CollectionTester.matchMap()",15,18,27
"org.apache.solr.CollectionTester.popPath()",1,1,1
"org.apache.solr.CollectionTester.pushPath(Object)",1,1,1
"org.apache.solr.CollectionTester.seek(List<String>)",7,2,7
"org.apache.solr.CollectionTester.seek(String)",2,3,4
"org.apache.solr.CollectionTester.setErr(String)",1,1,1
"org.apache.solr.CollectionTester.setPath(Object)",1,1,1
"org.apache.solr.ConvertedLegacyTest.beforeTests()",1,1,1
"org.apache.solr.ConvertedLegacyTest.testABunchOfConvertedStuff()",1,1,1
"org.apache.solr.DisMaxRequestHandlerTest.beforeClass()",1,1,1
"org.apache.solr.DisMaxRequestHandlerTest.doTestSomeStuff(String)",1,1,1
"org.apache.solr.DisMaxRequestHandlerTest.testExtraBlankBQ()",1,1,1
"org.apache.solr.DisMaxRequestHandlerTest.testOldStyleDefaults()",1,1,1
"org.apache.solr.DisMaxRequestHandlerTest.testSimplestParams()",1,1,1
"org.apache.solr.DisMaxRequestHandlerTest.testSomeStuff()",1,1,1
"org.apache.solr.EchoParamsTest.allEchoParams()",1,1,1
"org.apache.solr.EchoParamsTest.beforeClass()",1,1,1
"org.apache.solr.EchoParamsTest.defaultEchoParams()",1,1,1
"org.apache.solr.EchoParamsTest.defaultEchoParamsDefaultVersion()",1,1,1
"org.apache.solr.EchoParamsTest.explicitEchoParams()",1,1,1
"org.apache.solr.EchoParamsTest.test()",1,1,1
"org.apache.solr.JSONTestUtil.match(String,String)",1,1,1
"org.apache.solr.JSONTestUtil.match(String,String,String)",1,1,1
"org.apache.solr.JSONTestUtil.match(String,String,String,double)",1,1,1
"org.apache.solr.JSONTestUtil.match(String,String,double)",1,3,3
"org.apache.solr.JSONTestUtil.matchObj(String,Object,Object)",1,1,1
"org.apache.solr.JSONTestUtil.matchObj(String,Object,Object,double)",3,4,5
"org.apache.solr.MinimalSchemaTest.beforeClass()",1,1,1
"org.apache.solr.MinimalSchemaTest.testAllConfiguredHandlers()",3,2,4
"org.apache.solr.MinimalSchemaTest.testLuke()",1,1,1
"org.apache.solr.MinimalSchemaTest.testSimpleQueries()",1,1,1
"org.apache.solr.OutputWriterTest.UselessOutputWriter.UselessOutputWriter()",1,1,1
"org.apache.solr.OutputWriterTest.UselessOutputWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.OutputWriterTest.UselessOutputWriter.init(NamedList)",1,1,1
"org.apache.solr.OutputWriterTest.UselessOutputWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.OutputWriterTest.beforeClass()",1,1,1
"org.apache.solr.OutputWriterTest.testLazy()",1,1,1
"org.apache.solr.OutputWriterTest.testSOLR59responseHeaderVersions()",1,1,1
"org.apache.solr.OutputWriterTest.testTrivialXsltWriter()",1,1,1
"org.apache.solr.OutputWriterTest.testTrivialXsltWriterInclude()",1,1,1
"org.apache.solr.OutputWriterTest.testUselessWriter()",1,1,1
"org.apache.solr.SampleTest.beforeClass()",1,1,1
"org.apache.solr.SampleTest.testAdvanced()",1,1,1
"org.apache.solr.SampleTest.testSimple()",1,1,1
"org.apache.solr.SolrInfoMBeanTest.beforeClass()",1,1,1
"org.apache.solr.SolrInfoMBeanTest.getClassesForPackage(String)",1,8,8
"org.apache.solr.SolrInfoMBeanTest.testCallMBeanInfo()",4,3,5
"org.apache.solr.SolrJettyTestBase.afterSolrJettyTestBase()",1,2,2
"org.apache.solr.SolrJettyTestBase.createJetty(String,String,String)",1,1,2
"org.apache.solr.SolrJettyTestBase.createNewSolrServer()",2,2,3
"org.apache.solr.SolrJettyTestBase.getSolrHome()",1,1,1
"org.apache.solr.SolrJettyTestBase.getSolrServer()",1,2,2
"org.apache.solr.SolrTestCaseJ4.Doc.compareTo(Object)",2,2,2
"org.apache.solr.SolrTestCaseJ4.Doc.equals(Object)",2,3,4
"org.apache.solr.SolrTestCaseJ4.Doc.getFirstValue(String)",1,3,3
"org.apache.solr.SolrTestCaseJ4.Doc.getValues(String)",3,2,3
"org.apache.solr.SolrTestCaseJ4.Doc.hashCode()",1,1,1
"org.apache.solr.SolrTestCaseJ4.Doc.toObject(IndexSchema)",1,3,3
"org.apache.solr.SolrTestCaseJ4.Doc.toString()",1,1,1
"org.apache.solr.SolrTestCaseJ4.FVal.FVal(float,float)",1,1,1
"org.apache.solr.SolrTestCaseJ4.FVal.get()",1,1,1
"org.apache.solr.SolrTestCaseJ4.FVal.getFloat()",2,1,2
"org.apache.solr.SolrTestCaseJ4.Fld.toString()",1,2,2
"org.apache.solr.SolrTestCaseJ4.FldType.FldType(String,IRange,Vals)",1,1,1
"org.apache.solr.SolrTestCaseJ4.FldType.FldType(String,Vals)",1,1,1
"org.apache.solr.SolrTestCaseJ4.FldType.createField()",2,1,2
"org.apache.solr.SolrTestCaseJ4.FldType.createValue()",1,1,1
"org.apache.solr.SolrTestCaseJ4.FldType.createValues()",2,2,3
"org.apache.solr.SolrTestCaseJ4.IRange.IRange(int,int)",1,1,1
"org.apache.solr.SolrTestCaseJ4.IRange.get()",1,1,1
"org.apache.solr.SolrTestCaseJ4.IRange.getInt()",1,1,1
"org.apache.solr.SolrTestCaseJ4.SVal.SVal()",1,1,1
"org.apache.solr.SolrTestCaseJ4.SVal.SVal(char,char,int,int)",1,1,1
"org.apache.solr.SolrTestCaseJ4.SVal.get()",1,2,2
"org.apache.solr.SolrTestCaseJ4.TEST_HOME()",1,1,1
"org.apache.solr.SolrTestCaseJ4.Vals.between(int,int)",1,2,2
"org.apache.solr.SolrTestCaseJ4.Vals.toJSON(Comparable)",1,1,1
"org.apache.solr.SolrTestCaseJ4.XmlDoc.toString()",1,1,1
"org.apache.solr.SolrTestCaseJ4.add(XmlDoc,String...)",1,2,4
"org.apache.solr.SolrTestCaseJ4.adoc(SolrInputDocument)",1,3,3
"org.apache.solr.SolrTestCaseJ4.adoc(String...)",1,1,1
"org.apache.solr.SolrTestCaseJ4.afterClassSolrTestCase()",1,1,1
"org.apache.solr.SolrTestCaseJ4.assertFailedU(String)",1,1,1
"org.apache.solr.SolrTestCaseJ4.assertFailedU(String,String)",1,1,1
"org.apache.solr.SolrTestCaseJ4.assertJQ(SolrQueryRequest,String...)",1,1,1
"org.apache.solr.SolrTestCaseJ4.assertJQ(SolrQueryRequest,double,String...)",4,11,12
"org.apache.solr.SolrTestCaseJ4.assertQ(SolrQueryRequest,String...)",1,1,1
"org.apache.solr.SolrTestCaseJ4.assertQ(String,SolrQueryRequest,String...)",2,4,6
"org.apache.solr.SolrTestCaseJ4.assertQEx(String,SolrQueryRequest,ErrorCode)",1,2,3
"org.apache.solr.SolrTestCaseJ4.assertQEx(String,SolrQueryRequest,int)",1,2,3
"org.apache.solr.SolrTestCaseJ4.assertU(String)",1,1,1
"org.apache.solr.SolrTestCaseJ4.assertU(String,String)",1,1,1
"org.apache.solr.SolrTestCaseJ4.beforeClassSolrTestCase()",1,1,1
"org.apache.solr.SolrTestCaseJ4.checkUpdateU(String,String,boolean)",1,4,6
"org.apache.solr.SolrTestCaseJ4.clearIndex()",1,1,1
"org.apache.solr.SolrTestCaseJ4.closeDirectories()",1,3,3
"org.apache.solr.SolrTestCaseJ4.commit(String...)",1,1,1
"org.apache.solr.SolrTestCaseJ4.createComparator(List<Comparator<Doc>>)",3,2,3
"org.apache.solr.SolrTestCaseJ4.createComparator(String,boolean,boolean,boolean,boolean)",12,7,22
"org.apache.solr.SolrTestCaseJ4.createDoc(List<FldType>)",1,4,4
"org.apache.solr.SolrTestCaseJ4.createSort(IndexSchema,List<FldType>,String[])",1,8,11
"org.apache.solr.SolrTestCaseJ4.createTempDir()",1,1,1
"org.apache.solr.SolrTestCaseJ4.delI(String)",1,1,1
"org.apache.solr.SolrTestCaseJ4.delQ(String)",1,1,1
"org.apache.solr.SolrTestCaseJ4.deleteCore()",1,7,7
"org.apache.solr.SolrTestCaseJ4.doc(String...)",1,1,1
"org.apache.solr.SolrTestCaseJ4.endTrackingSearchers()",1,2,2
"org.apache.solr.SolrTestCaseJ4.getClassName()",1,1,1
"org.apache.solr.SolrTestCaseJ4.getFile(String)",1,2,3
"org.apache.solr.SolrTestCaseJ4.getRootCause(Throwable)",1,1,2
"org.apache.solr.SolrTestCaseJ4.getSchemaFile()",1,1,1
"org.apache.solr.SolrTestCaseJ4.getSimpleClassName()",1,1,1
"org.apache.solr.SolrTestCaseJ4.getSolrConfigFile()",1,1,1
"org.apache.solr.SolrTestCaseJ4.ignoreException(String)",1,1,2
"org.apache.solr.SolrTestCaseJ4.indexDocs(List<FldType>,Map<Comparable, Doc>,int)",3,6,8
"org.apache.solr.SolrTestCaseJ4.initCore()",1,4,4
"org.apache.solr.SolrTestCaseJ4.initCore(String,String)",1,1,1
"org.apache.solr.SolrTestCaseJ4.initCore(String,String,String)",1,2,2
"org.apache.solr.SolrTestCaseJ4.invertField(Map<Comparable, Doc>,String)",3,4,5
"org.apache.solr.SolrTestCaseJ4.optimize(String...)",1,1,1
"org.apache.solr.SolrTestCaseJ4.params(String...)",1,2,2
"org.apache.solr.SolrTestCaseJ4.postSetUp()",1,1,1
"org.apache.solr.SolrTestCaseJ4.preTearDown()",1,1,1
"org.apache.solr.SolrTestCaseJ4.recurseDelete(File)",4,4,4
"org.apache.solr.SolrTestCaseJ4.req(SolrParams,String...)",1,2,2
"org.apache.solr.SolrTestCaseJ4.req(String...)",1,1,1
"org.apache.solr.SolrTestCaseJ4.req(String[],String...)",1,2,2
"org.apache.solr.SolrTestCaseJ4.resetExceptionIgnores()",1,1,1
"org.apache.solr.SolrTestCaseJ4.setUp()",1,1,1
"org.apache.solr.SolrTestCaseJ4.startTrackingSearchers()",1,1,1
"org.apache.solr.SolrTestCaseJ4.tearDown()",1,1,1
"org.apache.solr.SolrTestCaseJ4.toJSON(Doc)",1,7,8
"org.apache.solr.SolrTestCaseJ4.updateJ(String,SolrParams)",1,2,2
"org.apache.solr.TestDistributedGrouping.doTest()",1,5,6
"org.apache.solr.TestDistributedGrouping.simpleQuery(Object...)",1,2,2
"org.apache.solr.TestDistributedSearch.doTest()",1,7,11
"org.apache.solr.TestGroupingSearch.Grp.setMaxDoc(Comparator<Doc>)",1,1,2
"org.apache.solr.TestGroupingSearch.Grp.toString()",1,1,1
"org.apache.solr.TestGroupingSearch.beforeTests()",1,1,1
"org.apache.solr.TestGroupingSearch.buildGroupedResult(IndexSchema,List<Grp>,int,int,int,int,boolean)",5,7,9
"org.apache.solr.TestGroupingSearch.cleanIndex()",1,1,1
"org.apache.solr.TestGroupingSearch.createFirstDocComparator(Comparator<Doc>)",1,1,1
"org.apache.solr.TestGroupingSearch.createIndex()",1,1,1
"org.apache.solr.TestGroupingSearch.createMaxDocComparator(Comparator<Doc>)",1,1,1
"org.apache.solr.TestGroupingSearch.groupBy(Collection<Doc>,String)",1,6,6
"org.apache.solr.TestGroupingSearch.testGroupAPI()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupedCount()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingGroupSortingScore_basic()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingGroupSortingScore_basicWithGroupSortEqualToSort()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingGroupSortingScore_basicWithSortFooIDescAndScoreAscWithCaching()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingGroupSortingScore_withTotalGroupCount()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingGroupSortingWeight()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingGroupedBasedFaceting()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingSimpleFormatArrayIndexOutOfBoundsException()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingSimpleFormatStartBiggerThanRows()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingSortByFunction()",1,1,1
"org.apache.solr.TestGroupingSearch.testGroupingWithTimeAllowed()",1,1,1
"org.apache.solr.TestGroupingSearch.testRandomGrouping()",8,23,34
"org.apache.solr.TestPluginEnable.getSchemaFile()",1,1,1
"org.apache.solr.TestPluginEnable.getSolrConfigFile()",1,1,1
"org.apache.solr.TestPluginEnable.testSimple()",1,1,1
"org.apache.solr.TestSolrCoreProperties.copyFile(File,File)",1,2,2
"org.apache.solr.TestSolrCoreProperties.getConfDir()",1,1,1
"org.apache.solr.TestSolrCoreProperties.getDataDir()",1,1,1
"org.apache.solr.TestSolrCoreProperties.getHomeDir()",1,1,1
"org.apache.solr.TestSolrCoreProperties.getSchemaFile()",1,1,1
"org.apache.solr.TestSolrCoreProperties.getSolrConfigFile()",1,1,1
"org.apache.solr.TestSolrCoreProperties.setUp()",1,1,1
"org.apache.solr.TestSolrCoreProperties.setUpMe()",1,1,1
"org.apache.solr.TestSolrCoreProperties.tearDown()",1,1,1
"org.apache.solr.TestSolrCoreProperties.testSimple()",1,1,1
"org.apache.solr.TestTrie.beforeClass()",1,1,1
"org.apache.solr.TestTrie.checkPrecisionSteps(String)",1,3,3
"org.apache.solr.TestTrie.tearDown()",1,1,1
"org.apache.solr.TestTrie.testFacetDate(SolrQueryRequest,String,String,String)",1,1,1
"org.apache.solr.TestTrie.testFacetField(SolrQueryRequest,String,String,String)",1,1,1
"org.apache.solr.TestTrie.testTrieDateRangeSearch()",1,4,6
"org.apache.solr.TestTrie.testTrieDoubleRangeSearch()",1,2,2
"org.apache.solr.TestTrie.testTrieDoubleRangeSearch_CustomPrecisionStep()",1,2,2
"org.apache.solr.TestTrie.testTrieFacet_PrecisionStep()",1,5,5
"org.apache.solr.TestTrie.testTrieFloatRangeSearch()",1,2,2
"org.apache.solr.TestTrie.testTrieIntRangeSearch()",1,3,3
"org.apache.solr.TestTrie.testTrieLongRangeSearch()",1,2,2
"org.apache.solr.TestTrie.testTrieTermQuery()",1,2,2
"org.apache.solr.analysis.ASCIIFoldingFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ASCIIFoldingFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.ArabicLetterTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.ArabicLetterTokenizerFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.ArabicNormalizationFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ArabicNormalizationFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.ArabicStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.BaseCharFilterFactory.getArgs()",1,1,1
"org.apache.solr.analysis.BaseCharFilterFactory.getInt(String)",1,1,1
"org.apache.solr.analysis.BaseCharFilterFactory.getInt(String,int)",1,1,1
"org.apache.solr.analysis.BaseCharFilterFactory.getInt(String,int,boolean)",3,1,3
"org.apache.solr.analysis.BaseCharFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.BaseTokenStreamFactory.assureMatchVersion()",2,3,3
"org.apache.solr.analysis.BaseTokenStreamFactory.getArgs()",1,1,1
"org.apache.solr.analysis.BaseTokenStreamFactory.getBoolean(String,boolean)",1,1,1
"org.apache.solr.analysis.BaseTokenStreamFactory.getBoolean(String,boolean,boolean)",3,1,3
"org.apache.solr.analysis.BaseTokenStreamFactory.getInt(String)",1,1,1
"org.apache.solr.analysis.BaseTokenStreamFactory.getInt(String,int)",1,1,1
"org.apache.solr.analysis.BaseTokenStreamFactory.getInt(String,int,boolean)",3,1,3
"org.apache.solr.analysis.BaseTokenStreamFactory.getSnowballWordSet(ResourceLoader,String,boolean)",1,3,3
"org.apache.solr.analysis.BaseTokenStreamFactory.getWordSet(ResourceLoader,String,boolean)",1,3,3
"org.apache.solr.analysis.BaseTokenStreamFactory.init(Map<String, String>)",1,2,2
"org.apache.solr.analysis.BaseTokenStreamFactory.warnDeprecated(String)",1,1,1
"org.apache.solr.analysis.BeiderMorseFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.BeiderMorseFilterFactory.init(Map<String, String>)",1,5,5
"org.apache.solr.analysis.BrazilianStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.BufferedTokenStream.BufferedTokenStream(TokenStream)",1,1,1
"org.apache.solr.analysis.BufferedTokenStream.incrementToken()",5,4,5
"org.apache.solr.analysis.BufferedTokenStream.output()",1,1,1
"org.apache.solr.analysis.BufferedTokenStream.peek(int)",3,2,3
"org.apache.solr.analysis.BufferedTokenStream.pushBack(Token)",1,1,1
"org.apache.solr.analysis.BufferedTokenStream.read()",2,2,2
"org.apache.solr.analysis.BufferedTokenStream.readToken()",2,2,2
"org.apache.solr.analysis.BufferedTokenStream.reset()",1,1,1
"org.apache.solr.analysis.BufferedTokenStream.write(Token)",1,1,1
"org.apache.solr.analysis.BufferedTokenStream.writeToken(Token)",1,1,1
"org.apache.solr.analysis.BulgarianStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.CJKBigramFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.CJKBigramFilterFactory.init(Map<String, String>)",1,1,5
"org.apache.solr.analysis.CJKTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.CJKWidthFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.CJKWidthFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.CapitalizationFilter.CapitalizationFilter(TokenStream,CapitalizationFilterFactory)",1,1,1
"org.apache.solr.analysis.CapitalizationFilter.incrementToken()",2,8,10
"org.apache.solr.analysis.CapitalizationFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.CapitalizationFilterFactory.init(Map<String, String>)",1,10,11
"org.apache.solr.analysis.CapitalizationFilterFactory.processWord(char[],int,int,int)",10,7,16
"org.apache.solr.analysis.ChineseFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ChineseFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.ChineseTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.ChineseTokenizerFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.ClassicFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ClassicTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.ClassicTokenizerFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.CollationKeyFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.CollationKeyFilterFactory.createFromLocale(String,String,String)",2,1,9
"org.apache.solr.analysis.CollationKeyFilterFactory.createFromRules(String,ResourceLoader)",1,1,3
"org.apache.solr.analysis.CollationKeyFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.CollationKeyFilterFactory.inform(ResourceLoader)",12,11,17
"org.apache.solr.analysis.CommonGramsFilter.CommonGramsFilter(TokenStream,Set<?>)",1,1,1
"org.apache.solr.analysis.CommonGramsFilter.CommonGramsFilter(TokenStream,Set<?>,boolean)",1,1,1
"org.apache.solr.analysis.CommonGramsFilter.CommonGramsFilter(TokenStream,String[])",1,1,1
"org.apache.solr.analysis.CommonGramsFilter.CommonGramsFilter(TokenStream,String[],boolean)",1,1,1
"org.apache.solr.analysis.CommonGramsFilter.CommonGramsFilter(Version,TokenStream,Set<?>)",1,1,1
"org.apache.solr.analysis.CommonGramsFilter.CommonGramsFilter(Version,TokenStream,Set<?>,boolean)",1,2,2
"org.apache.solr.analysis.CommonGramsFilter.gramToken()",1,2,2
"org.apache.solr.analysis.CommonGramsFilter.incrementToken()",4,5,6
"org.apache.solr.analysis.CommonGramsFilter.isCommon()",1,2,2
"org.apache.solr.analysis.CommonGramsFilter.makeCommonSet(String[])",1,1,1
"org.apache.solr.analysis.CommonGramsFilter.makeCommonSet(String[],boolean)",1,1,1
"org.apache.solr.analysis.CommonGramsFilter.reset()",1,1,1
"org.apache.solr.analysis.CommonGramsFilter.saveTermBuffer()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.CommonGramsFilterFactory.getCommonWords()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterFactory.inform(ResourceLoader)",2,3,4
"org.apache.solr.analysis.CommonGramsFilterFactory.isIgnoreCase()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterFactoryTest.testDefaults()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterFactoryTest.testInform()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.TestFirstAndLastStopWord()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testCaseSensitive()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testCommonGramsFilter()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testCommonGramsQueryFilter()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testFirstWordisStopWord()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testLastWordisStopWord()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testOneWordQuery()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testOneWordQueryStopWord()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testQueryReset()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testRandomStrings()",1,1,1
"org.apache.solr.analysis.CommonGramsFilterTest.testReset()",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilter.CommonGramsQueryFilter(CommonGramsFilter)",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilter.incrementToken()",4,8,9
"org.apache.solr.analysis.CommonGramsQueryFilter.isGramType()",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilter.reset()",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilterFactory.getCommonWords()",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilterFactory.inform(ResourceLoader)",2,3,4
"org.apache.solr.analysis.CommonGramsQueryFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilterFactory.isIgnoreCase()",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilterFactoryTest.testDefaults()",1,1,1
"org.apache.solr.analysis.CommonGramsQueryFilterFactoryTest.testInform()",1,1,1
"org.apache.solr.analysis.CzechStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.DelimitedPayloadTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.DelimitedPayloadTokenFilterFactory.inform(ResourceLoader)",3,6,6
"org.apache.solr.analysis.DelimitedPayloadTokenFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.DictionaryCompoundWordTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.DictionaryCompoundWordTokenFilterFactory.inform(ResourceLoader)",1,1,2
"org.apache.solr.analysis.DictionaryCompoundWordTokenFilterFactory.init(Map<String, String>)",2,1,2
"org.apache.solr.analysis.DoubleMetaphoneFilter.DoubleMetaphoneFilter(TokenStream,int,boolean)",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterFactory.init(Map<String, String>)",1,2,2
"org.apache.solr.analysis.DoubleMetaphoneFilterFactoryTest.testDefaults()",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterFactoryTest.testReset()",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterFactoryTest.testSettingSizeAndInject()",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterTest.testAlternateInjectFalse()",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterTest.testNonConvertableStringsWithInject()",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterTest.testNonConvertableStringsWithoutInject()",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterTest.testSize4FalseInject()",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterTest.testSize4TrueInject()",1,1,1
"org.apache.solr.analysis.DoubleMetaphoneFilterTest.testSize8FalseInject()",1,1,1
"org.apache.solr.analysis.DutchStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.DutchStemFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.EdgeNGramFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.EdgeNGramFilterFactory.init(Map<String, String>)",1,4,4
"org.apache.solr.analysis.EdgeNGramTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.EdgeNGramTokenizerFactory.init(Map<String, String>)",1,4,4
"org.apache.solr.analysis.ElisionFilterFactory.create(TokenStream)",1,1,2
"org.apache.solr.analysis.ElisionFilterFactory.inform(ResourceLoader)",2,2,3
"org.apache.solr.analysis.EnglishMinimalStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.EnglishPorterFilterFactory.create(TokenStream)",1,1,2
"org.apache.solr.analysis.EnglishPorterFilterFactory.inform(ResourceLoader)",2,2,3
"org.apache.solr.analysis.EnglishPorterFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.EnglishPorterFilterFactoryTest.LinesMockSolrResourceLoader.LinesMockSolrResourceLoader(List<String>)",1,1,1
"org.apache.solr.analysis.EnglishPorterFilterFactoryTest.LinesMockSolrResourceLoader.getLines(String)",1,1,1
"org.apache.solr.analysis.EnglishPorterFilterFactoryTest.LinesMockSolrResourceLoader.newInstance(String,String...)",1,1,1
"org.apache.solr.analysis.EnglishPorterFilterFactoryTest.LinesMockSolrResourceLoader.openResource(String)",1,1,1
"org.apache.solr.analysis.EnglishPorterFilterFactoryTest.test()",1,2,2
"org.apache.solr.analysis.EnglishPorterFilterFactoryTest.testProtected()",1,4,4
"org.apache.solr.analysis.EnglishPossessiveFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.EnglishPossessiveFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.FSTSynonymFilterFactory.create(TokenStream)",1,1,2
"org.apache.solr.analysis.FSTSynonymFilterFactory.inform(ResourceLoader)",3,7,9
"org.apache.solr.analysis.FSTSynonymFilterFactory.loadSolrSynonyms(ResourceLoader,boolean,Analyzer)",2,3,4
"org.apache.solr.analysis.FSTSynonymFilterFactory.loadTokenizerFactory(ResourceLoader,String,Map<String, String>)",1,2,2
"org.apache.solr.analysis.FSTSynonymFilterFactory.loadWordnetSynonyms(ResourceLoader,boolean,Analyzer)",2,3,4
"org.apache.solr.analysis.FinnishLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.FrenchLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.FrenchMinimalStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.FrenchStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.FrenchStemFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.GalicianMinimalStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.GalicianStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.GermanLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.GermanMinimalStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.GermanNormalizationFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.GermanNormalizationFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.GermanStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.GreekLowerCaseFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.GreekLowerCaseFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.GreekLowerCaseFilterFactory.init(Map<String, String>)",2,1,2
"org.apache.solr.analysis.GreekStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.HTMLStripCharFilterFactory.create(CharStream)",1,1,2
"org.apache.solr.analysis.HTMLStripCharFilterFactory.init(Map<String, String>)",1,3,4
"org.apache.solr.analysis.HindiNormalizationFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.HindiNormalizationFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.HindiStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.HungarianLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.HunspellStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.HunspellStemFilterFactory.inform(ResourceLoader)",4,5,6
"org.apache.solr.analysis.HyphenatedWordsFilter.HyphenatedWordsFilter(TokenStream)",1,1,1
"org.apache.solr.analysis.HyphenatedWordsFilter.incrementToken()",5,7,8
"org.apache.solr.analysis.HyphenatedWordsFilter.reset()",1,1,1
"org.apache.solr.analysis.HyphenatedWordsFilter.unhyphenate()",1,2,2
"org.apache.solr.analysis.HyphenatedWordsFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.HyphenationCompoundWordTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.HyphenationCompoundWordTokenFilterFactory.inform(ResourceLoader)",1,2,3
"org.apache.solr.analysis.HyphenationCompoundWordTokenFilterFactory.init(Map<String, String>)",2,2,3
"org.apache.solr.analysis.ICUCollationKeyFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ICUCollationKeyFilterFactory.createFromLocale(String)",1,1,1
"org.apache.solr.analysis.ICUCollationKeyFilterFactory.createFromRules(String,ResourceLoader)",1,1,2
"org.apache.solr.analysis.ICUCollationKeyFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.ICUCollationKeyFilterFactory.inform(ResourceLoader)",18,20,24
"org.apache.solr.analysis.ICUFoldingFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ICUFoldingFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.ICUNormalizer2FilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ICUNormalizer2FilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.ICUNormalizer2FilterFactory.init(Map<String, String>)",3,5,7
"org.apache.solr.analysis.ICUTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.ICUTransformFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ICUTransformFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.ICUTransformFilterFactory.init(Map<String, String>)",4,3,5
"org.apache.solr.analysis.ISOLatin1AccentFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ISOLatin1AccentFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.ISOLatin1AccentFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.IndicNormalizationFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.IndicNormalizationFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.IndonesianStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.IndonesianStemFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.IrishLowerCaseFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.IrishLowerCaseFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.ItalianLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.JapaneseBaseFormFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.JapaneseKatakanaStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.JapaneseKatakanaStemFilterFactory.init(Map<String, String>)",2,1,2
"org.apache.solr.analysis.JapanesePartOfSpeechStopFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.JapanesePartOfSpeechStopFilterFactory.inform(ResourceLoader)",1,2,3
"org.apache.solr.analysis.JapaneseReadingFormFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.JapaneseReadingFormFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.JapaneseTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.JapaneseTokenizerFactory.getMode(Map<String, String>)",2,2,2
"org.apache.solr.analysis.JapaneseTokenizerFactory.inform(ResourceLoader)",1,2,4
"org.apache.solr.analysis.KStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.KeepWordFilter.KeepWordFilter(TokenStream,Set<String>,boolean)",1,1,1
"org.apache.solr.analysis.KeepWordFilter.KeepWordFilter(boolean,TokenStream,CharArraySet)",1,1,1
"org.apache.solr.analysis.KeepWordFilter.accept()",1,1,1
"org.apache.solr.analysis.KeepWordFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.KeepWordFilterFactory.getWords()",1,1,1
"org.apache.solr.analysis.KeepWordFilterFactory.inform(ResourceLoader)",2,2,3
"org.apache.solr.analysis.KeepWordFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.KeepWordFilterFactory.isEnablePositionIncrements()",1,1,1
"org.apache.solr.analysis.KeepWordFilterFactory.isIgnoreCase()",1,1,1
"org.apache.solr.analysis.KeepWordFilterFactory.setIgnoreCase(boolean)",1,1,3
"org.apache.solr.analysis.KeepWordFilterFactory.setWords(Set<String>)",1,1,1
"org.apache.solr.analysis.KeywordMarkerFilterFactory.create(TokenStream)",1,1,2
"org.apache.solr.analysis.KeywordMarkerFilterFactory.inform(ResourceLoader)",2,2,3
"org.apache.solr.analysis.KeywordMarkerFilterFactory.isIgnoreCase()",1,1,1
"org.apache.solr.analysis.KeywordTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.LatvianStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.LegacyHTMLStripCharFilter(CharStream)",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.LegacyHTMLStripCharFilter(CharStream,Set<String>)",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.LegacyHTMLStripCharFilter(CharStream,Set<String>,int)",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.close()",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.eatSSI()",5,5,5
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.findEndTag()",11,6,12
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.getReadAheadLimit()",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.isAlpha(int)",1,1,4
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.isDigit(int)",1,1,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.isFirstIdChar(int)",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.isHex(int)",1,1,6
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.isIdChar(int)",1,7,7
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.isSpace(int)",3,2,3
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.main(String[])",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.next()",2,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.nextSkipWS()",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.peek()",2,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.push(int)",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.read()",6,10,15
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.read(char[],int,int)",5,2,5
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readAttr2()",13,15,18
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readBang(boolean)",7,4,8
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readComment(boolean)",10,9,14
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readEntity()",6,6,6
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readName(boolean)",3,7,11
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readNumericEntity()",9,9,11
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readProcessingInstruction()",4,4,5
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readScriptString()",6,6,8
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.readTag()",16,14,21
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.restoreState()",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilter.saveState()",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilterFactory.create(CharStream)",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.appendChars(StringBuilder,int)",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.doTestOffsets(String)",1,3,3
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.processBuffer(String,String)",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.test()",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testBufferOverflow()",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testComment()",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testEntities()",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testGamma()",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testHTML()",1,3,3
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testMalformedHTML()",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testMoreEntities()",1,2,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testOffsets()",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testRandom()",1,1,1
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testRandomBrokenHTML()",1,1,2
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testRandomText()",2,7,8
"org.apache.solr.analysis.LegacyHTMLStripCharFilterTest.testReserved()",1,2,2
"org.apache.solr.analysis.LengthFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.LengthFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.LengthFilterTest.test()",1,1,1
"org.apache.solr.analysis.LetterTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.LetterTokenizerFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.LimitTokenCountFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.LimitTokenCountFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.LowerCaseFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.LowerCaseFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.LowerCaseFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.LowerCaseTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.LowerCaseTokenizerFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.LowerCaseTokenizerFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.MappingCharFilterFactory.create(CharStream)",1,1,1
"org.apache.solr.analysis.MappingCharFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.MappingCharFilterFactory.inform(ResourceLoader)",2,4,5
"org.apache.solr.analysis.MappingCharFilterFactory.parseRules(List<String>,NormalizeCharMap)",3,2,3
"org.apache.solr.analysis.MappingCharFilterFactory.parseString(String)",6,4,13
"org.apache.solr.analysis.MockTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.MockTokenizerFactory.init(Map<String, String>)",4,3,5
"org.apache.solr.analysis.NGramFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.NGramFilterFactory.init(Map<String, String>)",1,3,3
"org.apache.solr.analysis.NGramTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.NGramTokenizerFactory.init(Map<String, String>)",1,3,3
"org.apache.solr.analysis.NorwegianLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.NorwegianMinimalStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.NumericPayloadTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.NumericPayloadTokenFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.PathHierarchyTokenizerFactory.create(Reader)",2,1,2
"org.apache.solr.analysis.PathHierarchyTokenizerFactory.init(Map<String, String>)",5,7,7
"org.apache.solr.analysis.PatternReplaceCharFilter.PatternReplaceCharFilter(Pattern,String,CharStream)",1,1,1
"org.apache.solr.analysis.PatternReplaceCharFilter.PatternReplaceCharFilter(Pattern,String,int,String,CharStream)",1,1,1
"org.apache.solr.analysis.PatternReplaceCharFilter.correct(int)",1,1,1
"org.apache.solr.analysis.PatternReplaceCharFilter.processPattern(CharSequence)",1,5,5
"org.apache.solr.analysis.PatternReplaceCharFilter.read(char[],int,int)",1,3,3
"org.apache.solr.analysis.PatternReplaceCharFilterFactory.create(CharStream)",1,1,1
"org.apache.solr.analysis.PatternReplaceCharFilterFactory.init(Map<String, String>)",1,2,3
"org.apache.solr.analysis.PatternReplaceFilter.PatternReplaceFilter(TokenStream,Pattern,String,boolean)",1,1,2
"org.apache.solr.analysis.PatternReplaceFilter.incrementToken()",2,3,4
"org.apache.solr.analysis.PatternReplaceFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.PatternReplaceFilterFactory.init(Map<String, String>)",4,5,5
"org.apache.solr.analysis.PatternTokenizer.PatternTokenizer(Reader,Pattern,int)",1,1,1
"org.apache.solr.analysis.PatternTokenizer.end()",1,1,1
"org.apache.solr.analysis.PatternTokenizer.incrementToken()",8,5,8
"org.apache.solr.analysis.PatternTokenizer.reset(Reader)",1,1,1
"org.apache.solr.analysis.PatternTokenizerFactory.create(Reader)",1,1,2
"org.apache.solr.analysis.PatternTokenizerFactory.group(Matcher,String,int)",1,2,2
"org.apache.solr.analysis.PatternTokenizerFactory.init(Map<String, String>)",3,2,4
"org.apache.solr.analysis.PatternTokenizerFactory.split(Matcher,String)",2,6,6
"org.apache.solr.analysis.PersianCharFilterFactory.create(CharStream)",1,1,1
"org.apache.solr.analysis.PersianCharFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.PersianNormalizationFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.PersianNormalizationFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.PhoneticFilter.PhoneticFilter(TokenStream,Encoder,String,boolean)",1,1,1
"org.apache.solr.analysis.PhoneticFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.PhoneticFilterFactory.init(Map<String, String>)",2,4,5
"org.apache.solr.analysis.PhoneticFilterFactory.lookupEncoder(String)",1,1,1
"org.apache.solr.analysis.PhoneticFilterFactory.resolveEncoder(String)",1,4,4
"org.apache.solr.analysis.PorterStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.PortugueseLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.PortugueseMinimalStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.PortugueseStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.PositionFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.PositionFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.RemoveDuplicatesTokenFilter.RemoveDuplicatesTokenFilter(TokenStream)",1,1,1
"org.apache.solr.analysis.RemoveDuplicatesTokenFilter.incrementToken()",3,4,5
"org.apache.solr.analysis.RemoveDuplicatesTokenFilter.reset()",1,1,1
"org.apache.solr.analysis.RemoveDuplicatesTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ReverseStringFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ReversedWildcardFilter.ReversedWildcardFilter(TokenStream,boolean,char)",1,1,1
"org.apache.solr.analysis.ReversedWildcardFilter.incrementToken()",4,3,5
"org.apache.solr.analysis.ReversedWildcardFilter.reverse(char[],int,int)",4,4,14
"org.apache.solr.analysis.ReversedWildcardFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ReversedWildcardFilterFactory.getFloat(String,float)",2,2,2
"org.apache.solr.analysis.ReversedWildcardFilterFactory.getMarkerChar()",1,1,1
"org.apache.solr.analysis.ReversedWildcardFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.ReversedWildcardFilterFactory.shouldReverse(String)",6,4,13
"org.apache.solr.analysis.RussianLetterTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.RussianLetterTokenizerFactory.init(Map<String, String>)",2,1,2
"org.apache.solr.analysis.RussianLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.RussianLowerCaseFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.RussianLowerCaseFilterFactory.init(Map<String, String>)",2,1,2
"org.apache.solr.analysis.RussianStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.RussianStemFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.ShingleFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.ShingleFilterFactory.init(Map<String, String>)",4,2,5
"org.apache.solr.analysis.SlowSynonymFilter.SlowSynonymFilter(TokenStream,SlowSynonymMap)",2,1,2
"org.apache.solr.analysis.SlowSynonymFilter.copy(AttributeSource,AttributeSource)",1,2,2
"org.apache.solr.analysis.SlowSynonymFilter.incrementToken()",6,16,20
"org.apache.solr.analysis.SlowSynonymFilter.match(SlowSynonymMap)",1,6,8
"org.apache.solr.analysis.SlowSynonymFilter.nextTok()",3,4,5
"org.apache.solr.analysis.SlowSynonymFilter.pushTok(AttributeSource)",1,1,2
"org.apache.solr.analysis.SlowSynonymFilter.reset()",1,1,1
"org.apache.solr.analysis.SlowSynonymFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.SlowSynonymFilterFactory.getSynList(String,String,TokenizerFactory)",1,3,3
"org.apache.solr.analysis.SlowSynonymFilterFactory.getSynonymMap()",1,1,1
"org.apache.solr.analysis.SlowSynonymFilterFactory.inform(ResourceLoader)",2,2,3
"org.apache.solr.analysis.SlowSynonymFilterFactory.loadRules(String,ResourceLoader)",1,3,4
"org.apache.solr.analysis.SlowSynonymFilterFactory.loadTokenizer(TokenizerFactory,Reader)",1,1,1
"org.apache.solr.analysis.SlowSynonymFilterFactory.loadTokenizerFactory(ResourceLoader,String,Map<String, String>)",1,2,2
"org.apache.solr.analysis.SlowSynonymFilterFactory.parseRules(Iterable<String>,SlowSynonymMap,String,String,boolean,TokenizerFactory)",3,7,7
"org.apache.solr.analysis.SlowSynonymFilterFactory.splitByTokenizer(String,TokenizerFactory)",1,3,4
"org.apache.solr.analysis.SlowSynonymMap.SlowSynonymMap()",1,1,1
"org.apache.solr.analysis.SlowSynonymMap.SlowSynonymMap(boolean)",1,1,2
"org.apache.solr.analysis.SlowSynonymMap.add(List<String>,List<Token>,boolean,boolean)",2,5,8
"org.apache.solr.analysis.SlowSynonymMap.ignoreCase()",1,1,1
"org.apache.solr.analysis.SlowSynonymMap.includeOrig()",1,1,1
"org.apache.solr.analysis.SlowSynonymMap.makeTokens(List<String>)",1,2,2
"org.apache.solr.analysis.SlowSynonymMap.mergeTokens(List<Token>,List<Token>)",2,15,21
"org.apache.solr.analysis.SlowSynonymMap.toString()",1,5,5
"org.apache.solr.analysis.SmartChineseSentenceTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.SmartChineseWordTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.SnowballPorterFilterFactory.create(TokenStream)",1,1,3
"org.apache.solr.analysis.SnowballPorterFilterFactory.inform(ResourceLoader)",2,2,3
"org.apache.solr.analysis.SnowballPorterFilterFactory.init(Map<String, String>)",1,1,3
"org.apache.solr.analysis.SnowballPorterFilterFactoryTest.LinesMockSolrResourceLoader.LinesMockSolrResourceLoader(List<String>)",1,1,1
"org.apache.solr.analysis.SnowballPorterFilterFactoryTest.LinesMockSolrResourceLoader.getLines(String)",1,1,1
"org.apache.solr.analysis.SnowballPorterFilterFactoryTest.LinesMockSolrResourceLoader.newInstance(String,String...)",1,1,1
"org.apache.solr.analysis.SnowballPorterFilterFactoryTest.LinesMockSolrResourceLoader.openResource(String)",1,1,1
"org.apache.solr.analysis.SnowballPorterFilterFactoryTest.test()",1,2,2
"org.apache.solr.analysis.SnowballPorterFilterFactoryTest.testProtected()",1,1,1
"org.apache.solr.analysis.SnowballPorterFilterFactoryTest.testProtectedOld()",1,4,4
"org.apache.solr.analysis.SolrAnalyzer.TokenStreamInfo.TokenStreamInfo(Tokenizer,TokenStream)",1,1,1
"org.apache.solr.analysis.SolrAnalyzer.TokenStreamInfo.getTokenStream()",1,1,1
"org.apache.solr.analysis.SolrAnalyzer.TokenStreamInfo.getTokenizer()",1,1,1
"org.apache.solr.analysis.SolrAnalyzer.charStream(Reader)",1,1,1
"org.apache.solr.analysis.SolrAnalyzer.getPositionIncrementGap(String)",1,1,1
"org.apache.solr.analysis.SolrAnalyzer.reusableTokenStream(String,Reader)",2,2,2
"org.apache.solr.analysis.SolrAnalyzer.setPositionIncrementGap(int)",1,1,1
"org.apache.solr.analysis.SolrAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.solr.analysis.SpanishLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.StandardFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.StandardFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.StandardTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.StandardTokenizerFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.StemmerOverrideFilterFactory.create(TokenStream)",1,1,2
"org.apache.solr.analysis.StemmerOverrideFilterFactory.inform(ResourceLoader)",2,5,6
"org.apache.solr.analysis.StemmerOverrideFilterFactory.isIgnoreCase()",1,1,1
"org.apache.solr.analysis.StempelPolishStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.StempelPolishStemFilterFactory.inform(ResourceLoader)",1,1,2
"org.apache.solr.analysis.StopFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.StopFilterFactory.getStopWords()",1,1,1
"org.apache.solr.analysis.StopFilterFactory.inform(ResourceLoader)",2,3,4
"org.apache.solr.analysis.StopFilterFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.StopFilterFactory.isEnablePositionIncrements()",1,1,1
"org.apache.solr.analysis.StopFilterFactory.isIgnoreCase()",1,1,1
"org.apache.solr.analysis.StringMockSolrResourceLoader.StringMockSolrResourceLoader(String)",1,1,1
"org.apache.solr.analysis.StringMockSolrResourceLoader.getLines(String)",1,1,1
"org.apache.solr.analysis.StringMockSolrResourceLoader.newInstance(String,String...)",1,1,1
"org.apache.solr.analysis.StringMockSolrResourceLoader.openResource(String)",1,1,1
"org.apache.solr.analysis.SwedishLightStemFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.SynonymFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.SynonymFilterFactory.inform(ResourceLoader)",1,1,1
"org.apache.solr.analysis.SynonymFilterFactory.init(Map<String, String>)",3,3,4
"org.apache.solr.analysis.TestArabicFilters.testNormalizer()",1,1,1
"org.apache.solr.analysis.TestArabicFilters.testPersianCharFilter()",1,1,1
"org.apache.solr.analysis.TestArabicFilters.testStemmer()",1,1,1
"org.apache.solr.analysis.TestArabicFilters.testTokenizer()",1,1,1
"org.apache.solr.analysis.TestBeiderMorseFilterFactory.testBasics()",1,1,1
"org.apache.solr.analysis.TestBeiderMorseFilterFactory.testLanguageSet()",1,1,1
"org.apache.solr.analysis.TestBeiderMorseFilterFactory.testOptions()",1,1,1
"org.apache.solr.analysis.TestBrazilianStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestBufferedTokenStream.AB_AAB_Stream.AB_AAB_Stream(TokenStream)",1,1,1
"org.apache.solr.analysis.TestBufferedTokenStream.AB_AAB_Stream.process(Token)",1,3,3
"org.apache.solr.analysis.TestBufferedTokenStream.AB_Q_Stream.AB_Q_Stream(TokenStream)",1,1,1
"org.apache.solr.analysis.TestBufferedTokenStream.AB_Q_Stream.process(Token)",1,5,5
"org.apache.solr.analysis.TestBufferedTokenStream.testABAAB()",1,1,1
"org.apache.solr.analysis.TestBufferedTokenStream.testABQ()",1,1,1
"org.apache.solr.analysis.TestBufferedTokenStream.testReset()",1,1,1
"org.apache.solr.analysis.TestBulgarianStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestCJKBigramFilterFactory.testDefaults()",1,1,1
"org.apache.solr.analysis.TestCJKBigramFilterFactory.testHanOnly()",1,1,1
"org.apache.solr.analysis.TestCJKTokenizerFactory.testTokenizer()",1,1,1
"org.apache.solr.analysis.TestCJKWidthFilterFactory.test()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testCapitalization()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testEmptyTerm()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testForceFirstLetter()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testKeepIgnoreCase()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testMaxTokenLength()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testMaxWordCount()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testMaxWordCount2()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testMinWordLength()",1,1,1
"org.apache.solr.analysis.TestCapitalizationFilter.testRandomString()",1,1,1
"org.apache.solr.analysis.TestChineseFilterFactory.testFiltering()",1,1,1
"org.apache.solr.analysis.TestChineseTokenizerFactory.testTokenizer()",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.StringMockSolrResourceLoader.StringMockSolrResourceLoader(String)",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.StringMockSolrResourceLoader.getLines(String)",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.StringMockSolrResourceLoader.newInstance(String,String...)",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.StringMockSolrResourceLoader.openResource(String)",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.assertCollatesToSame(TokenStream,TokenStream)",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.testBasicUsage()",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.testCustomRules()",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.testFullDecomposition()",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.testNormalization()",1,1,1
"org.apache.solr.analysis.TestCollationKeyFilterFactory.testSecondaryStrength()",1,1,1
"org.apache.solr.analysis.TestCollationKeyRangeQueries.beforeClass()",1,1,1
"org.apache.solr.analysis.TestCollationKeyRangeQueries.testBasicRangeQuery()",1,1,1
"org.apache.solr.analysis.TestCollationKeyRangeQueries.testBasicTermQuery()",1,1,1
"org.apache.solr.analysis.TestCollationKeyRangeQueries.testNegativeRangeQuery()",1,1,1
"org.apache.solr.analysis.TestCzechStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestDelimitedPayloadTokenFilterFactory.testDelim()",1,2,2
"org.apache.solr.analysis.TestDelimitedPayloadTokenFilterFactory.testEncoder()",1,2,2
"org.apache.solr.analysis.TestDictionaryCompoundWordTokenFilterFactory.testDecompounding()",1,1,1
"org.apache.solr.analysis.TestDutchStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestElisionFilterFactory.testCaseInsensitive()",1,1,1
"org.apache.solr.analysis.TestElisionFilterFactory.testDefaultArticles()",1,1,1
"org.apache.solr.analysis.TestElisionFilterFactory.testElision()",1,1,1
"org.apache.solr.analysis.TestEnglishMinimalStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestFinnishLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestFoldingMultitermExtrasQuery.beforeTests()",1,1,1
"org.apache.solr.analysis.TestFoldingMultitermExtrasQuery.getCoreName()",1,1,1
"org.apache.solr.analysis.TestFoldingMultitermExtrasQuery.testICUFolding()",1,1,1
"org.apache.solr.analysis.TestFoldingMultitermExtrasQuery.testICUNormalizer2()",1,1,1
"org.apache.solr.analysis.TestFoldingMultitermExtrasQuery.testICUTransform()",1,1,1
"org.apache.solr.analysis.TestFrenchLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestFrenchMinimalStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestFrenchStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestGalicianMinimalStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestGalicianStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestGermanLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestGermanMinimalStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestGermanNormalizationFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestGermanStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestGreekLowerCaseFilterFactory.testNormalization()",1,1,1
"org.apache.solr.analysis.TestGreekStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestHTMLStripCharFilterFactory.testEmptyEscapedTags()",1,1,1
"org.apache.solr.analysis.TestHTMLStripCharFilterFactory.testEscapedTags()",1,1,1
"org.apache.solr.analysis.TestHTMLStripCharFilterFactory.testNoEscapedTags()",1,1,1
"org.apache.solr.analysis.TestHTMLStripCharFilterFactory.testNothingChanged()",1,1,1
"org.apache.solr.analysis.TestHTMLStripCharFilterFactory.testSeparatorOnlyEscapedTags()",1,1,1
"org.apache.solr.analysis.TestHTMLStripCharFilterFactory.testSingleEscapedTag()",1,1,1
"org.apache.solr.analysis.TestHindiFilters.testHindiNormalizer()",1,1,1
"org.apache.solr.analysis.TestHindiFilters.testIndicNormalizer()",1,1,1
"org.apache.solr.analysis.TestHindiFilters.testStemmer()",1,1,1
"org.apache.solr.analysis.TestHungarianLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestHunspellStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestHyphenatedWordsFilter.testEmptyTerm()",1,1,1
"org.apache.solr.analysis.TestHyphenatedWordsFilter.testHyphenAtEnd()",1,1,1
"org.apache.solr.analysis.TestHyphenatedWordsFilter.testHyphenatedWords()",1,1,1
"org.apache.solr.analysis.TestHyphenatedWordsFilter.testOffsets()",1,1,1
"org.apache.solr.analysis.TestHyphenatedWordsFilter.testRandomString()",1,1,1
"org.apache.solr.analysis.TestHyphenationCompoundWordTokenFilterFactory.testHyphenationOnly()",1,1,1
"org.apache.solr.analysis.TestHyphenationCompoundWordTokenFilterFactory.testHyphenationWithDictionary()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.assertCollatesToSame(TokenStream,TokenStream)",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.assertCollation(TokenStream,TokenStream,int)",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testBasicUsage()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testCustomRules()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testIgnoreAccentsButNotCase()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testIgnorePunctuation()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testIgnoreWhitespace()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testNormalization()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testNumerics()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testSecondaryStrength()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyFilterFactory.testUpperCaseFirst()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyRangeQueries.beforeClass()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyRangeQueries.testBasicRangeQuery()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyRangeQueries.testBasicTermQuery()",1,1,1
"org.apache.solr.analysis.TestICUCollationKeyRangeQueries.testNegativeRangeQuery()",1,1,1
"org.apache.solr.analysis.TestICUFoldingFilterFactory.test()",1,1,1
"org.apache.solr.analysis.TestICUNormalizer2FilterFactory.testDefaults()",1,1,1
"org.apache.solr.analysis.TestICUTokenizerFactory.testMixedText()",1,1,1
"org.apache.solr.analysis.TestICUTransformFilterFactory.test()",1,1,1
"org.apache.solr.analysis.TestICUTransformFilterFactory.testDirection()",1,1,1
"org.apache.solr.analysis.TestIndonesianStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestIndonesianStemFilterFactory.testStemmingInflectional()",1,1,1
"org.apache.solr.analysis.TestIrishLowerCaseFilterFactory.testCasing()",1,1,1
"org.apache.solr.analysis.TestItalianLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestJapaneseBaseFormFilterFactory.testBasics()",1,1,1
"org.apache.solr.analysis.TestJapanesePartOfSpeechStopFilterFactory.testBasics()",1,1,1
"org.apache.solr.analysis.TestJapaneseTokenizerFactory.testDefaults()",1,1,1
"org.apache.solr.analysis.TestJapaneseTokenizerFactory.testMode()",1,1,1
"org.apache.solr.analysis.TestJapaneseTokenizerFactory.testSimple()",1,1,1
"org.apache.solr.analysis.TestJapaneseTokenizerFactory.testUserDict()",1,1,1
"org.apache.solr.analysis.TestKStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestKeepFilterFactory.testInform()",1,1,1
"org.apache.solr.analysis.TestKeepWordFilter.testRandomStrings()",1,1,1
"org.apache.solr.analysis.TestKeepWordFilter.testStopAndGo()",1,1,1
"org.apache.solr.analysis.TestKeywordMarkerFilterFactory.testKeywords()",1,1,1
"org.apache.solr.analysis.TestKeywordMarkerFilterFactory.testKeywordsCaseInsensitive()",1,1,1
"org.apache.solr.analysis.TestLatvianStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestLuceneMatchVersion.beforeClass()",1,1,1
"org.apache.solr.analysis.TestLuceneMatchVersion.testStandardTokenizerVersions()",1,1,1
"org.apache.solr.analysis.TestMappingCharFilterFactory.testParseString()",1,1,4
"org.apache.solr.analysis.TestMultiWordSynonyms.StringMockSolrResourceLoader.StringMockSolrResourceLoader(String)",1,1,1
"org.apache.solr.analysis.TestMultiWordSynonyms.StringMockSolrResourceLoader.getLines(String)",1,1,1
"org.apache.solr.analysis.TestMultiWordSynonyms.StringMockSolrResourceLoader.newInstance(String,String...)",1,1,1
"org.apache.solr.analysis.TestMultiWordSynonyms.StringMockSolrResourceLoader.openResource(String)",1,1,1
"org.apache.solr.analysis.TestMultiWordSynonyms.testMultiWordSynonyms()",1,1,1
"org.apache.solr.analysis.TestMultiWordSynonyms.testMultiWordSynonymsOld()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testEdgeNGramFilter()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testEdgeNGramFilter2()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testEdgeNGramFilter3()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testEdgeNGramTokenizer()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testEdgeNGramTokenizer2()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testEdgeNGramTokenizer3()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testNGramFilter()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testNGramFilter2()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testNGramTokenizer()",1,1,1
"org.apache.solr.analysis.TestNGramFilters.testNGramTokenizer2()",1,1,1
"org.apache.solr.analysis.TestNorwegianLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestNorwegianMinimalStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.pattern(String)",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.test1block1matchLonger()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.test1block1matchSameLength()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.test1block1matchShorter()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.test1block2matchLonger()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.test1blockMultiMatches()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.test2blocksMultiMatches()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.testChain()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.testNothingChange()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.testRandomStrings()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceCharFilter.testReplaceByEmpty()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceFilter.testEmptyTerm()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceFilter.testRandomStrings()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceFilter.testReplaceAll()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceFilter.testReplaceAllWithBackRef()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceFilter.testReplaceFirst()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceFilter.testStripAll()",1,1,1
"org.apache.solr.analysis.TestPatternReplaceFilter.testStripFirst()",1,1,1
"org.apache.solr.analysis.TestPatternTokenizerFactory.testOffsetCorrection()",1,1,1
"org.apache.solr.analysis.TestPatternTokenizerFactory.testRandomStrings()",1,1,3
"org.apache.solr.analysis.TestPatternTokenizerFactory.testSplitting()",1,2,2
"org.apache.solr.analysis.TestPatternTokenizerFactory.tsToString(TokenStream)",1,3,3
"org.apache.solr.analysis.TestPersianNormalizationFilterFactory.testNormalization()",1,1,1
"org.apache.solr.analysis.TestPhoneticFilterFactory.assertAlgorithm(String,String,String,String[])",1,1,1
"org.apache.solr.analysis.TestPhoneticFilterFactory.checkSpeedEncoding(String,String,String)",1,3,3
"org.apache.solr.analysis.TestPhoneticFilterFactory.testAlgorithms()",1,1,1
"org.apache.solr.analysis.TestPhoneticFilterFactory.testFactory()",1,1,1
"org.apache.solr.analysis.TestPhoneticFilterFactory.testFactoryCaseFailure()",1,1,4
"org.apache.solr.analysis.TestPhoneticFilterFactory.testFactoryCaseReflection()",1,1,1
"org.apache.solr.analysis.TestPhoneticFilterFactory.testSpeed()",1,1,1
"org.apache.solr.analysis.TestPorterStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestPortugueseLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestPortugueseMinimalStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestPortugueseStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.add(Builder,String,String,boolean)",1,1,1
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.randomNonEmptyString()",3,3,4
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.testComplexDups()",1,1,1
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.testDups(String,Token...)",2,2,2
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.testEmptyTerm()",1,1,1
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.testNoDups()",1,1,1
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.testRandomStrings()",1,3,3
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.testSimpleDups()",1,1,1
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.tok(int,String)",1,1,1
"org.apache.solr.analysis.TestRemoveDuplicatesTokenFilter.tok(int,String,int,int)",1,1,1
"org.apache.solr.analysis.TestReverseStringFilterFactory.testReversing()",1,1,1
"org.apache.solr.analysis.TestReversedWildcardFilterFactory.beforeClass()",1,1,1
"org.apache.solr.analysis.TestReversedWildcardFilterFactory.setUp()",1,1,1
"org.apache.solr.analysis.TestReversedWildcardFilterFactory.testIndexingAnalysis()",1,1,1
"org.apache.solr.analysis.TestReversedWildcardFilterFactory.testQueryParsing()",1,1,1
"org.apache.solr.analysis.TestReversedWildcardFilterFactory.testReversedTokens()",1,1,1
"org.apache.solr.analysis.TestRussianFilters.testLowerCase()",1,1,1
"org.apache.solr.analysis.TestRussianFilters.testStemmer()",1,1,1
"org.apache.solr.analysis.TestRussianFilters.testTokenizer()",1,1,1
"org.apache.solr.analysis.TestRussianLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testDefaults()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testEmptyTokenSeparator()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testEqualMinAndMaxShingleSize()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testEqualMinAndMaxShingleSizeNoUnigrams()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testMaxShingleSize()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testMinShingleSize()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testMinShingleSizeAndTokenSeparator()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testMinShingleSizeAndTokenSeparatorNoUnigrams()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testMinShingleSizeNoUnigrams()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testNoUnigrams()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testOutputUnigramsIfNoShingles()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testTokenSeparator()",1,1,1
"org.apache.solr.analysis.TestShingleFilterFactory.testTokenSeparatorNoUnigrams()",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.IterTokenStream.IterTokenStream(Collection<Token>)",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.IterTokenStream.IterTokenStream(Token...)",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.IterTokenStream.incrementToken()",2,2,2
"org.apache.solr.analysis.TestSlowSynonymFilter.assertTokenizesTo(SlowSynonymMap,List<Token>,String[],int[])",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.assertTokenizesTo(SlowSynonymMap,List<Token>,String[],int[],int[],int[])",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.assertTokenizesTo(SlowSynonymMap,String,String[])",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.assertTokenizesTo(SlowSynonymMap,String,String[],int[])",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.strings(String)",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.testIncludeOrig()",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.testMapMerge()",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.testMatching()",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.testOffsetBug()",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.testOverlap()",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.testPositionIncrements()",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.testPositionIncrementsWithOrig()",1,1,1
"org.apache.solr.analysis.TestSlowSynonymFilter.tokens(String)",1,6,6
"org.apache.solr.analysis.TestSmartChineseFactories.testSimple()",1,1,1
"org.apache.solr.analysis.TestSmartChineseFactories.testTokenizer()",1,1,1
"org.apache.solr.analysis.TestSpanishLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testASCIIFolding()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testClassicTokenizer()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testClassicTokenizerMaxTokenLength()",1,2,2
"org.apache.solr.analysis.TestStandardFactories.testISOLatin1Folding()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testKeywordTokenizer()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testLetterTokenizer()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testLowerCaseTokenizer()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testStandardFilter()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testStandardTokenizer()",1,1,1
"org.apache.solr.analysis.TestStandardFactories.testStandardTokenizerMaxTokenLength()",1,2,2
"org.apache.solr.analysis.TestStandardFactories.testWhitespaceTokenizer()",1,1,1
"org.apache.solr.analysis.TestStemmerOverrideFilterFactory.testKeywords()",1,1,1
"org.apache.solr.analysis.TestStemmerOverrideFilterFactory.testKeywordsCaseInsensitive()",1,1,1
"org.apache.solr.analysis.TestStempelPolishStemFilterFactory.testBasics()",1,1,1
"org.apache.solr.analysis.TestStopFilterFactory.testInform()",1,1,1
"org.apache.solr.analysis.TestSwedishLightStemFilterFactory.testStemming()",1,1,1
"org.apache.solr.analysis.TestSynonymFilterFactory.StringMockSolrResourceLoader.StringMockSolrResourceLoader(String)",1,1,1
"org.apache.solr.analysis.TestSynonymFilterFactory.StringMockSolrResourceLoader.getLines(String)",1,1,1
"org.apache.solr.analysis.TestSynonymFilterFactory.StringMockSolrResourceLoader.newInstance(String,String...)",1,1,1
"org.apache.solr.analysis.TestSynonymFilterFactory.StringMockSolrResourceLoader.openResource(String)",1,1,1
"org.apache.solr.analysis.TestSynonymFilterFactory.testEmptySynonyms()",1,1,1
"org.apache.solr.analysis.TestSynonymFilterFactory.testMultiwordOffsetsOld()",1,1,1
"org.apache.solr.analysis.TestSynonymFilterFactory.testSynonyms()",1,1,1
"org.apache.solr.analysis.TestSynonymFilterFactory.testSynonymsOld()",1,1,1
"org.apache.solr.analysis.TestSynonymMap.assertTokIncludes(SlowSynonymMap,String,String)",1,2,3
"org.apache.solr.analysis.TestSynonymMap.getSubSynonymMap(SlowSynonymMap,String)",1,1,1
"org.apache.solr.analysis.TestSynonymMap.testBigramTokenizer()",1,1,1
"org.apache.solr.analysis.TestSynonymMap.testInvalidMappingRules()",1,1,2
"org.apache.solr.analysis.TestSynonymMap.testLoadRules()",2,1,2
"org.apache.solr.analysis.TestSynonymMap.testRead1waySynonymRules()",1,1,1
"org.apache.solr.analysis.TestSynonymMap.testRead2waySynonymRules()",1,1,1
"org.apache.solr.analysis.TestSynonymMap.testReadMappingRules()",1,1,1
"org.apache.solr.analysis.TestThaiWordFilterFactory.testWordBreak()",1,1,1
"org.apache.solr.analysis.TestTrimFilter.IterTokenStream.IterTokenStream(Collection<Token>)",1,1,1
"org.apache.solr.analysis.TestTrimFilter.IterTokenStream.IterTokenStream(Token...)",1,1,1
"org.apache.solr.analysis.TestTrimFilter.IterTokenStream.incrementToken()",2,2,2
"org.apache.solr.analysis.TestTrimFilter.testEmptyTerm()",1,1,1
"org.apache.solr.analysis.TestTrimFilter.testRandomStrings()",1,1,1
"org.apache.solr.analysis.TestTrimFilter.testTrim()",1,1,1
"org.apache.solr.analysis.TestTurkishLowerCaseFilterFactory.testCasing()",1,1,1
"org.apache.solr.analysis.TestTypeTokenFilterFactory.testCreationWithBlackList()",1,1,1
"org.apache.solr.analysis.TestTypeTokenFilterFactory.testCreationWithWhiteList()",1,1,1
"org.apache.solr.analysis.TestTypeTokenFilterFactory.testInform()",1,1,1
"org.apache.solr.analysis.TestTypeTokenFilterFactory.testMissingTypesParameter()",1,1,2
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testArabic()",1,1,1
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testChinese()",1,1,1
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testEmails()",1,1,1
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testHyphen()",1,1,1
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testKorean()",1,1,1
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testMatchVersion()",1,1,1
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testMaxTokenLength()",1,2,2
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testUAX29URLEmailTokenizer()",1,1,1
"org.apache.solr.analysis.TestUAX29URLEmailTokenizerFactory.testURLs()",1,1,1
"org.apache.solr.analysis.TestWikipediaTokenizerFactory.testTokenizer()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.LargePosIncTokenFilter.LargePosIncTokenFilter(TokenStream)",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.LargePosIncTokenFilter.incrementToken()",2,4,4
"org.apache.solr.analysis.TestWordDelimiterFilter.beforeClass()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.doSplit(String,String...)",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.doSplitPossessive(int,String,String...)",1,1,2
"org.apache.solr.analysis.TestWordDelimiterFilter.posTst(String,String,String,String)",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testAlphaNumericWords()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testCustomTypes()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testEmptyTerm()",1,3,3
"org.apache.solr.analysis.TestWordDelimiterFilter.testIgnoreCaseChange()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testNoGenerationEdgeCase()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testOffsetChange()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testOffsetChange2()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testOffsetChange3()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testOffsetChange4()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testOffsets()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testPositionIncrements()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testPossessives()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testPreserveOrignalTrue()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testProtectedWords()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testRandomStrings()",1,3,3
"org.apache.solr.analysis.TestWordDelimiterFilter.testRetainPositionIncrement()",1,1,1
"org.apache.solr.analysis.TestWordDelimiterFilter.testSplits()",1,1,1
"org.apache.solr.analysis.ThaiWordFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.TokenOffsetPayloadTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.TokenizerChain.TokenizerChain(CharFilterFactory[],TokenizerFactory,TokenFilterFactory[])",1,1,1
"org.apache.solr.analysis.TokenizerChain.TokenizerChain(TokenizerFactory,TokenFilterFactory[])",1,1,1
"org.apache.solr.analysis.TokenizerChain.charStream(Reader)",1,3,4
"org.apache.solr.analysis.TokenizerChain.getCharFilterFactories()",1,1,1
"org.apache.solr.analysis.TokenizerChain.getStream(String,Reader)",1,2,2
"org.apache.solr.analysis.TokenizerChain.getTokenFilterFactories()",1,1,1
"org.apache.solr.analysis.TokenizerChain.getTokenizerFactory()",1,1,1
"org.apache.solr.analysis.TokenizerChain.toString()",1,3,3
"org.apache.solr.analysis.TrieTokenizer.TrieTokenizer(Reader,TrieTypes,int,NumericTokenStream)",1,1,2
"org.apache.solr.analysis.TrieTokenizer.close()",1,1,1
"org.apache.solr.analysis.TrieTokenizer.end()",1,1,1
"org.apache.solr.analysis.TrieTokenizer.getNumericTokenStream(int)",1,1,1
"org.apache.solr.analysis.TrieTokenizer.incrementToken()",2,2,2
"org.apache.solr.analysis.TrieTokenizer.reset()",1,1,1
"org.apache.solr.analysis.TrieTokenizer.reset(Reader)",2,2,8
"org.apache.solr.analysis.TrieTokenizerFactory.TrieTokenizerFactory(TrieTypes,int)",1,1,1
"org.apache.solr.analysis.TrieTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.TrimFilter.TrimFilter(TokenStream,boolean)",1,1,1
"org.apache.solr.analysis.TrimFilter.incrementToken()",3,5,13
"org.apache.solr.analysis.TrimFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.TrimFilterFactory.init(Map<String, String>)",2,2,3
"org.apache.solr.analysis.TurkishLowerCaseFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.TurkishLowerCaseFilterFactory.getMultiTermComponent()",1,1,1
"org.apache.solr.analysis.TypeAsPayloadTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.TypeTokenFilterFactory.create(TokenStream)",1,1,1
"org.apache.solr.analysis.TypeTokenFilterFactory.getStopTypes()",1,1,1
"org.apache.solr.analysis.TypeTokenFilterFactory.inform(ResourceLoader)",2,4,5
"org.apache.solr.analysis.TypeTokenFilterFactory.isEnablePositionIncrements()",1,1,1
"org.apache.solr.analysis.UAX29URLEmailTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.UAX29URLEmailTokenizerFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.WhitespaceTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.WhitespaceTokenizerFactory.init(Map<String, String>)",1,1,1
"org.apache.solr.analysis.WikipediaTokenizerFactory.create(Reader)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterConcatenation.append(char[],int,int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterConcatenation.clear()",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterConcatenation.isEmpty()",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterConcatenation.write()",1,3,3
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterConcatenation.writeAndClear()",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,byte[],int,CharArraySet)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,CharArraySet)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,byte[],int,int,int,int,int,int,int,int,int,CharArraySet)",1,1,10
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,int,CharArraySet)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,int,int,int,int,int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int,int,CharArraySet)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int,int,int,CharArraySet)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.concatenate(WordDelimiterConcatenation)",1,1,2
"org.apache.solr.analysis.WordDelimiterFilter.flushConcatenation(WordDelimiterConcatenation)",2,3,3
"org.apache.solr.analysis.WordDelimiterFilter.generatePart(boolean)",1,3,4
"org.apache.solr.analysis.WordDelimiterFilter.has(int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.incrementToken()",16,19,25
"org.apache.solr.analysis.WordDelimiterFilter.isAlpha(int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.isDigit(int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.isSubwordDelim(int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.isUpper(int)",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.position(boolean)",3,3,4
"org.apache.solr.analysis.WordDelimiterFilter.reset()",1,1,1
"org.apache.solr.analysis.WordDelimiterFilter.saveState()",1,2,2
"org.apache.solr.analysis.WordDelimiterFilter.shouldConcatenate(int)",1,4,4
"org.apache.solr.analysis.WordDelimiterFilter.shouldGenerateParts(int)",1,4,4
"org.apache.solr.analysis.WordDelimiterFilterFactory.create(TokenStream)",1,1,2
"org.apache.solr.analysis.WordDelimiterFilterFactory.inform(ResourceLoader)",3,4,6
"org.apache.solr.analysis.WordDelimiterFilterFactory.init(Map<String, String>)",1,1,10
"org.apache.solr.analysis.WordDelimiterFilterFactory.parseString(String)",6,4,12
"org.apache.solr.analysis.WordDelimiterFilterFactory.parseType(String)",7,6,7
"org.apache.solr.analysis.WordDelimiterFilterFactory.parseTypes(List<String>)",5,4,7
"org.apache.solr.analysis.WordDelimiterIterator.WordDelimiterIterator(byte[],boolean,boolean,boolean)",1,1,1
"org.apache.solr.analysis.WordDelimiterIterator.charType(int)",2,1,2
"org.apache.solr.analysis.WordDelimiterIterator.endsWithPossessive(int)",1,7,8
"org.apache.solr.analysis.WordDelimiterIterator.getType(int)",7,2,7
"org.apache.solr.analysis.WordDelimiterIterator.isBreak(int,int)",5,10,12
"org.apache.solr.analysis.WordDelimiterIterator.isSingleWord()",2,1,4
"org.apache.solr.analysis.WordDelimiterIterator.next()",5,4,10
"org.apache.solr.analysis.WordDelimiterIterator.setBounds()",1,3,6
"org.apache.solr.analysis.WordDelimiterIterator.setText(char[],int)",1,1,1
"org.apache.solr.analysis.WordDelimiterIterator.type()",4,2,4
"org.apache.solr.client.solrj.LargeVolumeTestBase.DocThread.DocThread(String)",1,1,1
"org.apache.solr.client.solrj.LargeVolumeTestBase.DocThread.run()",1,6,8
"org.apache.solr.client.solrj.LargeVolumeTestBase.query(int)",1,1,1
"org.apache.solr.client.solrj.LargeVolumeTestBase.testMultiThreaded()",1,3,3
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.createNewSolrServer()",1,1,1
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.getSchemaFile()",1,1,1
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.getSolrConfigFile()",1,1,1
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.getSolrHome()",1,1,1
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.getSolrServer()",1,1,1
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.setUp()",1,1,1
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.setupCores()",1,1,1
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.testMergeIndexesByCoreName()",1,1,1
"org.apache.solr.client.solrj.MergeIndexesExampleTestBase.testMergeIndexesByDirName()",1,1,1
"org.apache.solr.client.solrj.MultiCoreExampleTestBase.createNewSolrServer()",1,1,1
"org.apache.solr.client.solrj.MultiCoreExampleTestBase.getSchemaFile()",1,1,1
"org.apache.solr.client.solrj.MultiCoreExampleTestBase.getSolrConfigFile()",1,1,1
"org.apache.solr.client.solrj.MultiCoreExampleTestBase.getSolrHome()",1,1,1
"org.apache.solr.client.solrj.MultiCoreExampleTestBase.getSolrServer()",1,1,1
"org.apache.solr.client.solrj.MultiCoreExampleTestBase.setUp()",1,1,1
"org.apache.solr.client.solrj.MultiCoreExampleTestBase.testMultiCore()",1,1,4
"org.apache.solr.client.solrj.ResponseParser.getVersion()",1,1,1
"org.apache.solr.client.solrj.SolrExampleBinaryTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.SolrExampleBinaryTest.createNewSolrServer()",1,1,2
"org.apache.solr.client.solrj.SolrExampleTestBase.getSchemaFile()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTestBase.getSolrConfigFile()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTestBase.getSolrHome()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTestBase.setUp()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTestHttpSolrServer.beforeTest()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTestHttpSolrServer.createNewSolrServer()",1,2,3
"org.apache.solr.client.solrj.SolrExampleTests.assertNumFound(String,int)",1,2,2
"org.apache.solr.client.solrj.SolrExampleTests.randomTestString(int)",2,3,6
"org.apache.solr.client.solrj.SolrExampleTests.testAddDelete()",1,4,4
"org.apache.solr.client.solrj.SolrExampleTests.testAddRetrieve()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTests.testChineseDefaults()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTests.testCommitWithinOnAdd()",1,3,3
"org.apache.solr.client.solrj.SolrExampleTests.testCommitWithinOnDelete()",3,2,3
"org.apache.solr.client.solrj.SolrExampleTests.testContentStreamRequest()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTests.testExampleConfig()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTests.testFaceting()",1,6,6
"org.apache.solr.client.solrj.SolrExampleTests.testLukeHandler()",1,2,2
"org.apache.solr.client.solrj.SolrExampleTests.testMultiContentStreamRequest()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTests.testPingHandler()",1,1,1
"org.apache.solr.client.solrj.SolrExampleTests.testStatistics()",1,4,5
"org.apache.solr.client.solrj.SolrExampleTests.testUnicode()",1,8,8
"org.apache.solr.client.solrj.SolrExceptionTest.testSolrException()",1,1,2
"org.apache.solr.client.solrj.SolrQuery.ORDER.reverse()",1,1,2
"org.apache.solr.client.solrj.SolrQuery.SolrQuery()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.SolrQuery(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addDateRangeFacet(String,Date,Date,String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addFacetField(String...)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addFacetQuery(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addField(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addFilterQuery(String...)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addHighlightField(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addNumericRangeFacet(String,Number,Number,Number)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addSortField(String,ORDER)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addStatsFieldFacets(String,String...)",1,3,3
"org.apache.solr.client.solrj.SolrQuery.addTermsField(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.addValueToParam(String,String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getCopy()",1,2,2
"org.apache.solr.client.solrj.SolrQuery.getFacetFields()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getFacetLimit()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getFacetMinCount()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getFacetQuery()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getFacetSort()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getFacetSortString()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getFields()",1,2,3
"org.apache.solr.client.solrj.SolrQuery.getFilterQueries()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getHighlight()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getHighlightFields()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getHighlightFragsize()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getHighlightRequireFieldMatch()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getHighlightSimplePost()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getHighlightSimplePre()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getHighlightSnippets()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getQuery()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getQueryType()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getRows()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getSortField()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getSortFields()",2,1,2
"org.apache.solr.client.solrj.SolrQuery.getStart()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTerms()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsFields()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsLimit()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsLower()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsLowerInclusive()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsMaxCount()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsMinCount()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsPrefix()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsRaw()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsRegex()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsRegexFlags()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsSortString()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsUpper()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTermsUpperInclusive()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.getTimeAllowed()",1,1,1
"org.apache.solr.client.solrj.SolrQuery.join(String,String,String)",1,5,5
"org.apache.solr.client.solrj.SolrQuery.join(String[],String,String)",1,5,5
"org.apache.solr.client.solrj.SolrQuery.removeFacetField(String)",1,3,3
"org.apache.solr.client.solrj.SolrQuery.removeFacetQuery(String)",1,3,3
"org.apache.solr.client.solrj.SolrQuery.removeFilterQuery(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.removeHighlightField(String)",1,2,2
"org.apache.solr.client.solrj.SolrQuery.removeSortField(String,ORDER)",1,2,3
"org.apache.solr.client.solrj.SolrQuery.setFacet(boolean)",1,2,2
"org.apache.solr.client.solrj.SolrQuery.setFacetLimit(int)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setFacetMinCount(int)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setFacetMissing(Boolean)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setFacetPrefix(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setFacetPrefix(String,String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setFacetSort(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setFacetSort(boolean)",1,1,2
"org.apache.solr.client.solrj.SolrQuery.setFields(String...)",2,3,4
"org.apache.solr.client.solrj.SolrQuery.setFilterQueries(String...)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setGetFieldStatistics(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setGetFieldStatistics(boolean)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setHighlight(boolean)",1,2,2
"org.apache.solr.client.solrj.SolrQuery.setHighlightFragsize(int)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setHighlightRequireFieldMatch(boolean)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setHighlightSimplePost(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setHighlightSimplePre(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setHighlightSnippets(int)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setIncludeScore(boolean)",1,3,3
"org.apache.solr.client.solrj.SolrQuery.setMissing(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setParam(String,String...)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setParam(String,boolean)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setQuery(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setQueryType(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setRows(Integer)",1,2,2
"org.apache.solr.client.solrj.SolrQuery.setShowDebugInfo(boolean)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setSortField(String,ORDER)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setStart(Integer)",1,2,2
"org.apache.solr.client.solrj.SolrQuery.setTerms(boolean)",1,2,2
"org.apache.solr.client.solrj.SolrQuery.setTermsLimit(int)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsLower(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsLowerInclusive(boolean)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsMaxCount(int)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsMinCount(int)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsPrefix(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsRaw(boolean)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsRegex(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsRegexFlag(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsSortString(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsUpper(String)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTermsUpperInclusive(boolean)",1,1,1
"org.apache.solr.client.solrj.SolrQuery.setTimeAllowed(Integer)",1,2,2
"org.apache.solr.client.solrj.SolrQuery.toSortString(String,ORDER)",1,1,1
"org.apache.solr.client.solrj.SolrQueryTest.testFacetDateRange()",1,1,1
"org.apache.solr.client.solrj.SolrQueryTest.testFacetNumericRange()",1,1,1
"org.apache.solr.client.solrj.SolrQueryTest.testFacetSort()",1,1,1
"org.apache.solr.client.solrj.SolrQueryTest.testFacetSortLegacy()",1,1,1
"org.apache.solr.client.solrj.SolrQueryTest.testOrder()",1,1,1
"org.apache.solr.client.solrj.SolrQueryTest.testSettersGetters()",1,1,1
"org.apache.solr.client.solrj.SolrQueryTest.testSolrQueryMethods()",1,1,1
"org.apache.solr.client.solrj.SolrQueryTest.testTerms()",1,1,1
"org.apache.solr.client.solrj.SolrRequest.SolrRequest(METHOD,String)",1,1,1
"org.apache.solr.client.solrj.SolrRequest.getMethod()",1,1,1
"org.apache.solr.client.solrj.SolrRequest.getPath()",1,1,1
"org.apache.solr.client.solrj.SolrRequest.getResponseParser()",1,1,1
"org.apache.solr.client.solrj.SolrRequest.setMethod(METHOD)",1,1,1
"org.apache.solr.client.solrj.SolrRequest.setPath(String)",1,1,1
"org.apache.solr.client.solrj.SolrRequest.setResponseParser(ResponseParser)",1,1,1
"org.apache.solr.client.solrj.SolrServer.add(Collection<SolrInputDocument>)",1,1,1
"org.apache.solr.client.solrj.SolrServer.add(Collection<SolrInputDocument>,int)",1,1,1
"org.apache.solr.client.solrj.SolrServer.add(SolrInputDocument)",1,1,1
"org.apache.solr.client.solrj.SolrServer.add(SolrInputDocument,int)",1,1,1
"org.apache.solr.client.solrj.SolrServer.addBean(Object)",1,1,1
"org.apache.solr.client.solrj.SolrServer.addBean(Object,int)",1,1,1
"org.apache.solr.client.solrj.SolrServer.addBeans(Collection<?>)",1,1,1
"org.apache.solr.client.solrj.SolrServer.addBeans(Collection<?>,int)",1,2,2
"org.apache.solr.client.solrj.SolrServer.commit()",1,1,1
"org.apache.solr.client.solrj.SolrServer.commit(boolean,boolean)",1,1,1
"org.apache.solr.client.solrj.SolrServer.deleteById(List<String>)",1,1,1
"org.apache.solr.client.solrj.SolrServer.deleteById(List<String>,int)",1,1,1
"org.apache.solr.client.solrj.SolrServer.deleteById(String)",1,1,1
"org.apache.solr.client.solrj.SolrServer.deleteById(String,int)",1,1,1
"org.apache.solr.client.solrj.SolrServer.deleteByQuery(String)",1,1,1
"org.apache.solr.client.solrj.SolrServer.deleteByQuery(String,int)",1,1,1
"org.apache.solr.client.solrj.SolrServer.getBinder()",1,1,2
"org.apache.solr.client.solrj.SolrServer.optimize()",1,1,1
"org.apache.solr.client.solrj.SolrServer.optimize(boolean,boolean)",1,1,1
"org.apache.solr.client.solrj.SolrServer.optimize(boolean,boolean,int)",1,1,1
"org.apache.solr.client.solrj.SolrServer.ping()",1,1,1
"org.apache.solr.client.solrj.SolrServer.query(SolrParams)",1,1,1
"org.apache.solr.client.solrj.SolrServer.query(SolrParams,METHOD)",1,1,1
"org.apache.solr.client.solrj.SolrServer.rollback()",1,1,1
"org.apache.solr.client.solrj.SolrServerException.SolrServerException(String)",1,1,1
"org.apache.solr.client.solrj.SolrServerException.SolrServerException(String,Throwable)",1,1,1
"org.apache.solr.client.solrj.SolrServerException.SolrServerException(Throwable)",1,1,1
"org.apache.solr.client.solrj.SolrServerException.getRootCause()",3,2,3
"org.apache.solr.client.solrj.StartSolrJetty.main(String[])",1,3,3
"org.apache.solr.client.solrj.TestBatchUpdate.beforeTest()",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdate.doIt(CommonsHttpSolrServer)",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdate.testWithBinary()",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdate.testWithBinaryBean()",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdate.testWithXml()",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdateHttpSolrServer.beforeTest()",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdateHttpSolrServer.createNewSolrServer()",1,1,2
"org.apache.solr.client.solrj.TestBatchUpdateHttpSolrServer.doIt(HttpSolrServer)",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdateHttpSolrServer.testWithBinary()",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdateHttpSolrServer.testWithBinaryBean()",1,1,1
"org.apache.solr.client.solrj.TestBatchUpdateHttpSolrServer.testWithXml()",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.SolrInstance(String,int)",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.getConfDir()",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.getDataDir()",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.getHomeDir()",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.getSchemaFile()",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.getSolrConfigFile()",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.getUrl()",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.setUp()",1,1,1
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.startJetty()",1,2,3
"org.apache.solr.client.solrj.TestLBHttpSolrServer.SolrInstance.tearDown()",1,1,2
"org.apache.solr.client.solrj.TestLBHttpSolrServer.addDocs(SolrInstance)",1,2,2
"org.apache.solr.client.solrj.TestLBHttpSolrServer.setUp()",1,2,2
"org.apache.solr.client.solrj.TestLBHttpSolrServer.tearDown()",1,2,2
"org.apache.solr.client.solrj.TestLBHttpSolrServer.testReliability()",1,3,3
"org.apache.solr.client.solrj.TestLBHttpSolrServer.testSimple()",1,5,5
"org.apache.solr.client.solrj.TestLBHttpSolrServer.testTwoServers()",1,2,2
"org.apache.solr.client.solrj.TestLBHttpSolrServer.waitForServer(int,LBHttpSolrServer,int,String)",3,2,3
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.DocField.DocField(AccessibleObject)",1,5,7
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.DocField.get(Object)",3,2,5
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.DocField.getFieldValue(SolrDocument)",7,11,16
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.DocField.inject(T,SolrDocument)",4,8,11
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.DocField.set(Object,Object)",1,6,8
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.DocField.storeName(Field)",1,6,6
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.DocField.storeType()",13,12,24
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.DocumentObjectBinder()",1,1,1
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.collectInfo(Class)",1,4,5
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.getBean(Class<T>,List<DocField>,SolrDocument)",1,3,4
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.getBean(Class<T>,SolrDocument)",1,1,1
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.getBeans(Class<T>,SolrDocumentList)",1,2,2
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.getDocFields(Class)",1,2,2
"org.apache.solr.client.solrj.beans.DocumentObjectBinder.toSolrInputDocument(Object)",2,7,7
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.Item.getAllSuppliers()",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.Item.isInStock()",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.Item.setAllSuppliers(String[])",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.Item.setInStock(Boolean)",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.NotGettableItem.getAaa()",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.NotGettableItem.setAaa(String)",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.NotGettableItem.setInStock(Boolean)",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.testDynamicFieldBinding()",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.testSimple()",1,1,2
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.testSingleVal4Array()",1,1,1
"org.apache.solr.client.solrj.beans.TestDocumentObjectBinder.testToAndFromSolrDocument()",1,1,1
"org.apache.solr.client.solrj.embedded.AbstractEmbeddedSolrServerTestCase.createTempDir()",1,1,1
"org.apache.solr.client.solrj.embedded.AbstractEmbeddedSolrServerTestCase.deleteAdditionalFiles()",1,1,1
"org.apache.solr.client.solrj.embedded.AbstractEmbeddedSolrServerTestCase.getSolrCore(String)",1,1,1
"org.apache.solr.client.solrj.embedded.AbstractEmbeddedSolrServerTestCase.getSolrCore0()",1,1,1
"org.apache.solr.client.solrj.embedded.AbstractEmbeddedSolrServerTestCase.getSolrCore1()",1,1,1
"org.apache.solr.client.solrj.embedded.AbstractEmbeddedSolrServerTestCase.setUp()",1,1,1
"org.apache.solr.client.solrj.embedded.AbstractEmbeddedSolrServerTestCase.tearDown()",1,5,5
"org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.EmbeddedSolrServer(CoreContainer,String)",2,1,3
"org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.EmbeddedSolrServer(SolrCore)",4,1,4
"org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.getCoreContainer()",1,1,1
"org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.getParsedResponse(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(SolrRequest)",7,11,17
"org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.shutdown()",1,1,1
"org.apache.solr.client.solrj.embedded.JettySolrRunner.JettySolrRunner(String,int)",1,1,1
"org.apache.solr.client.solrj.embedded.JettySolrRunner.JettySolrRunner(String,int,String)",1,2,2
"org.apache.solr.client.solrj.embedded.JettySolrRunner.Servlet404.service(HttpServletRequest,HttpServletResponse)",1,1,1
"org.apache.solr.client.solrj.embedded.JettySolrRunner.getLocalPort()",2,1,2
"org.apache.solr.client.solrj.embedded.JettySolrRunner.init(String,int)",1,2,2
"org.apache.solr.client.solrj.embedded.JettySolrRunner.main(String[])",1,2,2
"org.apache.solr.client.solrj.embedded.JettySolrRunner.start()",1,1,1
"org.apache.solr.client.solrj.embedded.JettySolrRunner.start(boolean)",1,3,3
"org.apache.solr.client.solrj.embedded.JettySolrRunner.stop()",1,2,2
"org.apache.solr.client.solrj.embedded.JettySolrRunner.waitForSolr(String)",2,3,3
"org.apache.solr.client.solrj.embedded.JettyWebappTest.setUp()",1,1,1
"org.apache.solr.client.solrj.embedded.JettyWebappTest.tearDown()",1,1,2
"org.apache.solr.client.solrj.embedded.JettyWebappTest.testJSP()",1,1,1
"org.apache.solr.client.solrj.embedded.LargeVolumeBinaryJettyTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.embedded.LargeVolumeEmbeddedTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.embedded.LargeVolumeJettyTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.embedded.MergeIndexesEmbeddedTest.getIndexDirCore1()",1,1,1
"org.apache.solr.client.solrj.embedded.MergeIndexesEmbeddedTest.getSolrAdmin()",1,1,1
"org.apache.solr.client.solrj.embedded.MergeIndexesEmbeddedTest.getSolrCore(String)",1,1,1
"org.apache.solr.client.solrj.embedded.MergeIndexesEmbeddedTest.getSolrCore0()",1,1,1
"org.apache.solr.client.solrj.embedded.MergeIndexesEmbeddedTest.getSolrCore1()",1,1,1
"org.apache.solr.client.solrj.embedded.MergeIndexesEmbeddedTest.setUp()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreEmbeddedTest.getSolrAdmin()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreEmbeddedTest.getSolrCore(String)",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreEmbeddedTest.getSolrCore0()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreEmbeddedTest.getSolrCore1()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreEmbeddedTest.setUp()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreExampleJettyTest.createServer(String)",1,1,2
"org.apache.solr.client.solrj.embedded.MultiCoreExampleJettyTest.getSolrAdmin()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreExampleJettyTest.getSolrCore(String)",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreExampleJettyTest.getSolrCore0()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreExampleJettyTest.getSolrCore1()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreExampleJettyTest.setUp()",1,1,1
"org.apache.solr.client.solrj.embedded.MultiCoreExampleJettyTest.tearDown()",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.NoLog()",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.NoLog(String)",1,1,2
"org.apache.solr.client.solrj.embedded.NoLog.debug(String,Object,Object)",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.debug(String,Throwable)",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.getLogger(String)",2,3,5
"org.apache.solr.client.solrj.embedded.NoLog.info(String,Object,Object)",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.isDebugEnabled()",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.setDebugEnabled(boolean)",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.toString()",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.warn(String,Object,Object)",1,1,1
"org.apache.solr.client.solrj.embedded.NoLog.warn(String,Throwable)",1,1,1
"org.apache.solr.client.solrj.embedded.SolrExampleConcurrentUpdateSolrServerTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.embedded.SolrExampleConcurrentUpdateSolrServerTest.createNewSolrServer()",1,2,3
"org.apache.solr.client.solrj.embedded.SolrExampleEmbeddedTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.embedded.SolrExampleJettyTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.embedded.SolrExampleJettyTest.testBadSetup()",1,1,2
"org.apache.solr.client.solrj.embedded.SolrExampleStreamingBinaryTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.embedded.SolrExampleStreamingBinaryTest.createNewSolrServer()",1,1,2
"org.apache.solr.client.solrj.embedded.SolrExampleStreamingTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.embedded.SolrExampleStreamingTest.createNewSolrServer()",1,1,2
"org.apache.solr.client.solrj.embedded.TestEmbeddedSolrServer.getSolrCore1()",1,1,1
"org.apache.solr.client.solrj.embedded.TestEmbeddedSolrServer.getSolrXml()",1,1,1
"org.apache.solr.client.solrj.embedded.TestEmbeddedSolrServer.testGetCoreContainer()",1,1,1
"org.apache.solr.client.solrj.embedded.TestEmbeddedSolrServer.testShutdown()",1,3,3
"org.apache.solr.client.solrj.embedded.TestSolrProperties.deleteAdditionalFiles()",1,1,1
"org.apache.solr.client.solrj.embedded.TestSolrProperties.exists(String,Node)",1,1,1
"org.apache.solr.client.solrj.embedded.TestSolrProperties.getRenamedSolrAdmin()",1,1,1
"org.apache.solr.client.solrj.embedded.TestSolrProperties.getSolrAdmin()",1,1,1
"org.apache.solr.client.solrj.embedded.TestSolrProperties.getSolrXml()",1,1,1
"org.apache.solr.client.solrj.embedded.TestSolrProperties.testProperties()",1,1,3
"org.apache.solr.client.solrj.impl.BinaryRequestWriter.BAOS.getbuf()",1,1,1
"org.apache.solr.client.solrj.impl.BinaryRequestWriter.getContentStream(UpdateRequest)",1,1,1
"org.apache.solr.client.solrj.impl.BinaryRequestWriter.getContentStreams(SolrRequest)",3,5,6
"org.apache.solr.client.solrj.impl.BinaryRequestWriter.getPath(SolrRequest)",2,2,2
"org.apache.solr.client.solrj.impl.BinaryRequestWriter.getUpdateContentType()",1,1,1
"org.apache.solr.client.solrj.impl.BinaryRequestWriter.write(SolrRequest,OutputStream)",1,2,2
"org.apache.solr.client.solrj.impl.BinaryResponseParser.getVersion()",1,1,1
"org.apache.solr.client.solrj.impl.BinaryResponseParser.getWriterType()",1,1,1
"org.apache.solr.client.solrj.impl.BinaryResponseParser.processResponse(InputStream,String)",1,1,2
"org.apache.solr.client.solrj.impl.BinaryResponseParser.processResponse(Reader)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.CommonsHttpSolrServer(String)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.CommonsHttpSolrServer(String,HttpClient)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.CommonsHttpSolrServer(String,HttpClient,ResponseParser)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.CommonsHttpSolrServer(String,HttpClient,boolean)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.CommonsHttpSolrServer(URL)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.CommonsHttpSolrServer(URL,HttpClient)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean)",2,3,4
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.CommonsHttpSolrServer(URL,HttpClient,boolean)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.add(Iterator<SolrInputDocument>)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.add(Iterator<SolrInputDocument>,int)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.addBeans(Iterator<?>)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.addBeans(Iterator<?>,int)",2,1,2
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.getBaseURL()",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.getConnectionManager()",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.getHttpClient()",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.getInvariantParams()",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.getParser()",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.request(SolrRequest)",1,1,2
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.request(SolrRequest,ResponseParser)",9,28,41
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setAllowCompression(boolean)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setBaseURL(String)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setConnectionManagerTimeout(int)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setConnectionManagerTimeout(long)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setConnectionTimeout(int)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setDefaultMaxConnectionsPerHost(int)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setFollowRedirects(boolean)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setMaxRetries(int)",1,2,2
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setMaxTotalConnections(int)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setParser(ResponseParser)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setRequestWriter(RequestWriter)",1,1,1
"org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.setSoTimeout(int)",1,1,1
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.ConcurrentUpdateSolrServer(String,HttpClient,int,int)",1,1,1
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.ConcurrentUpdateSolrServer(String,int,int)",1,1,1
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.Runner.run()",3,15,19
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.blockUntilFinished()",3,2,3
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.handleError(Throwable)",1,1,1
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.request(SolrRequest)",8,13,14
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.setParser(ResponseParser)",1,1,1
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.setRequestWriter(RequestWriter)",1,1,1
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.shutdown()",1,4,4
"org.apache.solr.client.solrj.impl.ConcurrentUpdateSolrServer.shutdownNow()",1,3,3
"org.apache.solr.client.solrj.impl.HttpSolrServer.DeflateDecompressingEntity.DeflateDecompressingEntity(HttpEntity)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.DeflateDecompressingEntity.getContent()",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.GzipDecompressingEntity.GzipDecompressingEntity(HttpEntity)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.GzipDecompressingEntity.getContent()",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.GzipDecompressingEntity.getContentLength()",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.HttpSolrServer(String)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.HttpSolrServer(String,HttpClient)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.HttpSolrServer(String,HttpClient,ResponseParser)",2,3,4
"org.apache.solr.client.solrj.impl.HttpSolrServer.UseCompressionRequestInterceptor.process(HttpRequest,HttpContext)",1,2,2
"org.apache.solr.client.solrj.impl.HttpSolrServer.UseCompressionResponseInterceptor.process(HttpResponse,HttpContext)",5,5,5
"org.apache.solr.client.solrj.impl.HttpSolrServer.add(Iterator<SolrInputDocument>)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.addBeans(Iterator<?>)",2,1,2
"org.apache.solr.client.solrj.impl.HttpSolrServer.addParts(Collection<ContentStream>,MultipartEntity)",1,3,3
"org.apache.solr.client.solrj.impl.HttpSolrServer.createClient()",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.getBaseURL()",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.getHttpClient()",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.getInvariantParams()",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.getParser()",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.request(SolrRequest)",1,1,2
"org.apache.solr.client.solrj.impl.HttpSolrServer.request(SolrRequest,ResponseParser)",10,20,30
"org.apache.solr.client.solrj.impl.HttpSolrServer.setAllowCompression(boolean)",2,3,3
"org.apache.solr.client.solrj.impl.HttpSolrServer.setBaseURL(String)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.setConnectionTimeout(int)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.setDefaultMaxConnectionsPerHost(int)",2,2,2
"org.apache.solr.client.solrj.impl.HttpSolrServer.setFollowRedirects(boolean)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.setMaxRetries(int)",1,2,2
"org.apache.solr.client.solrj.impl.HttpSolrServer.setMaxTotalConnections(int)",2,2,2
"org.apache.solr.client.solrj.impl.HttpSolrServer.setParser(ResponseParser)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.setRequestWriter(RequestWriter)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.setSoTimeout(int)",1,1,1
"org.apache.solr.client.solrj.impl.HttpSolrServer.shutdown()",1,2,2
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.LBHttpSolrServer(HttpClient,ResponseParser,String...)",1,2,2
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.LBHttpSolrServer(HttpClient,String...)",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.LBHttpSolrServer(String...)",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.ServerWrapper.ServerWrapper(CommonsHttpSolrServer)",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.ServerWrapper.toString()",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.addSolrServer(String)",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.checkAZombieServer(ServerWrapper)",1,2,3
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.finalize()",1,2,2
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.getAliveCheckRunner(WeakReference<LBHttpSolrServer>)",1,3,4
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.getHttpClient()",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.moveAliveToDead(ServerWrapper)",1,3,3
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.removeSolrServer(String)",6,6,8
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.request(SolrRequest)",5,4,9
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.setAliveCheckInterval(int)",2,1,2
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.setConnectionManagerTimeout(int)",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.setConnectionTimeout(int)",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.setSoTimeout(int)",1,1,1
"org.apache.solr.client.solrj.impl.LBHttpSolrServer.startAliveCheckExecutor()",1,3,3
"org.apache.solr.client.solrj.impl.StreamingUpdateSolrServer.Runner.run()",3,15,19
"org.apache.solr.client.solrj.impl.StreamingUpdateSolrServer.StreamingUpdateSolrServer(String,HttpClient,int,int)",1,1,1
"org.apache.solr.client.solrj.impl.StreamingUpdateSolrServer.StreamingUpdateSolrServer(String,int,int)",1,1,1
"org.apache.solr.client.solrj.impl.StreamingUpdateSolrServer.blockUntilFinished()",3,2,3
"org.apache.solr.client.solrj.impl.StreamingUpdateSolrServer.handleError(Throwable)",1,1,1
"org.apache.solr.client.solrj.impl.StreamingUpdateSolrServer.request(SolrRequest)",8,13,14
"org.apache.solr.client.solrj.impl.XMLResponseParser.KnownType.KnownType(boolean)",1,1,1
"org.apache.solr.client.solrj.impl.XMLResponseParser.KnownType.get(String)",2,2,3
"org.apache.solr.client.solrj.impl.XMLResponseParser.XMLResponseParser()",1,1,1
"org.apache.solr.client.solrj.impl.XMLResponseParser.getWriterType()",1,1,1
"org.apache.solr.client.solrj.impl.XMLResponseParser.processResponse(InputStream,String)",1,1,2
"org.apache.solr.client.solrj.impl.XMLResponseParser.processResponse(Reader)",1,1,2
"org.apache.solr.client.solrj.impl.XMLResponseParser.processResponse(XMLStreamReader)",6,6,9
"org.apache.solr.client.solrj.impl.XMLResponseParser.readArray(XMLStreamReader)",10,9,17
"org.apache.solr.client.solrj.impl.XMLResponseParser.readDocument(XMLStreamReader)",13,13,16
"org.apache.solr.client.solrj.impl.XMLResponseParser.readDocuments(XMLStreamReader)",5,8,9
"org.apache.solr.client.solrj.impl.XMLResponseParser.readNamedList(XMLStreamReader)",10,9,15
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.AbstractUpdateRequest(METHOD,String)",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.getAction()",4,1,4
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.getCommitWithin()",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.getParams()",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.isWaitFlush()",1,2,2
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.isWaitSearcher()",1,2,2
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.process(SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.rollback()",1,1,2
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.setAction(ACTION,boolean,boolean)",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.setAction(ACTION,boolean,boolean,int)",1,3,4
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.setAction(ACTION,boolean,boolean,int,boolean)",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.setCommitWithin(int)",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.setParam(String,String)",1,1,2
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.setParams(ModifiableSolrParams)",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.setWaitFlush(boolean)",1,1,1
"org.apache.solr.client.solrj.request.AbstractUpdateRequest.setWaitSearcher(boolean)",1,1,1
"org.apache.solr.client.solrj.request.ContentStreamUpdateRequest.ContentStreamUpdateRequest(String)",1,1,1
"org.apache.solr.client.solrj.request.ContentStreamUpdateRequest.addContentStream(ContentStream)",1,1,1
"org.apache.solr.client.solrj.request.ContentStreamUpdateRequest.addFile(File)",1,1,1
"org.apache.solr.client.solrj.request.ContentStreamUpdateRequest.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.CoreAdminRequest()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.CoreAdminRequest(String)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.Create()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.getConfigName()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.getDataDir()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.getInstanceDir()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.getParams()",2,5,6
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.getSchemaName()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.setConfigName(String)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.setDataDir(String)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.setInstanceDir(String)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Create.setSchemaName(String)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.MergeIndexes.MergeIndexes()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.MergeIndexes.getIndexDirs()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.MergeIndexes.getParams()",2,5,6
"org.apache.solr.client.solrj.request.CoreAdminRequest.MergeIndexes.getSrcCores()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.MergeIndexes.setIndexDirs(List<String>)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.MergeIndexes.setSrcCores(List<String>)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Persist.Persist()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Persist.getFileName()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Persist.getParams()",2,2,3
"org.apache.solr.client.solrj.request.CoreAdminRequest.Persist.setFileName(String)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Unload.Unload(boolean)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Unload.getParams()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Unload.isDeleteIndex()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.Unload.setDeleteIndex(boolean)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.aliasCore(String,String,SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.createCore(String,String,SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.createCore(String,String,SolrServer,String,String)",1,3,3
"org.apache.solr.client.solrj.request.CoreAdminRequest.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.getParams()",2,2,3
"org.apache.solr.client.solrj.request.CoreAdminRequest.getStatus(String,SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.mergeIndexes(String,String[],String[],SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.persist(String,SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.process(SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.reloadCore(String,SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.renameCore(String,String,SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.setAction(CoreAdminAction)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.setCoreName(String)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.setOtherCoreName(String)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.unloadCore(String,SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.CoreAdminRequest.unloadCore(String,boolean,SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.DirectXmlRequest.DirectXmlRequest(String,String)",1,1,1
"org.apache.solr.client.solrj.request.DirectXmlRequest.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.DirectXmlRequest.getParams()",1,1,1
"org.apache.solr.client.solrj.request.DirectXmlRequest.process(SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.DirectXmlRequest.setParams(SolrParams)",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.DocumentAnalysisRequest()",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.DocumentAnalysisRequest(String)",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.addDocument(SolrInputDocument)",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.addDocuments(Collection<SolrInputDocument>)",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.getDocuments()",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.getParams()",1,2,2
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.getQuery()",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.getXML()",1,2,3
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.isShowMatch()",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.process(SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.setQuery(String)",1,1,1
"org.apache.solr.client.solrj.request.DocumentAnalysisRequest.setShowMatch(boolean)",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.FieldAnalysisRequest()",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.FieldAnalysisRequest(String)",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.addFieldName(String)",1,1,2
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.addFieldType(String)",1,1,2
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.getFieldNames()",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.getFieldTypes()",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.getFieldValue()",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.getParams()",1,4,4
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.getQuery()",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.isShowMatch()",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.listToCommaDelimitedString(List<String>)",1,3,3
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.process(SolrServer)",3,1,4
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.setFieldNames(List<String>)",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.setFieldTypes(List<String>)",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.setFieldValue(String)",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.setQuery(String)",1,1,1
"org.apache.solr.client.solrj.request.FieldAnalysisRequest.setShowMatch(boolean)",1,1,1
"org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec.listToSolrInputDocument(List<NamedList>)",1,5,5
"org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec.marshal(UpdateRequest,OutputStream)",1,5,5
"org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec.solrInputDocumentToList(SolrInputDocument)",1,4,4
"org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec.solrParamsToNamedList(SolrParams)",2,2,3
"org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec.unmarshal(InputStream,StreamingUpdateHandler)",5,16,18
"org.apache.solr.client.solrj.request.LukeRequest.LukeRequest()",1,1,1
"org.apache.solr.client.solrj.request.LukeRequest.LukeRequest(String)",1,1,1
"org.apache.solr.client.solrj.request.LukeRequest.addField(String)",1,1,2
"org.apache.solr.client.solrj.request.LukeRequest.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.LukeRequest.getNumTerms()",1,1,1
"org.apache.solr.client.solrj.request.LukeRequest.getParams()",1,5,5
"org.apache.solr.client.solrj.request.LukeRequest.isShowSchema()",1,1,1
"org.apache.solr.client.solrj.request.LukeRequest.process(SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.LukeRequest.setFields(List<String>)",1,1,1
"org.apache.solr.client.solrj.request.LukeRequest.setNumTerms(int)",1,1,1
"org.apache.solr.client.solrj.request.LukeRequest.setShowSchema(boolean)",1,1,1
"org.apache.solr.client.solrj.request.QueryRequest.QueryRequest()",1,1,1
"org.apache.solr.client.solrj.request.QueryRequest.QueryRequest(SolrParams)",1,1,1
"org.apache.solr.client.solrj.request.QueryRequest.QueryRequest(SolrParams,METHOD)",1,1,1
"org.apache.solr.client.solrj.request.QueryRequest.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.QueryRequest.getParams()",1,1,1
"org.apache.solr.client.solrj.request.QueryRequest.getPath()",2,4,5
"org.apache.solr.client.solrj.request.QueryRequest.process(SolrServer)",1,1,3
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.LazyContentStream(UpdateRequest)",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.getContentType()",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.getDelegate()",2,2,3
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.getName()",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.getReader()",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.getSize()",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.getSourceInfo()",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.getStream()",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.LazyContentStream.writeTo(OutputStream)",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.getContentStream(UpdateRequest)",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.getContentStreams(SolrRequest)",3,2,3
"org.apache.solr.client.solrj.request.RequestWriter.getPath(SolrRequest)",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.getUpdateContentType()",1,1,1
"org.apache.solr.client.solrj.request.RequestWriter.isEmpty(UpdateRequest)",1,4,4
"org.apache.solr.client.solrj.request.RequestWriter.isNull(List)",1,2,2
"org.apache.solr.client.solrj.request.RequestWriter.write(SolrRequest,OutputStream)",1,2,2
"org.apache.solr.client.solrj.request.SolrPing.SolrPing()",1,1,1
"org.apache.solr.client.solrj.request.SolrPing.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.SolrPing.getParams()",1,1,1
"org.apache.solr.client.solrj.request.SolrPing.process(SolrServer)",1,1,1
"org.apache.solr.client.solrj.request.TestUpdateRequestCodec.compareDocs(String,SolrInputDocument,SolrInputDocument)",1,2,4
"org.apache.solr.client.solrj.request.TestUpdateRequestCodec.simple()",1,3,3
"org.apache.solr.client.solrj.request.TestUpdateRequestCodec.testIteratable()",1,2,2
"org.apache.solr.client.solrj.request.UpdateRequest.UpdateRequest()",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.UpdateRequest(String)",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.add(Collection<SolrInputDocument>)",1,2,2
"org.apache.solr.client.solrj.request.UpdateRequest.add(SolrInputDocument)",1,1,2
"org.apache.solr.client.solrj.request.UpdateRequest.clear()",1,4,4
"org.apache.solr.client.solrj.request.UpdateRequest.deleteById(List<String>)",1,2,2
"org.apache.solr.client.solrj.request.UpdateRequest.deleteById(String)",1,1,2
"org.apache.solr.client.solrj.request.UpdateRequest.deleteByQuery(String)",1,1,2
"org.apache.solr.client.solrj.request.UpdateRequest.getContentStreams()",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.getDeleteById()",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.getDeleteQuery()",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.getDocIterator()",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.getDocuments()",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.getXML()",1,1,2
"org.apache.solr.client.solrj.request.UpdateRequest.setAction(ACTION,boolean,boolean)",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.setAction(ACTION,boolean,boolean,int)",1,3,4
"org.apache.solr.client.solrj.request.UpdateRequest.setAction(ACTION,boolean,boolean,int,boolean)",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.setDocIterator(Iterator<SolrInputDocument>)",1,1,1
"org.apache.solr.client.solrj.request.UpdateRequest.writeXML(Writer)",1,19,20
"org.apache.solr.client.solrj.response.AnalysisResponseBase.AnalysisPhase.AnalysisPhase(String)",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.AnalysisPhase.addTokenInfo(TokenInfo)",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.AnalysisPhase.getClassName()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.AnalysisPhase.getTokens()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo.TokenInfo(String,String,String,int,int,int,boolean)",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo.getEnd()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo.getPosition()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo.getRawText()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo.getStart()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo.getText()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo.getType()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.TokenInfo.isMatch()",1,1,1
"org.apache.solr.client.solrj.response.AnalysisResponseBase.buildPhases(NamedList<Object>)",1,3,3
"org.apache.solr.client.solrj.response.AnalysisResponseBase.buildTokenInfo(NamedList)",1,1,2
"org.apache.solr.client.solrj.response.AnlysisResponseBaseTest.assertPhase(AnalysisPhase,String,int,TokenInfo)",1,2,2
"org.apache.solr.client.solrj.response.AnlysisResponseBaseTest.buildFakeTokenInfoList(int)",1,2,2
"org.apache.solr.client.solrj.response.AnlysisResponseBaseTest.testBuildPhases()",1,1,1
"org.apache.solr.client.solrj.response.AnlysisResponseBaseTest.testBuildTokenInfo()",1,1,1
"org.apache.solr.client.solrj.response.CoreAdminResponse.getCoreStatus()",1,1,1
"org.apache.solr.client.solrj.response.CoreAdminResponse.getCoreStatus(String)",1,1,1
"org.apache.solr.client.solrj.response.CoreAdminResponse.getStartTime(String)",2,1,2
"org.apache.solr.client.solrj.response.CoreAdminResponse.getUptime(String)",2,1,2
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.DocumentAnalysis.DocumentAnalysis(String)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.DocumentAnalysis.addFieldAnalysis(FieldAnalysis)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.DocumentAnalysis.getDocumentKey()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.DocumentAnalysis.getFieldAnalysesCount()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.DocumentAnalysis.getFieldAnalysis(String)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.DocumentAnalysis.iterator()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.FieldAnalysis(String)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.getFieldName()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.getIndexPhases(String)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.getIndexPhasesByFieldValue()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.getIndexPhasesCount(String)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.getQueryPhases()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.getQueryPhasesCount()",1,2,2
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.getValueCount()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.setIndexPhases(String,List<AnalysisPhase>)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.FieldAnalysis.setQueryPhases(List<AnalysisPhase>)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.getDocumentAnalysesCount()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.getDocumentAnalysis(String)",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.iterator()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponse.setResponse(NamedList<Object>)",1,5,5
"org.apache.solr.client.solrj.response.DocumentAnalysisResponseTest.buildResponse()",1,1,1
"org.apache.solr.client.solrj.response.DocumentAnalysisResponseTest.testSetResponse()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.Count.Count(FacetField,String,long)",1,1,1
"org.apache.solr.client.solrj.response.FacetField.Count.getAsFilterQuery()",2,1,2
"org.apache.solr.client.solrj.response.FacetField.Count.getCount()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.Count.getFacetField()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.Count.getName()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.Count.setCount(long)",1,1,1
"org.apache.solr.client.solrj.response.FacetField.Count.setName(String)",1,1,1
"org.apache.solr.client.solrj.response.FacetField.Count.toString()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.FacetField(String)",1,1,1
"org.apache.solr.client.solrj.response.FacetField.FacetField(String,String,Date)",1,1,1
"org.apache.solr.client.solrj.response.FacetField.add(String,long)",1,1,2
"org.apache.solr.client.solrj.response.FacetField.getEnd()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.getGap()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.getLimitingFields(long)",1,4,4
"org.apache.solr.client.solrj.response.FacetField.getName()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.getValueCount()",1,2,2
"org.apache.solr.client.solrj.response.FacetField.getValues()",1,1,1
"org.apache.solr.client.solrj.response.FacetField.insert(String,long)",1,1,2
"org.apache.solr.client.solrj.response.FacetField.toString()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.Analysis.Analysis()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.Analysis.getIndexPhases()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.Analysis.getIndexPhasesCount()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.Analysis.getQueryPhases()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.Analysis.getQueryPhasesCount()",1,2,2
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.Analysis.setIndexPhases(List<AnalysisPhase>)",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.Analysis.setQueryPhases(List<AnalysisPhase>)",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.getAllFieldNameAnalysis()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.getAllFieldTypeAnalysis()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.getFieldNameAnalysis(String)",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.getFieldNameAnalysisCount()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.getFieldTypeAnalysis(String)",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.getFieldTypeAnalysisCount()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponse.setResponse(NamedList<Object>)",1,5,5
"org.apache.solr.client.solrj.response.FieldAnalysisResponseTest.buildResponse()",1,1,1
"org.apache.solr.client.solrj.response.FieldAnalysisResponseTest.testSetResponse()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.FieldStatsInfo(NamedList<Object>,String)",11,13,13
"org.apache.solr.client.solrj.response.FieldStatsInfo.getCount()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.getFacets()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.getMax()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.getMean()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.getMin()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.getMissing()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.getName()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.getStddev()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.getSum()",1,1,1
"org.apache.solr.client.solrj.response.FieldStatsInfo.toString()",1,8,8
"org.apache.solr.client.solrj.response.Group.Group(String,SolrDocumentList)",1,1,1
"org.apache.solr.client.solrj.response.Group.getGroupValue()",1,1,1
"org.apache.solr.client.solrj.response.Group.getResult()",1,1,1
"org.apache.solr.client.solrj.response.GroupCommand.GroupCommand(String,int)",1,1,1
"org.apache.solr.client.solrj.response.GroupCommand.GroupCommand(String,int,int)",1,1,1
"org.apache.solr.client.solrj.response.GroupCommand.add(Group)",1,1,1
"org.apache.solr.client.solrj.response.GroupCommand.getMatches()",1,1,1
"org.apache.solr.client.solrj.response.GroupCommand.getNGroups()",1,1,1
"org.apache.solr.client.solrj.response.GroupCommand.getName()",1,1,1
"org.apache.solr.client.solrj.response.GroupCommand.getValues()",1,1,1
"org.apache.solr.client.solrj.response.GroupResponse.add(GroupCommand)",1,1,1
"org.apache.solr.client.solrj.response.GroupResponse.getValues()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.FieldInfo(String)",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.getDistinct()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.getDocs()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.getFlags()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.getName()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.getSchema()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.getTopTerms()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.getType()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.isCacheableFaceting()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.parseFlags(String)",1,3,3
"org.apache.solr.client.solrj.response.LukeResponse.FieldInfo.read(NamedList<Object>)",1,9,9
"org.apache.solr.client.solrj.response.LukeResponse.FieldTypeInfo.FieldTypeInfo(String)",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldTypeInfo.getAnalyzer()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldTypeInfo.getClassName()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldTypeInfo.getFields()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldTypeInfo.getName()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldTypeInfo.isTokenized()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.FieldTypeInfo.read(NamedList<Object>)",1,7,7
"org.apache.solr.client.solrj.response.LukeResponse.getFieldInfo()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.getFieldInfo(String)",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.getFieldTypeInfo()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.getFieldTypeInfo(String)",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.getIndexDirectory()",2,1,2
"org.apache.solr.client.solrj.response.LukeResponse.getIndexInfo()",1,1,1
"org.apache.solr.client.solrj.response.LukeResponse.getMaxDoc()",2,1,2
"org.apache.solr.client.solrj.response.LukeResponse.getNumDocs()",2,1,2
"org.apache.solr.client.solrj.response.LukeResponse.getNumTerms()",2,1,2
"org.apache.solr.client.solrj.response.LukeResponse.setResponse(NamedList<Object>)",1,7,8
"org.apache.solr.client.solrj.response.QueryResponse.QueryResponse()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.QueryResponse(NamedList<Object>,SolrServer)",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.extractDebugInfo(NamedList<Object>)",1,4,4
"org.apache.solr.client.solrj.response.QueryResponse.extractFacetInfo(NamedList<Object>)",1,15,16
"org.apache.solr.client.solrj.response.QueryResponse.extractGroupedInfo(NamedList<Object>)",4,7,9
"org.apache.solr.client.solrj.response.QueryResponse.extractHighlightingInfo(NamedList<Object>)",1,3,3
"org.apache.solr.client.solrj.response.QueryResponse.extractSpellCheckInfo(NamedList<Object>)",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.extractStatsInfo(NamedList<Object>)",1,5,5
"org.apache.solr.client.solrj.response.QueryResponse.extractTermsInfo(NamedList<Object>)",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getBeans(Class<T>)",1,2,2
"org.apache.solr.client.solrj.response.QueryResponse.getDebugMap()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getExplainMap()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getFacetDate(String)",4,2,4
"org.apache.solr.client.solrj.response.QueryResponse.getFacetDates()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getFacetField(String)",4,2,4
"org.apache.solr.client.solrj.response.QueryResponse.getFacetFields()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getFacetQuery()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getFacetRanges()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getFieldStatsInfo()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getGroupResponse()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getHeader()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getHighlighting()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getLimitingFacets()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getResults()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getSortValues()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getSpellCheckResponse()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.getTermsResponse()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.removeFacets()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponse.setResponse(NamedList<Object>)",1,13,13
"org.apache.solr.client.solrj.response.QueryResponseTest.testDateFacets()",1,2,2
"org.apache.solr.client.solrj.response.QueryResponseTest.testGroupResponse()",1,1,1
"org.apache.solr.client.solrj.response.QueryResponseTest.testRangeFacets()",1,3,4
"org.apache.solr.client.solrj.response.RangeFacet.Count.Count(String,int,RangeFacet)",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.Count.getCount()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.Count.getRangeFacet()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.Count.getValue()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.Date.Date(String,Date,Date,String,Number,Number)",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.Numeric.Numeric(String,Number,Number,Number,Number,Number)",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.RangeFacet(String,B,B,G,Number,Number)",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.addCount(String,int)",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.getAfter()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.getBefore()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.getCounts()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.getEnd()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.getGap()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.getName()",1,1,1
"org.apache.solr.client.solrj.response.RangeFacet.getStart()",1,1,1
"org.apache.solr.client.solrj.response.SolrResponseBase.getElapsedTime()",1,1,1
"org.apache.solr.client.solrj.response.SolrResponseBase.getQTime()",2,2,2
"org.apache.solr.client.solrj.response.SolrResponseBase.getRequestUrl()",1,1,1
"org.apache.solr.client.solrj.response.SolrResponseBase.getResponse()",1,1,1
"org.apache.solr.client.solrj.response.SolrResponseBase.getResponseHeader()",1,1,1
"org.apache.solr.client.solrj.response.SolrResponseBase.getStatus()",2,2,2
"org.apache.solr.client.solrj.response.SolrResponseBase.setElapsedTime(long)",1,1,1
"org.apache.solr.client.solrj.response.SolrResponseBase.setRequestUrl(String)",1,1,1
"org.apache.solr.client.solrj.response.SolrResponseBase.setResponse(NamedList<Object>)",1,1,1
"org.apache.solr.client.solrj.response.SolrResponseBase.toString()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Collation.addMisspellingsAndCorrection(Correction)",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Collation.getCollationQueryString()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Collation.getMisspellingsAndCorrections()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Collation.getNumberOfHits()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Collation.setCollationQueryString(String)",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Collation.setNumberOfHits(long)",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Correction.Correction(String,String)",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Correction.getCorrection()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Correction.getOriginal()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Correction.setCorrection(String)",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Correction.setOriginal(String)",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.SpellCheckResponse(NamedList<Object>)",9,9,10
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.Suggestion(String,NamedList<Object>)",1,10,10
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getAlternativeFrequencies()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getAlternatives()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getEndOffset()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getNumFound()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getOriginalFrequency()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getStartOffset()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getSuggestionFrequencies()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getSuggestions()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.Suggestion.getToken()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.getCollatedResult()",1,3,3
"org.apache.solr.client.solrj.response.SpellCheckResponse.getCollatedResults()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.getFirstSuggestion(String)",2,2,3
"org.apache.solr.client.solrj.response.SpellCheckResponse.getSuggestion(String)",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.getSuggestionMap()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.getSuggestions()",1,1,1
"org.apache.solr.client.solrj.response.SpellCheckResponse.isCorrectlySpelled()",1,1,1
"org.apache.solr.client.solrj.response.TermsResponse.Term.Term(String,long)",1,1,1
"org.apache.solr.client.solrj.response.TermsResponse.Term.addFrequency(long)",1,1,1
"org.apache.solr.client.solrj.response.TermsResponse.Term.getFrequency()",1,1,1
"org.apache.solr.client.solrj.response.TermsResponse.Term.getTerm()",1,1,1
"org.apache.solr.client.solrj.response.TermsResponse.Term.setFrequency(long)",1,1,1
"org.apache.solr.client.solrj.response.TermsResponse.Term.setTerm(String)",1,1,1
"org.apache.solr.client.solrj.response.TermsResponse.TermsResponse(NamedList<Object>)",1,3,3
"org.apache.solr.client.solrj.response.TermsResponse.getTermMap()",1,1,1
"org.apache.solr.client.solrj.response.TermsResponse.getTerms(String)",1,1,1
"org.apache.solr.client.solrj.response.TermsResponseTest.beforeTest()",1,1,1
"org.apache.solr.client.solrj.response.TermsResponseTest.testTermsResponse()",1,1,1
"org.apache.solr.client.solrj.response.TestSpellCheckResponse.beforeTest()",1,1,1
"org.apache.solr.client.solrj.response.TestSpellCheckResponse.testSpellCheckCollationResponse()",1,11,11
"org.apache.solr.client.solrj.response.TestSpellCheckResponse.testSpellCheckResponse()",1,1,1
"org.apache.solr.client.solrj.response.TestSpellCheckResponse.testSpellCheckResponse_Extended()",1,1,1
"org.apache.solr.client.solrj.util.ClientUtils.escapeQueryChars(String)",1,22,22
"org.apache.solr.client.solrj.util.ClientUtils.getThreadLocalDateFormat()",1,1,1
"org.apache.solr.client.solrj.util.ClientUtils.parseDate(String)",1,1,1
"org.apache.solr.client.solrj.util.ClientUtils.toContentStreams(String,String)",2,1,2
"org.apache.solr.client.solrj.util.ClientUtils.toQueryString(SolrParams,boolean)",1,5,9
"org.apache.solr.client.solrj.util.ClientUtils.toSolrDocument(SolrInputDocument)",1,2,2
"org.apache.solr.client.solrj.util.ClientUtils.toSolrInputDocument(SolrDocument)",1,2,2
"org.apache.solr.client.solrj.util.ClientUtils.toXML(SolrInputDocument)",1,1,2
"org.apache.solr.client.solrj.util.ClientUtils.writeXML(SolrInputDocument,Writer)",1,8,8
"org.apache.solr.client.solrj.util.ClientUtilsTest.testEscapeQuery()",1,1,1
"org.apache.solr.common.SolrDocument.SolrDocument()",1,1,1
"org.apache.solr.common.SolrDocument.addField(String,Object)",2,7,7
"org.apache.solr.common.SolrDocument.clear()",1,1,1
"org.apache.solr.common.SolrDocument.containsKey(Object)",1,1,1
"org.apache.solr.common.SolrDocument.containsValue(Object)",1,1,1
"org.apache.solr.common.SolrDocument.entrySet()",1,1,1
"org.apache.solr.common.SolrDocument.get(Object)",1,1,1
"org.apache.solr.common.SolrDocument.getFieldNames()",1,1,1
"org.apache.solr.common.SolrDocument.getFieldValue(String)",1,1,1
"org.apache.solr.common.SolrDocument.getFieldValueMap()",1,1,1
"org.apache.solr.common.SolrDocument.getFieldValues(String)",3,2,3
"org.apache.solr.common.SolrDocument.getFieldValuesMap()",1,1,1
"org.apache.solr.common.SolrDocument.getFirstValue(String)",3,2,4
"org.apache.solr.common.SolrDocument.isEmpty()",1,1,1
"org.apache.solr.common.SolrDocument.iterator()",1,1,1
"org.apache.solr.common.SolrDocument.keySet()",1,1,1
"org.apache.solr.common.SolrDocument.put(String,Object)",1,1,1
"org.apache.solr.common.SolrDocument.putAll(Map<? extends String, ? extends Object>)",1,1,1
"org.apache.solr.common.SolrDocument.remove(Object)",1,1,1
"org.apache.solr.common.SolrDocument.removeFields(String)",1,1,1
"org.apache.solr.common.SolrDocument.setField(String,Object)",1,5,5
"org.apache.solr.common.SolrDocument.size()",1,1,1
"org.apache.solr.common.SolrDocument.toString()",1,1,1
"org.apache.solr.common.SolrDocument.values()",1,1,1
"org.apache.solr.common.SolrDocumentList.getMaxScore()",1,1,1
"org.apache.solr.common.SolrDocumentList.getNumFound()",1,1,1
"org.apache.solr.common.SolrDocumentList.getStart()",1,1,1
"org.apache.solr.common.SolrDocumentList.setMaxScore(Float)",1,1,1
"org.apache.solr.common.SolrDocumentList.setNumFound(long)",1,1,1
"org.apache.solr.common.SolrDocumentList.setStart(long)",1,1,1
"org.apache.solr.common.SolrDocumentList.toString()",1,1,2
"org.apache.solr.common.SolrDocumentTest.testAddCollections()",1,1,1
"org.apache.solr.common.SolrDocumentTest.testDuplicate()",1,2,2
"org.apache.solr.common.SolrDocumentTest.testMapInterface()",1,1,1
"org.apache.solr.common.SolrDocumentTest.testSimple()",1,2,2
"org.apache.solr.common.SolrDocumentTest.testUnsupportedStuff()",1,1,15
"org.apache.solr.common.SolrException.ErrorCode.ErrorCode(int)",1,1,1
"org.apache.solr.common.SolrException.ErrorCode.getErrorCode(int)",3,1,3
"org.apache.solr.common.SolrException.SolrException(ErrorCode,String)",1,1,1
"org.apache.solr.common.SolrException.SolrException(ErrorCode,String,Throwable)",1,1,2
"org.apache.solr.common.SolrException.SolrException(ErrorCode,String,Throwable,boolean)",1,1,1
"org.apache.solr.common.SolrException.SolrException(ErrorCode,String,boolean)",1,1,1
"org.apache.solr.common.SolrException.SolrException(ErrorCode,Throwable)",1,1,2
"org.apache.solr.common.SolrException.SolrException(int,String)",1,1,1
"org.apache.solr.common.SolrException.SolrException(int,String,Throwable)",1,1,1
"org.apache.solr.common.SolrException.SolrException(int,String,Throwable,boolean)",1,1,1
"org.apache.solr.common.SolrException.SolrException(int,String,boolean)",1,1,1
"org.apache.solr.common.SolrException.SolrException(int,Throwable)",1,1,1
"org.apache.solr.common.SolrException.code()",1,1,1
"org.apache.solr.common.SolrException.doIgnore(String)",4,2,5
"org.apache.solr.common.SolrException.log(Logger)",1,1,1
"org.apache.solr.common.SolrException.log(Logger,String,Throwable)",4,3,4
"org.apache.solr.common.SolrException.log(Logger,Throwable)",4,3,4
"org.apache.solr.common.SolrException.logOnce(Logger,String,Throwable)",4,3,5
"org.apache.solr.common.SolrException.toStr(Throwable)",1,1,1
"org.apache.solr.common.SolrException.toString()",1,1,1
"org.apache.solr.common.SolrInputDocument.SolrInputDocument()",1,1,1
"org.apache.solr.common.SolrInputDocument.SolrInputDocument(Map<String, SolrInputField>)",1,1,1
"org.apache.solr.common.SolrInputDocument.addField(String,Object)",1,1,1
"org.apache.solr.common.SolrInputDocument.addField(String,Object,float)",1,2,3
"org.apache.solr.common.SolrInputDocument.clear()",1,2,2
"org.apache.solr.common.SolrInputDocument.containsKey(Object)",1,1,1
"org.apache.solr.common.SolrInputDocument.containsValue(Object)",1,1,1
"org.apache.solr.common.SolrInputDocument.entrySet()",1,1,1
"org.apache.solr.common.SolrInputDocument.get(Object)",1,1,1
"org.apache.solr.common.SolrInputDocument.getDocumentBoost()",1,1,1
"org.apache.solr.common.SolrInputDocument.getField(String)",1,1,1
"org.apache.solr.common.SolrInputDocument.getFieldNames()",1,1,1
"org.apache.solr.common.SolrInputDocument.getFieldValue(String)",1,2,2
"org.apache.solr.common.SolrInputDocument.getFieldValues(String)",2,2,2
"org.apache.solr.common.SolrInputDocument.isEmpty()",1,1,1
"org.apache.solr.common.SolrInputDocument.iterator()",1,1,1
"org.apache.solr.common.SolrInputDocument.keySet()",1,1,1
"org.apache.solr.common.SolrInputDocument.put(String,SolrInputField)",1,1,1
"org.apache.solr.common.SolrInputDocument.putAll(Map<? extends String, ? extends SolrInputField>)",1,1,1
"org.apache.solr.common.SolrInputDocument.remove(Object)",1,1,1
"org.apache.solr.common.SolrInputDocument.removeField(String)",1,1,1
"org.apache.solr.common.SolrInputDocument.setDocumentBoost(float)",1,1,1
"org.apache.solr.common.SolrInputDocument.setField(String,Object)",1,1,1
"org.apache.solr.common.SolrInputDocument.setField(String,Object,float)",1,1,1
"org.apache.solr.common.SolrInputDocument.size()",1,1,1
"org.apache.solr.common.SolrInputDocument.toString()",1,1,1
"org.apache.solr.common.SolrInputDocument.values()",1,1,1
"org.apache.solr.common.SolrInputField.SolrInputField(String)",1,1,1
"org.apache.solr.common.SolrInputField.addValue(Object,float)",2,7,7
"org.apache.solr.common.SolrInputField.getBoost()",1,1,1
"org.apache.solr.common.SolrInputField.getFirstValue()",3,3,3
"org.apache.solr.common.SolrInputField.getName()",1,1,1
"org.apache.solr.common.SolrInputField.getValue()",1,1,1
"org.apache.solr.common.SolrInputField.getValueCount()",2,2,3
"org.apache.solr.common.SolrInputField.getValues()",3,2,3
"org.apache.solr.common.SolrInputField.iterator()",2,2,2
"org.apache.solr.common.SolrInputField.setBoost(float)",1,1,1
"org.apache.solr.common.SolrInputField.setName(String)",1,1,1
"org.apache.solr.common.SolrInputField.setValue(Object,float)",1,3,3
"org.apache.solr.common.SolrInputField.toString()",1,1,1
"org.apache.solr.common.luke.FieldFlag.FieldFlag(char,String)",1,1,1
"org.apache.solr.common.luke.FieldFlag.getAbbreviation()",1,1,1
"org.apache.solr.common.luke.FieldFlag.getDisplay()",1,1,1
"org.apache.solr.common.luke.FieldFlag.getFlag(char)",3,2,3
"org.apache.solr.common.params.AppendedSolrParams.AppendedSolrParams(SolrParams,SolrParams)",1,1,1
"org.apache.solr.common.params.AppendedSolrParams.getParams(String)",3,1,5
"org.apache.solr.common.params.AppendedSolrParams.toString()",1,1,1
"org.apache.solr.common.params.CommonParams.EchoParamStyle.get(String)",5,2,5
"org.apache.solr.common.params.CoreAdminParams.CoreAdminAction.get(String)",2,2,3
"org.apache.solr.common.params.DefaultSolrParams.DefaultSolrParams(SolrParams,SolrParams)",1,1,2
"org.apache.solr.common.params.DefaultSolrParams.get(String)",1,2,2
"org.apache.solr.common.params.DefaultSolrParams.getParameterNamesIterator()",1,1,1
"org.apache.solr.common.params.DefaultSolrParams.getParams(String)",1,2,2
"org.apache.solr.common.params.DefaultSolrParams.toString()",1,1,1
"org.apache.solr.common.params.FacetParams.FacetDateOther.get(String)",1,1,2
"org.apache.solr.common.params.FacetParams.FacetDateOther.toString()",1,1,1
"org.apache.solr.common.params.FacetParams.FacetRangeInclude.get(String)",1,1,2
"org.apache.solr.common.params.FacetParams.FacetRangeInclude.parseParam(String[])",3,4,5
"org.apache.solr.common.params.FacetParams.FacetRangeInclude.toString()",1,1,1
"org.apache.solr.common.params.FacetParams.FacetRangeOther.get(String)",1,1,2
"org.apache.solr.common.params.FacetParams.FacetRangeOther.toString()",1,1,1
"org.apache.solr.common.params.MapSolrParams.MapSolrParams(Map<String, String>)",1,1,1
"org.apache.solr.common.params.MapSolrParams.get(String)",1,1,1
"org.apache.solr.common.params.MapSolrParams.getMap()",1,1,1
"org.apache.solr.common.params.MapSolrParams.getParameterNamesIterator()",1,1,1
"org.apache.solr.common.params.MapSolrParams.getParams(String)",1,1,2
"org.apache.solr.common.params.MapSolrParams.toString()",1,3,5
"org.apache.solr.common.params.ModifiableSolrParams.ModifiableSolrParams()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.ModifiableSolrParams(Map<String, String[]>)",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.ModifiableSolrParams(SolrParams)",1,2,2
"org.apache.solr.common.params.ModifiableSolrParams.add(SolrParams)",1,2,2
"org.apache.solr.common.params.ModifiableSolrParams.add(String,String...)",1,3,4
"org.apache.solr.common.params.ModifiableSolrParams.clear()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.get(String)",2,1,3
"org.apache.solr.common.params.ModifiableSolrParams.getParameterNames()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.getParameterNamesIterator()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.getParams(String)",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.remove(String)",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.remove(String,String)",4,4,5
"org.apache.solr.common.params.ModifiableSolrParams.set(String,String...)",1,2,4
"org.apache.solr.common.params.ModifiableSolrParams.set(String,boolean)",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.set(String,int)",1,1,1
"org.apache.solr.common.params.ModifiableSolrParams.toString()",1,5,6
"org.apache.solr.common.params.ModifiableSolrParamsTest.compareArrays(String,String[],String[])",1,2,2
"org.apache.solr.common.params.ModifiableSolrParamsTest.setUp()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParamsTest.tearDown()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParamsTest.testAdd()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParamsTest.testAddNormal()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParamsTest.testAddNull()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParamsTest.testAddPseudoNull()",1,1,1
"org.apache.solr.common.params.ModifiableSolrParamsTest.testOldZeroLength()",1,1,1
"org.apache.solr.common.params.MoreLikeThisParams.TermStyle.get(String)",4,3,4
"org.apache.solr.common.params.MultiMapSolrParams.MultiMapSolrParams(Map<String, String[]>)",1,1,1
"org.apache.solr.common.params.MultiMapSolrParams.addParam(String,String,Map<String, String[]>)",1,2,2
"org.apache.solr.common.params.MultiMapSolrParams.get(String)",1,1,2
"org.apache.solr.common.params.MultiMapSolrParams.getMap()",1,1,1
"org.apache.solr.common.params.MultiMapSolrParams.getParameterNamesIterator()",1,1,1
"org.apache.solr.common.params.MultiMapSolrParams.getParams(String)",1,1,1
"org.apache.solr.common.params.MultiMapSolrParams.toString()",1,4,6
"org.apache.solr.common.params.RequiredSolrParams.RequiredSolrParams(SolrParams)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.get(String)",2,1,2
"org.apache.solr.common.params.RequiredSolrParams.get(String,String)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getBool(String,boolean)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getFieldBool(String,String,boolean)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getFieldFloat(String,String,float)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getFieldInt(String,String,int)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getFieldParam(String,String)",3,2,3
"org.apache.solr.common.params.RequiredSolrParams.getFieldParam(String,String,String)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getFieldParams(String,String)",3,2,3
"org.apache.solr.common.params.RequiredSolrParams.getFloat(String,float)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getInt(String,int)",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getParameterNamesIterator()",1,1,1
"org.apache.solr.common.params.RequiredSolrParams.getParams(String)",2,1,3
"org.apache.solr.common.params.RequiredSolrParams.toString()",1,1,1
"org.apache.solr.common.params.SolrParamTest.getReturnCode(Runnable)",1,3,3
"org.apache.solr.common.params.SolrParamTest.testGetParams()",1,2,2
"org.apache.solr.common.params.SolrParams.fpname(String,String)",1,1,1
"org.apache.solr.common.params.SolrParams.get(String,String)",1,1,2
"org.apache.solr.common.params.SolrParams.getBool(String)",1,2,2
"org.apache.solr.common.params.SolrParams.getBool(String,boolean)",1,2,2
"org.apache.solr.common.params.SolrParams.getDouble(String)",1,3,3
"org.apache.solr.common.params.SolrParams.getDouble(String,double)",1,3,3
"org.apache.solr.common.params.SolrParams.getFieldBool(String,String)",1,2,2
"org.apache.solr.common.params.SolrParams.getFieldBool(String,String,boolean)",1,2,2
"org.apache.solr.common.params.SolrParams.getFieldDouble(String,String)",1,3,3
"org.apache.solr.common.params.SolrParams.getFieldDouble(String,String,double)",1,3,3
"org.apache.solr.common.params.SolrParams.getFieldFloat(String,String)",1,3,3
"org.apache.solr.common.params.SolrParams.getFieldFloat(String,String,float)",1,3,3
"org.apache.solr.common.params.SolrParams.getFieldInt(String,String)",1,3,3
"org.apache.solr.common.params.SolrParams.getFieldInt(String,String,int)",1,3,3
"org.apache.solr.common.params.SolrParams.getFieldParam(String,String)",1,2,2
"org.apache.solr.common.params.SolrParams.getFieldParam(String,String,String)",1,2,2
"org.apache.solr.common.params.SolrParams.getFieldParams(String,String)",1,2,2
"org.apache.solr.common.params.SolrParams.getFloat(String)",1,3,3
"org.apache.solr.common.params.SolrParams.getFloat(String,float)",1,3,3
"org.apache.solr.common.params.SolrParams.getInt(String)",1,3,3
"org.apache.solr.common.params.SolrParams.getInt(String,int)",1,3,3
"org.apache.solr.common.params.SolrParams.parseBool(String)",1,1,1
"org.apache.solr.common.params.SolrParams.required()",1,1,1
"org.apache.solr.common.params.SolrParams.toMap(NamedList)",1,2,2
"org.apache.solr.common.params.SolrParams.toMultiMap(NamedList)",1,2,2
"org.apache.solr.common.params.SolrParams.toNamedList()",1,3,3
"org.apache.solr.common.params.SolrParams.toSolrParams(NamedList)",3,3,3
"org.apache.solr.common.params.SolrParams.wrapAppended(SolrParams,SolrParams)",3,1,3
"org.apache.solr.common.params.SolrParams.wrapDefaults(SolrParams,SolrParams)",3,1,3
"org.apache.solr.common.params.TermsParams.TermsRegexpFlag.TermsRegexpFlag(int)",1,1,1
"org.apache.solr.common.params.TermsParams.TermsRegexpFlag.getValue()",1,1,1
"org.apache.solr.common.util.Base64.base64ToByteArray(String)",2,5,8
"org.apache.solr.common.util.Base64.base64toInt(char,byte[])",2,1,2
"org.apache.solr.common.util.Base64.byteArrayToBase64(byte[],int,int)",1,4,4
"org.apache.solr.common.util.ContentStreamBase.FileStream.FileStream(File)",1,1,1
"org.apache.solr.common.util.ContentStreamBase.FileStream.getReader()",1,2,2
"org.apache.solr.common.util.ContentStreamBase.FileStream.getStream()",1,1,1
"org.apache.solr.common.util.ContentStreamBase.StringStream.StringStream(String)",1,1,1
"org.apache.solr.common.util.ContentStreamBase.StringStream.getReader()",1,2,2
"org.apache.solr.common.util.ContentStreamBase.StringStream.getStream()",1,1,1
"org.apache.solr.common.util.ContentStreamBase.URLStream.URLStream(URL)",1,1,1
"org.apache.solr.common.util.ContentStreamBase.URLStream.getStream()",1,1,1
"org.apache.solr.common.util.ContentStreamBase.getCharsetFromContentType(String)",3,3,3
"org.apache.solr.common.util.ContentStreamBase.getContentType()",1,1,1
"org.apache.solr.common.util.ContentStreamBase.getName()",1,1,1
"org.apache.solr.common.util.ContentStreamBase.getReader()",1,2,2
"org.apache.solr.common.util.ContentStreamBase.getSize()",1,1,1
"org.apache.solr.common.util.ContentStreamBase.getSourceInfo()",1,1,1
"org.apache.solr.common.util.ContentStreamBase.setContentType(String)",1,1,1
"org.apache.solr.common.util.ContentStreamBase.setName(String)",1,1,1
"org.apache.solr.common.util.ContentStreamBase.setSize(Long)",1,1,1
"org.apache.solr.common.util.ContentStreamBase.setSourceInfo(String)",1,1,1
"org.apache.solr.common.util.ContentStreamTest.testFileStream()",1,1,1
"org.apache.solr.common.util.ContentStreamTest.testStringStream()",1,1,1
"org.apache.solr.common.util.ContentStreamTest.testURLStream()",1,3,4
"org.apache.solr.common.util.DOMUtil.addToNamedList(Node,NamedList,List)",4,11,14
"org.apache.solr.common.util.DOMUtil.childNodesToList(Node)",1,1,1
"org.apache.solr.common.util.DOMUtil.childNodesToNamedList(Node)",1,1,1
"org.apache.solr.common.util.DOMUtil.getAttr(NamedNodeMap,String)",1,1,1
"org.apache.solr.common.util.DOMUtil.getAttr(NamedNodeMap,String,String)",3,2,4
"org.apache.solr.common.util.DOMUtil.getAttr(Node,String)",1,1,1
"org.apache.solr.common.util.DOMUtil.getAttr(Node,String,String)",1,1,1
"org.apache.solr.common.util.DOMUtil.getChild(Node,String)",5,2,5
"org.apache.solr.common.util.DOMUtil.getText(Node)",2,2,2
"org.apache.solr.common.util.DOMUtil.getText(Node,StringBuilder)",2,4,7
"org.apache.solr.common.util.DOMUtil.nodesToList(NodeList)",1,2,2
"org.apache.solr.common.util.DOMUtil.nodesToNamedList(NodeList)",1,2,2
"org.apache.solr.common.util.DOMUtil.parsePropertyString(String,List<String>,List<String>)",5,7,8
"org.apache.solr.common.util.DOMUtil.substituteProperties(Node,Properties)",1,5,5
"org.apache.solr.common.util.DOMUtil.substituteProperty(String,Properties)",5,7,9
"org.apache.solr.common.util.DOMUtil.substituteSystemProperties(Node)",1,1,1
"org.apache.solr.common.util.DOMUtil.toMap(NamedNodeMap)",1,1,1
"org.apache.solr.common.util.DOMUtil.toMapExcept(NamedNodeMap,String...)",4,3,4
"org.apache.solr.common.util.DOMUtilTest.assertTypeAndValue(NamedList<Object>,String,Object)",1,1,1
"org.apache.solr.common.util.DOMUtilTest.testAddToNamedListPrimitiveTypes()",1,1,1
"org.apache.solr.common.util.DateUtil.ThreadLocalDateFormat.ThreadLocalDateFormat()",1,1,1
"org.apache.solr.common.util.DateUtil.ThreadLocalDateFormat.initialValue()",1,1,1
"org.apache.solr.common.util.DateUtil.formatDate(Date,Calendar,Appendable)",1,12,14
"org.apache.solr.common.util.DateUtil.getThreadLocalDateFormat()",1,1,1
"org.apache.solr.common.util.DateUtil.parseDate(String)",1,1,1
"org.apache.solr.common.util.DateUtil.parseDate(String,Collection<String>)",2,3,3
"org.apache.solr.common.util.DateUtil.parseDate(String,Collection<String>,Date)",3,6,10
"org.apache.solr.common.util.FastInputStream.FastInputStream(InputStream)",1,1,1
"org.apache.solr.common.util.FastInputStream.FastInputStream(InputStream,byte[],int,int)",1,1,1
"org.apache.solr.common.util.FastInputStream.available()",1,1,1
"org.apache.solr.common.util.FastInputStream.close()",1,1,1
"org.apache.solr.common.util.FastInputStream.read()",3,2,3
"org.apache.solr.common.util.FastInputStream.read(byte[],int,int)",5,4,8
"org.apache.solr.common.util.FastInputStream.readBoolean()",1,1,1
"org.apache.solr.common.util.FastInputStream.readByte()",3,2,3
"org.apache.solr.common.util.FastInputStream.readChar()",1,1,1
"org.apache.solr.common.util.FastInputStream.readDouble()",1,1,1
"org.apache.solr.common.util.FastInputStream.readFloat()",1,1,1
"org.apache.solr.common.util.FastInputStream.readFully(byte[])",1,1,1
"org.apache.solr.common.util.FastInputStream.readFully(byte[],int,int)",3,2,3
"org.apache.solr.common.util.FastInputStream.readInt()",1,1,1
"org.apache.solr.common.util.FastInputStream.readLine()",1,1,1
"org.apache.solr.common.util.FastInputStream.readLong()",1,1,1
"org.apache.solr.common.util.FastInputStream.readShort()",1,1,1
"org.apache.solr.common.util.FastInputStream.readUTF()",1,1,1
"org.apache.solr.common.util.FastInputStream.readUnsignedByte()",3,2,3
"org.apache.solr.common.util.FastInputStream.readUnsignedShort()",1,1,1
"org.apache.solr.common.util.FastInputStream.refill()",1,1,1
"org.apache.solr.common.util.FastInputStream.skipBytes(int)",5,2,5
"org.apache.solr.common.util.FastInputStream.wrap(InputStream)",1,1,2
"org.apache.solr.common.util.FastOutputStream.FastOutputStream(OutputStream)",1,1,1
"org.apache.solr.common.util.FastOutputStream.FastOutputStream(OutputStream,byte[],int)",1,1,1
"org.apache.solr.common.util.FastOutputStream.close()",1,1,1
"org.apache.solr.common.util.FastOutputStream.flush()",1,1,1
"org.apache.solr.common.util.FastOutputStream.flushBuffer()",1,1,1
"org.apache.solr.common.util.FastOutputStream.reserve(int)",1,2,2
"org.apache.solr.common.util.FastOutputStream.size()",1,1,1
"org.apache.solr.common.util.FastOutputStream.wrap(OutputStream)",1,1,2
"org.apache.solr.common.util.FastOutputStream.write(byte)",1,2,2
"org.apache.solr.common.util.FastOutputStream.write(byte[])",1,1,1
"org.apache.solr.common.util.FastOutputStream.write(byte[],int,int)",1,4,4
"org.apache.solr.common.util.FastOutputStream.write(int)",1,1,1
"org.apache.solr.common.util.FastOutputStream.writeBoolean(boolean)",1,1,2
"org.apache.solr.common.util.FastOutputStream.writeByte(int)",1,1,1
"org.apache.solr.common.util.FastOutputStream.writeBytes(String)",1,2,2
"org.apache.solr.common.util.FastOutputStream.writeChar(int)",1,1,1
"org.apache.solr.common.util.FastOutputStream.writeChars(String)",1,2,2
"org.apache.solr.common.util.FastOutputStream.writeDouble(double)",1,1,1
"org.apache.solr.common.util.FastOutputStream.writeFloat(float)",1,1,1
"org.apache.solr.common.util.FastOutputStream.writeInt(int)",1,1,1
"org.apache.solr.common.util.FastOutputStream.writeLong(long)",1,1,1
"org.apache.solr.common.util.FastOutputStream.writeShort(int)",1,1,1
"org.apache.solr.common.util.FastOutputStream.writeUTF(String)",1,1,1
"org.apache.solr.common.util.FastWriter.FastWriter(Writer)",1,1,1
"org.apache.solr.common.util.FastWriter.FastWriter(Writer,char[],int)",1,1,1
"org.apache.solr.common.util.FastWriter.append(char)",1,2,2
"org.apache.solr.common.util.FastWriter.close()",1,1,1
"org.apache.solr.common.util.FastWriter.flush()",1,1,1
"org.apache.solr.common.util.FastWriter.flushBuffer()",1,1,1
"org.apache.solr.common.util.FastWriter.wrap(Writer)",1,1,2
"org.apache.solr.common.util.FastWriter.write(String,int,int)",1,3,3
"org.apache.solr.common.util.FastWriter.write(char)",1,2,2
"org.apache.solr.common.util.FastWriter.write(char[],int,int)",1,3,3
"org.apache.solr.common.util.FastWriter.write(int)",1,1,1
"org.apache.solr.common.util.FileUtils.copyFile(File,File)",1,3,5
"org.apache.solr.common.util.FileUtils.resolvePath(File,String)",1,1,2
"org.apache.solr.common.util.FileUtils.sync(File)",3,6,10
"org.apache.solr.common.util.FileUtilsTest.testResolve()",1,1,1
"org.apache.solr.common.util.Hash.lookup3(int[],int,int,int)",2,2,6
"org.apache.solr.common.util.Hash.lookup3ycs(CharSequence,int,int,int)",6,8,13
"org.apache.solr.common.util.Hash.lookup3ycs(int[],int,int,int)",1,1,1
"org.apache.solr.common.util.Hash.lookup3ycs64(CharSequence,int,int,long)",6,8,13
"org.apache.solr.common.util.IteratorChain.addIterator(Iterator<E>)",2,1,2
"org.apache.solr.common.util.IteratorChain.hasNext()",1,2,2
"org.apache.solr.common.util.IteratorChain.next()",2,1,2
"org.apache.solr.common.util.IteratorChain.recursiveHasNext()",3,4,4
"org.apache.solr.common.util.IteratorChain.remove()",1,1,1
"org.apache.solr.common.util.IteratorChainTest.getString(Iterator<String>)",1,2,2
"org.apache.solr.common.util.IteratorChainTest.makeIterator(String,int)",1,2,2
"org.apache.solr.common.util.IteratorChainTest.testCallAddTooLate()",1,1,2
"org.apache.solr.common.util.IteratorChainTest.testCallNextTooEarly()",1,1,2
"org.apache.solr.common.util.IteratorChainTest.testEmptyIteratorsInTheMiddle()",1,1,1
"org.apache.solr.common.util.IteratorChainTest.testNoIterator()",1,1,1
"org.apache.solr.common.util.IteratorChainTest.testOneIterator()",1,1,1
"org.apache.solr.common.util.IteratorChainTest.testRemove()",1,1,2
"org.apache.solr.common.util.IteratorChainTest.testTwoIterators()",1,1,1
"org.apache.solr.common.util.JavaBinCodec.JavaBinCodec()",1,1,1
"org.apache.solr.common.util.JavaBinCodec.JavaBinCodec(ObjectResolver)",1,1,1
"org.apache.solr.common.util.JavaBinCodec.marshal(Object,OutputStream)",1,1,1
"org.apache.solr.common.util.JavaBinCodec.readArray(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readByteArray(FastInputStream)",1,1,1
"org.apache.solr.common.util.JavaBinCodec.readExternString(FastInputStream)",2,2,3
"org.apache.solr.common.util.JavaBinCodec.readIterator(FastInputStream)",3,2,3
"org.apache.solr.common.util.JavaBinCodec.readMap(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readNamedList(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readOrderedMap(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readSize(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readSmallInt(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readSmallLong(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readSolrDocument(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readSolrDocumentList(FastInputStream)",1,1,1
"org.apache.solr.common.util.JavaBinCodec.readStr(FastInputStream)",1,1,10
"org.apache.solr.common.util.JavaBinCodec.readVInt(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readVLong(FastInputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.readVal(FastInputStream)",24,21,24
"org.apache.solr.common.util.JavaBinCodec.unmarshal(InputStream)",2,1,2
"org.apache.solr.common.util.JavaBinCodec.writeArray(Collection)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.writeArray(List)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.writeArray(Object[])",1,2,2
"org.apache.solr.common.util.JavaBinCodec.writeByteArray(byte[],int,int)",1,1,1
"org.apache.solr.common.util.JavaBinCodec.writeExternString(String)",2,4,6
"org.apache.solr.common.util.JavaBinCodec.writeInt(int)",1,3,3
"org.apache.solr.common.util.JavaBinCodec.writeIterator(Iterator)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.writeKnownType(Object)",10,12,13
"org.apache.solr.common.util.JavaBinCodec.writeLong(long)",1,3,3
"org.apache.solr.common.util.JavaBinCodec.writeMap(Map)",1,3,3
"org.apache.solr.common.util.JavaBinCodec.writeNamedList(NamedList)",1,2,3
"org.apache.solr.common.util.JavaBinCodec.writePrimitive(Object)",14,15,15
"org.apache.solr.common.util.JavaBinCodec.writeSolrDocument(SolrDocument)",1,1,1
"org.apache.solr.common.util.JavaBinCodec.writeSolrDocument(SolrDocument,Set<String>)",1,6,7
"org.apache.solr.common.util.JavaBinCodec.writeSolrDocumentList(SolrDocumentList)",1,1,1
"org.apache.solr.common.util.JavaBinCodec.writeStr(String)",8,7,13
"org.apache.solr.common.util.JavaBinCodec.writeTag(byte)",1,1,1
"org.apache.solr.common.util.JavaBinCodec.writeTag(byte,int)",1,3,3
"org.apache.solr.common.util.JavaBinCodec.writeVInt(int,FastOutputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.writeVLong(long,FastOutputStream)",1,2,2
"org.apache.solr.common.util.JavaBinCodec.writeVal(Object)",5,3,5
"org.apache.solr.common.util.NamedList.NamedList()",1,1,1
"org.apache.solr.common.util.NamedList.NamedList(Entry<String, ? extends T>[])",1,1,1
"org.apache.solr.common.util.NamedList.NamedList(List)",1,1,1
"org.apache.solr.common.util.NamedList.NamedListEntry.NamedListEntry()",1,1,1
"org.apache.solr.common.util.NamedList.NamedListEntry.NamedListEntry(String,T)",1,1,1
"org.apache.solr.common.util.NamedList.NamedListEntry.getKey()",1,1,1
"org.apache.solr.common.util.NamedList.NamedListEntry.getValue()",1,1,1
"org.apache.solr.common.util.NamedList.NamedListEntry.setValue(T)",1,1,1
"org.apache.solr.common.util.NamedList.add(String,T)",1,1,1
"org.apache.solr.common.util.NamedList.addAll(Map<String, T>)",1,2,2
"org.apache.solr.common.util.NamedList.addAll(NamedList<T>)",1,1,1
"org.apache.solr.common.util.NamedList.clone()",1,1,1
"org.apache.solr.common.util.NamedList.equals(Object)",2,1,2
"org.apache.solr.common.util.NamedList.get(String)",1,1,1
"org.apache.solr.common.util.NamedList.get(String,int)",5,5,5
"org.apache.solr.common.util.NamedList.getAll(String)",1,5,5
"org.apache.solr.common.util.NamedList.getName(int)",1,1,1
"org.apache.solr.common.util.NamedList.getVal(int)",1,1,1
"org.apache.solr.common.util.NamedList.hashCode()",1,1,1
"org.apache.solr.common.util.NamedList.indexOf(String,int)",5,3,5
"org.apache.solr.common.util.NamedList.iterator()",1,1,1
"org.apache.solr.common.util.NamedList.nameValueMapToList(Entry<String, ? extends T>[])",1,2,2
"org.apache.solr.common.util.NamedList.remove(String)",2,2,2
"org.apache.solr.common.util.NamedList.remove(int)",1,1,1
"org.apache.solr.common.util.NamedList.setName(int,String)",1,1,1
"org.apache.solr.common.util.NamedList.setVal(int,T)",1,1,1
"org.apache.solr.common.util.NamedList.size()",1,1,1
"org.apache.solr.common.util.NamedList.toString()",1,3,3
"org.apache.solr.common.util.NamedListCodec.NamedListCodec()",1,1,1
"org.apache.solr.common.util.NamedListCodec.NamedListCodec(ObjectResolver)",1,1,1
"org.apache.solr.common.util.NamedListTest.testRemove()",1,1,1
"org.apache.solr.common.util.RTimer.RTimer()",1,1,1
"org.apache.solr.common.util.RTimer.asNamedList()",1,3,3
"org.apache.solr.common.util.RTimer.getChildren()",1,1,1
"org.apache.solr.common.util.RTimer.getTime()",1,1,1
"org.apache.solr.common.util.RTimer.main(String[])",1,1,1
"org.apache.solr.common.util.RTimer.now()",1,1,1
"org.apache.solr.common.util.RTimer.pause()",1,1,1
"org.apache.solr.common.util.RTimer.resume()",2,1,2
"org.apache.solr.common.util.RTimer.stop()",1,4,6
"org.apache.solr.common.util.RTimer.sub(String)",1,2,2
"org.apache.solr.common.util.RTimer.toString()",1,1,1
"org.apache.solr.common.util.RegexFileFilter.RegexFileFilter(Pattern)",1,1,1
"org.apache.solr.common.util.RegexFileFilter.RegexFileFilter(String)",1,1,1
"org.apache.solr.common.util.RegexFileFilter.accept(File)",1,1,1
"org.apache.solr.common.util.RegexFileFilter.toString()",1,1,1
"org.apache.solr.common.util.SimpleOrderedMap.SimpleOrderedMap()",1,1,1
"org.apache.solr.common.util.SimpleOrderedMap.SimpleOrderedMap(Entry<String, T>[])",1,1,1
"org.apache.solr.common.util.SimpleOrderedMap.SimpleOrderedMap(List)",1,1,1
"org.apache.solr.common.util.SimpleOrderedMap.clone()",1,1,1
"org.apache.solr.common.util.StrUtils.join(List<String>,char)",1,5,6
"org.apache.solr.common.util.StrUtils.parseBool(String)",4,6,8
"org.apache.solr.common.util.StrUtils.parseBool(String,boolean)",4,6,8
"org.apache.solr.common.util.StrUtils.parseBoolean(String)",1,2,4
"org.apache.solr.common.util.StrUtils.partialURLEncodeVal(Appendable,String)",2,5,10
"org.apache.solr.common.util.StrUtils.splitFileNames(String)",2,3,3
"org.apache.solr.common.util.StrUtils.splitSmart(String,String,boolean)",6,8,14
"org.apache.solr.common.util.StrUtils.splitSmart(String,char)",1,7,11
"org.apache.solr.common.util.StrUtils.splitWS(String,boolean)",6,8,14
"org.apache.solr.common.util.StrUtils.toLower(List<String>)",1,2,2
"org.apache.solr.common.util.SystemIdResolver.SystemIdResolver(ResourceLoader)",1,1,1
"org.apache.solr.common.util.SystemIdResolver.asEntityResolver()",1,1,1
"org.apache.solr.common.util.SystemIdResolver.asURIResolver()",1,1,3
"org.apache.solr.common.util.SystemIdResolver.asXMLResolver()",1,2,3
"org.apache.solr.common.util.SystemIdResolver.createSystemIdFromResourceName(String)",1,1,3
"org.apache.solr.common.util.SystemIdResolver.getExternalSubset(String,String)",1,1,1
"org.apache.solr.common.util.SystemIdResolver.resolveEntity(String,String)",1,1,1
"org.apache.solr.common.util.SystemIdResolver.resolveEntity(String,String,String,String)",3,5,6
"org.apache.solr.common.util.SystemIdResolver.resolveRelativeURI(String,String)",1,3,3
"org.apache.solr.common.util.TestFastInputStream.readChars(InputStream,char[],int,int)",1,4,4
"org.apache.solr.common.util.TestFastInputStream.testgzip()",1,1,1
"org.apache.solr.common.util.TestFastInputStream.writeChars(OutputStream,String,int,int)",1,4,7
"org.apache.solr.common.util.TestHash.testEqualsLOOKUP3()",1,2,2
"org.apache.solr.common.util.TestHash.testHash()",1,4,4
"org.apache.solr.common.util.TestHash.tstEquiv(int[],int)",1,2,2
"org.apache.solr.common.util.TestJavaBinCodec.testStrings()",1,2,2
"org.apache.solr.common.util.TestNamedListCodec.makeRandom(int)",10,10,11
"org.apache.solr.common.util.TestNamedListCodec.rList(int)",1,3,3
"org.apache.solr.common.util.TestNamedListCodec.rNamedList(int)",1,3,3
"org.apache.solr.common.util.TestNamedListCodec.rStr(int)",1,2,2
"org.apache.solr.common.util.TestNamedListCodec.rSz(int)",5,5,5
"org.apache.solr.common.util.TestNamedListCodec.testIterable()",1,2,2
"org.apache.solr.common.util.TestNamedListCodec.testIterator()",1,1,1
"org.apache.solr.common.util.TestNamedListCodec.testRandom()",1,3,3
"org.apache.solr.common.util.TestNamedListCodec.testSimple()",1,1,1
"org.apache.solr.common.util.TestSystemIdResolver.assertEntityResolving(SystemIdResolver,String,String,String)",1,1,1
"org.apache.solr.common.util.TestSystemIdResolver.testResolving()",1,1,1
"org.apache.solr.common.util.TestXMLEscaping.doSimpleTest(String,String)",1,1,1
"org.apache.solr.common.util.TestXMLEscaping.testAmpAndTagAscii()",1,1,1
"org.apache.solr.common.util.TestXMLEscaping.testAmpAndTagWithAccents()",1,1,1
"org.apache.solr.common.util.TestXMLEscaping.testAmpAscii()",1,1,1
"org.apache.solr.common.util.TestXMLEscaping.testAmpDotWithAccents()",1,1,1
"org.apache.solr.common.util.TestXMLEscaping.testAmpWithAccents()",1,1,1
"org.apache.solr.common.util.TestXMLEscaping.testGt()",1,1,1
"org.apache.solr.common.util.TestXMLEscaping.testNoEscape()",1,1,1
"org.apache.solr.common.util.XML.escape(String,Writer,String[])",4,4,4
"org.apache.solr.common.util.XML.escape(char[],int,int,Writer,String[])",4,4,4
"org.apache.solr.common.util.XML.escapeAttributeValue(String,Writer)",1,1,1
"org.apache.solr.common.util.XML.escapeAttributeValue(char[],int,int,Writer)",1,1,1
"org.apache.solr.common.util.XML.escapeCharData(String,Writer)",1,1,1
"org.apache.solr.common.util.XML.writeUnescapedXML(Writer,String,String,Object...)",1,3,3
"org.apache.solr.common.util.XML.writeXML(Writer,String,String)",1,2,2
"org.apache.solr.common.util.XML.writeXML(Writer,String,String,Map<String, String>)",1,3,3
"org.apache.solr.common.util.XML.writeXML(Writer,String,String,Object...)",1,3,3
"org.apache.solr.common.util.XMLErrorLogger.XMLErrorLogger(Logger)",1,1,1
"org.apache.solr.common.util.XMLErrorLogger.error(SAXParseException)",1,1,1
"org.apache.solr.common.util.XMLErrorLogger.error(TransformerException)",1,1,1
"org.apache.solr.common.util.XMLErrorLogger.fatalError(SAXParseException)",1,1,1
"org.apache.solr.common.util.XMLErrorLogger.fatalError(TransformerException)",1,1,1
"org.apache.solr.common.util.XMLErrorLogger.report(String,String,Object,Location)",1,2,2
"org.apache.solr.common.util.XMLErrorLogger.warning(SAXParseException)",1,1,1
"org.apache.solr.common.util.XMLErrorLogger.warning(TransformerException)",1,1,1
"org.apache.solr.core.AbstractSolrEventListener.AbstractSolrEventListener(SolrCore)",1,1,1
"org.apache.solr.core.AbstractSolrEventListener.addEventParms(SolrIndexSearcher,NamedList)",1,2,2
"org.apache.solr.core.AbstractSolrEventListener.init(NamedList)",1,1,1
"org.apache.solr.core.AbstractSolrEventListener.newSearcher(SolrIndexSearcher,SolrIndexSearcher)",1,1,1
"org.apache.solr.core.AbstractSolrEventListener.postCommit()",1,1,1
"org.apache.solr.core.AbstractSolrEventListener.toString()",1,1,1
"org.apache.solr.core.AlternateDirectoryTest.TestFSDirectoryFactory.open(String)",1,2,2
"org.apache.solr.core.AlternateDirectoryTest.TestIndexReaderFactory.newReader(Directory,boolean)",1,1,1
"org.apache.solr.core.AlternateDirectoryTest.beforeClass()",1,1,1
"org.apache.solr.core.AlternateDirectoryTest.testAltDirectoryUsed()",1,1,1
"org.apache.solr.core.ClosingRequestHandler.inform(SolrCore)",1,1,1
"org.apache.solr.core.Config.Config(SolrResourceLoader,String)",1,1,1
"org.apache.solr.core.Config.Config(SolrResourceLoader,String,InputSource,String)",1,8,10
"org.apache.solr.core.Config.Config(SolrResourceLoader,String,InputStream,String)",1,1,2
"org.apache.solr.core.Config.Config(String,InputStream,String)",1,1,1
"org.apache.solr.core.Config.evaluate(String,QName)",1,1,2
"org.apache.solr.core.Config.findClass(String,String...)",1,1,1
"org.apache.solr.core.Config.get(String)",1,1,1
"org.apache.solr.core.Config.get(String,String)",1,1,2
"org.apache.solr.core.Config.getBool(String)",1,1,1
"org.apache.solr.core.Config.getBool(String,boolean)",1,2,2
"org.apache.solr.core.Config.getConfigDir()",1,1,1
"org.apache.solr.core.Config.getDocument()",1,1,1
"org.apache.solr.core.Config.getDouble(String)",1,1,1
"org.apache.solr.core.Config.getDouble(String,double)",1,2,2
"org.apache.solr.core.Config.getFloat(String)",1,1,1
"org.apache.solr.core.Config.getFloat(String,float)",1,2,2
"org.apache.solr.core.Config.getInstanceDir()",1,1,1
"org.apache.solr.core.Config.getInt(String)",1,1,1
"org.apache.solr.core.Config.getInt(String,int)",1,2,2
"org.apache.solr.core.Config.getLines(String)",1,1,1
"org.apache.solr.core.Config.getLuceneVersion(String)",1,1,1
"org.apache.solr.core.Config.getLuceneVersion(String,Version)",2,3,3
"org.apache.solr.core.Config.getName()",1,1,1
"org.apache.solr.core.Config.getNode(String,boolean)",3,5,6
"org.apache.solr.core.Config.getResourceLoader()",1,1,1
"org.apache.solr.core.Config.getResourceName()",1,1,1
"org.apache.solr.core.Config.getVal(String,boolean)",2,1,2
"org.apache.solr.core.Config.getXPath()",1,1,1
"org.apache.solr.core.Config.newInstance(String,String...)",1,1,1
"org.apache.solr.core.Config.normalize(String)",1,2,3
"org.apache.solr.core.Config.openResource(String)",1,1,1
"org.apache.solr.core.Config.parseLuceneVersionString(String)",1,4,4
"org.apache.solr.core.CoreContainer.CoreContainer()",1,1,1
"org.apache.solr.core.CoreContainer.CoreContainer(SolrResourceLoader)",1,1,1
"org.apache.solr.core.CoreContainer.CoreContainer(String)",1,1,1
"org.apache.solr.core.CoreContainer.CoreContainer(String,File)",1,1,1
"org.apache.solr.core.CoreContainer.Initializer.getSolrConfigFilename()",1,1,1
"org.apache.solr.core.CoreContainer.Initializer.initialize()",2,2,4
"org.apache.solr.core.CoreContainer.Initializer.isAbortOnConfigurationError()",1,1,1
"org.apache.solr.core.CoreContainer.Initializer.setAbortOnConfigurationError(boolean)",1,1,1
"org.apache.solr.core.CoreContainer.Initializer.setSolrConfigFilename(String)",1,1,1
"org.apache.solr.core.CoreContainer.checkDefault(String)",1,3,4
"org.apache.solr.core.CoreContainer.create(CoreDescriptor)",1,7,8
"org.apache.solr.core.CoreContainer.createMultiCoreHandler(String)",2,1,2
"org.apache.solr.core.CoreContainer.fileCopy(File,File)",2,8,14
"org.apache.solr.core.CoreContainer.finalize()",1,2,2
"org.apache.solr.core.CoreContainer.getAdminPath()",1,1,1
"org.apache.solr.core.CoreContainer.getConfigFile()",1,1,1
"org.apache.solr.core.CoreContainer.getContainerProperties()",1,1,1
"org.apache.solr.core.CoreContainer.getCore(String)",1,2,2
"org.apache.solr.core.CoreContainer.getCoreNames()",1,1,1
"org.apache.solr.core.CoreContainer.getCoreNames(SolrCore)",1,3,3
"org.apache.solr.core.CoreContainer.getCoreProps(String,String,Properties)",1,4,6
"org.apache.solr.core.CoreContainer.getCores()",1,1,1
"org.apache.solr.core.CoreContainer.getDefaultCoreName()",1,1,1
"org.apache.solr.core.CoreContainer.getManagementPath()",1,1,1
"org.apache.solr.core.CoreContainer.getMultiCoreHandler()",1,1,1
"org.apache.solr.core.CoreContainer.getSolrHome()",1,1,1
"org.apache.solr.core.CoreContainer.isPersistent()",1,1,1
"org.apache.solr.core.CoreContainer.load(String,File)",1,1,1
"org.apache.solr.core.CoreContainer.load(String,InputSource)",5,15,20
"org.apache.solr.core.CoreContainer.persist()",1,1,1
"org.apache.solr.core.CoreContainer.persist(Writer)",1,8,8
"org.apache.solr.core.CoreContainer.persist(Writer,CoreDescriptor)",1,9,10
"org.apache.solr.core.CoreContainer.persistFile(File)",1,6,9
"org.apache.solr.core.CoreContainer.readProperties(Config,Node)",1,2,2
"org.apache.solr.core.CoreContainer.register(SolrCore,boolean)",1,1,1
"org.apache.solr.core.CoreContainer.register(String,SolrCore,boolean)",4,5,8
"org.apache.solr.core.CoreContainer.reload(String)",2,1,2
"org.apache.solr.core.CoreContainer.remove(String)",1,1,1
"org.apache.solr.core.CoreContainer.setAdminPath(String)",1,1,1
"org.apache.solr.core.CoreContainer.setManagementPath(String)",1,1,1
"org.apache.solr.core.CoreContainer.setPersistent(boolean)",1,1,1
"org.apache.solr.core.CoreContainer.shutdown()",1,2,2
"org.apache.solr.core.CoreContainer.swap(String,String)",4,1,5
"org.apache.solr.core.CoreContainer.writeAttribute(Writer,String,Object)",2,1,2
"org.apache.solr.core.CoreContainer.writeProperties(Writer,Properties,String)",1,2,2
"org.apache.solr.core.CoreDescriptor.CoreDescriptor(CoreContainer,String,String)",3,1,3
"org.apache.solr.core.CoreDescriptor.CoreDescriptor(CoreDescriptor)",1,1,1
"org.apache.solr.core.CoreDescriptor.getConfigName()",1,1,1
"org.apache.solr.core.CoreDescriptor.getCoreContainer()",1,1,1
"org.apache.solr.core.CoreDescriptor.getCoreProperties()",1,1,1
"org.apache.solr.core.CoreDescriptor.getDataDir()",3,4,4
"org.apache.solr.core.CoreDescriptor.getDefaultConfigName()",1,1,1
"org.apache.solr.core.CoreDescriptor.getDefaultDataDir()",1,1,1
"org.apache.solr.core.CoreDescriptor.getDefaultSchemaName()",1,1,1
"org.apache.solr.core.CoreDescriptor.getInstanceDir()",1,1,1
"org.apache.solr.core.CoreDescriptor.getName()",1,1,1
"org.apache.solr.core.CoreDescriptor.getPropertiesName()",1,1,1
"org.apache.solr.core.CoreDescriptor.getSchemaName()",1,1,1
"org.apache.solr.core.CoreDescriptor.initImplicitProperties()",1,1,1
"org.apache.solr.core.CoreDescriptor.setConfigName(String)",2,2,3
"org.apache.solr.core.CoreDescriptor.setCoreProperties(Properties)",1,3,3
"org.apache.solr.core.CoreDescriptor.setDataDir(String)",1,2,3
"org.apache.solr.core.CoreDescriptor.setPropertiesName(String)",1,1,1
"org.apache.solr.core.CoreDescriptor.setSchemaName(String)",2,2,3
"org.apache.solr.core.DirectoryFactory.exists(String)",1,1,1
"org.apache.solr.core.DirectoryFactory.init(NamedList)",1,1,1
"org.apache.solr.core.DummyValueSourceParser.init(NamedList)",1,1,1
"org.apache.solr.core.DummyValueSourceParser.parse(FunctionQParser)",1,1,1
"org.apache.solr.core.EmptyRequestHandler.getDescription()",1,1,1
"org.apache.solr.core.EmptyRequestHandler.getSource()",1,1,1
"org.apache.solr.core.EmptyRequestHandler.getSourceId()",1,1,1
"org.apache.solr.core.EmptyRequestHandler.getVersion()",1,1,1
"org.apache.solr.core.EmptyRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.core.FakeDeletionPolicy.getVar1()",1,1,1
"org.apache.solr.core.FakeDeletionPolicy.getVar2()",1,1,1
"org.apache.solr.core.FakeDeletionPolicy.init(NamedList)",1,1,1
"org.apache.solr.core.FakeDeletionPolicy.onCommit(List)",1,1,1
"org.apache.solr.core.FakeDeletionPolicy.onInit(List)",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.IndexCommitWrapper(IndexCommit)",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.delete()",3,2,4
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.equals(Object)",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.getDirectory()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.getFileNames()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.getGeneration()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.getSegmentCount()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.getSegmentsFileName()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.getTimestamp()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.getUserData()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.getVersion()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.hashCode()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexCommitWrapper.isDeleted()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.IndexDeletionPolicyWrapper(IndexDeletionPolicy)",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.cleanReserves()",1,3,3
"org.apache.solr.core.IndexDeletionPolicyWrapper.getCommitPoint(Long)",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.getCommits()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.getLatestCommit()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.getWrappedDeletionPolicy()",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.onCommit(List)",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.onInit(List)",1,1,1
"org.apache.solr.core.IndexDeletionPolicyWrapper.releaseCommitPoint(Long)",2,2,3
"org.apache.solr.core.IndexDeletionPolicyWrapper.saveCommitPoint(Long)",1,1,2
"org.apache.solr.core.IndexDeletionPolicyWrapper.setReserveDuration(Long,long)",3,2,4
"org.apache.solr.core.IndexDeletionPolicyWrapper.updateCommitPoints(List<IndexCommitWrapper>)",1,3,3
"org.apache.solr.core.IndexDeletionPolicyWrapper.wrap(List<IndexCommit>)",1,2,2
"org.apache.solr.core.IndexReaderFactory.getTermInfosIndexDivisor()",1,1,1
"org.apache.solr.core.IndexReaderFactory.init(NamedList)",1,2,2
"org.apache.solr.core.IndexReaderFactoryTest.getSchemaFile()",1,1,1
"org.apache.solr.core.IndexReaderFactoryTest.getSolrConfigFile()",1,1,1
"org.apache.solr.core.IndexReaderFactoryTest.testAltReaderUsed()",1,1,1
"org.apache.solr.core.JmxMonitoredMap.JmxMonitoredMap(String,String,JmxConfiguration)",6,7,11
"org.apache.solr.core.JmxMonitoredMap.SolrDynamicMBean.SolrDynamicMBean(String,SolrInfoMBean)",1,1,1
"org.apache.solr.core.JmxMonitoredMap.SolrDynamicMBean.getAttribute(String)",4,6,7
"org.apache.solr.core.JmxMonitoredMap.SolrDynamicMBean.getAttributes(String[])",1,3,3
"org.apache.solr.core.JmxMonitoredMap.SolrDynamicMBean.getMBeanInfo()",1,6,6
"org.apache.solr.core.JmxMonitoredMap.SolrDynamicMBean.invoke(String,Object[],String[])",1,1,1
"org.apache.solr.core.JmxMonitoredMap.SolrDynamicMBean.setAttribute(Attribute)",1,1,1
"org.apache.solr.core.JmxMonitoredMap.SolrDynamicMBean.setAttributes(AttributeList)",1,1,1
"org.apache.solr.core.JmxMonitoredMap.clear()",1,3,3
"org.apache.solr.core.JmxMonitoredMap.getObjectName(String,SolrInfoMBean)",1,3,3
"org.apache.solr.core.JmxMonitoredMap.put(String,SolrInfoMBean)",1,4,5
"org.apache.solr.core.JmxMonitoredMap.remove(Object)",1,3,3
"org.apache.solr.core.JmxMonitoredMap.unregister(String,SolrInfoMBean)",2,2,4
"org.apache.solr.core.MMapDirectoryFactory.init(NamedList)",2,1,2
"org.apache.solr.core.MMapDirectoryFactory.open(String)",1,2,2
"org.apache.solr.core.MockDirectoryFactory.open(String)",1,1,1
"org.apache.solr.core.MockEventListener.MockEventListener()",1,1,1
"org.apache.solr.core.MockEventListener.getCreateCount()",1,1,1
"org.apache.solr.core.MockEventListener.init(NamedList)",1,1,1
"org.apache.solr.core.MockEventListener.newSearcher(SolrIndexSearcher,SolrIndexSearcher)",1,1,1
"org.apache.solr.core.MockEventListener.postCommit()",1,1,1
"org.apache.solr.core.MockQuerySenderListenerReqHandler.getDescription()",1,1,1
"org.apache.solr.core.MockQuerySenderListenerReqHandler.getSource()",1,1,1
"org.apache.solr.core.MockQuerySenderListenerReqHandler.getSourceId()",1,1,1
"org.apache.solr.core.MockQuerySenderListenerReqHandler.getStatistics()",1,1,1
"org.apache.solr.core.MockQuerySenderListenerReqHandler.getVersion()",1,1,1
"org.apache.solr.core.MockQuerySenderListenerReqHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.core.MockQuerySenderListenerReqHandler.init(NamedList)",1,1,1
"org.apache.solr.core.NIOFSDirectoryFactory.open(String)",1,1,1
"org.apache.solr.core.PluginInfo.PluginInfo(Node,String,boolean,boolean)",1,1,3
"org.apache.solr.core.PluginInfo.PluginInfo(String,Map<String, String>,NamedList,List<PluginInfo>)",1,2,2
"org.apache.solr.core.PluginInfo.getChild(String)",1,2,2
"org.apache.solr.core.PluginInfo.getChildren(String)",2,3,4
"org.apache.solr.core.PluginInfo.isDefault()",1,1,1
"org.apache.solr.core.PluginInfo.isEnabled()",1,2,2
"org.apache.solr.core.PluginInfo.loadSubPlugins(Node)",4,4,6
"org.apache.solr.core.PluginInfo.toString()",1,5,5
"org.apache.solr.core.PluginInfoTest.testChild()",1,1,1
"org.apache.solr.core.PluginInfoTest.testChildren()",1,2,2
"org.apache.solr.core.PluginInfoTest.testClassRequired()",1,2,2
"org.apache.solr.core.PluginInfoTest.testHasChildren()",1,1,1
"org.apache.solr.core.PluginInfoTest.testInitArgsCount()",1,1,1
"org.apache.solr.core.PluginInfoTest.testIsDefault()",1,1,1
"org.apache.solr.core.PluginInfoTest.testIsEnabled()",1,1,1
"org.apache.solr.core.PluginInfoTest.testNameRequired()",1,2,2
"org.apache.solr.core.PluginInfoTest.testNoChildren()",1,1,1
"org.apache.solr.core.QuerySenderListener.QuerySenderListener(SolrCore)",1,1,1
"org.apache.solr.core.QuerySenderListener.newSearcher(SolrIndexSearcher,SolrIndexSearcher)",2,6,8
"org.apache.solr.core.RAMDirectoryFactory.exists(String)",2,2,3
"org.apache.solr.core.RAMDirectoryFactory.open(String)",1,3,3
"org.apache.solr.core.RAMDirectoryFactory.openNew(String)",1,2,2
"org.apache.solr.core.RAMDirectoryFactoryTest.dotestOpenReturnsTheSameForSamePath()",1,1,1
"org.apache.solr.core.RAMDirectoryFactoryTest.dotestOpenSucceedForEmptyDir()",1,1,1
"org.apache.solr.core.RAMDirectoryFactoryTest.test()",1,1,1
"org.apache.solr.core.RefCntRamDirectory.RefCntRamDirectory()",1,1,1
"org.apache.solr.core.RefCntRamDirectory.RefCntRamDirectory(Directory)",1,3,3
"org.apache.solr.core.RefCntRamDirectory.close()",1,1,1
"org.apache.solr.core.RefCntRamDirectory.decRef()",1,2,2
"org.apache.solr.core.RefCntRamDirectory.incRef()",1,1,1
"org.apache.solr.core.RefCntRamDirectory.isOpen()",1,1,1
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.LazyRequestHandlerWrapper(SolrCore,String,NamedList)",1,1,1
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getCategory()",1,1,1
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getDescription()",2,2,2
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getDocs()",2,1,2
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getHandlerClass()",1,1,1
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getName()",1,1,1
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getSource()",1,2,2
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getSourceId()",1,2,2
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getStatistics()",2,2,2
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getVersion()",1,2,2
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.getWrappedHandler()",2,3,4
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.handleRequest(SolrQueryRequest,SolrQueryResponse)",1,2,2
"org.apache.solr.core.RequestHandlers.LazyRequestHandlerWrapper.init(NamedList)",1,1,1
"org.apache.solr.core.RequestHandlers.RequestHandlers(SolrCore)",1,1,1
"org.apache.solr.core.RequestHandlers.get(String)",1,1,1
"org.apache.solr.core.RequestHandlers.getAll(Class)",1,3,3
"org.apache.solr.core.RequestHandlers.getRequestHandlers()",1,1,1
"org.apache.solr.core.RequestHandlers.initHandlersFromConfig(SolrConfig)",4,12,12
"org.apache.solr.core.RequestHandlers.normalize(String)",3,3,4
"org.apache.solr.core.RequestHandlers.register(String,SolrRequestHandler)",2,4,4
"org.apache.solr.core.RequestHandlersTest.beforeClass()",1,1,1
"org.apache.solr.core.RequestHandlersTest.testInitCount()",1,1,1
"org.apache.solr.core.RequestHandlersTest.testLazyLoading()",1,1,1
"org.apache.solr.core.RequestHandlersTest.testPathNormalization()",1,1,1
"org.apache.solr.core.ResourceLoaderTest.testAwareCompatibility()",1,3,5
"org.apache.solr.core.ResourceLoaderTest.testBOMMarkers()",1,1,2
"org.apache.solr.core.ResourceLoaderTest.testInstanceDir()",1,1,1
"org.apache.solr.core.ResourceLoaderTest.testWrongEncoding()",1,2,2
"org.apache.solr.core.RunExecutableListener.RunExecutableListener(SolrCore)",1,1,1
"org.apache.solr.core.RunExecutableListener.exec(String)",1,6,7
"org.apache.solr.core.RunExecutableListener.init(NamedList)",1,7,9
"org.apache.solr.core.RunExecutableListener.newSearcher(SolrIndexSearcher,SolrIndexSearcher)",1,1,1
"org.apache.solr.core.RunExecutableListener.postCommit()",1,1,1
"org.apache.solr.core.SOLR749Test.beforeClass()",1,1,1
"org.apache.solr.core.SOLR749Test.testConstruction()",1,1,1
"org.apache.solr.core.SimpleFSDirectoryFactory.open(String)",1,1,1
"org.apache.solr.core.SolrConfig.HttpCachingConfig.HttpCachingConfig(SolrConfig)",1,6,6
"org.apache.solr.core.SolrConfig.HttpCachingConfig.LastModFrom.parse(String)",1,2,2
"org.apache.solr.core.SolrConfig.HttpCachingConfig.getCacheControlHeader()",1,1,1
"org.apache.solr.core.SolrConfig.HttpCachingConfig.getEtagSeed()",1,1,1
"org.apache.solr.core.SolrConfig.HttpCachingConfig.getLastModFrom()",1,1,1
"org.apache.solr.core.SolrConfig.HttpCachingConfig.getMaxAge()",1,1,1
"org.apache.solr.core.SolrConfig.HttpCachingConfig.isNever304()",1,1,1
"org.apache.solr.core.SolrConfig.JmxConfiguration.JmxConfiguration(boolean,String,String)",1,1,1
"org.apache.solr.core.SolrConfig.JmxConfiguration.JmxConfiguration(boolean,String,String,String)",2,1,3
"org.apache.solr.core.SolrConfig.SolrConfig()",1,1,1
"org.apache.solr.core.SolrConfig.SolrConfig(SolrResourceLoader,String,InputSource)",3,9,11
"org.apache.solr.core.SolrConfig.SolrConfig(String)",1,1,1
"org.apache.solr.core.SolrConfig.SolrConfig(String,InputSource)",1,1,1
"org.apache.solr.core.SolrConfig.SolrConfig(String,String,InputSource)",1,1,1
"org.apache.solr.core.SolrConfig.UpdateHandlerInfo.UpdateHandlerInfo(String,int,int,int)",1,1,1
"org.apache.solr.core.SolrConfig.getDataDir()",1,1,1
"org.apache.solr.core.SolrConfig.getHttpCachingConfig()",1,1,1
"org.apache.solr.core.SolrConfig.getPingQueryRequest(SolrCore)",2,1,2
"org.apache.solr.core.SolrConfig.getPluginInfo(String)",1,3,3
"org.apache.solr.core.SolrConfig.getPluginInfos(String)",1,1,2
"org.apache.solr.core.SolrConfig.getUpdateHandlerInfo()",1,1,1
"org.apache.solr.core.SolrConfig.initLibs()",5,5,7
"org.apache.solr.core.SolrConfig.loadPluginInfo(Class,String,boolean,boolean)",1,2,2
"org.apache.solr.core.SolrConfig.loadUpdatehandlerInfo()",1,1,1
"org.apache.solr.core.SolrConfig.readPingQueryParams(SolrConfig)",1,3,3
"org.apache.solr.core.SolrConfig.readPluginInfos(String,boolean,boolean)",1,3,3
"org.apache.solr.core.SolrCore.LazyQueryResponseWriterWrapper.LazyQueryResponseWriterWrapper(SolrCore,String,NamedList)",1,1,1
"org.apache.solr.core.SolrCore.LazyQueryResponseWriterWrapper.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.core.SolrCore.LazyQueryResponseWriterWrapper.getWrappedWriter()",2,2,3
"org.apache.solr.core.SolrCore.LazyQueryResponseWriterWrapper.init(NamedList)",1,1,1
"org.apache.solr.core.SolrCore.LazyQueryResponseWriterWrapper.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.core.SolrCore.SolrCore(String,IndexSchema)",1,1,1
"org.apache.solr.core.SolrCore.SolrCore(String,String,SolrConfig,IndexSchema,CoreDescriptor)",1,6,7
"org.apache.solr.core.SolrCore.addCloseHook(CloseHook)",1,1,2
"org.apache.solr.core.SolrCore.addIfNotPresent(Map<String, T>,String,Class<? extends T>)",1,3,3
"org.apache.solr.core.SolrCore.booleanQueryMaxClauseCount()",1,3,3
"org.apache.solr.core.SolrCore.close()",3,13,14
"org.apache.solr.core.SolrCore.closeSearcher()",1,2,2
"org.apache.solr.core.SolrCore.createEventListener(String)",1,1,1
"org.apache.solr.core.SolrCore.createInitInstance(PluginInfo,Class<T>,String,String)",2,3,5
"org.apache.solr.core.SolrCore.createInstance(String,Class<T>,String)",4,6,9
"org.apache.solr.core.SolrCore.createQueryResponseWriter(String)",1,1,1
"org.apache.solr.core.SolrCore.createRequestHandler(String)",1,1,1
"org.apache.solr.core.SolrCore.createUpdateHandler(String)",1,1,1
"org.apache.solr.core.SolrCore.execute(SolrQueryRequest,SolrQueryResponse)",2,2,2
"org.apache.solr.core.SolrCore.execute(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse)",3,6,7
"org.apache.solr.core.SolrCore.finalize()",1,2,2
"org.apache.solr.core.SolrCore.getCategory()",1,1,1
"org.apache.solr.core.SolrCore.getConfigFile()",1,1,1
"org.apache.solr.core.SolrCore.getConfigResource()",1,1,1
"org.apache.solr.core.SolrCore.getCoreDescriptor()",1,1,1
"org.apache.solr.core.SolrCore.getDataDir()",1,1,1
"org.apache.solr.core.SolrCore.getDeletionPolicy()",1,1,1
"org.apache.solr.core.SolrCore.getDescription()",1,1,1
"org.apache.solr.core.SolrCore.getDirectoryFactory()",1,1,1
"org.apache.solr.core.SolrCore.getDocs()",1,1,1
"org.apache.solr.core.SolrCore.getHighlighter()",1,2,2
"org.apache.solr.core.SolrCore.getIndexDir()",2,2,3
"org.apache.solr.core.SolrCore.getIndexReaderFactory()",1,1,1
"org.apache.solr.core.SolrCore.getInfoRegistry()",1,1,1
"org.apache.solr.core.SolrCore.getLogId()",1,1,1
"org.apache.solr.core.SolrCore.getName()",1,1,1
"org.apache.solr.core.SolrCore.getNewIndexDir()",1,5,7
"org.apache.solr.core.SolrCore.getNewestSearcher(boolean)",3,1,3
"org.apache.solr.core.SolrCore.getOpenCount()",1,1,1
"org.apache.solr.core.SolrCore.getPingQueryRequest()",1,1,1
"org.apache.solr.core.SolrCore.getQueryPlugin(String)",2,1,2
"org.apache.solr.core.SolrCore.getQueryResponseWriter(SolrQueryRequest)",1,1,1
"org.apache.solr.core.SolrCore.getQueryResponseWriter(String)",3,2,3
"org.apache.solr.core.SolrCore.getRequestHandler(String)",1,1,1
"org.apache.solr.core.SolrCore.getRequestHandlers()",1,1,1
"org.apache.solr.core.SolrCore.getRequestHandlers(Class)",1,1,1
"org.apache.solr.core.SolrCore.getResourceLoader()",1,1,1
"org.apache.solr.core.SolrCore.getSchema()",1,1,1
"org.apache.solr.core.SolrCore.getSchemaFile()",1,1,1
"org.apache.solr.core.SolrCore.getSchemaResource()",1,1,1
"org.apache.solr.core.SolrCore.getSearchComponent(String)",2,1,2
"org.apache.solr.core.SolrCore.getSearchComponents()",1,1,1
"org.apache.solr.core.SolrCore.getSearcher()",1,2,2
"org.apache.solr.core.SolrCore.getSearcher(boolean,boolean,Future[])",7,36,44
"org.apache.solr.core.SolrCore.getSolrConfig()",1,1,1
"org.apache.solr.core.SolrCore.getSolrCore()",2,2,3
"org.apache.solr.core.SolrCore.getSource()",1,1,1
"org.apache.solr.core.SolrCore.getSourceId()",1,1,1
"org.apache.solr.core.SolrCore.getStartTime()",1,1,1
"org.apache.solr.core.SolrCore.getStatistics()",1,1,2
"org.apache.solr.core.SolrCore.getUpdateHandler()",1,1,1
"org.apache.solr.core.SolrCore.getUpdateProcessingChain(String)",2,1,2
"org.apache.solr.core.SolrCore.getValueSourceParser(String)",1,1,1
"org.apache.solr.core.SolrCore.getVersion()",1,1,1
"org.apache.solr.core.SolrCore.initDeletionPolicy()",1,3,3
"org.apache.solr.core.SolrCore.initDeprecatedSupport()",1,9,9
"org.apache.solr.core.SolrCore.initDirectoryFactory()",1,2,2
"org.apache.solr.core.SolrCore.initIndex()",5,6,8
"org.apache.solr.core.SolrCore.initIndexReaderFactory()",1,2,2
"org.apache.solr.core.SolrCore.initListeners()",1,4,4
"org.apache.solr.core.SolrCore.initPlugins(List<PluginInfo>,Class<T>,String)",2,3,3
"org.apache.solr.core.SolrCore.initPlugins(List<PluginInfo>,Map<String, T>,Class<T>,String)",1,2,3
"org.apache.solr.core.SolrCore.initPlugins(Map<String, T>,Class<T>)",1,1,1
"org.apache.solr.core.SolrCore.initPlugins(Map<String, T>,Class<T>,String)",1,1,1
"org.apache.solr.core.SolrCore.initQParsers()",2,3,4
"org.apache.solr.core.SolrCore.initValueSourceParsers()",2,3,4
"org.apache.solr.core.SolrCore.initWriters()",4,13,13
"org.apache.solr.core.SolrCore.isClosed()",1,1,1
"org.apache.solr.core.SolrCore.loadSearchComponents()",3,4,4
"org.apache.solr.core.SolrCore.loadUpdateProcessorChains()",1,2,3
"org.apache.solr.core.SolrCore.log(Throwable)",1,1,1
"org.apache.solr.core.SolrCore.newHolder(SolrIndexSearcher)",2,2,3
"org.apache.solr.core.SolrCore.newSearcher(String)",1,1,1
"org.apache.solr.core.SolrCore.newSearcher(String,boolean)",1,1,1
"org.apache.solr.core.SolrCore.open()",1,1,1
"org.apache.solr.core.SolrCore.registerFirstSearcherListener(SolrEventListener)",1,1,1
"org.apache.solr.core.SolrCore.registerNewSearcherListener(SolrEventListener)",1,1,1
"org.apache.solr.core.SolrCore.registerRequestHandler(String,SolrRequestHandler)",1,1,1
"org.apache.solr.core.SolrCore.registerResponseWriter(String,QueryResponseWriter)",1,1,1
"org.apache.solr.core.SolrCore.registerSearcher(RefCounted<SolrIndexSearcher>)",1,3,3
"org.apache.solr.core.SolrCore.setName(String)",1,1,2
"org.apache.solr.core.SolrCore.setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse)",3,7,8
"org.apache.solr.core.SolrCoreCheckLockOnStartupTest.setUp()",1,1,1
"org.apache.solr.core.SolrCoreCheckLockOnStartupTest.testNativeLockErrorOnStartup()",1,2,2
"org.apache.solr.core.SolrCoreCheckLockOnStartupTest.testSimpleLockErrorOnStartup()",1,2,2
"org.apache.solr.core.SolrCoreTest.setUp()",1,1,1
"org.apache.solr.core.SolrCoreTest.tearDown()",1,1,1
"org.apache.solr.core.SolrCoreTest.testClose()",1,1,1
"org.apache.solr.core.SolrCoreTest.testInfoRegistry()",1,1,1
"org.apache.solr.core.SolrCoreTest.testRefCount()",1,2,2
"org.apache.solr.core.SolrCoreTest.testRefCountMT()",1,6,7
"org.apache.solr.core.SolrCoreTest.testRequestHandlerRegistry()",1,1,1
"org.apache.solr.core.SolrDeletionPolicy.getId(IndexCommit)",1,2,2
"org.apache.solr.core.SolrDeletionPolicy.getMaxCommitAge()",1,1,1
"org.apache.solr.core.SolrDeletionPolicy.getMaxCommitsToKeep()",1,1,1
"org.apache.solr.core.SolrDeletionPolicy.getMaxOptimizedCommitsToKeep()",1,1,1
"org.apache.solr.core.SolrDeletionPolicy.init(NamedList)",1,9,10
"org.apache.solr.core.SolrDeletionPolicy.onCommit(List)",1,1,1
"org.apache.solr.core.SolrDeletionPolicy.onInit(List)",1,1,1
"org.apache.solr.core.SolrDeletionPolicy.setMaxCommitsToKeep(int)",1,1,1
"org.apache.solr.core.SolrDeletionPolicy.setMaxOptimizedCommitsToKeep(int)",1,1,1
"org.apache.solr.core.SolrDeletionPolicy.str(IndexCommit)",1,3,3
"org.apache.solr.core.SolrDeletionPolicy.str(List)",1,2,2
"org.apache.solr.core.SolrDeletionPolicy.updateCommits(List<IndexCommit>)",6,7,10
"org.apache.solr.core.SolrException.SolrException(ErrorCode,String)",1,1,1
"org.apache.solr.core.SolrException.SolrException(ErrorCode,String,Throwable)",1,1,1
"org.apache.solr.core.SolrException.SolrException(ErrorCode,String,Throwable,boolean)",1,1,1
"org.apache.solr.core.SolrException.SolrException(ErrorCode,String,boolean)",1,1,1
"org.apache.solr.core.SolrException.SolrException(ErrorCode,Throwable)",1,1,1
"org.apache.solr.core.SolrInfoRegistry.getRegistry()",1,1,1
"org.apache.solr.core.SolrResourceLoader.SolrResourceLoader(String)",1,1,1
"org.apache.solr.core.SolrResourceLoader.SolrResourceLoader(String,ClassLoader)",1,1,1
"org.apache.solr.core.SolrResourceLoader.SolrResourceLoader(String,ClassLoader,Properties)",1,2,2
"org.apache.solr.core.SolrResourceLoader.addToClassLoader(String)",1,2,2
"org.apache.solr.core.SolrResourceLoader.addToClassLoader(String,FileFilter)",1,1,1
"org.apache.solr.core.SolrResourceLoader.assertAwareCompatibility(Class,Object)",4,3,5
"org.apache.solr.core.SolrResourceLoader.createClassLoader(File,ClassLoader)",1,2,2
"org.apache.solr.core.SolrResourceLoader.findClass(String,String...)",4,11,15
"org.apache.solr.core.SolrResourceLoader.getClassLoader()",1,1,1
"org.apache.solr.core.SolrResourceLoader.getConfigDir()",1,1,1
"org.apache.solr.core.SolrResourceLoader.getCoreProperties()",1,1,1
"org.apache.solr.core.SolrResourceLoader.getDataDir()",1,1,1
"org.apache.solr.core.SolrResourceLoader.getInstanceDir()",1,1,1
"org.apache.solr.core.SolrResourceLoader.getLines(String)",1,1,1
"org.apache.solr.core.SolrResourceLoader.getLines(String,Charset)",4,6,9
"org.apache.solr.core.SolrResourceLoader.getLines(String,String)",1,1,1
"org.apache.solr.core.SolrResourceLoader.inform(Map<String, SolrInfoMBean>)",1,2,2
"org.apache.solr.core.SolrResourceLoader.inform(ResourceLoader)",1,3,3
"org.apache.solr.core.SolrResourceLoader.inform(SolrCore)",1,3,3
"org.apache.solr.core.SolrResourceLoader.locateInstanceDir()",1,1,1
"org.apache.solr.core.SolrResourceLoader.locateSolrHome()",1,7,7
"org.apache.solr.core.SolrResourceLoader.newAdminHandlerInstance(CoreContainer,String,String...)",2,4,5
"org.apache.solr.core.SolrResourceLoader.newInstance(String,String...)",2,6,7
"org.apache.solr.core.SolrResourceLoader.newInstance(String,String[],Class[],Object[])",2,6,7
"org.apache.solr.core.SolrResourceLoader.normalizeDir(String)",1,3,4
"org.apache.solr.core.SolrResourceLoader.openConfig(String)",1,1,1
"org.apache.solr.core.SolrResourceLoader.openResource(String)",5,8,10
"org.apache.solr.core.SolrResourceLoader.openSchema(String)",1,1,1
"org.apache.solr.core.SolrResourceLoader.replaceClassLoader(URLClassLoader,File,FileFilter)",3,6,8
"org.apache.solr.core.StandardDirectoryFactory.open(String)",1,1,1
"org.apache.solr.core.StandardIndexReaderFactory.newReader(Directory,boolean)",1,1,1
"org.apache.solr.core.TestArbitraryIndexDir.getSchemaFile()",1,1,1
"org.apache.solr.core.TestArbitraryIndexDir.getSolrConfigFile()",1,1,1
"org.apache.solr.core.TestArbitraryIndexDir.setUp()",1,1,1
"org.apache.solr.core.TestArbitraryIndexDir.tearDown()",1,1,1
"org.apache.solr.core.TestArbitraryIndexDir.testLoadNewIndexDir()",1,2,3
"org.apache.solr.core.TestBadConfig.getSchemaFile()",1,1,1
"org.apache.solr.core.TestBadConfig.getSolrConfigFile()",1,1,1
"org.apache.solr.core.TestBadConfig.setUp()",1,2,2
"org.apache.solr.core.TestBadConfig.testNothing()",1,1,1
"org.apache.solr.core.TestConfig.beforeClass()",1,1,1
"org.apache.solr.core.TestConfig.testAutomaticDeprecationSupport()",1,1,1
"org.apache.solr.core.TestConfig.testDefaults()",1,1,1
"org.apache.solr.core.TestConfig.testDefaults31()",1,1,1
"org.apache.solr.core.TestConfig.testJavaProperty()",1,1,1
"org.apache.solr.core.TestConfig.testLib()",1,3,4
"org.apache.solr.core.TestConfig.testLucene23Upgrades()",1,1,1
"org.apache.solr.core.TestConfig.testTermIndexDivisor()",1,1,1
"org.apache.solr.core.TestConfig.testTermIndexInterval()",1,1,1
"org.apache.solr.core.TestJmxIntegration.getObjectName(String,SolrInfoMBean)",1,1,1
"org.apache.solr.core.TestJmxIntegration.getSchemaFile()",1,1,1
"org.apache.solr.core.TestJmxIntegration.getSolrConfigFile()",1,1,1
"org.apache.solr.core.TestJmxIntegration.setUp()",1,1,1
"org.apache.solr.core.TestJmxIntegration.tearDown()",1,1,1
"org.apache.solr.core.TestJmxIntegration.testJmxOnCoreReload()",1,5,9
"org.apache.solr.core.TestJmxIntegration.testJmxRegistration()",1,3,3
"org.apache.solr.core.TestJmxIntegration.testJmxUpdate()",4,2,4
"org.apache.solr.core.TestJmxMonitoredMap.MockInfoMBean.getCategory()",1,1,1
"org.apache.solr.core.TestJmxMonitoredMap.MockInfoMBean.getDescription()",1,1,1
"org.apache.solr.core.TestJmxMonitoredMap.MockInfoMBean.getDocs()",1,1,1
"org.apache.solr.core.TestJmxMonitoredMap.MockInfoMBean.getName()",1,1,1
"org.apache.solr.core.TestJmxMonitoredMap.MockInfoMBean.getSource()",1,1,1
"org.apache.solr.core.TestJmxMonitoredMap.MockInfoMBean.getSourceId()",1,1,1
"org.apache.solr.core.TestJmxMonitoredMap.MockInfoMBean.getStatistics()",1,1,1
"org.apache.solr.core.TestJmxMonitoredMap.MockInfoMBean.getVersion()",1,1,1
"org.apache.solr.core.TestJmxMonitoredMap.setUp()",3,2,5
"org.apache.solr.core.TestJmxMonitoredMap.tearDown()",1,1,2
"org.apache.solr.core.TestJmxMonitoredMap.testPutRemoveClear()",1,1,1
"org.apache.solr.core.TestLegacyMergeSchedulerPolicyConfig.ExposeWriterHandler.ExposeWriterHandler()",1,1,1
"org.apache.solr.core.TestLegacyMergeSchedulerPolicyConfig.ExposeWriterHandler.getWriter()",1,1,1
"org.apache.solr.core.TestLegacyMergeSchedulerPolicyConfig.beforeClass()",1,1,1
"org.apache.solr.core.TestLegacyMergeSchedulerPolicyConfig.testLegacy()",1,1,1
"org.apache.solr.core.TestMergePolicyConfig.beforeClass()",1,1,1
"org.apache.solr.core.TestMergePolicyConfig.testTieredMergePolicyConfig()",1,1,1
"org.apache.solr.core.TestPropInject.ExposeWriterHandler.ExposeWriterHandler()",1,1,1
"org.apache.solr.core.TestPropInject.ExposeWriterHandler.getWriter()",1,1,1
"org.apache.solr.core.TestPropInject.getSchemaFile()",1,1,1
"org.apache.solr.core.TestPropInject.getSolrConfigFile()",1,1,1
"org.apache.solr.core.TestPropInject.testMergePolicy()",1,1,1
"org.apache.solr.core.TestPropInject.testProps()",1,1,1
"org.apache.solr.core.TestPropInjectDefaults.ExposeWriterHandler.ExposeWriterHandler()",1,1,1
"org.apache.solr.core.TestPropInjectDefaults.ExposeWriterHandler.getWriter()",1,1,1
"org.apache.solr.core.TestPropInjectDefaults.beforeClass()",1,1,1
"org.apache.solr.core.TestPropInjectDefaults.testMergePolicyDefaults()",1,1,1
"org.apache.solr.core.TestPropInjectDefaults.testPropsDefaults()",1,1,1
"org.apache.solr.core.TestQuerySenderListener.beforeClass()",1,1,1
"org.apache.solr.core.TestQuerySenderListener.testListenerCreationCounts()",1,1,1
"org.apache.solr.core.TestQuerySenderListener.testRequestHandlerRegistry()",1,1,1
"org.apache.solr.core.TestQuerySenderListener.testSearcherEvents()",1,1,1
"org.apache.solr.core.TestQuerySenderNoQuery.beforeClass()",1,1,1
"org.apache.solr.core.TestQuerySenderNoQuery.testListenerCreationCounts()",1,1,1
"org.apache.solr.core.TestQuerySenderNoQuery.testRequestHandlerRegistry()",1,1,1
"org.apache.solr.core.TestQuerySenderNoQuery.testSearcherEvents()",1,1,1
"org.apache.solr.core.TestSolrDeletionPolicy1.addDocs()",1,1,1
"org.apache.solr.core.TestSolrDeletionPolicy1.beforeClass()",1,1,1
"org.apache.solr.core.TestSolrDeletionPolicy1.setUp()",1,1,1
"org.apache.solr.core.TestSolrDeletionPolicy1.testCommitAge()",1,1,1
"org.apache.solr.core.TestSolrDeletionPolicy1.testKeepOptimizedOnlyCommits()",3,2,3
"org.apache.solr.core.TestSolrDeletionPolicy1.testNumCommitsConfigured()",1,1,1
"org.apache.solr.core.TestSolrDeletionPolicy2.getSchemaFile()",1,1,1
"org.apache.solr.core.TestSolrDeletionPolicy2.getSolrConfigFile()",1,1,1
"org.apache.solr.core.TestSolrDeletionPolicy2.testFakeDeletionPolicyClass()",1,1,1
"org.apache.solr.core.TestXIncludeConfig.getSchemaFile()",1,1,1
"org.apache.solr.core.TestXIncludeConfig.getSolrConfigFile()",1,1,1
"org.apache.solr.core.TestXIncludeConfig.setUp()",1,1,2
"org.apache.solr.core.TestXIncludeConfig.testXInclude()",1,2,2
"org.apache.solr.handler.AnalysisRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandler.getTokens(TokenStream)",1,3,3
"org.apache.solr.handler.AnalysisRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,5,5
"org.apache.solr.handler.AnalysisRequestHandler.init(NamedList)",1,2,2
"org.apache.solr.handler.AnalysisRequestHandler.processContent(XMLStreamReader,IndexSchema)",4,7,7
"org.apache.solr.handler.AnalysisRequestHandler.readDoc(XMLStreamReader)",5,8,11
"org.apache.solr.handler.AnalysisRequestHandlerBase.AnalysisContext.AnalysisContext(FieldType,Analyzer,Set<String>)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.AnalysisContext.AnalysisContext(String,FieldType,Analyzer)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.AnalysisContext.AnalysisContext(String,FieldType,Analyzer,Set<String>)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.AnalysisContext.getAnalyzer()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.AnalysisContext.getFieldName()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.AnalysisContext.getFieldType()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.AnalysisContext.getTermsToMatch()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.ListBasedTokenStream.ListBasedTokenStream(List<AttributeSource>)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.ListBasedTokenStream.incrementToken()",2,3,3
"org.apache.solr.handler.AnalysisRequestHandlerBase.ListBasedTokenStream.reset()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.TokenTrackingAttributeImpl.clear()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.TokenTrackingAttributeImpl.copyTo(AttributeImpl)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.TokenTrackingAttributeImpl.freezeStage()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.TokenTrackingAttributeImpl.getPositions()",1,2,2
"org.apache.solr.handler.AnalysisRequestHandlerBase.TokenTrackingAttributeImpl.reflectWith(AttributeReflector)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.TokenTrackingAttributeImpl.reset(int[],int)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.TokenTrackingAttributeImpl.setActPosition(int)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.analyzeTokenStream(TokenStream)",1,2,3
"org.apache.solr.handler.AnalysisRequestHandlerBase.analyzeValue(String,AnalysisContext)",2,6,7
"org.apache.solr.handler.AnalysisRequestHandlerBase.analyzeValue(String,Analyzer)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.convertTokensToNamedLists(List<AttributeSource>,AnalysisContext)",5,7,12
"org.apache.solr.handler.AnalysisRequestHandlerBase.getQueryTokenSet(String,Analyzer)",1,2,3
"org.apache.solr.handler.AnalysisRequestHandlerBase.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerBase.writeCharStream(NamedList,CharStream)",2,3,4
"org.apache.solr.handler.AnalysisRequestHandlerTest.getSchemaFile()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTest.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTest.testReadDoc()",1,3,3
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.TokenInfo(String,String,String,int,int,int,int[],String,boolean)",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.getEnd()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.getPayload()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.getPosition()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.getPositionHistory()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.getRawText()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.getStart()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.getText()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.getType()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.TokenInfo.isMatch()",1,1,1
"org.apache.solr.handler.AnalysisRequestHandlerTestBase.assertToken(NamedList,TokenInfo)",1,4,4
"org.apache.solr.handler.BinaryUpdateRequestHandler.delete(UpdateRequest,UpdateRequestProcessor)",1,6,6
"org.apache.solr.handler.BinaryUpdateRequestHandler.getAddCommand(SolrParams)",1,1,1
"org.apache.solr.handler.BinaryUpdateRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.BinaryUpdateRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.BinaryUpdateRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.BinaryUpdateRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.BinaryUpdateRequestHandler.newLoader(SolrQueryRequest,UpdateRequestProcessor)",1,2,2
"org.apache.solr.handler.BinaryUpdateRequestHandler.parseAndLoadDocs(SolrQueryRequest,SolrQueryResponse,InputStream,UpdateRequestProcessor)",3,7,10
"org.apache.solr.handler.CSVLoader.CSVLoader(SolrQueryRequest,UpdateRequestProcessor)",10,10,19
"org.apache.solr.handler.CSVLoader.FieldAdder.add(SolrInputDocument,int,int,String)",1,2,2
"org.apache.solr.handler.CSVLoader.FieldAdderEmpty.add(SolrInputDocument,int,int,String)",1,1,1
"org.apache.solr.handler.CSVLoader.FieldMapperSingle.FieldMapperSingle(String,String,FieldAdder)",1,1,1
"org.apache.solr.handler.CSVLoader.FieldMapperSingle.add(SolrInputDocument,int,int,String)",1,1,2
"org.apache.solr.handler.CSVLoader.FieldSplitter.FieldSplitter(CSVStrategy,FieldAdder)",1,1,1
"org.apache.solr.handler.CSVLoader.FieldSplitter.add(SolrInputDocument,int,int,String)",1,3,4
"org.apache.solr.handler.CSVLoader.FieldTrimmer.FieldTrimmer(FieldAdder)",1,1,1
"org.apache.solr.handler.CSVLoader.FieldTrimmer.add(SolrInputDocument,int,int,String)",1,1,1
"org.apache.solr.handler.CSVLoader.doAdd(int,String[],SolrInputDocument,AddUpdateCommand)",3,2,3
"org.apache.solr.handler.CSVLoader.input_err(String,String[],int)",1,2,2
"org.apache.solr.handler.CSVLoader.input_err(String,String[],int,Throwable)",1,3,3
"org.apache.solr.handler.CSVLoader.load(SolrQueryRequest,SolrQueryResponse,ContentStream)",5,8,11
"org.apache.solr.handler.CSVLoader.prepareFields()",6,14,18
"org.apache.solr.handler.CSVRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.CSVRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.CSVRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.CSVRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.CSVRequestHandler.newLoader(SolrQueryRequest,UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.CSVRequestHandlerTest.beforeClass()",1,1,1
"org.apache.solr.handler.CSVRequestHandlerTest.testCommitWithin()",1,1,1
"org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",3,4,5
"org.apache.solr.handler.ContentStreamLoader.getErrHeader()",1,1,1
"org.apache.solr.handler.ContentStreamLoader.setErrHeader(String)",1,1,1
"org.apache.solr.handler.DisMaxRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.DisMaxRequestHandler.getDocs()",1,1,2
"org.apache.solr.handler.DisMaxRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.DisMaxRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.DisMaxRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.DisMaxRequestHandler.init(NamedList)",1,2,4
"org.apache.solr.handler.DocumentAnalysisRequestHandler.doAnalysis(SolrQueryRequest)",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandler.extractSingleContentStream(SolrQueryRequest)",4,1,4
"org.apache.solr.handler.DocumentAnalysisRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandler.handleAnalysisRequest(DocumentAnalysisRequest,IndexSchema)",4,8,10
"org.apache.solr.handler.DocumentAnalysisRequestHandler.init(NamedList)",1,2,2
"org.apache.solr.handler.DocumentAnalysisRequestHandler.readDocument(XMLStreamReader,IndexSchema)",6,9,12
"org.apache.solr.handler.DocumentAnalysisRequestHandler.resolveAnalysisRequest(SolrQueryRequest)",4,7,7
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.ByteStream.ByteStream(byte[],String)",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.ByteStream.getReader()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.ByteStream.getStream()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.beforeClass()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.setUp()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.testCharsetInDocument()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.testCharsetOutsideDocument()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.testHandleAnalysisRequest()",1,1,1
"org.apache.solr.handler.DocumentAnalysisRequestHandlerTest.testResolveAnalysisRequest()",1,1,1
"org.apache.solr.handler.DumpRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.DumpRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.DumpRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.DumpRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.DumpRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,3,3
"org.apache.solr.handler.FieldAnalysisRequestHandler.analyzeValues(FieldAnalysisRequest,FieldType,String)",1,5,5
"org.apache.solr.handler.FieldAnalysisRequestHandler.doAnalysis(SolrQueryRequest)",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandler.handleAnalysisRequest(FieldAnalysisRequest,IndexSchema)",1,5,5
"org.apache.solr.handler.FieldAnalysisRequestHandler.resolveAnalysisRequest(SolrQueryRequest)",3,6,7
"org.apache.solr.handler.FieldAnalysisRequestHandlerTest.beforeClass()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandlerTest.setUp()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandlerTest.testCharFilterAnalysis()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandlerTest.testHandleAnalysisRequest()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandlerTest.testPositionHistoryWithWDF()",1,1,1
"org.apache.solr.handler.FieldAnalysisRequestHandlerTest.testResolveAnalysisRequest()",1,1,1
"org.apache.solr.handler.JsonLoader.JsonLoader(SolrQueryRequest,UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.JsonLoader.addValToField(Stack,Object,boolean,JSONParser)",3,4,5
"org.apache.solr.handler.JsonLoader.assertEvent(int,int)",2,2,2
"org.apache.solr.handler.JsonLoader.assertNextEvent(int)",1,1,1
"org.apache.solr.handler.JsonLoader.handleAdds()",3,2,3
"org.apache.solr.handler.JsonLoader.load(SolrQueryRequest,SolrQueryResponse,ContentStream)",1,2,2
"org.apache.solr.handler.JsonLoader.parseAdd()",11,10,11
"org.apache.solr.handler.JsonLoader.parseCommitOptions(CommitUpdateCommand)",7,7,7
"org.apache.solr.handler.JsonLoader.parseDelete()",9,9,10
"org.apache.solr.handler.JsonLoader.parseDoc(int)",15,14,26
"org.apache.solr.handler.JsonLoader.parseRollback()",1,1,1
"org.apache.solr.handler.JsonLoader.processUpdate()",10,13,15
"org.apache.solr.handler.JsonLoaderTest.beforeTests()",1,1,1
"org.apache.solr.handler.JsonLoaderTest.testNullValues()",1,1,1
"org.apache.solr.handler.JsonLoaderTest.testParsing()",1,1,5
"org.apache.solr.handler.JsonLoaderTest.testSimpleFormat()",1,1,1
"org.apache.solr.handler.JsonLoaderTest.testSimpleFormatInAdd()",1,1,1
"org.apache.solr.handler.JsonUpdateRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.JsonUpdateRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.JsonUpdateRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.JsonUpdateRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.JsonUpdateRequestHandler.init(NamedList)",1,1,1
"org.apache.solr.handler.JsonUpdateRequestHandler.newLoader(SolrQueryRequest,UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.MoreLikeThisHelper(SolrParams,SolrIndexSearcher)",2,1,2
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.fillInterestingTermsFromMLTQuery(Query,List<InterestingTerm>)",1,2,2
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.getBoostedMLTQuery()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.getBoostedQuery(Query)",1,4,4
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.getMoreLikeThese(DocList,int,int)",1,2,2
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.getMoreLikeThis()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.getMoreLikeThis(Reader,int,int,List<Query>,List<InterestingTerm>,int)",1,3,3
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.getMoreLikeThis(int,int,int,List<Query>,List<InterestingTerm>,int)",1,3,3
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.getRawMLTQuery()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.MoreLikeThisHelper.getRealMLTQuery()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.getDescription()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.getDocs()",1,1,2
"org.apache.solr.handler.MoreLikeThisHandler.getSource()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.getSourceId()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.getVersion()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",6,23,25
"org.apache.solr.handler.MoreLikeThisHandler.init(NamedList)",1,1,1
"org.apache.solr.handler.MoreLikeThisHandlerTest.moreLikeThisBeforeClass()",1,1,1
"org.apache.solr.handler.MoreLikeThisHandlerTest.testInterface()",1,1,3
"org.apache.solr.handler.PingRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.PingRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.PingRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.PingRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.PingRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",5,3,7
"org.apache.solr.handler.ReplicationHandler.FileInfo.FileInfo(long,String,long,long)",1,1,1
"org.apache.solr.handler.ReplicationHandler.FileInfo.getAsMap()",1,1,1
"org.apache.solr.handler.ReplicationHandler.FileStream.FileStream(SolrParams)",1,1,1
"org.apache.solr.handler.ReplicationHandler.FileStream.write(OutputStream)",4,14,20
"org.apache.solr.handler.ReplicationHandler.FileStream.writeNothing()",1,1,1
"org.apache.solr.handler.ReplicationHandler.addVal(NamedList,String,Properties,Class)",2,5,7
"org.apache.solr.handler.ReplicationHandler.computeIndexSize(File)",2,4,5
"org.apache.solr.handler.ReplicationHandler.disablePoll()",1,2,2
"org.apache.solr.handler.ReplicationHandler.doFetch(SolrParams)",2,4,5
"org.apache.solr.handler.ReplicationHandler.doSnapShoot(SolrParams,SolrQueryResponse,SolrQueryRequest)",2,3,6
"org.apache.solr.handler.ReplicationHandler.enablePoll()",1,2,2
"org.apache.solr.handler.ReplicationHandler.getCheckSum(Checksum,File)",1,3,3
"org.apache.solr.handler.ReplicationHandler.getCheckSums(String[],File,Checksum)",2,3,5
"org.apache.solr.handler.ReplicationHandler.getCommits()",1,3,3
"org.apache.solr.handler.ReplicationHandler.getConfFileInfoFromCache(NamedList<String>,Map<String, FileInfo>)",3,7,9
"org.apache.solr.handler.ReplicationHandler.getDescription()",1,1,1
"org.apache.solr.handler.ReplicationHandler.getEventListener(boolean,boolean)",1,3,4
"org.apache.solr.handler.ReplicationHandler.getFileChecksum(SolrParams,SolrQueryResponse)",1,1,1
"org.apache.solr.handler.ReplicationHandler.getFileInfo(File)",1,1,1
"org.apache.solr.handler.ReplicationHandler.getFileList(SolrParams,SolrQueryResponse)",6,5,7
"org.apache.solr.handler.ReplicationHandler.getFileStream(SolrParams,SolrQueryResponse)",1,1,1
"org.apache.solr.handler.ReplicationHandler.getIndexSize()",1,1,1
"org.apache.solr.handler.ReplicationHandler.getIndexVersion()",1,2,2
"org.apache.solr.handler.ReplicationHandler.getReplicateAfterStrings()",1,4,4
"org.apache.solr.handler.ReplicationHandler.getReplicationDetails(boolean)",1,23,30
"org.apache.solr.handler.ReplicationHandler.getSource()",1,1,1
"org.apache.solr.handler.ReplicationHandler.getSourceId()",1,1,1
"org.apache.solr.handler.ReplicationHandler.getStatistics()",1,7,7
"org.apache.solr.handler.ReplicationHandler.getTimeElapsed(SnapPuller)",1,2,2
"org.apache.solr.handler.ReplicationHandler.getTimesReplicatedSinceStartup()",1,1,1
"org.apache.solr.handler.ReplicationHandler.getVersion()",1,1,1
"org.apache.solr.handler.ReplicationHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",8,21,22
"org.apache.solr.handler.ReplicationHandler.inform(SolrCore)",5,28,34
"org.apache.solr.handler.ReplicationHandler.isEnabled(NamedList)",4,2,4
"org.apache.solr.handler.ReplicationHandler.isPollingDisabled()",1,1,1
"org.apache.solr.handler.ReplicationHandler.isReplicating()",1,1,1
"org.apache.solr.handler.ReplicationHandler.loadReplicationProperties()",1,3,3
"org.apache.solr.handler.ReplicationHandler.readableSize(long)",4,4,4
"org.apache.solr.handler.ReplicationHandler.refreshCommitpoint()",1,3,4
"org.apache.solr.handler.ReplicationHandler.registerCloseHook()",1,2,2
"org.apache.solr.handler.ReplicationHandler.registerFileStreamResponseWriter()",1,1,1
"org.apache.solr.handler.ReplicationHandler.setTimesReplicatedSinceStartup()",1,1,1
"org.apache.solr.handler.RequestHandlerBase.getCategory()",1,1,1
"org.apache.solr.handler.RequestHandlerBase.getDocs()",1,1,1
"org.apache.solr.handler.RequestHandlerBase.getInitArgs()",1,1,1
"org.apache.solr.handler.RequestHandlerBase.getName()",1,1,1
"org.apache.solr.handler.RequestHandlerBase.getStatistics()",1,1,1
"org.apache.solr.handler.RequestHandlerBase.handleRequest(SolrQueryRequest,SolrQueryResponse)",1,4,6
"org.apache.solr.handler.RequestHandlerBase.init(NamedList)",1,7,10
"org.apache.solr.handler.RequestHandlerUtils.addExperimentalFormatWarning(SolrQueryResponse)",1,1,1
"org.apache.solr.handler.RequestHandlerUtils.handleCommit(SolrQueryRequest,SolrQueryResponse,boolean)",2,2,5
"org.apache.solr.handler.RequestHandlerUtils.handleCommit(UpdateRequestProcessor,SolrParams,boolean)",2,2,5
"org.apache.solr.handler.RequestHandlerUtils.handleRollback(UpdateRequestProcessor,SolrParams,boolean)",2,2,4
"org.apache.solr.handler.SingleThreadedCSVLoader.SingleThreadedCSVLoader(SolrQueryRequest,UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.SingleThreadedCSVLoader.addDoc(int,String[])",1,1,1
"org.apache.solr.handler.SnapPuller.FileFetcher.FileFetcher(File,Map<String, Object>,String,boolean,long)",1,2,3
"org.apache.solr.handler.SnapPuller.FileFetcher.cleanup()",3,4,6
"org.apache.solr.handler.SnapPuller.FileFetcher.fetchFile()",3,5,7
"org.apache.solr.handler.SnapPuller.FileFetcher.fetchPackets(FastInputStream)",8,7,12
"org.apache.solr.handler.SnapPuller.FileFetcher.getStream()",1,8,8
"org.apache.solr.handler.SnapPuller.FileFetcher.readInt(byte[])",1,1,1
"org.apache.solr.handler.SnapPuller.FileFetcher.readLong(byte[])",1,1,1
"org.apache.solr.handler.SnapPuller.ReplicationHandlerException.ReplicationHandlerException(String)",1,1,1
"org.apache.solr.handler.SnapPuller.SnapPuller(NamedList,ReplicationHandler,SolrCore)",2,3,6
"org.apache.solr.handler.SnapPuller.abortPull()",1,1,1
"org.apache.solr.handler.SnapPuller.checkCompressed(HttpMethod,InputStream)",1,6,8
"org.apache.solr.handler.SnapPuller.copyAFile(File,File,String,List<String>)",2,6,6
"org.apache.solr.handler.SnapPuller.copyIndexFiles(File,File)",6,3,6
"org.apache.solr.handler.SnapPuller.copyTmpConfFiles2Conf(File)",5,3,5
"org.apache.solr.handler.SnapPuller.createHttpClient(String,String)",2,3,9
"org.apache.solr.handler.SnapPuller.createTempindexDir(SolrCore)",1,1,1
"org.apache.solr.handler.SnapPuller.delTree(File)",6,8,9
"org.apache.solr.handler.SnapPuller.destroy()",1,2,2
"org.apache.solr.handler.SnapPuller.disablePoll()",1,1,1
"org.apache.solr.handler.SnapPuller.doCommit()",1,2,2
"org.apache.solr.handler.SnapPuller.downloadConfFiles(List<Map<String, Object>>,long)",2,4,4
"org.apache.solr.handler.SnapPuller.downloadIndexFiles(boolean,File,long)",1,4,4
"org.apache.solr.handler.SnapPuller.enablePoll()",1,1,1
"org.apache.solr.handler.SnapPuller.fetchFileList(long)",1,3,3
"org.apache.solr.handler.SnapPuller.fetchLatestIndex(SolrCore)",4,15,20
"org.apache.solr.handler.SnapPuller.getCommandResponse(NamedList<String>)",1,2,2
"org.apache.solr.handler.SnapPuller.getConfFilesDownloaded()",1,1,2
"org.apache.solr.handler.SnapPuller.getConfFilesToDownload()",1,1,2
"org.apache.solr.handler.SnapPuller.getCurrentFile()",2,2,3
"org.apache.solr.handler.SnapPuller.getDateAsStr(Date)",1,1,1
"org.apache.solr.handler.SnapPuller.getFilesDownloaded()",1,1,2
"org.apache.solr.handler.SnapPuller.getFilesToDownload()",1,1,2
"org.apache.solr.handler.SnapPuller.getLatestVersion()",1,1,1
"org.apache.solr.handler.SnapPuller.getMasterUrl()",1,1,1
"org.apache.solr.handler.SnapPuller.getModifiedConfFiles(List<Map<String, Object>>)",4,7,9
"org.apache.solr.handler.SnapPuller.getNamedListResponse(PostMethod)",2,1,3
"org.apache.solr.handler.SnapPuller.getNextScheduledExecTime()",1,1,2
"org.apache.solr.handler.SnapPuller.getPollInterval()",1,1,1
"org.apache.solr.handler.SnapPuller.getReplicationStartTime()",1,1,1
"org.apache.solr.handler.SnapPuller.getTotalBytesDownloaded(SnapPuller)",1,5,5
"org.apache.solr.handler.SnapPuller.isIndexStale()",3,3,4
"org.apache.solr.handler.SnapPuller.isPollingDisabled()",1,1,1
"org.apache.solr.handler.SnapPuller.logReplicationTimeAndConfFiles(Collection<Map<String, Object>>,boolean)",1,11,11
"org.apache.solr.handler.SnapPuller.modifyIndexProps(String)",1,3,4
"org.apache.solr.handler.SnapPuller.readInterval(String)",4,9,11
"org.apache.solr.handler.SnapPuller.readToStringBuffer(long,String)",4,8,9
"org.apache.solr.handler.SnapPuller.reloadCore()",1,2,2
"org.apache.solr.handler.SnapPuller.startExecutorService()",2,3,3
"org.apache.solr.handler.SnapPuller.terminateAndWaitFsyncService()",3,1,3
"org.apache.solr.handler.SnapShooter.FileCopier.FileCopier(IndexDeletionPolicyWrapper,IndexCommit)",1,1,1
"org.apache.solr.handler.SnapShooter.FileCopier.copyFile(File,File,boolean)",4,6,9
"org.apache.solr.handler.SnapShooter.FileCopier.copyFiles(Collection<String>,File)",1,2,2
"org.apache.solr.handler.SnapShooter.OldBackupDirectory.OldBackupDirectory(File)",1,3,4
"org.apache.solr.handler.SnapShooter.OldBackupDirectory.compareTo(OldBackupDirectory)",1,1,1
"org.apache.solr.handler.SnapShooter.SnapShooter(SolrCore,String)",1,3,3
"org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,ReplicationHandler)",1,1,1
"org.apache.solr.handler.SnapShooter.createSnapAsync(IndexCommit,int,ReplicationHandler)",1,1,1
"org.apache.solr.handler.SnapShooter.createSnapshot(IndexCommit,int,ReplicationHandler)",3,6,7
"org.apache.solr.handler.SnapShooter.deleteOldBackups(int)",1,5,5
"org.apache.solr.handler.SpellCheckerRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandler.getDictionary(SolrQueryRequest)",1,1,2
"org.apache.solr.handler.SpellCheckerRequestHandler.getDocs()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",5,10,16
"org.apache.solr.handler.SpellCheckerRequestHandler.inform(SolrCore)",1,3,4
"org.apache.solr.handler.SpellCheckerRequestHandler.init(NamedList)",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandler.rebuild(SolrQueryRequest)",2,1,2
"org.apache.solr.handler.SpellCheckerRequestHandler.reopen()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.buildSpellCheckIndex()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.getSchemaFile()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.setUp()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.testSpellCheck_01_correctWords()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.testSpellCheck_02_incorrectWords()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.testSpellCheck_03_multiWords_correctWords()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.testSpellCheck_04_multiWords_incorrectWords()",1,1,1
"org.apache.solr.handler.SpellCheckerRequestHandlerTest.testSpellCheck_05_buildDictionary()",1,1,1
"org.apache.solr.handler.StandardRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.StandardRequestHandler.getDocs()",1,1,2
"org.apache.solr.handler.StandardRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.StandardRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.StandardRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.StandardRequestHandlerTest.getSchemaFile()",1,1,1
"org.apache.solr.handler.StandardRequestHandlerTest.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.StandardRequestHandlerTest.setUp()",1,1,1
"org.apache.solr.handler.StandardRequestHandlerTest.testSorting()",1,1,1
"org.apache.solr.handler.TestCSVLoader.beforeClass()",1,1,1
"org.apache.solr.handler.TestCSVLoader.cleanup()",1,1,1
"org.apache.solr.handler.TestCSVLoader.deleteFile()",1,1,1
"org.apache.solr.handler.TestCSVLoader.loadLocal(String...)",1,1,1
"org.apache.solr.handler.TestCSVLoader.makeFile(String)",1,1,1
"org.apache.solr.handler.TestCSVLoader.makeFile(String,String)",1,1,2
"org.apache.solr.handler.TestCSVLoader.setUp()",1,1,1
"org.apache.solr.handler.TestCSVLoader.tearDown()",1,1,1
"org.apache.solr.handler.TestCSVLoader.testCSV()",1,1,1
"org.apache.solr.handler.TestCSVLoader.testCSVLoad()",1,1,1
"org.apache.solr.handler.TestCSVLoader.testCommitFalse()",1,1,1
"org.apache.solr.handler.TestCSVLoader.testCommitTrue()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.SolrInstance(String,Integer)",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.copyConfigFile(String,String)",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.getConfDir()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.getDataDir()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.getHomeDir()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.getSchemaFile()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.setTestPort(Integer)",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.setUp()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.SolrInstance.tearDown()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.afterClass()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.beforeClass()",1,1,1
"org.apache.solr.handler.TestReplicationHandler.clearIndexWithReplication()",1,2,2
"org.apache.solr.handler.TestReplicationHandler.copyFile(File,File)",1,1,1
"org.apache.solr.handler.TestReplicationHandler.copyFile(File,File,Integer)",1,3,3
"org.apache.solr.handler.TestReplicationHandler.createJetty(SolrInstance)",1,1,1
"org.apache.solr.handler.TestReplicationHandler.createNewSolrServer(int)",1,1,2
"org.apache.solr.handler.TestReplicationHandler.doTestBackup()",5,15,19
"org.apache.solr.handler.TestReplicationHandler.doTestDetails()",1,3,5
"org.apache.solr.handler.TestReplicationHandler.doTestIndexAndConfigAliasReplication()",1,2,2
"org.apache.solr.handler.TestReplicationHandler.doTestIndexAndConfigReplication()",1,2,2
"org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterStartup()",1,2,2
"org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterWrite2Slave()",1,2,4
"org.apache.solr.handler.TestReplicationHandler.doTestSnapPullWithMasterUrl()",1,2,3
"org.apache.solr.handler.TestReplicationHandler.doTestStopPoll()",1,2,4
"org.apache.solr.handler.TestReplicationHandler.getDetails(SolrServer)",1,1,1
"org.apache.solr.handler.TestReplicationHandler.index(SolrServer,Object...)",1,2,2
"org.apache.solr.handler.TestReplicationHandler.query(String,SolrServer)",1,1,1
"org.apache.solr.handler.TestReplicationHandler.rQuery(int,String,SolrServer)",1,3,3
"org.apache.solr.handler.TestReplicationHandler.test()",1,1,1
"org.apache.solr.handler.XMLLoader.XMLLoader(UpdateRequestProcessor,XMLInputFactory)",1,1,1
"org.apache.solr.handler.XMLLoader.load(SolrQueryRequest,SolrQueryResponse,ContentStream)",1,5,6
"org.apache.solr.handler.XMLLoader.processDelete(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader)",7,13,15
"org.apache.solr.handler.XMLLoader.processDelete(UpdateRequestProcessor,XMLStreamReader)",1,1,1
"org.apache.solr.handler.XMLLoader.processUpdate(SolrQueryRequest,UpdateRequestProcessor,XMLStreamReader)",6,21,27
"org.apache.solr.handler.XMLLoader.processUpdate(UpdateRequestProcessor,XMLStreamReader)",1,1,1
"org.apache.solr.handler.XMLLoader.readDoc(XMLStreamReader)",5,13,15
"org.apache.solr.handler.XmlUpdateRequestHandler.doLegacyUpdate(InputStream,String,Writer)",1,4,4
"org.apache.solr.handler.XmlUpdateRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandler.init(NamedList)",1,2,2
"org.apache.solr.handler.XmlUpdateRequestHandler.newLoader(SolrQueryRequest,UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.MockUpdateRequestProcessor.MockUpdateRequestProcessor(UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.MockUpdateRequestProcessor.assertNoCommandsPending()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.MockUpdateRequestProcessor.expectDelete(String,String,boolean,boolean,int)",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.MockUpdateRequestProcessor.processDelete(DeleteUpdateCommand)",1,5,5
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.getSchemaFile()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.setUp()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.tearDown()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.testReadDelete()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.testReadDoc()",1,1,1
"org.apache.solr.handler.XmlUpdateRequestHandlerTest.testRequestParams()",1,1,1
"org.apache.solr.handler.XsltUpdateRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.XsltUpdateRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.XsltUpdateRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.XsltUpdateRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.XsltUpdateRequestHandler.init(NamedList)",1,2,2
"org.apache.solr.handler.XsltUpdateRequestHandler.newLoader(SolrQueryRequest,UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.XsltUpdateRequestHandlerTest.beforeTests()",1,1,1
"org.apache.solr.handler.XsltUpdateRequestHandlerTest.setUp()",1,1,1
"org.apache.solr.handler.XsltUpdateRequestHandlerTest.testUpdate()",1,1,1
"org.apache.solr.handler.XsltXMLLoader.XsltXMLLoader(UpdateRequestProcessor,XMLInputFactory,Integer)",1,1,1
"org.apache.solr.handler.XsltXMLLoader.getTransformer(SolrQueryRequest)",2,2,3
"org.apache.solr.handler.XsltXMLLoader.load(SolrQueryRequest,SolrQueryResponse,ContentStream)",1,4,4
"org.apache.solr.handler.admin.AdminHandlers.StandardHandler.StandardHandler(String,SolrRequestHandler)",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.getCategory()",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.getDescription()",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.getDocs()",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.getName()",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.getSource()",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.getSourceId()",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.getStatistics()",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.getVersion()",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.handleRequest(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.handler.admin.AdminHandlers.inform(SolrCore)",5,6,9
"org.apache.solr.handler.admin.AdminHandlers.init(NamedList)",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.CoreAdminHandler()",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.CoreAdminHandler(CoreContainer)",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.getCoreContainer()",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.getCoreStatus(CoreContainer,String)",1,2,2
"org.apache.solr.handler.admin.CoreAdminHandler.getDescription()",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.getSource()",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.getSourceId()",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.getVersion()",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.handleAliasAction(SolrQueryRequest,SolrQueryResponse)",2,2,3
"org.apache.solr.handler.admin.CoreAdminHandler.handleCreateAction(SolrQueryRequest,SolrQueryResponse)",1,6,7
"org.apache.solr.handler.admin.CoreAdminHandler.handleCustomAction(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.handleMergeAction(SolrQueryRequest,SolrQueryResponse)",6,14,18
"org.apache.solr.handler.admin.CoreAdminHandler.handlePersistAction(SolrQueryRequest,SolrQueryResponse)",3,2,3
"org.apache.solr.handler.admin.CoreAdminHandler.handleReloadAction(SolrQueryRequest,SolrQueryResponse)",1,1,2
"org.apache.solr.handler.admin.CoreAdminHandler.handleRenameAction(SolrQueryRequest,SolrQueryResponse)",2,2,3
"org.apache.solr.handler.admin.CoreAdminHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",5,16,17
"org.apache.solr.handler.admin.CoreAdminHandler.handleStatusAction(SolrQueryRequest,SolrQueryResponse)",1,3,4
"org.apache.solr.handler.admin.CoreAdminHandler.handleSwapAction(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.handleUnloadAction(SolrQueryRequest,SolrQueryResponse)",2,5,6
"org.apache.solr.handler.admin.CoreAdminHandler.init(NamedList)",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandler.normalizePath(String)",2,1,2
"org.apache.solr.handler.admin.CoreAdminHandlerTest.assertXmlFile(File,String...)",1,2,3
"org.apache.solr.handler.admin.CoreAdminHandlerTest.beforeClass()",1,1,1
"org.apache.solr.handler.admin.CoreAdminHandlerTest.testCoreAdminHandler()",1,3,3
"org.apache.solr.handler.admin.LukeRequestHandler.TermHistogram.add(int[])",1,1,4
"org.apache.solr.handler.admin.LukeRequestHandler.TermHistogram.toNamedList()",1,2,2
"org.apache.solr.handler.admin.LukeRequestHandler.TopTermQueue.TermInfo.TermInfo(Term,int)",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandler.TopTermQueue.TopTermQueue(int)",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandler.TopTermQueue.getTopTerm()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandler.TopTermQueue.lessThan(Object,Object)",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandler.TopTermQueue.toNamedList(IndexSchema)",1,4,4
"org.apache.solr.handler.admin.LukeRequestHandler.getAnalyzerInfo(Analyzer)",1,6,6
"org.apache.solr.handler.admin.LukeRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandler.getDocs()",1,1,2
"org.apache.solr.handler.admin.LukeRequestHandler.getDocumentFieldsInfo(Document,int,IndexReader,IndexSchema)",1,12,12
"org.apache.solr.handler.admin.LukeRequestHandler.getFieldFlags(Fieldable)",1,25,27
"org.apache.solr.handler.admin.LukeRequestHandler.getFieldFlags(SchemaField)",1,28,28
"org.apache.solr.handler.admin.LukeRequestHandler.getFieldFlagsKey()",1,2,2
"org.apache.solr.handler.admin.LukeRequestHandler.getIndexInfo(IndexReader,boolean)",1,1,2
"org.apache.solr.handler.admin.LukeRequestHandler.getIndexInfo(IndexReader,int,Map<String, TopTermQueue>,Set<String>)",6,11,14
"org.apache.solr.handler.admin.LukeRequestHandler.getIndexedFieldsInfo(SolrIndexSearcher,Set<String>,int,Map<String, TopTermQueue>,boolean)",3,23,24
"org.apache.solr.handler.admin.LukeRequestHandler.getSchemaInfo(IndexSchema)",1,7,7
"org.apache.solr.handler.admin.LukeRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",5,9,12
"org.apache.solr.handler.admin.LukeRequestHandler.populateFieldInfo(IndexSchema,Map<String, List<String>>,Map<String, Object>,SchemaField,SchemaField)",1,5,6
"org.apache.solr.handler.admin.LukeRequestHandlerTest.assertHistoBucket(int,int)",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandlerTest.before()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandlerTest.getFieldXPathHistogram(String)",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandlerTest.getFieldXPathPrefix(String)",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandlerTest.getSchemaFile()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandlerTest.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandlerTest.testFlParam()",1,4,4
"org.apache.solr.handler.admin.LukeRequestHandlerTest.testHistogramBucket()",1,1,1
"org.apache.solr.handler.admin.LukeRequestHandlerTest.testLuke()",1,3,3
"org.apache.solr.handler.admin.PluginInfoHandler.getDescription()",1,1,1
"org.apache.solr.handler.admin.PluginInfoHandler.getSolrInfoBeans(SolrCore,boolean)",4,11,13
"org.apache.solr.handler.admin.PluginInfoHandler.getSource()",1,1,1
"org.apache.solr.handler.admin.PluginInfoHandler.getSourceId()",1,1,1
"org.apache.solr.handler.admin.PluginInfoHandler.getVersion()",1,1,1
"org.apache.solr.handler.admin.PluginInfoHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.handler.admin.PropertiesRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.admin.PropertiesRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.admin.PropertiesRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.admin.PropertiesRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.admin.PropertiesRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,2,2
"org.apache.solr.handler.admin.ShowFileRequestHandler.ShowFileRequestHandler()",1,1,1
"org.apache.solr.handler.admin.ShowFileRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.admin.ShowFileRequestHandler.getFileContents(String)",3,2,5
"org.apache.solr.handler.admin.ShowFileRequestHandler.getHiddenFiles()",1,1,1
"org.apache.solr.handler.admin.ShowFileRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.admin.ShowFileRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.admin.ShowFileRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.admin.ShowFileRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",11,10,15
"org.apache.solr.handler.admin.ShowFileRequestHandler.init(NamedList)",1,4,4
"org.apache.solr.handler.admin.ShowFileRequestHandlerTest.beforeTest()",1,1,1
"org.apache.solr.handler.admin.ShowFileRequestHandlerTest.testDirList()",1,1,1
"org.apache.solr.handler.admin.ShowFileRequestHandlerTest.testGetRawFile()",1,2,3
"org.apache.solr.handler.admin.SolrInfoMBeanHandler.arrayToSet(Object[])",2,3,4
"org.apache.solr.handler.admin.SolrInfoMBeanHandler.getDescription()",1,1,1
"org.apache.solr.handler.admin.SolrInfoMBeanHandler.getSource()",1,1,1
"org.apache.solr.handler.admin.SolrInfoMBeanHandler.getSourceId()",1,1,1
"org.apache.solr.handler.admin.SolrInfoMBeanHandler.getVersion()",1,1,1
"org.apache.solr.handler.admin.SolrInfoMBeanHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",4,7,10
"org.apache.solr.handler.admin.SystemInfoHandler.addGetterIfAvaliable(Object,String,NamedList<Object>)",1,2,3
"org.apache.solr.handler.admin.SystemInfoHandler.execute(String)",1,2,3
"org.apache.solr.handler.admin.SystemInfoHandler.getCoreInfo(SolrCore)",1,2,2
"org.apache.solr.handler.admin.SystemInfoHandler.getDescription()",1,1,1
"org.apache.solr.handler.admin.SystemInfoHandler.getJvmInfo()",1,2,2
"org.apache.solr.handler.admin.SystemInfoHandler.getLuceneInfo()",1,5,5
"org.apache.solr.handler.admin.SystemInfoHandler.getSource()",1,1,1
"org.apache.solr.handler.admin.SystemInfoHandler.getSourceId()",1,1,1
"org.apache.solr.handler.admin.SystemInfoHandler.getSystemInfo()",1,3,3
"org.apache.solr.handler.admin.SystemInfoHandler.getVersion()",1,1,1
"org.apache.solr.handler.admin.SystemInfoHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.handler.admin.SystemInfoHandler.humanReadableUnits(long,DecimalFormat)",1,4,4
"org.apache.solr.handler.admin.SystemInfoHandlerTest.testMagickGetter()",1,1,1
"org.apache.solr.handler.admin.ThreadDumpHandler.formatNanos(long)",1,1,1
"org.apache.solr.handler.admin.ThreadDumpHandler.getDescription()",1,1,1
"org.apache.solr.handler.admin.ThreadDumpHandler.getSource()",1,1,1
"org.apache.solr.handler.admin.ThreadDumpHandler.getSourceId()",1,1,1
"org.apache.solr.handler.admin.ThreadDumpHandler.getThreadInfo(ThreadInfo,ThreadMXBean)",1,7,7
"org.apache.solr.handler.admin.ThreadDumpHandler.getVersion()",1,1,1
"org.apache.solr.handler.admin.ThreadDumpHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,6,6
"org.apache.solr.handler.clustering.AbstractClusteringTestCase.beforeClass()",1,2,2
"org.apache.solr.handler.clustering.ClusteringComponent.finishStage(ResponseBuilder)",2,4,5
"org.apache.solr.handler.clustering.ClusteringComponent.getClusteringEngineName(ResponseBuilder)",1,1,1
"org.apache.solr.handler.clustering.ClusteringComponent.getDescription()",1,1,1
"org.apache.solr.handler.clustering.ClusteringComponent.getSearchClusteringEngine(ResponseBuilder)",1,1,1
"org.apache.solr.handler.clustering.ClusteringComponent.getSearchClusteringEngines()",1,1,1
"org.apache.solr.handler.clustering.ClusteringComponent.getSource()",1,1,1
"org.apache.solr.handler.clustering.ClusteringComponent.getSourceId()",1,1,1
"org.apache.solr.handler.clustering.ClusteringComponent.getVersion()",1,1,1
"org.apache.solr.handler.clustering.ClusteringComponent.inform(SolrCore)",14,11,21
"org.apache.solr.handler.clustering.ClusteringComponent.init(NamedList)",1,1,1
"org.apache.solr.handler.clustering.ClusteringComponent.modifyRequest(ResponseBuilder,SearchComponent,ShardRequest)",5,8,11
"org.apache.solr.handler.clustering.ClusteringComponent.prepare(ResponseBuilder)",2,1,2
"org.apache.solr.handler.clustering.ClusteringComponent.process(ResponseBuilder)",2,6,7
"org.apache.solr.handler.clustering.ClusteringComponentTest.testComponent()",1,1,1
"org.apache.solr.handler.clustering.ClusteringEngine.getName()",1,1,1
"org.apache.solr.handler.clustering.ClusteringEngine.init(NamedList,SolrCore)",1,1,1
"org.apache.solr.handler.clustering.DistributedClusteringComponentTest.doTest()",1,2,2
"org.apache.solr.handler.clustering.DistributedClusteringComponentTest.getSolrHome()",1,1,1
"org.apache.solr.handler.clustering.MockDocumentClusteringEngine.cluster(DocSet,SolrParams)",1,1,1
"org.apache.solr.handler.clustering.MockDocumentClusteringEngine.cluster(SolrParams)",1,1,1
"org.apache.solr.handler.clustering.SearchClusteringEngine.getFieldsToLoad(SolrQueryRequest)",1,1,1
"org.apache.solr.handler.clustering.SearchClusteringEngine.getSolrDocumentList(DocList,SolrQueryRequest,Map<SolrDocument, Integer>)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.SolrResourceLocator.SolrResourceLocator(SolrCore,SolrParams)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.SolrResourceLocator.equals(Object)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.SolrResourceLocator.getAll(String)",1,4,4
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.SolrResourceLocator.hashCode()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.SolrResourceLocator.toString()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.cluster(Query,DocList,SolrQueryRequest)",1,1,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.cluster(Query,SolrDocumentList,Map<SolrDocument, Integer>,SolrQueryRequest)",1,2,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.clustersToNamedList(List<Cluster>,List<NamedList<Object>>,boolean,int)",1,9,9
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.clustersToNamedList(List<Cluster>,SolrParams)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.extractCarrotAttributes(SolrParams,Map<String, Object>)",1,3,3
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.getConcatenated(SolrDocument,String)",3,3,4
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.getCustomFieldsMap(SolrParams)",1,6,6
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.getDocuments(SolrDocumentList,Map<SolrDocument, Integer>,Query,SolrQueryRequest)",6,24,26
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.getFieldsForClustering(SolrQueryRequest)",2,1,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.getFieldsToLoad(SolrQueryRequest)",1,2,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngine.init(NamedList,SolrCore)",3,3,3
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.checkCluster(NamedList<Object>,boolean)",1,3,3
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.checkCluster(NamedList<Object>,int,int,int)",1,2,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.checkClusters(List<NamedList<Object>>,boolean)",1,2,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.checkClusters(List<NamedList<Object>>,int,int,int)",1,2,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.checkEngine(CarrotClusteringEngine,int)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.checkEngine(CarrotClusteringEngine,int,SolrParams)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.checkEngine(CarrotClusteringEngine,int,int,Query,SolrParams)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.checkLexicalResourcesFromSolrConfig(String,String)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.clusterWithHighlighting(boolean,int)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.clusterWithHighlighting(boolean,int,int,String,int)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.concatenatingMultipleFields()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.getClusteringEngine(String)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.getDocs(NamedList<Object>)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.getLabels(NamedList<Object>)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.getScore(NamedList<Object>)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.getSubclusters(NamedList<Object>)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.highlightingMultipleFields()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.highlightingOfMultiValueField()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.isOtherTopics(NamedList<Object>)",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.languageCodeMapping()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.oneCarrot2SupportedLanguage()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.oneCarrot2SupportedLanguageOfMany()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.passingOfCustomFields()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.solrStopWordsNotDefinedOnAFieldForClustering()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.solrStopWordsUsedInCarrot2Clustering()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testCarrotAttributePassing()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testCarrotLingo()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testCarrotStc()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testClusterScores()",1,2,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testLexicalResourcesFromSolrConfigCustomDir()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testLexicalResourcesFromSolrConfigDefaultDir()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testNumDescriptions()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testOtherTopics()",1,2,3
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testProduceSummary()",1,2,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testSummaryFragSize()",1,2,2
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testWithSubclusters()",1,1,1
"org.apache.solr.handler.clustering.carrot2.CarrotClusteringEngineTest.testWithoutSubclusters()",1,1,1
"org.apache.solr.handler.clustering.carrot2.EchoClusteringAlgorithm.process()",1,5,5
"org.apache.solr.handler.clustering.carrot2.LexicalResourcesCheckClusteringAlgorithm.process()",2,4,5
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter.LuceneStemmerAdapter()",1,1,1
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter.equals(char[],int,CharSequence)",3,2,3
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter.stem(CharSequence)",2,5,5
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.ArabicStemmerFactory.createStemmer()",1,1,2
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.IdentityStemmer.stem(CharSequence)",1,1,1
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.SnowballStemmerFactory.SnowballStemmerAdapter.SnowballStemmerAdapter(SnowballProgram)",1,1,1
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.SnowballStemmerFactory.SnowballStemmerAdapter.stem(CharSequence)",2,2,2
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.SnowballStemmerFactory.createStemmer(LanguageCode)",2,3,3
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2StemmerFactory.getStemmer(LanguageCode)",4,3,4
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2TokenizerFactory.ChineseTokenizerFactory.ChineseTokenizer.ChineseTokenizer()",1,1,1
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2TokenizerFactory.ChineseTokenizerFactory.ChineseTokenizer.nextToken()",2,3,5
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2TokenizerFactory.ChineseTokenizerFactory.ChineseTokenizer.reset(Reader)",1,2,2
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2TokenizerFactory.ChineseTokenizerFactory.ChineseTokenizer.setTermBuffer(MutableCharArray)",1,1,1
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2TokenizerFactory.ChineseTokenizerFactory.createTokenizer()",1,1,2
"org.apache.solr.handler.clustering.carrot2.LuceneCarrot2TokenizerFactory.getTokenizer(LanguageCode)",3,3,3
"org.apache.solr.handler.clustering.carrot2.MockClusteringAlgorithm.createCluster(String,int,Document...)",1,3,4
"org.apache.solr.handler.clustering.carrot2.MockClusteringAlgorithm.process()",2,3,4
"org.apache.solr.handler.clustering.carrot2.SolrStopwordsCarrot2LexicalDataFactory.getLexicalData(LanguageCode)",4,3,4
"org.apache.solr.handler.clustering.carrot2.SolrStopwordsCarrot2LexicalDataFactory.getSolrStopWordsForField(String)",1,6,6
"org.apache.solr.handler.component.AbstractStatsValues.AbstractStatsValues(FieldType)",1,1,1
"org.apache.solr.handler.component.AbstractStatsValues.accumulate(NamedList)",2,5,6
"org.apache.solr.handler.component.AbstractStatsValues.accumulate(String)",1,1,1
"org.apache.solr.handler.component.AbstractStatsValues.accumulate(String,int)",1,1,1
"org.apache.solr.handler.component.AbstractStatsValues.addFacet(String,Map<String, StatsValues>)",1,1,1
"org.apache.solr.handler.component.AbstractStatsValues.addMissing(int)",1,1,1
"org.apache.solr.handler.component.AbstractStatsValues.getStatsValues()",1,3,3
"org.apache.solr.handler.component.AbstractStatsValues.missing()",1,1,1
"org.apache.solr.handler.component.BadComponentTest.testBadElevate()",1,3,3
"org.apache.solr.handler.component.DateStatsValues.DateStatsValues(FieldType)",1,1,1
"org.apache.solr.handler.component.DateStatsValues.addTypeSpecificStats(NamedList<Object>)",1,2,2
"org.apache.solr.handler.component.DateStatsValues.toTypedValue(String)",1,2,3
"org.apache.solr.handler.component.DateStatsValues.updateMinMax(Date,Date)",1,3,5
"org.apache.solr.handler.component.DateStatsValues.updateTypeSpecificStats(Date)",1,1,1
"org.apache.solr.handler.component.DateStatsValues.updateTypeSpecificStats(Date,int)",1,1,1
"org.apache.solr.handler.component.DateStatsValues.updateTypeSpecificStats(NamedList)",1,1,1
"org.apache.solr.handler.component.DebugComponent.finishStage(ResponseBuilder)",4,7,9
"org.apache.solr.handler.component.DebugComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.DebugComponent.getDocs()",1,1,1
"org.apache.solr.handler.component.DebugComponent.getSource()",1,1,1
"org.apache.solr.handler.component.DebugComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.DebugComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.DebugComponent.handleResponses(ResponseBuilder,ShardRequest)",1,1,1
"org.apache.solr.handler.component.DebugComponent.merge(Object,Object,Set<String>)",13,16,24
"org.apache.solr.handler.component.DebugComponent.modifyRequest(ResponseBuilder,SearchComponent,ShardRequest)",2,2,3
"org.apache.solr.handler.component.DebugComponent.prepare(ResponseBuilder)",1,1,1
"org.apache.solr.handler.component.DebugComponent.process(ResponseBuilder)",1,7,7
"org.apache.solr.handler.component.DistributedSpellCheckComponentTest.DistributedSpellCheckComponentTest()",1,1,1
"org.apache.solr.handler.component.DistributedSpellCheckComponentTest.doTest()",1,1,1
"org.apache.solr.handler.component.DistributedSpellCheckComponentTest.q(Object...)",1,2,2
"org.apache.solr.handler.component.DistributedSpellCheckComponentTest.setUp()",1,1,1
"org.apache.solr.handler.component.DistributedSpellCheckComponentTest.tearDown()",1,2,2
"org.apache.solr.handler.component.DistributedSpellCheckComponentTest.validateControlData(QueryResponse)",1,2,2
"org.apache.solr.handler.component.DistributedTermsComponentTest.doTest()",1,1,1
"org.apache.solr.handler.component.DummyCustomParamSpellChecker.build(SolrCore,SolrIndexSearcher)",1,1,1
"org.apache.solr.handler.component.DummyCustomParamSpellChecker.getSuggestions(Collection<Token>,IndexReader,int,boolean,boolean)",1,1,1
"org.apache.solr.handler.component.DummyCustomParamSpellChecker.getSuggestions(SpellingOptions)",1,2,2
"org.apache.solr.handler.component.DummyCustomParamSpellChecker.reload(SolrCore,SolrIndexSearcher)",1,1,1
"org.apache.solr.handler.component.ElevationComparatorSource.ElevationComparatorSource(Map<String, Integer>)",1,1,1
"org.apache.solr.handler.component.ElevationComparatorSource.newComparator(String,int,int,boolean)",1,2,2
"org.apache.solr.handler.component.FacetComponent.DistribFieldFacet.DistribFieldFacet(ResponseBuilder,String)",1,1,1
"org.apache.solr.handler.component.FacetComponent.DistribFieldFacet.add(int,NamedList,int)",1,6,9
"org.apache.solr.handler.component.FacetComponent.DistribFieldFacet.getCountSorted()",3,1,3
"org.apache.solr.handler.component.FacetComponent.DistribFieldFacet.getLexSorted()",1,1,1
"org.apache.solr.handler.component.FacetComponent.DistribFieldFacet.maxPossible(ShardFacetCount,int)",1,1,1
"org.apache.solr.handler.component.FacetComponent.FacetBase.FacetBase(ResponseBuilder,String,String)",1,3,4
"org.apache.solr.handler.component.FacetComponent.FacetBase.getKey()",1,1,1
"org.apache.solr.handler.component.FacetComponent.FacetBase.getType()",1,1,1
"org.apache.solr.handler.component.FacetComponent.FacetInfo.parse(SolrParams,ResponseBuilder)",1,5,5
"org.apache.solr.handler.component.FacetComponent.FieldFacet.FieldFacet(ResponseBuilder,String)",1,1,1
"org.apache.solr.handler.component.FacetComponent.FieldFacet.fillParams(ResponseBuilder,SolrParams,String)",1,3,7
"org.apache.solr.handler.component.FacetComponent.QueryFacet.QueryFacet(ResponseBuilder,String)",1,1,1
"org.apache.solr.handler.component.FacetComponent.ShardFacetCount.toString()",1,1,1
"org.apache.solr.handler.component.FacetComponent.countFacets(ResponseBuilder,ShardRequest)",10,28,36
"org.apache.solr.handler.component.FacetComponent.distributedProcess(ResponseBuilder)",10,13,19
"org.apache.solr.handler.component.FacetComponent.finishStage(ResponseBuilder)",10,11,19
"org.apache.solr.handler.component.FacetComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.FacetComponent.getDocs()",1,1,1
"org.apache.solr.handler.component.FacetComponent.getSource()",1,1,1
"org.apache.solr.handler.component.FacetComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.FacetComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.FacetComponent.handleResponses(ResponseBuilder,ShardRequest)",2,3,4
"org.apache.solr.handler.component.FacetComponent.modifyRequest(ResponseBuilder,SearchComponent,ShardRequest)",2,8,10
"org.apache.solr.handler.component.FacetComponent.num(Long)",2,2,2
"org.apache.solr.handler.component.FacetComponent.num(long)",2,1,2
"org.apache.solr.handler.component.FacetComponent.prepare(ResponseBuilder)",1,2,2
"org.apache.solr.handler.component.FacetComponent.process(ResponseBuilder)",1,2,2
"org.apache.solr.handler.component.FacetComponent.refineFacets(ResponseBuilder,ShardRequest)",5,4,6
"org.apache.solr.handler.component.FieldFacetStats.FieldFacetStats(String,StringIndex,FieldType,int,FieldType)",2,2,3
"org.apache.solr.handler.component.FieldFacetStats.accumulateTermNum(int,String)",2,4,5
"org.apache.solr.handler.component.FieldFacetStats.facet(int,String)",3,4,5
"org.apache.solr.handler.component.FieldFacetStats.facetTermNum(int,int)",2,3,4
"org.apache.solr.handler.component.FieldFacetStats.getTermText(int)",1,1,1
"org.apache.solr.handler.component.HighlightComponent.finishStage(ResponseBuilder)",4,5,7
"org.apache.solr.handler.component.HighlightComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.HighlightComponent.getDocs()",1,1,1
"org.apache.solr.handler.component.HighlightComponent.getHighlighter()",1,1,1
"org.apache.solr.handler.component.HighlightComponent.getSource()",1,1,1
"org.apache.solr.handler.component.HighlightComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.HighlightComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.HighlightComponent.handleResponses(ResponseBuilder,ShardRequest)",1,1,1
"org.apache.solr.handler.component.HighlightComponent.inform(SolrCore)",1,3,3
"org.apache.solr.handler.component.HighlightComponent.init(PluginInfo)",1,1,1
"org.apache.solr.handler.component.HighlightComponent.modifyRequest(ResponseBuilder,SearchComponent,ShardRequest)",2,2,3
"org.apache.solr.handler.component.HighlightComponent.prepare(ResponseBuilder)",3,3,4
"org.apache.solr.handler.component.HighlightComponent.process(ResponseBuilder)",4,10,11
"org.apache.solr.handler.component.HighlightComponent.removeNulls(NamedList)",3,5,6
"org.apache.solr.handler.component.HttpShardHandler.HttpShardHandler(HttpShardHandlerFactory)",1,1,1
"org.apache.solr.handler.component.HttpShardHandler.SimpleSolrResponse.getElapsedTime()",1,1,1
"org.apache.solr.handler.component.HttpShardHandler.SimpleSolrResponse.getResponse()",1,1,1
"org.apache.solr.handler.component.HttpShardHandler.SimpleSolrResponse.setResponse(NamedList<Object>)",1,1,1
"org.apache.solr.handler.component.HttpShardHandler.cancelAll()",1,2,2
"org.apache.solr.handler.component.HttpShardHandler.checkDistributed(ResponseBuilder)",1,3,3
"org.apache.solr.handler.component.HttpShardHandler.getURLs(String)",1,4,4
"org.apache.solr.handler.component.HttpShardHandler.submit(ShardRequest,String,ModifiableSolrParams)",1,3,3
"org.apache.solr.handler.component.HttpShardHandler.takeCompletedOrError()",4,2,6
"org.apache.solr.handler.component.HttpShardHandlerFactory.getParameter(NamedList,String,T)",1,2,3
"org.apache.solr.handler.component.HttpShardHandlerFactory.getShardHandler()",1,1,1
"org.apache.solr.handler.component.HttpShardHandlerFactory.init(PluginInfo)",1,1,3
"org.apache.solr.handler.component.MoreLikeThisComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.MoreLikeThisComponent.getDocs()",1,1,1
"org.apache.solr.handler.component.MoreLikeThisComponent.getMoreLikeThese(ResponseBuilder,SolrIndexSearcher,DocList,int)",1,5,6
"org.apache.solr.handler.component.MoreLikeThisComponent.getSource()",1,1,1
"org.apache.solr.handler.component.MoreLikeThisComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.MoreLikeThisComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.MoreLikeThisComponent.prepare(ResponseBuilder)",1,1,1
"org.apache.solr.handler.component.MoreLikeThisComponent.process(ResponseBuilder)",1,2,2
"org.apache.solr.handler.component.NumericStatsValues.NumericStatsValues(FieldType)",1,1,1
"org.apache.solr.handler.component.NumericStatsValues.addTypeSpecificStats(NamedList<Object>)",1,1,1
"org.apache.solr.handler.component.NumericStatsValues.getStandardDeviation()",2,1,2
"org.apache.solr.handler.component.NumericStatsValues.toTypedValue(String)",1,1,1
"org.apache.solr.handler.component.NumericStatsValues.updateMinMax(Number,Number)",1,1,1
"org.apache.solr.handler.component.NumericStatsValues.updateTypeSpecificStats(NamedList)",1,1,1
"org.apache.solr.handler.component.NumericStatsValues.updateTypeSpecificStats(Number)",1,1,1
"org.apache.solr.handler.component.NumericStatsValues.updateTypeSpecificStats(Number,int)",1,1,1
"org.apache.solr.handler.component.QueryComponent.createDistributedIdf(ResponseBuilder)",1,1,1
"org.apache.solr.handler.component.QueryComponent.createMainQuery(ResponseBuilder)",1,5,5
"org.apache.solr.handler.component.QueryComponent.createRetrieveDocs(ResponseBuilder)",1,9,9
"org.apache.solr.handler.component.QueryComponent.distributedProcess(ResponseBuilder)",2,2,2
"org.apache.solr.handler.component.QueryComponent.doFieldSortValues(ResponseBuilder,SolrIndexSearcher)",4,9,14
"org.apache.solr.handler.component.QueryComponent.doPrefetch(ResponseBuilder)",1,4,4
"org.apache.solr.handler.component.QueryComponent.finishStage(ResponseBuilder)",2,2,3
"org.apache.solr.handler.component.QueryComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.QueryComponent.getDocs()",1,1,1
"org.apache.solr.handler.component.QueryComponent.getSource()",1,1,1
"org.apache.solr.handler.component.QueryComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.QueryComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.QueryComponent.groupedDistributedProcess(ResponseBuilder)",1,5,11
"org.apache.solr.handler.component.QueryComponent.groupedFinishStage(ResponseBuilder)",4,6,7
"org.apache.solr.handler.component.QueryComponent.handleGroupedResponses(ResponseBuilder,ShardRequest)",1,2,5
"org.apache.solr.handler.component.QueryComponent.handleRegularResponses(ResponseBuilder,ShardRequest)",1,3,3
"org.apache.solr.handler.component.QueryComponent.handleResponses(ResponseBuilder,ShardRequest)",1,2,2
"org.apache.solr.handler.component.QueryComponent.mergeIds(ResponseBuilder,ShardRequest)",4,13,15
"org.apache.solr.handler.component.QueryComponent.prepare(ResponseBuilder)",3,13,21
"org.apache.solr.handler.component.QueryComponent.process(ResponseBuilder)",7,24,31
"org.apache.solr.handler.component.QueryComponent.regularDistributedProcess(ResponseBuilder)",7,4,7
"org.apache.solr.handler.component.QueryComponent.regularFinishStage(ResponseBuilder)",1,3,3
"org.apache.solr.handler.component.QueryComponent.returnFields(ResponseBuilder,ShardRequest)",1,5,6
"org.apache.solr.handler.component.QueryElevationComponent.ElevationObj.ElevationObj(String,List<String>,List<String>)",1,5,5
"org.apache.solr.handler.component.QueryElevationComponent.getAnalyzedQuery(String)",2,2,3
"org.apache.solr.handler.component.QueryElevationComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponent.getDocs()",1,1,2
"org.apache.solr.handler.component.QueryElevationComponent.getElevationMap(IndexReader,SolrCore)",4,2,4
"org.apache.solr.handler.component.QueryElevationComponent.getSource()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponent.inform(SolrCore)",6,5,9
"org.apache.solr.handler.component.QueryElevationComponent.init(NamedList)",1,1,1
"org.apache.solr.handler.component.QueryElevationComponent.loadElevationMap(Config)",6,5,7
"org.apache.solr.handler.component.QueryElevationComponent.prepare(ResponseBuilder)",3,14,18
"org.apache.solr.handler.component.QueryElevationComponent.process(ResponseBuilder)",1,1,1
"org.apache.solr.handler.component.QueryElevationComponent.setTopQueryResults(IndexReader,String,String[],String[])",1,2,4
"org.apache.solr.handler.component.QueryElevationComponentTest.delete()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.init(String)",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.init(String,String)",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.setUp()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.testElevationReloading()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.testFieldType()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.testInterface()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.testSorting()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.testTrieFieldType()",1,1,1
"org.apache.solr.handler.component.QueryElevationComponentTest.writeFile(File,String,String...)",1,2,2
"org.apache.solr.handler.component.ResponseBuilder.GlobalCollectionStat.GlobalCollectionStat(int,Map<String, Long>)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.ResponseBuilder(SolrQueryRequest,SolrQueryResponse,List<SearchComponent>)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.addDebugInfo(String,Object)",1,1,2
"org.apache.solr.handler.component.ResponseBuilder.addRequest(SearchComponent,ShardRequest)",1,4,4
"org.apache.solr.handler.component.ResponseBuilder.getDebugInfo()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getFieldFlags()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getFilters()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getGroupingSpec()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getHighlightQuery()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getQparser()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getQuery()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getQueryCommand()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getQueryString()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getResults()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getShardNum(String)",3,3,4
"org.apache.solr.handler.component.ResponseBuilder.getSortSpec()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.getTimer()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.grouping()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.isDebug()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.isNeedDocList()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.isNeedDocSet()",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setDebug(boolean)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setDebugInfo(NamedList<Object>)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setFieldFlags(int)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setFilters(List<Query>)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setGroupingSpec(GroupingSpecification)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setHighlightQuery(Query)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setNeedDocList(boolean)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setNeedDocSet(boolean)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setQparser(QParser)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setQuery(Query)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setQueryString(String)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setResult(QueryResult)",1,2,2
"org.apache.solr.handler.component.ResponseBuilder.setResults(DocListAndSet)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setSortSpec(SortSpec)",1,1,1
"org.apache.solr.handler.component.ResponseBuilder.setTimer(RTimer)",1,1,1
"org.apache.solr.handler.component.SearchComponent.distributedProcess(ResponseBuilder)",1,1,1
"org.apache.solr.handler.component.SearchComponent.finishStage(ResponseBuilder)",1,1,1
"org.apache.solr.handler.component.SearchComponent.getCategory()",1,1,1
"org.apache.solr.handler.component.SearchComponent.getDocs()",1,1,1
"org.apache.solr.handler.component.SearchComponent.getName()",1,1,1
"org.apache.solr.handler.component.SearchComponent.getStatistics()",1,1,1
"org.apache.solr.handler.component.SearchComponent.handleResponses(ResponseBuilder,ShardRequest)",1,1,1
"org.apache.solr.handler.component.SearchComponent.init(NamedList)",1,1,1
"org.apache.solr.handler.component.SearchComponent.modifyRequest(ResponseBuilder,SearchComponent,ShardRequest)",1,1,1
"org.apache.solr.handler.component.SearchHandler.getComponents()",1,1,1
"org.apache.solr.handler.component.SearchHandler.getDefaultComponents()",1,1,1
"org.apache.solr.handler.component.SearchHandler.getDescription()",1,3,3
"org.apache.solr.handler.component.SearchHandler.getSource()",1,1,1
"org.apache.solr.handler.component.SearchHandler.getSourceId()",1,1,1
"org.apache.solr.handler.component.SearchHandler.getVersion()",1,1,1
"org.apache.solr.handler.component.SearchHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",8,22,26
"org.apache.solr.handler.component.SearchHandler.inform(SolrCore)",3,8,12
"org.apache.solr.handler.component.SearchHandler.init(PluginInfo)",3,2,3
"org.apache.solr.handler.component.SearchHandlerTest.getSchemaFile()",1,1,1
"org.apache.solr.handler.component.SearchHandlerTest.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.component.SearchHandlerTest.testInitalization()",1,1,1
"org.apache.solr.handler.component.ShardDoc.ShardDoc()",1,1,1
"org.apache.solr.handler.component.ShardDoc.ShardDoc(float,Object[],Object,String)",1,1,1
"org.apache.solr.handler.component.ShardDoc.equals(Object)",4,3,6
"org.apache.solr.handler.component.ShardDoc.hashCode()",1,2,2
"org.apache.solr.handler.component.ShardDoc.toString()",1,1,1
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.ShardComparator.ShardComparator(String)",3,2,3
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.ShardComparator.compare(Object,Object)",1,1,1
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.ShardComparator.sortVal(ShardDoc)",1,1,1
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.ShardFieldSortedHitQueue(SortField[],int)",1,4,5
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.comparatorMissingStringLast(String)",4,1,4
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.comparatorNatural(String)",4,1,4
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.comparatorScore(String)",3,1,3
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.comparatorStringLocale(String,Locale)",4,1,4
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.getCachedComparator(String,int,Locale,FieldComparatorSource)",3,4,8
"org.apache.solr.handler.component.ShardFieldSortedHitQueue.lessThan(ShardDoc,ShardDoc)",2,4,6
"org.apache.solr.handler.component.ShardRequest.toString()",1,1,1
"org.apache.solr.handler.component.ShardResponse.getException()",1,1,1
"org.apache.solr.handler.component.ShardResponse.getShard()",1,1,1
"org.apache.solr.handler.component.ShardResponse.getShardRequest()",1,1,1
"org.apache.solr.handler.component.ShardResponse.getSolrResponse()",1,1,1
"org.apache.solr.handler.component.ShardResponse.setException(Throwable)",1,1,1
"org.apache.solr.handler.component.ShardResponse.setResponseCode(int)",1,1,1
"org.apache.solr.handler.component.ShardResponse.setShard(String)",1,1,1
"org.apache.solr.handler.component.ShardResponse.setShardRequest(ShardRequest)",1,1,1
"org.apache.solr.handler.component.ShardResponse.setSolrResponse(SolrResponse)",1,1,1
"org.apache.solr.handler.component.ShardResponse.toString()",1,2,2
"org.apache.solr.handler.component.SimpleStats.SimpleStats(SolrQueryRequest,DocSet,SolrParams)",1,1,1
"org.apache.solr.handler.component.SimpleStats.getFieldCacheStats(String,String[])",4,9,12
"org.apache.solr.handler.component.SimpleStats.getStatsCounts()",1,1,1
"org.apache.solr.handler.component.SimpleStats.getStatsFields()",1,8,9
"org.apache.solr.handler.component.SpellCheckComponent.SpellCheckerListener.SpellCheckerListener(SolrCore,SolrSpellChecker,boolean,boolean)",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.SpellCheckerListener.buildSpellIndex(SolrIndexSearcher)",1,2,2
"org.apache.solr.handler.component.SpellCheckComponent.SpellCheckerListener.init(NamedList)",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.SpellCheckerListener.newSearcher(SolrIndexSearcher,SolrIndexSearcher)",1,6,6
"org.apache.solr.handler.component.SpellCheckComponent.SpellCheckerListener.postCommit()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.addCollationsToResponse(SolrParams,SpellingResult,ResponseBuilder,String,NamedList)",1,5,7
"org.apache.solr.handler.component.SpellCheckComponent.finishStage(ResponseBuilder)",6,37,44
"org.apache.solr.handler.component.SpellCheckComponent.getCustomParams(String,SolrParams,boolean)",1,4,4
"org.apache.solr.handler.component.SpellCheckComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.getDictionaryName(SolrParams)",1,1,2
"org.apache.solr.handler.component.SpellCheckComponent.getSource()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.getSpellChecker(SolrParams)",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.getSpellChecker(String)",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.getSpellCheckers()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.getTokens(String,Analyzer)",1,2,2
"org.apache.solr.handler.component.SpellCheckComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.inform(SolrCore)",9,12,17
"org.apache.solr.handler.component.SpellCheckComponent.init(NamedList)",1,1,1
"org.apache.solr.handler.component.SpellCheckComponent.modifyRequest(ResponseBuilder,SearchComponent,ShardRequest)",2,2,4
"org.apache.solr.handler.component.SpellCheckComponent.prepare(ResponseBuilder)",2,3,4
"org.apache.solr.handler.component.SpellCheckComponent.process(ResponseBuilder)",4,9,10
"org.apache.solr.handler.component.SpellCheckComponent.toNamedList(boolean,SpellingResult,String,boolean,boolean)",1,13,16
"org.apache.solr.handler.component.SpellCheckComponentTest.beforeClass()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.setUp()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.tearDown()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.test()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.testCollate()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.testCorrectSpelling()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.testExtendedResultsCount()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.testPerDictionary()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.testRebuildOnCommit()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.testRelativeIndexDirLocation()",1,1,1
"org.apache.solr.handler.component.SpellCheckComponentTest.testReloadOnStart()",1,2,2
"org.apache.solr.handler.component.SpellCheckComponentTest.testThresholdTokenFrequency()",1,1,1
"org.apache.solr.handler.component.StatsComponent.distributedProcess(ResponseBuilder)",1,1,1
"org.apache.solr.handler.component.StatsComponent.finishStage(ResponseBuilder)",2,3,5
"org.apache.solr.handler.component.StatsComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.StatsComponent.getSource()",1,1,1
"org.apache.solr.handler.component.StatsComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.StatsComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.StatsComponent.handleResponses(ResponseBuilder,ShardRequest)",2,4,6
"org.apache.solr.handler.component.StatsComponent.modifyRequest(ResponseBuilder,SearchComponent,ShardRequest)",2,3,4
"org.apache.solr.handler.component.StatsComponent.prepare(ResponseBuilder)",1,2,2
"org.apache.solr.handler.component.StatsComponent.process(ResponseBuilder)",1,2,2
"org.apache.solr.handler.component.StatsComponentTest.doTestFacetStatisticsMissingResult(String)",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.doTestFacetStatisticsResult(String)",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.doTestFieldStatisticsMissingResult(String)",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.doTestFieldStatisticsResult(String)",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.doTestMVFieldStatisticsResult(String)",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.getSchemaFile()",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.setUp()",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.testFieldStatisticsResultsDateField()",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.testFieldStatisticsResultsDateFieldAlwaysMissing()",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.testFieldStatisticsResultsNumericFieldAlwaysMissing()",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.testFieldStatisticsResultsStringField()",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.testFieldStatisticsResultsStringFieldAlwaysMissing()",1,1,1
"org.apache.solr.handler.component.StatsComponentTest.testStats()",1,3,3
"org.apache.solr.handler.component.StatsInfo.parse(SolrParams,ResponseBuilder)",1,3,3
"org.apache.solr.handler.component.StatsValuesFactory.createStatsValues(FieldType)",4,13,14
"org.apache.solr.handler.component.StringStatsValues.StringStatsValues(FieldType)",1,1,1
"org.apache.solr.handler.component.StringStatsValues.addTypeSpecificStats(NamedList<Object>)",1,1,1
"org.apache.solr.handler.component.StringStatsValues.max(String,String)",3,1,4
"org.apache.solr.handler.component.StringStatsValues.min(String,String)",3,1,4
"org.apache.solr.handler.component.StringStatsValues.toTypedValue(String)",1,1,1
"org.apache.solr.handler.component.StringStatsValues.updateMinMax(String,String)",1,1,1
"org.apache.solr.handler.component.StringStatsValues.updateTypeSpecificStats(NamedList)",1,1,1
"org.apache.solr.handler.component.StringStatsValues.updateTypeSpecificStats(String)",1,1,1
"org.apache.solr.handler.component.StringStatsValues.updateTypeSpecificStats(String,int)",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.TVMapper.TVMapper(IndexReader)",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.TVMapper.getDocFreq(String)",1,3,4
"org.apache.solr.handler.component.TermVectorComponent.TVMapper.isIgnoringOffsets()",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.TVMapper.isIgnoringPositions()",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.TVMapper.map(String,int,TermVectorOffsetInfo[],int[])",1,8,8
"org.apache.solr.handler.component.TermVectorComponent.TVMapper.setExpectations(String,int,boolean,boolean)",1,1,3
"org.apache.solr.handler.component.TermVectorComponent.distributedProcess(ResponseBuilder)",1,6,6
"org.apache.solr.handler.component.TermVectorComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.getInts(String[])",3,4,5
"org.apache.solr.handler.component.TermVectorComponent.getSource()",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.inform(SolrCore)",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.init(NamedList)",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.prepare(ResponseBuilder)",1,1,1
"org.apache.solr.handler.component.TermVectorComponent.process(ResponseBuilder)",5,24,26
"org.apache.solr.handler.component.TermVectorComponentTest.beforeClass()",1,1,1
"org.apache.solr.handler.component.TermVectorComponentTest.testBasics()",1,1,1
"org.apache.solr.handler.component.TermVectorComponentTest.testDistributed()",1,3,3
"org.apache.solr.handler.component.TermVectorComponentTest.testOptions()",1,4,5
"org.apache.solr.handler.component.TermVectorComponentTest.testPerField()",1,1,1
"org.apache.solr.handler.component.TermsComponent.TermsHelper.TermsHelper()",1,1,1
"org.apache.solr.handler.component.TermsComponent.TermsHelper.buildResponse()",4,9,12
"org.apache.solr.handler.component.TermsComponent.TermsHelper.getCountSorted(HashMap<String, Term>)",3,3,3
"org.apache.solr.handler.component.TermsComponent.TermsHelper.getLexSorted(HashMap<String, Term>)",1,1,1
"org.apache.solr.handler.component.TermsComponent.TermsHelper.init(SolrParams)",1,3,3
"org.apache.solr.handler.component.TermsComponent.TermsHelper.num(long)",2,1,2
"org.apache.solr.handler.component.TermsComponent.TermsHelper.parse(NamedList)",4,4,6
"org.apache.solr.handler.component.TermsComponent.createShardQuery(SolrParams)",1,2,2
"org.apache.solr.handler.component.TermsComponent.distributedProcess(ResponseBuilder)",3,3,5
"org.apache.solr.handler.component.TermsComponent.finishStage(ResponseBuilder)",2,1,3
"org.apache.solr.handler.component.TermsComponent.getDescription()",1,1,1
"org.apache.solr.handler.component.TermsComponent.getSource()",1,1,1
"org.apache.solr.handler.component.TermsComponent.getSourceId()",1,1,1
"org.apache.solr.handler.component.TermsComponent.getVersion()",1,1,1
"org.apache.solr.handler.component.TermsComponent.handleResponses(ResponseBuilder,ShardRequest)",2,3,5
"org.apache.solr.handler.component.TermsComponent.prepare(ResponseBuilder)",3,2,4
"org.apache.solr.handler.component.TermsComponent.process(ResponseBuilder)",13,26,40
"org.apache.solr.handler.component.TermsComponent.resolveRegexpFlags(SolrParams)",3,2,4
"org.apache.solr.handler.component.TermsComponentTest.beforeTest()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.test()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testEmptyLower()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testLowerExclusive()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testMinMaxFreq()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testMultipleFields()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testPastUpper()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testPrefix()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testRegexp()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testRegexpFlagParsing()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testRegexpWithFlags()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testSortCount()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testSortIndex()",1,1,1
"org.apache.solr.handler.component.TermsComponentTest.testUnlimitedRows()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.ControlData.ControlData(Object[])",1,1,1
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.ControlData.compareTo(ControlData)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.ControlData.iterator()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.clobToString(Clob)",1,3,3
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.compareData(List<ControlData>,List<ControlData>)",1,13,18
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.controlDataToMap(ControlData,String[],boolean)",1,2,3
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.extractDataByKeyLookup(DIHCache,String[])",3,4,5
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.extractDataInKeyOrder(DIHCache,String[])",1,2,2
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.getContext(Map<String, String>)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.listToControlData(List<Object[]>)",1,2,2
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.loadData(DIHCache,List<ControlData>,String[],boolean)",1,2,2
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.mapToObjectArray(Map<String, Object>,String[])",1,2,2
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.setup()",1,2,2
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.stringArrayToCommaDelimitedList(String[])",1,3,3
"org.apache.solr.handler.dataimport.AbstractDIHCacheTestCase.teardown()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.TestContext(Map<String, String>,Context,List<Map<String, String>>,boolean)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.currentProcess()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.deleteDoc(String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.deleteDocByQuery(String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getAllEntityFields()",1,2,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getDataSource()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getDataSource(String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getEntityAttribute(String)",1,2,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getEntityProcessor()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getParentContext()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getRequestParameters()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getResolvedEntityAttribute(String)",1,2,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getScript()",1,2,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getScriptLanguage()",1,2,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getSessionAttribute(String,String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getSolrCore()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getStats()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.getVariableResolver()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.isRootEntity()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.replaceTokens(String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.resolve(String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestContext.setSessionAttribute(String,Object,String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessor.TestUpdateRequestProcessor(UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessor.finish()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessor.processAdd(AddUpdateCommand)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessor.processCommit(CommitUpdateCommand)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessor.processDelete(DeleteUpdateCommand)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessor.processMergeIndexes(MergeIndexesCommand)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessor.processRollback(RollbackUpdateCommand)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessor.reset()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.TestUpdateRequestProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.createFile(File,String,byte[],boolean)",1,2,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.createMap(Object...)",2,2,4
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.getContext(Entity,VariableResolverImpl,DataSource,String,List<Map<String, String>>,Map<String, String>)",1,1,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.getField(String,String,String,String,String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.initCore(String,String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.loadDataConfig(String)",1,2,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.runDeltaImport(String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.runFullImport(String)",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.runFullImport(String,Map<String, String>)",1,2,2
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.setUp()",1,1,1
"org.apache.solr.handler.dataimport.AbstractDataImportHandlerTestCase.tearDown()",1,3,3
"org.apache.solr.handler.dataimport.BinContentStreamDataSource.close()",1,3,4
"org.apache.solr.handler.dataimport.BinContentStreamDataSource.getData(String)",2,2,3
"org.apache.solr.handler.dataimport.BinContentStreamDataSource.init(Context,Properties)",1,1,1
"org.apache.solr.handler.dataimport.BinFileDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.BinFileDataSource.getData(String)",1,2,2
"org.apache.solr.handler.dataimport.BinFileDataSource.init(Context,Properties)",1,1,1
"org.apache.solr.handler.dataimport.BinURLDataSource.BinURLDataSource()",1,1,1
"org.apache.solr.handler.dataimport.BinURLDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.BinURLDataSource.getData(String)",1,2,3
"org.apache.solr.handler.dataimport.BinURLDataSource.getInitPropWithReplacements(String)",2,1,2
"org.apache.solr.handler.dataimport.BinURLDataSource.init(Context,Properties)",1,5,5
"org.apache.solr.handler.dataimport.CachePropertyUtil.getAttributeValue(Context,String)",2,4,5
"org.apache.solr.handler.dataimport.CachePropertyUtil.getAttributeValueAsString(Context,String)",2,4,5
"org.apache.solr.handler.dataimport.CachedSqlEntityProcessor.initCache(Context)",1,1,1
"org.apache.solr.handler.dataimport.ClobTransformer.readFromClob(Clob)",1,3,3
"org.apache.solr.handler.dataimport.ClobTransformer.transformRow(Map<String, Object>,Context)",3,6,8
"org.apache.solr.handler.dataimport.ContentStreamDataSource.close()",1,3,4
"org.apache.solr.handler.dataimport.ContentStreamDataSource.getData(String)",2,2,3
"org.apache.solr.handler.dataimport.ContentStreamDataSource.init(Context,Properties)",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.ContextImpl(Entity,VariableResolverImpl,DataSource,String,Map<String, Object>,ContextImpl,DocBuilder)",1,1,2
"org.apache.solr.handler.dataimport.ContextImpl.currentProcess()",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.deleteDoc(String)",1,2,2
"org.apache.solr.handler.dataimport.ContextImpl.deleteDocByQuery(String)",1,2,2
"org.apache.solr.handler.dataimport.ContextImpl.getAllEntityFields()",1,1,2
"org.apache.solr.handler.dataimport.ContextImpl.getDataSource()",3,6,8
"org.apache.solr.handler.dataimport.ContextImpl.getDataSource(String)",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.getDocBuilder()",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.getDocument()",4,1,4
"org.apache.solr.handler.dataimport.ContextImpl.getEntityAttribute(String)",1,2,2
"org.apache.solr.handler.dataimport.ContextImpl.getEntityProcessor()",1,1,2
"org.apache.solr.handler.dataimport.ContextImpl.getParentContext()",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.getRequestParameters()",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.getResolvedEntityAttribute(String)",1,2,2
"org.apache.solr.handler.dataimport.ContextImpl.getScript()",2,2,3
"org.apache.solr.handler.dataimport.ContextImpl.getScriptLanguage()",2,2,3
"org.apache.solr.handler.dataimport.ContextImpl.getSessionAttribute(String,String)",7,8,9
"org.apache.solr.handler.dataimport.ContextImpl.getSolrCore()",1,2,2
"org.apache.solr.handler.dataimport.ContextImpl.getStats()",1,2,2
"org.apache.solr.handler.dataimport.ContextImpl.getVariableResolver()",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.isRootEntity()",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.putVal(String,Object,Map)",1,2,2
"org.apache.solr.handler.dataimport.ContextImpl.replaceTokens(String)",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.resolve(String)",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.setDoc(DocWrapper)",1,1,1
"org.apache.solr.handler.dataimport.ContextImpl.setSessionAttribute(String,Object,String)",2,8,10
"org.apache.solr.handler.dataimport.DIHCacheSupport.DIHCacheSupport(Context,String)",2,4,6
"org.apache.solr.handler.dataimport.DIHCacheSupport.destroyAll()",1,3,3
"org.apache.solr.handler.dataimport.DIHCacheSupport.getCacheData(Context,String,Iterator<Map<String, Object>>)",2,2,2
"org.apache.solr.handler.dataimport.DIHCacheSupport.getFromRowCacheTransformed()",2,1,2
"org.apache.solr.handler.dataimport.DIHCacheSupport.getIdCacheData(Context,String,Iterator<Map<String, Object>>)",2,4,4
"org.apache.solr.handler.dataimport.DIHCacheSupport.getNextFromCache(String,Iterator<Map<String, Object>>)",3,3,4
"org.apache.solr.handler.dataimport.DIHCacheSupport.getSimpleCacheData(Context,String,Iterator<Map<String, Object>>)",1,3,3
"org.apache.solr.handler.dataimport.DIHCacheSupport.initNewParent(Context)",1,2,2
"org.apache.solr.handler.dataimport.DIHCacheSupport.instantiateCache(Context)",1,1,2
"org.apache.solr.handler.dataimport.DIHCacheSupport.populateCache(String,Iterator<Map<String, Object>>)",1,2,2
"org.apache.solr.handler.dataimport.DIHWriterBase.setDeltaKeys(Set<Map<String, Object>>)",1,5,5
"org.apache.solr.handler.dataimport.DataConfig.Document.Document()",1,1,1
"org.apache.solr.handler.dataimport.DataConfig.Document.Document(Element)",1,2,2
"org.apache.solr.handler.dataimport.DataConfig.Entity.Entity()",1,1,1
"org.apache.solr.handler.dataimport.DataConfig.Entity.Entity(Element)",6,6,11
"org.apache.solr.handler.dataimport.DataConfig.Entity.clearCache()",1,4,5
"org.apache.solr.handler.dataimport.DataConfig.Entity.getPk()",1,1,2
"org.apache.solr.handler.dataimport.DataConfig.Entity.getSchemaPk()",1,1,2
"org.apache.solr.handler.dataimport.DataConfig.Field.Field()",1,1,1
"org.apache.solr.handler.dataimport.DataConfig.Field.Field(Element)",2,1,2
"org.apache.solr.handler.dataimport.DataConfig.Field.getName()",1,1,2
"org.apache.solr.handler.dataimport.DataConfig.Script.Script()",1,1,1
"org.apache.solr.handler.dataimport.DataConfig.Script.Script(Element)",1,2,2
"org.apache.solr.handler.dataimport.DataConfig.clearCaches()",1,2,2
"org.apache.solr.handler.dataimport.DataConfig.getAllAttributes(Element)",1,2,2
"org.apache.solr.handler.dataimport.DataConfig.getChildNodes(Element,String)",1,4,4
"org.apache.solr.handler.dataimport.DataConfig.getStringAttribute(Element,String,String)",1,2,3
"org.apache.solr.handler.dataimport.DataConfig.getTxt(Node,StringBuilder)",1,4,5
"org.apache.solr.handler.dataimport.DataConfig.readFromXml(Element)",7,10,12
"org.apache.solr.handler.dataimport.DataImportHandler.getDescription()",1,1,1
"org.apache.solr.handler.dataimport.DataImportHandler.getParamsMap(SolrParams)",3,3,5
"org.apache.solr.handler.dataimport.DataImportHandler.getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestParams)",1,3,3
"org.apache.solr.handler.dataimport.DataImportHandler.getSource()",1,1,1
"org.apache.solr.handler.dataimport.DataImportHandler.getSourceId()",1,1,1
"org.apache.solr.handler.dataimport.DataImportHandler.getStatistics()",2,5,5
"org.apache.solr.handler.dataimport.DataImportHandler.getVersion()",1,1,1
"org.apache.solr.handler.dataimport.DataImportHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",7,21,25
"org.apache.solr.handler.dataimport.DataImportHandler.inform(SolrCore)",1,8,8
"org.apache.solr.handler.dataimport.DataImportHandler.init(NamedList)",1,1,1
"org.apache.solr.handler.dataimport.DataImportHandler.processConfiguration(NamedList)",4,5,6
"org.apache.solr.handler.dataimport.DataImportHandlerException.DataImportHandlerException(int)",1,1,1
"org.apache.solr.handler.dataimport.DataImportHandlerException.DataImportHandlerException(int,String)",1,2,2
"org.apache.solr.handler.dataimport.DataImportHandlerException.DataImportHandlerException(int,String,Throwable)",1,2,2
"org.apache.solr.handler.dataimport.DataImportHandlerException.DataImportHandlerException(int,Throwable)",1,1,1
"org.apache.solr.handler.dataimport.DataImportHandlerException.getErrCode()",1,1,1
"org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow(int,Exception)",2,1,2
"org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow(int,Exception,String)",2,1,2
"org.apache.solr.handler.dataimport.DataImporter.DataImporter()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.DataImporter(InputSource,SolrCore,Map<String, Properties>,Map<String, Object>,String)",2,3,6
"org.apache.solr.handler.dataimport.DataImporter.RequestParams.RequestParams()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.RequestParams.RequestParams(Map<String, Object>)",1,12,17
"org.apache.solr.handler.dataimport.DataImporter.checkWritablePersistFile(SolrWriter)",2,2,3
"org.apache.solr.handler.dataimport.DataImporter.doDeltaImport(SolrWriter,RequestParams)",1,3,3
"org.apache.solr.handler.dataimport.DataImporter.doFullImport(SolrWriter,RequestParams)",1,3,3
"org.apache.solr.handler.dataimport.DataImporter.getConfig()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.getCore()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.getCoreScopeSession()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.getDataSourceInstance(Entity,String,Context)",2,9,10
"org.apache.solr.handler.dataimport.DataImporter.getDocBuilder()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.getHandlerName()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.getIndexStartTime()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.getSchema()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.getStatus()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.getStatusMessages()",1,3,3
"org.apache.solr.handler.dataimport.DataImporter.identifyPk(Entity)",4,3,4
"org.apache.solr.handler.dataimport.DataImporter.initEntity(Entity,Map<String, Field>,boolean)",8,11,16
"org.apache.solr.handler.dataimport.DataImporter.isBusy()",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.loadAndInit(String)",1,2,2
"org.apache.solr.handler.dataimport.DataImporter.loadDataConfig(InputSource)",2,7,8
"org.apache.solr.handler.dataimport.DataImporter.retrieve(Object)",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.runAsync(RequestParams,SolrWriter)",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.runCmd(RequestParams,SolrWriter)",3,7,7
"org.apache.solr.handler.dataimport.DataImporter.setIndexStartTime(Date)",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.setStatus(Status)",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.store(Object,Object)",1,1,1
"org.apache.solr.handler.dataimport.DataImporter.verifyWithSchema(Map<String, Field>)",1,7,7
"org.apache.solr.handler.dataimport.DateFormatTransformer.process(Object,String,Locale)",3,2,4
"org.apache.solr.handler.dataimport.DateFormatTransformer.transformRow(Map<String, Object>,Context)",3,6,9
"org.apache.solr.handler.dataimport.DebugLogger.DebugInfo.DebugInfo(String,DIHLogLevels,DebugInfo)",1,5,6
"org.apache.solr.handler.dataimport.DebugLogger.DebugLogger()",2,1,2
"org.apache.solr.handler.dataimport.DebugLogger.addToNamedList(NamedList,Object)",1,6,6
"org.apache.solr.handler.dataimport.DebugLogger.getStacktraceString(Exception)",1,1,1
"org.apache.solr.handler.dataimport.DebugLogger.getTransformerName(Transformer)",4,3,4
"org.apache.solr.handler.dataimport.DebugLogger.log(DIHLogLevels,String,Object)",16,13,24
"org.apache.solr.handler.dataimport.DebugLogger.peekStack()",1,2,2
"org.apache.solr.handler.dataimport.DebugLogger.popAllTransformers()",3,2,4
"org.apache.solr.handler.dataimport.DebugLogger.wrapDs(DataSource)",1,3,3
"org.apache.solr.handler.dataimport.DebugLogger.wrapTransformer(Transformer)",1,3,3
"org.apache.solr.handler.dataimport.DestroyCountCache.DestroyCountCache()",1,1,1
"org.apache.solr.handler.dataimport.DestroyCountCache.destroy()",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.DocBuilder(DataImporter,SolrWriter,DIHPropertiesWriter,RequestParams)",2,5,8
"org.apache.solr.handler.dataimport.DocBuilder.DocWrapper.getSessionAttribute(String)",1,2,2
"org.apache.solr.handler.dataimport.DocBuilder.DocWrapper.setSessionAttribute(String,Object)",1,1,2
"org.apache.solr.handler.dataimport.DocBuilder.EntityRow.EntityRow(Map<String, Object>,EntityRow,String)",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.EntityRunner.EntityRunner(Entity,EntityRunner,EntityProcessor)",1,5,5
"org.apache.solr.handler.dataimport.DocBuilder.EntityRunner.initEntity()",1,3,3
"org.apache.solr.handler.dataimport.DocBuilder.EntityRunner.run(DocWrapper,String,EntityRow,int)",3,3,7
"org.apache.solr.handler.dataimport.DocBuilder.EntityRunner.runAThread(ThreadedEntityProcessorWrapper,DocWrapper,EntityRow,String)",7,19,24
"org.apache.solr.handler.dataimport.DocBuilder.Statistics.add(Statistics)",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.Statistics.getStatsSnapshot()",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.abort()",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.addFieldToDoc(Object,String,float,boolean,DocWrapper)",6,12,12
"org.apache.solr.handler.dataimport.DocBuilder.addFields(Entity,DocWrapper,Map<String, Object>,VariableResolver)",4,10,12
"org.apache.solr.handler.dataimport.DocBuilder.addStatusMessage(String)",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.buildDocument(VariableResolverImpl,DocWrapper,Map<String, Object>,Entity,boolean,ContextImpl)",1,2,3
"org.apache.solr.handler.dataimport.DocBuilder.buildDocument(VariableResolverImpl,DocWrapper,Map<String, Object>,Entity,boolean,ContextImpl,List<EntityProcessorWrapper>)",13,28,39
"org.apache.solr.handler.dataimport.DocBuilder.cleanByQuery(String,AtomicBoolean)",1,5,5
"org.apache.solr.handler.dataimport.DocBuilder.collectDelta(Entity,VariableResolverImpl,Set<Map<String, Object>>)",16,12,21
"org.apache.solr.handler.dataimport.DocBuilder.createProcessor(Entity)",1,3,3
"org.apache.solr.handler.dataimport.DocBuilder.createRunner(Entity,EntityRunner,EntityProcessor)",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.deleteAll(Set<Map<String, Object>>)",3,5,5
"org.apache.solr.handler.dataimport.DocBuilder.destroy()",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.doDelta()",4,5,7
"org.apache.solr.handler.dataimport.DocBuilder.doFullDump()",2,6,7
"org.apache.solr.handler.dataimport.DocBuilder.execute()",3,15,17
"org.apache.solr.handler.dataimport.DocBuilder.findMatchingPkColumn(String,Map<String, Object>)",6,7,7
"org.apache.solr.handler.dataimport.DocBuilder.finish(Properties)",1,4,4
"org.apache.solr.handler.dataimport.DocBuilder.getDebugLogger()",1,1,2
"org.apache.solr.handler.dataimport.DocBuilder.getEntityProcessor(Entity)",2,3,4
"org.apache.solr.handler.dataimport.DocBuilder.getModifiedParentRows(VariableResolverImpl,String,EntityProcessor,Set<Map<String, Object>>)",4,2,4
"org.apache.solr.handler.dataimport.DocBuilder.getTimeElapsedSince(long)",1,1,1
"org.apache.solr.handler.dataimport.DocBuilder.getVariableResolver()",1,8,8
"org.apache.solr.handler.dataimport.DocBuilder.handleSpecialCommands(Map<String, Object>,DocWrapper)",5,11,13
"org.apache.solr.handler.dataimport.DocBuilder.invokeEventListener(String)",1,2,2
"org.apache.solr.handler.dataimport.DocBuilder.loadClass(String,SolrCore)",1,5,5
"org.apache.solr.handler.dataimport.DocBuilder.notifyListener(EventListener)",1,1,2
"org.apache.solr.handler.dataimport.DocBuilder.resetEntity(Entity)",1,3,3
"org.apache.solr.handler.dataimport.DocBuilder.rollback()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessor.close()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessor.postTransform(Map<String, Object>)",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorBase.destroy()",1,2,2
"org.apache.solr.handler.dataimport.EntityProcessorBase.firstInit(Context)",1,1,2
"org.apache.solr.handler.dataimport.EntityProcessorBase.getNext()",4,4,5
"org.apache.solr.handler.dataimport.EntityProcessorBase.init(Context)",1,3,3
"org.apache.solr.handler.dataimport.EntityProcessorBase.initCache(Context)",1,1,2
"org.apache.solr.handler.dataimport.EntityProcessorBase.nextDeletedRowKey()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorBase.nextModifiedParentRowKey()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorBase.nextModifiedRowKey()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorBase.nextRow()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.EntityProcessorWrapper(EntityProcessor,DocBuilder)",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.ReflectionTransformer.ReflectionTransformer(Method,Class,String)",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.ReflectionTransformer.transformRow(Map<String, Object>,Context)",1,2,2
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.applyTransformer(Map<String, Object>)",3,2,3
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.checkStopTransform(Map)",1,2,2
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.close()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.destroy()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.getContext()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.getFromRowCache()",2,1,2
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.getVariableResolver()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.init(Context)",1,2,3
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.loadTransformers()",4,7,9
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.nextDeletedRowKey()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.nextModifiedParentRowKey()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.nextModifiedRowKey()",1,1,1
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.nextRow()",4,12,15
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.pullRow()",2,3,3
"org.apache.solr.handler.dataimport.EntityProcessorWrapper.transformRow(Map<String, Object>)",9,15,18
"org.apache.solr.handler.dataimport.EvaluatorBag.VariableWrapper.VariableWrapper(String,VariableResolver)",1,1,1
"org.apache.solr.handler.dataimport.EvaluatorBag.VariableWrapper.resolve()",1,1,1
"org.apache.solr.handler.dataimport.EvaluatorBag.VariableWrapper.toString()",1,2,2
"org.apache.solr.handler.dataimport.EvaluatorBag.getDateFormatEvaluator()",2,7,8
"org.apache.solr.handler.dataimport.EvaluatorBag.getFunctionsNamespace(List<Map<String, String>>,DocBuilder)",4,4,7
"org.apache.solr.handler.dataimport.EvaluatorBag.getSolrQueryEscapingEvaluator()",2,1,2
"org.apache.solr.handler.dataimport.EvaluatorBag.getSqlEscapingEvaluator()",2,1,2
"org.apache.solr.handler.dataimport.EvaluatorBag.getUrlEvaluator()",2,2,3
"org.apache.solr.handler.dataimport.EvaluatorBag.parseParams(String,VariableResolver)",6,7,9
"org.apache.solr.handler.dataimport.FieldReaderDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.FieldReaderDataSource.getData(String)",5,6,7
"org.apache.solr.handler.dataimport.FieldReaderDataSource.getReader(Blob)",2,2,2
"org.apache.solr.handler.dataimport.FieldReaderDataSource.init(Context,Properties)",1,1,1
"org.apache.solr.handler.dataimport.FieldReaderDataSource.readCharStream(Clob)",1,2,2
"org.apache.solr.handler.dataimport.FieldStreamDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.FieldStreamDataSource.getData(String)",5,5,6
"org.apache.solr.handler.dataimport.FieldStreamDataSource.init(Context,Properties)",1,1,1
"org.apache.solr.handler.dataimport.FileDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.FileDataSource.getData(String)",1,2,2
"org.apache.solr.handler.dataimport.FileDataSource.getFile(String,String)",4,6,8
"org.apache.solr.handler.dataimport.FileDataSource.init(Context,Properties)",1,2,2
"org.apache.solr.handler.dataimport.FileDataSource.openStream(File)",2,1,2
"org.apache.solr.handler.dataimport.FileListEntityProcessor.addDetails(List<Map<String, Object>>,File,String)",6,3,10
"org.apache.solr.handler.dataimport.FileListEntityProcessor.getDate(String)",5,3,7
"org.apache.solr.handler.dataimport.FileListEntityProcessor.getFolderFiles(File,List<Map<String, Object>>)",5,6,7
"org.apache.solr.handler.dataimport.FileListEntityProcessor.getSize(String)",4,3,4
"org.apache.solr.handler.dataimport.FileListEntityProcessor.init(Context)",3,4,6
"org.apache.solr.handler.dataimport.FileListEntityProcessor.nextRow()",2,4,4
"org.apache.solr.handler.dataimport.HTMLStripTransformer.stripHTML(String,String)",3,3,6
"org.apache.solr.handler.dataimport.HTMLStripTransformer.transformRow(Map<String, Object>,Context)",7,6,9
"org.apache.solr.handler.dataimport.JdbcDataSource.ResultSetIterator.ResultSetIterator(String)",2,4,4
"org.apache.solr.handler.dataimport.JdbcDataSource.ResultSetIterator.close()",1,4,4
"org.apache.solr.handler.dataimport.JdbcDataSource.ResultSetIterator.getARow()",5,5,14
"org.apache.solr.handler.dataimport.JdbcDataSource.ResultSetIterator.getIterator()",1,1,1
"org.apache.solr.handler.dataimport.JdbcDataSource.ResultSetIterator.hasnext()",3,3,4
"org.apache.solr.handler.dataimport.JdbcDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.JdbcDataSource.closeConnection()",1,3,3
"org.apache.solr.handler.dataimport.JdbcDataSource.createConnectionFactory(Context,Properties)",7,20,23
"org.apache.solr.handler.dataimport.JdbcDataSource.finalize()",1,2,2
"org.apache.solr.handler.dataimport.JdbcDataSource.getConnection()",2,2,2
"org.apache.solr.handler.dataimport.JdbcDataSource.getData(String)",1,1,1
"org.apache.solr.handler.dataimport.JdbcDataSource.init(Context,Properties)",1,16,17
"org.apache.solr.handler.dataimport.JdbcDataSource.logError(String,Exception)",1,1,1
"org.apache.solr.handler.dataimport.JdbcDataSource.readFieldNames(ResultSetMetaData)",1,2,2
"org.apache.solr.handler.dataimport.JdbcDataSource.resolveVariables(Context,Properties)",1,3,3
"org.apache.solr.handler.dataimport.LineEntityProcessor.destroy()",1,2,2
"org.apache.solr.handler.dataimport.LineEntityProcessor.init(Context)",2,3,4
"org.apache.solr.handler.dataimport.LineEntityProcessor.nextRow()",5,5,9
"org.apache.solr.handler.dataimport.LogTransformer.transformRow(Map<String, Object>,Context)",2,11,13
"org.apache.solr.handler.dataimport.MailEntityProcessor.FolderIterator.FolderIterator(Store)",1,1,1
"org.apache.solr.handler.dataimport.MailEntityProcessor.FolderIterator.excludeFolder(String)",5,3,5
"org.apache.solr.handler.dataimport.MailEntityProcessor.FolderIterator.getTopLevelFolders(Store)",4,8,10
"org.apache.solr.handler.dataimport.MailEntityProcessor.FolderIterator.hasNext()",1,1,1
"org.apache.solr.handler.dataimport.MailEntityProcessor.FolderIterator.next()",3,10,11
"org.apache.solr.handler.dataimport.MailEntityProcessor.FolderIterator.remove()",1,1,1
"org.apache.solr.handler.dataimport.MailEntityProcessor.MailsSinceLastCheckFilter.MailsSinceLastCheckFilter(Date)",1,1,1
"org.apache.solr.handler.dataimport.MailEntityProcessor.MailsSinceLastCheckFilter.getCustomSearch(Folder)",1,1,1
"org.apache.solr.handler.dataimport.MailEntityProcessor.MessageIterator.MessageIterator(Folder,int)",1,2,3
"org.apache.solr.handler.dataimport.MailEntityProcessor.MessageIterator.getNextBatch(int,Folder)",1,4,5
"org.apache.solr.handler.dataimport.MailEntityProcessor.MessageIterator.getSearchTerm()",3,3,5
"org.apache.solr.handler.dataimport.MailEntityProcessor.MessageIterator.hasNext()",2,2,5
"org.apache.solr.handler.dataimport.MailEntityProcessor.MessageIterator.next()",1,1,2
"org.apache.solr.handler.dataimport.MailEntityProcessor.MessageIterator.remove()",1,1,1
"org.apache.solr.handler.dataimport.MailEntityProcessor.addAddressToList(Address[],List<String>)",1,4,4
"org.apache.solr.handler.dataimport.MailEntityProcessor.addEnvelopToDocument(Part,Map<String, Object>)",1,16,16
"org.apache.solr.handler.dataimport.MailEntityProcessor.addPartToDocument(Part,Map<String, Object>,boolean)",4,12,14
"org.apache.solr.handler.dataimport.MailEntityProcessor.connectToMailBox()",1,1,2
"org.apache.solr.handler.dataimport.MailEntityProcessor.createFilters()",2,5,6
"org.apache.solr.handler.dataimport.MailEntityProcessor.getBoolFromContext(String,boolean)",1,2,2
"org.apache.solr.handler.dataimport.MailEntityProcessor.getDocumentFromMail(Message)",1,1,2
"org.apache.solr.handler.dataimport.MailEntityProcessor.getIntFromContext(String,int)",1,2,3
"org.apache.solr.handler.dataimport.MailEntityProcessor.getNextMail()",5,6,8
"org.apache.solr.handler.dataimport.MailEntityProcessor.getStringFromContext(String,String)",1,2,2
"org.apache.solr.handler.dataimport.MailEntityProcessor.init(Context)",3,6,12
"org.apache.solr.handler.dataimport.MailEntityProcessor.logConfig()",2,1,2
"org.apache.solr.handler.dataimport.MailEntityProcessor.nextRow()",1,3,4
"org.apache.solr.handler.dataimport.MockDataSource.clearCache()",1,1,1
"org.apache.solr.handler.dataimport.MockDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.MockDataSource.getData(String)",1,3,3
"org.apache.solr.handler.dataimport.MockDataSource.init(Context,Properties)",1,1,1
"org.apache.solr.handler.dataimport.MockDataSource.setCollection(String,Iterable<Map<String, Object>>)",1,1,1
"org.apache.solr.handler.dataimport.MockDataSource.setIterator(String,Iterator<Map<String, Object>>)",1,1,1
"org.apache.solr.handler.dataimport.MockInitialContextFactory.MockInitialContextFactory()",1,1,2
"org.apache.solr.handler.dataimport.MockInitialContextFactory.bind(String,Object)",1,1,1
"org.apache.solr.handler.dataimport.MockInitialContextFactory.getInitialContext(Hashtable)",1,1,1
"org.apache.solr.handler.dataimport.MockSolrEntityProcessor.MockSolrEntityProcessor(List<Doc>)",1,1,1
"org.apache.solr.handler.dataimport.MockSolrEntityProcessor.MockSolrEntityProcessor(List<Doc>,int)",1,1,1
"org.apache.solr.handler.dataimport.MockSolrEntityProcessor.doQuery(int)",1,1,1
"org.apache.solr.handler.dataimport.MockSolrEntityProcessor.getDocs(int,int)",1,3,3
"org.apache.solr.handler.dataimport.MockSolrEntityProcessor.getQueryCount()",1,1,1
"org.apache.solr.handler.dataimport.NumberFormatTransformer.parseNumber(String,NumberFormat)",2,2,2
"org.apache.solr.handler.dataimport.NumberFormatTransformer.process(String,String,Locale)",5,5,5
"org.apache.solr.handler.dataimport.NumberFormatTransformer.transformRow(Map<String, Object>,Context)",8,9,13
"org.apache.solr.handler.dataimport.PlainTextEntityProcessor.init(Context)",1,1,1
"org.apache.solr.handler.dataimport.PlainTextEntityProcessor.nextRow()",4,4,6
"org.apache.solr.handler.dataimport.RegexTransformer.getPattern(String)",1,2,2
"org.apache.solr.handler.dataimport.RegexTransformer.process(String,String,String,String,String,String)",3,4,4
"org.apache.solr.handler.dataimport.RegexTransformer.readBySplit(String,String)",1,1,1
"org.apache.solr.handler.dataimport.RegexTransformer.readfromRegExp(String,String,String,String)",3,13,15
"org.apache.solr.handler.dataimport.RegexTransformer.transformRow(Map<String, Object>,Context)",4,15,19
"org.apache.solr.handler.dataimport.ScriptTransformer.getFunctionName()",1,1,1
"org.apache.solr.handler.dataimport.ScriptTransformer.initEngine(Context)",2,4,5
"org.apache.solr.handler.dataimport.ScriptTransformer.setFunctionName(String)",1,1,1
"org.apache.solr.handler.dataimport.ScriptTransformer.transformRow(Map<String, Object>,Context)",2,4,6
"org.apache.solr.handler.dataimport.SimplePropertiesWriter.getPersistFile()",1,2,3
"org.apache.solr.handler.dataimport.SimplePropertiesWriter.init(DataImporter)",1,2,3
"org.apache.solr.handler.dataimport.SimplePropertiesWriter.isWritable()",1,2,2
"org.apache.solr.handler.dataimport.SimplePropertiesWriter.persist(Properties)",1,3,6
"org.apache.solr.handler.dataimport.SimplePropertiesWriter.readIndexerProperties()",1,3,4
"org.apache.solr.handler.dataimport.SolrEntityProcessor.SolrDocumentListIterator.SolrDocumentListIterator(SolrDocumentList)",1,1,1
"org.apache.solr.handler.dataimport.SolrEntityProcessor.SolrDocumentListIterator.getSize()",1,1,1
"org.apache.solr.handler.dataimport.SolrEntityProcessor.SolrDocumentListIterator.getStart()",1,1,1
"org.apache.solr.handler.dataimport.SolrEntityProcessor.SolrDocumentListIterator.hasMoreRows()",1,1,1
"org.apache.solr.handler.dataimport.SolrEntityProcessor.SolrDocumentListIterator.hasNext()",1,1,1
"org.apache.solr.handler.dataimport.SolrEntityProcessor.SolrDocumentListIterator.next()",1,2,2
"org.apache.solr.handler.dataimport.SolrEntityProcessor.SolrDocumentListIterator.remove()",1,1,1
"org.apache.solr.handler.dataimport.SolrEntityProcessor.buildIterator()",2,5,7
"org.apache.solr.handler.dataimport.SolrEntityProcessor.doQuery(int)",1,7,7
"org.apache.solr.handler.dataimport.SolrEntityProcessor.firstInit(Context)",3,6,9
"org.apache.solr.handler.dataimport.SolrEntityProcessor.getHttpClient()",1,1,1
"org.apache.solr.handler.dataimport.SolrEntityProcessor.nextRow()",1,1,1
"org.apache.solr.handler.dataimport.SolrWriter.SolrWriter(UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.dataimport.SolrWriter.close()",1,1,2
"org.apache.solr.handler.dataimport.SolrWriter.commit(boolean)",1,2,2
"org.apache.solr.handler.dataimport.SolrWriter.deleteByQuery(String)",1,2,2
"org.apache.solr.handler.dataimport.SolrWriter.deleteDoc(Object)",1,2,2
"org.apache.solr.handler.dataimport.SolrWriter.doDeleteAll()",1,1,2
"org.apache.solr.handler.dataimport.SolrWriter.getDocCount()",2,2,2
"org.apache.solr.handler.dataimport.SolrWriter.getResourceAsString(InputStream)",1,2,3
"org.apache.solr.handler.dataimport.SolrWriter.init(Context)",1,1,1
"org.apache.solr.handler.dataimport.SolrWriter.rollback()",1,2,2
"org.apache.solr.handler.dataimport.SolrWriter.upload(SolrInputDocument)",1,2,2
"org.apache.solr.handler.dataimport.SortedMapBackedCache.add(Map<String, Object>)",4,5,7
"org.apache.solr.handler.dataimport.SortedMapBackedCache.checkOpen(boolean)",3,1,5
"org.apache.solr.handler.dataimport.SortedMapBackedCache.checkReadOnly()",2,1,2
"org.apache.solr.handler.dataimport.SortedMapBackedCache.close()",1,1,1
"org.apache.solr.handler.dataimport.SortedMapBackedCache.delete(Object)",1,1,1
"org.apache.solr.handler.dataimport.SortedMapBackedCache.deleteAll()",1,1,1
"org.apache.solr.handler.dataimport.SortedMapBackedCache.deleteAll(boolean)",1,3,3
"org.apache.solr.handler.dataimport.SortedMapBackedCache.destroy()",1,1,1
"org.apache.solr.handler.dataimport.SortedMapBackedCache.flush()",1,1,1
"org.apache.solr.handler.dataimport.SortedMapBackedCache.iterator()",9,7,9
"org.apache.solr.handler.dataimport.SortedMapBackedCache.iterator(Object)",2,2,2
"org.apache.solr.handler.dataimport.SortedMapBackedCache.open(Context)",1,1,4
"org.apache.solr.handler.dataimport.SqlEntityProcessor.getDeltaImportQuery(String)",1,7,7
"org.apache.solr.handler.dataimport.SqlEntityProcessor.getQuery()",4,2,4
"org.apache.solr.handler.dataimport.SqlEntityProcessor.init(Context)",1,1,1
"org.apache.solr.handler.dataimport.SqlEntityProcessor.initQuery(String)",1,2,3
"org.apache.solr.handler.dataimport.SqlEntityProcessor.nextDeletedRowKey()",3,2,3
"org.apache.solr.handler.dataimport.SqlEntityProcessor.nextModifiedParentRowKey()",3,2,3
"org.apache.solr.handler.dataimport.SqlEntityProcessor.nextModifiedRowKey()",3,2,3
"org.apache.solr.handler.dataimport.SqlEntityProcessor.nextRow()",1,2,2
"org.apache.solr.handler.dataimport.TemplateString.TemplateString()",1,1,1
"org.apache.solr.handler.dataimport.TemplateString.TemplateString(String)",1,2,2
"org.apache.solr.handler.dataimport.TemplateString.fillTokens(VariableResolver)",1,5,5
"org.apache.solr.handler.dataimport.TemplateString.getObjectAsString(Object)",2,2,2
"org.apache.solr.handler.dataimport.TemplateString.getVariables(String)",1,1,1
"org.apache.solr.handler.dataimport.TemplateString.replaceTokens(String,VariableResolver)",2,2,3
"org.apache.solr.handler.dataimport.TemplateTransformer.getVars(String)",1,2,2
"org.apache.solr.handler.dataimport.TemplateTransformer.transformRow(Map<String, Object>,Context)",4,7,9
"org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.DoubleTransformer.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.UppercaseTransformer.transformRow(Map<String, Object>,Context)",1,3,3
"org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.doWhereTest(String,Context,MockDataSource,Map)",7,4,7
"org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.withKeyAndLookup()",1,1,1
"org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.withWhereClause()",1,1,1
"org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.withoutWhereClause()",5,3,5
"org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.withoutWhereClauseWithMultiRowTransformer()",5,3,5
"org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.withoutWhereClauseWithTransformers()",5,3,5
"org.apache.solr.handler.dataimport.TestClobTransformer.simple()",2,1,2
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.SolrInstance.SolrInstance(String,Integer)",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.SolrInstance.getConfDir()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.SolrInstance.getDataDir()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.SolrInstance.getHomeDir()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.SolrInstance.getSchemaFile()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.SolrInstance.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.SolrInstance.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.SolrInstance.tearDown()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.createJetty(SolrInstance)",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.tearDown()",1,1,1
"org.apache.solr.handler.dataimport.TestContentStreamDataSource.testSimple()",1,1,1
"org.apache.solr.handler.dataimport.TestContextImpl.testCoreScope()",1,1,1
"org.apache.solr.handler.dataimport.TestContextImpl.testDocumentScope()",1,1,1
"org.apache.solr.handler.dataimport.TestContextImpl.testEntityScope()",1,1,1
"org.apache.solr.handler.dataimport.TestContextImpl.testGlobalScope()",1,1,1
"org.apache.solr.handler.dataimport.TestDataConfig.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestDataConfig.testBasic()",1,1,1
"org.apache.solr.handler.dataimport.TestDataConfig.testDataConfigWithDataSource()",1,1,1
"org.apache.solr.handler.dataimport.TestDateFormatTransformer.testTransformRow_MultipleRows()",1,1,1
"org.apache.solr.handler.dataimport.TestDateFormatTransformer.testTransformRow_SingleRow()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.SolrWriterImpl.SolrWriterImpl()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.SolrWriterImpl.close()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.SolrWriterImpl.commit(boolean)",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.SolrWriterImpl.doDeleteAll()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.SolrWriterImpl.upload(SolrInputDocument)",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.loadClass()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.singleEntityMultipleRows()",1,3,3
"org.apache.solr.handler.dataimport.TestDocBuilder.singleEntityNoRows()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.singleEntityOneRow()",1,3,3
"org.apache.solr.handler.dataimport.TestDocBuilder.tearDown()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.testDeltaImportNoRows_MustNotCommit()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder.testImportCommand()",1,3,3
"org.apache.solr.handler.dataimport.TestDocBuilder2.AddDynamicFieldTransformer.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.EndEventListener.onEvent(Context)",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.MockTransformer.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.StartEventListener.onEvent(Context)",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testContext()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testDeleteDocs()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testDynamicFields()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testFileListEntityProcessor_lastIndexTime()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testRequestParamsAsFieldName()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testRequestParamsAsVariable()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testSingleEntity()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testSingleEntity_CaseInsensitive()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testSkipDoc()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testSkipRow()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilder2.testStopTransform()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.DemoEvaluator.evaluate(String,Context)",1,2,2
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.DemoProcessor.init(Context)",2,2,3
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.FailingProcessor.init(Context)",2,2,3
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.FailingTransformer.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.getDetails4Worker(String)",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.setUp()",1,2,2
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.tearDown()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.testContinue()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.testContinueThreaded()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.testEvaluator()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.testFailingTransformerContinueThreaded()",1,1,1
"org.apache.solr.handler.dataimport.TestDocBuilderThreaded.testProcessorThreaded2Entities()",1,1,1
"org.apache.solr.handler.dataimport.TestEntityProcessorBase.T1.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestEntityProcessorBase.T2.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestEntityProcessorBase.T3.transformRow(Map<String, Object>)",1,1,1
"org.apache.solr.handler.dataimport.TestEntityProcessorBase.multiTransformer()",1,1,1
"org.apache.solr.handler.dataimport.TestEphemeralCache.assertFullImport(String)",1,1,1
"org.apache.solr.handler.dataimport.TestEphemeralCache.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestEphemeralCache.getDataConfigDotXml(int)",1,1,2
"org.apache.solr.handler.dataimport.TestEphemeralCache.reset()",1,1,1
"org.apache.solr.handler.dataimport.TestEphemeralCache.setupMockData()",1,1,1
"org.apache.solr.handler.dataimport.TestEphemeralCache.testMultiThreaded()",1,1,1
"org.apache.solr.handler.dataimport.TestEphemeralCache.testSingleThreaded()",1,1,1
"org.apache.solr.handler.dataimport.TestEphemeralCache.testWithThreadedParamEqualOne()",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.ExceptionTransformer.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.StringDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.StringDataSource.getData(String)",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.StringDataSource.init(Context,Properties)",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.testAbortOnError()",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.testMalformedNonStreamingXml()",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.testMalformedStreamingXml()",1,1,1
"org.apache.solr.handler.dataimport.TestErrorHandling.testTransformerErrorContinue()",1,1,1
"org.apache.solr.handler.dataimport.TestEvaluatorBag.parseParams()",1,1,1
"org.apache.solr.handler.dataimport.TestEvaluatorBag.runTests(Map<String, String>,Evaluator)",1,2,2
"org.apache.solr.handler.dataimport.TestEvaluatorBag.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestEvaluatorBag.testEscapeSolrQueryFunction()",1,1,1
"org.apache.solr.handler.dataimport.TestEvaluatorBag.testGetDateFormatEvaluator()",1,1,1
"org.apache.solr.handler.dataimport.TestEvaluatorBag.testGetSqlEscapingEvaluator()",1,1,1
"org.apache.solr.handler.dataimport.TestEvaluatorBag.testGetUrlEvaluator()",1,1,1
"org.apache.solr.handler.dataimport.TestFieldReader.simple()",1,1,1
"org.apache.solr.handler.dataimport.TestFileListEntityProcessor.getFiles(VariableResolverImpl,Map)",3,2,3
"org.apache.solr.handler.dataimport.TestFileListEntityProcessor.testBiggerSmallerFiles()",1,1,4
"org.apache.solr.handler.dataimport.TestFileListEntityProcessor.testNTOT()",1,1,1
"org.apache.solr.handler.dataimport.TestFileListEntityProcessor.testRECURSION()",1,1,1
"org.apache.solr.handler.dataimport.TestFileListEntityProcessor.testSimple()",3,2,3
"org.apache.solr.handler.dataimport.TestJdbcDataSource.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestJdbcDataSource.tearDown()",1,2,2
"org.apache.solr.handler.dataimport.TestJdbcDataSource.testBasic()",1,2,2
"org.apache.solr.handler.dataimport.TestJdbcDataSource.testRetrieveFromDriverManager()",1,1,1
"org.apache.solr.handler.dataimport.TestJdbcDataSource.testRetrieveFromJndi()",1,1,1
"org.apache.solr.handler.dataimport.TestJdbcDataSource.testRetrieveFromJndiWithCredentials()",1,1,1
"org.apache.solr.handler.dataimport.TestLineEntityProcessor.createField(String,String,String,String,String,String)",1,1,1
"org.apache.solr.handler.dataimport.TestLineEntityProcessor.getDataSource(String)",1,1,1
"org.apache.solr.handler.dataimport.TestLineEntityProcessor.testNo_xsd_files()",3,2,3
"org.apache.solr.handler.dataimport.TestLineEntityProcessor.testOnly_xml_files()",3,2,3
"org.apache.solr.handler.dataimport.TestLineEntityProcessor.testOnly_xml_files_no_xsd()",3,2,3
"org.apache.solr.handler.dataimport.TestLineEntityProcessor.testSimple()",3,4,5
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.SolrWriterImpl.SolrWriterImpl()",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.SolrWriterImpl.commit(boolean)",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.SolrWriterImpl.doDeleteAll()",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.SolrWriterImpl.upload(SolrInputDocument)",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.getConfigFromMap(Map<String, String>)",1,2,2
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.testConnection()",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.testExclude()",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.testFetchTimeSince()",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.testInclude()",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.testIncludeAndExclude()",1,1,1
"org.apache.solr.handler.dataimport.TestMailEntityProcessor.testRecursion()",1,1,1
"org.apache.solr.handler.dataimport.TestMultiThreadedFileReader.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestMultiThreadedFileReader.getConf()",1,1,1
"org.apache.solr.handler.dataimport.TestMultiThreadedFileReader.testMultiThreadedFileReader()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_InvalidInput1_Number()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_InvalidInput1_Percent()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_InvalidInput2_Currency()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_InvalidInput2_Number()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_InvalidInput3_Currency()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_InvalidInput3_Number()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_MalformedInput_Number()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_MultipleNumbers()",1,1,1
"org.apache.solr.handler.dataimport.TestNumberFormatTransformer.testTransformRow_SingleNumber()",1,1,1
"org.apache.solr.handler.dataimport.TestPlainTextEntityProcessor.DS.close()",1,1,1
"org.apache.solr.handler.dataimport.TestPlainTextEntityProcessor.DS.getData(String)",1,1,1
"org.apache.solr.handler.dataimport.TestPlainTextEntityProcessor.DS.init(Context,Properties)",1,1,1
"org.apache.solr.handler.dataimport.TestPlainTextEntityProcessor.testSimple()",1,1,1
"org.apache.solr.handler.dataimport.TestRegexTransformer.getFields()",1,1,1
"org.apache.solr.handler.dataimport.TestRegexTransformer.testCommaSeparated()",1,1,1
"org.apache.solr.handler.dataimport.TestRegexTransformer.testGroupNames()",1,1,1
"org.apache.solr.handler.dataimport.TestRegexTransformer.testMileage()",1,1,1
"org.apache.solr.handler.dataimport.TestRegexTransformer.testMultiValuedRegex()",1,1,1
"org.apache.solr.handler.dataimport.TestRegexTransformer.testReplaceWith()",1,1,1
"org.apache.solr.handler.dataimport.TestScriptTransformer.getContext(String,String)",1,1,1
"org.apache.solr.handler.dataimport.TestScriptTransformer.testBasic()",1,3,3
"org.apache.solr.handler.dataimport.TestScriptTransformer.testCheckScript()",1,3,3
"org.apache.solr.handler.dataimport.TestScriptTransformer.testOneparam()",1,3,3
"org.apache.solr.handler.dataimport.TestScriptTransformer.testReadScriptTag()",1,3,3
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.SolrInstance.getDataDir()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.SolrInstance.getHomeDir()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.SolrInstance.getSchemaFile()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.SolrInstance.getSolrConfigFile()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.SolrInstance.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.SolrInstance.tearDown()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.addDocumentsToSolr(List<Map<String, Object>>)",1,3,3
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.createJetty(SolrInstance)",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.generateDIHConfig(String,int)",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.generateSolrDocuments(int)",1,2,2
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.getDihConfigTagsInnerEntity(int)",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.getSourceUrl(int)",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.tearDown()",1,2,2
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.testFullImport()",1,2,2
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.testFullImportBadConfig()",1,2,2
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.testFullImportFieldsParam()",1,2,3
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.testFullImportFqParam()",1,2,2
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.testFullImportInnerEntity()",1,2,2
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.testFullImportMultiThreaded()",1,2,2
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorEndToEnd.testFullImportWrongSolrUrl()",1,3,3
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorUnit.assertExpectedDocs(List<Doc>,SolrEntityProcessor)",1,2,2
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorUnit.generateUniqueDocs(int)",1,3,3
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorUnit.testMultiThread()",3,5,6
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorUnit.testMultiValuedFields()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorUnit.testNumDocsGreaterThanRows()",1,1,1
"org.apache.solr.handler.dataimport.TestSolrEntityProcessorUnit.testQuery()",1,1,1
"org.apache.solr.handler.dataimport.TestSortedMapBackedCache.testCacheReopensWithUpdate()",3,4,6
"org.apache.solr.handler.dataimport.TestSortedMapBackedCache.testCacheWithKeyLookup()",1,2,3
"org.apache.solr.handler.dataimport.TestSortedMapBackedCache.testCacheWithOrderedLookup()",1,2,3
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.T.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.T2.transformRow(Map<String, Object>,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.T3.transformRow(Map<String, Object>)",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.getDs(List<Map<String, Object>>)",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.getRows(int)",1,2,2
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.testSingleBatch()",3,2,3
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.testTranformer()",3,2,3
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.testTranformerList()",3,2,3
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor.testTranformerWithReflection()",3,2,3
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.DateFormatValidatingEvaluator.evaluate(String,Context)",1,3,3
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.testCompositePk_DeltaImport()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.testCompositePk_DeltaImport_DeletedPkQuery()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.testCompositePk_DeltaImport_DeltaImportQuery()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.testCompositePk_FullImport()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.testCompositePk_FullImportNoCommit()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.testCompositePk_FullImport_MT()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessor2.testLastIndexTime()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.add1document()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testCompositePk_DeltaImport_add()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testCompositePk_DeltaImport_add_delete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testCompositePk_DeltaImport_delete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testCompositePk_DeltaImport_empty()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testCompositePk_DeltaImport_nodelta()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testCompositePk_DeltaImport_replace_delete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testCompositePk_DeltaImport_replace_nodelete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testCompositePk_FullImport()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta.testNonWritablePersistFile()",1,3,4
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.add1document()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.testCompositePk_DeltaImport_add()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.testCompositePk_DeltaImport_add_delete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.testCompositePk_DeltaImport_delete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.testCompositePk_DeltaImport_empty()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.testCompositePk_DeltaImport_nodelta()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.testCompositePk_DeltaImport_replace_delete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.testCompositePk_DeltaImport_replace_nodelete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta2.testCompositePk_FullImport()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.add1document()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.testCompositePk_DeltaImport_add()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.testCompositePk_DeltaImport_delete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.testCompositePk_DeltaImport_empty()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.testCompositePk_DeltaImport_nodelta()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.testCompositePk_DeltaImport_replace_nodelete()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDelta3.testCompositePk_FullImport()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDeltaPrefixedPk.add1document()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDeltaPrefixedPk.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDeltaPrefixedPk.setUp()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDeltaPrefixedPk.testDeltaImport_addResolvesUnprefixedPk()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDeltaPrefixedPk.testDeltaImport_deleteResolvesUnprefixedPk()",1,1,1
"org.apache.solr.handler.dataimport.TestSqlEntityProcessorDeltaPrefixedPk.testDeltaImport_replace_resolvesUnprefixedPk()",1,1,1
"org.apache.solr.handler.dataimport.TestTemplateString.testSimple()",1,1,1
"org.apache.solr.handler.dataimport.TestTemplateTransformer.testTransformRow()",1,1,1
"org.apache.solr.handler.dataimport.TestThreaded.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestThreaded.getCachedConfig(boolean,boolean,int)",1,1,4
"org.apache.solr.handler.dataimport.TestThreaded.setupData()",1,3,3
"org.apache.solr.handler.dataimport.TestThreaded.shuffled(List<T>)",1,1,1
"org.apache.solr.handler.dataimport.TestThreaded.testCachedSingleThread_FullImport()",1,1,1
"org.apache.solr.handler.dataimport.TestThreaded.testCachedThread_FullImport()",1,1,1
"org.apache.solr.handler.dataimport.TestThreaded.testCachedThreadless_FullImport()",1,1,1
"org.apache.solr.handler.dataimport.TestThreaded.verify()",1,1,1
"org.apache.solr.handler.dataimport.TestTikaEntityProcessor.beforeClass()",1,1,1
"org.apache.solr.handler.dataimport.TestTikaEntityProcessor.testIndexingWithTikaEntityProcessor()",1,1,1
"org.apache.solr.handler.dataimport.TestTikaEntityProcessor.testIndexingWithTikaEntityProcessorThreaded()",1,1,1
"org.apache.solr.handler.dataimport.TestURLDataSource.substitutionsOnBaseUrl()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.E.evaluate(String,Context)",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.dateNamespaceWithExpr()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.dateNamespaceWithValue()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.resetEvaluatorBagDateMathParser()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.test3LevelNestedNamespace()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.testDefaultNamespace()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.testDefaultNamespace1()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.testDefaults()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.testFunctionNamespace1()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.testNestedNamespace()",1,1,1
"org.apache.solr.handler.dataimport.TestVariableResolver.testSimpleNamespace()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.getDataSource(String)",1,1,1
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.streamStopsAfterInterrupt()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.streamWritesMessageAfterBlockedAttempt()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.testMultiValued()",3,2,3
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.testMultiValuedFlatten()",3,2,3
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.withDefaultSolrAndXsl()",3,2,3
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.withFieldsAndXpath()",3,2,3
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.withFieldsAndXpathStream()",4,8,13
"org.apache.solr.handler.dataimport.TestXPathEntityProcessor.withFieldsAndXpathStreamContinuesOnTimeout()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAnother()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAny_decendent_from_root()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAny_decendent_of_a_child1()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAny_decendent_of_a_child2()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAttrInRoot()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAttribValWithSlash()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAttributes()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAttributes2Level()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAttributes2LevelHetero()",2,3,4
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testAttributes2LevelMissingAttrVal()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testBasic()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testElems2LevelEmpty()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testElems2LevelMissing()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testElems2LevelWithAttrib()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testElems2LevelWithAttribMultiple()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testElems2LevelWithAttribVal()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testError()",1,1,2
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testMixedContent()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testMixedContentFlattened()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testPutNullTest()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testSameForEachAndXpath()",1,1,1
"org.apache.solr.handler.dataimport.TestXPathRecordReader.testUnsupported_Xpaths()",1,1,3
"org.apache.solr.handler.dataimport.ThreadedContext.ThreadedContext(EntityRunner,DocBuilder,VariableResolverImpl)",1,1,1
"org.apache.solr.handler.dataimport.ThreadedContext.checkLimited()",2,1,2
"org.apache.solr.handler.dataimport.ThreadedContext.currentProcess()",1,1,1
"org.apache.solr.handler.dataimport.ThreadedContext.getDataSource()",1,1,1
"org.apache.solr.handler.dataimport.ThreadedContext.getEntityProcessor()",1,1,1
"org.apache.solr.handler.dataimport.ThreadedContext.getParentContext()",1,1,1
"org.apache.solr.handler.dataimport.ThreadedContext.getResolvedEntityAttribute(String)",1,2,2
"org.apache.solr.handler.dataimport.ThreadedContext.getVariableResolver()",1,1,1
"org.apache.solr.handler.dataimport.ThreadedContext.replaceTokens(String)",1,1,1
"org.apache.solr.handler.dataimport.ThreadedContext.resolve(String)",1,1,1
"org.apache.solr.handler.dataimport.ThreadedContext.setSessionAttribute(String,Object,String)",1,1,1
"org.apache.solr.handler.dataimport.ThreadedEntityProcessorWrapper.ThreadedEntityProcessorWrapper(EntityProcessor,DocBuilder,EntityRunner,VariableResolverImpl,Map<Entity, EntityRunner>,int)",1,1,1
"org.apache.solr.handler.dataimport.ThreadedEntityProcessorWrapper.getNumber()",1,1,1
"org.apache.solr.handler.dataimport.ThreadedEntityProcessorWrapper.init(EntityRow)",1,2,2
"org.apache.solr.handler.dataimport.ThreadedEntityProcessorWrapper.threadedInit(Context)",1,2,3
"org.apache.solr.handler.dataimport.TikaEntityProcessor.firstInit(Context)",2,7,10
"org.apache.solr.handler.dataimport.TikaEntityProcessor.getHtmlHandler(Writer)",1,3,5
"org.apache.solr.handler.dataimport.TikaEntityProcessor.getTextContentHandler(Writer)",1,1,1
"org.apache.solr.handler.dataimport.TikaEntityProcessor.getXmlContentHandler(Writer)",1,1,1
"org.apache.solr.handler.dataimport.TikaEntityProcessor.nextRow()",4,10,13
"org.apache.solr.handler.dataimport.URLDataSource.URLDataSource()",1,1,1
"org.apache.solr.handler.dataimport.URLDataSource.close()",1,1,1
"org.apache.solr.handler.dataimport.URLDataSource.getBaseUrl()",1,1,1
"org.apache.solr.handler.dataimport.URLDataSource.getData(String)",1,5,7
"org.apache.solr.handler.dataimport.URLDataSource.getInitPropWithReplacements(String)",2,1,2
"org.apache.solr.handler.dataimport.URLDataSource.init(Context,Properties)",1,6,6
"org.apache.solr.handler.dataimport.VariableResolverImpl.VariableResolverImpl()",1,1,1
"org.apache.solr.handler.dataimport.VariableResolverImpl.VariableResolverImpl(Map)",1,1,1
"org.apache.solr.handler.dataimport.VariableResolverImpl.addNamespace(String,Map<String, Object>)",1,6,6
"org.apache.solr.handler.dataimport.VariableResolverImpl.getDefault(String)",1,2,2
"org.apache.solr.handler.dataimport.VariableResolverImpl.mergeAll(String[],int)",2,3,4
"org.apache.solr.handler.dataimport.VariableResolverImpl.removeNamespace(String)",1,2,2
"org.apache.solr.handler.dataimport.VariableResolverImpl.replaceTokens(String)",1,1,1
"org.apache.solr.handler.dataimport.VariableResolverImpl.resolve(String)",7,7,9
"org.apache.solr.handler.dataimport.XPathEntityProcessor.SimpleCharArrayReader.getReader()",1,1,1
"org.apache.solr.handler.dataimport.XPathEntityProcessor.addCommonFields(Map<String, Object>)",1,5,5
"org.apache.solr.handler.dataimport.XPathEntityProcessor.addNamespace()",2,5,6
"org.apache.solr.handler.dataimport.XPathEntityProcessor.closeIt(Reader)",1,1,2
"org.apache.solr.handler.dataimport.XPathEntityProcessor.fetchNextRow()",5,7,8
"org.apache.solr.handler.dataimport.XPathEntityProcessor.getRowIterator(Reader,String)",6,14,17
"org.apache.solr.handler.dataimport.XPathEntityProcessor.init(Context)",1,2,2
"org.apache.solr.handler.dataimport.XPathEntityProcessor.initQuery(String)",6,16,16
"org.apache.solr.handler.dataimport.XPathEntityProcessor.initXpathReader()",6,14,20
"org.apache.solr.handler.dataimport.XPathEntityProcessor.nextRow()",5,4,6
"org.apache.solr.handler.dataimport.XPathEntityProcessor.postTransform(Map<String, Object>)",1,1,1
"org.apache.solr.handler.dataimport.XPathEntityProcessor.readRow(Map<String, Object>,String)",2,6,6
"org.apache.solr.handler.dataimport.XPathEntityProcessor.readUsefulVars(Map<String, Object>)",1,8,8
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.Node(String,Node)",1,1,1
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.Node(String,String,boolean)",1,1,1
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.build(List<String>,String,boolean,boolean,int)",1,6,10
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.buildOptimise(Node)",1,3,4
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.checkForAttributes(XMLStreamReader,List<Entry<String, String>>)",4,3,5
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.getDeepCopy(Map<String, Object>)",1,3,3
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.getMatchingNode(XMLStreamReader,List<Node>)",6,3,6
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.getOrAddNode(String,List<Node>)",6,4,7
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.handleStartElement(XMLStreamReader,Set<Node>,Handler,Map<String, Object>,Stack<Set<String>>,boolean)",5,10,11
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.parse(XMLStreamReader,Handler,Map<String, Object>,Stack<Set<String>>,boolean)",7,24,32
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.putNulls(Map<String, Object>)",1,7,8
"org.apache.solr.handler.dataimport.XPathRecordReader.Node.putText(Map<String, Object>,String,String,boolean)",1,3,3
"org.apache.solr.handler.dataimport.XPathRecordReader.XPathRecordReader(String)",4,2,4
"org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean)",1,1,1
"org.apache.solr.handler.dataimport.XPathRecordReader.addField(String,String,boolean,int)",1,1,1
"org.apache.solr.handler.dataimport.XPathRecordReader.addField0(String,String,boolean,boolean,int)",2,2,3
"org.apache.solr.handler.dataimport.XPathRecordReader.getAllRecords(Reader)",1,1,1
"org.apache.solr.handler.dataimport.XPathRecordReader.splitEscapeQuote(String)",4,4,6
"org.apache.solr.handler.dataimport.XPathRecordReader.streamRecords(Reader,Handler)",1,1,2
"org.apache.solr.handler.extraction.ExtractingDocumentLoader.ExtractingDocumentLoader(SolrQueryRequest,UpdateRequestProcessor,TikaConfig,SolrContentHandlerFactory)",1,1,2
"org.apache.solr.handler.extraction.ExtractingDocumentLoader.addDoc(SolrContentHandler)",1,1,1
"org.apache.solr.handler.extraction.ExtractingDocumentLoader.doAdd(SolrContentHandler,AddUpdateCommand)",1,1,1
"org.apache.solr.handler.extraction.ExtractingDocumentLoader.load(SolrQueryRequest,SolrQueryResponse,ContentStream)",3,15,16
"org.apache.solr.handler.extraction.ExtractingRequestHandler.createFactory()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandler.getDefaultConfig(ClassLoader)",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandler.getDescription()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandler.getSource()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandler.getSourceId()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandler.getVersion()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandler.inform(SolrCore)",4,8,11
"org.apache.solr.handler.extraction.ExtractingRequestHandler.init(NamedList)",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandler.newLoader(SolrQueryRequest,UpdateRequestProcessor)",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.beforeClass()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.loadLocal(String,String...)",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.setUp()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testArabicPDF()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testCommitWithin()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testDefaultField()",1,1,2
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testExtractOnly()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testExtraction()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testLiterals()",1,1,2
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testPlainTextSpecifyingMimeType()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testPlainTextSpecifyingResourceName()",1,1,1
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testTikaExceptionHandling()",1,2,3
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testWrongStreamType()",1,1,3
"org.apache.solr.handler.extraction.ExtractingRequestHandlerTest.testXPath()",1,1,1
"org.apache.solr.handler.extraction.SolrContentHandler.SolrContentHandler(Metadata,SolrParams,IndexSchema)",1,1,1
"org.apache.solr.handler.extraction.SolrContentHandler.SolrContentHandler(Metadata,SolrParams,IndexSchema,Collection<String>)",1,3,4
"org.apache.solr.handler.extraction.SolrContentHandler.addCapturedContent()",1,3,3
"org.apache.solr.handler.extraction.SolrContentHandler.addContent()",1,1,1
"org.apache.solr.handler.extraction.SolrContentHandler.addField(String,String,String[])",2,19,22
"org.apache.solr.handler.extraction.SolrContentHandler.addLiterals()",3,2,3
"org.apache.solr.handler.extraction.SolrContentHandler.addMetadata()",1,2,2
"org.apache.solr.handler.extraction.SolrContentHandler.characters(char[],int,int)",1,1,1
"org.apache.solr.handler.extraction.SolrContentHandler.endElement(String,String,String)",1,2,2
"org.apache.solr.handler.extraction.SolrContentHandler.findMappedName(String)",1,1,1
"org.apache.solr.handler.extraction.SolrContentHandler.getBoost(String)",1,1,1
"org.apache.solr.handler.extraction.SolrContentHandler.newDocument()",1,2,2
"org.apache.solr.handler.extraction.SolrContentHandler.startDocument()",1,2,2
"org.apache.solr.handler.extraction.SolrContentHandler.startElement(String,String,String,Attributes)",1,5,5
"org.apache.solr.handler.extraction.SolrContentHandler.transformValue(String,SchemaField)",1,3,4
"org.apache.solr.handler.extraction.SolrContentHandlerFactory.SolrContentHandlerFactory(Collection<String>)",1,1,1
"org.apache.solr.handler.extraction.SolrContentHandlerFactory.createSolrContentHandler(Metadata,SolrParams,IndexSchema)",1,1,1
"org.apache.solr.highlight.BreakIteratorBoundaryScanner.get(String,SolrParams)",6,9,13
"org.apache.solr.highlight.BreakIteratorBoundaryScanner.getDescription()",1,1,1
"org.apache.solr.highlight.BreakIteratorBoundaryScanner.getSource()",1,1,1
"org.apache.solr.highlight.BreakIteratorBoundaryScanner.getSourceId()",1,1,1
"org.apache.solr.highlight.BreakIteratorBoundaryScanner.getVersion()",1,1,1
"org.apache.solr.highlight.DefaultEncoder.getDescription()",1,1,1
"org.apache.solr.highlight.DefaultEncoder.getEncoder(String,SolrParams)",1,1,1
"org.apache.solr.highlight.DefaultEncoder.getSource()",1,1,1
"org.apache.solr.highlight.DefaultEncoder.getSourceId()",1,1,1
"org.apache.solr.highlight.DefaultEncoder.getVersion()",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.DefaultSolrHighlighter()",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.DefaultSolrHighlighter(SolrCore)",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.alternateField(NamedList,SolrParams,Document,String)",6,7,9
"org.apache.solr.highlight.DefaultSolrHighlighter.createAnalyzerTStream(IndexSchema,String,String)",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.doHighlighting(DocList,Query,SolrQueryRequest,String[])",2,6,8
"org.apache.solr.highlight.DefaultSolrHighlighter.doHighlightingByFastVectorHighlighter(FastVectorHighlighter,FieldQuery,SolrQueryRequest,NamedList,int,Document,String)",1,2,3
"org.apache.solr.highlight.DefaultSolrHighlighter.doHighlightingByHighlighter(Query,SolrQueryRequest,NamedList,int,Document,String)",6,14,21
"org.apache.solr.highlight.DefaultSolrHighlighter.getBoundaryScanner(String,SolrParams)",2,1,2
"org.apache.solr.highlight.DefaultSolrHighlighter.getEncoder(String,SolrParams)",2,1,2
"org.apache.solr.highlight.DefaultSolrHighlighter.getFormatter(String,SolrParams)",2,1,2
"org.apache.solr.highlight.DefaultSolrHighlighter.getFragListBuilder(String,SolrParams)",2,1,2
"org.apache.solr.highlight.DefaultSolrHighlighter.getFragmenter(String,SolrParams)",2,1,2
"org.apache.solr.highlight.DefaultSolrHighlighter.getFragmentsBuilder(String,SolrParams)",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.getHighlighter(Query,String,SolrQueryRequest)",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.getMaxSnippets(String,SolrParams)",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.getPhraseHighlighter(Query,String,SolrQueryRequest,CachingTokenFilter)",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.getQueryScorer(Query,String,SolrQueryRequest)",2,2,2
"org.apache.solr.highlight.DefaultSolrHighlighter.getSolrFragmentsBuilder(String,SolrParams)",2,1,2
"org.apache.solr.highlight.DefaultSolrHighlighter.getSpanQueryScorer(Query,String,TokenStream,SolrQueryRequest)",1,1,3
"org.apache.solr.highlight.DefaultSolrHighlighter.init(PluginInfo)",1,1,7
"org.apache.solr.highlight.DefaultSolrHighlighter.initalize(SolrConfig)",2,1,2
"org.apache.solr.highlight.DefaultSolrHighlighter.isMergeContiguousFragments(String,SolrParams)",1,1,1
"org.apache.solr.highlight.DefaultSolrHighlighter.useFastVectorHighlighter(SolrParams,IndexSchema,String)",1,4,4
"org.apache.solr.highlight.DummyHighlighter.doHighlighting(DocList,Query,SolrQueryRequest,String[])",1,1,1
"org.apache.solr.highlight.DummyHighlighter.initalize(SolrConfig)",1,1,1
"org.apache.solr.highlight.FastVectorHighlighterTest.beforeClass()",1,1,1
"org.apache.solr.highlight.FastVectorHighlighterTest.test()",1,1,1
"org.apache.solr.highlight.FastVectorHighlighterTest.testConfig()",1,1,1
"org.apache.solr.highlight.GapFragmenter.getDescription()",1,1,1
"org.apache.solr.highlight.GapFragmenter.getFragmenter(String,SolrParams)",1,1,2
"org.apache.solr.highlight.GapFragmenter.getSource()",1,1,1
"org.apache.solr.highlight.GapFragmenter.getSourceId()",1,1,1
"org.apache.solr.highlight.GapFragmenter.getVersion()",1,1,1
"org.apache.solr.highlight.HighlighterConfigTest.getSchemaFile()",1,1,1
"org.apache.solr.highlight.HighlighterConfigTest.getSolrConfigFile()",1,1,1
"org.apache.solr.highlight.HighlighterConfigTest.setUp()",1,1,1
"org.apache.solr.highlight.HighlighterConfigTest.tearDown()",1,1,1
"org.apache.solr.highlight.HighlighterConfigTest.testConfig()",1,1,1
"org.apache.solr.highlight.HighlighterTest.beforeClass()",1,1,1
"org.apache.solr.highlight.HighlighterTest.tearDown()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testAlternateSummary()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testConfig()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testCustomSimpleFormatterHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testDefaultFieldHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testDefaultFieldNonPrefixWildcardHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testDefaultFieldPrefixWildcardHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testDisMaxHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testFieldMatch()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testGetHighlightFields()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testHighlightDisabled()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testHlQParameter()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testLongFragment()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testMaxChars()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testMergeContiguous()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testMultiValueAnalysisHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testMultiValueBestFragmentHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testPhraseHighlighter()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testRegexFragmenter()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testSubwordWildcardHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testSubwordWildcardHighlightWithTermOffsets()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testSubwordWildcardHighlightWithTermOffsets2()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testTermOffsetsTokenStream()",1,3,3
"org.apache.solr.highlight.HighlighterTest.testTermVecHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testTermVecMultiValuedHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testTermVecMultiValuedHighlight2()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testTwoFieldHighlight()",1,1,1
"org.apache.solr.highlight.HighlighterTest.testVariableFragsize()",1,1,1
"org.apache.solr.highlight.HighlightingPluginBase.getCategory()",1,1,1
"org.apache.solr.highlight.HighlightingPluginBase.getDocs()",1,1,1
"org.apache.solr.highlight.HighlightingPluginBase.getName()",1,1,1
"org.apache.solr.highlight.HighlightingPluginBase.getStatistics()",1,1,1
"org.apache.solr.highlight.HighlightingPluginBase.init(NamedList)",1,3,4
"org.apache.solr.highlight.HtmlEncoder.getDescription()",1,1,1
"org.apache.solr.highlight.HtmlEncoder.getEncoder(String,SolrParams)",1,1,1
"org.apache.solr.highlight.HtmlEncoder.getSource()",1,1,1
"org.apache.solr.highlight.HtmlEncoder.getSourceId()",1,1,1
"org.apache.solr.highlight.HtmlEncoder.getVersion()",1,1,1
"org.apache.solr.highlight.HtmlFormatter.getDescription()",1,1,1
"org.apache.solr.highlight.HtmlFormatter.getFormatter(String,SolrParams)",1,1,1
"org.apache.solr.highlight.HtmlFormatter.getSource()",1,1,1
"org.apache.solr.highlight.HtmlFormatter.getSourceId()",1,1,1
"org.apache.solr.highlight.HtmlFormatter.getVersion()",1,1,1
"org.apache.solr.highlight.LuceneGapFragmenter.LuceneGapFragmenter()",1,1,1
"org.apache.solr.highlight.LuceneGapFragmenter.LuceneGapFragmenter(int)",1,1,1
"org.apache.solr.highlight.LuceneGapFragmenter.isNewFragment()",1,2,3
"org.apache.solr.highlight.LuceneGapFragmenter.start(String,TokenStream)",1,1,1
"org.apache.solr.highlight.LuceneRegexFragmenter.LuceneRegexFragmenter()",1,1,1
"org.apache.solr.highlight.LuceneRegexFragmenter.LuceneRegexFragmenter(int)",1,1,1
"org.apache.solr.highlight.LuceneRegexFragmenter.LuceneRegexFragmenter(int,int,float,int)",1,1,1
"org.apache.solr.highlight.LuceneRegexFragmenter.LuceneRegexFragmenter(int,int,float,int,Pattern)",1,1,1
"org.apache.solr.highlight.LuceneRegexFragmenter.addHotSpots(String)",1,4,4
"org.apache.solr.highlight.LuceneRegexFragmenter.isNewFragment()",1,4,11
"org.apache.solr.highlight.LuceneRegexFragmenter.start(String,TokenStream)",1,1,1
"org.apache.solr.highlight.RegexFragmenter.getDescription()",1,1,1
"org.apache.solr.highlight.RegexFragmenter.getFragmenter(String,SolrParams)",2,2,3
"org.apache.solr.highlight.RegexFragmenter.getSource()",1,1,1
"org.apache.solr.highlight.RegexFragmenter.getSourceId()",1,1,1
"org.apache.solr.highlight.RegexFragmenter.getVersion()",1,1,1
"org.apache.solr.highlight.RegexFragmenter.init(NamedList)",1,2,2
"org.apache.solr.highlight.ScoreOrderFragmentsBuilder.getDescription()",1,1,1
"org.apache.solr.highlight.ScoreOrderFragmentsBuilder.getFragmentsBuilder(SolrParams,String[],String[],BoundaryScanner)",1,1,1
"org.apache.solr.highlight.ScoreOrderFragmentsBuilder.getSource()",1,1,1
"org.apache.solr.highlight.ScoreOrderFragmentsBuilder.getSourceId()",1,1,1
"org.apache.solr.highlight.ScoreOrderFragmentsBuilder.getVersion()",1,1,1
"org.apache.solr.highlight.SimpleBoundaryScanner.get(String,SolrParams)",1,2,2
"org.apache.solr.highlight.SimpleBoundaryScanner.getDescription()",1,1,1
"org.apache.solr.highlight.SimpleBoundaryScanner.getSource()",1,1,1
"org.apache.solr.highlight.SimpleBoundaryScanner.getSourceId()",1,1,1
"org.apache.solr.highlight.SimpleBoundaryScanner.getVersion()",1,1,1
"org.apache.solr.highlight.SimpleFragListBuilder.getDescription()",1,1,1
"org.apache.solr.highlight.SimpleFragListBuilder.getFragListBuilder(SolrParams)",1,1,1
"org.apache.solr.highlight.SimpleFragListBuilder.getSource()",1,1,1
"org.apache.solr.highlight.SimpleFragListBuilder.getSourceId()",1,1,1
"org.apache.solr.highlight.SimpleFragListBuilder.getVersion()",1,1,1
"org.apache.solr.highlight.SimpleFragmentsBuilder.getDescription()",1,1,1
"org.apache.solr.highlight.SimpleFragmentsBuilder.getFragmentsBuilder(SolrParams,String[],String[],BoundaryScanner)",1,1,1
"org.apache.solr.highlight.SimpleFragmentsBuilder.getSource()",1,1,1
"org.apache.solr.highlight.SimpleFragmentsBuilder.getSourceId()",1,1,1
"org.apache.solr.highlight.SimpleFragmentsBuilder.getVersion()",1,1,1
"org.apache.solr.highlight.SingleFragListBuilder.getDescription()",1,1,1
"org.apache.solr.highlight.SingleFragListBuilder.getFragListBuilder(SolrParams)",1,1,1
"org.apache.solr.highlight.SingleFragListBuilder.getSource()",1,1,1
"org.apache.solr.highlight.SingleFragListBuilder.getSourceId()",1,1,1
"org.apache.solr.highlight.SingleFragListBuilder.getVersion()",1,1,1
"org.apache.solr.highlight.SolrBoundaryScanner.getBoundaryScanner(String,SolrParams)",1,1,1
"org.apache.solr.highlight.SolrFragmentsBuilder.getFragmentsBuilder(SolrParams,BoundaryScanner)",1,1,1
"org.apache.solr.highlight.SolrFragmentsBuilder.getMultiValuedSeparatorChar(SolrParams)",2,1,2
"org.apache.solr.highlight.SolrFragmentsBuilder.getPostTags(SolrParams,String)",1,1,1
"org.apache.solr.highlight.SolrFragmentsBuilder.getPreTags(SolrParams,String)",1,1,1
"org.apache.solr.highlight.SolrFragmentsBuilder.getTags(SolrParams,String,String,String)",1,3,3
"org.apache.solr.highlight.SolrHighlighter.emptyArray(String[])",1,4,4
"org.apache.solr.highlight.SolrHighlighter.getHighlightFields(Query,SolrQueryRequest,String[])",1,7,8
"org.apache.solr.highlight.SolrHighlighter.isHighlightingEnabled(SolrParams)",1,1,1
"org.apache.solr.highlight.TermOffsetsTokenStream.MultiValuedStream.MultiValuedStream(int)",1,1,1
"org.apache.solr.highlight.TermOffsetsTokenStream.MultiValuedStream.incrementToken()",6,4,7
"org.apache.solr.highlight.TermOffsetsTokenStream.TermOffsetsTokenStream(TokenStream)",1,1,1
"org.apache.solr.highlight.TermOffsetsTokenStream.getMultiValuedTokenStream(int)",1,1,1
"org.apache.solr.highlight.TokenOrderingFilter.TokenOrderingFilter(TokenStream,int)",1,1,1
"org.apache.solr.highlight.TokenOrderingFilter.incrementToken()",6,6,7
"org.apache.solr.internal.csv.CSVParser.CSVParser(InputStream)",1,1,1
"org.apache.solr.internal.csv.CSVParser.CSVParser(Reader)",1,1,1
"org.apache.solr.internal.csv.CSVParser.CSVParser(Reader,CSVStrategy)",1,1,1
"org.apache.solr.internal.csv.CSVParser.CSVParser(Reader,char)",1,1,1
"org.apache.solr.internal.csv.CSVParser.CSVParser(Reader,char,char,char)",1,1,1
"org.apache.solr.internal.csv.CSVParser.Token.reset()",1,1,1
"org.apache.solr.internal.csv.CSVParser.encapsulatedTokenLexer(Token,int)",12,14,14
"org.apache.solr.internal.csv.CSVParser.getAllValues()",1,3,3
"org.apache.solr.internal.csv.CSVParser.getLine()",4,5,9
"org.apache.solr.internal.csv.CSVParser.getLineNumber()",1,1,1
"org.apache.solr.internal.csv.CSVParser.getStrategy()",1,1,1
"org.apache.solr.internal.csv.CSVParser.isEndOfFile(int)",1,1,1
"org.apache.solr.internal.csv.CSVParser.isEndOfLine(int)",1,3,3
"org.apache.solr.internal.csv.CSVParser.isWhitespace(int)",1,2,2
"org.apache.solr.internal.csv.CSVParser.nextToken()",1,1,1
"org.apache.solr.internal.csv.CSVParser.nextToken(Token)",4,17,21
"org.apache.solr.internal.csv.CSVParser.nextValue()",2,2,4
"org.apache.solr.internal.csv.CSVParser.readEscape(int)",2,2,7
"org.apache.solr.internal.csv.CSVParser.simpleTokenLexer(Token,int)",5,10,10
"org.apache.solr.internal.csv.CSVParser.unicodeEscapeLexer(int)",3,4,5
"org.apache.solr.internal.csv.CSVPrinter.CSVPrinter(Writer,CSVStrategy)",1,1,2
"org.apache.solr.internal.csv.CSVPrinter.flush()",1,1,1
"org.apache.solr.internal.csv.CSVPrinter.print(String)",1,1,1
"org.apache.solr.internal.csv.CSVPrinter.print(String,boolean)",2,3,3
"org.apache.solr.internal.csv.CSVPrinter.print(char[],int,int,boolean)",2,4,4
"org.apache.solr.internal.csv.CSVPrinter.printAndEncapsulate(char[],int,int)",7,4,21
"org.apache.solr.internal.csv.CSVPrinter.printAndEscape(char[],int,int)",1,5,10
"org.apache.solr.internal.csv.CSVPrinter.printSep()",1,2,2
"org.apache.solr.internal.csv.CSVPrinter.println()",1,1,1
"org.apache.solr.internal.csv.CSVPrinter.println(String[])",1,2,2
"org.apache.solr.internal.csv.CSVPrinter.printlnComment(String)",3,5,9
"org.apache.solr.internal.csv.CSVStrategy.CSVStrategy(char,char,char)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.CSVStrategy(char,char,char,boolean,boolean,boolean)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.CSVStrategy(char,char,char,char,boolean,boolean,boolean,boolean)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.clone()",1,1,2
"org.apache.solr.internal.csv.CSVStrategy.getCommentStart()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.getDelimiter()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.getEncapsulator()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.getEscape()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.getIgnoreEmptyLines()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.getIgnoreLeadingWhitespaces()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.getIgnoreTrailingWhitespaces()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.getPrinterNewline()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.getUnicodeEscapeInterpretation()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.isCommentingDisabled()",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setCommentStart(char)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setDelimiter(char)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setEncapsulator(char)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setEscape(char)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setIgnoreEmptyLines(boolean)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setIgnoreLeadingWhitespaces(boolean)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setIgnoreTrailingWhitespaces(boolean)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setPrinterNewline(String)",1,1,1
"org.apache.solr.internal.csv.CSVStrategy.setUnicodeEscapeInterpretation(boolean)",1,1,1
"org.apache.solr.internal.csv.CSVUtils.CSVUtils()",1,1,1
"org.apache.solr.internal.csv.CSVUtils.parse(String)",2,1,3
"org.apache.solr.internal.csv.CSVUtils.parseLine(String)",3,1,3
"org.apache.solr.internal.csv.CSVUtils.printLine(String[],CSVStrategy)",1,3,5
"org.apache.solr.internal.csv.CharBuffer.CharBuffer()",1,1,1
"org.apache.solr.internal.csv.CharBuffer.CharBuffer(int)",2,1,2
"org.apache.solr.internal.csv.CharBuffer.append(CharBuffer)",2,1,2
"org.apache.solr.internal.csv.CharBuffer.append(String)",2,1,2
"org.apache.solr.internal.csv.CharBuffer.append(StringBuffer)",2,1,2
"org.apache.solr.internal.csv.CharBuffer.append(char)",1,1,1
"org.apache.solr.internal.csv.CharBuffer.append(char[])",2,1,2
"org.apache.solr.internal.csv.CharBuffer.capacity()",1,1,1
"org.apache.solr.internal.csv.CharBuffer.charAt(int)",1,1,1
"org.apache.solr.internal.csv.CharBuffer.clear()",1,1,1
"org.apache.solr.internal.csv.CharBuffer.getCharacters()",2,1,2
"org.apache.solr.internal.csv.CharBuffer.length()",1,1,1
"org.apache.solr.internal.csv.CharBuffer.provideCapacity(int)",2,1,2
"org.apache.solr.internal.csv.CharBuffer.shrink()",2,1,2
"org.apache.solr.internal.csv.CharBuffer.toString()",1,1,1
"org.apache.solr.internal.csv.CharBuffer.toStringBuffer()",1,1,1
"org.apache.solr.internal.csv.CharBuffer.trimTrailingWhitespace()",1,2,3
"org.apache.solr.internal.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader)",1,1,1
"org.apache.solr.internal.csv.ExtendedBufferedReader.ExtendedBufferedReader(Reader,int)",1,1,1
"org.apache.solr.internal.csv.ExtendedBufferedReader.getLineNumber()",2,1,2
"org.apache.solr.internal.csv.ExtendedBufferedReader.lookAhead()",1,2,2
"org.apache.solr.internal.csv.ExtendedBufferedReader.markSupported()",1,1,1
"org.apache.solr.internal.csv.ExtendedBufferedReader.read()",1,3,4
"org.apache.solr.internal.csv.ExtendedBufferedReader.read(char[],int,int)",7,6,9
"org.apache.solr.internal.csv.ExtendedBufferedReader.readAgain()",1,1,1
"org.apache.solr.internal.csv.ExtendedBufferedReader.readLine()",3,5,7
"org.apache.solr.internal.csv.ExtendedBufferedReader.readUntil(char)",1,3,5
"org.apache.solr.internal.csv.ExtendedBufferedReader.skip(long)",3,3,6
"org.apache.solr.internal.csv.ExtendedBufferedReader.skipUntil(char)",1,3,5
"org.apache.solr.internal.csv.writer.CSVConfig.CSVConfig()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.addField(CSVField)",1,1,2
"org.apache.solr.internal.csv.writer.CSVConfig.equals(Object)",2,1,3
"org.apache.solr.internal.csv.writer.CSVConfig.getDelimiter()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.getField(String)",4,2,5
"org.apache.solr.internal.csv.writer.CSVConfig.getFields()",2,2,2
"org.apache.solr.internal.csv.writer.CSVConfig.getFill()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.getFillChar()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.getValueDelimiter()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.guessConfig(InputStream)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.isDelimiterIgnored()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.isEndTrimmed()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.isFieldHeader()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.isFixedWidth()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.isValueDelimiterIgnored()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setDelimiter(char)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setEndTrimmed(boolean)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setFieldHeader(boolean)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setFields(CSVField[])",2,1,2
"org.apache.solr.internal.csv.writer.CSVConfig.setFields(Collection)",2,1,2
"org.apache.solr.internal.csv.writer.CSVConfig.setFill(int)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setFillChar(char)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setFixedWidth(boolean)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setIgnoreDelimiter(boolean)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setIgnoreValueDelimiter(boolean)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfig.setValueDelimiter(char)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.CSVConfigGuesser()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.CSVConfigGuesser(InputStream)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.analyseLines(String[])",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.getInputStream()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.guess()",1,5,7
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.guessFieldSeperator(String[])",2,2,3
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.guessFixedWidth(String[])",1,4,4
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.guessFixedWidthSeperator(String[])",4,5,7
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.hasFieldHeader()",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.setHasFieldHeader(boolean)",1,1,1
"org.apache.solr.internal.csv.writer.CSVConfigGuesser.setInputStream(InputStream)",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.CSVField()",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.CSVField(String)",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.CSVField(String,int)",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.getFill()",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.getName()",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.getSize()",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.overrideFill()",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.setFill(int)",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.setName(String)",1,1,1
"org.apache.solr.internal.csv.writer.CSVField.setSize(int)",1,1,1
"org.apache.solr.internal.csv.writer.CSVWriter.CSVWriter()",1,1,1
"org.apache.solr.internal.csv.writer.CSVWriter.CSVWriter(CSVConfig)",1,1,1
"org.apache.solr.internal.csv.writer.CSVWriter.getConfig()",1,1,1
"org.apache.solr.internal.csv.writer.CSVWriter.setConfig(CSVConfig)",1,1,1
"org.apache.solr.internal.csv.writer.CSVWriter.setWriter(Writer)",1,1,1
"org.apache.solr.internal.csv.writer.CSVWriter.writeRecord(Map)",4,9,9
"org.apache.solr.internal.csv.writer.CSVWriter.writeValue(CSVField,String)",1,7,7
"org.apache.solr.request.AppendedSolrParams.AppendedSolrParams(SolrParams,SolrParams)",1,1,1
"org.apache.solr.request.BinaryResponseWriter.BinaryResponseWriter()",1,1,1
"org.apache.solr.request.DefaultSolrParams.DefaultSolrParams(SolrParams,SolrParams)",1,1,1
"org.apache.solr.request.JSONResponseWriter.JSONResponseWriter()",1,1,1
"org.apache.solr.request.JSONWriterTest.beforeClass()",1,1,1
"org.apache.solr.request.JSONWriterTest.testJSON()",1,1,1
"org.apache.solr.request.JSONWriterTest.testJSONSolrDocument()",1,4,4
"org.apache.solr.request.JSONWriterTest.testNaNInf()",1,1,1
"org.apache.solr.request.LocalSolrQueryRequest.LocalSolrQueryRequest(SolrCore,Map<String, String[]>)",1,1,1
"org.apache.solr.request.LocalSolrQueryRequest.LocalSolrQueryRequest(SolrCore,NamedList)",1,1,1
"org.apache.solr.request.LocalSolrQueryRequest.LocalSolrQueryRequest(SolrCore,SolrParams)",1,1,1
"org.apache.solr.request.LocalSolrQueryRequest.LocalSolrQueryRequest(SolrCore,String,String,int,int,Map)",1,1,1
"org.apache.solr.request.LocalSolrQueryRequest.makeParams(String,String,int,int,Map)",1,5,5
"org.apache.solr.request.MapSolrParams.MapSolrParams(Map<String, String>)",1,1,1
"org.apache.solr.request.MultiMapSolrParams.MultiMapSolrParams(Map<String, String[]>)",1,1,1
"org.apache.solr.request.NumberedTermEnum.NumberedTermEnum(IndexReader,TermIndex)",1,1,1
"org.apache.solr.request.NumberedTermEnum.NumberedTermEnum(IndexReader,TermIndex,String,int)",1,1,1
"org.apache.solr.request.NumberedTermEnum.close()",1,2,2
"org.apache.solr.request.NumberedTermEnum.docFreq()",1,1,1
"org.apache.solr.request.NumberedTermEnum.getTermDocs()",1,2,2
"org.apache.solr.request.NumberedTermEnum.getTermNumber()",1,1,1
"org.apache.solr.request.NumberedTermEnum.next()",2,1,2
"org.apache.solr.request.NumberedTermEnum.setTerm()",2,4,5
"org.apache.solr.request.NumberedTermEnum.skipTo(String)",1,1,1
"org.apache.solr.request.NumberedTermEnum.skipTo(Term)",4,12,13
"org.apache.solr.request.NumberedTermEnum.skipTo(int)",3,4,7
"org.apache.solr.request.NumberedTermEnum.term()",1,1,1
"org.apache.solr.request.PHPResponseWriter.PHPResponseWriter()",1,1,1
"org.apache.solr.request.PHPSerializedResponseWriter.PHPSerializedResponseWriter()",1,1,1
"org.apache.solr.request.PythonResponseWriter.PythonResponseWriter()",1,1,1
"org.apache.solr.request.RawResponseWriter.RawResponseWriter()",1,1,1
"org.apache.solr.request.RequiredSolrParams.RequiredSolrParams(SolrParams)",1,1,1
"org.apache.solr.request.RubyResponseWriter.RubyResponseWriter()",1,1,1
"org.apache.solr.request.ServletSolrParams.ServletSolrParams(ServletRequest)",1,1,1
"org.apache.solr.request.ServletSolrParams.get(String)",3,1,3
"org.apache.solr.request.SimpleFacets.CountPair.CountPair(K,V)",1,1,1
"org.apache.solr.request.SimpleFacets.CountPair.compareTo(CountPair<K, V>)",1,2,2
"org.apache.solr.request.SimpleFacets.CountPair.equals(Object)",1,2,2
"org.apache.solr.request.SimpleFacets.CountPair.hashCode()",1,1,1
"org.apache.solr.request.SimpleFacets.DateRangeEndpointCalculator.DateRangeEndpointCalculator(SchemaField,Date)",2,1,2
"org.apache.solr.request.SimpleFacets.DateRangeEndpointCalculator.formatValue(Date)",1,1,1
"org.apache.solr.request.SimpleFacets.DateRangeEndpointCalculator.parseAndAddGap(Date,String)",1,1,1
"org.apache.solr.request.SimpleFacets.DateRangeEndpointCalculator.parseGap(String)",1,1,1
"org.apache.solr.request.SimpleFacets.DateRangeEndpointCalculator.parseVal(String)",1,1,1
"org.apache.solr.request.SimpleFacets.DoubleRangeEndpointCalculator.DoubleRangeEndpointCalculator(SchemaField)",1,1,1
"org.apache.solr.request.SimpleFacets.DoubleRangeEndpointCalculator.parseAndAddGap(Double,String)",1,1,1
"org.apache.solr.request.SimpleFacets.DoubleRangeEndpointCalculator.parseVal(String)",1,1,1
"org.apache.solr.request.SimpleFacets.FloatRangeEndpointCalculator.FloatRangeEndpointCalculator(SchemaField)",1,1,1
"org.apache.solr.request.SimpleFacets.FloatRangeEndpointCalculator.parseAndAddGap(Float,String)",1,1,1
"org.apache.solr.request.SimpleFacets.FloatRangeEndpointCalculator.parseVal(String)",1,1,1
"org.apache.solr.request.SimpleFacets.IntegerRangeEndpointCalculator.IntegerRangeEndpointCalculator(SchemaField)",1,1,1
"org.apache.solr.request.SimpleFacets.IntegerRangeEndpointCalculator.parseAndAddGap(Integer,String)",1,1,1
"org.apache.solr.request.SimpleFacets.IntegerRangeEndpointCalculator.parseVal(String)",1,1,1
"org.apache.solr.request.SimpleFacets.LongRangeEndpointCalculator.LongRangeEndpointCalculator(SchemaField)",1,1,1
"org.apache.solr.request.SimpleFacets.LongRangeEndpointCalculator.parseAndAddGap(Long,String)",1,1,1
"org.apache.solr.request.SimpleFacets.LongRangeEndpointCalculator.parseVal(String)",1,1,1
"org.apache.solr.request.SimpleFacets.RangeEndpointCalculator.RangeEndpointCalculator(SchemaField)",1,1,1
"org.apache.solr.request.SimpleFacets.RangeEndpointCalculator.addGap(T,String)",1,2,2
"org.apache.solr.request.SimpleFacets.RangeEndpointCalculator.formatValue(T)",1,1,1
"org.apache.solr.request.SimpleFacets.RangeEndpointCalculator.getGap(String)",1,2,2
"org.apache.solr.request.SimpleFacets.RangeEndpointCalculator.getValue(String)",1,2,2
"org.apache.solr.request.SimpleFacets.RangeEndpointCalculator.parseGap(String)",1,1,1
"org.apache.solr.request.SimpleFacets.SimpleFacets(SolrQueryRequest,DocSet,SolrParams)",1,1,1
"org.apache.solr.request.SimpleFacets.SimpleFacets(SolrQueryRequest,DocSet,SolrParams,ResponseBuilder)",1,1,1
"org.apache.solr.request.SimpleFacets.getFacetCounts()",2,3,4
"org.apache.solr.request.SimpleFacets.getFacetDateCounts()",2,2,4
"org.apache.solr.request.SimpleFacets.getFacetDateCounts(String,NamedList)",5,24,33
"org.apache.solr.request.SimpleFacets.getFacetFieldCounts()",1,5,5
"org.apache.solr.request.SimpleFacets.getFacetQueryCounts()",1,3,4
"org.apache.solr.request.SimpleFacets.getFacetRangeCounts()",2,2,4
"org.apache.solr.request.SimpleFacets.getFacetRangeCounts(SchemaField,RangeEndpointCalculator<T>)",4,23,27
"org.apache.solr.request.SimpleFacets.getFacetRangeCounts(String,NamedList)",8,3,12
"org.apache.solr.request.SimpleFacets.getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String)",13,19,30
"org.apache.solr.request.SimpleFacets.getFieldCacheCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String)",9,14,26
"org.apache.solr.request.SimpleFacets.getFieldMissingCount(SolrIndexSearcher,DocSet,String)",1,1,1
"org.apache.solr.request.SimpleFacets.getListedTermCounts(String,String)",1,2,2
"org.apache.solr.request.SimpleFacets.getTermCounts(String)",2,5,12
"org.apache.solr.request.SimpleFacets.parseParams(String,String)",11,12,18
"org.apache.solr.request.SimpleFacets.rangeCount(SchemaField,Date,Date,boolean,boolean)",1,1,1
"org.apache.solr.request.SimpleFacets.rangeCount(SchemaField,String,String,boolean,boolean)",1,1,1
"org.apache.solr.request.SimpleFacetsTest.add_doc(String...)",1,2,2
"org.apache.solr.request.SimpleFacetsTest.beforeClass()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.createIndex()",1,2,2
"org.apache.solr.request.SimpleFacetsTest.doFacetPrefix(String,String,String...)",1,1,2
"org.apache.solr.request.SimpleFacetsTest.doFacets(String,String...)",1,1,1
"org.apache.solr.request.SimpleFacetsTest.helpTestDateFacets(String,boolean)",1,1,15
"org.apache.solr.request.SimpleFacetsTest.helpTestDateFacetsWithIncludeOption(String,boolean)",1,1,14
"org.apache.solr.request.SimpleFacetsTest.helpTestFractionalNumberRangeFacets(String)",1,1,1
"org.apache.solr.request.SimpleFacetsTest.helpTestNumericRangeFacetsDoubleOverflow(String)",1,1,1
"org.apache.solr.request.SimpleFacetsTest.helpTestNumericRangeFacetsLongOverflow(String)",1,1,1
"org.apache.solr.request.SimpleFacetsTest.helpTestWholeNumberRangeFacets(String)",1,1,1
"org.apache.solr.request.SimpleFacetsTest.indexDateFacets()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.indexFacetPrefix(String,String)",1,1,1
"org.apache.solr.request.SimpleFacetsTest.indexFacetPrefixMultiValued()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.indexFacetPrefixSingleValued()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.indexFacetSingleValued()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.indexFacets(String,String)",1,1,1
"org.apache.solr.request.SimpleFacetsTest.indexSimpleFacetCounts()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.randomCommit(int)",1,2,2
"org.apache.solr.request.SimpleFacetsTest.testDateFacets()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testDateFacetsWithIncludeOption()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testDateRangeFacets()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testDateRangeFacetsWithIncludeOption()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testFacetPrefixMultiValued()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testFacetPrefixSingleValued()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testFacetPrefixSingleValuedFcs()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testFacetSingleValued()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testFacetSingleValuedFcs()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsOverflowSortableDouble()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsOverflowSortableLong()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsOverflowTrieDouble()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsOverflowTrieLong()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsSortableDouble()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsSortableFloat()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsSortableInt()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsSortableLong()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsTrieDouble()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsTrieFloat()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsTrieInt()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testNumericRangeFacetsTrieLong()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testSimpleFacetCounts()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testTrieDateFacets()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testTrieDateFacetsWithIncludeOption()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testTrieDateRangeFacets()",1,1,1
"org.apache.solr.request.SimpleFacetsTest.testTrieDateRangeFacetsWithIncludeOption()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.SolrQueryRequestBase(SolrCore,SolrParams)",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.close()",1,2,2
"org.apache.solr.request.SolrQueryRequestBase.getContentStreams()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getContext()",1,1,2
"org.apache.solr.request.SolrQueryRequestBase.getCore()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getIntParam(String)",2,1,2
"org.apache.solr.request.SolrQueryRequestBase.getIntParam(String,int)",1,2,2
"org.apache.solr.request.SolrQueryRequestBase.getLimit()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getOriginalParams()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getParam(String)",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getParamString()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getParams()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getParams(String)",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getQueryString()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getQueryType()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getSchema()",1,2,2
"org.apache.solr.request.SolrQueryRequestBase.getSearcher()",2,2,3
"org.apache.solr.request.SolrQueryRequestBase.getStart()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getStartTime()",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.getStrParam(String)",2,1,2
"org.apache.solr.request.SolrQueryRequestBase.getStrParam(String,String)",1,1,2
"org.apache.solr.request.SolrQueryRequestBase.setContentStreams(Iterable<ContentStream>)",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.setParams(SolrParams)",1,1,1
"org.apache.solr.request.SolrQueryRequestBase.toString()",1,1,1
"org.apache.solr.request.SolrQueryResponse.SolrQueryResponse()",1,1,1
"org.apache.solr.request.SolrRequestInfo.SolrRequestInfo(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.request.SolrRequestInfo.clearRequestInfo()",1,1,1
"org.apache.solr.request.SolrRequestInfo.getNOW()",2,2,3
"org.apache.solr.request.SolrRequestInfo.getReq()",1,1,1
"org.apache.solr.request.SolrRequestInfo.getRequestInfo()",1,1,1
"org.apache.solr.request.SolrRequestInfo.getResponseBuilder()",1,1,1
"org.apache.solr.request.SolrRequestInfo.getRsp()",1,1,1
"org.apache.solr.request.SolrRequestInfo.setRequestInfo(SolrRequestInfo)",1,2,2
"org.apache.solr.request.SolrRequestInfo.setResponseBuilder(ResponseBuilder)",1,1,1
"org.apache.solr.request.TermIndex.TermIndex(String)",1,1,1
"org.apache.solr.request.TermIndex.TermIndex(String,String)",1,1,1
"org.apache.solr.request.TermIndex.createTerm(String)",1,1,1
"org.apache.solr.request.TermIndex.getEnumerator(IndexReader)",2,4,7
"org.apache.solr.request.TermIndex.getEnumerator(IndexReader,int)",1,1,1
"org.apache.solr.request.TermIndex.memSize()",1,1,1
"org.apache.solr.request.TestBinaryResponseWriter.getSchemaFile()",1,1,1
"org.apache.solr.request.TestBinaryResponseWriter.getSolrConfigFile()",1,1,1
"org.apache.solr.request.TestBinaryResponseWriter.testUUID()",1,2,2
"org.apache.solr.request.TestFaceting.beforeClass()",1,1,1
"org.apache.solr.request.TestFaceting.close()",1,2,2
"org.apache.solr.request.TestFaceting.createIndex(int)",1,2,2
"org.apache.solr.request.TestFaceting.doTermEnum(int)",1,7,7
"org.apache.solr.request.TestFaceting.setUp()",1,1,1
"org.apache.solr.request.TestFaceting.t(int)",1,1,1
"org.apache.solr.request.TestFaceting.tearDown()",1,1,1
"org.apache.solr.request.TestFaceting.testFacets()",1,2,2
"org.apache.solr.request.TestFaceting.testRegularBig()",1,5,5
"org.apache.solr.request.TestFaceting.testTermEnum()",1,1,1
"org.apache.solr.request.TestRemoteStreaming.beforeTest()",1,1,1
"org.apache.solr.request.TestRemoteStreaming.doBefore()",1,1,1
"org.apache.solr.request.TestRemoteStreaming.getUrlForString(String)",2,2,2
"org.apache.solr.request.TestRemoteStreaming.makeDeleteAllUrl()",1,1,1
"org.apache.solr.request.TestRemoteStreaming.searchFindsIt()",1,1,1
"org.apache.solr.request.TestRemoteStreaming.testMakeDeleteAllUrl()",1,1,1
"org.apache.solr.request.TestRemoteStreaming.testNoUrlAccess()",1,1,1
"org.apache.solr.request.TestRemoteStreaming.testQtUpdateFails()",1,1,1
"org.apache.solr.request.TestRemoteStreaming.testStreamUrl()",1,1,1
"org.apache.solr.request.TestWriterPerf.doPerf(String,SolrQueryRequest,int,int)",4,4,8
"org.apache.solr.request.TestWriterPerf.getCoreName()",1,1,1
"org.apache.solr.request.TestWriterPerf.getResponse(SolrQueryRequest)",2,2,2
"org.apache.solr.request.TestWriterPerf.getSchemaFile()",1,1,1
"org.apache.solr.request.TestWriterPerf.getSolrConfigFile()",1,1,1
"org.apache.solr.request.TestWriterPerf.index(Object...)",1,2,2
"org.apache.solr.request.TestWriterPerf.makeIndex()",1,1,1
"org.apache.solr.request.TestWriterPerf.setUp()",1,1,1
"org.apache.solr.request.TestWriterPerf.tearDown()",1,1,1
"org.apache.solr.request.TestWriterPerf.testPerf()",1,1,1
"org.apache.solr.request.TextResponseWriter.TextResponseWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.request.UnInvertedField.TopTerm.memSize()",1,1,1
"org.apache.solr.request.UnInvertedField.UnInvertedField(String,SolrIndexSearcher)",1,1,1
"org.apache.solr.request.UnInvertedField.getCounts(SolrIndexSearcher,DocSet,int,int,Integer,boolean,String,String)",19,18,41
"org.apache.solr.request.UnInvertedField.getStats(SolrIndexSearcher,DocSet,String[])",15,21,33
"org.apache.solr.request.UnInvertedField.getTermText(NumberedTermEnum,int)",3,3,3
"org.apache.solr.request.UnInvertedField.getUnInvertedField(String,SolrIndexSearcher)",2,3,4
"org.apache.solr.request.UnInvertedField.memSize()",2,2,8
"org.apache.solr.request.UnInvertedField.toString()",1,1,1
"org.apache.solr.request.UnInvertedField.uninvert(SolrIndexSearcher)",13,17,30
"org.apache.solr.request.UnInvertedField.vIntSize(int)",5,1,5
"org.apache.solr.request.UnInvertedField.writeInt(int,byte[],int)",1,1,5
"org.apache.solr.request.XMLResponseWriter.XMLResponseWriter()",1,1,1
"org.apache.solr.request.XSLTResponseWriter.XSLTResponseWriter()",1,1,1
"org.apache.solr.response.BaseResponseWriter.DocListInfo.DocListInfo(int,int,int,Float)",1,1,1
"org.apache.solr.response.BaseResponseWriter.IdxInfo.IdxInfo(IndexSchema,SolrIndexSearcher,Set<String>)",1,6,7
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.end()",1,1,1
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.endDocumentList()",1,1,1
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.isStreamingDocs()",1,1,1
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.start()",1,1,1
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.startDocumentList(String,DocListInfo)",1,1,1
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.writeAllDocs(DocListInfo,List<SolrDocument>)",1,1,1
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.writeDoc(SolrDocument)",1,1,1
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.writeOther(String,Object)",1,1,1
"org.apache.solr.response.BaseResponseWriter.SingleResponseWriter.writeResponseHeader(NamedList)",1,1,1
"org.apache.solr.response.BaseResponseWriter.getDoc(int,IdxInfo)",4,11,12
"org.apache.solr.response.BaseResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.BaseResponseWriter.write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse)",1,15,16
"org.apache.solr.response.BinaryResponseWriter.Resolver.Resolver(SolrQueryRequest,Set<String>)",1,6,7
"org.apache.solr.response.BinaryResponseWriter.Resolver.getDoc(Document)",4,12,13
"org.apache.solr.response.BinaryResponseWriter.Resolver.resolve(Object,JavaBinCodec)",4,4,4
"org.apache.solr.response.BinaryResponseWriter.Resolver.writeDocList(DocList,JavaBinCodec)",1,8,8
"org.apache.solr.response.BinaryResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.BinaryResponseWriter.getParsedResponse(SolrQueryRequest,SolrQueryResponse)",1,1,2
"org.apache.solr.response.BinaryResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.BinaryResponseWriter.write(OutputStream,SolrQueryRequest,SolrQueryResponse)",1,2,3
"org.apache.solr.response.BinaryResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.CSVResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.CSVResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.CSVResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.CSVWriter.CSVSharedBufPrinter.CSVSharedBufPrinter(Writer,CSVStrategy)",1,1,1
"org.apache.solr.response.CSVWriter.CSVSharedBufPrinter.reset()",1,1,1
"org.apache.solr.response.CSVWriter.CSVWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.CSVWriter.OpenCharArrayWriter.getInternalBuf()",1,1,1
"org.apache.solr.response.CSVWriter.ResettableFastWriter.ResettableFastWriter()",1,1,1
"org.apache.solr.response.CSVWriter.ResettableFastWriter.freeze()",1,2,2
"org.apache.solr.response.CSVWriter.ResettableFastWriter.getFrozenBuf()",1,1,1
"org.apache.solr.response.CSVWriter.ResettableFastWriter.getFrozenSize()",1,1,1
"org.apache.solr.response.CSVWriter.ResettableFastWriter.reset()",1,1,1
"org.apache.solr.response.CSVWriter.close()",1,2,2
"org.apache.solr.response.CSVWriter.writeArray(String,Iterator)",1,1,1
"org.apache.solr.response.CSVWriter.writeArray(String,Object[])",1,1,1
"org.apache.solr.response.CSVWriter.writeBool(String,String)",1,1,1
"org.apache.solr.response.CSVWriter.writeByte(String,String)",1,1,1
"org.apache.solr.response.CSVWriter.writeDate(String,Date)",1,1,1
"org.apache.solr.response.CSVWriter.writeDate(String,String)",1,1,1
"org.apache.solr.response.CSVWriter.writeDoc(String,Document,Set<String>,float,boolean)",6,9,10
"org.apache.solr.response.CSVWriter.writeDocList(String,DocList,Set<String>,Map)",1,3,3
"org.apache.solr.response.CSVWriter.writeDouble(String,String)",1,1,1
"org.apache.solr.response.CSVWriter.writeFloat(String,String)",1,1,1
"org.apache.solr.response.CSVWriter.writeInt(String,String)",1,1,1
"org.apache.solr.response.CSVWriter.writeLong(String,String)",1,1,1
"org.apache.solr.response.CSVWriter.writeMap(String,Map,boolean,boolean)",1,1,1
"org.apache.solr.response.CSVWriter.writeNamedList(String,NamedList)",1,1,1
"org.apache.solr.response.CSVWriter.writeNull(String)",1,1,1
"org.apache.solr.response.CSVWriter.writeResponse()",25,34,48
"org.apache.solr.response.CSVWriter.writeShort(String,String)",1,1,1
"org.apache.solr.response.CSVWriter.writeSolrDocument(String,SolrDocument,Set<String>,Map)",3,11,12
"org.apache.solr.response.CSVWriter.writeSolrDocumentList(String,SolrDocumentList,Set<String>,Map)",1,2,2
"org.apache.solr.response.CSVWriter.writeStr(String,String,boolean)",1,1,1
"org.apache.solr.response.GenericBinaryResponseWriter.write(OutputStream,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.GenericBinaryResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.GenericTextResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.JSONResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.JSONResponseWriter.init(NamedList)",1,1,2
"org.apache.solr.response.JSONResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.JSONWriter.JSONWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.JSONWriter.MultiValueField.MultiValueField(SchemaField,Fieldable)",1,1,1
"org.apache.solr.response.JSONWriter.unicodeEscape(Appendable,int)",1,1,1
"org.apache.solr.response.JSONWriter.writeArray(String,Iterator)",1,4,4
"org.apache.solr.response.JSONWriter.writeArray(String,Object[])",1,1,1
"org.apache.solr.response.JSONWriter.writeArrayCloser()",1,1,1
"org.apache.solr.response.JSONWriter.writeArrayOpener(int)",1,1,1
"org.apache.solr.response.JSONWriter.writeArraySeparator()",1,1,1
"org.apache.solr.response.JSONWriter.writeBool(String,String)",1,1,1
"org.apache.solr.response.JSONWriter.writeByte(String,String)",1,1,1
"org.apache.solr.response.JSONWriter.writeDate(String,String)",1,1,1
"org.apache.solr.response.JSONWriter.writeDoc(String,Collection<Fieldable>,Set<String>,Map)",3,14,15
"org.apache.solr.response.JSONWriter.writeDoc(String,Document,Set<String>,float,boolean)",1,2,2
"org.apache.solr.response.JSONWriter.writeDocList(String,DocList,Set<String>,Map)",1,10,12
"org.apache.solr.response.JSONWriter.writeDouble(String,String)",1,1,1
"org.apache.solr.response.JSONWriter.writeFloat(String,String)",1,1,1
"org.apache.solr.response.JSONWriter.writeInt(String,String)",1,1,1
"org.apache.solr.response.JSONWriter.writeKey(String,boolean)",1,1,1
"org.apache.solr.response.JSONWriter.writeLong(String,String)",1,1,1
"org.apache.solr.response.JSONWriter.writeMap(String,Map,boolean,boolean)",1,8,8
"org.apache.solr.response.JSONWriter.writeMapCloser()",1,1,1
"org.apache.solr.response.JSONWriter.writeMapOpener(int)",1,1,1
"org.apache.solr.response.JSONWriter.writeMapSeparator()",1,1,1
"org.apache.solr.response.JSONWriter.writeNamedList(String,NamedList)",1,6,6
"org.apache.solr.response.JSONWriter.writeNamedListAsArrArr(String,NamedList)",1,4,4
"org.apache.solr.response.JSONWriter.writeNamedListAsArrMap(String,NamedList)",1,4,4
"org.apache.solr.response.JSONWriter.writeNamedListAsFlat(String,NamedList)",1,4,4
"org.apache.solr.response.JSONWriter.writeNamedListAsMapMangled(String,NamedList)",1,5,6
"org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(String,NamedList)",1,3,4
"org.apache.solr.response.JSONWriter.writeNull(String)",1,1,1
"org.apache.solr.response.JSONWriter.writeResponse()",1,4,5
"org.apache.solr.response.JSONWriter.writeShort(String,String)",1,1,1
"org.apache.solr.response.JSONWriter.writeSolrDocument(String,SolrDocument,Set<String>,Map)",3,9,10
"org.apache.solr.response.JSONWriter.writeSolrDocumentList(String,SolrDocumentList,Set<String>,Map)",1,10,12
"org.apache.solr.response.JSONWriter.writeStr(String,String,boolean)",5,6,16
"org.apache.solr.response.NaNFloatWriter.NaNFloatWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.NaNFloatWriter.writeDouble(String,double)",1,4,4
"org.apache.solr.response.NaNFloatWriter.writeFloat(String,float)",1,4,4
"org.apache.solr.response.PHPResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PHPResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.PHPResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PHPSerializedResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PHPSerializedResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.PHPSerializedResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.PHPSerializedWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeArray(String,Iterator)",1,2,2
"org.apache.solr.response.PHPSerializedWriter.writeArray(String,Object[])",1,2,2
"org.apache.solr.response.PHPSerializedWriter.writeArrayCloser()",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeArrayOpener(int)",2,1,2
"org.apache.solr.response.PHPSerializedWriter.writeArraySeparator()",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeBool(String,String)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeBool(String,boolean)",1,1,2
"org.apache.solr.response.PHPSerializedWriter.writeDoc(String,Collection<Fieldable>,Set<String>,Map)",3,11,12
"org.apache.solr.response.PHPSerializedWriter.writeDocList(String,DocList,Set<String>,Map)",1,9,11
"org.apache.solr.response.PHPSerializedWriter.writeDouble(String,String)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeFloat(String,String)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeInt(String,String)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeKey(String,boolean)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeKey(int,boolean)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeLong(String,String)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeMapCloser()",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeMapOpener(int)",2,1,2
"org.apache.solr.response.PHPSerializedWriter.writeMapSeparator()",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeNamedList(String,NamedList)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeNull(String)",1,1,1
"org.apache.solr.response.PHPSerializedWriter.writeResponse()",1,2,3
"org.apache.solr.response.PHPSerializedWriter.writeSolrDocument(String,SolrDocument,Set<String>,Map)",3,10,11
"org.apache.solr.response.PHPSerializedWriter.writeSolrDocumentList(String,SolrDocumentList,Set<String>,Map)",1,9,11
"org.apache.solr.response.PHPSerializedWriter.writeStr(String,String,boolean)",1,1,1
"org.apache.solr.response.PHPWriter.PHPWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PHPWriter.writeArrayCloser()",1,1,1
"org.apache.solr.response.PHPWriter.writeArrayOpener(int)",1,1,1
"org.apache.solr.response.PHPWriter.writeKey(String,boolean)",1,1,1
"org.apache.solr.response.PHPWriter.writeMapCloser()",1,1,1
"org.apache.solr.response.PHPWriter.writeMapOpener(int)",1,1,1
"org.apache.solr.response.PHPWriter.writeNamedList(String,NamedList)",1,1,1
"org.apache.solr.response.PHPWriter.writeNull(String)",1,1,1
"org.apache.solr.response.PHPWriter.writeStr(String,String,boolean)",2,4,5
"org.apache.solr.response.PageTool.PageTool(SolrQueryRequest,SolrQueryResponse)",1,3,5
"org.apache.solr.response.PageTool.getCurrent_page_number()",1,1,1
"org.apache.solr.response.PageTool.getPage_count()",1,1,1
"org.apache.solr.response.PageTool.getResults_found()",1,1,1
"org.apache.solr.response.PageTool.getResults_per_page()",1,1,1
"org.apache.solr.response.PageTool.getStart()",1,1,1
"org.apache.solr.response.PageTool.toString()",1,1,1
"org.apache.solr.response.PythonResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PythonResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.PythonResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PythonWriter.PythonWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.PythonWriter.getInf()",1,1,1
"org.apache.solr.response.PythonWriter.getNaN()",1,1,1
"org.apache.solr.response.PythonWriter.writeBool(String,String)",1,1,1
"org.apache.solr.response.PythonWriter.writeBool(String,boolean)",1,1,2
"org.apache.solr.response.PythonWriter.writeNull(String)",1,1,1
"org.apache.solr.response.PythonWriter.writeStr(String,String,boolean)",3,6,11
"org.apache.solr.response.RawResponseWriter.getBaseWriter(SolrQueryRequest)",1,1,1
"org.apache.solr.response.RawResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",2,2,3
"org.apache.solr.response.RawResponseWriter.init(NamedList)",1,3,3
"org.apache.solr.response.RawResponseWriter.write(OutputStream,SolrQueryRequest,SolrQueryResponse)",2,2,3
"org.apache.solr.response.RawResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,2,3
"org.apache.solr.response.RubyResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.RubyResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.RubyResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.RubyWriter.RubyWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.RubyWriter.getInf()",1,1,1
"org.apache.solr.response.RubyWriter.getNaN()",1,1,1
"org.apache.solr.response.RubyWriter.writeKey(String,boolean)",1,1,1
"org.apache.solr.response.RubyWriter.writeNull(String)",1,1,1
"org.apache.solr.response.RubyWriter.writeStr(String,String,boolean)",1,4,5
"org.apache.solr.response.SolrParamResourceLoader.SolrParamResourceLoader(SolrQueryRequest)",1,3,3
"org.apache.solr.response.SolrParamResourceLoader.getLastModified(Resource)",1,1,1
"org.apache.solr.response.SolrParamResourceLoader.getResourceStream(String)",1,2,3
"org.apache.solr.response.SolrParamResourceLoader.init(ExtendedProperties)",1,1,1
"org.apache.solr.response.SolrParamResourceLoader.isSourceModified(Resource)",1,1,1
"org.apache.solr.response.SolrQueryResponse.SolrQueryResponse()",1,1,1
"org.apache.solr.response.SolrQueryResponse.add(String,Object)",1,1,1
"org.apache.solr.response.SolrQueryResponse.addToLog(String,Object)",1,1,1
"org.apache.solr.response.SolrQueryResponse.getEndTime()",1,2,2
"org.apache.solr.response.SolrQueryResponse.getException()",1,1,1
"org.apache.solr.response.SolrQueryResponse.getResponseHeader()",1,1,1
"org.apache.solr.response.SolrQueryResponse.getReturnFields()",1,1,1
"org.apache.solr.response.SolrQueryResponse.getToLog()",1,1,1
"org.apache.solr.response.SolrQueryResponse.getValues()",1,1,1
"org.apache.solr.response.SolrQueryResponse.isHttpCaching()",1,1,1
"org.apache.solr.response.SolrQueryResponse.setAllValues(NamedList)",1,1,1
"org.apache.solr.response.SolrQueryResponse.setEndTime()",1,1,1
"org.apache.solr.response.SolrQueryResponse.setEndTime(long)",1,1,2
"org.apache.solr.response.SolrQueryResponse.setException(Exception)",1,1,1
"org.apache.solr.response.SolrQueryResponse.setHttpCaching(boolean)",1,1,1
"org.apache.solr.response.SolrQueryResponse.setReturnFields(Set<String>)",1,1,1
"org.apache.solr.response.SolrVelocityResourceLoader.SolrVelocityResourceLoader(SolrResourceLoader)",1,1,1
"org.apache.solr.response.SolrVelocityResourceLoader.getLastModified(Resource)",1,1,1
"org.apache.solr.response.SolrVelocityResourceLoader.getResourceStream(String)",1,1,1
"org.apache.solr.response.SolrVelocityResourceLoader.init(ExtendedProperties)",1,1,1
"org.apache.solr.response.SolrVelocityResourceLoader.isSourceModified(Resource)",1,1,1
"org.apache.solr.response.TestCSVResponseWriter.beforeClass()",1,1,1
"org.apache.solr.response.TestCSVResponseWriter.createIndex()",1,1,1
"org.apache.solr.response.TestCSVResponseWriter.sortHeader(String)",1,1,1
"org.apache.solr.response.TestCSVResponseWriter.testCSVOutput()",1,4,4
"org.apache.solr.response.TestPHPSerializedResponseWriter.beforeClass()",1,1,1
"org.apache.solr.response.TestPHPSerializedResponseWriter.testSimple()",1,1,1
"org.apache.solr.response.TestPHPSerializedResponseWriter.testSolrDocuments()",1,1,1
"org.apache.solr.response.TextResponseWriter.TextResponseWriter(Writer,SolrQueryRequest,SolrQueryResponse)",1,3,4
"org.apache.solr.response.TextResponseWriter.close()",1,1,1
"org.apache.solr.response.TextResponseWriter.decLevel()",1,1,1
"org.apache.solr.response.TextResponseWriter.getWriter()",1,1,1
"org.apache.solr.response.TextResponseWriter.incLevel()",1,1,1
"org.apache.solr.response.TextResponseWriter.indent()",1,2,2
"org.apache.solr.response.TextResponseWriter.indent(int)",1,1,1
"org.apache.solr.response.TextResponseWriter.level()",1,1,1
"org.apache.solr.response.TextResponseWriter.setIndent(boolean)",1,1,1
"org.apache.solr.response.TextResponseWriter.setLevel(int)",1,1,1
"org.apache.solr.response.TextResponseWriter.writeBool(String,boolean)",1,1,1
"org.apache.solr.response.TextResponseWriter.writeByte(String,byte)",1,1,1
"org.apache.solr.response.TextResponseWriter.writeDate(String,Date)",1,1,1
"org.apache.solr.response.TextResponseWriter.writeDouble(String,double)",1,2,3
"org.apache.solr.response.TextResponseWriter.writeFloat(String,float)",1,2,3
"org.apache.solr.response.TextResponseWriter.writeInt(String,int)",1,1,1
"org.apache.solr.response.TextResponseWriter.writeLong(String,long)",1,1,1
"org.apache.solr.response.TextResponseWriter.writeShort(String,short)",1,1,1
"org.apache.solr.response.TextResponseWriter.writeVal(String,Object)",1,18,18
"org.apache.solr.response.VelocityResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.VelocityResponseWriter.getEngine(SolrQueryRequest)",1,3,5
"org.apache.solr.response.VelocityResponseWriter.getJSONWrap(String)",1,1,1
"org.apache.solr.response.VelocityResponseWriter.getTemplate(VelocityEngine,SolrQueryRequest)",1,2,7
"org.apache.solr.response.VelocityResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.VelocityResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",3,6,7
"org.apache.solr.response.XMLResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.XMLResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.XMLResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.response.XMLWriter.XMLWriter(Writer,IndexSchema,SolrQueryRequest,String)",1,2,2
"org.apache.solr.response.XMLWriter.decLevel()",1,1,1
"org.apache.solr.response.XMLWriter.incLevel()",1,1,1
"org.apache.solr.response.XMLWriter.indent()",1,1,1
"org.apache.solr.response.XMLWriter.indent(int)",1,1,1
"org.apache.solr.response.XMLWriter.level()",1,1,1
"org.apache.solr.response.XMLWriter.setIndent(boolean)",1,1,1
"org.apache.solr.response.XMLWriter.setLevel(int)",1,1,1
"org.apache.solr.response.XMLWriter.startTag(String,Map<String, String>,boolean,boolean)",1,5,5
"org.apache.solr.response.XMLWriter.startTag(String,String,boolean)",1,5,5
"org.apache.solr.response.XMLWriter.writeArray(String,Iterator)",1,4,4
"org.apache.solr.response.XMLWriter.writeArray(String,Object[])",1,1,1
"org.apache.solr.response.XMLWriter.writeAttr(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeAttr(String,String,boolean)",1,3,3
"org.apache.solr.response.XMLWriter.writeBool(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeBool(String,boolean)",1,1,1
"org.apache.solr.response.XMLWriter.writeByte(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeByte(String,byte)",1,1,1
"org.apache.solr.response.XMLWriter.writeCdataTag(String,Map<String, String>,String,boolean,boolean)",1,7,7
"org.apache.solr.response.XMLWriter.writeDate(String,Date)",1,1,1
"org.apache.solr.response.XMLWriter.writeDate(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeDoc(String,Document,Set<String>,float,boolean)",3,12,16
"org.apache.solr.response.XMLWriter.writeDoc(String,SolrDocument,Set<String>,boolean)",3,9,11
"org.apache.solr.response.XMLWriter.writeDocList(String,DocList,Set<String>)",1,4,4
"org.apache.solr.response.XMLWriter.writeDocuments(String,DocumentListInfo,Set<String>)",2,10,11
"org.apache.solr.response.XMLWriter.writeDouble(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeDouble(String,double)",1,1,1
"org.apache.solr.response.XMLWriter.writeFloat(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeFloat(String,float)",1,1,1
"org.apache.solr.response.XMLWriter.writeInt(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeInt(String,int)",1,1,1
"org.apache.solr.response.XMLWriter.writeLong(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeLong(String,long)",1,1,1
"org.apache.solr.response.XMLWriter.writeMap(String,Map<Object, Object>)",1,5,5
"org.apache.solr.response.XMLWriter.writeNamedList(String,NamedList)",1,4,5
"org.apache.solr.response.XMLWriter.writeNull(String)",1,1,1
"org.apache.solr.response.XMLWriter.writePrim(String,String,String,boolean)",2,2,3
"org.apache.solr.response.XMLWriter.writeResponse(Writer,SolrQueryRequest,SolrQueryResponse)",1,15,18
"org.apache.solr.response.XMLWriter.writeShort(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeShort(String,short)",1,1,1
"org.apache.solr.response.XMLWriter.writeSolrDocumentList(String,SolrDocumentList,Set<String>)",1,2,2
"org.apache.solr.response.XMLWriter.writeStr(String,String)",1,1,1
"org.apache.solr.response.XMLWriter.writeVal(String,Object)",1,18,18
"org.apache.solr.response.XSLTResponseWriter.getContentType(SolrQueryRequest,SolrQueryResponse)",1,4,7
"org.apache.solr.response.XSLTResponseWriter.getTransformer(SolrQueryRequest)",2,2,3
"org.apache.solr.response.XSLTResponseWriter.init(NamedList)",1,1,1
"org.apache.solr.response.XSLTResponseWriter.write(Writer,SolrQueryRequest,SolrQueryResponse)",1,2,2
"org.apache.solr.schema.AbstractSubTypeFieldType.createSuffixCache(int)",1,1,2
"org.apache.solr.schema.AbstractSubTypeFieldType.getFieldQuery(QParser,SchemaField,String)",1,1,1
"org.apache.solr.schema.AbstractSubTypeFieldType.getSubType()",1,1,1
"org.apache.solr.schema.AbstractSubTypeFieldType.inform(IndexSchema)",1,2,2
"org.apache.solr.schema.AbstractSubTypeFieldType.init(IndexSchema,Map<String, String>)",3,3,3
"org.apache.solr.schema.AbstractSubTypeFieldType.registerPolyFieldDynamicPrototype(IndexSchema,FieldType)",1,1,1
"org.apache.solr.schema.AbstractSubTypeFieldType.subField(SchemaField,int)",1,1,1
"org.apache.solr.schema.BCDIntField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.BCDIntField.getValueSource(SchemaField)",1,1,1
"org.apache.solr.schema.BCDIntField.indexedToReadable(String)",1,1,1
"org.apache.solr.schema.BCDIntField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.BCDIntField.toInternal(String)",1,1,1
"org.apache.solr.schema.BCDIntField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.BCDIntField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.BCDIntField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.BCDLongField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.BCDLongField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.BCDStrField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.BCDStrField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.BadIndexSchemaTest.doTest(String,String)",3,2,4
"org.apache.solr.schema.BadIndexSchemaTest.findErrorWithSubstring(List<Throwable>,String)",3,2,3
"org.apache.solr.schema.BadIndexSchemaTest.testBadExternalFileField()",1,2,2
"org.apache.solr.schema.BadIndexSchemaTest.testSevereErrors()",1,2,2
"org.apache.solr.schema.BadIndexSchemaTest.testSevereErrorsForInvalidFieldOptions()",1,1,1
"org.apache.solr.schema.BinaryField.createField(SchemaField,Object,float)",3,5,6
"org.apache.solr.schema.BinaryField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.BinaryField.toBase64String(ByteBuffer)",1,1,1
"org.apache.solr.schema.BinaryField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.BinaryField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.BinaryField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.BinaryField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.BoolField.getAnalyzer()",1,1,1
"org.apache.solr.schema.BoolField.getQueryAnalyzer()",1,1,1
"org.apache.solr.schema.BoolField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.BoolField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.BoolField.indexedToReadable(String)",1,1,2
"org.apache.solr.schema.BoolField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.BoolField.toInternal(String)",1,3,6
"org.apache.solr.schema.BoolField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.BoolField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.BoolField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.ByteField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.ByteField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.ByteField.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.ByteField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.ByteField.write(TextResponseWriter,String,Fieldable)",2,3,3
"org.apache.solr.schema.ByteField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.CoordinateFieldType.getDimension()",1,1,1
"org.apache.solr.schema.CopyField.CopyField(SchemaField,SchemaField)",1,1,1
"org.apache.solr.schema.CopyField.CopyField(SchemaField,SchemaField,int)",3,1,4
"org.apache.solr.schema.CopyField.getDestination()",1,1,1
"org.apache.solr.schema.CopyField.getLimitedValue(String)",1,3,3
"org.apache.solr.schema.CopyField.getMaxChars()",1,1,1
"org.apache.solr.schema.CopyField.getSource()",1,1,1
"org.apache.solr.schema.CopyFieldTest.beforeClass()",1,1,1
"org.apache.solr.schema.CopyFieldTest.testCopyFieldFunctionality()",1,1,1
"org.apache.solr.schema.CopyFieldTest.testCopyFieldSchemaFieldSchemaField()",1,4,4
"org.apache.solr.schema.CopyFieldTest.testCopyFieldSchemaFieldSchemaFieldInt()",1,5,5
"org.apache.solr.schema.CopyFieldTest.testGetDestination()",1,1,1
"org.apache.solr.schema.CopyFieldTest.testGetMaxChars()",1,1,1
"org.apache.solr.schema.CopyFieldTest.testGetSource()",1,1,1
"org.apache.solr.schema.CurrencyField.CurrencyValueSource.CurrencyValueSource(SchemaField,String,QParser)",1,1,1
"org.apache.solr.schema.CurrencyField.CurrencyValueSource.description()",1,1,1
"org.apache.solr.schema.CurrencyField.CurrencyValueSource.equals(Object)",3,7,9
"org.apache.solr.schema.CurrencyField.CurrencyValueSource.getValues(Map,IndexReader)",3,8,13
"org.apache.solr.schema.CurrencyField.CurrencyValueSource.hashCode()",1,4,4
"org.apache.solr.schema.CurrencyField.CurrencyValueSource.name()",1,1,1
"org.apache.solr.schema.CurrencyField.createDynamicCurrencyField(String,FieldType)",1,1,1
"org.apache.solr.schema.CurrencyField.createFields(SchemaField,String,float)",1,2,6
"org.apache.solr.schema.CurrencyField.getAmountField(SchemaField)",1,1,1
"org.apache.solr.schema.CurrencyField.getCurrencyField(SchemaField)",1,1,1
"org.apache.solr.schema.CurrencyField.getFieldQuery(QParser,SchemaField,String)",1,1,1
"org.apache.solr.schema.CurrencyField.getProvider()",1,1,1
"org.apache.solr.schema.CurrencyField.getRangeQuery(QParser,SchemaField,CurrencyValue,CurrencyValue,boolean,boolean)",1,1,1
"org.apache.solr.schema.CurrencyField.getRangeQuery(QParser,SchemaField,String,String,boolean,boolean)",2,1,2
"org.apache.solr.schema.CurrencyField.getSortField(SchemaField,boolean)",1,1,2
"org.apache.solr.schema.CurrencyField.inform(IndexSchema)",1,1,1
"org.apache.solr.schema.CurrencyField.inform(ResourceLoader)",1,2,2
"org.apache.solr.schema.CurrencyField.init(IndexSchema,Map<String, String>)",3,2,7
"org.apache.solr.schema.CurrencyField.isPolyField()",1,1,1
"org.apache.solr.schema.CurrencyField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.CurrencyField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.CurrencyFieldTest.beforeClass()",1,1,1
"org.apache.solr.schema.CurrencyFieldTest.testCurrencyFieldType()",1,4,4
"org.apache.solr.schema.CurrencyFieldTest.testCurrencyPointQuery()",1,1,1
"org.apache.solr.schema.CurrencyFieldTest.testCurrencyRangeSearch()",1,2,2
"org.apache.solr.schema.CurrencyFieldTest.testCurrencySchema()",1,2,4
"org.apache.solr.schema.CurrencyFieldTest.testCurrencySort()",1,1,1
"org.apache.solr.schema.CurrencyFieldTest.testMockExchangeRateProvider()",1,1,1
"org.apache.solr.schema.CurrencyFieldTest.testMockFieldType()",1,1,1
"org.apache.solr.schema.CurrencyFieldTest.testPerformance()",1,8,8
"org.apache.solr.schema.CurrencyValue.CurrencyValue(long,String)",1,1,1
"org.apache.solr.schema.CurrencyValue.convertAmount(ExchangeRateProvider,String,long,String)",1,1,1
"org.apache.solr.schema.CurrencyValue.convertAmount(double,String,long,String)",2,1,2
"org.apache.solr.schema.CurrencyValue.convertAmount(double,int,long,int)",1,1,5
"org.apache.solr.schema.CurrencyValue.convertTo(ExchangeRateProvider,String)",1,1,1
"org.apache.solr.schema.CurrencyValue.getAmount()",1,1,1
"org.apache.solr.schema.CurrencyValue.getCurrencyCode()",1,1,1
"org.apache.solr.schema.CurrencyValue.parse(String,String)",2,2,4
"org.apache.solr.schema.CurrencyValue.toString()",1,1,1
"org.apache.solr.schema.CustomSimilarityFactory.getSimilarity()",1,1,1
"org.apache.solr.schema.DateField.ISO8601CanonicalDateFormat.ISO8601CanonicalDateFormat()",1,1,1
"org.apache.solr.schema.DateField.ISO8601CanonicalDateFormat.clone()",1,1,1
"org.apache.solr.schema.DateField.ISO8601CanonicalDateFormat.format(Date,StringBuffer,FieldPosition)",2,2,4
"org.apache.solr.schema.DateField.ISO8601CanonicalDateFormat.parse(String,ParsePosition)",1,6,6
"org.apache.solr.schema.DateField.ThreadLocalDateFormat.ThreadLocalDateFormat(DateFormat)",1,1,1
"org.apache.solr.schema.DateField.ThreadLocalDateFormat.initialValue()",1,1,1
"org.apache.solr.schema.DateField.formatDate(Date)",1,1,1
"org.apache.solr.schema.DateField.formatExternal(Date)",1,1,1
"org.apache.solr.schema.DateField.getRangeQuery(QParser,SchemaField,Date,Date,boolean,boolean)",1,3,3
"org.apache.solr.schema.DateField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.DateField.getThreadLocalDateFormat()",1,1,1
"org.apache.solr.schema.DateField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.DateField.indexedToReadable(String)",1,1,1
"org.apache.solr.schema.DateField.parseDate(String)",1,1,1
"org.apache.solr.schema.DateField.parseDateLenient(String,SolrQueryRequest)",1,2,2
"org.apache.solr.schema.DateField.parseMath(Date,String)",4,6,8
"org.apache.solr.schema.DateField.parseMathLenient(Date,String,SolrQueryRequest)",4,6,8
"org.apache.solr.schema.DateField.toExternal(Date)",1,1,1
"org.apache.solr.schema.DateField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.DateField.toInternal(Date)",1,1,1
"org.apache.solr.schema.DateField.toInternal(String)",1,1,1
"org.apache.solr.schema.DateField.toObject(Fieldable)",1,1,2
"org.apache.solr.schema.DateField.toObject(String)",1,1,1
"org.apache.solr.schema.DateField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.DateField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.DateFieldSource.DateFieldSource(String,FieldType)",1,1,1
"org.apache.solr.schema.DateFieldSource.description()",1,1,1
"org.apache.solr.schema.DateFieldSource.equals(Object)",1,2,2
"org.apache.solr.schema.DateFieldSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.schema.DateFieldSource.hashCode()",1,1,1
"org.apache.solr.schema.DateFieldTest.assertFormat(String,long)",1,1,1
"org.apache.solr.schema.DateFieldTest.assertParseMath(long,String)",1,1,1
"org.apache.solr.schema.DateFieldTest.assertRoundTrip(String)",1,1,1
"org.apache.solr.schema.DateFieldTest.assertToObject(long,String)",1,1,1
"org.apache.solr.schema.DateFieldTest.setUp()",1,1,1
"org.apache.solr.schema.DateFieldTest.testFormatter()",1,1,1
"org.apache.solr.schema.DateFieldTest.testParseMath()",1,1,1
"org.apache.solr.schema.DateFieldTest.testRoundTrip()",1,1,1
"org.apache.solr.schema.DateFieldTest.testRoundTripNonPositiveYear()",1,1,1
"org.apache.solr.schema.DateFieldTest.testToInternal()",1,1,1
"org.apache.solr.schema.DateFieldTest.testToInternalObj()",1,1,1
"org.apache.solr.schema.DateFieldTest.testToObject()",1,1,1
"org.apache.solr.schema.DoubleField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.DoubleField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.DoubleField.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.DoubleField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.DoubleField.write(TextResponseWriter,String,Fieldable)",2,3,3
"org.apache.solr.schema.DoubleField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.ExternalFileField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.ExternalFileField.getValueSource(SchemaField,QParser)",1,2,2
"org.apache.solr.schema.ExternalFileField.init(IndexSchema,Map<String, String>)",3,3,6
"org.apache.solr.schema.ExternalFileField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.ExternalFileField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.FieldProperties.getPropertyName(int)",1,1,1
"org.apache.solr.schema.FieldProperties.off(int,int)",1,1,1
"org.apache.solr.schema.FieldProperties.on(int,int)",1,1,1
"org.apache.solr.schema.FieldProperties.parseProperties(Map<String, String>,boolean)",3,3,4
"org.apache.solr.schema.FieldProperties.propertiesToString(int)",1,3,3
"org.apache.solr.schema.FieldProperties.propertyNameToInt(String)",3,2,3
"org.apache.solr.schema.FieldType.DefaultAnalyzer.DefaultAnalyzer(int)",1,1,1
"org.apache.solr.schema.FieldType.DefaultAnalyzer.getStream(String,Reader)",2,1,2
"org.apache.solr.schema.FieldType.createField(SchemaField,String,float)",3,4,6
"org.apache.solr.schema.FieldType.createField(String,String,Store,Index,TermVector,boolean,IndexOptions,float)",1,2,2
"org.apache.solr.schema.FieldType.createFields(SchemaField,String,float)",1,1,2
"org.apache.solr.schema.FieldType.getAnalyzer()",1,1,1
"org.apache.solr.schema.FieldType.getArg(String,Map<String, String>)",2,1,2
"org.apache.solr.schema.FieldType.getFieldIndex(SchemaField,String)",1,2,3
"org.apache.solr.schema.FieldType.getFieldQuery(QParser,SchemaField,String)",1,1,1
"org.apache.solr.schema.FieldType.getFieldStore(SchemaField,String)",1,1,2
"org.apache.solr.schema.FieldType.getFieldTermVec(SchemaField,String)",1,5,6
"org.apache.solr.schema.FieldType.getIndexOptions(SchemaField,String)",1,2,3
"org.apache.solr.schema.FieldType.getQueryAnalyzer()",1,1,1
"org.apache.solr.schema.FieldType.getRangeQuery(QParser,SchemaField,String,String,boolean,boolean)",1,3,3
"org.apache.solr.schema.FieldType.getStringSort(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.FieldType.getTypeName()",1,1,1
"org.apache.solr.schema.FieldType.getValueSource(SchemaField)",1,1,1
"org.apache.solr.schema.FieldType.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.FieldType.hasProperty(int)",1,1,1
"org.apache.solr.schema.FieldType.indexedToReadable(String)",1,1,1
"org.apache.solr.schema.FieldType.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.FieldType.isMultiValued()",1,1,1
"org.apache.solr.schema.FieldType.isPolyField()",1,1,1
"org.apache.solr.schema.FieldType.isTokenized()",1,1,1
"org.apache.solr.schema.FieldType.multiValuedFieldCache()",1,1,1
"org.apache.solr.schema.FieldType.readableToIndexed(String)",1,1,1
"org.apache.solr.schema.FieldType.restrictProps(int)",2,2,2
"org.apache.solr.schema.FieldType.setAnalyzer(Analyzer)",1,1,1
"org.apache.solr.schema.FieldType.setArgs(IndexSchema,Map<String, String>)",5,7,9
"org.apache.solr.schema.FieldType.setQueryAnalyzer(Analyzer)",1,1,1
"org.apache.solr.schema.FieldType.setTypeName(String)",1,1,1
"org.apache.solr.schema.FieldType.storedToIndexed(Fieldable)",1,1,1
"org.apache.solr.schema.FieldType.storedToReadable(Fieldable)",1,1,1
"org.apache.solr.schema.FieldType.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.FieldType.toInternal(String)",1,1,1
"org.apache.solr.schema.FieldType.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.FieldType.toString()",1,2,2
"org.apache.solr.schema.FileExchangeRateProvider.addRate(Map<String, Map<String, Double>>,String,String,double)",1,2,2
"org.apache.solr.schema.FileExchangeRateProvider.equals(Object)",3,3,5
"org.apache.solr.schema.FileExchangeRateProvider.getExchangeRate(String,String)",5,1,6
"org.apache.solr.schema.FileExchangeRateProvider.hashCode()",1,2,2
"org.apache.solr.schema.FileExchangeRateProvider.inform(ResourceLoader)",2,1,2
"org.apache.solr.schema.FileExchangeRateProvider.init(Map<String, String>)",2,1,2
"org.apache.solr.schema.FileExchangeRateProvider.listAvailableCurrencies()",1,3,3
"org.apache.solr.schema.FileExchangeRateProvider.lookupRate(String,String)",2,2,2
"org.apache.solr.schema.FileExchangeRateProvider.reload()",4,5,16
"org.apache.solr.schema.FileExchangeRateProvider.toString()",1,1,1
"org.apache.solr.schema.FloatField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.FloatField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.FloatField.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.FloatField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.FloatField.write(TextResponseWriter,String,Fieldable)",2,3,3
"org.apache.solr.schema.FloatField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.GeoHashField.createSpatialQuery(QParser,SpatialOptions)",1,1,2
"org.apache.solr.schema.GeoHashField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.GeoHashField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.GeoHashField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.GeoHashField.toInternal(String)",1,1,2
"org.apache.solr.schema.GeoHashField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.GeoHashField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicCopy.DynamicCopy(String,SchemaField)",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicCopy.DynamicCopy(String,SchemaField,int)",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicCopy.getTargetField(String)",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicCopy.toString()",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicDestCopy.DynamicDestCopy(String,DynamicField)",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicDestCopy.DynamicDestCopy(String,DynamicField,int)",3,3,3
"org.apache.solr.schema.IndexSchema.DynamicDestCopy.getTargetField(String)",1,2,3
"org.apache.solr.schema.IndexSchema.DynamicDestCopy.toString()",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicField.DynamicField(SchemaField)",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicField.makeSchemaField(String)",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicField.toString()",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicReplacement.DynamicReplacement(String)",3,3,3
"org.apache.solr.schema.IndexSchema.DynamicReplacement.compareTo(DynamicReplacement)",1,1,1
"org.apache.solr.schema.IndexSchema.DynamicReplacement.matches(String)",3,4,5
"org.apache.solr.schema.IndexSchema.IndexSchema(SolrConfig,String)",1,1,1
"org.apache.solr.schema.IndexSchema.IndexSchema(SolrConfig,String,InputSource)",1,2,3
"org.apache.solr.schema.IndexSchema.MultiTermChainBuilder.add(Object)",5,4,7
"org.apache.solr.schema.IndexSchema.MultiTermChainBuilder.build()",1,3,3
"org.apache.solr.schema.IndexSchema.SolrIndexAnalyzer.SolrIndexAnalyzer()",1,1,1
"org.apache.solr.schema.IndexSchema.SolrIndexAnalyzer.analyzerCache()",1,2,2
"org.apache.solr.schema.IndexSchema.SolrIndexAnalyzer.getAnalyzer(String)",1,2,2
"org.apache.solr.schema.IndexSchema.SolrIndexAnalyzer.getPositionIncrementGap(String)",1,1,1
"org.apache.solr.schema.IndexSchema.SolrIndexAnalyzer.reusableTokenStream(String,Reader)",1,1,1
"org.apache.solr.schema.IndexSchema.SolrIndexAnalyzer.tokenStream(String,Reader)",1,1,1
"org.apache.solr.schema.IndexSchema.SolrQueryAnalyzer.analyzerCache()",1,2,2
"org.apache.solr.schema.IndexSchema.SolrQueryAnalyzer.getAnalyzer(String)",1,2,2
"org.apache.solr.schema.IndexSchema.addDynamicField(List<DynamicField>,SchemaField)",1,2,2
"org.apache.solr.schema.IndexSchema.addDynamicFieldNoDupCheck(List<DynamicField>,SchemaField)",1,1,1
"org.apache.solr.schema.IndexSchema.append(Object[],Object)",1,1,1
"org.apache.solr.schema.IndexSchema.constructMultiTermAnalyzer(Analyzer)",3,4,6
"org.apache.solr.schema.IndexSchema.dynFieldType(String)",3,3,3
"org.apache.solr.schema.IndexSchema.getAnalyzer()",1,1,1
"org.apache.solr.schema.IndexSchema.getCopyFields(String)",1,5,5
"org.apache.solr.schema.IndexSchema.getCopyFieldsList(String)",1,4,4
"org.apache.solr.schema.IndexSchema.getCopySources(String)",2,4,5
"org.apache.solr.schema.IndexSchema.getDefaultSearchFieldName()",1,1,1
"org.apache.solr.schema.IndexSchema.getDynamicFieldPrototypes()",1,1,2
"org.apache.solr.schema.IndexSchema.getDynamicFieldType(String)",3,3,3
"org.apache.solr.schema.IndexSchema.getDynamicPattern(String)",3,2,3
"org.apache.solr.schema.IndexSchema.getField(String)",2,1,2
"org.apache.solr.schema.IndexSchema.getFieldOrNull(String)",4,3,4
"org.apache.solr.schema.IndexSchema.getFieldType(String)",2,2,2
"org.apache.solr.schema.IndexSchema.getFieldTypeByName(String)",1,1,1
"org.apache.solr.schema.IndexSchema.getFieldTypeNoEx(String)",2,2,2
"org.apache.solr.schema.IndexSchema.getFieldTypes()",1,1,1
"org.apache.solr.schema.IndexSchema.getFields()",1,1,1
"org.apache.solr.schema.IndexSchema.getFieldsWithDefaultValue()",1,1,1
"org.apache.solr.schema.IndexSchema.getIndexedField(String)",3,1,3
"org.apache.solr.schema.IndexSchema.getInputStream()",1,1,1
"org.apache.solr.schema.IndexSchema.getName()",1,1,1
"org.apache.solr.schema.IndexSchema.getQueryAnalyzer()",1,1,1
"org.apache.solr.schema.IndexSchema.getQueryParserDefaultOperator()",1,1,1
"org.apache.solr.schema.IndexSchema.getRequiredFields()",1,1,1
"org.apache.solr.schema.IndexSchema.getResourceLoader()",1,1,1
"org.apache.solr.schema.IndexSchema.getResourceName()",1,1,1
"org.apache.solr.schema.IndexSchema.getSchemaFile()",1,1,1
"org.apache.solr.schema.IndexSchema.getSchemaName()",1,1,1
"org.apache.solr.schema.IndexSchema.getSimilarity()",1,1,1
"org.apache.solr.schema.IndexSchema.getSimilarityFactory()",1,1,1
"org.apache.solr.schema.IndexSchema.getSolrConfig()",1,1,1
"org.apache.solr.schema.IndexSchema.getSolrQueryParser(String)",1,1,2
"org.apache.solr.schema.IndexSchema.getUniqueKeyField()",1,1,1
"org.apache.solr.schema.IndexSchema.getUniqueKeyField(Document)",1,1,1
"org.apache.solr.schema.IndexSchema.getVersion()",1,1,1
"org.apache.solr.schema.IndexSchema.hasExplicitField(String)",4,2,4
"org.apache.solr.schema.IndexSchema.isCopyFieldTarget(SchemaField)",1,1,1
"org.apache.solr.schema.IndexSchema.isDuplicateDynField(List<DynamicField>,SchemaField)",3,2,3
"org.apache.solr.schema.IndexSchema.isDynamicField(String)",4,2,4
"org.apache.solr.schema.IndexSchema.isWildCard(String)",1,2,2
"org.apache.solr.schema.IndexSchema.printableUniqueKey(Document)",1,2,2
"org.apache.solr.schema.IndexSchema.readAnalyzer(Node)",6,11,14
"org.apache.solr.schema.IndexSchema.readSchema(InputSource)",8,33,37
"org.apache.solr.schema.IndexSchema.refreshAnalyzers()",1,1,1
"org.apache.solr.schema.IndexSchema.registerCopyField(String,String)",1,1,1
"org.apache.solr.schema.IndexSchema.registerCopyField(String,String,int)",8,7,10
"org.apache.solr.schema.IndexSchema.registerDynamicCopyField(DynamicCopy)",1,2,2
"org.apache.solr.schema.IndexSchema.registerDynamicField(SchemaField...)",1,3,3
"org.apache.solr.schema.IndexSchemaTest.beforeClass()",1,1,1
"org.apache.solr.schema.IndexSchemaTest.testDynamicCopy()",1,1,1
"org.apache.solr.schema.IndexSchemaTest.testIsDynamicField()",1,1,1
"org.apache.solr.schema.IndexSchemaTest.testProperties()",1,1,1
"org.apache.solr.schema.IndexSchemaTest.testRuntimeFieldCreation()",1,1,1
"org.apache.solr.schema.IndexSchemaTest.testSimilarityFactory()",1,1,1
"org.apache.solr.schema.IntField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.IntField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.IntField.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.IntField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.IntField.write(TextResponseWriter,String,Fieldable)",2,3,3
"org.apache.solr.schema.IntField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.LatLonType.createField(SchemaField,String,float)",1,1,1
"org.apache.solr.schema.LatLonType.createFields(SchemaField,String,float)",2,3,8
"org.apache.solr.schema.LatLonType.createSpatialQuery(QParser,SpatialOptions)",2,6,11
"org.apache.solr.schema.LatLonType.getFieldQuery(QParser,SchemaField,String)",1,2,3
"org.apache.solr.schema.LatLonType.getRangeQuery(QParser,SchemaField,String,String,boolean,boolean)",1,2,3
"org.apache.solr.schema.LatLonType.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.LatLonType.getValueSource(SchemaField,QParser)",1,2,2
"org.apache.solr.schema.LatLonType.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.LatLonType.isPolyField()",1,1,1
"org.apache.solr.schema.LatLonType.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.LatLonType.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.LatLonValueSource.LatLonValueSource(SchemaField,List<ValueSource>)",1,1,1
"org.apache.solr.schema.LatLonValueSource.description()",1,1,1
"org.apache.solr.schema.LatLonValueSource.name()",1,1,1
"org.apache.solr.schema.LegacyDateField.ThreadLocalDateFormat.ThreadLocalDateFormat()",1,1,1
"org.apache.solr.schema.LegacyDateField.ThreadLocalDateFormat.initialValue()",1,1,1
"org.apache.solr.schema.LegacyDateField.formatDate(Date)",1,1,1
"org.apache.solr.schema.LegacyDateField.getThreadLocalDateFormat()",1,1,1
"org.apache.solr.schema.LegacyDateField.toInternal(String)",2,2,2
"org.apache.solr.schema.LegacyDateFieldTest.assertItoR(String,String)",1,1,1
"org.apache.solr.schema.LegacyDateFieldTest.assertToI(String,String)",1,1,1
"org.apache.solr.schema.LegacyDateFieldTest.assertToI(String,long)",1,1,1
"org.apache.solr.schema.LegacyDateFieldTest.setUp()",1,1,2
"org.apache.solr.schema.LegacyDateFieldTest.testFormatter()",1,1,1
"org.apache.solr.schema.LegacyDateFieldTest.testIndexedToReadable()",1,1,1
"org.apache.solr.schema.LegacyDateFieldTest.testToInternal()",1,1,1
"org.apache.solr.schema.LegacyDateFieldTest.testToInternalObj()",1,1,1
"org.apache.solr.schema.LongField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.LongField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.LongField.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.LongField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.LongField.write(TextResponseWriter,String,Fieldable)",2,3,3
"org.apache.solr.schema.LongField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.MockConfigurableSimilarity.MockConfigurableSimilarity(String)",1,1,1
"org.apache.solr.schema.MockConfigurableSimilarity.getPassthrough()",1,1,1
"org.apache.solr.schema.MockExchangeRateProvider.getExchangeRate(String,String)",3,1,3
"org.apache.solr.schema.MockExchangeRateProvider.inform(ResourceLoader)",1,1,1
"org.apache.solr.schema.MockExchangeRateProvider.init(Map<String, String>)",1,1,1
"org.apache.solr.schema.MockExchangeRateProvider.listAvailableCurrencies()",1,2,2
"org.apache.solr.schema.MockExchangeRateProvider.reload()",1,1,1
"org.apache.solr.schema.MultiTermTest.beforeTests()",1,1,1
"org.apache.solr.schema.MultiTermTest.getCoreName()",1,1,1
"org.apache.solr.schema.MultiTermTest.testDefaultCopiedToMulti()",1,2,3
"org.apache.solr.schema.MultiTermTest.testMultiFound()",1,3,5
"org.apache.solr.schema.MultiTermTest.testQueryCopiedToMulti()",1,2,2
"org.apache.solr.schema.NotRequiredUniqueKeyTest.getSchemaFile()",1,1,1
"org.apache.solr.schema.NotRequiredUniqueKeyTest.getSolrConfigFile()",1,1,1
"org.apache.solr.schema.NotRequiredUniqueKeyTest.setUp()",1,1,1
"org.apache.solr.schema.NotRequiredUniqueKeyTest.tearDown()",1,1,1
"org.apache.solr.schema.NotRequiredUniqueKeyTest.testSchemaLoading()",1,1,1
"org.apache.solr.schema.NumericFieldsTest.beforeClass()",1,1,1
"org.apache.solr.schema.NumericFieldsTest.getDoc(String,Integer,String)",1,3,3
"org.apache.solr.schema.NumericFieldsTest.testSortMissingFirstLast()",1,5,5
"org.apache.solr.schema.PointType.createField(SchemaField,String,float)",1,1,1
"org.apache.solr.schema.PointType.createFields(SchemaField,String,float)",1,4,7
"org.apache.solr.schema.PointType.createSpatialQuery(QParser,SpatialOptions)",1,3,4
"org.apache.solr.schema.PointType.getFieldQuery(QParser,SchemaField,String)",1,2,3
"org.apache.solr.schema.PointType.getRangeQuery(QParser,SchemaField,String,String,boolean,boolean)",1,2,3
"org.apache.solr.schema.PointType.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.PointType.getValueSource(SchemaField,QParser)",1,2,2
"org.apache.solr.schema.PointType.init(IndexSchema,Map<String, String>)",2,1,2
"org.apache.solr.schema.PointType.isPolyField()",1,1,1
"org.apache.solr.schema.PointType.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.PointType.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.PointTypeValueSource.PointTypeValueSource(SchemaField,List<ValueSource>)",1,1,1
"org.apache.solr.schema.PointTypeValueSource.description()",1,1,1
"org.apache.solr.schema.PointTypeValueSource.name()",1,1,1
"org.apache.solr.schema.PolyFieldTest.beforeClass()",1,1,1
"org.apache.solr.schema.PolyFieldTest.testPointFieldType()",1,4,5
"org.apache.solr.schema.PolyFieldTest.testSchemaBasics()",1,2,3
"org.apache.solr.schema.PolyFieldTest.testSearchDetails()",1,1,1
"org.apache.solr.schema.PolyFieldTest.testSearching()",1,2,2
"org.apache.solr.schema.PrimitiveFieldType.init(IndexSchema,Map<String, String>)",1,1,2
"org.apache.solr.schema.PrimitiveFieldTypeTest.setUp()",1,1,1
"org.apache.solr.schema.PrimitiveFieldTypeTest.testDefaultOmitNorms()",1,1,1
"org.apache.solr.schema.RandomSortField.RandomValueSource.RandomValueSource(String)",1,1,1
"org.apache.solr.schema.RandomSortField.RandomValueSource.description()",1,1,1
"org.apache.solr.schema.RandomSortField.RandomValueSource.equals(Object)",2,1,2
"org.apache.solr.schema.RandomSortField.RandomValueSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.schema.RandomSortField.RandomValueSource.hashCode()",1,1,1
"org.apache.solr.schema.RandomSortField.getSeed(String,IndexReader)",1,2,2
"org.apache.solr.schema.RandomSortField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.RandomSortField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.RandomSortField.hash(int)",1,1,1
"org.apache.solr.schema.RandomSortField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.RandomSortField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.RequiredFieldsTest.beforeClass()",1,1,1
"org.apache.solr.schema.RequiredFieldsTest.setUp()",1,1,1
"org.apache.solr.schema.RequiredFieldsTest.testAddMultipleDocumentsWithErrors()",1,1,1
"org.apache.solr.schema.RequiredFieldsTest.testRequiredFieldsConfig()",1,1,1
"org.apache.solr.schema.RequiredFieldsTest.testRequiredFieldsSingleAdd()",1,1,1
"org.apache.solr.schema.SchemaField.SchemaField(SchemaField,String)",1,1,1
"org.apache.solr.schema.SchemaField.SchemaField(String,FieldType)",1,1,1
"org.apache.solr.schema.SchemaField.SchemaField(String,FieldType,int,String)",1,1,1
"org.apache.solr.schema.SchemaField.calcProps(String,FieldType,Map<String, String>)",11,6,13
"org.apache.solr.schema.SchemaField.checkFieldCacheSource(QParser)",3,3,3
"org.apache.solr.schema.SchemaField.checkSortability()",3,3,3
"org.apache.solr.schema.SchemaField.create(String,FieldType,Map<String, String>)",1,2,2
"org.apache.solr.schema.SchemaField.create(String,FieldType,int,String)",1,1,1
"org.apache.solr.schema.SchemaField.createField(String,float)",1,1,1
"org.apache.solr.schema.SchemaField.createFields(String,float)",1,1,1
"org.apache.solr.schema.SchemaField.equals(Object)",1,2,2
"org.apache.solr.schema.SchemaField.getDefaultValue()",1,1,1
"org.apache.solr.schema.SchemaField.getName()",1,1,1
"org.apache.solr.schema.SchemaField.getProperties()",1,1,1
"org.apache.solr.schema.SchemaField.getSortField(boolean)",1,1,1
"org.apache.solr.schema.SchemaField.getType()",1,1,1
"org.apache.solr.schema.SchemaField.hashCode()",1,1,1
"org.apache.solr.schema.SchemaField.indexed()",1,1,1
"org.apache.solr.schema.SchemaField.isBinary()",1,1,1
"org.apache.solr.schema.SchemaField.isPolyField()",1,1,1
"org.apache.solr.schema.SchemaField.isRequired()",1,1,1
"org.apache.solr.schema.SchemaField.isTokenized()",1,1,1
"org.apache.solr.schema.SchemaField.multiValued()",1,1,1
"org.apache.solr.schema.SchemaField.omitNorms()",1,1,1
"org.apache.solr.schema.SchemaField.omitPositions()",1,1,1
"org.apache.solr.schema.SchemaField.omitTermFreqAndPositions()",1,1,1
"org.apache.solr.schema.SchemaField.omitTf()",1,1,1
"org.apache.solr.schema.SchemaField.sortMissingFirst()",1,1,1
"org.apache.solr.schema.SchemaField.sortMissingLast()",1,1,1
"org.apache.solr.schema.SchemaField.storeTermOffsets()",1,1,1
"org.apache.solr.schema.SchemaField.storeTermPositions()",1,1,1
"org.apache.solr.schema.SchemaField.storeTermVector()",1,1,1
"org.apache.solr.schema.SchemaField.stored()",1,1,1
"org.apache.solr.schema.SchemaField.toString()",1,1,3
"org.apache.solr.schema.SchemaField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SchemaField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.ShortField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.ShortField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.ShortField.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.ShortField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.ShortField.write(TextResponseWriter,String,Fieldable)",2,3,3
"org.apache.solr.schema.ShortField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SimilarityFactory.getParams()",1,1,1
"org.apache.solr.schema.SimilarityFactory.init(SolrParams)",1,1,1
"org.apache.solr.schema.SortableDoubleField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.SortableDoubleField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.SortableDoubleField.indexedToReadable(String)",1,1,1
"org.apache.solr.schema.SortableDoubleField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.SortableDoubleField.toInternal(String)",1,1,1
"org.apache.solr.schema.SortableDoubleField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.SortableDoubleField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SortableDoubleField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SortableDoubleFieldSource.SortableDoubleFieldSource(String)",1,1,1
"org.apache.solr.schema.SortableDoubleFieldSource.SortableDoubleFieldSource(String,double)",1,1,1
"org.apache.solr.schema.SortableDoubleFieldSource.description()",1,1,1
"org.apache.solr.schema.SortableDoubleFieldSource.equals(Object)",1,3,3
"org.apache.solr.schema.SortableDoubleFieldSource.getValues(Map,IndexReader)",1,2,2
"org.apache.solr.schema.SortableDoubleFieldSource.hashCode()",1,1,1
"org.apache.solr.schema.SortableFloatField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.SortableFloatField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.SortableFloatField.indexedToReadable(String)",1,1,1
"org.apache.solr.schema.SortableFloatField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.SortableFloatField.toInternal(String)",1,1,1
"org.apache.solr.schema.SortableFloatField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.SortableFloatField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SortableFloatField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SortableFloatFieldSource.SortableFloatFieldSource(String)",1,1,1
"org.apache.solr.schema.SortableFloatFieldSource.SortableFloatFieldSource(String,float)",1,1,1
"org.apache.solr.schema.SortableFloatFieldSource.description()",1,1,1
"org.apache.solr.schema.SortableFloatFieldSource.equals(Object)",1,3,3
"org.apache.solr.schema.SortableFloatFieldSource.getValues(Map,IndexReader)",1,2,2
"org.apache.solr.schema.SortableFloatFieldSource.hashCode()",1,1,1
"org.apache.solr.schema.SortableIntField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.SortableIntField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.SortableIntField.indexedToReadable(String)",1,1,1
"org.apache.solr.schema.SortableIntField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.SortableIntField.toInternal(String)",1,1,1
"org.apache.solr.schema.SortableIntField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.SortableIntField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SortableIntField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SortableIntFieldSource.SortableIntFieldSource(String)",1,1,1
"org.apache.solr.schema.SortableIntFieldSource.SortableIntFieldSource(String,int)",1,1,1
"org.apache.solr.schema.SortableIntFieldSource.description()",1,1,1
"org.apache.solr.schema.SortableIntFieldSource.equals(Object)",1,3,3
"org.apache.solr.schema.SortableIntFieldSource.getValues(Map,IndexReader)",1,2,2
"org.apache.solr.schema.SortableIntFieldSource.hashCode()",1,1,1
"org.apache.solr.schema.SortableLongField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.SortableLongField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.SortableLongField.indexedToReadable(String)",1,1,1
"org.apache.solr.schema.SortableLongField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.SortableLongField.toInternal(String)",1,1,1
"org.apache.solr.schema.SortableLongField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.SortableLongField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SortableLongField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.SortableLongFieldSource.SortableLongFieldSource(String)",1,1,1
"org.apache.solr.schema.SortableLongFieldSource.SortableLongFieldSource(String,long)",1,1,1
"org.apache.solr.schema.SortableLongFieldSource.description()",1,1,1
"org.apache.solr.schema.SortableLongFieldSource.equals(Object)",1,3,3
"org.apache.solr.schema.SortableLongFieldSource.getValues(Map,IndexReader)",1,2,2
"org.apache.solr.schema.SortableLongFieldSource.hashCode()",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialScorer.SpatialScorer(Similarity,IndexReader,SpatialWeight)",1,2,2
"org.apache.solr.schema.SpatialDistanceQuery.SpatialScorer.advance(int)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialScorer.dist(double,double)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialScorer.docID()",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialScorer.explain(int)",1,2,2
"org.apache.solr.schema.SpatialDistanceQuery.SpatialScorer.match()",4,1,9
"org.apache.solr.schema.SpatialDistanceQuery.SpatialScorer.nextDoc()",5,2,5
"org.apache.solr.schema.SpatialDistanceQuery.SpatialScorer.score()",1,2,2
"org.apache.solr.schema.SpatialDistanceQuery.SpatialWeight.SpatialWeight(Searcher)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialWeight.explain(IndexReader,int)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialWeight.getQuery()",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialWeight.getValue()",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialWeight.normalize(float)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialWeight.scorer(IndexReader,boolean,boolean)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.SpatialWeight.sumOfSquaredWeights()",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.createWeight(Searcher)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.equals(Object)",2,14,15
"org.apache.solr.schema.SpatialDistanceQuery.extractTerms(Set)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.hashCode()",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.rewrite(IndexReader)",1,1,1
"org.apache.solr.schema.SpatialDistanceQuery.toString(String)",1,1,3
"org.apache.solr.schema.StrField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.StrField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.StrField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.StrField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.StrFieldSource.StrFieldSource(String)",1,1,1
"org.apache.solr.schema.StrFieldSource.description()",1,1,1
"org.apache.solr.schema.StrFieldSource.equals(Object)",1,2,2
"org.apache.solr.schema.StrFieldSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.schema.StrFieldSource.hashCode()",1,1,1
"org.apache.solr.schema.TestBinaryField.setUp()",1,1,1
"org.apache.solr.schema.TestBinaryField.tearDown()",1,1,1
"org.apache.solr.schema.TestBinaryField.testSimple()",1,15,16
"org.apache.solr.schema.TestOmitPositions.beforeClass()",1,1,1
"org.apache.solr.schema.TestOmitPositions.testFrequencies()",1,1,1
"org.apache.solr.schema.TestOmitPositions.testPositions()",1,1,1
"org.apache.solr.schema.TextField.analyzeMultiTerm(String,String,Analyzer)",4,2,8
"org.apache.solr.schema.TextField.getAutoGeneratePhraseQueries()",1,1,1
"org.apache.solr.schema.TextField.getFieldQuery(QParser,SchemaField,String)",1,1,1
"org.apache.solr.schema.TextField.getMultiTermAnalyzer()",1,1,1
"org.apache.solr.schema.TextField.getRangeQuery(QParser,SchemaField,String,String,boolean,boolean)",1,1,1
"org.apache.solr.schema.TextField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.TextField.init(IndexSchema,Map<String, String>)",1,2,4
"org.apache.solr.schema.TextField.parseFieldQuery(QParser,Analyzer,String,String)",5,22,30
"org.apache.solr.schema.TextField.setAnalyzer(Analyzer)",1,1,1
"org.apache.solr.schema.TextField.setMultiTermAnalyzer(Analyzer)",1,1,1
"org.apache.solr.schema.TextField.setQueryAnalyzer(Analyzer)",1,1,1
"org.apache.solr.schema.TextField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.TextField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.TrieDateField.createField(SchemaField,String,float)",1,1,1
"org.apache.solr.schema.TrieDateField.getPrecisionStep()",1,1,1
"org.apache.solr.schema.TrieDateField.getRangeQuery(QParser,SchemaField,Date,Date,boolean,boolean)",1,3,3
"org.apache.solr.schema.TrieDateField.getRangeQuery(QParser,SchemaField,String,String,boolean,boolean)",1,1,1
"org.apache.solr.schema.TrieDateField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.TrieDateField.getValueSource(SchemaField,QParser)",1,1,1
"org.apache.solr.schema.TrieDateField.indexedToReadable(String)",1,1,1
"org.apache.solr.schema.TrieDateField.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.TrieDateField.isTokenized()",1,1,1
"org.apache.solr.schema.TrieDateField.multiValuedFieldCache()",1,1,1
"org.apache.solr.schema.TrieDateField.readableToIndexed(String)",1,1,1
"org.apache.solr.schema.TrieDateField.storedToIndexed(Fieldable)",1,1,1
"org.apache.solr.schema.TrieDateField.storedToReadable(Fieldable)",1,1,1
"org.apache.solr.schema.TrieDateField.toExternal(Fieldable)",1,1,1
"org.apache.solr.schema.TrieDateField.toInternal(String)",1,1,1
"org.apache.solr.schema.TrieDateField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.TrieDateField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.TrieDateField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.TrieDateFieldSource.TrieDateFieldSource(String,LongParser)",1,1,1
"org.apache.solr.schema.TrieDateFieldSource.description()",1,1,1
"org.apache.solr.schema.TrieDateFieldSource.externalToLong(String)",1,1,1
"org.apache.solr.schema.TrieField.badFieldString(Fieldable)",1,1,1
"org.apache.solr.schema.TrieField.createField(SchemaField,String,float)",3,4,11
"org.apache.solr.schema.TrieField.getMainValuePrefix(FieldType)",6,2,7
"org.apache.solr.schema.TrieField.getPrecisionStep()",1,1,1
"org.apache.solr.schema.TrieField.getRangeQuery(QParser,SchemaField,String,String,boolean,boolean)",2,12,17
"org.apache.solr.schema.TrieField.getSortField(SchemaField,boolean)",2,2,22
"org.apache.solr.schema.TrieField.getType()",1,1,1
"org.apache.solr.schema.TrieField.getValueSource(SchemaField,QParser)",7,7,7
"org.apache.solr.schema.TrieField.indexedToReadable(String)",7,7,7
"org.apache.solr.schema.TrieField.init(IndexSchema,Map<String, String>)",2,4,6
"org.apache.solr.schema.TrieField.isTokenized()",1,1,1
"org.apache.solr.schema.TrieField.multiValuedFieldCache()",1,1,1
"org.apache.solr.schema.TrieField.readableToIndexed(String)",7,7,7
"org.apache.solr.schema.TrieField.storedToIndexed(Fieldable)",14,14,16
"org.apache.solr.schema.TrieField.storedToReadable(Fieldable)",1,1,1
"org.apache.solr.schema.TrieField.toExternal(Fieldable)",1,2,2
"org.apache.solr.schema.TrieField.toInt(byte[])",1,1,1
"org.apache.solr.schema.TrieField.toInternal(String)",1,1,1
"org.apache.solr.schema.TrieField.toLong(byte[])",1,1,1
"org.apache.solr.schema.TrieField.toObject(Fieldable)",10,11,11
"org.apache.solr.schema.TrieField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.TrieField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.UUIDField.getSortField(SchemaField,boolean)",1,1,1
"org.apache.solr.schema.UUIDField.init(IndexSchema,Map<String, String>)",1,1,1
"org.apache.solr.schema.UUIDField.toInternal(String)",3,8,9
"org.apache.solr.schema.UUIDField.toInternal(UUID)",1,1,1
"org.apache.solr.schema.UUIDField.toObject(Fieldable)",1,1,1
"org.apache.solr.schema.UUIDField.write(TextResponseWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.UUIDField.write(XMLWriter,String,Fieldable)",1,1,1
"org.apache.solr.schema.UUIDFieldTest.testToInternal()",1,1,6
"org.apache.solr.search.BitDocSet.BitDocSet()",1,1,1
"org.apache.solr.search.BitDocSet.BitDocSet(OpenBitSet)",1,1,1
"org.apache.solr.search.BitDocSet.BitDocSet(OpenBitSet,int)",1,1,1
"org.apache.solr.search.BitDocSet.add(int)",1,1,1
"org.apache.solr.search.BitDocSet.addUnique(int)",1,1,1
"org.apache.solr.search.BitDocSet.andNot(DocSet)",1,3,3
"org.apache.solr.search.BitDocSet.andNotSize(DocSet)",2,2,2
"org.apache.solr.search.BitDocSet.exists(int)",1,1,1
"org.apache.solr.search.BitDocSet.getBits()",1,1,1
"org.apache.solr.search.BitDocSet.intersectionSize(DocSet)",2,2,2
"org.apache.solr.search.BitDocSet.invalidateSize()",1,1,1
"org.apache.solr.search.BitDocSet.iterator()",1,1,1
"org.apache.solr.search.BitDocSet.memSize()",1,1,1
"org.apache.solr.search.BitDocSet.size()",2,1,2
"org.apache.solr.search.BitDocSet.union(DocSet)",1,3,3
"org.apache.solr.search.BitDocSet.unionSize(DocSet)",2,2,2
"org.apache.solr.search.BoostQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",2,2,3
"org.apache.solr.search.BoostQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.CacheConfig.CacheConfig()",1,1,1
"org.apache.solr.search.CacheConfig.CacheConfig(Class,Map<String, String>,CacheRegenerator)",1,1,1
"org.apache.solr.search.CacheConfig.getConfig(SolrConfig,Node)",2,3,4
"org.apache.solr.search.CacheConfig.getConfig(SolrConfig,String)",1,1,1
"org.apache.solr.search.CacheConfig.getMultipleConfigs(SolrConfig,String)",2,3,4
"org.apache.solr.search.CacheConfig.getRegenerator()",1,1,1
"org.apache.solr.search.CacheConfig.newInstance()",1,2,2
"org.apache.solr.search.CacheConfig.setRegenerator(CacheRegenerator)",1,1,1
"org.apache.solr.search.ConstantScorePrefixQuery.ConstantScorePrefixQuery(Term)",1,1,1
"org.apache.solr.search.ConstantScorePrefixQuery.equals(Object)",3,2,4
"org.apache.solr.search.ConstantScorePrefixQuery.getPrefix()",1,1,1
"org.apache.solr.search.ConstantScorePrefixQuery.hashCode()",1,1,1
"org.apache.solr.search.ConstantScorePrefixQuery.rewrite(IndexReader)",1,1,1
"org.apache.solr.search.ConstantScorePrefixQuery.toString(String)",1,3,3
"org.apache.solr.search.DateValueSourceParser.getDate(FunctionQParser,String)",3,4,5
"org.apache.solr.search.DateValueSourceParser.getValueSource(FunctionQParser,String)",3,2,4
"org.apache.solr.search.DateValueSourceParser.init(NamedList)",1,1,1
"org.apache.solr.search.DateValueSourceParser.parse(FunctionQParser)",6,8,17
"org.apache.solr.search.DelegatingCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.solr.search.DelegatingCollector.collect(int)",1,1,1
"org.apache.solr.search.DelegatingCollector.getDelegate()",1,1,1
"org.apache.solr.search.DelegatingCollector.setDelegate(Collector)",1,1,1
"org.apache.solr.search.DelegatingCollector.setLastDelegate(Collector)",1,1,2
"org.apache.solr.search.DelegatingCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.solr.search.DelegatingCollector.setScorer(Scorer)",1,1,1
"org.apache.solr.search.DisMaxQParser.DisMaxQParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.DisMaxQParser.addBoostFunctions(BooleanQuery,SolrParams)",4,6,8
"org.apache.solr.search.DisMaxQParser.addBoostQuery(BooleanQuery,SolrParams)",4,10,12
"org.apache.solr.search.DisMaxQParser.addDebugInfo(NamedList<Object>)",1,2,2
"org.apache.solr.search.DisMaxQParser.addMainQuery(BooleanQuery,SolrParams)",3,4,5
"org.apache.solr.search.DisMaxQParser.getAlternateUserQuery(SolrParams)",2,2,2
"org.apache.solr.search.DisMaxQParser.getDefaultHighlightFields()",1,1,1
"org.apache.solr.search.DisMaxQParser.getHighlightQuery()",1,1,2
"org.apache.solr.search.DisMaxQParser.getParser(Map<String, Float>,String,SolrParams,float)",1,1,1
"org.apache.solr.search.DisMaxQParser.getPhraseQuery(String,DisjunctionMaxQueryParser)",1,1,1
"org.apache.solr.search.DisMaxQParser.getUserQuery(String,DisjunctionMaxQueryParser,SolrParams)",1,2,2
"org.apache.solr.search.DisMaxQParser.parse()",2,2,3
"org.apache.solr.search.DisMaxQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.DisMaxQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.DocSetBase.add(int)",1,1,1
"org.apache.solr.search.DocSetBase.addUnique(int)",1,1,1
"org.apache.solr.search.DocSetBase.andNot(DocSet)",1,1,1
"org.apache.solr.search.DocSetBase.andNotSize(DocSet)",1,1,1
"org.apache.solr.search.DocSetBase.equals(Object)",6,4,8
"org.apache.solr.search.DocSetBase.getBits()",1,2,2
"org.apache.solr.search.DocSetBase.getTopFilter()",3,2,8
"org.apache.solr.search.DocSetBase.intersection(DocSet)",2,2,2
"org.apache.solr.search.DocSetBase.intersectionSize(DocSet)",2,2,2
"org.apache.solr.search.DocSetBase.union(DocSet)",1,1,1
"org.apache.solr.search.DocSetBase.unionSize(DocSet)",1,1,1
"org.apache.solr.search.DocSetCollector.DocSetCollector(int,int)",1,1,1
"org.apache.solr.search.DocSetCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.solr.search.DocSetCollector.collect(int)",1,2,3
"org.apache.solr.search.DocSetCollector.getDocSet()",2,3,3
"org.apache.solr.search.DocSetCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.solr.search.DocSetCollector.setScorer(Scorer)",1,1,1
"org.apache.solr.search.DocSetDelegateCollector.DocSetDelegateCollector(int,int,Collector)",1,1,1
"org.apache.solr.search.DocSetDelegateCollector.collect(int)",1,2,3
"org.apache.solr.search.DocSetDelegateCollector.getDocSet()",2,3,3
"org.apache.solr.search.DocSetDelegateCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.solr.search.DocSetDelegateCollector.setScorer(Scorer)",1,1,1
"org.apache.solr.search.DocSetPerf.generate(int,int)",1,4,4
"org.apache.solr.search.DocSetPerf.main(String[])",1,14,24
"org.apache.solr.search.DocSetPerf.test(boolean)",2,1,2
"org.apache.solr.search.DocSlice.DocSlice(int,int,int[],float[],int,float)",1,1,1
"org.apache.solr.search.DocSlice.exists(int)",3,1,3
"org.apache.solr.search.DocSlice.hasScores()",1,1,1
"org.apache.solr.search.DocSlice.intersection(DocSet)",2,2,3
"org.apache.solr.search.DocSlice.intersectionSize(DocSet)",2,2,3
"org.apache.solr.search.DocSlice.iterator()",1,1,1
"org.apache.solr.search.DocSlice.matches()",1,1,1
"org.apache.solr.search.DocSlice.maxScore()",1,1,1
"org.apache.solr.search.DocSlice.memSize()",1,1,2
"org.apache.solr.search.DocSlice.offset()",1,1,1
"org.apache.solr.search.DocSlice.size()",1,1,1
"org.apache.solr.search.DocSlice.subset(int,int)",4,1,7
"org.apache.solr.search.Double2Parser.Double2Parser(String)",1,1,1
"org.apache.solr.search.Double2Parser.Function.Function(ValueSource,ValueSource)",1,1,1
"org.apache.solr.search.Double2Parser.Function.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.Double2Parser.Function.description()",1,1,1
"org.apache.solr.search.Double2Parser.Function.equals(Object)",2,2,3
"org.apache.solr.search.Double2Parser.Function.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.Double2Parser.Function.hashCode()",1,1,1
"org.apache.solr.search.Double2Parser.parse(FunctionQParser)",1,1,1
"org.apache.solr.search.DoubleParser.DoubleParser(String)",1,1,1
"org.apache.solr.search.DoubleParser.Function.Function(ValueSource)",1,1,1
"org.apache.solr.search.DoubleParser.Function.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.DoubleParser.Function.name()",1,1,1
"org.apache.solr.search.DoubleParser.parse(FunctionQParser)",1,1,1
"org.apache.solr.search.ExtendedAnalyzer.ExtendedAnalyzer(QParser)",1,1,1
"org.apache.solr.search.ExtendedAnalyzer.getPositionIncrementGap(String)",1,1,1
"org.apache.solr.search.ExtendedAnalyzer.getQueryStopFilter(QParser,String)",4,1,4
"org.apache.solr.search.ExtendedAnalyzer.getQueryTokenizerChain(QParser,String)",1,1,2
"org.apache.solr.search.ExtendedAnalyzer.reusableTokenStream(String,Reader)",2,2,2
"org.apache.solr.search.ExtendedAnalyzer.tokenStream(String,Reader)",12,8,13
"org.apache.solr.search.ExtendedDismaxQParser.Clause.isBareWord()",1,1,2
"org.apache.solr.search.ExtendedDismaxQParser.DynamicField.DynamicField(String)",4,4,4
"org.apache.solr.search.ExtendedDismaxQParser.DynamicField.compareTo(DynamicField)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.DynamicField.matches(String)",4,5,6
"org.apache.solr.search.ExtendedDismaxQParser.DynamicField.toString()",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedDismaxQParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.ExtendedSolrQueryParser(QParser,String)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.addAlias(String,float,Map<String, Float>)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.addClause(List,int,int,Query)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getAlias(String)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getAliasedQuery()",6,8,9
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getBooleanQuery(List,boolean)",1,2,2
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getFieldQuery(String,String,boolean)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getFieldQuery(String,String,int)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getFuzzyQuery(String,String,float)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getPrefixQuery(String,String)",2,2,3
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getQueries(Alias)",3,4,6
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getQuery()",10,9,14
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getRangeQuery(String,String,String,boolean)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.getWildcardQuery(String,String)",3,3,3
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.setRemoveStopFilter(boolean)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.validateCyclicAliasing(String)",2,1,2
"org.apache.solr.search.ExtendedDismaxQParser.ExtendedSolrQueryParser.validateField(String,Set<String>)",2,3,5
"org.apache.solr.search.ExtendedDismaxQParser.UserFields.UserFields(Map<String, Float>)",1,5,5
"org.apache.solr.search.ExtendedDismaxQParser.UserFields.getBoost(String)",1,2,2
"org.apache.solr.search.ExtendedDismaxQParser.UserFields.getDynFieldForName(String,boolean)",3,2,4
"org.apache.solr.search.ExtendedDismaxQParser.UserFields.isAllowed(String)",1,4,4
"org.apache.solr.search.ExtendedDismaxQParser.UserFields.isDynField(String,boolean)",1,1,2
"org.apache.solr.search.ExtendedDismaxQParser.addAliasesFromRequest(ExtendedSolrQueryParser,float)",4,4,5
"org.apache.solr.search.ExtendedDismaxQParser.addDebugInfo(NamedList<Object>)",1,2,2
"org.apache.solr.search.ExtendedDismaxQParser.addShingledPhraseQueries(BooleanQuery,List<Clause>,Map<String, Float>,int,float,int)",2,8,9
"org.apache.solr.search.ExtendedDismaxQParser.getDefaultHighlightFields()",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.getFieldName(String,int,int)",6,6,13
"org.apache.solr.search.ExtendedDismaxQParser.getHighlightQuery()",1,1,1
"org.apache.solr.search.ExtendedDismaxQParser.isEmpty(Query)",3,2,4
"org.apache.solr.search.ExtendedDismaxQParser.parse()",17,53,69
"org.apache.solr.search.ExtendedDismaxQParser.partialEscape(CharSequence)",11,15,31
"org.apache.solr.search.ExtendedDismaxQParser.split(String,boolean)",2,9,12
"org.apache.solr.search.ExtendedDismaxQParser.splitIntoClauses(String,boolean)",14,19,32
"org.apache.solr.search.ExtendedDismaxQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.ExtendedDismaxQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.ExtendedQueryBase.getCache()",1,1,1
"org.apache.solr.search.ExtendedQueryBase.getCacheSep()",1,1,1
"org.apache.solr.search.ExtendedQueryBase.getCost()",1,1,1
"org.apache.solr.search.ExtendedQueryBase.getOptions()",1,3,3
"org.apache.solr.search.ExtendedQueryBase.setCache(boolean)",1,1,1
"org.apache.solr.search.ExtendedQueryBase.setCacheSep(boolean)",1,1,1
"org.apache.solr.search.ExtendedQueryBase.setCost(int)",1,1,1
"org.apache.solr.search.ExtendedQueryBase.toString(String)",1,1,1
"org.apache.solr.search.FastLRUCache.calcHitRatio(long,long)",4,1,4
"org.apache.solr.search.FastLRUCache.clear()",1,1,1
"org.apache.solr.search.FastLRUCache.close()",1,1,1
"org.apache.solr.search.FastLRUCache.get(K)",1,1,1
"org.apache.solr.search.FastLRUCache.getCategory()",1,1,1
"org.apache.solr.search.FastLRUCache.getDescription()",1,1,1
"org.apache.solr.search.FastLRUCache.getDocs()",1,1,1
"org.apache.solr.search.FastLRUCache.getName()",1,1,1
"org.apache.solr.search.FastLRUCache.getSource()",1,1,1
"org.apache.solr.search.FastLRUCache.getSourceId()",1,1,1
"org.apache.solr.search.FastLRUCache.getState()",1,1,1
"org.apache.solr.search.FastLRUCache.getStatistics()",2,4,6
"org.apache.solr.search.FastLRUCache.getVersion()",1,1,1
"org.apache.solr.search.FastLRUCache.init(Map,Object,CacheRegenerator)",1,9,12
"org.apache.solr.search.FastLRUCache.name()",1,1,1
"org.apache.solr.search.FastLRUCache.put(K,V)",1,1,1
"org.apache.solr.search.FastLRUCache.setState(State)",1,1,1
"org.apache.solr.search.FastLRUCache.size()",1,1,1
"org.apache.solr.search.FastLRUCache.toString()",1,1,1
"org.apache.solr.search.FastLRUCache.warm(SolrIndexSearcher,SolrCache)",5,5,8
"org.apache.solr.search.FieldQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.FieldQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.FilterImpl.DualFilterIterator.DualFilterIterator(DocIdSetIterator,DocIdSetIterator)",1,1,1
"org.apache.solr.search.FilterImpl.DualFilterIterator.advance(int)",4,2,4
"org.apache.solr.search.FilterImpl.DualFilterIterator.docID()",1,1,1
"org.apache.solr.search.FilterImpl.DualFilterIterator.nextDoc()",4,2,4
"org.apache.solr.search.FilterImpl.FilterImpl(DocSet,List<Weight>)",1,2,2
"org.apache.solr.search.FilterImpl.FilterIterator.FilterIterator(DocIdSetIterator[])",1,1,1
"org.apache.solr.search.FilterImpl.FilterIterator.advance(int)",1,1,1
"org.apache.solr.search.FilterImpl.FilterIterator.doNext(int)",5,3,5
"org.apache.solr.search.FilterImpl.FilterIterator.docID()",1,1,1
"org.apache.solr.search.FilterImpl.FilterIterator.nextDoc()",1,1,1
"org.apache.solr.search.FilterImpl.FilterSet.FilterSet(DocIdSet,IndexReader)",1,1,1
"org.apache.solr.search.FilterImpl.FilterSet.iterator()",8,5,8
"org.apache.solr.search.FilterImpl.getDocIdSet(IndexReader)",2,2,3
"org.apache.solr.search.FooQParser.FooQParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.FooQParser.parse()",1,1,1
"org.apache.solr.search.FooQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.FooQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.FunctionQParser.FunctionQParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.FunctionQParser.argWasQuoted()",1,1,1
"org.apache.solr.search.FunctionQParser.consumeArgumentDelimiter()",2,2,2
"org.apache.solr.search.FunctionQParser.getParseMultipleSources()",1,1,1
"org.apache.solr.search.FunctionQParser.getParseToEnd()",1,1,1
"org.apache.solr.search.FunctionQParser.hasMoreArguments()",1,1,2
"org.apache.solr.search.FunctionQParser.parse()",5,6,9
"org.apache.solr.search.FunctionQParser.parseArg()",6,6,10
"org.apache.solr.search.FunctionQParser.parseDouble()",2,1,2
"org.apache.solr.search.FunctionQParser.parseFloat()",2,1,2
"org.apache.solr.search.FunctionQParser.parseId()",2,1,2
"org.apache.solr.search.FunctionQParser.parseInt()",2,1,2
"org.apache.solr.search.FunctionQParser.parseNestedQuery()",4,4,5
"org.apache.solr.search.FunctionQParser.parseValueSource()",1,1,1
"org.apache.solr.search.FunctionQParser.parseValueSource(boolean)",7,10,17
"org.apache.solr.search.FunctionQParser.parseValueSourceList()",1,2,2
"org.apache.solr.search.FunctionQParser.setParseMultipleSources(boolean)",1,1,1
"org.apache.solr.search.FunctionQParser.setParseToEnd(boolean)",1,1,1
"org.apache.solr.search.FunctionQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.FunctionQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.FunctionRangeQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,2,2
"org.apache.solr.search.FunctionRangeQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.FunctionRangeQuery.FunctionRangeCollector.FunctionRangeCollector(Map)",1,1,1
"org.apache.solr.search.FunctionRangeQuery.FunctionRangeCollector.collect(int)",1,3,3
"org.apache.solr.search.FunctionRangeQuery.FunctionRangeCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.solr.search.FunctionRangeQuery.FunctionRangeQuery(ValueSourceRangeFilter)",1,1,1
"org.apache.solr.search.FunctionRangeQuery.getFilterCollector(IndexSearcher)",1,1,1
"org.apache.solr.search.Grouping.Command.addDocList(NamedList,GroupDocs)",1,1,1
"org.apache.solr.search.Grouping.Command.commonResponse()",1,2,3
"org.apache.solr.search.Grouping.Command.createAllGroupCollector()",1,1,1
"org.apache.solr.search.Grouping.Command.createSecondPassCollector()",1,1,1
"org.apache.solr.search.Grouping.Command.createSimpleResponse()",4,5,8
"org.apache.solr.search.Grouping.Command.getDocList(GroupDocs)",1,3,7
"org.apache.solr.search.Grouping.Command.getNumberOfGroups()",1,1,1
"org.apache.solr.search.Grouping.CommandField.createAllGroupCollector()",1,1,2
"org.apache.solr.search.Grouping.CommandField.createFirstPassCollector()",2,1,3
"org.apache.solr.search.Grouping.CommandField.createSecondPassCollector()",5,5,7
"org.apache.solr.search.Grouping.CommandField.finish()",5,6,8
"org.apache.solr.search.Grouping.CommandField.getMatches()",2,2,4
"org.apache.solr.search.Grouping.CommandField.getNumberOfGroups()",1,2,2
"org.apache.solr.search.Grouping.CommandField.prepare()",1,1,1
"org.apache.solr.search.Grouping.CommandQuery.createFirstPassCollector()",1,1,1
"org.apache.solr.search.Grouping.CommandQuery.finish()",1,2,2
"org.apache.solr.search.Grouping.CommandQuery.getMatches()",1,1,1
"org.apache.solr.search.Grouping.CommandQuery.newCollector(Sort,boolean)",2,2,3
"org.apache.solr.search.Grouping.CommandQuery.prepare()",1,1,1
"org.apache.solr.search.Grouping.Grouping(SolrIndexSearcher,QueryResult,QueryCommand,boolean,int,boolean)",1,1,1
"org.apache.solr.search.Grouping.add(Command)",1,1,1
"org.apache.solr.search.Grouping.addFieldCommand(String,SolrQueryRequest)",2,1,6
"org.apache.solr.search.Grouping.addQueryCommand(String,SolrQueryRequest)",1,1,3
"org.apache.solr.search.Grouping.execute()",6,25,34
"org.apache.solr.search.Grouping.getCommands()",1,1,1
"org.apache.solr.search.Grouping.getMax(int,int,int)",1,1,4
"org.apache.solr.search.Grouping.isSignalCacheWarning()",1,1,1
"org.apache.solr.search.Grouping.searchWithTimeLimiter(Filter,Collector)",1,4,4
"org.apache.solr.search.Grouping.setDefaultFormat(Format)",1,1,1
"org.apache.solr.search.Grouping.setDefaultTotalCount(TotalCount)",1,1,1
"org.apache.solr.search.Grouping.setDocsPerGroupDefault(int)",1,1,1
"org.apache.solr.search.Grouping.setGetGroupedDocSet(boolean)",1,1,1
"org.apache.solr.search.Grouping.setGroupOffsetDefault(int)",1,1,1
"org.apache.solr.search.Grouping.setGroupSort(Sort)",1,1,1
"org.apache.solr.search.Grouping.setLimitDefault(int)",1,1,1
"org.apache.solr.search.Grouping.setSort(Sort)",1,1,1
"org.apache.solr.search.HashDocSet.HashDocSet(int[],int,int)",1,1,1
"org.apache.solr.search.HashDocSet.HashDocSet(int[],int,int,float)",1,2,4
"org.apache.solr.search.HashDocSet.andNot(DocSet)",1,3,4
"org.apache.solr.search.HashDocSet.exists(int)",4,1,4
"org.apache.solr.search.HashDocSet.intersection(DocSet)",2,6,10
"org.apache.solr.search.HashDocSet.intersectionSize(DocSet)",2,6,10
"org.apache.solr.search.HashDocSet.iterator()",1,1,3
"org.apache.solr.search.HashDocSet.memSize()",1,1,1
"org.apache.solr.search.HashDocSet.put(int)",1,1,2
"org.apache.solr.search.HashDocSet.size()",1,1,1
"org.apache.solr.search.HashDocSet.union(DocSet)",2,4,9
"org.apache.solr.search.LFUCache.calcHitRatio(long,long)",4,1,4
"org.apache.solr.search.LFUCache.clear()",1,1,1
"org.apache.solr.search.LFUCache.close()",1,1,1
"org.apache.solr.search.LFUCache.get(K)",1,1,1
"org.apache.solr.search.LFUCache.getCategory()",1,1,1
"org.apache.solr.search.LFUCache.getDescription()",1,1,1
"org.apache.solr.search.LFUCache.getDocs()",1,1,1
"org.apache.solr.search.LFUCache.getName()",1,1,1
"org.apache.solr.search.LFUCache.getSource()",1,1,1
"org.apache.solr.search.LFUCache.getSourceId()",1,1,1
"org.apache.solr.search.LFUCache.getState()",1,1,1
"org.apache.solr.search.LFUCache.getStatistics()",2,4,6
"org.apache.solr.search.LFUCache.getVersion()",1,1,1
"org.apache.solr.search.LFUCache.init(Map,Object,CacheRegenerator)",1,10,13
"org.apache.solr.search.LFUCache.name()",1,1,1
"org.apache.solr.search.LFUCache.put(K,V)",1,1,1
"org.apache.solr.search.LFUCache.setState(State)",1,1,1
"org.apache.solr.search.LFUCache.size()",1,1,1
"org.apache.solr.search.LFUCache.toString()",1,1,1
"org.apache.solr.search.LFUCache.warm(SolrIndexSearcher,SolrCache)",5,5,8
"org.apache.solr.search.LRUCache.calcHitRatio(long,long)",4,1,4
"org.apache.solr.search.LRUCache.clear()",1,1,1
"org.apache.solr.search.LRUCache.close()",1,1,1
"org.apache.solr.search.LRUCache.get(K)",1,3,3
"org.apache.solr.search.LRUCache.getCategory()",1,1,1
"org.apache.solr.search.LRUCache.getDescription()",1,1,1
"org.apache.solr.search.LRUCache.getDocs()",1,1,1
"org.apache.solr.search.LRUCache.getName()",1,1,1
"org.apache.solr.search.LRUCache.getSource()",1,1,1
"org.apache.solr.search.LRUCache.getSourceId()",1,1,1
"org.apache.solr.search.LRUCache.getState()",1,1,1
"org.apache.solr.search.LRUCache.getStatistics()",1,1,1
"org.apache.solr.search.LRUCache.getVersion()",1,1,1
"org.apache.solr.search.LRUCache.init(Map,Object,CacheRegenerator)",2,5,7
"org.apache.solr.search.LRUCache.name()",1,1,1
"org.apache.solr.search.LRUCache.put(K,V)",1,2,2
"org.apache.solr.search.LRUCache.setState(State)",1,1,1
"org.apache.solr.search.LRUCache.size()",1,1,1
"org.apache.solr.search.LRUCache.toString()",1,1,1
"org.apache.solr.search.LRUCache.warm(SolrIndexSearcher,SolrCache<K, V>)",5,7,9
"org.apache.solr.search.LongConstValueSource.LongConstValueSource(long)",1,1,1
"org.apache.solr.search.LongConstValueSource.description()",1,1,1
"org.apache.solr.search.LongConstValueSource.equals(Object)",2,1,2
"org.apache.solr.search.LongConstValueSource.getDouble()",1,1,1
"org.apache.solr.search.LongConstValueSource.getFloat()",1,1,1
"org.apache.solr.search.LongConstValueSource.getInt()",1,1,1
"org.apache.solr.search.LongConstValueSource.getLong()",1,1,1
"org.apache.solr.search.LongConstValueSource.getNumber()",1,1,1
"org.apache.solr.search.LongConstValueSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.LongConstValueSource.hashCode()",1,1,1
"org.apache.solr.search.LuceneQParser.LuceneQParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.LuceneQParser.getDefaultHighlightFields()",1,2,2
"org.apache.solr.search.LuceneQParser.parse()",2,4,7
"org.apache.solr.search.LuceneQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.LuceneQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.LuceneQueryOptimizer.LuceneQueryOptimizer(int,float)",1,1,1
"org.apache.solr.search.LuceneQueryOptimizer.optimize(BooleanQuery,Searcher,int,Query[],Filter[])",2,9,11
"org.apache.solr.search.MissingLastOrdComparator.MissingLastOrdComparator(int,String,int,boolean,String)",1,1,1
"org.apache.solr.search.MissingLastOrdComparator.compare(int,int)",6,1,6
"org.apache.solr.search.MissingLastOrdComparator.compareBottom(int)",3,1,4
"org.apache.solr.search.MissingLastOrdComparator.compareValues(String,String)",4,3,4
"org.apache.solr.search.MissingLastOrdComparator.convert(int)",2,3,7
"org.apache.solr.search.MissingLastOrdComparator.copy(int,int)",1,1,2
"org.apache.solr.search.MissingLastOrdComparator.getBottomSlot()",1,1,1
"org.apache.solr.search.MissingLastOrdComparator.getField()",1,1,1
"org.apache.solr.search.MissingLastOrdComparator.getValues()",1,1,1
"org.apache.solr.search.MissingLastOrdComparator.setBottom(int)",1,2,2
"org.apache.solr.search.MissingLastOrdComparator.setNextReader(IndexReader,int)",1,2,2
"org.apache.solr.search.MissingLastOrdComparator.value(int)",1,1,2
"org.apache.solr.search.MissingStringLastComparatorSource.MissingStringLastComparatorSource()",1,1,1
"org.apache.solr.search.MissingStringLastComparatorSource.MissingStringLastComparatorSource(String)",1,1,1
"org.apache.solr.search.MissingStringLastComparatorSource.newComparator(String,int,int,boolean)",1,1,1
"org.apache.solr.search.NamedParser.NamedParser(String)",1,1,1
"org.apache.solr.search.NamedParser.name()",1,1,1
"org.apache.solr.search.NestedQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.NestedQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.OldLuceneQParser.OldLuceneQParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.OldLuceneQParser.getSort(boolean)",1,4,5
"org.apache.solr.search.OldLuceneQParser.parse()",7,6,8
"org.apache.solr.search.OldLuceneQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.OldLuceneQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.PrefixFilter.PrefixFilter(Term)",1,1,1
"org.apache.solr.search.PrefixFilter.equals(Object)",1,2,2
"org.apache.solr.search.PrefixFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.solr.search.PrefixFilter.getPrefix()",1,1,1
"org.apache.solr.search.PrefixFilter.hashCode()",1,1,1
"org.apache.solr.search.PrefixFilter.toString()",1,1,1
"org.apache.solr.search.PrefixGenerator.PrefixGenerator(Term)",1,1,1
"org.apache.solr.search.PrefixGenerator.generate(IndexReader)",3,6,6
"org.apache.solr.search.PrefixQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.PrefixQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.QParser.QParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,6,6
"org.apache.solr.search.QParser.addDebugInfo(NamedList<Object>)",1,1,1
"org.apache.solr.search.QParser.addTag(Map,Object,Object)",1,2,2
"org.apache.solr.search.QParser.checkRecurse()",2,1,2
"org.apache.solr.search.QParser.extendedQuery()",2,1,2
"org.apache.solr.search.QParser.getDefaultHighlightFields()",1,1,1
"org.apache.solr.search.QParser.getHighlightQuery()",1,2,2
"org.apache.solr.search.QParser.getLocalParams()",1,1,1
"org.apache.solr.search.QParser.getParam(String)",3,2,3
"org.apache.solr.search.QParser.getParams()",1,1,1
"org.apache.solr.search.QParser.getParser(String,String,SolrQueryRequest)",1,5,6
"org.apache.solr.search.QParser.getQuery()",1,8,8
"org.apache.solr.search.QParser.getReq()",1,1,1
"org.apache.solr.search.QParser.getSort(boolean)",1,9,12
"org.apache.solr.search.QParser.getString()",1,1,1
"org.apache.solr.search.QParser.setLocalParams(SolrParams)",1,1,1
"org.apache.solr.search.QParser.setParams(SolrParams)",1,1,1
"org.apache.solr.search.QParser.setReq(SolrQueryRequest)",1,1,1
"org.apache.solr.search.QParser.setString(String)",1,1,1
"org.apache.solr.search.QParser.subQuery(String,String)",1,2,3
"org.apache.solr.search.QueryParsing.StrParser.StrParser(String)",1,1,1
"org.apache.solr.search.QueryParsing.StrParser.StrParser(String,int,int)",1,1,1
"org.apache.solr.search.QueryParsing.StrParser.ch()",1,2,2
"org.apache.solr.search.QueryParsing.StrParser.eatws()",1,2,3
"org.apache.solr.search.QueryParsing.StrParser.expect(String)",2,1,2
"org.apache.solr.search.QueryParsing.StrParser.getDouble()",3,2,9
"org.apache.solr.search.QueryParsing.StrParser.getFloat()",3,2,9
"org.apache.solr.search.QueryParsing.StrParser.getId()",1,1,1
"org.apache.solr.search.QueryParsing.StrParser.getId(String)",5,6,8
"org.apache.solr.search.QueryParsing.StrParser.getInt()",3,2,6
"org.apache.solr.search.QueryParsing.StrParser.getNumber()",4,3,10
"org.apache.solr.search.QueryParsing.StrParser.getQuotedString()",9,4,15
"org.apache.solr.search.QueryParsing.StrParser.getSimpleString()",3,2,3
"org.apache.solr.search.QueryParsing.StrParser.getSortDirection()",1,5,9
"org.apache.solr.search.QueryParsing.StrParser.opt(String)",2,1,2
"org.apache.solr.search.QueryParsing.StrParser.opt(char)",2,1,2
"org.apache.solr.search.QueryParsing.StrParser.peek()",1,2,2
"org.apache.solr.search.QueryParsing.StrParser.peekChar()",1,2,2
"org.apache.solr.search.QueryParsing.StrParser.skip(int)",1,1,1
"org.apache.solr.search.QueryParsing.StrParser.toString()",1,1,1
"org.apache.solr.search.QueryParsing.encodeLocalParamVal(String)",5,7,9
"org.apache.solr.search.QueryParsing.getLocalParams(String,SolrParams)",2,3,4
"org.apache.solr.search.QueryParsing.parseFunction(String,IndexSchema)",1,1,1
"org.apache.solr.search.QueryParsing.parseLocalParams(String,int,Map<String, String>,SolrParams)",10,11,16
"org.apache.solr.search.QueryParsing.parseQuery(String,IndexSchema)",1,1,1
"org.apache.solr.search.QueryParsing.parseQuery(String,String,IndexSchema)",1,3,3
"org.apache.solr.search.QueryParsing.parseQuery(String,String,SolrParams,IndexSchema)",1,4,5
"org.apache.solr.search.QueryParsing.parseSort(String,SolrQueryRequest)",11,13,24
"org.apache.solr.search.QueryParsing.toString(List<Query>,IndexSchema)",1,2,2
"org.apache.solr.search.QueryParsing.toString(Query,IndexSchema)",1,1,2
"org.apache.solr.search.QueryParsing.toString(Query,IndexSchema,Appendable,int)",1,26,32
"org.apache.solr.search.QueryParsing.writeFieldName(String,IndexSchema,Appendable,int)",1,2,2
"org.apache.solr.search.QueryParsing.writeFieldVal(String,FieldType,Appendable,int)",1,3,3
"org.apache.solr.search.QueryParsingTest.beforeClass()",1,1,1
"org.apache.solr.search.QueryParsingTest.testBad()",1,1,7
"org.apache.solr.search.QueryParsingTest.testQParserEmptyInput()",3,3,4
"org.apache.solr.search.QueryParsingTest.testSort()",1,1,1
"org.apache.solr.search.QueryResultKey.QueryResultKey(Query,List<Query>,Sort,int)",1,4,4
"org.apache.solr.search.QueryResultKey.equals(Object)",9,2,9
"org.apache.solr.search.QueryResultKey.hashCode()",1,1,1
"org.apache.solr.search.QueryResultKey.isEqual(Object,Object)",3,1,4
"org.apache.solr.search.QueryUtils.fixNegativeQuery(Query)",1,1,1
"org.apache.solr.search.QueryUtils.getAbs(Query)",8,5,9
"org.apache.solr.search.QueryUtils.isNegative(Query)",5,2,5
"org.apache.solr.search.QueryUtils.makeQueryable(Query)",2,3,3
"org.apache.solr.search.RawQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.RawQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantScorer.ConstantScorer(Similarity,IndexReader,ConstantWeight)",1,4,4
"org.apache.solr.search.SolrConstantScoreQuery.ConstantScorer.advance(int)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantScorer.docID()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantScorer.explain(int)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantScorer.nextDoc()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantScorer.score()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantWeight.ConstantWeight(Searcher)",1,2,2
"org.apache.solr.search.SolrConstantScoreQuery.ConstantWeight.explain(IndexReader,int)",1,2,2
"org.apache.solr.search.SolrConstantScoreQuery.ConstantWeight.getQuery()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantWeight.getValue()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantWeight.normalize(float)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantWeight.scorer(IndexReader,boolean,boolean)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.ConstantWeight.sumOfSquaredWeights()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.SolrConstantScoreQuery(Filter)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.createWeight(Searcher)",1,1,2
"org.apache.solr.search.SolrConstantScoreQuery.equals(Object)",3,2,4
"org.apache.solr.search.SolrConstantScoreQuery.extractTerms(Set)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.getCache()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.getCacheSep()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.getCost()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.getFilter()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.hashCode()",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.rewrite(IndexReader)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.setCache(boolean)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.setCacheSep(boolean)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.setCost(int)",1,1,1
"org.apache.solr.search.SolrConstantScoreQuery.toString(String)",1,2,2
"org.apache.solr.search.SolrFieldCacheMBean.getCategory()",1,1,1
"org.apache.solr.search.SolrFieldCacheMBean.getDescription()",1,1,1
"org.apache.solr.search.SolrFieldCacheMBean.getDocs()",1,1,1
"org.apache.solr.search.SolrFieldCacheMBean.getName()",1,1,1
"org.apache.solr.search.SolrFieldCacheMBean.getSource()",1,1,1
"org.apache.solr.search.SolrFieldCacheMBean.getSourceId()",1,1,1
"org.apache.solr.search.SolrFieldCacheMBean.getStatistics()",1,3,3
"org.apache.solr.search.SolrFieldCacheMBean.getVersion()",1,1,1
"org.apache.solr.search.SolrFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.solr.search.SolrIndexReader.SolrIndexReader(IndexReader,SolrIndexReader,int)",1,3,3
"org.apache.solr.search.SolrIndexReader.associateInfo(SolrIndexReader)",1,1,1
"org.apache.solr.search.SolrIndexReader.buildInfoMap(SolrIndexReader,HashMap<IndexReader, SolrReaderInfo>)",3,2,4
"org.apache.solr.search.SolrIndexReader.clone()",1,1,1
"org.apache.solr.search.SolrIndexReader.clone(boolean)",1,1,1
"org.apache.solr.search.SolrIndexReader.directory()",1,1,1
"org.apache.solr.search.SolrIndexReader.doClose()",1,1,1
"org.apache.solr.search.SolrIndexReader.doDelete(int)",1,1,1
"org.apache.solr.search.SolrIndexReader.doSetNorm(int,String,byte)",1,1,1
"org.apache.solr.search.SolrIndexReader.doUndeleteAll()",1,1,1
"org.apache.solr.search.SolrIndexReader.docFreq(Term)",1,1,1
"org.apache.solr.search.SolrIndexReader.document(int,FieldSelector)",1,1,1
"org.apache.solr.search.SolrIndexReader.equals(Object)",1,1,2
"org.apache.solr.search.SolrIndexReader.getBase()",1,1,1
"org.apache.solr.search.SolrIndexReader.getCommitUserData()",1,1,1
"org.apache.solr.search.SolrIndexReader.getCoreCacheKey()",1,1,1
"org.apache.solr.search.SolrIndexReader.getFieldInfos()",1,1,1
"org.apache.solr.search.SolrIndexReader.getIndexCommit()",1,1,1
"org.apache.solr.search.SolrIndexReader.getLeafOffsets()",1,1,1
"org.apache.solr.search.SolrIndexReader.getLeafReaders()",1,1,1
"org.apache.solr.search.SolrIndexReader.getLeaves(int)",2,5,7
"org.apache.solr.search.SolrIndexReader.getParent()",1,1,1
"org.apache.solr.search.SolrIndexReader.getSequentialSubReaders()",1,1,1
"org.apache.solr.search.SolrIndexReader.getTermFreqVector(int,String)",1,1,1
"org.apache.solr.search.SolrIndexReader.getTermFreqVector(int,String,TermVectorMapper)",1,1,1
"org.apache.solr.search.SolrIndexReader.getTermFreqVector(int,TermVectorMapper)",1,1,1
"org.apache.solr.search.SolrIndexReader.getTermFreqVectors(int)",1,1,1
"org.apache.solr.search.SolrIndexReader.getTermInfosIndexDivisor()",1,1,1
"org.apache.solr.search.SolrIndexReader.getUniqueTermCount()",1,1,1
"org.apache.solr.search.SolrIndexReader.getVersion()",1,1,1
"org.apache.solr.search.SolrIndexReader.getWrappedReader()",1,1,1
"org.apache.solr.search.SolrIndexReader.hasDeletions()",1,1,1
"org.apache.solr.search.SolrIndexReader.hasNorms(String)",1,1,1
"org.apache.solr.search.SolrIndexReader.hashCode()",1,1,1
"org.apache.solr.search.SolrIndexReader.isCurrent()",1,1,1
"org.apache.solr.search.SolrIndexReader.isDeleted(int)",1,1,1
"org.apache.solr.search.SolrIndexReader.isOptimized()",1,1,1
"org.apache.solr.search.SolrIndexReader.maxDoc()",1,1,1
"org.apache.solr.search.SolrIndexReader.norms(String)",1,1,1
"org.apache.solr.search.SolrIndexReader.norms(String,byte[],int)",1,1,1
"org.apache.solr.search.SolrIndexReader.numDocs()",1,1,1
"org.apache.solr.search.SolrIndexReader.readerIndex(int,int[])",5,1,6
"org.apache.solr.search.SolrIndexReader.reopen()",1,1,1
"org.apache.solr.search.SolrIndexReader.reopen(IndexCommit)",1,1,1
"org.apache.solr.search.SolrIndexReader.reopen(boolean)",2,1,2
"org.apache.solr.search.SolrIndexReader.setInfo(SolrIndexReader,HashMap<IndexReader, SolrReaderInfo>)",2,3,4
"org.apache.solr.search.SolrIndexReader.setSearcher(SolrIndexReader,SolrIndexSearcher)",2,2,3
"org.apache.solr.search.SolrIndexReader.shortName(Object)",1,1,1
"org.apache.solr.search.SolrIndexReader.termDocs()",1,1,1
"org.apache.solr.search.SolrIndexReader.termDocs(Term)",1,1,1
"org.apache.solr.search.SolrIndexReader.termPositions()",1,1,1
"org.apache.solr.search.SolrIndexReader.terms()",1,1,1
"org.apache.solr.search.SolrIndexReader.terms(Term)",1,1,1
"org.apache.solr.search.SolrIndexReader.toString()",1,2,3
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.clearFlags(int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getFilter()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getFilterList()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getFlags()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getLen()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getOffset()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getQuery()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getSort()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getSupersetMaxDoc()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.getTimeAllowed()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.isNeedDocSet()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.replaceFlags(int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setFilter(DocSet)",2,1,2
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setFilterList(List<Query>)",2,1,2
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setFilterList(Query)",2,2,3
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setFlags(int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setLen(int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setNeedDocSet(boolean)",1,2,2
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setOffset(int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setQuery(Query)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setSort(Sort)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setSupersetMaxDoc(int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryCommand.setTimeAllowed(long)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryResult.getDocList()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryResult.getDocListAndSet()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryResult.getDocSet()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryResult.isPartialResults()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryResult.setDocList(DocList)",1,1,2
"org.apache.solr.search.SolrIndexSearcher.QueryResult.setDocListAndSet(DocListAndSet)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.QueryResult.setDocSet(DocSet)",1,1,2
"org.apache.solr.search.SolrIndexSearcher.QueryResult.setPartialResults(boolean)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.SetNonLazyFieldSelector.SetNonLazyFieldSelector(Set<String>)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.SetNonLazyFieldSelector.accept(String)",2,1,2
"org.apache.solr.search.SolrIndexSearcher.SolrIndexSearcher(SolrCore,IndexSchema,String,Directory,boolean)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.SolrIndexSearcher(SolrCore,IndexSchema,String,Directory,boolean,boolean)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.SolrIndexSearcher(SolrCore,IndexSchema,String,IndexReader,boolean,boolean)",1,16,17
"org.apache.solr.search.SolrIndexSearcher.SolrIndexSearcher(SolrCore,IndexSchema,String,String,boolean)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.cacheDocSet(Query,DocSet,boolean)",2,3,3
"org.apache.solr.search.SolrIndexSearcher.cacheInsert(String,Object,Object)",1,2,2
"org.apache.solr.search.SolrIndexSearcher.cacheLookup(String,Object)",1,2,2
"org.apache.solr.search.SolrIndexSearcher.close()",1,5,5
"org.apache.solr.search.SolrIndexSearcher.convertFilter(Filter)",1,2,2
"org.apache.solr.search.SolrIndexSearcher.doc(int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.doc(int,FieldSelector)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.doc(int,Set<String>)",3,4,6
"org.apache.solr.search.SolrIndexSearcher.explain(Query,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getCache(String)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getCategory()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getCore()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDescription()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocList(Query,DocSet,Sort,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocList(Query,List<Query>,Sort,int,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocList(Query,Query,Sort,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocListAndSet(Query,DocSet,Sort,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocListAndSet(Query,DocSet,Sort,int,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocListAndSet(Query,List<Query>,Sort,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocListAndSet(Query,List<Query>,Sort,int,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocListAndSet(Query,Query,Sort,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocListAndSet(Query,Query,Sort,int,int,int)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getDocListAndSetNC(QueryResult,QueryCommand)",1,14,21
"org.apache.solr.search.SolrIndexSearcher.getDocListC(QueryResult,QueryCommand)",7,29,35
"org.apache.solr.search.SolrIndexSearcher.getDocListNC(QueryResult,QueryCommand)",1,13,19
"org.apache.solr.search.SolrIndexSearcher.getDocSet(List<Query>)",10,8,12
"org.apache.solr.search.SolrIndexSearcher.getDocSet(Query)",6,9,9
"org.apache.solr.search.SolrIndexSearcher.getDocSet(Query,DocSet)",5,9,9
"org.apache.solr.search.SolrIndexSearcher.getDocSetNC(Query,DocSet)",6,6,7
"org.apache.solr.search.SolrIndexSearcher.getDocSetNC(Query,DocSet,TermDocsState)",4,8,9
"org.apache.solr.search.SolrIndexSearcher.getDocs()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getFieldNames()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getFieldValueCache()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getFirstMatch(Term)",2,2,3
"org.apache.solr.search.SolrIndexSearcher.getIndexDir()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getName()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getOpenTime()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getPositiveDocSet(Query)",3,3,4
"org.apache.solr.search.SolrIndexSearcher.getPositiveDocSet(Query,TermDocsState)",3,3,4
"org.apache.solr.search.SolrIndexSearcher.getProcessedFilter(DocSet,List<Query>)",5,23,29
"org.apache.solr.search.SolrIndexSearcher.getReader()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getSchema()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getSource()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getSourceId()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.getStatistics()",1,2,2
"org.apache.solr.search.SolrIndexSearcher.getStoredHighlightFieldNames()",1,7,7
"org.apache.solr.search.SolrIndexSearcher.getVersion()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.initRegenerators(SolrConfig)",1,9,9
"org.apache.solr.search.SolrIndexSearcher.numDocs(Query,DocSet)",1,2,2
"org.apache.solr.search.SolrIndexSearcher.numDocs(Query,Query)",4,4,4
"org.apache.solr.search.SolrIndexSearcher.readDocs(DocList)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.readDocs(Document[],DocList)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.readDocs(Document[],DocList,Set<String>)",1,2,2
"org.apache.solr.search.SolrIndexSearcher.register()",1,2,2
"org.apache.solr.search.SolrIndexSearcher.search(QueryResult,QueryCommand)",1,1,1
"org.apache.solr.search.SolrIndexSearcher.sortDocSet(DocSet,Sort,int)",1,3,5
"org.apache.solr.search.SolrIndexSearcher.toString()",1,1,1
"org.apache.solr.search.SolrIndexSearcher.warm(SolrIndexSearcher)",1,4,4
"org.apache.solr.search.SolrIndexSearcher.weightSort(Sort)",5,3,7
"org.apache.solr.search.SolrIndexSearcher.wrap(IndexReader)",1,2,2
"org.apache.solr.search.SolrQueryParser.MagicFieldName.MagicFieldName(String,String)",1,1,1
"org.apache.solr.search.SolrQueryParser.MagicFieldName.get(String)",1,1,1
"org.apache.solr.search.SolrQueryParser.MagicFieldName.toString()",1,1,1
"org.apache.solr.search.SolrQueryParser.SolrQueryParser(IndexSchema,String)",1,2,2
"org.apache.solr.search.SolrQueryParser.SolrQueryParser(QParser,String)",1,1,1
"org.apache.solr.search.SolrQueryParser.SolrQueryParser(QParser,String,Analyzer)",1,1,1
"org.apache.solr.search.SolrQueryParser.analyzeIfMultitermTermText(String,String,FieldType)",3,1,4
"org.apache.solr.search.SolrQueryParser.checkNullField(String)",2,1,3
"org.apache.solr.search.SolrQueryParser.getFieldQuery(String,String,boolean)",5,7,7
"org.apache.solr.search.SolrQueryParser.getPrefixQuery(String,String)",1,2,2
"org.apache.solr.search.SolrQueryParser.getRangeQuery(String,String,String,boolean)",1,1,1
"org.apache.solr.search.SolrQueryParser.getReversedWildcardFilterFactory(FieldType)",5,3,7
"org.apache.solr.search.SolrQueryParser.getWildcardQuery(String,String)",2,5,5
"org.apache.solr.search.SolrReaderInfo.SolrReaderInfo(IndexReader)",1,1,1
"org.apache.solr.search.SolrReaderInfo.getReader()",1,1,1
"org.apache.solr.search.SortSpec.SortSpec(Sort,int)",1,1,1
"org.apache.solr.search.SortSpec.SortSpec(Sort,int,int)",1,1,1
"org.apache.solr.search.SortSpec.getCount()",1,1,1
"org.apache.solr.search.SortSpec.getOffset()",1,1,1
"org.apache.solr.search.SortSpec.getSort()",1,1,1
"org.apache.solr.search.SortSpec.includesScore()",1,1,1
"org.apache.solr.search.SortSpec.includesScore(Sort)",4,2,4
"org.apache.solr.search.SortSpec.setSort(Sort)",1,1,1
"org.apache.solr.search.SortSpec.toString()",1,1,2
"org.apache.solr.search.SortedIntDocSet.SortedIntDocSet(int[])",1,1,1
"org.apache.solr.search.SortedIntDocSet.SortedIntDocSet(int[],int)",1,1,1
"org.apache.solr.search.SortedIntDocSet.andNot(DocSet)",3,3,5
"org.apache.solr.search.SortedIntDocSet.andNot(int[],int,int[],int,int[])",11,4,12
"org.apache.solr.search.SortedIntDocSet.andNotBinarySearch(int[],int,int[],int,int[])",5,1,9
"org.apache.solr.search.SortedIntDocSet.exists(int)",4,1,4
"org.apache.solr.search.SortedIntDocSet.findIndex(int[],int,int,int)",4,1,4
"org.apache.solr.search.SortedIntDocSet.firstNonSorted(int[],int,int)",6,1,6
"org.apache.solr.search.SortedIntDocSet.getBits()",1,3,3
"org.apache.solr.search.SortedIntDocSet.getDocs()",1,1,1
"org.apache.solr.search.SortedIntDocSet.getTopFilter()",7,3,14
"org.apache.solr.search.SortedIntDocSet.intersection(DocSet)",2,3,4
"org.apache.solr.search.SortedIntDocSet.intersection(int[],int,int[],int,int[])",10,2,11
"org.apache.solr.search.SortedIntDocSet.intersectionBinarySearch(int[],int,int[],int,int[])",5,1,9
"org.apache.solr.search.SortedIntDocSet.intersectionSize(DocSet)",11,4,15
"org.apache.solr.search.SortedIntDocSet.intersectionSize(int[],int[])",5,1,9
"org.apache.solr.search.SortedIntDocSet.iterator()",1,1,1
"org.apache.solr.search.SortedIntDocSet.memSize()",1,1,1
"org.apache.solr.search.SortedIntDocSet.shrink(int[],int)",2,1,2
"org.apache.solr.search.SortedIntDocSet.size()",1,1,1
"org.apache.solr.search.Sorting.getStringSortField(String,boolean,boolean,boolean)",5,1,5
"org.apache.solr.search.SpatialBoxQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.SpatialBoxQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.SpatialFilterQParser.SpatialFilterQParser(String,SolrParams,SolrParams,SolrQueryRequest,boolean)",1,1,1
"org.apache.solr.search.SpatialFilterQParser.parse()",7,5,9
"org.apache.solr.search.SpatialFilterQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,1,1
"org.apache.solr.search.SpatialFilterQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.SpatialFilterTest.beforeClass()",1,1,1
"org.apache.solr.search.SpatialFilterTest.checkHits(String,String,double,int,int...)",1,1,1
"org.apache.solr.search.SpatialFilterTest.checkHits(String,boolean,String,double,int,int...)",1,1,7
"org.apache.solr.search.SpatialFilterTest.setupDocs(String)",1,1,1
"org.apache.solr.search.SpatialFilterTest.testGeoHash()",1,1,1
"org.apache.solr.search.SpatialFilterTest.testLatLonType()",1,1,1
"org.apache.solr.search.SpatialFilterTest.testPoints()",1,1,1
"org.apache.solr.search.SpatialOptions.SpatialOptions()",1,1,1
"org.apache.solr.search.SpatialOptions.SpatialOptions(String,double,SchemaField,String,double)",1,1,1
"org.apache.solr.search.SpatialOptions.SpatialOptions(String,double,SchemaField,String,double,DistanceUnits)",1,1,1
"org.apache.solr.search.TermQParserPlugin.createParser(String,SolrParams,SolrParams,SolrQueryRequest)",1,2,2
"org.apache.solr.search.TermQParserPlugin.init(NamedList)",1,1,1
"org.apache.solr.search.TestDocSet.checkEqual(OpenBitSet,DocSet)",1,2,2
"org.apache.solr.search.TestDocSet.doFilterTest(SolrIndexReader)",1,3,3
"org.apache.solr.search.TestDocSet.doMany(int,int)",1,2,2
"org.apache.solr.search.TestDocSet.doSingle(int)",1,1,1
"org.apache.solr.search.TestDocSet.doTestIteratorEqual(DocIdSet,DocIdSet)",6,5,7
"org.apache.solr.search.TestDocSet.dummyIndexReader(int)",1,1,1
"org.apache.solr.search.TestDocSet.dummyMultiReader(int,int)",2,4,4
"org.apache.solr.search.TestDocSet.getBitDocSet(OpenBitSet)",1,1,1
"org.apache.solr.search.TestDocSet.getDocSet(OpenBitSet)",11,11,11
"org.apache.solr.search.TestDocSet.getDocSlice(OpenBitSet)",1,2,2
"org.apache.solr.search.TestDocSet.getHashDocSet(OpenBitSet)",1,2,2
"org.apache.solr.search.TestDocSet.getIntDocSet(OpenBitSet)",1,2,2
"org.apache.solr.search.TestDocSet.getRandomDocSet(int,int)",7,6,8
"org.apache.solr.search.TestDocSet.getRandomSet(int,int)",2,2,3
"org.apache.solr.search.TestDocSet.getRandomSets(int,int,int,int)",1,2,2
"org.apache.solr.search.TestDocSet.iter(DocSet,DocSet)",4,2,7
"org.apache.solr.search.TestDocSet.testFilter()",1,2,2
"org.apache.solr.search.TestDocSet.testRandomDocSets()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.getSchemaFile()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.getSolrConfigFile()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.setUp()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.tearDown()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.testAliasing()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.testAliasingBoost()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.testCyclicAliasing()",1,6,6
"org.apache.solr.search.TestExtendedDismaxParser.testFocusQueryParser()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.testOperatorsWithLiteralColons()",1,1,1
"org.apache.solr.search.TestExtendedDismaxParser.testUserFields()",1,1,1
"org.apache.solr.search.TestFastLRUCache.cachePerfTest(SolrCache,int,int,int,int)",1,6,6
"org.apache.solr.search.TestFastLRUCache.doPerfTest(int,int,int)",1,2,6
"org.apache.solr.search.TestFastLRUCache.fillCache(SolrCache,int,int)",1,2,2
"org.apache.solr.search.TestFastLRUCache.perfTestBoth(int,int,int,int)",1,1,1
"org.apache.solr.search.TestFastLRUCache.testOldestItems()",1,2,2
"org.apache.solr.search.TestFastLRUCache.testSimple()",1,2,2
"org.apache.solr.search.TestFastLRUCache.useCache(SolrCache,int,int,int)",1,3,3
"org.apache.solr.search.TestFiltering.Model.clear()",1,1,1
"org.apache.solr.search.TestFiltering.beforeTests()",1,1,1
"org.apache.solr.search.TestFiltering.frangeStr(boolean,int,int,boolean,int,boolean)",1,4,9
"org.apache.solr.search.TestFiltering.makeRandomQuery(Model,boolean,boolean)",4,17,28
"org.apache.solr.search.TestFiltering.testCaching()",1,1,1
"org.apache.solr.search.TestFiltering.testRandomFiltering()",1,13,17
"org.apache.solr.search.TestFoldingMultitermQuery.beforeTests()",1,2,3
"org.apache.solr.search.TestFoldingMultitermQuery.getCoreName()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testArabic()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testCJKWidth()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testCharFilter()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testGeneral()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testGerman()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testGreek()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testHindi()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testISOLatin()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testLowerTokenizer()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testMultiBad()",1,2,2
"org.apache.solr.search.TestFoldingMultitermQuery.testNonTextTypes()",1,2,2
"org.apache.solr.search.TestFoldingMultitermQuery.testPersian()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testPhrase()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testPrefixCaseAccentFolding()",1,5,5
"org.apache.solr.search.TestFoldingMultitermQuery.testRangeQuery()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testRussian()",1,1,1
"org.apache.solr.search.TestFoldingMultitermQuery.testWildcardCaseAccentFolding()",1,3,3
"org.apache.solr.search.TestFoldingMultitermQuery.testWildcardRange()",1,1,1
"org.apache.solr.search.TestIndexSearcher.beforeClass()",1,1,1
"org.apache.solr.search.TestIndexSearcher.getStringVal(SolrQueryRequest,String,int)",1,1,1
"org.apache.solr.search.TestIndexSearcher.testReopen()",1,1,1
"org.apache.solr.search.TestLFUCache.LFURegenerator.regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object)",1,1,1
"org.apache.solr.search.TestLFUCache.addCache(LFUCache,int...)",1,2,2
"org.apache.solr.search.TestLFUCache.assertCache(LFUCache,int...)",1,3,3
"org.apache.solr.search.TestLFUCache.assertNotCache(LFUCache,int...)",1,3,3
"org.apache.solr.search.TestLFUCache.beforeClass()",1,1,1
"org.apache.solr.search.TestLFUCache.testItemOrdering()",1,3,3
"org.apache.solr.search.TestLFUCache.testSimple()",1,5,5
"org.apache.solr.search.TestLFUCache.testTimeDecay()",1,8,8
"org.apache.solr.search.TestLFUCache.testTimeDecayParams()",1,5,5
"org.apache.solr.search.TestLFUCache.testTimeNoDecay()",1,6,6
"org.apache.solr.search.TestQueryTypes.getCoreName()",1,1,1
"org.apache.solr.search.TestQueryTypes.getSchemaFile()",1,1,1
"org.apache.solr.search.TestQueryTypes.getSolrConfigFile()",1,1,1
"org.apache.solr.search.TestQueryTypes.setUp()",1,1,1
"org.apache.solr.search.TestQueryTypes.tearDown()",1,1,1
"org.apache.solr.search.TestQueryTypes.testQueryTypes()",1,4,4
"org.apache.solr.search.TestQueryUtils.getSchemaFile()",1,1,1
"org.apache.solr.search.TestQueryUtils.getSolrConfigFile()",1,1,1
"org.apache.solr.search.TestQueryUtils.negative(Query)",1,1,1
"org.apache.solr.search.TestQueryUtils.positive(Query)",1,4,4
"org.apache.solr.search.TestQueryUtils.setUp()",1,1,1
"org.apache.solr.search.TestQueryUtils.tearDown()",1,1,1
"org.apache.solr.search.TestQueryUtils.testNegativeQueries()",1,1,1
"org.apache.solr.search.TestRangeQuery.addInt(SolrInputDocument,int,int,String...)",1,3,4
"org.apache.solr.search.TestRangeQuery.beforeClass()",1,1,1
"org.apache.solr.search.TestRangeQuery.createIndex(int,DocProcessor)",1,2,2
"org.apache.solr.search.TestRangeQuery.sameDocs(DocSet,DocSet)",1,2,2
"org.apache.solr.search.TestRangeQuery.setUp()",1,1,1
"org.apache.solr.search.TestRangeQuery.testRandomRangeQueries()",1,8,16
"org.apache.solr.search.TestRangeQuery.testRangeQueries()",1,5,5
"org.apache.solr.search.TestSearchPerf.XtestFilteringPerformance()",1,1,1
"org.apache.solr.search.TestSearchPerf.XtestRangePerformance()",1,1,1
"org.apache.solr.search.TestSearchPerf.XtestSetGenerationPerformance()",1,1,1
"org.apache.solr.search.TestSearchPerf.createIndex(int)",1,2,2
"org.apache.solr.search.TestSearchPerf.createIndex2(int,String...)",1,9,9
"org.apache.solr.search.TestSearchPerf.doListGen(int,Query,List<Query>,boolean,boolean)",1,2,4
"org.apache.solr.search.TestSearchPerf.doSetGen(int,Query)",1,2,2
"org.apache.solr.search.TestSearchPerf.getSchemaFile()",1,1,1
"org.apache.solr.search.TestSearchPerf.getSolrConfigFile()",1,1,1
"org.apache.solr.search.TestSearchPerf.setUp()",1,1,1
"org.apache.solr.search.TestSearchPerf.t(int)",1,1,1
"org.apache.solr.search.TestSearchPerf.tearDown()",1,1,1
"org.apache.solr.search.TestSearchPerf.testEmpty()",1,1,1
"org.apache.solr.search.TestSolrQueryParser.beforeClass()",1,1,1
"org.apache.solr.search.TestSolrQueryParser.createIndex()",1,1,1
"org.apache.solr.search.TestSolrQueryParser.testPhrase()",1,1,1
"org.apache.solr.search.TestSort.MyDoc.toString()",1,1,1
"org.apache.solr.search.TestSort.beforeClass()",1,1,1
"org.apache.solr.search.TestSort.randSet(int)",1,2,2
"org.apache.solr.search.TestSort.testRandomFieldNameSorts()",2,8,12
"org.apache.solr.search.TestSort.testSort()",5,17,38
"org.apache.solr.search.TestValueSourceCache.beforeClass()",1,1,1
"org.apache.solr.search.TestValueSourceCache.testGeodistSource()",1,2,2
"org.apache.solr.search.TestValueSourceCache.testNumerics()",1,4,4
"org.apache.solr.search.TestValueSourceCache.tryQueryDiffTypes(String,String,String[])",1,3,3
"org.apache.solr.search.TestValueSourceCache.tryQuerySameTypes(String,String,String)",1,3,3
"org.apache.solr.search.ValueSourceParser.addParser(NamedParser)",1,1,1
"org.apache.solr.search.ValueSourceParser.addParser(String,ValueSourceParser)",1,1,1
"org.apache.solr.search.ValueSourceParser.alias(String,String)",1,1,1
"org.apache.solr.search.ValueSourceParser.getMultiValueSources(List<ValueSource>)",5,4,7
"org.apache.solr.search.ValueSourceParser.init(NamedList)",1,1,1
"org.apache.solr.search.ValueSourceParser.splitSources(int,List<ValueSource>,List<ValueSource>,List<ValueSource>)",1,3,3
"org.apache.solr.search.WildcardFilter.WildcardFilter(Term)",1,1,1
"org.apache.solr.search.WildcardFilter.equals(Object)",1,2,2
"org.apache.solr.search.WildcardFilter.getDocIdSet(IndexReader)",1,1,1
"org.apache.solr.search.WildcardFilter.getTerm()",1,1,1
"org.apache.solr.search.WildcardFilter.hashCode()",1,1,1
"org.apache.solr.search.WildcardFilter.toString()",1,1,1
"org.apache.solr.search.WildcardGenerator.WildcardGenerator(Term)",1,1,1
"org.apache.solr.search.WildcardGenerator.generate(IndexReader)",3,3,4
"org.apache.solr.search.WrappedQuery.WrappedQuery(Query)",1,1,1
"org.apache.solr.search.WrappedQuery.clone()",1,1,1
"org.apache.solr.search.WrappedQuery.createWeight(Searcher)",1,1,1
"org.apache.solr.search.WrappedQuery.equals(Object)",2,2,2
"org.apache.solr.search.WrappedQuery.extractTerms(Set<Term>)",1,1,1
"org.apache.solr.search.WrappedQuery.getBoost()",1,1,1
"org.apache.solr.search.WrappedQuery.getWrappedQuery()",1,1,1
"org.apache.solr.search.WrappedQuery.hashCode()",1,1,1
"org.apache.solr.search.WrappedQuery.rewrite(IndexReader)",1,1,1
"org.apache.solr.search.WrappedQuery.setBoost(float)",1,1,1
"org.apache.solr.search.WrappedQuery.setWrappedQuery(Query)",1,1,1
"org.apache.solr.search.WrappedQuery.toString(String)",1,1,1
"org.apache.solr.search.function.BoostedQuery.BoostedQuery(Query,ValueSource)",1,1,1
"org.apache.solr.search.function.BoostedQuery.BoostedWeight.BoostedWeight(Searcher)",1,1,1
"org.apache.solr.search.function.BoostedQuery.BoostedWeight.explain(IndexReader,int)",2,1,2
"org.apache.solr.search.function.BoostedQuery.BoostedWeight.getQuery()",1,1,1
"org.apache.solr.search.function.BoostedQuery.BoostedWeight.getValue()",1,1,1
"org.apache.solr.search.function.BoostedQuery.BoostedWeight.normalize(float)",1,1,1
"org.apache.solr.search.function.BoostedQuery.BoostedWeight.scorer(IndexReader,boolean,boolean)",2,1,2
"org.apache.solr.search.function.BoostedQuery.BoostedWeight.sumOfSquaredWeights()",1,1,1
"org.apache.solr.search.function.BoostedQuery.CustomScorer.CustomScorer(Similarity,Searcher,IndexReader,BoostedWeight,Scorer,ValueSource)",1,1,1
"org.apache.solr.search.function.BoostedQuery.CustomScorer.advance(int)",1,1,1
"org.apache.solr.search.function.BoostedQuery.CustomScorer.docID()",1,1,1
"org.apache.solr.search.function.BoostedQuery.CustomScorer.explain(int)",2,1,2
"org.apache.solr.search.function.BoostedQuery.CustomScorer.nextDoc()",1,1,1
"org.apache.solr.search.function.BoostedQuery.CustomScorer.score()",1,1,2
"org.apache.solr.search.function.BoostedQuery.createWeight(Searcher)",1,1,1
"org.apache.solr.search.function.BoostedQuery.equals(Object)",2,3,4
"org.apache.solr.search.function.BoostedQuery.extractTerms(Set)",1,1,1
"org.apache.solr.search.function.BoostedQuery.getQuery()",1,1,1
"org.apache.solr.search.function.BoostedQuery.getValueSource()",1,1,1
"org.apache.solr.search.function.BoostedQuery.hashCode()",1,1,1
"org.apache.solr.search.function.BoostedQuery.rewrite(IndexReader)",2,1,2
"org.apache.solr.search.function.BoostedQuery.toString(String)",1,1,1
"org.apache.solr.search.function.ByteFieldSource.ByteFieldSource(String)",1,1,1
"org.apache.solr.search.function.ByteFieldSource.ByteFieldSource(String,ByteParser)",1,1,1
"org.apache.solr.search.function.ByteFieldSource.description()",1,1,1
"org.apache.solr.search.function.ByteFieldSource.equals(Object)",2,3,4
"org.apache.solr.search.function.ByteFieldSource.getValues(Map,IndexReader)",1,2,2
"org.apache.solr.search.function.ByteFieldSource.hashCode()",1,2,2
"org.apache.solr.search.function.ConstValueSource.ConstValueSource(float)",1,1,1
"org.apache.solr.search.function.ConstValueSource.description()",1,1,1
"org.apache.solr.search.function.ConstValueSource.equals(Object)",2,1,2
"org.apache.solr.search.function.ConstValueSource.getDouble()",1,1,1
"org.apache.solr.search.function.ConstValueSource.getFloat()",1,1,1
"org.apache.solr.search.function.ConstValueSource.getInt()",1,1,1
"org.apache.solr.search.function.ConstValueSource.getLong()",1,1,1
"org.apache.solr.search.function.ConstValueSource.getNumber()",1,1,1
"org.apache.solr.search.function.ConstValueSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.ConstValueSource.hashCode()",1,1,1
"org.apache.solr.search.function.DivFloatFunction.DivFloatFunction(ValueSource,ValueSource)",1,1,1
"org.apache.solr.search.function.DivFloatFunction.func(int,DocValues,DocValues)",1,1,1
"org.apache.solr.search.function.DivFloatFunction.name()",1,1,1
"org.apache.solr.search.function.DocValues.byteVal(int)",1,1,1
"org.apache.solr.search.function.DocValues.byteVal(int,byte[])",1,1,1
"org.apache.solr.search.function.DocValues.doubleVal(int)",1,1,1
"org.apache.solr.search.function.DocValues.doubleVal(int,double[])",1,1,1
"org.apache.solr.search.function.DocValues.explain(int)",1,1,1
"org.apache.solr.search.function.DocValues.floatVal(int)",1,1,1
"org.apache.solr.search.function.DocValues.floatVal(int,float[])",1,1,1
"org.apache.solr.search.function.DocValues.getRangeScorer(IndexReader,String,String,boolean,boolean)",4,6,13
"org.apache.solr.search.function.DocValues.getScorer(IndexReader)",1,1,1
"org.apache.solr.search.function.DocValues.intVal(int)",1,1,1
"org.apache.solr.search.function.DocValues.intVal(int,int[])",1,1,1
"org.apache.solr.search.function.DocValues.longVal(int)",1,1,1
"org.apache.solr.search.function.DocValues.longVal(int,long[])",1,1,1
"org.apache.solr.search.function.DocValues.shortVal(int)",1,1,1
"org.apache.solr.search.function.DocValues.shortVal(int,short[])",1,1,1
"org.apache.solr.search.function.DocValues.strVal(int)",1,1,1
"org.apache.solr.search.function.DocValues.strVal(int,String[])",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.DoubleConstValueSource(double)",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.description()",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.equals(Object)",2,1,2
"org.apache.solr.search.function.DoubleConstValueSource.getDouble()",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.getFloat()",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.getInt()",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.getLong()",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.getNumber()",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.DoubleConstValueSource.hashCode()",1,1,1
"org.apache.solr.search.function.DoubleFieldSource.DoubleFieldSource(String)",1,1,1
"org.apache.solr.search.function.DoubleFieldSource.DoubleFieldSource(String,DoubleParser)",1,1,1
"org.apache.solr.search.function.DoubleFieldSource.description()",1,1,1
"org.apache.solr.search.function.DoubleFieldSource.equals(Object)",2,3,4
"org.apache.solr.search.function.DoubleFieldSource.getValues(Map,IndexReader)",4,7,14
"org.apache.solr.search.function.DoubleFieldSource.hashCode()",1,2,2
"org.apache.solr.search.function.DualFloatFunction.DualFloatFunction(ValueSource,ValueSource)",1,1,1
"org.apache.solr.search.function.DualFloatFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.DualFloatFunction.description()",1,1,1
"org.apache.solr.search.function.DualFloatFunction.equals(Object)",2,2,3
"org.apache.solr.search.function.DualFloatFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.DualFloatFunction.hashCode()",1,1,1
"org.apache.solr.search.function.FieldCacheSource.FieldCacheSource(String)",1,1,1
"org.apache.solr.search.function.FieldCacheSource.description()",1,1,1
"org.apache.solr.search.function.FieldCacheSource.equals(Object)",2,2,3
"org.apache.solr.search.function.FieldCacheSource.getFieldCache()",1,1,1
"org.apache.solr.search.function.FieldCacheSource.hashCode()",1,1,1
"org.apache.solr.search.function.FileFloatSource.Cache.get(IndexReader,Object)",2,5,5
"org.apache.solr.search.function.FileFloatSource.Cache.resetCache()",1,1,1
"org.apache.solr.search.function.FileFloatSource.Entry.Entry(FileFloatSource)",1,1,1
"org.apache.solr.search.function.FileFloatSource.Entry.equals(Object)",2,1,2
"org.apache.solr.search.function.FileFloatSource.Entry.hashCode()",1,1,1
"org.apache.solr.search.function.FileFloatSource.FileFloatSource(SchemaField,SchemaField,float,QParser)",1,1,1
"org.apache.solr.search.function.FileFloatSource.ReloadCacheRequestHandler.getDescription()",1,1,1
"org.apache.solr.search.function.FileFloatSource.ReloadCacheRequestHandler.getSource()",1,1,1
"org.apache.solr.search.function.FileFloatSource.ReloadCacheRequestHandler.getSourceId()",1,1,1
"org.apache.solr.search.function.FileFloatSource.ReloadCacheRequestHandler.getVersion()",1,1,1
"org.apache.solr.search.function.FileFloatSource.ReloadCacheRequestHandler.handleRequestBody(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.search.function.FileFloatSource.description()",1,1,1
"org.apache.solr.search.function.FileFloatSource.equals(Object)",2,4,5
"org.apache.solr.search.function.FileFloatSource.getCachedFloats(IndexReader)",1,1,1
"org.apache.solr.search.function.FileFloatSource.getFloats(FileFloatSource,IndexReader)",8,28,34
"org.apache.solr.search.function.FileFloatSource.getValues(Map,IndexReader)",1,3,3
"org.apache.solr.search.function.FileFloatSource.hashCode()",1,1,1
"org.apache.solr.search.function.FileFloatSource.resetCache()",1,1,1
"org.apache.solr.search.function.FileFloatSource.toString()",1,1,1
"org.apache.solr.search.function.FloatFieldSource.FloatFieldSource(String)",1,1,1
"org.apache.solr.search.function.FloatFieldSource.FloatFieldSource(String,FloatParser)",1,1,1
"org.apache.solr.search.function.FloatFieldSource.description()",1,1,1
"org.apache.solr.search.function.FloatFieldSource.equals(Object)",2,3,4
"org.apache.solr.search.function.FloatFieldSource.getValues(Map,IndexReader)",1,2,2
"org.apache.solr.search.function.FloatFieldSource.hashCode()",1,2,2
"org.apache.solr.search.function.FunctionQuery.AllScorer.AllScorer(Similarity,IndexReader,FunctionWeight)",1,1,1
"org.apache.solr.search.function.FunctionQuery.AllScorer.advance(int)",1,1,1
"org.apache.solr.search.function.FunctionQuery.AllScorer.doc()",1,1,1
"org.apache.solr.search.function.FunctionQuery.AllScorer.docID()",1,1,1
"org.apache.solr.search.function.FunctionQuery.AllScorer.explain(int)",1,1,1
"org.apache.solr.search.function.FunctionQuery.AllScorer.next()",4,3,5
"org.apache.solr.search.function.FunctionQuery.AllScorer.nextDoc()",4,3,5
"org.apache.solr.search.function.FunctionQuery.AllScorer.score()",1,1,2
"org.apache.solr.search.function.FunctionQuery.AllScorer.skipTo(int)",1,1,1
"org.apache.solr.search.function.FunctionQuery.FunctionQuery(ValueSource)",1,1,1
"org.apache.solr.search.function.FunctionQuery.FunctionWeight.FunctionWeight(Searcher)",1,1,1
"org.apache.solr.search.function.FunctionQuery.FunctionWeight.explain(IndexReader,int)",1,1,1
"org.apache.solr.search.function.FunctionQuery.FunctionWeight.getQuery()",1,1,1
"org.apache.solr.search.function.FunctionQuery.FunctionWeight.getValue()",1,1,1
"org.apache.solr.search.function.FunctionQuery.FunctionWeight.normalize(float)",1,1,1
"org.apache.solr.search.function.FunctionQuery.FunctionWeight.scorer(IndexReader,boolean,boolean)",1,1,1
"org.apache.solr.search.function.FunctionQuery.FunctionWeight.sumOfSquaredWeights()",1,1,1
"org.apache.solr.search.function.FunctionQuery.createWeight(Searcher)",1,1,1
"org.apache.solr.search.function.FunctionQuery.equals(Object)",2,2,3
"org.apache.solr.search.function.FunctionQuery.extractTerms(Set)",1,1,1
"org.apache.solr.search.function.FunctionQuery.getValueSource()",1,1,1
"org.apache.solr.search.function.FunctionQuery.hashCode()",1,1,1
"org.apache.solr.search.function.FunctionQuery.rewrite(IndexReader)",1,1,1
"org.apache.solr.search.function.FunctionQuery.toString(String)",1,1,3
"org.apache.solr.search.function.IntFieldSource.IntFieldSource(String)",1,1,1
"org.apache.solr.search.function.IntFieldSource.IntFieldSource(String,IntParser)",1,1,1
"org.apache.solr.search.function.IntFieldSource.description()",1,1,1
"org.apache.solr.search.function.IntFieldSource.equals(Object)",2,3,4
"org.apache.solr.search.function.IntFieldSource.getValues(Map,IndexReader)",1,4,9
"org.apache.solr.search.function.IntFieldSource.hashCode()",1,2,2
"org.apache.solr.search.function.LinearFloatFunction.LinearFloatFunction(ValueSource,float,float)",1,1,1
"org.apache.solr.search.function.LinearFloatFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.LinearFloatFunction.description()",1,1,1
"org.apache.solr.search.function.LinearFloatFunction.equals(Object)",2,3,4
"org.apache.solr.search.function.LinearFloatFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.LinearFloatFunction.hashCode()",1,1,1
"org.apache.solr.search.function.LiteralValueSource.LiteralValueSource(String)",1,1,1
"org.apache.solr.search.function.LiteralValueSource.description()",1,1,1
"org.apache.solr.search.function.LiteralValueSource.equals(Object)",4,1,4
"org.apache.solr.search.function.LiteralValueSource.getValue()",1,1,1
"org.apache.solr.search.function.LiteralValueSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.LiteralValueSource.hashCode()",1,1,1
"org.apache.solr.search.function.LongFieldSource.LongFieldSource(String)",1,1,1
"org.apache.solr.search.function.LongFieldSource.LongFieldSource(String,LongParser)",1,1,1
"org.apache.solr.search.function.LongFieldSource.description()",1,1,1
"org.apache.solr.search.function.LongFieldSource.equals(Object)",2,3,4
"org.apache.solr.search.function.LongFieldSource.externalToLong(String)",1,1,1
"org.apache.solr.search.function.LongFieldSource.getValues(Map,IndexReader)",1,4,9
"org.apache.solr.search.function.LongFieldSource.hashCode()",1,2,2
"org.apache.solr.search.function.MaxFloatFunction.MaxFloatFunction(ValueSource[])",1,1,1
"org.apache.solr.search.function.MaxFloatFunction.func(int,DocValues[])",1,3,3
"org.apache.solr.search.function.MaxFloatFunction.name()",1,1,1
"org.apache.solr.search.function.MinFloatFunction.MinFloatFunction(ValueSource[])",1,1,1
"org.apache.solr.search.function.MinFloatFunction.func(int,DocValues[])",1,3,3
"org.apache.solr.search.function.MinFloatFunction.name()",1,1,1
"org.apache.solr.search.function.MultiFloatFunction.MultiFloatFunction(ValueSource[])",1,1,1
"org.apache.solr.search.function.MultiFloatFunction.createWeight(Map,Searcher)",1,2,2
"org.apache.solr.search.function.MultiFloatFunction.description()",1,3,3
"org.apache.solr.search.function.MultiFloatFunction.equals(Object)",2,2,3
"org.apache.solr.search.function.MultiFloatFunction.getValues(Map,IndexReader)",1,4,4
"org.apache.solr.search.function.MultiFloatFunction.hashCode()",1,1,1
"org.apache.solr.search.function.NvlValueSourceParser.init(NamedList)",1,1,2
"org.apache.solr.search.function.NvlValueSourceParser.parse(FunctionQParser)",2,1,2
"org.apache.solr.search.function.OrdFieldSource.OrdFieldSource(String)",1,1,1
"org.apache.solr.search.function.OrdFieldSource.description()",1,1,1
"org.apache.solr.search.function.OrdFieldSource.equals(Object)",1,2,2
"org.apache.solr.search.function.OrdFieldSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.OrdFieldSource.hashCode()",1,1,1
"org.apache.solr.search.function.PowFloatFunction.PowFloatFunction(ValueSource,ValueSource)",1,1,1
"org.apache.solr.search.function.PowFloatFunction.func(int,DocValues,DocValues)",1,1,1
"org.apache.solr.search.function.PowFloatFunction.name()",1,1,1
"org.apache.solr.search.function.ProductFloatFunction.ProductFloatFunction(ValueSource[])",1,1,1
"org.apache.solr.search.function.ProductFloatFunction.func(int,DocValues[])",1,2,2
"org.apache.solr.search.function.ProductFloatFunction.name()",1,1,1
"org.apache.solr.search.function.QueryDocValues.QueryDocValues(IndexReader,Query,float,Weight)",1,2,2
"org.apache.solr.search.function.QueryDocValues.doubleVal(int)",1,1,1
"org.apache.solr.search.function.QueryDocValues.floatVal(int)",5,3,7
"org.apache.solr.search.function.QueryDocValues.intVal(int)",1,1,1
"org.apache.solr.search.function.QueryDocValues.longVal(int)",1,1,1
"org.apache.solr.search.function.QueryDocValues.strVal(int)",1,1,1
"org.apache.solr.search.function.QueryDocValues.toString(int)",1,1,1
"org.apache.solr.search.function.QueryValueSource.QueryValueSource(Query,float)",1,1,1
"org.apache.solr.search.function.QueryValueSource.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.QueryValueSource.description()",1,1,1
"org.apache.solr.search.function.QueryValueSource.equals(Object)",2,2,3
"org.apache.solr.search.function.QueryValueSource.getDefaultValue()",1,1,1
"org.apache.solr.search.function.QueryValueSource.getQuery()",1,1,1
"org.apache.solr.search.function.QueryValueSource.getValues(Map,IndexReader)",1,2,2
"org.apache.solr.search.function.QueryValueSource.hashCode()",1,1,1
"org.apache.solr.search.function.RangeMapFloatFunction.RangeMapFloatFunction(ValueSource,float,float,float,Float)",1,1,1
"org.apache.solr.search.function.RangeMapFloatFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.RangeMapFloatFunction.description()",1,1,1
"org.apache.solr.search.function.RangeMapFloatFunction.equals(Object)",2,7,8
"org.apache.solr.search.function.RangeMapFloatFunction.getValues(Map,IndexReader)",1,1,4
"org.apache.solr.search.function.RangeMapFloatFunction.hashCode()",1,2,2
"org.apache.solr.search.function.ReciprocalFloatFunction.ReciprocalFloatFunction(ValueSource,float,float,float)",1,1,1
"org.apache.solr.search.function.ReciprocalFloatFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.ReciprocalFloatFunction.description()",1,1,1
"org.apache.solr.search.function.ReciprocalFloatFunction.equals(Object)",2,4,5
"org.apache.solr.search.function.ReciprocalFloatFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.ReciprocalFloatFunction.hashCode()",1,1,1
"org.apache.solr.search.function.ReverseOrdFieldSource.ReverseOrdFieldSource(String)",1,1,1
"org.apache.solr.search.function.ReverseOrdFieldSource.description()",1,1,1
"org.apache.solr.search.function.ReverseOrdFieldSource.equals(Object)",2,1,2
"org.apache.solr.search.function.ReverseOrdFieldSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.ReverseOrdFieldSource.hashCode()",1,1,1
"org.apache.solr.search.function.ScaleFloatFunction.ScaleFloatFunction(ValueSource,float,float)",1,1,1
"org.apache.solr.search.function.ScaleFloatFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.ScaleFloatFunction.description()",1,1,1
"org.apache.solr.search.function.ScaleFloatFunction.equals(Object)",2,3,4
"org.apache.solr.search.function.ScaleFloatFunction.getValues(Map,IndexReader)",3,3,7
"org.apache.solr.search.function.ScaleFloatFunction.hashCode()",1,1,1
"org.apache.solr.search.function.ShortFieldSource.ShortFieldSource(String)",1,1,1
"org.apache.solr.search.function.ShortFieldSource.ShortFieldSource(String,ShortParser)",1,1,1
"org.apache.solr.search.function.ShortFieldSource.description()",1,1,1
"org.apache.solr.search.function.ShortFieldSource.equals(Object)",2,3,4
"org.apache.solr.search.function.ShortFieldSource.getValues(Map,IndexReader)",1,2,2
"org.apache.solr.search.function.ShortFieldSource.hashCode()",1,2,2
"org.apache.solr.search.function.SimpleFloatFunction.SimpleFloatFunction(ValueSource)",1,1,1
"org.apache.solr.search.function.SimpleFloatFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.SingleFunction.SingleFunction(ValueSource)",1,1,1
"org.apache.solr.search.function.SingleFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.SingleFunction.description()",1,1,1
"org.apache.solr.search.function.SingleFunction.equals(Object)",2,2,3
"org.apache.solr.search.function.SingleFunction.hashCode()",1,1,1
"org.apache.solr.search.function.SortByFunctionTest.getSchemaFile()",1,1,1
"org.apache.solr.search.function.SortByFunctionTest.getSolrConfigFile()",1,1,1
"org.apache.solr.search.function.SortByFunctionTest.test()",1,1,1
"org.apache.solr.search.function.StringIndexDocValues.StringIndexDocValues(ValueSource,IndexReader,String)",1,1,2
"org.apache.solr.search.function.StringIndexDocValues.StringIndexException.StringIndexException(String,RuntimeException)",1,1,1
"org.apache.solr.search.function.StringIndexDocValues.getRangeScorer(IndexReader,String,String,boolean,boolean)",1,5,10
"org.apache.solr.search.function.StringIndexDocValues.toString(int)",1,1,1
"org.apache.solr.search.function.SumFloatFunction.SumFloatFunction(ValueSource[])",1,1,1
"org.apache.solr.search.function.SumFloatFunction.func(int,DocValues[])",1,2,2
"org.apache.solr.search.function.SumFloatFunction.name()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.beforeClass()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.createIndex(String,float...)",1,3,3
"org.apache.solr.search.function.TestFunctionQuery.doTest(String)",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.dofunc(String,double)",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.func(String,String)",3,4,4
"org.apache.solr.search.function.TestFunctionQuery.makeExternalFile(String,String,String)",1,1,2
"org.apache.solr.search.function.TestFunctionQuery.setUp()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.singleTest(String,String,List<String>,float...)",1,4,4
"org.apache.solr.search.function.TestFunctionQuery.singleTest(String,String,float...)",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.testDegreeRads()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.testExternalField()",1,6,8
"org.apache.solr.search.function.TestFunctionQuery.testExternalFileFieldNumericKey()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.testExternalFileFieldStringKeys()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.testFuncs()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.testFunctions()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.testGeneral()",1,2,3
"org.apache.solr.search.function.TestFunctionQuery.testSortByFunc()",1,1,1
"org.apache.solr.search.function.TestFunctionQuery.testStrDistance()",1,1,1
"org.apache.solr.search.function.TopValueSource.TopValueSource(ValueSource)",1,1,1
"org.apache.solr.search.function.TopValueSource.description()",1,1,1
"org.apache.solr.search.function.TopValueSource.equals(Object)",2,1,2
"org.apache.solr.search.function.TopValueSource.getValueSource()",1,1,1
"org.apache.solr.search.function.TopValueSource.getValues(Map,IndexReader)",2,3,4
"org.apache.solr.search.function.TopValueSource.hashCode()",1,1,1
"org.apache.solr.search.function.TopValueSource.toString()",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceComparator.ValueSourceComparator(Map,int)",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceComparator.compare(int,int)",3,1,3
"org.apache.solr.search.function.ValueSource.ValueSourceComparator.compareBottom(int)",3,1,3
"org.apache.solr.search.function.ValueSource.ValueSourceComparator.copy(int,int)",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceComparator.setBottom(int)",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceComparator.setNextReader(IndexReader,int)",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceComparator.value(int)",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceComparatorSource.ValueSourceComparatorSource(Map)",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceComparatorSource.newComparator(String,int,int,boolean)",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceSortField.ValueSourceSortField(boolean)",1,1,1
"org.apache.solr.search.function.ValueSource.ValueSourceSortField.weight(IndexSearcher)",1,1,1
"org.apache.solr.search.function.ValueSource.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.ValueSource.getSortField(boolean)",1,1,1
"org.apache.solr.search.function.ValueSource.getValues(IndexReader)",1,1,1
"org.apache.solr.search.function.ValueSource.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.ValueSource.newContext()",1,1,1
"org.apache.solr.search.function.ValueSource.toString()",1,1,1
"org.apache.solr.search.function.ValueSourceRangeFilter.ValueSourceRangeFilter(ValueSource,String,String,boolean,boolean)",1,1,3
"org.apache.solr.search.function.ValueSourceRangeFilter.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.ValueSourceRangeFilter.equals(Object)",6,5,10
"org.apache.solr.search.function.ValueSourceRangeFilter.getDocIdSet(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.ValueSourceRangeFilter.getLowerVal()",1,1,1
"org.apache.solr.search.function.ValueSourceRangeFilter.getUpperVal()",1,1,1
"org.apache.solr.search.function.ValueSourceRangeFilter.getValueSource()",1,1,1
"org.apache.solr.search.function.ValueSourceRangeFilter.hashCode()",1,3,5
"org.apache.solr.search.function.ValueSourceRangeFilter.isIncludeLower()",1,1,1
"org.apache.solr.search.function.ValueSourceRangeFilter.isIncludeUpper()",1,1,1
"org.apache.solr.search.function.ValueSourceRangeFilter.toString()",1,1,5
"org.apache.solr.search.function.ValueSourceScorer.ValueSourceScorer(IndexReader,DocValues)",1,1,1
"org.apache.solr.search.function.ValueSourceScorer.advance(int)",1,1,1
"org.apache.solr.search.function.ValueSourceScorer.doc()",1,1,1
"org.apache.solr.search.function.ValueSourceScorer.docID()",1,1,1
"org.apache.solr.search.function.ValueSourceScorer.explain(int)",1,1,1
"org.apache.solr.search.function.ValueSourceScorer.getReader()",1,1,1
"org.apache.solr.search.function.ValueSourceScorer.matches(int)",1,3,3
"org.apache.solr.search.function.ValueSourceScorer.matchesValue(int)",1,1,1
"org.apache.solr.search.function.ValueSourceScorer.next()",4,2,4
"org.apache.solr.search.function.ValueSourceScorer.nextDoc()",4,2,4
"org.apache.solr.search.function.ValueSourceScorer.score()",1,1,1
"org.apache.solr.search.function.ValueSourceScorer.setCheckDeletes(boolean)",1,2,2
"org.apache.solr.search.function.ValueSourceScorer.skipTo(int)",1,1,1
"org.apache.solr.search.function.VectorValueSource.VectorValueSource(List<ValueSource>)",1,1,1
"org.apache.solr.search.function.VectorValueSource.createWeight(Map,Searcher)",1,2,2
"org.apache.solr.search.function.VectorValueSource.description()",1,3,3
"org.apache.solr.search.function.VectorValueSource.dimension()",1,1,1
"org.apache.solr.search.function.VectorValueSource.equals(Object)",4,1,4
"org.apache.solr.search.function.VectorValueSource.getSources()",1,1,1
"org.apache.solr.search.function.VectorValueSource.getValues(Map,IndexReader)",2,12,12
"org.apache.solr.search.function.VectorValueSource.hashCode()",1,1,1
"org.apache.solr.search.function.VectorValueSource.name()",1,1,1
"org.apache.solr.search.function.distance.DistanceFunctionTest.beforeClass()",1,1,1
"org.apache.solr.search.function.distance.DistanceFunctionTest.testHaversine()",1,1,1
"org.apache.solr.search.function.distance.DistanceFunctionTest.testLatLon()",1,1,1
"org.apache.solr.search.function.distance.DistanceFunctionTest.testVector()",1,2,2
"org.apache.solr.search.function.distance.GeohashFunction.GeohashFunction(ValueSource,ValueSource)",1,1,1
"org.apache.solr.search.function.distance.GeohashFunction.description()",1,1,1
"org.apache.solr.search.function.distance.GeohashFunction.equals(Object)",5,1,5
"org.apache.solr.search.function.distance.GeohashFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.distance.GeohashFunction.hashCode()",1,1,1
"org.apache.solr.search.function.distance.GeohashFunction.name()",1,1,1
"org.apache.solr.search.function.distance.GeohashHaversineFunction.GeohashHaversineFunction(ValueSource,ValueSource,double)",1,1,1
"org.apache.solr.search.function.distance.GeohashHaversineFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.distance.GeohashHaversineFunction.description()",1,1,1
"org.apache.solr.search.function.distance.GeohashHaversineFunction.distance(int,DocValues,DocValues)",1,4,6
"org.apache.solr.search.function.distance.GeohashHaversineFunction.equals(Object)",2,4,5
"org.apache.solr.search.function.distance.GeohashHaversineFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.distance.GeohashHaversineFunction.hashCode()",1,1,1
"org.apache.solr.search.function.distance.GeohashHaversineFunction.name()",1,1,1
"org.apache.solr.search.function.distance.HaversineConstFunction.HaversineConstFunction(double,double,VectorValueSource)",1,1,1
"org.apache.solr.search.function.distance.HaversineConstFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.distance.HaversineConstFunction.description()",1,1,1
"org.apache.solr.search.function.distance.HaversineConstFunction.equals(Object)",2,3,4
"org.apache.solr.search.function.distance.HaversineConstFunction.getConstants(MultiValueSource)",3,3,4
"org.apache.solr.search.function.distance.HaversineConstFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.distance.HaversineConstFunction.hashCode()",1,1,1
"org.apache.solr.search.function.distance.HaversineConstFunction.makeMV(List<ValueSource>,List<ValueSource>)",2,1,3
"org.apache.solr.search.function.distance.HaversineConstFunction.name()",1,1,1
"org.apache.solr.search.function.distance.HaversineConstFunction.parsePoint(FunctionQParser)",2,1,3
"org.apache.solr.search.function.distance.HaversineConstFunction.parseSfield(FunctionQParser)",3,1,3
"org.apache.solr.search.function.distance.HaversineFunction.HaversineFunction(MultiValueSource,MultiValueSource,double)",1,1,1
"org.apache.solr.search.function.distance.HaversineFunction.HaversineFunction(MultiValueSource,MultiValueSource,double,boolean)",2,2,3
"org.apache.solr.search.function.distance.HaversineFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.distance.HaversineFunction.description()",1,1,1
"org.apache.solr.search.function.distance.HaversineFunction.distance(int,DocValues,DocValues)",1,1,2
"org.apache.solr.search.function.distance.HaversineFunction.equals(Object)",2,4,5
"org.apache.solr.search.function.distance.HaversineFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.distance.HaversineFunction.hashCode()",1,1,1
"org.apache.solr.search.function.distance.HaversineFunction.name()",1,1,1
"org.apache.solr.search.function.distance.SquaredEuclideanFunction.SquaredEuclideanFunction(MultiValueSource,MultiValueSource)",1,1,1
"org.apache.solr.search.function.distance.SquaredEuclideanFunction.distance(int,DocValues,DocValues)",1,1,1
"org.apache.solr.search.function.distance.SquaredEuclideanFunction.equals(Object)",5,1,5
"org.apache.solr.search.function.distance.SquaredEuclideanFunction.hashCode()",1,1,1
"org.apache.solr.search.function.distance.SquaredEuclideanFunction.name()",1,1,1
"org.apache.solr.search.function.distance.StringDistanceFunction.StringDistanceFunction(ValueSource,ValueSource,StringDistance)",1,1,1
"org.apache.solr.search.function.distance.StringDistanceFunction.description()",1,1,1
"org.apache.solr.search.function.distance.StringDistanceFunction.equals(Object)",6,1,6
"org.apache.solr.search.function.distance.StringDistanceFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.distance.StringDistanceFunction.hashCode()",1,1,1
"org.apache.solr.search.function.distance.VectorDistanceFunction.VectorDistanceFunction(float,MultiValueSource,MultiValueSource)",2,1,2
"org.apache.solr.search.function.distance.VectorDistanceFunction.createWeight(Map,Searcher)",1,1,1
"org.apache.solr.search.function.distance.VectorDistanceFunction.description()",1,1,1
"org.apache.solr.search.function.distance.VectorDistanceFunction.distance(int,DocValues,DocValues)",1,1,1
"org.apache.solr.search.function.distance.VectorDistanceFunction.equals(Object)",6,1,6
"org.apache.solr.search.function.distance.VectorDistanceFunction.getValues(Map,IndexReader)",1,1,1
"org.apache.solr.search.function.distance.VectorDistanceFunction.hashCode()",1,1,1
"org.apache.solr.search.function.distance.VectorDistanceFunction.name()",1,1,1
"org.apache.solr.search.grouping.CommandHandler.Builder.addCommandField(Command)",1,1,1
"org.apache.solr.search.grouping.CommandHandler.Builder.build()",2,1,3
"org.apache.solr.search.grouping.CommandHandler.Builder.setIncludeHitCount(boolean)",1,1,1
"org.apache.solr.search.grouping.CommandHandler.Builder.setNeedDocSet(boolean)",1,1,1
"org.apache.solr.search.grouping.CommandHandler.Builder.setQueryCommand(QueryCommand)",1,1,1
"org.apache.solr.search.grouping.CommandHandler.Builder.setSearcher(SolrIndexSearcher)",1,1,1
"org.apache.solr.search.grouping.CommandHandler.Builder.setTruncateGroups(boolean)",1,1,1
"org.apache.solr.search.grouping.CommandHandler.CommandHandler(QueryCommand,List<Command>,SolrIndexSearcher,boolean,boolean,boolean)",1,1,1
"org.apache.solr.search.grouping.CommandHandler.computeDocSet(Query,Filter,List<Collector>)",1,2,2
"org.apache.solr.search.grouping.CommandHandler.computeGroupedDocSet(Query,Filter,List<Collector>)",1,2,2
"org.apache.solr.search.grouping.CommandHandler.execute()",1,5,5
"org.apache.solr.search.grouping.CommandHandler.getTotalHitCount()",1,1,1
"org.apache.solr.search.grouping.CommandHandler.processResult(QueryResult,ShardResultTransformer)",1,2,2
"org.apache.solr.search.grouping.CommandHandler.searchWithTimeLimiter(Query,Filter,Collector)",1,5,5
"org.apache.solr.search.grouping.GroupingSpecification.getFields()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.getGroupLimit()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.getGroupOffset()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.getGroupSort()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.getLimit()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.getOffset()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.getQueries()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.getResponseFormat()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.getSortWithinGroup()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.isIncludeGroupCount()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.isMain()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.isNeedScore()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.isTruncateGroups()",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setFields(String[])",2,1,2
"org.apache.solr.search.grouping.GroupingSpecification.setGroupLimit(int)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setGroupOffset(int)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setGroupSort(Sort)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setIncludeGroupCount(boolean)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setLimit(int)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setMain(boolean)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setNeedScore(boolean)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setOffset(int)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setQueries(String[])",2,1,2
"org.apache.solr.search.grouping.GroupingSpecification.setResponseFormat(Format)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setSortWithinGroup(Sort)",1,1,1
"org.apache.solr.search.grouping.GroupingSpecification.setTruncateGroups(boolean)",1,1,1
"org.apache.solr.search.grouping.collector.FilterCollector.FilterCollector(DocSet,Collector)",1,1,1
"org.apache.solr.search.grouping.collector.FilterCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.solr.search.grouping.collector.FilterCollector.collect(int)",1,2,2
"org.apache.solr.search.grouping.collector.FilterCollector.getDelegate()",1,1,1
"org.apache.solr.search.grouping.collector.FilterCollector.getMatches()",1,1,1
"org.apache.solr.search.grouping.collector.FilterCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.solr.search.grouping.collector.FilterCollector.setScorer(Scorer)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.Builder.build()",2,1,5
"org.apache.solr.search.grouping.distributed.command.QueryCommand.Builder.setDocSet(DocSet)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.Builder.setDocSet(SolrIndexSearcher)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.Builder.setDocsToCollect(int)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.Builder.setNeedScores(boolean)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.Builder.setQuery(Query)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.Builder.setQuery(String,SolrQueryRequest)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.Builder.setSort(Sort)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.QueryCommand(Sort,Query,int,boolean,DocSet,String)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.create()",1,2,3
"org.apache.solr.search.grouping.distributed.command.QueryCommand.getGroupSort()",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.getKey()",1,2,2
"org.apache.solr.search.grouping.distributed.command.QueryCommand.getSortWithinGroup()",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommand.result()",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommandResult.QueryCommandResult(TopDocs,int)",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getMatches()",1,1,1
"org.apache.solr.search.grouping.distributed.command.QueryCommandResult.getTopDocs()",1,1,1
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.Builder.build()",2,1,4
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.Builder.setField(SchemaField)",1,1,1
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.Builder.setGroupSort(Sort)",1,1,1
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.Builder.setTopNGroups(int)",1,1,1
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.SearchGroupsFieldCommand(SchemaField,Sort,int)",1,1,1
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.create()",2,2,2
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.getGroupSort()",1,1,1
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.getKey()",1,1,1
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.getSortWithinGroup()",1,1,1
"org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand.result()",2,2,2
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.build()",2,1,6
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.setField(SchemaField)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.setFirstPhaseGroups(Collection<SearchGroup<String>>)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.setGroupSort(Sort)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.setMaxDocPerGroup(int)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.setNeedGroupCount(Boolean)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.setNeedMaxScore(Boolean)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.setNeedScores(Boolean)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.Builder.setSortWithinGroup(Sort)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.TopGroupsFieldCommand(SchemaField,Sort,Sort,Collection<SearchGroup<String>>,int,boolean,boolean,boolean)",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.create()",3,2,3
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.getGroupSort()",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.getKey()",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.getSortWithinGroup()",1,1,1
"org.apache.solr.search.grouping.distributed.command.TopGroupsFieldCommand.result()",2,3,3
"org.apache.solr.search.grouping.distributed.requestfactory.SearchGroupsRequestFactory.constructRequest(ResponseBuilder)",2,5,6
"org.apache.solr.search.grouping.distributed.requestfactory.StoredFieldsShardRequestFactory.constructRequest(ResponseBuilder)",1,10,10
"org.apache.solr.search.grouping.distributed.requestfactory.StoredFieldsShardRequestFactory.mapShardToDocs(HashMap<String, Set<ShardDoc>>,ScoreDoc[])",1,3,3
"org.apache.solr.search.grouping.distributed.requestfactory.TopGroupsShardRequestFactory.constructRequest(ResponseBuilder)",2,3,3
"org.apache.solr.search.grouping.distributed.requestfactory.TopGroupsShardRequestFactory.createRequest(ResponseBuilder,String[])",1,11,11
"org.apache.solr.search.grouping.distributed.requestfactory.TopGroupsShardRequestFactory.createRequestForAllShards(ResponseBuilder)",1,1,1
"org.apache.solr.search.grouping.distributed.requestfactory.TopGroupsShardRequestFactory.createRequestForSpecificShards(ResponseBuilder)",1,3,3
"org.apache.solr.search.grouping.distributed.responseprocessor.SearchGroupShardResponseProcessor.process(ResponseBuilder,ShardRequest)",6,9,12
"org.apache.solr.search.grouping.distributed.responseprocessor.StoredFieldsShardResponseProcessor.process(ResponseBuilder,ShardRequest)",1,5,5
"org.apache.solr.search.grouping.distributed.responseprocessor.TopGroupsShardResponseProcessor.process(ResponseBuilder,ShardRequest)",6,16,19
"org.apache.solr.search.grouping.distributed.shardresultserializer.SearchGroupsResultTransformer.SearchGroupsResultTransformer(SolrIndexSearcher)",1,1,1
"org.apache.solr.search.grouping.distributed.shardresultserializer.SearchGroupsResultTransformer.serializeSearchGroup(Collection<SearchGroup<String>>,Sort)",1,6,7
"org.apache.solr.search.grouping.distributed.shardresultserializer.SearchGroupsResultTransformer.transform(List<Command>)",4,3,4
"org.apache.solr.search.grouping.distributed.shardresultserializer.SearchGroupsResultTransformer.transformToNative(NamedList<NamedList>,Sort,Sort,String)",1,4,4
"org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.TopGroupsResultTransformer(ResponseBuilder)",1,1,1
"org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.retrieveDocument(SchemaField,int)",2,1,2
"org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.serializeTopDocs(QueryCommandResult)",3,8,9
"org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.serializeTopGroups(TopGroups<String>,SchemaField)",4,11,12
"org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.transform(List<Command>)",1,4,4
"org.apache.solr.search.grouping.distributed.shardresultserializer.TopGroupsResultTransformer.transformToNative(NamedList<NamedList>,Sort,Sort,String)",3,6,13
"org.apache.solr.search.grouping.endresulttransformer.GroupedEndResultTransformer.GroupedEndResultTransformer(SolrIndexSearcher)",1,1,1
"org.apache.solr.search.grouping.endresulttransformer.GroupedEndResultTransformer.transform(Map<String, ?>,ResponseBuilder,SolrDocumentSource)",1,11,11
"org.apache.solr.search.grouping.endresulttransformer.MainEndResultTransformer.transform(Map<String, ?>,ResponseBuilder,SolrDocumentSource)",1,5,6
"org.apache.solr.search.grouping.endresulttransformer.SimpleEndResultTransformer.transform(Map<String, ?>,ResponseBuilder,SolrDocumentSource)",1,7,8
"org.apache.solr.servlet.CacheHeaderTest.beforeTest()",1,1,1
"org.apache.solr.servlet.CacheHeaderTest.checkVetoHeaders(HttpMethodBase,boolean)",1,2,2
"org.apache.solr.servlet.CacheHeaderTest.doCacheControl(String)",1,2,2
"org.apache.solr.servlet.CacheHeaderTest.doETag(String)",1,2,2
"org.apache.solr.servlet.CacheHeaderTest.doLastModified(String)",1,1,1
"org.apache.solr.servlet.CacheHeaderTest.makeFile(String)",1,1,1
"org.apache.solr.servlet.CacheHeaderTest.makeFile(String,String)",1,1,2
"org.apache.solr.servlet.CacheHeaderTest.testCacheVetoException()",1,1,1
"org.apache.solr.servlet.CacheHeaderTest.testCacheVetoHandler()",1,1,1
"org.apache.solr.servlet.CacheHeaderTestBase.checkResponseBody(String,HttpMethodBase)",2,8,11
"org.apache.solr.servlet.CacheHeaderTestBase.getClient()",1,1,1
"org.apache.solr.servlet.CacheHeaderTestBase.getSelectMethod(String)",1,4,4
"org.apache.solr.servlet.CacheHeaderTestBase.getUpdateMethod(String)",1,4,4
"org.apache.solr.servlet.CacheHeaderTestBase.testCacheControl()",1,1,1
"org.apache.solr.servlet.CacheHeaderTestBase.testEtag()",1,1,1
"org.apache.solr.servlet.CacheHeaderTestBase.testLastModified()",1,1,1
"org.apache.solr.servlet.DirectSolrConnection.DirectSolrConnection()",1,1,1
"org.apache.solr.servlet.DirectSolrConnection.DirectSolrConnection(SolrCore)",1,1,1
"org.apache.solr.servlet.DirectSolrConnection.DirectSolrConnection(String,String,String)",3,5,7
"org.apache.solr.servlet.DirectSolrConnection.close()",1,1,1
"org.apache.solr.servlet.DirectSolrConnection.request(SolrRequestHandler,SolrParams,String)",2,5,6
"org.apache.solr.servlet.DirectSolrConnection.request(String,String)",5,5,7
"org.apache.solr.servlet.DirectSolrConnectionTest.getSchemaFile()",1,1,1
"org.apache.solr.servlet.DirectSolrConnectionTest.getSolrConfigFile()",1,1,1
"org.apache.solr.servlet.DirectSolrConnectionTest.setUp()",1,1,1
"org.apache.solr.servlet.DirectSolrConnectionTest.testInsertThenSelect()",1,3,3
"org.apache.solr.servlet.DirectSolrConnectionTest.testSimpleRequest()",1,1,2
"org.apache.solr.servlet.FileItemContentStream.FileItemContentStream(FileItem)",1,1,1
"org.apache.solr.servlet.FileItemContentStream.getStream()",1,1,1
"org.apache.solr.servlet.HttpRequestContentStream.HttpRequestContentStream(HttpServletRequest)",1,2,2
"org.apache.solr.servlet.HttpRequestContentStream.getStream()",1,1,1
"org.apache.solr.servlet.LogLevelSelection.LogWrapper.LogWrapper(Logger)",1,1,1
"org.apache.solr.servlet.LogLevelSelection.LogWrapper.LogWrapper(String)",1,1,1
"org.apache.solr.servlet.LogLevelSelection.LogWrapper.compareTo(Object)",4,1,4
"org.apache.solr.servlet.LogLevelSelection.LogWrapper.equals(Object)",7,2,7
"org.apache.solr.servlet.LogLevelSelection.LogWrapper.hashCode()",1,2,2
"org.apache.solr.servlet.LogLevelSelection.LogWrapper.level()",2,2,2
"org.apache.solr.servlet.LogLevelSelection.buildWrappers()",4,3,4
"org.apache.solr.servlet.LogLevelSelection.doGet(HttpServletRequest,HttpServletResponse)",1,13,13
"org.apache.solr.servlet.LogLevelSelection.doPost(HttpServletRequest,HttpServletResponse)",4,9,10
"org.apache.solr.servlet.LogLevelSelection.getEffectiveLevel(Logger)",5,2,5
"org.apache.solr.servlet.LogLevelSelection.init()",1,1,1
"org.apache.solr.servlet.MultipartRequestParser.MultipartRequestParser(long)",1,1,1
"org.apache.solr.servlet.MultipartRequestParser.parseParamsAndFillStreams(HttpServletRequest,ArrayList<ContentStream>)",2,4,4
"org.apache.solr.servlet.NoCacheHeaderTest.beforeTest()",1,1,1
"org.apache.solr.servlet.NoCacheHeaderTest.doCacheControl(String)",1,1,1
"org.apache.solr.servlet.NoCacheHeaderTest.doETag(String)",1,1,1
"org.apache.solr.servlet.NoCacheHeaderTest.doLastModified(String)",1,1,1
"org.apache.solr.servlet.NoCacheHeaderTest.testCacheControl()",1,1,1
"org.apache.solr.servlet.NoCacheHeaderTest.testEtag()",1,1,1
"org.apache.solr.servlet.NoCacheHeaderTest.testLastModified()",1,1,1
"org.apache.solr.servlet.RawRequestParser.parseParamsAndFillStreams(HttpServletRequest,ArrayList<ContentStream>)",1,1,1
"org.apache.solr.servlet.SimpleRequestParser.parseParamsAndFillStreams(HttpServletRequest,ArrayList<ContentStream>)",1,1,1
"org.apache.solr.servlet.SolrDispatchFilter.SolrDispatchFilter()",1,1,2
"org.apache.solr.servlet.SolrDispatchFilter.createInitializer()",1,1,1
"org.apache.solr.servlet.SolrDispatchFilter.destroy()",1,2,2
"org.apache.solr.servlet.SolrDispatchFilter.doFilter(ServletRequest,ServletResponse,FilterChain)",12,31,34
"org.apache.solr.servlet.SolrDispatchFilter.execute(HttpServletRequest,SolrRequestHandler,SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.servlet.SolrDispatchFilter.getPathPrefix()",1,1,1
"org.apache.solr.servlet.SolrDispatchFilter.handleAdminRequest(HttpServletRequest,ServletResponse,SolrRequestHandler,SolrQueryRequest)",1,3,3
"org.apache.solr.servlet.SolrDispatchFilter.init(FilterConfig)",1,5,5
"org.apache.solr.servlet.SolrDispatchFilter.sendError(HttpServletResponse,Throwable)",1,4,5
"org.apache.solr.servlet.SolrDispatchFilter.setPathPrefix(String)",1,1,1
"org.apache.solr.servlet.SolrDispatchFilter.writeResponse(SolrQueryResponse,ServletResponse,QueryResponseWriter,SolrQueryRequest,Method)",1,7,7
"org.apache.solr.servlet.SolrRequestParserTest.afterClass()",1,1,1
"org.apache.solr.servlet.SolrRequestParserTest.beforeClass()",1,1,1
"org.apache.solr.servlet.SolrRequestParserTest.testStandardParseParamsAndFillStreams()",1,2,2
"org.apache.solr.servlet.SolrRequestParserTest.testStreamBody()",1,2,2
"org.apache.solr.servlet.SolrRequestParserTest.testStreamURL()",1,2,2
"org.apache.solr.servlet.SolrRequestParserTest.testUrlParamParsing()",1,2,2
"org.apache.solr.servlet.SolrRequestParsers.SolrRequestParsers(Config)",1,2,2
"org.apache.solr.servlet.SolrRequestParsers.buildRequestFrom(SolrCore,SolrParams,Collection<ContentStream>)",5,12,14
"org.apache.solr.servlet.SolrRequestParsers.isHandleSelect()",1,1,1
"org.apache.solr.servlet.SolrRequestParsers.parse(SolrCore,String,HttpServletRequest)",1,1,1
"org.apache.solr.servlet.SolrRequestParsers.parseQueryString(String)",2,5,6
"org.apache.solr.servlet.SolrRequestParsers.setHandleSelect(boolean)",1,1,1
"org.apache.solr.servlet.SolrServlet.doGet(HttpServletRequest,HttpServletResponse)",3,12,12
"org.apache.solr.servlet.SolrServlet.doPost(HttpServletRequest,HttpServletResponse)",1,1,1
"org.apache.solr.servlet.SolrServlet.init()",1,1,1
"org.apache.solr.servlet.SolrServlet.sendErr(int,String,HttpServletRequest,HttpServletResponse)",1,2,4
"org.apache.solr.servlet.SolrServletRequest.SolrServletRequest(SolrCore,HttpServletRequest)",1,1,1
"org.apache.solr.servlet.SolrUpdateServlet.doPost(HttpServletRequest,HttpServletResponse)",2,3,3
"org.apache.solr.servlet.SolrUpdateServlet.init()",1,1,1
"org.apache.solr.servlet.StandardRequestParser.StandardRequestParser(MultipartRequestParser,RawRequestParser)",1,1,1
"org.apache.solr.servlet.StandardRequestParser.parseParamsAndFillStreams(HttpServletRequest,ArrayList<ContentStream>)",6,6,8
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.EtagCacheVal.EtagCacheVal(String)",1,1,1
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.EtagCacheVal.calcEtag(long)",2,2,3
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.calcEtag(SolrQueryRequest)",1,2,2
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.calcLastModified(SolrQueryRequest)",1,2,3
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.checkETagValidators(HttpServletRequest,HttpServletResponse,Method,String)",3,6,7
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.checkHttpCachingVeto(SolrQueryResponse,HttpServletResponse,Method)",3,2,5
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.checkLastModValidators(HttpServletRequest,HttpServletResponse,long)",3,3,6
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.doCacheHeaderValidation(SolrQueryRequest,HttpServletRequest,Method,HttpServletResponse)",4,1,5
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.isMatchingEtag(List<String>,String)",4,4,5
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.sendNotModified(HttpServletResponse)",1,1,1
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.sendPreconditionFailed(HttpServletResponse)",1,1,1
"org.apache.solr.servlet.cache.HttpCacheHeaderUtil.setCacheControlHeader(SolrConfig,HttpServletResponse,Method)",2,3,5
"org.apache.solr.servlet.cache.Method.getMethod(String)",1,1,2
"org.apache.solr.spelling.AbstractLuceneSpellChecker.determineReader(IndexReader)",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getAccuracy()",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getField()",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getFieldTypeName()",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getIndexDir()",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getSourceLocation()",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getSpellChecker()",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getStringDistance()",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getSuggestions(Collection<Token>,IndexReader,int,boolean,boolean)",1,1,1
"org.apache.solr.spelling.AbstractLuceneSpellChecker.getSuggestions(SpellingOptions)",3,12,18
"org.apache.solr.spelling.AbstractLuceneSpellChecker.init(NamedList,SolrCore)",2,8,10
"org.apache.solr.spelling.AbstractLuceneSpellChecker.initIndex()",1,2,2
"org.apache.solr.spelling.AbstractLuceneSpellChecker.reload(SolrCore,SolrIndexSearcher)",1,1,1
"org.apache.solr.spelling.FileBasedSpellChecker.build(SolrCore,SolrIndexSearcher)",1,1,2
"org.apache.solr.spelling.FileBasedSpellChecker.determineReader(IndexReader)",1,1,1
"org.apache.solr.spelling.FileBasedSpellChecker.getCharacterEncoding()",1,1,1
"org.apache.solr.spelling.FileBasedSpellChecker.init(NamedList,SolrCore)",1,1,1
"org.apache.solr.spelling.FileBasedSpellChecker.loadExternalFileDictionary(SolrCore)",1,6,6
"org.apache.solr.spelling.FileBasedSpellCheckerTest.afterClass()",1,1,1
"org.apache.solr.spelling.FileBasedSpellCheckerTest.beforeClass()",1,1,1
"org.apache.solr.spelling.FileBasedSpellCheckerTest.test()",1,1,1
"org.apache.solr.spelling.FileBasedSpellCheckerTest.testFieldType()",1,1,1
"org.apache.solr.spelling.FileBasedSpellCheckerTest.testRAMDirectory()",1,1,1
"org.apache.solr.spelling.IndexBasedSpellChecker.build(SolrCore,SolrIndexSearcher)",1,2,3
"org.apache.solr.spelling.IndexBasedSpellChecker.determineReader(IndexReader)",1,1,2
"org.apache.solr.spelling.IndexBasedSpellChecker.getThreshold()",1,1,1
"org.apache.solr.spelling.IndexBasedSpellChecker.init(NamedList,SolrCore)",1,2,2
"org.apache.solr.spelling.IndexBasedSpellChecker.initSourceReader()",2,2,3
"org.apache.solr.spelling.IndexBasedSpellChecker.reload(SolrCore,SolrIndexSearcher)",1,1,1
"org.apache.solr.spelling.IndexBasedSpellCheckerTest.TestSpellChecker.getSpellChecker()",1,1,1
"org.apache.solr.spelling.IndexBasedSpellCheckerTest.afterClass()",1,1,1
"org.apache.solr.spelling.IndexBasedSpellCheckerTest.beforeClass()",1,2,2
"org.apache.solr.spelling.IndexBasedSpellCheckerTest.testAlternateDistance()",1,1,1
"org.apache.solr.spelling.IndexBasedSpellCheckerTest.testAlternateLocation()",1,2,2
"org.apache.solr.spelling.IndexBasedSpellCheckerTest.testComparator()",1,1,1
"org.apache.solr.spelling.IndexBasedSpellCheckerTest.testExtendedResults()",1,1,1
"org.apache.solr.spelling.IndexBasedSpellCheckerTest.testSpelling()",1,1,1
"org.apache.solr.spelling.PossibilityIterator.PossibilityIterator()",1,1,1
"org.apache.solr.spelling.PossibilityIterator.PossibilityIterator(Map<Token, LinkedHashMap<String, Integer>>,int,int)",6,10,12
"org.apache.solr.spelling.PossibilityIterator.hasNext()",1,1,1
"org.apache.solr.spelling.PossibilityIterator.internalHasNext()",1,1,1
"org.apache.solr.spelling.PossibilityIterator.internalNext()",7,6,10
"org.apache.solr.spelling.PossibilityIterator.next()",1,1,1
"org.apache.solr.spelling.PossibilityIterator.remove()",1,1,1
"org.apache.solr.spelling.QueryConverter.getAnalyzer()",1,1,1
"org.apache.solr.spelling.QueryConverter.init(NamedList)",1,1,1
"org.apache.solr.spelling.QueryConverter.setAnalyzer(Analyzer)",1,1,1
"org.apache.solr.spelling.RankedSpellPossibility.compareTo(RankedSpellPossibility)",1,1,1
"org.apache.solr.spelling.RankedSpellPossibility.getCorrections()",1,1,1
"org.apache.solr.spelling.RankedSpellPossibility.getRank()",1,1,1
"org.apache.solr.spelling.RankedSpellPossibility.setCorrections(List<SpellCheckCorrection>)",1,1,1
"org.apache.solr.spelling.RankedSpellPossibility.setRank(int)",1,1,1
"org.apache.solr.spelling.RankedSpellPossibility.toString()",1,3,3
"org.apache.solr.spelling.SampleComparator.compare(SuggestWord,SuggestWord)",1,1,1
"org.apache.solr.spelling.SimpleQueryConverter.convert(String)",1,2,3
"org.apache.solr.spelling.SolrSpellChecker.getDictionaryName()",1,1,1
"org.apache.solr.spelling.SolrSpellChecker.getQueryAnalyzer()",1,1,1
"org.apache.solr.spelling.SolrSpellChecker.getSuggestions(Collection<Token>,IndexReader)",1,1,1
"org.apache.solr.spelling.SolrSpellChecker.getSuggestions(Collection<Token>,IndexReader,boolean,boolean)",1,1,1
"org.apache.solr.spelling.SolrSpellChecker.getSuggestions(Collection<Token>,IndexReader,int)",1,1,1
"org.apache.solr.spelling.SolrSpellChecker.getSuggestions(SpellingOptions)",1,1,1
"org.apache.solr.spelling.SolrSpellChecker.init(NamedList,SolrCore)",1,5,6
"org.apache.solr.spelling.SpellCheckCollation.compareTo(SpellCheckCollation)",2,2,2
"org.apache.solr.spelling.SpellCheckCollation.getCollationQuery()",1,1,1
"org.apache.solr.spelling.SpellCheckCollation.getHits()",1,1,1
"org.apache.solr.spelling.SpellCheckCollation.getInternalRank()",1,1,1
"org.apache.solr.spelling.SpellCheckCollation.getMisspellingsAndCorrections()",1,1,1
"org.apache.solr.spelling.SpellCheckCollation.setCollationQuery(String)",1,1,1
"org.apache.solr.spelling.SpellCheckCollation.setHits(int)",1,1,1
"org.apache.solr.spelling.SpellCheckCollation.setInternalRank(int)",1,1,1
"org.apache.solr.spelling.SpellCheckCollation.setMisspellingsAndCorrections(NamedList<String>)",1,1,1
"org.apache.solr.spelling.SpellCheckCollator.collate(SpellingResult,String,ResponseBuilder,int,int,int)",4,10,17
"org.apache.solr.spelling.SpellCheckCollator.getCollation(String,List<SpellCheckCorrection>)",3,2,3
"org.apache.solr.spelling.SpellCheckCollatorTest.beforeClass()",1,1,1
"org.apache.solr.spelling.SpellCheckCollatorTest.testCollateWithFilter()",1,2,2
"org.apache.solr.spelling.SpellCheckCollatorTest.testCollateWithMultipleRequestHandlers()",1,1,1
"org.apache.solr.spelling.SpellCheckCollatorTest.testCollationWithHypens()",1,1,1
"org.apache.solr.spelling.SpellCheckCollatorTest.testExtendedCollate()",1,6,6
"org.apache.solr.spelling.SpellCheckCorrection.getCorrection()",1,1,1
"org.apache.solr.spelling.SpellCheckCorrection.getNumberOfOccurences()",1,1,1
"org.apache.solr.spelling.SpellCheckCorrection.getOriginal()",1,1,1
"org.apache.solr.spelling.SpellCheckCorrection.setCorrection(String)",1,1,1
"org.apache.solr.spelling.SpellCheckCorrection.setNumberOfOccurences(int)",1,1,1
"org.apache.solr.spelling.SpellCheckCorrection.setOriginal(Token)",1,1,1
"org.apache.solr.spelling.SpellPossibilityIteratorTest.beforeClass()",1,1,1
"org.apache.solr.spelling.SpellPossibilityIteratorTest.testScalability()",1,2,2
"org.apache.solr.spelling.SpellPossibilityIteratorTest.testSpellPossibilityIterator()",1,6,6
"org.apache.solr.spelling.SpellingOptions.SpellingOptions()",1,1,1
"org.apache.solr.spelling.SpellingOptions.SpellingOptions(Collection<Token>,IndexReader)",1,1,1
"org.apache.solr.spelling.SpellingOptions.SpellingOptions(Collection<Token>,IndexReader,int)",1,1,1
"org.apache.solr.spelling.SpellingOptions.SpellingOptions(Collection<Token>,IndexReader,int,boolean,boolean,float,SolrParams)",1,1,1
"org.apache.solr.spelling.SpellingOptions.SpellingOptions(Collection<Token>,int)",1,1,1
"org.apache.solr.spelling.SpellingQueryConverter.analyze(Collection<Token>,Reader,int)",1,2,2
"org.apache.solr.spelling.SpellingQueryConverter.convert(String)",2,5,6
"org.apache.solr.spelling.SpellingQueryConverterTest.isOffsetCorrect(String,Collection<Token>)",3,2,3
"org.apache.solr.spelling.SpellingQueryConverterTest.test()",1,1,1
"org.apache.solr.spelling.SpellingQueryConverterTest.testMultipleClauses()",1,1,1
"org.apache.solr.spelling.SpellingQueryConverterTest.testSpecialChars()",1,1,1
"org.apache.solr.spelling.SpellingQueryConverterTest.testUnicode()",1,1,1
"org.apache.solr.spelling.SpellingResult.SpellingResult()",1,1,1
"org.apache.solr.spelling.SpellingResult.SpellingResult(Collection<Token>)",1,1,1
"org.apache.solr.spelling.SpellingResult.add(Token,List<String>)",1,3,3
"org.apache.solr.spelling.SpellingResult.add(Token,String,int)",1,2,2
"org.apache.solr.spelling.SpellingResult.add(Token,int)",1,1,1
"org.apache.solr.spelling.SpellingResult.addFrequency(Token,int)",1,1,2
"org.apache.solr.spelling.SpellingResult.get(Token)",1,1,1
"org.apache.solr.spelling.SpellingResult.getSuggestions()",1,1,1
"org.apache.solr.spelling.SpellingResult.getTokenFrequency()",1,1,1
"org.apache.solr.spelling.SpellingResult.getTokenFrequency(Token)",1,1,1
"org.apache.solr.spelling.SpellingResult.getTokens()",1,1,1
"org.apache.solr.spelling.SpellingResult.hasTokenFrequencyInfo()",1,2,2
"org.apache.solr.spelling.SpellingResult.setTokens(Collection<Token>)",1,1,1
"org.apache.solr.spelling.SuggestQueryConverter.convert(String)",2,2,3
"org.apache.solr.spelling.TestSuggestSpellingConverter.assertConvertsTo(String,String[])",1,1,1
"org.apache.solr.spelling.TestSuggestSpellingConverter.testComplicated()",1,1,1
"org.apache.solr.spelling.TestSuggestSpellingConverter.testSimple()",1,1,1
"org.apache.solr.spelling.suggest.Suggester.build(SolrCore,SolrIndexSearcher)",1,7,8
"org.apache.solr.spelling.suggest.Suggester.getSuggestions(Collection<Token>,IndexReader,int,boolean,boolean)",1,1,1
"org.apache.solr.spelling.suggest.Suggester.getSuggestions(SpellingOptions)",4,5,6
"org.apache.solr.spelling.suggest.Suggester.init(NamedList,SolrCore)",1,10,10
"org.apache.solr.spelling.suggest.Suggester.reload(SolrCore,SolrIndexSearcher)",3,2,4
"org.apache.solr.spelling.suggest.SuggesterFSTTest.SuggesterFSTTest()",1,1,1
"org.apache.solr.spelling.suggest.SuggesterTSTTest.SuggesterTSTTest()",1,1,1
"org.apache.solr.spelling.suggest.SuggesterTest.addDocs()",1,1,1
"org.apache.solr.spelling.suggest.SuggesterTest.beforeClass()",1,1,1
"org.apache.solr.spelling.suggest.SuggesterTest.testAnalyzer()",1,1,1
"org.apache.solr.spelling.suggest.SuggesterTest.testRebuild()",1,1,1
"org.apache.solr.spelling.suggest.SuggesterTest.testReload()",1,1,2
"org.apache.solr.spelling.suggest.SuggesterTest.testSuggestions()",1,1,1
"org.apache.solr.spelling.suggest.SuggesterWFSTTest.SuggesterWFSTTest()",1,1,1
"org.apache.solr.spelling.suggest.TestPhraseSuggestions.beforeClass()",1,1,1
"org.apache.solr.spelling.suggest.TestPhraseSuggestions.test()",1,1,1
"org.apache.solr.spelling.suggest.fst.FSTLookupFactory.create(NamedList,SolrCore)",1,3,3
"org.apache.solr.spelling.suggest.fst.FSTLookupFactory.storeFileName()",1,1,1
"org.apache.solr.spelling.suggest.fst.WFSTLookupFactory.create(NamedList,SolrCore)",1,2,2
"org.apache.solr.spelling.suggest.fst.WFSTLookupFactory.storeFileName()",1,1,1
"org.apache.solr.spelling.suggest.jaspell.JaspellLookupFactory.create(NamedList,SolrCore)",1,1,1
"org.apache.solr.spelling.suggest.jaspell.JaspellLookupFactory.storeFileName()",1,1,1
"org.apache.solr.spelling.suggest.tst.TSTLookupFactory.create(NamedList,SolrCore)",1,1,1
"org.apache.solr.spelling.suggest.tst.TSTLookupFactory.storeFileName()",1,1,1
"org.apache.solr.tst.OldRequestHandler.getCategory()",1,1,1
"org.apache.solr.tst.OldRequestHandler.getDescription()",1,1,1
"org.apache.solr.tst.OldRequestHandler.getDocs()",1,1,1
"org.apache.solr.tst.OldRequestHandler.getName()",1,1,1
"org.apache.solr.tst.OldRequestHandler.getSource()",1,1,1
"org.apache.solr.tst.OldRequestHandler.getSourceId()",1,1,1
"org.apache.solr.tst.OldRequestHandler.getStatistics()",1,1,1
"org.apache.solr.tst.OldRequestHandler.getVersion()",1,1,1
"org.apache.solr.tst.OldRequestHandler.handleRequest(SolrQueryRequest,SolrQueryResponse)",1,6,6
"org.apache.solr.tst.OldRequestHandler.init(NamedList)",1,1,1
"org.apache.solr.tst.TestRequestHandler.getCategory()",1,1,1
"org.apache.solr.tst.TestRequestHandler.getDescription()",1,1,1
"org.apache.solr.tst.TestRequestHandler.getDocs()",1,1,1
"org.apache.solr.tst.TestRequestHandler.getName()",1,1,1
"org.apache.solr.tst.TestRequestHandler.getSource()",1,1,1
"org.apache.solr.tst.TestRequestHandler.getSourceId()",1,1,1
"org.apache.solr.tst.TestRequestHandler.getStatistics()",1,1,1
"org.apache.solr.tst.TestRequestHandler.getVersion()",1,1,1
"org.apache.solr.tst.TestRequestHandler.handleRequest(SolrQueryRequest,SolrQueryResponse)",2,25,27
"org.apache.solr.tst.TestRequestHandler.init(NamedList)",1,1,1
"org.apache.solr.tst.TestRequestHandler.test(boolean)",2,2,3
"org.apache.solr.uima.processor.SolrUIMAConfiguration.MapField.MapField(String,String)",4,4,4
"org.apache.solr.uima.processor.SolrUIMAConfiguration.MapField.getFieldName(String)",2,1,3
"org.apache.solr.uima.processor.SolrUIMAConfiguration.MapField.getFieldNameFeature()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfiguration.SolrUIMAConfiguration(String,String[],boolean,Map<String, Map<String, MapField>>,Map<String, Object>,boolean,String)",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfiguration.getAePath()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfiguration.getFieldsToAnalyze()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfiguration.getLogField()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfiguration.getRuntimeParameters()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfiguration.getTypesFeaturesFieldsMapping()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfiguration.isFieldsMerging()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfiguration.isIgnoreErrors()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.SolrUIMAConfigurationReader(NamedList<Object>)",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.getAnalyzeFields()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.readAEOverridingParameters()",1,2,2
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.readAEPath()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.readFieldsMerging()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.readFieldsToAnalyze()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.readIgnoreErrors()",1,1,2
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.readLogField()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.readSolrUIMAConfiguration()",1,1,1
"org.apache.solr.uima.processor.SolrUIMAConfigurationReader.readTypesFeaturesFieldsMapping()",4,4,5
"org.apache.solr.uima.processor.UIMAToSolrMapper.UIMAToSolrMapper(SolrInputDocument,JCas)",1,1,1
"org.apache.solr.uima.processor.UIMAToSolrMapper.map(String,Map<String, MapField>)",1,6,7
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessor.UIMAUpdateRequestProcessor(UpdateRequestProcessor,SolrCore,SolrUIMAConfiguration)",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessor.getTextsToAnalyze(SolrInputDocument)",1,4,4
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessor.initialize(SolrCore,SolrUIMAConfiguration)",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessor.processAdd(AddUpdateCommand)",2,10,10
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessor.processText(String)",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorFactory.init(NamedList)",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorTest.addDoc(String,String)",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorTest.beforeClass()",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorTest.setUp()",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorTest.testErrorHandling()",1,3,5
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorTest.testMultiMap()",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorTest.testProcessing()",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorTest.testProcessorConfiguration()",1,1,1
"org.apache.solr.uima.processor.UIMAUpdateRequestProcessorTest.testTwoUpdates()",1,1,1
"org.apache.solr.uima.processor.ae.AEProviderFactory.AEProviderFactory()",1,1,1
"org.apache.solr.uima.processor.ae.AEProviderFactory.getAEProvider(String,String,Map<String, Object>)",1,2,2
"org.apache.solr.uima.processor.ae.AEProviderFactory.getInstance()",1,1,2
"org.apache.solr.uima.processor.ae.OverridingParamsAEProvider.OverridingParamsAEProvider(String,Map<String, Object>)",1,1,1
"org.apache.solr.uima.processor.ae.OverridingParamsAEProvider.getAE()",1,6,7
"org.apache.solr.uima.processor.ae.OverridingParamsAEProvider.getRuntimeValue(AnalysisEngineDescription,String)",1,6,6
"org.apache.solr.uima.processor.an.DummyEntityAnnotator.process(JCas)",1,4,5
"org.apache.solr.uima.processor.an.DummyExceptionAnnotator.process(JCas)",1,1,1
"org.apache.solr.uima.processor.an.DummySentimentAnnotator.createSentimentAnnotation(JCas,Annotation)",1,1,1
"org.apache.solr.uima.processor.an.DummySentimentAnnotator.process(JCas)",1,5,5
"org.apache.solr.uima.processor.exception.FieldMappingException.FieldMappingException(Exception)",1,1,1
"org.apache.solr.uima.ts.EntityAnnotation.EntityAnnotation()",1,1,1
"org.apache.solr.uima.ts.EntityAnnotation.EntityAnnotation(JCas)",1,1,1
"org.apache.solr.uima.ts.EntityAnnotation.EntityAnnotation(JCas,int,int)",1,1,1
"org.apache.solr.uima.ts.EntityAnnotation.EntityAnnotation(int,TOP_Type)",1,1,1
"org.apache.solr.uima.ts.EntityAnnotation.getEntity()",1,2,3
"org.apache.solr.uima.ts.EntityAnnotation.getName()",1,2,3
"org.apache.solr.uima.ts.EntityAnnotation.getTypeIndexID()",1,1,1
"org.apache.solr.uima.ts.EntityAnnotation.readObject()",1,1,1
"org.apache.solr.uima.ts.EntityAnnotation.setEntity(String)",1,2,3
"org.apache.solr.uima.ts.EntityAnnotation.setName(String)",1,2,3
"org.apache.solr.uima.ts.EntityAnnotation_Type.EntityAnnotation_Type(JCas,Type)",1,3,3
"org.apache.solr.uima.ts.EntityAnnotation_Type.getEntity(int)",1,2,3
"org.apache.solr.uima.ts.EntityAnnotation_Type.getFSGenerator()",1,1,1
"org.apache.solr.uima.ts.EntityAnnotation_Type.getName(int)",1,2,3
"org.apache.solr.uima.ts.EntityAnnotation_Type.setEntity(int,String)",1,2,3
"org.apache.solr.uima.ts.EntityAnnotation_Type.setName(int,String)",1,2,3
"org.apache.solr.uima.ts.SentimentAnnotation.SentimentAnnotation()",1,1,1
"org.apache.solr.uima.ts.SentimentAnnotation.SentimentAnnotation(JCas)",1,1,1
"org.apache.solr.uima.ts.SentimentAnnotation.SentimentAnnotation(JCas,int,int)",1,1,1
"org.apache.solr.uima.ts.SentimentAnnotation.SentimentAnnotation(int,TOP_Type)",1,1,1
"org.apache.solr.uima.ts.SentimentAnnotation.getMood()",1,2,3
"org.apache.solr.uima.ts.SentimentAnnotation.getTypeIndexID()",1,1,1
"org.apache.solr.uima.ts.SentimentAnnotation.readObject()",1,1,1
"org.apache.solr.uima.ts.SentimentAnnotation.setMood(String)",1,2,3
"org.apache.solr.uima.ts.SentimentAnnotation_Type.SentimentAnnotation_Type(JCas,Type)",1,2,2
"org.apache.solr.uima.ts.SentimentAnnotation_Type.getFSGenerator()",1,1,1
"org.apache.solr.uima.ts.SentimentAnnotation_Type.getMood(int)",1,2,3
"org.apache.solr.uima.ts.SentimentAnnotation_Type.setMood(int,String)",1,2,3
"org.apache.solr.update.AddUpdateCommand.AddUpdateCommand()",1,1,1
"org.apache.solr.update.AddUpdateCommand.clear()",1,1,1
"org.apache.solr.update.AddUpdateCommand.getIndexedId(IndexSchema)",1,6,6
"org.apache.solr.update.AddUpdateCommand.getLuceneDocument(IndexSchema)",1,1,3
"org.apache.solr.update.AddUpdateCommand.getPrintableId(IndexSchema)",5,5,7
"org.apache.solr.update.AddUpdateCommand.getSolrInputDocument()",1,1,1
"org.apache.solr.update.AddUpdateCommand.toString()",1,2,2
"org.apache.solr.update.AutoCommitTest.getSchemaFile()",1,1,1
"org.apache.solr.update.AutoCommitTest.getSolrConfigFile()",1,1,1
"org.apache.solr.update.AutoCommitTest.testCommitWithin()",1,3,3
"org.apache.solr.update.AutoCommitTest.testMaxDocs()",1,2,2
"org.apache.solr.update.AutoCommitTest.testMaxTime()",1,2,2
"org.apache.solr.update.AutoCommitTest.toContentStreams(String,String)",1,1,1
"org.apache.solr.update.AutoCommitTest.verbose(Object...)",2,2,3
"org.apache.solr.update.CommitTracker.CommitTracker(String,SolrCore,int,int,boolean,boolean)",1,1,1
"org.apache.solr.update.CommitTracker._scheduleCommitWithin(long)",5,3,6
"org.apache.solr.update.CommitTracker._scheduleCommitWithinIfNeeded(long)",1,2,3
"org.apache.solr.update.CommitTracker.addedDocument(int)",1,3,3
"org.apache.solr.update.CommitTracker.close()",1,2,2
"org.apache.solr.update.CommitTracker.deletedDocument(int)",1,1,1
"org.apache.solr.update.CommitTracker.didCommit()",1,1,1
"org.apache.solr.update.CommitTracker.didRollback()",1,2,2
"org.apache.solr.update.CommitTracker.getCommitCount()",1,1,1
"org.apache.solr.update.CommitTracker.getDocsUpperBound()",1,1,1
"org.apache.solr.update.CommitTracker.getTimeUpperBound()",1,1,1
"org.apache.solr.update.CommitTracker.run()",1,2,2
"org.apache.solr.update.CommitTracker.scheduleCommitWithin(long)",1,1,1
"org.apache.solr.update.CommitTracker.setDocsUpperBound(int)",1,1,1
"org.apache.solr.update.CommitTracker.setTimeUpperBound(long)",1,1,1
"org.apache.solr.update.CommitTracker.toString()",2,1,5
"org.apache.solr.update.CommitUpdateCommand.CommitUpdateCommand(boolean)",1,1,1
"org.apache.solr.update.CommitUpdateCommand.toString()",1,1,1
"org.apache.solr.update.DeleteUpdateCommand.DeleteUpdateCommand()",1,1,1
"org.apache.solr.update.DeleteUpdateCommand.toString()",1,2,2
"org.apache.solr.update.DirectUpdateHandler.DirectUpdateHandler(SolrCore)",1,1,1
"org.apache.solr.update.DirectUpdateHandler.addConditionally(AddUpdateCommand)",2,2,3
"org.apache.solr.update.DirectUpdateHandler.addDoc(AddUpdateCommand)",9,9,26
"org.apache.solr.update.DirectUpdateHandler.addNoOverwriteNoDups(AddUpdateCommand)",2,2,3
"org.apache.solr.update.DirectUpdateHandler.allowDups(AddUpdateCommand)",1,1,1
"org.apache.solr.update.DirectUpdateHandler.close()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.closeSearcher()",1,2,2
"org.apache.solr.update.DirectUpdateHandler.closeWriter()",1,2,2
"org.apache.solr.update.DirectUpdateHandler.commit(CommitUpdateCommand)",1,8,11
"org.apache.solr.update.DirectUpdateHandler.delete(DeleteUpdateCommand)",3,1,5
"org.apache.solr.update.DirectUpdateHandler.deleteByQuery(DeleteUpdateCommand)",3,2,6
"org.apache.solr.update.DirectUpdateHandler.deleteInIndex(String)",2,3,5
"org.apache.solr.update.DirectUpdateHandler.doAdd(Document)",1,1,1
"org.apache.solr.update.DirectUpdateHandler.existsInIndex(String)",2,2,5
"org.apache.solr.update.DirectUpdateHandler.getCategory()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.getDescription()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.getDocs()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.getName()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.getSource()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.getSourceId()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.getStatistics()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.getVersion()",1,1,1
"org.apache.solr.update.DirectUpdateHandler.mergeIndexes(MergeIndexesCommand)",1,1,1
"org.apache.solr.update.DirectUpdateHandler.openSearcher()",1,2,2
"org.apache.solr.update.DirectUpdateHandler.openWriter()",1,2,2
"org.apache.solr.update.DirectUpdateHandler.overwrite(String,Document)",1,2,2
"org.apache.solr.update.DirectUpdateHandler.overwriteBoth(AddUpdateCommand)",1,1,1
"org.apache.solr.update.DirectUpdateHandler.rollback(RollbackUpdateCommand)",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.DirectUpdateHandler2(SolrCore)",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.addDoc(AddUpdateCommand)",1,5,8
"org.apache.solr.update.DirectUpdateHandler2.close()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.closeWriter()",1,2,2
"org.apache.solr.update.DirectUpdateHandler2.commit(CommitUpdateCommand)",1,9,12
"org.apache.solr.update.DirectUpdateHandler2.delete(DeleteUpdateCommand)",3,3,5
"org.apache.solr.update.DirectUpdateHandler2.deleteAll()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.deleteByQuery(DeleteUpdateCommand)",3,5,7
"org.apache.solr.update.DirectUpdateHandler2.forceOpenWriter()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.getCategory()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.getDescription()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.getDocs()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.getName()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.getSource()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.getSourceId()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.getStatistics()",1,3,3
"org.apache.solr.update.DirectUpdateHandler2.getVersion()",1,1,1
"org.apache.solr.update.DirectUpdateHandler2.mergeIndexes(MergeIndexesCommand)",1,4,5
"org.apache.solr.update.DirectUpdateHandler2.openWriter()",1,2,2
"org.apache.solr.update.DirectUpdateHandler2.rollback(RollbackUpdateCommand)",1,1,2
"org.apache.solr.update.DirectUpdateHandler2.rollbackWriter()",1,2,2
"org.apache.solr.update.DirectUpdateHandler2.toString()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerOptimizeTest.assertNumSegments(String,int)",1,1,1
"org.apache.solr.update.DirectUpdateHandlerOptimizeTest.getSchemaFile()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerOptimizeTest.getSolrConfigFile()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerOptimizeTest.testOptimize()",1,2,3
"org.apache.solr.update.DirectUpdateHandlerTest.addSimpleDoc(String)",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.beforeClass()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.deleteSimpleDoc(String)",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.setUp()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.testAddCommit()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.testAddRollback()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.testDeleteCommit()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.testDeleteRollback()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.testExpungeDeletes()",1,1,1
"org.apache.solr.update.DirectUpdateHandlerTest.testRequireUniqueKey()",1,1,3
"org.apache.solr.update.DirectUpdateHandlerTest.testUncommit()",1,1,1
"org.apache.solr.update.DocumentBuilder.DocumentBuilder(IndexSchema)",1,1,1
"org.apache.solr.update.DocumentBuilder.addField(Document,SchemaField,String,float)",1,5,5
"org.apache.solr.update.DocumentBuilder.addField(SchemaField,String,float)",1,1,1
"org.apache.solr.update.DocumentBuilder.addField(String,String)",1,1,1
"org.apache.solr.update.DocumentBuilder.addField(String,String,float)",2,6,7
"org.apache.solr.update.DocumentBuilder.addSingleField(SchemaField,String,float)",8,9,9
"org.apache.solr.update.DocumentBuilder.endDoc()",1,1,1
"org.apache.solr.update.DocumentBuilder.getDoc()",2,7,8
"org.apache.solr.update.DocumentBuilder.getID(SolrInputDocument,IndexSchema)",1,2,2
"org.apache.solr.update.DocumentBuilder.loadStoredFields(SolrDocument,Document)",1,4,4
"org.apache.solr.update.DocumentBuilder.setBoost(float)",1,1,1
"org.apache.solr.update.DocumentBuilder.startDoc()",1,1,1
"org.apache.solr.update.DocumentBuilder.toDocument(SolrInputDocument,IndexSchema)",12,31,33
"org.apache.solr.update.DocumentBuilderTest.beforeClass()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testBoost()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testBoostOmitNorms()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testBuildDocument()",1,2,2
"org.apache.solr.update.DocumentBuilderTest.testCopyFieldWithDocumentBoost()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testCopyFieldWithFieldBoost()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testDocumentBoostOmitNorms()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testExceptions()",1,3,3
"org.apache.solr.update.DocumentBuilderTest.testMultiField()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testNullField()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testWithPolyFieldsAndDocumentBoost()",1,1,1
"org.apache.solr.update.DocumentBuilderTest.testWithPolyFieldsAndFieldBoost()",1,1,1
"org.apache.solr.update.DummyMergePolicy.DummyMergePolicy()",1,1,1
"org.apache.solr.update.DummyMergePolicy.DummyMergePolicy(IndexWriter)",1,1,1
"org.apache.solr.update.MergeIndexesCommand.MergeIndexesCommand(IndexReader[])",1,1,1
"org.apache.solr.update.MergeIndexesCommand.toString()",1,3,4
"org.apache.solr.update.NewSearcherListener.NewSearcherListener()",1,1,1
"org.apache.solr.update.NewSearcherListener.NewSearcherListener(TriggerOn)",1,1,1
"org.apache.solr.update.NewSearcherListener.init(NamedList)",1,1,1
"org.apache.solr.update.NewSearcherListener.newSearcher(SolrIndexSearcher,SolrIndexSearcher)",1,1,6
"org.apache.solr.update.NewSearcherListener.postCommit()",1,1,1
"org.apache.solr.update.NewSearcherListener.postSoftCommit()",1,1,1
"org.apache.solr.update.NewSearcherListener.reset()",1,1,1
"org.apache.solr.update.NewSearcherListener.waitForNewSearcher(int)",4,3,5
"org.apache.solr.update.RollbackUpdateCommand.RollbackUpdateCommand()",1,1,1
"org.apache.solr.update.SolrIndexConfig.SolrIndexConfig(SolrConfig)",1,2,5
"org.apache.solr.update.SolrIndexConfig.SolrIndexConfig(SolrConfig,String,SolrIndexConfig)",1,5,6
"org.apache.solr.update.SolrIndexConfig.assertWarnOrFail(String,boolean,boolean)",3,3,3
"org.apache.solr.update.SolrIndexConfig.buildMergePolicy(IndexSchema)",1,7,8
"org.apache.solr.update.SolrIndexConfig.buildMergeScheduler(IndexSchema)",1,2,3
"org.apache.solr.update.SolrIndexConfig.getPluginInfo(String,SolrConfig,PluginInfo)",1,2,2
"org.apache.solr.update.SolrIndexConfig.toIndexWriterConfig(IndexSchema)",1,5,5
"org.apache.solr.update.SolrIndexConfigTest.testFailingSolrIndexConfigCreation()",1,1,2
"org.apache.solr.update.SolrIndexConfigTest.testTieredMPSolrIndexConfigCreation()",1,1,1
"org.apache.solr.update.SolrIndexWriter.SolrIndexWriter(String,String,DirectoryFactory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy)",1,4,5
"org.apache.solr.update.SolrIndexWriter.TimeLoggingPrintStream.TimeLoggingPrintStream(OutputStream,boolean)",1,1,1
"org.apache.solr.update.SolrIndexWriter.TimeLoggingPrintStream.println(String)",1,1,1
"org.apache.solr.update.SolrIndexWriter.close()",1,2,2
"org.apache.solr.update.SolrIndexWriter.finalize()",1,2,2
"org.apache.solr.update.SolrIndexWriter.getDirectory(String,DirectoryFactory,SolrIndexConfig)",5,6,6
"org.apache.solr.update.SolrIndexWriter.rollback()",1,1,1
"org.apache.solr.update.TestIndexingPerformance.getSchemaFile()",1,1,1
"org.apache.solr.update.TestIndexingPerformance.getSolrConfigFile()",1,1,1
"org.apache.solr.update.TestIndexingPerformance.testIndexingPerf()",1,6,7
"org.apache.solr.update.UpdateCommand.UpdateCommand(String)",1,1,1
"org.apache.solr.update.UpdateCommand.toString()",1,1,1
"org.apache.solr.update.UpdateHandler.DeleteHitCollector.DeleteHitCollector(SolrIndexSearcher)",1,1,1
"org.apache.solr.update.UpdateHandler.DeleteHitCollector.acceptsDocsOutOfOrder()",1,1,1
"org.apache.solr.update.UpdateHandler.DeleteHitCollector.collect(int)",1,1,2
"org.apache.solr.update.UpdateHandler.DeleteHitCollector.setNextReader(IndexReader,int)",1,1,1
"org.apache.solr.update.UpdateHandler.DeleteHitCollector.setScorer(Scorer)",1,1,1
"org.apache.solr.update.UpdateHandler.UpdateHandler(SolrCore)",1,3,3
"org.apache.solr.update.UpdateHandler.callPostCommitCallbacks()",1,2,2
"org.apache.solr.update.UpdateHandler.callPostOptimizeCallbacks()",1,2,2
"org.apache.solr.update.UpdateHandler.createMainIndexWriter(String,boolean)",1,1,1
"org.apache.solr.update.UpdateHandler.getIndexedId(Document)",4,3,5
"org.apache.solr.update.UpdateHandler.getIndexedIdOptional(Document)",3,1,3
"org.apache.solr.update.UpdateHandler.idTerm(String)",1,1,1
"org.apache.solr.update.UpdateHandler.parseEventListeners()",1,4,4
"org.apache.solr.update.UpdateHandler.registerCommitCallback(SolrEventListener)",1,1,1
"org.apache.solr.update.UpdateHandler.registerOptimizeCallback(SolrEventListener)",1,1,1
"org.apache.solr.update.UpdateParamsTest.getSchemaFile()",1,1,1
"org.apache.solr.update.UpdateParamsTest.getSolrConfigFile()",1,1,1
"org.apache.solr.update.UpdateParamsTest.testUpdateProcessorParamDeprecation()",1,3,3
"org.apache.solr.update.processor.BufferingRequestProcessor.BufferingRequestProcessor(UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.BufferingRequestProcessor.finish()",1,1,1
"org.apache.solr.update.processor.BufferingRequestProcessor.processAdd(AddUpdateCommand)",1,1,1
"org.apache.solr.update.processor.BufferingRequestProcessor.processCommit(CommitUpdateCommand)",1,1,1
"org.apache.solr.update.processor.BufferingRequestProcessor.processDelete(DeleteUpdateCommand)",1,1,1
"org.apache.solr.update.processor.BufferingRequestProcessor.processRollback(RollbackUpdateCommand)",1,1,1
"org.apache.solr.update.processor.CustomUpdateRequestProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.CustomUpdateRequestProcessorFactory.init(NamedList)",1,1,1
"org.apache.solr.update.processor.DetectedLanguage.DetectedLanguage(String,Double)",1,1,1
"org.apache.solr.update.processor.DetectedLanguage.getCertainty()",1,1,1
"org.apache.solr.update.processor.DetectedLanguage.getLangCode()",1,1,1
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessor.LangDetectLanguageIdentifierUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessor.detectLanguage(String)",2,4,4
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,2,2
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessorFactory.inform(SolrCore)",1,1,1
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessorFactory.init(NamedList)",1,5,9
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessorFactory.loadData()",2,2,3
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessorFactoryTest.createLangIdProcessor(ModifiableSolrParams)",1,1,1
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessorFactoryTest.testLangIdGlobal()",1,1,1
"org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessorFactoryTest.tooShortDoc()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.LanguageIdentifierUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.concatFields(SolrInputDocument,String[])",1,4,4
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.getFallbackLang(SolrInputDocument,String[],String)",3,4,4
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.getMappedField(String,String)",1,2,2
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.initParams(SolrParams)",2,12,13
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.isEnabled()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.process(SolrInputDocument)",5,20,20
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.processAdd(AddUpdateCommand)",1,2,2
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.resolveLanguage(List<DetectedLanguage>,String)",1,7,7
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.resolveLanguage(String,String)",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.setEnabled(boolean)",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.assertLang(String,String...)",2,1,2
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.beforeClass()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.englishDoc()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.setUp()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.sid(String...)",1,2,2
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.testDefaultFallbackEmptyString()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.testFallback()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.testLangIdGlobal()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.testMapFieldName()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.testPreExisting()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.testResolveLanguage()",1,1,1
"org.apache.solr.update.processor.LanguageIdentifierUpdateProcessorFactoryTestCase.tooShortDoc()",1,1,1
"org.apache.solr.update.processor.LogUpdateProcessor.LogUpdateProcessor(SolrQueryRequest,SolrQueryResponse,LogUpdateProcessorFactory,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.LogUpdateProcessor.finish()",1,4,6
"org.apache.solr.update.processor.LogUpdateProcessor.processAdd(AddUpdateCommand)",1,5,5
"org.apache.solr.update.processor.LogUpdateProcessor.processCommit(CommitUpdateCommand)",1,3,4
"org.apache.solr.update.processor.LogUpdateProcessor.processDelete(DeleteUpdateCommand)",1,8,8
"org.apache.solr.update.processor.LogUpdateProcessor.processMergeIndexes(MergeIndexesCommand)",1,3,3
"org.apache.solr.update.processor.LogUpdateProcessor.processRollback(RollbackUpdateCommand)",1,3,3
"org.apache.solr.update.processor.LogUpdateProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",2,1,2
"org.apache.solr.update.processor.LogUpdateProcessorFactory.init(NamedList)",1,2,2
"org.apache.solr.update.processor.Lookup3Signature.Lookup3Signature()",1,1,1
"org.apache.solr.update.processor.Lookup3Signature.add(String)",1,1,1
"org.apache.solr.update.processor.Lookup3Signature.getSignature()",1,1,1
"org.apache.solr.update.processor.MD5Signature.MD5Signature()",1,1,1
"org.apache.solr.update.processor.MD5Signature.add(String)",1,2,2
"org.apache.solr.update.processor.MD5Signature.getSignature()",1,1,1
"org.apache.solr.update.processor.RunUpdateProcessor.RunUpdateProcessor(SolrQueryRequest,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.RunUpdateProcessor.processAdd(AddUpdateCommand)",1,1,1
"org.apache.solr.update.processor.RunUpdateProcessor.processCommit(CommitUpdateCommand)",1,1,1
"org.apache.solr.update.processor.RunUpdateProcessor.processDelete(DeleteUpdateCommand)",1,2,2
"org.apache.solr.update.processor.RunUpdateProcessor.processMergeIndexes(MergeIndexesCommand)",1,1,1
"org.apache.solr.update.processor.RunUpdateProcessor.processRollback(RollbackUpdateCommand)",1,1,1
"org.apache.solr.update.processor.RunUpdateProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.Signature.init(SolrParams)",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.SignatureUpdateProcessor.SignatureUpdateProcessor(SolrQueryRequest,SolrQueryResponse,SignatureUpdateProcessorFactory,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.SignatureUpdateProcessor.processAdd(AddUpdateCommand)",1,10,11
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.getOverwriteDupes()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.getSigFields()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.getSignatureClass()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.getSignatureField()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.init(NamedList)",1,4,4
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.isEnabled()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactory.setEnabled(boolean)",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.UnusualList.UnusualList(int)",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.UnusualList.toString()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.addDoc(String)",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.beforeClass()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.checkNumDocs(int)",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.setUp()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.testDupeAllFieldsDetection()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.testDupeDetection()",1,1,1
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.testMultiThreaded()",3,9,11
"org.apache.solr.update.processor.SignatureUpdateProcessorFactoryTest.testNonStringFieldsValues()",1,4,4
"org.apache.solr.update.processor.TextProfileSignature.Token.Token(int,String)",1,1,1
"org.apache.solr.update.processor.TextProfileSignature.Token.toString()",1,1,1
"org.apache.solr.update.processor.TextProfileSignature.TokenComparator.compare(Token,Token)",1,1,1
"org.apache.solr.update.processor.TextProfileSignature.add(String)",3,11,16
"org.apache.solr.update.processor.TextProfileSignature.getSignature()",1,1,1
"org.apache.solr.update.processor.TextProfileSignature.init(SolrParams)",1,1,1
"org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessor.TikaLanguageIdentifierUpdateProcessor(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessor.detectLanguage(String)",1,2,3
"org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,2,2
"org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory.inform(SolrCore)",1,1,1
"org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory.init(NamedList)",1,5,8
"org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactoryTest.createLangIdProcessor(ModifiableSolrParams)",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessor.URLClassifyProcessor(SolrParams,SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessor.getCanonicalUrl(URL)",1,2,2
"org.apache.solr.update.processor.URLClassifyProcessor.getNormalizedURL(String)",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessor.getPathWithoutSuffix(URL)",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessor.initParameters(SolrParams)",1,2,2
"org.apache.solr.update.processor.URLClassifyProcessor.isEnabled()",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessor.isLandingPage(URL)",2,2,2
"org.apache.solr.update.processor.URLClassifyProcessor.isTopLevelPage(URL)",1,2,2
"org.apache.solr.update.processor.URLClassifyProcessor.landingPageSuffix(URL)",3,2,3
"org.apache.solr.update.processor.URLClassifyProcessor.length(URL)",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessor.levels(URL)",1,2,3
"org.apache.solr.update.processor.URLClassifyProcessor.processAdd(AddUpdateCommand)",1,7,9
"org.apache.solr.update.processor.URLClassifyProcessor.setEnabled(boolean)",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorFactory.init(NamedList)",1,2,2
"org.apache.solr.update.processor.URLClassifyProcessorTest.initTest()",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorTest.testCanonicalUrl()",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorTest.testLandingPage()",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorTest.testLength()",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorTest.testLevels()",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorTest.testNormalizations()",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorTest.testProcessor()",1,1,1
"org.apache.solr.update.processor.URLClassifyProcessorTest.testTopLevelPage()",1,1,1
"org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactory.UniqFieldsUpdateProcessor.UniqFieldsUpdateProcessor(UpdateRequestProcessor,Set<String>)",1,1,1
"org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactory.UniqFieldsUpdateProcessor.processAdd(AddUpdateCommand)",1,7,7
"org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactory.getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactory.init(NamedList)",1,3,3
"org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactoryTest.addDoc(String)",1,1,1
"org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactoryTest.beforeClass()",1,1,1
"org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactoryTest.setUp()",1,1,1
"org.apache.solr.update.processor.UniqFieldsUpdateProcessorFactoryTest.testUniqFields()",1,1,1
"org.apache.solr.update.processor.UpdateRequestProcessor.UpdateRequestProcessor(UpdateRequestProcessor)",1,1,1
"org.apache.solr.update.processor.UpdateRequestProcessor.finish()",1,2,2
"org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(AddUpdateCommand)",1,2,2
"org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(CommitUpdateCommand)",1,2,2
"org.apache.solr.update.processor.UpdateRequestProcessor.processDelete(DeleteUpdateCommand)",1,2,2
"org.apache.solr.update.processor.UpdateRequestProcessor.processMergeIndexes(MergeIndexesCommand)",1,2,2
"org.apache.solr.update.processor.UpdateRequestProcessor.processRollback(RollbackUpdateCommand)",1,2,2
"org.apache.solr.update.processor.UpdateRequestProcessorChain.UpdateRequestProcessorChain(SolrCore)",1,1,1
"org.apache.solr.update.processor.UpdateRequestProcessorChain.UpdateRequestProcessorChain(UpdateRequestProcessorFactory[],SolrCore)",1,1,1
"org.apache.solr.update.processor.UpdateRequestProcessorChain.createProcessor(SolrQueryRequest,SolrQueryResponse)",1,2,3
"org.apache.solr.update.processor.UpdateRequestProcessorChain.getFactories()",1,1,1
"org.apache.solr.update.processor.UpdateRequestProcessorChain.init(PluginInfo)",2,1,2
"org.apache.solr.update.processor.UpdateRequestProcessorFactory.init(NamedList)",1,1,1
"org.apache.solr.update.processor.UpdateRequestProcessorFactoryTest.getSchemaFile()",1,1,1
"org.apache.solr.update.processor.UpdateRequestProcessorFactoryTest.getSolrConfigFile()",1,1,1
"org.apache.solr.update.processor.UpdateRequestProcessorFactoryTest.testConfiguration()",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.Doc.toString()",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.add(Doc,String...)",1,2,4
"org.apache.solr.util.AbstractSolrTestCase.adoc(SolrInputDocument)",1,3,3
"org.apache.solr.util.AbstractSolrTestCase.adoc(String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.adoc(int,String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.afterClassAbstractSolrTestCase()",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.assertFailedU(String)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.assertFailedU(String,String)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.assertQ(SolrQueryRequest,String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.assertQ(String,SolrQueryRequest,String...)",1,2,5
"org.apache.solr.util.AbstractSolrTestCase.assertQEx(String,SolrQueryRequest,ErrorCode)",1,2,3
"org.apache.solr.util.AbstractSolrTestCase.assertQEx(String,SolrQueryRequest,int)",1,2,3
"org.apache.solr.util.AbstractSolrTestCase.assertU(String)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.assertU(String,String)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.beforeClassAbstractSolrTestCase()",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.checkUpdateU(String,String,boolean)",1,4,6
"org.apache.solr.util.AbstractSolrTestCase.commit(String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.delI(String,String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.delQ(String,String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.doc(String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.getFile(String)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.getSolrHome()",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.ignoreException(String)",1,1,2
"org.apache.solr.util.AbstractSolrTestCase.optimize(String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.postSetUp()",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.preTearDown()",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.recurseDelete(File)",4,4,4
"org.apache.solr.util.AbstractSolrTestCase.req(String...)",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.req(String[],String...)",1,2,2
"org.apache.solr.util.AbstractSolrTestCase.resetExceptionIgnores()",1,1,1
"org.apache.solr.util.AbstractSolrTestCase.setUp()",1,3,3
"org.apache.solr.util.AbstractSolrTestCase.tearDown()",1,6,6
"org.apache.solr.util.ArraysUtils.equals(char[],int,char[],int,int)",4,1,5
"org.apache.solr.util.ArraysUtilsTest.test()",1,1,1
"org.apache.solr.util.BCDUtils.base100SortableIntToBase10(String)",1,1,1
"org.apache.solr.util.BCDUtils.base100SortableIntToBase10(char[],int,int,char[],int)",2,1,7
"org.apache.solr.util.BCDUtils.base100toBase10(char[],int,int,char[],int)",3,1,6
"org.apache.solr.util.BCDUtils.base10kSortableIntToBase10(String)",1,1,1
"org.apache.solr.util.BCDUtils.base10kSortableIntToBase10(char[],int,int,char[],int)",2,5,9
"org.apache.solr.util.BCDUtils.base10toBase100(char[],int,int,char[],int)",7,1,11
"org.apache.solr.util.BCDUtils.base10toBase100SortableInt(String)",1,1,1
"org.apache.solr.util.BCDUtils.base10toBase100SortableInt(char[],int,int,char[],int)",6,2,12
"org.apache.solr.util.BCDUtils.base10toBase10kSortableInt(String)",1,1,1
"org.apache.solr.util.BCDUtils.base10toBase10kSortableInt(char[],int,int,char[],int)",6,2,14
"org.apache.solr.util.BCDUtils.div10(int)",1,1,1
"org.apache.solr.util.BCDUtils.mul10(int)",1,1,1
"org.apache.solr.util.Base100S.toExternal(String)",1,1,1
"org.apache.solr.util.Base100S.toInternal(String)",1,1,1
"org.apache.solr.util.Base10kS.toExternal(String)",1,1,1
"org.apache.solr.util.Base10kS.toInternal(String)",1,1,1
"org.apache.solr.util.BitSetIterator.BitSetIterator(OpenBitSet)",1,1,1
"org.apache.solr.util.BitSetIterator.BitSetIterator(long[],int)",1,1,1
"org.apache.solr.util.BitSetIterator.next()",4,2,5
"org.apache.solr.util.BitSetIterator.next(int)",5,1,5
"org.apache.solr.util.BitSetIterator.shift()",1,1,4
"org.apache.solr.util.BitSetPerf.main(String[])",1,34,40
"org.apache.solr.util.BitSetPerf.randomSets(int,int,BitSet,OpenBitSet)",1,3,3
"org.apache.solr.util.BoundedTreeSet.BoundedTreeSet(int)",1,1,1
"org.apache.solr.util.BoundedTreeSet.BoundedTreeSet(int,Collection<? extends E>)",1,1,1
"org.apache.solr.util.BoundedTreeSet.BoundedTreeSet(int,Comparator<? super E>)",1,1,1
"org.apache.solr.util.BoundedTreeSet.BoundedTreeSet(int,SortedSet<E>)",1,1,1
"org.apache.solr.util.BoundedTreeSet.add(E)",1,1,1
"org.apache.solr.util.BoundedTreeSet.addAll(Collection<? extends E>)",1,1,1
"org.apache.solr.util.BoundedTreeSet.adjust()",1,2,2
"org.apache.solr.util.BoundedTreeSet.getMaxSize()",1,1,1
"org.apache.solr.util.BoundedTreeSet.setMaxSize(int)",1,1,1
"org.apache.solr.util.CommonParams.CommonParams()",1,1,1
"org.apache.solr.util.CommonParams.CommonParams(NamedList)",1,1,1
"org.apache.solr.util.CommonParams.setValues(NamedList)",1,9,9
"org.apache.solr.util.ConcurrentLFUCache.CacheEntry.CacheEntry(K,V,long)",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.CacheEntry.compareTo(CacheEntry<K, V>)",3,1,5
"org.apache.solr.util.ConcurrentLFUCache.CacheEntry.equals(Object)",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.CacheEntry.hashCode()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.CacheEntry.toString()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.CleanupThread.CleanupThread(ConcurrentLFUCache)",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.CleanupThread.run()",5,2,6
"org.apache.solr.util.ConcurrentLFUCache.CleanupThread.stopThread()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.CleanupThread.wakeThread()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.ConcurrentLFUCache(int,int)",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.ConcurrentLFUCache(int,int,int,int,boolean,boolean,EvictionListener<K, V>,boolean)",3,2,4
"org.apache.solr.util.ConcurrentLFUCache.Stats.add(Stats)",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.Stats.getCumulativeEvictions()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.Stats.getCumulativeHits()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.Stats.getCumulativeLookups()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.Stats.getCumulativeMisses()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.Stats.getCumulativeNonLivePuts()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.Stats.getCumulativePuts()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.Stats.getCurrentSize()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.clear()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.destroy()",1,2,2
"org.apache.solr.util.ConcurrentLFUCache.evictEntry(K)",2,2,3
"org.apache.solr.util.ConcurrentLFUCache.finalize()",1,2,2
"org.apache.solr.util.ConcurrentLFUCache.get(K)",2,4,4
"org.apache.solr.util.ConcurrentLFUCache.getLeastUsedItems(int)",2,6,7
"org.apache.solr.util.ConcurrentLFUCache.getMap()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.getMostUsedItems(int)",2,6,7
"org.apache.solr.util.ConcurrentLFUCache.getStats()",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.markAndSweep()",2,7,8
"org.apache.solr.util.ConcurrentLFUCache.put(K,V)",2,6,9
"org.apache.solr.util.ConcurrentLFUCache.remove(K)",2,2,2
"org.apache.solr.util.ConcurrentLFUCache.setAlive(boolean)",1,1,1
"org.apache.solr.util.ConcurrentLFUCache.size()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.CacheEntry.CacheEntry(K,V,long)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.CacheEntry.compareTo(CacheEntry<K, V>)",2,1,3
"org.apache.solr.util.ConcurrentLRUCache.CacheEntry.equals(Object)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.CacheEntry.hashCode()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.CacheEntry.setLastAccessed(long)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.CacheEntry.toString()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.CleanupThread.CleanupThread(ConcurrentLRUCache)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.CleanupThread.run()",5,2,6
"org.apache.solr.util.ConcurrentLRUCache.CleanupThread.stopThread()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.CleanupThread.wakeThread()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.ConcurrentLRUCache(int,int)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.ConcurrentLRUCache(int,int,int,int,boolean,boolean,EvictionListener<K, V>)",3,2,4
"org.apache.solr.util.ConcurrentLRUCache.PQueue.PQueue(int)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.PQueue.getValues()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.PQueue.lessThan(Object,Object)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.PQueue.myInsertWithOverflow(Object)",3,4,4
"org.apache.solr.util.ConcurrentLRUCache.Stats.add(Stats)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.Stats.getCumulativeEvictions()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.Stats.getCumulativeHits()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.Stats.getCumulativeLookups()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.Stats.getCumulativeMisses()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.Stats.getCumulativeNonLivePuts()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.Stats.getCumulativePuts()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.Stats.getCurrentSize()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.clear()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.destroy()",1,2,2
"org.apache.solr.util.ConcurrentLRUCache.evictEntry(K)",2,2,3
"org.apache.solr.util.ConcurrentLRUCache.finalize()",1,2,2
"org.apache.solr.util.ConcurrentLRUCache.get(K)",2,4,4
"org.apache.solr.util.ConcurrentLRUCache.getLatestAccessedItems(int)",2,5,6
"org.apache.solr.util.ConcurrentLRUCache.getMap()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.getOldestAccessedItems(int)",2,5,6
"org.apache.solr.util.ConcurrentLRUCache.getStats()",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.markAndSweep()",9,17,24
"org.apache.solr.util.ConcurrentLRUCache.put(K,V)",2,6,9
"org.apache.solr.util.ConcurrentLRUCache.remove(K)",2,2,2
"org.apache.solr.util.ConcurrentLRUCache.setAlive(boolean)",1,1,1
"org.apache.solr.util.ConcurrentLRUCache.size()",1,1,1
"org.apache.solr.util.DOMUtilTestBase.getDocument(String)",1,1,1
"org.apache.solr.util.DOMUtilTestBase.getNode(Document,String)",1,1,1
"org.apache.solr.util.DOMUtilTestBase.getNode(String,String)",1,1,1
"org.apache.solr.util.DOMUtilTestBase.setUp()",1,1,1
"org.apache.solr.util.DateMathParser.DateMathParser(TimeZone,Locale)",1,1,1
"org.apache.solr.util.DateMathParser.add(Calendar,int,String)",2,1,2
"org.apache.solr.util.DateMathParser.getNow()",1,3,3
"org.apache.solr.util.DateMathParser.makeUnitsMap()",1,1,1
"org.apache.solr.util.DateMathParser.parseMath(String)",7,4,13
"org.apache.solr.util.DateMathParser.round(Calendar,String)",3,7,9
"org.apache.solr.util.DateMathParser.setNow(Date)",1,1,1
"org.apache.solr.util.DateMathParserTest.DateMathParserTest()",1,1,1
"org.apache.solr.util.DateMathParserTest.a(String,int,String)",1,1,1
"org.apache.solr.util.DateMathParserTest.assertAdd(String,String,int,String)",1,1,1
"org.apache.solr.util.DateMathParserTest.assertMath(String,DateMathParser,String)",1,1,1
"org.apache.solr.util.DateMathParserTest.assertRound(String,String,String)",1,1,1
"org.apache.solr.util.DateMathParserTest.e(String)",1,1,1
"org.apache.solr.util.DateMathParserTest.r(String,String)",1,1,1
"org.apache.solr.util.DateMathParserTest.testAdd()",1,1,1
"org.apache.solr.util.DateMathParserTest.testAddZero()",1,2,2
"org.apache.solr.util.DateMathParserTest.testCalendarUnitsConsistency()",1,4,4
"org.apache.solr.util.DateMathParserTest.testParseMath()",1,1,1
"org.apache.solr.util.DateMathParserTest.testParseMathExceptions()",1,3,3
"org.apache.solr.util.DateMathParserTest.testParseStatelessness()",1,1,1
"org.apache.solr.util.DateMathParserTest.testRound()",1,1,1
"org.apache.solr.util.DisMaxParams.setValues(NamedList)",1,17,17
"org.apache.solr.util.ExternalPaths.determineSourceHome()",1,3,4
"org.apache.solr.util.FindClasses.FindClasses(File...)",1,2,3
"org.apache.solr.util.FindClasses.findExtends(Class<?>)",4,8,9
"org.apache.solr.util.FindClasses.findMethodReturns(Collection<Class>,String,Class...)",1,2,3
"org.apache.solr.util.FindClasses.getClassLoader()",1,1,1
"org.apache.solr.util.FindClasses.main(String[])",1,5,5
"org.apache.solr.util.Float2Float.toExternal(String)",1,1,1
"org.apache.solr.util.Float2Float.toInternal(String)",1,1,1
"org.apache.solr.util.HighlightingUtils.doHighlighting(DocList,Query,SolrQueryRequest,String[])",1,1,1
"org.apache.solr.util.HighlightingUtils.getFormatter(String,SolrQueryRequest)",1,1,1
"org.apache.solr.util.HighlightingUtils.getFragmenter(String,SolrQueryRequest)",1,1,1
"org.apache.solr.util.HighlightingUtils.getHighlightFields(Query,SolrQueryRequest,String[])",1,1,1
"org.apache.solr.util.HighlightingUtils.getHighlighter(Query,String,SolrQueryRequest)",1,1,1
"org.apache.solr.util.HighlightingUtils.getMaxSnippets(String,SolrQueryRequest)",1,1,1
"org.apache.solr.util.HighlightingUtils.getParams(SolrQueryRequest)",1,1,1
"org.apache.solr.util.HighlightingUtils.isHighlightingEnabled(SolrQueryRequest)",1,1,1
"org.apache.solr.util.Int2Int.toExternal(String)",1,1,1
"org.apache.solr.util.Int2Int.toInternal(String)",1,1,1
"org.apache.solr.util.NamedList.NamedList()",1,1,1
"org.apache.solr.util.NamedList.NamedList(Entry<String, T>[])",1,1,1
"org.apache.solr.util.NamedList.NamedList(List)",1,1,1
"org.apache.solr.util.NumberUtils.SortableStr2double(String)",1,1,2
"org.apache.solr.util.NumberUtils.SortableStr2doubleStr(String)",1,1,1
"org.apache.solr.util.NumberUtils.SortableStr2float(String)",1,1,2
"org.apache.solr.util.NumberUtils.SortableStr2floatStr(String)",1,1,1
"org.apache.solr.util.NumberUtils.SortableStr2int(String)",1,1,1
"org.apache.solr.util.NumberUtils.SortableStr2int(String,int,int)",1,1,1
"org.apache.solr.util.NumberUtils.SortableStr2long(String)",1,1,1
"org.apache.solr.util.NumberUtils.SortableStr2long(String,int,int)",1,1,1
"org.apache.solr.util.NumberUtils.double2sortableStr(String)",1,1,1
"org.apache.solr.util.NumberUtils.double2sortableStr(double)",1,1,2
"org.apache.solr.util.NumberUtils.float2sortableStr(String)",1,1,1
"org.apache.solr.util.NumberUtils.float2sortableStr(float)",1,1,2
"org.apache.solr.util.NumberUtils.int2sortableStr(String)",1,1,1
"org.apache.solr.util.NumberUtils.int2sortableStr(int)",1,1,1
"org.apache.solr.util.NumberUtils.int2sortableStr(int,char[],int)",1,1,1
"org.apache.solr.util.NumberUtils.long2sortableStr(String)",1,1,1
"org.apache.solr.util.NumberUtils.long2sortableStr(long)",1,1,1
"org.apache.solr.util.NumberUtils.long2sortableStr(long,char[],int)",1,1,1
"org.apache.solr.util.PrimUtils.IntComparator.equals(int,int)",1,1,1
"org.apache.solr.util.PrimUtils.IntComparator.lessThan(int,int)",1,1,1
"org.apache.solr.util.PrimUtils.med3(int[],int,int,int,IntComparator)",1,4,6
"org.apache.solr.util.PrimUtils.sort(int,int,int[],IntComparator)",4,13,21
"org.apache.solr.util.PrimUtilsTest.testSort()",1,5,5
"org.apache.solr.util.RefCounted.RefCounted(Type)",1,1,1
"org.apache.solr.util.RefCounted.decref()",1,2,2
"org.apache.solr.util.RefCounted.get()",1,1,1
"org.apache.solr.util.RefCounted.getRefcount()",1,1,1
"org.apache.solr.util.RefCounted.incref()",1,1,1
"org.apache.solr.util.SimpleOrderedMap.SimpleOrderedMap()",1,1,1
"org.apache.solr.util.SimpleOrderedMap.SimpleOrderedMap(Entry<String, T>[])",1,1,1
"org.apache.solr.util.SimpleOrderedMap.SimpleOrderedMap(List)",1,1,1
"org.apache.solr.util.SimplePostTool.SimplePostTool(URL)",1,1,1
"org.apache.solr.util.SimplePostTool.appendParam(String,String)",1,1,2
"org.apache.solr.util.SimplePostTool.commit()",1,1,1
"org.apache.solr.util.SimplePostTool.doGet(String)",1,2,2
"org.apache.solr.util.SimplePostTool.doGet(URL)",1,3,3
"org.apache.solr.util.SimplePostTool.fatal(String)",1,1,1
"org.apache.solr.util.SimplePostTool.info(String)",1,1,1
"org.apache.solr.util.SimplePostTool.main(String[])",2,16,17
"org.apache.solr.util.SimplePostTool.optimize()",1,1,1
"org.apache.solr.util.SimplePostTool.pipe(InputStream,OutputStream)",1,4,4
"org.apache.solr.util.SimplePostTool.postData(InputStream,Integer,OutputStream)",1,1,1
"org.apache.solr.util.SimplePostTool.postData(InputStream,Integer,OutputStream,String)",1,10,12
"org.apache.solr.util.SimplePostTool.postFile(File,OutputStream)",1,1,1
"org.apache.solr.util.SimplePostTool.postFile(File,OutputStream,String)",1,4,4
"org.apache.solr.util.SimplePostTool.postFiles(String[],int,OutputStream)",1,1,1
"org.apache.solr.util.SimplePostTool.postFiles(String[],int,OutputStream,String)",1,3,3
"org.apache.solr.util.SimplePostTool.stringToStream(String)",1,2,2
"org.apache.solr.util.SimplePostTool.warn(String)",1,1,1
"org.apache.solr.util.SolrHighlighterX.getFormatterX(String,SolrQueryRequest)",1,1,1
"org.apache.solr.util.SolrHighlighterX.getFragmenterX(String,SolrQueryRequest)",1,1,1
"org.apache.solr.util.SolrHighlighterX.getHighlighterX(Query,String,SolrQueryRequest)",1,1,1
"org.apache.solr.util.SolrHighlighterX.getMaxSnippetsX(String,SolrQueryRequest)",1,1,1
"org.apache.solr.util.SolrPluginUtils.DisjunctionMaxQueryParser.DisjunctionMaxQueryParser(IndexSchema)",1,1,1
"org.apache.solr.util.SolrPluginUtils.DisjunctionMaxQueryParser.DisjunctionMaxQueryParser(IndexSchema,String)",1,1,1
"org.apache.solr.util.SolrPluginUtils.DisjunctionMaxQueryParser.DisjunctionMaxQueryParser(QParser,String)",1,1,1
"org.apache.solr.util.SolrPluginUtils.DisjunctionMaxQueryParser.addAlias(String,float,Map<String, Float>)",1,1,1
"org.apache.solr.util.SolrPluginUtils.DisjunctionMaxQueryParser.getFieldQuery(String,String,boolean)",2,5,7
"org.apache.solr.util.SolrPluginUtils.IdentityRegenerator.regenerateItem(SolrIndexSearcher,SolrCache,SolrCache,Object,Object)",1,1,1
"org.apache.solr.util.SolrPluginUtils.addOrReplaceResults(SolrQueryResponse,SolrDocumentList)",1,2,2
"org.apache.solr.util.SolrPluginUtils.calculateMinShouldMatch(int,String)",4,5,9
"org.apache.solr.util.SolrPluginUtils.doSimpleQuery(String,SolrQueryRequest,int,int)",1,3,4
"org.apache.solr.util.SolrPluginUtils.doStandardDebug(SolrQueryRequest,String,Query,DocList)",1,6,6
"org.apache.solr.util.SolrPluginUtils.doStandardDebug(SolrQueryRequest,String,Query,DocList,CommonParams)",1,4,4
"org.apache.solr.util.SolrPluginUtils.docListToSolrDocumentList(DocList,SolrIndexSearcher,Set<String>,Map<SolrDocument, Integer>)",1,9,9
"org.apache.solr.util.SolrPluginUtils.explanationToNamedList(Explanation)",2,2,4
"org.apache.solr.util.SolrPluginUtils.explanationsToNamedLists(NamedList<Explanation>)",1,2,2
"org.apache.solr.util.SolrPluginUtils.explanationsToStrings(NamedList<Explanation>)",1,2,2
"org.apache.solr.util.SolrPluginUtils.flattenBooleanQuery(BooleanQuery,BooleanQuery)",1,5,5
"org.apache.solr.util.SolrPluginUtils.getBooleanParam(SolrQueryRequest,String,boolean)",2,2,3
"org.apache.solr.util.SolrPluginUtils.getExplainList(Query,DocList,SolrIndexSearcher,IndexSchema)",1,1,1
"org.apache.solr.util.SolrPluginUtils.getExplanations(Query,DocList,SolrIndexSearcher,IndexSchema)",1,2,2
"org.apache.solr.util.SolrPluginUtils.getNumberParam(SolrQueryRequest,String,Number)",2,2,4
"org.apache.solr.util.SolrPluginUtils.getParam(SolrQueryRequest,String,String)",2,2,3
"org.apache.solr.util.SolrPluginUtils.getSort(SolrQueryRequest)",3,3,6
"org.apache.solr.util.SolrPluginUtils.invokeSetters(Object,NamedList)",6,7,9
"org.apache.solr.util.SolrPluginUtils.numDocs(SolrIndexSearcher,Query,Query)",1,2,2
"org.apache.solr.util.SolrPluginUtils.optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse)",2,6,7
"org.apache.solr.util.SolrPluginUtils.parseFieldBoosts(String)",1,1,1
"org.apache.solr.util.SolrPluginUtils.parseFieldBoosts(String[])",4,5,8
"org.apache.solr.util.SolrPluginUtils.parseFilterQueries(SolrQueryRequest)",1,1,1
"org.apache.solr.util.SolrPluginUtils.parseFuncs(IndexSchema,String)",1,3,3
"org.apache.solr.util.SolrPluginUtils.parseQueryStrings(SolrQueryRequest,String[])",2,4,6
"org.apache.solr.util.SolrPluginUtils.partialEscape(CharSequence)",1,3,15
"org.apache.solr.util.SolrPluginUtils.resolveUpdateChainParam(SolrParams,Logger)",1,4,4
"org.apache.solr.util.SolrPluginUtils.setDefaults(SolrQueryRequest,SolrParams)",1,1,1
"org.apache.solr.util.SolrPluginUtils.setDefaults(SolrQueryRequest,SolrParams,SolrParams,SolrParams)",1,1,1
"org.apache.solr.util.SolrPluginUtils.setMinShouldMatch(BooleanQuery,String)",1,3,4
"org.apache.solr.util.SolrPluginUtils.setReturnFields(SolrQueryRequest,SolrQueryResponse)",1,1,1
"org.apache.solr.util.SolrPluginUtils.setReturnFields(String,SolrQueryResponse)",1,6,7
"org.apache.solr.util.SolrPluginUtils.split(String)",1,1,1
"org.apache.solr.util.SolrPluginUtils.stripIllegalOperators(CharSequence)",1,1,1
"org.apache.solr.util.SolrPluginUtils.stripUnbalancedQuotes(CharSequence)",2,2,4
"org.apache.solr.util.SolrPluginUtilsTest.beforeClass()",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.calcMSM(int,String)",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.countItems(Iterator)",1,2,2
"org.apache.solr.util.SolrPluginUtilsTest.pe(CharSequence)",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.strip(CharSequence)",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.stripOp(CharSequence)",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.testDisjunctionMaxQueryParser()",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.testDocListConversion()",1,3,3
"org.apache.solr.util.SolrPluginUtilsTest.testMinShouldMatchCalculator()",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.testParseFieldBoosts()",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.testPartialEscape()",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.testStripIllegalOperators()",1,1,1
"org.apache.solr.util.SolrPluginUtilsTest.testStripUnbalancedQuotes()",1,1,1
"org.apache.solr.util.SortDouble.toExternal(String)",1,1,1
"org.apache.solr.util.SortDouble.toInternal(String)",1,1,1
"org.apache.solr.util.SortFloat.toExternal(String)",1,1,1
"org.apache.solr.util.SortFloat.toInternal(String)",1,1,1
"org.apache.solr.util.SortInt.toExternal(String)",1,1,1
"org.apache.solr.util.SortInt.toInternal(String)",1,1,1
"org.apache.solr.util.SortLong.toExternal(String)",1,1,1
"org.apache.solr.util.SortLong.toInternal(String)",1,1,1
"org.apache.solr.util.SuggestMissingFactories.main(String[])",1,2,3
"org.apache.solr.util.TestHarness.Initializer.Initializer(String,String,SolrConfig,IndexSchema)",1,1,2
"org.apache.solr.util.TestHarness.Initializer.getCoreName()",1,1,1
"org.apache.solr.util.TestHarness.Initializer.initialize()",1,1,1
"org.apache.solr.util.TestHarness.LocalRequestFactory.LocalRequestFactory()",1,1,1
"org.apache.solr.util.TestHarness.LocalRequestFactory.makeRequest(String...)",3,2,4
"org.apache.solr.util.TestHarness.TestHarness(String)",1,1,1
"org.apache.solr.util.TestHarness.TestHarness(String,Initializer)",1,2,4
"org.apache.solr.util.TestHarness.TestHarness(String,SolrConfig,IndexSchema)",1,1,1
"org.apache.solr.util.TestHarness.TestHarness(String,SolrConfig,String)",1,1,1
"org.apache.solr.util.TestHarness.TestHarness(String,String)",1,1,1
"org.apache.solr.util.TestHarness.TestHarness(String,String,String)",1,1,1
"org.apache.solr.util.TestHarness.appendSimpleDoc(StringBuffer,String...)",1,1,1
"org.apache.solr.util.TestHarness.appendSimpleDoc(StringBuilder,String...)",1,1,1
"org.apache.solr.util.TestHarness.checkUpdateStatus(String,String)",1,1,3
"org.apache.solr.util.TestHarness.close()",4,5,5
"org.apache.solr.util.TestHarness.commit(String...)",1,1,1
"org.apache.solr.util.TestHarness.createConfig(String)",1,1,2
"org.apache.solr.util.TestHarness.delete(String,String...)",1,1,2
"org.apache.solr.util.TestHarness.deleteById(String,String...)",1,1,2
"org.apache.solr.util.TestHarness.deleteByQuery(String,String...)",1,1,2
"org.apache.solr.util.TestHarness.getCore()",1,1,1
"org.apache.solr.util.TestHarness.getCoreContainer()",1,1,1
"org.apache.solr.util.TestHarness.getRequestFactory(String,int,int)",1,1,1
"org.apache.solr.util.TestHarness.getRequestFactory(String,int,int,Map<String, String>)",1,1,1
"org.apache.solr.util.TestHarness.getRequestFactory(String,int,int,String...)",1,2,2
"org.apache.solr.util.TestHarness.makeSimpleDoc(String...)",1,2,3
"org.apache.solr.util.TestHarness.optimize(String...)",1,1,1
"org.apache.solr.util.TestHarness.query(SolrQueryRequest)",1,1,1
"org.apache.solr.util.TestHarness.query(String,SolrQueryRequest)",2,2,2
"org.apache.solr.util.TestHarness.queryAndResponse(String,SolrQueryRequest)",2,2,2
"org.apache.solr.util.TestHarness.simpleTag(String,String...)",1,2,4
"org.apache.solr.util.TestHarness.update(String)",1,1,2
"org.apache.solr.util.TestHarness.validateAddDoc(String...)",1,1,2
"org.apache.solr.util.TestHarness.validateErrorUpdate(String)",1,1,1
"org.apache.solr.util.TestHarness.validateQuery(SolrQueryRequest,String...)",1,1,1
"org.apache.solr.util.TestHarness.validateUpdate(String)",1,1,1
"org.apache.solr.util.TestHarness.validateXPath(String,String...)",4,2,7
"org.apache.solr.util.TestNumberUtils.arrstr(char[],int,int)",1,1,2
"org.apache.solr.util.TestNumberUtils.getDoubleSpecial()",2,1,4
"org.apache.solr.util.TestNumberUtils.getFloatSpecial()",2,1,4
"org.apache.solr.util.TestNumberUtils.getLongSpecial()",2,1,3
"org.apache.solr.util.TestNumberUtils.getSpecial()",2,1,3
"org.apache.solr.util.TestNumberUtils.test(Comparable,Comparable,Converter)",1,1,2
"org.apache.solr.util.TestNumberUtils.testConverters()",1,9,9
"org.apache.solr.util.TestUtils.testNamedLists()",1,2,3
"org.apache.solr.util.TestUtils.testNumberUtils()",1,1,1
"org.apache.solr.util.TestUtils.testSplitEscaping()",1,1,1
"org.apache.solr.util.VersionedFile.delete(Collection<File>)",1,4,4
"org.apache.solr.util.VersionedFile.getLatestFile(String,String)",1,5,8
"org.apache.solr.util.plugin.AbstractPluginLoader.AbstractPluginLoader(String)",1,1,1
"org.apache.solr.util.plugin.AbstractPluginLoader.AbstractPluginLoader(String,boolean,boolean)",1,1,1
"org.apache.solr.util.plugin.AbstractPluginLoader.PluginInitInfo.PluginInitInfo(T,Node)",1,1,1
"org.apache.solr.util.plugin.AbstractPluginLoader.create(ResourceLoader,String,String,Node)",1,1,1
"org.apache.solr.util.plugin.AbstractPluginLoader.getDefaultPackages()",1,1,1
"org.apache.solr.util.plugin.AbstractPluginLoader.load(ResourceLoader,NodeList)",6,8,15
"org.apache.solr.util.plugin.AbstractPluginLoader.loadSingle(ResourceLoader,Node)",2,5,9
"org.apache.solr.util.plugin.MapPluginLoader.MapPluginLoader(String,Map<String, T>)",1,1,1
"org.apache.solr.util.plugin.MapPluginLoader.init(T,Node)",1,1,1
"org.apache.solr.util.plugin.MapPluginLoader.register(String,T)",2,2,2
"org.apache.solr.util.plugin.NamedListPluginLoader.NamedListPluginLoader(String,Map<String, T>)",1,1,1
"org.apache.solr.util.plugin.NamedListPluginLoader.init(T,Node)",1,1,1
"org.apache.solr.util.plugin.NamedListPluginLoader.register(String,T)",2,2,2
"org.apache.solr.util.xslt.TransformerProvider.TransformerProvider()",1,1,1
"org.apache.solr.util.xslt.TransformerProvider.getTemplates(ResourceLoader,String,int)",1,3,3
"org.apache.solr.util.xslt.TransformerProvider.getTransformer(SolrConfig,String,int)",1,6,6
"org.apache.solr.velocity.VelocityResponseWriterTest.beforeClass()",1,1,1
"org.apache.solr.velocity.VelocityResponseWriterTest.setUp()",1,1,1
"org.apache.solr.velocity.VelocityResponseWriterTest.testTemplateName()",1,1,1
"org.egothor.stemmer.Cell.Cell()",1,1,1
"org.egothor.stemmer.Cell.Cell(Cell)",1,1,1
"org.egothor.stemmer.Cell.toString()",1,1,1
"org.egothor.stemmer.Compile.allocTrie()",1,1,2
"org.egothor.stemmer.Compile.main(String[])",5,11,21
"org.egothor.stemmer.Diff.Diff()",1,1,1
"org.egothor.stemmer.Diff.Diff(int,int,int,int)",1,1,1
"org.egothor.stemmer.Diff.apply(StringBuilder,CharSequence)",4,3,10
"org.egothor.stemmer.Diff.exec(String,String)",3,12,27
"org.egothor.stemmer.DiffIt.get(int,String)",1,1,2
"org.egothor.stemmer.DiffIt.main(String[])",1,6,7
"org.egothor.stemmer.Gener.Gener()",1,1,1
"org.egothor.stemmer.Gener.eat(Row,int[])",1,3,9
"org.egothor.stemmer.Gener.optimize(Trie)",1,2,3
"org.egothor.stemmer.Lift.Lift(boolean)",1,1,1
"org.egothor.stemmer.Lift.liftUp(Row,List<Row>)",7,3,9
"org.egothor.stemmer.Lift.optimize(Trie)",1,2,2
"org.egothor.stemmer.MultiTrie.MultiTrie(DataInput)",1,2,2
"org.egothor.stemmer.MultiTrie.MultiTrie(boolean)",1,1,1
"org.egothor.stemmer.MultiTrie.add(CharSequence,CharSequence)",2,3,4
"org.egothor.stemmer.MultiTrie.getFully(CharSequence)",3,4,5
"org.egothor.stemmer.MultiTrie.getLastOnPath(CharSequence)",3,4,5
"org.egothor.stemmer.MultiTrie.printInfo(CharSequence)",1,2,2
"org.egothor.stemmer.MultiTrie.reduce(Reduce)",1,2,2
"org.egothor.stemmer.MultiTrie.store(DataOutput)",1,2,2
"org.egothor.stemmer.MultiTrie2.MultiTrie2(DataInput)",1,1,1
"org.egothor.stemmer.MultiTrie2.MultiTrie2(boolean)",1,1,1
"org.egothor.stemmer.MultiTrie2.add(CharSequence,CharSequence)",2,8,9
"org.egothor.stemmer.MultiTrie2.cannotFollow(char,char)",2,2,2
"org.egothor.stemmer.MultiTrie2.dashEven(CharSequence,int)",3,2,3
"org.egothor.stemmer.MultiTrie2.decompose(CharSequence)",1,7,8
"org.egothor.stemmer.MultiTrie2.getFully(CharSequence)",4,7,10
"org.egothor.stemmer.MultiTrie2.getLastOnPath(CharSequence)",4,7,10
"org.egothor.stemmer.MultiTrie2.lengthPP(CharSequence)",2,3,5
"org.egothor.stemmer.MultiTrie2.reduce(Reduce)",1,2,2
"org.egothor.stemmer.MultiTrie2.skip(CharSequence,int)",2,2,2
"org.egothor.stemmer.MultiTrie2.store(DataOutput)",1,1,1
"org.egothor.stemmer.Optimizer.Optimizer()",1,1,1
"org.egothor.stemmer.Optimizer.merge(Cell,Cell)",9,1,9
"org.egothor.stemmer.Optimizer.merge(Row,Row)",5,4,6
"org.egothor.stemmer.Optimizer.optimize(Trie)",4,5,5
"org.egothor.stemmer.Optimizer2.Optimizer2()",1,1,1
"org.egothor.stemmer.Optimizer2.merge(Cell,Cell)",2,1,4
"org.egothor.stemmer.Reduce.Reduce()",1,1,1
"org.egothor.stemmer.Reduce.Remap.Remap(Row,int[])",1,2,3
"org.egothor.stemmer.Reduce.optimize(Trie)",1,1,1
"org.egothor.stemmer.Reduce.removeGaps(int,List<Row>,List<Row>,int[])",1,3,4
"org.egothor.stemmer.Row.Row()",1,1,1
"org.egothor.stemmer.Row.Row(DataInput)",1,2,2
"org.egothor.stemmer.Row.Row(Row)",1,1,1
"org.egothor.stemmer.Row.at(Character)",1,1,1
"org.egothor.stemmer.Row.getCells()",1,2,4
"org.egothor.stemmer.Row.getCellsPnt()",1,2,3
"org.egothor.stemmer.Row.getCellsVal()",1,2,3
"org.egothor.stemmer.Row.getCmd(Character)",1,1,2
"org.egothor.stemmer.Row.getCnt(Character)",1,1,2
"org.egothor.stemmer.Row.getRef(Character)",1,1,2
"org.egothor.stemmer.Row.print()",1,2,2
"org.egothor.stemmer.Row.setCmd(Character,int)",1,2,3
"org.egothor.stemmer.Row.setRef(Character,int)",1,2,2
"org.egothor.stemmer.Row.store(DataOutput)",3,2,4
"org.egothor.stemmer.Row.uniformCmd(boolean)",8,2,8
"org.egothor.stemmer.TestCompile.assertTrie(Trie,String,boolean,boolean)",4,6,8
"org.egothor.stemmer.TestCompile.loadTrie(String)",1,1,2
"org.egothor.stemmer.TestCompile.testCompile()",1,1,1
"org.egothor.stemmer.TestCompile.testCompileBackwards()",1,1,1
"org.egothor.stemmer.TestCompile.testCompileMulti()",1,1,1
"org.egothor.stemmer.TestStemmer.assertTrieContents(Trie,String[],String[])",1,3,3
"org.egothor.stemmer.TestStemmer.testMultiTrie()",1,2,2
"org.egothor.stemmer.TestStemmer.testMultiTrie2()",1,2,2
"org.egothor.stemmer.TestStemmer.testMultiTrie2Backwards()",1,2,2
"org.egothor.stemmer.TestStemmer.testMultiTrieBackwards()",1,2,2
"org.egothor.stemmer.TestStemmer.testTrie()",1,2,2
"org.egothor.stemmer.TestStemmer.testTrieBackwards()",1,2,2
"org.egothor.stemmer.Trie.StrEnum.StrEnum(CharSequence,boolean)",1,2,2
"org.egothor.stemmer.Trie.StrEnum.length()",1,1,1
"org.egothor.stemmer.Trie.StrEnum.next()",1,1,1
"org.egothor.stemmer.Trie.Trie(DataInput)",1,3,3
"org.egothor.stemmer.Trie.Trie(boolean)",1,1,1
"org.egothor.stemmer.Trie.Trie(boolean,int,List<CharSequence>,List<Row>)",1,1,1
"org.egothor.stemmer.Trie.add(CharSequence,CharSequence)",3,4,7
"org.egothor.stemmer.Trie.getAll(CharSequence)",11,5,14
"org.egothor.stemmer.Trie.getCells()",1,2,2
"org.egothor.stemmer.Trie.getCellsPnt()",1,2,2
"org.egothor.stemmer.Trie.getCellsVal()",1,2,2
"org.egothor.stemmer.Trie.getFully(CharSequence)",7,6,8
"org.egothor.stemmer.Trie.getLastOnPath(CharSequence)",3,5,5
"org.egothor.stemmer.Trie.getRow(int)",2,2,3
"org.egothor.stemmer.Trie.printInfo(CharSequence)",1,1,1
"org.egothor.stemmer.Trie.reduce(Reduce)",1,1,1
"org.egothor.stemmer.Trie.store(DataOutput)",1,3,3
"org.tartarus.snowball.Among.Among(String,int,int,String,SnowballProgram)",2,2,3
"org.tartarus.snowball.SnowballProgram.SnowballProgram()",1,1,1
"org.tartarus.snowball.SnowballProgram.assign_to(StringBuilder)",1,1,1
"org.tartarus.snowball.SnowballProgram.copy_from(SnowballProgram)",1,1,1
"org.tartarus.snowball.SnowballProgram.eq_s(int,CharSequence)",4,2,4
"org.tartarus.snowball.SnowballProgram.eq_s(int,String)",1,1,1
"org.tartarus.snowball.SnowballProgram.eq_s_b(int,CharSequence)",4,2,4
"org.tartarus.snowball.SnowballProgram.eq_s_b(int,String)",1,1,1
"org.tartarus.snowball.SnowballProgram.eq_v(CharSequence)",1,1,1
"org.tartarus.snowball.SnowballProgram.eq_v(StringBuilder)",1,1,1
"org.tartarus.snowball.SnowballProgram.eq_v_b(CharSequence)",1,1,1
"org.tartarus.snowball.SnowballProgram.eq_v_b(StringBuilder)",1,1,1
"org.tartarus.snowball.SnowballProgram.find_among(Among[],int)",14,3,18
"org.tartarus.snowball.SnowballProgram.find_among_b(Among[],int)",14,3,18
"org.tartarus.snowball.SnowballProgram.getCurrent()",1,1,1
"org.tartarus.snowball.SnowballProgram.getCurrentBuffer()",1,1,1
"org.tartarus.snowball.SnowballProgram.getCurrentBufferLength()",1,1,1
"org.tartarus.snowball.SnowballProgram.in_grouping(char[],int,int)",4,1,5
"org.tartarus.snowball.SnowballProgram.in_grouping_b(char[],int,int)",4,1,5
"org.tartarus.snowball.SnowballProgram.in_range(int,int)",3,1,4
"org.tartarus.snowball.SnowballProgram.in_range_b(int,int)",3,1,4
"org.tartarus.snowball.SnowballProgram.insert(int,int,CharSequence)",1,1,3
"org.tartarus.snowball.SnowballProgram.insert(int,int,String)",1,1,1
"org.tartarus.snowball.SnowballProgram.insert(int,int,StringBuilder)",1,1,1
"org.tartarus.snowball.SnowballProgram.out_grouping(char[],int,int)",4,1,5
"org.tartarus.snowball.SnowballProgram.out_grouping_b(char[],int,int)",4,1,5
"org.tartarus.snowball.SnowballProgram.out_range(int,int)",3,1,4
"org.tartarus.snowball.SnowballProgram.out_range_b(int,int)",3,1,4
"org.tartarus.snowball.SnowballProgram.replace_s(int,int,CharSequence)",1,4,7
"org.tartarus.snowball.SnowballProgram.replace_s(int,int,String)",1,1,1
"org.tartarus.snowball.SnowballProgram.setCurrent(String)",1,1,1
"org.tartarus.snowball.SnowballProgram.setCurrent(char[],int)",1,1,1
"org.tartarus.snowball.SnowballProgram.slice_check()",1,2,4
"org.tartarus.snowball.SnowballProgram.slice_del()",1,1,1
"org.tartarus.snowball.SnowballProgram.slice_from(CharSequence)",1,1,1
"org.tartarus.snowball.SnowballProgram.slice_from(String)",1,1,1
"org.tartarus.snowball.SnowballProgram.slice_from(StringBuilder)",1,1,1
"org.tartarus.snowball.SnowballProgram.slice_to(StringBuilder)",1,1,1
"org.tartarus.snowball.TestApp.main(String[])",4,10,10
"org.tartarus.snowball.TestApp.usage()",1,1,1
"org.tartarus.snowball.ext.ArmenianStemmer.copy_from(ArmenianStemmer)",1,1,1
"org.tartarus.snowball.ext.ArmenianStemmer.equals(Object)",1,1,1
"org.tartarus.snowball.ext.ArmenianStemmer.hashCode()",1,1,1
"org.tartarus.snowball.ext.ArmenianStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.ArmenianStemmer.r_adjective()",4,2,4
"org.tartarus.snowball.ext.ArmenianStemmer.r_ending()",5,2,5
"org.tartarus.snowball.ext.ArmenianStemmer.r_mark_regions()",17,10,18
"org.tartarus.snowball.ext.ArmenianStemmer.r_noun()",4,2,4
"org.tartarus.snowball.ext.ArmenianStemmer.r_verb()",4,2,4
"org.tartarus.snowball.ext.ArmenianStemmer.stem()",12,6,12
"org.tartarus.snowball.ext.BasqueStemmer.copy_from(BasqueStemmer)",1,1,1
"org.tartarus.snowball.ext.BasqueStemmer.equals(Object)",1,1,1
"org.tartarus.snowball.ext.BasqueStemmer.hashCode()",1,1,1
"org.tartarus.snowball.ext.BasqueStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.BasqueStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.BasqueStemmer.r_RV()",2,1,2
"org.tartarus.snowball.ext.BasqueStemmer.r_aditzak()",6,2,10
"org.tartarus.snowball.ext.BasqueStemmer.r_adjetiboak()",5,2,6
"org.tartarus.snowball.ext.BasqueStemmer.r_izenak()",7,2,16
"org.tartarus.snowball.ext.BasqueStemmer.r_mark_regions()",42,23,44
"org.tartarus.snowball.ext.BasqueStemmer.stem()",11,7,11
"org.tartarus.snowball.ext.CatalanStemmer.copy_from(CatalanStemmer)",1,1,1
"org.tartarus.snowball.ext.CatalanStemmer.equals(Object)",1,1,1
"org.tartarus.snowball.ext.CatalanStemmer.hashCode()",1,1,1
"org.tartarus.snowball.ext.CatalanStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.CatalanStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.CatalanStemmer.r_attached_pronoun()",5,2,5
"org.tartarus.snowball.ext.CatalanStemmer.r_cleaning()",7,4,19
"org.tartarus.snowball.ext.CatalanStemmer.r_mark_regions()",17,10,18
"org.tartarus.snowball.ext.CatalanStemmer.r_residual_suffix()",6,2,7
"org.tartarus.snowball.ext.CatalanStemmer.r_standard_suffix()",9,2,13
"org.tartarus.snowball.ext.CatalanStemmer.r_verb_suffix()",6,2,7
"org.tartarus.snowball.ext.CatalanStemmer.stem()",13,8,14
"org.tartarus.snowball.ext.DanishStemmer.copy_from(DanishStemmer)",1,1,1
"org.tartarus.snowball.ext.DanishStemmer.r_consonant_pair()",4,1,4
"org.tartarus.snowball.ext.DanishStemmer.r_main_suffix()",6,2,7
"org.tartarus.snowball.ext.DanishStemmer.r_mark_regions()",12,5,13
"org.tartarus.snowball.ext.DanishStemmer.r_other_suffix()",10,4,11
"org.tartarus.snowball.ext.DanishStemmer.r_undouble()",4,1,4
"org.tartarus.snowball.ext.DanishStemmer.stem()",11,6,11
"org.tartarus.snowball.ext.DutchStemmer.copy_from(DutchStemmer)",1,1,1
"org.tartarus.snowball.ext.DutchStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.DutchStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.DutchStemmer.r_e_ending()",5,1,5
"org.tartarus.snowball.ext.DutchStemmer.r_en_ending()",6,2,6
"org.tartarus.snowball.ext.DutchStemmer.r_mark_regions()",19,9,19
"org.tartarus.snowball.ext.DutchStemmer.r_postlude()",7,4,9
"org.tartarus.snowball.ext.DutchStemmer.r_prelude()",20,11,25
"org.tartarus.snowball.ext.DutchStemmer.r_standard_suffix()",43,13,49
"org.tartarus.snowball.ext.DutchStemmer.r_undouble()",3,1,3
"org.tartarus.snowball.ext.DutchStemmer.stem()",9,5,9
"org.tartarus.snowball.ext.EnglishStemmer.copy_from(EnglishStemmer)",1,1,1
"org.tartarus.snowball.ext.EnglishStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.EnglishStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_1a()",14,8,19
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_1b()",15,5,18
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_1c()",8,3,8
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_2()",7,2,22
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_3()",6,2,11
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_4()",9,4,10
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_5()",12,5,13
"org.tartarus.snowball.ext.EnglishStemmer.r_exception1()",5,2,15
"org.tartarus.snowball.ext.EnglishStemmer.r_exception2()",3,1,3
"org.tartarus.snowball.ext.EnglishStemmer.r_mark_regions()",19,12,21
"org.tartarus.snowball.ext.EnglishStemmer.r_postlude()",8,5,8
"org.tartarus.snowball.ext.EnglishStemmer.r_prelude()",12,8,13
"org.tartarus.snowball.ext.EnglishStemmer.r_shortv()",9,3,9
"org.tartarus.snowball.ext.EnglishStemmer.stem()",28,15,31
"org.tartarus.snowball.ext.FinnishStemmer.copy_from(FinnishStemmer)",1,1,1
"org.tartarus.snowball.ext.FinnishStemmer.r_LONG()",2,1,2
"org.tartarus.snowball.ext.FinnishStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.FinnishStemmer.r_VI()",3,1,3
"org.tartarus.snowball.ext.FinnishStemmer.r_case_ending()",20,5,28
"org.tartarus.snowball.ext.FinnishStemmer.r_i_plural()",3,1,3
"org.tartarus.snowball.ext.FinnishStemmer.r_mark_regions()",17,9,17
"org.tartarus.snowball.ext.FinnishStemmer.r_other_endings()",7,3,7
"org.tartarus.snowball.ext.FinnishStemmer.r_particle_etc()",7,2,8
"org.tartarus.snowball.ext.FinnishStemmer.r_possessive()",11,3,16
"org.tartarus.snowball.ext.FinnishStemmer.r_t_plural()",10,3,10
"org.tartarus.snowball.ext.FinnishStemmer.r_tidy()",23,9,23
"org.tartarus.snowball.ext.FinnishStemmer.stem()",19,11,20
"org.tartarus.snowball.ext.FrenchStemmer.copy_from(FrenchStemmer)",1,1,1
"org.tartarus.snowball.ext.FrenchStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.FrenchStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.FrenchStemmer.r_RV()",2,1,2
"org.tartarus.snowball.ext.FrenchStemmer.r_i_verb_suffix()",5,2,6
"org.tartarus.snowball.ext.FrenchStemmer.r_mark_regions()",29,16,31
"org.tartarus.snowball.ext.FrenchStemmer.r_postlude()",7,4,10
"org.tartarus.snowball.ext.FrenchStemmer.r_prelude()",22,11,22
"org.tartarus.snowball.ext.FrenchStemmer.r_residual_suffix()",13,5,17
"org.tartarus.snowball.ext.FrenchStemmer.r_standard_suffix()",53,20,78
"org.tartarus.snowball.ext.FrenchStemmer.r_un_accent()",9,5,9
"org.tartarus.snowball.ext.FrenchStemmer.r_un_double()",3,1,3
"org.tartarus.snowball.ext.FrenchStemmer.r_verb_suffix()",7,3,10
"org.tartarus.snowball.ext.FrenchStemmer.stem()",24,15,26
"org.tartarus.snowball.ext.German2Stemmer.copy_from(German2Stemmer)",1,1,1
"org.tartarus.snowball.ext.German2Stemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.German2Stemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.German2Stemmer.r_mark_regions()",20,9,21
"org.tartarus.snowball.ext.German2Stemmer.r_postlude()",7,4,12
"org.tartarus.snowball.ext.German2Stemmer.r_prelude()",20,10,26
"org.tartarus.snowball.ext.German2Stemmer.r_standard_suffix()",36,15,43
"org.tartarus.snowball.ext.German2Stemmer.stem()",9,5,9
"org.tartarus.snowball.ext.GermanStemmer.copy_from(GermanStemmer)",1,1,1
"org.tartarus.snowball.ext.GermanStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.GermanStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.GermanStemmer.r_mark_regions()",20,9,21
"org.tartarus.snowball.ext.GermanStemmer.r_postlude()",7,4,12
"org.tartarus.snowball.ext.GermanStemmer.r_prelude()",19,11,19
"org.tartarus.snowball.ext.GermanStemmer.r_standard_suffix()",36,15,43
"org.tartarus.snowball.ext.GermanStemmer.stem()",9,5,9
"org.tartarus.snowball.ext.HungarianStemmer.copy_from(HungarianStemmer)",1,1,1
"org.tartarus.snowball.ext.HungarianStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.HungarianStemmer.r_case()",4,1,4
"org.tartarus.snowball.ext.HungarianStemmer.r_case_other()",5,2,8
"org.tartarus.snowball.ext.HungarianStemmer.r_case_special()",5,2,7
"org.tartarus.snowball.ext.HungarianStemmer.r_double()",2,1,2
"org.tartarus.snowball.ext.HungarianStemmer.r_factive()",8,2,9
"org.tartarus.snowball.ext.HungarianStemmer.r_instrum()",8,2,9
"org.tartarus.snowball.ext.HungarianStemmer.r_mark_regions()",17,9,17
"org.tartarus.snowball.ext.HungarianStemmer.r_owned()",5,2,13
"org.tartarus.snowball.ext.HungarianStemmer.r_plur_owner()",5,2,33
"org.tartarus.snowball.ext.HungarianStemmer.r_plural()",5,2,11
"org.tartarus.snowball.ext.HungarianStemmer.r_sing_owner()",5,2,24
"org.tartarus.snowball.ext.HungarianStemmer.r_undouble()",3,1,4
"org.tartarus.snowball.ext.HungarianStemmer.r_v_ending()",5,2,6
"org.tartarus.snowball.ext.HungarianStemmer.stem()",21,11,21
"org.tartarus.snowball.ext.IrishStemmer.copy_from(IrishStemmer)",1,1,1
"org.tartarus.snowball.ext.IrishStemmer.equals(Object)",1,1,1
"org.tartarus.snowball.ext.IrishStemmer.hashCode()",1,1,1
"org.tartarus.snowball.ext.IrishStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.IrishStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.IrishStemmer.r_RV()",2,1,2
"org.tartarus.snowball.ext.IrishStemmer.r_deriv()",5,2,10
"org.tartarus.snowball.ext.IrishStemmer.r_initial_morph()",4,2,24
"org.tartarus.snowball.ext.IrishStemmer.r_mark_regions()",21,13,23
"org.tartarus.snowball.ext.IrishStemmer.r_noun_sfx()",6,2,7
"org.tartarus.snowball.ext.IrishStemmer.r_verb_sfx()",6,2,7
"org.tartarus.snowball.ext.IrishStemmer.stem()",11,6,11
"org.tartarus.snowball.ext.ItalianStemmer.copy_from(ItalianStemmer)",1,1,1
"org.tartarus.snowball.ext.ItalianStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.ItalianStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.ItalianStemmer.r_RV()",2,1,2
"org.tartarus.snowball.ext.ItalianStemmer.r_attached_pronoun()",6,2,7
"org.tartarus.snowball.ext.ItalianStemmer.r_mark_regions()",42,23,44
"org.tartarus.snowball.ext.ItalianStemmer.r_postlude()",7,4,9
"org.tartarus.snowball.ext.ItalianStemmer.r_prelude()",19,10,25
"org.tartarus.snowball.ext.ItalianStemmer.r_standard_suffix()",31,8,41
"org.tartarus.snowball.ext.ItalianStemmer.r_verb_suffix()",4,2,5
"org.tartarus.snowball.ext.ItalianStemmer.r_vowel_suffix()",10,3,10
"org.tartarus.snowball.ext.ItalianStemmer.stem()",15,9,16
"org.tartarus.snowball.ext.KpStemmer.copy_from(KpStemmer)",1,1,1
"org.tartarus.snowball.ext.KpStemmer.r_C()",4,2,4
"org.tartarus.snowball.ext.KpStemmer.r_Lose_infix()",15,7,16
"org.tartarus.snowball.ext.KpStemmer.r_Lose_prefix()",11,5,12
"org.tartarus.snowball.ext.KpStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.KpStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.KpStemmer.r_Step_1()",43,13,49
"org.tartarus.snowball.ext.KpStemmer.r_Step_1c()",12,4,13
"org.tartarus.snowball.ext.KpStemmer.r_Step_2()",41,10,51
"org.tartarus.snowball.ext.KpStemmer.r_Step_3()",20,2,29
"org.tartarus.snowball.ext.KpStemmer.r_Step_4()",27,5,36
"org.tartarus.snowball.ext.KpStemmer.r_Step_6()",4,2,25
"org.tartarus.snowball.ext.KpStemmer.r_Step_7()",4,2,6
"org.tartarus.snowball.ext.KpStemmer.r_V()",5,3,5
"org.tartarus.snowball.ext.KpStemmer.r_VX()",6,3,6
"org.tartarus.snowball.ext.KpStemmer.r_lengthen_V()",21,10,21
"org.tartarus.snowball.ext.KpStemmer.r_measure()",24,14,25
"org.tartarus.snowball.ext.KpStemmer.stem()",47,22,48
"org.tartarus.snowball.ext.LovinsStemmer.copy_from(LovinsStemmer)",1,1,1
"org.tartarus.snowball.ext.LovinsStemmer.r_A()",2,1,3
"org.tartarus.snowball.ext.LovinsStemmer.r_AA()",3,1,4
"org.tartarus.snowball.ext.LovinsStemmer.r_B()",2,1,3
"org.tartarus.snowball.ext.LovinsStemmer.r_BB()",6,3,7
"org.tartarus.snowball.ext.LovinsStemmer.r_C()",2,1,3
"org.tartarus.snowball.ext.LovinsStemmer.r_CC()",3,1,4
"org.tartarus.snowball.ext.LovinsStemmer.r_D()",2,1,3
"org.tartarus.snowball.ext.LovinsStemmer.r_E()",4,2,5
"org.tartarus.snowball.ext.LovinsStemmer.r_F()",4,2,5
"org.tartarus.snowball.ext.LovinsStemmer.r_G()",3,1,4
"org.tartarus.snowball.ext.LovinsStemmer.r_H()",6,3,7
"org.tartarus.snowball.ext.LovinsStemmer.r_I()",6,3,7
"org.tartarus.snowball.ext.LovinsStemmer.r_J()",6,3,7
"org.tartarus.snowball.ext.LovinsStemmer.r_K()",10,4,11
"org.tartarus.snowball.ext.LovinsStemmer.r_L()",10,5,11
"org.tartarus.snowball.ext.LovinsStemmer.r_M()",10,5,11
"org.tartarus.snowball.ext.LovinsStemmer.r_N()",8,4,11
"org.tartarus.snowball.ext.LovinsStemmer.r_O()",6,3,7
"org.tartarus.snowball.ext.LovinsStemmer.r_P()",4,2,5
"org.tartarus.snowball.ext.LovinsStemmer.r_Q()",7,3,9
"org.tartarus.snowball.ext.LovinsStemmer.r_R()",6,3,7
"org.tartarus.snowball.ext.LovinsStemmer.r_S()",8,4,9
"org.tartarus.snowball.ext.LovinsStemmer.r_T()",8,4,9
"org.tartarus.snowball.ext.LovinsStemmer.r_U()",10,5,11
"org.tartarus.snowball.ext.LovinsStemmer.r_V()",3,1,4
"org.tartarus.snowball.ext.LovinsStemmer.r_W()",6,3,7
"org.tartarus.snowball.ext.LovinsStemmer.r_X()",10,4,11
"org.tartarus.snowball.ext.LovinsStemmer.r_Y()",3,1,4
"org.tartarus.snowball.ext.LovinsStemmer.r_Z()",4,2,5
"org.tartarus.snowball.ext.LovinsStemmer.r_endings()",4,2,4
"org.tartarus.snowball.ext.LovinsStemmer.r_respell()",20,10,53
"org.tartarus.snowball.ext.LovinsStemmer.r_undouble()",3,1,3
"org.tartarus.snowball.ext.LovinsStemmer.stem()",7,4,7
"org.tartarus.snowball.ext.NorwegianStemmer.copy_from(NorwegianStemmer)",1,1,1
"org.tartarus.snowball.ext.NorwegianStemmer.r_consonant_pair()",4,1,4
"org.tartarus.snowball.ext.NorwegianStemmer.r_main_suffix()",10,4,12
"org.tartarus.snowball.ext.NorwegianStemmer.r_mark_regions()",12,5,13
"org.tartarus.snowball.ext.NorwegianStemmer.r_other_suffix()",5,2,5
"org.tartarus.snowball.ext.NorwegianStemmer.stem()",9,5,9
"org.tartarus.snowball.ext.PorterStemmer.copy_from(PorterStemmer)",1,1,1
"org.tartarus.snowball.ext.PorterStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.PorterStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.PorterStemmer.r_Step_1a()",4,2,6
"org.tartarus.snowball.ext.PorterStemmer.r_Step_1b()",15,5,18
"org.tartarus.snowball.ext.PorterStemmer.r_Step_1c()",9,5,9
"org.tartarus.snowball.ext.PorterStemmer.r_Step_2()",5,2,18
"org.tartarus.snowball.ext.PorterStemmer.r_Step_3()",5,2,7
"org.tartarus.snowball.ext.PorterStemmer.r_Step_4()",9,4,10
"org.tartarus.snowball.ext.PorterStemmer.r_Step_5a()",8,4,8
"org.tartarus.snowball.ext.PorterStemmer.r_Step_5b()",4,1,4
"org.tartarus.snowball.ext.PorterStemmer.r_shortv()",4,1,4
"org.tartarus.snowball.ext.PorterStemmer.stem()",50,29,52
"org.tartarus.snowball.ext.PortugueseStemmer.copy_from(PortugueseStemmer)",1,1,1
"org.tartarus.snowball.ext.PortugueseStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.PortugueseStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.PortugueseStemmer.r_RV()",2,1,2
"org.tartarus.snowball.ext.PortugueseStemmer.r_mark_regions()",42,23,44
"org.tartarus.snowball.ext.PortugueseStemmer.r_postlude()",7,4,9
"org.tartarus.snowball.ext.PortugueseStemmer.r_prelude()",7,4,9
"org.tartarus.snowball.ext.PortugueseStemmer.r_residual_form()",12,4,13
"org.tartarus.snowball.ext.PortugueseStemmer.r_residual_suffix()",5,2,5
"org.tartarus.snowball.ext.PortugueseStemmer.r_standard_suffix()",31,9,42
"org.tartarus.snowball.ext.PortugueseStemmer.r_verb_suffix()",4,2,5
"org.tartarus.snowball.ext.PortugueseStemmer.stem()",20,11,21
"org.tartarus.snowball.ext.RomanianStemmer.copy_from(RomanianStemmer)",1,1,1
"org.tartarus.snowball.ext.RomanianStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.RomanianStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.RomanianStemmer.r_RV()",2,1,2
"org.tartarus.snowball.ext.RomanianStemmer.r_combo_suffix()",5,2,10
"org.tartarus.snowball.ext.RomanianStemmer.r_mark_regions()",42,23,44
"org.tartarus.snowball.ext.RomanianStemmer.r_postlude()",7,4,9
"org.tartarus.snowball.ext.RomanianStemmer.r_prelude()",13,7,13
"org.tartarus.snowball.ext.RomanianStemmer.r_standard_suffix()",9,4,11
"org.tartarus.snowball.ext.RomanianStemmer.r_step_0()",7,3,13
"org.tartarus.snowball.ext.RomanianStemmer.r_verb_suffix()",8,4,10
"org.tartarus.snowball.ext.RomanianStemmer.r_vowel_suffix()",5,2,5
"org.tartarus.snowball.ext.RomanianStemmer.stem()",17,9,18
"org.tartarus.snowball.ext.RussianStemmer.copy_from(RussianStemmer)",1,1,1
"org.tartarus.snowball.ext.RussianStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.RussianStemmer.r_adjectival()",9,5,11
"org.tartarus.snowball.ext.RussianStemmer.r_adjective()",4,2,4
"org.tartarus.snowball.ext.RussianStemmer.r_derivational()",5,2,5
"org.tartarus.snowball.ext.RussianStemmer.r_mark_regions()",17,10,18
"org.tartarus.snowball.ext.RussianStemmer.r_noun()",4,2,4
"org.tartarus.snowball.ext.RussianStemmer.r_perfective_gerund()",8,4,9
"org.tartarus.snowball.ext.RussianStemmer.r_reflexive()",4,2,4
"org.tartarus.snowball.ext.RussianStemmer.r_tidy_up()",7,2,9
"org.tartarus.snowball.ext.RussianStemmer.r_verb()",8,4,9
"org.tartarus.snowball.ext.RussianStemmer.stem()",20,12,22
"org.tartarus.snowball.ext.SpanishStemmer.copy_from(SpanishStemmer)",1,1,1
"org.tartarus.snowball.ext.SpanishStemmer.r_R1()",2,1,2
"org.tartarus.snowball.ext.SpanishStemmer.r_R2()",2,1,2
"org.tartarus.snowball.ext.SpanishStemmer.r_RV()",2,1,2
"org.tartarus.snowball.ext.SpanishStemmer.r_attached_pronoun()",7,2,13
"org.tartarus.snowball.ext.SpanishStemmer.r_mark_regions()",42,23,44
"org.tartarus.snowball.ext.SpanishStemmer.r_postlude()",7,4,12
"org.tartarus.snowball.ext.SpanishStemmer.r_residual_suffix()",10,3,11
"org.tartarus.snowball.ext.SpanishStemmer.r_standard_suffix()",33,10,44
"org.tartarus.snowball.ext.SpanishStemmer.r_verb_suffix()",8,3,9
"org.tartarus.snowball.ext.SpanishStemmer.r_y_verb_suffix()",6,2,6
"org.tartarus.snowball.ext.SpanishStemmer.stem()",15,9,16
"org.tartarus.snowball.ext.SwedishStemmer.copy_from(SwedishStemmer)",1,1,1
"org.tartarus.snowball.ext.SwedishStemmer.r_consonant_pair()",4,1,4
"org.tartarus.snowball.ext.SwedishStemmer.r_main_suffix()",6,2,7
"org.tartarus.snowball.ext.SwedishStemmer.r_mark_regions()",12,5,13
"org.tartarus.snowball.ext.SwedishStemmer.r_other_suffix()",4,2,7
"org.tartarus.snowball.ext.SwedishStemmer.stem()",9,5,9
"org.tartarus.snowball.ext.TurkishStemmer.copy_from(TurkishStemmer)",1,1,1
"org.tartarus.snowball.ext.TurkishStemmer.r_append_U_to_stems_ending_with_d_or_g()",40,23,41
"org.tartarus.snowball.ext.TurkishStemmer.r_check_vowel_harmony()",53,27,53
"org.tartarus.snowball.ext.TurkishStemmer.r_is_reserved_word()",13,7,13
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_DA()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_DAn()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_DUr()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_cAsInA()",2,1,2
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ki()",2,1,2
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_lAr()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_lArI()",2,1,2
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_nA()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_nU()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_nUn()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_nUz()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ncA()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ndA()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ndAn()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_possessives()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_sU()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_sUn()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_sUnUz()",2,1,2
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_suffix_with_optional_U_vowel()",10,4,10
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_suffix_with_optional_n_consonant()",10,4,10
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_suffix_with_optional_s_consonant()",10,4,10
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_suffix_with_optional_y_consonant()",10,4,10
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yA()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yDU()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yU()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yUm()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yUz()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yken()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ylA()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ymUs_()",4,1,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ysA()",3,1,3
"org.tartarus.snowball.ext.TurkishStemmer.r_more_than_one_syllable_word()",8,5,8
"org.tartarus.snowball.ext.TurkishStemmer.r_post_process_last_consonants()",4,2,7
"org.tartarus.snowball.ext.TurkishStemmer.r_postlude()",7,4,7
"org.tartarus.snowball.ext.TurkishStemmer.r_stem_nominal_verb_suffixes()",64,36,67
"org.tartarus.snowball.ext.TurkishStemmer.r_stem_noun_suffixes()",103,55,107
"org.tartarus.snowball.ext.TurkishStemmer.r_stem_suffix_chain_before_ki()",38,20,40
"org.tartarus.snowball.ext.TurkishStemmer.stem()",8,3,8

