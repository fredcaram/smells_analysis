Method,ev(G),iv(G),v(G)
"null.accept(Path)",1,2,2
"null.allocate(Ruby,RubyClass)",1,1,1
"null.compare(Node,Node)",1,1,3
"null.initialValue()",1,1,1
"null.put(String,Operator)",1,1,1
"null.run()",1,1,1
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantBooleanObjectInspector.JavaConstantBooleanObjectInspector(Boolean)",1,1,1
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantBooleanObjectInspector.getWritableConstantValue()",2,1,2
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantDoubleObjectInspector.JavaConstantDoubleObjectInspector(Double)",1,1,1
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantDoubleObjectInspector.getWritableConstantValue()",2,1,2
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantFloatObjectInspector.JavaConstantFloatObjectInspector(Float)",1,1,1
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantFloatObjectInspector.getWritableConstantValue()",2,1,2
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantIntObjectInspector.JavaConstantIntObjectInspector(Integer)",1,1,1
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantIntObjectInspector.getWritableConstantValue()",2,1,2
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantLongObjectInspector.JavaConstantLongObjectInspector(Long)",1,1,1
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantLongObjectInspector.getWritableConstantValue()",2,1,2
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantStringObjectInspector.JavaConstantStringObjectInspector(String)",1,1,1
"org.apache.hadoop.hive.serde2.objectinspector.primitive.JavaConstantStringObjectInspector.getWritableConstantValue()",2,1,2
"org.apache.pig.AccumulatorEvalFunc.exec(Tuple)",1,1,1
"org.apache.pig.AlgebraicEvalFunc.AlgebraicEvalFunc(String...)",1,1,1
"org.apache.pig.AlgebraicEvalFunc.accumulate(Tuple)",1,6,6
"org.apache.pig.AlgebraicEvalFunc.cleanup()",1,1,1
"org.apache.pig.AlgebraicEvalFunc.getValue()",1,1,2
"org.apache.pig.AlgebraicEvalFunc.makeEvalFunc(String)",1,3,3
"org.apache.pig.ComparisonFunc.ComparisonFunc()",1,1,1
"org.apache.pig.ComparisonFunc.compare(WritableComparable,WritableComparable)",1,1,1
"org.apache.pig.ComparisonFunc.setReporter(PigProgressable)",1,1,1
"org.apache.pig.EvalFunc.EvalFunc()",6,7,13
"org.apache.pig.EvalFunc.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.EvalFunc.finish()",1,1,1
"org.apache.pig.EvalFunc.getArgToFuncMapping()",1,1,1
"org.apache.pig.EvalFunc.getCacheFiles()",1,1,1
"org.apache.pig.EvalFunc.getInputSchema()",1,1,1
"org.apache.pig.EvalFunc.getLogger()",1,1,1
"org.apache.pig.EvalFunc.getPigLogger()",1,1,1
"org.apache.pig.EvalFunc.getReporter()",1,1,1
"org.apache.pig.EvalFunc.getReturnType()",1,1,1
"org.apache.pig.EvalFunc.getReturnTypeFromSpec(FuncSpec)",1,1,2
"org.apache.pig.EvalFunc.getSchemaName(String,Schema)",1,3,3
"org.apache.pig.EvalFunc.getSchemaType()",1,1,1
"org.apache.pig.EvalFunc.getShipFiles()",1,1,1
"org.apache.pig.EvalFunc.isAsynchronous()",1,1,1
"org.apache.pig.EvalFunc.needEndOfAllInputProcessing()",1,1,1
"org.apache.pig.EvalFunc.outputSchema(Schema)",1,2,3
"org.apache.pig.EvalFunc.progress()",1,2,2
"org.apache.pig.EvalFunc.setEndOfAllInput(boolean)",1,1,1
"org.apache.pig.EvalFunc.setInputSchema(Schema)",1,1,1
"org.apache.pig.EvalFunc.setPigLogger(PigLogger)",1,1,1
"org.apache.pig.EvalFunc.setReporter(PigProgressable)",1,1,1
"org.apache.pig.EvalFunc.setUDFContextSignature(String)",1,1,1
"org.apache.pig.EvalFunc.warn(String,Enum)",1,2,2
"org.apache.pig.ExecTypeProvider.fromString(String)",1,1,1
"org.apache.pig.ExecTypeProvider.getSingleton(ExecType)",3,1,3
"org.apache.pig.ExecTypeProvider.selectExecType(Properties)",3,3,3
"org.apache.pig.Expression.BetweenExpression.BetweenExpression(Object,Object)",1,1,1
"org.apache.pig.Expression.BetweenExpression.getLower()",1,1,1
"org.apache.pig.Expression.BetweenExpression.getUpper()",1,1,1
"org.apache.pig.Expression.BetweenExpression.toString()",1,1,1
"org.apache.pig.Expression.BinaryExpression.BinaryExpression(Expression,Expression,OpType)",1,1,1
"org.apache.pig.Expression.BinaryExpression.getLhs()",1,1,1
"org.apache.pig.Expression.BinaryExpression.getRhs()",1,1,1
"org.apache.pig.Expression.BinaryExpression.toString()",1,1,1
"org.apache.pig.Expression.Column.Column(String)",1,1,1
"org.apache.pig.Expression.Column.getName()",1,1,1
"org.apache.pig.Expression.Column.setName(String)",1,1,1
"org.apache.pig.Expression.Column.toString()",1,1,1
"org.apache.pig.Expression.Const.Const(Object)",1,1,1
"org.apache.pig.Expression.Const.getValue()",1,1,1
"org.apache.pig.Expression.Const.toString()",1,2,2
"org.apache.pig.Expression.InExpression.InExpression(List<Object>)",1,1,1
"org.apache.pig.Expression.InExpression.getValues()",1,1,1
"org.apache.pig.Expression.InExpression.toString()",1,3,3
"org.apache.pig.Expression.OpType.OpType()",1,1,1
"org.apache.pig.Expression.OpType.OpType(String)",1,1,1
"org.apache.pig.Expression.OpType.toString()",1,1,1
"org.apache.pig.Expression.UnaryExpression.UnaryExpression(Expression,OpType)",1,1,1
"org.apache.pig.Expression.UnaryExpression.getExpression()",1,1,1
"org.apache.pig.Expression.UnaryExpression.toString()",1,1,1
"org.apache.pig.Expression.getOpType()",1,1,1
"org.apache.pig.FileInputLoadFunc.getSplitComparable(InputSplit)",2,1,2
"org.apache.pig.FileSplitComparable.FileSplitComparable()",1,1,1
"org.apache.pig.FileSplitComparable.FileSplitComparable(String,long)",1,1,1
"org.apache.pig.FileSplitComparable.compareTo(FileSplitComparable)",1,2,2
"org.apache.pig.FileSplitComparable.equals(Object)",10,3,10
"org.apache.pig.FileSplitComparable.hashCode()",1,3,3
"org.apache.pig.FileSplitComparable.readFields(DataInput)",1,1,1
"org.apache.pig.FileSplitComparable.toString()",1,1,1
"org.apache.pig.FileSplitComparable.write(DataOutput)",1,1,1
"org.apache.pig.FilterFunc.finish()",1,1,1
"org.apache.pig.FuncSpec.FuncSpec(String)",1,3,3
"org.apache.pig.FuncSpec.FuncSpec(String,Schema)",1,1,1
"org.apache.pig.FuncSpec.FuncSpec(String,String)",1,1,1
"org.apache.pig.FuncSpec.FuncSpec(String,String[])",1,1,1
"org.apache.pig.FuncSpec.FuncSpec(String,String[],Schema)",1,1,1
"org.apache.pig.FuncSpec.clone()",1,2,4
"org.apache.pig.FuncSpec.equals(Object)",8,4,13
"org.apache.pig.FuncSpec.getArgStringFromSpec(String)",2,2,2
"org.apache.pig.FuncSpec.getClassName()",1,1,1
"org.apache.pig.FuncSpec.getClassNameFromSpec(String)",2,2,2
"org.apache.pig.FuncSpec.getCtorArgs()",1,1,1
"org.apache.pig.FuncSpec.getInputArgsSchema()",1,1,1
"org.apache.pig.FuncSpec.hashCode()",1,2,2
"org.apache.pig.FuncSpec.parseArguments(String)",1,6,8
"org.apache.pig.FuncSpec.setClassName(String)",1,1,1
"org.apache.pig.FuncSpec.setCtorArgs(String[])",1,1,1
"org.apache.pig.FuncSpec.setInputArgsSchema(Schema)",1,1,1
"org.apache.pig.FuncSpec.toString()",1,4,4
"org.apache.pig.IteratingAccumulatorEvalFunc.DelayedQueueIterator.hasNext()",5,2,6
"org.apache.pig.IteratingAccumulatorEvalFunc.DelayedQueueIterator.next()",2,1,2
"org.apache.pig.IteratingAccumulatorEvalFunc.DelayedQueueIterator.remove()",1,1,1
"org.apache.pig.IteratingAccumulatorEvalFunc.accumulate(Tuple)",4,4,9
"org.apache.pig.IteratingAccumulatorEvalFunc.cleanup()",1,1,1
"org.apache.pig.IteratingAccumulatorEvalFunc.getValue()",3,2,4
"org.apache.pig.IteratingAccumulatorEvalFunc.initialize()",1,1,2
"org.apache.pig.IteratingAccumulatorEvalFunc.isFinished()",1,1,1
"org.apache.pig.JVMReuseImpl.cleanupStaticData()",2,5,5
"org.apache.pig.JVMReuseImpl.getMethodNames()",1,5,5
"org.apache.pig.JVMReuseManager.JVMReuseManager()",1,1,1
"org.apache.pig.JVMReuseManager.getInstance()",1,1,1
"org.apache.pig.JVMReuseManager.getStaticDataCleanupMethods()",1,1,1
"org.apache.pig.JVMReuseManager.registerForStaticDataCleanup(Class<?>)",4,5,5
"org.apache.pig.LoadFunc.getAbsolutePath(String,Path)",6,7,12
"org.apache.pig.LoadFunc.getCacheFiles()",1,1,1
"org.apache.pig.LoadFunc.getLoadCaster()",1,1,1
"org.apache.pig.LoadFunc.getPathStrings(String)",2,4,9
"org.apache.pig.LoadFunc.getShipFiles()",1,1,1
"org.apache.pig.LoadFunc.join(AbstractCollection<String>,String)",2,2,3
"org.apache.pig.LoadFunc.relativeToAbsolutePath(String,Path)",1,1,1
"org.apache.pig.LoadFunc.setUDFContextSignature(String)",1,1,1
"org.apache.pig.LoadFunc.warn(String,Enum)",1,1,1
"org.apache.pig.LoadFuncMetadataWrapper.LoadFuncMetadataWrapper()",1,1,1
"org.apache.pig.LoadFuncMetadataWrapper.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.LoadFuncMetadataWrapper.getSchema(String,Job)",1,1,1
"org.apache.pig.LoadFuncMetadataWrapper.getStatistics(String,Job)",1,1,1
"org.apache.pig.LoadFuncMetadataWrapper.loadMetadata()",2,2,2
"org.apache.pig.LoadFuncMetadataWrapper.setLoadFunc(LoadMetadata)",1,1,1
"org.apache.pig.LoadFuncMetadataWrapper.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.LoadFuncWrapper.LoadFuncWrapper()",1,1,1
"org.apache.pig.LoadFuncWrapper.getInputFormat()",1,1,1
"org.apache.pig.LoadFuncWrapper.getLoadCaster()",1,1,1
"org.apache.pig.LoadFuncWrapper.getMethodName(int)",1,1,2
"org.apache.pig.LoadFuncWrapper.getNext()",1,1,1
"org.apache.pig.LoadFuncWrapper.loadFunc()",2,2,2
"org.apache.pig.LoadFuncWrapper.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.LoadFuncWrapper.relativeToAbsolutePath(String,Path)",1,1,1
"org.apache.pig.LoadFuncWrapper.setLoadFunc(LoadFunc)",1,1,1
"org.apache.pig.LoadFuncWrapper.setLocation(String,Job)",1,1,1
"org.apache.pig.LoadFuncWrapper.setUDFContextSignature(String)",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.RequiredField()",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.RequiredField(String,int,List<RequiredField>,byte)",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.getAlias()",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.getIndex()",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.getSubFields()",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.getType()",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.setAlias(String)",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.setIndex(int)",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.setSubFields(List<RequiredField>)",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.setType(byte)",1,1,1
"org.apache.pig.LoadPushDown.RequiredField.toString()",3,1,3
"org.apache.pig.LoadPushDown.RequiredFieldList.RequiredFieldList()",1,1,1
"org.apache.pig.LoadPushDown.RequiredFieldList.RequiredFieldList(List<RequiredField>)",1,1,1
"org.apache.pig.LoadPushDown.RequiredFieldList.add(RequiredField)",1,1,1
"org.apache.pig.LoadPushDown.RequiredFieldList.getFields()",1,1,1
"org.apache.pig.LoadPushDown.RequiredFieldList.toString()",1,4,4
"org.apache.pig.LoadPushDown.RequiredFieldResponse.RequiredFieldResponse(boolean)",1,1,1
"org.apache.pig.LoadPushDown.RequiredFieldResponse.getRequiredFieldResponse()",1,1,1
"org.apache.pig.LoadPushDown.RequiredFieldResponse.setRequiredFieldResponse(boolean)",1,1,1
"org.apache.pig.Main.configureLog4J(Properties,PigContext)",1,5,7
"org.apache.pig.Main.determineScriptType(String)",1,1,1
"org.apache.pig.Main.dryrun(String,PigContext)",1,2,2
"org.apache.pig.Main.fetchRemoteParamFiles(List<String>,Properties)",1,2,2
"org.apache.pig.Main.getBuildTime()",1,1,1
"org.apache.pig.Main.getFileFromCanonicalPath(String)",1,1,1
"org.apache.pig.Main.getMajorVersion()",1,1,1
"org.apache.pig.Main.getMinorVersion()",1,1,1
"org.apache.pig.Main.getPatchVersion()",1,1,1
"org.apache.pig.Main.getReturnCodeForStats(int[])",1,1,3
"org.apache.pig.Main.getSvnRevision()",1,1,1
"org.apache.pig.Main.getVersionString()",1,1,1
"org.apache.pig.Main.log4jConfAsProperties(String)",1,5,5
"org.apache.pig.Main.main(String[])",1,1,1
"org.apache.pig.Main.makeListener(Properties)",1,1,2
"org.apache.pig.Main.printProperties()",1,1,1
"org.apache.pig.Main.printScriptRunTime(DateTime)",1,1,1
"org.apache.pig.Main.run(String[],PigProgressNotificationListener)",15,49,81
"org.apache.pig.Main.runEmbeddedScript(PigContext,String,String)",1,5,9
"org.apache.pig.Main.runParamPreprocessor(PigContext,BufferedReader,String,boolean)",2,2,2
"org.apache.pig.Main.usage()",1,1,1
"org.apache.pig.Main.validateLogFile(String,String)",9,14,17
"org.apache.pig.PigConfiguration.PigConfiguration()",1,1,1
"org.apache.pig.PigConstants.PigConstants()",1,1,1
"org.apache.pig.PigException.PigException()",1,1,1
"org.apache.pig.PigException.PigException(String)",1,1,1
"org.apache.pig.PigException.PigException(String,SourceLocation)",1,1,1
"org.apache.pig.PigException.PigException(String,Throwable)",1,1,1
"org.apache.pig.PigException.PigException(String,int)",1,1,1
"org.apache.pig.PigException.PigException(String,int,SourceLocation)",1,1,1
"org.apache.pig.PigException.PigException(String,int,Throwable)",1,1,1
"org.apache.pig.PigException.PigException(String,int,Throwable,SourceLocation)",1,1,1
"org.apache.pig.PigException.PigException(String,int,boolean)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte,SourceLocation)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte,Throwable,SourceLocation)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte,boolean)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte,boolean,String,SourceLocation)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.PigException.PigException(String,int,byte,boolean,String,Throwable,SourceLocation)",1,1,1
"org.apache.pig.PigException.PigException(Throwable)",1,1,1
"org.apache.pig.PigException.determineErrorSource(int)",5,1,9
"org.apache.pig.PigException.getDetailedMessage()",1,1,1
"org.apache.pig.PigException.getErrorCode()",1,1,1
"org.apache.pig.PigException.getErrorSource()",1,1,1
"org.apache.pig.PigException.getMarkedAsShowToUser()",1,1,1
"org.apache.pig.PigException.getSourceLocation()",1,1,1
"org.apache.pig.PigException.isBug(byte)",1,1,2
"org.apache.pig.PigException.isInput(byte)",1,1,2
"org.apache.pig.PigException.isRemoteEnvironment(byte)",1,1,2
"org.apache.pig.PigException.isUserEnvironment(byte)",1,1,2
"org.apache.pig.PigException.retriable()",1,1,1
"org.apache.pig.PigException.setDetailedMessage(String)",1,1,1
"org.apache.pig.PigException.setErrorCode(int)",1,1,1
"org.apache.pig.PigException.setErrorSource(byte)",1,1,1
"org.apache.pig.PigException.setMarkedAsShowToUser(boolean)",1,1,1
"org.apache.pig.PigException.setRetriable(boolean)",1,1,1
"org.apache.pig.PigException.setSourceLocation(SourceLocation)",1,1,1
"org.apache.pig.PigException.toString()",1,2,2
"org.apache.pig.PigRunner.run(String[],PigProgressNotificationListener)",1,1,1
"org.apache.pig.PigServer.Graph.Graph(boolean)",1,1,1
"org.apache.pig.PigServer.Graph.buildPlan(String)",7,11,15
"org.apache.pig.PigServer.Graph.buildQuery()",1,2,2
"org.apache.pig.PigServer.Graph.checkDuplicateStoreLoc(Set<LOStore>)",3,3,4
"org.apache.pig.PigServer.Graph.compile()",1,1,1
"org.apache.pig.PigServer.Graph.countExecutedStores()",1,1,1
"org.apache.pig.PigServer.Graph.duplicate()",1,3,3
"org.apache.pig.PigServer.Graph.getAliasOp()",1,1,1
"org.apache.pig.PigServer.Graph.getAliases()",1,1,1
"org.apache.pig.PigServer.Graph.getLastRel()",1,1,1
"org.apache.pig.PigServer.Graph.getLogicalPlan()",1,1,1
"org.apache.pig.PigServer.Graph.getOperator(String)",1,1,1
"org.apache.pig.PigServer.Graph.getPlan(String)",3,2,3
"org.apache.pig.PigServer.Graph.getScriptCache()",1,1,1
"org.apache.pig.PigServer.Graph.isBatchEmpty()",3,1,3
"org.apache.pig.PigServer.Graph.isBatchOn()",1,1,1
"org.apache.pig.PigServer.Graph.markAsExecuted()",1,1,1
"org.apache.pig.PigServer.Graph.parseQuery()",3,4,5
"org.apache.pig.PigServer.Graph.postProcess()",1,10,10
"org.apache.pig.PigServer.Graph.registerQuery(String,int,boolean,boolean)",6,10,11
"org.apache.pig.PigServer.Graph.removeToLoad(Operator)",1,5,5
"org.apache.pig.PigServer.Graph.skipStores()",4,4,5
"org.apache.pig.PigServer.Graph.validateQuery()",1,2,2
"org.apache.pig.PigServer.PigServer(ExecType)",1,1,1
"org.apache.pig.PigServer.PigServer(ExecType,Configuration)",1,1,1
"org.apache.pig.PigServer.PigServer(ExecType,Properties)",1,1,1
"org.apache.pig.PigServer.PigServer(PigContext)",1,1,1
"org.apache.pig.PigServer.PigServer(PigContext,boolean)",1,3,3
"org.apache.pig.PigServer.PigServer(Properties)",1,1,1
"org.apache.pig.PigServer.PigServer(String)",1,1,1
"org.apache.pig.PigServer.PigServer(String,Properties)",1,1,1
"org.apache.pig.PigServer.addExecTypeProperty(Properties,String)",1,1,1
"org.apache.pig.PigServer.addJarsFromProperties()",3,5,9
"org.apache.pig.PigServer.addPathToSkip(String)",1,1,1
"org.apache.pig.PigServer.buildLp()",1,1,1
"org.apache.pig.PigServer.buildStorePlan(String)",1,3,3
"org.apache.pig.PigServer.capacity()",3,2,4
"org.apache.pig.PigServer.constructScope()",1,1,1
"org.apache.pig.PigServer.debugOff()",1,1,1
"org.apache.pig.PigServer.debugOn()",1,1,1
"org.apache.pig.PigServer.deleteFile(String)",1,1,1
"org.apache.pig.PigServer.discardBatch()",2,2,3
"org.apache.pig.PigServer.dumpSchema(String)",2,4,5
"org.apache.pig.PigServer.dumpSchemaNested(String,String)",3,4,4
"org.apache.pig.PigServer.execute()",2,3,3
"org.apache.pig.PigServer.executeBatch()",1,1,1
"org.apache.pig.PigServer.executeBatch(boolean)",1,2,2
"org.apache.pig.PigServer.executeCompiledLogicalPlan()",1,1,1
"org.apache.pig.PigServer.existsFile(String)",1,1,1
"org.apache.pig.PigServer.explain(String,PrintStream)",1,1,1
"org.apache.pig.PigServer.explain(String,String,boolean,boolean,PrintStream,PrintStream,File,String)",2,7,10
"org.apache.pig.PigServer.fileSize(String)",1,1,1
"org.apache.pig.PigServer.getAliasKeySet()",1,1,1
"org.apache.pig.PigServer.getAliases()",1,3,3
"org.apache.pig.PigServer.getClonedGraph()",2,1,2
"org.apache.pig.PigServer.getCurrentDAG()",1,1,1
"org.apache.pig.PigServer.getExamples(String)",1,6,6
"org.apache.pig.PigServer.getJobs(PigStats)",2,5,5
"org.apache.pig.PigServer.getLastRel()",1,1,1
"org.apache.pig.PigServer.getLogicalPlanData()",1,1,1
"org.apache.pig.PigServer.getOperatorForAlias(String)",2,1,2
"org.apache.pig.PigServer.getPigContext()",1,1,1
"org.apache.pig.PigServer.isBatchEmpty()",2,1,2
"org.apache.pig.PigServer.isBatchOn()",1,1,1
"org.apache.pig.PigServer.launchPlan(LogicalPlan,String)",1,1,4
"org.apache.pig.PigServer.listPaths(String)",1,2,2
"org.apache.pig.PigServer.locateJarFromResources(String)",1,4,4
"org.apache.pig.PigServer.markPredeployedJarsFromProperties()",1,4,4
"org.apache.pig.PigServer.mkdirs(String)",1,1,1
"org.apache.pig.PigServer.openIterator(String)",3,5,7
"org.apache.pig.PigServer.paramMapToList(Map<String, String>)",1,3,3
"org.apache.pig.PigServer.parseAndBuild()",2,2,3
"org.apache.pig.PigServer.printAliases()",1,1,1
"org.apache.pig.PigServer.printHistory(boolean)",1,4,4
"org.apache.pig.PigServer.registerCode(String,String,String)",3,5,6
"org.apache.pig.PigServer.registerFunction(String,FuncSpec)",1,1,1
"org.apache.pig.PigServer.registerJar(String)",7,6,7
"org.apache.pig.PigServer.registerQuery(String)",1,1,1
"org.apache.pig.PigServer.registerQuery(String,int)",1,1,1
"org.apache.pig.PigServer.registerScript(InputStream)",1,1,1
"org.apache.pig.PigServer.registerScript(InputStream,List<String>)",1,1,1
"org.apache.pig.PigServer.registerScript(InputStream,Map<String, String>)",1,1,1
"org.apache.pig.PigServer.registerScript(InputStream,Map<String, String>,List<String>)",1,2,2
"org.apache.pig.PigServer.registerScript(String)",1,1,1
"org.apache.pig.PigServer.registerScript(String,List<String>)",1,1,1
"org.apache.pig.PigServer.registerScript(String,Map<String, String>)",1,1,1
"org.apache.pig.PigServer.registerScript(String,Map<String, String>,List<String>)",1,3,3
"org.apache.pig.PigServer.registerStreamingCommand(String,StreamingCommand)",1,1,1
"org.apache.pig.PigServer.renameFile(String,String)",1,1,1
"org.apache.pig.PigServer.resetScope()",1,1,1
"org.apache.pig.PigServer.setBatchOn()",1,2,2
"org.apache.pig.PigServer.setDefaultParallel(int)",1,1,1
"org.apache.pig.PigServer.setJobName(String)",1,1,1
"org.apache.pig.PigServer.setJobPriority(String)",1,1,1
"org.apache.pig.PigServer.setSkipParseInRegisterForBatch(boolean)",1,1,1
"org.apache.pig.PigServer.setValidateEachStatement(boolean)",1,1,1
"org.apache.pig.PigServer.shutdown()",1,1,1
"org.apache.pig.PigServer.store(String,String)",1,1,1
"org.apache.pig.PigServer.store(String,String,String)",3,4,5
"org.apache.pig.PigServer.storeEx(String,String,String)",1,2,3
"org.apache.pig.PigStreamingBase.deserialize(byte[])",1,1,1
"org.apache.pig.PigStreamingBase.serialize(Tuple)",2,2,2
"org.apache.pig.PrimitiveEvalFunc.PrimitiveEvalFunc()",1,1,1
"org.apache.pig.PrimitiveEvalFunc.PrimitiveEvalFunc(Class,Class)",1,1,1
"org.apache.pig.PrimitiveEvalFunc.exec(Tuple)",2,1,2
"org.apache.pig.PrimitiveEvalFunc.getInputTypeClass()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.ResourceFieldSchema()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.ResourceFieldSchema(FieldSchema)",1,1,5
"org.apache.pig.ResourceSchema.ResourceFieldSchema.ResourceFieldSchema(LogicalFieldSchema)",1,2,3
"org.apache.pig.ResourceSchema.ResourceFieldSchema.calcCastString()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.getDescription()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.getDescription(boolean)",1,3,4
"org.apache.pig.ResourceSchema.ResourceFieldSchema.getName()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.getSchema()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.getType()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.setDescription(String)",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.setName(String)",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.setSchema(ResourceSchema)",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.setType(byte)",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.throwInvalidSchemaException()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.toString()",1,1,1
"org.apache.pig.ResourceSchema.ResourceFieldSchema.validateSchema(ResourceSchema)",1,4,5
"org.apache.pig.ResourceSchema.ResourceSchema()",1,1,1
"org.apache.pig.ResourceSchema.ResourceSchema(LogicalSchema)",1,2,2
"org.apache.pig.ResourceSchema.ResourceSchema(LogicalSchema,SortInfo)",1,4,5
"org.apache.pig.ResourceSchema.ResourceSchema(Schema)",1,2,2
"org.apache.pig.ResourceSchema.ResourceSchema(Schema,SortInfo)",1,4,5
"org.apache.pig.ResourceSchema.equals(ResourceSchema,ResourceSchema)",11,10,19
"org.apache.pig.ResourceSchema.fieldNames()",1,2,2
"org.apache.pig.ResourceSchema.getFields()",1,1,1
"org.apache.pig.ResourceSchema.getSortKeyOrders()",1,1,1
"org.apache.pig.ResourceSchema.getSortKeys()",1,1,1
"org.apache.pig.ResourceSchema.getVersion()",1,1,1
"org.apache.pig.ResourceSchema.setFields(ResourceFieldSchema[])",1,2,2
"org.apache.pig.ResourceSchema.setSortKeyOrders(Order[])",1,2,2
"org.apache.pig.ResourceSchema.setSortKeys(int[])",1,2,2
"org.apache.pig.ResourceSchema.setVersion(int)",1,1,1
"org.apache.pig.ResourceSchema.stringifyResourceSchema(StringBuilder,ResourceSchema,byte,boolean)",1,10,10
"org.apache.pig.ResourceSchema.toString()",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.equals(Object)",2,6,7
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.getMostCommonValues()",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.getMostCommonValuesFreq()",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.getNumDistinctValues()",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.getValueHistogram()",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.getVersion()",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.hashCode()",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.setMostCommonValues(Object[])",1,2,2
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.setMostCommonValuesFreq(float[])",1,2,2
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.setNumDistinctValues(Long)",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.setValueHistogram(Object[])",1,2,2
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.setVersion(int)",1,1,1
"org.apache.pig.ResourceStatistics.ResourceFieldStatistics.toString()",1,4,4
"org.apache.pig.ResourceStatistics.clone()",1,1,1
"org.apache.pig.ResourceStatistics.equals(Object)",2,6,7
"org.apache.pig.ResourceStatistics.getAvgRecordSize()",2,1,4
"org.apache.pig.ResourceStatistics.getFields()",1,1,1
"org.apache.pig.ResourceStatistics.getNumRecords()",1,1,1
"org.apache.pig.ResourceStatistics.getSizeInBytes()",1,1,1
"org.apache.pig.ResourceStatistics.getmBytes()",1,1,1
"org.apache.pig.ResourceStatistics.hashCode()",1,3,3
"org.apache.pig.ResourceStatistics.setAvgRecordSize(Long)",1,1,1
"org.apache.pig.ResourceStatistics.setFields(ResourceFieldStatistics[])",1,2,2
"org.apache.pig.ResourceStatistics.setNumRecords(Long)",1,1,1
"org.apache.pig.ResourceStatistics.setSizeInBytes(Long)",1,1,1
"org.apache.pig.ResourceStatistics.setmBytes(Long)",1,1,1
"org.apache.pig.ResourceStatistics.toString()",1,2,2
"org.apache.pig.SortColInfo.SortColInfo(String,int,Order)",1,1,1
"org.apache.pig.SortColInfo.equals(Object)",2,3,4
"org.apache.pig.SortColInfo.getColIndex()",1,1,1
"org.apache.pig.SortColInfo.getColName()",1,1,1
"org.apache.pig.SortColInfo.getSortOrder()",1,1,1
"org.apache.pig.SortColInfo.hashCode()",1,2,3
"org.apache.pig.SortColInfo.toString()",1,1,2
"org.apache.pig.SortInfo.SortInfo(List<SortColInfo>)",1,1,1
"org.apache.pig.SortInfo.equals(Object)",2,2,3
"org.apache.pig.SortInfo.getSortColInfoList()",1,1,1
"org.apache.pig.SortInfo.hashCode()",1,2,3
"org.apache.pig.SortInfo.isGloballySorted()",1,1,1
"org.apache.pig.SortInfo.toString()",1,1,1
"org.apache.pig.StoreFunc.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.StoreFunc.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.StoreFunc.cleanupOnFailureImpl(String,Job)",1,2,2
"org.apache.pig.StoreFunc.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.StoreFunc.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.StoreFunc.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.StoreFunc.warn(String,Enum)",1,1,1
"org.apache.pig.StoreFuncMetadataWrapper.StoreFuncMetadataWrapper()",1,1,1
"org.apache.pig.StoreFuncMetadataWrapper.setStoreFunc(StoreMetadata)",1,1,1
"org.apache.pig.StoreFuncMetadataWrapper.storeMetadata()",2,2,2
"org.apache.pig.StoreFuncMetadataWrapper.storeSchema(ResourceSchema,String,Job)",1,1,1
"org.apache.pig.StoreFuncMetadataWrapper.storeStatistics(ResourceStatistics,String,Job)",1,1,1
"org.apache.pig.StoreFuncWrapper.StoreFuncWrapper()",1,1,1
"org.apache.pig.StoreFuncWrapper.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.StoreFuncWrapper.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.StoreFuncWrapper.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.StoreFuncWrapper.getMethodName(int)",1,1,2
"org.apache.pig.StoreFuncWrapper.getOutputFormat()",1,1,1
"org.apache.pig.StoreFuncWrapper.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.StoreFuncWrapper.putNext(Tuple)",1,1,1
"org.apache.pig.StoreFuncWrapper.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.StoreFuncWrapper.setStoreFunc(StoreFuncInterface)",1,1,1
"org.apache.pig.StoreFuncWrapper.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.StoreFuncWrapper.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.StoreFuncWrapper.storeFunc()",2,2,2
"org.apache.pig.TypedOutputEvalFunc.TypedOutputEvalFunc()",1,1,1
"org.apache.pig.TypedOutputEvalFunc.getClass(Type)",5,5,5
"org.apache.pig.TypedOutputEvalFunc.getCounterGroup()",1,1,1
"org.apache.pig.TypedOutputEvalFunc.getOutputTypeClass()",1,1,1
"org.apache.pig.TypedOutputEvalFunc.getTypeArguments(Class<T>,Class<? extends T>)",1,8,8
"org.apache.pig.TypedOutputEvalFunc.safeIncrCounter(String,String,Long)",1,1,1
"org.apache.pig.TypedOutputEvalFunc.verifyInput(Tuple,int)",1,1,1
"org.apache.pig.TypedOutputEvalFunc.verifyUdfInput(String,Tuple,int)",3,3,3
"org.apache.pig.backend.BackendException.BackendException()",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,Throwable)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,int)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,int,Throwable)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,int,boolean)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,int,byte)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,int,byte,boolean)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.backend.BackendException.BackendException(Throwable)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException()",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,Throwable)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,int)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,int,Throwable)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,int,boolean)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,int,byte)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,int,byte,boolean)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.backend.datastorage.DataStorageException.DataStorageException(Throwable)",1,1,1
"org.apache.pig.backend.datastorage.ImmutableOutputStream.ImmutableOutputStream(String)",1,1,1
"org.apache.pig.backend.datastorage.ImmutableOutputStream.write(int)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException()",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,Throwable)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,int)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,int,Throwable)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,int,boolean)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,int,byte)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,int,byte,boolean)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.backend.executionengine.ExecException.ExecException(Throwable)",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.BigDecimalWritable()",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.BigDecimalWritable(BigDecimal)",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.Comparator.Comparator()",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.Comparator.compare(byte[],int,int,byte[],int,int)",1,1,2
"org.apache.pig.backend.hadoop.BigDecimalWritable.compareTo(BigDecimalWritable)",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.equals(Object)",2,1,2
"org.apache.pig.backend.hadoop.BigDecimalWritable.get()",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.readFields(DataInput)",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.set(BigDecimal)",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.toString()",1,1,1
"org.apache.pig.backend.hadoop.BigDecimalWritable.write(DataOutput)",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.BigIntegerWritable()",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.BigIntegerWritable(BigInteger)",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.Comparator.Comparator()",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.Comparator.compare(byte[],int,int,byte[],int,int)",1,1,2
"org.apache.pig.backend.hadoop.BigIntegerWritable.compareTo(BigIntegerWritable)",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.equals(Object)",2,1,2
"org.apache.pig.backend.hadoop.BigIntegerWritable.get()",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.readFields(DataInput)",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.set(BigInteger)",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.toString()",1,1,1
"org.apache.pig.backend.hadoop.BigIntegerWritable.write(DataOutput)",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.Comparator.Comparator()",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.Comparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.DateTimeWritable()",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.DateTimeWritable(DateTime)",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.compareTo(Object)",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.equals(Object)",2,1,2
"org.apache.pig.backend.hadoop.DateTimeWritable.get()",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.readFields(DataInput)",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.set(DateTime)",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.toString()",1,1,1
"org.apache.pig.backend.hadoop.DateTimeWritable.write(DataOutput)",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.Comparator.Comparator()",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.Comparator.compare(byte[],int,int,byte[],int,int)",1,1,3
"org.apache.pig.backend.hadoop.DoubleWritable.DoubleWritable()",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.DoubleWritable(double)",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.compareTo(Object)",1,1,3
"org.apache.pig.backend.hadoop.DoubleWritable.equals(Object)",2,1,2
"org.apache.pig.backend.hadoop.DoubleWritable.get()",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.readFields(DataInput)",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.set(double)",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.toString()",1,1,1
"org.apache.pig.backend.hadoop.DoubleWritable.write(DataOutput)",1,1,1
"org.apache.pig.backend.hadoop.HDataType.findTypeFromClassName(String)",2,2,2
"org.apache.pig.backend.hadoop.HDataType.findTypeFromNullableWritable(PigNullableWritable)",13,13,13
"org.apache.pig.backend.hadoop.HDataType.getNewWritableComparable(byte)",15,4,17
"org.apache.pig.backend.hadoop.HDataType.getWritableComparable(String)",2,2,2
"org.apache.pig.backend.hadoop.HDataType.getWritableComparableTypes(Object,byte)",16,4,31
"org.apache.pig.backend.hadoop.HDataType.getWritableComparableTypes(byte)",3,3,16
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.AbstractAccumuloStorage(String,String)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.checkSchema(ResourceSchema)",2,2,2
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.clearUnset(Configuration,Map<String, String>)",1,3,3
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.configureInputFormat(Job)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.configureOutputFormat(Job)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.extractArgs(CommandLine,AccumuloStorageOptions)",3,14,14
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getCommandLine()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getEntries(Configuration,String)",1,3,3
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getInputFormat()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getInputFormatEntries(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getLoadCaster()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getNext()",2,2,4
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getOutputFormat()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getOutputFormatEntries(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getUDFProperties()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.getWriter()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.loadDependentJars(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.makePair(String,String)",1,1,3
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.objToBytes(Object,byte)",18,16,18
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.objToText(Object,byte)",2,2,2
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.objectToText(Object,ResourceFieldSchema)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.parseColumns(String)",1,5,5
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.putNext(Tuple)",2,2,3
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.relativeToAbsolutePath(String,Path)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.schemaToType(Object,ResourceFieldSchema)",1,2,2
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.schemaToType(Object,int,ResourceFieldSchema[])",1,2,2
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.setLocation(String,Job)",2,5,9
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.setLocationFromUri(String)",2,17,19
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.setStoreLocation(String,Job)",1,1,2
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.setUDFContextSignature(String)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.simpleUnset(Configuration,Map<String, String>)",1,6,6
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.tupleToBytes(Tuple,int,ResourceFieldSchema[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.tupleToText(Tuple,int,ResourceFieldSchema[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AbstractAccumuloStorage.unsetEntriesFromConfiguration(Configuration,Map<String, String>)",1,2,4
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToBag(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToBigDecimal(byte[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToBigInteger(byte[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToBoolean(byte[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToCharArray(byte[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToDateTime(byte[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToDouble(byte[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToFloat(byte[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToInteger(byte[])",1,1,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToLong(byte[])",1,1,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToMap(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.bytesToTuple(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(BigDecimal)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(BigInteger)",1,1,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(Boolean)",1,1,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(DataBag)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(DataByteArray)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(DateTime)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(Double)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(Float)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(Integer)",1,1,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(Long)",1,1,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(Map<String, Object>)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(String)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloBinaryConverter.toBytes(Tuple)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorage.AccumuloStorage()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorage.AccumuloStorage(String)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorage.AccumuloStorage(String,String)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorage.addColumn(Mutation,String,String,Value)",1,3,3
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorage.configureInputFormat(Job)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorage.getMutations(Tuple)",8,12,16
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorage.getTuple(Key,Value)",9,16,19
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorageOptions.AccumuloStorageOptions()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorageOptions.getAuthorizations(CommandLine)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorageOptions.getCommandLine(String)",1,2,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorageOptions.getHelpMessage()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorageOptions.getInt(CommandLine,Option)",1,2,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorageOptions.getLong(CommandLine,Option)",1,2,2
"org.apache.pig.backend.hadoop.accumulo.AccumuloStorageOptions.hasAuthorizations(CommandLine)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.Column.Column(String)",3,6,7
"org.apache.pig.backend.hadoop.accumulo.Column.equals(Object)",8,6,8
"org.apache.pig.backend.hadoop.accumulo.Column.getColumnFamily()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.Column.getColumnQualifier()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.Column.getType()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.Column.matchAll()",1,2,2
"org.apache.pig.backend.hadoop.accumulo.Column.toString()",1,1,1
"org.apache.pig.backend.hadoop.accumulo.FixedByteArrayOutputStream.FixedByteArrayOutputStream(byte[])",1,1,1
"org.apache.pig.backend.hadoop.accumulo.FixedByteArrayOutputStream.write(byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.FixedByteArrayOutputStream.write(int)",1,1,1
"org.apache.pig.backend.hadoop.accumulo.Utils.addDependencyJars(Configuration,Class<?>...)",6,4,6
"org.apache.pig.backend.hadoop.accumulo.Utils.copyToZipStream(InputStream,ZipEntry,ZipOutputStream)",1,2,2
"org.apache.pig.backend.hadoop.accumulo.Utils.createJar(File,File)",3,3,3
"org.apache.pig.backend.hadoop.accumulo.Utils.findContainingJar(Class<?>,Map<String, String>)",3,4,4
"org.apache.pig.backend.hadoop.accumulo.Utils.findOrCreateJar(Class<?>,FileSystem,Map<String, String>)",2,4,5
"org.apache.pig.backend.hadoop.accumulo.Utils.getJar(Class<?>)",1,3,4
"org.apache.pig.backend.hadoop.accumulo.Utils.jarDir(File,String,ZipOutputStream)",1,4,4
"org.apache.pig.backend.hadoop.accumulo.Utils.jarFinderGetJar(Class)",5,7,8
"org.apache.pig.backend.hadoop.accumulo.Utils.updateMap(String,Map<String, String>)",2,5,6
"org.apache.pig.backend.hadoop.accumulo.Utils.zipDir(File,String,ZipOutputStream,boolean)",1,8,8
"org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil.getLocalFSProperties()",1,4,4
"org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil.mergeConf(Configuration,Configuration)",1,2,2
"org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil.replaceConfigForLocalMode(Configuration)",1,3,3
"org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil.toConfiguration(Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil.toConfiguration(Properties,boolean)",1,2,2
"org.apache.pig.backend.hadoop.datastorage.ConfigurationUtil.toProperties(Configuration)",1,2,2
"org.apache.pig.backend.hadoop.datastorage.HConfiguration.HConfiguration()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HConfiguration.HConfiguration(Configuration)",1,3,3
"org.apache.pig.backend.hadoop.datastorage.HConfiguration.getConfiguration()",1,2,2
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.HDataStorage(Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.HDataStorage(URI,Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asCollection(String)",2,3,5
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asContainer(ContainerDescriptor)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asContainer(ContainerDescriptor,ContainerDescriptor)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asContainer(ContainerDescriptor,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asContainer(String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asContainer(String,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asElement(ContainerDescriptor,ElementDescriptor)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asElement(ContainerDescriptor,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asElement(ElementDescriptor)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asElement(String)",2,1,2
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.asElement(String,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.close()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.getActiveContainer()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.getConfiguration()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.getHFS()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.getStatistics()",1,2,2
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.init()",1,3,5
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.isContainer(String)",1,2,4
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.setActiveContainer(ContainerDescriptor)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDataStorage.updateConfiguration(Properties)",2,2,3
"org.apache.pig.backend.hadoop.datastorage.HDirectory.HDirectory(HDataStorage,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.HDirectory(HDataStorage,Path,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.HDirectory(HDataStorage,Path,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.HDirectory(HDataStorage,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.HDirectory(HDataStorage,String,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.HDirectory(HDataStorage,String,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.copy(ContainerDescriptor,Properties,boolean)",4,5,9
"org.apache.pig.backend.hadoop.datastorage.HDirectory.create(Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.iterator()",1,4,4
"org.apache.pig.backend.hadoop.datastorage.HDirectory.open()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.open(Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.sopen()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HDirectory.sopen(Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.HFile(HDataStorage,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.HFile(HDataStorage,Path,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.HFile(HDataStorage,Path,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.HFile(HDataStorage,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.HFile(HDataStorage,String,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.HFile(HDataStorage,String,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.create(Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.open()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.open(Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.sopen()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HFile.sopen(Properties)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.HPath(HDataStorage,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.HPath(HDataStorage,Path,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.HPath(HDataStorage,Path,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.HPath(HDataStorage,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.HPath(HDataStorage,String,Path)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.HPath(HDataStorage,String,String)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.compareTo(ElementDescriptor)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.copy(ElementDescriptor,Properties,boolean)",2,2,2
"org.apache.pig.backend.hadoop.datastorage.HPath.copy(ElementDescriptor,boolean)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.create()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.delete()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.equals(Object)",2,1,2
"org.apache.pig.backend.hadoop.datastorage.HPath.exists()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.getConfiguration()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.getDataStorage()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.getHFS()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.getPath()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.getStatistics()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.rename(ElementDescriptor)",1,2,2
"org.apache.pig.backend.hadoop.datastorage.HPath.setPermission(FsPermission)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.systemElement()",1,3,3
"org.apache.pig.backend.hadoop.datastorage.HPath.toString()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HPath.updateConfiguration(Properties)",2,1,2
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.HSeekableInputStream(FSDataInputStream,long)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.available()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.close()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.mark(int)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.markSupported()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.read()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.read(byte[])",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.read(byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.reset()",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.seek(long,FLAGS)",2,3,5
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.skip(long)",1,1,1
"org.apache.pig.backend.hadoop.datastorage.HSeekableInputStream.tell()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.HExecutionEngine(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.compile(LogicalPlan,Properties)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.destroy()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.explain(LogicalPlan,PigContext,PrintStream,String,boolean,File,String)",2,4,5
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getConfiguration()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getDataStorage()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getExecConf(Properties)",3,3,5
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getExecutableManager()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getForEachInnerLogToPhyMap(LogicalPlan)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getJobConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getLocalConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getLogToPhyMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.getS3Conf()",1,4,4
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.init()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.init(Properties)",1,12,15
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.killJob(String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.launchPig(LogicalPlan,String,PigContext)",2,2,5
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.setConfiguration(Properties)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.setProperty(String,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.HJob(JOB_STATUS,PigContext,POStore,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.HJob(JOB_STATUS,PigContext,POStore,String,PigStats)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.completionNotification(Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getAlias()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getConfiguration()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getException()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getLogs(OutputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getPOStore()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getResults()",3,4,9
"org.apache.pig.backend.hadoop.executionengine.HJob.getSTDError(OutputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getSTDOut(OutputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getStatistics()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.getStatus()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.hasCompleted()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.kill()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.HJob.setException(Exception)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,int,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,int,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,int,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,int,byte,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.JobCreationException.JobCreationException(Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.Launcher.HangingJobKiller.HangingJobKiller()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.Launcher.HangingJobKiller.run()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.Launcher.JobControlThreadExceptionHandler.uncaughtException(Thread,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.Launcher.Launcher()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.Launcher.calculateProgress(JobControl)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.Launcher.computeTimeSpent(Iterator<TaskReport>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.Launcher.destroy()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.Launcher.getErrorMessages(Iterator<TaskReport>,String,boolean,PigContext)",6,12,15
"org.apache.pig.backend.hadoop.executionengine.Launcher.getExceptionFromString(String)",3,3,3
"org.apache.pig.backend.hadoop.executionengine.Launcher.getExceptionFromStrings(String[],int)",5,12,16
"org.apache.pig.backend.hadoop.executionengine.Launcher.getStackTraceElement(String)",3,6,6
"org.apache.pig.backend.hadoop.executionengine.Launcher.getTotalHadoopTimeSpent()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.Launcher.isComplete(double)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.Launcher.reset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.Launcher.setJobException(Throwable)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.MapRedResult.MapRedResult(FileSpec,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.TaskContext.getProgress()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.TaskContext.progress()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.TaskContext.setStatus(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchContext.getCounter(Enum<?>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchContext.getCounter(String,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchLauncher.FetchLauncher(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchLauncher.explain(PhysicalPlan,PigContext,PrintStream,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchLauncher.init(PhysicalPlan,POStore)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchLauncher.launchPig(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchLauncher.runPipeline(POStore)",6,3,7
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.FetchablePlanVisitor(PigContext,PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.isPlanFetchable()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.isTempPath(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitCollectedGroup(POCollectedGroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitCounter(POCounter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitCross(POCross)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitDemux(PODemux)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitDistinct(PODistinct)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitFRJoin(POFRJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitGlobalRearrange(POGlobalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitLoad(POLoad)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitLocalRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitMergeCoGroup(POMergeCogroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitMergeJoin(POMergeJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitNative(PONative)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitPOOptimizedForEach(POOptimizedForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitPackage(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitPartialAgg(POPartialAgg)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitPartitionRearrange(POPartitionRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitPreCombinerLocalRearrange(POPreCombinerLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitRank(PORank)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitSkewedJoin(POSkewedJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitSort(POSort)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitSplit(POSplit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.FetchablePlanVisitor.visitStore(POStore)",2,1,5
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.init(PhysicalPlan)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.isEligible(PigContext,PhysicalPlan)",5,4,5
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.isFetchEnabled(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchOptimizer.isPlanFetchable(PigContext,PhysicalPlan)",5,3,5
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchPOStoreImpl.FetchPOStoreImpl(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchPOStoreImpl.cleanUp()",2,2,3
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchPOStoreImpl.createStoreFunc(POStore)",1,1,3
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchPOStoreImpl.tearDown()",2,3,4
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchProgressableReporter.progress()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchProgressableReporter.progress(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchTaskContext.FetchTaskContext(FetchContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchTaskContext.get()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchTaskContext.getCounter(Enum<?>)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchTaskContext.getCounter(String,String)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchTaskContext.incrCounter(Enum<?>,long)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.fetch.FetchTaskContext.incrCounter(String,String,long)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.AccumulatorOptimizer.AccumulatorOptimizer(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.AccumulatorOptimizer.visitMROp(MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.clone()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.equals(Object)",5,2,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.getColumnInfo(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.getColumnInfos()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.hashCode()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insert(List<Integer>,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insert(int,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insertColumnChainInfo(ColumnChainInfo)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.insertInReduce(POProject)",3,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.size()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnChainInfo.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.ColumnInfo(List<Integer>,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.ColumnInfo(int,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.equals(Object)",3,5,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.getColumns()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.getResultType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.getStartCol()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.isRangeProject()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.isStar()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ColumnInfo.toString()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer.CombinerOptimizer(MROperPlan,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer.CombinerOptimizer(MROperPlan,boolean,CompilationMessageCollector)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer.getMessageCollector()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer.visitMROp(MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.DistinctCombiner.Combine.reduce(PigNullableWritable,Iterable<NullableTuple>,Context)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.DistinctCombiner.Combine.setup(Context)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.FileBasedOutputSizeReader.getLocationUri(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.FileBasedOutputSizeReader.getOutputSize(POStore,Configuration)",2,4,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.FileBasedOutputSizeReader.supports(POStore,Configuration)",5,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.IllustrateDummyReporter.getCounter(Enum<?>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.IllustrateDummyReporter.getCounter(String,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.IllustrateDummyReporter.getProgress()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.IllustrateDummyReporter.progress()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.IllustrateDummyReporter.setStatus(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.InputSizeReducerEstimator.estimateNumberOfReducers(Job,MapReduceOper)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.InputSizeReducerEstimator.getInputSizeFromLoader(POLoad,Job)",3,6,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.InputSizeReducerEstimator.getTotalInputFileSize(Configuration,List<POLoad>,Job)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.InputSizeReducerEstimator.getTotalInputFileSize(Configuration,List<POLoad>,Job,long)",8,7,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.JobControlCompiler(PigContext,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.JobControlCompiler(PigContext,Configuration,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.JoinDistributedCacheVisitor.JoinDistributedCacheVisitor(PhysicalPlan,PigContext,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.JoinDistributedCacheVisitor.visitFRJoin(POFRJoin)",3,4,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.JoinDistributedCacheVisitor.visitMergeCoGroup(POMergeCogroup)",3,1,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.JoinDistributedCacheVisitor.visitMergeJoin(POMergeJoin)",3,1,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.ParallelConstantVisitor.ParallelConstantVisitor(PhysicalPlan,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.ParallelConstantVisitor.visitConstant(ConstantExpression)",4,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigBagWritableComparator.PigBagWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigBigDecimalWritableComparator.PigBigDecimalWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigBigIntegerWritableComparator.PigBigIntegerWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigBooleanWritableComparator.PigBooleanWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigCharArrayWritableComparator.PigCharArrayWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigDBAWritableComparator.PigDBAWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigDateTimeWritableComparator.PigDateTimeWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigDoubleWritableComparator.PigDoubleWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigFloatWritableComparator.PigFloatWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingBagWritableComparator.PigGroupingBagWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingBigDecimalWritableComparator.PigGroupingBigDecimalWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingBigIntegerWritableComparator.PigGroupingBigIntegerWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingBooleanWritableComparator.PigGroupingBooleanWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingCharArrayWritableComparator.PigGroupingCharArrayWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingDBAWritableComparator.PigGroupingDBAWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingDateTimeWritableComparator.PigGroupingDateTimeWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingDoubleWritableComparator.PigGroupingDoubleWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingFloatWritableComparator.PigGroupingFloatWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingIntWritableComparator.PigGroupingIntWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingLongWritableComparator.PigGroupingLongWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingPartitionWritableComparator.PigGroupingPartitionWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigGroupingTupleWritableComparator.PigGroupingTupleWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigIntWritableComparator.PigIntWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigLongWritableComparator.PigLongWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigSecondaryKeyGroupComparator.PigSecondaryKeyGroupComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigSecondaryKeyGroupComparator.compare(WritableComparable,WritableComparable)",12,10,18
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigTupleWritableComparator.PigTupleWritableComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator.PigWritableComparator(Class)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.PigWritableComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.addSingleFileToDistributedCache(PigContext,Configuration,String,String)",2,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.addToDistributedCache(URI,Configuration)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.adjustNumReducers(MROperPlan,MapReduceOper,Job)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.calculateRuntimeReducers(MapReduceOper,Job)",2,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.compile(MROperPlan,String)",3,3,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.configureCompression(Configuration)",3,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.estimateNumberOfReducers(Job,MapReduceOper)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.getCacheStagingDir(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.getExistingDistCacheFilePath(Configuration,URL)",4,5,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.getFromCache(PigContext,Configuration,URL)",2,4,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.getGroupName(Collection<String>)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.getJob(MROperPlan,MapReduceOper,Configuration,PigContext)",13,97,105
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.getJobMroMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.getStores(Job)",2,1,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.moveResults(List<Job>)",1,5,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.moveResults(Path,String,FileSystem)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.okToRunLocal(Job,MapReduceOper,List<POLoad>)",4,1,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.putJarOnClassPathThroughDistributedCache(PigContext,Configuration,URL)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.removePart(Path,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.reset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.saveCounters(Job,String,boolean)",3,6,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.selectComparator(MapReduceOper,byte,Job)",4,8,35
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.setOutputFormat(Job)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.setupDistributedCache(PigContext,Configuration,Properties,String,boolean)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.setupDistributedCache(PigContext,Configuration,String[],boolean)",5,6,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.setupDistributedCacheForJoin(MapReduceOper,PigContext,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.shipToHDFS(PigContext,Configuration,URL)",3,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.toURI(Path)",1,2,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.updateMROpPlan(List<Job>)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.KeyTypeDiscoveryVisitor.KeyTypeDiscoveryVisitor(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.KeyTypeDiscoveryVisitor.PhyPlanKeyTypeVisitor.PhyPlanKeyTypeVisitor(PhysicalPlan,MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.KeyTypeDiscoveryVisitor.PhyPlanKeyTypeVisitor.visitLocalRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.KeyTypeDiscoveryVisitor.visitMROp(MapReduceOper)",7,5,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LimitAdjuster.LimitAdjuster(MROperPlan,PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LimitAdjuster.adjust()",6,15,17
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LimitAdjuster.connectMapToReduceLimitedSort(MapReduceOper,MapReduceOper)",1,1,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LimitAdjuster.splitReducerForLimit(MapReduceOper,MapReduceOper)",6,4,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LimitAdjuster.visitMROp(MapReduceOper)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LocalExecType.accepts(Properties)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LocalExecType.getExecutionEngine(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LocalExecType.getExecutionEngineClass()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LocalExecType.isLocal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LocalExecType.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.LocalExecType.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.FindKeyTypeVisitor.FindKeyTypeVisitor(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.FindKeyTypeVisitor.visitProject(POProject)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.FindStoreNameVisitor.FindStoreNameVisitor(PhysicalPlan,FileSpec,FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.FindStoreNameVisitor.visitStore(POStore)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.LastInputStreamingOptimizer.LastInputStreamingOptimizer(MROperPlan,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.LastInputStreamingOptimizer.replaceWithPOJoinPackage(PhysicalPlan,MapReduceOper,POPackage,POForEach,String)",3,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.LastInputStreamingOptimizer.visitMROp(MapReduceOper)",20,12,30
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.MRCompiler(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.MRCompiler(PhysicalPlan,PigContext)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.addToMap(PhysicalOperator)",4,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.aggregateScalarsFiles()",5,9,11
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.blocking(PhysicalOperator)",1,7,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.compile()",4,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.compile(PhysicalOperator)",8,15,17
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.connRedOper(List<MapReduceOper>,MapReduceOper)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.connectSoftLink()",5,6,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.endSingleInputPlanWithStr(FileSpec)",4,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getConcatenateJob(FileSpec,MapReduceOper,POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getIndexingJob(MapReduceOper,MapReduceOper,List<PhysicalPlan>)",2,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getLoad()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getMROp()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getMRPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getMessageCollector()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getNativeMROp(String,String[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getQuantileJob(POSort,MapReduceOper,FileSpec,FileSpec,int)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getSamplingJob(POSort,MapReduceOper,List<PhysicalPlan>,FileSpec,FileSpec,int,List<PhysicalPlan>,String,String[],String)",10,12,18
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getSkewedJoinSampleJob(POSkewedJoin,MapReduceOper,FileSpec,FileSpec,int)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getSortCols(List<PhysicalPlan>)",5,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getSortJob(POSort,MapReduceOper,FileSpec,FileSpec,int,Pair<POProject, Byte>[])",3,6,15
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getStore()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.getTempFileSpec()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.hasTooManyInputFiles(MapReduceOper,Configuration)",12,12,19
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.merge(E,List<E>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.merge(MapReduceOper[])",4,16,17
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.nonBlocking(PhysicalOperator)",4,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.processUDFs(PhysicalPlan)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.startNew(FileSpec,MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitCollectedGroup(POCollectedGroup)",6,7,11
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitCounter(POCounter)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitCross(POCross)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitDistinct(PODistinct)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitFRJoin(POFRJoin)",9,17,20
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitFilter(POFilter)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitGlobalRearrange(POGlobalRearrange)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitLimit(POLimit)",1,9,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitLoad(POLoad)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitLocalRearrange(POLocalRearrange)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitMergeCoGroup(POMergeCogroup)",9,8,16
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitMergeJoin(POMergeJoin)",15,16,25
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitNative(PONative)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitPOForEach(POForEach)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitPackage(POPackage)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitRank(PORank)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitSkewedJoin(POSkewedJoin)",4,14,17
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitSort(POSort)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitSplit(POSplit)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitStore(POStore)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitStream(POStream)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.visitUnion(POUnion)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,int,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,int,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,int,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,int,byte,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompilerException.MRCompilerException(Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecType.accepts(Properties)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecType.getExecutionEngine(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecType.getExecutionEngineClass()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecType.isLocal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecType.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecType.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecutionEngine.MRExecutionEngine(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecutionEngine.instantiatePigStats()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRExecutionEngine.instantiateScriptState()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRTaskContext.MRTaskContext(TaskInputOutputContext<?, ?, ?, ?>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRTaskContext.get()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRTaskContext.getCounter(Enum<?>)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRTaskContext.getCounter(String,String)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRTaskContext.incrCounter(Enum<?>,long)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRTaskContext.incrCounter(String,String,long)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRTaskContext.progress()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRTaskContext.setStatus(String)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRUtil.getPlainForEachOP(String,NodeIdGenerator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRUtil.simpleConnectMapToReduce(MapReduceOper,String,NodeIdGenerator)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.checkStopOnFailure(boolean)",3,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.compile(PhysicalPlan,PigContext)",1,8,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.computeWarningAggregate(Job,Map<Enum, Long>)",1,7,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.createSuccessFile(Job,POStore)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.explain(PhysicalPlan,PigContext,PrintStream,String,boolean)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.getError(FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.getStats(Job,boolean,PigContext)",3,6,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.kill()",1,4,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.killJob(String,Configuration)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.launchPig(PhysicalPlan,String,PigContext)",9,48,56
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.notifyProgress(double,double)",2,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.shouldMarkOutputDir(Job)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.MapReduceOper(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.combineSmallSplits()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getCounterOperation()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getCounterOperation(PhysicalPlan)",7,4,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getCustomPartitioner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getOperationID()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getQuantFile()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getRankOperationId()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getRequestedParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getSecondarySortOrder()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getSkewedJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getSkewedJoinPartitionFile()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getSortOrder()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getUDFsAsStr()",1,4,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getUnion()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.getUseSecondaryKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isCogroup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isCounterOperation()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isEndOfAllInputSetInMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isEndOfAllInputSetInReduce()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isGlobalSort()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isGroupBy()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isIndexer()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isLimitAfterSort()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isLimitOnly()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isMapDone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isRankOperation()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isReduceDone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isRegularJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isRowNumber()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isSampler()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isSkewedJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.isSplitter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.markCogroup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.markGroupBy()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.markIndexer()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.markRegularJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.markSampler()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.name()",1,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.needsDistinctCombiner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.noCombineSmallSplits()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setEndOfAllInputInMap(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setEndOfAllInputInReduce(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setGlobalSort(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setLimitAfterSort(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setLimitOnly(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setMapDone(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setMapDoneMultiple(boolean)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setMapDoneSingle(boolean)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setNeedsDistinctCombiner(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setQuantFile(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setReduceDone(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setSecondarySortOrder(boolean[])",2,1,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setSkewedJoin(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setSkewedJoinPartitionFile(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setSortOrder(boolean[])",2,1,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setSplitter(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.setUseSecondaryKey(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.shiftStringByTabs(String,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.useTypedComparator(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.usingTypedComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceOper.visit(MROpPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReducePOStoreImpl.MapReducePOStoreImpl(TaskInputOutputContext<?, ?, ?, ?>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReducePOStoreImpl.cleanUp()",2,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReducePOStoreImpl.createStoreFunc(POStore)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReducePOStoreImpl.incrRecordCounter(String,long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReducePOStoreImpl.tearDown()",2,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MergeJoinIndexer.MergeJoinIndexer(String,String,String,String,String,String)",3,3,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MergeJoinIndexer.getInputFormat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MergeJoinIndexer.getLoadCaster()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MergeJoinIndexer.getNext()",10,9,17
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MergeJoinIndexer.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MergeJoinIndexer.setLocation(String,Job)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.MultiQueryOptimizer(MROperPlan,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.addShiftedKeyInfoIndex(int,Packager)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.addShiftedKeyInfoIndex(int,int,MultiQueryPackager)",3,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.createDemuxPlan(boolean,boolean)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.getDemux(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.getMROper()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.getMergeList(MapReduceOper,List<MapReduceOper>)",3,8,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.getMultiQueryPackage(boolean,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.getSplit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.getStore()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.hasSameMapKeyType(List<MapReduceOper>)",5,1,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.isDiamondMROper(MapReduceOper)",1,6,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.isMapOnly(MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.isSingleLoadMapperPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.isSinglePredecessor(MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.isSplitteeMergeable(MapReduceOper)",4,5,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeAllMapOnlySplittees(List<MapReduceOper>,MapReduceOper,POSplit)",1,3,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeAllMapReduceSplittees(List<MapReduceOper>,MapReduceOper,POSplit)",5,8,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeDiamondMROper(MapReduceOper,List<MapReduceOper>)",10,14,19
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeMROperProperties(MapReduceOper,MapReduceOper)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeMapReduceSplittees(List<MapReduceOper>,MapReduceOper)",2,1,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeMapReduceSplittees(List<MapReduceOper>,MapReduceOper,POSplit)",4,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeOneCombinePlanWithIndex(PhysicalPlan,PhysicalPlan,int,int,byte)",5,9,13
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeOneMapPart(MapReduceOper,MapReduceOper)",3,3,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeOneMapPlanWithIndex(PhysicalPlan,POSplit,int,boolean)",2,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeOneReducePlanWithIndex(PhysicalPlan,PhysicalPlan,int,int,byte)",3,7,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeOnlyMapReduceSplittee(MapReduceOper,MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeOnlyMapperSplittee(MapReduceOper,MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.mergeSingleMapReduceSplittee(MapReduceOper,MapReduceOper,POSplit)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.needCombiner(List<MapReduceOper>)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.removeAndReconnect(MapReduceOper,MapReduceOper)",6,5,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.setIndexOnLRInSplit(int,POSplit,boolean)",3,5,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.visit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MultiQueryOptimizer.visitMROp(MapReduceOper)",9,22,26
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NativeMapReduceOper.NativeMapReduceOper(OperatorKey,String,String[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NativeMapReduceOper.getCommandString()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NativeMapReduceOper.getJobId()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NativeMapReduceOper.getJobNumber()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NativeMapReduceOper.getNativeMRParams()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NativeMapReduceOper.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NativeMapReduceOper.runJob()",3,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NativeMapReduceOper.visit(MROpPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopFilterRemover.NoopFilterRemover(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopFilterRemover.PhysicalRemover.PhysicalRemover(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopFilterRemover.PhysicalRemover.removeFilter(POFilter,PhysicalPlan)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopFilterRemover.PhysicalRemover.visit()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopFilterRemover.PhysicalRemover.visitFilter(POFilter)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopFilterRemover.visitMROp(MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopStoreRemover.NoopStoreRemover(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopStoreRemover.PhysicalRemover.PhysicalRemover(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopStoreRemover.PhysicalRemover.visit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopStoreRemover.PhysicalRemover.visitLoad(POLoad)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopStoreRemover.PhysicalRemover.visitSplit(POSplit)",1,7,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopStoreRemover.PhysicalRemover.visitStore(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopStoreRemover.removeStore(RemovableStore)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.NoopStoreRemover.visitMROp(MapReduceOper)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.POToChange.POToChange(PhysicalOperator,PhysicalPlan,POForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.PhyPlanSetter(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visit(PhysicalOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitAdd(Add)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitAnd(POAnd)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitBinCond(POBinCond)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitCast(POCast)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitCollectedGroup(POCollectedGroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitComparisonFunc(POUserComparisonFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitConstant(ConstantExpression)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitDemux(PODemux)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitDistinct(PODistinct)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitDivide(Divide)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitEqualTo(EqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitFRJoin(POFRJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitFilter(POFilter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitGTOrEqual(GTOrEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitGlobalRearrange(POGlobalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitGreaterThan(GreaterThanExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitIsNull(POIsNull)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitLTOrEqual(LTOrEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitLessThan(LessThanExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitLimit(POLimit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitLoad(POLoad)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitLocalRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitMapLookUp(POMapLookUp)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitMergeCoGroup(POMergeCogroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitMergeJoin(POMergeJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitMod(Mod)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitMultiply(Multiply)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitNative(PONative)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitNegative(PONegative)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitNot(PONot)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitNotEqualTo(NotEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitOr(POOr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitPOForEach(POForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitPOOptimizedForEach(POOptimizedForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitPackage(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitPartialAgg(POPartialAgg)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitPoissonSample(POPoissonSample)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitPreCombinerLocalRearrange(POPreCombinerLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitProject(POProject)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitRank(PORank)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitRegexp(PORegexp)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitReservoirSample(POReservoirSample)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitSkewedJoin(POSkewedJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitSort(POSort)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitSplit(POSplit)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitStore(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitStream(POStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitSubtract(Subtract)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitUnion(POUnion)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PhyPlanSetter.visitUserFunc(POUserFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigDecimalRawComparator.PigBigDecimalRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigDecimalRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigDecimalRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigDecimalRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigDecimalRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigIntegerRawComparator.PigBigIntegerRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigIntegerRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigIntegerRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigIntegerRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBigIntegerRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBooleanRawComparator.PigBooleanRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBooleanRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBooleanRawComparator.compare(byte[],int,int,byte[],int,int)",1,1,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBooleanRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBooleanRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBytesRawComparator.PigBytesRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBytesRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBytesRawComparator.compare(byte[],int,int,byte[],int,int)",5,6,19
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBytesRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigBytesRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine.cleanup(Context)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine.getKeyType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine.processOnePackageOutput(Context)",11,6,14
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine.reduce(PigNullableWritable,Iterable<NullableTuple>,Context)",4,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine.setKeyType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine.setup(Context)",1,5,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigCombiner.Combine.staticDataCleanup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDateTimeRawComparator.PigDateTimeRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDateTimeRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDateTimeRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDateTimeRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDateTimeRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDoubleRawComparator.PigDoubleRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDoubleRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDoubleRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDoubleRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigDoubleRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigFileInputFormat.listStatus(JobContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigFloatRawComparator.PigFloatRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigFloatRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigFloatRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigFloatRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigFloatRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.cleanup(Context)",2,6,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.getKeyType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.map(Text,Tuple,Context)",2,9,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.runPipeline(PhysicalOperator)",6,3,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.setKeyType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.setMapPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapBase.setup(Context)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.Map.collect(Context,Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.MapWithComparator.collect(Context,Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.MapWithPartitionIndex.collect(Context,Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.MapWithPartitionIndex.runPipeline(PhysicalOperator)",6,5,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.Reduce.cleanup(Context)",2,6,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.Reduce.processOnePackageOutput(Context)",6,4,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.Reduce.reduce(PigNullableWritable,Iterable<NullableTuple>,Context)",4,6,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.Reduce.runPipeline(PhysicalOperator)",6,3,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.Reduce.setReducePlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.Reduce.setup(Context)",1,6,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.ReduceWithComparator.reduce(PigNullableWritable,Iterable<NullableTuple>,Context)",6,6,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.ReduceWithComparator.setup(Context)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigGenericMapReduce.staticDataCleanup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger.PigHadoopLogger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger.getAggregate()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger.getInstance()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger.setAggregate(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger.setReporter(PigStatusReporter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigHadoopLogger.warn(Object,String,Enum)",1,6,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.createPigSplit(List<InputSplit>,int,ArrayList<OperatorKey>,int,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.getActiveSplit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.getLoadFunc(int,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.getLoadLocation(int,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.getPigSplits(List<InputSplit>,int,ArrayList<OperatorKey>,long,boolean,Configuration)",2,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.getSplits(JobContext)",3,12,18
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.mergeSplitSpecificConf(LoadFunc,PigSplit,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigInputFormat.passLoadSignature(LoadFunc,int,Configuration)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigIntRawComparator.PigIntRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigIntRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigIntRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigIntRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigIntRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigLongRawComparator.PigLongRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigLongRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigLongRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigLongRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigLongRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapOnly.Map.collect(Context,Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduceCounter.PigMapCounter.collect(Context,Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduceCounter.PigMapCounter.setup(Context)",3,4,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduceCounter.PigReduceCounter.incrementCounter(Long)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigMapReduceCounter.PigReduceCounter.setup(Context)",3,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.PigOutputCommitter(TaskAttemptContext,List<POStore>,List<POStore>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.abortJob(JobContext,State)",5,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.abortTask(TaskAttemptContext)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.cleanupJob(JobContext)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.commitJob(JobContext)",5,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.commitTask(TaskAttemptContext)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.getCommitters(TaskAttemptContext,List<POStore>)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.isRecoverySupported()",8,7,14
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.needsTaskCommit(TaskAttemptContext)",2,8,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.recoverTask(TaskAttemptContext)",5,5,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.setUpContext(JobContext,POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.setUpContext(TaskAttemptContext,POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.setupJob(JobContext)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.setupTask(TaskAttemptContext)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputCommitter.storeCleanup(POStore,Configuration)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.PigRecordWriter.PigRecordWriter(RecordWriter,StoreFuncInterface,Mode)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.PigRecordWriter.close(TaskAttemptContext)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.PigRecordWriter.write(WritableComparable,Tuple)",2,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.checkOutputSpecs(JobContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.checkOutputSpecsHelper(List<POStore>,JobContext)",3,4,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.getOutputCommitter(TaskAttemptContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.getRecordWriter(TaskAttemptContext)",2,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.getStores(Configuration,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.isConfPropEqual(String,Configuration,Configuration)",3,1,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.setLocation(JobContext,POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigOutputFormat.setupUdfEnvAndStores(JobContext)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.PigRecordReader(InputFormat<?, ?>,PigSplit,LoadFunc,TaskAttemptContext,long)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.close()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.getCurrentKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.getCurrentValue()",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.getMultiInputsCounerName(PigSplit,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.getProgress()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.initNextRecordReader()",2,4,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.initialize(InputSplit,TaskAttemptContext)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigRecordReader.nextKeyValue()",4,5,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSecondaryKeyComparator.PigSecondaryKeyComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSecondaryKeyComparator.compare(byte[],int,int,byte[],int,int)",4,3,11
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSecondaryKeyComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSecondaryKeyComparator.setConf(Configuration)",1,1,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSequenceFileInputFormat.listStatus(JobContext)",5,5,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.PigSplit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.PigSplit(InputSplit[],int,List<OperatorKey>,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.disableCounter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getInputIndex()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getLength()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getLength(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getLocations()",3,6,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getNumPaths()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getSplitIndex()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getTargetOps()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getTotalSplits()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getWrappedSplit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.getWrappedSplit(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.isMultiInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.readFields(DataInput)",2,6,11
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.readObject(DataInput)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.setConf(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.setCurrentIdx(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.setDisableCounter(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.setMultiInputs(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.setTotalSplits(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.toString()",1,3,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.write(DataOutput)",4,8,11
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigSplit.writeObject(Serializable,DataOutput)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextInputFormat.listStatus(JobContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextOutputFormat.PigLineRecordWriter.PigLineRecordWriter(DataOutputStream,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextOutputFormat.PigLineRecordWriter.write(WritableComparable,Tuple)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextOutputFormat.PigTextOutputFormat(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextOutputFormat.getRecordWriter(TaskAttemptContext)",2,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextRawComparator.PigTextRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextRawComparator.compare(Object,Object)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTextRawComparator.setConf(Configuration)",1,1,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleDefaultRawComparator.PigTupleDefaultRawComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleDefaultRawComparator.compare(Object,Object)",1,6,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleDefaultRawComparator.compare(byte[],int,int,byte[],int,int)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleDefaultRawComparator.compareTuple(Tuple,Tuple)",5,4,12
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleDefaultRawComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleDefaultRawComparator.hasComparedTupleNull()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleDefaultRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleSortComparator.PigTupleSortComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleSortComparator.compare(Object,Object)",1,7,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleSortComparator.compare(byte[],int,int,byte[],int,int)",1,3,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleSortComparator.compareTuple(Tuple,Tuple)",5,4,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleSortComparator.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigTupleSortComparator.setConf(Configuration)",2,4,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigDecimalRawBytesComparator.PigBigDecimalRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigDecimalRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigDecimalRawBytesPartitionComparator.PigBigDecimalRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigDecimalRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigDecimalRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigDecimalRawPartitionComparator.PigBigDecimalRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigDecimalRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigDecimalRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigIntegerRawBytesComparator.PigBigIntegerRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigIntegerRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigIntegerRawBytesPartitionComparator.PigBigIntegerRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigIntegerRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigIntegerRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigIntegerRawPartitionComparator.PigBigIntegerRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigIntegerRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBigIntegerRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBooleanRawBytesComparator.PigBooleanRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBooleanRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBooleanRawBytesPartitionComparator.PigBooleanRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBooleanRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBooleanRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBooleanRawPartitionComparator.PigBooleanRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBooleanRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBooleanRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBytesRawBytesComparator.PigBytesRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBytesRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBytesRawBytesPartitionComparator.PigBytesRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBytesRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBytesRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBytesRawPartitionComparator.PigBytesRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBytesRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigBytesRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDateTimeRawBytesComparator.PigDateTimeRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDateTimeRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDateTimeRawBytesPartitionComparator.PigDateTimeRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDateTimeRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDateTimeRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDateTimeRawPartitionComparator.PigDateTimeRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDateTimeRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDateTimeRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDoubleRawBytesComparator.PigDoubleRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDoubleRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDoubleRawBytesPartitionComparator.PigDoubleRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDoubleRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDoubleRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDoubleRawPartitionComparator.PigDoubleRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDoubleRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigDoubleRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigFloatRawBytesComparator.PigFloatRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigFloatRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigFloatRawBytesPartitionComparator.PigFloatRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigFloatRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigFloatRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigFloatRawPartitionComparator.PigFloatRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigFloatRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigFloatRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigIntRawBytesComparator.PigIntRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigIntRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigIntRawBytesPartitionComparator.PigIntRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigIntRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigIntRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigIntRawPartitionComparator.PigIntRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigIntRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigIntRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigLongRawBytesComparator.PigLongRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigLongRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigLongRawBytesPartitionComparator.PigLongRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigLongRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigLongRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigLongRawPartitionComparator.PigLongRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigLongRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigLongRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTextRawBytesComparator.PigTextRawBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTextRawBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTextRawBytesPartitionComparator.PigTextRawBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTextRawBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTextRawBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTextRawPartitionComparator.PigTextRawPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTextRawPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTextRawPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTupleSortBytesComparator.PigTupleSortBytesComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTupleSortBytesComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTupleSortBytesPartitionComparator.PigTupleSortBytesPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTupleSortBytesPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTupleSortBytesPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTupleSortPartitionComparator.PigTupleSortPartitionComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTupleSortPartitionComparator.compare(Object,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.PigWritableComparators.PigTupleSortPartitionComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ProgressableReporter.ProgressableReporter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ProgressableReporter.ProgressableReporter(TaskAttemptContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ProgressableReporter.progress()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ProgressableReporter.progress(String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.ProgressableReporter.setRep(TaskAttemptContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.RunJarSecurityManager.RunJarSecurityManager()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.RunJarSecurityManager.checkExit(int)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.RunJarSecurityManager.checkPermission(Permission)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.RunJarSecurityManager.getExitCode()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.RunJarSecurityManager.getExitInvoked()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.RunJarSecurityManager.retire()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SampleOptimizer.SampleOptimizer(MROperPlan,PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SampleOptimizer.scan(MapReduceOper,PhysicalOperator,String)",5,7,8
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SampleOptimizer.visit()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SampleOptimizer.visitMROp(MapReduceOper)",17,23,26
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.SecondaryKeyDiscover(PhysicalPlan,List<SortKeyInfo>,SortKeyInfo)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.getDistinctsToChange()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.getSecondarySortKeyInfo()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.getSortsToRemove()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.process()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.processDistinct(PODistinct)",4,6,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.processProject(POProject)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.processRoot(PhysicalOperator)",9,6,11
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyDiscover.processSort(POSort)",6,7,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.SecondaryKeyOptimizer(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.collectColumnChain(PhysicalPlan,ColumnChainInfo)",6,3,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.getDistinctChanged()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.getNumMRUseSecondaryKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.getNumSortRemoved()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.getSortKeyInfo(POLocalRearrange)",6,9,9
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.setSecondaryPlan(PhysicalPlan,POLocalRearrange,SortKeyInfo)",1,5,6
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizer.visitMROp(MapReduceOper)",27,38,48
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizerMR.SecondaryKeyOptimizerMR(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizerMR.getNumDistinctChanged()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizerMR.getNumSortRemoved()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizerMR.getNumUseSecondaryKey()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SecondaryKeyOptimizerMR.visitMROp(MapReduceOper)",3,3,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SortKeyInfo.getAscs()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SortKeyInfo.getColumnChains()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SortKeyInfo.insertColumnChainInfo(int,ColumnChainInfo,boolean)",2,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SortKeyInfo.moreSpecificThan(Object)",5,4,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.SortKeyInfo.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.UDFEndOfAllInputNeededVisitor.UDFEndOfAllInputNeededVisitor(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.UDFEndOfAllInputNeededVisitor.needEndOfAllInputProcessing()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.UDFEndOfAllInputNeededVisitor.visitUserFunc(POUserFunc)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.UDFFinishVisitor.UDFFinishVisitor(PhysicalPlan,PlanWalker<PhysicalOperator, PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.UDFFinishVisitor.visitUserFunc(POUserFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.CountingMap.display()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.CountingMap.getTotalCount()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.CountingMap.put(K,Integer)",2,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.DiscreteProbabilitySampleGenerator.DiscreteProbabilitySampleGenerator(float[])",1,2,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.DiscreteProbabilitySampleGenerator.getNext()",3,1,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.DiscreteProbabilitySampleGenerator.main(String[])",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.DiscreteProbabilitySampleGenerator.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.SecondaryKeyPartitioner.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.SecondaryKeyPartitioner.getPartition(PigNullableWritable,Writable,int)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.SecondaryKeyPartitioner.setConf(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.SkewedPartitioner.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.SkewedPartitioner.getPartition(PigNullableWritable,Writable,int)",3,8,12
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.SkewedPartitioner.init()",2,2,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.SkewedPartitioner.setConf(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner.convertToArray(DataBag)",12,13,13
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner.getConf()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner.getList(DataBag)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner.getPartition(PigNullableWritable,Writable,int)",2,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner.getPigNullableWritable(Tuple)",3,3,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner.getProbVec(Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner.init()",2,8,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.partitioners.WeightedRangePartitioner.setConf(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.DotMRPrinter(MROperPlan,PrintStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.DotMRPrinter(MROperPlan,PrintStream,boolean,Set<Operator>,Set<Operator>,Set<Operator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator.InnerOperator(PhysicalPlan,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator.getPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerOperator.visit(PlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerPlan.InnerPlan(PhysicalPlan,PhysicalPlan,PhysicalPlan)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerPrinter.InnerPrinter(InnerPlan,PrintStream,Set<Operator>,Set<Operator>,Set<Operator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerPrinter.getAttributes(InnerOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerPrinter.getNestedPlans(InnerOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.InnerPrinter.makeDumper(PhysicalPlan,PrintStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.getAttributes(MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.getName(MapReduceOper)",1,2,4
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.getNestedPlans(MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.makeDumper(InnerPlan,PrintStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.DotMRPrinter.setVerbose(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.EndOfAllInputChecker(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.isEndOfAllInputPresent()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.visitCollectedGroup(POCollectedGroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.visitMergeCoGroup(POMergeCogroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.visitMergeJoin(POMergeJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.visitPOForEach(POForEach)",1,1,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.visitPartialAgg(POPartialAgg)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.visitPoissonSample(POPoissonSample)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.visitReservoirSample(POReservoirSample)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputChecker.visitStream(POStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.EndOfAllInputSetter(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.EndOfAllInputSetter.visitMROp(MapReduceOper)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRIntermediateDataVisitor.MRIntermediateDataVisitor(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRIntermediateDataVisitor.StoreFinder.StoreFinder(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRIntermediateDataVisitor.StoreFinder.visitStore(POStore)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRIntermediateDataVisitor.getIntermediate()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRIntermediateDataVisitor.visitMROp(MapReduceOper)",1,7,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor.MROpPlanVisitor(MROperPlan,PlanWalker<MapReduceOper, MROperPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROpPlanVisitor.visitMROp(MapReduceOper)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan.MROperPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MROperPlan.toString()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRPrinter.MRPrinter(PrintStream,MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRPrinter.setVerbose(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.MRPrinter.visitMROp(MapReduceOper)",2,10,10
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.LoRearrangeDiscoverer.LoRearrangeDiscoverer(PhysicalPlan,POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.LoRearrangeDiscoverer.getLoRearrangeFound()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.LoRearrangeDiscoverer.visitLocalRearrange(POLocalRearrange)",4,4,5
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.POPackageAnnotator(MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.PackageDiscoverer.PackageDiscoverer(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.PackageDiscoverer.getPkg()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.PackageDiscoverer.visitPackage(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.handlePackage(MapReduceOper,POPackage)",5,5,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.patchPackage(PhysicalPlan,POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.POPackageAnnotator.visitMROp(MapReduceOper)",5,6,7
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.ScalarPhyFinder.ScalarPhyFinder(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.ScalarPhyFinder.getScalars()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.ScalarPhyFinder.visitUserFunc(POUserFunc)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder.UDFFinder()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder.UDFFinder(PhysicalPlan,PlanWalker<PhysicalOperator, PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder.getUDFs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder.setPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder.visitCast(POCast)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder.visitComparisonFunc(POUserComparisonFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder.visitSort(POSort)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.UDFFinder.visitUserFunc(POUserFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.XMLMRPrinter.XMLMRPrinter(PrintStream,MROperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.XMLMRPrinter.closePlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.plans.XMLMRPrinter.visitMROp(MapReduceOper)",2,8,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,int,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,int,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,int,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,int,byte,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogicalToPhysicalTranslatorException.LogicalToPhysicalTranslatorException(Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.POPrinter.POPrinter(PrintStream,PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.OriginalLocation.OriginalLocation(String,int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.OriginalLocation.getAlias()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.OriginalLocation.getLine()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.OriginalLocation.getOffset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.OriginalLocation.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.PhysicalOperator(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.PhysicalOperator(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.PhysicalOperator(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.PhysicalOperator(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.PhysicalOperator(PhysicalOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.addOriginalLocation(String,List<OriginalLocation>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.addOriginalLocation(String,SourceLocation)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.attachInput(Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.cloneHelper(PhysicalOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.copyAliasFrom(PhysicalOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.detachInput()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getAlias()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getAliasString()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getIllustrator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getLogger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNext(byte)",15,16,16
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextBoolean()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextDataBag()",4,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextDataByteArray()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextDateTime()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getNextTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getOriginalLocations()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getPigLogger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getReporter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getRequestedParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.getResultType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.isAccumStarted()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.isAccumulative()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.isBlocking()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.isInputAttached()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.processInput()",3,6,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.reset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setAccumEnd()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setAccumStart()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setAccumulative()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setIllustrator(Illustrator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setInputs(List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setParentPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setPigLogger(PigLogger)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setReporter(PigProgressable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setRequestedParallelism(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.setResultType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.staticDataCleanup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result.Result()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result.Result(byte,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.Result.toString()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.Add(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.Add(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.add(Number,Number,byte)",8,8,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.genericGetNext(byte)",4,1,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator.BinaryComparisonOperator(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator.BinaryComparisonOperator(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator.cloneHelper(BinaryComparisonOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator.getOperandType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator.illustratorMarkup(Object,Object,int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryComparisonOperator.setOperandType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.BinaryExpressionOperator(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.BinaryExpressionOperator(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.cloneHelper(BinaryExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.getChildExpressions()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.getLhs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.getRhs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.setLhs(ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.setRhs(ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.BinaryExpressionOperator.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.ConstantExpression(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.ConstantExpression(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.genericGetNext(byte)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getChildExpressions()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextBoolean()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextDataBag()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextDataByteArray()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextDateTime()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getNextTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.getValue()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.name()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.setValue(Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.Divide(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.Divide(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.divide(Number,Number,byte)",8,8,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.equalsZero(Number,byte)",8,8,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.genericGetNext(byte)",4,3,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr.EqualToExpr(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr.EqualToExpr(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr.doComparison(Result,Result)",6,3,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr.getNextBoolean()",4,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.ExpressionOperator(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.ExpressionOperator(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.accumChild(List<ExpressionOperator>,byte)",6,7,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.containUDF()",5,3,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.getNextDataBag()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.setIllustrator(Illustrator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr.GTOrEqualToExpr(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr.GTOrEqualToExpr(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr.doComparison(Result,Result)",4,1,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr.getNextBoolean()",4,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr.GreaterThanExpr(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr.GreaterThanExpr(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr.doComparison(Result,Result)",4,1,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr.getNextBoolean()",4,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr.LTOrEqualToExpr(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr.LTOrEqualToExpr(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr.doComparison(Result,Result)",4,1,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr.getNextBoolean()",4,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr.LessThanExpr(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr.LessThanExpr(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr.doComparison(Result,Result)",4,1,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr.getNextBoolean()",4,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.Mod(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.Mod(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.genericGetNext(byte)",4,1,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.mod(Number,Number,byte)",5,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.Multiply(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.Multiply(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.genericGetNext(byte)",4,1,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.multiply(Number,Number,byte)",8,8,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr.NotEqualToExpr(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr.NotEqualToExpr(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr.doComparison(Result,Result)",6,3,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr.getNextBoolean()",4,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd.POAnd(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd.POAnd(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd.getNextBoolean()",8,6,13
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POAnd.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.POBinCond(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.POBinCond(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.POBinCond(OperatorKey,int,ExpressionOperator,ExpressionOperator,ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.attachInput(Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.genericGetNext(byte)",4,3,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getChildExpressions()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getCond()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getLhs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextBoolean()",3,2,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextDataBag()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextDataByteArray()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextDateTime()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getNextTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.getRhs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.illustratorMarkup(Object,Object,int)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.setCond(ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.setLhs(ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.setRhs(ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.POCast(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.POCast(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.clone()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.convertWithSchema(Object,ResourceFieldSchema)",35,40,147
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.error()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getChildExpressions()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getFuncSpec()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextBigDecimal()",13,21,34
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextBigInteger()",13,22,34
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextBoolean()",13,24,33
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextDataBag()",8,11,15
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextDataByteArray()",4,4,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextDateTime()",13,24,33
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextDouble()",14,25,37
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextFloat()",14,25,37
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextInteger()",14,27,37
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextLong()",14,27,37
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextMap()",8,11,15
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextString()",14,27,37
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.getNextTuple()",8,11,15
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.instantiateFunc()",5,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.name()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.readObject(ObjectInputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.setFieldSchema(ResourceFieldSchema)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.setFuncSpec(FuncSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POCast.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull.POIsNull(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull.POIsNull(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull.POIsNull(OperatorKey,int,ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull.getNextBoolean()",2,3,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.POMapLookUp(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.POMapLookUp(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.POMapLookUp(OperatorKey,int,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getChildExpressions()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getLookUpKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNext()",1,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextBoolean()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextDataBag()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextDataByteArray()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextDateTime()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.getNextTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.processInput()",3,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.setLookUpKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POMapLookUp.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.PONegative(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.PONegative(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.PONegative(OperatorKey,int,ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.getNextBigDecimal()",1,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.getNextBigInteger()",1,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.getNextDouble()",1,1,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.getNextFloat()",1,1,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.getNextInteger()",1,1,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.getNextLong()",1,1,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONegative.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot.PONot(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot.PONot(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot.getNextBoolean()",3,3,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PONot.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr.POOr(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr.POOr(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr.getNextBoolean()",8,6,13
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POOr.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.POProject(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.POProject(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.POProject(OperatorKey,int,ArrayList<Integer>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.POProject(OperatorKey,int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.addColumn(ArrayList<Object>,Tuple,int)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.attachInput(Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.clone()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.consumeInputBag(Result)",5,12,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getChildExpressions()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getColumn()",2,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getColumns()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNext()",3,7,9
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextBoolean()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextDataBag()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextDataByteArray()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextDateTime()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getNextTuple()",7,14,18
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getRangeTuple(Tuple)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.getStartCol()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.illustratorMarkup(Object,Object,int)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.isOverloaded()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.isProjectToEnd()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.isRangeInvalid(int)",2,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.isStar()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.name()",1,1,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.processInputBag()",4,6,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setColumn(int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setColumns(ArrayList<Integer>)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setOverloaded(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setProjectToEnd(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setResultSingleTupleBag(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.setStar(boolean)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POProject.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp.PORegexp(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp.PORegexp(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp.getNextBoolean()",4,1,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp.setConstExpr(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp.setImplementation(RegexImpl)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORegexp.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.PORelationToExprProject(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.PORelationToExprProject(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.PORelationToExprProject(OperatorKey,int,ArrayList<Integer>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.PORelationToExprProject(OperatorKey,int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.clone()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.getNextDataBag()",4,2,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.name()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.reset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.PORelationToExprProject.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.POUserComparisonFunc(OperatorKey,int,List,FuncSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.POUserComparisonFunc(OperatorKey,int,List,FuncSpec,ComparisonFunc)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.attachInput(Tuple,Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.clone()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getChildExpressions()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getComparator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getFuncSpec()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNext()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextBoolean()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextDataBag()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextDataByteArray()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextDateTime()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextInteger()",1,2,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.getNextTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.illustratorMarkup(Object,Object,int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.instantiateFunc()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.readObject(ObjectInputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserComparisonFunc.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.POUserFunc(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.POUserFunc(OperatorKey,int,List<PhysicalOperator>,FuncSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.POUserFunc(OperatorKey,int,List<PhysicalOperator>,FuncSpec,EvalFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.combinable()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.earlyTerminate()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.finish()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getCacheFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getChildExpressions()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getFinal()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getFunc()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getFuncSpec()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getInitial()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getIntermed()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNext()",1,21,23
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextBoolean()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextDataBag()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextDataByteArray()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextDateTime()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getNextTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getReferencedOperator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getReturnType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.getShipFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.hasBeenTerminated()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.instantiateFunc(FuncSpec)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.isAsynchronous()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.isEarlyTerminating()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.needEndOfAllInputProcessing()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.outputSchema(Schema)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.processInput()",7,18,20
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.readObject(ObjectInputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setAccumStart()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setAlgebraicFunction(byte)",2,2,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setCacheFiles(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setFuncInputSchema(String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setFuncSpec(FuncSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setIsEarlyTerminating()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setReferencedOperator(PhysicalOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setResultType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setShipFiles(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.setSignature(String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.Subtract(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.Subtract(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.genericGetNext(byte)",4,1,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.getNextBigDecimal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.getNextBigInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.getNextDouble()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.getNextFloat()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.getNextInteger()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.getNextLong()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.subtract(Number,Number,byte)",8,8,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator.UnaryComparisonOperator(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator.UnaryComparisonOperator(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator.getOperandType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator.illustratorMarkup(Object,Object,int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryComparisonOperator.setOperandType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator.UnaryExpressionOperator(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator.UnaryExpressionOperator(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator.cloneHelper(UnaryExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator.getChildExpressions()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator.getExpr()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator.setExpr(ExpressionOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator.setInputAsExpr(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.UnaryExpressionOperator.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.CompiledAutomaton.CompiledAutomaton(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.CompiledAutomaton.match(String,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.CompiledRegex.CompiledRegex(Pattern)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.CompiledRegex.match(String,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.NonConstantRegex.match(String,String)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.RegexInit.RegexInit(PORegexp)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.RegexInit.compile(String)",2,3,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.RegexInit.determineBestRegexMethod(String)",17,16,53
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.RegexInit.match(String,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.RegexInit.precedingEscapes(String,int)",5,3,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.regex.RegexInit.setConstExpr(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter.DotPOPrinter(PhysicalPlan,PrintStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter.DotPOPrinter(PhysicalPlan,PrintStream,boolean,Set<Operator>,Set<Operator>,Set<Operator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter.getAttributes(PhysicalOperator)",2,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter.getMultiOutputNestedPlans(PhysicalOperator)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter.getName(PhysicalOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter.getNestedPlans(PhysicalOperator)",1,12,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.DotPOPrinter.makeDumper(PhysicalPlan,PrintStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.PatternNode(OperatorPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.accept(PlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.getClassName()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.getMatch()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.isEqual(Operator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.isLeafNode()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.isSourceNode()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.setClassName(Class<?>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.setLeafNode(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.setMatch(Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.setSourceNode(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.toString()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternPlan.create(Class<?>[])",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternPlan.match(List<Operator>,List<Operator<?>>)",11,7,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternPlan.match(OperatorPlan<? extends Operator<?>>)",5,3,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternPlan.match(PatternNode,Operator)",9,8,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternPlan.reset()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternPlan.resetNewlyMatchedPtNodes(int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.PhyPlanVisitor(PhysicalPlan,PlanWalker<PhysicalOperator, PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visit(PhysicalOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitAdd(Add)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitAnd(POAnd)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitBinCond(POBinCond)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitCast(POCast)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitCollectedGroup(POCollectedGroup)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitComparisonFunc(POUserComparisonFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitConstant(ConstantExpression)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitCounter(POCounter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitCross(POCross)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitDemux(PODemux)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitDistinct(PODistinct)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitDivide(Divide)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitEqualTo(EqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitFRJoin(POFRJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitFilter(POFilter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitGTOrEqual(GTOrEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitGlobalRearrange(POGlobalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitGreaterThan(GreaterThanExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitIsNull(POIsNull)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitLTOrEqual(LTOrEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitLessThan(LessThanExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitLimit(POLimit)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitLoad(POLoad)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitLocalRearrange(POLocalRearrange)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitMapLookUp(POMapLookUp)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitMergeCoGroup(POMergeCogroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitMergeJoin(POMergeJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitMod(Mod)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitMultiply(Multiply)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitNative(PONative)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitNegative(PONegative)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitNot(PONot)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitNotEqualTo(NotEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitOr(POOr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitPOForEach(POForEach)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitPOOptimizedForEach(POOptimizedForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitPackage(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitPartialAgg(POPartialAgg)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitPartitionRearrange(POPartitionRearrange)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitPoissonSample(POPoissonSample)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitPreCombinerLocalRearrange(POPreCombinerLocalRearrange)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitProject(POProject)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitRank(PORank)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitRegexp(PORegexp)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitReservoirSample(POReservoirSample)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitSkewedJoin(POSkewedJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitSort(POSort)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitSplit(POSplit)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitStore(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitStream(POStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitSubtract(Subtract)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitUnion(POUnion)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhyPlanVisitor.visitUserFunc(POUserFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.PhysicalPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.attachInput(Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.clone()",10,18,19
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.connect(PhysicalOperator,PhysicalOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.detachInput()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.explain(OutputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.explain(OutputStream,boolean)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.explain(PrintStream,String,boolean)",2,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.isEmpty()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.remove(PhysicalOperator)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.replace(PhysicalOperator,PhysicalOperator)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.resetOpMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.setOpMap(MultiMap<PhysicalOperator, PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PhysicalPlan.toString()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.PlanPrinter(P)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.PlanPrinter(P,PrintStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.breadthFirst()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.breadthFirst(Collection<O>,Set<O>)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.depthFirst(O)",2,26,26
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.depthFirstPP()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.dispTabs()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.planString(List<PhysicalPlan>)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.planString(PhysicalPlan)",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.print(OutputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.setVerbose(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.shiftStringByTabs(String,int)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.visit()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.visitFilter(POFilter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.visitGlobalRearrange(POGlobalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.visitLoad(POLoad)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.visitLocalRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.visitPackage(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.visitStartMap(POUnion)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PlanPrinter.visitStore(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.UdfCacheShipFilesVisitor.UdfCacheShipFilesVisitor(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.UdfCacheShipFilesVisitor.getCacheFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.UdfCacheShipFilesVisitor.getShipFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.UdfCacheShipFilesVisitor.visitCast(POCast)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.UdfCacheShipFilesVisitor.visitLoad(POLoad)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.UdfCacheShipFilesVisitor.visitStore(POStore)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.UdfCacheShipFilesVisitor.visitUserFunc(POUserFunc)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.XMLPhysicalPlanPrinter(PhysicalPlan,Document,Element)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.createAlias(PhysicalOperator)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.createPONode(PhysicalOperator)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.createPackagerNode(Packager)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.depthFirst(PhysicalOperator,Element)",2,17,18
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.depthFirstPP(Element)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.print(OutputStream)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.visit()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.visitPlan(List<PhysicalPlan>,Element)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.XMLPhysicalPlanPrinter.visitPlan(PhysicalPlan,Element)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.CombinerPackager.CombinerPackager(Packager,boolean[])",1,2,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.CombinerPackager.createDataBag(int)",1,4,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.CombinerPackager.getNext()",2,7,9
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.CombinerPackager.getValueTuple(PigNullableWritable,NullableTuple,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.CombinerPackager.setKeyInfo(Map<Integer, Pair<Boolean, Map<Integer, Integer>>>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.JoinPackager(Packager,POForEach)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.attachInput(Object,DataBag[],boolean[])",2,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.getForEach()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.getInputPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.getNext()",14,14,20
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.setChunkSize(long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.setIllustrator(Illustrator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.setInputPlans(List<PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.JoinPackager.setToBeFlattened(List<Boolean>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.LitePackager.clone()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.LitePackager.getInner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.LitePackager.getNext()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.LitePackager.getValueTuple(PigNullableWritable,NullableTuple,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.LitePackager.illustratorMarkup(Object,Object,int)",2,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.LitePackager.isDistinct()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.LitePackager.setDistinct(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.LitePackager.setInner(boolean[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.addIsKeyWrappedList(List<Boolean>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.addPackager(Packager)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.addPackager(Packager,byte)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.getIsKeyWrappedList()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.getNext()",3,8,9
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.getNumInputs(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.getPackagers()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.getValueTuple(PigNullableWritable,NullableTuple,int)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.isInCombiner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.isSameMapKeyType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.setInCombiner(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.MultiQueryPackager.setSameMapKeyType(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.POCollectedGroup(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.POCollectedGroup(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.POCollectedGroup(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.POCollectedGroup(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.attachInput(Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.constructOutput(List<Result>,Tuple)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.getKeyType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.getNextTuple()",11,15,21
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.getPlans()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.getStreamCloseResult()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.setIllustratorEquivalenceClasses(Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.setKeyType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.setPlans(List<PhysicalPlan>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.POCounter(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.POCounter(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.POCounter(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.POCounter(OperatorKey,int,List,List<PhysicalPlan>,List<Boolean>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.POCounter(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.POCounter(POCounter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.addCounterValue(Result)",1,7,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.addToLocalCounter(Long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.getAscendingColumns()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.getCounterPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.getLocalCounter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.getNextTuple()",4,2,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.getOperationID()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.getTaskId()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.illustratorMarkup(Object,Object,int)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.incrementLocalCounter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.incrementReduceCounter(Long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.isDenseRank()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.isRowNumber()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.resetLocalCounter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.setAscendingColumns(List<Boolean>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.setCounterPlans(List<PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.setIsDenseRank(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.setIsRowNumber(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.setLocalCounter(Long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.setOperationID(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.setTaskId(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCounter.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.POCross(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.POCross(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.POCross(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.POCross(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.accumulateData()",5,4,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.clearMemory()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.createTuple(Tuple[])",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.getNextTuple()",11,12,14
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.illustratorMarkup(Object,Object,int)",2,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.loadLastBag()",3,2,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCross.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.PODemux(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.PODemux(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.PODemux(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.PODemux(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.addPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.attachInputWithIndex(Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.getNextTuple()",4,4,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.getPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.getStreamCloseResult()",12,8,15
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.isInCombiner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.runPipeline(PhysicalOperator)",4,2,9
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.setInCombiner(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODemux.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.PODistinct(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.PODistinct(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.PODistinct(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.PODistinct(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.getCustomPartitioner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.getNextTuple()",5,11,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.illustratorMarkup(Object,Object,int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.isBlocking()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.reset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.setCustomPartitioner(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PODistinct.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.POFRJoin(OperatorKey,int,List<PhysicalOperator>,List<List<PhysicalPlan>>,List<List<Byte>>,FileSpec[],int,boolean,Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.POFRJoin(OperatorKey,int,List<PhysicalOperator>,List<List<PhysicalPlan>>,List<List<Byte>>,FileSpec[],int,boolean,Tuple,Schema[],Schema[])",1,1,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.POFRJoin(POFRJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.TupleToMapKey.TupleToMapKey(int,SchemaTupleFactory)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.TupleToMapKey.get(Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.TupleToMapKey.put(Tuple,TuplesToSchemaTupleList)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.createJoinPlans(OperatorKey)",2,3,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.genKey(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.getFragment()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.getJoinPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.getLRs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.getNextTuple()",15,10,19
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.getReplFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.getValueTuple(POLocalRearrange,Tuple)",1,7,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.isKeyNull(Object)",5,3,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.readObject(ObjectInputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.setFragment(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.setReplFiles(FileSpec[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.setUpHashMap()",5,8,10
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFRJoin.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.POFilter(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.POFilter(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.POFilter(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.POFilter(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.getNextTuple()",7,3,9
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.getPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.illustratorMarkup(Object,Object,int)",1,5,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.setPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POFilter.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.POForEach(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.POForEach(OperatorKey,List)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.POForEach(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.POForEach(OperatorKey,int,List<PhysicalPlan>,List<Boolean>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.POForEach(OperatorKey,int,List<PhysicalPlan>,List<Boolean>,Schema)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.ResetFinder.ResetFinder(PhysicalPlan,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.ResetFinder.visitDistinct(PODistinct)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.ResetFinder.visitLimit(POLimit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.ResetFinder.visitProject(POProject)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.ResetFinder.visitSort(POSort)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.addInputPlan(PhysicalPlan,boolean)",1,1,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.attachInputToPlans(Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.clone()",1,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.createTuple(Object[])",2,7,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.earlyTerminate()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.getFlatStr()",2,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.getInputPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.getLeaves()",1,6,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.getNextTuple()",19,17,28
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.getOpsToBeReset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.getToBeFlattened()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.illustratorMarkup(Object,Object,int)",2,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.illustratorMarkup2(Object[],Object)",4,6,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.inProcessing()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.isEarlyTerminated()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.isMapSideOnly()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.needEndOfAllInputProcessing()",3,2,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.processPlan()",18,23,39
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.reInitialize()",3,5,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.setAccumEnd()",1,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.setAccumStart()",1,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.setAccumulative()",1,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.setInputPlans(List<PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.setMapSideOnly(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.setOpsToBeReset(List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.setToBeFlattened(List<Boolean>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.setUpFlattens(List<Boolean>)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.POGlobalRearrange(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.POGlobalRearrange(OperatorKey,List)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.POGlobalRearrange(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.POGlobalRearrange(OperatorKey,int,List)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.getCustomPartitioner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.isBlocking()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.isCross()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.setCross(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.setCustomPartitioner(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POGlobalRearrange.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.POLimit(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.POLimit(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.POLimit(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.POLimit(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.clone()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.getLimit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.getLimitPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.getNextTuple()",9,7,17
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.illustratorMarkup(Object,Object,int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.reset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.setLimit(long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.setLimitPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLimit.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.POLoad(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.POLoad(OperatorKey,FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.POLoad(OperatorKey,LoadFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.POLoad(OperatorKey,int,FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getCacheFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getLFile()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getLimit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getLoadFunc()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getNextTuple()",2,5,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getPc()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getShipFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.getSignature()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.illustratorMarkup(Object,Object,int)",7,6,9
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.isTmpLoad()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.name()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.setCacheFiles(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.setIsTmpLoad(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.setLFile(FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.setLimit(long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.setPc(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.setShipFiles(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.setSignature(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.setUp()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.tearDown()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLoad.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.POLocalRearrange(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.POLocalRearrange(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.POLocalRearrange(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.POLocalRearrange(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.POLocalRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.attachInput(Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.clonePlans(List<PhysicalPlan>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.constructLROutput(List<Result>,List<Result>,Tuple)",4,13,14
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.deepCopyTo(POLocalRearrange)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.detachPlans(List<PhysicalPlan>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.getIndex()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.getKeyFromResult(List<Result>,byte)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.getKeyType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.getMainKeyType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.getNextTuple()",11,11,20
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.getPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.getProjectedColsMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.getSecondaryProjectedColsMap()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.illustratorMarkup(Object,Object,int)",3,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.isCross()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.isDistinct()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.isKeyCompound()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.isKeyTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.isProjectStar()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.isSecondaryKeyTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.isSecondaryProjectStar()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setCross(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setDistinct(boolean)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setIndex(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setIndex(int,boolean)",2,1,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setKeyType(byte)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setMultiQueryIndex(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setPlans(List<PhysicalPlan>)",7,9,13
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setPlansFromCombiner(List<PhysicalPlan>)",5,5,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setSecondaryPlans(List<PhysicalPlan>)",7,10,14
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setStripKeyFromValue(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.setUseSecondaryKey(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.POMergeCogroup(OperatorKey,List<PhysicalOperator>,POLocalRearrange[],int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.applyLRon(Tuple,int)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.getFirstKeyOfNextSplit(int,List<Pair<Integer, Tuple>>)",4,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.getIdxFuncSpec()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.getIndexFileName()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.getLRInnerPlansOf(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.getNextTuple()",15,20,34
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.getOutputTuple()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.needToBreak(Tuple,Tuple)",4,2,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.printHeap()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.readIndex()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.readObject(ObjectInputStream)",4,3,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.setEndOfRecordMark(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.setIdxFuncSpec(FuncSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.setIndexFileName(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.setLoaderSignatures(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.setSideFileSpecs(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.setSideLoadFuncs(List<FuncSpec>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.setup(Tuple)",8,9,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeCogroup.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.POMergeJoin(OperatorKey,int,List<PhysicalOperator>,MultiMap<PhysicalOperator, PhysicalPlan>,List<List<Byte>>,JOINTYPE,Schema,Schema,Schema)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.TuplesToSchemaTupleList.TuplesToSchemaTupleList(int,TupleMaker<?>)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.TuplesToSchemaTupleList.add(Tuple)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.TuplesToSchemaTupleList.convert(Tuple,SchemaTupleFactory)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.TuplesToSchemaTupleList.get(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.TuplesToSchemaTupleList.getList()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.TuplesToSchemaTupleList.size()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.createJoinPlans(MultiMap<PhysicalOperator, PhysicalPlan>,List<List<Byte>>)",2,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.extractKeysFromTuple(Result,int)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.genKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.getIndexFile()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.getInnerPlansOf(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.getJoinType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.getNextRightInp()",6,6,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.getNextRightInp(Object)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.getNextTuple()",26,28,39
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.getSignature()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.name()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.newLeftTupleArray()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.prepareTupleFactories()",1,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.readObject(ObjectInputStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.seekInRightStream(Object)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.setIndexFile(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.setRightInputFileName(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.setRightLoaderFuncSpec(FuncSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.setSignature(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.setupRightPipeline(PhysicalPlan)",3,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.throwProcessingException(boolean,Exception)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.PONative(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.checkQuote(int,String,char)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.getNativeMRjar()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.getParams()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.setNativeMRjar(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.setParams(String[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.unquotePropertyParams()",4,6,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PONative.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.POOptimizedForEach(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.POOptimizedForEach(OperatorKey,List)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.POOptimizedForEach(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.POOptimizedForEach(OperatorKey,int,List)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.POOptimizedForEach(OperatorKey,int,List<PhysicalPlan>,List<Boolean>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.clone()",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.getNextTuple()",8,6,9
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POOptimizedForEach.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackage(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackage(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackage(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackage(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackage(OperatorKey,int,List<PhysicalOperator>,Packager)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackage(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackageTupleBuffer.POPackageTupleBuffer(int,Object,Iterator<NullableTuple>)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackageTupleBuffer.clear()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackageTupleBuffer.getTuples(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackageTupleBuffer.hasNextBatch()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackageTupleBuffer.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.POPackageTupleBuffer.nextBatch()",3,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.PeekedBag.PeekedBag(Packager,NullableTuple,Iterator<NullableTuple>,PigNullableWritable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.PeekedBag.iterator()",3,5,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.attachInput(PigNullableWritable,Iterator<NullableTuple>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.detachInput()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.getNextTuple()",5,11,17
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.getNumInps()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.getPkgr()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.numberOfEquivalenceClasses()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.setIllustrator(Illustrator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.setNumInps(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.setPkgr(Packager)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.POPartialAgg(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.addKeyValToMap(Map<Object, List<Tuple>>,Object,Tuple)",1,5,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.aggregate(Map<Object, List<Tuple>>,Map<Object, List<Tuple>>,int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.aggregateBothLevels(boolean,boolean)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.aggregateFirstLevel()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.aggregateRawRow(Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.aggregateSecondLevel()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.checkSizeReduction()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.createValueTuple(Object,List<Tuple>)",1,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.disableMapAgg()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.estimateMemThresholds()",1,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.getAggResultTuple(Object)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.getKeyPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.getMemorySize()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.getNextTuple()",10,17,24
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.getOutput(Object,Tuple)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.getResult(ExpressionOperator)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.getValuePlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.init()",1,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.mapAggDisabled()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.setKeyPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.setValuePlans(List<PhysicalPlan>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.shouldAggregateFirstLevel()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.shouldAggregateSecondLevel()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.shouldSpill()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.spill()",2,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.spillResult()",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.startSpill(boolean)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartialAgg.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.POPartitionRearrange(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.POPartitionRearrange(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.POPartitionRearrange(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.POPartitionRearrange(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.constructPROutput(List<Result>,Tuple)",1,2,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.getNextTuple()",7,5,10
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.getPigContext()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.init()",2,1,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.setPigContext(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.POPoissonSample(OperatorKey,int,int,float,long)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.createNumRowTuple(Tuple)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.getNextTuple()",19,11,19
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.updateSkipInterval(Tuple)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPoissonSample.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.POPreCombinerLocalRearrange(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.POPreCombinerLocalRearrange(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.POPreCombinerLocalRearrange(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.POPreCombinerLocalRearrange(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.attachInput(Tuple)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.constructLROutput(List<Result>,Tuple)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.getKeyType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.getNextTuple()",7,5,10
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.getPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.setKeyType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.setPlans(List<PhysicalPlan>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.PORank(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.PORank(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.PORank(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.PORank(OperatorKey,int,List,List<PhysicalPlan>,List<Boolean>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.PORank(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.PORank(PORank)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.addRank(Result)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.getAscendingCols()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.getNextTuple()",4,2,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.getOperationID()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.getRankCounterOffset(Integer)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.getRankPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.illustratorMarkup(Object,Object,int)",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.setAscendingCols(List<Boolean>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.setOperationID(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.setRankPlans(List<PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.PORank.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.POReservoirSample(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.POReservoirSample(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.POReservoirSample(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.POReservoirSample(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.POReservoirSample(OperatorKey,int,List<PhysicalOperator>,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.createNumRowTuple(Tuple)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.getNextTuple()",11,5,16
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.getSample()",4,3,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.retrieveSample()",3,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POReservoirSample.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.POSkewedJoin(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.POSkewedJoin(OperatorKey,List<PhysicalOperator>,boolean[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.POSkewedJoin(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.POSkewedJoin(OperatorKey,int,List<PhysicalOperator>,boolean[])",1,1,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.addSchema(Schema)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.getInnerFlags()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.getJoinPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.getSchema(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.setJoinPlans(MultiMap<PhysicalOperator, PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSkewedJoin.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.POSort(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.POSort(OperatorKey,List)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.POSort(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.POSort(OperatorKey,int,List)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.POSort(OperatorKey,int,List,List<PhysicalPlan>,List<Boolean>,POUserComparisonFunc)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.SortComparator.compare(Tuple,Tuple)",7,6,10
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.SortComparator.getResult(PhysicalPlan,byte)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.UDFSortComparator.compare(Tuple,Tuple)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.clone()",1,4,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.getLimit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.getMAscCols()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.getMSortFunc()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.getNextTuple()",5,11,12
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.getSortPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.illustratorMarkup(Object,Object,int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.isBlocking()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.isLimited()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.name()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.reset()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.setLimit(long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.setMSortFunc(POUserComparisonFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.setSortPlans(List<PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSortedDistinct.POSortedDistinct(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSortedDistinct.POSortedDistinct(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSortedDistinct.POSortedDistinct(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSortedDistinct.POSortedDistinct(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSortedDistinct.getNextTuple()",6,6,9
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSortedDistinct.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.POSplit(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.POSplit(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.POSplit(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.POSplit(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.addPlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.clone()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.getNextTuple()",5,5,8
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.getPlans()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.getSplitStore()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.getStreamCloseResult()",10,7,13
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.processPlan()",1,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.removePlan(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.runPipeline(PhysicalOperator)",6,2,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.setSplitStore(FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSplit.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.POStore(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.POStore(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.POStore(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.POStore(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.cleanUp()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.disableCounter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getCacheFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getIndex()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getInputSpec()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getNextTuple()",2,5,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getSFile()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getSchema()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getShipFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getSignature()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getSortInfo()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.getStoreFunc()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.illustratorMarkup(Object,Object,int)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.isMultiStore()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.isTmpStore()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.name()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setCacheFiles(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setDisableCounter(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setIndex(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setInputSpec(FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setIsTmpStore(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setMultiStore(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setSFile(FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setSchema(Schema)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setShipFiles(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setSignature(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setSortInfo(SortInfo)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setStoreFunc(StoreFuncInterface)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setStoreImpl(POStoreImpl)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.setUp()",2,4,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.tearDown()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStore.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStoreImpl.cleanUp()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStoreImpl.tearDown()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.POStream(OperatorKey,ExecutableManager,StreamingCommand,Properties)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.finish()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.getBinaryInputQueue()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.getBinaryOutputQueue()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.getCommand()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.getInitialized()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.getNextHelper(Tuple)",6,8,11
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.getNextTuple()",4,11,15
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.getShipCacheProperties()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.illustratorMarkup(Object,Object,int)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.isFetchable()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.parseShipCacheSpecs(List<String>,Properties,String)",2,6,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.setFetchable(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.setInitialized(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POStream.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.POUnion(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.POUnion(OperatorKey,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.POUnion(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.POUnion(OperatorKey,int,List<PhysicalOperator>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.clearDone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.getNextTuple()",9,10,15
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.illustratorMarkup(Object,Object,int)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.setInputs(List<PhysicalOperator>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POUnion.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.attachInput(Object,DataBag[],boolean[])",1,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.checkBagType()",1,4,5
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.clone()",1,2,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.detachInput()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getBag()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getIllustrator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getInner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getKey(PigNullableWritable)",2,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getKeyAsTuple()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getKeyInfo()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getKeyTuple()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getKeyType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getNext()",6,5,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getNumInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getNumInputs(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getPackageType()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.getValueTuple(PigNullableWritable,NullableTuple,int)",1,6,7
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.illustratorMarkup(Object,Object,int)",3,13,16
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.illustratorMarkup2(Object,Object)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.isDistinct()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.numberOfEquivalenceClasses()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setDistinct(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setIllustrator(Illustrator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setInner(boolean[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setKeyCompound(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setKeyInfo(Map<Integer, Pair<Boolean, Map<Integer, Integer>>>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setKeyTuple(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setKeyType(byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setNumInputs(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setPackageType(PackageType)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setParent(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.setUseSecondaryKey(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.Packager.starMarkup(Tuple,Tuple,Tuple)",2,3,3
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.MonitoredUDFExecutor.ErrorCallback.handleError(EvalFunc,Exception)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.MonitoredUDFExecutor.ErrorCallback.handleTimeout(EvalFunc,Exception)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.MonitoredUDFExecutor.MonitoredUDFExecutor(EvalFunc)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.MonitoredUDFExecutor.getDefaultValue(MonitoredUDF,Type)",6,15,15
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.MonitoredUDFExecutor.monitorExec(Tuple)",1,3,6
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.MonitoredUDFExecutor.terminate()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.OpFinder(PhysicalPlan,Class<C>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.getFoundOps()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.planContainsOp()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visit(PhysicalOperator)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitAdd(Add)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitAnd(POAnd)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitBinCond(POBinCond)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitCast(POCast)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitCollectedGroup(POCollectedGroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitComparisonFunc(POUserComparisonFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitConstant(ConstantExpression)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitCross(POCross)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitDemux(PODemux)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitDistinct(PODistinct)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitDivide(Divide)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitEqualTo(EqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitFRJoin(POFRJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitFilter(POFilter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitGTOrEqual(GTOrEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitGlobalRearrange(POGlobalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitGreaterThan(GreaterThanExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitIsNull(POIsNull)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitLTOrEqual(LTOrEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitLessThan(LessThanExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitLimit(POLimit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitLoad(POLoad)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitLocalRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitMapLookUp(POMapLookUp)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitMergeCoGroup(POMergeCogroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitMergeJoin(POMergeJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitMod(Mod)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitMultiply(Multiply)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitNative(PONative)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitNegative(PONegative)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitNot(PONot)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitNotEqualTo(NotEqualToExpr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitOr(POOr)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitPOForEach(POForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitPOOptimizedForEach(POOptimizedForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitPackage(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitPartialAgg(POPartialAgg)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitPartitionRearrange(POPartitionRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitPoissonSample(POPoissonSample)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitPreCombinerLocalRearrange(POPreCombinerLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitProject(POProject)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitRegexp(PORegexp)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitReservoirSample(POReservoirSample)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitSkewedJoin(POSkewedJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitSort(POSort)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitSplit(POSplit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitStore(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitStream(POStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitSubtract(Subtract)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitUnion(POUnion)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.OpFinder.visitUserFunc(POUserFunc)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.PlanHelper()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.containsPhysicalOperator(PhysicalPlan,Class<C>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.getLocalRearrangePlanFromSplit(PhysicalPlan,OperatorKey)",4,3,4
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.getPhysicalOperators(PhysicalPlan,Class<C>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.physicalLayer.util.PlanHelper.makeStoreTmpPath(String)",2,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.TezDagBuilder(PigContext,TezOperPlan,DAG,Map<String, LocalResource>)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.addCombiner(PhysicalPlan,TezOperator,Configuration,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.avoidContainerReuseIfInputSplitInDisk()",5,4,5
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.getRawBytesComparator(byte)",13,2,15
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.getRawBytesComparatorForSkewedJoin(byte)",13,2,15
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.getRawComparator(byte)",13,2,15
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.getRawComparatorForSkewedJoin(byte)",13,2,15
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.hasOrderby(TezOperator)",1,5,6
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.newEdge(TezOperator,TezOperator,boolean)",5,17,17
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.newGroupInputEdge(TezOperator,TezOperator,VertexGroup,Vertex)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.newVertex(TezOperator)",11,66,74
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.processStores(TezOperator,Configuration,Job)",1,9,9
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.selectKeyComparator(byte,Configuration,TezOperator,boolean)",2,6,7
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.setGroupingComparator(Configuration,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.setIntermediateOutputKeyValue(byte,Configuration,TezOperator,boolean,boolean)",1,7,7
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.setOutputFormat(Job)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezDagBuilder.visitTezOp(TezOperator)",3,10,10
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecType.accepts(Properties)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecType.getExecutionEngine(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecType.getExecutionEngineClass()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecType.getTezVersion()",1,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecType.isLocal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecType.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecType.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecutionEngine.TezExecutionEngine(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecutionEngine.getExecConf(Properties)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecutionEngine.instantiatePigStats()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezExecutionEngine.instantiateScriptState()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.DAGStatusReporter.run()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.TezJob(TezConfiguration,DAG,Map<String, LocalResource>,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.TezJobConfig.TezJobConfig(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.TezJobConfig.getEstimatedTotalParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.TezJobConfig.setEstimatedTotalParallelism(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getApplicationId()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getConfiguration()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getDAG()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getDAGCounters()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getDAGProgress()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getDAGStatus()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getDiagnostics()",2,3,5
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getName()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getVertexProgress()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.getVertexStatus(String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.killJob()",1,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.run()",3,10,11
"org.apache.pig.backend.hadoop.executionengine.tez.TezJob.setPigStats(TezPigScriptStats)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJobCompiler.TezJobCompiler(PigContext,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJobCompiler.buildDAG(TezPlanContainerNode,Map<String, LocalResource>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezJobCompiler.compile(TezPlanContainerNode,TezPlanContainer)",1,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezJobCompiler.createDagInfo(String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezJobCompiler.getJob(TezPlanContainerNode,TezPlanContainer)",1,6,7
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.ProgressReporter.ProgressReporter(int,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.ProgressReporter.notifyFinishedOrFailed()",5,5,7
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.ProgressReporter.notifyUpdate()",1,4,5
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.TezLauncher()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.compile(PhysicalPlan,PigContext)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.computeWarningAggregate(Map<String, Map<String, Long>>,Map<Enum, Long>)",1,6,7
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.destroy()",1,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.explain(PhysicalPlan,PigContext,PrintStream,String,boolean)",2,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.handleUnCaughtException(PigContext)",3,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.kill()",2,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.killJob(String,Configuration)",2,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.launchPig(PhysicalPlan,String,PigContext)",2,16,19
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.optimize(TezOperPlan,PigContext)",1,8,10
"org.apache.pig.backend.hadoop.executionengine.tez.TezLauncher.processLoadAndParallelism(TezOperPlan,PigContext)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezLocalExecType.accepts(Properties)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezLocalExecType.isLocal()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezLocalExecType.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezResourceManager.addTezResource(String,Path)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezResourceManager.addTezResource(URI)",5,6,6
"org.apache.pig.backend.hadoop.executionengine.tez.TezResourceManager.addTezResources(Set<URI>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezResourceManager.getInstance()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezResourceManager.getStagingDir()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezResourceManager.getTezResources(Set<String>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezResourceManager.init(PigContext,Configuration)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.SessionInfo.SessionInfo(TezClient,Map<String, LocalResource>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.SessionInfo.getResources()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.SessionInfo.getTezSession()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.SessionInfo.setInUse(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.TezSessionManager()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.adjustAMConfig(TezConfiguration,TezJobConfig)",4,5,8
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.createSession(Configuration,Map<String, LocalResource>,Credentials,TezJobConfig)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.freeSession(TezClient)",3,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.getClient(Configuration,Map<String, LocalResource>,Credentials,TezJobConfig)",6,7,9
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.shutdown()",3,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.stopSession(TezClient)",3,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.TezSessionManager.validateSessionResources(SessionInfo,Map<String, LocalResource>)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.FindKeyTypeVisitor.FindKeyTypeVisitor(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.FindKeyTypeVisitor.visitProject(POProject)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.TezCompiler(PhysicalPlan,PigContext)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.addDistinctPlan(PhysicalPlan,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.addSamplingToSortInput(POSort,TezOperator,byte,Pair<POProject, Byte>[])",5,6,9
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.blocking()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.compile()",4,8,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.compile(PhysicalOperator)",8,15,17
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.findPOSplit(TezOperator,OperatorKey)",6,6,6
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.fixScalar()",1,8,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getIndexingJob(TezOperator,TezOperator,List<PhysicalPlan>)",2,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getLocalRearrangeForSortInput(POSort,byte,Pair<POProject, Byte>[])",1,2,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getOrderbySamplingAggregationJob(POSort,int)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getPackage(int,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getPlanContainer()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getSamplingAggregationJob(POSort,int,List<PhysicalPlan>,String,String[])",6,7,9
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getSortCols(List<PhysicalPlan>)",5,4,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getSortJobs(TezOperator,PhysicalPlan,POLocalRearrangeTez,POSort,byte,Pair<POProject, Byte>[])",2,6,12
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getTempFileSpec()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getTezOp()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.getTezPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.merge(E,List<E>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.merge(TezOperator[])",3,15,15
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.nonBlocking(PhysicalOperator)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.processUDFs(PhysicalPlan)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.shouldWriteDataForPartitioner(TezOperator)",4,1,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitCollectedGroup(POCollectedGroup)",4,4,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitCounter(POCounter)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitCross(POCross)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitDistinct(PODistinct)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitFRJoin(POFRJoin)",5,9,10
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitFilter(POFilter)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitGlobalRearrange(POGlobalRearrange)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitLimit(POLimit)",5,11,13
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitLoad(POLoad)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitLocalRearrange(POLocalRearrange)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitMergeCoGroup(POMergeCogroup)",9,7,15
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitMergeJoin(POMergeJoin)",13,14,23
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitNative(PONative)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitPOForEach(POForEach)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitPackage(POPackage)",1,6,6
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitRank(PORank)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitSkewedJoin(POSkewedJoin)",1,16,20
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitSort(POSort)",2,7,10
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitSplit(POSplit)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitStore(POStore)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitStream(POStream)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompiler.visitUnion(POUnion)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,int,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,int,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,int,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,int,byte,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezCompilerException.TezCompilerException(Throwable)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.TezEdgeDescriptor()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.getIntermediateOutputKeyClass()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.getIntermediateOutputKeyComparatorClass()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.getIntermediateOutputValueClass()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.getSecondarySortOrder()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.isUseSecondaryKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.setIntermediateOutputKeyClass(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.setIntermediateOutputKeyComparatorClass(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.setIntermediateOutputValueClass(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.setSecondarySortOrder(boolean[])",2,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezEdgeDescriptor.setUseSecondaryKey(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOpPlanVisitor.TezOpPlanVisitor(TezOperPlan,PlanWalker<TezOperator, TezOperPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOpPlanVisitor.visitTezOp(TezOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.TezOperPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.addCacheResources(Set<String>)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.addExtraResource(String,Path)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.addExtraResource(URL)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.addShipResources(Set<String>)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.disconnect(TezOperator,TezOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.getCredentials()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.getEstimatedTotalParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.getExtraResources()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.getGrandParentsForGraceParallelism(TezOperPlan,TezOperator)",7,11,11
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.moveTree(TezOperator,TezOperPlan)",1,17,17
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.remove(TezOperator)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.setEstimatedParallelism(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperPlan.toString()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.getInp()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.getInpLimits()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.getInpSignatureLists()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.getInputSplitInfo()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.getLoads()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.setInp(ArrayList<FileSpec>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.setInpLimits(ArrayList<Long>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.setInpSignatureLists(ArrayList<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.setInputSplitInfo(InputSplitInfo)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.LoaderInfo.setLoads(List<POLoad>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.TezOperator(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.VertexGroupInfo()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.VertexGroupInfo(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.addInput(OperatorKey)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.getInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.getOutput()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.getSFile()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.getStore()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.getStoreOutputDescriptor()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.getVertexGroup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.removeInput(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.setOutput(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.setSFile(FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.setStoreOutputDescriptor(OutputDescriptor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.VertexGroupInfo.setVertexGroup(VertexGroup)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.addCrossKey(String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.addUnionPredecessor(OperatorKey)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.addVertexGroupStore(OperatorKey,OperatorKey)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.combineSmallSplits()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.copyFeatures(TezOperator,List<OPER_FEATURE>)",3,4,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getCrossKeys()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getEffectiveParallelism(int)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getEstimatedParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getLoaderInfo()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getParallelismFactor()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getProcessorName()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getRequestedParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getSampleOperator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getSortOperator()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getSortOrder()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getSplitParent()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getStores()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getUDFsAsStr()",1,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getUnionMembers()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getVertexGroupInfo()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getVertexGroupMembers()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getVertexGroupStores()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.getVertexParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isClosed()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isCogroup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isDistinct()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isDontEstimateParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isGlobalSort()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isGroupBy()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isIndexer()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isLimit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isLimitAfterSort()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isNative()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isNeedEstimateParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isOverrideIntermediateParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isRegularJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isSampleAggregation()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isSampleBasedPartitioner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isSampler()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isSkewedJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isSplitter()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isUnion()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isUseGraceParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isUseMRMapSettings()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isUseSecondaryKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.isVertexGroup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markCogroup()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markDistinct()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markGlobalSort()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markGroupBy()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markIndexer()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markLimit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markLimitAfterSort()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markNative()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markRegularJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markSampleAggregation()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markSampleBasedPartitioner()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markSampler()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markSkewedJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.markUnion()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.name()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.needSegmentBelow()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.noCombineSmallSplits()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setClosed(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setDontEstimateParallelism(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setEstimatedParallelism(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setNeedEstimatedQuantile(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setOverrideIntermediateParallelism(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setRequestedParallelism(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setRequestedParallelismByReference(TezOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setSampleOperator(TezOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setSortOperator(TezOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setSortOrder(boolean[])",2,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setSplitParent(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setSplitter(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setUseGraceParallelism(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setUseMRMapSettings(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setUseSecondaryKey(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setVertexGroupInfo(VertexGroupInfo)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setVertexGroupMembers(List<OperatorKey>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.setVertexParallelism(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.shiftStringByTabs(String,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.toString()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezOperator.visit(TezOpPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.LoRearrangeDiscoverer.LoRearrangeDiscoverer(PhysicalPlan,TezOperator,TezOperator,POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.LoRearrangeDiscoverer.getLoRearrangeFound()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.LoRearrangeDiscoverer.visitLocalRearrange(POLocalRearrange)",6,6,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.LoRearrangeDiscoverer.visitSplit(POSplit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.PackageDiscoverer.PackageDiscoverer(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.PackageDiscoverer.getPkg()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.PackageDiscoverer.visitPackage(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.TezPOPackageAnnotator(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.handlePackage(TezOperator,POPackage)",4,4,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.patchPackage(TezOperator,TezOperator,TezOperator,POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOPackageAnnotator.visitTezOp(TezOperator)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOStreamVisitor.StreamFileVisitor.StreamFileVisitor(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOStreamVisitor.StreamFileVisitor.visitStream(POStream)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOStreamVisitor.TezPOStreamVisitor(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOStreamVisitor.getCacheFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOStreamVisitor.getShipFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOStreamVisitor.visitTezOp(TezOperator)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOUserFuncVisitor.TezPOUserFuncVisitor(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOUserFuncVisitor.getCacheFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOUserFuncVisitor.getShipFiles()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPOUserFuncVisitor.visitTezOp(TezOperator)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.TezPlanContainer(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.addPlan(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.generateNodeOperatorKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.getLocalResources()",4,9,10
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.getNextPlan(List<TezOperPlan>)",5,5,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.resetScope()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.split(TezPlanContainerNode)",3,8,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.toString()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainer.updatePlan(TezOperPlan,boolean)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.TezPlanContainerNode(OperatorKey,TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.equals(Object)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.getTezOperPlan()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerNode.visit(TezPlanContainerVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerPrinter.TezPlanContainerPrinter(PrintStream,TezPlanContainer)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerPrinter.setVerbose(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerPrinter.visitTezPlanContainerNode(TezPlanContainerNode)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerUDFCollector.TezPlanContainerUDFCollector(TezPlanContainer)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerUDFCollector.getUdfs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerUDFCollector.visitTezPlanContainerNode(TezPlanContainerNode)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerVisitor.TezPlanContainerVisitor(TezPlanContainer,PlanWalker<TezPlanContainerNode, TezPlanContainer>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPlanContainerVisitor.visitTezPlanContainerNode(TezPlanContainerNode)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPrinter.TezGraphPrinter.TezGraphPrinter(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPrinter.TezGraphPrinter.toString()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPrinter.TezGraphPrinter.visitTezOp(TezOperator)",1,5,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPrinter.TezPrinter(PrintStream,TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPrinter.setVerbose(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.TezPrinter.visitTezOp(TezOperator)",1,7,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.NativeTezOper.NativeTezOper(OperatorKey,String,String[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.NativeTezOper.getCommandString()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.NativeTezOper.getJobId()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.NativeTezOper.getJobNumber()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.NativeTezOper.getNativeTezParams()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.NativeTezOper.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.NativeTezOper.runJob(String)",3,5,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.NativeTezOper.visit(TezOpPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.POCounterStatsTez(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.addInputsToSkip(Set<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.attachInputs(Map<String, LogicalInput>,Configuration)",2,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.attachOutputs(Map<String, LogicalOutput>,Configuration)",2,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.getNextTuple()",2,4,6
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.getTezOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.replaceInput(String,String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.replaceOutput(String,String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.setInputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.setOutputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterStatsTez.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.POCounterTez(POCounter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.attachOutputs(Map<String, LogicalOutput>,Configuration)",3,1,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.getNextTuple()",4,3,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.getTezOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.incrementReduceCounter(Long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.initialize(ProcessorContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.replaceOutput(String,String)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.setStatsOutputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.setTuplesOutputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POCounterTez.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POFRJoinTez.POFRJoinTez(POFRJoin,List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POFRJoinTez.addInputsToSkip(Set<String>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POFRJoinTez.attachInputs(Map<String, LogicalInput>,Configuration)",2,3,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POFRJoinTez.getInputKeys()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POFRJoinTez.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POFRJoinTez.name()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POFRJoinTez.replaceInput(String,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POFRJoinTez.setUpHashMap()",5,9,11
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.POIdentityInOutTez(OperatorKey,POLocalRearrange,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.addInputsToSkip(Set<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.attachInputs(Map<String, LogicalInput>,Configuration)",2,1,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.attachOutputs(Map<String, LogicalOutput>,Configuration)",2,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.getNextTuple()",2,7,9
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.replaceInput(String,String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POIdentityInOutTez.setInputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.POLocalRearrangeTez(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.POLocalRearrangeTez(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.POLocalRearrangeTez(POLocalRearrange)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.attachOutputs(Map<String, LogicalOutput>,Configuration)",2,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.getNextTuple()",3,5,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.getOutputKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.getTezOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.isConnectedToPackage()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.isSkewedJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.replaceOutput(String,String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.setConnectedToPackage(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.setOutputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTez.setSkewedJoin(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTezFactory.POLocalRearrangeTezFactory(String,NodeIdGenerator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTezFactory.create()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTezFactory.create(LocalRearrangeType)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTezFactory.create(int,LocalRearrangeType)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POLocalRearrangeTezFactory.create(int,LocalRearrangeType,List<PhysicalPlan>,byte)",1,8,12
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POPartitionRearrangeTez.POPartitionRearrangeTez(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POPartitionRearrangeTez.POPartitionRearrangeTez(OperatorKey,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POPartitionRearrangeTez.clone()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POPartitionRearrangeTez.constructPROutput(List<Result>,Tuple)",1,2,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POPartitionRearrangeTez.getNextTuple()",8,7,12
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POPartitionRearrangeTez.init()",3,6,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POPartitionRearrangeTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.PORankTez(PORank)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.addInputsToSkip(Set<String>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.attachInputs(Map<String, LogicalInput>,Configuration)",4,3,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.getNextTuple()",3,2,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.getRankCounterOffset(Integer)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.replaceInput(String,String)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.setStatsInputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.setTuplesInputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.PORankTez.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.POShuffleTezLoad(POPackage)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.TezAccumulativeTupleBuffer.TezAccumulativeTupleBuffer(int)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.TezAccumulativeTupleBuffer.clear()",5,5,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.TezAccumulativeTupleBuffer.getTuples(int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.TezAccumulativeTupleBuffer.hasNextBatch()",4,3,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.TezAccumulativeTupleBuffer.nextBatch()",6,9,11
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.TezAccumulativeTupleBuffer.setCurrentKey(PigNullableWritable)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.addInputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.addInputsToSkip(Set<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.attachInputs(Map<String, LogicalInput>,Configuration)",1,4,6
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.getNextTuple()",11,17,25
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.isSkewedJoin()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.replaceInput(String,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.setInputKeys(List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.setSkewedJoins(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffleTezLoad.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.POShuffledValueInputTez(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.addInputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.addInputsToSkip(Set<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.attachInputs(Map<String, LogicalInput>,Configuration)",3,2,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.getNextTuple()",4,4,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.replaceInput(String,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POShuffledValueInputTez.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POSimpleTezLoad.POSimpleTezLoad(OperatorKey,FileSpec)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POSimpleTezLoad.addInputsToSkip(Set<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POSimpleTezLoad.attachInputs(Map<String, LogicalInput>,Configuration)",2,2,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POSimpleTezLoad.getNextTuple()",2,2,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POSimpleTezLoad.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POSimpleTezLoad.replaceInput(String,String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POSimpleTezLoad.setInputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.POStoreTez(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.POStoreTez(POStore)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.attachOutputs(Map<String, LogicalOutput>,Configuration)",2,2,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.getNextTuple()",2,5,6
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.getOutputKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.getTezOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.initialize(ProcessorContext)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.name()",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.replaceOutput(String,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POStoreTez.setOutputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.POValueInputTez(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.addInputsToSkip(Set<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.attachInputs(Map<String, LogicalInput>,Configuration)",2,2,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.getNextTuple()",6,5,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.replaceInput(String,String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.setInputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueInputTez.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.EmptyWritable.readFields(DataInput)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.EmptyWritable.write(DataOutput)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.POValueOutputTez(OperatorKey)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.addOutputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.attachOutputs(Map<String, LogicalOutput>,Configuration)",3,2,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.containsOutputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.getNextTuple()",5,4,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.getTezOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.illustratorMarkup(Object,Object,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.initialize(ProcessorContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.isTaskIndexWithRecordIndexAsKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.name()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.removeOutputKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.replaceOutput(String,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.setTaskIndexWithRecordIndexAsKey(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.supportsMultipleInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.supportsMultipleOutputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.operator.POValueOutputTez.visit(PhyPlanVisitor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.AccumulatorOptimizer.AccumulatorOptimizer(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.AccumulatorOptimizer.visitTezOp(TezOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.CombinerOptimizer.CombinerOptimizer(TezOperPlan,boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.CombinerOptimizer.CombinerOptimizer(TezOperPlan,boolean,CompilationMessageCollector)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.CombinerOptimizer.getMessageCollector()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.CombinerOptimizer.visitTezOp(TezOperator)",8,5,10
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.LoaderProcessor.LoaderProcessor(TezOperPlan,PigContext)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.LoaderProcessor.processLoads(TezOperator)",3,16,16
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.LoaderProcessor.visitTezOp(TezOperator)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.MultiQueryOptimizerTez.MultiQueryOptimizerTez(TezOperPlan,boolean,List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.MultiQueryOptimizerTez.addAllPredecessors(TezOperator,List<TezOperator>)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.MultiQueryOptimizerTez.addSubPlanPropertiesToParent(TezOperator,TezOperator)",1,7,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.MultiQueryOptimizerTez.removeSplittee(TezOperPlan,TezOperator,TezOperator)",4,9,10
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.MultiQueryOptimizerTez.visitTezOp(TezOperator)",7,23,28
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.NoopFilterRemover.NoopFilterRemover(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.NoopFilterRemover.visitTezOp(TezOperator)",2,6,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.ParallelismSetter.ParallelismSetter(TezOperPlan,PigContext)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.ParallelismSetter.getEstimatedTotalParallelism()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.ParallelismSetter.incrementTotalParallelism(TezOperator,int)",2,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.ParallelismSetter.visitTezOp(TezOperator)",15,31,39
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.SecondaryKeyOptimizerTez.SecondaryKeyOptimizerTez(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.SecondaryKeyOptimizerTez.getNumDistinctChanged()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.SecondaryKeyOptimizerTez.getNumSortRemoved()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.SecondaryKeyOptimizerTez.getNumUseSecondaryKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.SecondaryKeyOptimizerTez.visitTezOp(TezOperator)",9,5,12
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezEstimatedParallelismClearer.TezEstimatedParallelismClearer(TezOperPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezEstimatedParallelismClearer.visitTezOp(TezOperator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.TezParallelismFactorVisitor(PhysicalPlan,String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.getFactor()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.getSplitBranch(POSplit,String)",4,2,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.visitFRJoin(POFRJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.visitFilter(POFilter)",3,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.visitLimit(POLimit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.visitMergeJoin(POMergeJoin)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.visitPOForEach(POForEach)",3,1,4
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.visitPackage(POPackage)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.TezParallelismFactorVisitor.visitSplit(POSplit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.estimateParallelism(TezOperPlan,TezOperator,Configuration)",8,13,18
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.getPredecessorWithKey(TezOperPlan,TezOperator,String)",6,5,6
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.TezOperDependencyParallelismEstimator.setPigContext(PigContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.UnionOptimizer(TezOperPlan,List<String>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.cloneAndMergeUnionPlan(TezOperator,TezOperator)",1,4,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.connectPredecessorsToVertexGroups(TezOperator,TezOperator,PhysicalPlan,TezOperator[],TezOperator[])",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.connectSplitOpToUnionSuccessors(TezOperator,TezOperator,List<TezOperator>)",5,10,12
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.connectUnionNonMemberPredecessorsToSplit(TezOperator,TezOperator,List<TezOperator>)",5,7,8
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.connectVertexGroupsToSuccessors(TezOperator,List<TezOperator>,List<String>,TezOperator[])",4,8,9
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.copyOperatorProperties(TezOperator,TezOperator)",4,6,6
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.getUnionPredPlanFromSplit(PhysicalPlan,String)",5,4,5
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.isOptimizable(TezOperator,List<String>)",5,5,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.replaceSuccessorInputsAndDisconnect(TezOperator,List<TezOperator>,List<String>,String[])",1,10,10
"org.apache.pig.backend.hadoop.executionengine.tez.plan.optimizer.UnionOptimizer.visitTezOp(TezOperator)",8,15,23
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.FindQuantilesTez.FindQuantilesTez()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.FindQuantilesTez.FindQuantilesTez(String[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.FindQuantilesTez.exec(Tuple)",1,8,9
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.FindQuantilesTez.getMemorySize(Tuple)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.IsFirstReduceOfKeyTez.init()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.PartitionSkewedKeysTez.PartitionSkewedKeysTez()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.PartitionSkewedKeysTez.PartitionSkewedKeysTez(String[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.PartitionSkewedKeysTez.exec(Tuple)",2,5,6
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.ReadScalarsTez.ReadScalarsTez(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.ReadScalarsTez.addInputsToSkip(Set<String>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.ReadScalarsTez.attachInputs(Map<String, LogicalInput>,Configuration)",5,4,7
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.ReadScalarsTez.exec(Tuple)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.ReadScalarsTez.getTezInputs()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.plan.udf.ReadScalarsTez.replaceInput(String,String)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.ObjectCache.ObjectCache()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.ObjectCache.cache(String,Object)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.ObjectCache.getInstance()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.ObjectCache.getObjectRegistry()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.ObjectCache.retrieve(String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.ObjectCache.setObjectRegistry(ObjectRegistry)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PartitionerDefinedVertexManager.PartitionerDefinedVertexManager(VertexManagerPluginContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PartitionerDefinedVertexManager.initialize()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PartitionerDefinedVertexManager.onRootVertexInitialized(String,InputDescriptor,List<Event>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PartitionerDefinedVertexManager.onSourceTaskCompleted(String,Integer)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PartitionerDefinedVertexManager.onVertexManagerEventReceived(VertexManagerEvent)",3,5,6
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PartitionerDefinedVertexManager.onVertexStarted(Map<String, List<Integer>>)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigGraceShuffleVertexManager.PigGraceShuffleVertexManager(VertexManagerPluginContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigGraceShuffleVertexManager.initialize()",1,2,4
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigGraceShuffleVertexManager.onVertexStateUpdated(VertexStateUpdate)",7,13,16
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigOutputFormatTez.PigOutputCommitterTez.PigOutputCommitterTez(TaskAttemptContext,List<POStore>,List<POStore>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigOutputFormatTez.PigOutputCommitterTez.abortJob(JobContext,State)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigOutputFormatTez.PigOutputCommitterTez.cleanupForContainerReuse()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigOutputFormatTez.PigOutputCommitterTez.commitJob(JobContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigOutputFormatTez.PigOutputCommitterTez.setupJob(JobContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigOutputFormatTez.getOutputCommitter(TaskAttemptContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.PigProcessor(ProcessorContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.abortOutput()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.close()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.collectSample(String,LogicalInput)",2,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.handleEvents(List<Event>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.initialize()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.initializeInputs(Map<String, LogicalInput>)",1,10,10
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.initializeOutputs(Map<String, LogicalOutput>)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.run(Map<String, LogicalInput>,Map<String, LogicalOutput>)",1,10,11
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.PigProcessor.runPipeline(PhysicalOperator)",6,2,7
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.SkewedPartitionerTez.init()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.TezTaskContext.TezTaskContext(ProcessorContext)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.TezTaskContext.get()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.TezTaskContext.getCounter(Enum<?>)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.TezTaskContext.getCounter(String,String)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.TezTaskContext.incrCounter(Enum<?>,long)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.TezTaskContext.incrCounter(String,String,long)",2,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.WeightedRangePartitionerTez.getPartition(PigNullableWritable,Writable,int)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.runtime.WeightedRangePartitionerTez.init()",2,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.MRToTezHelper()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.convertMRToTezRuntimeConf(Configuration,Configuration)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.getDAGAMConfFromMRConf(Configuration)",1,9,9
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.populateMRSettingsToRemove()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.populateMRSettingsToRetain()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.processMRSettings(Configuration,Configuration)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.removeUnwantedMRSettings(Configuration)",4,4,4
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.updateLocalResourcesForInputSplits(FileSystem,InputSplitInfo,Map<String, LocalResource>)",3,1,3
"org.apache.pig.backend.hadoop.executionengine.tez.util.MRToTezHelper.writeInputSplitInfoToDisk(InputSplitInfoMem,Path,JobConf,FileSystem)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.SecurityHelper.SecurityHelper()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.SecurityHelper.populateTokenCache(Configuration,Credentials)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.tez.util.SecurityHelper.readTokensFromFiles(Configuration,Credentials)",1,5,7
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.TezCompilerUtil()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.configureValueOnlyTupleOutput(TezEdgeDescriptor,DataMovementType)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.connect(TezOperPlan,TezOperator,TezOperator)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.connect(TezOperPlan,TezOperator,TezOperator,TezEdgeDescriptor)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.connectTezOpToNewPredecessor(TezOperPlan,TezOperator,TezOperator,TezEdgeDescriptor,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.connectTezOpToNewSuccesor(TezOperPlan,TezOperator,TezOperator,TezEdgeDescriptor,String)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.getForEach(POProject,int,String,NodeIdGenerator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.getForEachPlain(String,NodeIdGenerator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.getStore(String,NodeIdGenerator)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.isIntermediateReducer(TezOperator)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.replaceInput(TezOperator,String,String)",1,4,5
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.replaceOutput(TezOperator,String,String)",1,3,4
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.setCustomPartitioner(String,TezOperator)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezCompilerUtil.simpleConnectTwoVertex(TezOperPlan,TezOperator,TezOperator,String,NodeIdGenerator)",1,1,2
"org.apache.pig.backend.hadoop.executionengine.tez.util.TezRuntimeUtil.readReduceMapFromSample(TupleFactory)",2,5,7
"org.apache.pig.backend.hadoop.executionengine.util.AccumulatorOptimizerUtil.addAccumulator(PhysicalPlan)",12,6,17
"org.apache.pig.backend.hadoop.executionengine.util.AccumulatorOptimizerUtil.check(PhysicalOperator)",14,13,19
"org.apache.pig.backend.hadoop.executionengine.util.AccumulatorOptimizerUtil.checkUDFInput(PhysicalOperator)",13,13,16
"org.apache.pig.backend.hadoop.executionengine.util.AccumulatorOptimizerUtil.getAccumulativeBatchSize()",1,3,3
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.AlgebraicPlanChecker(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.checkSuccessorIsLeaf(PhysicalOperator,PhysicalOperator)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.getDistinct()",2,1,2
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.visit()",1,1,3
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.visitDistinct(PODistinct)",9,7,10
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.visitFilter(POFilter)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.visitLimit(POLimit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.visitPOForEach(POForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.AlgebraicPlanChecker.visitSort(POSort)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.CombinerOptimizerUtil()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.DistinctPatcher.DistinctPatcher(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.DistinctPatcher.DistinctPatcher(PhysicalPlan,PlanWalker<PhysicalOperator, PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.DistinctPatcher.getDistinct()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.DistinctPatcher.visitProject(POProject)",4,3,6
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.addAlgebraicFuncToCombineFE(POForEach,Map<PhysicalOperator, Integer>)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.addCombiner(PhysicalPlan,PhysicalPlan,PhysicalPlan,CompilationMessageCollector,boolean)",13,19,27
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.addPredecessorsToPlan(PhysicalOperator,PhysicalPlan,PhysicalPlan)",2,3,4
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.changeFunc(POForEach,byte)",5,5,7
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.createForEachWithGrpProj(POForEach,byte)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.createOperatorKey(String)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.createPartialAgg(POForEach)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.createPlanWithPredecessors(PhysicalOperator,PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.findAlgebraicOps(List<PhysicalPlan>)",12,9,15
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.fixMapProjects.fixMapProjects(PhysicalPlan)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.fixMapProjects.fixMapProjects(PhysicalPlan,PlanWalker<PhysicalOperator, PhysicalPlan>)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.fixMapProjects.visitProject(POProject)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.getAlgebraicSuccessor(POProject,PhysicalPlan)",5,4,7
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.getNewRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.getPreCombinerLR(POLocalRearrange)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.patchUpMap(PhysicalPlan,POPreCombinerLocalRearrange,POForEach,POPartialAgg,POLocalRearrange)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.CombinerOptimizerUtil.setProjectInput(PhysicalOperator,PhysicalPlan,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.ComparableSplit.ComparableSplit(InputSplit,long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.ComparableSplit.add(Node)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.ComparableSplit.compareTo(ComparableSplit)",1,1,7
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.ComparableSplit.equals(Object)",2,1,3
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.ComparableSplit.getSplit()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.ComparableSplit.hashCode()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.ComparableSplit.removeFromNodes()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.DummySplit.getLength()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.DummySplit.getLocations()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.DummySplit.setLength(long)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.Node.Node()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.Node.add(ComparableSplit)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.Node.getLength()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.Node.getSplits()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.Node.remove(ComparableSplit)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.Node.sort()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.addInputPathRecursively(List<FileStatus>,FileSystem,Path,PathFilter)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.checkLeafIsStore(PhysicalPlan,PigContext)",1,2,3
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.copyTmpFileConfigurationValues(Configuration,Configuration)",1,4,4
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.getAllFileRecursively(List<FileStatus>,Configuration)",1,3,3
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.getCombinePigSplits(List<InputSplit>,long,Configuration)",18,25,30
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.getPathLength(FileSystem,FileStatus)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.getPathLength(FileSystem,FileStatus,long)",4,3,4
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.inputSplitToString(InputSplit[])",1,4,4
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.loadPartitionFileFromLocalCache(String,Integer[],byte,Configuration)",2,9,10
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.removeSplits(List<ComparableSplit>)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.setupStreamingDirsConfMulti(PigContext,Configuration)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.setupStreamingDirsConfSingle(POStore,PigContext,Configuration)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.setupUDFContext(Configuration)",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.ParallelConstantVisitor.ParallelConstantVisitor(PhysicalPlan,int)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.ParallelConstantVisitor.visitConstant(ConstantExpression)",3,2,3
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.POToChange.POToChange(PhysicalOperator,PhysicalPlan,POForEach)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.SecondaryKeyDiscover(PhysicalPlan,List<SortKeyInfo>,SortKeyInfo)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.getDistinctsToChange()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.getSecondarySortKeyInfo()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.getSortsToRemove()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.process()",1,2,2
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.processDistinct(PODistinct)",4,6,7
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.processProject(POProject)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.processRoot(PhysicalOperator)",9,6,11
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyDiscover.processSort(POSort)",6,7,10
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.getNumDistinctChanged()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.getNumSortRemoved()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.getNumUseSecondaryKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.getSecondarySortOrder()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.incrementNumDistinctChanged()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.incrementNumSortRemoved()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.incrementNumUseSecondaryKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.isUseSecondaryKey()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.setSecondarySortOrder(boolean[])",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerInfo.setUseSecondaryKey(boolean)",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.SecondaryKeyOptimizerUtil()",1,1,1
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.applySecondaryKeySort(PhysicalPlan,PhysicalPlan)",25,38,46
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.collectColumnChain(PhysicalPlan,ColumnChainInfo)",6,3,6
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.getSortKeyInfo(POLocalRearrange)",6,9,9
"org.apache.pig.backend.hadoop.executionengine.util.SecondaryKeyOptimizerUtil.setSecondaryPlan(PhysicalPlan,POLocalRearrange,SortKeyInfo)",1,5,6
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToBag(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToBigDecimal(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToBigInteger(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToBoolean(byte[])",2,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToCharArray(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToDateTime(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToDouble(byte[])",2,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToFloat(byte[])",2,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToInteger(byte[])",2,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToLong(byte[])",2,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToMap(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.bytesToTuple(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(BigDecimal)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(BigInteger)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(Boolean)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(DataBag)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(DataByteArray)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(DateTime)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(Double)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(Float)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(Integer)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(Long)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(Map<String, Object>)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(String)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseBinaryConverter.toBytes(Tuple)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.ColumnInfo.ColumnInfo(String)",1,5,5
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.ColumnInfo.getColumnFamily()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.ColumnInfo.getColumnName()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.ColumnInfo.getColumnPrefix()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.ColumnInfo.hasPrefixMatch(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.ColumnInfo.isColumnMap()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.ColumnInfo.toString()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.HBaseStorage(String)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.HBaseStorage(String,String)",3,23,28
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.addClassToList(String,List<Class>)",1,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.addFilter(Filter)",1,1,2
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.addFiltersWithColumnPrefix(List<ColumnInfo>)",1,8,9
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.addFiltersWithoutColumnPrefix(List<ColumnInfo>)",4,7,8
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.addHBaseDelegationToken(Configuration,Job)",3,3,7
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.addRowFilter(CompareOp,byte[])",1,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.checkSchema(ResourceSchema)",2,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.createDelete(Object,byte,long)",1,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.createPut(Object,byte)",1,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.ensureAllKeyInstancesInSameSplit()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getColumnInfoList()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getFeatures()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getInputFormat()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getLoadCaster()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getNext()",2,11,15
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getOutputFormat()",3,3,3
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getShipFiles()",3,9,9
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getSplitComparable(InputSplit)",2,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.getUDFProperties()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.groupByFamily(List<ColumnInfo>)",1,2,3
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.increment(byte[])",6,2,8
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.initScan()",3,13,14
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.initializeLocalJobConfig(Job)",1,5,5
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.objToBytes(Object,byte)",18,16,18
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.parseColumnList(String,String,boolean)",1,6,6
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.populateValidOptions()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.projectedFieldsName()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.pushProjection(RequiredFieldList)",3,8,11
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.putNext(Tuple)",5,18,23
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.relativeToAbsolutePath(String,Path)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.setColumnInfoList(List<ColumnInfo>)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.setLocation(String,Job)",1,5,5
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.setStoreLocation(String,Job)",1,3,3
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.setUDFContextSignature(String)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.storeProjectedFieldNames(RequiredFieldList)",1,1,2
"org.apache.pig.backend.hadoop.hbase.HBaseStorage.toString(byte[])",2,3,4
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableIFBuilder.build()",1,2,2
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableIFBuilder.withConf(Configuration)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableIFBuilder.withGt(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableIFBuilder.withGte(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableIFBuilder.withLimit(long)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableIFBuilder.withLt(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableIFBuilder.withLte(byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableInputFormat()",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableInputFormat(long,byte[],byte[],byte[],byte[])",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableRecordReader.HBaseTableRecordReader(long)",1,1,1
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableRecordReader.getProgress()",3,3,9
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableRecordReader.nextKeyValue()",2,2,4
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.HBaseTableRecordReader.setScan(Scan)",1,3,3
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.getSplits(JobContext)",1,6,6
"org.apache.pig.backend.hadoop.hbase.HBaseTableInputFormat.skipRegion(CompareOp,byte[],byte[])",2,1,3
"org.apache.pig.backend.hadoop.hbase.TableSplitComparable.TableSplitComparable()",1,1,1
"org.apache.pig.backend.hadoop.hbase.TableSplitComparable.TableSplitComparable(TableSplit)",1,1,1
"org.apache.pig.backend.hadoop.hbase.TableSplitComparable.compareTo(TableSplit)",1,1,1
"org.apache.pig.backend.hadoop.hbase.TableSplitComparable.equals(Object)",7,2,7
"org.apache.pig.backend.hadoop.hbase.TableSplitComparable.hashCode()",1,2,2
"org.apache.pig.backend.hadoop.hbase.TableSplitComparable.readFields(DataInput)",1,1,1
"org.apache.pig.backend.hadoop.hbase.TableSplitComparable.toString()",1,1,1
"org.apache.pig.backend.hadoop.hbase.TableSplitComparable.write(DataOutput)",1,1,1
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.HadoopExecutableManager()",1,1,1
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.close()",4,4,6
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.configure(POStream)",2,2,3
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.exec()",1,3,3
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.getOutputName(int)",1,1,1
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.processError(String)",1,3,3
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.writeDebugFooter()",1,11,11
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.writeDebugHeader()",1,4,4
"org.apache.pig.backend.hadoop.streaming.HadoopExecutableManager.writeErrorToHDFS(int,String)",2,3,3
"org.apache.pig.builtin.ABS.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ABS.exec(Tuple)",2,4,6
"org.apache.pig.builtin.ABS.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.ABS.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.ACOS.compute(Double)",1,1,1
"org.apache.pig.builtin.ARITY.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ARITY.exec(Tuple)",2,2,3
"org.apache.pig.builtin.ARITY.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.ASIN.compute(Double)",1,1,1
"org.apache.pig.builtin.ATAN.compute(Double)",1,1,1
"org.apache.pig.builtin.AVG.Final.exec(Tuple)",2,2,5
"org.apache.pig.builtin.AVG.Initial.exec(Tuple)",1,6,8
"org.apache.pig.builtin.AVG.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.AVG.accumulate(Tuple)",2,2,7
"org.apache.pig.builtin.AVG.cleanup()",1,1,1
"org.apache.pig.builtin.AVG.combine(DataBag)",1,3,4
"org.apache.pig.builtin.AVG.count(Tuple)",1,4,5
"org.apache.pig.builtin.AVG.exec(Tuple)",2,1,4
"org.apache.pig.builtin.AVG.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.AVG.getFinal()",1,1,1
"org.apache.pig.builtin.AVG.getInitial()",1,1,1
"org.apache.pig.builtin.AVG.getIntermed()",1,1,1
"org.apache.pig.builtin.AVG.getValue()",1,1,3
"org.apache.pig.builtin.AVG.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AVG.sum(Tuple)",5,3,7
"org.apache.pig.builtin.AddDuration.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.AddDuration.exec(Tuple)",2,4,5
"org.apache.pig.builtin.AddDuration.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.AddDuration.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.Final.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.Intermediate.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.accumulate(Tuple)",2,2,5
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.cleanup()",1,1,1
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.doTupleWork(Tuple,KnownOpProvider)",4,2,6
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.doWork(BigDecimal,BigDecimal,KNOWN_OP)",4,12,15
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.getSeed(KNOWN_OP)",5,4,5
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.getValue()",1,1,1
"org.apache.pig.builtin.AlgebraicBigDecimalMathBase.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.Final.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.Intermediate.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.accumulate(Tuple)",2,2,5
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.cleanup()",1,1,1
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.doTupleWork(Tuple,KnownOpProvider)",4,2,6
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.doWork(BigInteger,BigInteger,KNOWN_OP)",4,12,15
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.getSeed(KNOWN_OP)",5,4,5
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.getValue()",1,1,1
"org.apache.pig.builtin.AlgebraicBigIntegerMathBase.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.Final.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.Initial.exec(Tuple)",2,3,5
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.Intermediate.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.accumulate(Tuple)",2,2,5
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.cleanup()",1,1,1
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.doTupleWork(Tuple,KnownOpProvider,byte)",5,4,10
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.doWork(Double,Double,KNOWN_OP)",7,6,7
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.getInitial()",1,1,1
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.getSeed(KNOWN_OP)",5,2,5
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.getValue()",1,1,1
"org.apache.pig.builtin.AlgebraicByteArrayMathBase.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AlgebraicDoubleMathBase.Final.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicDoubleMathBase.Intermediate.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicDoubleMathBase.accumulate(Tuple)",2,2,5
"org.apache.pig.builtin.AlgebraicDoubleMathBase.cleanup()",1,1,1
"org.apache.pig.builtin.AlgebraicDoubleMathBase.doTupleWork(Tuple,KnownOpProvider)",4,2,6
"org.apache.pig.builtin.AlgebraicDoubleMathBase.doWork(Double,Double,KNOWN_OP)",7,6,7
"org.apache.pig.builtin.AlgebraicDoubleMathBase.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicDoubleMathBase.getSeed(KNOWN_OP)",5,2,5
"org.apache.pig.builtin.AlgebraicDoubleMathBase.getValue()",1,1,1
"org.apache.pig.builtin.AlgebraicDoubleMathBase.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AlgebraicFloatMathBase.Final.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicFloatMathBase.Intermediate.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicFloatMathBase.accumulate(Tuple)",2,2,5
"org.apache.pig.builtin.AlgebraicFloatMathBase.cleanup()",1,1,1
"org.apache.pig.builtin.AlgebraicFloatMathBase.doTupleWork(Tuple,KnownOpProvider)",4,2,6
"org.apache.pig.builtin.AlgebraicFloatMathBase.doWork(Float,Float,KNOWN_OP)",7,6,7
"org.apache.pig.builtin.AlgebraicFloatMathBase.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicFloatMathBase.getSeed(KNOWN_OP)",5,2,5
"org.apache.pig.builtin.AlgebraicFloatMathBase.getValue()",1,1,1
"org.apache.pig.builtin.AlgebraicFloatMathBase.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AlgebraicIntMathBase.Final.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicIntMathBase.Intermediate.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicIntMathBase.accumulate(Tuple)",2,2,5
"org.apache.pig.builtin.AlgebraicIntMathBase.cleanup()",1,1,1
"org.apache.pig.builtin.AlgebraicIntMathBase.doTupleWork(Tuple,KnownOpProvider)",4,2,6
"org.apache.pig.builtin.AlgebraicIntMathBase.doWork(Integer,Integer,KNOWN_OP)",7,6,7
"org.apache.pig.builtin.AlgebraicIntMathBase.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicIntMathBase.getSeed(KNOWN_OP)",5,2,5
"org.apache.pig.builtin.AlgebraicIntMathBase.getValue()",1,1,1
"org.apache.pig.builtin.AlgebraicIntMathBase.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AlgebraicLongMathBase.Final.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicLongMathBase.Intermediate.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicLongMathBase.accumulate(Tuple)",2,2,5
"org.apache.pig.builtin.AlgebraicLongMathBase.cleanup()",1,1,1
"org.apache.pig.builtin.AlgebraicLongMathBase.doTupleWork(Tuple,KnownOpProvider)",4,2,6
"org.apache.pig.builtin.AlgebraicLongMathBase.doWork(Long,Long,KNOWN_OP)",7,6,7
"org.apache.pig.builtin.AlgebraicLongMathBase.exec(Tuple)",1,1,3
"org.apache.pig.builtin.AlgebraicLongMathBase.getSeed(KNOWN_OP)",5,2,5
"org.apache.pig.builtin.AlgebraicLongMathBase.getValue()",1,1,1
"org.apache.pig.builtin.AlgebraicLongMathBase.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.AlgebraicMathBase.Initial.exec(Tuple)",2,2,4
"org.apache.pig.builtin.AlgebraicMathBase.getFinal()",5,5,5
"org.apache.pig.builtin.AlgebraicMathBase.getInitial()",1,1,1
"org.apache.pig.builtin.AlgebraicMathBase.getIntermed()",5,5,5
"org.apache.pig.builtin.AlgebraicMathBase.setOp(KNOWN_OP)",1,1,1
"org.apache.pig.builtin.Assert.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.Assert.exec(Tuple)",3,3,3
"org.apache.pig.builtin.AvroStorage.AvroStorage()",1,1,1
"org.apache.pig.builtin.AvroStorage.AvroStorage(String)",1,1,1
"org.apache.pig.builtin.AvroStorage.AvroStorage(String,String)",4,13,14
"org.apache.pig.builtin.AvroStorage.checkSchema(ResourceSchema)",3,2,5
"org.apache.pig.builtin.AvroStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.builtin.AvroStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.builtin.AvroStorage.getAvroSchema(Path[],Job)",4,6,6
"org.apache.pig.builtin.AvroStorage.getAvroSchema(String,Job)",1,1,2
"org.apache.pig.builtin.AvroStorage.getFeatures()",1,1,1
"org.apache.pig.builtin.AvroStorage.getInputAvroSchema()",1,2,2
"org.apache.pig.builtin.AvroStorage.getInputFormat()",1,1,2
"org.apache.pig.builtin.AvroStorage.getNext()",2,2,3
"org.apache.pig.builtin.AvroStorage.getOutputAvroSchema()",1,3,3
"org.apache.pig.builtin.AvroStorage.getOutputFormat()",1,1,1
"org.apache.pig.builtin.AvroStorage.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.builtin.AvroStorage.getProperties()",2,2,2
"org.apache.pig.builtin.AvroStorage.getProperties(Class,String)",2,2,2
"org.apache.pig.builtin.AvroStorage.getSchema(String,Job)",1,2,2
"org.apache.pig.builtin.AvroStorage.getShipFiles()",1,1,1
"org.apache.pig.builtin.AvroStorage.getStatistics(String,Job)",1,1,1
"org.apache.pig.builtin.AvroStorage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.builtin.AvroStorage.prepareToWrite(RecordWriter)",2,2,2
"org.apache.pig.builtin.AvroStorage.pushProjection(RequiredFieldList)",2,2,2
"org.apache.pig.builtin.AvroStorage.putNext(Tuple)",1,2,2
"org.apache.pig.builtin.AvroStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.builtin.AvroStorage.setInputAvroSchema(Schema)",1,1,1
"org.apache.pig.builtin.AvroStorage.setLocation(String,Job)",4,3,4
"org.apache.pig.builtin.AvroStorage.setOutputAvroSchema(Schema)",1,1,1
"org.apache.pig.builtin.AvroStorage.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.builtin.AvroStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.AvroStorage.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.builtin.AvroStorage.setUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.AvroStorage.updateSchemaFromInputAvroSchema()",1,2,2
"org.apache.pig.builtin.BagSize.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.BagSize.exec(Tuple)",1,3,4
"org.apache.pig.builtin.BagSize.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.BagToString.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.BagToString.exec(Tuple)",5,10,13
"org.apache.pig.builtin.BagToString.outputSchema(Schema)",7,10,13
"org.apache.pig.builtin.BagToTuple.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.BagToTuple.exec(Tuple)",5,6,9
"org.apache.pig.builtin.BagToTuple.getOuputTupleSize(DataBag)",1,3,3
"org.apache.pig.builtin.BagToTuple.outputSchema(Schema)",5,8,11
"org.apache.pig.builtin.Base.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.Base.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.BigDecimalAbs.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.BigDecimalAbs.exec(Tuple)",2,3,4
"org.apache.pig.builtin.BigDecimalAvg.Final.exec(Tuple)",2,3,5
"org.apache.pig.builtin.BigDecimalAvg.Initial.exec(Tuple)",1,4,5
"org.apache.pig.builtin.BigDecimalAvg.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.BigDecimalAvg.accumulate(Tuple)",2,3,7
"org.apache.pig.builtin.BigDecimalAvg.cleanup()",1,1,1
"org.apache.pig.builtin.BigDecimalAvg.combine(DataBag)",1,3,4
"org.apache.pig.builtin.BigDecimalAvg.count(Tuple)",1,5,5
"org.apache.pig.builtin.BigDecimalAvg.div(BigDecimal,BigDecimal)",1,1,1
"org.apache.pig.builtin.BigDecimalAvg.exec(Tuple)",2,2,4
"org.apache.pig.builtin.BigDecimalAvg.getFinal()",1,1,1
"org.apache.pig.builtin.BigDecimalAvg.getInitial()",1,1,1
"org.apache.pig.builtin.BigDecimalAvg.getIntermed()",1,1,1
"org.apache.pig.builtin.BigDecimalAvg.getValue()",1,3,3
"org.apache.pig.builtin.BigDecimalAvg.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.BigDecimalAvg.sum(Tuple)",5,2,6
"org.apache.pig.builtin.BigDecimalMax.BigDecimalMax()",1,1,1
"org.apache.pig.builtin.BigDecimalMax.Final.getOp()",1,1,1
"org.apache.pig.builtin.BigDecimalMax.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.BigDecimalMin.BigDecimalMin()",1,1,1
"org.apache.pig.builtin.BigDecimalMin.Final.getOp()",1,1,1
"org.apache.pig.builtin.BigDecimalMin.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.BigDecimalSum.BigDecimalSum()",1,1,1
"org.apache.pig.builtin.BigDecimalSum.Final.getOp()",1,1,1
"org.apache.pig.builtin.BigDecimalSum.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(BigDecimalInfinity)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(BigInteger)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(BigInteger,MathContext)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(BigInteger,int)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(BigInteger,int,MathContext)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(String)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(String,MathContext)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(char[])",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(char[],MathContext)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(char[],int,int)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(char[],int,int,MathContext)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(double)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(double,MathContext)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(int)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(int,MathContext)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(long)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.BigDecimalWrapper(long,MathContext)",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.NEGATIVE_INFINITY()",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.POSITIVE_INFINITY()",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.isNegativeInfinity()",1,1,1
"org.apache.pig.builtin.BigDecimalWrapper.isPositiveInfinity()",1,1,1
"org.apache.pig.builtin.BigIntegerAbs.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.BigIntegerAbs.exec(Tuple)",2,3,4
"org.apache.pig.builtin.BigIntegerAvg.Final.exec(Tuple)",2,3,5
"org.apache.pig.builtin.BigIntegerAvg.Initial.exec(Tuple)",1,4,5
"org.apache.pig.builtin.BigIntegerAvg.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.BigIntegerAvg.accumulate(Tuple)",2,3,7
"org.apache.pig.builtin.BigIntegerAvg.cleanup()",1,1,1
"org.apache.pig.builtin.BigIntegerAvg.combine(DataBag)",1,3,4
"org.apache.pig.builtin.BigIntegerAvg.count(Tuple)",1,5,5
"org.apache.pig.builtin.BigIntegerAvg.div(BigInteger,BigInteger)",1,1,1
"org.apache.pig.builtin.BigIntegerAvg.exec(Tuple)",2,2,4
"org.apache.pig.builtin.BigIntegerAvg.getFinal()",1,1,1
"org.apache.pig.builtin.BigIntegerAvg.getInitial()",1,1,1
"org.apache.pig.builtin.BigIntegerAvg.getIntermed()",1,1,1
"org.apache.pig.builtin.BigIntegerAvg.getValue()",1,3,3
"org.apache.pig.builtin.BigIntegerAvg.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.BigIntegerAvg.sum(Tuple)",5,2,6
"org.apache.pig.builtin.BigIntegerMax.BigIntegerMax()",1,1,1
"org.apache.pig.builtin.BigIntegerMax.Final.getOp()",1,1,1
"org.apache.pig.builtin.BigIntegerMax.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.BigIntegerMin.BigIntegerMin()",1,1,1
"org.apache.pig.builtin.BigIntegerMin.Final.getOp()",1,1,1
"org.apache.pig.builtin.BigIntegerMin.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.BigIntegerSum.BigIntegerSum()",1,1,1
"org.apache.pig.builtin.BigIntegerSum.Final.getOp()",1,1,1
"org.apache.pig.builtin.BigIntegerSum.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.BigIntegerWrapper(BigIntegerInfinity)",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.BigIntegerWrapper(String)",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.BigIntegerWrapper(String,int)",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.BigIntegerWrapper(byte[])",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.BigIntegerWrapper(int,Random)",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.BigIntegerWrapper(int,byte[])",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.BigIntegerWrapper(int,int,Random)",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.NEGATIVE_INFINITY()",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.POSITIVE_INFINITY()",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.isNegativeInfinity()",1,1,1
"org.apache.pig.builtin.BigIntegerWrapper.isPositiveInfinity()",1,1,1
"org.apache.pig.builtin.BinStorage.BinStorage()",1,1,1
"org.apache.pig.builtin.BinStorage.BinStorage(String)",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToBag(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToBigDecimal(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToBigInteger(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToBoolean(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToCharArray(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToDateTime(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToDouble(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToFloat(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToInteger(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToLong(byte[])",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToMap(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.builtin.BinStorage.UnImplementedLoadCaster.bytesToTuple(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.builtin.BinStorage.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.builtin.BinStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.builtin.BinStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.builtin.BinStorage.getInputFormat()",1,1,1
"org.apache.pig.builtin.BinStorage.getLoadCaster()",4,4,7
"org.apache.pig.builtin.BinStorage.getNext()",2,2,2
"org.apache.pig.builtin.BinStorage.getOutputFormat()",1,1,1
"org.apache.pig.builtin.BinStorage.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.builtin.BinStorage.getSchema(String,Job)",3,2,4
"org.apache.pig.builtin.BinStorage.getStatistics(String,Job)",1,1,1
"org.apache.pig.builtin.BinStorage.hashCode()",1,1,1
"org.apache.pig.builtin.BinStorage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.builtin.BinStorage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.builtin.BinStorage.putNext(Tuple)",1,1,2
"org.apache.pig.builtin.BinStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.builtin.BinStorage.setLocation(String,Job)",1,1,1
"org.apache.pig.builtin.BinStorage.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.builtin.BinStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.BinStorage.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.builtin.BinStorage.toBytes(Boolean)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(DataBag)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(DateTime)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(Double)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(Float)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(Integer)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(Long)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(Map<String, Object>)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(String)",1,1,2
"org.apache.pig.builtin.BinStorage.toBytes(Tuple)",1,1,2
"org.apache.pig.builtin.Bloom.Bloom(String)",1,1,1
"org.apache.pig.builtin.Bloom.exec(Tuple)",1,3,3
"org.apache.pig.builtin.Bloom.getCacheFiles()",1,1,2
"org.apache.pig.builtin.Bloom.getFilenameFromPath(String)",1,1,1
"org.apache.pig.builtin.Bloom.init()",1,1,1
"org.apache.pig.builtin.Bloom.setFilter(DataByteArray)",1,1,1
"org.apache.pig.builtin.BuildBloom.BuildBloom(String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloom.BuildBloom(String,String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloom.Final.Final()",1,1,1
"org.apache.pig.builtin.BuildBloom.Final.Final(String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloom.Final.Final(String,String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloom.Final.exec(Tuple)",1,1,1
"org.apache.pig.builtin.BuildBloom.Initial.Initial()",1,1,1
"org.apache.pig.builtin.BuildBloom.Initial.Initial(String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloom.Initial.Initial(String,String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloom.Initial.exec(Tuple)",2,3,4
"org.apache.pig.builtin.BuildBloom.Intermediate.Intermediate()",1,1,1
"org.apache.pig.builtin.BuildBloom.Intermediate.Intermediate(String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloom.Intermediate.Intermediate(String,String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloom.Intermediate.exec(Tuple)",1,1,1
"org.apache.pig.builtin.BuildBloom.exec(Tuple)",1,1,1
"org.apache.pig.builtin.BuildBloom.getFinal()",1,1,1
"org.apache.pig.builtin.BuildBloom.getInitial()",1,1,1
"org.apache.pig.builtin.BuildBloom.getIntermed()",1,1,1
"org.apache.pig.builtin.BuildBloom.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.BuildBloomBase.BuildBloomBase()",1,1,1
"org.apache.pig.builtin.BuildBloomBase.BuildBloomBase(String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloomBase.BuildBloomBase(String,String,String,String)",1,1,1
"org.apache.pig.builtin.BuildBloomBase.bloomIn(DataByteArray)",1,1,1
"org.apache.pig.builtin.BuildBloomBase.bloomOr(Tuple)",1,2,3
"org.apache.pig.builtin.BuildBloomBase.bloomOut()",1,1,1
"org.apache.pig.builtin.BuildBloomBase.convertHashType(String)",3,2,3
"org.apache.pig.builtin.BuildBloomBase.setSize(String,String)",2,1,4
"org.apache.pig.builtin.CBRT.compute(Double)",1,1,1
"org.apache.pig.builtin.CEIL.compute(Double)",1,1,1
"org.apache.pig.builtin.CONCAT.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.CONCAT.exec(Tuple)",4,4,7
"org.apache.pig.builtin.CONCAT.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.CONCAT.getSchemaType()",1,1,1
"org.apache.pig.builtin.CONCAT.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.COR.COR()",1,1,1
"org.apache.pig.builtin.COR.COR(String...)",1,2,2
"org.apache.pig.builtin.COR.Final.Final()",1,1,1
"org.apache.pig.builtin.COR.Final.Final(String...)",1,2,2
"org.apache.pig.builtin.COR.Final.exec(Tuple)",4,6,9
"org.apache.pig.builtin.COR.Initial.exec(Tuple)",2,5,6
"org.apache.pig.builtin.COR.Intermed.exec(Tuple)",2,2,4
"org.apache.pig.builtin.COR.combine(DataBag)",1,4,6
"org.apache.pig.builtin.COR.computeAll(DataBag,DataBag)",1,2,4
"org.apache.pig.builtin.COR.exec(Tuple)",4,6,7
"org.apache.pig.builtin.COR.getFinal()",1,1,1
"org.apache.pig.builtin.COR.getInitial()",1,1,1
"org.apache.pig.builtin.COR.getIntermed()",1,1,1
"org.apache.pig.builtin.COR.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.COR.toString()",2,4,4
"org.apache.pig.builtin.COS.compute(Double)",1,1,1
"org.apache.pig.builtin.COSH.compute(Double)",1,1,1
"org.apache.pig.builtin.COUNT.Final.exec(Tuple)",1,2,2
"org.apache.pig.builtin.COUNT.Initial.exec(Tuple)",3,5,5
"org.apache.pig.builtin.COUNT.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.COUNT.accumulate(Tuple)",1,5,7
"org.apache.pig.builtin.COUNT.cleanup()",1,1,1
"org.apache.pig.builtin.COUNT.exec(Tuple)",2,5,8
"org.apache.pig.builtin.COUNT.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.COUNT.getFinal()",1,1,1
"org.apache.pig.builtin.COUNT.getInitial()",1,1,1
"org.apache.pig.builtin.COUNT.getIntermed()",1,1,1
"org.apache.pig.builtin.COUNT.getValue()",1,1,1
"org.apache.pig.builtin.COUNT.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.COUNT.sum(Tuple)",1,2,2
"org.apache.pig.builtin.COUNT_STAR.Final.exec(Tuple)",1,2,2
"org.apache.pig.builtin.COUNT_STAR.Initial.exec(Tuple)",1,2,2
"org.apache.pig.builtin.COUNT_STAR.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.COUNT_STAR.accumulate(Tuple)",1,3,4
"org.apache.pig.builtin.COUNT_STAR.cleanup()",1,1,1
"org.apache.pig.builtin.COUNT_STAR.exec(Tuple)",1,2,3
"org.apache.pig.builtin.COUNT_STAR.getFinal()",1,1,1
"org.apache.pig.builtin.COUNT_STAR.getInitial()",1,1,1
"org.apache.pig.builtin.COUNT_STAR.getIntermed()",1,1,1
"org.apache.pig.builtin.COUNT_STAR.getValue()",1,1,1
"org.apache.pig.builtin.COUNT_STAR.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.COUNT_STAR.sum(Tuple)",1,2,2
"org.apache.pig.builtin.COV.COV()",1,1,1
"org.apache.pig.builtin.COV.COV(String...)",1,2,2
"org.apache.pig.builtin.COV.Final.Final()",1,1,1
"org.apache.pig.builtin.COV.Final.Final(String...)",1,2,2
"org.apache.pig.builtin.COV.Final.exec(Tuple)",2,5,8
"org.apache.pig.builtin.COV.Initial.exec(Tuple)",2,5,6
"org.apache.pig.builtin.COV.Intermed.exec(Tuple)",1,1,2
"org.apache.pig.builtin.COV.combine(DataBag)",1,4,6
"org.apache.pig.builtin.COV.computeAll(DataBag,DataBag)",1,2,4
"org.apache.pig.builtin.COV.exec(Tuple)",2,6,7
"org.apache.pig.builtin.COV.getFinal()",1,1,1
"org.apache.pig.builtin.COV.getInitial()",1,1,1
"org.apache.pig.builtin.COV.getIntermed()",1,1,1
"org.apache.pig.builtin.COV.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.COV.toString()",2,4,4
"org.apache.pig.builtin.ConstantSize.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ConstantSize.exec(Tuple)",1,3,4
"org.apache.pig.builtin.ConstantSize.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.CubeDimensions.CubeDimensions()",1,1,1
"org.apache.pig.builtin.CubeDimensions.CubeDimensions(String)",1,1,1
"org.apache.pig.builtin.CubeDimensions.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.CubeDimensions.convertNullToUnknown(Tuple)",1,3,3
"org.apache.pig.builtin.CubeDimensions.exec(Tuple)",1,1,1
"org.apache.pig.builtin.CubeDimensions.outputSchema(Schema)",1,1,2
"org.apache.pig.builtin.CubeDimensions.recursivelyCube(List<Tuple>,Tuple,int,Tuple)",1,3,3
"org.apache.pig.builtin.CurrentTime.CurrentTime()",1,1,1
"org.apache.pig.builtin.CurrentTime.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.CurrentTime.exec(Tuple)",4,2,4
"org.apache.pig.builtin.DIFF.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.DIFF.computeDiff(DataBag,DataBag,DataBag)",1,7,7
"org.apache.pig.builtin.DIFF.exec(Tuple)",2,4,5
"org.apache.pig.builtin.DateTimeMax.Final.exec(Tuple)",1,2,3
"org.apache.pig.builtin.DateTimeMax.Initial.exec(Tuple)",1,3,4
"org.apache.pig.builtin.DateTimeMax.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.DateTimeMax.accumulate(Tuple)",2,3,6
"org.apache.pig.builtin.DateTimeMax.cleanup()",1,1,1
"org.apache.pig.builtin.DateTimeMax.exec(Tuple)",1,1,2
"org.apache.pig.builtin.DateTimeMax.getFinal()",1,1,1
"org.apache.pig.builtin.DateTimeMax.getInitial()",1,1,1
"org.apache.pig.builtin.DateTimeMax.getIntermed()",1,1,1
"org.apache.pig.builtin.DateTimeMax.getValue()",1,1,1
"org.apache.pig.builtin.DateTimeMax.max(Tuple)",4,4,8
"org.apache.pig.builtin.DateTimeMax.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.DateTimeMin.Final.exec(Tuple)",1,2,3
"org.apache.pig.builtin.DateTimeMin.Initial.exec(Tuple)",1,3,4
"org.apache.pig.builtin.DateTimeMin.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.DateTimeMin.accumulate(Tuple)",2,3,6
"org.apache.pig.builtin.DateTimeMin.cleanup()",1,1,1
"org.apache.pig.builtin.DateTimeMin.exec(Tuple)",1,1,2
"org.apache.pig.builtin.DateTimeMin.getFinal()",1,1,1
"org.apache.pig.builtin.DateTimeMin.getInitial()",1,1,1
"org.apache.pig.builtin.DateTimeMin.getIntermed()",1,1,1
"org.apache.pig.builtin.DateTimeMin.getValue()",1,1,1
"org.apache.pig.builtin.DateTimeMin.min(Tuple)",4,4,8
"org.apache.pig.builtin.DateTimeMin.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.DaysBetween.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.DaysBetween.exec(Tuple)",2,4,5
"org.apache.pig.builtin.DaysBetween.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.DaysBetween.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.Distinct.Final.exec(Tuple)",1,1,1
"org.apache.pig.builtin.Distinct.Initial.exec(Tuple)",1,2,3
"org.apache.pig.builtin.Distinct.Intermediate.exec(Tuple)",1,1,1
"org.apache.pig.builtin.Distinct.createDataBag()",1,5,6
"org.apache.pig.builtin.Distinct.exec(Tuple)",1,1,1
"org.apache.pig.builtin.Distinct.getDistinct(Tuple)",2,3,5
"org.apache.pig.builtin.Distinct.getDistinctFromNestedBags(Tuple,EvalFunc)",2,4,6
"org.apache.pig.builtin.Distinct.getFinal()",1,1,1
"org.apache.pig.builtin.Distinct.getInitial()",1,1,1
"org.apache.pig.builtin.Distinct.getIntermed()",1,1,1
"org.apache.pig.builtin.Distinct.staticDataCleanup()",1,1,1
"org.apache.pig.builtin.DoubleAbs.compute(Double)",1,1,1
"org.apache.pig.builtin.DoubleAvg.Final.exec(Tuple)",2,2,5
"org.apache.pig.builtin.DoubleAvg.Initial.exec(Tuple)",1,4,5
"org.apache.pig.builtin.DoubleAvg.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.DoubleAvg.accumulate(Tuple)",2,2,7
"org.apache.pig.builtin.DoubleAvg.cleanup()",1,1,1
"org.apache.pig.builtin.DoubleAvg.combine(DataBag)",1,3,4
"org.apache.pig.builtin.DoubleAvg.count(Tuple)",1,4,5
"org.apache.pig.builtin.DoubleAvg.exec(Tuple)",2,1,4
"org.apache.pig.builtin.DoubleAvg.getFinal()",1,1,1
"org.apache.pig.builtin.DoubleAvg.getInitial()",1,1,1
"org.apache.pig.builtin.DoubleAvg.getIntermed()",1,1,1
"org.apache.pig.builtin.DoubleAvg.getValue()",1,1,3
"org.apache.pig.builtin.DoubleAvg.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.DoubleAvg.sum(Tuple)",5,2,6
"org.apache.pig.builtin.DoubleBase.exec(Tuple)",2,4,5
"org.apache.pig.builtin.DoubleBase.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.DoubleMax.DoubleMax()",1,1,1
"org.apache.pig.builtin.DoubleMax.Final.getOp()",1,1,1
"org.apache.pig.builtin.DoubleMax.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.DoubleMin.DoubleMin()",1,1,1
"org.apache.pig.builtin.DoubleMin.Final.getOp()",1,1,1
"org.apache.pig.builtin.DoubleMin.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.DoubleRound.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.DoubleRound.exec(Tuple)",2,3,5
"org.apache.pig.builtin.DoubleRound.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.DoubleRoundTo.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.DoubleRoundTo.exec(Tuple)",3,3,6
"org.apache.pig.builtin.DoubleRoundTo.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.DoubleSum.DoubleSum()",1,1,1
"org.apache.pig.builtin.DoubleSum.Final.getOp()",1,1,1
"org.apache.pig.builtin.DoubleSum.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.ENDSWITH.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ENDSWITH.exec(Tuple)",2,6,6
"org.apache.pig.builtin.ENDSWITH.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.ENDSWITH.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.EXP.compute(Double)",1,1,1
"org.apache.pig.builtin.EqualsIgnoreCase.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.EqualsIgnoreCase.exec(Tuple)",4,3,6
"org.apache.pig.builtin.FLOOR.compute(Double)",1,1,1
"org.apache.pig.builtin.FloatAbs.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.FloatAbs.exec(Tuple)",2,2,4
"org.apache.pig.builtin.FloatAbs.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.FloatAvg.Final.exec(Tuple)",2,2,5
"org.apache.pig.builtin.FloatAvg.Initial.exec(Tuple)",1,4,6
"org.apache.pig.builtin.FloatAvg.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.FloatAvg.accumulate(Tuple)",2,2,7
"org.apache.pig.builtin.FloatAvg.cleanup()",1,1,1
"org.apache.pig.builtin.FloatAvg.combine(DataBag)",1,3,4
"org.apache.pig.builtin.FloatAvg.count(Tuple)",1,4,5
"org.apache.pig.builtin.FloatAvg.exec(Tuple)",2,1,4
"org.apache.pig.builtin.FloatAvg.getFinal()",1,1,1
"org.apache.pig.builtin.FloatAvg.getInitial()",1,1,1
"org.apache.pig.builtin.FloatAvg.getIntermed()",1,1,1
"org.apache.pig.builtin.FloatAvg.getValue()",1,1,3
"org.apache.pig.builtin.FloatAvg.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.FloatAvg.sum(Tuple)",5,2,6
"org.apache.pig.builtin.FloatMax.Final.getOp()",1,1,1
"org.apache.pig.builtin.FloatMax.FloatMax()",1,1,1
"org.apache.pig.builtin.FloatMax.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.FloatMin.Final.getOp()",1,1,1
"org.apache.pig.builtin.FloatMin.FloatMin()",1,1,1
"org.apache.pig.builtin.FloatMin.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.FloatRound.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.FloatRound.exec(Tuple)",2,3,5
"org.apache.pig.builtin.FloatRound.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.FloatRoundTo.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.FloatRoundTo.exec(Tuple)",3,3,6
"org.apache.pig.builtin.FloatRoundTo.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.FloatSum.FloatSum()",1,1,1
"org.apache.pig.builtin.FuncUtils.getShipFiles(Class[])",1,1,1
"org.apache.pig.builtin.FuncUtils.getShipFiles(List<Class>)",1,2,2
"org.apache.pig.builtin.FunctionWrapperEvalFunc.FunctionWrapperEvalFunc(ExceptionalFunction)",1,2,2
"org.apache.pig.builtin.FunctionWrapperEvalFunc.FunctionWrapperEvalFunc(Function)",1,1,1
"org.apache.pig.builtin.FunctionWrapperEvalFunc.FunctionWrapperEvalFunc(String)",1,1,1
"org.apache.pig.builtin.FunctionWrapperEvalFunc.GoogleFunctionBridge.GoogleFunctionBridge(Function<S, T>)",1,1,1
"org.apache.pig.builtin.FunctionWrapperEvalFunc.GoogleFunctionBridge.apply(Object)",1,1,1
"org.apache.pig.builtin.FunctionWrapperEvalFunc.GoogleFunctionBridge.getWrappedFunction()",1,1,1
"org.apache.pig.builtin.FunctionWrapperEvalFunc.exec(Object)",1,2,2
"org.apache.pig.builtin.FunctionWrapperEvalFunc.getCounterGroup()",1,1,1
"org.apache.pig.builtin.FunctionWrapperEvalFunc.getFunctionInClass(ExceptionalFunction)",1,1,1
"org.apache.pig.builtin.FunctionWrapperEvalFunc.getFunctionOutClass(ExceptionalFunction)",1,1,1
"org.apache.pig.builtin.FunctionWrapperEvalFunc.getFunctionTypeClass(ExceptionalFunction,int)",4,5,5
"org.apache.pig.builtin.FunctionWrapperEvalFunc.initializeFunction(String)",3,1,3
"org.apache.pig.builtin.GenericInvoker.GenericInvoker()",1,1,1
"org.apache.pig.builtin.GenericInvoker.GenericInvoker(String)",1,1,1
"org.apache.pig.builtin.GenericInvoker.GenericInvoker(String,String)",1,1,1
"org.apache.pig.builtin.GenericInvoker.GenericInvoker(String,String,String)",1,1,1
"org.apache.pig.builtin.GenericInvoker.exec(Tuple)",2,1,2
"org.apache.pig.builtin.GenericInvoker.outputSchema(Schema)",2,1,2
"org.apache.pig.builtin.GetDay.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetDay.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetDay.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetDay.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.GetHour.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetHour.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetHour.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetHour.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.GetMilliSecond.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetMilliSecond.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetMilliSecond.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetMilliSecond.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.GetMinute.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetMinute.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetMinute.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetMinute.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.GetMonth.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetMonth.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetMonth.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetMonth.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.GetSecond.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetSecond.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetSecond.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetSecond.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.GetWeek.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetWeek.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetWeek.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetWeek.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.GetWeekYear.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetWeekYear.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetWeekYear.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetWeekYear.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.GetYear.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.GetYear.exec(Tuple)",2,3,4
"org.apache.pig.builtin.GetYear.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.GetYear.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.HiveUDAF.Final.Final(String)",1,1,1
"org.apache.pig.builtin.HiveUDAF.Final.Final(String,String)",1,1,1
"org.apache.pig.builtin.HiveUDAF.Final.exec(Tuple)",1,3,4
"org.apache.pig.builtin.HiveUDAF.HiveUDAF(String)",1,1,1
"org.apache.pig.builtin.HiveUDAF.HiveUDAF(String,String)",1,1,1
"org.apache.pig.builtin.HiveUDAF.Initial.Initial(String)",1,1,1
"org.apache.pig.builtin.HiveUDAF.Initial.Initial(String,String)",1,1,1
"org.apache.pig.builtin.HiveUDAF.Initial.exec(Tuple)",1,2,2
"org.apache.pig.builtin.HiveUDAF.Intermediate.Intermediate(String)",1,1,1
"org.apache.pig.builtin.HiveUDAF.Intermediate.Intermediate(String,String)",1,1,1
"org.apache.pig.builtin.HiveUDAF.Intermediate.exec(Tuple)",1,3,4
"org.apache.pig.builtin.HiveUDAF.SchemaAndEvaluatorInfo.getEvaluator(TypeInfo,GenericUDAFResolver,ConstantObjectInspectInfo)",1,2,3
"org.apache.pig.builtin.HiveUDAF.SchemaAndEvaluatorInfo.getInputObjectInspectorAsArray(TypeInfo,ConstantObjectInspectInfo)",1,4,4
"org.apache.pig.builtin.HiveUDAF.SchemaAndEvaluatorInfo.getInputTypeInfo(Schema)",1,1,1
"org.apache.pig.builtin.HiveUDAF.SchemaAndEvaluatorInfo.init(Schema,GenericUDAFResolver,Mode,ConstantObjectInspectInfo)",2,5,7
"org.apache.pig.builtin.HiveUDAF.exec(Tuple)",1,3,4
"org.apache.pig.builtin.HiveUDAF.getFinal()",2,2,2
"org.apache.pig.builtin.HiveUDAF.getInitial()",2,2,2
"org.apache.pig.builtin.HiveUDAF.getIntermed()",2,2,2
"org.apache.pig.builtin.HiveUDAF.instantiateUDAF(String)",3,3,3
"org.apache.pig.builtin.HiveUDAF.outputSchema(Schema)",1,2,3
"org.apache.pig.builtin.HiveUDF.HiveUDF(String)",3,3,3
"org.apache.pig.builtin.HiveUDF.HiveUDF(String,String)",1,1,1
"org.apache.pig.builtin.HiveUDF.SchemaInfo.init(Schema,GenericUDF,ConstantObjectInspectInfo)",1,5,6
"org.apache.pig.builtin.HiveUDF.exec(Tuple)",1,3,4
"org.apache.pig.builtin.HiveUDF.finish()",1,1,2
"org.apache.pig.builtin.HiveUDF.getShipFiles()",1,4,5
"org.apache.pig.builtin.HiveUDF.outputSchema(Schema)",1,2,3
"org.apache.pig.builtin.HiveUDFBase.ConstantObjectInspectInfo.get(int)",1,1,1
"org.apache.pig.builtin.HiveUDFBase.ConstantObjectInspectInfo.injectConstantObjectInspector(StructObjectInspector)",1,4,4
"org.apache.pig.builtin.HiveUDFBase.ConstantObjectInspectInfo.isEmpty()",1,1,1
"org.apache.pig.builtin.HiveUDFBase.ConstantObjectInspectInfo.parse(String)",1,4,4
"org.apache.pig.builtin.HiveUDFBase.ConstantObjectInspectInfo.size()",1,1,1
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.HiveReporter(PigStatusReporter)",1,1,1
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.getCounter(Enum<?>)",1,1,2
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.getCounter(String,String)",1,1,2
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.getInputSplit()",1,1,1
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.getProgress()",1,1,1
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.incrCounter(Enum<?>,long)",1,1,1
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.incrCounter(String,String,long)",1,1,1
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.progress()",1,1,1
"org.apache.pig.builtin.HiveUDFBase.HiveReporter.setStatus(String)",1,1,1
"org.apache.pig.builtin.HiveUDFBase.getErrorMessage(Class)",1,6,6
"org.apache.pig.builtin.HiveUDFBase.getShipFiles()",1,2,4
"org.apache.pig.builtin.HiveUDFBase.instantiateMapredContext()",1,2,2
"org.apache.pig.builtin.HiveUDFBase.resolveFunc(String)",3,2,4
"org.apache.pig.builtin.HiveUDTF.HiveUDTF(String)",2,2,2
"org.apache.pig.builtin.HiveUDTF.HiveUDTF(String,String)",1,1,1
"org.apache.pig.builtin.HiveUDTF.HiveUDTFCollector.collect(Object)",1,3,4
"org.apache.pig.builtin.HiveUDTF.HiveUDTFCollector.getBag()",1,1,1
"org.apache.pig.builtin.HiveUDTF.HiveUDTFCollector.init()",1,1,1
"org.apache.pig.builtin.HiveUDTF.SchemaInfo.init(Schema,GenericUDTF,ConstantObjectInspectInfo)",1,2,3
"org.apache.pig.builtin.HiveUDTF.exec(Tuple)",1,4,5
"org.apache.pig.builtin.HiveUDTF.needEndOfAllInputProcessing()",1,1,1
"org.apache.pig.builtin.HiveUDTF.outputSchema(Schema)",1,2,3
"org.apache.pig.builtin.HiveUDTF.setEndOfAllInput(boolean)",1,1,1
"org.apache.pig.builtin.HoursBetween.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.HoursBetween.exec(Tuple)",2,4,5
"org.apache.pig.builtin.HoursBetween.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.HoursBetween.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.INDEXOF.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.INDEXOF.exec(Tuple)",2,5,5
"org.apache.pig.builtin.INDEXOF.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.INVERSEMAP.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.INVERSEMAP.doInverse(Map<String, Object>)",3,4,5
"org.apache.pig.builtin.INVERSEMAP.exec(Tuple)",3,2,4
"org.apache.pig.builtin.INVERSEMAP.outputSchema(Schema)",2,2,3
"org.apache.pig.builtin.IntAbs.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.IntAbs.exec(Tuple)",2,2,4
"org.apache.pig.builtin.IntAbs.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.IntAvg.Final.exec(Tuple)",2,2,5
"org.apache.pig.builtin.IntAvg.Initial.exec(Tuple)",1,5,6
"org.apache.pig.builtin.IntAvg.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.IntAvg.accumulate(Tuple)",2,2,7
"org.apache.pig.builtin.IntAvg.cleanup()",1,1,1
"org.apache.pig.builtin.IntAvg.combine(DataBag)",1,3,4
"org.apache.pig.builtin.IntAvg.count(Tuple)",1,4,5
"org.apache.pig.builtin.IntAvg.exec(Tuple)",2,1,4
"org.apache.pig.builtin.IntAvg.getFinal()",1,1,1
"org.apache.pig.builtin.IntAvg.getInitial()",1,1,1
"org.apache.pig.builtin.IntAvg.getIntermed()",1,1,1
"org.apache.pig.builtin.IntAvg.getValue()",1,1,3
"org.apache.pig.builtin.IntAvg.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.IntAvg.sum(Tuple)",5,3,6
"org.apache.pig.builtin.IntMax.Final.getOp()",1,1,1
"org.apache.pig.builtin.IntMax.IntMax()",1,1,1
"org.apache.pig.builtin.IntMax.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.IntMin.Final.getOp()",1,1,1
"org.apache.pig.builtin.IntMin.IntMin()",1,1,1
"org.apache.pig.builtin.IntMin.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.IntSum.IntSum()",1,1,1
"org.apache.pig.builtin.InvokeForDouble.InvokeForDouble()",1,1,1
"org.apache.pig.builtin.InvokeForDouble.InvokeForDouble(String)",1,1,1
"org.apache.pig.builtin.InvokeForDouble.InvokeForDouble(String,String)",1,1,1
"org.apache.pig.builtin.InvokeForDouble.InvokeForDouble(String,String,String)",1,1,1
"org.apache.pig.builtin.InvokeForFloat.InvokeForFloat()",1,1,1
"org.apache.pig.builtin.InvokeForFloat.InvokeForFloat(String)",1,1,1
"org.apache.pig.builtin.InvokeForFloat.InvokeForFloat(String,String)",1,1,1
"org.apache.pig.builtin.InvokeForFloat.InvokeForFloat(String,String,String)",1,1,1
"org.apache.pig.builtin.InvokeForInt.InvokeForInt()",1,1,1
"org.apache.pig.builtin.InvokeForInt.InvokeForInt(String)",1,1,1
"org.apache.pig.builtin.InvokeForInt.InvokeForInt(String,String)",1,1,1
"org.apache.pig.builtin.InvokeForInt.InvokeForInt(String,String,String)",1,1,1
"org.apache.pig.builtin.InvokeForLong.InvokeForLong()",1,1,1
"org.apache.pig.builtin.InvokeForLong.InvokeForLong(String)",1,1,1
"org.apache.pig.builtin.InvokeForLong.InvokeForLong(String,String)",1,1,1
"org.apache.pig.builtin.InvokeForLong.InvokeForLong(String,String,String)",1,1,1
"org.apache.pig.builtin.InvokeForString.InvokeForString()",1,1,1
"org.apache.pig.builtin.InvokeForString.InvokeForString(String)",1,1,1
"org.apache.pig.builtin.InvokeForString.InvokeForString(String,String)",1,1,1
"org.apache.pig.builtin.InvokeForString.InvokeForString(String,String,String)",1,1,1
"org.apache.pig.builtin.Invoker.Invoker(String,String)",1,1,1
"org.apache.pig.builtin.Invoker.Invoker(String,String,String)",1,5,7
"org.apache.pig.builtin.Invoker.bagToNumberList(DataBag)",1,2,2
"org.apache.pig.builtin.Invoker.convertToExpectedArg(Class<T>,Object)",1,14,14
"org.apache.pig.builtin.Invoker.dropFirstClass(Class<?>[])",2,2,2
"org.apache.pig.builtin.Invoker.dropFirstObject(Object[])",2,2,2
"org.apache.pig.builtin.Invoker.getReturnType()",1,1,1
"org.apache.pig.builtin.Invoker.invoke(Tuple)",2,2,5
"org.apache.pig.builtin.Invoker.stringToClass(String)",11,10,11
"org.apache.pig.builtin.Invoker.tupleToArgs(Tuple)",3,4,8
"org.apache.pig.builtin.Invoker.unPrimitivize(Class<?>)",5,3,5
"org.apache.pig.builtin.InvokerGenerator.ByteClassLoader.ByteClassLoader(byte[])",1,1,1
"org.apache.pig.builtin.InvokerGenerator.ByteClassLoader.findClass(String)",1,1,1
"org.apache.pig.builtin.InvokerGenerator.ByteClassLoader.getInvokerFunction(String,byte[])",1,1,3
"org.apache.pig.builtin.InvokerGenerator.InvokerGenerator(String,String,String)",1,1,2
"org.apache.pig.builtin.InvokerGenerator.addConst(MethodVisitor,int)",2,2,8
"org.apache.pig.builtin.InvokerGenerator.boxIfPrimitive(MethodVisitor,Class<?>)",2,1,2
"org.apache.pig.builtin.InvokerGenerator.buildSignatureString(Class<?>[],Class<?>)",1,4,4
"org.apache.pig.builtin.InvokerGenerator.exec(Tuple)",1,2,2
"org.apache.pig.builtin.InvokerGenerator.generateInvokerFunction(String,Method,boolean,Class<?>[])",1,1,1
"org.apache.pig.builtin.InvokerGenerator.generateInvokerFunctionBytecode(String,Method,boolean,Class<?>[])",1,5,8
"org.apache.pig.builtin.InvokerGenerator.getArgumentClassArray(String[])",2,3,4
"org.apache.pig.builtin.InvokerGenerator.getMethodStyleName(Class<?>)",2,2,2
"org.apache.pig.builtin.InvokerGenerator.getObjectVersion(Class<?>)",2,2,2
"org.apache.pig.builtin.InvokerGenerator.getUniqueId()",1,1,1
"org.apache.pig.builtin.InvokerGenerator.initialize()",2,4,6
"org.apache.pig.builtin.InvokerGenerator.loadAndStoreArgument(MethodVisitor,int,int,String)",1,1,1
"org.apache.pig.builtin.InvokerGenerator.makeConstructor(ClassWriter)",1,1,1
"org.apache.pig.builtin.InvokerGenerator.outputSchema(Schema)",1,2,2
"org.apache.pig.builtin.InvokerGenerator.unboxIfPrimitive(MethodVisitor,Class<?>)",2,1,2
"org.apache.pig.builtin.IsEmpty.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.IsEmpty.exec(Tuple)",3,3,4
"org.apache.pig.builtin.JsonLoader.JsonLoader()",1,1,1
"org.apache.pig.builtin.JsonLoader.JsonLoader(String)",1,1,1
"org.apache.pig.builtin.JsonLoader.getInputFormat()",1,1,1
"org.apache.pig.builtin.JsonLoader.getLoadCaster()",1,1,1
"org.apache.pig.builtin.JsonLoader.getNext()",4,5,7
"org.apache.pig.builtin.JsonLoader.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.builtin.JsonLoader.getSchema(String,Job)",3,2,3
"org.apache.pig.builtin.JsonLoader.getShipFiles()",1,1,1
"org.apache.pig.builtin.JsonLoader.getStatistics(String,Job)",1,1,1
"org.apache.pig.builtin.JsonLoader.prepareToRead(RecordReader,PigSplit)",2,1,2
"org.apache.pig.builtin.JsonLoader.readField(JsonParser,ResourceFieldSchema,int)",11,14,18
"org.apache.pig.builtin.JsonLoader.readPrimitive(JsonParser,JsonToken,ResourceFieldSchema)",11,11,13
"org.apache.pig.builtin.JsonLoader.setLocation(String,Job)",1,1,1
"org.apache.pig.builtin.JsonLoader.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.builtin.JsonLoader.setUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.JsonMetadata.JsonMetadata()",1,1,1
"org.apache.pig.builtin.JsonMetadata.JsonMetadata(String,String,String)",1,1,1
"org.apache.pig.builtin.JsonMetadata.exists(ElementDescriptor)",2,2,2
"org.apache.pig.builtin.JsonMetadata.findMetaFile(String,String,Configuration)",1,7,7
"org.apache.pig.builtin.JsonMetadata.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.builtin.JsonMetadata.getSchema(String,Job)",1,1,1
"org.apache.pig.builtin.JsonMetadata.getSchema(String,Job,boolean)",2,6,6
"org.apache.pig.builtin.JsonMetadata.getStatistics(String,Job)",2,6,6
"org.apache.pig.builtin.JsonMetadata.nullOrException(boolean,String,IOException)",2,1,2
"org.apache.pig.builtin.JsonMetadata.setFieldDel(byte)",1,1,1
"org.apache.pig.builtin.JsonMetadata.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.builtin.JsonMetadata.setRecordDel(byte)",1,1,1
"org.apache.pig.builtin.JsonMetadata.storeSchema(ResourceSchema,String,Job)",1,9,10
"org.apache.pig.builtin.JsonMetadata.storeStatistics(ResourceStatistics,String,Job)",1,5,5
"org.apache.pig.builtin.JsonStorage.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.builtin.JsonStorage.fixSchema(ResourceSchema)",1,3,3
"org.apache.pig.builtin.JsonStorage.getCacheFiles()",1,1,1
"org.apache.pig.builtin.JsonStorage.getOutputFormat()",1,1,1
"org.apache.pig.builtin.JsonStorage.getShipFiles()",1,1,1
"org.apache.pig.builtin.JsonStorage.prepareToWrite(RecordWriter)",2,1,2
"org.apache.pig.builtin.JsonStorage.putNext(Tuple)",1,3,4
"org.apache.pig.builtin.JsonStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.JsonStorage.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.builtin.JsonStorage.storeSchema(ResourceSchema,String,Job)",1,1,1
"org.apache.pig.builtin.JsonStorage.storeStatistics(ResourceStatistics,String,Job)",1,1,1
"org.apache.pig.builtin.JsonStorage.writeField(JsonGenerator,ResourceFieldSchema,Object)",7,12,25
"org.apache.pig.builtin.KEYSET.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.KEYSET.exec(Tuple)",3,3,5
"org.apache.pig.builtin.KEYSET.outputSchema(Schema)",2,2,4
"org.apache.pig.builtin.LAST_INDEX_OF.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.LAST_INDEX_OF.exec(Tuple)",2,3,4
"org.apache.pig.builtin.LAST_INDEX_OF.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.LAST_INDEX_OF.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.LCFIRST.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.LCFIRST.exec(Tuple)",4,3,6
"org.apache.pig.builtin.LCFIRST.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.LOG.compute(Double)",1,1,1
"org.apache.pig.builtin.LOG10.compute(Double)",1,1,1
"org.apache.pig.builtin.LOWER.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.LOWER.exec(Tuple)",2,3,4
"org.apache.pig.builtin.LOWER.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.LOWER.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.LTRIM.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.LTRIM.exec(Tuple)",4,3,6
"org.apache.pig.builtin.LTRIM.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.LTRIM.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.LongAbs.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.LongAbs.exec(Tuple)",2,2,4
"org.apache.pig.builtin.LongAbs.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.LongAvg.Final.exec(Tuple)",2,2,5
"org.apache.pig.builtin.LongAvg.Initial.exec(Tuple)",1,4,5
"org.apache.pig.builtin.LongAvg.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.LongAvg.accumulate(Tuple)",2,2,7
"org.apache.pig.builtin.LongAvg.cleanup()",1,1,1
"org.apache.pig.builtin.LongAvg.combine(DataBag)",1,3,4
"org.apache.pig.builtin.LongAvg.count(Tuple)",1,4,5
"org.apache.pig.builtin.LongAvg.exec(Tuple)",2,1,4
"org.apache.pig.builtin.LongAvg.getFinal()",1,1,1
"org.apache.pig.builtin.LongAvg.getInitial()",1,1,1
"org.apache.pig.builtin.LongAvg.getIntermed()",1,1,1
"org.apache.pig.builtin.LongAvg.getValue()",1,1,3
"org.apache.pig.builtin.LongAvg.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.LongAvg.sum(Tuple)",5,3,6
"org.apache.pig.builtin.LongMax.Final.getOp()",1,1,1
"org.apache.pig.builtin.LongMax.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.LongMax.LongMax()",1,1,1
"org.apache.pig.builtin.LongMin.Final.getOp()",1,1,1
"org.apache.pig.builtin.LongMin.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.LongMin.LongMin()",1,1,1
"org.apache.pig.builtin.LongSum.Final.getOp()",1,1,1
"org.apache.pig.builtin.LongSum.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.LongSum.LongSum()",1,1,1
"org.apache.pig.builtin.MAX.Final.getOp()",1,1,1
"org.apache.pig.builtin.MAX.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.MAX.MAX()",1,1,1
"org.apache.pig.builtin.MAX.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.MIN.Final.getOp()",1,1,1
"org.apache.pig.builtin.MIN.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.MIN.MIN()",1,1,1
"org.apache.pig.builtin.MIN.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.MapSize.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.MapSize.exec(Tuple)",1,3,4
"org.apache.pig.builtin.MapSize.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.MilliSecondsBetween.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.MilliSecondsBetween.exec(Tuple)",2,4,5
"org.apache.pig.builtin.MilliSecondsBetween.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.MilliSecondsBetween.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.MinutesBetween.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.MinutesBetween.exec(Tuple)",2,4,5
"org.apache.pig.builtin.MinutesBetween.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.MinutesBetween.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.MonthsBetween.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.MonthsBetween.exec(Tuple)",2,4,5
"org.apache.pig.builtin.MonthsBetween.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.MonthsBetween.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.OrcStorage.NonEmptyOrcFileFilter.NonEmptyOrcFileFilter(FileSystem)",1,1,1
"org.apache.pig.builtin.OrcStorage.NonEmptyOrcFileFilter.accept(Path)",2,1,3
"org.apache.pig.builtin.OrcStorage.OrcStorage()",1,1,1
"org.apache.pig.builtin.OrcStorage.OrcStorage(String)",1,7,7
"org.apache.pig.builtin.OrcStorage.buildSearchArgument(Expression,Builder)",5,5,17
"org.apache.pig.builtin.OrcStorage.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.builtin.OrcStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.builtin.OrcStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.builtin.OrcStorage.getColumnName(Expression)",1,2,2
"org.apache.pig.builtin.OrcStorage.getExpressionValue(Expression)",4,4,4
"org.apache.pig.builtin.OrcStorage.getFeatures()",1,1,1
"org.apache.pig.builtin.OrcStorage.getFirstFile(String,FileSystem,PathFilter)",1,4,5
"org.apache.pig.builtin.OrcStorage.getInputFormat()",1,1,1
"org.apache.pig.builtin.OrcStorage.getNext()",2,1,3
"org.apache.pig.builtin.OrcStorage.getOutputFormat()",1,1,1
"org.apache.pig.builtin.OrcStorage.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.builtin.OrcStorage.getPredicateFields(String,Job)",2,3,4
"org.apache.pig.builtin.OrcStorage.getReqiredColumnIdString(boolean[])",1,4,4
"org.apache.pig.builtin.OrcStorage.getReqiredColumnNamesString(ResourceSchema)",1,3,3
"org.apache.pig.builtin.OrcStorage.getReqiredColumnNamesString(ResourceSchema,boolean[])",1,4,4
"org.apache.pig.builtin.OrcStorage.getSchema(String,Job)",3,2,3
"org.apache.pig.builtin.OrcStorage.getSearchArgObjValue(Object)",4,4,4
"org.apache.pig.builtin.OrcStorage.getSearchArgObjValues(List<Object>)",2,4,5
"org.apache.pig.builtin.OrcStorage.getSearchArgument(Expression)",2,5,6
"org.apache.pig.builtin.OrcStorage.getShipFiles()",1,2,4
"org.apache.pig.builtin.OrcStorage.getStatistics(String,Job)",1,1,1
"org.apache.pig.builtin.OrcStorage.getSupportedExpressionTypes()",1,1,1
"org.apache.pig.builtin.OrcStorage.getTypeInfo(String,Job)",1,3,3
"org.apache.pig.builtin.OrcStorage.getTypeInfoFromLocation(String,Job)",2,2,2
"org.apache.pig.builtin.OrcStorage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.builtin.OrcStorage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.builtin.OrcStorage.pushProjection(RequiredFieldList)",3,4,6
"org.apache.pig.builtin.OrcStorage.putNext(Tuple)",1,1,2
"org.apache.pig.builtin.OrcStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.builtin.OrcStorage.setLocation(String,Job)",1,9,10
"org.apache.pig.builtin.OrcStorage.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.builtin.OrcStorage.setPushdownPredicate(Expression)",2,2,3
"org.apache.pig.builtin.OrcStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.OrcStorage.setStoreLocation(String,Job)",1,10,10
"org.apache.pig.builtin.OrcStorage.setUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.ParquetLoader.ParquetLoader()",1,1,1
"org.apache.pig.builtin.ParquetLoader.ParquetLoader(String)",1,2,2
"org.apache.pig.builtin.ParquetLoader.getFeatures()",1,1,1
"org.apache.pig.builtin.ParquetLoader.init(LoadMetadata)",1,1,1
"org.apache.pig.builtin.ParquetLoader.pushProjection(RequiredFieldList)",1,1,1
"org.apache.pig.builtin.ParquetLoader.setLocation(String,Job)",1,1,1
"org.apache.pig.builtin.ParquetStorer.ParquetStorer()",1,2,2
"org.apache.pig.builtin.ParquetStorer.init(StoreMetadata)",1,1,1
"org.apache.pig.builtin.ParquetStorer.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.builtin.PigStorage.PigStorage()",1,1,1
"org.apache.pig.builtin.PigStorage.PigStorage(String)",1,1,1
"org.apache.pig.builtin.PigStorage.PigStorage(String,String)",1,4,5
"org.apache.pig.builtin.PigStorage.addTupleValue(ArrayList<Object>,byte[],int,int)",1,1,1
"org.apache.pig.builtin.PigStorage.applySchema(Tuple)",1,11,17
"org.apache.pig.builtin.PigStorage.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.builtin.PigStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.builtin.PigStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.builtin.PigStorage.cleanupOutput(POStore,Job)",1,2,3
"org.apache.pig.builtin.PigStorage.equals(Object)",2,2,2
"org.apache.pig.builtin.PigStorage.equals(PigStorage)",1,1,1
"org.apache.pig.builtin.PigStorage.getFeatures()",1,1,1
"org.apache.pig.builtin.PigStorage.getInputFormat()",2,2,3
"org.apache.pig.builtin.PigStorage.getNext()",2,10,17
"org.apache.pig.builtin.PigStorage.getOutputFormat()",1,1,1
"org.apache.pig.builtin.PigStorage.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.builtin.PigStorage.getSchema(String,Job)",1,5,6
"org.apache.pig.builtin.PigStorage.getStatistics(String,Job)",1,1,1
"org.apache.pig.builtin.PigStorage.hashCode()",1,1,1
"org.apache.pig.builtin.PigStorage.populateValidOptions()",1,1,1
"org.apache.pig.builtin.PigStorage.prepareToRead(RecordReader,PigSplit)",1,2,3
"org.apache.pig.builtin.PigStorage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.builtin.PigStorage.pushProjection(RequiredFieldList)",3,6,8
"org.apache.pig.builtin.PigStorage.putNext(Tuple)",1,1,2
"org.apache.pig.builtin.PigStorage.readField(byte[],int,int)",2,1,2
"org.apache.pig.builtin.PigStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.builtin.PigStorage.setCompression(Path,Job)",1,4,4
"org.apache.pig.builtin.PigStorage.setLocation(String,Job)",1,1,1
"org.apache.pig.builtin.PigStorage.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.builtin.PigStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.PigStorage.setStoreLocation(String,Job)",2,2,3
"org.apache.pig.builtin.PigStorage.setUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.PigStorage.shouldOverwrite()",1,1,1
"org.apache.pig.builtin.PigStorage.storeSchema(ResourceSchema,String,Job)",1,2,2
"org.apache.pig.builtin.PigStorage.storeStatistics(ResourceStatistics,String,Job)",1,1,1
"org.apache.pig.builtin.PigStreaming.PigStreaming()",1,1,1
"org.apache.pig.builtin.PigStreaming.PigStreaming(String)",1,1,1
"org.apache.pig.builtin.PigStreaming.deserialize(byte[],int,int)",1,1,1
"org.apache.pig.builtin.PigStreaming.getLoadCaster()",1,1,1
"org.apache.pig.builtin.PigStreaming.serializeToBytes(Tuple)",1,3,3
"org.apache.pig.builtin.PluckTuple.PluckTuple(String)",1,1,1
"org.apache.pig.builtin.PluckTuple.PluckTuple(String,String)",1,1,1
"org.apache.pig.builtin.PluckTuple.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.PluckTuple.exec(Tuple)",1,10,11
"org.apache.pig.builtin.PluckTuple.outputSchema(Schema)",4,10,14
"org.apache.pig.builtin.RANDOM.RANDOM()",1,1,1
"org.apache.pig.builtin.RANDOM.RANDOM(String)",1,1,1
"org.apache.pig.builtin.RANDOM.exec(Tuple)",1,1,1
"org.apache.pig.builtin.RANDOM.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT.REGEX_EXTRACT()",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT.REGEX_EXTRACT(String)",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT.exec(Tuple)",6,8,11
"org.apache.pig.builtin.REGEX_EXTRACT.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT.outputSchema(Schema)",1,1,2
"org.apache.pig.builtin.REGEX_EXTRACT_ALL.REGEX_EXTRACT_ALL()",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT_ALL.REGEX_EXTRACT_ALL(String)",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT_ALL.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT_ALL.exec(Tuple)",5,7,11
"org.apache.pig.builtin.REGEX_EXTRACT_ALL.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.REGEX_EXTRACT_ALL.outputSchema(Schema)",1,1,2
"org.apache.pig.builtin.REPLACE.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.REPLACE.exec(Tuple)",2,3,4
"org.apache.pig.builtin.REPLACE.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.REPLACE.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.ROUND.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ROUND.exec(Tuple)",2,4,6
"org.apache.pig.builtin.ROUND.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.ROUND.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.ROUND_TO.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ROUND_TO.exec(Tuple)",3,4,7
"org.apache.pig.builtin.ROUND_TO.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.ROUND_TO.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.RTRIM.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.RTRIM.exec(Tuple)",4,3,6
"org.apache.pig.builtin.RTRIM.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.RTRIM.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.RollupDimensions.RollupDimensions()",1,1,1
"org.apache.pig.builtin.RollupDimensions.RollupDimensions(String)",1,1,1
"org.apache.pig.builtin.RollupDimensions.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.RollupDimensions.exec(Tuple)",1,1,1
"org.apache.pig.builtin.RollupDimensions.iterativelyRollup(List<Tuple>,Tuple)",1,2,2
"org.apache.pig.builtin.RollupDimensions.outputSchema(Schema)",1,1,2
"org.apache.pig.builtin.RoundRobinPartitioner.getPartition(Writable,Writable,int)",1,1,1
"org.apache.pig.builtin.SIN.compute(Double)",1,1,1
"org.apache.pig.builtin.SINH.compute(Double)",1,1,1
"org.apache.pig.builtin.SIZE.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.SIZE.exec(Tuple)",1,3,4
"org.apache.pig.builtin.SIZE.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.SIZE.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.SPRINTF.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.SPRINTF.exec(Tuple)",5,4,8
"org.apache.pig.builtin.SPRINTF.getSchemaType()",1,1,1
"org.apache.pig.builtin.SPRINTF.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.SQRT.compute(Double)",1,1,1
"org.apache.pig.builtin.STARTSWITH.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.STARTSWITH.exec(Tuple)",2,6,6
"org.apache.pig.builtin.STARTSWITH.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.STARTSWITH.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.STRSPLIT.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.STRSPLIT.exec(Tuple)",3,6,9
"org.apache.pig.builtin.STRSPLIT.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.STRSPLIT.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.STRSPLITTOBAG.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.STRSPLITTOBAG.exec(Tuple)",3,7,10
"org.apache.pig.builtin.STRSPLITTOBAG.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.STRSPLITTOBAG.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.SUBSTRING.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.SUBSTRING.exec(Tuple)",2,6,6
"org.apache.pig.builtin.SUBSTRING.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.SUBSTRING.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.SUBTRACT.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.SUBTRACT.classNameOf(Object)",1,2,2
"org.apache.pig.builtin.SUBTRACT.exec(Tuple)",2,2,2
"org.apache.pig.builtin.SUBTRACT.subtract(DataBag,DataBag)",1,3,3
"org.apache.pig.builtin.SUBTRACT.toDataBag(Object)",3,2,3
"org.apache.pig.builtin.SUBTRACT.toSet(DataBag)",1,2,2
"org.apache.pig.builtin.SUM.Final.getOp()",1,1,1
"org.apache.pig.builtin.SUM.Intermediate.getOp()",1,1,1
"org.apache.pig.builtin.SUM.SUM()",1,1,1
"org.apache.pig.builtin.SUM.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.SecondsBetween.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.SecondsBetween.exec(Tuple)",2,4,5
"org.apache.pig.builtin.SecondsBetween.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.SecondsBetween.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.StringConcat.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.StringConcat.exec(Tuple)",4,4,7
"org.apache.pig.builtin.StringConcat.getSchemaType()",1,1,1
"org.apache.pig.builtin.StringConcat.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.StringMax.Final.exec(Tuple)",1,2,3
"org.apache.pig.builtin.StringMax.Initial.exec(Tuple)",1,3,4
"org.apache.pig.builtin.StringMax.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.StringMax.accumulate(Tuple)",2,3,6
"org.apache.pig.builtin.StringMax.cleanup()",1,1,1
"org.apache.pig.builtin.StringMax.exec(Tuple)",1,1,2
"org.apache.pig.builtin.StringMax.getFinal()",1,1,1
"org.apache.pig.builtin.StringMax.getInitial()",1,1,1
"org.apache.pig.builtin.StringMax.getIntermed()",1,1,1
"org.apache.pig.builtin.StringMax.getValue()",1,1,1
"org.apache.pig.builtin.StringMax.max(Tuple)",4,4,8
"org.apache.pig.builtin.StringMax.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.StringMin.Final.exec(Tuple)",1,2,3
"org.apache.pig.builtin.StringMin.Initial.exec(Tuple)",1,3,4
"org.apache.pig.builtin.StringMin.Intermediate.exec(Tuple)",1,2,3
"org.apache.pig.builtin.StringMin.accumulate(Tuple)",2,3,6
"org.apache.pig.builtin.StringMin.cleanup()",1,1,1
"org.apache.pig.builtin.StringMin.exec(Tuple)",1,1,2
"org.apache.pig.builtin.StringMin.getFinal()",1,1,1
"org.apache.pig.builtin.StringMin.getInitial()",1,1,1
"org.apache.pig.builtin.StringMin.getIntermed()",1,1,1
"org.apache.pig.builtin.StringMin.getValue()",1,1,1
"org.apache.pig.builtin.StringMin.min(Tuple)",4,4,8
"org.apache.pig.builtin.StringMin.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.StringSize.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.StringSize.exec(Tuple)",1,3,4
"org.apache.pig.builtin.StringSize.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.SubtractDuration.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.SubtractDuration.exec(Tuple)",2,4,5
"org.apache.pig.builtin.SubtractDuration.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.SubtractDuration.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.TAN.compute(Double)",1,1,1
"org.apache.pig.builtin.TANH.compute(Double)",1,1,1
"org.apache.pig.builtin.TOBAG.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.TOBAG.exec(Tuple)",1,3,4
"org.apache.pig.builtin.TOBAG.nullEquals(Schema,Schema)",3,1,3
"org.apache.pig.builtin.TOBAG.outputSchema(Schema)",6,6,8
"org.apache.pig.builtin.TOKENIZE.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.TOKENIZE.exec(Tuple)",7,5,9
"org.apache.pig.builtin.TOKENIZE.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.TOKENIZE.outputSchema(Schema)",1,1,2
"org.apache.pig.builtin.TOMAP.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.TOMAP.exec(Tuple)",7,6,12
"org.apache.pig.builtin.TOMAP.outputSchema(Schema)",8,11,12
"org.apache.pig.builtin.TOP.Final.Final()",1,1,1
"org.apache.pig.builtin.TOP.Final.Final(String)",1,1,1
"org.apache.pig.builtin.TOP.Final.exec(Tuple)",7,11,18
"org.apache.pig.builtin.TOP.Initial.Initial()",1,1,1
"org.apache.pig.builtin.TOP.Initial.Initial(String)",1,1,1
"org.apache.pig.builtin.TOP.Initial.exec(Tuple)",3,3,6
"org.apache.pig.builtin.TOP.Intermed.Intermed()",1,1,1
"org.apache.pig.builtin.TOP.Intermed.Intermed(String)",1,1,1
"org.apache.pig.builtin.TOP.Intermed.exec(Tuple)",6,11,17
"org.apache.pig.builtin.TOP.TOP()",1,1,1
"org.apache.pig.builtin.TOP.TOP(String)",1,1,1
"org.apache.pig.builtin.TOP.TupleComparator.TupleComparator(int,boolean)",1,1,1
"org.apache.pig.builtin.TOP.TupleComparator.compare(Tuple,Tuple)",3,4,7
"org.apache.pig.builtin.TOP.accumulate(Tuple)",3,2,7
"org.apache.pig.builtin.TOP.cleanup()",1,1,1
"org.apache.pig.builtin.TOP.decideSortOrder(String)",3,3,3
"org.apache.pig.builtin.TOP.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.TOP.getFinal()",1,1,1
"org.apache.pig.builtin.TOP.getInitial()",1,1,1
"org.apache.pig.builtin.TOP.getIntermed()",1,1,1
"org.apache.pig.builtin.TOP.getValue()",4,5,7
"org.apache.pig.builtin.TOP.outputSchema(Schema)",2,1,3
"org.apache.pig.builtin.TOP.updateTop(PriorityQueue<Tuple>,int,DataBag)",1,3,3
"org.apache.pig.builtin.TOTUPLE.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.TOTUPLE.exec(Tuple)",1,1,1
"org.apache.pig.builtin.TOTUPLE.outputSchema(Schema)",1,2,3
"org.apache.pig.builtin.TRIM.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.TRIM.exec(Tuple)",4,3,6
"org.apache.pig.builtin.TRIM.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.TRIM.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToBag(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToBigDecimal(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToBigInteger(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToBoolean(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToCharArray(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToDateTime(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToDouble(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToFloat(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToInteger(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToLong(byte[])",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToMap(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.builtin.TextLoader.bytesToTuple(byte[],ResourceFieldSchema)",1,1,1
"org.apache.pig.builtin.TextLoader.getInputFormat()",2,2,3
"org.apache.pig.builtin.TextLoader.getLoadCaster()",1,1,1
"org.apache.pig.builtin.TextLoader.getNext()",2,1,3
"org.apache.pig.builtin.TextLoader.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.builtin.TextLoader.setLocation(String,Job)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(Boolean)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(DataBag)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(DateTime)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(Double)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(Float)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(Integer)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(Long)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(Map<String, Object>)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(String)",1,1,1
"org.apache.pig.builtin.TextLoader.toBytes(Tuple)",1,1,1
"org.apache.pig.builtin.ToDate.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ToDate.allowIso8601Space(String)",2,3,4
"org.apache.pig.builtin.ToDate.exec(Tuple)",2,3,4
"org.apache.pig.builtin.ToDate.extractDateTime(String)",1,1,1
"org.apache.pig.builtin.ToDate.extractDateTimeZone(String)",1,1,1
"org.apache.pig.builtin.ToDate.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.ToDate.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.ToDate2ARGS.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ToDate2ARGS.exec(Tuple)",2,3,4
"org.apache.pig.builtin.ToDate3ARGS.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ToDate3ARGS.exec(Tuple)",2,3,4
"org.apache.pig.builtin.ToDateISO.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ToDateISO.exec(Tuple)",2,3,4
"org.apache.pig.builtin.ToMilliSeconds.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ToMilliSeconds.exec(Tuple)",2,3,4
"org.apache.pig.builtin.ToMilliSeconds.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.ToMilliSeconds.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.ToString.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ToString.exec(Tuple)",4,5,6
"org.apache.pig.builtin.ToString.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.ToString.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.ToUnixTime.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.ToUnixTime.exec(Tuple)",2,3,4
"org.apache.pig.builtin.ToUnixTime.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.ToUnixTime.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.TrevniStorage.TrevniStorage()",1,1,1
"org.apache.pig.builtin.TrevniStorage.TrevniStorage(String,String)",1,1,1
"org.apache.pig.builtin.TrevniStorage.getAvroSchema(Path[],Job)",4,6,6
"org.apache.pig.builtin.TrevniStorage.getInputFormat()",2,4,4
"org.apache.pig.builtin.TrevniStorage.getOutputFormat()",4,8,10
"org.apache.pig.builtin.TupleSize.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.TupleSize.exec(Tuple)",2,3,4
"org.apache.pig.builtin.TupleSize.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.UCFIRST.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.UCFIRST.exec(Tuple)",4,3,6
"org.apache.pig.builtin.UCFIRST.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.UPPER.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.UPPER.exec(Tuple)",2,5,6
"org.apache.pig.builtin.UPPER.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.UPPER.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.UniqueID.exec(Tuple)",1,1,1
"org.apache.pig.builtin.UniqueID.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.Utf8StorageConverter()",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.bytesToBag(byte[],ResourceFieldSchema)",2,2,3
"org.apache.pig.builtin.Utf8StorageConverter.bytesToBigDecimal(byte[])",2,1,3
"org.apache.pig.builtin.Utf8StorageConverter.bytesToBigInteger(byte[])",2,1,3
"org.apache.pig.builtin.Utf8StorageConverter.bytesToBoolean(byte[])",4,2,4
"org.apache.pig.builtin.Utf8StorageConverter.bytesToCharArray(byte[])",2,1,2
"org.apache.pig.builtin.Utf8StorageConverter.bytesToDateTime(byte[])",2,2,3
"org.apache.pig.builtin.Utf8StorageConverter.bytesToDouble(byte[])",2,2,4
"org.apache.pig.builtin.Utf8StorageConverter.bytesToFloat(byte[])",2,2,7
"org.apache.pig.builtin.Utf8StorageConverter.bytesToInteger(byte[])",4,6,9
"org.apache.pig.builtin.Utf8StorageConverter.bytesToLong(byte[])",4,8,11
"org.apache.pig.builtin.Utf8StorageConverter.bytesToMap(byte[],ResourceFieldSchema)",2,2,3
"org.apache.pig.builtin.Utf8StorageConverter.bytesToObject(byte[],ResourceFieldSchema)",1,2,2
"org.apache.pig.builtin.Utf8StorageConverter.bytesToTuple(byte[],ResourceFieldSchema)",2,2,3
"org.apache.pig.builtin.Utf8StorageConverter.consumeBag(PushbackInputStream,ResourceFieldSchema)",9,4,11
"org.apache.pig.builtin.Utf8StorageConverter.consumeComplexType(PushbackInputStream,ResourceFieldSchema)",2,2,5
"org.apache.pig.builtin.Utf8StorageConverter.consumeMap(PushbackInputStream,ResourceFieldSchema)",16,14,28
"org.apache.pig.builtin.Utf8StorageConverter.consumeTuple(PushbackInputStream,ResourceFieldSchema)",20,17,29
"org.apache.pig.builtin.Utf8StorageConverter.findStartChar(char)",5,2,5
"org.apache.pig.builtin.Utf8StorageConverter.parseSimpleType(byte[],ResourceFieldSchema)",2,2,12
"org.apache.pig.builtin.Utf8StorageConverter.sanityCheckIntegerLong(String)",3,5,6
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(BigDecimal)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(BigInteger)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(Boolean)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(DataBag)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(DataByteArray)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(DateTime)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(Double)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(Float)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(Integer)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(Long)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(Map<String, Object>)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(String)",1,1,1
"org.apache.pig.builtin.Utf8StorageConverter.toBytes(Tuple)",1,1,1
"org.apache.pig.builtin.VALUELIST.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.VALUELIST.exec(Tuple)",3,3,5
"org.apache.pig.builtin.VALUELIST.outputSchema(Schema)",3,3,7
"org.apache.pig.builtin.VALUESET.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.VALUESET.exec(Tuple)",3,4,6
"org.apache.pig.builtin.VALUESET.getInitialSetSize(Collection<Object>)",1,1,1
"org.apache.pig.builtin.VALUESET.outputSchema(Schema)",3,3,7
"org.apache.pig.builtin.WeeksBetween.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.WeeksBetween.exec(Tuple)",2,4,5
"org.apache.pig.builtin.WeeksBetween.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.WeeksBetween.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.YearsBetween.allowCompileTimeCalculation()",1,1,1
"org.apache.pig.builtin.YearsBetween.exec(Tuple)",2,4,5
"org.apache.pig.builtin.YearsBetween.getArgToFuncMapping()",1,1,1
"org.apache.pig.builtin.YearsBetween.outputSchema(Schema)",1,1,1
"org.apache.pig.builtin.mock.Storage.Data.get(String)",2,1,2
"org.apache.pig.builtin.mock.Storage.Data.getSchema(String)",1,1,1
"org.apache.pig.builtin.mock.Storage.Data.set(String,Collection<Tuple>)",1,1,1
"org.apache.pig.builtin.mock.Storage.Data.set(String,Schema,Collection<Tuple>)",2,1,2
"org.apache.pig.builtin.mock.Storage.Data.set(String,Schema,Tuple...)",1,1,1
"org.apache.pig.builtin.mock.Storage.Data.set(String,String,Collection<Tuple>)",1,1,1
"org.apache.pig.builtin.mock.Storage.Data.set(String,String,Tuple...)",1,1,1
"org.apache.pig.builtin.mock.Storage.Data.set(String,Tuple...)",1,1,1
"org.apache.pig.builtin.mock.Storage.Data.setInternal(String,String,Collection<Tuple>)",3,2,4
"org.apache.pig.builtin.mock.Storage.Data.setSchema(String,Schema)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputFormat.MockInputFormat(String)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputFormat.getSplits(JobContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputSplit.MockInputSplit()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputSplit.MockInputSplit(String)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputSplit.equals(Object)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputSplit.getLength()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputSplit.getLocations()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputSplit.hashCode()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputSplit.readFields(DataInput)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockInputSplit.write(DataOutput)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockOutputCommitter.abortTask(TaskAttemptContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockOutputCommitter.commitTask(TaskAttemptContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockOutputCommitter.needsTaskCommit(TaskAttemptContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockOutputCommitter.setupJob(JobContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockOutputCommitter.setupTask(TaskAttemptContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockOutputFormat.checkOutputSpecs(JobContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockOutputFormat.getOutputCommitter(TaskAttemptContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockOutputFormat.getRecordWriter(TaskAttemptContext)",2,2,2
"org.apache.pig.builtin.mock.Storage.MockRecordReader.close()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockRecordReader.getCurrentKey()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockRecordReader.getCurrentValue()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockRecordReader.getProgress()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockRecordReader.initialize(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockRecordReader.nextKeyValue()",1,1,1
"org.apache.pig.builtin.mock.Storage.MockRecordWriter.MockRecordWriter(String)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockRecordWriter.close(TaskAttemptContext)",1,1,1
"org.apache.pig.builtin.mock.Storage.MockRecordWriter.write(Object,Object)",1,1,1
"org.apache.pig.builtin.mock.Storage.Parts.Parts(String)",1,1,1
"org.apache.pig.builtin.mock.Storage.Parts.getAll()",1,2,2
"org.apache.pig.builtin.mock.Storage.Parts.set(String,Collection<Tuple>)",2,1,2
"org.apache.pig.builtin.mock.Storage.bag(Tuple...)",1,1,1
"org.apache.pig.builtin.mock.Storage.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.builtin.mock.Storage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.getData(Job)",3,1,3
"org.apache.pig.builtin.mock.Storage.getInputFormat()",1,1,1
"org.apache.pig.builtin.mock.Storage.getLoadCaster()",1,1,1
"org.apache.pig.builtin.mock.Storage.getNext()",2,2,3
"org.apache.pig.builtin.mock.Storage.getOutputFormat()",1,1,1
"org.apache.pig.builtin.mock.Storage.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.getSchema(String,Job)",1,1,2
"org.apache.pig.builtin.mock.Storage.getStatistics(String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.init(String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.map(Object...)",2,2,7
"org.apache.pig.builtin.mock.Storage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.builtin.mock.Storage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.builtin.mock.Storage.putNext(Tuple)",1,1,1
"org.apache.pig.builtin.mock.Storage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.builtin.mock.Storage.relativeToAbsolutePath(String,Path)",1,1,1
"org.apache.pig.builtin.mock.Storage.resetData(PigContext)",1,3,3
"org.apache.pig.builtin.mock.Storage.resetData(PigServer)",1,1,1
"org.apache.pig.builtin.mock.Storage.schema(String)",1,1,1
"org.apache.pig.builtin.mock.Storage.setLocation(String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.builtin.mock.Storage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.mock.Storage.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.setUDFContextSignature(String)",1,1,1
"org.apache.pig.builtin.mock.Storage.storeSchema(ResourceSchema,String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.storeStatistics(ResourceStatistics,String,Job)",1,1,1
"org.apache.pig.builtin.mock.Storage.tuple(Object...)",1,1,1
"org.apache.pig.classification.InterfaceAudience.InterfaceAudience()",1,1,1
"org.apache.pig.data.AbstractTuple.equals(Object)",1,1,1
"org.apache.pig.data.AbstractTuple.getType(int)",1,1,1
"org.apache.pig.data.AbstractTuple.isNull(int)",1,1,1
"org.apache.pig.data.AbstractTuple.iterator()",1,1,1
"org.apache.pig.data.AbstractTuple.reference(Tuple)",1,1,1
"org.apache.pig.data.AbstractTuple.toDelimitedString(String)",1,1,1
"org.apache.pig.data.AbstractTuple.toString()",1,1,1
"org.apache.pig.data.AccumulativeBag.AccumulativeBag(AccumulativeTupleBuffer,int)",1,1,1
"org.apache.pig.data.AccumulativeBag.add(Tuple)",1,1,1
"org.apache.pig.data.AccumulativeBag.addAll(DataBag)",1,1,1
"org.apache.pig.data.AccumulativeBag.clear()",1,1,1
"org.apache.pig.data.AccumulativeBag.compareTo(Object)",1,1,1
"org.apache.pig.data.AccumulativeBag.equals(Object)",2,1,2
"org.apache.pig.data.AccumulativeBag.getMemorySize()",1,1,1
"org.apache.pig.data.AccumulativeBag.getTuplebuffer()",1,1,1
"org.apache.pig.data.AccumulativeBag.hashCode()",1,1,1
"org.apache.pig.data.AccumulativeBag.isDistinct()",1,1,1
"org.apache.pig.data.AccumulativeBag.isSorted()",1,1,1
"org.apache.pig.data.AccumulativeBag.iterator()",1,1,1
"org.apache.pig.data.AccumulativeBag.markStale(boolean)",1,1,1
"org.apache.pig.data.AccumulativeBag.readFields(DataInput)",1,1,1
"org.apache.pig.data.AccumulativeBag.size()",1,1,2
"org.apache.pig.data.AccumulativeBag.spill()",1,1,1
"org.apache.pig.data.AccumulativeBag.write(DataOutput)",1,1,1
"org.apache.pig.data.AmendableTuple.AmendableTuple(int,Object)",1,1,1
"org.apache.pig.data.AmendableTuple.getAmendKey()",1,1,1
"org.apache.pig.data.AmendableTuple.setAmendKey(Object)",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.append(Object)",1,2,2
"org.apache.pig.data.AppendableSchemaTuple.appendedFieldsSize()",1,2,2
"org.apache.pig.data.AppendableSchemaTuple.compareTo(SchemaTuple<?>,boolean)",6,5,8
"org.apache.pig.data.AppendableSchemaTuple.compareToSpecific(T)",5,2,6
"org.apache.pig.data.AppendableSchemaTuple.get(int)",2,3,3
"org.apache.pig.data.AppendableSchemaTuple.getAppendedField(int)",1,2,2
"org.apache.pig.data.AppendableSchemaTuple.getAppendedFieldType(int)",1,2,2
"org.apache.pig.data.AppendableSchemaTuple.getAppendedFields()",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.getMemorySize()",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.getType(int)",2,3,3
"org.apache.pig.data.AppendableSchemaTuple.getTypeAwareBase(int,String)",2,3,3
"org.apache.pig.data.AppendableSchemaTuple.hashCode()",2,3,4
"org.apache.pig.data.AppendableSchemaTuple.isAppendedFieldNull(int)",1,2,2
"org.apache.pig.data.AppendableSchemaTuple.isAppendedFieldsNull()",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.isNull(int)",2,3,3
"org.apache.pig.data.AppendableSchemaTuple.readFields(DataInput)",1,2,2
"org.apache.pig.data.AppendableSchemaTuple.resetAppendedFields()",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.set(List<Object>)",2,3,3
"org.apache.pig.data.AppendableSchemaTuple.set(SchemaTuple<?>,boolean)",1,2,2
"org.apache.pig.data.AppendableSchemaTuple.set(int,Object)",1,3,3
"org.apache.pig.data.AppendableSchemaTuple.setAppendedField(int,Object)",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.setAppendedFields(Tuple)",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.setSpecific(T)",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.setTypeAwareBase(int,Object,String)",1,3,3
"org.apache.pig.data.AppendableSchemaTuple.size()",1,1,1
"org.apache.pig.data.AppendableSchemaTuple.writeElements(DataOutput)",1,2,2
"org.apache.pig.data.BagFactory.BagFactory()",1,1,1
"org.apache.pig.data.BagFactory.getInstance()",5,3,7
"org.apache.pig.data.BagFactory.registerBag(DataBag)",1,1,1
"org.apache.pig.data.BagFactory.resetSelf()",1,1,1
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.BinInterSedesTupleRawComparator()",1,1,1
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.compare(WritableComparable,WritableComparable)",3,5,6
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.compare(byte[],int,int,byte[],int,int)",1,2,2
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.compareBinInterSedesBag(ByteBuffer,ByteBuffer,byte,byte)",3,3,3
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.compareBinInterSedesDatum(ByteBuffer,ByteBuffer,boolean[])",6,41,67
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.compareBinInterSedesGenericWritableComparable(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.compareBinInterSedesMap(ByteBuffer,ByteBuffer,byte,byte)",3,3,3
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.compareBinSedesTuple(ByteBuffer,ByteBuffer)",3,7,13
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.compareDatum(Object,Object,boolean[])",6,5,18
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.getConf()",1,1,1
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.getGeneralizedDataType(byte)",19,2,19
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.getUnsignedByte(ByteBuffer)",1,1,1
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.getUnsignedShort(ByteBuffer)",1,1,1
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.hasComparedTupleNull()",1,1,1
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.readInt(ByteBuffer,byte)",7,5,7
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.readLong(ByteBuffer,byte)",8,6,8
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.readSize(ByteBuffer)",1,1,1
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.readSize(ByteBuffer,byte)",15,5,15
"org.apache.pig.data.BinInterSedes.BinInterSedesTupleRawComparator.setConf(Configuration)",1,2,4
"org.apache.pig.data.BinInterSedes.addColsToTuple(DataInput,Tuple)",1,2,2
"org.apache.pig.data.BinInterSedes.getTupleRawComparatorClass()",1,1,1
"org.apache.pig.data.BinInterSedes.getTupleSize(DataInput,byte)",13,2,16
"org.apache.pig.data.BinInterSedes.isTupleByte(byte)",1,1,16
"org.apache.pig.data.BinInterSedes.readBag(DataInput,byte)",3,3,7
"org.apache.pig.data.BinInterSedes.readBigDecimal(DataInput)",1,1,1
"org.apache.pig.data.BinInterSedes.readBigInteger(DataInput)",1,1,1
"org.apache.pig.data.BinInterSedes.readBytes(DataInput,int)",1,1,1
"org.apache.pig.data.BinInterSedes.readDatum(DataInput)",1,1,1
"org.apache.pig.data.BinInterSedes.readDatum(DataInput,byte)",30,29,30
"org.apache.pig.data.BinInterSedes.readInternalMap(DataInput)",1,2,2
"org.apache.pig.data.BinInterSedes.readMap(DataInput,byte)",2,3,6
"org.apache.pig.data.BinInterSedes.readSchemaTuple(DataInput,byte)",2,2,5
"org.apache.pig.data.BinInterSedes.readTuple(DataInput)",1,1,1
"org.apache.pig.data.BinInterSedes.readTuple(DataInput,byte)",4,4,4
"org.apache.pig.data.BinInterSedes.readWritable(DataInput)",1,1,3
"org.apache.pig.data.BinInterSedes.writeBag(DataOutput,DataBag)",1,4,4
"org.apache.pig.data.BinInterSedes.writeBigDecimal(DataOutput,BigDecimal)",1,1,1
"org.apache.pig.data.BinInterSedes.writeBigInteger(DataOutput,BigInteger)",1,1,1
"org.apache.pig.data.BinInterSedes.writeDatum(DataOutput,Object)",1,1,1
"org.apache.pig.data.BinInterSedes.writeDatum(DataOutput,Object,byte)",2,17,35
"org.apache.pig.data.BinInterSedes.writeMap(DataOutput,Map<String, Object>)",1,4,4
"org.apache.pig.data.BinInterSedes.writeTuple(DataOutput,Tuple)",1,2,2
"org.apache.pig.data.BinSedesTuple.BinSedesTuple()",1,1,1
"org.apache.pig.data.BinSedesTuple.BinSedesTuple(List<Object>)",1,1,1
"org.apache.pig.data.BinSedesTuple.BinSedesTuple(List<Object>,int)",1,1,1
"org.apache.pig.data.BinSedesTuple.BinSedesTuple(int)",1,1,1
"org.apache.pig.data.BinSedesTuple.getComparatorClass()",1,1,1
"org.apache.pig.data.BinSedesTuple.readFields(DataInput)",1,1,1
"org.apache.pig.data.BinSedesTuple.write(DataOutput)",1,1,1
"org.apache.pig.data.BinSedesTupleFactory.isFixedSize()",1,1,1
"org.apache.pig.data.BinSedesTupleFactory.newTuple()",1,1,1
"org.apache.pig.data.BinSedesTupleFactory.newTuple(List)",1,1,1
"org.apache.pig.data.BinSedesTupleFactory.newTuple(Object)",1,1,2
"org.apache.pig.data.BinSedesTupleFactory.newTuple(int)",1,1,1
"org.apache.pig.data.BinSedesTupleFactory.newTupleNoCopy(List)",1,1,1
"org.apache.pig.data.BinSedesTupleFactory.tupleClass()",1,1,1
"org.apache.pig.data.BinSedesTupleFactory.tupleRawComparatorClass()",1,1,1
"org.apache.pig.data.DataByteArray.DataByteArray()",1,1,1
"org.apache.pig.data.DataByteArray.DataByteArray(DataByteArray,DataByteArray)",2,3,6
"org.apache.pig.data.DataByteArray.DataByteArray(String)",1,2,2
"org.apache.pig.data.DataByteArray.DataByteArray(byte[])",1,1,1
"org.apache.pig.data.DataByteArray.DataByteArray(byte[],int,int)",1,1,1
"org.apache.pig.data.DataByteArray.append(DataByteArray)",1,2,3
"org.apache.pig.data.DataByteArray.append(String)",1,2,2
"org.apache.pig.data.DataByteArray.append(byte[])",1,1,1
"org.apache.pig.data.DataByteArray.append(byte[],int,int)",2,2,4
"org.apache.pig.data.DataByteArray.compare(byte[],byte[])",1,1,1
"org.apache.pig.data.DataByteArray.compareTo(Object)",2,2,2
"org.apache.pig.data.DataByteArray.equals(Object)",1,1,1
"org.apache.pig.data.DataByteArray.get()",1,1,1
"org.apache.pig.data.DataByteArray.hashCode()",1,1,1
"org.apache.pig.data.DataByteArray.hashCode(byte[])",1,1,1
"org.apache.pig.data.DataByteArray.set(String)",1,1,1
"org.apache.pig.data.DataByteArray.set(byte[])",1,1,1
"org.apache.pig.data.DataByteArray.size()",1,1,1
"org.apache.pig.data.DataByteArray.toString()",1,1,2
"org.apache.pig.data.DataReaderWriter.bytesToBag(DataInput)",2,2,3
"org.apache.pig.data.DataReaderWriter.bytesToBigCharArray(DataInput)",1,1,1
"org.apache.pig.data.DataReaderWriter.bytesToCharArray(DataInput)",1,1,1
"org.apache.pig.data.DataReaderWriter.bytesToInternalMap(DataInput)",1,2,2
"org.apache.pig.data.DataReaderWriter.bytesToMap(DataInput)",1,2,2
"org.apache.pig.data.DataReaderWriter.bytesToTuple(DataInput)",2,2,3
"org.apache.pig.data.DataReaderWriter.bytesToWritable(DataInput)",1,1,3
"org.apache.pig.data.DataReaderWriter.readDatum(DataInput)",1,1,1
"org.apache.pig.data.DataReaderWriter.readDatum(DataInput,byte)",18,17,20
"org.apache.pig.data.DataReaderWriter.writeDatum(DataOutput,Object)",2,11,24
"org.apache.pig.data.DataType.castable(byte,byte)",6,6,11
"org.apache.pig.data.DataType.compare(Object,Object)",1,1,1
"org.apache.pig.data.DataType.compare(Object,Object,byte,byte)",29,22,29
"org.apache.pig.data.DataType.determineFieldSchema(Object)",1,3,3
"org.apache.pig.data.DataType.determineFieldSchema(ResourceFieldSchema)",1,2,3
"org.apache.pig.data.DataType.determineFieldSchema(byte,Iterator,long,Class)",10,12,14
"org.apache.pig.data.DataType.equalByteArrays(byte[],byte[])",6,1,8
"org.apache.pig.data.DataType.extractTypeFromClass(Type)",6,5,9
"org.apache.pig.data.DataType.findType(Object)",18,1,18
"org.apache.pig.data.DataType.findType(Type)",16,15,16
"org.apache.pig.data.DataType.findTypeByName(String)",19,18,19
"org.apache.pig.data.DataType.findTypeClass(byte)",20,2,20
"org.apache.pig.data.DataType.findTypeName(Object)",1,1,1
"org.apache.pig.data.DataType.findTypeName(byte)",20,2,20
"org.apache.pig.data.DataType.genAllTypeNames()",1,1,1
"org.apache.pig.data.DataType.genAllTypes()",1,1,1
"org.apache.pig.data.DataType.genNameToTypeMap()",1,2,2
"org.apache.pig.data.DataType.genTypeToNameMap()",1,2,2
"org.apache.pig.data.DataType.isAtomic(Object)",1,1,1
"org.apache.pig.data.DataType.isAtomic(byte)",1,1,13
"org.apache.pig.data.DataType.isComplex(Object)",1,1,1
"org.apache.pig.data.DataType.isComplex(byte)",1,1,4
"org.apache.pig.data.DataType.isNumberType(byte)",8,2,8
"org.apache.pig.data.DataType.isSchemaType(Object)",1,1,1
"org.apache.pig.data.DataType.isSchemaType(byte)",1,1,3
"org.apache.pig.data.DataType.isUsableType(byte)",5,2,5
"org.apache.pig.data.DataType.mapToString(Map<String, Object>)",1,4,4
"org.apache.pig.data.DataType.mergeType(byte,byte)",6,3,9
"org.apache.pig.data.DataType.numTypes()",1,1,1
"org.apache.pig.data.DataType.spillTupleContents(Tuple,String)",1,2,2
"org.apache.pig.data.DataType.toBag(Object)",3,2,4
"org.apache.pig.data.DataType.toBigDecimal(Object)",1,1,1
"org.apache.pig.data.DataType.toBigDecimal(Object,byte)",13,8,18
"org.apache.pig.data.DataType.toBigInteger(Object)",1,1,1
"org.apache.pig.data.DataType.toBigInteger(Object,byte)",13,9,18
"org.apache.pig.data.DataType.toBoolean(Object)",1,1,1
"org.apache.pig.data.DataType.toBoolean(Object,byte)",16,13,21
"org.apache.pig.data.DataType.toBytes(Object)",1,1,1
"org.apache.pig.data.DataType.toBytes(Object,byte)",12,10,12
"org.apache.pig.data.DataType.toDateTime(Object)",1,1,1
"org.apache.pig.data.DataType.toDateTime(Object,byte)",12,10,16
"org.apache.pig.data.DataType.toDouble(Object)",1,1,1
"org.apache.pig.data.DataType.toDouble(Object,byte)",13,12,18
"org.apache.pig.data.DataType.toFloat(Object)",1,1,1
"org.apache.pig.data.DataType.toFloat(Object,byte)",13,12,18
"org.apache.pig.data.DataType.toInteger(Object)",1,1,1
"org.apache.pig.data.DataType.toInteger(Object,byte)",15,13,19
"org.apache.pig.data.DataType.toLong(Object)",1,1,1
"org.apache.pig.data.DataType.toLong(Object,byte)",15,13,19
"org.apache.pig.data.DataType.toMap(Object)",3,2,5
"org.apache.pig.data.DataType.toString(Object)",1,1,1
"org.apache.pig.data.DataType.toString(Object,byte)",14,12,17
"org.apache.pig.data.DataType.toTuple(Object)",3,2,4
"org.apache.pig.data.DefaultAbstractBag.add(Tuple)",1,1,1
"org.apache.pig.data.DefaultAbstractBag.addAll(Collection<Tuple>)",1,1,1
"org.apache.pig.data.DefaultAbstractBag.addAll(DataBag)",1,1,1
"org.apache.pig.data.DefaultAbstractBag.addAll(Iterable<Tuple>)",1,2,2
"org.apache.pig.data.DefaultAbstractBag.clear()",1,4,4
"org.apache.pig.data.DefaultAbstractBag.compareTo(Object)",7,11,14
"org.apache.pig.data.DefaultAbstractBag.equals(Object)",1,1,1
"org.apache.pig.data.DefaultAbstractBag.getMemorySize()",2,2,6
"org.apache.pig.data.DefaultAbstractBag.getSpillFile()",4,4,5
"org.apache.pig.data.DefaultAbstractBag.hashCode()",1,2,2
"org.apache.pig.data.DefaultAbstractBag.incSpillCount(Enum)",1,1,1
"org.apache.pig.data.DefaultAbstractBag.incSpillCount(Enum,long)",1,3,3
"org.apache.pig.data.DefaultAbstractBag.markSpillableIfNecessary()",1,3,3
"org.apache.pig.data.DefaultAbstractBag.markStale(boolean)",1,1,1
"org.apache.pig.data.DefaultAbstractBag.readFields(DataInput)",2,2,3
"org.apache.pig.data.DefaultAbstractBag.reportProgress()",1,2,2
"org.apache.pig.data.DefaultAbstractBag.roundToEight(long)",1,1,1
"org.apache.pig.data.DefaultAbstractBag.sampleContents()",1,6,7
"org.apache.pig.data.DefaultAbstractBag.size()",1,1,1
"org.apache.pig.data.DefaultAbstractBag.toString()",1,1,1
"org.apache.pig.data.DefaultAbstractBag.totalSizeFromAvgTupleSize(long,int)",1,3,3
"org.apache.pig.data.DefaultAbstractBag.warn(String,Enum,Exception)",1,2,2
"org.apache.pig.data.DefaultAbstractBag.write(DataOutput)",1,1,1
"org.apache.pig.data.DefaultBagFactory.DefaultBagFactory()",1,1,1
"org.apache.pig.data.DefaultBagFactory.newDefaultBag()",1,1,1
"org.apache.pig.data.DefaultBagFactory.newDefaultBag(List<Tuple>)",1,1,1
"org.apache.pig.data.DefaultBagFactory.newDistinctBag()",1,1,1
"org.apache.pig.data.DefaultBagFactory.newSortedBag(Comparator<Tuple>)",1,1,1
"org.apache.pig.data.DefaultDataBag.DefaultDataBag()",1,1,1
"org.apache.pig.data.DefaultDataBag.DefaultDataBag(List<Tuple>)",1,1,1
"org.apache.pig.data.DefaultDataBag.DefaultDataBagIterator.DefaultDataBagIterator()",1,1,1
"org.apache.pig.data.DefaultDataBag.DefaultDataBagIterator.hasNext()",2,1,2
"org.apache.pig.data.DefaultDataBag.DefaultDataBagIterator.next()",5,8,9
"org.apache.pig.data.DefaultDataBag.DefaultDataBagIterator.readFromFile()",3,8,8
"org.apache.pig.data.DefaultDataBag.DefaultDataBagIterator.readFromMemory()",3,2,3
"org.apache.pig.data.DefaultDataBag.DefaultDataBagIterator.remove()",1,1,1
"org.apache.pig.data.DefaultDataBag.isDistinct()",1,1,1
"org.apache.pig.data.DefaultDataBag.isSorted()",1,1,1
"org.apache.pig.data.DefaultDataBag.iterator()",1,1,1
"org.apache.pig.data.DefaultDataBag.spill()",2,7,8
"org.apache.pig.data.DefaultTuple.DefaultTuple()",1,1,1
"org.apache.pig.data.DefaultTuple.DefaultTuple(List<Object>)",1,1,1
"org.apache.pig.data.DefaultTuple.DefaultTuple(List<Object>,int)",1,1,1
"org.apache.pig.data.DefaultTuple.DefaultTuple(int)",1,2,2
"org.apache.pig.data.DefaultTuple.DefaultTupleRawComparator.DefaultTupleRawComparator()",1,1,1
"org.apache.pig.data.DefaultTuple.DefaultTupleRawComparator.compare(Object,Object)",1,5,8
"org.apache.pig.data.DefaultTuple.DefaultTupleRawComparator.compare(byte[],int,int,byte[],int,int)",1,1,1
"org.apache.pig.data.DefaultTuple.DefaultTupleRawComparator.compareDefaultTuple(ByteBuffer,ByteBuffer,boolean)",8,18,48
"org.apache.pig.data.DefaultTuple.DefaultTupleRawComparator.compareTuple(Tuple,Tuple)",5,4,10
"org.apache.pig.data.DefaultTuple.DefaultTupleRawComparator.getConf()",1,1,1
"org.apache.pig.data.DefaultTuple.DefaultTupleRawComparator.hasComparedTupleNull()",1,1,1
"org.apache.pig.data.DefaultTuple.DefaultTupleRawComparator.setConf(Configuration)",1,2,3
"org.apache.pig.data.DefaultTuple.append(Object)",1,1,1
"org.apache.pig.data.DefaultTuple.compareTo(Object)",6,5,7
"org.apache.pig.data.DefaultTuple.get(int)",1,1,1
"org.apache.pig.data.DefaultTuple.getAll()",1,1,1
"org.apache.pig.data.DefaultTuple.getComparatorClass()",1,1,1
"org.apache.pig.data.DefaultTuple.getMemorySize()",1,2,2
"org.apache.pig.data.DefaultTuple.hashCode()",1,3,3
"org.apache.pig.data.DefaultTuple.readFields(DataInput)",3,2,4
"org.apache.pig.data.DefaultTuple.set(int,Object)",1,1,1
"org.apache.pig.data.DefaultTuple.size()",1,1,1
"org.apache.pig.data.DefaultTuple.write(DataOutput)",1,2,2
"org.apache.pig.data.DefaultTupleFactory.tupleRawComparatorClass()",1,1,1
"org.apache.pig.data.DistinctDataBag.DistinctDataBag()",1,1,1
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.DistinctDataBagIterator()",1,2,2
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.TContainer.compareTo(TContainer)",1,1,1
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.TContainer.equals(Object)",2,2,2
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.TContainer.hashCode()",1,1,1
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.addToQueue(TContainer,int)",8,9,12
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.hasNext()",1,1,1
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.next()",5,9,13
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.preMerge()",4,11,12
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.readFromMemory()",3,2,3
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.readFromTree()",4,5,6
"org.apache.pig.data.DistinctDataBag.DistinctDataBagIterator.remove()",1,1,1
"org.apache.pig.data.DistinctDataBag.add(Tuple)",1,1,2
"org.apache.pig.data.DistinctDataBag.isDistinct()",1,1,1
"org.apache.pig.data.DistinctDataBag.isSorted()",1,1,1
"org.apache.pig.data.DistinctDataBag.iterator()",1,1,1
"org.apache.pig.data.DistinctDataBag.size()",1,4,4
"org.apache.pig.data.DistinctDataBag.spill()",2,10,11
"org.apache.pig.data.FieldIsNullException.FieldIsNullException()",1,1,1
"org.apache.pig.data.FieldIsNullException.FieldIsNullException(String)",1,1,1
"org.apache.pig.data.FileList.FileList()",1,1,1
"org.apache.pig.data.FileList.FileList(LinkedList<File>)",1,1,1
"org.apache.pig.data.FileList.FileList(int)",1,1,1
"org.apache.pig.data.FileList.finalize()",1,3,3
"org.apache.pig.data.InterSedesFactory.getInterSedesInstance()",1,1,2
"org.apache.pig.data.InternalCachedBag.CachedBagIterator.CachedBagIterator()",2,3,4
"org.apache.pig.data.InternalCachedBag.CachedBagIterator.hasNext()",4,3,7
"org.apache.pig.data.InternalCachedBag.CachedBagIterator.next()",3,3,4
"org.apache.pig.data.InternalCachedBag.CachedBagIterator.remove()",1,1,1
"org.apache.pig.data.InternalCachedBag.InternalCachedBag()",1,1,1
"org.apache.pig.data.InternalCachedBag.InternalCachedBag(int)",1,1,1
"org.apache.pig.data.InternalCachedBag.InternalCachedBag(int,float)",1,1,1
"org.apache.pig.data.InternalCachedBag.add(Tuple)",3,6,8
"org.apache.pig.data.InternalCachedBag.addDone()",1,3,4
"org.apache.pig.data.InternalCachedBag.clear()",1,2,2
"org.apache.pig.data.InternalCachedBag.init()",1,1,1
"org.apache.pig.data.InternalCachedBag.isDistinct()",1,1,1
"org.apache.pig.data.InternalCachedBag.isSorted()",1,1,1
"org.apache.pig.data.InternalCachedBag.iterator()",1,2,2
"org.apache.pig.data.InternalCachedBag.spill()",1,1,1
"org.apache.pig.data.InternalCachedBag.updateSpillRecCounter()",1,1,1
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.DistinctDataBagIterator()",1,2,2
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.TContainer.compareTo(TContainer)",1,1,1
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.TContainer.equals(Object)",2,2,2
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.TContainer.hashCode()",1,1,1
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.addToQueue(TContainer,int)",8,9,12
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.hasNext()",1,1,1
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.next()",3,4,5
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.preMerge()",4,10,11
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.readFromMemory()",3,2,3
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.readFromTree()",4,5,6
"org.apache.pig.data.InternalDistinctBag.DistinctDataBagIterator.remove()",1,1,1
"org.apache.pig.data.InternalDistinctBag.InternalDistinctBag()",1,1,1
"org.apache.pig.data.InternalDistinctBag.InternalDistinctBag(int)",1,1,1
"org.apache.pig.data.InternalDistinctBag.InternalDistinctBag(int,float)",1,4,4
"org.apache.pig.data.InternalDistinctBag.add(Tuple)",2,6,7
"org.apache.pig.data.InternalDistinctBag.init(int,double)",1,1,1
"org.apache.pig.data.InternalDistinctBag.isDistinct()",1,1,1
"org.apache.pig.data.InternalDistinctBag.isSorted()",1,1,1
"org.apache.pig.data.InternalDistinctBag.iterator()",1,1,1
"org.apache.pig.data.InternalDistinctBag.size()",1,4,4
"org.apache.pig.data.InternalDistinctBag.spill()",2,1,2
"org.apache.pig.data.InternalMap.InternalMap()",1,1,1
"org.apache.pig.data.InternalMap.InternalMap(int)",1,1,1
"org.apache.pig.data.InternalSortedBag.DefaultComparator.compare(Tuple,Tuple)",1,1,1
"org.apache.pig.data.InternalSortedBag.DefaultComparator.equals(Object)",1,1,1
"org.apache.pig.data.InternalSortedBag.DefaultComparator.hashCode()",1,1,1
"org.apache.pig.data.InternalSortedBag.InternalSortedBag()",1,1,1
"org.apache.pig.data.InternalSortedBag.InternalSortedBag(Comparator<Tuple>)",1,1,1
"org.apache.pig.data.InternalSortedBag.InternalSortedBag(int,Comparator<Tuple>)",1,1,1
"org.apache.pig.data.InternalSortedBag.InternalSortedBag(int,float,Comparator<Tuple>)",1,1,1
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.PQContainer.compareTo(PQContainer)",1,1,1
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.PQContainer.equals(Object)",2,2,2
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.PQContainer.hashCode()",1,1,1
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.SortedDataBagIterator()",1,2,2
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.addToQueue(PQContainer,int)",3,7,8
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.hasNext()",1,1,1
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.next()",3,4,5
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.preMerge()",4,11,12
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.readFromMemory()",3,2,3
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.readFromPriorityQ()",4,5,6
"org.apache.pig.data.InternalSortedBag.SortedDataBagIterator.remove()",1,1,1
"org.apache.pig.data.InternalSortedBag.add(Tuple)",2,6,7
"org.apache.pig.data.InternalSortedBag.init(int,double,Comparator<Tuple>)",1,1,2
"org.apache.pig.data.InternalSortedBag.isDistinct()",1,1,1
"org.apache.pig.data.InternalSortedBag.isSorted()",1,1,1
"org.apache.pig.data.InternalSortedBag.iterator()",1,1,1
"org.apache.pig.data.InternalSortedBag.proactive_spill(Comparator<Tuple>)",2,1,2
"org.apache.pig.data.InternalSortedBag.spill()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.NonSpillableDataBag()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.NonSpillableDataBag(List<Tuple>)",1,1,1
"org.apache.pig.data.NonSpillableDataBag.NonSpillableDataBag(int)",1,1,1
"org.apache.pig.data.NonSpillableDataBag.NonSpillableDataBagIterator.hasNext()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.NonSpillableDataBagIterator.next()",1,2,2
"org.apache.pig.data.NonSpillableDataBag.NonSpillableDataBagIterator.remove()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.add(Tuple)",1,1,1
"org.apache.pig.data.NonSpillableDataBag.addAll(DataBag)",1,2,2
"org.apache.pig.data.NonSpillableDataBag.clear()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.compareTo(Object)",7,9,12
"org.apache.pig.data.NonSpillableDataBag.equals(Object)",1,1,1
"org.apache.pig.data.NonSpillableDataBag.getMemorySize()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.hashCode()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.isDistinct()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.isSorted()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.iterator()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.markStale(boolean)",1,1,1
"org.apache.pig.data.NonSpillableDataBag.readFields(DataInput)",2,2,3
"org.apache.pig.data.NonSpillableDataBag.reportProgress()",1,2,2
"org.apache.pig.data.NonSpillableDataBag.size()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.spill()",1,1,1
"org.apache.pig.data.NonSpillableDataBag.toString()",1,3,3
"org.apache.pig.data.NonSpillableDataBag.write(DataOutput)",1,2,2
"org.apache.pig.data.ReadOnceBag.ReadOnceBag(Packager,Iterator<NullableTuple>,PigNullableWritable)",1,1,1
"org.apache.pig.data.ReadOnceBag.ReadOnceBagIterator.hasNext()",1,1,1
"org.apache.pig.data.ReadOnceBag.ReadOnceBagIterator.next()",1,2,2
"org.apache.pig.data.ReadOnceBag.ReadOnceBagIterator.remove()",1,1,1
"org.apache.pig.data.ReadOnceBag.add(Tuple)",1,1,1
"org.apache.pig.data.ReadOnceBag.addAll(DataBag)",1,1,1
"org.apache.pig.data.ReadOnceBag.clear()",1,1,1
"org.apache.pig.data.ReadOnceBag.compareTo(Object)",1,1,1
"org.apache.pig.data.ReadOnceBag.equals(Object)",5,6,8
"org.apache.pig.data.ReadOnceBag.getMemorySize()",1,1,1
"org.apache.pig.data.ReadOnceBag.hashCode()",1,2,2
"org.apache.pig.data.ReadOnceBag.isDistinct()",1,1,1
"org.apache.pig.data.ReadOnceBag.isSorted()",1,1,1
"org.apache.pig.data.ReadOnceBag.iterator()",1,1,1
"org.apache.pig.data.ReadOnceBag.markStale(boolean)",1,1,1
"org.apache.pig.data.ReadOnceBag.readFields(DataInput)",1,1,1
"org.apache.pig.data.ReadOnceBag.size()",1,1,1
"org.apache.pig.data.ReadOnceBag.spill()",1,1,1
"org.apache.pig.data.ReadOnceBag.write(DataOutput)",1,1,1
"org.apache.pig.data.SchemaTuple.append(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.box(BigDecimal)",1,1,1
"org.apache.pig.data.SchemaTuple.box(BigInteger)",1,1,1
"org.apache.pig.data.SchemaTuple.box(DataBag)",1,1,1
"org.apache.pig.data.SchemaTuple.box(DateTime)",1,1,1
"org.apache.pig.data.SchemaTuple.box(Map<String, Object>)",1,1,1
"org.apache.pig.data.SchemaTuple.box(String)",1,1,1
"org.apache.pig.data.SchemaTuple.box(Tuple)",1,1,1
"org.apache.pig.data.SchemaTuple.box(boolean)",1,1,1
"org.apache.pig.data.SchemaTuple.box(byte[])",2,1,2
"org.apache.pig.data.SchemaTuple.box(double)",1,1,1
"org.apache.pig.data.SchemaTuple.box(float)",1,1,1
"org.apache.pig.data.SchemaTuple.box(int)",1,1,1
"org.apache.pig.data.SchemaTuple.box(long)",1,1,1
"org.apache.pig.data.SchemaTuple.compare(BigDecimal,BigDecimal)",1,1,1
"org.apache.pig.data.SchemaTuple.compare(BigInteger,BigInteger)",1,1,1
"org.apache.pig.data.SchemaTuple.compare(DataBag,DataBag)",1,1,1
"org.apache.pig.data.SchemaTuple.compare(DateTime,DateTime)",1,1,1
"org.apache.pig.data.SchemaTuple.compare(Map<String, Object>,Map<String, Object>)",1,1,1
"org.apache.pig.data.SchemaTuple.compare(String,String)",1,1,1
"org.apache.pig.data.SchemaTuple.compare(boolean,BigDecimal,boolean,BigDecimal)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,BigInteger,boolean,BigInteger)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,DataBag,boolean,DataBag)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,DateTime,boolean,DateTime)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,Map<String, Object>,boolean,Map<String, Object>)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,SchemaTuple<?>,boolean,Object)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,String,boolean,String)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,boolean)",2,1,3
"org.apache.pig.data.SchemaTuple.compare(boolean,boolean,boolean,boolean)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,byte[],boolean,byte[])",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,double,boolean,double)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,float,boolean,float)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,int,boolean,int)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(boolean,long,boolean,long)",4,1,5
"org.apache.pig.data.SchemaTuple.compare(byte[],byte[])",1,1,1
"org.apache.pig.data.SchemaTuple.compare(double,double)",1,1,3
"org.apache.pig.data.SchemaTuple.compare(float,float)",1,1,3
"org.apache.pig.data.SchemaTuple.compare(int,int)",1,1,3
"org.apache.pig.data.SchemaTuple.compare(long,long)",1,1,3
"org.apache.pig.data.SchemaTuple.compareElementAtPos(int,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareNull(boolean,Tuple,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareNull(boolean,boolean)",4,1,5
"org.apache.pig.data.SchemaTuple.compareSize(Tuple)",1,1,1
"org.apache.pig.data.SchemaTuple.compareTo(Object)",4,4,4
"org.apache.pig.data.SchemaTuple.compareTo(SchemaTuple<?>)",1,1,1
"org.apache.pig.data.SchemaTuple.compareTo(SchemaTuple<?>,boolean)",3,3,4
"org.apache.pig.data.SchemaTuple.compareTo(Tuple)",1,1,1
"org.apache.pig.data.SchemaTuple.compareTo(Tuple,boolean)",8,6,9
"org.apache.pig.data.SchemaTuple.compareToSpecific(T)",1,1,1
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,BigDecimal,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,BigInteger,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,DataBag,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,DateTime,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,Map<String, Object>,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,SchemaTuple<?>,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,String,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,boolean,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,byte[],SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,double,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,float,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,int,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.compareWithElementAtPos(boolean,long,SchemaTuple<?>,int)",1,1,2
"org.apache.pig.data.SchemaTuple.equals(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.errorIfNull(boolean,String)",2,1,2
"org.apache.pig.data.SchemaTuple.get(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getAll()",2,2,3
"org.apache.pig.data.SchemaTuple.getBigDecimal(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getBigInteger(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getBoolean(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getBytes(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getDataBag(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getDateTime(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getDouble(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getFloat(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getInt(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getLong(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getMap(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getMemorySize()",1,1,1
"org.apache.pig.data.SchemaTuple.getSchemaString()",1,1,1
"org.apache.pig.data.SchemaTuple.getString(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getTuple(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getType(int)",1,1,1
"org.apache.pig.data.SchemaTuple.getTypeAwareBase(int,String)",1,1,1
"org.apache.pig.data.SchemaTuple.hashCode()",1,1,1
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,BigDecimal,boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,BigInteger,boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,DataBag,boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,DateTime,boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,Map<String, Object>,boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,String,boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,Tuple,boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,boolean,boolean)",1,1,3
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,byte[],boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,double,boolean)",1,1,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,float,boolean)",1,2,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,int,boolean)",1,1,2
"org.apache.pig.data.SchemaTuple.hashCodePiece(int,long,boolean)",1,1,2
"org.apache.pig.data.SchemaTuple.isNull(int)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,BigDecimal)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,BigInteger)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,DataBag)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,DateTime)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,Map<String, Object>)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,String)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,byte[])",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,double)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,float)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,int)",1,1,1
"org.apache.pig.data.SchemaTuple.read(DataInput,long)",1,1,1
"org.apache.pig.data.SchemaTuple.readFields(DataInput)",1,1,1
"org.apache.pig.data.SchemaTuple.reference(Tuple)",1,1,2
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,BigDecimal)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,BigInteger)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,DataBag)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,DateTime)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,Map<String, Object>)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,String)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,Tuple)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,boolean)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,byte[])",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,double)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,float)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,int)",1,1,1
"org.apache.pig.data.SchemaTuple.returnUnlessNull(boolean,long)",1,1,1
"org.apache.pig.data.SchemaTuple.set(List<Object>)",2,2,2
"org.apache.pig.data.SchemaTuple.set(SchemaTuple<?>)",1,1,1
"org.apache.pig.data.SchemaTuple.set(SchemaTuple<?>,boolean)",1,1,1
"org.apache.pig.data.SchemaTuple.set(Tuple)",1,1,1
"org.apache.pig.data.SchemaTuple.set(Tuple,boolean)",4,4,4
"org.apache.pig.data.SchemaTuple.set(int,Object)",1,1,1
"org.apache.pig.data.SchemaTuple.setAndCatch(SchemaTuple<?>)",1,1,2
"org.apache.pig.data.SchemaTuple.setAndCatch(Tuple)",1,1,2
"org.apache.pig.data.SchemaTuple.setBigDecimal(int,BigDecimal)",1,1,1
"org.apache.pig.data.SchemaTuple.setBigInteger(int,BigInteger)",1,1,1
"org.apache.pig.data.SchemaTuple.setBoolean(int,boolean)",1,1,1
"org.apache.pig.data.SchemaTuple.setBytes(int,byte[])",1,1,1
"org.apache.pig.data.SchemaTuple.setDataBag(int,DataBag)",1,1,1
"org.apache.pig.data.SchemaTuple.setDateTime(int,DateTime)",1,1,1
"org.apache.pig.data.SchemaTuple.setDouble(int,double)",1,1,1
"org.apache.pig.data.SchemaTuple.setFloat(int,float)",1,1,1
"org.apache.pig.data.SchemaTuple.setInt(int,int)",1,1,1
"org.apache.pig.data.SchemaTuple.setLong(int,long)",1,1,1
"org.apache.pig.data.SchemaTuple.setMap(int,Map<String, Object>)",1,1,1
"org.apache.pig.data.SchemaTuple.setSpecific(T)",1,1,1
"org.apache.pig.data.SchemaTuple.setString(int,String)",1,1,1
"org.apache.pig.data.SchemaTuple.setTuple(int,Tuple)",1,1,1
"org.apache.pig.data.SchemaTuple.setTypeAwareBase(int,Object,String)",1,1,1
"org.apache.pig.data.SchemaTuple.size()",1,1,1
"org.apache.pig.data.SchemaTuple.staticSchemaGen(String)",2,2,3
"org.apache.pig.data.SchemaTuple.unbox(Boolean)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(DataBag)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(DataByteArray)",2,1,2
"org.apache.pig.data.SchemaTuple.unbox(DateTime)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Double)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Float)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Integer)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Long)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Map<String, Object>)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,BigDecimal)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,BigInteger)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,DataBag)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,DateTime)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,Map<String, Object>)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,String)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,Tuple)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,boolean)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,byte[])",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,double)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,float)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,int)",1,1,1
"org.apache.pig.data.SchemaTuple.unbox(Object,long)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxBigDecimal(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxBigInteger(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxBoolean(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxBytes(Object)",1,2,2
"org.apache.pig.data.SchemaTuple.unboxDataBag(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxDateTime(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxDouble(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxFloat(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxInt(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxLong(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxMap(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxString(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.unboxTuple(Object)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,BigDecimal)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,BigInteger)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,DataBag)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,DateTime)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,Map<String, Object>)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,SchemaTuple<?>)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,String)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,boolean)",1,4,4
"org.apache.pig.data.SchemaTuple.write(DataOutput,byte[])",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,double)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,float)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,int)",1,1,1
"org.apache.pig.data.SchemaTuple.write(DataOutput,long)",1,1,1
"org.apache.pig.data.SchemaTuple.writeElements(DataOutput)",1,1,1
"org.apache.pig.data.SchemaTupleBackend.SchemaTupleBackend(Configuration,boolean)",3,4,4
"org.apache.pig.data.SchemaTupleBackend.copyAllFromDistributedCache()",2,5,5
"org.apache.pig.data.SchemaTupleBackend.copyAndResolve()",3,6,6
"org.apache.pig.data.SchemaTupleBackend.initialize(Configuration,PigContext)",1,1,1
"org.apache.pig.data.SchemaTupleBackend.initialize(Configuration,PigContext,boolean)",1,2,2
"org.apache.pig.data.SchemaTupleBackend.internalNewSchemaTupleFactory(Schema,boolean,GenContext)",1,1,1
"org.apache.pig.data.SchemaTupleBackend.internalNewSchemaTupleFactory(int)",1,2,2
"org.apache.pig.data.SchemaTupleBackend.newSchemaTupleFactory(Schema,boolean,GenContext)",2,1,2
"org.apache.pig.data.SchemaTupleBackend.newSchemaTupleFactory(Triple<SchemaKey, Boolean, GenContext>)",1,2,2
"org.apache.pig.data.SchemaTupleBackend.newSchemaTupleFactory(int)",2,1,2
"org.apache.pig.data.SchemaTupleBackend.reset()",1,1,1
"org.apache.pig.data.SchemaTupleBackend.resolveClasses()",5,5,9
"org.apache.pig.data.SchemaTupleClassGenerator.CheckIfNullString.process(int,FieldSchema)",1,2,3
"org.apache.pig.data.SchemaTupleClassGenerator.CompareToSpecificString.CompareToSpecificString(int,boolean)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.CompareToSpecificString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.CompareToSpecificString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.CompareToSpecificString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.CompareToString.CompareToString(int)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.CompareToString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.CompareToString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.CompareToString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.FieldString.FieldString(File,List<Queue<Integer>>,Schema,boolean)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.FieldString.codeDir()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.FieldString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.FieldString.prepare()",1,1,2
"org.apache.pig.data.SchemaTupleClassGenerator.FieldString.process(int,FieldSchema)",1,7,7
"org.apache.pig.data.SchemaTupleClassGenerator.GenContext.GenContext(String,boolean,Class<?>)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenContext.getAnnotationCanonicalName()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenContext.key()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenContext.shouldGenerate(Class)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenContext.shouldGenerate(Configuration)",2,1,2
"org.apache.pig.data.SchemaTupleClassGenerator.GeneralIsNullString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GeneralIsNullString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GeneralIsNullString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenericGetString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenericGetString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenericGetString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenericSetString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenericSetString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GenericSetString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GetDummyString.process(int,FieldSchema)",2,2,15
"org.apache.pig.data.SchemaTupleClassGenerator.GetPosString.GetPosString(Queue<Integer>)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GetPosString.process(int,FieldSchema)",1,3,4
"org.apache.pig.data.SchemaTupleClassGenerator.GetSchemaTupleIdentifierString.GetSchemaTupleIdentifierString(int)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GetSchemaTupleIdentifierString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GetTypeString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GetTypeString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.GetTypeString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.HashCode.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.HashCode.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.HashCode.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.IsSpecificSchemaTuple.IsSpecificSchemaTuple(int)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.IsSpecificSchemaTuple.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.ListSetString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.ListSetString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.ListSetString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.MemorySizeString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.MemorySizeString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.MemorySizeString.process(int,FieldSchema)",9,14,17
"org.apache.pig.data.SchemaTupleClassGenerator.ReadString.ReadString(Queue<Integer>,boolean)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.ReadString.end()",1,3,3
"org.apache.pig.data.SchemaTupleClassGenerator.ReadString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.ReadString.process(int,FieldSchema)",1,3,3
"org.apache.pig.data.SchemaTupleClassGenerator.SchemaSizeString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SchemaSizeString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SchemaTupleClassGenerator()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetEqualToSchemaTupleSpecificString.SetEqualToSchemaTupleSpecificString(int)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetEqualToSchemaTupleSpecificString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetEqualToSchemaTupleSpecificString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetEqualToSchemaTupleSpecificString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetEqualToSchemaTupleString.SetEqualToSchemaTupleString(int)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetEqualToSchemaTupleString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetEqualToSchemaTupleString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetEqualToSchemaTupleString.process(int,FieldSchema)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.SetNullString.process(int,FieldSchema)",1,2,3
"org.apache.pig.data.SchemaTupleClassGenerator.SetPosString.SetPosString(Queue<Integer>)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SetPosString.process(int,FieldSchema)",1,4,5
"org.apache.pig.data.SchemaTupleClassGenerator.SizeString.SizeString(boolean)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SizeString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.SizeString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareGetString.TypeAwareGetString(byte)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareGetString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareGetString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareGetString.process(int,FieldSchema)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareSetString.TypeAwareSetString(byte)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareSetString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareSetString.name()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareSetString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareSetString.process(int,FieldSchema)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareSetString.properName()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeAwareSetString.thisType()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.TypeInFunctionStringOut()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.TypeInFunctionStringOut(boolean)",1,1,2
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.add(String)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.addBreak()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.getContent()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isAppendable()",2,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isBag()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isBigDecimal()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isBigInteger()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isBoolean()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isBytearray()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isDateTime()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isDouble()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isFloat()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isInt()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isLong()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isMap()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isObject()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isPrimitive()",1,5,5
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isString()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.isTuple()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.prepareProcess(FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.proper(byte)",3,2,3
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.spaces(int)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.typeName()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOut.typeName(byte)",15,2,15
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOutFactory.TypeInFunctionStringOutFactory(Schema,int,boolean,String,File)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOutFactory.end()",1,3,3
"org.apache.pig.data.SchemaTupleClassGenerator.TypeInFunctionStringOutFactory.process(FieldSchema)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.WriteNullsString.WriteNullsString(boolean)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.WriteNullsString.end()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.WriteNullsString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.WriteNullsString.process(int,FieldSchema)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.WriteString.end()",1,3,3
"org.apache.pig.data.SchemaTupleClassGenerator.WriteString.prepare()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.WriteString.process(int,FieldSchema)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.compileCodeString(String,String,File)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.generateSchemaTuple(Schema,boolean,File,GenContext...)",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.generateSchemaTuple(Schema,boolean,int,File,GenContext...)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.getNextGlobalClassIdentifier()",1,1,1
"org.apache.pig.data.SchemaTupleClassGenerator.produceCodeString(Schema,boolean,int,String,File)",1,2,2
"org.apache.pig.data.SchemaTupleClassGenerator.resetGlobalClassIdentifier()",1,1,1
"org.apache.pig.data.SchemaTupleFactory.SchemaTupleFactory(Class<SchemaTuple<?>>,SchemaTupleQuickGenerator<? extends SchemaTuple<?>>)",1,1,1
"org.apache.pig.data.SchemaTupleFactory.getInstance(Schema)",1,1,1
"org.apache.pig.data.SchemaTupleFactory.getInstance(Schema,boolean)",1,1,1
"org.apache.pig.data.SchemaTupleFactory.getInstance(Schema,boolean,GenContext)",1,1,1
"org.apache.pig.data.SchemaTupleFactory.getInstance(int)",1,1,1
"org.apache.pig.data.SchemaTupleFactory.isFixedSize()",1,1,1
"org.apache.pig.data.SchemaTupleFactory.isGeneratable(Schema)",4,4,6
"org.apache.pig.data.SchemaTupleFactory.newTuple()",1,1,1
"org.apache.pig.data.SchemaTupleFactory.newTuple(int)",2,1,2
"org.apache.pig.data.SchemaTupleFactory.tupleClass()",1,1,1
"org.apache.pig.data.SchemaTupleFrontend.SchemaTupleFrontendGenHelper.SchemaTupleFrontendGenHelper(PigContext,Configuration)",1,1,1
"org.apache.pig.data.SchemaTupleFrontend.SchemaTupleFrontendGenHelper.generateAll(Map<Pair<SchemaKey, Boolean>, Pair<Integer, Set<GenContext>>>)",4,5,6
"org.apache.pig.data.SchemaTupleFrontend.SchemaTupleFrontendGenHelper.internalCopyAllGeneratedToDistributedCache()",3,4,8
"org.apache.pig.data.SchemaTupleFrontend.copyAllGeneratedToDistributedCache(PigContext,Configuration)",2,4,4
"org.apache.pig.data.SchemaTupleFrontend.getSchemasToGenerate()",1,1,1
"org.apache.pig.data.SchemaTupleFrontend.internalRegisterToGenerateIfPossible(Schema,boolean,GenContext)",3,3,4
"org.apache.pig.data.SchemaTupleFrontend.lazyReset(PigContext)",1,1,1
"org.apache.pig.data.SchemaTupleFrontend.registerToGenerateIfPossible(Schema,boolean,GenContext)",2,3,5
"org.apache.pig.data.SchemaTupleFrontend.reset()",1,1,1
"org.apache.pig.data.SchemaTupleFrontend.stripAliases(Schema)",1,3,3
"org.apache.pig.data.SelfSpillBag.MemoryLimits.MemoryLimits(int,float)",1,1,1
"org.apache.pig.data.SelfSpillBag.MemoryLimits.addNewObjSize(long)",1,1,1
"org.apache.pig.data.SelfSpillBag.MemoryLimits.getCacheLimit()",1,1,3
"org.apache.pig.data.SelfSpillBag.MemoryLimits.getNumObjectsSizeAdded()",1,1,1
"org.apache.pig.data.SelfSpillBag.MemoryLimits.init(int,float)",1,1,3
"org.apache.pig.data.SelfSpillBag.SelfSpillBag(int)",1,1,1
"org.apache.pig.data.SelfSpillBag.SelfSpillBag(int,float)",1,1,1
"org.apache.pig.data.SingleTupleBag.SingleTupleBag(Tuple)",1,1,1
"org.apache.pig.data.SingleTupleBag.TBIterator.hasNext()",1,1,1
"org.apache.pig.data.SingleTupleBag.TBIterator.next()",1,1,1
"org.apache.pig.data.SingleTupleBag.TBIterator.remove()",1,1,1
"org.apache.pig.data.SingleTupleBag.add(Tuple)",1,1,1
"org.apache.pig.data.SingleTupleBag.addAll(DataBag)",1,1,1
"org.apache.pig.data.SingleTupleBag.clear()",1,1,1
"org.apache.pig.data.SingleTupleBag.compareTo(Object)",1,1,1
"org.apache.pig.data.SingleTupleBag.equals(Object)",1,1,1
"org.apache.pig.data.SingleTupleBag.getMemorySize()",1,1,1
"org.apache.pig.data.SingleTupleBag.hashCode()",1,1,1
"org.apache.pig.data.SingleTupleBag.isDistinct()",1,1,1
"org.apache.pig.data.SingleTupleBag.isSorted()",1,1,1
"org.apache.pig.data.SingleTupleBag.iterator()",1,1,1
"org.apache.pig.data.SingleTupleBag.markStale(boolean)",1,1,1
"org.apache.pig.data.SingleTupleBag.readFields(DataInput)",2,2,3
"org.apache.pig.data.SingleTupleBag.size()",1,1,1
"org.apache.pig.data.SingleTupleBag.spill()",1,1,1
"org.apache.pig.data.SingleTupleBag.toString()",1,1,1
"org.apache.pig.data.SingleTupleBag.write(DataOutput)",1,2,2
"org.apache.pig.data.SizeUtil.getMapEntrySize(Object,Object)",1,1,1
"org.apache.pig.data.SizeUtil.getPigObjMemSize(Object)",16,8,17
"org.apache.pig.data.SizeUtil.roundToEight(long)",1,1,1
"org.apache.pig.data.SortedDataBag.DefaultComparator.compare(Tuple,Tuple)",1,1,1
"org.apache.pig.data.SortedDataBag.DefaultComparator.equals(Object)",1,1,1
"org.apache.pig.data.SortedDataBag.DefaultComparator.hashCode()",1,1,1
"org.apache.pig.data.SortedDataBag.SortedDataBag(Comparator<Tuple>)",1,1,2
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.PQContainer.compareTo(PQContainer)",1,1,1
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.PQContainer.equals(Object)",2,2,2
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.PQContainer.hashCode()",1,1,1
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.SortedDataBagIterator()",1,2,2
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.addToQueue(PQContainer,int)",3,7,8
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.hasNext()",1,1,1
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.next()",5,10,13
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.preMerge()",4,10,11
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.readFromMemory()",3,2,3
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.readFromPriorityQ()",4,5,6
"org.apache.pig.data.SortedDataBag.SortedDataBagIterator.remove()",1,1,1
"org.apache.pig.data.SortedDataBag.isDistinct()",1,1,1
"org.apache.pig.data.SortedDataBag.isSorted()",1,1,1
"org.apache.pig.data.SortedDataBag.iterator()",1,1,1
"org.apache.pig.data.SortedDataBag.spill()",2,8,9
"org.apache.pig.data.SortedSpillBag.SortedSpillBag(int,float)",1,1,1
"org.apache.pig.data.SortedSpillBag.proactive_spill(Comparator<Tuple>)",2,9,10
"org.apache.pig.data.TargetedTuple.TargetedTuple()",1,1,1
"org.apache.pig.data.TargetedTuple.TargetedTuple(Tuple,List<OperatorKey>)",1,1,1
"org.apache.pig.data.TargetedTuple.append(Object)",1,1,1
"org.apache.pig.data.TargetedTuple.compareTo(Object)",1,1,1
"org.apache.pig.data.TargetedTuple.equals(Object)",1,1,1
"org.apache.pig.data.TargetedTuple.get(int)",1,1,1
"org.apache.pig.data.TargetedTuple.getAll()",1,1,1
"org.apache.pig.data.TargetedTuple.getMemorySize()",1,1,1
"org.apache.pig.data.TargetedTuple.getTargetOps()",1,1,1
"org.apache.pig.data.TargetedTuple.getType(int)",1,1,1
"org.apache.pig.data.TargetedTuple.hashCode()",1,1,1
"org.apache.pig.data.TargetedTuple.readFields(DataInput)",1,2,2
"org.apache.pig.data.TargetedTuple.reference(Tuple)",1,1,1
"org.apache.pig.data.TargetedTuple.set(int,Object)",1,1,1
"org.apache.pig.data.TargetedTuple.setTargetOps(List<OperatorKey>)",1,1,1
"org.apache.pig.data.TargetedTuple.size()",1,1,1
"org.apache.pig.data.TargetedTuple.toString()",1,2,2
"org.apache.pig.data.TargetedTuple.toTuple()",1,1,1
"org.apache.pig.data.TargetedTuple.write(DataOutput)",1,2,2
"org.apache.pig.data.TimestampedTuple.TimestampedTuple(String,String,int,SimpleDateFormat)",1,4,5
"org.apache.pig.data.TimestampedTuple.TimestampedTuple(int)",1,1,1
"org.apache.pig.data.TimestampedTuple.getTimeStamp()",1,1,1
"org.apache.pig.data.TimestampedTuple.isHeartBeat()",1,1,1
"org.apache.pig.data.TimestampedTuple.setHeartBeat(boolean)",1,1,1
"org.apache.pig.data.TimestampedTuple.setTimeStamp(double)",1,1,1
"org.apache.pig.data.TupleFactory.TupleFactory()",1,1,1
"org.apache.pig.data.TupleFactory.getInstance()",8,4,11
"org.apache.pig.data.TupleFactory.resetSelf()",1,1,1
"org.apache.pig.data.TupleFactory.tupleRawComparatorClass()",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.append(Object)",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.compareTo(Object)",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.get(int)",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.getAll()",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.getMemorySize()",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.readFields(DataInput)",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.set(int,Object)",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.size()",1,1,1
"org.apache.pig.data.UnlimitedNullTuple.write(DataOutput)",1,1,1
"org.apache.pig.data.WritableByteArray.WritableByteArray()",1,1,1
"org.apache.pig.data.WritableByteArray.WritableByteArray(byte[])",1,1,1
"org.apache.pig.data.WritableByteArray.WritableByteArray(int)",1,1,1
"org.apache.pig.data.WritableByteArray.getData()",1,1,1
"org.apache.pig.data.WritableByteArray.getLength()",1,1,1
"org.apache.pig.data.utils.BytesHelper.getBitByPos(byte,int)",1,1,1
"org.apache.pig.data.utils.BytesHelper.setBitByPos(byte,boolean,int)",2,1,2
"org.apache.pig.data.utils.MethodHelper.MethodHelper()",1,1,1
"org.apache.pig.data.utils.MethodHelper.isNotImplementedAnnotationPresent(Method,Class<?>)",4,3,4
"org.apache.pig.data.utils.MethodHelper.methodNotImplemented()",1,1,1
"org.apache.pig.data.utils.MethodHelper.methodSignatureEqual(Method,Method)",6,3,6
"org.apache.pig.data.utils.SedesHelper.Varint.Varint()",1,1,1
"org.apache.pig.data.utils.SedesHelper.Varint.readSignedVarInt(DataInput)",1,1,1
"org.apache.pig.data.utils.SedesHelper.Varint.readSignedVarLong(DataInput)",1,1,1
"org.apache.pig.data.utils.SedesHelper.Varint.readUnsignedVarInt(DataInput)",3,1,3
"org.apache.pig.data.utils.SedesHelper.Varint.readUnsignedVarLong(DataInput)",3,1,3
"org.apache.pig.data.utils.SedesHelper.Varint.writeSignedVarInt(int,DataOutput)",1,1,1
"org.apache.pig.data.utils.SedesHelper.Varint.writeSignedVarLong(long,DataOutput)",1,1,1
"org.apache.pig.data.utils.SedesHelper.Varint.writeUnsignedVarInt(int,DataOutput)",1,2,2
"org.apache.pig.data.utils.SedesHelper.Varint.writeUnsignedVarLong(long,DataOutput)",1,2,2
"org.apache.pig.data.utils.SedesHelper.readBooleanArray(DataInput,int)",1,2,3
"org.apache.pig.data.utils.SedesHelper.readBytes(DataInput,byte)",2,2,4
"org.apache.pig.data.utils.SedesHelper.readChararray(DataInput,byte)",2,2,2
"org.apache.pig.data.utils.SedesHelper.readGenericTuple(DataInput,byte)",1,2,2
"org.apache.pig.data.utils.SedesHelper.writeBooleanArray(DataOutput,boolean[])",1,2,5
"org.apache.pig.data.utils.SedesHelper.writeBooleanArray(DataOutput,boolean[],boolean)",1,2,7
"org.apache.pig.data.utils.SedesHelper.writeBytes(DataOutput,byte[])",1,3,3
"org.apache.pig.data.utils.SedesHelper.writeChararray(DataOutput,String)",1,2,2
"org.apache.pig.data.utils.SedesHelper.writeGenericTuple(DataOutput,Tuple)",2,5,15
"org.apache.pig.data.utils.StructuresHelper.Pair.Pair(T1,T2)",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Pair.equals(Object)",5,3,5
"org.apache.pig.data.utils.StructuresHelper.Pair.getFirst()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Pair.getSecond()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Pair.hashCode()",1,3,3
"org.apache.pig.data.utils.StructuresHelper.Pair.make(A,B)",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Pair.toString()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.SchemaKey.SchemaKey(Schema)",1,1,1
"org.apache.pig.data.utils.StructuresHelper.SchemaKey.equals(Object)",2,2,4
"org.apache.pig.data.utils.StructuresHelper.SchemaKey.get()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.SchemaKey.hashCode()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.SchemaKey.hashCode(FieldSchema)",1,2,2
"org.apache.pig.data.utils.StructuresHelper.SchemaKey.hashCode(Schema)",2,2,3
"org.apache.pig.data.utils.StructuresHelper.SchemaKey.toString()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.StructuresHelper()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Triple.Triple(T1,T2,T3)",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Triple.equals(Object)",8,4,8
"org.apache.pig.data.utils.StructuresHelper.Triple.getFirst()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Triple.getSecond()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Triple.getThird()",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Triple.hashCode()",1,4,4
"org.apache.pig.data.utils.StructuresHelper.Triple.make(A,B,C)",1,1,1
"org.apache.pig.data.utils.StructuresHelper.Triple.toString()",1,1,1
"org.apache.pig.impl.PigContext.ContextClassLoader.ContextClassLoader(ClassLoader)",1,1,1
"org.apache.pig.impl.PigContext.ContextClassLoader.ContextClassLoader(URL[],ClassLoader)",1,1,1
"org.apache.pig.impl.PigContext.ContextClassLoader.addURL(URL)",1,1,1
"org.apache.pig.impl.PigContext.PigContext()",1,1,1
"org.apache.pig.impl.PigContext.PigContext(Configuration)",1,1,1
"org.apache.pig.impl.PigContext.PigContext(ExecType,Configuration)",1,1,1
"org.apache.pig.impl.PigContext.PigContext(ExecType,Properties)",1,1,1
"org.apache.pig.impl.PigContext.PigContext(Properties)",1,1,1
"org.apache.pig.impl.PigContext.addJar(String)",1,2,2
"org.apache.pig.impl.PigContext.addJar(URL,String)",1,3,3
"org.apache.pig.impl.PigContext.addPathToSkip(String)",1,1,1
"org.apache.pig.impl.PigContext.addScriptFile(String)",1,1,1
"org.apache.pig.impl.PigContext.addScriptFile(String,String)",1,2,2
"org.apache.pig.impl.PigContext.addScriptJar(String)",1,3,3
"org.apache.pig.impl.PigContext.connect()",1,1,1
"org.apache.pig.impl.PigContext.copy(String,String,boolean)",2,3,6
"org.apache.pig.impl.PigContext.createCl(String)",1,2,4
"org.apache.pig.impl.PigContext.createExecutableManager()",2,2,2
"org.apache.pig.impl.PigContext.doParamSubstitution(BufferedReader)",1,2,2
"org.apache.pig.impl.PigContext.doParamSubstitution(BufferedReader,List<String>,List<String>)",1,1,1
"org.apache.pig.impl.PigContext.doParamSubstitution(InputStream,List<String>,List<String>)",1,1,1
"org.apache.pig.impl.PigContext.doParamSubstitutionOutputToFile(BufferedReader,String)",1,2,3
"org.apache.pig.impl.PigContext.doParamSubstitutionOutputToFile(BufferedReader,String,List<String>,List<String>)",1,1,1
"org.apache.pig.impl.PigContext.getClassCache()",1,2,2
"org.apache.pig.impl.PigContext.getClassForAlias(String)",1,3,3
"org.apache.pig.impl.PigContext.getClassLoader()",1,1,1
"org.apache.pig.impl.PigContext.getCommandForAlias(String)",1,1,1
"org.apache.pig.impl.PigContext.getConf()",1,1,1
"org.apache.pig.impl.PigContext.getDefaultLogLevel()",1,1,1
"org.apache.pig.impl.PigContext.getDfs()",1,1,1
"org.apache.pig.impl.PigContext.getErrorSource()",1,1,1
"org.apache.pig.impl.PigContext.getExecType()",1,1,1
"org.apache.pig.impl.PigContext.getExecutionEngine()",1,1,1
"org.apache.pig.impl.PigContext.getFs()",1,1,1
"org.apache.pig.impl.PigContext.getFuncSpecFromAlias(String)",2,2,3
"org.apache.pig.impl.PigContext.getLastAlias()",1,1,1
"org.apache.pig.impl.PigContext.getLfs()",1,1,1
"org.apache.pig.impl.PigContext.getLog4jProperties()",1,1,1
"org.apache.pig.impl.PigContext.getPackageImportList()",1,2,2
"org.apache.pig.impl.PigContext.getParamFiles()",1,1,1
"org.apache.pig.impl.PigContext.getParamVal()",2,3,3
"org.apache.pig.impl.PigContext.getParams()",1,1,1
"org.apache.pig.impl.PigContext.getPathsToSkip()",1,1,1
"org.apache.pig.impl.PigContext.getPreprocessorContext()",1,1,1
"org.apache.pig.impl.PigContext.getProperties()",1,1,1
"org.apache.pig.impl.PigContext.getScriptFiles()",1,1,1
"org.apache.pig.impl.PigContext.hasJar(String)",3,2,3
"org.apache.pig.impl.PigContext.init()",1,2,2
"org.apache.pig.impl.PigContext.initializeImportList(String)",1,2,3
"org.apache.pig.impl.PigContext.instantiateFuncFromAlias(String)",2,3,3
"org.apache.pig.impl.PigContext.instantiateFuncFromSpec(FuncSpec)",1,5,8
"org.apache.pig.impl.PigContext.instantiateFuncFromSpec(String)",1,1,1
"org.apache.pig.impl.PigContext.instantiateObjectFromParams(Configuration,String,String,Class<T>)",2,4,4
"org.apache.pig.impl.PigContext.markJarAsPredeployed(String)",1,3,3
"org.apache.pig.impl.PigContext.registerFunction(String,FuncSpec)",1,2,2
"org.apache.pig.impl.PigContext.registerStreamCmd(String,StreamingCommand)",1,2,2
"org.apache.pig.impl.PigContext.rename(String,String)",3,4,7
"org.apache.pig.impl.PigContext.resolveClassName(String)",3,2,5
"org.apache.pig.impl.PigContext.setClassLoader(ClassLoader)",1,1,2
"org.apache.pig.impl.PigContext.setDefaultLogLevel(Level)",1,1,1
"org.apache.pig.impl.PigContext.setExecType(ExecType)",1,1,1
"org.apache.pig.impl.PigContext.setJobtrackerLocation(String)",1,1,1
"org.apache.pig.impl.PigContext.setLastAlias(String)",1,1,1
"org.apache.pig.impl.PigContext.setLog4jProperties(Properties)",1,1,1
"org.apache.pig.impl.PigContext.setPackageImportList(ArrayList<String>)",1,1,1
"org.apache.pig.impl.PigContext.setParamFiles(List<String>)",1,1,1
"org.apache.pig.impl.PigContext.setParams(List<String>)",1,1,1
"org.apache.pig.impl.PigContext.staticDataCleanup()",1,1,1
"org.apache.pig.impl.PigImplConstants.PigImplConstants()",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.DefaultIndexableLoader(String,String,String,String,String)",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.close()",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.extractKeysFromIdxTuple(Tuple)",2,3,3
"org.apache.pig.impl.builtin.DefaultIndexableLoader.genKey()",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.getInputFormat()",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.getLoadCaster()",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.getNext()",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.initRightLoader(int[])",1,2,2
"org.apache.pig.impl.builtin.DefaultIndexableLoader.initialize(Configuration)",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.seekNear(Tuple)",8,13,14
"org.apache.pig.impl.builtin.DefaultIndexableLoader.setIndexFile(String)",1,1,1
"org.apache.pig.impl.builtin.DefaultIndexableLoader.setLocation(String,Job)",1,1,1
"org.apache.pig.impl.builtin.FindQuantiles.FindQuantiles()",1,1,1
"org.apache.pig.impl.builtin.FindQuantiles.FindQuantiles(String[])",1,3,7
"org.apache.pig.impl.builtin.FindQuantiles.SortComparator.compare(Tuple,Tuple)",8,7,10
"org.apache.pig.impl.builtin.FindQuantiles.areEqual(Tuple,Tuple)",1,1,1
"org.apache.pig.impl.builtin.FindQuantiles.exec(Tuple)",9,18,22
"org.apache.pig.impl.builtin.FindQuantiles.instantiateFunc()",1,2,2
"org.apache.pig.impl.builtin.FindQuantiles.readObject(ObjectInputStream)",1,1,1
"org.apache.pig.impl.builtin.GFAny.GFAny()",1,1,1
"org.apache.pig.impl.builtin.GFAny.GFAny(int)",1,1,1
"org.apache.pig.impl.builtin.GFAny.exec(Tuple)",1,1,1
"org.apache.pig.impl.builtin.GFCross.GFCross(String)",1,1,1
"org.apache.pig.impl.builtin.GFCross.exec(Tuple)",5,4,7
"org.apache.pig.impl.builtin.GFCross.getCrossKey()",1,1,1
"org.apache.pig.impl.builtin.GFCross.next(int[])",4,1,4
"org.apache.pig.impl.builtin.GFCross.toTuple(int[])",1,2,2
"org.apache.pig.impl.builtin.GFReplicate.GFReplicate()",1,1,1
"org.apache.pig.impl.builtin.GFReplicate.GFReplicate(int)",1,1,1
"org.apache.pig.impl.builtin.GFReplicate.exec(Tuple)",1,2,2
"org.apache.pig.impl.builtin.GetMemNumRows.GetMemNumRows()",1,1,1
"org.apache.pig.impl.builtin.GetMemNumRows.exec(Tuple)",2,3,4
"org.apache.pig.impl.builtin.GetMemNumRows.getReturnType()",1,1,1
"org.apache.pig.impl.builtin.IdentityColumn.exec(Tuple)",1,1,1
"org.apache.pig.impl.builtin.IdentityColumn.outputSchema(Schema)",1,1,1
"org.apache.pig.impl.builtin.IsFirstReduceOfKey.exec(Tuple)",3,2,4
"org.apache.pig.impl.builtin.IsFirstReduceOfKey.init()",2,2,3
"org.apache.pig.impl.builtin.PartitionSkewedKeys.PartitionSkewedKeys()",1,1,1
"org.apache.pig.impl.builtin.PartitionSkewedKeys.PartitionSkewedKeys(String[])",1,3,4
"org.apache.pig.impl.builtin.PartitionSkewedKeys.calculateReducers(Tuple,long,long,long)",2,3,8
"org.apache.pig.impl.builtin.PartitionSkewedKeys.exec(Tuple)",2,14,17
"org.apache.pig.impl.builtin.PartitionSkewedKeys.getMemorySize(Tuple)",1,1,2
"org.apache.pig.impl.builtin.PartitionSkewedKeys.hasSameKey(Tuple,Tuple)",4,4,7
"org.apache.pig.impl.builtin.PoissonSampleLoader.PoissonSampleLoader(String,String)",1,1,1
"org.apache.pig.impl.builtin.PoissonSampleLoader.createNumRowTuple(Tuple)",1,4,4
"org.apache.pig.impl.builtin.PoissonSampleLoader.getNext()",7,6,7
"org.apache.pig.impl.builtin.PoissonSampleLoader.prepareToRead(RecordReader,PigSplit)",1,2,2
"org.apache.pig.impl.builtin.PoissonSampleLoader.updateSkipInterval(Tuple)",1,1,2
"org.apache.pig.impl.builtin.RandomSampleLoader.RandomSampleLoader(String,String)",1,1,1
"org.apache.pig.impl.builtin.RandomSampleLoader.getNext()",9,6,9
"org.apache.pig.impl.builtin.RandomSampleLoader.getSample()",2,1,2
"org.apache.pig.impl.builtin.RandomSampleLoader.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.impl.builtin.ReadScalars.exec(Tuple)",8,10,13
"org.apache.pig.impl.builtin.ReadScalars.setOutputBuffer(Map<String, DataBag>)",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.SampleLoader(String)",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.computeSamples(ArrayList<Pair<FileSpec, Boolean>>,PigContext)",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.getInputFormat()",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.getLoadCaster()",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.getNumSamples()",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.relativeToAbsolutePath(String,Path)",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.setLocation(String,Job)",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.setNumSamples(int)",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.setUDFContextSignature(String)",1,1,1
"org.apache.pig.impl.builtin.SampleLoader.skipNext()",1,1,2
"org.apache.pig.impl.builtin.StreamingUDF.ProcessErrorThread.ProcessErrorThread()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.ProcessErrorThread.run()",1,8,8
"org.apache.pig.impl.builtin.StreamingUDF.ProcessInputThread.ProcessInputThread()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.ProcessInputThread.run()",2,3,4
"org.apache.pig.impl.builtin.StreamingUDF.ProcessKiller.run()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.ProcessOutputThread.ProcessOutputThread()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.ProcessOutputThread.run()",1,8,9
"org.apache.pig.impl.builtin.StreamingUDF.StreamingUDF(String,String,String,String,String,String,String)",1,5,5
"org.apache.pig.impl.builtin.StreamingUDF.constructCommand()",1,5,5
"org.apache.pig.impl.builtin.StreamingUDF.createInputHandlers()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.ensureUserFileAvailable(String[],String)",4,5,6
"org.apache.pig.impl.builtin.StreamingUDF.exec(Tuple)",1,2,2
"org.apache.pig.impl.builtin.StreamingUDF.getControllerPath(String)",2,3,3
"org.apache.pig.impl.builtin.StreamingUDF.getOutput(Tuple)",4,6,13
"org.apache.pig.impl.builtin.StreamingUDF.getUserFileExtension()",2,1,2
"org.apache.pig.impl.builtin.StreamingUDF.initialize()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.isPython()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.outputSchema(Schema)",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.setStreams()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.startThreads()",1,1,1
"org.apache.pig.impl.builtin.StreamingUDF.startUdfController()",1,1,1
"org.apache.pig.impl.io.BinStorageInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.BinStorageOutputFormat.getRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.BinStorageRecordReader.close()",1,2,2
"org.apache.pig.impl.io.BinStorageRecordReader.getCurrentKey()",1,1,1
"org.apache.pig.impl.io.BinStorageRecordReader.getCurrentValue()",1,1,1
"org.apache.pig.impl.io.BinStorageRecordReader.getProgress()",2,2,2
"org.apache.pig.impl.io.BinStorageRecordReader.initialize(InputSplit,TaskAttemptContext)",1,2,2
"org.apache.pig.impl.io.BinStorageRecordReader.nextKeyValue()",12,4,18
"org.apache.pig.impl.io.BinStorageRecordWriter.BinStorageRecordWriter(DataOutputStream)",1,1,1
"org.apache.pig.impl.io.BinStorageRecordWriter.close(TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.BinStorageRecordWriter.write(WritableComparable,Tuple)",1,1,1
"org.apache.pig.impl.io.BufferedPositionedInputStream.BufferedPositionedInputStream(InputStream)",1,1,1
"org.apache.pig.impl.io.BufferedPositionedInputStream.BufferedPositionedInputStream(InputStream,long)",1,1,2
"org.apache.pig.impl.io.BufferedPositionedInputStream.close()",1,1,1
"org.apache.pig.impl.io.BufferedPositionedInputStream.getPosition()",2,2,2
"org.apache.pig.impl.io.BufferedPositionedInputStream.read()",1,1,1
"org.apache.pig.impl.io.BufferedPositionedInputStream.read(byte[],int,int)",1,1,1
"org.apache.pig.impl.io.BufferedPositionedInputStream.readLine(Charset,byte)",8,8,15
"org.apache.pig.impl.io.BufferedPositionedInputStream.skip(long)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.DataStorageInputStreamIterator(ElementDescriptor[])",1,1,1
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.available()",2,1,2
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.close()",1,2,2
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.doNext()",1,1,1
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.isEOF()",3,2,3
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.read()",3,2,3
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.read(byte[])",1,1,1
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.read(byte[],int,int)",3,5,6
"org.apache.pig.impl.io.FileLocalizer.DataStorageInputStreamIterator.skip(long)",1,3,3
"org.apache.pig.impl.io.FileLocalizer.FetchFileRet.FetchFileRet(File,boolean)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.checkDefaultPrefix(ExecType,String)",2,1,3
"org.apache.pig.impl.io.FileLocalizer.create(String,PigContext)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.create(String,boolean,PigContext)",2,4,4
"org.apache.pig.impl.io.FileLocalizer.createContainer(ContainerDescriptor)",1,2,2
"org.apache.pig.impl.io.FileLocalizer.delete(String,PigContext)",1,2,2
"org.apache.pig.impl.io.FileLocalizer.deleteTempFiles()",1,3,3
"org.apache.pig.impl.io.FileLocalizer.deleteTempResourceFiles()",1,3,3
"org.apache.pig.impl.io.FileLocalizer.fetchFile(Properties,String)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.fetchFiles(Properties,String)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.fetchFilesInternal(Properties,String,boolean)",5,10,14
"org.apache.pig.impl.io.FileLocalizer.fetchResource(String)",2,4,4
"org.apache.pig.impl.io.FileLocalizer.fileExists(String,DataStorage)",1,2,2
"org.apache.pig.impl.io.FileLocalizer.fileExists(String,PigContext)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.fullPath(String,DataStorage)",1,2,3
"org.apache.pig.impl.io.FileLocalizer.fullPath(String,PigContext)",2,2,3
"org.apache.pig.impl.io.FileLocalizer.getFileElementDescriptors(ElementDescriptor)",4,5,6
"org.apache.pig.impl.io.FileLocalizer.getSize(String)",2,1,2
"org.apache.pig.impl.io.FileLocalizer.getSize(String,Properties)",1,2,2
"org.apache.pig.impl.io.FileLocalizer.getTempContainer(PigContext)",1,3,4
"org.apache.pig.impl.io.FileLocalizer.getTemporaryPath(PigContext)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.getTemporaryPath(PigContext,String)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.getTemporaryResourcePath(PigContext)",1,2,2
"org.apache.pig.impl.io.FileLocalizer.globMatchesFiles(ElementDescriptor,DataStorage)",4,3,5
"org.apache.pig.impl.io.FileLocalizer.hadoopify(String,PigContext)",2,5,6
"org.apache.pig.impl.io.FileLocalizer.isDirectory(String,DataStorage)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.isDirectory(String,PigContext)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.isFile(String,DataStorage)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.isFile(String,PigContext)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.open(String,ExecType,DataStorage)",2,2,2
"org.apache.pig.impl.io.FileLocalizer.open(String,PigContext)",2,2,2
"org.apache.pig.impl.io.FileLocalizer.open(String,long,PigContext)",3,5,6
"org.apache.pig.impl.io.FileLocalizer.openDFSFile(ElementDescriptor)",5,5,6
"org.apache.pig.impl.io.FileLocalizer.openDFSFile(String)",2,1,2
"org.apache.pig.impl.io.FileLocalizer.openDFSFile(String,Properties)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.openLFSFile(ElementDescriptor)",1,1,1
"org.apache.pig.impl.io.FileLocalizer.parseCygPath(String,int)",2,2,8
"org.apache.pig.impl.io.FileLocalizer.relativeRoot(PigContext)",1,2,2
"org.apache.pig.impl.io.FileLocalizer.setInitialized(boolean)",1,2,2
"org.apache.pig.impl.io.FileLocalizer.setR(Random)",1,1,1
"org.apache.pig.impl.io.FileSpec.FileSpec(String,FuncSpec)",1,2,2
"org.apache.pig.impl.io.FileSpec.equals(Object)",3,2,4
"org.apache.pig.impl.io.FileSpec.getFileName()",1,1,1
"org.apache.pig.impl.io.FileSpec.getFuncName()",1,1,1
"org.apache.pig.impl.io.FileSpec.getFuncSpec()",1,1,1
"org.apache.pig.impl.io.FileSpec.getSize()",1,1,1
"org.apache.pig.impl.io.FileSpec.hashCode()",1,1,1
"org.apache.pig.impl.io.FileSpec.toString()",1,1,1
"org.apache.pig.impl.io.InterRecordReader.close()",1,2,2
"org.apache.pig.impl.io.InterRecordReader.getCurrentKey()",1,1,1
"org.apache.pig.impl.io.InterRecordReader.getCurrentValue()",1,1,1
"org.apache.pig.impl.io.InterRecordReader.getProgress()",2,2,2
"org.apache.pig.impl.io.InterRecordReader.initialize(InputSplit,TaskAttemptContext)",1,2,2
"org.apache.pig.impl.io.InterRecordReader.nextKeyValue()",12,5,18
"org.apache.pig.impl.io.InterRecordWriter.InterRecordWriter(DataOutputStream)",1,1,1
"org.apache.pig.impl.io.InterRecordWriter.close(TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.InterRecordWriter.write(WritableComparable,Tuple)",1,1,1
"org.apache.pig.impl.io.InterStorage.InterInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.InterStorage.InterOutputFormat.getRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.InterStorage.InterStorage()",1,1,1
"org.apache.pig.impl.io.InterStorage.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.impl.io.InterStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.impl.io.InterStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.impl.io.InterStorage.getInputFormat()",1,1,1
"org.apache.pig.impl.io.InterStorage.getNext()",2,2,2
"org.apache.pig.impl.io.InterStorage.getOutputFormat()",1,1,1
"org.apache.pig.impl.io.InterStorage.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.impl.io.InterStorage.getSchema(String,Job)",1,1,1
"org.apache.pig.impl.io.InterStorage.getStatistics(String,Job)",1,1,1
"org.apache.pig.impl.io.InterStorage.hashCode()",1,1,1
"org.apache.pig.impl.io.InterStorage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.impl.io.InterStorage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.impl.io.InterStorage.putNext(Tuple)",1,1,2
"org.apache.pig.impl.io.InterStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.impl.io.InterStorage.setLocation(String,Job)",1,1,1
"org.apache.pig.impl.io.InterStorage.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.impl.io.InterStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.impl.io.InterStorage.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.impl.io.NullableBag.NullableBag()",1,2,2
"org.apache.pig.impl.io.NullableBag.NullableBag(DataBag)",1,1,1
"org.apache.pig.impl.io.NullableBag.getValueAsPigType()",1,1,2
"org.apache.pig.impl.io.NullableBigDecimalWritable.NullableBigDecimalWritable()",1,1,1
"org.apache.pig.impl.io.NullableBigDecimalWritable.NullableBigDecimalWritable(BigDecimal)",1,1,1
"org.apache.pig.impl.io.NullableBigDecimalWritable.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullableBigIntegerWritable.NullableBigIntegerWritable()",1,1,1
"org.apache.pig.impl.io.NullableBigIntegerWritable.NullableBigIntegerWritable(BigInteger)",1,1,1
"org.apache.pig.impl.io.NullableBigIntegerWritable.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullableBooleanWritable.NullableBooleanWritable()",1,1,1
"org.apache.pig.impl.io.NullableBooleanWritable.NullableBooleanWritable(boolean)",1,1,1
"org.apache.pig.impl.io.NullableBooleanWritable.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullableBytesWritable.NullableBytesWritable()",1,1,1
"org.apache.pig.impl.io.NullableBytesWritable.NullableBytesWritable(Object)",1,1,2
"org.apache.pig.impl.io.NullableBytesWritable.getValueAsPigType()",2,1,3
"org.apache.pig.impl.io.NullableDateTimeWritable.NullableDateTimeWritable()",1,1,1
"org.apache.pig.impl.io.NullableDateTimeWritable.NullableDateTimeWritable(DateTime)",1,1,1
"org.apache.pig.impl.io.NullableDateTimeWritable.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullableDoubleWritable.NullableDoubleWritable()",1,1,1
"org.apache.pig.impl.io.NullableDoubleWritable.NullableDoubleWritable(double)",1,1,1
"org.apache.pig.impl.io.NullableDoubleWritable.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullableFloatWritable.NullableFloatWritable()",1,1,1
"org.apache.pig.impl.io.NullableFloatWritable.NullableFloatWritable(float)",1,1,1
"org.apache.pig.impl.io.NullableFloatWritable.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullableIntWritable.NullableIntWritable()",1,1,1
"org.apache.pig.impl.io.NullableIntWritable.NullableIntWritable(int)",1,1,1
"org.apache.pig.impl.io.NullableIntWritable.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullableLongWritable.NullableLongWritable()",1,1,1
"org.apache.pig.impl.io.NullableLongWritable.NullableLongWritable(long)",1,1,1
"org.apache.pig.impl.io.NullableLongWritable.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullablePartitionWritable.NullablePartitionWritable()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.NullablePartitionWritable(PigNullableWritable)",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.clone()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.compareTo(Object)",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.getIndex()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.getKey()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.getPartition()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.getValueAsPigType()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.hashCode()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.isNull()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.readFields(DataInput)",1,1,2
"org.apache.pig.impl.io.NullablePartitionWritable.setIndex(byte)",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.setKey(PigNullableWritable)",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.setNull(boolean)",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.setPartition(int)",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.toString()",1,1,1
"org.apache.pig.impl.io.NullablePartitionWritable.write(DataOutput)",1,1,1
"org.apache.pig.impl.io.NullableText.NullableText()",1,1,1
"org.apache.pig.impl.io.NullableText.NullableText(String)",1,1,1
"org.apache.pig.impl.io.NullableText.NullableText(byte[])",1,1,1
"org.apache.pig.impl.io.NullableText.getValueAsPigType()",1,2,2
"org.apache.pig.impl.io.NullableTuple.NullableTuple()",1,1,1
"org.apache.pig.impl.io.NullableTuple.NullableTuple(NullableTuple)",1,1,1
"org.apache.pig.impl.io.NullableTuple.NullableTuple(Tuple)",1,1,1
"org.apache.pig.impl.io.NullableTuple.getValueAsPigType()",1,1,2
"org.apache.pig.impl.io.NullableTuple.readFields(DataInput)",1,2,2
"org.apache.pig.impl.io.NullableUnknownWritable.NullableUnknownWritable()",1,1,1
"org.apache.pig.impl.io.NullableUnknownWritable.NullableUnknownWritable(WritableComparable<?>)",1,1,1
"org.apache.pig.impl.io.NullableUnknownWritable.getValueAsPigType()",1,1,2
"org.apache.pig.impl.io.PigFile.PigFile(String)",1,1,1
"org.apache.pig.impl.io.PigFile.PigFile(String,boolean)",1,1,1
"org.apache.pig.impl.io.PigFile.load(LoadFunc,PigContext)",1,2,2
"org.apache.pig.impl.io.PigFile.store(DataBag,FuncSpec,PigContext)",1,3,4
"org.apache.pig.impl.io.PigFile.toString()",1,1,1
"org.apache.pig.impl.io.PigNullableWritable.clone()",1,1,2
"org.apache.pig.impl.io.PigNullableWritable.compareTo(Object)",12,4,17
"org.apache.pig.impl.io.PigNullableWritable.equals(Object)",1,1,1
"org.apache.pig.impl.io.PigNullableWritable.getIndex()",1,1,1
"org.apache.pig.impl.io.PigNullableWritable.hashCode()",2,2,2
"org.apache.pig.impl.io.PigNullableWritable.isNull()",1,1,1
"org.apache.pig.impl.io.PigNullableWritable.readFields(DataInput)",1,2,2
"org.apache.pig.impl.io.PigNullableWritable.setIndex(byte)",1,1,1
"org.apache.pig.impl.io.PigNullableWritable.setNull(boolean)",1,1,1
"org.apache.pig.impl.io.PigNullableWritable.toString()",1,2,2
"org.apache.pig.impl.io.PigNullableWritable.write(DataOutput)",1,2,2
"org.apache.pig.impl.io.ReadToEndLoader.ReadToEndLoader(LoadFunc,Configuration,String,int)",1,1,1
"org.apache.pig.impl.io.ReadToEndLoader.ReadToEndLoader(LoadFunc,Configuration,String,int,PigContext)",1,1,1
"org.apache.pig.impl.io.ReadToEndLoader.ReadToEndLoader(LoadFunc,Configuration,String,int,String)",1,1,1
"org.apache.pig.impl.io.ReadToEndLoader.ReadToEndLoader(LoadFunc,Configuration,String,int[])",1,1,2
"org.apache.pig.impl.io.ReadToEndLoader.getInputFormat()",1,1,1
"org.apache.pig.impl.io.ReadToEndLoader.getLoadCaster()",1,1,1
"org.apache.pig.impl.io.ReadToEndLoader.getNext()",3,2,4
"org.apache.pig.impl.io.ReadToEndLoader.getNextHelper()",3,3,3
"org.apache.pig.impl.io.ReadToEndLoader.getPartitionKeys(String,Job)",2,2,2
"org.apache.pig.impl.io.ReadToEndLoader.getSchema(String,Job)",2,2,2
"org.apache.pig.impl.io.ReadToEndLoader.getStatistics(String,Job)",2,2,2
"org.apache.pig.impl.io.ReadToEndLoader.init()",1,2,4
"org.apache.pig.impl.io.ReadToEndLoader.initializeReader()",2,2,3
"org.apache.pig.impl.io.ReadToEndLoader.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.impl.io.ReadToEndLoader.setLocation(String,Job)",1,1,1
"org.apache.pig.impl.io.ReadToEndLoader.setPartitionFilter(Expression)",1,2,2
"org.apache.pig.impl.io.ReadToEndLoader.setUDFContextSignature(String)",1,1,1
"org.apache.pig.impl.io.ReadToEndLoader.updateCurSplitIndex()",1,1,3
"org.apache.pig.impl.io.ResourceNotFoundException.ResourceNotFoundException(String)",1,1,1
"org.apache.pig.impl.io.ResourceNotFoundException.toString()",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.SequenceFileInterStorage()",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.SequenceFileTupleOutputFormat.getRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.SequenceFileTupleOutputFormat.getSequenceWriter(TaskAttemptContext)",1,2,2
"org.apache.pig.impl.io.SequenceFileInterStorage.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.getInputFormat()",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.getNext()",2,2,3
"org.apache.pig.impl.io.SequenceFileInterStorage.getOutputFormat()",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.getSchema(String,Job)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.getStatistics(String,Job)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.putNext(Tuple)",1,1,2
"org.apache.pig.impl.io.SequenceFileInterStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.setLocation(String,Job)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.impl.io.SequenceFileInterStorage.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.impl.io.TFileRecordReader.close()",1,4,4
"org.apache.pig.impl.io.TFileRecordReader.getCurrentKey()",1,1,1
"org.apache.pig.impl.io.TFileRecordReader.getCurrentValue()",1,1,1
"org.apache.pig.impl.io.TFileRecordReader.getProgress()",2,2,2
"org.apache.pig.impl.io.TFileRecordReader.initialize(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.TFileRecordReader.nextKeyValue()",2,1,2
"org.apache.pig.impl.io.TFileRecordWriter.TFileRecordWriter(Path,String,Configuration)",1,1,1
"org.apache.pig.impl.io.TFileRecordWriter.close(TaskAttemptContext)",1,3,3
"org.apache.pig.impl.io.TFileRecordWriter.write(WritableComparable,Tuple)",1,1,1
"org.apache.pig.impl.io.TFileStorage.TFileInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.impl.io.TFileStorage.TFileOutputFormat.getRecordWriter(TaskAttemptContext)",2,3,5
"org.apache.pig.impl.io.TFileStorage.TFileStorage()",1,1,1
"org.apache.pig.impl.io.TFileStorage.checkSchema(ResourceSchema)",1,1,1
"org.apache.pig.impl.io.TFileStorage.cleanupOnFailure(String,Job)",1,1,1
"org.apache.pig.impl.io.TFileStorage.cleanupOnSuccess(String,Job)",1,1,1
"org.apache.pig.impl.io.TFileStorage.getInputFormat()",1,1,1
"org.apache.pig.impl.io.TFileStorage.getNext()",2,2,2
"org.apache.pig.impl.io.TFileStorage.getOutputFormat()",1,1,1
"org.apache.pig.impl.io.TFileStorage.getPartitionKeys(String,Job)",1,1,1
"org.apache.pig.impl.io.TFileStorage.getSchema(String,Job)",1,1,1
"org.apache.pig.impl.io.TFileStorage.getStatistics(String,Job)",1,1,1
"org.apache.pig.impl.io.TFileStorage.hashCode()",1,1,1
"org.apache.pig.impl.io.TFileStorage.prepareToRead(RecordReader,PigSplit)",1,1,1
"org.apache.pig.impl.io.TFileStorage.prepareToWrite(RecordWriter)",1,1,1
"org.apache.pig.impl.io.TFileStorage.putNext(Tuple)",1,1,2
"org.apache.pig.impl.io.TFileStorage.relToAbsPathForStoreLocation(String,Path)",1,1,1
"org.apache.pig.impl.io.TFileStorage.setLocation(String,Job)",1,1,1
"org.apache.pig.impl.io.TFileStorage.setPartitionFilter(Expression)",1,1,1
"org.apache.pig.impl.io.TFileStorage.setStoreFuncUDFContextSignature(String)",1,1,1
"org.apache.pig.impl.io.TFileStorage.setStoreLocation(String,Job)",1,1,1
"org.apache.pig.impl.logicalLayer.CanonicalNamer.getNewName()",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException()",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(Operator,String)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(Operator,String,int)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(Operator,String,int,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(Operator,String,int,byte)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(Operator,String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(Operator,String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,SourceLocation)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,byte)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,byte,Throwable,SourceLocation)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,byte,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.FrontendException.FrontendException(Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.FieldSchema(FieldSchema)",1,1,3
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.FieldSchema(String,Schema)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.FieldSchema(String,Schema,byte)",2,3,3
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.FieldSchema(String,byte)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.castable(FieldSchema,FieldSchema)",15,24,32
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.clone()",1,2,3
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.equals(FieldSchema,FieldSchema,boolean,boolean)",12,8,17
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.equals(Object)",2,1,2
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.findFieldSchema(String)",3,2,3
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.hashCode()",1,3,3
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.isNullOrUnknownType(FieldSchema)",1,1,2
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.mergePrefixFieldSchema(FieldSchema)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.mergePrefixFieldSchema(FieldSchema,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.mergePrefixFieldSchema(FieldSchema,boolean,boolean)",10,12,15
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.setFieldSchemaDefaultType(FieldSchema,byte)",2,2,4
"org.apache.pig.impl.logicalLayer.schema.Schema.FieldSchema.toString()",1,3,3
"org.apache.pig.impl.logicalLayer.schema.Schema.Schema()",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.Schema(FieldSchema)",1,3,3
"org.apache.pig.impl.logicalLayer.schema.Schema.Schema(List<FieldSchema>)",1,4,4
"org.apache.pig.impl.logicalLayer.schema.Schema.Schema(Schema)",1,5,6
"org.apache.pig.impl.logicalLayer.schema.Schema.add(FieldSchema)",1,3,3
"org.apache.pig.impl.logicalLayer.schema.Schema.addAlias(String,FieldSchema)",1,3,3
"org.apache.pig.impl.logicalLayer.schema.Schema.castable(Schema,Schema)",7,2,8
"org.apache.pig.impl.logicalLayer.schema.Schema.checkNullAlias(FieldSchema,Schema)",2,1,2
"org.apache.pig.impl.logicalLayer.schema.Schema.clone()",1,4,4
"org.apache.pig.impl.logicalLayer.schema.Schema.equals(Object)",2,1,2
"org.apache.pig.impl.logicalLayer.schema.Schema.equals(Schema,Schema,boolean,boolean)",17,11,24
"org.apache.pig.impl.logicalLayer.schema.Schema.findFieldSchema(String)",5,3,5
"org.apache.pig.impl.logicalLayer.schema.Schema.generateNestedSchema(byte,byte...)",1,2,2
"org.apache.pig.impl.logicalLayer.schema.Schema.getAliases()",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.getField(String)",6,10,12
"org.apache.pig.impl.logicalLayer.schema.Schema.getField(int)",2,2,2
"org.apache.pig.impl.logicalLayer.schema.Schema.getFieldSubNameMatch(String)",4,8,10
"org.apache.pig.impl.logicalLayer.schema.Schema.getFieldSubNameMatchThrowSchemaMergeException(Schema,String)",1,2,2
"org.apache.pig.impl.logicalLayer.schema.Schema.getFields()",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.getPigSchema(ResourceSchema)",2,7,8
"org.apache.pig.impl.logicalLayer.schema.Schema.getPosition(String)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.getPosition(String,boolean)",7,6,11
"org.apache.pig.impl.logicalLayer.schema.Schema.getPositionSubName(String)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.hashCode()",1,2,2
"org.apache.pig.impl.logicalLayer.schema.Schema.indent(StringBuilder,int)",1,3,3
"org.apache.pig.impl.logicalLayer.schema.Schema.isTwoLevelAccessRequired()",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.merge(Schema,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.mergeAlias(String,String,boolean)",4,1,4
"org.apache.pig.impl.logicalLayer.schema.Schema.mergeFieldSchemaFirstLevelSameAlias(FieldSchema,FieldSchema)",8,4,9
"org.apache.pig.impl.logicalLayer.schema.Schema.mergeNameSpacedAlias(String,String)",4,1,4
"org.apache.pig.impl.logicalLayer.schema.Schema.mergePrefixSchema(Schema,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.mergePrefixSchema(Schema,boolean,boolean)",5,4,7
"org.apache.pig.impl.logicalLayer.schema.Schema.mergeSchema(Schema,Schema,boolean)",1,1,2
"org.apache.pig.impl.logicalLayer.schema.Schema.mergeSchema(Schema,Schema,boolean,boolean,boolean)",12,14,22
"org.apache.pig.impl.logicalLayer.schema.Schema.mergeSchemaByAlias(Schema,Schema)",3,6,7
"org.apache.pig.impl.logicalLayer.schema.Schema.mergeSchemasByAlias(Collection<Schema>)",3,4,4
"org.apache.pig.impl.logicalLayer.schema.Schema.prettyPrint()",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.printAliases()",1,2,2
"org.apache.pig.impl.logicalLayer.schema.Schema.reconcile(Schema)",3,12,12
"org.apache.pig.impl.logicalLayer.schema.Schema.setSchemaDefaultType(Schema,byte)",2,2,3
"org.apache.pig.impl.logicalLayer.schema.Schema.setTwoLevelAccessRequired(boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.size()",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.stringifySchema(StringBuilder,Schema,byte)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.Schema.stringifySchema(StringBuilder,Schema,byte,int)",7,14,16
"org.apache.pig.impl.logicalLayer.schema.Schema.toIndentedString(int)",1,1,2
"org.apache.pig.impl.logicalLayer.schema.Schema.toString()",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException()",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,int)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,int,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,int,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,int,byte)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,int,byte,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaMergeException.SchemaMergeException(Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.checkDataTypes(List<Byte>)",3,3,3
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.checkParameters(List<String>,List<Byte>)",2,1,2
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newBagSchema(Byte[])",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newBagSchema(List<Byte>)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newBagSchema(List<String>,List<Byte>)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newBagSchema(String,String,List<String>,List<Byte>)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newBagSchema(String,String,String[],Byte[])",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newBagSchema(String[],Byte[])",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newNames(int)",1,2,2
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newTupleSchema(Byte[])",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newTupleSchema(List<Byte>)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newTupleSchema(List<String>,List<Byte>)",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newTupleSchema(String,List<String>,List<Byte>)",1,2,2
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newTupleSchema(String,String[],Byte[])",1,1,1
"org.apache.pig.impl.logicalLayer.schema.SchemaUtil.newTupleSchema(String[],Byte[])",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException()",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(Operator,String,int,byte)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(Operator,String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,int)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,int,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,int,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,int,byte)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,int,byte,boolean)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.impl.logicalLayer.validators.TypeCheckerException.TypeCheckerException(Throwable)",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.CompilationMessageCollector()",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.Message.Message(String,MessageType)",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.Message.Message(String,MessageType,Enum)",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.Message.getKind()",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.Message.getMessage()",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.Message.getMessageType()",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.Unknown.toString()",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.collect(String,MessageType)",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.collect(String,MessageType,Enum)",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.get(int)",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.getKindAggregate(MessageType)",1,4,5
"org.apache.pig.impl.plan.CompilationMessageCollector.hasError()",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.hasMessage()",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.hasMessageType(MessageType)",3,2,3
"org.apache.pig.impl.plan.CompilationMessageCollector.iterator()",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.logAggregate(Map<Enum, Long>,MessageType,Log)",1,7,8
"org.apache.pig.impl.plan.CompilationMessageCollector.logAllMessages(CompilationMessageCollector,Log)",1,2,2
"org.apache.pig.impl.plan.CompilationMessageCollector.logAllMessages(Log)",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.logMessage(String,MessageType,Log)",2,2,4
"org.apache.pig.impl.plan.CompilationMessageCollector.logMessages(CompilationMessageCollector,MessageType,boolean,Log)",1,4,4
"org.apache.pig.impl.plan.CompilationMessageCollector.logMessages(MessageType,boolean,Log)",1,1,1
"org.apache.pig.impl.plan.CompilationMessageCollector.size()",1,1,1
"org.apache.pig.impl.plan.DependencyOrderWalker.DependencyOrderWalker(P)",1,1,1
"org.apache.pig.impl.plan.DependencyOrderWalker.DependencyOrderWalker(P,boolean)",1,1,1
"org.apache.pig.impl.plan.DependencyOrderWalker.doAllPredecessors(O,Set<O>,Collection<O>)",1,5,5
"org.apache.pig.impl.plan.DependencyOrderWalker.spawnChildWalker(P)",1,1,1
"org.apache.pig.impl.plan.DependencyOrderWalker.walk(PlanVisitor<O, P>)",2,4,5
"org.apache.pig.impl.plan.DepthFirstWalker.DepthFirstWalker(P)",1,1,1
"org.apache.pig.impl.plan.DepthFirstWalker.depthFirst(O,Collection<O>,Set<O>,PlanVisitor<O, P>)",2,3,4
"org.apache.pig.impl.plan.DepthFirstWalker.spawnChildWalker(P)",1,1,1
"org.apache.pig.impl.plan.DepthFirstWalker.walk(PlanVisitor<O, P>)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.DotPlanDumper(P,PrintStream)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.DotPlanDumper(P,PrintStream,boolean,Set<Operator>,Set<Operator>,Set<Operator>)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.connectInvisible(E,S)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.connectInvisibleInput(E,E,S)",1,2,2
"org.apache.pig.impl.plan.DotPlanDumper.connectInvisibleInput(E,S)",1,4,4
"org.apache.pig.impl.plan.DotPlanDumper.connectInvisibleOutput(E,OperatorPlan<? extends Operator>)",1,5,5
"org.apache.pig.impl.plan.DotPlanDumper.dump()",1,3,3
"org.apache.pig.impl.plan.DotPlanDumper.dumpEdge(Operator,Operator)",1,6,6
"org.apache.pig.impl.plan.DotPlanDumper.dumpInvisibleEdge(String,String)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.dumpInvisibleInput(E)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.dumpInvisibleInput(E,E)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.dumpInvisibleOperators(E)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.dumpInvisibleOutput(E)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.dumpMultiInputNestedOperator(E,MultiMap<E, S>)",1,5,5
"org.apache.pig.impl.plan.DotPlanDumper.dumpMultiOutputNestedOperator(E,Collection<S>)",1,2,2
"org.apache.pig.impl.plan.DotPlanDumper.dumpNestedOperator(E,Collection<S>)",1,3,3
"org.apache.pig.impl.plan.DotPlanDumper.dumpOperator(E)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.getAttributes(E)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.getClusterID(Operator)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.getClusterID(Operator,Operator)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.getID(Operator)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.getInvisibleAttributes(Operator)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.getName(E)",1,1,1
"org.apache.pig.impl.plan.DotPlanDumper.getSubgraphID(Operator,Operator,boolean)",1,1,2
"org.apache.pig.impl.plan.DotPlanDumper.getSubgraphID(Operator,boolean)",1,1,2
"org.apache.pig.impl.plan.DotPlanDumper.makeDumper(S,PrintStream)",1,1,1
"org.apache.pig.impl.plan.MapKeysInfo.MapKeysInfo()",1,1,1
"org.apache.pig.impl.plan.MapKeysInfo.MapKeysInfo(List<String>)",1,1,1
"org.apache.pig.impl.plan.MapKeysInfo.MapKeysInfo(boolean)",1,1,1
"org.apache.pig.impl.plan.MapKeysInfo.MapKeysInfo(boolean,List<String>)",1,1,1
"org.apache.pig.impl.plan.MapKeysInfo.getKeys()",1,1,1
"org.apache.pig.impl.plan.MapKeysInfo.needAllKeys()",1,1,1
"org.apache.pig.impl.plan.MapKeysInfo.toString()",3,3,5
"org.apache.pig.impl.plan.NodeIdGenerator.NodeIdGenerator()",1,1,1
"org.apache.pig.impl.plan.NodeIdGenerator.getGenerator()",1,1,1
"org.apache.pig.impl.plan.NodeIdGenerator.getNextNodeId(String)",1,2,2
"org.apache.pig.impl.plan.NodeIdGenerator.reset()",1,1,1
"org.apache.pig.impl.plan.NodeIdGenerator.reset(String)",1,1,1
"org.apache.pig.impl.plan.Operator.Operator(OperatorKey)",1,1,1
"org.apache.pig.impl.plan.Operator.clone()",1,1,1
"org.apache.pig.impl.plan.Operator.compareTo(Operator)",1,1,1
"org.apache.pig.impl.plan.Operator.equals(Object)",2,1,2
"org.apache.pig.impl.plan.Operator.getOperatorKey()",1,1,1
"org.apache.pig.impl.plan.Operator.getProjectionMap()",1,1,1
"org.apache.pig.impl.plan.Operator.hashCode()",1,1,1
"org.apache.pig.impl.plan.Operator.regenerateProjectionMap()",1,1,1
"org.apache.pig.impl.plan.Operator.rewire(Operator<V>,int,Operator<V>,boolean)",2,1,2
"org.apache.pig.impl.plan.Operator.toString()",1,1,1
"org.apache.pig.impl.plan.Operator.unsetProjectionMap()",1,1,1
"org.apache.pig.impl.plan.OperatorKey.OperatorKey()",1,1,1
"org.apache.pig.impl.plan.OperatorKey.OperatorKey(String,long)",1,1,1
"org.apache.pig.impl.plan.OperatorKey.compareTo(OperatorKey)",4,1,4
"org.apache.pig.impl.plan.OperatorKey.equals(Object)",2,3,3
"org.apache.pig.impl.plan.OperatorKey.fromString(String)",1,1,1
"org.apache.pig.impl.plan.OperatorKey.genOpKey(String)",1,1,1
"org.apache.pig.impl.plan.OperatorKey.getId()",1,1,1
"org.apache.pig.impl.plan.OperatorKey.getScope()",1,1,1
"org.apache.pig.impl.plan.OperatorKey.hashCode()",1,1,1
"org.apache.pig.impl.plan.OperatorKey.toString()",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.IndexHelper.IndexHelper(List<E>)",1,4,4
"org.apache.pig.impl.plan.OperatorPlan.IndexHelper.getIndex(E)",2,2,3
"org.apache.pig.impl.plan.OperatorPlan.OperatorPlan()",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.add(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.addAsLeaf(E)",1,3,3
"org.apache.pig.impl.plan.OperatorPlan.checkInPlan(E)",2,2,2
"org.apache.pig.impl.plan.OperatorPlan.connect(E,E)",3,5,5
"org.apache.pig.impl.plan.OperatorPlan.createSoftLink(E,E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.disconnect(E,E)",1,1,3
"org.apache.pig.impl.plan.OperatorPlan.doInsertBetween(E,E,E,boolean)",2,6,7
"org.apache.pig.impl.plan.OperatorPlan.doMerge(OperatorPlan<E>,boolean)",11,19,19
"org.apache.pig.impl.plan.OperatorPlan.dump(PrintStream)",1,6,6
"org.apache.pig.impl.plan.OperatorPlan.generateNewMap(E,E,MultiMap<E, E>)",1,5,5
"org.apache.pig.impl.plan.OperatorPlan.getKeys()",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.getLeaves()",1,5,5
"org.apache.pig.impl.plan.OperatorPlan.getOperator(OperatorKey)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.getOperatorKey(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.getPredecessors(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.getRoots()",1,5,5
"org.apache.pig.impl.plan.OperatorPlan.getSoftLinkPredecessors(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.getSoftLinkSuccessors(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.getSuccessors(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.insertBetween(E,E,E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.isSingleLeafPlan()",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.iterator()",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.markDirty()",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.merge(OperatorPlan<E>)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.mergeSharedPlan(OperatorPlan<E>)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.pathExists(E,E)",4,4,6
"org.apache.pig.impl.plan.OperatorPlan.pushAfter(E,E,int)",11,17,24
"org.apache.pig.impl.plan.OperatorPlan.pushBefore(E,E,int)",11,16,23
"org.apache.pig.impl.plan.OperatorPlan.reconnectPredecessors(E,boolean,boolean)",4,12,13
"org.apache.pig.impl.plan.OperatorPlan.reconnectSuccessors(E,boolean,boolean)",4,16,17
"org.apache.pig.impl.plan.OperatorPlan.remove(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.removeAndReconnect(E)",11,10,18
"org.apache.pig.impl.plan.OperatorPlan.removeAndReconnectMultiSucc(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.removeEdges(E,MultiMap<E, E>,MultiMap<E, E>)",2,2,3
"org.apache.pig.impl.plan.OperatorPlan.removeSoftLink(E,E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.replace(E,E)",1,6,6
"org.apache.pig.impl.plan.OperatorPlan.replaceAndAddPredecessors(E,E)",1,5,5
"org.apache.pig.impl.plan.OperatorPlan.replaceAndAddSucessors(E,E)",1,5,5
"org.apache.pig.impl.plan.OperatorPlan.replaceNode(E,E,E,MultiMap<E, E>)",7,9,12
"org.apache.pig.impl.plan.OperatorPlan.size()",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.swap(E,E)",7,16,22
"org.apache.pig.impl.plan.OperatorPlan.trimAbove(E)",2,2,3
"org.apache.pig.impl.plan.OperatorPlan.trimAbove(List<E>)",1,3,3
"org.apache.pig.impl.plan.OperatorPlan.trimBelow(E)",1,1,1
"org.apache.pig.impl.plan.OperatorPlan.trimBelow(List<E>)",1,3,3
"org.apache.pig.impl.plan.PlanDumper.PlanDumper(P,PrintStream)",1,1,1
"org.apache.pig.impl.plan.PlanDumper.dump()",5,10,10
"org.apache.pig.impl.plan.PlanDumper.dumpEdge(Operator,Operator)",1,1,1
"org.apache.pig.impl.plan.PlanDumper.dumpMultiInputNestedOperator(E,MultiMap<E, S>)",1,3,3
"org.apache.pig.impl.plan.PlanDumper.dumpMultiOutputNestedOperator(E,Collection<S>)",1,3,3
"org.apache.pig.impl.plan.PlanDumper.dumpNestedOperator(E,Collection<S>)",1,2,2
"org.apache.pig.impl.plan.PlanDumper.dumpOperator(E)",1,1,1
"org.apache.pig.impl.plan.PlanDumper.getMultiInputNestedPlans(E)",1,1,1
"org.apache.pig.impl.plan.PlanDumper.getMultiOutputNestedPlans(E)",1,1,1
"org.apache.pig.impl.plan.PlanDumper.getNestedPlans(E)",1,1,1
"org.apache.pig.impl.plan.PlanDumper.isVerbose()",1,1,1
"org.apache.pig.impl.plan.PlanDumper.join(String,String[])",2,3,4
"org.apache.pig.impl.plan.PlanDumper.makeDumper(S,PrintStream)",1,1,1
"org.apache.pig.impl.plan.PlanDumper.setVerbose(boolean)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException()",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,int)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,int,Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,int,boolean)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,int,byte)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,int,byte,boolean)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanException.PlanException(Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException()",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(Operator,String)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(Operator,String,int)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(Operator,String,int,byte)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,int)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,int,Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,int,boolean)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,int,byte)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,int,byte,boolean)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanValidationException.PlanValidationException(Throwable)",1,1,1
"org.apache.pig.impl.plan.PlanVisitor.PlanVisitor(P,PlanWalker<O, P>)",1,1,1
"org.apache.pig.impl.plan.PlanVisitor.getPlan()",1,1,1
"org.apache.pig.impl.plan.PlanVisitor.popWalker()",2,1,2
"org.apache.pig.impl.plan.PlanVisitor.pushWalker(PlanWalker<O, P>)",1,1,1
"org.apache.pig.impl.plan.PlanVisitor.visit()",1,1,1
"org.apache.pig.impl.plan.PlanWalker.PlanWalker(P)",1,1,1
"org.apache.pig.impl.plan.PlanWalker.getPlan()",1,1,1
"org.apache.pig.impl.plan.PlanWalker.setPlan(P)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.Column.Column(Pair<Integer, Integer>)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.Column.Column(Pair<Integer, Integer>,boolean,byte)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.Column.cast()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.Column.getCast()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.Column.getCastType()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.Column.getInputColumn()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.Column.toString()",1,2,2
"org.apache.pig.impl.plan.ProjectionMap.ProjectionMap(MultiMap<Integer, Column>,List<Pair<Integer, Integer>>,List<Integer>)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.ProjectionMap(MultiMap<Integer, Column>,List<Pair<Integer, Integer>>,List<Integer>,boolean)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.ProjectionMap(boolean)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.changes()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.getAddedFields()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.getChanges()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.getMappedFields()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.getRemovedFields()",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.setAddedFields(List<Integer>)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.setChanges(boolean)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.setMappedFields(MultiMap<Integer, Column>)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.setRemovedFields(List<Pair<Integer, Integer>>)",1,1,1
"org.apache.pig.impl.plan.ProjectionMap.toString()",1,1,1
"org.apache.pig.impl.plan.RequiredFields.RequiredFields(List<Pair<Integer, Integer>>)",1,1,1
"org.apache.pig.impl.plan.RequiredFields.RequiredFields(List<Pair<Integer, Integer>>,boolean,boolean)",1,3,5
"org.apache.pig.impl.plan.RequiredFields.RequiredFields(boolean)",1,1,1
"org.apache.pig.impl.plan.RequiredFields.RequiredFields(boolean,boolean)",1,1,1
"org.apache.pig.impl.plan.RequiredFields.getField(int)",1,1,1
"org.apache.pig.impl.plan.RequiredFields.getFields()",1,1,1
"org.apache.pig.impl.plan.RequiredFields.getMapKeysInfo(int)",1,1,1
"org.apache.pig.impl.plan.RequiredFields.getNeedAllFields()",1,1,1
"org.apache.pig.impl.plan.RequiredFields.getNeedNoFields()",1,1,1
"org.apache.pig.impl.plan.RequiredFields.merge(RequiredFields)",5,8,15
"org.apache.pig.impl.plan.RequiredFields.mergeMapKey(int,int,String)",3,3,5
"org.apache.pig.impl.plan.RequiredFields.mergeMapKeysInfo(int,int,MapKeysInfo)",4,5,7
"org.apache.pig.impl.plan.RequiredFields.needAllFields()",1,1,1
"org.apache.pig.impl.plan.RequiredFields.needNoFields()",1,1,1
"org.apache.pig.impl.plan.RequiredFields.reIndex(int)",1,1,3
"org.apache.pig.impl.plan.RequiredFields.setFields(List<Pair<Integer, Integer>>)",1,3,3
"org.apache.pig.impl.plan.RequiredFields.setMapKeysInfo(int,MapKeysInfo)",1,1,1
"org.apache.pig.impl.plan.RequiredFields.setMapKeysInfo(int,int,MapKeysInfo)",2,1,2
"org.apache.pig.impl.plan.RequiredFields.setNeedAllFields(boolean)",2,2,3
"org.apache.pig.impl.plan.RequiredFields.setNeedNoFields(boolean)",2,2,3
"org.apache.pig.impl.plan.RequiredFields.size()",2,1,2
"org.apache.pig.impl.plan.RequiredFields.toString()",1,1,1
"org.apache.pig.impl.plan.ReverseDependencyOrderWalker.ReverseDependencyOrderWalker(P)",1,1,1
"org.apache.pig.impl.plan.ReverseDependencyOrderWalker.doAllSuccessors(O,Set<O>,Collection<O>)",1,5,5
"org.apache.pig.impl.plan.ReverseDependencyOrderWalker.spawnChildWalker(P)",1,1,1
"org.apache.pig.impl.plan.ReverseDependencyOrderWalker.walk(PlanVisitor<O, P>)",2,3,4
"org.apache.pig.impl.plan.VisitorException.VisitorException()",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(Operator,String)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(Operator,String,int)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(Operator,String,int,byte)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(Operator,String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,Throwable)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,int)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,int,Throwable)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,int,boolean)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,int,byte)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,int,byte,boolean)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.impl.plan.VisitorException.VisitorException(Throwable)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException()",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,Throwable)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,int)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,int,Throwable)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,int,boolean)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,int,byte)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,int,byte,Throwable)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,int,byte,boolean)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,int,byte,boolean,String)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(String,int,byte,boolean,String,Throwable)",1,1,1
"org.apache.pig.impl.plan.optimizer.OptimizerException.OptimizerException(Throwable)",1,1,1
"org.apache.pig.impl.streaming.DefaultInputHandler.DefaultInputHandler()",1,1,1
"org.apache.pig.impl.streaming.DefaultInputHandler.DefaultInputHandler(HandleSpec)",1,1,1
"org.apache.pig.impl.streaming.DefaultInputHandler.close(Process)",2,3,4
"org.apache.pig.impl.streaming.DefaultInputHandler.getInputType()",1,1,1
"org.apache.pig.impl.streaming.DefaultOutputHandler.DefaultOutputHandler()",1,1,1
"org.apache.pig.impl.streaming.DefaultOutputHandler.DefaultOutputHandler(HandleSpec)",1,1,1
"org.apache.pig.impl.streaming.DefaultOutputHandler.getOutputType()",1,1,1
"org.apache.pig.impl.streaming.ExecutableManager.ExecutableManager()",1,1,1
"org.apache.pig.impl.streaming.ExecutableManager.ProcessErrorThread.ProcessErrorThread()",1,1,1
"org.apache.pig.impl.streaming.ExecutableManager.ProcessErrorThread.run()",1,6,6
"org.apache.pig.impl.streaming.ExecutableManager.ProcessInputThread.ProcessInputThread(InputHandler,POStream,UDFContext)",1,1,1
"org.apache.pig.impl.streaming.ExecutableManager.ProcessInputThread.run()",6,11,14
"org.apache.pig.impl.streaming.ExecutableManager.ProcessOutputThread.ProcessOutputThread(OutputHandler,POStream)",1,1,1
"org.apache.pig.impl.streaming.ExecutableManager.ProcessOutputThread.processOutput(Tuple)",2,5,5
"org.apache.pig.impl.streaming.ExecutableManager.ProcessOutputThread.run()",1,4,4
"org.apache.pig.impl.streaming.ExecutableManager.close()",1,10,10
"org.apache.pig.impl.streaming.ExecutableManager.configure(POStream)",1,1,1
"org.apache.pig.impl.streaming.ExecutableManager.exec()",1,2,2
"org.apache.pig.impl.streaming.ExecutableManager.killProcess(Process)",1,2,2
"org.apache.pig.impl.streaming.ExecutableManager.processError(String)",1,1,1
"org.apache.pig.impl.streaming.ExecutableManager.run()",2,2,2
"org.apache.pig.impl.streaming.ExecutableManager.sendOutput(BlockingQueue<Result>,Result)",1,3,3
"org.apache.pig.impl.streaming.FileInputHandler.FileInputHandler(HandleSpec)",1,1,2
"org.apache.pig.impl.streaming.FileInputHandler.bindTo(OutputStream)",1,1,1
"org.apache.pig.impl.streaming.FileInputHandler.close(Process)",1,2,2
"org.apache.pig.impl.streaming.FileInputHandler.getInputType()",1,1,1
"org.apache.pig.impl.streaming.FileOutputHandler.FileOutputHandler(HandleSpec)",1,1,1
"org.apache.pig.impl.streaming.FileOutputHandler.bindTo(String,BufferedPositionedInputStream,long,long)",1,1,1
"org.apache.pig.impl.streaming.FileOutputHandler.getOutputType()",1,1,1
"org.apache.pig.impl.streaming.HandlerFactory.createInputHandler(StreamingCommand)",2,2,4
"org.apache.pig.impl.streaming.HandlerFactory.createOutputHandler(StreamingCommand)",2,2,4
"org.apache.pig.impl.streaming.InputHandler.bindTo(OutputStream)",1,1,2
"org.apache.pig.impl.streaming.InputHandler.close(Process)",1,2,2
"org.apache.pig.impl.streaming.InputHandler.putNext(Tuple)",1,2,2
"org.apache.pig.impl.streaming.OutputHandler.bindTo(String,BufferedPositionedInputStream,long,long)",1,1,2
"org.apache.pig.impl.streaming.OutputHandler.close()",1,2,2
"org.apache.pig.impl.streaming.OutputHandler.getNext()",4,2,4
"org.apache.pig.impl.streaming.OutputHandler.getRecordDelimiter()",1,1,1
"org.apache.pig.impl.streaming.OutputHandler.isEndOfRow()",3,2,4
"org.apache.pig.impl.streaming.OutputHandler.readNextLine()",2,1,2
"org.apache.pig.impl.streaming.OutputHandler.readValue()",4,2,4
"org.apache.pig.impl.streaming.PigStreamingUDF.PigStreamingUDF()",1,1,1
"org.apache.pig.impl.streaming.PigStreamingUDF.PigStreamingUDF(FieldSchema)",1,1,1
"org.apache.pig.impl.streaming.PigStreamingUDF.deserialize(FieldSchema,byte[],int,int)",15,13,15
"org.apache.pig.impl.streaming.PigStreamingUDF.deserialize(byte[],int,int)",1,1,1
"org.apache.pig.impl.streaming.PigStreamingUDF.deserializeBag(FieldSchema,byte[],int,int)",1,3,3
"org.apache.pig.impl.streaming.PigStreamingUDF.deserializeMap(byte[],int,int)",1,5,5
"org.apache.pig.impl.streaming.PigStreamingUDF.deserializeTuple(FieldSchema,byte[],int,int)",1,3,3
"org.apache.pig.impl.streaming.PigStreamingUDF.extractString(byte[],int,int,boolean)",2,2,2
"org.apache.pig.impl.streaming.PigStreamingUDF.getLoadCaster()",1,1,1
"org.apache.pig.impl.streaming.PigStreamingUDF.getRecordDelim()",1,1,1
"org.apache.pig.impl.streaming.PigStreamingUDF.serializeToBytes(Tuple)",1,4,4
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.HandleSpec(String)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.HandleSpec(String,String)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.clone()",1,2,2
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.compareTo(HandleSpec)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.equals(Object)",2,4,4
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.getName()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.getSpec()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.hashCode()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.setName(String)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.setSpec(String)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.HandleSpec.toString()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.StreamingCommand(PigContext,String[])",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.addHandleSpec(Handle,HandleSpec)",1,2,2
"org.apache.pig.impl.streaming.StreamingCommand.addPathToCache(String)",3,3,6
"org.apache.pig.impl.streaming.StreamingCommand.addPathToShip(String)",3,2,3
"org.apache.pig.impl.streaming.StreamingCommand.clone()",1,4,4
"org.apache.pig.impl.streaming.StreamingCommand.getCacheSpecs()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.getCommandArgs()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.getExecutable()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.getHandleSpecs(Handle)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.getInputSpec()",1,3,3
"org.apache.pig.impl.streaming.StreamingCommand.getLogDir()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.getLogFilesLimit()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.getOutputSpec()",1,3,3
"org.apache.pig.impl.streaming.StreamingCommand.getPersistStderr()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.getShipFiles()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.getShipSpecs()",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.setCommandArgs(String[])",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.setExecutable(String)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.setInputSpec(HandleSpec)",1,3,3
"org.apache.pig.impl.streaming.StreamingCommand.setLogDir(String)",1,2,2
"org.apache.pig.impl.streaming.StreamingCommand.setLogFilesLimit(int)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.setOutputSpec(HandleSpec)",1,3,3
"org.apache.pig.impl.streaming.StreamingCommand.setPersistStderr(boolean)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.setShipFiles(boolean)",1,1,1
"org.apache.pig.impl.streaming.StreamingCommand.toString()",1,2,2
"org.apache.pig.impl.streaming.StreamingDelimiters.StreamingDelimiters()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.StreamingDelimiters(byte,byte,boolean)",1,2,2
"org.apache.pig.impl.streaming.StreamingDelimiters.getBagBegin()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getBagEnd()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getFieldDelim()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getFullDelim(byte)",2,1,2
"org.apache.pig.impl.streaming.StreamingDelimiters.getMapBegin()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getMapEnd()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getMapKeyDelim()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getNull()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getParamDelim()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getRecordEnd()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getTupleBegin()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.getTupleEnd()",1,1,1
"org.apache.pig.impl.streaming.StreamingDelimiters.isDelimiter(byte[],byte[],int,int,int)",1,4,4
"org.apache.pig.impl.streaming.StreamingDelimiters.updateDepth(byte[],int,int)",4,1,12
"org.apache.pig.impl.streaming.StreamingUDFException.StreamingUDFException()",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.StreamingUDFException(String)",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.StreamingUDFException(String,Integer)",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.StreamingUDFException(String,String)",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.StreamingUDFException(String,String,Integer)",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.StreamingUDFException(String,String,Throwable)",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.getLanguage()",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.getLineNumber()",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.getMessage()",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFException.toString()",1,2,3
"org.apache.pig.impl.streaming.StreamingUDFInputHandler.StreamingUDFInputHandler(PigStreamingBase)",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFOutputHandler.StreamingUDFOutputHandler(PigStreamingUDF)",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFOutputHandler.getRecordDelimiter()",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFOutputSchemaException.StreamingUDFOutputSchemaException(String,int)",1,1,1
"org.apache.pig.impl.streaming.StreamingUDFOutputSchemaException.getLineNumber()",1,1,1
"org.apache.pig.impl.streaming.StreamingUtil.addJobConfToEnvironment(Configuration,Map<String, String>)",4,3,4
"org.apache.pig.impl.streaming.StreamingUtil.createProcess(StreamingCommand)",1,3,3
"org.apache.pig.impl.streaming.StreamingUtil.envPut(Map<String, String>,String,String)",1,2,2
"org.apache.pig.impl.streaming.StreamingUtil.setupEnvironment(ProcessBuilder)",1,2,3
"org.apache.pig.impl.util.BagFormat.format(DataBag)",1,3,3
"org.apache.pig.impl.util.CastUtils.convertToType(LoadCaster,byte[],ResourceFieldSchema,byte)",15,14,15
"org.apache.pig.impl.util.CastUtils.stringToBoolean(String)",4,3,4
"org.apache.pig.impl.util.CastUtils.stringToDouble(String)",2,3,3
"org.apache.pig.impl.util.CastUtils.stringToFloat(String)",2,3,3
"org.apache.pig.impl.util.CastUtils.stringToInteger(String)",3,5,5
"org.apache.pig.impl.util.CastUtils.stringToLong(String)",3,5,5
"org.apache.pig.impl.util.CompilerUtils.addEmptyBagOuterJoin(PhysicalPlan,Schema,boolean,String)",1,3,4
"org.apache.pig.impl.util.ConfigurationValidator.ensureLongType(Properties,String,long)",1,3,3
"org.apache.pig.impl.util.ConfigurationValidator.getValidatedProperties(Properties)",1,2,2
"org.apache.pig.impl.util.ConfigurationValidator.validatePigProperties(Properties)",1,1,1
"org.apache.pig.impl.util.HashOutputStream.HashOutputStream(HashFunction)",1,1,1
"org.apache.pig.impl.util.HashOutputStream.getHashCode()",1,1,1
"org.apache.pig.impl.util.HashOutputStream.write(int)",1,1,1
"org.apache.pig.impl.util.IdentityHashSet.add(E)",2,2,2
"org.apache.pig.impl.util.IdentityHashSet.addAll(Collection<? extends E>)",1,3,3
"org.apache.pig.impl.util.IdentityHashSet.clear()",1,1,1
"org.apache.pig.impl.util.IdentityHashSet.contains(Object)",1,1,1
"org.apache.pig.impl.util.IdentityHashSet.containsAll(Collection<?>)",3,2,3
"org.apache.pig.impl.util.IdentityHashSet.isEmpty()",1,1,1
"org.apache.pig.impl.util.IdentityHashSet.iterator()",1,1,1
"org.apache.pig.impl.util.IdentityHashSet.remove(Object)",2,2,2
"org.apache.pig.impl.util.IdentityHashSet.removeAll(Collection<?>)",1,2,2
"org.apache.pig.impl.util.IdentityHashSet.retainAll(Collection<?>)",1,3,3
"org.apache.pig.impl.util.IdentityHashSet.size()",1,1,1
"org.apache.pig.impl.util.IdentityHashSet.toArray()",1,1,1
"org.apache.pig.impl.util.IdentityHashSet.toArray(T[])",1,1,1
"org.apache.pig.impl.util.IdentityHashSet.toString()",1,3,3
"org.apache.pig.impl.util.JarManager.DefaultPigPackages.DefaultPigPackages(Class)",1,1,1
"org.apache.pig.impl.util.JarManager.DefaultPigPackages.getPkgClass()",1,1,1
"org.apache.pig.impl.util.JarManager.addDependencyJars(Job,Class<?>...)",2,1,2
"org.apache.pig.impl.util.JarManager.addQualifiedJarsName(FileSystem,Set<String>,Class<?>...)",3,3,3
"org.apache.pig.impl.util.JarManager.addStream(JarOutputStream,String,InputStream,Map<String, String>,long)",2,2,3
"org.apache.pig.impl.util.JarManager.createCl(String,PigContext)",1,2,4
"org.apache.pig.impl.util.JarManager.createPigScriptUDFJar(OutputStream,PigContext,HashMap<String, String>)",5,7,8
"org.apache.pig.impl.util.JarManager.createPigScriptUDFJar(PigContext)",2,3,3
"org.apache.pig.impl.util.JarManager.findContainingJar(Class)",3,7,8
"org.apache.pig.impl.util.JarManager.getDefaultJars()",3,4,5
"org.apache.pig.impl.util.JavaCompilerHelper.JavaCompilerHelper()",1,1,1
"org.apache.pig.impl.util.JavaCompilerHelper.JavaSourceFromString.JavaSourceFromString(String,String)",1,1,1
"org.apache.pig.impl.util.JavaCompilerHelper.JavaSourceFromString.getCharContent(boolean)",1,1,1
"org.apache.pig.impl.util.JavaCompilerHelper.addToClassPath(String)",1,1,1
"org.apache.pig.impl.util.JavaCompilerHelper.compile(String,JavaSourceFromString...)",2,3,3
"org.apache.pig.impl.util.JavaCompilerHelper.getClassPath()",1,1,1
"org.apache.pig.impl.util.LineageTracer.getCounts()",1,1,1
"org.apache.pig.impl.util.LineageTracer.getMembers(Tuple)",1,3,3
"org.apache.pig.impl.util.LineageTracer.getMembershipMap()",1,3,3
"org.apache.pig.impl.util.LineageTracer.getRepresentative(Tuple)",1,2,2
"org.apache.pig.impl.util.LineageTracer.getWeightedCounts(IdentityHashSet<Tuple>,int)",1,6,6
"org.apache.pig.impl.util.LineageTracer.insert(Tuple)",1,2,2
"org.apache.pig.impl.util.LineageTracer.link(Tuple,Tuple)",1,3,3
"org.apache.pig.impl.util.LineageTracer.union(Tuple,Tuple)",1,1,1
"org.apache.pig.impl.util.LinkedMultiMap.LinkedMultiMap()",1,1,1
"org.apache.pig.impl.util.LinkedMultiMap.LinkedMultiMap(int)",1,1,1
"org.apache.pig.impl.util.LogUtils.getPermissionException(Exception)",1,4,4
"org.apache.pig.impl.util.LogUtils.getPigException(Throwable)",5,7,10
"org.apache.pig.impl.util.LogUtils.warn(Object,String,PigWarning,Log)",1,2,2
"org.apache.pig.impl.util.LogUtils.writeLog(String,String,String,Log)",2,8,9
"org.apache.pig.impl.util.LogUtils.writeLog(Throwable,String,Log,boolean,String)",1,1,1
"org.apache.pig.impl.util.LogUtils.writeLog(Throwable,String,Log,boolean,String,boolean,boolean)",2,20,23
"org.apache.pig.impl.util.MultiMap.MultiMap()",1,1,1
"org.apache.pig.impl.util.MultiMap.MultiMap(int)",1,1,1
"org.apache.pig.impl.util.MultiMap.clear()",1,1,1
"org.apache.pig.impl.util.MultiMap.containsKey(K)",1,1,1
"org.apache.pig.impl.util.MultiMap.containsValue(V)",1,1,1
"org.apache.pig.impl.util.MultiMap.get(K)",1,1,1
"org.apache.pig.impl.util.MultiMap.isEmpty()",1,1,1
"org.apache.pig.impl.util.MultiMap.keySet()",1,1,1
"org.apache.pig.impl.util.MultiMap.put(K,Collection<V>)",1,2,2
"org.apache.pig.impl.util.MultiMap.put(K,V)",1,2,2
"org.apache.pig.impl.util.MultiMap.remove(K,V)",4,4,5
"org.apache.pig.impl.util.MultiMap.removeKey(K)",1,1,1
"org.apache.pig.impl.util.MultiMap.size()",1,1,1
"org.apache.pig.impl.util.MultiMap.toString()",1,3,3
"org.apache.pig.impl.util.MultiMap.values()",1,3,3
"org.apache.pig.impl.util.NumValCarrier.NumValCarrier()",1,1,1
"org.apache.pig.impl.util.NumValCarrier.ValCarrier.ValCarrier(String)",1,1,1
"org.apache.pig.impl.util.NumValCarrier.ValCarrier.getNextString()",1,1,1
"org.apache.pig.impl.util.NumValCarrier.makeNameFromDataType(byte)",1,1,1
"org.apache.pig.impl.util.ObjectSerializer.decodeBytes(String)",1,1,1
"org.apache.pig.impl.util.ObjectSerializer.deserialize(String)",2,3,4
"org.apache.pig.impl.util.ObjectSerializer.encodeBytes(byte[])",1,2,2
"org.apache.pig.impl.util.ObjectSerializer.serialize(Serializable)",2,2,3
"org.apache.pig.impl.util.Pair.Pair(T,U)",1,1,1
"org.apache.pig.impl.util.Pair.equals(Object)",8,2,9
"org.apache.pig.impl.util.Pair.hashCode()",1,3,3
"org.apache.pig.impl.util.Pair.toString()",1,1,1
"org.apache.pig.impl.util.PropertiesUtil.loadDefaultProperties()",1,1,1
"org.apache.pig.impl.util.PropertiesUtil.loadDefaultProperties(Properties)",1,3,3
"org.apache.pig.impl.util.PropertiesUtil.loadPropertiesFromClasspath(Properties,String)",1,4,5
"org.apache.pig.impl.util.PropertiesUtil.loadPropertiesFromFile(Properties,String)",1,5,6
"org.apache.pig.impl.util.PropertiesUtil.setDefaultsIfUnset(Properties)",1,5,5
"org.apache.pig.impl.util.RewindableIterator.RewindableIterator(Iterator<E>)",1,1,1
"org.apache.pig.impl.util.RewindableIterator.hasNext()",1,2,2
"org.apache.pig.impl.util.RewindableIterator.hasNext(int)",3,3,3
"org.apache.pig.impl.util.RewindableIterator.next()",3,4,4
"org.apache.pig.impl.util.RewindableIterator.noRewind()",1,2,2
"org.apache.pig.impl.util.RewindableIterator.rewind()",2,1,2
"org.apache.pig.impl.util.SpillableMemoryManager.SpillableMemoryManager()",2,3,5
"org.apache.pig.impl.util.SpillableMemoryManager.SpillablePtr.SpillablePtr(Spillable,long)",1,1,1
"org.apache.pig.impl.util.SpillableMemoryManager.SpillablePtr.get()",1,1,1
"org.apache.pig.impl.util.SpillableMemoryManager.SpillablePtr.getMemorySize()",1,1,1
"org.apache.pig.impl.util.SpillableMemoryManager.cleanupStaticData()",1,1,1
"org.apache.pig.impl.util.SpillableMemoryManager.clearSpillables()",1,3,3
"org.apache.pig.impl.util.SpillableMemoryManager.configure(Properties)",1,1,2
"org.apache.pig.impl.util.SpillableMemoryManager.getInstance()",1,1,1
"org.apache.pig.impl.util.SpillableMemoryManager.handleNotification(Notification,Object)",12,15,21
"org.apache.pig.impl.util.SpillableMemoryManager.registerSpillable(Spillable)",1,7,8
"org.apache.pig.impl.util.StorageUtil.bytesToTuple(byte[],int,int,byte)",1,4,4
"org.apache.pig.impl.util.StorageUtil.parseFieldDel(String)",6,5,10
"org.apache.pig.impl.util.StorageUtil.parseSingleQuotedString(String)",1,5,7
"org.apache.pig.impl.util.StorageUtil.putField(OutputStream,Object)",1,1,1
"org.apache.pig.impl.util.StorageUtil.putField(OutputStream,Object,StreamingDelimiters,boolean)",3,8,23
"org.apache.pig.impl.util.StorageUtil.putField(OutputStream,Object,boolean)",1,1,1
"org.apache.pig.impl.util.StorageUtil.readField(ArrayList<Object>,byte[],int,int)",1,2,2
"org.apache.pig.impl.util.StorageUtil.textToTuple(Text,byte)",1,1,1
"org.apache.pig.impl.util.StorageUtil.writeField(OutputStream,byte[],byte,boolean)",1,2,2
"org.apache.pig.impl.util.StringUtils.getPathStrings(String)",2,4,9
"org.apache.pig.impl.util.StringUtils.join(AbstractCollection<String>,String)",2,2,3
"org.apache.pig.impl.util.StringUtils.unescapeInputString(String)",8,6,17
"org.apache.pig.impl.util.TupleFormat.format(Tuple)",1,8,8
"org.apache.pig.impl.util.UDFContext.UDFContext()",1,1,1
"org.apache.pig.impl.util.UDFContext.UDFContextKey.UDFContextKey()",1,1,1
"org.apache.pig.impl.util.UDFContext.UDFContextKey.UDFContextKey(String,String[])",1,1,1
"org.apache.pig.impl.util.UDFContext.UDFContextKey.equals(Object)",8,2,8
"org.apache.pig.impl.util.UDFContext.UDFContextKey.hashCode()",1,2,2
"org.apache.pig.impl.util.UDFContext.addJobConf(Configuration)",1,1,1
"org.apache.pig.impl.util.UDFContext.cleanupStaticData()",1,1,1
"org.apache.pig.impl.util.UDFContext.clone()",1,1,1
"org.apache.pig.impl.util.UDFContext.deserialize()",1,1,1
"org.apache.pig.impl.util.UDFContext.generateKey(Class<?>,String[])",1,1,1
"org.apache.pig.impl.util.UDFContext.getClientSystemProps()",1,1,1
"org.apache.pig.impl.util.UDFContext.getJobConf()",2,1,2
"org.apache.pig.impl.util.UDFContext.getUDFContext()",1,1,1
"org.apache.pig.impl.util.UDFContext.getUDFProperties(Class)",1,2,2
"org.apache.pig.impl.util.UDFContext.getUDFProperties(Class,String[])",1,2,2
"org.apache.pig.impl.util.UDFContext.isFrontend()",1,3,3
"org.apache.pig.impl.util.UDFContext.isUDFConfEmpty()",1,1,1
"org.apache.pig.impl.util.UDFContext.reset()",1,1,1
"org.apache.pig.impl.util.UDFContext.serialize(Configuration)",1,1,1
"org.apache.pig.impl.util.UDFContext.setClientSystemProps(Properties)",1,1,1
"org.apache.pig.impl.util.UDFContext.setUdfContext(UDFContext)",1,1,1
"org.apache.pig.impl.util.UriUtil.isHDFSFile(String)",3,5,7
"org.apache.pig.impl.util.UriUtil.isHDFSFileOrLocalOrS3N(String,Configuration)",2,1,2
"org.apache.pig.impl.util.Utils.TEMPFILE_CODEC.TEMPFILE_CODEC(String)",1,1,1
"org.apache.pig.impl.util.Utils.TEMPFILE_CODEC.getHadoopCodecClassName()",1,1,1
"org.apache.pig.impl.util.Utils.TEMPFILE_CODEC.lowerName()",1,1,1
"org.apache.pig.impl.util.Utils.TEMPFILE_STORAGE.TEMPFILE_STORAGE(Class<? extends FileInputLoadFunc>,List<TEMPFILE_CODEC>)",1,1,1
"org.apache.pig.impl.util.Utils.TEMPFILE_STORAGE.ensureCodecSupported(String)",1,1,2
"org.apache.pig.impl.util.Utils.TEMPFILE_STORAGE.getStorageClass()",1,1,1
"org.apache.pig.impl.util.Utils.TEMPFILE_STORAGE.lowerName()",1,1,1
"org.apache.pig.impl.util.Utils.TEMPFILE_STORAGE.supportedCodecsToString()",1,3,3
"org.apache.pig.impl.util.Utils.buildSimpleFuncSpec(String,byte...)",1,2,2
"org.apache.pig.impl.util.Utils.checkNullAndClass(Object,Object)",3,3,3
"org.apache.pig.impl.util.Utils.checkNullEquals(Object,Object,boolean)",4,2,5
"org.apache.pig.impl.util.Utils.depthFirstSearchForFile(FileStatus[],FileSystem)",1,1,1
"org.apache.pig.impl.util.Utils.depthFirstSearchForFile(FileStatus[],FileSystem,PathFilter)",4,5,5
"org.apache.pig.impl.util.Utils.extractHeapSizeInMB(String)",2,6,7
"org.apache.pig.impl.util.Utils.getCompositeStream(InputStream,Properties)",1,2,2
"org.apache.pig.impl.util.Utils.getSchema(LoadFunc,String,boolean,Job)",5,3,6
"org.apache.pig.impl.util.Utils.getSchemaFromBagSchemaString(String)",1,1,1
"org.apache.pig.impl.util.Utils.getSchemaFromString(String)",1,1,1
"org.apache.pig.impl.util.Utils.getSchemaWithInputSourceTag(ResourceSchema,String)",1,1,2
"org.apache.pig.impl.util.Utils.getScriptSchema(String,Configuration)",1,2,2
"org.apache.pig.impl.util.Utils.getScriptSchemaKey(String)",1,1,1
"org.apache.pig.impl.util.Utils.getStackStraceStr(Throwable)",1,1,1
"org.apache.pig.impl.util.Utils.getStringFromArray(String[])",1,2,2
"org.apache.pig.impl.util.Utils.getTmpFileCompressorName(PigContext)",2,3,3
"org.apache.pig.impl.util.Utils.getTmpFileStorage(Properties)",4,4,4
"org.apache.pig.impl.util.Utils.getTmpFileStorageClass(Properties)",1,1,1
"org.apache.pig.impl.util.Utils.getTmpFileStorageObject(Configuration)",1,1,3
"org.apache.pig.impl.util.Utils.isHadoop2()",2,1,2
"org.apache.pig.impl.util.Utils.isHadoop23()",2,1,2
"org.apache.pig.impl.util.Utils.isLocal(PigContext,Configuration)",1,2,2
"org.apache.pig.impl.util.Utils.isVendorIBM()",1,1,1
"org.apache.pig.impl.util.Utils.mergeCollection(Collection<O>,Collection<O>)",2,6,9
"org.apache.pig.impl.util.Utils.parseConstant(String)",1,1,1
"org.apache.pig.impl.util.Utils.parseSchema(String)",1,1,1
"org.apache.pig.impl.util.Utils.recomputeProperties(JobConf,Properties)",1,5,6
"org.apache.pig.impl.util.Utils.setDefaultTimeZone(Configuration)",1,3,3
"org.apache.pig.impl.util.Utils.setMapredCompressionCodecProps(Configuration)",1,4,4
"org.apache.pig.impl.util.Utils.setTmpFileCompressionOnConf(PigContext,Configuration)",7,5,9
"org.apache.pig.impl.util.Utils.slashisize(String)",1,1,1
"org.apache.pig.impl.util.Utils.substituteVars(String)",5,2,5
"org.apache.pig.impl.util.WrappedIOException.wrap(String,Throwable)",1,1,1
"org.apache.pig.impl.util.WrappedIOException.wrap(Throwable)",1,1,1
"org.apache.pig.impl.util.avro.AvroArrayReader.AvroArrayReader(Schema)",1,1,1
"org.apache.pig.impl.util.avro.AvroArrayReader.close()",1,1,1
"org.apache.pig.impl.util.avro.AvroArrayReader.getCurrentKey()",1,1,1
"org.apache.pig.impl.util.avro.AvroArrayReader.getCurrentValue()",2,2,2
"org.apache.pig.impl.util.avro.AvroArrayReader.getProgress()",2,2,2
"org.apache.pig.impl.util.avro.AvroArrayReader.initialize(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.impl.util.avro.AvroArrayReader.nextKeyValue()",2,1,3
"org.apache.pig.impl.util.avro.AvroBagWrapper.AvroBagWrapper(GenericArray<T>)",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.add(Tuple)",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.addAll(DataBag)",1,2,2
"org.apache.pig.impl.util.avro.AvroBagWrapper.clear()",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.compareTo(Object)",3,2,3
"org.apache.pig.impl.util.avro.AvroBagWrapper.getMemorySize()",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.isDistinct()",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.isSorted()",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.iterator()",2,2,2
"org.apache.pig.impl.util.avro.AvroBagWrapper.markStale(boolean)",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.readFields(DataInput)",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.size()",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.spill()",1,1,1
"org.apache.pig.impl.util.avro.AvroBagWrapper.write(DataOutput)",1,1,1
"org.apache.pig.impl.util.avro.AvroMapWrapper.AvroMapWrapper(Map<CharSequence, Object>)",1,2,3
"org.apache.pig.impl.util.avro.AvroMapWrapper.clear()",1,1,1
"org.apache.pig.impl.util.avro.AvroMapWrapper.containsKey(Object)",2,2,3
"org.apache.pig.impl.util.avro.AvroMapWrapper.containsValue(Object)",1,1,1
"org.apache.pig.impl.util.avro.AvroMapWrapper.entrySet()",1,3,3
"org.apache.pig.impl.util.avro.AvroMapWrapper.get(Object)",1,2,3
"org.apache.pig.impl.util.avro.AvroMapWrapper.isEmpty()",1,1,1
"org.apache.pig.impl.util.avro.AvroMapWrapper.keySet()",2,3,3
"org.apache.pig.impl.util.avro.AvroMapWrapper.put(CharSequence,Object)",1,1,1
"org.apache.pig.impl.util.avro.AvroMapWrapper.putAll(Map<? extends CharSequence, ? extends Object>)",1,1,1
"org.apache.pig.impl.util.avro.AvroMapWrapper.remove(Object)",1,1,1
"org.apache.pig.impl.util.avro.AvroMapWrapper.size()",1,1,1
"org.apache.pig.impl.util.avro.AvroMapWrapper.values()",1,1,1
"org.apache.pig.impl.util.avro.AvroRecordReader.AvroRecordReader(Schema)",1,1,1
"org.apache.pig.impl.util.avro.AvroRecordReader.close()",1,1,1
"org.apache.pig.impl.util.avro.AvroRecordReader.getCurrentKey()",1,1,1
"org.apache.pig.impl.util.avro.AvroRecordReader.getCurrentValue()",2,1,2
"org.apache.pig.impl.util.avro.AvroRecordReader.getProgress()",2,2,2
"org.apache.pig.impl.util.avro.AvroRecordReader.initialize(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.pig.impl.util.avro.AvroRecordReader.nextKeyValue()",2,2,4
"org.apache.pig.impl.util.avro.AvroRecordWriter.AvroRecordWriter(Path,Configuration)",1,1,1
"org.apache.pig.impl.util.avro.AvroRecordWriter.close(TaskAttemptContext)",1,1,1
"org.apache.pig.impl.util.avro.AvroRecordWriter.configureDataFileWriter(DataFileWriter<Record>,JobConf)",1,6,6
"org.apache.pig.impl.util.avro.AvroRecordWriter.prepareToWrite(Schema)",2,2,2
"org.apache.pig.impl.util.avro.AvroRecordWriter.write(NullWritable,Object)",1,3,3
"org.apache.pig.impl.util.avro.AvroStorageDataConversionUtilities.packIntoAvro(DataBag,Schema)",4,5,6
"org.apache.pig.impl.util.avro.AvroStorageDataConversionUtilities.packIntoAvro(Map<CharSequence, Object>,Schema)",1,2,2
"org.apache.pig.impl.util.avro.AvroStorageDataConversionUtilities.packIntoAvro(Object,Schema)",10,9,10
"org.apache.pig.impl.util.avro.AvroStorageDataConversionUtilities.packIntoAvro(Tuple,Schema)",1,2,3
"org.apache.pig.impl.util.avro.AvroStorageDataConversionUtilities.utf8(CharSequence)",2,2,2
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.avroSchemaToResourceSchema(Schema,Boolean)",1,1,1
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.avroSchemaToResourceSchema(Schema,Set<Schema>,Map<String, ResourceSchema>,Boolean)",4,5,6
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.createNullableUnion(Schema)",1,1,1
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.createNullableUnion(Type)",1,1,1
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.fieldToResourceFieldSchema(Field,Set<Schema>,Map<String, ResourceSchema>,Boolean)",5,9,15
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.getPigType(Schema)",19,8,22
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.isNullableUnion(Schema)",1,5,5
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.isUnionOfSimpleTypes(Schema)",5,3,5
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.newSchemaFromRequiredFieldList(Schema,List<RequiredField>)",6,5,8
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.newSchemaFromRequiredFieldList(Schema,RequiredFieldList)",1,1,1
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.removeSimpleUnion(Schema)",4,3,4
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.resourceFieldSchemaToAvroSchema(String,String,byte,String,ResourceSchema,Map<String, List<Schema>>,Boolean)",17,18,28
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.resourceSchemaToAvroSchema(ResourceSchema,String,String,Map<String, List<Schema>>,Boolean)",2,6,7
"org.apache.pig.impl.util.avro.AvroStorageSchemaConversionUtilities.toAvroName(String,Boolean)",3,2,4
"org.apache.pig.impl.util.avro.AvroTupleWrapper.AvroTupleWrapper(T)",1,1,1
"org.apache.pig.impl.util.avro.AvroTupleWrapper.append(Object)",1,9,9
"org.apache.pig.impl.util.avro.AvroTupleWrapper.compareTo(Object)",2,2,2
"org.apache.pig.impl.util.avro.AvroTupleWrapper.get(int)",10,7,10
"org.apache.pig.impl.util.avro.AvroTupleWrapper.getAll()",2,3,3
"org.apache.pig.impl.util.avro.AvroTupleWrapper.getMemorySize()",1,1,1
"org.apache.pig.impl.util.avro.AvroTupleWrapper.getMemorySize(IndexedRecord)",2,3,10
"org.apache.pig.impl.util.avro.AvroTupleWrapper.getPigObject(Object)",8,8,8
"org.apache.pig.impl.util.avro.AvroTupleWrapper.getType(int)",1,1,1
"org.apache.pig.impl.util.avro.AvroTupleWrapper.isNull(int)",1,2,2
"org.apache.pig.impl.util.avro.AvroTupleWrapper.iterator()",1,1,1
"org.apache.pig.impl.util.avro.AvroTupleWrapper.readFields(DataInput)",1,1,1
"org.apache.pig.impl.util.avro.AvroTupleWrapper.reference(Tuple)",1,1,1
"org.apache.pig.impl.util.avro.AvroTupleWrapper.set(int,Object)",1,1,1
"org.apache.pig.impl.util.avro.AvroTupleWrapper.size()",1,1,1
"org.apache.pig.impl.util.avro.AvroTupleWrapper.toDelimitedString(String)",1,4,4
"org.apache.pig.impl.util.avro.AvroTupleWrapper.write(DataOutput)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.Field.Field(String,ObjectInspector,int)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.Field.getFieldComment()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.Field.getFieldID()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.Field.getFieldName()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.Field.getFieldObjectInspector()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigDataByteArrayObjectInspector.PigDataByteArrayObjectInspector()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigDataByteArrayObjectInspector.getPrimitiveJavaObject(Object)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigDataByteArrayObjectInspector.getPrimitiveWritableObject(Object)",1,3,3
"org.apache.pig.impl.util.hive.HiveUtils.PigDecimalObjectInspector.PigDecimalObjectInspector()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigDecimalObjectInspector.getPrimitiveJavaObject(Object)",2,4,4
"org.apache.pig.impl.util.hive.HiveUtils.PigDecimalObjectInspector.getPrimitiveWritableObject(Object)",2,4,4
"org.apache.pig.impl.util.hive.HiveUtils.PigJodaTimeStampObjectInspector.PigJodaTimeStampObjectInspector()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigJodaTimeStampObjectInspector.getPrimitiveJavaObject(Object)",1,2,2
"org.apache.pig.impl.util.hive.HiveUtils.PigJodaTimeStampObjectInspector.getPrimitiveWritableObject(Object)",1,2,2
"org.apache.pig.impl.util.hive.HiveUtils.PigListObjectInspector.PigListObjectInspector(ListTypeInfo)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigListObjectInspector.equals(Object)",3,4,4
"org.apache.pig.impl.util.hive.HiveUtils.PigListObjectInspector.getCategory()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigListObjectInspector.getList(Object)",3,3,4
"org.apache.pig.impl.util.hive.HiveUtils.PigListObjectInspector.getListElement(Object,int)",3,4,6
"org.apache.pig.impl.util.hive.HiveUtils.PigListObjectInspector.getListElementObjectInspector()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigListObjectInspector.getListLength(Object)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigListObjectInspector.getTypeName()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.PigMapObjectInspector(MapTypeInfo)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.equals(Object)",3,5,5
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.getCategory()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.getMap(Object)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.getMapKeyObjectInspector()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.getMapSize(Object)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.getMapValueElement(Object,Object)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.getMapValueObjectInspector()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigMapObjectInspector.getTypeName()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.PigStructInspector(List<StructField>)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.PigStructInspector(StructTypeInfo)",1,2,2
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.equals(Object)",6,6,8
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.getAllStructFieldRefs()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.getCategory()",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.getStructFieldData(Object,StructField)",1,1,2
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.getStructFieldRef(String)",3,2,3
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.getStructFieldsDataAsList(Object)",1,1,1
"org.apache.pig.impl.util.hive.HiveUtils.PigStructInspector.getTypeName()",1,3,3
"org.apache.pig.impl.util.hive.HiveUtils.convertHiveToPig(Object,ObjectInspector,boolean[])",5,9,16
"org.apache.pig.impl.util.hive.HiveUtils.createObjectInspector(TypeInfo)",17,5,17
"org.apache.pig.impl.util.hive.HiveUtils.getConstantObjectInspector(Object)",8,2,8
"org.apache.pig.impl.util.hive.HiveUtils.getPrimaryFromHive(Object,PrimitiveObjectInspector)",3,2,12
"org.apache.pig.impl.util.hive.HiveUtils.getResourceFieldSchema(TypeInfo)",3,5,22
"org.apache.pig.impl.util.hive.HiveUtils.getTypeInfo(ResourceFieldSchema)",3,7,21
"org.apache.pig.newplan.BaseOperatorPlan.BaseOperatorPlan()",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.BaseOperatorPlan(BaseOperatorPlan)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.add(Operator)",1,2,2
"org.apache.pig.newplan.BaseOperatorPlan.checkPredecessors(Operator,Operator)",7,4,9
"org.apache.pig.newplan.BaseOperatorPlan.connect(Operator,Operator)",2,3,4
"org.apache.pig.newplan.BaseOperatorPlan.connect(Operator,int,Operator,int)",2,3,4
"org.apache.pig.newplan.BaseOperatorPlan.createSoftLink(Operator,Operator)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.disconnect(Operator,Operator)",3,3,3
"org.apache.pig.newplan.BaseOperatorPlan.explain(PrintStream,String,boolean)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.getOperators()",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.getPredecessors(Operator)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.getSinks()",1,5,5
"org.apache.pig.newplan.BaseOperatorPlan.getSoftLinkPredecessors(Operator)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.getSoftLinkSuccessors(Operator)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.getSources()",1,5,5
"org.apache.pig.newplan.BaseOperatorPlan.getSuccessors(Operator)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.insertBetween(Operator,Operator,Operator)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.isConnected(Operator,Operator)",1,2,2
"org.apache.pig.newplan.BaseOperatorPlan.isEqual(OperatorPlan)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.isEqual(OperatorPlan,OperatorPlan)",8,5,10
"org.apache.pig.newplan.BaseOperatorPlan.markDirty()",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.moveTree(Operator,BaseOperatorPlan)",1,5,5
"org.apache.pig.newplan.BaseOperatorPlan.pathExists(Operator,Operator)",4,4,6
"org.apache.pig.newplan.BaseOperatorPlan.remove(Operator)",3,5,5
"org.apache.pig.newplan.BaseOperatorPlan.removeAndReconnect(Operator)",2,21,23
"org.apache.pig.newplan.BaseOperatorPlan.removeSoftLink(Operator,Operator)",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.replace(Operator,Operator)",1,5,5
"org.apache.pig.newplan.BaseOperatorPlan.size()",1,1,1
"org.apache.pig.newplan.BaseOperatorPlan.toString()",1,1,2
"org.apache.pig.newplan.BaseOperatorPlan.trimBelow(Operator)",1,3,3
"org.apache.pig.newplan.DependencyOrderWalker.DependencyOrderWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.DependencyOrderWalker.doAllPredecessors(Operator,Set<Operator>,Collection<Operator>)",1,5,5
"org.apache.pig.newplan.DependencyOrderWalker.spawnChildWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.DependencyOrderWalker.walk(PlanVisitor)",2,3,4
"org.apache.pig.newplan.DepthFirstWalker.DepthFirstWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.DepthFirstWalker.depthFirst(Operator,Collection<Operator>,Set<Operator>,PlanVisitor)",2,3,4
"org.apache.pig.newplan.DepthFirstWalker.spawnChildWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.DepthFirstWalker.walk(PlanVisitor)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.DotPlanDumper(BaseOperatorPlan,PrintStream)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.DotPlanDumper(BaseOperatorPlan,PrintStream,boolean,Set<Operator>,Set<Operator>,Set<Operator>)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.connectInvisible(Operator,BaseOperatorPlan)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.connectInvisibleInput(Operator,BaseOperatorPlan)",1,5,5
"org.apache.pig.newplan.DotPlanDumper.connectInvisibleInput(Operator,Operator,BaseOperatorPlan)",1,3,3
"org.apache.pig.newplan.DotPlanDumper.connectInvisibleOutput(Operator,BaseOperatorPlan)",1,6,6
"org.apache.pig.newplan.DotPlanDumper.dump()",1,3,3
"org.apache.pig.newplan.DotPlanDumper.dumpEdge(Operator,Operator)",1,7,7
"org.apache.pig.newplan.DotPlanDumper.dumpInvisibleEdge(String,String)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.dumpInvisibleInput(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.dumpInvisibleInput(Operator,Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.dumpInvisibleOperators(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.dumpInvisibleOutput(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.dumpMultiInputNestedOperator(Operator,MultiMap<Operator, BaseOperatorPlan>)",1,5,5
"org.apache.pig.newplan.DotPlanDumper.dumpMultiOutputNestedOperator(Operator,Collection<BaseOperatorPlan>)",1,2,2
"org.apache.pig.newplan.DotPlanDumper.dumpNestedOperator(Operator,Collection<BaseOperatorPlan>)",1,3,3
"org.apache.pig.newplan.DotPlanDumper.dumpOperator(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.getAttributes(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.getClusterID(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.getClusterID(Operator,Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.getID(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.getInvisibleAttributes(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.getName(Operator)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.getSubgraphID(Operator,Operator,boolean)",1,1,2
"org.apache.pig.newplan.DotPlanDumper.getSubgraphID(Operator,boolean)",1,1,2
"org.apache.pig.newplan.DotPlanDumper.makeDumper(BaseOperatorPlan,PrintStream)",1,1,1
"org.apache.pig.newplan.DotPlanDumper.reverse(BaseOperatorPlan)",1,1,1
"org.apache.pig.newplan.FilterExtractor.FilterExtractor(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.FilterExtractor.addToFilterPlan(LogicalExpression)",1,1,1
"org.apache.pig.newplan.FilterExtractor.andLogicalExpressions(LogicalExpressionPlan,LogicalExpression,LogicalExpression)",3,3,5
"org.apache.pig.newplan.FilterExtractor.canPushDown()",1,1,1
"org.apache.pig.newplan.FilterExtractor.checkPushDown(BinaryExpression)",2,6,7
"org.apache.pig.newplan.FilterExtractor.checkPushDown(LogicalExpression)",5,5,5
"org.apache.pig.newplan.FilterExtractor.checkPushDown(UnaryExpression)",3,5,5
"org.apache.pig.newplan.FilterExtractor.getExpression(BinaryExpression,OpType)",1,1,1
"org.apache.pig.newplan.FilterExtractor.getExpression(LogicalExpression)",23,22,23
"org.apache.pig.newplan.FilterExtractor.getExpression(UnaryExpression,OpType)",1,1,1
"org.apache.pig.newplan.FilterExtractor.getFilteredPlan()",1,1,1
"org.apache.pig.newplan.FilterExtractor.getPushDownExpression()",1,1,1
"org.apache.pig.newplan.FilterExtractor.isFilterRemovable()",1,1,1
"org.apache.pig.newplan.FilterExtractor.orLogicalExpressions(LogicalExpressionPlan,LogicalExpression,LogicalExpression)",2,3,5
"org.apache.pig.newplan.FilterExtractor.removeFromFilteredPlan(Operator)",2,4,4
"org.apache.pig.newplan.FilterExtractor.visit()",1,2,2
"org.apache.pig.newplan.Operator.Operator(String,OperatorPlan)",1,1,1
"org.apache.pig.newplan.Operator.annotate(String,Object)",1,1,1
"org.apache.pig.newplan.Operator.getAnnotation(String)",1,1,1
"org.apache.pig.newplan.Operator.getLocation()",1,1,1
"org.apache.pig.newplan.Operator.getName()",1,1,1
"org.apache.pig.newplan.Operator.getPlan()",1,1,1
"org.apache.pig.newplan.Operator.removeAnnotation(String)",1,1,1
"org.apache.pig.newplan.Operator.setLocation(SourceLocation)",1,1,1
"org.apache.pig.newplan.Operator.setPlan(OperatorPlan)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.OperatorSubPlan(OperatorPlan)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.add(Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.connect(Operator,Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.connect(Operator,int,Operator,int)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.createSoftLink(Operator,Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.disconnect(Operator,Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.getBasePlan()",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.getOperators()",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.getPredecessors(Operator)",1,4,5
"org.apache.pig.newplan.OperatorSubPlan.getSinks()",1,5,5
"org.apache.pig.newplan.OperatorSubPlan.getSoftLinkPredecessors(Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.getSoftLinkSuccessors(Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.getSources()",1,5,5
"org.apache.pig.newplan.OperatorSubPlan.getSuccessors(Operator)",1,4,5
"org.apache.pig.newplan.OperatorSubPlan.insertBetween(Operator,Operator,Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.isEqual(OperatorPlan)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.pathExists(Operator,Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.remove(Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.removeAndReconnect(Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.removeSoftLink(Operator,Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.replace(Operator,Operator)",1,1,1
"org.apache.pig.newplan.OperatorSubPlan.size()",1,1,1
"org.apache.pig.newplan.PartitionFilterExtractor.PartitionFilterExtractor(LogicalExpressionPlan,List<String>)",1,1,1
"org.apache.pig.newplan.PartitionFilterExtractor.checkPushDown(ProjectExpression)",1,2,2
"org.apache.pig.newplan.PartitionFilterExtractor.isSupportedOpType(BinaryExpression)",1,1,1
"org.apache.pig.newplan.PartitionFilterExtractor.isSupportedOpType(UnaryExpression)",1,1,1
"org.apache.pig.newplan.PlanDumper.PlanDumper(BaseOperatorPlan,PrintStream)",1,1,1
"org.apache.pig.newplan.PlanDumper.dump()",5,10,10
"org.apache.pig.newplan.PlanDumper.dumpEdge(Operator,Operator)",1,1,1
"org.apache.pig.newplan.PlanDumper.dumpMultiInputNestedOperator(Operator,MultiMap<Operator, BaseOperatorPlan>)",1,3,3
"org.apache.pig.newplan.PlanDumper.dumpMultiOutputNestedOperator(Operator,Collection<BaseOperatorPlan>)",1,3,3
"org.apache.pig.newplan.PlanDumper.dumpNestedOperator(Operator,Collection<BaseOperatorPlan>)",1,2,2
"org.apache.pig.newplan.PlanDumper.dumpOperator(Operator)",1,1,1
"org.apache.pig.newplan.PlanDumper.getMultiInputNestedPlans(Operator)",1,1,1
"org.apache.pig.newplan.PlanDumper.getMultiOutputNestedPlans(Operator)",1,1,1
"org.apache.pig.newplan.PlanDumper.getNestedPlans(Operator)",1,1,1
"org.apache.pig.newplan.PlanDumper.isVerbose()",1,1,1
"org.apache.pig.newplan.PlanDumper.join(String,String[])",2,3,4
"org.apache.pig.newplan.PlanDumper.makeDumper(BaseOperatorPlan,PrintStream)",1,1,1
"org.apache.pig.newplan.PlanDumper.setVerbose(boolean)",1,1,1
"org.apache.pig.newplan.PlanEdge.PlanEdge()",1,1,1
"org.apache.pig.newplan.PlanEdge.PlanEdge(int)",1,1,1
"org.apache.pig.newplan.PlanEdge.put(Operator,Operator,int)",3,2,3
"org.apache.pig.newplan.PlanEdge.removeWithPosition(Operator,Operator)",5,4,6
"org.apache.pig.newplan.PlanEdge.shallowClone()",1,2,2
"org.apache.pig.newplan.PlanVisitor.PlanVisitor(OperatorPlan,PlanWalker)",1,1,1
"org.apache.pig.newplan.PlanVisitor.getPlan()",1,1,1
"org.apache.pig.newplan.PlanVisitor.popWalker()",2,1,2
"org.apache.pig.newplan.PlanVisitor.pushWalker(PlanWalker)",1,1,1
"org.apache.pig.newplan.PlanVisitor.visit()",1,1,1
"org.apache.pig.newplan.PlanWalker.PlanWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.PlanWalker.getPlan()",1,1,1
"org.apache.pig.newplan.PlanWalker.setPlan(OperatorPlan)",1,1,1
"org.apache.pig.newplan.PredicatePushDownFilterExtractor.PredicatePushDownFilterExtractor(LogicalExpressionPlan,List<String>,List<OpType>)",1,1,1
"org.apache.pig.newplan.PredicatePushDownFilterExtractor.checkPushDown(ProjectExpression)",1,2,2
"org.apache.pig.newplan.PredicatePushDownFilterExtractor.isSupportedOpType(BinaryExpression)",15,15,15
"org.apache.pig.newplan.PredicatePushDownFilterExtractor.isSupportedOpType(UnaryExpression)",4,4,4
"org.apache.pig.newplan.PredicatePushDownFilterExtractor.visit()",1,2,3
"org.apache.pig.newplan.ReverseDependencyOrderWalker.ReverseDependencyOrderWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.ReverseDependencyOrderWalker.doAllSuccessors(Operator,Set<Operator>,Collection<Operator>)",1,5,5
"org.apache.pig.newplan.ReverseDependencyOrderWalker.spawnChildWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.ReverseDependencyOrderWalker.walk(PlanVisitor)",2,3,4
"org.apache.pig.newplan.ReverseDependencyOrderWalkerWOSeenChk.ReverseDependencyOrderWalkerWOSeenChk(OperatorPlan)",1,1,1
"org.apache.pig.newplan.ReverseDependencyOrderWalkerWOSeenChk.doAllSuccessors(Operator,Collection<Operator>)",1,4,4
"org.apache.pig.newplan.ReverseDependencyOrderWalkerWOSeenChk.spawnChildWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.ReverseDependencyOrderWalkerWOSeenChk.walk(PlanVisitor)",2,3,4
"org.apache.pig.newplan.SubtreeDependencyOrderWalker.SubtreeDependencyOrderWalker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.SubtreeDependencyOrderWalker.SubtreeDependencyOrderWalker(OperatorPlan,Operator)",1,1,1
"org.apache.pig.newplan.SubtreeDependencyOrderWalker.walk(PlanVisitor)",1,2,2
"org.apache.pig.newplan.logical.DotLOPrinter.DotLOPrinter(BaseOperatorPlan,PrintStream)",1,1,1
"org.apache.pig.newplan.logical.DotLOPrinter.DotLOPrinter(BaseOperatorPlan,PrintStream,boolean,Set<Operator>,Set<Operator>,Set<Operator>)",1,1,1
"org.apache.pig.newplan.logical.DotLOPrinter.getAttributes(Operator)",2,2,3
"org.apache.pig.newplan.logical.DotLOPrinter.getMultiInputNestedPlans(Operator)",3,5,5
"org.apache.pig.newplan.logical.DotLOPrinter.getName(Operator)",1,4,4
"org.apache.pig.newplan.logical.DotLOPrinter.getNestedPlans(Operator)",1,7,7
"org.apache.pig.newplan.logical.DotLOPrinter.makeDumper(BaseOperatorPlan,PrintStream)",1,1,1
"org.apache.pig.newplan.logical.DotLOPrinter.reverse(BaseOperatorPlan)",2,1,2
"org.apache.pig.newplan.logical.Util.OpFinder.OpFinder(LogicalPlan,Class<C>)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.getFoundOps()",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOCogroup)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOCross)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOCube)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LODistinct)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOGenerate)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOInnerLoad)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOJoin)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOLimit)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOLoad)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LONative)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LORank)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOSort)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOSplit)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOSplitOutput)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOStream)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visit(LOUnion)",1,1,1
"org.apache.pig.newplan.logical.Util.OpFinder.visitOp(LogicalRelationalOperator)",1,2,2
"org.apache.pig.newplan.logical.Util.addForEachAfter(LogicalPlan,LogicalRelationalOperator,int,Set<Integer>)",3,3,4
"org.apache.pig.newplan.logical.Util.fixSchemaAddTupleInBag(Schema)",1,1,1
"org.apache.pig.newplan.logical.Util.getLogicalRelationalOperators(LogicalPlan,Class<C>)",1,1,1
"org.apache.pig.newplan.logical.Util.translateFieldSchema(FieldSchema)",1,2,2
"org.apache.pig.newplan.logical.Util.translateFieldSchema(LogicalFieldSchema)",2,2,4
"org.apache.pig.newplan.logical.Util.translateSchema(LogicalSchema)",2,2,4
"org.apache.pig.newplan.logical.Util.translateSchema(Schema)",2,2,3
"org.apache.pig.newplan.logical.expression.AddExpression.AddExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AddExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.AddExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.AddExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.AddExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.AllSameExpressionVisitor(OperatorPlan,PlanWalker)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(AddExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(AndExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(BinCondExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(CastExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(ConstantExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(DereferenceExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(DivideExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(EqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(GreaterThanEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(GreaterThanExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(IsNullExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(LessThanEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(LessThanExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(MapLookupExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(ModExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(MultiplyExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(NegativeExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(NotEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(NotExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(OrExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(ProjectExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(RegexExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(SubtractExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AllSameExpressionVisitor.visit(UserFuncExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AndExpression.AndExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.AndExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.AndExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.AndExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.AndExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.BinCondExpression.BinCondExpression(OperatorPlan,LogicalExpression,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.BinCondExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.BinCondExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.BinCondExpression.getCondition()",1,1,1
"org.apache.pig.newplan.logical.expression.BinCondExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.BinCondExpression.getLhs()",1,1,1
"org.apache.pig.newplan.logical.expression.BinCondExpression.getRhs()",1,1,1
"org.apache.pig.newplan.logical.expression.BinCondExpression.isEqual(Operator)",2,4,5
"org.apache.pig.newplan.logical.expression.BinaryExpression.BinaryExpression(String,OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.BinaryExpression.getLhs()",1,1,1
"org.apache.pig.newplan.logical.expression.BinaryExpression.getRhs()",1,1,1
"org.apache.pig.newplan.logical.expression.CastExpression.CastExpression(OperatorPlan,LogicalExpression,LogicalFieldSchema)",1,1,1
"org.apache.pig.newplan.logical.expression.CastExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.CastExpression.deepCopy(LogicalExpressionPlan)",1,3,3
"org.apache.pig.newplan.logical.expression.CastExpression.getFieldSchema()",2,2,3
"org.apache.pig.newplan.logical.expression.CastExpression.getFuncSpec()",1,1,1
"org.apache.pig.newplan.logical.expression.CastExpression.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.expression.CastExpression.setFuncSpec(FuncSpec)",1,1,1
"org.apache.pig.newplan.logical.expression.ColumnExpression.ColumnExpression(String,OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.ConstantExpression.ConstantExpression(OperatorPlan,Object)",1,1,1
"org.apache.pig.newplan.logical.expression.ConstantExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.ConstantExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.ConstantExpression.getFieldSchema()",2,1,6
"org.apache.pig.newplan.logical.expression.ConstantExpression.getValue()",1,1,1
"org.apache.pig.newplan.logical.expression.ConstantExpression.inheritSchema(LogicalExpression)",1,1,2
"org.apache.pig.newplan.logical.expression.ConstantExpression.isEqual(Operator)",2,5,7
"org.apache.pig.newplan.logical.expression.ConstantExpression.setValue(Object)",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.DereferenceExpression(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.DereferenceExpression(OperatorPlan,List<Integer>)",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.DereferenceExpression(OperatorPlan,int)",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.DereferenceExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.getBagColumns()",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.getFieldSchema()",2,14,16
"org.apache.pig.newplan.logical.expression.DereferenceExpression.getRawColumns()",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.getReferredExpression()",2,1,2
"org.apache.pig.newplan.logical.expression.DereferenceExpression.isEqual(Operator)",3,3,5
"org.apache.pig.newplan.logical.expression.DereferenceExpression.setBagColumns(List<Integer>)",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.setRawColumns(List<Object>)",1,1,1
"org.apache.pig.newplan.logical.expression.DereferenceExpression.toString()",1,3,3
"org.apache.pig.newplan.logical.expression.DereferenceExpression.translateAliasToPos(LogicalSchema,List<Object>)",6,8,8
"org.apache.pig.newplan.logical.expression.DivideExpression.DivideExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.DivideExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.DivideExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.DivideExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.DivideExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.EqualExpression.EqualExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.EqualExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.EqualExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.EqualExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.EqualExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.ExpToPhyTranslationVisitor(OperatorPlan,LogicalRelationalOperator,PhysicalPlan,Map<Operator, PhysicalOperator>)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.ExpToPhyTranslationVisitor(OperatorPlan,PlanWalker,LogicalRelationalOperator,PhysicalPlan,Map<Operator, PhysicalOperator>)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.attachBinaryComparisonOperator(BinaryExpression,BinaryComparisonOperator)",3,2,4
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.attachBinaryExpressionOperator(BinaryExpression,BinaryExpressionOperator)",3,2,4
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.getPhysicalPlan()",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.setPigContext(PigContext)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(AddExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(AndExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(BinCondExpression)",3,2,4
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(CastExpression)",2,3,4
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(ConstantExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(DereferenceExpression)",1,2,2
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(DivideExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(EqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(GreaterThanEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(GreaterThanExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(IsNullExpression)",1,1,2
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(LessThanEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(LessThanExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(MapLookupExpression)",1,1,2
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(ModExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(MultiplyExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(NegativeExpression)",1,1,2
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(NotEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(NotExpression)",1,1,2
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(OrExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(ProjectExpression)",4,8,9
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(RegexExpression)",1,2,2
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(SubtractExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.visit(UserFuncExpression)",3,8,9
"org.apache.pig.newplan.logical.expression.GreaterThanEqualExpression.GreaterThanEqualExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.GreaterThanEqualExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.GreaterThanEqualExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.GreaterThanEqualExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.GreaterThanEqualExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.GreaterThanExpression.GreaterThanExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.GreaterThanExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.GreaterThanExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.GreaterThanExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.GreaterThanExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.IsNullExpression.IsNullExpression(OperatorPlan,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.IsNullExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.IsNullExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.IsNullExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.IsNullExpression.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.expression.LessThanEqualExpression.LessThanEqualExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LessThanEqualExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.LessThanEqualExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.LessThanEqualExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.LessThanEqualExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.LessThanExpression.LessThanExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LessThanExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.LessThanExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.LessThanExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.LessThanExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.LogicalExpression.LogicalExpression(String,OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpression.getNextUid()",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpression.getType()",2,3,3
"org.apache.pig.newplan.logical.expression.LogicalExpression.hasFieldSchema()",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpression.neverUseForRealSetFieldSchema(LogicalFieldSchema)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpression.resetFieldSchema()",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpression.resetNextUid()",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpression.resetUid()",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpression.toString()",1,3,3
"org.apache.pig.newplan.logical.expression.LogicalExpressionPlan.deepCopy()",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionPlan.explain(PrintStream,String,boolean)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionPlan.isEqual(OperatorPlan)",4,4,7
"org.apache.pig.newplan.logical.expression.LogicalExpressionPlan.merge(LogicalExpressionPlan)",1,5,5
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.LogicalExpressionVisitor(OperatorPlan,PlanWalker)",2,1,2
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(AddExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(AndExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(BinCondExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(CastExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(ConstantExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(DereferenceExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(DivideExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(EqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(GreaterThanEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(GreaterThanExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(IsNullExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(LessThanEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(LessThanExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(MapLookupExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(ModExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(MultiplyExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(NegativeExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(NotEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(NotExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(OrExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(ProjectExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(RegexExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(ScalarExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(SubtractExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.visit(UserFuncExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.MapLookupExpression.MapLookupExpression(OperatorPlan,String)",1,1,1
"org.apache.pig.newplan.logical.expression.MapLookupExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.MapLookupExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.MapLookupExpression.getFieldSchema()",4,3,5
"org.apache.pig.newplan.logical.expression.MapLookupExpression.getLookupKey()",1,1,1
"org.apache.pig.newplan.logical.expression.MapLookupExpression.getMap()",2,1,2
"org.apache.pig.newplan.logical.expression.MapLookupExpression.isEqual(Operator)",6,5,7
"org.apache.pig.newplan.logical.expression.MapLookupExpression.toString()",1,3,3
"org.apache.pig.newplan.logical.expression.ModExpression.ModExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.ModExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.ModExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.ModExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.ModExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.MultiplyExpression.MultiplyExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.MultiplyExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.MultiplyExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.MultiplyExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.MultiplyExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.NegativeExpression.NegativeExpression(OperatorPlan,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.NegativeExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.NegativeExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.NegativeExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.NegativeExpression.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.expression.NotEqualExpression.NotEqualExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.NotEqualExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.NotEqualExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.NotEqualExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.NotEqualExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.NotExpression.NotExpression(OperatorPlan,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.NotExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.NotExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.NotExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.NotExpression.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.expression.OrExpression.OrExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.OrExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.OrExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.OrExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.OrExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(OperatorPlan,int,LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(OperatorPlan,int,String,Operator,LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(OperatorPlan,int,int,LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.ProjectExpression(ProjectExpression,OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.ProjectExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.findColNum(String)",4,7,7
"org.apache.pig.newplan.logical.expression.ProjectExpression.findReferent()",3,2,4
"org.apache.pig.newplan.logical.expression.ProjectExpression.getAttachedRelationalOp()",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.getColAlias()",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.getColNum()",2,1,2
"org.apache.pig.newplan.logical.expression.ProjectExpression.getEndCol()",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.getFieldSchema()",2,29,34
"org.apache.pig.newplan.logical.expression.ProjectExpression.getInputNum()",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.getProjectedOperator()",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.getStartCol()",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.getType()",4,4,5
"org.apache.pig.newplan.logical.expression.ProjectExpression.isEqual(Operator)",5,5,11
"org.apache.pig.newplan.logical.expression.ProjectExpression.isProjectStar()",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.isRangeOrStarProject()",1,2,2
"org.apache.pig.newplan.logical.expression.ProjectExpression.isRangeProject()",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.setAttachedRelationalOp(LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.setColNum(int)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.setColumnNumberFromAlias()",4,4,7
"org.apache.pig.newplan.logical.expression.ProjectExpression.setEndAlias(String)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.setEndCol(int)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.setInputNum(int)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.setStartAlias(String)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.setStartCol(int)",1,1,1
"org.apache.pig.newplan.logical.expression.ProjectExpression.toString()",1,7,8
"org.apache.pig.newplan.logical.expression.RegexExpression.RegexExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.RegexExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.RegexExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.RegexExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.RegexExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.ScalarExpression.ScalarExpression(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.ScalarExpression.ScalarExpression(OperatorPlan,Operator,Operator)",1,1,1
"org.apache.pig.newplan.logical.expression.ScalarExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.ScalarExpression.deepCopy(LogicalExpressionPlan)",1,3,3
"org.apache.pig.newplan.logical.expression.ScalarExpression.getAttachedLogicalOperator()",1,1,1
"org.apache.pig.newplan.logical.expression.ScalarExpression.getFieldSchema()",4,5,6
"org.apache.pig.newplan.logical.expression.ScalarExpression.getImplicitReferencedOperator()",1,1,1
"org.apache.pig.newplan.logical.expression.ScalarExpression.setAttachedLogicalOperator(Operator)",1,1,1
"org.apache.pig.newplan.logical.expression.ScalarExpression.setImplicitReferencedOperator(Operator)",1,1,1
"org.apache.pig.newplan.logical.expression.ScalarExpression.toString()",1,3,3
"org.apache.pig.newplan.logical.expression.SubtractExpression.SubtractExpression(OperatorPlan,LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.SubtractExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.SubtractExpression.deepCopy(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.expression.SubtractExpression.getFieldSchema()",2,1,2
"org.apache.pig.newplan.logical.expression.SubtractExpression.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.expression.UnaryExpression.UnaryExpression(String,OperatorPlan,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.expression.UnaryExpression.getExpression()",2,1,2
"org.apache.pig.newplan.logical.expression.UserFuncExpression.UserFuncExpression(OperatorPlan,FuncSpec)",1,2,2
"org.apache.pig.newplan.logical.expression.UserFuncExpression.UserFuncExpression(OperatorPlan,FuncSpec,List<LogicalExpression>)",1,2,2
"org.apache.pig.newplan.logical.expression.UserFuncExpression.UserFuncExpression(OperatorPlan,FuncSpec,List<LogicalExpression>,boolean)",1,1,1
"org.apache.pig.newplan.logical.expression.UserFuncExpression.UserFuncExpression(OperatorPlan,FuncSpec,List<LogicalExpression>,boolean,boolean,boolean,String,String)",1,1,1
"org.apache.pig.newplan.logical.expression.UserFuncExpression.UserFuncExpression(OperatorPlan,FuncSpec,boolean)",1,1,1
"org.apache.pig.newplan.logical.expression.UserFuncExpression.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.expression.UserFuncExpression.deepCopy(LogicalExpressionPlan)",1,4,4
"org.apache.pig.newplan.logical.expression.UserFuncExpression.getArguments()",2,2,3
"org.apache.pig.newplan.logical.expression.UserFuncExpression.getEvalFunc()",1,2,2
"org.apache.pig.newplan.logical.expression.UserFuncExpression.getFieldSchema()",6,12,15
"org.apache.pig.newplan.logical.expression.UserFuncExpression.getFuncSpec()",1,1,1
"org.apache.pig.newplan.logical.expression.UserFuncExpression.getSignature()",1,1,1
"org.apache.pig.newplan.logical.expression.UserFuncExpression.initializeInvokerFunction()",6,11,20
"org.apache.pig.newplan.logical.expression.UserFuncExpression.isDeterministic()",2,2,3
"org.apache.pig.newplan.logical.expression.UserFuncExpression.isEqual(Operator)",9,3,11
"org.apache.pig.newplan.logical.expression.UserFuncExpression.isViaDefine()",1,1,1
"org.apache.pig.newplan.logical.expression.UserFuncExpression.setFuncSpec(FuncSpec)",1,1,1
"org.apache.pig.newplan.logical.expression.UserFuncExpression.toString()",1,3,3
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.AllExpressionVisitor(OperatorPlan,PlanWalker)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOCogroup)",1,2,2
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOCube)",1,2,2
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOGenerate)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOInnerLoad)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOJoin)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOLimit)",1,2,2
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LORank)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOSort)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visit(LOSplitOutput)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.visitAll(Collection<LogicalExpressionPlan>)",1,2,2
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.AllSameRalationalNodesVisitor(OperatorPlan,PlanWalker)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOCogroup)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOCross)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOCube)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LODistinct)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOJoin)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOLimit)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOLoad)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LONative)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LORank)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOSort)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOSplit)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOSplitOutput)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOStream)",1,1,1
"org.apache.pig.newplan.logical.optimizer.AllSameRalationalNodesVisitor.visit(LOUnion)",1,1,1
"org.apache.pig.newplan.logical.optimizer.ExpressionUidResetter.ExpressionUidResetter(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.optimizer.ExpressionUidResetter.execute(LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.optimizer.FieldSchemaResetter.FieldSchemaResetter(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.optimizer.FieldSchemaResetter.execute(LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.LogicalPlanOptimizer(OperatorPlan,int,Set<String>)",1,1,1
"org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.LogicalPlanOptimizer(OperatorPlan,int,Set<String>,PigContext)",1,1,3
"org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.addListeners()",1,1,1
"org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.buildRuleSets()",1,13,13
"org.apache.pig.newplan.logical.optimizer.LogicalPlanOptimizer.checkAndAddRule(Set<Rule>,Rule)",1,5,5
"org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.LogicalPlanPrinter(OperatorPlan,PrintStream)",1,1,1
"org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.LogicalPlanPrinter(OperatorPlan,PrintStream,ArrayList<byte[]>)",1,1,2
"org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.depthFirst(Operator)",2,4,5
"org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.depthFirstLP()",1,3,3
"org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.printNodePlan(Operator)",1,17,17
"org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.printPlan(OperatorPlan)",1,2,2
"org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.visit()",1,1,2
"org.apache.pig.newplan.logical.optimizer.LogicalPlanPrinter.writeWithTabs(byte[])",1,2,2
"org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.ProjectionFinder.ProjectionFinder(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.ProjectionFinder.getVisitor(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.ProjectionRewriter.ProjectionRewriter(OperatorPlan,LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.ProjectionRewriter.visit(ProjectExpression)",7,4,8
"org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.transformed(OperatorPlan,OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaPatcher.transformed(OperatorPlan,OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.SchemaResetter(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.SchemaResetter(OperatorPlan,boolean)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.validate(LogicalSchema)",6,3,6
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOCogroup)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOCross)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOCube)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LODistinct)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOGenerate)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOInnerLoad)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOJoin)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOLimit)",1,2,2
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOLoad)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LORank)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOSort)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOSplit)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOSplitOutput)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOStream)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visit(LOUnion)",1,1,1
"org.apache.pig.newplan.logical.optimizer.SchemaResetter.visitAll(Collection<LogicalExpressionPlan>)",1,2,2
"org.apache.pig.newplan.logical.optimizer.UidResetter.UidResetter(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOCogroup)",1,2,2
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOCross)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LODistinct)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOGenerate)",1,2,2
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOInnerLoad)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOJoin)",1,2,2
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOLimit)",1,2,2
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOLoad)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LORank)",1,2,2
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOSort)",1,2,2
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOSplit)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOSplitOutput)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOStream)",1,1,1
"org.apache.pig.newplan.logical.optimizer.UidResetter.visit(LOUnion)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.LOCogroup(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.LOCogroup(OperatorPlan,MultiMap<Integer, LogicalExpressionPlan>,GROUPTYPE,boolean[])",1,2,2
"org.apache.pig.newplan.logical.relational.LOCogroup.LOCogroup(OperatorPlan,MultiMap<Integer, LogicalExpressionPlan>,boolean[])",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOCogroup.getExpressionPlans()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.getGeneratedInputUids()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.getGroupType()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.getInner()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.getInputs(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.getPlanSchema(LogicalExpressionPlan)",1,2,2
"org.apache.pig.newplan.logical.relational.LOCogroup.getSchema()",13,11,17
"org.apache.pig.newplan.logical.relational.LOCogroup.isEqual(Operator)",10,7,14
"org.apache.pig.newplan.logical.relational.LOCogroup.resetGroupType()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.resetUid()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.setExpressionPlans(MultiMap<Integer, LogicalExpressionPlan>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.setGroupType(GROUPTYPE)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCogroup.setInnerFlags(boolean[])",1,2,2
"org.apache.pig.newplan.logical.relational.LOCross.LOCross(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCross.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOCross.getInputs()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCross.getSchema()",5,6,9
"org.apache.pig.newplan.logical.relational.LOCross.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.relational.LOCross.isNested()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCross.setNested(boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.LOCube(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.LOCube(OperatorPlan,MultiMap<Integer, LogicalExpressionPlan>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.accept(PlanVisitor)",1,1,2
"org.apache.pig.newplan.logical.relational.LOCube.getExpressionPlans()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.getInputs(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.getOperations()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.getSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.isEqual(Operator)",6,4,7
"org.apache.pig.newplan.logical.relational.LOCube.resetUid()",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.setExpressionPlans(MultiMap<Integer, LogicalExpressionPlan>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOCube.setOperations(List<String>)",1,1,1
"org.apache.pig.newplan.logical.relational.LODistinct.LODistinct(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LODistinct.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LODistinct.getInput(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LODistinct.getSchema()",2,1,2
"org.apache.pig.newplan.logical.relational.LODistinct.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.relational.LOFilter.LOFilter(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOFilter.LOFilter(LogicalPlan,LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOFilter.LOFilter(LogicalPlan,LogicalExpressionPlan,boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LOFilter.LOFilter(LogicalPlan,boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LOFilter.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOFilter.getFilterPlan()",1,1,1
"org.apache.pig.newplan.logical.relational.LOFilter.getInput(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOFilter.getSchema()",2,1,2
"org.apache.pig.newplan.logical.relational.LOFilter.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.relational.LOFilter.isSample()",1,1,1
"org.apache.pig.newplan.logical.relational.LOFilter.setFilterPlan(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOForEach.LOForEach(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOForEach.NestedRelationalOperatorFinder.NestedRelationalOperatorFinder(LogicalPlan,String)",1,1,1
"org.apache.pig.newplan.logical.relational.LOForEach.NestedRelationalOperatorFinder.execute(LogicalRelationalOperator)",1,2,3
"org.apache.pig.newplan.logical.relational.LOForEach.NestedRelationalOperatorFinder.getMatchedOperator()",1,1,1
"org.apache.pig.newplan.logical.relational.LOForEach.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOForEach.dumpNestedSchema(String,String)",2,2,2
"org.apache.pig.newplan.logical.relational.LOForEach.findReacheableInnerLoadFromBoundaryProject(ProjectExpression)",1,5,6
"org.apache.pig.newplan.logical.relational.LOForEach.getInnerPlan()",1,1,1
"org.apache.pig.newplan.logical.relational.LOForEach.getSchema()",3,2,4
"org.apache.pig.newplan.logical.relational.LOForEach.isEqual(Operator)",2,1,2
"org.apache.pig.newplan.logical.relational.LOForEach.setInnerPlan(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.LOGenerate(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.LOGenerate(OperatorPlan,List<LogicalExpressionPlan>,boolean[])",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOGenerate.getFlattenFlags()",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.getOutputPlanSchemas()",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.getOutputPlans()",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.getSchema()",7,27,39
"org.apache.pig.newplan.logical.relational.LOGenerate.getUidOnlySchemas()",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.getUserDefinedSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.isEqual(Operator)",6,2,6
"org.apache.pig.newplan.logical.relational.LOGenerate.resetSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.resetUid()",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.setFlattenFlags(boolean[])",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.setOutputPlanSchemas(List<LogicalSchema>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.setOutputPlans(List<LogicalExpressionPlan>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.setUidOnlySchemas(List<LogicalSchema>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.setUserDefinedSchema(List<LogicalSchema>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOGenerate.toString()",1,7,7
"org.apache.pig.newplan.logical.relational.LOInnerLoad.LOInnerLoad(LogicalPlan,LOForEach,ProjectExpression)",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.LOInnerLoad(OperatorPlan,LOForEach,String)",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.LOInnerLoad(OperatorPlan,LOForEach,int)",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOInnerLoad.getColNum()",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.getLOForEach()",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.getProjection()",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.getSchema()",2,8,10
"org.apache.pig.newplan.logical.relational.LOInnerLoad.isEqual(Operator)",2,1,2
"org.apache.pig.newplan.logical.relational.LOInnerLoad.resetSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.setLocation(SourceLocation)",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.sourceIsBag()",1,1,1
"org.apache.pig.newplan.logical.relational.LOInnerLoad.toString()",1,8,8
"org.apache.pig.newplan.logical.relational.LOJoin.LOJoin(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.LOJoin(LogicalPlan,MultiMap<Integer, LogicalExpressionPlan>,JOINTYPE,boolean[])",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOJoin.getExpressionPlanValues()",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.getExpressionPlans()",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.getInnerFlags()",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.getInputs(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.getJoinPlan(int)",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.getJoinType()",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.getName()",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.getSchema()",5,5,8
"org.apache.pig.newplan.logical.relational.LOJoin.isEqual(Operator)",16,6,18
"org.apache.pig.newplan.logical.relational.LOJoin.isInner(int)",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.resetJoinType()",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.setInnerFlags(boolean[])",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.setJoinPlans(MultiMap<Integer, LogicalExpressionPlan>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOJoin.setJoinType(JOINTYPE)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLimit.LOLimit(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLimit.LOLimit(LogicalPlan,LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLimit.LOLimit(LogicalPlan,long)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLimit.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOLimit.getInput(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLimit.getLimit()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLimit.getLimitPlan()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLimit.getSchema()",2,1,2
"org.apache.pig.newplan.logical.relational.LOLimit.isEqual(Operator)",3,6,7
"org.apache.pig.newplan.logical.relational.LOLimit.setLimit(long)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLimit.setLimitPlan(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.LOLoad(FileSpec,LogicalSchema,LogicalPlan,Configuration,LoadFunc,String)",2,3,4
"org.apache.pig.newplan.logical.relational.LOLoad.LOLoad(LogicalSchema,LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOLoad.getCastState()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.getConfiguration()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.getDeterminedSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.getFileSpec()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.getLimit()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.getLoadFunc()",1,3,4
"org.apache.pig.newplan.logical.relational.LOLoad.getSchema()",2,9,13
"org.apache.pig.newplan.logical.relational.LOLoad.getSchemaFile()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.getSchemaFromMetaData()",2,4,4
"org.apache.pig.newplan.logical.relational.LOLoad.getScriptSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.getSignature()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.isCastAdjusted()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.isEqual(Operator)",5,2,6
"org.apache.pig.newplan.logical.relational.LOLoad.isTmpLoad()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.resetUid()",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.setCastState(CastState)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.setLimit(long)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.setRequiredFields(List<Integer>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.setScriptSchema(LogicalSchema)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.setTmpLoad(boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LOLoad.storeScriptSchema(Configuration,LogicalSchema,String)",2,2,5
"org.apache.pig.newplan.logical.relational.LOLoad.toString()",1,1,1
"org.apache.pig.newplan.logical.relational.LONative.LONative(OperatorPlan,String,String[])",1,1,1
"org.apache.pig.newplan.logical.relational.LONative.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LONative.getNativeMRJar()",1,1,1
"org.apache.pig.newplan.logical.relational.LONative.getParams()",1,1,1
"org.apache.pig.newplan.logical.relational.LONative.getSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LONative.isEqual(Operator)",9,2,9
"org.apache.pig.newplan.logical.relational.LONative.setNativeMRJar(String)",1,1,1
"org.apache.pig.newplan.logical.relational.LONative.setParams(String[])",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.LORank(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.LORank(OperatorPlan,List<LogicalExpressionPlan>,List<Boolean>)",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LORank.getAscendingCol()",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.getRankColPlans()",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.getSchema()",4,4,7
"org.apache.pig.newplan.logical.relational.LORank.isDenseRank()",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.isEqual(Operator)",3,2,4
"org.apache.pig.newplan.logical.relational.LORank.isRowNumber()",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.setAscendingCol(List<Boolean>)",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.setIsDenseRank(boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.setIsRowNumber(boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LORank.setRankColPlan(List<LogicalExpressionPlan>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.LOSort(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.LOSort(OperatorPlan,List<LogicalExpressionPlan>,List<Boolean>,FuncSpec)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOSort.createCopy(LOSort)",1,2,2
"org.apache.pig.newplan.logical.relational.LOSort.getAscendingCols()",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.getInput(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.getLimit()",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.getOrder(List<Boolean>,int)",1,1,2
"org.apache.pig.newplan.logical.relational.LOSort.getSchema()",2,1,2
"org.apache.pig.newplan.logical.relational.LOSort.getSortColPlans()",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.getSortInfo()",6,8,10
"org.apache.pig.newplan.logical.relational.LOSort.getUserFunc()",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.isEqual(Operator)",7,2,8
"org.apache.pig.newplan.logical.relational.LOSort.isLimited()",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.isStar()",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.setAscendingCols(List<Boolean>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.setLimit(long)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.setSortColPlans(List<LogicalExpressionPlan>)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.setStar(boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSort.setUserFunc(FuncSpec)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSplit.LOSplit(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSplit.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOSplit.getSchema()",2,1,2
"org.apache.pig.newplan.logical.relational.LOSplit.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.relational.LOSplitOutput.LOSplitOutput(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSplitOutput.LOSplitOutput(LogicalPlan,LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOSplitOutput.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOSplitOutput.getFilterPlan()",1,1,1
"org.apache.pig.newplan.logical.relational.LOSplitOutput.getInputUids(long)",3,3,3
"org.apache.pig.newplan.logical.relational.LOSplitOutput.getSchema()",2,2,3
"org.apache.pig.newplan.logical.relational.LOSplitOutput.isEqual(Operator)",2,3,4
"org.apache.pig.newplan.logical.relational.LOSplitOutput.reassignUidRec(LogicalSchema)",1,4,7
"org.apache.pig.newplan.logical.relational.LOSplitOutput.resetUid()",1,1,1
"org.apache.pig.newplan.logical.relational.LOSplitOutput.setFilterPlan(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.LOStore(LogicalPlan,FileSpec,StoreFuncInterface,String)",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOStore.getFileSpec()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.getInputSpec()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.getOutputSpec()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.getSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.getSignature()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.getSortInfo()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.getStoreFunc()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.isEqual(Operator)",5,4,8
"org.apache.pig.newplan.logical.relational.LOStore.isTmpStore()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.setInputSpec(FileSpec)",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.setSortInfo(SortInfo)",1,1,1
"org.apache.pig.newplan.logical.relational.LOStore.setTmpStore(boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LOStream.LOStream(LogicalPlan,ExecutableManager,StreamingCommand,LogicalSchema)",1,1,1
"org.apache.pig.newplan.logical.relational.LOStream.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOStream.getCastState()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStream.getExecutableManager()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStream.getSchema()",2,5,6
"org.apache.pig.newplan.logical.relational.LOStream.getScriptSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStream.getStreamingCommand()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStream.isCastAdjusted()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStream.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.relational.LOStream.resetUid()",1,1,1
"org.apache.pig.newplan.logical.relational.LOStream.setCastState(CastState)",1,1,1
"org.apache.pig.newplan.logical.relational.LOUnion.LOUnion(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOUnion.LOUnion(OperatorPlan,boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LOUnion.accept(PlanVisitor)",2,1,2
"org.apache.pig.newplan.logical.relational.LOUnion.createMergedSchemaOnAlias(List<LogicalSchema>,List<String>)",4,5,5
"org.apache.pig.newplan.logical.relational.LOUnion.getCachedOuputUid(long)",3,1,3
"org.apache.pig.newplan.logical.relational.LOUnion.getInputUids(long)",1,3,3
"org.apache.pig.newplan.logical.relational.LOUnion.getInputs()",1,1,1
"org.apache.pig.newplan.logical.relational.LOUnion.getInputs(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LOUnion.getSchema()",15,16,22
"org.apache.pig.newplan.logical.relational.LOUnion.isEqual(Operator)",2,2,3
"org.apache.pig.newplan.logical.relational.LOUnion.isOnSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LOUnion.resetUid()",1,1,1
"org.apache.pig.newplan.logical.relational.LOUnion.setUnionOnSchema(boolean)",1,1,1
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.LogToPhyTranslationVisitor(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.compileFE4Flattening(boolean[],String,int,String,SourceLocation,List<Operator>)",1,3,4
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.compileToLR_GR_PackTrio(LogicalRelationalOperator,String,boolean[],MultiMap<Integer, LogicalExpressionPlan>)",2,3,7
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.compileToMergeCogrp(LogicalRelationalOperator,MultiMap<Integer, LogicalExpressionPlan>)",2,3,5
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.getLogToPhyMap()",1,1,1
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.getPhysicalPlan()",1,1,1
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.setPigContext(PigContext)",1,1,1
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.translateCollectedCogroup(LOCogroup)",1,2,4
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.translateExpressionPlans(LogicalRelationalOperator,List<LogicalExpressionPlan>)",2,3,4
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.translateMergeCogroup(LOCogroup)",3,2,4
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.translateSoftLinks(Operator)",2,2,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.updateWithEmptyBagCheck(PhysicalPlan,Operator)",2,2,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.validateMergeCogrp(boolean[])",3,1,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOCogroup)",2,2,5
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOCross)",3,6,11
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LODistinct)",1,1,2
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOFilter)",2,2,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOForEach)",7,10,14
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOInnerLoad)",4,5,6
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOJoin)",19,32,43
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOLimit)",1,2,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOLoad)",2,2,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LONative)",2,2,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LORank)",3,9,10
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOSort)",2,4,5
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOSplit)",3,4,7
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOSplitOutput)",2,2,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOStore)",1,3,4
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOStream)",2,2,3
"org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.visit(LOUnion)",2,2,3
"org.apache.pig.newplan.logical.relational.LogicalPlan.LogicalPlan()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalPlan.LogicalPlan(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalPlan.explain(PrintStream,String,boolean)",2,4,4
"org.apache.pig.newplan.logical.relational.LogicalPlan.findByAlias(String)",4,4,5
"org.apache.pig.newplan.logical.relational.LogicalPlan.getSignature()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalPlan.isEqual(OperatorPlan)",2,1,3
"org.apache.pig.newplan.logical.relational.LogicalPlan.optimize(PigContext)",1,4,7
"org.apache.pig.newplan.logical.relational.LogicalPlan.validate(PigContext,String,boolean)",1,4,6
"org.apache.pig.newplan.logical.relational.LogicalPlanData.LogicalPlanData(LogicalPlan)",2,1,2
"org.apache.pig.newplan.logical.relational.LogicalPlanData.getLoadFuncs()",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalPlanData.getNumLogicalRelationOperators()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalPlanData.getNumSinks()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalPlanData.getNumSources()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalPlanData.getSinks()",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalPlanData.getSources()",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalPlanData.getStoreFuncs()",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalPlanData.init()",1,5,5
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.LogicalRelationalNodesVisitor(OperatorPlan,PlanWalker)",3,2,3
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOCogroup)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOCross)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOCube)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LODistinct)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOGenerate)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOInnerLoad)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOJoin)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOLimit)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOLoad)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LONative)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LORank)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOSort)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOSplit)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOSplitOutput)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOStream)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalNodesVisitor.visit(LOUnion)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.LogicalRelationalOperator(String,OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.LogicalRelationalOperator(String,OperatorPlan,int)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.addFieldSchemaUidsToSet(Set<Long>,LogicalFieldSchema)",1,4,4
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.checkEquality(LogicalRelationalOperator)",5,3,7
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.fixDuplicateUids(List<LogicalFieldSchema>)",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.getAlias()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.getCustomPartitioner()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.getLineNumber()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.getRequestedParallelism()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.isPinnedOption(Integer)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.neverUseForRealSetSchema(LogicalSchema)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.pinOption(Integer)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.resetSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.resetUid()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.setAlias(String)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.setCustomPartitioner(String)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.setRequestedParallelism(int)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.setSchema(LogicalSchema)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.toString()",1,5,5
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.LogicalFieldSchema(LogicalFieldSchema)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.LogicalFieldSchema(String,LogicalSchema,byte)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.LogicalFieldSchema(String,LogicalSchema,byte,long)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.castable(LogicalFieldSchema,LogicalFieldSchema)",14,20,28
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.cloneUid()",1,3,3
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.compatible(LogicalFieldSchema)",7,3,10
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.deepCopy()",1,2,3
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.equals(LogicalFieldSchema,LogicalFieldSchema,boolean,boolean)",10,7,14
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.isEqual(Object)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.isEqual(Object,boolean)",7,5,9
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.merge(LogicalFieldSchema,LogicalFieldSchema,MergeMode)",17,25,36
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.mergeUid(LogicalFieldSchema)",2,8,8
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.normalize()",1,8,8
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.resetUid()",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.stampFieldSchema()",1,4,4
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.toString()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalFieldSchema.toString(boolean)",7,5,9
"org.apache.pig.newplan.logical.relational.LogicalSchema.LogicalSchema()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.addField(LogicalFieldSchema)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.castable(LogicalSchema,LogicalSchema)",7,2,8
"org.apache.pig.newplan.logical.relational.LogicalSchema.checkNullAlias(LogicalFieldSchema,LogicalSchema)",2,1,2
"org.apache.pig.newplan.logical.relational.LogicalSchema.deepCopy()",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalSchema.equals(LogicalSchema,LogicalSchema,boolean,boolean)",11,6,15
"org.apache.pig.newplan.logical.relational.LogicalSchema.findField(long)",5,3,5
"org.apache.pig.newplan.logical.relational.LogicalSchema.getField(String)",8,9,10
"org.apache.pig.newplan.logical.relational.LogicalSchema.getField(int)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.getFieldPosition(String)",2,1,3
"org.apache.pig.newplan.logical.relational.LogicalSchema.getFieldSubNameMatch(String)",4,8,10
"org.apache.pig.newplan.logical.relational.LogicalSchema.getFields()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.isEqual(Object)",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.isEqual(Object,boolean)",5,3,6
"org.apache.pig.newplan.logical.relational.LogicalSchema.merge(LogicalSchema,LogicalSchema,MergeMode)",7,8,10
"org.apache.pig.newplan.logical.relational.LogicalSchema.mergeNameSpacedAlias(String,String)",4,1,4
"org.apache.pig.newplan.logical.relational.LogicalSchema.mergeSchemaByAlias(LogicalSchema,LogicalSchema)",1,6,7
"org.apache.pig.newplan.logical.relational.LogicalSchema.mergeSchemasByAlias(List<LogicalSchema>)",3,3,4
"org.apache.pig.newplan.logical.relational.LogicalSchema.mergeUid(LogicalSchema)",3,4,5
"org.apache.pig.newplan.logical.relational.LogicalSchema.normalize()",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalSchema.resetUid()",1,2,2
"org.apache.pig.newplan.logical.relational.LogicalSchema.size()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.toString()",1,1,1
"org.apache.pig.newplan.logical.relational.LogicalSchema.toString(boolean)",1,3,3
"org.apache.pig.newplan.logical.relational.MapSideMergeValidator.isAcceptableForEachOp(Operator)",2,2,2
"org.apache.pig.newplan.logical.relational.MapSideMergeValidator.isAcceptableSortOp(Operator)",4,2,5
"org.apache.pig.newplan.logical.relational.MapSideMergeValidator.validateMapSideMerge(List<Operator>,OperatorPlan)",4,13,14
"org.apache.pig.newplan.logical.relational.SchemaNotDefinedException.SchemaNotDefinedException(String)",1,1,1
"org.apache.pig.newplan.logical.relational.SchemaNotDefinedException.SchemaNotDefinedException(String,Throwable)",1,1,1
"org.apache.pig.newplan.logical.relational.SchemaNotDefinedException.SchemaNotDefinedException(Throwable)",1,1,1
"org.apache.pig.newplan.logical.rules.AddForEach.AddForEach(String)",1,1,1
"org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.addForeach(LogicalRelationalOperator)",1,4,4
"org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.addSuccessors(Operator)",1,3,3
"org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.check(OperatorPlan)",3,3,7
"org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.shouldAdd(LogicalRelationalOperator)",6,4,9
"org.apache.pig.newplan.logical.rules.AddForEach.AddForEachTransformer.transform(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.AddForEach.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPrune(String)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPruneTransformer.check(OperatorPlan)",2,1,3
"org.apache.pig.newplan.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPruneTransformer.merge()",3,9,13
"org.apache.pig.newplan.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPruneTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnMapKeyPrune.ColumnMapKeyPruneTransformer.transform(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnMapKeyPrune.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.ColumnDependencyVisitor(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.collectUids(LogicalRelationalOperator,LogicalExpressionPlan,Set<Long>)",5,6,6
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.getAllUids(LogicalSchema)",2,3,6
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.setOutputUids(LogicalRelationalOperator)",2,8,8
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOCogroup)",1,7,7
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOCross)",1,4,5
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LODistinct)",2,3,3
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOForEach)",1,3,3
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOGenerate)",10,19,24
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOInnerLoad)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOJoin)",1,2,2
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOLimit)",1,2,2
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOLoad)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LORank)",1,2,2
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOSort)",1,2,2
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOSplit)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOSplitOutput)",1,2,2
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOStore)",3,4,4
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOStream)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnDependencyVisitor.visit(LOUnion)",1,2,2
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.ColumnPruneHelper(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.addOperator(Operator,OperatorSubPlan)",3,2,4
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.check()",3,9,9
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.clearAnnotation()",1,2,2
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.getColumns(LogicalSchema,Set<Long>)",4,2,4
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.getSubPlan()",1,4,4
"org.apache.pig.newplan.logical.rules.ColumnPruneHelper.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.ColumnPruneVisitor(OperatorPlan,Map<LOLoad, Pair<Map<Integer, Set<String>>, Set<Integer>>>,boolean)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.addForEachIfNecessary(LogicalRelationalOperator)",1,5,5
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.addRequiredItems(LOLoad,Pair<Map<Integer, Set<String>>, Set<Integer>>)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.removeSubTree(LogicalRelationalOperator)",1,5,5
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOCogroup)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOCross)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOForEach)",2,29,33
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOJoin)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOLimit)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOLoad)",5,24,26
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LORank)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOSort)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOSplit)",1,6,6
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOSplitOutput)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.visit(LOUnion)",1,2,2
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculator(String,PigContext)",1,1,1
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorExpressionVisitor.ConstantCalculatorExpressionVisitor(OperatorPlan,LogicalRelationalOperator,PigContext)",1,1,1
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorExpressionVisitor.execute(LogicalExpression)",7,5,10
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorExpressionVisitor.restoreDefaultTimeZone()",1,2,2
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorExpressionVisitor.setDefaultTimeZone()",1,3,3
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorLogicalPlanVisitor.ConstantCalculatorLogicalPlanVisitor(OperatorPlan,PigContext)",1,1,1
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorLogicalPlanVisitor.getVisitor(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.ConstantCalculatorTransformer(List<LogicalRelationalOperator>,PigContext)",1,1,1
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.check(OperatorPlan)",3,2,3
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.ConstantCalculator.ConstantCalculatorTransformer.transform(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.ConstantCalculator.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.check(OperatorPlan)",9,9,12
"org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.getFilterProjectionUids(LOFilter)",1,7,7
"org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.hasAll(LogicalRelationalOperator,Pair<List<Long>, List<Byte>>)",4,4,7
"org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForEachTransformer.transform(OperatorPlan)",3,3,5
"org.apache.pig.newplan.logical.rules.FilterAboveForeach.FilterAboveForeach(String)",1,1,1
"org.apache.pig.newplan.logical.rules.FilterAboveForeach.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.FilterAboveForeach.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.FilterConstantCalculator.FilterConstantCalculator(String,PigContext)",1,1,1
"org.apache.pig.newplan.logical.rules.FilterConstantCalculator.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.ForEachConstantCalculator.ForEachConstantCalculator(String,PigContext)",1,1,1
"org.apache.pig.newplan.logical.rules.ForEachConstantCalculator.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.GroupByConstParallelSetter.GroupAllParallelSetterTransformer.check(OperatorPlan)",5,3,5
"org.apache.pig.newplan.logical.rules.GroupByConstParallelSetter.GroupAllParallelSetterTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.GroupByConstParallelSetter.GroupAllParallelSetterTransformer.transform(OperatorPlan)",1,4,4
"org.apache.pig.newplan.logical.rules.GroupByConstParallelSetter.GroupByConstParallelSetter(String)",1,1,1
"org.apache.pig.newplan.logical.rules.GroupByConstParallelSetter.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.GroupByConstParallelSetter.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.LimitOptimizer.LimitOptimizer(String)",1,1,1
"org.apache.pig.newplan.logical.rules.LimitOptimizer.OptimizeLimitTransformer.check(OperatorPlan)",9,5,14
"org.apache.pig.newplan.logical.rules.LimitOptimizer.OptimizeLimitTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.LimitOptimizer.OptimizeLimitTransformer.transform(OperatorPlan)",1,28,29
"org.apache.pig.newplan.logical.rules.LimitOptimizer.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.LimitOptimizer.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.LoadTypeCastInserter.LoadTypeCastInserter(String)",1,1,1
"org.apache.pig.newplan.logical.rules.LoadTypeCastInserter.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.LoadTypeCastInserter.determineSchema(LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.rules.LoadTypeCastInserter.isCastAdjusted(LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.rules.LoadTypeCastInserter.markCastInserted(LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.rules.LoadTypeCastInserter.markCastNoNeed(LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.FullMapCollector(OperatorPlan,Set<Long>)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.FullMapExpCollector.FullMapExpCollector(OperatorPlan,Set<Long>)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.FullMapExpCollector.visit(UserFuncExpression)",2,3,4
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.getVisitor(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.visit(LOCogroup)",1,3,3
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.visit(LOSplitOutput)",1,5,5
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.FullMapCollector.visit(LOUnion)",1,3,3
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapKeysPruneHelper(OperatorPlan)",1,2,2
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.MapExprMarker.MapExprMarker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.MapExprMarker.visit(MapLookupExpression)",1,2,2
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.MapMarker(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.getVisitor(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.mergeUidKeys(Map<Long, Set<String>>)",1,3,3
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.visit(LOGenerate)",1,2,2
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.visit(LOJoin)",1,2,2
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.visit(LOLoad)",1,4,4
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.visit(LOSort)",1,2,2
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.MapMarker.visit(LOSplitOutput)",1,6,6
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.check()",3,11,12
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.getMapUids(LogicalSchema)",1,3,3
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.hasMap(LogicalSchema)",3,1,3
"org.apache.pig.newplan.logical.rules.MapKeysPruneHelper.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.MergeFilter.MergeFilter(String)",1,1,1
"org.apache.pig.newplan.logical.rules.MergeFilter.MergeFilterTransformer.check(OperatorPlan)",3,3,4
"org.apache.pig.newplan.logical.rules.MergeFilter.MergeFilterTransformer.combineFilterCond(LOFilter,LOFilter)",1,9,9
"org.apache.pig.newplan.logical.rules.MergeFilter.MergeFilterTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.MergeFilter.MergeFilterTransformer.transform(OperatorPlan)",1,11,11
"org.apache.pig.newplan.logical.rules.MergeFilter.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.MergeFilter.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.MergeForEach.MergeForEach(String)",1,1,1
"org.apache.pig.newplan.logical.rules.MergeForEach.MergeForEachTransformer.addBranchToPlan(LOGenerate,int,OperatorPlan,LOForEach)",1,4,4
"org.apache.pig.newplan.logical.rules.MergeForEach.MergeForEachTransformer.check(OperatorPlan)",20,13,24
"org.apache.pig.newplan.logical.rules.MergeForEach.MergeForEachTransformer.getOperatorToMerge(Operator,OperatorPlan,LOForEach)",1,2,2
"org.apache.pig.newplan.logical.rules.MergeForEach.MergeForEachTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.MergeForEach.MergeForEachTransformer.transform(OperatorPlan)",1,20,20
"org.apache.pig.newplan.logical.rules.MergeForEach.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.MergeForEach.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.OptimizerUtils.findGenerate(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.rules.OptimizerUtils.hasFlatten(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.rules.OptimizerUtils.hasFlatten(LOGenerate)",4,1,4
"org.apache.pig.newplan.logical.rules.OptimizerUtils.planHasNonDeterministicUdf(LogicalExpressionPlan)",4,3,4
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.PartitionFilterOptimizer(String)",1,1,1
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.PartitionFilterPushDownTransformer.check(OperatorPlan)",5,3,9
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.PartitionFilterPushDownTransformer.getMappedKeys(String[])",1,2,2
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.PartitionFilterPushDownTransformer.reportChanges()",1,1,2
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.PartitionFilterPushDownTransformer.setupColNameMaps()",1,4,4
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.PartitionFilterPushDownTransformer.transform(OperatorPlan)",2,3,4
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.PartitionFilterPushDownTransformer.updateMappedColNames(Expression)",1,3,3
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.PartitionFilterOptimizer.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.PredicatePushDownTransformer.check(OperatorPlan)",5,4,9
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.PredicatePushDownTransformer.getMappedKeys(List<String>)",1,2,2
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.PredicatePushDownTransformer.reportChanges()",1,1,2
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.PredicatePushDownTransformer.setupColNameMaps()",1,4,4
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.PredicatePushDownTransformer.transform(OperatorPlan)",2,2,3
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.PredicatePushDownTransformer.updateMappedColNames(Expression)",1,3,3
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.PredicatePushdownOptimizer(String)",1,1,1
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.PredicatePushdownOptimizer.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.PushDownForEachFlatten(String)",1,1,1
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.PushDownForEachFlattenTransformer.check(OperatorPlan)",22,14,26
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.PushDownForEachFlattenTransformer.getNonFlattenFieldUids(LOGenerate)",3,2,3
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.PushDownForEachFlattenTransformer.getProjectExpressions(LogicalExpressionPlan)",1,3,3
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.PushDownForEachFlattenTransformer.isPureProjection(LogicalExpressionPlan)",3,1,3
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.PushDownForEachFlattenTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.PushDownForEachFlattenTransformer.transform(OperatorPlan)",1,19,21
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.PushDownForEachFlatten.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilter(String)",1,1,1
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.check(OperatorPlan)",16,7,32
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.collectUidFromExpPlan(LogicalExpressionPlan)",1,3,3
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.containUDF(LogicalExpressionPlan)",3,2,3
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.findInputsToAddFilter(LogicalExpressionPlan,Operator,List<Operator>)",5,7,13
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.findNonFilterPredecessor(Operator)",4,3,5
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.hasAll(LogicalRelationalOperator,Set<Long>)",4,2,4
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.insertFilter(Operator,Operator,LOFilter)",1,1,1
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.PushUpFilter.PushUpFilterTransformer.transform(OperatorPlan)",2,18,20
"org.apache.pig.newplan.logical.rules.PushUpFilter.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.PushUpFilter.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.SplitFilter.SplitFilter(String)",1,1,1
"org.apache.pig.newplan.logical.rules.SplitFilter.SplitFilterTransformer.check(OperatorPlan)",2,2,3
"org.apache.pig.newplan.logical.rules.SplitFilter.SplitFilterTransformer.fillSubPlan(OperatorPlan,OperatorPlan,Operator)",1,3,3
"org.apache.pig.newplan.logical.rules.SplitFilter.SplitFilterTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.SplitFilter.SplitFilterTransformer.transform(OperatorPlan)",2,4,5
"org.apache.pig.newplan.logical.rules.SplitFilter.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.SplitFilter.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.StreamTypeCastInserter.StreamTypeCastInserter(String)",1,1,1
"org.apache.pig.newplan.logical.rules.StreamTypeCastInserter.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.StreamTypeCastInserter.determineSchema(LogicalRelationalOperator)",1,2,2
"org.apache.pig.newplan.logical.rules.StreamTypeCastInserter.isCastAdjusted(LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.rules.StreamTypeCastInserter.markCastInserted(LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.rules.StreamTypeCastInserter.markCastNoNeed(LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.rules.TypeCastInserter.TypeCastInserter(String)",1,1,1
"org.apache.pig.newplan.logical.rules.TypeCastInserter.TypeCastInserterTransformer.atLeastOneCastNeeded(LogicalSchema,LogicalSchema)",3,4,5
"org.apache.pig.newplan.logical.rules.TypeCastInserter.TypeCastInserterTransformer.check(OperatorPlan)",8,3,9
"org.apache.pig.newplan.logical.rules.TypeCastInserter.TypeCastInserterTransformer.reportChanges()",1,1,1
"org.apache.pig.newplan.logical.rules.TypeCastInserter.TypeCastInserterTransformer.transform(OperatorPlan)",7,12,13
"org.apache.pig.newplan.logical.rules.TypeCastInserter.getNewTransformer()",1,1,1
"org.apache.pig.newplan.logical.rules.WholePlanRule.WholePlanRule(String,boolean)",1,1,1
"org.apache.pig.newplan.logical.rules.WholePlanRule.buildPattern()",1,1,1
"org.apache.pig.newplan.logical.rules.WholePlanRule.match(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.CastLineageSetter.CastLineageSetter(LogicalPlan,CompilationMessageCollector)",1,1,1
"org.apache.pig.newplan.logical.visitor.CastLineageSetter.CastLineageSetterExpVisitor.CastLineageSetterExpVisitor(OperatorPlan,Map<Long, FuncSpec>,CompilationMessageCollector)",1,1,1
"org.apache.pig.newplan.logical.visitor.CastLineageSetter.CastLineageSetterExpVisitor.containsByteArrayOrEmtpyInSchema(LogicalFieldSchema)",6,3,7
"org.apache.pig.newplan.logical.visitor.CastLineageSetter.CastLineageSetterExpVisitor.visit(CastExpression)",1,3,3
"org.apache.pig.newplan.logical.visitor.CastLineageSetter.getVisitor(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ColumnAliasConversionVisitor.ColumnAliasConversionVisitor(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ColumnAliasConversionVisitor.getVisitor(LogicalExpressionPlan)",6,14,15
"org.apache.pig.newplan.logical.visitor.DanglingNestedNodeRemover.DanglingNestedNodeRemover(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.DanglingNestedNodeRemover.visit(LOForEach)",4,5,6
"org.apache.pig.newplan.logical.visitor.DuplicateForEachColumnRewriteVisitor.DuplicateForEachColumnRewriteVisitor(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.DuplicateForEachColumnRewriteVisitor.checkAndAdd(long,List<Long>)",2,1,2
"org.apache.pig.newplan.logical.visitor.DuplicateForEachColumnRewriteVisitor.findAllExpPlansToInsertIdentity(LOForEach)",7,16,16
"org.apache.pig.newplan.logical.visitor.DuplicateForEachColumnRewriteVisitor.visit(LOForEach)",2,2,3
"org.apache.pig.newplan.logical.visitor.ImplicitSplitInsertVisitor.ImplicitSplitInsertVisitor(LogicalPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ImplicitSplitInsertVisitor.execute(LogicalRelationalOperator)",3,3,5
"org.apache.pig.newplan.logical.visitor.ImplicitSplitInsertVisitor.nodeHasTwoOutputs(LogicalRelationalOperator)",3,2,5
"org.apache.pig.newplan.logical.visitor.InputOutputFileValidatorVisitor.InputOutputFileValidatorVisitor(OperatorPlan,PigContext)",1,1,1
"org.apache.pig.newplan.logical.visitor.InputOutputFileValidatorVisitor.visit(LOStore)",3,9,15
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindExpVisitor.LineageFindExpVisitor(LogicalExpressionPlan,Map<Long, FuncSpec>)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindExpVisitor.getNULLConstantInCast(LogicalExpression)",5,4,5
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindExpVisitor.updateUidMap(LogicalExpression,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindExpVisitor.visit(BinCondExpression)",1,3,3
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindExpVisitor.visit(DereferenceExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindExpVisitor.visit(MapLookupExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindExpVisitor.visit(ProjectExpression)",2,5,6
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindExpVisitor.visit(ScalarExpression)",5,4,6
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.LineageFindRelVisitor(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.addUidLoadFuncToMap(long,FuncSpec)",4,2,4
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.getAssociatedLoadFunc(LogicalRelationalOperator)",9,6,9
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.getUid2LoadFuncMap()",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.haveIdenticalCasters(FuncSpec,FuncSpec)",5,5,11
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.instantiateCaster(FuncSpec)",5,6,7
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.mapMatchLoadFuncToUid(LogicalFieldSchema,List<LogicalFieldSchema>)",4,8,13
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.mapRelToPredLoadFunc(LogicalRelationalOperator,Operator)",1,2,2
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.mapToPredLoadFunc(LogicalRelationalOperator)",5,3,6
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.setLoadFuncForUids(LogicalSchema,FuncSpec)",2,2,3
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOCogroup)",4,6,8
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOCross)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LODistinct)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOGenerate)",5,6,8
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOInnerLoad)",3,8,8
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOJoin)",1,2,2
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOLimit)",1,2,2
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOLoad)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LORank)",1,2,2
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOSort)",1,2,2
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOSplit)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOSplitOutput)",4,3,8
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOStream)",1,1,1
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visit(LOUnion)",6,6,8
"org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.visitExpression(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjExpanderForForeach.ProjExpanderForForeach(OperatorPlan,LOGenerate,Map<Integer, LogicalRelationalOperator>,Map<ProjectExpression, LogicalRelationalOperator>,LOForEach,List<LOInnerLoad>)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjExpanderForForeach.expandProjectStar(ProjectExpression)",2,2,3
"org.apache.pig.newplan.logical.visitor.ProjExpanderForForeach.visit(ProjectExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjExpanderForForeach.visit(UserFuncExpression)",5,12,13
"org.apache.pig.newplan.logical.visitor.ProjExpanderForNonForeach.ProjExpanderForNonForeach(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjExpanderForNonForeach.expandProjectStar(ProjectExpression)",2,2,3
"org.apache.pig.newplan.logical.visitor.ProjExpanderForNonForeach.visit(UserFuncExpression)",2,10,11
"org.apache.pig.newplan.logical.visitor.ProjStarInUdfExpander.ProjStarInUdfExpander(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjStarInUdfExpander.getVisitor(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjStarInUdfExpander.visit(LOForEach)",5,7,11
"org.apache.pig.newplan.logical.visitor.ProjStarInUdfExpander.visit(LOGenerate)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.FindProjects.FindProjects(LogicalExpressionPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.FindProjects.getProjs()",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.FindProjects.visit(ProjectExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.ProjectStarExpander(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.createExpPlanWithProj(LogicalRelationalOperator,int,int)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.expandPlan(LogicalExpressionPlan,ProjectExpression,int)",2,3,3
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.expandPlan(LogicalExpressionPlan,int)",2,2,2
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.expandPlans(MultiMap<Integer, LogicalExpressionPlan>)",1,3,3
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.getProjectLonelyStar(LogicalExpressionPlan,Map<Integer, LogicalRelationalOperator>)",6,4,7
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.getProjectStar(LogicalExpressionPlan)",5,4,5
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.visit(LOCogroup)",7,5,7
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.visit(LOCube)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.visit(LOForEach)",5,22,28
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.visit(LOJoin)",1,1,1
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.visit(LORank)",4,7,9
"org.apache.pig.newplan.logical.visitor.ProjectStarExpander.visit(LOSort)",4,7,9
"org.apache.pig.newplan.logical.visitor.ProjectStarExpanderUtil.getProjectStartEndCols(LogicalExpressionPlan,ProjectExpression)",2,6,7
"org.apache.pig.newplan.logical.visitor.ResetProjectionAttachedRelationalOpVisitor.ResetProjectionAttachedRelationalOpVisitor(LogicalExpressionPlan,LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.visitor.ResetProjectionAttachedRelationalOpVisitor.visit(ProjectExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.ScalarVariableValidator.ProjectFinder.ProjectFinder(OperatorPlan,PlanWalker)",1,1,1
"org.apache.pig.newplan.logical.visitor.ScalarVariableValidator.ProjectFinder.found()",1,1,1
"org.apache.pig.newplan.logical.visitor.ScalarVariableValidator.ProjectFinder.visit(ProjectExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.ScalarVariableValidator.ScalarVariableValidator(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.ScalarVariableValidator.visit(LOFilter)",4,3,4
"org.apache.pig.newplan.logical.visitor.ScalarVariableValidator.visit(LOLimit)",3,2,3
"org.apache.pig.newplan.logical.visitor.ScalarVisitor.ScalarVisitor(OperatorPlan,PigContext,String)",1,1,1
"org.apache.pig.newplan.logical.visitor.ScalarVisitor.getVisitor(LogicalExpressionPlan)",5,8,10
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.SchemaAliasVisitor(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.validate(LogicalRelationalOperator)",5,7,7
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOCogroup)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOCross)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LODistinct)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOGenerate)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOInnerLoad)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOJoin)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOLimit)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LONative)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LORank)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOSort)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOSplit)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOSplitOutput)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOStream)",1,1,1
"org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.visit(LOUnion)",1,1,1
"org.apache.pig.newplan.logical.visitor.SortInfoSetter.SortInfoSetter(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.SortInfoSetter.visit(LOStore)",2,8,10
"org.apache.pig.newplan.logical.visitor.StoreAliasSetter.StoreAliasSetter(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.StoreAliasSetter.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.FieldSchemaResetter.FieldSchemaResetter(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.FieldSchemaResetter.execute(LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.ScoreFuncSpecListComparator.compare(Pair<Long, FuncSpec>,Pair<Long, FuncSpec>)",3,1,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.TypeCheckingExpVisitor(OperatorPlan,CompilationMessageCollector,LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.addCastsToCompareBinaryExp(BinaryExpression,boolean)",1,24,35
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.addCastsToNumericBinExpression(BinaryExpression)",5,10,12
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.bestFitMatch(List<FuncSpec>,Schema,SchemaType)",2,2,6
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.bestFitMatchWithByteArrays(List<FuncSpec>,Schema,UserFuncExpression,SchemaType)",8,9,11
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.byteArrayFound(UserFuncExpression,Schema)",4,2,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.collectCastWarning(Operator,byte,byte,CompilationMessageCollector)",2,2,13
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.convertEmptyTupleToBytearrayTuple(FieldSchema)",2,6,6
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.exactMatch(List<FuncSpec>,Schema,UserFuncExpression,SchemaType)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.exactMatchHelper(List<FuncSpec>,Schema,UserFuncExpression,SchemaType,boolean)",3,4,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.exactMatchWithByteArrays(List<FuncSpec>,Schema,UserFuncExpression,SchemaType)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.fitPossible(Schema,Schema,SchemaType)",12,7,17
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.generateIncompatibleTypesMessage(BinaryExpression)",1,5,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.getByteArrayPositions(UserFuncExpression,Schema)",2,3,4
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.insertCast(LogicalExpression,LogicalFieldSchema,LogicalExpression)",1,1,2
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.insertCast(LogicalExpression,byte,LogicalExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.insertCastsForNullToBoolean(BinaryExpression)",1,5,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.insertCastsForUDF(UserFuncExpression,Schema,Schema,SchemaType)",3,4,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.isNotBagWithEmptyTuple(FieldSchema)",1,5,6
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.schemaEqualsForMatching(Schema,Schema,SchemaType,boolean)",13,9,20
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.throwIncompatibleTypeError(BinaryExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(AddExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(AndExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(BinCondExpression)",10,24,25
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(CastExpression)",3,5,7
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(DereferenceExpression)",2,2,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(DivideExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(EqualExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(GreaterThanEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(GreaterThanExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(LessThanEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(LessThanExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(MapLookupExpression)",1,2,2
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(ModExpression)",2,12,18
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(MultiplyExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(NegativeExpression)",3,3,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(NotEqualExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(NotExpression)",2,4,4
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(OrExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(RegexExpression)",2,5,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(SubtractExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visit(UserFuncExpression)",9,15,17
"org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.visitBooleanBinary(BinaryExpression)",2,2,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.TypeCheckingRelVisitor(OperatorPlan,CompilationMessageCollector)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.getAtomicColType(MultiMap<Integer, LogicalExpressionPlan>)",5,2,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.getAtomicJoinColType(LOJoin)",5,2,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.getSchemaFromInnerPlans(MultiMap<Integer, LogicalExpressionPlan>,LogicalRelationalOperator)",6,8,9
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.insertAtomicCastForInnerPlan(LogicalExpressionPlan,LogicalRelationalOperator,byte)",1,3,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.insertCastForEachInBetweenIfNecessary(LogicalRelationalOperator,LogicalRelationalOperator)",4,7,10
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.isCoGroupOnMultiCols(LOCogroup)",2,2,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.isJoinOnMultiCols(LOJoin)",2,2,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.isMultiExprPlanPerInput(MultiMap<Integer, LogicalExpressionPlan>)",2,2,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.throwTypeCheckerException(Operator,String,int,byte,FrontendException)",2,1,2
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOCogroup)",1,15,15
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOCross)",1,2,2
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LODistinct)",1,2,2
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOFilter)",1,4,4
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOForEach)",1,2,2
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOGenerate)",1,3,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOInnerLoad)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOJoin)",1,15,15
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOLimit)",1,6,7
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOLoad)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LORank)",1,4,4
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOSort)",1,4,4
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOSplit)",1,3,3
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOSplitOutput)",1,5,5
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOStore)",1,1,1
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visit(LOUnion)",2,8,9
"org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.visitExpressionPlan(LogicalExpressionPlan,LogicalRelationalOperator)",1,1,1
"org.apache.pig.newplan.logical.visitor.UDFExpFinder.UDFExpFinder(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.UDFExpFinder.getUDFList()",1,1,1
"org.apache.pig.newplan.logical.visitor.UDFExpFinder.visit(UserFuncExpression)",1,1,1
"org.apache.pig.newplan.logical.visitor.UDFFinder.UDFFinder(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.UDFFinder.getUDFList()",1,1,1
"org.apache.pig.newplan.logical.visitor.UDFFinder.visit(LOForEach)",1,1,1
"org.apache.pig.newplan.logical.visitor.UDFFinder.visit(LOGenerate)",1,2,2
"org.apache.pig.newplan.logical.visitor.UnionOnSchemaSetter.UnionOnSchemaSetter(OperatorPlan)",1,1,1
"org.apache.pig.newplan.logical.visitor.UnionOnSchemaSetter.visit(LOUnion)",4,9,12
"org.apache.pig.newplan.optimizer.PlanOptimizer.PlanOptimizer(OperatorPlan,List<Set<Rule>>,int)",1,1,2
"org.apache.pig.newplan.optimizer.PlanOptimizer.addPlanTransformListener(PlanTransformListener)",1,1,1
"org.apache.pig.newplan.optimizer.PlanOptimizer.optimize()",6,12,13
"org.apache.pig.newplan.optimizer.Rule.PatternMatchOperatorPlan.PatternMatchOperatorPlan(OperatorPlan)",1,1,1
"org.apache.pig.newplan.optimizer.Rule.PatternMatchOperatorPlan.check(List<Operator>)",5,3,6
"org.apache.pig.newplan.optimizer.Rule.PatternMatchOperatorPlan.check(Operator,Operator,Deque<Operator>)",11,11,16
"org.apache.pig.newplan.optimizer.Rule.Rule(String,OperatorPlan)",1,1,1
"org.apache.pig.newplan.optimizer.Rule.Rule(String,boolean)",1,1,1
"org.apache.pig.newplan.optimizer.Rule.getName()",1,1,1
"org.apache.pig.newplan.optimizer.Rule.getPattern()",1,1,1
"org.apache.pig.newplan.optimizer.Rule.isMandatory()",1,1,1
"org.apache.pig.newplan.optimizer.Rule.isSkipListener()",1,1,1
"org.apache.pig.newplan.optimizer.Rule.match(Operator,Operator)",1,2,2
"org.apache.pig.newplan.optimizer.Rule.match(OperatorPlan)",9,12,15
"org.apache.pig.newplan.optimizer.Rule.setSkipListener(boolean)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.DryRunGruntParser(Reader,String,PigContext)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.getResult()",1,1,1
"org.apache.pig.parser.DryRunGruntParser.parseStopOnError()",2,2,3
"org.apache.pig.parser.DryRunGruntParser.printAliases()",1,1,1
"org.apache.pig.parser.DryRunGruntParser.printClear()",1,1,1
"org.apache.pig.parser.DryRunGruntParser.printHelp()",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processCD(String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processCat(String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processCopy(String,String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processCopyFromLocal(String,String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processCopyToLocal(String,String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processDeclare(String,String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processDefault(String,String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processDescribe(String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processDump(String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processExplain(String,String,boolean,String,String,List<String>,List<String>)",1,13,13
"org.apache.pig.parser.DryRunGruntParser.processFsCommand(String[])",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processHistory(boolean)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processIllustrate(String,String,String,List<String>,List<String>)",1,8,8
"org.apache.pig.parser.DryRunGruntParser.processKill(String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processLS(String)",1,2,2
"org.apache.pig.parser.DryRunGruntParser.processMkdir(String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processMove(String,String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processPWD()",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processPig(String)",1,10,13
"org.apache.pig.parser.DryRunGruntParser.processRegister(String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processRegister(String,String,String)",1,3,3
"org.apache.pig.parser.DryRunGruntParser.processRemove(String,String)",1,3,3
"org.apache.pig.parser.DryRunGruntParser.processSQLCommand(String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processScript(String,boolean,List<String>,List<String>)",1,6,6
"org.apache.pig.parser.DryRunGruntParser.processSet()",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processSet(String,String)",1,1,1
"org.apache.pig.parser.DryRunGruntParser.processShCommand(String[])",1,1,1
"org.apache.pig.parser.DryRunGruntParser.prompt()",1,1,1
"org.apache.pig.parser.DryRunGruntParser.quit()",1,1,1
"org.apache.pig.parser.DuplicatedSchemaAliasException.DuplicatedSchemaAliasException(IntStream,SourceLocation,String)",1,1,1
"org.apache.pig.parser.DuplicatedSchemaAliasException.getAlias()",1,1,1
"org.apache.pig.parser.DuplicatedSchemaAliasException.toString()",1,1,1
"org.apache.pig.parser.FunctionType.tryCasting(Class<?>,byte)",3,2,9
"org.apache.pig.parser.InvalidCommandException.InvalidCommandException(IntStream,SourceLocation,String)",1,1,1
"org.apache.pig.parser.InvalidCommandException.getCmd()",1,1,1
"org.apache.pig.parser.InvalidCommandException.toString()",1,1,1
"org.apache.pig.parser.InvalidPathException.InvalidPathException(IntStream,SourceLocation,MalformedURLException)",1,1,1
"org.apache.pig.parser.InvalidPathException.getEx()",1,1,1
"org.apache.pig.parser.InvalidPathException.toString()",1,1,1
"org.apache.pig.parser.InvalidScalarProjectionException.InvalidScalarProjectionException(IntStream,SourceLocation,ScalarExpression)",1,1,1
"org.apache.pig.parser.InvalidScalarProjectionException.InvalidScalarProjectionException(IntStream,SourceLocation,ScalarExpression,String)",1,1,1
"org.apache.pig.parser.InvalidScalarProjectionException.toString()",1,1,2
"org.apache.pig.parser.LogicalPlanBuilder.LogicalPlanBuilder(IntStream)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.LogicalPlanBuilder(PigContext,String,Map<String, String>,IntStream)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildAssertOp(SourceLocation,LOFilter,String,String,LogicalExpression,String,LogicalExpressionPlan)",1,1,3
"org.apache.pig.parser.LogicalPlanBuilder.buildCommand(SourceLocation,String)",1,1,2
"org.apache.pig.parser.LogicalPlanBuilder.buildCommand(SourceLocation,String,List<String>,List<String>,List<HandleSpec>,List<HandleSpec>,String,Integer)",1,12,13
"org.apache.pig.parser.LogicalPlanBuilder.buildCrossOp(SourceLocation,String,List<String>,String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildCubeOp(SourceLocation,LOCube,String,String,List<String>,MultiMap<Integer, LogicalExpressionPlan>)",1,1,3
"org.apache.pig.parser.LogicalPlanBuilder.buildDistinctOp(SourceLocation,String,String,String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildFilterOp(SourceLocation,LOFilter,String,String,LogicalExpressionPlan)",1,1,2
"org.apache.pig.parser.LogicalPlanBuilder.buildForeachOp(SourceLocation,LOForEach,String,String,LogicalPlan)",1,1,2
"org.apache.pig.parser.LogicalPlanBuilder.buildFuncSpec(SourceLocation,String,List<String>,byte)",1,2,2
"org.apache.pig.parser.LogicalPlanBuilder.buildGenerateOp(SourceLocation,LOForEach,LOGenerate,List<LogicalExpressionPlan>,List<Boolean>,List<LogicalSchema>)",2,6,8
"org.apache.pig.parser.LogicalPlanBuilder.buildGroupOp(SourceLocation,LOCogroup,String,List<String>,MultiMap<Integer, LogicalExpressionPlan>,GROUPTYPE,List<Boolean>,String)",6,5,8
"org.apache.pig.parser.LogicalPlanBuilder.buildInvokerUDF(SourceLocation,LogicalExpressionPlan,String,String,boolean,List<LogicalExpression>)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildJoinOp(SourceLocation,LOJoin,String,List<String>,MultiMap<Integer, LogicalExpressionPlan>,JOINTYPE,List<Boolean>,String)",7,8,15
"org.apache.pig.parser.LogicalPlanBuilder.buildLimitOp(SourceLocation,LOLimit,String,String,LogicalExpressionPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildLimitOp(SourceLocation,String,String,long)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildLoadOp(SourceLocation,String,String,FuncSpec,LogicalSchema)",1,8,9
"org.apache.pig.parser.LogicalPlanBuilder.buildNativeOp(SourceLocation,String,String,List<String>,String,String,IntStream)",1,2,4
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedCrossOp(SourceLocation,LogicalPlan,String,List<Operator>)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedDistinctOp(SourceLocation,LogicalPlan,String,Operator)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedFilterOp(SourceLocation,LOFilter,LogicalPlan,String,Operator,LogicalExpressionPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedForeachOp(SourceLocation,LOForEach,LogicalPlan,String,Operator,LogicalPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedLimitOp(SourceLocation,LOLimit,LogicalPlan,String,Operator,LogicalExpressionPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedLimitOp(SourceLocation,LogicalPlan,String,Operator,long)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedOp(SourceLocation,LogicalPlan,LogicalRelationalOperator,String,List<Operator>)",1,2,2
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedOp(SourceLocation,LogicalPlan,LogicalRelationalOperator,String,Operator)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedOperatorInput(SourceLocation,LogicalPlan,LOForEach,Map<String, Operator>,LogicalExpression)",2,4,5
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedProjectOp(SourceLocation,LogicalPlan,LOForEach,Map<String, Operator>,String,ProjectExpression,List<LogicalExpressionPlan>)",1,6,6
"org.apache.pig.parser.LogicalPlanBuilder.buildNestedSortOp(SourceLocation,LOSort,LogicalPlan,String,Operator,List<LogicalExpressionPlan>,List<Boolean>,FuncSpec)",1,3,3
"org.apache.pig.parser.LogicalPlanBuilder.buildOp(SourceLocation,LogicalRelationalOperator,String,List<String>,String)",3,2,3
"org.apache.pig.parser.LogicalPlanBuilder.buildOp(SourceLocation,LogicalRelationalOperator,String,String,String)",1,2,2
"org.apache.pig.parser.LogicalPlanBuilder.buildProjectExpr(SourceLocation,LogicalExpressionPlan,LogicalRelationalOperator,Map<String, Operator>,Map<String, LogicalExpressionPlan>,String,int)",3,6,9
"org.apache.pig.parser.LogicalPlanBuilder.buildProjectExpr(SourceLocation,LogicalExpressionPlan,LogicalRelationalOperator,int,String,int)",1,1,2
"org.apache.pig.parser.LogicalPlanBuilder.buildRangeProjectExpr(SourceLocation,LogicalExpressionPlan,LogicalRelationalOperator,int,LogicalExpression,LogicalExpression)",6,7,12
"org.apache.pig.parser.LogicalPlanBuilder.buildRankOp(SourceLocation,LORank,String,String,List<LogicalExpressionPlan>,List<Boolean>)",1,3,4
"org.apache.pig.parser.LogicalPlanBuilder.buildSampleOp(SourceLocation,LOFilter,String,String,LogicalExpressionPlan,LogicalExpression)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildSampleOp(SourceLocation,String,String,double,SourceLocation)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildSortOp(SourceLocation,LOSort,String,String,List<LogicalExpressionPlan>,List<Boolean>,FuncSpec)",1,3,4
"org.apache.pig.parser.LogicalPlanBuilder.buildSplitOp(SourceLocation,String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildSplitOtherwiseOp(SourceLocation,LOSplitOutput,String,String)",4,5,8
"org.apache.pig.parser.LogicalPlanBuilder.buildSplitOutputOp(SourceLocation,LOSplitOutput,String,String,LogicalExpressionPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildStoreOp(SourceLocation,String,String,String,FuncSpec)",1,4,5
"org.apache.pig.parser.LogicalPlanBuilder.buildStreamOp(SourceLocation,String,String,StreamingCommand,LogicalSchema,IntStream)",1,1,2
"org.apache.pig.parser.LogicalPlanBuilder.buildTuple(List<Object>)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.buildUDF(SourceLocation,LogicalExpressionPlan,String,List<LogicalExpression>)",1,2,3
"org.apache.pig.parser.LogicalPlanBuilder.buildUnionOp(SourceLocation,String,List<String>,boolean)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.checkDuplicateAliases(List<String>,SourceLocation,String)",4,3,4
"org.apache.pig.parser.LogicalPlanBuilder.checkDuplicateProject(List<LogicalExpressionPlan>)",4,6,6
"org.apache.pig.parser.LogicalPlanBuilder.checkRangeProjectExpr(SourceLocation,LogicalExpression)",2,1,2
"org.apache.pig.parser.LogicalPlanBuilder.combineCubeOperations(ArrayList<String>,MultiMap<Integer, LogicalExpressionPlan>)",1,8,8
"org.apache.pig.parser.LogicalPlanBuilder.convertCubeToFGPlan(SourceLocation,LOCube,String,List<String>,MultiMap<Integer, LogicalExpressionPlan>)",4,19,22
"org.apache.pig.parser.LogicalPlanBuilder.createCubeOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createDataBag()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createFilterOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createForeachOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createGenerateOp(LogicalPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createGroupOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createInnerLoad(SourceLocation,LogicalPlan,LOForEach,String)",1,1,2
"org.apache.pig.parser.LogicalPlanBuilder.createJoinOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createLimitOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createNestedFilterOp(LogicalPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createNestedForeachOp(LogicalPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createNestedLimitOp(LogicalPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createNestedSortOp(LogicalPlan)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createRankOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createSampleOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createSortOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.createSplitOutputOp()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.defineCommand(String,StreamingCommand)",1,2,2
"org.apache.pig.parser.LogicalPlanBuilder.defineFunction(String,FuncSpec)",1,1,2
"org.apache.pig.parser.LogicalPlanBuilder.getLastRel()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.getLastRel(SourceLocation)",2,1,2
"org.apache.pig.parser.LogicalPlanBuilder.getNextId()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.getNextId(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.getOperators()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.getPlan()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.getProjectExpList(List<LogicalExpressionPlan>,LogicalRelationalOperator)",3,3,4
"org.apache.pig.parser.LogicalPlanBuilder.getUserDefinedSchema(List<LogicalExpressionPlan>)",1,6,6
"org.apache.pig.parser.LogicalPlanBuilder.injectForeachOperator(SourceLocation,LOCube,LOForEach)",1,5,5
"org.apache.pig.parser.LogicalPlanBuilder.lookupCommand(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.lookupFunction(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.lookupOperator(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.mergeAndMarkForDelete(ArrayList<String>,MultiMap<Integer, LogicalExpressionPlan>,int,int)",1,2,2
"org.apache.pig.parser.LogicalPlanBuilder.newOperatorKey()",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.newOperatorKey(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.parseBigDecimal(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.parseBigInteger(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.parseGroupType(String,SourceLocation)",4,3,4
"org.apache.pig.parser.LogicalPlanBuilder.parseJoinType(String,SourceLocation)",6,7,8
"org.apache.pig.parser.LogicalPlanBuilder.parseLong(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.performDeletion(MultiMap<Integer, LogicalExpressionPlan>,ArrayList<String>)",1,5,5
"org.apache.pig.parser.LogicalPlanBuilder.processExpressionPlan(LOForEach,LogicalPlan,LogicalExpressionPlan,ArrayList<Operator>)",1,7,7
"org.apache.pig.parser.LogicalPlanBuilder.putOperator(String,Operator)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.setAlias(LogicalRelationalOperator,String)",1,2,2
"org.apache.pig.parser.LogicalPlanBuilder.setBytearrayForNULLType(LogicalSchema)",1,3,4
"org.apache.pig.parser.LogicalPlanBuilder.setParallel(LogicalRelationalOperator,Integer)",1,2,2
"org.apache.pig.parser.LogicalPlanBuilder.setPartitioner(LogicalRelationalOperator,String)",1,2,2
"org.apache.pig.parser.LogicalPlanBuilder.setupInnerLoadAndProj(LOInnerLoad,ProjectExpression,LogicalPlan,ArrayList<Operator>)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.typeToClass(Class<?>)",9,1,9
"org.apache.pig.parser.LogicalPlanBuilder.undollar(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.unquote(String)",1,1,1
"org.apache.pig.parser.LogicalPlanBuilder.validateFuncSpec(SourceLocation,FuncSpec,byte)",2,2,3
"org.apache.pig.parser.NonProjectExpressionException.NonProjectExpressionException(IntStream,SourceLocation,LogicalExpression)",1,1,1
"org.apache.pig.parser.NonProjectExpressionException.getExpression()",1,1,1
"org.apache.pig.parser.NonProjectExpressionException.toString()",1,1,1
"org.apache.pig.parser.ParserException.ParserException(RecognitionException)",1,1,1
"org.apache.pig.parser.ParserException.ParserException(String)",1,1,1
"org.apache.pig.parser.ParserException.ParserException(String,SourceLocation)",1,1,1
"org.apache.pig.parser.ParserException.ParserException(String,Throwable)",1,1,1
"org.apache.pig.parser.ParserException.toString()",1,1,1
"org.apache.pig.parser.ParserValidationException.ParserValidationException(IntStream,SourceLocation,Exception)",1,1,1
"org.apache.pig.parser.ParserValidationException.ParserValidationException(IntStream,SourceLocation,String)",1,1,1
"org.apache.pig.parser.ParserValidationException.getCause()",1,1,1
"org.apache.pig.parser.ParserValidationException.toString()",1,2,2
"org.apache.pig.parser.PigMacro.PigMacro(String,String,List<String>,List<String>,String,Map<String, PigMacro>)",1,1,3
"org.apache.pig.parser.PigMacro.getErrorMessage(String,int,String,String)",1,3,3
"org.apache.pig.parser.PigMacro.getName()",1,1,1
"org.apache.pig.parser.PigMacro.getStack()",1,1,1
"org.apache.pig.parser.PigMacro.getStartLine()",1,1,1
"org.apache.pig.parser.PigMacro.inline(String[],String[],CommonTree,String)",1,4,4
"org.apache.pig.parser.PigMacro.isMultiValueReturn(StreamTokenizer,List<String>,boolean)",3,7,9
"org.apache.pig.parser.PigMacro.macroInline(CommonTree,List<PigMacro>,Set<String>,PigContext)",5,6,7
"org.apache.pig.parser.PigMacro.maskAlias(String,Set<String>,CommonTree,String)",2,7,8
"org.apache.pig.parser.PigMacro.matchChar(StreamTokenizer,int,boolean)",2,3,4
"org.apache.pig.parser.PigMacro.matchDollarAlias(StreamTokenizer,boolean)",2,5,6
"org.apache.pig.parser.PigMacro.matchWord(StreamTokenizer,String,boolean)",2,4,5
"org.apache.pig.parser.PigMacro.setInvocationStack(Tree,List<InvocationPoint>)",1,2,2
"org.apache.pig.parser.PigMacro.setPigContext(PigContext)",1,1,1
"org.apache.pig.parser.PigMacro.setStack(Set<String>)",1,1,1
"org.apache.pig.parser.PigMacro.setStartLine(int)",1,1,1
"org.apache.pig.parser.PigMacro.skipSingleLineComment(StreamTokenizer)",3,2,4
"org.apache.pig.parser.PigMacro.substituteParams(String[],String[],int,String)",7,18,22
"org.apache.pig.parser.PigMacro.traverseMacro(Tree,List<CommonTree>,String)",1,3,3
"org.apache.pig.parser.PigMacro.validate()",4,15,17
"org.apache.pig.parser.PigParserNode.InvocationPoint.InvocationPoint(int,String,String)",1,1,1
"org.apache.pig.parser.PigParserNode.InvocationPoint.getFile()",1,1,1
"org.apache.pig.parser.PigParserNode.InvocationPoint.getLine()",1,1,1
"org.apache.pig.parser.PigParserNode.InvocationPoint.getMacro()",1,1,1
"org.apache.pig.parser.PigParserNode.PigParserNode(PigParserNode)",1,1,1
"org.apache.pig.parser.PigParserNode.PigParserNode(Token,String,Token)",1,1,1
"org.apache.pig.parser.PigParserNode.PigParserNode(Token,String,int)",1,2,3
"org.apache.pig.parser.PigParserNode.dupNode()",1,1,1
"org.apache.pig.parser.PigParserNode.getFileName()",1,1,1
"org.apache.pig.parser.PigParserNode.getInvocationStack()",1,1,1
"org.apache.pig.parser.PigParserNode.getNextInvocationPoint()",2,2,3
"org.apache.pig.parser.PigParserNode.getStartLine()",1,1,1
"org.apache.pig.parser.PigParserNode.setInvocationStack(List<InvocationPoint>)",1,1,1
"org.apache.pig.parser.PigParserNodeAdaptor.PigParserNodeAdaptor(String,int)",1,1,1
"org.apache.pig.parser.PigParserNodeAdaptor.create(Token)",1,1,1
"org.apache.pig.parser.PigRecognitionException.PigRecognitionException(IntStream,SourceLocation)",1,1,1
"org.apache.pig.parser.PigRecognitionException.msgHeader()",1,1,1
"org.apache.pig.parser.PlanGenerationFailureException.PlanGenerationFailureException(IntStream,SourceLocation,Exception)",1,1,1
"org.apache.pig.parser.PlanGenerationFailureException.getCause()",1,1,1
"org.apache.pig.parser.PlanGenerationFailureException.getEx()",1,1,1
"org.apache.pig.parser.PlanGenerationFailureException.toString()",1,1,1
"org.apache.pig.parser.QueryParserDriver.QueryParserDriver(PigContext,String,Map<String, String>)",1,1,1
"org.apache.pig.parser.QueryParserDriver.applyRegisters(Tree)",5,7,8
"org.apache.pig.parser.QueryParserDriver.checkError(BaseRecognizer)",2,1,2
"org.apache.pig.parser.QueryParserDriver.expandImport(Tree)",2,3,4
"org.apache.pig.parser.QueryParserDriver.expandMacro(Tree)",1,2,3
"org.apache.pig.parser.QueryParserDriver.getErrorMessage(String,CommonTree,String,String)",1,6,6
"org.apache.pig.parser.QueryParserDriver.getLastRel()",1,1,1
"org.apache.pig.parser.QueryParserDriver.getMacroFile(String)",3,6,7
"org.apache.pig.parser.QueryParserDriver.getOperators()",1,1,1
"org.apache.pig.parser.QueryParserDriver.getPigServer()",1,1,2
"org.apache.pig.parser.QueryParserDriver.inlineMacro(List<CommonTree>,List<PigMacro>)",1,3,3
"org.apache.pig.parser.QueryParserDriver.macroImport(CommonTree)",3,8,8
"org.apache.pig.parser.QueryParserDriver.makeMacroDef(CommonTree,Map<String, PigMacro>)",2,8,8
"org.apache.pig.parser.QueryParserDriver.parse(CommonTokenStream)",1,3,3
"org.apache.pig.parser.QueryParserDriver.parse(String)",1,2,3
"org.apache.pig.parser.QueryParserDriver.parseConstant(CommonTokenStream)",1,3,3
"org.apache.pig.parser.QueryParserDriver.parseConstant(String)",1,2,3
"org.apache.pig.parser.QueryParserDriver.parseSchema(CommonTokenStream)",1,3,3
"org.apache.pig.parser.QueryParserDriver.parseSchema(String)",1,2,3
"org.apache.pig.parser.QueryParserDriver.tokenize(String,String)",1,2,2
"org.apache.pig.parser.QueryParserDriver.traverse(Tree,List<CommonTree>,List<CommonTree>)",1,4,4
"org.apache.pig.parser.QueryParserDriver.traverseImport(Tree,List<CommonTree>)",1,3,3
"org.apache.pig.parser.QueryParserDriver.traverseInline(Tree,List<CommonTree>)",1,3,3
"org.apache.pig.parser.QueryParserDriver.validateAst(Tree)",1,1,1
"org.apache.pig.parser.QueryParserFileStream.LA(int)",1,1,1
"org.apache.pig.parser.QueryParserFileStream.QueryParserFileStream(String)",1,1,1
"org.apache.pig.parser.QueryParserFileStream.QueryParserFileStream(String,String)",1,1,1
"org.apache.pig.parser.QueryParserStreamUtil.LA(int,int,int,char[])",3,1,4
"org.apache.pig.parser.QueryParserStringStream.LA(int)",1,1,1
"org.apache.pig.parser.QueryParserStringStream.QueryParserStringStream(String,String)",1,1,1
"org.apache.pig.parser.QueryParserUtils.attachStorePlan(String,LogicalPlan,String,String,Operator,String,PigContext)",1,3,3
"org.apache.pig.parser.QueryParserUtils.constructFileNameSignature(String,FuncSpec)",1,1,1
"org.apache.pig.parser.QueryParserUtils.createParser(CommonTokenStream)",1,1,1
"org.apache.pig.parser.QueryParserUtils.createParser(CommonTokenStream,int)",1,1,1
"org.apache.pig.parser.QueryParserUtils.generateErrorHeader(RecognitionException,String)",1,1,1
"org.apache.pig.parser.QueryParserUtils.getCurrentDir(PigContext)",1,1,1
"org.apache.pig.parser.QueryParserUtils.getFileFromImportSearchPath(String)",6,8,10
"org.apache.pig.parser.QueryParserUtils.getRemoteHosts(String,URI,Configuration)",7,12,16
"org.apache.pig.parser.QueryParserUtils.removeQuotes(String)",2,3,3
"org.apache.pig.parser.QueryParserUtils.replaceNodeWithNodeList(Tree,CommonTree,String)",1,5,5
"org.apache.pig.parser.QueryParserUtils.setHdfsServers(String,PigContext)",1,6,9
"org.apache.pig.parser.SourceLocation.SourceLocation()",1,1,1
"org.apache.pig.parser.SourceLocation.SourceLocation(PigParserNode)",1,1,1
"org.apache.pig.parser.SourceLocation.SourceLocation(SourceLocation)",1,1,1
"org.apache.pig.parser.SourceLocation.SourceLocation(String,int,int)",1,1,1
"org.apache.pig.parser.SourceLocation.file()",1,1,1
"org.apache.pig.parser.SourceLocation.line()",1,1,1
"org.apache.pig.parser.SourceLocation.node()",1,1,1
"org.apache.pig.parser.SourceLocation.offset()",1,1,1
"org.apache.pig.parser.SourceLocation.toString()",2,5,6
"org.apache.pig.parser.StreamingCommandUtils.StreamingCommandUtils(PigContext)",1,1,1
"org.apache.pig.parser.StreamingCommandUtils.Which.load(String)",1,2,5
"org.apache.pig.parser.StreamingCommandUtils.checkAndShip(StreamingCommand,String)",3,4,5
"org.apache.pig.parser.StreamingCommandUtils.checkAutoShipSpecs(StreamingCommand,String[])",4,6,6
"org.apache.pig.parser.StreamingCommandUtils.inSkipPaths(String)",3,2,3
"org.apache.pig.parser.StreamingCommandUtils.isQuotedString(String)",1,2,2
"org.apache.pig.parser.StreamingCommandUtils.splitArgs(String)",8,7,11
"org.apache.pig.parser.UndefinedAliasException.UndefinedAliasException(IntStream,SourceLocation,String)",1,1,1
"org.apache.pig.parser.UndefinedAliasException.getAlias()",1,1,1
"org.apache.pig.parser.UndefinedAliasException.toString()",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.AugmentBaseDataVisitor(OperatorPlan,Map<Operator, PhysicalOperator>,Map<LOLoad, DataBag>,Map<Operator, DataBag>)",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.BackPropConstraint(Tuple,List<Integer>,LogicalSchema,boolean)",4,4,6
"org.apache.pig.pen.AugmentBaseDataVisitor.GenerateMatchingTuple(LogicalSchema,LogicalExpressionPlan,boolean)",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.GenerateMatchingTuple(Tuple,LogicalExpressionPlan,boolean)",1,2,2
"org.apache.pig.pen.AugmentBaseDataVisitor.GenerateMatchingTupleHelper(Tuple,AndExpression,boolean)",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.GenerateMatchingTupleHelper(Tuple,BinaryExpression,boolean)",9,32,48
"org.apache.pig.pen.AugmentBaseDataVisitor.GenerateMatchingTupleHelper(Tuple,IsNullExpression,boolean)",1,2,2
"org.apache.pig.pen.AugmentBaseDataVisitor.GenerateMatchingTupleHelper(Tuple,NotExpression,boolean)",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.GenerateMatchingTupleHelper(Tuple,Operator,boolean)",5,4,5
"org.apache.pig.pen.AugmentBaseDataVisitor.GenerateMatchingTupleHelper(Tuple,OrExpression,boolean)",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.GetGroupByInput(Object,List<Integer>,int)",3,3,4
"org.apache.pig.pen.AugmentBaseDataVisitor.GetJoinInput(Tuple,List<Integer>,List<Integer>,int)",3,3,4
"org.apache.pig.pen.AugmentBaseDataVisitor.GetJoinInput(Tuple,List<Integer>,int)",3,3,4
"org.apache.pig.pen.AugmentBaseDataVisitor.GetLargerValue(Object)",14,12,18
"org.apache.pig.pen.AugmentBaseDataVisitor.GetSmallerValue(Object)",15,14,20
"org.apache.pig.pen.AugmentBaseDataVisitor.GetUnequalValue(Object)",3,2,5
"org.apache.pig.pen.AugmentBaseDataVisitor.generateData(byte,String)",14,9,14
"org.apache.pig.pen.AugmentBaseDataVisitor.getNewBaseData()",1,11,12
"org.apache.pig.pen.AugmentBaseDataVisitor.getOriLimitMap()",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.inInput(Tuple,DataBag,LogicalSchema)",5,3,5
"org.apache.pig.pen.AugmentBaseDataVisitor.setLimit()",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOCogroup)",6,21,22
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOCross)",1,1,1
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LODistinct)",4,12,14
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOFilter)",2,12,13
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOForEach)",5,8,10
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOJoin)",6,21,22
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOLimit)",2,8,10
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOLoad)",5,15,19
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOSort)",2,3,4
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOSplit)",2,2,3
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOStore)",2,3,4
"org.apache.pig.pen.AugmentBaseDataVisitor.visit(LOUnion)",3,7,8
"org.apache.pig.pen.EquivalenceClasses.getEqClasses(PhysicalPlan,Operator,LogicalPlan,Map<Operator, PhysicalOperator>,Map<LogicalRelationalOperator, Collection<IdentityHashSet<Tuple>>>,HashMap<PhysicalOperator, Collection<IdentityHashSet<Tuple>>>,Map<Operator, DataBag>,Map<LOForEach, Map<LogicalRelationalOperator, PhysicalOperator>>,HashSet<Operator>)",5,14,15
"org.apache.pig.pen.EquivalenceClasses.getLoToEqClassMap(PhysicalPlan,LogicalPlan,Map<Operator, PhysicalOperator>,Map<Operator, DataBag>,Map<LOForEach, Map<LogicalRelationalOperator, PhysicalOperator>>,HashMap<PhysicalOperator, Collection<IdentityHashSet<Tuple>>>)",1,2,2
"org.apache.pig.pen.ExampleGenerator.ExampleGenerator(LogicalPlan,PigContext)",1,2,2
"org.apache.pig.pen.ExampleGenerator.compilePlan(LogicalPlan)",1,1,1
"org.apache.pig.pen.ExampleGenerator.getData()",1,1,1
"org.apache.pig.pen.ExampleGenerator.getData(Map<LOLoad, DataBag>)",1,1,1
"org.apache.pig.pen.ExampleGenerator.getData(PhysicalPlan)",1,8,8
"org.apache.pig.pen.ExampleGenerator.getEqClasses()",1,3,3
"org.apache.pig.pen.ExampleGenerator.getExamples()",3,7,11
"org.apache.pig.pen.ExampleGenerator.getLineage()",1,1,1
"org.apache.pig.pen.ExampleGenerator.getLoToEqClassMap()",8,8,9
"org.apache.pig.pen.ExampleGenerator.getLogToDataMap(Map<PhysicalOperator, DataBag>)",1,5,5
"org.apache.pig.pen.ExampleGenerator.getLogToPhyMap()",1,1,1
"org.apache.pig.pen.ExampleGenerator.phyToMRTransform(PhysicalPlan,Map<PhysicalOperator, DataBag>)",1,3,3
"org.apache.pig.pen.ExampleGenerator.readBaseData(List<Operator>)",3,4,5
"org.apache.pig.pen.ExampleGenerator.setLoadDataMap()",1,5,5
"org.apache.pig.pen.ExampleGenerator.setMaxRecords(int)",1,1,1
"org.apache.pig.pen.FakeRawKeyValueIterator.FakeRawKeyValueIterator(boolean)",1,1,1
"org.apache.pig.pen.FakeRawKeyValueIterator.close()",1,1,1
"org.apache.pig.pen.FakeRawKeyValueIterator.getKey()",1,1,1
"org.apache.pig.pen.FakeRawKeyValueIterator.getProgress()",1,1,1
"org.apache.pig.pen.FakeRawKeyValueIterator.getValue()",1,1,1
"org.apache.pig.pen.FakeRawKeyValueIterator.next()",1,1,1
"org.apache.pig.pen.Illustrator.Illustrator(LineageTracer,LinkedList<IdentityHashSet<Tuple>>,IllustratorAttacher,PigContext)",1,1,1
"org.apache.pig.pen.Illustrator.Illustrator(LineageTracer,LinkedList<IdentityHashSet<Tuple>>,int,IllustratorAttacher,LogicalSchema,PigContext)",1,1,1
"org.apache.pig.pen.Illustrator.addData(Tuple)",1,1,1
"org.apache.pig.pen.Illustrator.addInputs(IdentityHashSet<Tuple>)",1,1,2
"org.apache.pig.pen.Illustrator.ceilingCheck()",2,1,3
"org.apache.pig.pen.Illustrator.getData()",1,1,1
"org.apache.pig.pen.Illustrator.getEqClassesShared()",1,1,1
"org.apache.pig.pen.Illustrator.getEquivalenceClasses()",1,1,1
"org.apache.pig.pen.Illustrator.getInputs()",1,1,1
"org.apache.pig.pen.Illustrator.getLineage()",1,1,1
"org.apache.pig.pen.Illustrator.getOriginalLimit()",1,1,1
"org.apache.pig.pen.Illustrator.getSchema()",1,1,1
"org.apache.pig.pen.Illustrator.getSubExpResult()",1,1,1
"org.apache.pig.pen.Illustrator.getSubExpResults()",1,1,1
"org.apache.pig.pen.Illustrator.setEqClassesShared()",1,1,1
"org.apache.pig.pen.Illustrator.setEquivalenceClasses(LinkedList<IdentityHashSet<Tuple>>,PhysicalOperator)",1,1,1
"org.apache.pig.pen.Illustrator.setOriginalLimit(long)",1,1,1
"org.apache.pig.pen.Illustrator.setSubExpResult(boolean)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.IllustratorAttacher(PhysicalPlan,LineageTracer,int,Map<POLoad, LogicalSchema>,PigContext)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.getDataMap()",1,1,1
"org.apache.pig.pen.IllustratorAttacher.innerPlanAttach(PhysicalOperator,PhysicalPlan)",1,3,4
"org.apache.pig.pen.IllustratorAttacher.revisit(PhysicalPlan)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.setIllustrator(PhysicalOperator)",2,2,3
"org.apache.pig.pen.IllustratorAttacher.setIllustrator(PhysicalOperator,LinkedList<IdentityHashSet<Tuple>>)",2,3,4
"org.apache.pig.pen.IllustratorAttacher.setIllustrator(PhysicalOperator,int)",2,3,4
"org.apache.pig.pen.IllustratorAttacher.visitAnd(POAnd)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitBinCond(POBinCond)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitCast(POCast)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitComparisonFunc(POUserComparisonFunc)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitCounter(POCounter)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitDemux(PODemux)",2,3,4
"org.apache.pig.pen.IllustratorAttacher.visitDistinct(PODistinct)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitEqualTo(EqualToExpr)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitFilter(POFilter)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitGTOrEqual(GTOrEqualToExpr)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitGreaterThan(GreaterThanExpr)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitIsNull(POIsNull)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitLTOrEqual(LTOrEqualToExpr)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitLessThan(LessThanExpr)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitLimit(POLimit)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitLoad(POLoad)",2,1,2
"org.apache.pig.pen.IllustratorAttacher.visitLocalRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitMapLookUp(POMapLookUp)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitNegative(PONegative)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitNot(PONot)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitNotEqualTo(NotEqualToExpr)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitOr(POOr)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitPOForEach(POForEach)",2,7,8
"org.apache.pig.pen.IllustratorAttacher.visitPOOptimizedForEach(POOptimizedForEach)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitPackage(POPackage)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitProject(POProject)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitRank(PORank)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitRegexp(PORegexp)",1,2,3
"org.apache.pig.pen.IllustratorAttacher.visitSort(POSort)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitSplit(POSplit)",2,3,4
"org.apache.pig.pen.IllustratorAttacher.visitStore(POStore)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitStream(POStream)",1,1,1
"org.apache.pig.pen.IllustratorAttacher.visitUnion(POUnion)",2,2,3
"org.apache.pig.pen.IllustratorAttacher.visitUserFunc(POUserFunc)",1,1,1
"org.apache.pig.pen.LineageTrimmingVisitor.LineageTrimmingVisitor(LogicalPlan,Map<LOLoad, DataBag>,ExampleGenerator,Map<Operator, PhysicalOperator>,PhysicalPlan,PigContext)",1,1,1
"org.apache.pig.pen.LineageTrimmingVisitor.PruneBaseDataConstrainedCoverage(Map<LOLoad, DataBag>,LineageTracer,Collection<IdentityHashSet<Tuple>>)",5,17,20
"org.apache.pig.pen.LineageTrimmingVisitor.checkCompleteness(LogicalRelationalOperator)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.checkNewBaseData(DataBag,Map<LOLoad, DataBag>,Set<Tuple>)",5,6,9
"org.apache.pig.pen.LineageTrimmingVisitor.getBaseData()",1,1,1
"org.apache.pig.pen.LineageTrimmingVisitor.init()",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.processLoad(LOLoad)",3,9,10
"org.apache.pig.pen.LineageTrimmingVisitor.processOperator(LogicalRelationalOperator)",4,6,9
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOCogroup)",3,6,7
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOCross)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LODistinct)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOFilter)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOForEach)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOJoin)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOLimit)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOLoad)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOSort)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOSplit)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOSplitOutput)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOStore)",1,2,2
"org.apache.pig.pen.LineageTrimmingVisitor.visit(LOUnion)",1,2,2
"org.apache.pig.pen.LocalMapReduceSimulator.OutputAttacher.OutputAttacher(PhysicalPlan,Map<String, DataBag>)",1,1,1
"org.apache.pig.pen.LocalMapReduceSimulator.OutputAttacher.visitUserFunc(POUserFunc)",1,3,3
"org.apache.pig.pen.LocalMapReduceSimulator.getPhyToMRMap()",1,1,1
"org.apache.pig.pen.LocalMapReduceSimulator.launchPig(PhysicalPlan,Map<LOLoad, DataBag>,LineageTracer,IllustratorAttacher,ExampleGenerator,PigContext)",13,29,36
"org.apache.pig.pen.POOptimizeDisabler.POOptimizeDisabler(OperatorPlan)",1,1,1
"org.apache.pig.pen.POOptimizeDisabler.visit(LOCogroup)",1,1,1
"org.apache.pig.pen.POOptimizeDisabler.visit(LOJoin)",1,1,1
"org.apache.pig.pen.PhysicalPlanResetter.PhysicalPlanResetter(PhysicalPlan)",1,1,1
"org.apache.pig.pen.PhysicalPlanResetter.visitPackage(POPackage)",1,1,1
"org.apache.pig.pen.util.DisplayExamples.AddSpaces(int,boolean)",1,3,3
"org.apache.pig.pen.util.DisplayExamples.DisplayNestedTable(String[][],Operator,String,DataBag,DataBag,StringBuffer)",1,7,9
"org.apache.pig.pen.util.DisplayExamples.DisplayTable(String[][],Operator,DataBag,StringBuffer)",2,11,14
"org.apache.pig.pen.util.DisplayExamples.MakeArray(Operator,DataBag)",1,3,3
"org.apache.pig.pen.util.DisplayExamples.ShortenField(DataBag)",1,6,6
"org.apache.pig.pen.util.DisplayExamples.ShortenField(Object)",5,5,5
"org.apache.pig.pen.util.DisplayExamples.ShortenField(Tuple)",1,4,4
"org.apache.pig.pen.util.DisplayExamples.printMetrics(Operator,Map<Operator, DataBag>,Map<LogicalRelationalOperator, Collection<IdentityHashSet<Tuple>>>)",1,1,1
"org.apache.pig.pen.util.DisplayExamples.printNestedTabular(LOForEach,Map<LOForEach, Map<LogicalRelationalOperator, DataBag>>,DataBag,StringBuffer)",1,2,2
"org.apache.pig.pen.util.DisplayExamples.printNestedTabular(Operator,LogicalPlan,String,DataBag,Map<LogicalRelationalOperator, DataBag>,StringBuffer)",2,6,7
"org.apache.pig.pen.util.DisplayExamples.printSimple(Operator,LogicalPlan,Map<Operator, DataBag>)",1,4,4
"org.apache.pig.pen.util.DisplayExamples.printTabular(LogicalPlan,Map<Operator, DataBag>,Map<LOForEach, Map<LogicalRelationalOperator, DataBag>>)",1,5,5
"org.apache.pig.pen.util.DisplayExamples.printTabular(Operator,LogicalPlan,Map<Operator, DataBag>,Map<LOForEach, Map<LogicalRelationalOperator, DataBag>>,Set<Operator>,StringBuffer)",1,10,10
"org.apache.pig.pen.util.ExampleTuple.ExampleTuple()",1,1,1
"org.apache.pig.pen.util.ExampleTuple.ExampleTuple(Object)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.ExampleTuple(Tuple)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.append(Object)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.compareTo(Object)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.get(int)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.getAll()",1,1,1
"org.apache.pig.pen.util.ExampleTuple.getMemorySize()",1,1,1
"org.apache.pig.pen.util.ExampleTuple.getType(int)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.isNull(int)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.readFields(DataInput)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.reference(Tuple)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.set(int,Object)",1,1,1
"org.apache.pig.pen.util.ExampleTuple.size()",1,1,1
"org.apache.pig.pen.util.ExampleTuple.toString()",1,1,1
"org.apache.pig.pen.util.ExampleTuple.toTuple()",1,1,1
"org.apache.pig.pen.util.ExampleTuple.write(DataOutput)",1,1,1
"org.apache.pig.pen.util.LineageTracer.getCounts()",1,1,1
"org.apache.pig.pen.util.LineageTracer.getMembers(Tuple)",1,3,3
"org.apache.pig.pen.util.LineageTracer.getMembershipMap()",1,3,3
"org.apache.pig.pen.util.LineageTracer.getRepresentative(Tuple)",1,2,2
"org.apache.pig.pen.util.LineageTracer.getWeightedCounts(float,float)",1,3,5
"org.apache.pig.pen.util.LineageTracer.insert(Tuple)",1,2,2
"org.apache.pig.pen.util.LineageTracer.link(Tuple,Tuple)",1,3,3
"org.apache.pig.pen.util.LineageTracer.union(Tuple,Tuple)",1,1,1
"org.apache.pig.pen.util.MetricEvaluation.getCompleteness(Operator,Map<Operator, DataBag>,Map<LogicalRelationalOperator, Collection<IdentityHashSet<Tuple>>>,boolean)",4,3,4
"org.apache.pig.pen.util.MetricEvaluation.getCompletenessLogic(Collection<IdentityHashSet<Tuple>>)",1,2,3
"org.apache.pig.pen.util.MetricEvaluation.getConciseness(Operator,Map<Operator, DataBag>,Map<LogicalRelationalOperator, Collection<IdentityHashSet<Tuple>>>,boolean)",4,3,6
"org.apache.pig.pen.util.MetricEvaluation.getRealness(Operator,Map<Operator, DataBag>,boolean)",6,4,9
"org.apache.pig.pen.util.PreOrderDepthFirstWalker.PreOrderDepthFirstWalker(OperatorPlan)",1,1,1
"org.apache.pig.pen.util.PreOrderDepthFirstWalker.depthFirst(Operator,Collection<Operator>,Set<Operator>,PlanVisitor)",2,3,4
"org.apache.pig.pen.util.PreOrderDepthFirstWalker.getBranchFlag()",1,1,1
"org.apache.pig.pen.util.PreOrderDepthFirstWalker.setBranchFlag()",1,1,1
"org.apache.pig.pen.util.PreOrderDepthFirstWalker.spawnChildWalker(OperatorPlan)",1,1,1
"org.apache.pig.pen.util.PreOrderDepthFirstWalker.walk(PlanVisitor)",1,1,1
"org.apache.pig.scripting.BoundScript.BoundScript(List<String>,ScriptPigContext,String)",1,1,1
"org.apache.pig.scripting.BoundScript.BoundScript(String,ScriptPigContext,String)",1,1,1
"org.apache.pig.scripting.BoundScript.MyCallable.MyCallable(String,PigContext,PigProgressNotificationListener)",1,1,1
"org.apache.pig.scripting.BoundScript.MyCallable.call()",1,1,2
"org.apache.pig.scripting.BoundScript.describe(String)",2,2,2
"org.apache.pig.scripting.BoundScript.exec(String)",1,3,3
"org.apache.pig.scripting.BoundScript.explain()",2,2,2
"org.apache.pig.scripting.BoundScript.illustrate()",2,2,2
"org.apache.pig.scripting.BoundScript.registerQuery(PigServer,String)",1,1,2
"org.apache.pig.scripting.BoundScript.run()",1,1,1
"org.apache.pig.scripting.BoundScript.run(Properties)",3,9,9
"org.apache.pig.scripting.BoundScript.run(String)",1,2,2
"org.apache.pig.scripting.BoundScript.runSingle()",1,1,1
"org.apache.pig.scripting.BoundScript.runSingle(Properties)",3,3,4
"org.apache.pig.scripting.BoundScript.runSingle(String)",1,2,2
"org.apache.pig.scripting.BoundScript.setPigStats(List<PigStats>)",2,4,5
"org.apache.pig.scripting.BoundScript.setPigStats(PigStats)",1,2,2
"org.apache.pig.scripting.Pig.Pig(String,ScriptPigContext,String)",1,1,1
"org.apache.pig.scripting.Pig.addDefineClause(String,String)",1,1,1
"org.apache.pig.scripting.Pig.addRegisterScriptUDFClause(String,String)",1,2,3
"org.apache.pig.scripting.Pig.bind()",2,1,2
"org.apache.pig.scripting.Pig.bind(List<Map<String, Object>>)",1,2,2
"org.apache.pig.scripting.Pig.bind(Map<String, Object>)",1,1,1
"org.apache.pig.scripting.Pig.compile(String)",1,1,1
"org.apache.pig.scripting.Pig.compile(String,String)",1,1,1
"org.apache.pig.scripting.Pig.compileFromFile(String)",1,1,1
"org.apache.pig.scripting.Pig.compileFromFile(String,String)",1,1,1
"org.apache.pig.scripting.Pig.define(String,String)",1,1,1
"org.apache.pig.scripting.Pig.fixNonEscapedDollarSign(String)",2,4,5
"org.apache.pig.scripting.Pig.fs(String)",2,2,4
"org.apache.pig.scripting.Pig.getDefineClauses()",1,2,2
"org.apache.pig.scripting.Pig.getRegisterScriptUDFClauses()",1,2,2
"org.apache.pig.scripting.Pig.getScriptContext()",2,1,2
"org.apache.pig.scripting.Pig.getScriptFromFile(String)",1,2,2
"org.apache.pig.scripting.Pig.registerJar(String)",1,1,1
"org.apache.pig.scripting.Pig.registerUDF(String,String)",1,2,3
"org.apache.pig.scripting.Pig.replaceParameters(String,Map<String, Object>)",1,4,4
"org.apache.pig.scripting.Pig.set(String,String)",1,1,1
"org.apache.pig.scripting.Pig.sql(String)",4,1,4
"org.apache.pig.scripting.ScriptEngine.SupportedScriptLang.SupportedScriptLang(String[],String[],String)",1,1,1
"org.apache.pig.scripting.ScriptEngine.SupportedScriptLang.accepts(String,String)",6,3,6
"org.apache.pig.scripting.ScriptEngine.SupportedScriptLang.contains(String)",1,1,1
"org.apache.pig.scripting.ScriptEngine.SupportedScriptLang.getEngineClassName()",1,1,1
"org.apache.pig.scripting.ScriptEngine.declaresShebang(String)",2,1,2
"org.apache.pig.scripting.ScriptEngine.getInstance(String)",1,2,3
"org.apache.pig.scripting.ScriptEngine.getJarPath(Class<?>)",2,2,2
"org.apache.pig.scripting.ScriptEngine.getPigStatsMap()",1,1,1
"org.apache.pig.scripting.ScriptEngine.getResourceUsingClassLoader(String,ClassLoader)",2,2,2
"org.apache.pig.scripting.ScriptEngine.getScriptAsStream(String)",3,10,12
"org.apache.pig.scripting.ScriptEngine.getSupportedScriptLang(String)",4,2,4
"org.apache.pig.scripting.ScriptEngine.run(PigContext,String)",1,1,1
"org.apache.pig.scripting.ScriptEngine.setPigStats(String,List<PigStats>)",1,1,1
"org.apache.pig.scripting.ScriptEngine.setPigStats(String,PigStats)",1,2,2
"org.apache.pig.scripting.ScriptPigContext.ScriptPigContext(PigContext,ScriptEngine)",1,1,1
"org.apache.pig.scripting.ScriptPigContext.get()",1,1,1
"org.apache.pig.scripting.ScriptPigContext.getPigContext()",1,1,1
"org.apache.pig.scripting.ScriptPigContext.getScriptEngine()",1,1,1
"org.apache.pig.scripting.ScriptPigContext.set(PigContext,ScriptEngine)",1,1,1
"org.apache.pig.scripting.ScriptingOutputCapturer.ScriptingOutputCapturer(ExecType)",1,1,1
"org.apache.pig.scripting.ScriptingOutputCapturer.getRunId()",1,1,1
"org.apache.pig.scripting.ScriptingOutputCapturer.getStandardOutputRootWriteLocation()",2,8,13
"org.apache.pig.scripting.ScriptingOutputCapturer.getTaskLogDir(String,String,String)",5,4,5
"org.apache.pig.scripting.ScriptingOutputCapturer.getUdfOutput()",1,3,3
"org.apache.pig.scripting.ScriptingOutputCapturer.isClassCapturingOutput()",1,1,1
"org.apache.pig.scripting.ScriptingOutputCapturer.isInstanceCapturingOutput()",1,1,1
"org.apache.pig.scripting.ScriptingOutputCapturer.registerOutputLocation(String,String)",1,1,1
"org.apache.pig.scripting.ScriptingOutputCapturer.setInstanceCapturingOutput(boolean)",1,1,1
"org.apache.pig.scripting.ScriptingOutputCapturer.startCapturingOutput()",1,1,1
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.SyncProgressNotificationAdaptor(List<PigProgressNotificationListener>)",1,1,1
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.initialPlanNotification(String,OperatorPlan<?>)",1,3,3
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.jobFailedNotification(String,JobStats)",1,2,2
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.jobFinishedNotification(String,JobStats)",1,2,2
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.jobStartedNotification(String,String)",1,2,2
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.jobsSubmittedNotification(String,int)",1,2,2
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.launchCompletedNotification(String,int)",1,2,2
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.launchStartedNotification(String,int)",1,2,2
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.outputCompletedNotification(String,OutputStats)",1,2,2
"org.apache.pig.scripting.SyncProgressNotificationAdaptor.progressUpdatedNotification(String,int)",1,2,2
"org.apache.pig.scripting.groovy.GroovyAccumulatorEvalFunc.GroovyAccumulatorEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAccumulatorEvalFunc.accumulate(Tuple)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAccumulatorEvalFunc.cleanup()",1,1,2
"org.apache.pig.scripting.groovy.GroovyAccumulatorEvalFunc.getValue()",1,1,2
"org.apache.pig.scripting.groovy.GroovyAccumulatorEvalFunc.outputSchema(Schema)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.AlgebraicFunctionWrapper.AlgebraicFunctionWrapper()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.AlgebraicFunctionWrapper.AlgebraicFunctionWrapper(String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BigDecimalGroovyAlgebraicEvalFunc.BigDecimalGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BigDecimalGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BigDecimalGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BigIntegerGroovyAlgebraicEvalFunc.BigIntegerGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BigIntegerGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BigIntegerGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BooleanGroovyAlgebraicEvalFunc.BooleanGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BooleanGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.BooleanGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.ChararrayGroovyAlgebraicEvalFunc.ChararrayGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.ChararrayGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.ChararrayGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DataBagGroovyAlgebraicEvalFunc.DataBagGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DataBagGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DataBagGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DataByteArrayGroovyAlgebraicEvalFunc.DataByteArrayGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DataByteArrayGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DataByteArrayGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DateTimeGroovyAlgebraicEvalFunc.DateTimeGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DateTimeGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DateTimeGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DoubleGroovyAlgebraicEvalFunc.DoubleGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DoubleGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.DoubleGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.FloatGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.FloatGroovyAlgebraicEvalFunc.FloatGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.FloatGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.GroovyAlgebraicEvalFunc()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.GroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.Initial.Initial()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.Initial.Initial(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.IntegerGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.IntegerGroovyAlgebraicEvalFunc.IntegerGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.IntegerGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.Intermed.Intermed()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.Intermed.Intermed(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.LongGroovyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.LongGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.LongGroovyAlgebraicEvalFunc.LongGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.LongGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.MapGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.MapGroovyAlgebraicEvalFunc.MapGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.MapGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.TupleGroovyAlgebraicEvalFunc.Final.Final(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.TupleGroovyAlgebraicEvalFunc.TupleGroovyAlgebraicEvalFunc(String,String,String,String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.TupleGroovyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.getInitial()",1,1,1
"org.apache.pig.scripting.groovy.GroovyAlgebraicEvalFunc.getIntermed()",1,1,1
"org.apache.pig.scripting.groovy.GroovyEvalFunc.GroovyEvalFunc()",1,1,1
"org.apache.pig.scripting.groovy.GroovyEvalFunc.GroovyEvalFunc(String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyEvalFunc.GroovyEvalFunc(String,String,String,Object)",9,8,16
"org.apache.pig.scripting.groovy.GroovyEvalFunc.exec(Tuple)",2,4,6
"org.apache.pig.scripting.groovy.GroovyEvalFunc.getInvocationTarget()",1,1,1
"org.apache.pig.scripting.groovy.GroovyEvalFunc.outputSchema(Schema)",2,2,4
"org.apache.pig.scripting.groovy.GroovyEvalFuncObject.GroovyEvalFuncObject()",1,1,1
"org.apache.pig.scripting.groovy.GroovyEvalFuncObject.GroovyEvalFuncObject(String,String,String)",1,1,1
"org.apache.pig.scripting.groovy.GroovyEvalFuncObject.GroovyEvalFuncObject(String,String,String,Object)",1,1,1
"org.apache.pig.scripting.groovy.GroovyScriptEngine.getEngine()",1,1,1
"org.apache.pig.scripting.groovy.GroovyScriptEngine.getParamsFromVariables()",1,1,1
"org.apache.pig.scripting.groovy.GroovyScriptEngine.getScriptingLang()",1,1,1
"org.apache.pig.scripting.groovy.GroovyScriptEngine.isAccumulator(Annotation)",1,3,3
"org.apache.pig.scripting.groovy.GroovyScriptEngine.isAlgebraic(Annotation)",1,3,3
"org.apache.pig.scripting.groovy.GroovyScriptEngine.main(PigContext,String)",2,5,7
"org.apache.pig.scripting.groovy.GroovyScriptEngine.registerFunctions(String,String,PigContext)",45,59,82
"org.apache.pig.scripting.groovy.GroovyUtils.DataBagGroovyIterator.DataBagGroovyIterator(Iterator<Tuple>)",1,1,1
"org.apache.pig.scripting.groovy.GroovyUtils.DataBagGroovyIterator.hasNext()",1,1,1
"org.apache.pig.scripting.groovy.GroovyUtils.DataBagGroovyIterator.next()",1,1,2
"org.apache.pig.scripting.groovy.GroovyUtils.DataBagGroovyIterator.remove()",1,1,1
"org.apache.pig.scripting.groovy.GroovyUtils.groovyToPig(Object)",14,20,27
"org.apache.pig.scripting.groovy.GroovyUtils.pigToGroovy(Object)",10,12,14
"org.apache.pig.scripting.jruby.JrubyAccumulatorEvalFunc.JrubyAccumulatorEvalFunc()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAccumulatorEvalFunc.JrubyAccumulatorEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAccumulatorEvalFunc.accumulate(Tuple)",1,2,2
"org.apache.pig.scripting.jruby.JrubyAccumulatorEvalFunc.cleanup()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAccumulatorEvalFunc.getValue()",1,1,2
"org.apache.pig.scripting.jruby.JrubyAccumulatorEvalFunc.initialize()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAccumulatorEvalFunc.outputSchema(Schema)",1,2,2
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.AlgebraicFunctionWrapper.AlgebraicFunctionWrapper()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.AlgebraicFunctionWrapper.AlgebraicFunctionWrapper(String,String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.AlgebraicFunctionWrapper.getFileName()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.AlgebraicFunctionWrapper.getFunctionName()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.AlgebraicFunctionWrapper.getReceiver()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.AlgebraicFunctionWrapper.getStage()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.AlgebraicFunctionWrapper.initialize()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.AlgebraicFunctionWrapper.isInitialized()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.BagJrubyAlgebraicEvalFunc.BagJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.BagJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.BagJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.BagJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.ChararrayJrubyAlgebraicEvalFunc.ChararrayJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.ChararrayJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.ChararrayJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.ChararrayJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.DataByteArrayJrubyAlgebraicEvalFunc.DataByteArrayJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.DataByteArrayJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.DataByteArrayJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.DataByteArrayJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.DoubleJrubyAlgebraicEvalFunc.DoubleJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.DoubleJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.DoubleJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.DoubleJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Final.exec(Tuple)",1,2,3
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.FloatJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.FloatJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.FloatJrubyAlgebraicEvalFunc.FloatJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.FloatJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Initial.Initial()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Initial.Initial(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Initial.exec(Tuple)",1,2,3
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.IntegerJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.IntegerJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.IntegerJrubyAlgebraicEvalFunc.IntegerJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.IntegerJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Intermed.Intermed()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Intermed.Intermed(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.Intermed.exec(Tuple)",1,2,3
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.JrubyAlgebraicEvalFunc()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.JrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.LongJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.LongJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.LongJrubyAlgebraicEvalFunc.LongJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.LongJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.MapJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.MapJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.MapJrubyAlgebraicEvalFunc.MapJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.MapJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.TupleJrubyAlgebraicEvalFunc.Final.Final()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.TupleJrubyAlgebraicEvalFunc.Final.Final(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.TupleJrubyAlgebraicEvalFunc.TupleJrubyAlgebraicEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.TupleJrubyAlgebraicEvalFunc.getFinal()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.getInitial()",1,1,1
"org.apache.pig.scripting.jruby.JrubyAlgebraicEvalFunc.getIntermed()",1,1,1
"org.apache.pig.scripting.jruby.JrubyEvalFunc.JrubyEvalFunc()",1,1,1
"org.apache.pig.scripting.jruby.JrubyEvalFunc.JrubyEvalFunc(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyEvalFunc.exec(Tuple)",3,4,10
"org.apache.pig.scripting.jruby.JrubyEvalFunc.initialize()",1,1,1
"org.apache.pig.scripting.jruby.JrubyEvalFunc.outputSchema(Schema)",1,2,2
"org.apache.pig.scripting.jruby.JrubyScriptEngine.RubyFunctions.getFromCache(String,Map<String, Map<String, Object>>,String)",1,5,5
"org.apache.pig.scripting.jruby.JrubyScriptEngine.RubyFunctions.getFunctions(String,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyScriptEngine.getParamsFromVariables()",1,1,1
"org.apache.pig.scripting.jruby.JrubyScriptEngine.getScriptingLang()",1,1,1
"org.apache.pig.scripting.jruby.JrubyScriptEngine.libsToShip()",5,6,8
"org.apache.pig.scripting.jruby.JrubyScriptEngine.listRecursively(File)",1,3,3
"org.apache.pig.scripting.jruby.JrubyScriptEngine.main(PigContext,String)",1,1,1
"org.apache.pig.scripting.jruby.JrubyScriptEngine.registerFunctions(String,String,PigContext)",11,13,25
"org.apache.pig.scripting.jruby.PigJrubyLibrary.enumeratorize(Ruby,IRubyObject,String)",1,1,2
"org.apache.pig.scripting.jruby.PigJrubyLibrary.load(Ruby,boolean)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Boolean)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,DataBag)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,DataByteArray)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Double)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Float)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Integer)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Long)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Map<T, ?>)",4,2,4
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Object)",13,13,13
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Schema)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,String)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.pigToRuby(Ruby,Tuple)",1,2,2
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(IRubyObject)",13,13,14
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyArray)",1,2,2
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyBignum)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyBoolean)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyDataBag)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyDataByteArray)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyFixnum)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyFloat)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyHash)",3,4,6
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyInteger)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyNil)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubySchema)",1,1,1
"org.apache.pig.scripting.jruby.PigJrubyLibrary.rubyToPig(RubyString)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.RubyDataBag(Ruby,RubyClass)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.RubyDataBag(Ruby,RubyClass,DataBag)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.add(ThreadContext,IRubyObject[])",1,5,5
"org.apache.pig.scripting.jruby.RubyDataBag.clear()",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.clone(ThreadContext)",1,2,2
"org.apache.pig.scripting.jruby.RubyDataBag.define(Ruby)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.each(ThreadContext,Block)",2,3,3
"org.apache.pig.scripting.jruby.RubyDataBag.flatten(ThreadContext,Block)",2,3,3
"org.apache.pig.scripting.jruby.RubyDataBag.getBag()",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.initialize()",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.initialize(IRubyObject)",2,2,2
"org.apache.pig.scripting.jruby.RubyDataBag.inspect(ThreadContext,IRubyObject[])",1,3,3
"org.apache.pig.scripting.jruby.RubyDataBag.isDistinct(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.isEmpty(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.isSorted(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.iterator()",1,1,1
"org.apache.pig.scripting.jruby.RubyDataBag.size(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.RubyDataByteArray(Ruby,RubyClass)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.RubyDataByteArray(Ruby,RubyClass,DataByteArray)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.RubyDataByteArray(Ruby,RubyClass,DataByteArray,DataByteArray)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.RubyDataByteArray(Ruby,RubyClass,byte[])",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.append(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.compare(ThreadContext,IRubyObject,IRubyObject,IRubyObject)",1,3,3
"org.apache.pig.scripting.jruby.RubyDataByteArray.compareTo(ThreadContext,IRubyObject)",1,2,2
"org.apache.pig.scripting.jruby.RubyDataByteArray.define(Ruby)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.equals(ThreadContext,IRubyObject)",2,2,2
"org.apache.pig.scripting.jruby.RubyDataByteArray.getDBA()",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.hash(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.initialize()",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.initialize(IRubyObject)",1,3,3
"org.apache.pig.scripting.jruby.RubyDataByteArray.initialize(IRubyObject,IRubyObject)",2,2,3
"org.apache.pig.scripting.jruby.RubyDataByteArray.plus(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.set(IRubyObject)",1,3,3
"org.apache.pig.scripting.jruby.RubyDataByteArray.size(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubyDataByteArray.toString(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.RubySchema(Ruby,RubyClass)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.RubySchema(Ruby,RubyClass,Schema)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.RubySchema(Ruby,RubyClass,Schema,boolean)",1,1,2
"org.apache.pig.scripting.jruby.RubySchema.RubySchema(Ruby,RubyClass,String)",1,1,2
"org.apache.pig.scripting.jruby.RubySchema.add(ThreadContext,IRubyObject[])",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.addInPlace(ThreadContext,IRubyObject[])",1,2,2
"org.apache.pig.scripting.jruby.RubySchema.bag(ThreadContext,IRubyObject,IRubyObject)",1,1,2
"org.apache.pig.scripting.jruby.RubySchema.bag(ThreadContext,IRubyObject,IRubyObject,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.clone(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.define(Ruby)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.find(Schema,String)",6,4,6
"org.apache.pig.scripting.jruby.RubySchema.find(ThreadContext,IRubyObject)",2,2,2
"org.apache.pig.scripting.jruby.RubySchema.fixSchemaNames(Schema)",6,6,10
"org.apache.pig.scripting.jruby.RubySchema.get(ThreadContext)",2,1,3
"org.apache.pig.scripting.jruby.RubySchema.get(ThreadContext,IRubyObject)",4,5,6
"org.apache.pig.scripting.jruby.RubySchema.get(ThreadContext,IRubyObject,IRubyObject)",2,2,3
"org.apache.pig.scripting.jruby.RubySchema.getInternalSchema()",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.getName(ThreadContext)",2,1,3
"org.apache.pig.scripting.jruby.RubySchema.index(ThreadContext,IRubyObject)",2,2,3
"org.apache.pig.scripting.jruby.RubySchema.initialize(IRubyObject[])",1,3,3
"org.apache.pig.scripting.jruby.RubySchema.makeNullAliasRubySchema(ThreadContext,byte)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.map(ThreadContext,IRubyObject,IRubyObject)",1,1,2
"org.apache.pig.scripting.jruby.RubySchema.map(ThreadContext,IRubyObject,IRubyObject,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullBag(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullBoolean(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullBytearray(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullChararray(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullDateTime(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullDouble(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullFloate(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullInt(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullLong(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullMap(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.nullTuple(ThreadContext,IRubyObject)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.rubyArgToSchema(Object)",14,15,20
"org.apache.pig.scripting.jruby.RubySchema.set(ThreadContext,IRubyObject[])",5,6,9
"org.apache.pig.scripting.jruby.RubySchema.setName(IRubyObject)",3,2,4
"org.apache.pig.scripting.jruby.RubySchema.setName(String)",2,1,5
"org.apache.pig.scripting.jruby.RubySchema.setNameIf(IRubyObject)",2,2,2
"org.apache.pig.scripting.jruby.RubySchema.size(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.toString(ThreadContext)",1,1,1
"org.apache.pig.scripting.jruby.RubySchema.tuple(ThreadContext,IRubyObject,IRubyObject)",2,2,2
"org.apache.pig.scripting.jruby.RubySchema.tuple(ThreadContext,IRubyObject,IRubyObject,IRubyObject)",1,1,1
"org.apache.pig.scripting.js.JSPig.JSPig(Pig)",1,1,1
"org.apache.pig.scripting.js.JSPig.bind()",1,1,1
"org.apache.pig.scripting.js.JSPig.bind(Object)",1,4,5
"org.apache.pig.scripting.js.JSPig.compile(String)",1,1,1
"org.apache.pig.scripting.js.JSPig.compile(String,String)",1,1,1
"org.apache.pig.scripting.js.JSPig.compileFromFile(String)",1,1,1
"org.apache.pig.scripting.js.JSPig.compileFromFile(String,String)",1,1,1
"org.apache.pig.scripting.js.JSPig.define(String,String)",1,1,1
"org.apache.pig.scripting.js.JSPig.fs(String)",1,1,1
"org.apache.pig.scripting.js.JSPig.registerJar(String)",1,1,1
"org.apache.pig.scripting.js.JSPig.registerUDF(String,String)",1,1,1
"org.apache.pig.scripting.js.JSPig.set(String,String)",1,1,1
"org.apache.pig.scripting.js.JsFunction.JsFunction(String)",2,3,4
"org.apache.pig.scripting.js.JsFunction.append(StringBuffer,Object)",1,5,5
"org.apache.pig.scripting.js.JsFunction.debugConvertJSToPig(int,String,Object,Schema)",1,2,2
"org.apache.pig.scripting.js.JsFunction.debugConvertPigToJS(int,String,Object,Schema)",1,2,2
"org.apache.pig.scripting.js.JsFunction.debugReturn(int,Object)",1,2,2
"org.apache.pig.scripting.js.JsFunction.exec(Tuple)",1,9,9
"org.apache.pig.scripting.js.JsFunction.indent(int)",1,2,2
"org.apache.pig.scripting.js.JsFunction.jsToPigBag(Scriptable,Schema,int)",1,4,4
"org.apache.pig.scripting.js.JsFunction.jsToPigMap(Scriptable,Schema,int)",1,4,5
"org.apache.pig.scripting.js.JsFunction.jsToPigTuple(Scriptable,Schema,int)",1,8,9
"org.apache.pig.scripting.js.JsFunction.outputSchema(Schema)",1,1,1
"org.apache.pig.scripting.js.JsFunction.pigBagToJS(DataBag,Schema,int)",1,4,4
"org.apache.pig.scripting.js.JsFunction.pigMapToJS(Map<String, Object>,Schema,int)",1,2,2
"org.apache.pig.scripting.js.JsFunction.pigTupleToJS(Tuple,Schema,int)",1,6,6
"org.apache.pig.scripting.js.JsFunction.stringify(Schema)",1,1,1
"org.apache.pig.scripting.js.JsFunction.stringify(Schema,StringBuffer)",1,4,4
"org.apache.pig.scripting.js.JsFunction.toString(Object)",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.JsScriptEngine()",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.eval(String)",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.getContext()",1,2,2
"org.apache.pig.scripting.js.JsScriptEngine.getInstance()",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.getParamsFromVariables()",1,4,4
"org.apache.pig.scripting.js.JsScriptEngine.getScope()",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.getScriptingLang()",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.jsCall(String,Object[])",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.jsEval(String,Reader)",1,1,2
"org.apache.pig.scripting.js.JsScriptEngine.jsEval(String,String)",1,1,2
"org.apache.pig.scripting.js.JsScriptEngine.jsNewArray(long)",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.jsNewObject()",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.jsPut(String,Object)",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.load(String,InputStream)",1,1,1
"org.apache.pig.scripting.js.JsScriptEngine.main(PigContext,String)",2,1,2
"org.apache.pig.scripting.js.JsScriptEngine.registerFunctions(String,String,PigContext)",1,6,7
"org.apache.pig.scripting.jython.JythonFunction.JythonFunction(String,String)",5,5,11
"org.apache.pig.scripting.jython.JythonFunction.exec(Tuple)",2,2,6
"org.apache.pig.scripting.jython.JythonFunction.logOnce(String)",1,2,2
"org.apache.pig.scripting.jython.JythonFunction.outputSchema(Schema)",6,5,7
"org.apache.pig.scripting.jython.JythonScriptEngine.DirDeleter.DirDeleter(File)",1,1,1
"org.apache.pig.scripting.jython.JythonScriptEngine.DirDeleter.delete(File)",1,3,3
"org.apache.pig.scripting.jython.JythonScriptEngine.DirDeleter.run()",1,2,2
"org.apache.pig.scripting.jython.JythonScriptEngine.Interpreter.execfile(InputStream,String,PigContext)",7,19,21
"org.apache.pig.scripting.jython.JythonScriptEngine.Interpreter.get(String)",1,1,1
"org.apache.pig.scripting.jython.JythonScriptEngine.Interpreter.getModuleState()",1,11,11
"org.apache.pig.scripting.jython.JythonScriptEngine.Interpreter.init(String,PigContext)",3,2,3
"org.apache.pig.scripting.jython.JythonScriptEngine.Interpreter.setMain(boolean)",1,2,2
"org.apache.pig.scripting.jython.JythonScriptEngine.getFunction(String,String)",1,1,1
"org.apache.pig.scripting.jython.JythonScriptEngine.getParamsFromVariables()",1,3,3
"org.apache.pig.scripting.jython.JythonScriptEngine.getScriptingLang()",1,1,1
"org.apache.pig.scripting.jython.JythonScriptEngine.hasFunction(InputStream)",2,3,6
"org.apache.pig.scripting.jython.JythonScriptEngine.load(InputStream,String,PigContext)",1,1,1
"org.apache.pig.scripting.jython.JythonScriptEngine.main(PigContext,String)",2,4,5
"org.apache.pig.scripting.jython.JythonScriptEngine.registerFunctions(String,String,PigContext)",1,9,11
"org.apache.pig.scripting.jython.JythonScriptEngine.resolvePyModulePath(String,Object)",5,7,8
"org.apache.pig.scripting.jython.JythonUtils.pigToPython(Object)",5,7,7
"org.apache.pig.scripting.jython.JythonUtils.pigTupleToPyTuple(Tuple)",1,2,2
"org.apache.pig.scripting.jython.JythonUtils.pythonToPig(PyObject)",12,21,21
"org.apache.pig.scripting.streaming.python.PythonScriptEngine.getFunctions(InputStream)",1,5,5
"org.apache.pig.scripting.streaming.python.PythonScriptEngine.getParamsFromVariables()",1,1,1
"org.apache.pig.scripting.streaming.python.PythonScriptEngine.getScriptingLang()",1,1,1
"org.apache.pig.scripting.streaming.python.PythonScriptEngine.main(PigContext,String)",1,1,1
"org.apache.pig.scripting.streaming.python.PythonScriptEngine.registerFunctions(String,String,PigContext)",2,2,5
"org.apache.pig.tools.ToolsPigServer.PigPlans.PigPlans(LogicalPlan)",1,1,1
"org.apache.pig.tools.ToolsPigServer.ToolsPigServer(ExecType,Properties)",1,1,1
"org.apache.pig.tools.ToolsPigServer.ToolsPigServer(PigContext)",1,1,1
"org.apache.pig.tools.ToolsPigServer.ToolsPigServer(String)",1,1,1
"org.apache.pig.tools.ToolsPigServer.getPlans()",1,1,1
"org.apache.pig.tools.ToolsPigServer.registerNoRun(String,Map<String, String>,List<String>)",1,4,4
"org.apache.pig.tools.ToolsPigServer.runPlan(LogicalPlan,String)",1,1,1
"org.apache.pig.tools.cmdline.CmdLineParser.CmdLineParser(String[])",1,1,1
"org.apache.pig.tools.cmdline.CmdLineParser.getNextOpt()",10,9,17
"org.apache.pig.tools.cmdline.CmdLineParser.getRemainingArgs()",2,1,2
"org.apache.pig.tools.cmdline.CmdLineParser.getValInt()",2,1,2
"org.apache.pig.tools.cmdline.CmdLineParser.getValStr()",1,1,1
"org.apache.pig.tools.cmdline.CmdLineParser.registerOpt(char,String,ValueExpected)",5,3,5
"org.apache.pig.tools.counters.PigCounterHelper.incrCounter(Enum<?>,long)",2,5,6
"org.apache.pig.tools.counters.PigCounterHelper.incrCounter(String,String,long)",2,5,6
"org.apache.pig.tools.grunt.Grunt.Grunt(BufferedReader,PigContext)",1,1,2
"org.apache.pig.tools.grunt.Grunt.checkScript(String)",1,2,2
"org.apache.pig.tools.grunt.Grunt.exec()",1,2,2
"org.apache.pig.tools.grunt.Grunt.run()",2,3,3
"org.apache.pig.tools.grunt.Grunt.setConsoleReader(ConsoleReader)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.ExplainState.ExplainState(String,String,String,boolean,String)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.GruntParser(InputStream)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.GruntParser(InputStream,PigServer)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.GruntParser(InputStream,String)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.GruntParser(InputStream,String,PigServer)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.GruntParser(PigScriptParserTokenManager)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.GruntParser(PigScriptParserTokenManager,PigServer)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.GruntParser(Reader)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.GruntParser(Reader,PigServer)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.StreamPrinter.StreamPrinter(InputStream,String,PrintStream)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.StreamPrinter.run()",1,5,5
"org.apache.pig.tools.grunt.GruntParser.discardBatch()",1,2,2
"org.apache.pig.tools.grunt.GruntParser.executeBatch()",1,8,8
"org.apache.pig.tools.grunt.GruntParser.explainCurrentBatch()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.explainCurrentBatch(boolean)",3,4,10
"org.apache.pig.tools.grunt.GruntParser.init()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.isDone()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.loadScript(String,boolean,boolean,boolean,List<String>,List<String>)",1,5,8
"org.apache.pig.tools.grunt.GruntParser.parameterSubstitutionInGrunt(String)",2,2,3
"org.apache.pig.tools.grunt.GruntParser.parseOnly()",2,2,3
"org.apache.pig.tools.grunt.GruntParser.parseStopOnError()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.parseStopOnError(boolean)",2,7,10
"org.apache.pig.tools.grunt.GruntParser.printAliases()",1,2,2
"org.apache.pig.tools.grunt.GruntParser.printClear()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.printHelp()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.printLengthAndReplication(ElementDescriptor)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.processCD(String)",5,5,7
"org.apache.pig.tools.grunt.GruntParser.processCat(String)",6,6,9
"org.apache.pig.tools.grunt.GruntParser.processCopy(String,String)",2,2,3
"org.apache.pig.tools.grunt.GruntParser.processCopyFromLocal(String,String)",2,2,3
"org.apache.pig.tools.grunt.GruntParser.processCopyToLocal(String,String)",2,2,3
"org.apache.pig.tools.grunt.GruntParser.processDeclare(String,String)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.processDefault(String,String)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.processDescribe(String)",4,6,7
"org.apache.pig.tools.grunt.GruntParser.processDump(String)",3,6,7
"org.apache.pig.tools.grunt.GruntParser.processExplain(String,String,boolean,String,String,List<String>,List<String>)",4,5,7
"org.apache.pig.tools.grunt.GruntParser.processExplain(String,String,boolean,String,String,List<String>,List<String>,boolean)",3,5,6
"org.apache.pig.tools.grunt.GruntParser.processFsCommand(String[])",3,4,6
"org.apache.pig.tools.grunt.GruntParser.processHistory(boolean)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.processIllustrate(String,String,String,List<String>,List<String>)",8,11,15
"org.apache.pig.tools.grunt.GruntParser.processKill(String)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.processLS(String)",3,6,8
"org.apache.pig.tools.grunt.GruntParser.processMkdir(String)",1,2,2
"org.apache.pig.tools.grunt.GruntParser.processMove(String,String)",3,2,4
"org.apache.pig.tools.grunt.GruntParser.processPWD()",1,2,2
"org.apache.pig.tools.grunt.GruntParser.processPig(String)",1,3,3
"org.apache.pig.tools.grunt.GruntParser.processRegister(String)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.processRegister(String,String,String)",3,2,4
"org.apache.pig.tools.grunt.GruntParser.processRemove(String,String)",7,7,9
"org.apache.pig.tools.grunt.GruntParser.processSQLCommand(String)",5,2,5
"org.apache.pig.tools.grunt.GruntParser.processScript(String,boolean,List<String>,List<String>)",3,5,5
"org.apache.pig.tools.grunt.GruntParser.processSet()",1,4,4
"org.apache.pig.tools.grunt.GruntParser.processSet(String,String)",9,9,11
"org.apache.pig.tools.grunt.GruntParser.processShCommand(String[])",3,5,8
"org.apache.pig.tools.grunt.GruntParser.prompt()",1,2,2
"org.apache.pig.tools.grunt.GruntParser.quit()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.runPreprocessor(String,List<String>,List<String>)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.runSQLCommand(String,String,boolean)",3,5,8
"org.apache.pig.tools.grunt.GruntParser.setBatchOn()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.setExplainState(ExplainState)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.setInteractive(boolean)",1,2,2
"org.apache.pig.tools.grunt.GruntParser.setLoadOnly(boolean)",1,1,1
"org.apache.pig.tools.grunt.GruntParser.setProps()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.setScriptIllustrate()",1,1,1
"org.apache.pig.tools.grunt.GruntParser.setValidateEachStatement(boolean)",1,1,1
"org.apache.pig.tools.grunt.PigCompletor.PigCompletor()",1,5,5
"org.apache.pig.tools.grunt.PigCompletor.complete(String,int,List)",6,7,9
"org.apache.pig.tools.grunt.PigCompletor.isDelimit(char)",2,1,2
"org.apache.pig.tools.grunt.PigCompletor.loadCandidateKeywords(InputStream,Set<String>)",2,5,6
"org.apache.pig.tools.grunt.PigCompletor.searchCandidate(String)",1,3,3
"org.apache.pig.tools.grunt.PigCompletorAliases.PigCompletorAliases(PigServer)",1,2,2
"org.apache.pig.tools.grunt.PigCompletorAliases.complete(String,int,List)",11,7,13
"org.apache.pig.tools.grunt.PigCompletorAliases.searchCandidate(String)",1,4,4
"org.apache.pig.tools.parameters.ParameterSubstitutionException.ParameterSubstitutionException(String)",1,1,1
"org.apache.pig.tools.parameters.ParameterSubstitutionException.getMessage()",1,1,1
"org.apache.pig.tools.parameters.ParameterSubstitutionPreprocessor.ParameterSubstitutionPreprocessor(PreprocessorContext)",1,1,1
"org.apache.pig.tools.parameters.ParameterSubstitutionPreprocessor.ParameterSubstitutionPreprocessor(int)",1,1,1
"org.apache.pig.tools.parameters.ParameterSubstitutionPreprocessor.genSubstitutedFile(BufferedReader,Writer)",1,3,3
"org.apache.pig.tools.parameters.ParameterSubstitutionPreprocessor.genSubstitutedFile(BufferedReader,Writer,String[],String[])",1,4,4
"org.apache.pig.tools.parameters.ParameterSubstitutionPreprocessor.parsePigFile(BufferedReader,Writer)",1,2,2
"org.apache.pig.tools.parameters.PreprocessorContext.PreprocessorContext(Map<String, String>)",1,1,1
"org.apache.pig.tools.parameters.PreprocessorContext.PreprocessorContext(int)",1,1,1
"org.apache.pig.tools.parameters.PreprocessorContext.executeShellCommand(String)",2,10,13
"org.apache.pig.tools.parameters.PreprocessorContext.getParamVal()",1,1,1
"org.apache.pig.tools.parameters.PreprocessorContext.loadParamVal(List<String>,List<String>)",1,5,6
"org.apache.pig.tools.parameters.PreprocessorContext.processOrdLine(String,String)",1,1,1
"org.apache.pig.tools.parameters.PreprocessorContext.processOrdLine(String,String,Boolean)",3,4,4
"org.apache.pig.tools.parameters.PreprocessorContext.processShellCmd(String,String)",1,1,1
"org.apache.pig.tools.parameters.PreprocessorContext.processShellCmd(String,String,Boolean)",3,5,5
"org.apache.pig.tools.parameters.PreprocessorContext.setPigContext(PigContext)",1,1,1
"org.apache.pig.tools.parameters.PreprocessorContext.substitute(String)",1,1,1
"org.apache.pig.tools.parameters.PreprocessorContext.substitute(String,String)",8,9,14
"org.apache.pig.tools.parameters.PreprocessorContext.validate(String)",4,3,4
"org.apache.pig.tools.pigstats.EmbeddedPigStats.EmbeddedPigStats(Map<String, List<PigStats>>)",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getAllErrorMessages()",4,4,4
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getAllStats()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getBytesWritten()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getDuration()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getErrorCode()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getFeatures()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getInputStats()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getJobClient()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getJobGraph()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getNumberBytes(String)",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getNumberJobs()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getNumberRecords(String)",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getOutputAlias(String)",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getOutputLocations()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getOutputNames()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getOutputStats()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getPigProperties()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getProactiveSpillCountObjects()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getProactiveSpillCountRecords()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getRecordWritten()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getReturnCode()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getSMMSpillCount()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.getScriptId()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.isEmbedded()",1,1,1
"org.apache.pig.tools.pigstats.EmbeddedPigStats.isSuccessful()",4,3,4
"org.apache.pig.tools.pigstats.EmbeddedPigStats.result(String)",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.EmptyPigStats()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.EmptyPigStats(PigContext,POStore)",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getAllErrorMessages()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getAllStats()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getBytesWritten()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getInputStats()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getJobClient()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getJobGraph()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getNumberBytes(String)",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getNumberFailedJobs()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getNumberJobs()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getNumberRecords(String)",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getNumberSuccessfulJobs()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getOutputAlias(String)",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getOutputLocations()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getOutputNames()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getOutputStats()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getProactiveSpillCountObjects()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getProactiveSpillCountRecords()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getRecordWritten()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.getSMMSpillCount()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.isEmbedded()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.result(String)",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.setBackendException(String,Exception)",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.start()",1,1,1
"org.apache.pig.tools.pigstats.EmptyPigStats.stop()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.InputStats(String,long,long,boolean)",1,1,2
"org.apache.pig.tools.pigstats.InputStats.getBytes()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.getConf()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.getDisplayString()",1,7,7
"org.apache.pig.tools.pigstats.InputStats.getInputType()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.getLocation()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.getName()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.getNumberRecords()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.isSuccessful()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.markIndexerInput()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.markSampleInput()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.markSideFileInput()",1,1,1
"org.apache.pig.tools.pigstats.InputStats.setConf(Configuration)",1,1,1
"org.apache.pig.tools.pigstats.JobStats.JobStats(String,JobGraph)",1,1,1
"org.apache.pig.tools.pigstats.JobStats.calculateMedianValue(List<Long>)",1,2,2
"org.apache.pig.tools.pigstats.JobStats.getAlias()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getAliasLocation()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getBytesWritten()",1,2,3
"org.apache.pig.tools.pigstats.JobStats.getErrorMessage()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getException()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getFeature()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getHdfsBytesRead()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getHdfsBytesWritten()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getInputs()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getOutputSize(POStore,Configuration)",3,5,5
"org.apache.pig.tools.pigstats.JobStats.getOutputs()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.getRecordWrittern()",1,2,3
"org.apache.pig.tools.pigstats.JobStats.getState()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.isEqual(Operator)",2,1,2
"org.apache.pig.tools.pigstats.JobStats.isIndexer()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.isSampler()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.isSuccessful()",1,1,1
"org.apache.pig.tools.pigstats.JobStats.setBackendException(Exception)",1,1,1
"org.apache.pig.tools.pigstats.JobStats.setConf(Configuration)",2,1,2
"org.apache.pig.tools.pigstats.JobStats.setErrorMsg(String)",1,1,1
"org.apache.pig.tools.pigstats.JobStats.setSuccessful(boolean)",1,1,2
"org.apache.pig.tools.pigstats.OutputStats.OutputStats(String,long,long,boolean)",1,1,2
"org.apache.pig.tools.pigstats.OutputStats.getAlias()",1,2,2
"org.apache.pig.tools.pigstats.OutputStats.getBytes()",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.getConf()",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.getDisplayString()",1,4,4
"org.apache.pig.tools.pigstats.OutputStats.getFunctionName()",1,2,2
"org.apache.pig.tools.pigstats.OutputStats.getLocation()",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.getName()",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.getNumberRecords()",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.getPOStore()",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.getRecords()",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.isSuccessful()",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.iterator()",4,5,11
"org.apache.pig.tools.pigstats.OutputStats.setBytes(long)",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.setConf(Configuration)",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.setPOStore(POStore)",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.setRecords(long)",1,1,1
"org.apache.pig.tools.pigstats.OutputStats.setSuccessful(boolean)",1,1,1
"org.apache.pig.tools.pigstats.PigStats.JobComparator.compare(JobStats,JobStats)",1,1,1
"org.apache.pig.tools.pigstats.PigStats.JobGraph.getFailedJobs()",1,3,3
"org.apache.pig.tools.pigstats.PigStats.JobGraph.getJobList()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.JobGraph.getSuccessfulJobs()",1,3,3
"org.apache.pig.tools.pigstats.PigStats.JobGraph.isConnected(Operator,Operator)",4,4,5
"org.apache.pig.tools.pigstats.PigStats.JobGraph.iterator()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.JobGraph.toString()",1,2,2
"org.apache.pig.tools.pigstats.PigStats.JobGraphPrinter.JobGraphPrinter(OperatorPlan)",1,1,1
"org.apache.pig.tools.pigstats.PigStats.JobGraphPrinter.toString()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.JobGraphPrinter.visit(JobStats)",1,3,3
"org.apache.pig.tools.pigstats.PigStats.get()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getBytesWritten()",1,2,3
"org.apache.pig.tools.pigstats.PigStats.getDuration()",1,1,3
"org.apache.pig.tools.pigstats.PigStats.getErrorCode()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getErrorMessage()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getErrorThrowable()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getFeatures()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getFileName()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getHadoopVersion()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getInputStats()",1,3,3
"org.apache.pig.tools.pigstats.PigStats.getJobGraph()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getNumberBytes(String)",4,3,4
"org.apache.pig.tools.pigstats.PigStats.getNumberFailedJobs()",1,2,3
"org.apache.pig.tools.pigstats.PigStats.getNumberJobs()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getNumberRecords(String)",4,3,4
"org.apache.pig.tools.pigstats.PigStats.getNumberSuccessfulJobs()",1,2,3
"org.apache.pig.tools.pigstats.PigStats.getOutputAlias(String)",4,3,4
"org.apache.pig.tools.pigstats.PigStats.getOutputLocations()",1,2,2
"org.apache.pig.tools.pigstats.PigStats.getOutputNames()",1,2,2
"org.apache.pig.tools.pigstats.PigStats.getOutputStats()",1,3,3
"org.apache.pig.tools.pigstats.PigStats.getPigContext()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getPigProperties()",2,1,2
"org.apache.pig.tools.pigstats.PigStats.getPigVersion()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getRecordWritten()",1,2,3
"org.apache.pig.tools.pigstats.PigStats.getReturnCode()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.getScriptId()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.isSuccessful()",1,3,3
"org.apache.pig.tools.pigstats.PigStats.result(String)",5,6,6
"org.apache.pig.tools.pigstats.PigStats.setBackendException(String,Exception)",4,6,7
"org.apache.pig.tools.pigstats.PigStats.setErrorCode(int)",1,1,1
"org.apache.pig.tools.pigstats.PigStats.setErrorMessage(String)",1,1,1
"org.apache.pig.tools.pigstats.PigStats.setErrorThrowable(Throwable)",1,1,1
"org.apache.pig.tools.pigstats.PigStats.setReturnCode(int)",1,1,1
"org.apache.pig.tools.pigstats.PigStats.start()",1,1,1
"org.apache.pig.tools.pigstats.PigStats.start(PigStats)",1,1,1
"org.apache.pig.tools.pigstats.PigStats.stop()",1,5,6
"org.apache.pig.tools.pigstats.PigStatsUtil.getEmptyPigStats()",1,1,1
"org.apache.pig.tools.pigstats.PigStatsUtil.getMultiInputsCounterName(String,int)",1,1,2
"org.apache.pig.tools.pigstats.PigStatsUtil.getMultiStoreCounterName(POStore)",1,2,2
"org.apache.pig.tools.pigstats.PigStatsUtil.getPigStats(int)",1,2,2
"org.apache.pig.tools.pigstats.PigStatsUtil.getShortName(String)",1,6,6
"org.apache.pig.tools.pigstats.PigStatsUtil.isTempFile(String)",1,1,1
"org.apache.pig.tools.pigstats.PigStatsUtil.setErrorCode(int)",1,2,2
"org.apache.pig.tools.pigstats.PigStatsUtil.setErrorMessage(String)",1,2,2
"org.apache.pig.tools.pigstats.PigStatsUtil.setErrorThrowable(Throwable)",1,2,2
"org.apache.pig.tools.pigstats.PigStatsUtil.setStatsMap(Map<String, List<PigStats>>)",1,1,1
"org.apache.pig.tools.pigstats.PigStatusReporter.PigStatusReporter()",1,1,1
"org.apache.pig.tools.pigstats.PigStatusReporter.getCounter(Enum<?>)",1,2,2
"org.apache.pig.tools.pigstats.PigStatusReporter.getCounter(String,String)",1,2,2
"org.apache.pig.tools.pigstats.PigStatusReporter.getInstance()",1,1,2
"org.apache.pig.tools.pigstats.PigStatusReporter.getProgress()",1,2,2
"org.apache.pig.tools.pigstats.PigStatusReporter.incrCounter(Enum<?>,long)",1,2,2
"org.apache.pig.tools.pigstats.PigStatusReporter.incrCounter(String,String,long)",1,2,2
"org.apache.pig.tools.pigstats.PigStatusReporter.progress()",1,2,2
"org.apache.pig.tools.pigstats.PigStatusReporter.setContext(TaskContext<?>)",1,1,1
"org.apache.pig.tools.pigstats.PigStatusReporter.setStatus(String)",1,2,2
"org.apache.pig.tools.pigstats.PigStatusReporter.staticDataCleanup()",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.AliasVisitor(PhysicalPlan,List<String>,List<String>)",1,3,3
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.setAlias(PhysicalOperator)",1,4,4
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitCollectedGroup(POCollectedGroup)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitDistinct(PODistinct)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitFRJoin(POFRJoin)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitFilter(POFilter)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitLimit(POLimit)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitLoad(POLoad)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitLocalRearrange(POLocalRearrange)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitMergeCoGroup(POMergeCogroup)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitMergeJoin(POMergeJoin)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitPOForEach(POForEach)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitSkewedJoin(POSkewedJoin)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitSort(POSort)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitStream(POStream)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.AliasVisitor.visitUnion(POUnion)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.FeatureVisitor(PhysicalPlan,BitSet)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitCollectedGroup(POCollectedGroup)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitDemux(PODemux)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitDistinct(PODistinct)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitFRJoin(POFRJoin)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitMergeCoGroup(POMergeCogroup)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitMergeJoin(POMergeJoin)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitPartialAgg(POPartialAgg)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitSplit(POSplit)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.FeatureVisitor.visitStream(POStream)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.LogicalPlanFeatureVisitor(LogicalPlan,BitSet)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOCogroup)",1,5,5
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOCross)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LODistinct)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOForEach)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOJoin)",1,6,6
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOLimit)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LONative)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LORank)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOSort)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOSplit)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOStream)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.LogicalPlanFeatureVisitor.visit(LOUnion)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.PIG_PROPERTY.PIG_PROPERTY(String)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.PIG_PROPERTY.toString()",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.ScriptState(String)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.bitSetToLong(BitSet)",1,1,2
"org.apache.pig.tools.pigstats.ScriptState.emitInitialPlanNotification(OperatorPlan<?>)",1,3,3
"org.apache.pig.tools.pigstats.ScriptState.emitJobFailedNotification(JobStats)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.emitJobStartedNotification(String)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.emitJobsSubmittedNotification(int)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.emitLaunchCompletedNotification(int)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.emitLaunchStartedNotification(int)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.emitOutputCompletedNotification(OutputStats)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.emitProgressUpdatedNotification(int)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.emitjobFinishedNotification(JobStats)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.featureLongToString(long)",2,5,5
"org.apache.pig.tools.pigstats.ScriptState.get()",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.getAllListeners()",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.getCommandLine()",1,1,2
"org.apache.pig.tools.pigstats.ScriptState.getFileName()",1,1,2
"org.apache.pig.tools.pigstats.ScriptState.getHadoopVersion()",1,2,3
"org.apache.pig.tools.pigstats.ScriptState.getId()",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.getPigContext()",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.getPigVersion()",1,4,5
"org.apache.pig.tools.pigstats.ScriptState.getScript()",1,1,2
"org.apache.pig.tools.pigstats.ScriptState.getScriptFeatures()",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.registerListener(PigProgressNotificationListener)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.setCommandLine(String)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.setFileName(String)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.setPigContext(PigContext)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.setScript(BufferedReader)",1,3,3
"org.apache.pig.tools.pigstats.ScriptState.setScript(File)",1,3,4
"org.apache.pig.tools.pigstats.ScriptState.setScript(String)",2,4,5
"org.apache.pig.tools.pigstats.ScriptState.setScriptFeatures(LogicalPlan)",1,2,2
"org.apache.pig.tools.pigstats.ScriptState.start(ScriptState)",1,1,1
"org.apache.pig.tools.pigstats.ScriptState.start(String,PigContext)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.MRJobStats(String,JobGraph)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.TaskStat.TaskStat(int,long,long,long,long)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.accept(PlanVisitor)",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.addCounters(Job)",1,5,5
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.addInputStatistics()",5,7,8
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.addMapReduceStatistics(Iterator<TaskReport>,Iterator<TaskReport>)",1,7,7
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.addMapReduceStatistics(Job)",1,3,3
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.addOneInputStats(String,int)",1,3,3
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.addOneOutputStats(POStore)",1,3,4
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.addOutputStatistics()",7,8,12
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.appendStat(long,StringBuilder)",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getAlias()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getAliasLocation()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getAvgMapTime()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getAvgREduceTime()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getDisplayString()",1,6,6
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getFeature()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getHadoopCounters()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getJobId()",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getMapInputRecords()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getMapOutputRecords()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getMaxMapTime()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getMaxReduceTime()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getMinMapTime()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getMinReduceTime()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getMultiInputCounters()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getMultiStoreCounters()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getNumberMaps()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getNumberReduces()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getProactiveSpillCountObjects()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getProactiveSpillCountRecs()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getReduceInputRecords()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getReduceOutputRecords()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getSMMSpillCount()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.getTaskStat(Iterator<TaskReport>)",1,2,4
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.setAlias(MapReduceOper)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.setConf(Configuration)",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.setId(JobID)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.setMapStat(int,long,long,long,long)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRJobStats.setReduceStat(int,long,long,long,long)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.accumulateStats(JobControl)",1,5,5
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.addFailedJobStats(SimplePigStats,Job)",2,2,3
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.addJobStats(Job)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.addNativeJobStats(PigStats,NativeMapReduceOper,boolean)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.addNativeJobStats(PigStats,NativeMapReduceOper,boolean,Exception)",2,3,4
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.addSuccessJobStats(SimplePigStats,Job)",2,2,3
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.displayStatistics()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.getMultiStoreCount(Job,JobClient,String)",1,3,3
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.setBackendException(Job,Exception)",2,1,2
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.startCollection(PigContext,JobClient,JobControlCompiler,MROperPlan)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.stopCollection(boolean)",1,4,4
"org.apache.pig.tools.pigstats.mapreduce.MRPigStatsUtil.updateJobMroMap(Map<Job, MapReduceOper>)",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.MRScriptState(String)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.addSettingsToConf(MapReduceOper,Configuration)",1,11,11
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.addWorkflowAdjacenciesToConf(MROperPlan,Configuration)",1,4,4
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.get()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.getAlias(MapReduceOper)",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.getAliasLocation(MapReduceOper)",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.getPigFeature(MapReduceOper)",1,16,17
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.setAlias(MapReduceOper)",1,4,4
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.setJobParents(MapReduceOper,Configuration)",3,6,7
"org.apache.pig.tools.pigstats.mapreduce.MRScriptState.setPigFeature(MapReduceOper,Configuration)",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.JobGraphBuilder.JobGraphBuilder(MROperPlan)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.JobGraphBuilder.visitMROp(MapReduceOper)",1,4,4
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.SimplePigStats()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.addMRJobStats(Job)",2,2,2
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.addMRJobStatsForNative(NativeMapReduceOper)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.display()",3,11,13
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.finish()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.getAllErrorMessages()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.getAllStats()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.getJobClient()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.getJobControlCompiler()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.getProactiveSpillCountObjects()",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.getProactiveSpillCountRecords()",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.getSMMSpillCount()",1,2,2
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.initialize(PigContext,JobClient,JobControlCompiler,MROperPlan)",2,3,5
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.isEmbedded()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.isInitialized()",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.isJobSeen(Job)",1,1,1
"org.apache.pig.tools.pigstats.mapreduce.SimplePigStats.mapMROperToJob(MapReduceOper,Job)",1,3,3
"org.apache.pig.tools.pigstats.tez.TezDAGStats.JobGraphBuilder.JobGraphBuilder(TezOperPlan,TezDAGScriptInfo)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.JobGraphBuilder.getJobPlan()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.JobGraphBuilder.getTezVertexStatsMap()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.JobGraphBuilder.visit()",1,3,3
"org.apache.pig.tools.pigstats.tez.TezDAGStats.JobGraphBuilder.visitTezOp(TezOperator)",1,5,5
"org.apache.pig.tools.pigstats.tez.TezDAGStats.TezDAGStats(String,JobGraph,Map<String, TezVertexStats>)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.accept(PlanVisitor)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezDAGStats.accumulateStats(TezJob)",4,18,18
"org.apache.pig.tools.pigstats.tez.TezDAGStats.covertToHadoopCounters(TezCounters)",1,3,3
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getAvgMapTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getAvgREduceTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getDisplayString()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getHadoopCounters()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getJobId()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getMapInputRecords()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getMapOutputRecords()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getMaxMapTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getMaxReduceTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getMinMapTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getMinReduceTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getMultiInputCounters()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getMultiStoreCounters()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getNumberMaps()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getNumberReduces()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getProactiveSpillCountObjects()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getProactiveSpillCountRecs()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getReduceInputRecords()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getReduceOutputRecords()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getSMMSpillCount()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.getVertexStats(String)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.setAlias(TezDAGScriptInfo)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezDAGStats.setJobId(String)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.DAGGraphBuilder.DAGGraphBuilder(TezPlanContainer)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.DAGGraphBuilder.visitTezPlanContainerNode(TezPlanContainerNode)",1,4,4
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.TezPigScriptStats(PigContext)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.accumulateStats(TezJob)",2,9,10
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.addTezJobStatsForNative(String,NativeTezOper,boolean)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.display()",1,11,13
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.finish()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.getAllErrorMessages()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.getAllStats()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.getJobClient()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.getProactiveSpillCountObjects()",1,2,2
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.getProactiveSpillCountRecords()",1,2,2
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.getSMMSpillCount()",1,2,2
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.getVertexStats(String,String)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.initialize(TezPlanContainer)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezPigScriptStats.isEmbedded()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.DAGAliasVisitor.DAGAliasVisitor(TezOperPlan)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.DAGAliasVisitor.visit()",1,4,4
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.DAGAliasVisitor.visitTezOp(TezOperator)",2,20,20
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.TezDAGScriptInfo(TezOperPlan)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.getAlias()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.getAlias(TezOperator)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.getAliasLocation()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.getAliasLocation(TezOperator)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.getPigFeatures()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.getPigFeatures(TezOperator)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezDAGScriptInfo.initialize()",1,2,2
"org.apache.pig.tools.pigstats.tez.TezScriptState.TezScriptState(String)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.addDAGSettingsToConf(Configuration)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.addVertexSettingsToConf(String,TezOperator,Configuration)",1,8,8
"org.apache.pig.tools.pigstats.tez.TezScriptState.addWorkflowAdjacenciesToConf(TezOperPlan,Configuration)",1,4,4
"org.apache.pig.tools.pigstats.tez.TezScriptState.dagCompletedNotification(String,TezDAGStats)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezScriptState.dagLaunchNotification(String,OperatorPlan<?>,int)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezScriptState.dagProgressNotification(String,int,int)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezScriptState.dagStartedNotification(String,String)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezScriptState.get()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.getDAGScriptInfo(String)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.registerListener(PigProgressNotificationListener)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezScriptState.setDAGScriptInfo(TezPlanContainerNode)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezScriptState.setJobParents(String,TezOperator,Configuration)",2,5,6
"org.apache.pig.tools.pigstats.tez.TezScriptState.setPigFeature(String,TezOperator,Configuration)",2,2,3
"org.apache.pig.tools.pigstats.tez.TezVertexStats.TezVertexStats(String,JobGraph,boolean)",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.accept(PlanVisitor)",1,2,2
"org.apache.pig.tools.pigstats.tez.TezVertexStats.accumulateStats(VertexStatus,int)",1,12,13
"org.apache.pig.tools.pigstats.tez.TezVertexStats.addInputStatistics()",2,7,9
"org.apache.pig.tools.pigstats.tez.TezVertexStats.addOutputStatistics()",4,11,16
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getAvgMapTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getAvgREduceTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getCounters()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getDisplayString()",1,5,5
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getHadoopCounters()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getJobId()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getMapInputRecords()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getMapOutputRecords()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getMaxMapTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getMaxReduceTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getMinMapTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getMinReduceTime()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getMultiInputCounters()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getMultiStoreCounters()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getNumberMaps()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getNumberReduces()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getParallelism()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getProactiveSpillCountObjects()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getProactiveSpillCountRecs()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getReduceInputRecords()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getReduceOutputRecords()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.getSMMSpillCount()",1,1,1
"org.apache.pig.tools.pigstats.tez.TezVertexStats.hasLoadOrStore()",2,4,5
"org.apache.pig.tools.pigstats.tez.TezVertexStats.setConf(Configuration)",1,2,2
"org.apache.pig.tools.streams.StreamGenerator.StreamGenerator()",1,1,1
"org.apache.pig.tools.streams.StreamGenerator.actionPerformed(ActionEvent)",1,6,8
"org.apache.pig.tools.streams.StreamGenerator.addWidgets()",1,1,1
"org.apache.pig.tools.streams.StreamGenerator.createAndShowGUI()",1,1,1
"org.apache.pig.tools.streams.StreamGenerator.main(String[])",1,1,1
"org.apache.pig.tools.timer.PerformanceTimer.PerformanceTimer(String)",1,1,1
"org.apache.pig.tools.timer.PerformanceTimer.print(PrintStream)",2,3,3
"org.apache.pig.tools.timer.PerformanceTimer.start()",1,1,1
"org.apache.pig.tools.timer.PerformanceTimer.stop()",1,1,1
"org.apache.pig.tools.timer.PerformanceTimerFactory.PerformanceTimerFactory()",1,1,1
"org.apache.pig.tools.timer.PerformanceTimerFactory.dumpTimers()",1,1,1
"org.apache.pig.tools.timer.PerformanceTimerFactory.dumpTimers(PrintStream)",1,2,2
"org.apache.pig.tools.timer.PerformanceTimerFactory.getPerfTimerFactory()",1,1,2
"org.apache.pig.tools.timer.PerformanceTimerFactory.getTimer(String)",1,2,2
"org.apache.pig.validator.BlackAndWhitelistFilter.BlackAndWhitelistFilter(PigContext)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistFilter.BlackAndWhitelistFilter(PigServer)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistFilter.init()",4,5,6
"org.apache.pig.validator.BlackAndWhitelistFilter.validate(Command)",3,4,4
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistValidator(PigContext,OperatorPlan)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.BlackAndWhitelistVisitor(OperatorPlan)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.check(String)",3,5,7
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.init()",4,5,6
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOCogroup)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOCross)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOCube)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LODistinct)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOFilter)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOForEach)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOGenerate)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOInnerLoad)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOJoin)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOLimit)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOLoad)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LONative)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LORank)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOSort)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOSplit)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOSplitOutput)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOStore)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOStream)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.BlackAndWhitelistVisitor.visit(LOUnion)",1,1,1
"org.apache.pig.validator.BlackAndWhitelistValidator.validate()",1,1,1

