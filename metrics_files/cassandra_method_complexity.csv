Method,ev(G),iv(G),v(G)
"null.afterExecute(Runnable,Throwable)",1,1,1
"null.apply(IMutation,Multimap<InetAddress, InetAddress>,IWriteResponseHandler,String,ConsistencyLevel)",1,2,2
"null.compare(DecoratedKey,DecoratedKey)",1,1,1
"null.compare(IColumnIterator,IColumnIterator)",1,1,1
"null.compare(InetAddress,InetAddress)",1,1,1
"null.compare(ReplayPosition,ReplayPosition)",2,2,2
"null.fromByteArray(ByteBuffer)",1,1,1
"null.fromString(String)",1,1,1
"null.get()",1,1,1
"null.initialValue()",1,1,1
"null.rejectedExecution(Runnable,ThreadPoolExecutor)",4,4,5
"null.run()",2,3,4
"null.toByteArray(Token<BigInteger>)",1,1,1
"null.toByteArray(Token<String>)",1,1,1
"null.toByteArray(Token<byte[]>)",1,1,1
"null.toString(Token<BigInteger>)",1,1,1
"null.toString(Token<String>)",1,1,1
"null.toString(Token<byte[]>)",1,1,1
"null.validate(String)",1,1,2
"org.apache.cassandra.auth.AllowAllAuthenticator.authenticate(Map<? extends CharSequence, ? extends CharSequence>)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.defaultUser()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.validateConfiguration()",1,1,1
"org.apache.cassandra.auth.AllowAllAuthority.authorize(AuthenticatedUser,List<Object>)",1,1,1
"org.apache.cassandra.auth.AllowAllAuthority.validateConfiguration()",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.AuthenticatedUser(String)",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.AuthenticatedUser(String,Set<String>)",1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.toString()",1,1,1
"org.apache.cassandra.auth.Resources.toString(List<Object>)",1,3,3
"org.apache.cassandra.auth.SimpleAuthenticator.authenticate(Map<? extends CharSequence, ? extends CharSequence>)",7,9,13
"org.apache.cassandra.auth.SimpleAuthenticator.authenticationErrorMessage(PasswordMode,String)",1,1,1
"org.apache.cassandra.auth.SimpleAuthenticator.defaultUser()",1,1,1
"org.apache.cassandra.auth.SimpleAuthenticator.validateConfiguration()",2,2,2
"org.apache.cassandra.auth.SimpleAuthority.authorize(AuthenticatedUser,List<Object>)",14,17,21
"org.apache.cassandra.auth.SimpleAuthority.validateConfiguration()",2,2,2
"org.apache.cassandra.cache.AutoSavingCache.AutoSavingCache(ICache<K, V>,String,String,CacheType)",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.Writer.Writer(String,String)",1,3,4
"org.apache.cassandra.cache.AutoSavingCache.Writer.getCompactionInfo()",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.Writer.saveCache()",3,4,5
"org.apache.cassandra.cache.AutoSavingCache.getAdjustedCacheSize(long)",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.getCachePath()",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.getWriter()",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.readSaved()",3,6,6
"org.apache.cassandra.cache.AutoSavingCache.reduceCacheSize()",1,2,2
"org.apache.cassandra.cache.AutoSavingCache.scheduleSaving(int)",1,3,3
"org.apache.cassandra.cache.AutoSavingCache.submitWrite()",1,1,1
"org.apache.cassandra.cache.AutoSavingCache.updateCacheSize(long)",1,4,4
"org.apache.cassandra.cache.AutoSavingKeyCache.AutoSavingKeyCache(ICache<K, V>,String,String)",1,1,1
"org.apache.cassandra.cache.AutoSavingKeyCache.getConfiguredCacheSize(CFMetaData)",1,2,2
"org.apache.cassandra.cache.AutoSavingKeyCache.translateKey(K)",1,1,1
"org.apache.cassandra.cache.AutoSavingRowCache.AutoSavingRowCache(ICache<K, V>,String,String)",1,1,1
"org.apache.cassandra.cache.AutoSavingRowCache.getConfiguredCacheSize(CFMetaData)",1,2,2
"org.apache.cassandra.cache.AutoSavingRowCache.translateKey(K)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.ConcurrentLinkedHashCache(ConcurrentLinkedHashMap<K, V>)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.capacity()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.clear()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.create(int,String,String)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.get(K)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.isEmpty()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.isPutCopying()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.keySet()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.put(K,V)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.remove(K)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.setCapacity(int)",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.size()",1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCacheProvider.create(int,String,String)",1,1,1
"org.apache.cassandra.cache.FreeableMemory.FreeableMemory(long)",1,1,1
"org.apache.cassandra.cache.FreeableMemory.finalize()",1,1,1
"org.apache.cassandra.cache.FreeableMemory.free()",1,1,1
"org.apache.cassandra.cache.FreeableMemory.getValidByte(long)",1,1,1
"org.apache.cassandra.cache.FreeableMemory.reference()",4,2,4
"org.apache.cassandra.cache.FreeableMemory.unreference()",1,2,2
"org.apache.cassandra.cache.InstrumentingCache.InstrumentingCache(ICache<K, V>,String,String)",1,2,3
"org.apache.cassandra.cache.InstrumentingCache.clear()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.get(K)",1,2,2
"org.apache.cassandra.cache.InstrumentingCache.getCapacity()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getHits()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getInternal(K)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getKeySet()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getRecentHitRate()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getRequests()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getSize()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.isCapacitySetManually()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.isPutCopying()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.put(K,V)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.remove(K)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.setCapacity(int)",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.size()",1,1,1
"org.apache.cassandra.cache.InstrumentingCache.updateCapacity(int)",1,1,1
"org.apache.cassandra.cache.SerializingCache.SerializingCache(int,ICompactSerializer3<V>,String,String)",1,1,1
"org.apache.cassandra.cache.SerializingCache.capacity()",1,1,1
"org.apache.cassandra.cache.SerializingCache.clear()",1,1,1
"org.apache.cassandra.cache.SerializingCache.deserialize(FreeableMemory)",1,2,2
"org.apache.cassandra.cache.SerializingCache.get(Object)",3,1,3
"org.apache.cassandra.cache.SerializingCache.isEmpty()",1,1,1
"org.apache.cassandra.cache.SerializingCache.isPutCopying()",1,1,1
"org.apache.cassandra.cache.SerializingCache.keySet()",1,1,1
"org.apache.cassandra.cache.SerializingCache.put(K,V)",2,2,3
"org.apache.cassandra.cache.SerializingCache.remove(K)",1,2,2
"org.apache.cassandra.cache.SerializingCache.serialize(V)",2,1,4
"org.apache.cassandra.cache.SerializingCache.setCapacity(int)",1,1,1
"org.apache.cassandra.cache.SerializingCache.size()",1,1,1
"org.apache.cassandra.cache.SerializingCacheProvider.SerializingCacheProvider()",1,1,2
"org.apache.cassandra.cache.SerializingCacheProvider.create(int,String,String)",1,1,1
"org.apache.cassandra.cli.CliClient.CfDefNamesComparator.compare(CfDef,CfDef)",1,1,1
"org.apache.cassandra.cli.CliClient.CliClient(CliSessionState,Client)",1,1,1
"org.apache.cassandra.cli.CliClient.Function.Function(AbstractType)",1,1,1
"org.apache.cassandra.cli.CliClient.Function.getFunctionNames()",1,2,3
"org.apache.cassandra.cli.CliClient.Function.getValidator()",1,1,1
"org.apache.cassandra.cli.CliClient.KsDefNamesComparator.compare(KsDef,KsDef)",1,1,1
"org.apache.cassandra.cli.CliClient.cleanupAndExit()",1,1,1
"org.apache.cassandra.cli.CliClient.columnNameAsByteArray(String,CfDef)",1,1,1
"org.apache.cassandra.cli.CliClient.columnNameAsByteArray(String,String)",1,1,1
"org.apache.cassandra.cli.CliClient.columnNameAsBytes(String,CfDef)",1,1,1
"org.apache.cassandra.cli.CliClient.columnNameAsBytes(String,String)",1,1,1
"org.apache.cassandra.cli.CliClient.columnValueAsBytes(ByteBuffer,String,String)",3,4,4
"org.apache.cassandra.cli.CliClient.convertValueByFunction(Tree,CfDef,ByteBuffer)",1,1,1
"org.apache.cassandra.cli.CliClient.convertValueByFunction(Tree,CfDef,ByteBuffer,boolean)",5,8,8
"org.apache.cassandra.cli.CliClient.describeKeySpace(String,KsDef)",4,22,27
"org.apache.cassandra.cli.CliClient.doGetCounter(ByteBuffer,ColumnPath)",1,3,3
"org.apache.cassandra.cli.CliClient.doSlice(String,ByteBuffer,String,byte[],int)",1,12,12
"org.apache.cassandra.cli.CliClient.executeAddColumnFamily(Tree)",2,4,5
"org.apache.cassandra.cli.CliClient.executeAddKeySpace(Tree)",2,3,4
"org.apache.cassandra.cli.CliClient.executeAssumeStatement(Tree)",6,7,8
"org.apache.cassandra.cli.CliClient.executeCLIStatement(String)",2,6,35
"org.apache.cassandra.cli.CliClient.executeConnect(Tree)",1,3,3
"org.apache.cassandra.cli.CliClient.executeConsistencyLevelStatement(Tree)",2,2,3
"org.apache.cassandra.cli.CliClient.executeCount(Tree)",2,4,5
"org.apache.cassandra.cli.CliClient.executeDelColumnFamily(Tree)",2,2,3
"org.apache.cassandra.cli.CliClient.executeDelKeySpace(Tree)",2,1,3
"org.apache.cassandra.cli.CliClient.executeDelete(Tree)",3,13,17
"org.apache.cassandra.cli.CliClient.executeDescribeCluster()",2,4,5
"org.apache.cassandra.cli.CliClient.executeDescribeKeySpace(Tree)",3,3,4
"org.apache.cassandra.cli.CliClient.executeDropIndex(Tree)",6,8,9
"org.apache.cassandra.cli.CliClient.executeGet(Tree)",9,17,19
"org.apache.cassandra.cli.CliClient.executeGetWithConditions(Tree)",5,8,10
"org.apache.cassandra.cli.CliClient.executeHelp(Tree)",4,4,4
"org.apache.cassandra.cli.CliClient.executeIncr(Tree,long)",5,8,10
"org.apache.cassandra.cli.CliClient.executeList(Tree)",6,11,12
"org.apache.cassandra.cli.CliClient.executeSet(Tree)",7,10,12
"org.apache.cassandra.cli.CliClient.executeShowClusterName()",2,1,2
"org.apache.cassandra.cli.CliClient.executeShowKeySpaces()",2,2,3
"org.apache.cassandra.cli.CliClient.executeShowSchema(Tree)",2,4,5
"org.apache.cassandra.cli.CliClient.executeShowVersion()",2,1,2
"org.apache.cassandra.cli.CliClient.executeTruncate(String)",2,4,5
"org.apache.cassandra.cli.CliClient.executeUpdateColumnFamily(Tree)",3,4,6
"org.apache.cassandra.cli.CliClient.executeUpdateKeySpace(Tree)",2,3,4
"org.apache.cassandra.cli.CliClient.executeUseKeySpace(Tree)",3,10,13
"org.apache.cassandra.cli.CliClient.formatColumnName(String,String,ByteBuffer)",1,1,1
"org.apache.cassandra.cli.CliClient.formatSubcolumnName(String,String,ByteBuffer)",1,1,1
"org.apache.cassandra.cli.CliClient.getBytesAccordingToType(String,AbstractType)",1,2,3
"org.apache.cassandra.cli.CliClient.getCFColumnMetaFromTree(CfDef,Tree)",2,9,9
"org.apache.cassandra.cli.CliClient.getCfDef(KsDef,String)",3,2,3
"org.apache.cassandra.cli.CliClient.getCfDef(String)",1,1,1
"org.apache.cassandra.cli.CliClient.getCfDef(String,String)",3,2,3
"org.apache.cassandra.cli.CliClient.getColumnDefByName(CfDef,ByteBuffer)",3,2,3
"org.apache.cassandra.cli.CliClient.getColumnName(String,Tree)",1,2,2
"org.apache.cassandra.cli.CliClient.getFormatType(String)",1,3,3
"org.apache.cassandra.cli.CliClient.getHelp()",1,1,2
"org.apache.cassandra.cli.CliClient.getIndexTypeFromString(String)",2,2,4
"org.apache.cassandra.cli.CliClient.getKSMetaData(String)",1,2,2
"org.apache.cassandra.cli.CliClient.getKeyAsBytes(String,Tree)",2,2,2
"org.apache.cassandra.cli.CliClient.getKeyComparatorForCF(String)",1,2,2
"org.apache.cassandra.cli.CliClient.getKeySpace()",1,1,2
"org.apache.cassandra.cli.CliClient.getStrategyOptionsFromTree(Tree)",1,3,3
"org.apache.cassandra.cli.CliClient.getSubColumnName(String,Tree)",1,2,2
"org.apache.cassandra.cli.CliClient.getTypeByFunction(String)",1,2,2
"org.apache.cassandra.cli.CliClient.getUsername()",1,1,2
"org.apache.cassandra.cli.CliClient.getValidatorForValue(CfDef,byte[])",4,5,5
"org.apache.cassandra.cli.CliClient.hasKeySpace()",2,2,2
"org.apache.cassandra.cli.CliClient.isCounterCF(CfDef)",2,3,3
"org.apache.cassandra.cli.CliClient.normaliseType(String,String)",2,2,2
"org.apache.cassandra.cli.CliClient.printBanner()",1,1,1
"org.apache.cassandra.cli.CliClient.printSliceList(CfDef,List<KeySlice>)",1,12,13
"org.apache.cassandra.cli.CliClient.setKeySpace(String)",1,1,1
"org.apache.cassandra.cli.CliClient.setUsername(String)",1,1,1
"org.apache.cassandra.cli.CliClient.showColumnFamily(StringBuilder,CfDef)",1,7,7
"org.apache.cassandra.cli.CliClient.showColumnMeta(StringBuilder,CfDef,ColumnDef)",1,2,3
"org.apache.cassandra.cli.CliClient.showKeyspace(StringBuilder,KsDef)",1,5,5
"org.apache.cassandra.cli.CliClient.subColumnNameAsByteArray(String,CfDef)",1,1,1
"org.apache.cassandra.cli.CliClient.subColumnNameAsBytes(String,CfDef)",1,2,2
"org.apache.cassandra.cli.CliClient.subColumnNameAsBytes(String,String)",1,1,1
"org.apache.cassandra.cli.CliClient.updateCfDefAttributes(Tree,CfDef)",5,3,26
"org.apache.cassandra.cli.CliClient.updateColumnMetaData(CfDef,ByteBuffer,String)",3,2,3
"org.apache.cassandra.cli.CliClient.updateKsDefAttributes(Tree,KsDef)",4,7,10
"org.apache.cassandra.cli.CliClient.validateSchemaIsSettled(String)",4,9,10
"org.apache.cassandra.cli.CliClient.writeAttr(StringBuilder,boolean,String,Boolean)",1,1,1
"org.apache.cassandra.cli.CliClient.writeAttr(StringBuilder,boolean,String,Number)",1,1,1
"org.apache.cassandra.cli.CliClient.writeAttr(StringBuilder,boolean,String,String)",1,1,1
"org.apache.cassandra.cli.CliClient.writeAttrRaw(StringBuilder,boolean,String,String)",1,1,2
"org.apache.cassandra.cli.CliCompiler.ANTLRNoCaseStringStream.ANTLRNoCaseStringStream(String)",1,1,1
"org.apache.cassandra.cli.CliCompiler.ANTLRNoCaseStringStream.LA(int)",3,1,3
"org.apache.cassandra.cli.CliCompiler.compileQuery(String)",1,2,2
"org.apache.cassandra.cli.CliCompiler.getColumn(Tree,int)",1,1,1
"org.apache.cassandra.cli.CliCompiler.getColumnFamily(String,List<CfDef>)",4,3,6
"org.apache.cassandra.cli.CliCompiler.getColumnFamily(Tree,List<CfDef>)",1,1,1
"org.apache.cassandra.cli.CliCompiler.getKey(Tree)",1,1,1
"org.apache.cassandra.cli.CliCompiler.getKeySpace(String,List<KsDef>)",4,3,6
"org.apache.cassandra.cli.CliCompiler.getKeySpace(Tree,List<KsDef>)",1,1,1
"org.apache.cassandra.cli.CliCompiler.numColumnSpecifiers(Tree)",1,1,1
"org.apache.cassandra.cli.CliCompleter.CliCompleter()",1,1,1
"org.apache.cassandra.cli.CliCompleter.getKeyspaceCommands()",1,1,1
"org.apache.cassandra.cli.CliMain.connect(String,int)",3,15,17
"org.apache.cassandra.cli.CliMain.disconnect()",1,2,2
"org.apache.cassandra.cli.CliMain.evaluateFileStatements(BufferedReader)",5,5,9
"org.apache.cassandra.cli.CliMain.getPrompt(CliClient)",1,1,1
"org.apache.cassandra.cli.CliMain.isConnected()",2,2,2
"org.apache.cassandra.cli.CliMain.main(String[])",5,13,17
"org.apache.cassandra.cli.CliMain.processStatement(String)",1,6,7
"org.apache.cassandra.cli.CliMain.updateCompletor(Set<String>)",1,3,3
"org.apache.cassandra.cli.CliOptions.CLIOptions.addOption(String,String,String)",1,1,1
"org.apache.cassandra.cli.CliOptions.CLIOptions.addOption(String,String,String,String)",1,1,1
"org.apache.cassandra.cli.CliOptions.printUsage()",1,1,1
"org.apache.cassandra.cli.CliOptions.processArgs(CliSessionState,String[])",1,12,16
"org.apache.cassandra.cli.CliSessionState.CliSessionState()",1,1,1
"org.apache.cassandra.cli.CliSessionState.getNodeProbe()",1,2,2
"org.apache.cassandra.cli.CliSessionState.inFileMode()",1,1,1
"org.apache.cassandra.cli.CliSessionState.setErr(PrintStream)",1,1,1
"org.apache.cassandra.cli.CliSessionState.setOut(PrintStream)",1,1,1
"org.apache.cassandra.cli.CliUtils.escapeSQLString(String)",1,1,1
"org.apache.cassandra.cli.CliUtils.getCfNamesByKeySpace(KsDef)",1,2,2
"org.apache.cassandra.cli.CliUtils.getIndexOperator(String)",6,5,6
"org.apache.cassandra.cli.CliUtils.unescapeSQLString(String)",1,3,3
"org.apache.cassandra.client.RingCache.RingCache(String,IPartitioner<?>,String,int)",1,2,2
"org.apache.cassandra.client.RingCache.getEndpoint(ByteBuffer)",1,1,1
"org.apache.cassandra.client.RingCache.getEndpoint(Range)",1,1,1
"org.apache.cassandra.client.RingCache.getRange(ByteBuffer)",3,2,3
"org.apache.cassandra.client.RingCache.refreshEndpointMap()",4,5,7
"org.apache.cassandra.concurrent.AIOExecutorService.AIOExecutorService(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.awaitTermination(long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.execute(Runnable)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.invokeAll(Collection<? extends Callable<T>>)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.invokeAll(Collection<? extends Callable<T>>,long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.invokeAny(Collection<? extends Callable<T>>)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.invokeAny(Collection<? extends Callable<T>>,long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.isShutdown()",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.isTerminated()",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.shutdown()",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.shutdownNow()",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.submit(Callable<T>)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.submit(Runnable)",1,1,1
"org.apache.cassandra.concurrent.AIOExecutorService.submit(Runnable,T)",1,1,1
"org.apache.cassandra.concurrent.Context.Context()",1,1,1
"org.apache.cassandra.concurrent.Context.get(Object)",1,1,1
"org.apache.cassandra.concurrent.Context.put(Object,Object)",1,1,1
"org.apache.cassandra.concurrent.Context.remove(Object)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(String,int)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.afterExecute(Runnable,Throwable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.logExceptionsAfterExecute(Runnable,Throwable)",2,6,7
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onFinalAccept(Runnable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onFinalRejection(Runnable)",1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onInitialRejection(Runnable)",1,1,1
"org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutor.JMXConfigurableThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(Stage)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String,String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String,int)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",1,1,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getCompletedTasks()",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getCurrentlyBlockedTasks()",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getPendingTasks()",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getTotalBlockedTasks()",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onFinalAccept(Runnable)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onFinalRejection(Runnable)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onInitialRejection(Runnable)",1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.shutdown()",1,2,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.shutdownNow()",1,2,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.unregisterMBean()",1,1,2
"org.apache.cassandra.concurrent.NamedThreadFactory.NamedThreadFactory(String)",1,1,1
"org.apache.cassandra.concurrent.NamedThreadFactory.NamedThreadFactory(String,int)",1,1,1
"org.apache.cassandra.concurrent.NamedThreadFactory.newThread(Runnable)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.LoggingScheduledFuture(RunnableScheduledFuture<V>)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.cancel(boolean)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.compareTo(Delayed)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.get()",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.get(long,TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.getDelay(TimeUnit)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.isCancelled()",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.isDone()",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.isPeriodic()",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.LoggingScheduledFuture.run()",1,3,3
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.RetryingScheduledThreadPoolExecutor(String)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.RetryingScheduledThreadPoolExecutor(String,int)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.RetryingScheduledThreadPoolExecutor(int,String,int)",1,1,1
"org.apache.cassandra.concurrent.RetryingScheduledThreadPoolExecutor.decorateTask(Runnable,RunnableScheduledFuture<V>)",1,1,1
"org.apache.cassandra.concurrent.Stage.getJmxName()",1,2,2
"org.apache.cassandra.concurrent.Stage.getJmxType()",4,2,4
"org.apache.cassandra.concurrent.StageManager.getStage(Stage)",1,1,1
"org.apache.cassandra.concurrent.StageManager.multiThreadedConfigurableStage(Stage,int)",1,1,1
"org.apache.cassandra.concurrent.StageManager.multiThreadedStage(Stage,int)",1,1,1
"org.apache.cassandra.concurrent.StageManager.shutdownNow()",1,2,2
"org.apache.cassandra.config.CFMetaData.CFMetaData(String,String,ColumnFamilyType,AbstractType,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.CFMetaData(String,String,ColumnFamilyType,AbstractType,AbstractType,int)",1,1,1
"org.apache.cassandra.config.CFMetaData.addDefaultIndexNames(CfDef)",2,4,6
"org.apache.cassandra.config.CFMetaData.apply(CfDef)",11,18,23
"org.apache.cassandra.config.CFMetaData.applyImplicitDefaults(CfDef)",1,12,12
"org.apache.cassandra.config.CFMetaData.columnMetadata(Map<ByteBuffer, ColumnDefinition>)",1,1,1
"org.apache.cassandra.config.CFMetaData.comment(String)",1,1,1
"org.apache.cassandra.config.CFMetaData.convertToAvro(CFMetaData)",1,5,5
"org.apache.cassandra.config.CFMetaData.convertToAvro(CfDef)",1,4,4
"org.apache.cassandra.config.CFMetaData.convertToThrift(CFMetaData)",1,3,3
"org.apache.cassandra.config.CFMetaData.copyOpts(CFMetaData,CFMetaData)",1,1,1
"org.apache.cassandra.config.CFMetaData.defaultValidator(AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.deflate()",1,3,3
"org.apache.cassandra.config.CFMetaData.enforceCommentNotNull(CharSequence)",1,2,2
"org.apache.cassandra.config.CFMetaData.enforceSubccDefault(ColumnFamilyType,AbstractType)",1,1,3
"org.apache.cassandra.config.CFMetaData.equals(Object)",3,3,4
"org.apache.cassandra.config.CFMetaData.fixMaxId()",1,2,2
"org.apache.cassandra.config.CFMetaData.fromThrift(CfDef)",2,14,15
"org.apache.cassandra.config.CFMetaData.gcGraceSeconds(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.getCF(Integer)",1,1,1
"org.apache.cassandra.config.CFMetaData.getColumnDefinition(ByteBuffer)",1,1,1
"org.apache.cassandra.config.CFMetaData.getColumnDefinitionForIndex(String)",3,2,3
"org.apache.cassandra.config.CFMetaData.getColumn_metadata()",1,1,1
"org.apache.cassandra.config.CFMetaData.getComment()",1,1,1
"org.apache.cassandra.config.CFMetaData.getComparatorFor(ByteBuffer)",1,1,2
"org.apache.cassandra.config.CFMetaData.getDefaultIndexName(String,AbstractType,ByteBuffer)",1,1,1
"org.apache.cassandra.config.CFMetaData.getDefaultValidator()",1,1,1
"org.apache.cassandra.config.CFMetaData.getGcGraceSeconds()",1,1,1
"org.apache.cassandra.config.CFMetaData.getId(String,String)",1,1,1
"org.apache.cassandra.config.CFMetaData.getKeyCacheSavePeriodInSeconds()",1,1,1
"org.apache.cassandra.config.CFMetaData.getKeyCacheSize()",1,1,1
"org.apache.cassandra.config.CFMetaData.getKeyName()",1,1,2
"org.apache.cassandra.config.CFMetaData.getKeyValidator()",1,1,1
"org.apache.cassandra.config.CFMetaData.getMaxCompactionThreshold()",1,1,1
"org.apache.cassandra.config.CFMetaData.getMemtableFlushAfterMins()",1,1,1
"org.apache.cassandra.config.CFMetaData.getMemtableOperationsInMillions()",1,1,1
"org.apache.cassandra.config.CFMetaData.getMemtableThroughputInMb()",1,1,1
"org.apache.cassandra.config.CFMetaData.getMergeShardsChance()",1,1,1
"org.apache.cassandra.config.CFMetaData.getMinCompactionThreshold()",1,1,1
"org.apache.cassandra.config.CFMetaData.getReadRepairChance()",1,1,1
"org.apache.cassandra.config.CFMetaData.getReplicateOnWrite()",1,1,1
"org.apache.cassandra.config.CFMetaData.getRowCacheProvider()",1,1,1
"org.apache.cassandra.config.CFMetaData.getRowCacheSavePeriodInSeconds()",1,1,1
"org.apache.cassandra.config.CFMetaData.getRowCacheSize()",1,1,1
"org.apache.cassandra.config.CFMetaData.getValueValidator(ByteBuffer)",1,1,1
"org.apache.cassandra.config.CFMetaData.getValueValidator(ColumnDefinition)",1,2,2
"org.apache.cassandra.config.CFMetaData.hashCode()",1,1,1
"org.apache.cassandra.config.CFMetaData.indexColumnFamilyName(ColumnDefinition)",1,2,2
"org.apache.cassandra.config.CFMetaData.inflate(CfDef)",2,15,17
"org.apache.cassandra.config.CFMetaData.init()",1,1,2
"org.apache.cassandra.config.CFMetaData.keyAlias(ByteBuffer)",1,1,1
"org.apache.cassandra.config.CFMetaData.keyCacheSavePeriod(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.keyCacheSize(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.keyValidator(AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.map(CFMetaData)",2,2,2
"org.apache.cassandra.config.CFMetaData.maxCompactionThreshold(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.memOps(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.memSize(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.memTime(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.mergeShardsChance(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.minCompactionThreshold(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.newIndexMetadata(CFMetaData,ColumnDefinition,AbstractType)",1,1,1
"org.apache.cassandra.config.CFMetaData.newSystemMetadata(String,int,String,AbstractType,AbstractType,int)",1,1,2
"org.apache.cassandra.config.CFMetaData.nextId()",1,1,1
"org.apache.cassandra.config.CFMetaData.purge(CFMetaData)",1,1,1
"org.apache.cassandra.config.CFMetaData.readRepairChance(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.rename(CFMetaData,String)",1,1,1
"org.apache.cassandra.config.CFMetaData.renameTable(CFMetaData,String)",1,1,1
"org.apache.cassandra.config.CFMetaData.replicateOnWrite(boolean)",1,1,1
"org.apache.cassandra.config.CFMetaData.rowCacheProvider(IRowCacheProvider)",1,1,1
"org.apache.cassandra.config.CFMetaData.rowCacheSavePeriod(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.rowCacheSize(double)",1,1,1
"org.apache.cassandra.config.CFMetaData.sizeMemtableOperations(int)",1,1,1
"org.apache.cassandra.config.CFMetaData.sizeMemtableThroughput()",1,1,1
"org.apache.cassandra.config.CFMetaData.toString()",1,1,1
"org.apache.cassandra.config.CFMetaData.validateMemtableSettings(CfDef)",1,4,4
"org.apache.cassandra.config.CFMetaData.validateMinMaxCompactionThresholds(CfDef)",7,1,10
"org.apache.cassandra.config.ColumnDefinition.ColumnDefinition(ByteBuffer,AbstractType,IndexType,String)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.deflate()",1,2,3
"org.apache.cassandra.config.ColumnDefinition.equals(Object)",6,5,10
"org.apache.cassandra.config.ColumnDefinition.fromColumnDef(ColumnDef)",1,3,3
"org.apache.cassandra.config.ColumnDefinition.fromColumnDef(List<ColumnDef>)",2,2,3
"org.apache.cassandra.config.ColumnDefinition.getIndexName()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.getIndexType()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.getValidator()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.hashCode()",1,5,5
"org.apache.cassandra.config.ColumnDefinition.inflate(ColumnDef)",1,3,4
"org.apache.cassandra.config.ColumnDefinition.setIndexName(String)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.setIndexType(IndexType)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.setValidator(AbstractType)",1,1,1
"org.apache.cassandra.config.ColumnDefinition.toString()",1,1,1
"org.apache.cassandra.config.ColumnDefinition.validateIndexType(ColumnDef)",2,1,3
"org.apache.cassandra.config.ConfigurationException.ConfigurationException(String)",1,1,1
"org.apache.cassandra.config.ConfigurationException.ConfigurationException(String,Exception)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.clearTableDefinition(KSMetaData,UUID)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.createAllDirectories()",4,3,6
"org.apache.cassandra.config.DatabaseDescriptor.createEndpointSnitch(String)",1,1,2
"org.apache.cassandra.config.DatabaseDescriptor.estimatesRealMemtableSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAllDataFileLocations()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAllDataFileLocationsForTable(String)",1,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getAuthenticator()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAuthority()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBMTThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCFMetaData(Descriptor)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCFMetaData(Integer)",2,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getCFMetaData(String,String)",2,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getClusterName()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getColumnFamilyType(String,String)",2,1,3
"org.apache.cassandra.config.DatabaseDescriptor.getColumnIndexSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogLocation()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSegmentSize()",1,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSync()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSyncBatchWindow()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSyncPeriod()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCompactionThreadPriority()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCompactionThroughputMbPerSec()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getComparator(String,String)",2,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentCompactors()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentReaders()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentReplicators()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentWriters()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDataFileLocationForTable(String,long)",1,3,4
"org.apache.cassandra.config.DatabaseDescriptor.getDefsVersion()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskAccessMode()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicBadnessThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicResetInterval()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicUpdateInterval()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getEncryptionOptions()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getEndpointSnitch()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getFlushLargestMemtablesAt()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getFlushQueueSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getFlushWriters()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getHintedHandoffThrottleDelay()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInMemoryCompactionLimit()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexAccessMode()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexInterval()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexedReadBufferSizeInKB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInitialToken()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getJobJarLocation()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getJobTrackerAddress()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getKSMetaData(String)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getListenAddress()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxHintWindow()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNextAvailableDataLocation()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNonSystemTables()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPartitioner()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPhiConvictThreshold()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPreheatKeyCache()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getReduceCacheCapacityTo()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getReduceCacheSizesAt()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestScheduler()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestSchedulerId()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestSchedulerOptions()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcAddress()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcKeepAlive()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcMaxThreads()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcMinThreads()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcPort()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcRecvBufferSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcSendBufferSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcServerType()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcTimeout()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSavedCachesLocation()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSeeds()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSerializedCachePath(String,String,CacheType)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSlicedReadBufferSizeInKB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getStorageConfigURL()",2,2,4
"org.apache.cassandra.config.DatabaseDescriptor.getStoragePort()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSubComparator(String,String)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTableDefinition(String)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTableMetaData(String)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTables()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getThriftFramedTransportSize()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getThriftMaxMessageLength()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTotalMemtableSpaceInMB()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getValueValidator(String,String,ByteBuffer)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.hintedHandoffEnabled()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.incrementalBackupsEnabled()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isAutoBootstrap()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isSnapshotBeforeCompaction()",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.loadSchemas()",8,9,14
"org.apache.cassandra.config.DatabaseDescriptor.setCompactionThroughputMbPerSec(int)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicBadnessThreshold(Double)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicResetInterval(Integer)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicUpdateInterval(Integer)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setEndpointSnitch(IEndpointSnitch)",1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setTableDefinition(KSMetaData,UUID)",1,2,2
"org.apache.cassandra.config.DatabaseDescriptor.validateMemtableFlushPeriod(int)",2,1,2
"org.apache.cassandra.config.DatabaseDescriptor.validateMemtableOperations(double)",3,1,3
"org.apache.cassandra.config.DatabaseDescriptor.validateMemtableThroughput(int)",2,1,2
"org.apache.cassandra.config.KSMetaData.KSMetaData(String,Class<? extends AbstractReplicationStrategy>,Map<String, String>,CFMetaData...)",1,1,1
"org.apache.cassandra.config.KSMetaData.KSMetaData(String,Class<? extends AbstractReplicationStrategy>,Map<String, String>,boolean,CFMetaData...)",1,2,3
"org.apache.cassandra.config.KSMetaData.cfMetaData()",1,1,1
"org.apache.cassandra.config.KSMetaData.convertOldStrategyName(String)",1,1,1
"org.apache.cassandra.config.KSMetaData.deflate()",1,4,4
"org.apache.cassandra.config.KSMetaData.equals(Object)",2,6,7
"org.apache.cassandra.config.KSMetaData.forwardsCompatibleOptions(KsDef)",1,1,3
"org.apache.cassandra.config.KSMetaData.fromThrift(KsDef,CFMetaData...)",1,1,1
"org.apache.cassandra.config.KSMetaData.hashCode()",1,1,1
"org.apache.cassandra.config.KSMetaData.inflate(KsDef)",4,5,7
"org.apache.cassandra.config.KSMetaData.isDurableWrites()",1,1,1
"org.apache.cassandra.config.KSMetaData.maybeAddReplicationFactor(Map<String, String>,String,Integer)",1,4,4
"org.apache.cassandra.config.KSMetaData.optsWithRF(Integer)",1,1,1
"org.apache.cassandra.config.KSMetaData.setDurableWrites(boolean)",1,1,1
"org.apache.cassandra.config.KSMetaData.toString()",1,1,1
"org.apache.cassandra.config.KSMetaData.toThrift(KSMetaData)",1,4,4
"org.apache.cassandra.config.SeedProviderDef.SeedProviderDef(LinkedHashMap)",1,1,1
"org.apache.cassandra.cql.AbstractModification.AbstractModification(String,String,Attributes)",1,1,1
"org.apache.cassandra.cql.AbstractModification.AbstractModification(String,String,ConsistencyLevel,Long,int)",1,1,1
"org.apache.cassandra.cql.AbstractModification.getColumnFamily()",1,1,1
"org.apache.cassandra.cql.AbstractModification.getConsistencyLevel()",1,1,2
"org.apache.cassandra.cql.AbstractModification.getTimeToLive()",1,1,1
"org.apache.cassandra.cql.AbstractModification.getTimestamp()",1,2,2
"org.apache.cassandra.cql.AbstractModification.isSetConsistencyLevel()",1,1,1
"org.apache.cassandra.cql.AbstractModification.isSetTimestamp()",1,1,1
"org.apache.cassandra.cql.AlterTableStatement.AlterTableStatement(String,OperationType,String)",1,1,1
"org.apache.cassandra.cql.AlterTableStatement.AlterTableStatement(String,OperationType,String,String)",1,1,1
"org.apache.cassandra.cql.AlterTableStatement.getCfDef(String)",5,6,10
"org.apache.cassandra.cql.AlterTableStatement.toString()",1,1,1
"org.apache.cassandra.cql.Attributes.Attributes()",1,1,1
"org.apache.cassandra.cql.Attributes.Attributes(ConsistencyLevel,Long,int)",1,1,1
"org.apache.cassandra.cql.Attributes.getConsistencyLevel()",1,1,1
"org.apache.cassandra.cql.Attributes.getTimeToLive()",1,1,1
"org.apache.cassandra.cql.Attributes.getTimestamp()",1,1,1
"org.apache.cassandra.cql.Attributes.setConsistencyLevel(ConsistencyLevel)",1,1,1
"org.apache.cassandra.cql.Attributes.setTimeToLive(int)",1,1,1
"org.apache.cassandra.cql.Attributes.setTimestamp(Long)",1,1,1
"org.apache.cassandra.cql.Attributes.toString()",1,1,1
"org.apache.cassandra.cql.BatchStatement.BatchStatement(List<AbstractModification>,Attributes)",1,1,1
"org.apache.cassandra.cql.BatchStatement.getConsistencyLevel()",1,1,1
"org.apache.cassandra.cql.BatchStatement.getMutations(String,ClientState)",1,2,2
"org.apache.cassandra.cql.BatchStatement.getStatements()",1,1,1
"org.apache.cassandra.cql.BatchStatement.getTimeToLive()",1,1,1
"org.apache.cassandra.cql.BatchStatement.isSetTimestamp()",1,1,1
"org.apache.cassandra.cql.BatchStatement.toString()",1,1,1
"org.apache.cassandra.cql.CQLStatement.CQLStatement(StatementType,Object)",1,1,1
"org.apache.cassandra.cql.CreateColumnFamilyStatement.CreateColumnFamilyStatement(String)",1,1,1
"org.apache.cassandra.cql.CreateColumnFamilyStatement.addColumn(Term,String)",1,1,1
"org.apache.cassandra.cql.CreateColumnFamilyStatement.addProperty(String,String)",1,1,1
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getCFMetaData(String)",1,2,2
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getColumns(AbstractType<?>)",2,4,4
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getComparator()",1,2,2
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getKeyType()",1,1,1
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getName()",1,1,1
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getPropertyBoolean(String,Boolean)",1,2,2
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getPropertyDouble(String,Double)",2,3,3
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getPropertyInt(String,Integer)",2,3,3
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getPropertyString(String,String)",1,1,2
"org.apache.cassandra.cql.CreateColumnFamilyStatement.getValidator()",1,2,2
"org.apache.cassandra.cql.CreateColumnFamilyStatement.setKeyAlias(String)",1,2,2
"org.apache.cassandra.cql.CreateColumnFamilyStatement.setKeyType(String)",1,1,1
"org.apache.cassandra.cql.CreateColumnFamilyStatement.validate()",16,16,24
"org.apache.cassandra.cql.CreateIndexStatement.CreateIndexStatement(String,String,Term)",1,1,1
"org.apache.cassandra.cql.CreateIndexStatement.getColumnFamily()",1,1,1
"org.apache.cassandra.cql.CreateIndexStatement.getColumnName()",1,1,1
"org.apache.cassandra.cql.CreateIndexStatement.getIndexName()",1,1,1
"org.apache.cassandra.cql.CreateKeyspaceStatement.CreateKeyspaceStatement(String,Map<String, String>)",1,1,1
"org.apache.cassandra.cql.CreateKeyspaceStatement.getName()",1,1,1
"org.apache.cassandra.cql.CreateKeyspaceStatement.getStrategyClass()",1,1,1
"org.apache.cassandra.cql.CreateKeyspaceStatement.getStrategyOptions()",1,1,1
"org.apache.cassandra.cql.CreateKeyspaceStatement.validate()",3,6,7
"org.apache.cassandra.cql.DeleteStatement.DeleteStatement(List<Term>,String,String,List<Term>,Attributes)",1,1,1
"org.apache.cassandra.cql.DeleteStatement.getColumns()",1,1,1
"org.apache.cassandra.cql.DeleteStatement.getKeys()",1,1,1
"org.apache.cassandra.cql.DeleteStatement.mutationForKey(ByteBuffer,String,Long)",1,1,1
"org.apache.cassandra.cql.DeleteStatement.mutationForKey(RowMutation,String,Long)",1,5,5
"org.apache.cassandra.cql.DeleteStatement.prepareRowMutations(String,ClientState)",1,1,1
"org.apache.cassandra.cql.DeleteStatement.prepareRowMutations(String,ClientState,Long)",1,2,2
"org.apache.cassandra.cql.DeleteStatement.toString()",1,1,1
"org.apache.cassandra.cql.DropIndexStatement.DropIndexStatement(String)",1,1,1
"org.apache.cassandra.cql.DropIndexStatement.generateMutation(String)",4,2,4
"org.apache.cassandra.cql.DropIndexStatement.getUpdatedCFDef(CfDef)",1,4,6
"org.apache.cassandra.cql.Operation.Operation(Term)",1,1,1
"org.apache.cassandra.cql.Operation.Operation(Term,OperationType,Term)",1,1,1
"org.apache.cassandra.cql.Operation.isUnary()",1,1,2
"org.apache.cassandra.cql.Operation.toString()",1,2,2
"org.apache.cassandra.cql.QueryProcessor.applyMigrationOnStage(Migration)",2,3,4
"org.apache.cassandra.cql.QueryProcessor.batchUpdate(ClientState,List<UpdateStatement>,ConsistencyLevel)",1,3,5
"org.apache.cassandra.cql.QueryProcessor.bufferToString(ByteBuffer)",1,2,2
"org.apache.cassandra.cql.QueryProcessor.describeSchemaVersions()",1,1,1
"org.apache.cassandra.cql.QueryProcessor.extractThriftColumns(SelectStatement,CFMetaData,Row)",6,8,10
"org.apache.cassandra.cql.QueryProcessor.getColumnNames(SelectStatement,CFMetaData)",1,3,3
"org.apache.cassandra.cql.QueryProcessor.getIndexedSlices(String,SelectStatement)",1,3,5
"org.apache.cassandra.cql.QueryProcessor.getKeyString(CFMetaData)",1,1,2
"org.apache.cassandra.cql.QueryProcessor.getSlice(String,SelectStatement)",1,4,6
"org.apache.cassandra.cql.QueryProcessor.getStatement(String)",1,1,1
"org.apache.cassandra.cql.QueryProcessor.multiRangeSlice(String,SelectStatement)",3,15,20
"org.apache.cassandra.cql.QueryProcessor.process(String,ClientState)",15,35,55
"org.apache.cassandra.cql.QueryProcessor.slicePredicateFromSelect(SelectStatement,CFMetaData)",1,3,3
"org.apache.cassandra.cql.QueryProcessor.thriftify(IColumn)",1,2,2
"org.apache.cassandra.cql.QueryProcessor.validateColumn(CFMetaData,ByteBuffer,ByteBuffer)",1,3,3
"org.apache.cassandra.cql.QueryProcessor.validateColumnName(ByteBuffer)",1,1,1
"org.apache.cassandra.cql.QueryProcessor.validateColumnNames(Iterable<ByteBuffer>)",4,3,4
"org.apache.cassandra.cql.QueryProcessor.validateKey(ByteBuffer)",3,3,4
"org.apache.cassandra.cql.QueryProcessor.validateKeyAlias(CFMetaData,String)",2,2,2
"org.apache.cassandra.cql.QueryProcessor.validateSchemaAgreement()",2,1,2
"org.apache.cassandra.cql.QueryProcessor.validateSchemaIsSettled()",4,3,4
"org.apache.cassandra.cql.QueryProcessor.validateSelect(String,SelectStatement)",9,11,17
"org.apache.cassandra.cql.QueryProcessor.validateSlicePredicate(CFMetaData,SlicePredicate)",1,2,2
"org.apache.cassandra.cql.QueryProcessor.validateSliceRange(CFMetaData,ByteBuffer,ByteBuffer,boolean)",2,3,5
"org.apache.cassandra.cql.QueryProcessor.validateSliceRange(CFMetaData,SliceRange)",1,1,1
"org.apache.cassandra.cql.Relation.Relation(Term,String,Term)",1,1,2
"org.apache.cassandra.cql.Relation.getEntity()",1,1,1
"org.apache.cassandra.cql.Relation.getValue()",1,1,1
"org.apache.cassandra.cql.Relation.isColumn()",1,1,1
"org.apache.cassandra.cql.Relation.isKey()",1,1,1
"org.apache.cassandra.cql.Relation.operator()",1,1,1
"org.apache.cassandra.cql.Relation.toString()",1,1,1
"org.apache.cassandra.cql.RelationType.forString(String)",6,5,6
"org.apache.cassandra.cql.SelectExpression.SelectExpression(Term,Term,int,boolean,boolean)",1,1,1
"org.apache.cassandra.cql.SelectExpression.SelectExpression(Term,int,boolean)",1,1,1
"org.apache.cassandra.cql.SelectExpression.and(Term)",1,1,1
"org.apache.cassandra.cql.SelectExpression.getColumns()",1,1,1
"org.apache.cassandra.cql.SelectExpression.getColumnsLimit()",1,1,1
"org.apache.cassandra.cql.SelectExpression.getFinish()",1,1,1
"org.apache.cassandra.cql.SelectExpression.getStart()",1,1,1
"org.apache.cassandra.cql.SelectExpression.isColumnList()",1,1,1
"org.apache.cassandra.cql.SelectExpression.isColumnRange()",1,1,1
"org.apache.cassandra.cql.SelectExpression.isColumnsReversed()",1,1,1
"org.apache.cassandra.cql.SelectExpression.isWildcard()",1,1,1
"org.apache.cassandra.cql.SelectExpression.setColumnsLimit(int)",1,1,1
"org.apache.cassandra.cql.SelectExpression.setColumnsReversed(boolean)",1,1,1
"org.apache.cassandra.cql.SelectStatement.SelectStatement(SelectExpression,boolean,String,ConsistencyLevel,WhereClause,int)",1,1,2
"org.apache.cassandra.cql.SelectStatement.extractKeyAliasFromColumns(CFMetaData)",1,1,1
"org.apache.cassandra.cql.SelectStatement.getColumnFamily()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getColumnFinish()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getColumnNames()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getColumnRelations()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getColumnStart()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getColumnsLimit()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getComparator(String)",1,1,1
"org.apache.cassandra.cql.SelectStatement.getConsistencyLevel()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getKeyAlias()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getKeyFinish()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getKeyStart()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getKeys()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getNumRecords()",1,1,1
"org.apache.cassandra.cql.SelectStatement.getValueValidator(String,ByteBuffer)",1,1,1
"org.apache.cassandra.cql.SelectStatement.includeFinishKey()",1,1,1
"org.apache.cassandra.cql.SelectStatement.includeStartKey()",1,1,1
"org.apache.cassandra.cql.SelectStatement.isColumnRange()",1,1,1
"org.apache.cassandra.cql.SelectStatement.isColumnsReversed()",1,1,1
"org.apache.cassandra.cql.SelectStatement.isCountOperation()",1,1,1
"org.apache.cassandra.cql.SelectStatement.isKeyRange()",1,1,1
"org.apache.cassandra.cql.SelectStatement.isMultiKey()",1,1,1
"org.apache.cassandra.cql.SelectStatement.isWildcard()",1,1,1
"org.apache.cassandra.cql.Term.Term()",1,1,1
"org.apache.cassandra.cql.Term.Term(String,TermType)",1,1,2
"org.apache.cassandra.cql.Term.Term(String,int)",1,1,2
"org.apache.cassandra.cql.Term.equals(Object)",8,2,8
"org.apache.cassandra.cql.Term.getByteBuffer()",5,5,5
"org.apache.cassandra.cql.Term.getByteBuffer(AbstractType<?>)",1,2,2
"org.apache.cassandra.cql.Term.getText()",1,1,1
"org.apache.cassandra.cql.Term.getType()",1,1,1
"org.apache.cassandra.cql.Term.hashCode()",1,3,3
"org.apache.cassandra.cql.Term.toString()",1,1,1
"org.apache.cassandra.cql.TermType.forInt(int)",5,1,6
"org.apache.cassandra.cql.UpdateStatement.UpdateStatement(String,String,List<Term>,List<Term>,List<Term>,Attributes)",1,1,1
"org.apache.cassandra.cql.UpdateStatement.UpdateStatement(String,String,Map<Term, Operation>,List<Term>,Attributes)",1,1,1
"org.apache.cassandra.cql.UpdateStatement.getColumnFamily()",1,1,1
"org.apache.cassandra.cql.UpdateStatement.getColumns()",4,2,5
"org.apache.cassandra.cql.UpdateStatement.getComparator(String)",1,1,1
"org.apache.cassandra.cql.UpdateStatement.getConsistencyLevel()",1,1,2
"org.apache.cassandra.cql.UpdateStatement.getKeyType(String)",1,1,1
"org.apache.cassandra.cql.UpdateStatement.getKeys()",1,1,1
"org.apache.cassandra.cql.UpdateStatement.getValueValidator(String,ByteBuffer)",1,1,1
"org.apache.cassandra.cql.UpdateStatement.isSetConsistencyLevel()",1,1,1
"org.apache.cassandra.cql.UpdateStatement.mutationForKey(String,ByteBuffer,CFMetaData,Long)",5,6,9
"org.apache.cassandra.cql.UpdateStatement.prepareRowMutations(String,ClientState)",1,1,1
"org.apache.cassandra.cql.UpdateStatement.prepareRowMutations(String,ClientState,Long)",3,6,8
"org.apache.cassandra.cql.UpdateStatement.toString()",1,1,1
"org.apache.cassandra.cql.WhereClause.WhereClause()",1,1,1
"org.apache.cassandra.cql.WhereClause.WhereClause(Relation)",1,1,1
"org.apache.cassandra.cql.WhereClause.and(Relation)",1,8,8
"org.apache.cassandra.cql.WhereClause.andKeyEquals(Term)",1,1,1
"org.apache.cassandra.cql.WhereClause.extractKeysFromColumns(CFMetaData)",4,3,4
"org.apache.cassandra.cql.WhereClause.getColumnRelations()",1,1,1
"org.apache.cassandra.cql.WhereClause.getFinishKey()",1,1,1
"org.apache.cassandra.cql.WhereClause.getKeyAlias()",1,1,2
"org.apache.cassandra.cql.WhereClause.getKeys()",1,1,1
"org.apache.cassandra.cql.WhereClause.getStartKey()",1,1,1
"org.apache.cassandra.cql.WhereClause.includeFinishKey()",1,1,1
"org.apache.cassandra.cql.WhereClause.includeStartKey()",1,1,1
"org.apache.cassandra.cql.WhereClause.isKeyRange()",1,1,1
"org.apache.cassandra.cql.WhereClause.isMultiKey()",1,1,1
"org.apache.cassandra.cql.WhereClause.setKeyAlias(String)",1,1,1
"org.apache.cassandra.cql.WhereClause.setMultiKey(boolean)",1,1,1
"org.apache.cassandra.db.BinaryMemtable.BinaryMemtable(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.BinaryMemtable.flushAndSignal(CountDownLatch,ExecutorService,ExecutorService,ReplayPosition)",1,1,1
"org.apache.cassandra.db.BinaryMemtable.getSortedKeys()",1,1,1
"org.apache.cassandra.db.BinaryMemtable.isClean()",1,1,1
"org.apache.cassandra.db.BinaryMemtable.isThresholdViolated()",1,1,1
"org.apache.cassandra.db.BinaryMemtable.put(DecoratedKey,ByteBuffer)",1,3,3
"org.apache.cassandra.db.BinaryMemtable.resolve(DecoratedKey,ByteBuffer)",1,1,1
"org.apache.cassandra.db.BinaryMemtable.writeSortedContents(List<DecoratedKey>,ReplayPosition)",1,2,2
"org.apache.cassandra.db.BinaryVerbHandler.doVerb(Message,String)",1,2,3
"org.apache.cassandra.db.Column.Column(ByteBuffer)",1,1,1
"org.apache.cassandra.db.Column.Column(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.Column.Column(ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.Column.addColumn(IColumn)",1,1,1
"org.apache.cassandra.db.Column.diff(IColumn)",2,1,2
"org.apache.cassandra.db.Column.equals(Object)",5,2,6
"org.apache.cassandra.db.Column.getLocalDeletionTime()",1,1,1
"org.apache.cassandra.db.Column.getMarkedForDeleteAt()",1,1,1
"org.apache.cassandra.db.Column.getString(AbstractType)",1,1,1
"org.apache.cassandra.db.Column.getSubColumn(ByteBuffer)",1,1,1
"org.apache.cassandra.db.Column.getSubColumns()",1,1,1
"org.apache.cassandra.db.Column.hashCode()",1,3,3
"org.apache.cassandra.db.Column.isLive()",1,1,1
"org.apache.cassandra.db.Column.isMarkedForDelete()",1,1,1
"org.apache.cassandra.db.Column.localCopy(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.Column.mostRecentLiveChangeAt()",1,1,1
"org.apache.cassandra.db.Column.name()",1,1,1
"org.apache.cassandra.db.Column.reconcile(IColumn)",4,4,8
"org.apache.cassandra.db.Column.serializationFlags()",1,1,1
"org.apache.cassandra.db.Column.serializedSize()",1,1,1
"org.apache.cassandra.db.Column.serializer()",1,1,1
"org.apache.cassandra.db.Column.size()",1,1,1
"org.apache.cassandra.db.Column.timestamp()",1,1,1
"org.apache.cassandra.db.Column.updateDigest(MessageDigest)",1,1,2
"org.apache.cassandra.db.Column.validateFields(CFMetaData)",1,2,2
"org.apache.cassandra.db.Column.validateName(CFMetaData)",1,1,2
"org.apache.cassandra.db.Column.value()",1,1,1
"org.apache.cassandra.db.ColumnFamily.ColumnFamily(CFMetaData)",1,2,2
"org.apache.cassandra.db.ColumnFamily.addAll(ColumnFamily)",1,2,2
"org.apache.cassandra.db.ColumnFamily.addColumn(ByteBuffer,Column)",1,2,2
"org.apache.cassandra.db.ColumnFamily.addColumn(IColumn)",4,3,4
"org.apache.cassandra.db.ColumnFamily.addColumn(QueryPath,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.ColumnFamily.addColumn(QueryPath,ByteBuffer,long,int)",1,1,2
"org.apache.cassandra.db.ColumnFamily.addCounter(QueryPath,long)",1,1,1
"org.apache.cassandra.db.ColumnFamily.addTombstone(ByteBuffer,int,long)",1,1,1
"org.apache.cassandra.db.ColumnFamily.addTombstone(QueryPath,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.ColumnFamily.addTombstone(QueryPath,int,long)",1,1,1
"org.apache.cassandra.db.ColumnFamily.clear()",1,1,1
"org.apache.cassandra.db.ColumnFamily.cloneMe()",1,1,1
"org.apache.cassandra.db.ColumnFamily.cloneMeShallow()",1,1,1
"org.apache.cassandra.db.ColumnFamily.create(CFMetaData)",1,1,1
"org.apache.cassandra.db.ColumnFamily.create(Integer)",1,1,1
"org.apache.cassandra.db.ColumnFamily.create(String,String)",1,1,1
"org.apache.cassandra.db.ColumnFamily.delete(ColumnFamily)",1,1,1
"org.apache.cassandra.db.ColumnFamily.delete(int,long)",1,1,1
"org.apache.cassandra.db.ColumnFamily.diff(ColumnFamily)",2,6,7
"org.apache.cassandra.db.ColumnFamily.diff(ColumnFamily,ColumnFamily)",2,1,2
"org.apache.cassandra.db.ColumnFamily.digest(ColumnFamily)",1,2,2
"org.apache.cassandra.db.ColumnFamily.equals(Object)",1,1,1
"org.apache.cassandra.db.ColumnFamily.getColumn(ByteBuffer)",1,1,1
"org.apache.cassandra.db.ColumnFamily.getColumnCount()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getColumnNames()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getColumnSerializer()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getColumnsMap()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getComparator()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getComparatorFor(String,String,ByteBuffer)",1,2,2
"org.apache.cassandra.db.ColumnFamily.getEstimatedColumnCount()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getLocalDeletionTime()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getMarkedForDeleteAt()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getReverseSortedColumns()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getSortedColumns()",1,1,1
"org.apache.cassandra.db.ColumnFamily.getSubComparator()",1,2,2
"org.apache.cassandra.db.ColumnFamily.getType()",1,1,1
"org.apache.cassandra.db.ColumnFamily.hashCode()",1,1,1
"org.apache.cassandra.db.ColumnFamily.id()",1,1,1
"org.apache.cassandra.db.ColumnFamily.isEmpty()",1,1,1
"org.apache.cassandra.db.ColumnFamily.isMarkedForDelete()",1,1,1
"org.apache.cassandra.db.ColumnFamily.isSuper()",1,1,1
"org.apache.cassandra.db.ColumnFamily.iterator()",1,1,1
"org.apache.cassandra.db.ColumnFamily.metadata()",1,1,1
"org.apache.cassandra.db.ColumnFamily.remove(ByteBuffer)",1,1,1
"org.apache.cassandra.db.ColumnFamily.resolve(ColumnFamily)",2,1,2
"org.apache.cassandra.db.ColumnFamily.retainAll(ColumnFamily)",1,13,15
"org.apache.cassandra.db.ColumnFamily.serializedSize()",1,2,2
"org.apache.cassandra.db.ColumnFamily.serializer()",1,1,1
"org.apache.cassandra.db.ColumnFamily.size()",1,2,2
"org.apache.cassandra.db.ColumnFamily.toString()",1,2,3
"org.apache.cassandra.db.ColumnFamily.updateDigest(MessageDigest)",1,2,2
"org.apache.cassandra.db.ColumnFamily.validateColumnFields()",1,2,2
"org.apache.cassandra.db.ColumnFamilyNotDefinedException.ColumnFamilyNotDefinedException(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilySerializer.deserialize(DataInput)",1,1,1
"org.apache.cassandra.db.ColumnFamilySerializer.deserialize(DataInput,boolean,boolean)",3,1,3
"org.apache.cassandra.db.ColumnFamilySerializer.deserializeColumns(DataInput,ColumnFamily,boolean,boolean)",1,3,3
"org.apache.cassandra.db.ColumnFamilySerializer.deserializeFromSSTableNoColumns(ColumnFamily,DataInput)",1,1,1
"org.apache.cassandra.db.ColumnFamilySerializer.serialize(ColumnFamily,DataOutput)",2,2,3
"org.apache.cassandra.db.ColumnFamilySerializer.serializeCFInfo(ColumnFamily,DataOutput)",1,1,1
"org.apache.cassandra.db.ColumnFamilySerializer.serializeForSSTable(ColumnFamily,DataOutput)",1,2,3
"org.apache.cassandra.db.ColumnFamilySerializer.serializeWithIndexes(ColumnFamily,DataOutput)",1,1,1
"org.apache.cassandra.db.ColumnFamilySerializer.serializedSize(ColumnFamily)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.CacheType.CacheType(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.CacheType.toString()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.ColumnFamilyStore(Table,String,IPartitioner,int,CFMetaData)",1,6,8
"org.apache.cassandra.db.ColumnFamilyStore.addIndex(ColumnDefinition)",3,1,5
"org.apache.cassandra.db.ColumnFamilyStore.addSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.all()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.allKeySamples()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.apply(DecoratedKey,ColumnFamily)",4,4,6
"org.apache.cassandra.db.ColumnFamilyStore.applyBinary(DecoratedKey,ByteBuffer)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.cacheRow(DecoratedKey)",3,4,5
"org.apache.cassandra.db.ColumnFamilyStore.clearUnsafe()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.concatWithIndexes()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(Table,String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(Table,String,IPartitioner,CFMetaData)",5,6,7
"org.apache.cassandra.db.ColumnFamilyStore.createCompactionWriter(long,String,Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.createFlushWriter(long,long,ReplayPosition)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.disableAutoCompaction()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.estimateKeys()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.expressionString(IndexExpression)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.files(File)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.files(String,String,boolean,boolean)",1,9,10
"org.apache.cassandra.db.ColumnFamilyStore.filterColumnFamily(ColumnFamily,QueryFilter,int)",6,11,11
"org.apache.cassandra.db.ColumnFamilyStore.forceBlockingFlush()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.forceCleanup(OneShotRenewer)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceFlush()",2,3,3
"org.apache.cassandra.db.ColumnFamilyStore.forceFlushBinary()",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.forceFlushIfExpired()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.forceMajorCompaction()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.gcBefore()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getBloomFilterFalsePositives()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getBloomFilterFalseRatio()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getBuiltIndexes()",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.getColumnFamily(DecoratedKey,QueryPath,ByteBuffer,ByteBuffer,boolean,int)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getColumnFamily(QueryFilter)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getColumnFamily(QueryFilter,int)",4,3,5
"org.apache.cassandra.db.ColumnFamilyStore.getColumnFamilyName()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getComparator()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getDataTracker()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getEstimatedColumnCountHistogram()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getEstimatedRowSizeHistogram()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getExpectedCompactedFileSize(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.getExtraFilter(IndexClause)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.getFlushPath(long,String)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.getIndexKeyFor(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getIndexedColumnFamilyStore(ByteBuffer)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getIndexedColumns()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getKeyCache()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getKeyCacheCapacity()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getKeyCacheSavePeriodInSeconds()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getKeyCacheSize()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getLifetimeReadLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getLifetimeWriteLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getLiveDiskSpaceUsed()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getLiveSSTableCount()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMaxRowSize()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMaxSizeFile(Iterable<SSTableReader>)",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.getMaximumCompactionThreshold()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMeanColumns()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMeanRowSize()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMemtableColumnsCount()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMemtableDataSize()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMemtableFlushAfterMins()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMemtableOperationsInMillions()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMemtableSwitchCount()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMemtableThreadSafe()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMemtableThroughputInMB()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMemtablesPendingFlush()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMinRowSize()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMinimumCompactionThreshold()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getParentColumnfamily()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getPendingTasks()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRangeSlice(ByteBuffer,AbstractBounds,int,IFilter)",4,11,14
"org.apache.cassandra.db.ColumnFamilyStore.getRawCachedRow(DecoratedKey)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.getReadCount()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRecentBloomFilterFalsePositives()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRecentBloomFilterFalseRatio()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRecentReadLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRecentReadLatencyMicros()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRecentSSTablesPerReadHistogram()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRecentWriteLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRecentWriteLatencyMicros()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRowCacheCapacity()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRowCacheSavePeriodInSeconds()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRowCacheSize()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTables()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablesPerReadHistogram()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getTempSSTablePath(String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getTempSSTablePath(String,String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getTopLevelColumns(QueryFilter,int)",2,8,9
"org.apache.cassandra.db.ColumnFamilyStore.getTotalDiskSpaceUsed()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getTotalMemtableLiveSize()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.getTotalReadLatencyMicros()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getTotalWriteLatencyMicros()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getWriteCount()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.hasUnreclaimedSpace()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.highestSelectivityPredicate(IndexClause)",3,3,5
"org.apache.cassandra.db.ColumnFamilyStore.indexComparator()",1,2,3
"org.apache.cassandra.db.ColumnFamilyStore.initCaches()",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.intern(ByteBuffer)",1,2,3
"org.apache.cassandra.db.ColumnFamilyStore.internOrCopy(ByteBuffer)",2,2,2
"org.apache.cassandra.db.ColumnFamilyStore.invalidateCachedRow(DecoratedKey)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.invalidateKeyCache()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.invalidateRowCache()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isCompleteSSTables(Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isDropped()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.isIdentityFilter(SliceQueryFilter)",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.isIndex()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isIndexBuilt()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isInvalid()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isKeyInRemainingSSTables(DecoratedKey,Set<? extends SSTable>)",3,3,4
"org.apache.cassandra.db.ColumnFamilyStore.keySamples(Range)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.loadNewSSTables()",7,5,11
"org.apache.cassandra.db.ColumnFamilyStore.loadNewSSTables(String,String)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.markCompacted(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.maybeBuildSecondaryIndexes(Collection<SSTableReader>,SortedSet<ByteBuffer>)",2,2,5
"org.apache.cassandra.db.ColumnFamilyStore.maybeIntern(ByteBuffer)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.maybeSwitchMemtable(Memtable,boolean)",3,9,10
"org.apache.cassandra.db.ColumnFamilyStore.newIndexedColumnFamily(ByteBuffer)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.openSSTableReader(Entry<Descriptor, Set<Component>>,Set<DecoratedKey>,DataTracker,CFMetaData,IPartitioner)",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.reduceCacheSizes()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.reload()",1,19,19
"org.apache.cassandra.db.ColumnFamilyStore.removeAllSSTables()",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.removeDeleted(ColumnFamily,int)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.removeDeletedCF(ColumnFamily,int)",2,2,3
"org.apache.cassandra.db.ColumnFamilyStore.removeDeletedColumnsOnly(ColumnFamily,int)",1,2,2
"org.apache.cassandra.db.ColumnFamilyStore.removeDeletedStandard(ColumnFamily,int)",1,5,5
"org.apache.cassandra.db.ColumnFamilyStore.removeDeletedSuper(ColumnFamily,int)",1,8,8
"org.apache.cassandra.db.ColumnFamilyStore.removeIndex(ByteBuffer)",2,2,2
"org.apache.cassandra.db.ColumnFamilyStore.renameSSTables(String)",2,3,5
"org.apache.cassandra.db.ColumnFamilyStore.replaceCompactedSSTables(Collection<SSTableReader>,Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.replaceFlushed(Memtable,SSTableReader)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.satisfies(ColumnFamily,IndexClause,IndexExpression)",4,2,4
"org.apache.cassandra.db.ColumnFamilyStore.satisfies(int,IndexOperator)",7,2,7
"org.apache.cassandra.db.ColumnFamilyStore.scan(IndexClause,AbstractBounds,IFilter)",12,23,30
"org.apache.cassandra.db.ColumnFamilyStore.scheduleCacheSaving(int,int)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.scrub()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.scrubDataDirectories(String,String)",5,12,14
"org.apache.cassandra.db.ColumnFamilyStore.setKeyCacheSavePeriodInSeconds(int)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.setMaximumCompactionThreshold(int)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.setMemtableFlushAfterMins(int)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.setMemtableOperationsInMillions(double)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.setMemtableThroughputInMB(int)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.setMinimumCompactionThreshold(int)",2,2,3
"org.apache.cassandra.db.ColumnFamilyStore.setRowCacheSavePeriodInSeconds(int)",2,1,2
"org.apache.cassandra.db.ColumnFamilyStore.snapshot(String)",1,1,3
"org.apache.cassandra.db.ColumnFamilyStore.snapshotWithoutFlush(String)",3,4,5
"org.apache.cassandra.db.ColumnFamilyStore.submitFlush(IFlushable,CountDownLatch,ReplayPosition)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.switchBinaryMemtable(DecoratedKey,ByteBuffer)",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.toString()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.truncate()",1,2,3
"org.apache.cassandra.db.ColumnFamilyStore.unregisterMBean()",1,4,4
"org.apache.cassandra.db.ColumnFamilyStore.updateCacheSizes()",1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.updateRowCache(DecoratedKey,ColumnFamily)",1,3,3
"org.apache.cassandra.db.ColumnFamilyStore.waitForActiveFlushes()",1,1,3
"org.apache.cassandra.db.ColumnFamilyType.create(String)",1,2,3
"org.apache.cassandra.db.ColumnIndexer.serialize(IIterableColumns,DataOutput)",1,1,2
"org.apache.cassandra.db.ColumnIndexer.serializeInternal(IIterableColumns,DataOutput)",3,9,10
"org.apache.cassandra.db.ColumnIndexer.writeBloomFilter(DataOutput,BloomFilter)",1,1,1
"org.apache.cassandra.db.ColumnIndexer.writeEmptyHeader(DataOutput,BloomFilter)",1,1,1
"org.apache.cassandra.db.ColumnSerializer.CorruptColumnException.CorruptColumnException(String)",1,1,1
"org.apache.cassandra.db.ColumnSerializer.deserialize(DataInput)",1,1,1
"org.apache.cassandra.db.ColumnSerializer.deserialize(DataInput,ColumnFamilyStore,boolean)",1,1,1
"org.apache.cassandra.db.ColumnSerializer.deserialize(DataInput,ColumnFamilyStore,boolean,int)",5,7,9
"org.apache.cassandra.db.ColumnSerializer.serialize(IColumn,DataOutput)",1,3,4
"org.apache.cassandra.db.CounterColumn.CounterColumn(ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.CounterColumn.CounterColumn(ByteBuffer,ByteBuffer,long,long)",1,1,1
"org.apache.cassandra.db.CounterColumn.CounterColumn(ByteBuffer,long,long)",1,1,1
"org.apache.cassandra.db.CounterColumn.CounterColumn(ByteBuffer,long,long,long)",1,1,1
"org.apache.cassandra.db.CounterColumn.computeOldShardMerger()",2,2,2
"org.apache.cassandra.db.CounterColumn.diff(IColumn)",4,1,5
"org.apache.cassandra.db.CounterColumn.equals(Object)",1,2,2
"org.apache.cassandra.db.CounterColumn.getString(AbstractType)",1,1,1
"org.apache.cassandra.db.CounterColumn.hasNodeId(NodeId)",1,1,1
"org.apache.cassandra.db.CounterColumn.hashCode()",1,1,1
"org.apache.cassandra.db.CounterColumn.localCopy(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.CounterColumn.reconcile(IColumn)",6,2,7
"org.apache.cassandra.db.CounterColumn.removeOldShards(ColumnFamily,int)",7,7,9
"org.apache.cassandra.db.CounterColumn.removeOldShards(int)",2,2,2
"org.apache.cassandra.db.CounterColumn.serializationFlags()",1,1,1
"org.apache.cassandra.db.CounterColumn.size()",1,1,1
"org.apache.cassandra.db.CounterColumn.timestampOfLastDelete()",1,1,1
"org.apache.cassandra.db.CounterColumn.total()",1,1,1
"org.apache.cassandra.db.CounterColumn.updateDigest(MessageDigest)",1,1,2
"org.apache.cassandra.db.CounterColumn.validateFields(CFMetaData)",1,1,1
"org.apache.cassandra.db.CounterMutation.CounterMutation(RowMutation,ConsistencyLevel)",1,1,1
"org.apache.cassandra.db.CounterMutation.addReadCommandFromColumnFamily(String,ByteBuffer,ColumnFamily,List<ReadCommand>)",1,1,1
"org.apache.cassandra.db.CounterMutation.apply()",1,3,3
"org.apache.cassandra.db.CounterMutation.computeShardMerger(ColumnFamily)",7,11,13
"org.apache.cassandra.db.CounterMutation.consistency()",1,1,1
"org.apache.cassandra.db.CounterMutation.getColumnFamilyIds()",1,1,1
"org.apache.cassandra.db.CounterMutation.getTable()",1,1,1
"org.apache.cassandra.db.CounterMutation.key()",1,1,1
"org.apache.cassandra.db.CounterMutation.makeMutationMessage(int)",1,1,1
"org.apache.cassandra.db.CounterMutation.makeReplicationMutation()",5,4,7
"org.apache.cassandra.db.CounterMutation.mergeOldShards(String,Row)",1,3,3
"org.apache.cassandra.db.CounterMutation.rowMutation()",1,1,1
"org.apache.cassandra.db.CounterMutation.serializer()",1,1,1
"org.apache.cassandra.db.CounterMutation.shouldReplicateOnWrite()",3,2,3
"org.apache.cassandra.db.CounterMutation.toString()",1,1,1
"org.apache.cassandra.db.CounterMutation.toString(boolean)",1,1,1
"org.apache.cassandra.db.CounterMutationSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.db.CounterMutationSerializer.serialize(CounterMutation,DataOutputStream,int)",1,1,1
"org.apache.cassandra.db.CounterMutationVerbHandler.doVerb(Message,String)",1,3,5
"org.apache.cassandra.db.CounterUpdateColumn.CounterUpdateColumn(ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.CounterUpdateColumn.CounterUpdateColumn(ByteBuffer,long,long)",1,1,1
"org.apache.cassandra.db.CounterUpdateColumn.delta()",1,1,1
"org.apache.cassandra.db.CounterUpdateColumn.diff(IColumn)",1,1,1
"org.apache.cassandra.db.CounterUpdateColumn.localCopy(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.CounterUpdateColumn.reconcile(IColumn)",2,2,4
"org.apache.cassandra.db.CounterUpdateColumn.serializationFlags()",1,1,1
"org.apache.cassandra.db.DataTracker.DataTracker(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.DataTracker.View.View(Memtable,Set<Memtable>,Set<SSTableReader>,Set<SSTableReader>)",1,1,1
"org.apache.cassandra.db.DataTracker.View.markCompacting(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.DataTracker.View.renewMemtable(Memtable)",1,1,1
"org.apache.cassandra.db.DataTracker.View.replace(Collection<SSTableReader>,Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.DataTracker.View.replaceFlushed(Memtable,SSTableReader)",1,1,1
"org.apache.cassandra.db.DataTracker.View.switchMemtable(Memtable)",1,1,1
"org.apache.cassandra.db.DataTracker.View.unmarkCompacting(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.DataTracker.addNewSSTablesSize(Iterable<SSTableReader>)",1,3,3
"org.apache.cassandra.db.DataTracker.addSSTables(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.DataTracker.addStreamedSSTable(SSTableReader)",1,1,1
"org.apache.cassandra.db.DataTracker.estimatedKeys()",1,2,2
"org.apache.cassandra.db.DataTracker.getBloomFilterFalsePositives()",1,2,2
"org.apache.cassandra.db.DataTracker.getBloomFilterFalseRatio()",2,2,4
"org.apache.cassandra.db.DataTracker.getEstimatedColumnCountHistogram()",1,2,3
"org.apache.cassandra.db.DataTracker.getEstimatedRowSizeHistogram()",1,2,3
"org.apache.cassandra.db.DataTracker.getKeyCache()",1,1,1
"org.apache.cassandra.db.DataTracker.getLiveSize()",1,1,1
"org.apache.cassandra.db.DataTracker.getMaxRowSize()",1,3,3
"org.apache.cassandra.db.DataTracker.getMeanColumns()",1,2,3
"org.apache.cassandra.db.DataTracker.getMeanRowSize()",1,2,3
"org.apache.cassandra.db.DataTracker.getMemtable()",1,1,1
"org.apache.cassandra.db.DataTracker.getMemtablesPendingFlush()",1,1,1
"org.apache.cassandra.db.DataTracker.getMinRowSize()",1,4,4
"org.apache.cassandra.db.DataTracker.getRecentBloomFilterFalsePositives()",1,2,2
"org.apache.cassandra.db.DataTracker.getRecentBloomFilterFalseRatio()",2,2,4
"org.apache.cassandra.db.DataTracker.getSSTables()",1,1,1
"org.apache.cassandra.db.DataTracker.getTotalSize()",1,1,1
"org.apache.cassandra.db.DataTracker.getView()",1,1,1
"org.apache.cassandra.db.DataTracker.incrementallyBackup(SSTableReader)",3,3,5
"org.apache.cassandra.db.DataTracker.init()",1,1,1
"org.apache.cassandra.db.DataTracker.markCompacted(Collection<SSTableReader>)",1,1,1
"org.apache.cassandra.db.DataTracker.markCompacting(Collection<SSTableReader>,int,int)",4,4,7
"org.apache.cassandra.db.DataTracker.removeAllSSTables()",1,1,1
"org.apache.cassandra.db.DataTracker.removeOldSSTablesSize(Iterable<SSTableReader>)",1,3,3
"org.apache.cassandra.db.DataTracker.renewMemtable()",1,2,2
"org.apache.cassandra.db.DataTracker.replace(Collection<SSTableReader>,Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.DataTracker.replaceCompactedSSTables(Collection<SSTableReader>,Iterable<SSTableReader>)",1,1,1
"org.apache.cassandra.db.DataTracker.replaceFlushed(Memtable,SSTableReader)",1,2,2
"org.apache.cassandra.db.DataTracker.spaceReclaimed(long)",1,1,1
"org.apache.cassandra.db.DataTracker.switchMemtable()",1,2,2
"org.apache.cassandra.db.DataTracker.unmarkCompacting(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.db.DecoratedKey.DecoratedKey(T,ByteBuffer)",1,1,1
"org.apache.cassandra.db.DecoratedKey.compareTo(DecoratedKey)",1,1,1
"org.apache.cassandra.db.DecoratedKey.equals(Object)",4,1,4
"org.apache.cassandra.db.DecoratedKey.hashCode()",1,1,1
"org.apache.cassandra.db.DecoratedKey.isEmpty()",1,1,1
"org.apache.cassandra.db.DecoratedKey.toString()",1,2,2
"org.apache.cassandra.db.DefinitionsUpdateVerbHandler.doVerb(Message,String)",1,6,7
"org.apache.cassandra.db.DefsTable.dumpToStorage(UUID)",1,2,2
"org.apache.cassandra.db.DefsTable.getFiles(String,String)",1,4,4
"org.apache.cassandra.db.DefsTable.loadFromStorage(UUID)",4,2,4
"org.apache.cassandra.db.DeletedColumn.DeletedColumn(ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.DeletedColumn.DeletedColumn(ByteBuffer,int,long)",1,1,1
"org.apache.cassandra.db.DeletedColumn.getLocalDeletionTime()",1,1,1
"org.apache.cassandra.db.DeletedColumn.getMarkedForDeleteAt()",1,1,1
"org.apache.cassandra.db.DeletedColumn.isMarkedForDelete()",1,1,1
"org.apache.cassandra.db.DeletedColumn.localCopy(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.DeletedColumn.reconcile(IColumn)",2,2,2
"org.apache.cassandra.db.DeletedColumn.serializationFlags()",1,1,1
"org.apache.cassandra.db.DeletedColumn.validateFields(CFMetaData)",3,1,3
"org.apache.cassandra.db.EchoedRow.EchoedRow(CompactionController,SSTableIdentityIterator)",1,1,1
"org.apache.cassandra.db.EchoedRow.columnCount()",1,1,1
"org.apache.cassandra.db.EchoedRow.isEmpty()",1,2,2
"org.apache.cassandra.db.EchoedRow.update(MessageDigest)",1,1,1
"org.apache.cassandra.db.EchoedRow.write(DataOutput)",1,1,1
"org.apache.cassandra.db.ExpiringColumn.ExpiringColumn(ByteBuffer,ByteBuffer,long,int)",1,1,1
"org.apache.cassandra.db.ExpiringColumn.ExpiringColumn(ByteBuffer,ByteBuffer,long,int,int)",1,1,1
"org.apache.cassandra.db.ExpiringColumn.getLocalDeletionTime()",1,1,1
"org.apache.cassandra.db.ExpiringColumn.getMarkedForDeleteAt()",2,1,2
"org.apache.cassandra.db.ExpiringColumn.getString(AbstractType)",1,1,1
"org.apache.cassandra.db.ExpiringColumn.getTimeToLive()",1,1,1
"org.apache.cassandra.db.ExpiringColumn.isMarkedForDelete()",1,1,1
"org.apache.cassandra.db.ExpiringColumn.localCopy(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.ExpiringColumn.serializationFlags()",1,1,1
"org.apache.cassandra.db.ExpiringColumn.size()",1,1,1
"org.apache.cassandra.db.ExpiringColumn.updateDigest(MessageDigest)",1,1,2
"org.apache.cassandra.db.ExpiringColumn.validateFields(CFMetaData)",3,1,3
"org.apache.cassandra.db.HintedHandOffManager.HintedHandOffManager()",1,1,2
"org.apache.cassandra.db.HintedHandOffManager.countPendingHints()",1,3,3
"org.apache.cassandra.db.HintedHandOffManager.deleteHintKey(ByteBuffer,ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.HintedHandOffManager.deleteHintsForEndpoint(InetAddress)",1,2,2
"org.apache.cassandra.db.HintedHandOffManager.deleteHintsForEndpoint(String)",1,2,2
"org.apache.cassandra.db.HintedHandOffManager.deliverHints(InetAddress)",2,1,2
"org.apache.cassandra.db.HintedHandOffManager.deliverHints(String)",1,1,1
"org.apache.cassandra.db.HintedHandOffManager.deliverHintsToEndpoint(InetAddress)",8,8,10
"org.apache.cassandra.db.HintedHandOffManager.getHintsSlice(int)",1,2,2
"org.apache.cassandra.db.HintedHandOffManager.getTableAndCFNames(ByteBuffer)",2,3,4
"org.apache.cassandra.db.HintedHandOffManager.listEndpointsPendingHints()",1,3,3
"org.apache.cassandra.db.HintedHandOffManager.makeCombinedName(String,String)",1,1,1
"org.apache.cassandra.db.HintedHandOffManager.pagingFinished(ColumnFamily,ByteBuffer)",1,3,3
"org.apache.cassandra.db.HintedHandOffManager.registerMBean()",1,1,1
"org.apache.cassandra.db.HintedHandOffManager.sendRow(InetAddress,String,String,ByteBuffer)",7,6,10
"org.apache.cassandra.db.HintedHandOffManager.waitForSchemaAgreement(InetAddress)",5,3,5
"org.apache.cassandra.db.IndexScanCommand.IndexScanCommand(String,String,IndexClause,SlicePredicate,AbstractBounds)",1,1,1
"org.apache.cassandra.db.IndexScanCommand.IndexScanCommandSerializer.deserialize(DataInput)",1,1,1
"org.apache.cassandra.db.IndexScanCommand.IndexScanCommandSerializer.serialize(IndexScanCommand,DataOutput)",1,1,1
"org.apache.cassandra.db.IndexScanCommand.getMessage(Integer)",1,1,2
"org.apache.cassandra.db.IndexScanCommand.read(Message)",1,1,1
"org.apache.cassandra.db.KeyspaceNotDefinedException.KeyspaceNotDefinedException(String)",1,1,1
"org.apache.cassandra.db.Memtable.Memtable(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.Memtable.clearUnsafe()",1,1,1
"org.apache.cassandra.db.Memtable.compareTo(Memtable)",3,1,3
"org.apache.cassandra.db.Memtable.contents()",1,2,2
"org.apache.cassandra.db.Memtable.flushAndSignal(CountDownLatch,ExecutorService,ExecutorService,ReplayPosition)",1,2,2
"org.apache.cassandra.db.Memtable.freeze()",1,1,1
"org.apache.cassandra.db.Memtable.getColumnFamily(DecoratedKey)",1,1,1
"org.apache.cassandra.db.Memtable.getEntryIterator(DecoratedKey)",1,1,1
"org.apache.cassandra.db.Memtable.getLiveSize()",1,1,1
"org.apache.cassandra.db.Memtable.getNamesIterator(DecoratedKey,ColumnFamily,NamesQueryFilter)",3,4,4
"org.apache.cassandra.db.Memtable.getOperations()",1,1,1
"org.apache.cassandra.db.Memtable.getSerializedSize()",1,1,1
"org.apache.cassandra.db.Memtable.getSliceIterator(DecoratedKey,ColumnFamily,SliceQueryFilter,AbstractType)",1,6,7
"org.apache.cassandra.db.Memtable.getTableName()",1,1,1
"org.apache.cassandra.db.Memtable.isClean()",1,1,1
"org.apache.cassandra.db.Memtable.isExpired()",1,1,1
"org.apache.cassandra.db.Memtable.isFrozen()",1,1,1
"org.apache.cassandra.db.Memtable.isThresholdViolated()",1,2,2
"org.apache.cassandra.db.Memtable.put(DecoratedKey,ColumnFamily)",1,1,1
"org.apache.cassandra.db.Memtable.resolve(DecoratedKey,ColumnFamily)",2,2,4
"org.apache.cassandra.db.Memtable.toString()",1,1,1
"org.apache.cassandra.db.Memtable.updateLiveRatio()",2,6,6
"org.apache.cassandra.db.Memtable.writeSortedContents(ReplayPosition)",1,3,3
"org.apache.cassandra.db.MemtableAllocator.Region.Region(int)",1,1,1
"org.apache.cassandra.db.MemtableAllocator.Region.allocate(int)",5,4,5
"org.apache.cassandra.db.MemtableAllocator.Region.init()",1,1,1
"org.apache.cassandra.db.MemtableAllocator.Region.toString()",1,1,1
"org.apache.cassandra.db.MemtableAllocator.clone(ByteBuffer)",4,4,4
"org.apache.cassandra.db.MemtableAllocator.getRegion()",4,3,4
"org.apache.cassandra.db.MemtableAllocator.tryRetireRegion(Region)",1,2,2
"org.apache.cassandra.db.MeteredFlusher.countFlushingBytes()",1,3,3
"org.apache.cassandra.db.MeteredFlusher.run()",6,6,10
"org.apache.cassandra.db.RangeSliceCommand.RangeSliceCommand(String,ColumnParent,SlicePredicate,AbstractBounds,int)",1,1,1
"org.apache.cassandra.db.RangeSliceCommand.RangeSliceCommand(String,String,ByteBuffer,SlicePredicate,AbstractBounds,int)",1,1,1
"org.apache.cassandra.db.RangeSliceCommand.getKeyspace()",1,1,1
"org.apache.cassandra.db.RangeSliceCommand.getMessage(Integer)",1,1,1
"org.apache.cassandra.db.RangeSliceCommand.read(Message)",1,1,1
"org.apache.cassandra.db.RangeSliceCommand.toString()",1,1,1
"org.apache.cassandra.db.RangeSliceCommandSerializer.deserialize(DataInputStream,int)",1,2,2
"org.apache.cassandra.db.RangeSliceCommandSerializer.readBuf(int,DataInputStream)",1,2,2
"org.apache.cassandra.db.RangeSliceCommandSerializer.serialize(RangeSliceCommand,DataOutputStream,int)",1,3,3
"org.apache.cassandra.db.RangeSliceReply.RangeSliceReply(List<Row>)",1,1,1
"org.apache.cassandra.db.RangeSliceReply.getReply(Message)",1,2,2
"org.apache.cassandra.db.RangeSliceReply.read(byte[],int)",1,2,2
"org.apache.cassandra.db.RangeSliceReply.toString()",1,1,1
"org.apache.cassandra.db.ReadCommand.ReadCommand(String,ByteBuffer,QueryPath,byte)",1,1,1
"org.apache.cassandra.db.ReadCommand.getColumnFamilyName()",1,1,1
"org.apache.cassandra.db.ReadCommand.getComparator()",1,1,1
"org.apache.cassandra.db.ReadCommand.getKeyspace()",1,1,1
"org.apache.cassandra.db.ReadCommand.getMessage(Integer)",1,1,1
"org.apache.cassandra.db.ReadCommand.isDigestQuery()",1,1,1
"org.apache.cassandra.db.ReadCommand.serializer()",1,1,1
"org.apache.cassandra.db.ReadCommand.setDigestQuery(boolean)",1,1,1
"org.apache.cassandra.db.ReadCommandSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.db.ReadCommandSerializer.serialize(ReadCommand,DataOutputStream,int)",1,1,1
"org.apache.cassandra.db.ReadRepairVerbHandler.doVerb(Message,String)",1,1,2
"org.apache.cassandra.db.ReadResponse.ReadResponse(ByteBuffer)",1,1,1
"org.apache.cassandra.db.ReadResponse.ReadResponse(Row)",1,1,1
"org.apache.cassandra.db.ReadResponse.digest()",1,1,1
"org.apache.cassandra.db.ReadResponse.isDigestQuery()",1,1,1
"org.apache.cassandra.db.ReadResponse.row()",1,1,1
"org.apache.cassandra.db.ReadResponse.serializer()",1,1,1
"org.apache.cassandra.db.ReadResponseSerializer.deserialize(DataInputStream,int)",1,4,4
"org.apache.cassandra.db.ReadResponseSerializer.serialize(ReadResponse,DataOutputStream,int)",1,4,4
"org.apache.cassandra.db.ReadVerbHandler.doVerb(Message,String)",2,3,5
"org.apache.cassandra.db.ReadVerbHandler.getResponse(ReadCommand,Row)",2,3,3
"org.apache.cassandra.db.Row.Row(DecoratedKey<?>,ColumnFamily)",1,1,1
"org.apache.cassandra.db.Row.serializer()",1,1,1
"org.apache.cassandra.db.Row.toString()",1,1,1
"org.apache.cassandra.db.RowIterator.RowIterator(ReducingIterator<IColumnIterator, Row>,List<Iterator<IColumnIterator>>)",1,1,1
"org.apache.cassandra.db.RowIterator.close()",1,3,3
"org.apache.cassandra.db.RowIterator.hasNext()",1,1,1
"org.apache.cassandra.db.RowIterator.next()",1,1,1
"org.apache.cassandra.db.RowIterator.remove()",1,1,1
"org.apache.cassandra.db.RowIteratorFactory.ConvertToColumnIterator.ConvertToColumnIterator(QueryFilter,AbstractType)",1,1,1
"org.apache.cassandra.db.RowIteratorFactory.ConvertToColumnIterator.apply(Entry<DecoratedKey, ColumnFamily>)",1,1,1
"org.apache.cassandra.db.RowIteratorFactory.getIterator(Collection<Memtable>,Collection<SSTableReader>,DecoratedKey,DecoratedKey,QueryFilter,AbstractType,ColumnFamilyStore)",1,7,7
"org.apache.cassandra.db.RowMutation.RowMutation(String,ByteBuffer)",1,1,1
"org.apache.cassandra.db.RowMutation.RowMutation(String,ByteBuffer,Map<Integer, ColumnFamily>)",1,1,1
"org.apache.cassandra.db.RowMutation.RowMutation(String,Row)",1,1,1
"org.apache.cassandra.db.RowMutation.RowMutationSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.db.RowMutation.RowMutationSerializer.deserialize(DataInputStream,int,boolean)",1,2,2
"org.apache.cassandra.db.RowMutation.RowMutationSerializer.serialize(RowMutation,DataOutputStream,int)",1,3,3
"org.apache.cassandra.db.RowMutation.add(ColumnFamily)",2,1,2
"org.apache.cassandra.db.RowMutation.add(QueryPath,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.RowMutation.add(QueryPath,ByteBuffer,long,int)",1,2,2
"org.apache.cassandra.db.RowMutation.addColumnOrSuperColumn(String,ColumnOrSuperColumn)",1,6,6
"org.apache.cassandra.db.RowMutation.addCounter(QueryPath,long)",1,2,2
"org.apache.cassandra.db.RowMutation.addHints(RowMutation)",1,2,2
"org.apache.cassandra.db.RowMutation.apply()",1,1,1
"org.apache.cassandra.db.RowMutation.applyBinary()",1,1,1
"org.apache.cassandra.db.RowMutation.applyUnsafe()",1,1,1
"org.apache.cassandra.db.RowMutation.delete(QueryPath,long)",1,4,5
"org.apache.cassandra.db.RowMutation.deleteColumnOrSuperColumn(String,Deletion)",1,5,6
"org.apache.cassandra.db.RowMutation.fromBytes(byte[],int)",3,3,4
"org.apache.cassandra.db.RowMutation.getColumnFamilies()",1,1,1
"org.apache.cassandra.db.RowMutation.getColumnFamily(Integer)",1,1,1
"org.apache.cassandra.db.RowMutation.getColumnFamilyIds()",1,1,1
"org.apache.cassandra.db.RowMutation.getMessage(Integer)",1,1,1
"org.apache.cassandra.db.RowMutation.getSerializedBuffer(int)",1,2,2
"org.apache.cassandra.db.RowMutation.getTable()",1,1,1
"org.apache.cassandra.db.RowMutation.isEmpty()",1,1,1
"org.apache.cassandra.db.RowMutation.key()",1,1,1
"org.apache.cassandra.db.RowMutation.localCopy()",1,3,3
"org.apache.cassandra.db.RowMutation.makeRowMutationMessage(Verb,int)",1,1,1
"org.apache.cassandra.db.RowMutation.serializer()",1,1,1
"org.apache.cassandra.db.RowMutation.toString()",1,1,1
"org.apache.cassandra.db.RowMutation.toString(boolean)",1,3,4
"org.apache.cassandra.db.RowMutationVerbHandler.doVerb(Message,String)",1,8,8
"org.apache.cassandra.db.RowMutationVerbHandler.forwardToLocalNodes(Message,byte[])",1,3,3
"org.apache.cassandra.db.RowSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.db.RowSerializer.deserialize(DataInputStream,int,boolean)",1,1,1
"org.apache.cassandra.db.RowSerializer.serialize(Row,DataOutputStream,int)",1,1,1
"org.apache.cassandra.db.SchemaCheckVerbHandler.doVerb(Message,String)",1,1,1
"org.apache.cassandra.db.SliceByNamesReadCommand.SliceByNamesReadCommand(String,ByteBuffer,ColumnParent,Collection<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.SliceByNamesReadCommand.SliceByNamesReadCommand(String,ByteBuffer,QueryPath,Collection<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.SliceByNamesReadCommand.copy()",1,1,1
"org.apache.cassandra.db.SliceByNamesReadCommand.getRow(Table)",1,1,1
"org.apache.cassandra.db.SliceByNamesReadCommand.toString()",1,1,1
"org.apache.cassandra.db.SliceByNamesReadCommandSerializer.deserialize(DataInputStream,int)",1,2,2
"org.apache.cassandra.db.SliceByNamesReadCommandSerializer.serialize(ReadCommand,DataOutputStream,int)",1,3,3
"org.apache.cassandra.db.SliceFromReadCommand.SliceFromReadCommand(String,ByteBuffer,ColumnParent,ByteBuffer,ByteBuffer,boolean,int)",1,1,1
"org.apache.cassandra.db.SliceFromReadCommand.SliceFromReadCommand(String,ByteBuffer,QueryPath,ByteBuffer,ByteBuffer,boolean,int)",1,1,1
"org.apache.cassandra.db.SliceFromReadCommand.copy()",1,1,1
"org.apache.cassandra.db.SliceFromReadCommand.getRow(Table)",1,1,1
"org.apache.cassandra.db.SliceFromReadCommand.toString()",1,1,1
"org.apache.cassandra.db.SliceFromReadCommandSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.db.SliceFromReadCommandSerializer.serialize(ReadCommand,DataOutputStream,int)",1,1,1
"org.apache.cassandra.db.SuperColumn.SuperColumn(ByteBuffer,AbstractType)",1,1,1
"org.apache.cassandra.db.SuperColumn.SuperColumn(ByteBuffer,ConcurrentSkipListMap<ByteBuffer, IColumn>)",1,1,1
"org.apache.cassandra.db.SuperColumn.addColumn(IColumn)",3,2,3
"org.apache.cassandra.db.SuperColumn.cloneMe()",1,1,1
"org.apache.cassandra.db.SuperColumn.cloneMeShallow()",1,1,1
"org.apache.cassandra.db.SuperColumn.diff(IColumn)",2,6,7
"org.apache.cassandra.db.SuperColumn.getComparator()",1,1,1
"org.apache.cassandra.db.SuperColumn.getLocalDeletionTime()",1,1,1
"org.apache.cassandra.db.SuperColumn.getMarkedForDeleteAt()",1,1,1
"org.apache.cassandra.db.SuperColumn.getSortedColumns()",1,1,1
"org.apache.cassandra.db.SuperColumn.getString(AbstractType)",1,2,2
"org.apache.cassandra.db.SuperColumn.getSubColumn(ByteBuffer)",1,1,2
"org.apache.cassandra.db.SuperColumn.getSubColumns()",1,1,1
"org.apache.cassandra.db.SuperColumn.isLive()",1,1,1
"org.apache.cassandra.db.SuperColumn.isMarkedForDelete()",1,1,1
"org.apache.cassandra.db.SuperColumn.localCopy(ColumnFamilyStore)",1,2,2
"org.apache.cassandra.db.SuperColumn.markForDeleteAt(int,long)",1,1,1
"org.apache.cassandra.db.SuperColumn.mostRecentLiveChangeAt()",1,4,4
"org.apache.cassandra.db.SuperColumn.name()",1,1,1
"org.apache.cassandra.db.SuperColumn.putColumn(IColumn)",1,2,2
"org.apache.cassandra.db.SuperColumn.reconcile(IColumn)",1,1,1
"org.apache.cassandra.db.SuperColumn.remove(ByteBuffer)",1,1,1
"org.apache.cassandra.db.SuperColumn.retainAll(SuperColumn)",1,12,13
"org.apache.cassandra.db.SuperColumn.serializationFlags()",1,1,1
"org.apache.cassandra.db.SuperColumn.serializedSize()",1,1,1
"org.apache.cassandra.db.SuperColumn.serializer(AbstractType)",1,2,2
"org.apache.cassandra.db.SuperColumn.shallowCopy()",1,1,1
"org.apache.cassandra.db.SuperColumn.size()",1,2,2
"org.apache.cassandra.db.SuperColumn.timestamp()",1,1,1
"org.apache.cassandra.db.SuperColumn.updateDigest(MessageDigest)",1,2,3
"org.apache.cassandra.db.SuperColumn.validateFields(CFMetaData)",1,2,2
"org.apache.cassandra.db.SuperColumn.value()",1,1,1
"org.apache.cassandra.db.SuperColumnSerializer.SuperColumnSerializer(AbstractType)",1,1,1
"org.apache.cassandra.db.SuperColumnSerializer.deserialize(DataInput)",1,1,1
"org.apache.cassandra.db.SuperColumnSerializer.deserialize(DataInput,ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.SuperColumnSerializer.deserialize(DataInput,ColumnFamilyStore,boolean)",1,1,1
"org.apache.cassandra.db.SuperColumnSerializer.deserialize(DataInput,ColumnFamilyStore,boolean,int)",3,1,5
"org.apache.cassandra.db.SuperColumnSerializer.getComparator()",1,1,1
"org.apache.cassandra.db.SuperColumnSerializer.serialize(IColumn,DataOutput)",1,2,3
"org.apache.cassandra.db.SystemTable.checkHealth()",5,4,6
"org.apache.cassandra.db.SystemTable.decorate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.SystemTable.forceBlockingFlush(String)",1,1,3
"org.apache.cassandra.db.SystemTable.getCurrentLocalNodeId()",2,4,4
"org.apache.cassandra.db.SystemTable.getOldLocalNodeIds()",1,3,3
"org.apache.cassandra.db.SystemTable.getSavedToken()",1,2,2
"org.apache.cassandra.db.SystemTable.incrementAndGetGeneration()",1,2,2
"org.apache.cassandra.db.SystemTable.isBootstrapped()",2,1,2
"org.apache.cassandra.db.SystemTable.isIndexBuilt(String,String)",1,1,1
"org.apache.cassandra.db.SystemTable.loadTokens()",3,3,4
"org.apache.cassandra.db.SystemTable.purgeIncompatibleHints()",1,3,3
"org.apache.cassandra.db.SystemTable.removeToken(Token)",1,1,2
"org.apache.cassandra.db.SystemTable.setBootstrapped(boolean)",1,1,3
"org.apache.cassandra.db.SystemTable.setIndexBuilt(String,String)",1,1,2
"org.apache.cassandra.db.SystemTable.setIndexRemoved(String,String)",1,1,2
"org.apache.cassandra.db.SystemTable.updateToken(InetAddress,Token)",1,1,2
"org.apache.cassandra.db.SystemTable.updateToken(Token)",1,1,2
"org.apache.cassandra.db.SystemTable.writeCurrentLocalNodeId(NodeId,NodeId,long)",1,2,3
"org.apache.cassandra.db.Table.IndexBuilder.IndexBuilder(ColumnFamilyStore,SortedSet<ByteBuffer>,ReducingKeyIterator)",1,1,1
"org.apache.cassandra.db.Table.IndexBuilder.build()",1,4,5
"org.apache.cassandra.db.Table.IndexBuilder.getCompactionInfo()",1,1,1
"org.apache.cassandra.db.Table.Table(String)",2,6,9
"org.apache.cassandra.db.Table.addFullMemtable(List<Memtable>,Memtable)",1,1,2
"org.apache.cassandra.db.Table.all()",1,1,1
"org.apache.cassandra.db.Table.apply(RowMutation,boolean)",3,15,16
"org.apache.cassandra.db.Table.applyIndexUpdates(ByteBuffer,ColumnFamily,ColumnFamilyStore,SortedSet<ByteBuffer>,ColumnFamily)",6,10,12
"org.apache.cassandra.db.Table.cleanupIndexEntry(ColumnFamilyStore,ByteBuffer,IColumn)",2,3,4
"org.apache.cassandra.db.Table.clear(String)",1,3,3
"org.apache.cassandra.db.Table.clearSnapshot(String)",1,4,4
"org.apache.cassandra.db.Table.createIndexBuilder(ColumnFamilyStore,SortedSet<ByteBuffer>,ReducingKeyIterator)",1,1,1
"org.apache.cassandra.db.Table.createReplicationStrategy(KSMetaData)",1,2,2
"org.apache.cassandra.db.Table.dropCf(Integer)",2,1,2
"org.apache.cassandra.db.Table.flush()",1,3,3
"org.apache.cassandra.db.Table.forceCleanup(OneShotRenewer)",4,2,5
"org.apache.cassandra.db.Table.getAllSSTables()",1,2,2
"org.apache.cassandra.db.Table.getColumnFamilyStore(Integer)",2,1,2
"org.apache.cassandra.db.Table.getColumnFamilyStore(String)",2,2,2
"org.apache.cassandra.db.Table.getColumnFamilyStores()",1,1,1
"org.apache.cassandra.db.Table.getDataFileLocation(long)",2,2,3
"org.apache.cassandra.db.Table.getReplicationStrategy()",1,1,1
"org.apache.cassandra.db.Table.getRow(QueryFilter)",1,1,1
"org.apache.cassandra.db.Table.getSnapshotPath(String,String,String)",1,1,1
"org.apache.cassandra.db.Table.getTimestampedSnapshotName(String)",1,2,3
"org.apache.cassandra.db.Table.ignoreObsoleteMutations(ColumnFamily,SortedSet<ByteBuffer>,ColumnFamily)",2,14,18
"org.apache.cassandra.db.Table.indexLockFor(ByteBuffer)",1,1,1
"org.apache.cassandra.db.Table.initCf(Integer,String)",1,1,1
"org.apache.cassandra.db.Table.load(RowMutation)",1,3,3
"org.apache.cassandra.db.Table.open(String)",1,4,4
"org.apache.cassandra.db.Table.readCurrentIndexedColumns(DecoratedKey<?>,ColumnFamilyStore,SortedSet<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.Table.renameCf(Integer,String)",1,1,1
"org.apache.cassandra.db.Table.snapshot(String)",1,2,2
"org.apache.cassandra.db.Table.snapshotExists(String)",3,2,3
"org.apache.cassandra.db.Table.toString()",1,1,1
"org.apache.cassandra.db.Table.unloadCf(ColumnFamilyStore)",1,1,3
"org.apache.cassandra.db.TruncateResponse.TruncateResponse(String,String,boolean)",1,1,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer.serialize(TruncateResponse,DataOutputStream,int)",1,1,1
"org.apache.cassandra.db.TruncateResponse.makeTruncateResponseMessage(Message,TruncateResponse)",1,1,1
"org.apache.cassandra.db.TruncateResponse.serializer()",1,1,1
"org.apache.cassandra.db.TruncateVerbHandler.doVerb(Message,String)",1,2,3
"org.apache.cassandra.db.TruncateVerbHandler.respondError(Truncation,Message)",1,1,1
"org.apache.cassandra.db.Truncation.Truncation(String,String)",1,1,1
"org.apache.cassandra.db.Truncation.apply()",1,1,1
"org.apache.cassandra.db.Truncation.getMessage(Integer)",1,1,1
"org.apache.cassandra.db.Truncation.serializer()",1,1,1
"org.apache.cassandra.db.Truncation.toString()",1,1,1
"org.apache.cassandra.db.TruncationSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.db.TruncationSerializer.serialize(Truncation,DataOutputStream,int)",1,1,1
"org.apache.cassandra.db.UnserializableColumnFamilyException.UnserializableColumnFamilyException(String,int)",1,1,1
"org.apache.cassandra.db.WriteResponse.WriteResponse(String,ByteBuffer,boolean)",1,1,1
"org.apache.cassandra.db.WriteResponse.WriteResponseSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.db.WriteResponse.WriteResponseSerializer.serialize(WriteResponse,DataOutputStream,int)",1,1,1
"org.apache.cassandra.db.WriteResponse.isSuccess()",1,1,1
"org.apache.cassandra.db.WriteResponse.key()",1,1,1
"org.apache.cassandra.db.WriteResponse.makeWriteResponseMessage(Message,WriteResponse)",1,1,1
"org.apache.cassandra.db.WriteResponse.serializer()",1,1,1
"org.apache.cassandra.db.WriteResponse.table()",1,1,1
"org.apache.cassandra.db.columniterator.IdentityQueryFilter.IdentityQueryFilter()",1,1,1
"org.apache.cassandra.db.columniterator.IdentityQueryFilter.filterSuperColumn(SuperColumn,int)",1,1,1
"org.apache.cassandra.db.columniterator.IndexedSliceReader.IndexedBlockFetcher.IndexedBlockFetcher()",1,1,1
"org.apache.cassandra.db.columniterator.IndexedSliceReader.IndexedBlockFetcher.getNextBlock()",5,16,20
"org.apache.cassandra.db.columniterator.IndexedSliceReader.IndexedSliceReader(SSTableReader,FileDataInput,ByteBuffer,ByteBuffer,boolean)",1,1,3
"org.apache.cassandra.db.columniterator.IndexedSliceReader.SimpleBlockFetcher.SimpleBlockFetcher()",3,7,8
"org.apache.cassandra.db.columniterator.IndexedSliceReader.SimpleBlockFetcher.getNextBlock()",1,1,1
"org.apache.cassandra.db.columniterator.IndexedSliceReader.close()",1,1,1
"org.apache.cassandra.db.columniterator.IndexedSliceReader.computeNext()",4,5,7
"org.apache.cassandra.db.columniterator.IndexedSliceReader.getColumnFamily()",1,1,1
"org.apache.cassandra.db.columniterator.IndexedSliceReader.getKey()",1,1,1
"org.apache.cassandra.db.columniterator.IndexedSliceReader.isColumnNeeded(IColumn)",7,14,14
"org.apache.cassandra.db.columniterator.SSTableNamesIterator.SSTableNamesIterator(SSTableReader,DecoratedKey,SortedSet<ByteBuffer>)",2,1,3
"org.apache.cassandra.db.columniterator.SSTableNamesIterator.SSTableNamesIterator(SSTableReader,FileDataInput,DecoratedKey,SortedSet<ByteBuffer>)",1,1,2
"org.apache.cassandra.db.columniterator.SSTableNamesIterator.computeNext()",2,3,3
"org.apache.cassandra.db.columniterator.SSTableNamesIterator.getColumnFamily()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableNamesIterator.getKey()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableNamesIterator.read(SSTableReader,FileDataInput)",2,5,6
"org.apache.cassandra.db.columniterator.SSTableNamesIterator.readIndexedColumns(CFMetaData,FileDataInput,SortedSet<ByteBuffer>,List<ByteBuffer>,List<IndexInfo>)",4,5,7
"org.apache.cassandra.db.columniterator.SSTableNamesIterator.readSimpleColumns(FileDataInput,SortedSet<ByteBuffer>,List<ByteBuffer>)",4,3,4
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.SSTableSliceIterator(SSTableReader,DecoratedKey,ByteBuffer,ByteBuffer,boolean)",2,1,3
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.SSTableSliceIterator(SSTableReader,FileDataInput,DecoratedKey,ByteBuffer,ByteBuffer,boolean)",1,1,1
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.close()",1,2,2
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.createReader(SSTableReader,FileDataInput,ByteBuffer,ByteBuffer,boolean)",1,2,3
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.getColumnFamily()",1,2,2
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.getKey()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.hasNext()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.next()",1,1,1
"org.apache.cassandra.db.columniterator.SSTableSliceIterator.remove()",1,1,1
"org.apache.cassandra.db.columniterator.SimpleAbstractColumnIterator.close()",1,1,1
"org.apache.cassandra.db.columniterator.SimpleSliceReader.SimpleSliceReader(SSTableReader,FileDataInput,ByteBuffer)",1,1,2
"org.apache.cassandra.db.columniterator.SimpleSliceReader.close()",1,1,1
"org.apache.cassandra.db.columniterator.SimpleSliceReader.computeNext()",3,4,5
"org.apache.cassandra.db.columniterator.SimpleSliceReader.getColumnFamily()",1,1,1
"org.apache.cassandra.db.columniterator.SimpleSliceReader.getKey()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogExecutorService.awaitTermination(long,TimeUnit)",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogExecutorService.getActiveCount()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogExecutorService.getCompletedTasks()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogExecutorService.isShutdown()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogExecutorService.isTerminated()",1,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogExecutorService.registerMBean(Object)",1,1,2
"org.apache.cassandra.db.commitlog.AbstractCommitLogExecutorService.shutdownNow()",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.BatchCommitLogExecutorService()",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.BatchCommitLogExecutorService(int)",1,2,3
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.CheaterFutureTask.CheaterFutureTask(Callable<V>)",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.CheaterFutureTask.getRawCallable()",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.CheaterFutureTask.set(V)",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.add(LogRecordAdder)",1,1,3
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.awaitTermination()",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.execute(Runnable)",1,1,2
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.getPendingTasks()",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.newTaskFor(Callable<T>)",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.newTaskFor(Runnable,T)",1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.processWithSyncBatch()",3,6,8
"org.apache.cassandra.db.commitlog.BatchCommitLogExecutorService.shutdown()",1,2,2
"org.apache.cassandra.db.commitlog.CommitLog.CommitLog()",1,1,3
"org.apache.cassandra.db.commitlog.CommitLog.LogRecordAdder.LogRecordAdder(RowMutation)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.LogRecordAdder.call()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.LogRecordAdder.run()",1,2,3
"org.apache.cassandra.db.commitlog.CommitLog.add(RowMutation)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.createNewSegment()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.currentSegment()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.discardCompletedSegments(Integer,ReplayPosition)",1,1,3
"org.apache.cassandra.db.commitlog.CommitLog.discardCompletedSegmentsInternal(ReplayPosition,Integer)",3,4,4
"org.apache.cassandra.db.commitlog.CommitLog.forceNewSegment()",1,1,3
"org.apache.cassandra.db.commitlog.CommitLog.getContext()",1,1,3
"org.apache.cassandra.db.commitlog.CommitLog.manages(String)",3,2,3
"org.apache.cassandra.db.commitlog.CommitLog.maybeDiscardSegment(CommitLogSegment,Iterator<CommitLogSegment>)",1,4,4
"org.apache.cassandra.db.commitlog.CommitLog.recover()",2,5,5
"org.apache.cassandra.db.commitlog.CommitLog.recover(File[])",10,19,28
"org.apache.cassandra.db.commitlog.CommitLog.resetUnsafe()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.segmentsCount()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.shutdownBlocking()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.sync()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.CommitLogSegment()",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.close()",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.createWriter(String)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.dirtyString()",1,2,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.getContext()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.getName()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.getPath()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.idFromFilename(String)",2,2,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.isSafeToDelete()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.length()",1,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.possibleCommitLogFile(String)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.sync()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.toString()",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.turnOff(Integer)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.turnOffIfNotWritten(Integer,Integer)",1,2,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.turnOn(Integer,Integer)",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.write(RowMutation)",1,5,5
"org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.PeriodicCommitLogExecutorService(CommitLog)",4,3,6
"org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.add(LogRecordAdder)",1,1,2
"org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.awaitTermination()",1,1,1
"org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.getActiveCount()",1,1,1
"org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.getCompletedTasks()",1,1,1
"org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.getPendingTasks()",1,1,1
"org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.shutdown()",1,2,2
"org.apache.cassandra.db.commitlog.PeriodicCommitLogExecutorService.submit(Callable<T>)",1,1,2
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPosition(long,int)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer.deserialize(DataInput)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer.serialize(ReplayPosition,DataOutput)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.compareTo(ReplayPosition)",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.equals(Object)",4,2,5
"org.apache.cassandra.db.commitlog.ReplayPosition.getReplayPosition(Iterable<? extends SSTable>)",2,1,2
"org.apache.cassandra.db.commitlog.ReplayPosition.hashCode()",1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.toString()",1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactedRow.AbstractCompactedRow(DecoratedKey)",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.CompactionController(ColumnFamilyStore,Collection<SSTableReader>,int,boolean)",1,2,3
"org.apache.cassandra.db.compaction.CompactionController.getColumnFamily()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.getCompactedRow(List<SSTableIdentityIterator>)",3,5,6
"org.apache.cassandra.db.compaction.CompactionController.getCompactedRow(SSTableIdentityIterator)",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.getKeyspace()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.getThrottleResolution()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.invalidateCachedRow(DecoratedKey)",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.isMajor()",1,1,1
"org.apache.cassandra.db.compaction.CompactionController.needDeserialize()",4,1,4
"org.apache.cassandra.db.compaction.CompactionController.removeDeletedInCache(DecoratedKey)",1,2,2
"org.apache.cassandra.db.compaction.CompactionController.shouldPurge(DecoratedKey)",1,2,2
"org.apache.cassandra.db.compaction.CompactionInfo.CompactionInfo(String,String,CompactionType,long,long)",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.forProgress(long,long)",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getBytesComplete()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getColumnFamily()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getKeyspace()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getTaskType()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getTotalBytes()",1,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.toString()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.CompactionIterator(CompactionType,Iterable<SSTableReader>,CompactionController)",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.CompactionIterator(CompactionType,Iterator,CompactionController)",1,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.close()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.getCollatingIterator(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.getCompactionInfo()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.getReduced()",2,4,4
"org.apache.cassandra.db.compaction.CompactionIterator.getScanners()",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.isEqual(SSTableIdentityIterator,SSTableIdentityIterator)",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.reduce(SSTableIdentityIterator)",1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.throttle()",3,5,7
"org.apache.cassandra.db.compaction.CompactionIterator.toString()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupInfo.CleanupInfo(SSTableReader,SSTableScanner)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupInfo.getCompactionInfo()",1,1,2
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor(int,String)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor(int,int,String,BlockingQueue<Runnable>)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.beginCompaction(Holder)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.finishCompaction(Holder)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.getCompactions()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ScrubInfo.ScrubInfo(BufferedRandomAccessFile,SSTableReader)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ScrubInfo.getCompactionInfo()",1,1,2
"org.apache.cassandra.db.compaction.CompactionManager.SimpleFuture.SimpleFuture(Runnable)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.SimpleFuture.cancel(boolean)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.SimpleFuture.get()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.SimpleFuture.get(long,TimeUnit)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.SimpleFuture.isCancelled()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.SimpleFuture.isDone()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionIterator.ValidationCompactionIterator(ColumnFamilyStore,Range)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionIterator.getCollatingIterator(Iterable<SSTableReader>,Range)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.ValidationExecutor.ValidationExecutor()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.convertSSTablesToPairs(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.disableAutoCompaction()",1,3,3
"org.apache.cassandra.db.compaction.CompactionManager.doCleanupCompaction(ColumnFamilyStore,Collection<SSTableReader>,OneShotRenewer)",8,13,17
"org.apache.cassandra.db.compaction.CompactionManager.doCompaction(ColumnFamilyStore,Collection<SSTableReader>,int)",4,4,4
"org.apache.cassandra.db.compaction.CompactionManager.doCompactionWithoutSizeEstimation(ColumnFamilyStore,Collection<SSTableReader>,int,String,boolean)",7,10,12
"org.apache.cassandra.db.compaction.CompactionManager.doScrub(ColumnFamilyStore,Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.doValidationCompaction(ColumnFamilyStore,Validator)",1,2,4
"org.apache.cassandra.db.compaction.CompactionManager.forceUserDefinedCompaction(String,String)",6,3,6
"org.apache.cassandra.db.compaction.CompactionManager.getActiveCompactions()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getBuckets(Collection<Pair<T, Long>>,long)",4,5,8
"org.apache.cassandra.db.compaction.CompactionManager.getCompactionLock()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getCompactionSummary()",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.getCompactions()",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.getCompletedTasks()",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getDefaultGcBefore(ColumnFamilyStore)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.getMaxDataAge(Collection<SSTableReader>)",1,1,3
"org.apache.cassandra.db.compaction.CompactionManager.getPendingTasks()",1,1,2
"org.apache.cassandra.db.compaction.CompactionManager.lookupSSTable(ColumnFamilyStore,Descriptor)",3,2,3
"org.apache.cassandra.db.compaction.CompactionManager.maybeCreateWriter(ColumnFamilyStore,String,int,SSTableWriter,Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.performCleanup(ColumnFamilyStore,OneShotRenewer)",3,3,5
"org.apache.cassandra.db.compaction.CompactionManager.performMajor(ColumnFamilyStore)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.performScrub(ColumnFamilyStore)",3,3,5
"org.apache.cassandra.db.compaction.CompactionManager.scrubOne(ColumnFamilyStore,SSTableReader)",8,28,34
"org.apache.cassandra.db.compaction.CompactionManager.submitCacheWrite(Writer)",2,2,2
"org.apache.cassandra.db.compaction.CompactionManager.submitIndexBuild(ColumnFamilyStore,IndexBuilder)",3,2,3
"org.apache.cassandra.db.compaction.CompactionManager.submitMajor(ColumnFamilyStore,long,int)",3,6,8
"org.apache.cassandra.db.compaction.CompactionManager.submitMinorIfNeeded(ColumnFamilyStore)",6,3,7
"org.apache.cassandra.db.compaction.CompactionManager.submitSSTableBuild(Descriptor,OperationType)",1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.submitTruncate(ColumnFamilyStore,long)",1,4,4
"org.apache.cassandra.db.compaction.CompactionManager.submitUserDefined(ColumnFamilyStore,Collection<Descriptor>,int)",2,5,6
"org.apache.cassandra.db.compaction.CompactionManager.submitValidation(ColumnFamilyStore,Validator)",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.throwIfFatal(Throwable)",2,1,4
"org.apache.cassandra.db.compaction.CompactionManager.updateEstimateFor(ColumnFamilyStore,Set<List<SSTableReader>>)",1,4,5
"org.apache.cassandra.db.compaction.CompactionType.CompactionType(String)",1,1,1
"org.apache.cassandra.db.compaction.CompactionType.toString()",1,1,1
"org.apache.cassandra.db.compaction.LazilyCompactedRow.LazilyCompactedRow(CompactionController,List<SSTableIdentityIterator>)",1,3,5
"org.apache.cassandra.db.compaction.LazilyCompactedRow.LazyColumnIterator.LazyColumnIterator(Iterator<IColumn>)",1,1,1
"org.apache.cassandra.db.compaction.LazilyCompactedRow.LazyColumnIterator.getReduced()",2,3,3
"org.apache.cassandra.db.compaction.LazilyCompactedRow.LazyColumnIterator.isEqual(IColumn,IColumn)",1,1,1
"org.apache.cassandra.db.compaction.LazilyCompactedRow.LazyColumnIterator.reduce(IColumn)",1,1,1
"org.apache.cassandra.db.compaction.LazilyCompactedRow.columnCount()",1,1,1
"org.apache.cassandra.db.compaction.LazilyCompactedRow.getComparator()",1,1,1
"org.apache.cassandra.db.compaction.LazilyCompactedRow.getEstimatedColumnCount()",1,1,2
"org.apache.cassandra.db.compaction.LazilyCompactedRow.isEmpty()",1,1,2
"org.apache.cassandra.db.compaction.LazilyCompactedRow.iterator()",1,2,2
"org.apache.cassandra.db.compaction.LazilyCompactedRow.update(MessageDigest)",1,2,3
"org.apache.cassandra.db.compaction.LazilyCompactedRow.write(DataOutput)",1,3,4
"org.apache.cassandra.db.compaction.PrecompactedRow.PrecompactedRow(CompactionController,List<SSTableIdentityIterator>)",1,1,1
"org.apache.cassandra.db.compaction.PrecompactedRow.PrecompactedRow(DecoratedKey,ColumnFamily)",1,1,1
"org.apache.cassandra.db.compaction.PrecompactedRow.columnCount()",1,2,2
"org.apache.cassandra.db.compaction.PrecompactedRow.getFullColumnFamily()",1,1,1
"org.apache.cassandra.db.compaction.PrecompactedRow.isEmpty()",1,2,2
"org.apache.cassandra.db.compaction.PrecompactedRow.merge(List<SSTableIdentityIterator>)",2,4,4
"org.apache.cassandra.db.compaction.PrecompactedRow.removeDeletedAndOldShards(DecoratedKey,CompactionController,ColumnFamily)",1,1,1
"org.apache.cassandra.db.compaction.PrecompactedRow.removeDeletedAndOldShards(boolean,CompactionController,ColumnFamily)",1,5,5
"org.apache.cassandra.db.compaction.PrecompactedRow.update(MessageDigest)",1,1,2
"org.apache.cassandra.db.compaction.PrecompactedRow.write(DataOutput)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.ContextState(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.ContextState(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.ContextState(ByteBuffer,int,int,int,boolean)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.allocate(int,int)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.compareIdTo(ContextState)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.copyTo(ContextState)",1,2,2
"org.apache.cassandra.db.context.CounterContext.ContextState.duplicate()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.elementIdx()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getClock()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getCount()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getNodeId()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.hasRemaining()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.isDelta()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.moveToNext()",1,1,2
"org.apache.cassandra.db.context.CounterContext.ContextState.remainingBodyLength()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.remainingHeaderLength()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.reset()",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.updateIsDelta()",1,2,2
"org.apache.cassandra.db.context.CounterContext.ContextState.writeElement(NodeId,long,long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeElement(NodeId,long,long,boolean)",1,2,2
"org.apache.cassandra.db.context.CounterContext.clearAllDelta(ByteBuffer)",2,1,2
"org.apache.cassandra.db.context.CounterContext.compareId(ByteBuffer,int,ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.context.CounterContext.computeOldShardMerger(ByteBuffer,List<NodeIdRecord>)",7,13,18
"org.apache.cassandra.db.context.CounterContext.create(NodeId,long,long,boolean)",1,2,5
"org.apache.cassandra.db.context.CounterContext.create(long)",1,1,1
"org.apache.cassandra.db.context.CounterContext.diff(ByteBuffer,ByteBuffer)",20,6,26
"org.apache.cassandra.db.context.CounterContext.hasNodeId(ByteBuffer,NodeId)",3,2,3
"org.apache.cassandra.db.context.CounterContext.headerLength(ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.instance()",1,1,1
"org.apache.cassandra.db.context.CounterContext.merge(ByteBuffer,ByteBuffer)",1,17,26
"org.apache.cassandra.db.context.CounterContext.removeOldShards(ByteBuffer,int)",6,17,22
"org.apache.cassandra.db.context.CounterContext.toString(ByteBuffer)",1,4,4
"org.apache.cassandra.db.context.CounterContext.total(ByteBuffer)",1,2,2
"org.apache.cassandra.db.context.CounterContext.updateDigest(MessageDigest,ByteBuffer)",1,1,1
"org.apache.cassandra.db.context.CounterContext.validateContext(ByteBuffer)",2,2,3
"org.apache.cassandra.db.context.CounterContext.writeElementAtOffset(ByteBuffer,int,NodeId,long,long)",1,1,1
"org.apache.cassandra.db.filter.AbstractColumnIterator.close()",1,1,1
"org.apache.cassandra.db.filter.AbstractColumnIterator.remove()",1,1,1
"org.apache.cassandra.db.filter.NamesQueryFilter.NamesQueryFilter(ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.NamesQueryFilter.NamesQueryFilter(SortedSet<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.filter.NamesQueryFilter.collectReducedColumns(IColumnContainer,Iterator<IColumn>,int)",1,3,3
"org.apache.cassandra.db.filter.NamesQueryFilter.filterSuperColumn(SuperColumn,int)",1,4,4
"org.apache.cassandra.db.filter.NamesQueryFilter.getColumnComparator(AbstractType)",1,1,1
"org.apache.cassandra.db.filter.NamesQueryFilter.getMemtableColumnIterator(ColumnFamily,DecoratedKey,AbstractType)",1,1,1
"org.apache.cassandra.db.filter.NamesQueryFilter.getSSTableColumnIterator(SSTableReader,DecoratedKey)",1,1,1
"org.apache.cassandra.db.filter.NamesQueryFilter.getSSTableColumnIterator(SSTableReader,FileDataInput,DecoratedKey)",1,1,1
"org.apache.cassandra.db.filter.NamesQueryFilter.toString()",1,1,1
"org.apache.cassandra.db.filter.QueryFilter.QueryFilter(DecoratedKey,QueryPath,IFilter)",1,1,2
"org.apache.cassandra.db.filter.QueryFilter.collectCollatedColumns(ColumnFamily,Iterator<IColumn>,int)",1,5,6
"org.apache.cassandra.db.filter.QueryFilter.getColumnFamilyName()",1,1,1
"org.apache.cassandra.db.filter.QueryFilter.getFilter(SlicePredicate,AbstractType)",2,2,2
"org.apache.cassandra.db.filter.QueryFilter.getIdentityFilter(DecoratedKey,QueryPath)",1,1,1
"org.apache.cassandra.db.filter.QueryFilter.getMemtableColumnIterator(ColumnFamily,DecoratedKey,AbstractType)",2,2,2
"org.apache.cassandra.db.filter.QueryFilter.getMemtableColumnIterator(Memtable,AbstractType)",2,1,2
"org.apache.cassandra.db.filter.QueryFilter.getNamesFilter(DecoratedKey,QueryPath,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.QueryFilter.getNamesFilter(DecoratedKey,QueryPath,SortedSet<ByteBuffer>)",1,1,1
"org.apache.cassandra.db.filter.QueryFilter.getSSTableColumnIterator(SSTableReader)",2,2,2
"org.apache.cassandra.db.filter.QueryFilter.getSSTableColumnIterator(SSTableReader,FileDataInput,DecoratedKey)",2,2,2
"org.apache.cassandra.db.filter.QueryFilter.getSliceFilter(DecoratedKey,QueryPath,ByteBuffer,ByteBuffer,boolean,int)",1,1,1
"org.apache.cassandra.db.filter.QueryFilter.isRelevant(IColumn,IColumnContainer,int)",1,5,5
"org.apache.cassandra.db.filter.QueryFilter.toString()",1,1,3
"org.apache.cassandra.db.filter.QueryPath.QueryPath(ColumnParent)",1,1,1
"org.apache.cassandra.db.filter.QueryPath.QueryPath(ColumnPath)",1,1,1
"org.apache.cassandra.db.filter.QueryPath.QueryPath(String)",1,1,1
"org.apache.cassandra.db.filter.QueryPath.QueryPath(String,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.QueryPath.QueryPath(String,ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.QueryPath.column(ByteBuffer)",1,1,1
"org.apache.cassandra.db.filter.QueryPath.deserialize(DataInputStream)",1,1,4
"org.apache.cassandra.db.filter.QueryPath.serialize(DataOutputStream)",1,3,6
"org.apache.cassandra.db.filter.QueryPath.toString()",1,1,1
"org.apache.cassandra.db.filter.SliceQueryFilter.SliceQueryFilter(ByteBuffer,ByteBuffer,boolean,int)",1,1,1
"org.apache.cassandra.db.filter.SliceQueryFilter.collectReducedColumns(IColumnContainer,Iterator<IColumn>,int)",4,10,13
"org.apache.cassandra.db.filter.SliceQueryFilter.filterSuperColumn(SuperColumn,int)",3,5,5
"org.apache.cassandra.db.filter.SliceQueryFilter.getColumnComparator(AbstractType)",1,1,2
"org.apache.cassandra.db.filter.SliceQueryFilter.getMemtableColumnIterator(ColumnFamily,DecoratedKey,AbstractType)",1,1,1
"org.apache.cassandra.db.filter.SliceQueryFilter.getSSTableColumnIterator(SSTableReader,DecoratedKey)",1,1,1
"org.apache.cassandra.db.filter.SliceQueryFilter.getSSTableColumnIterator(SSTableReader,FileDataInput,DecoratedKey)",1,1,1
"org.apache.cassandra.db.filter.SliceQueryFilter.toString()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.decompose(Long)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.getPrecision(Long)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.getScale(Long)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.getType()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.isCommutative()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCommutativeType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.compare(ByteBuffer,ByteBuffer)",10,4,13
"org.apache.cassandra.db.marshal.AbstractCompositeType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.decompose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.fromString(String)",3,4,5
"org.apache.cassandra.db.marshal.AbstractCompositeType.getBytes(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.getPrecision(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.getScale(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.getShortLength(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.getString(ByteBuffer)",3,4,4
"org.apache.cassandra.db.marshal.AbstractCompositeType.getType()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.getWithShortLength(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.putShortLength(ByteBuffer,int)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.toString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.validate(ByteBuffer)",6,3,7
"org.apache.cassandra.db.marshal.AbstractType.AbstractType()",3,2,4
"org.apache.cassandra.db.marshal.AbstractType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.getColumnsString(Collection<IColumn>)",1,2,2
"org.apache.cassandra.db.marshal.AbstractType.getReverseComparator()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.getString(Collection<ByteBuffer>)",1,2,2
"org.apache.cassandra.db.marshal.AbstractType.isCommutative()",1,1,1
"org.apache.cassandra.db.marshal.AbstractType.parseDefaultParameters(AbstractType,TypeParser)",2,4,4
"org.apache.cassandra.db.marshal.AbstractType.toString()",1,1,1
"org.apache.cassandra.db.marshal.AbstractUUIDType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.AbstractUUIDType.getPrecision(UUID)",1,1,1
"org.apache.cassandra.db.marshal.AbstractUUIDType.getScale(UUID)",1,1,1
"org.apache.cassandra.db.marshal.AbstractUUIDType.getType()",1,1,1
"org.apache.cassandra.db.marshal.AbstractUUIDType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.AbstractUUIDType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.AbstractUUIDType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.AbstractUUIDType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.AsciiType()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.compare(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.decompose(String)",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.getPrecision(String)",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.getScale(String)",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.getString(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.AsciiType.getType()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.toString(String)",1,1,1
"org.apache.cassandra.db.marshal.AsciiType.validate(ByteBuffer)",3,3,4
"org.apache.cassandra.db.marshal.BooleanType.BooleanType()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.compare(ByteBuffer,ByteBuffer)",3,5,7
"org.apache.cassandra.db.marshal.BooleanType.compose(ByteBuffer)",1,1,2
"org.apache.cassandra.db.marshal.BooleanType.decompose(Boolean)",1,3,3
"org.apache.cassandra.db.marshal.BooleanType.fromString(String)",3,4,4
"org.apache.cassandra.db.marshal.BooleanType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.getPrecision(Boolean)",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.getScale(Boolean)",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.getString(ByteBuffer)",3,4,4
"org.apache.cassandra.db.marshal.BooleanType.getType()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.toString(Boolean)",1,1,1
"org.apache.cassandra.db.marshal.BooleanType.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.db.marshal.BytesType.BytesType()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.bytesCompare(ByteBuffer,ByteBuffer)",3,1,3
"org.apache.cassandra.db.marshal.BytesType.compare(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.decompose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.fromString(String)",1,2,2
"org.apache.cassandra.db.marshal.BytesType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.getPrecision(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.getScale(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.getType()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.BytesType.toString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.BytesType.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.CompositeType(List<AbstractType>)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.StaticParsedComparator(AbstractType,String)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getAbstractType()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getComparatorSerializedSize()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getRemainingPart()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.serializeComparator(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getAndAppendNextComparator(int,ByteBuffer,StringBuilder)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getInstance(List<AbstractType>)",2,3,4
"org.apache.cassandra.db.marshal.CompositeType.getInstance(TypeParser)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getNextComparator(int,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getNextComparator(int,ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.parseNextComparator(int,String)",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.toString()",1,1,1
"org.apache.cassandra.db.marshal.CompositeType.validateNextComparator(int,ByteBuffer)",2,1,2
"org.apache.cassandra.db.marshal.CounterColumnType.CounterColumnType()",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.compare(ByteBuffer,ByteBuffer)",2,1,3
"org.apache.cassandra.db.marshal.CounterColumnType.createColumn(ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.toString(Long)",1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.db.marshal.DateType.DateType()",1,1,1
"org.apache.cassandra.db.marshal.DateType.compare(ByteBuffer,ByteBuffer)",3,2,4
"org.apache.cassandra.db.marshal.DateType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DateType.decompose(Date)",1,2,2
"org.apache.cassandra.db.marshal.DateType.fromString(String)",4,5,6
"org.apache.cassandra.db.marshal.DateType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.DateType.getPrecision(Date)",1,1,1
"org.apache.cassandra.db.marshal.DateType.getScale(Date)",1,1,1
"org.apache.cassandra.db.marshal.DateType.getString(ByteBuffer)",3,2,3
"org.apache.cassandra.db.marshal.DateType.getType()",1,1,1
"org.apache.cassandra.db.marshal.DateType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.DateType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.DateType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.DateType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.DateType.toString(Date)",1,1,1
"org.apache.cassandra.db.marshal.DateType.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.db.marshal.DoubleType.DoubleType()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.compare(ByteBuffer,ByteBuffer)",3,2,4
"org.apache.cassandra.db.marshal.DoubleType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.decompose(Double)",1,2,2
"org.apache.cassandra.db.marshal.DoubleType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.DoubleType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.getPrecision(Double)",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.getScale(Double)",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.getString(ByteBuffer)",3,2,3
"org.apache.cassandra.db.marshal.DoubleType.getType()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.toString(Double)",1,1,1
"org.apache.cassandra.db.marshal.DoubleType.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicCompositeType(Map<Byte, AbstractType>)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.DynamicParsedComparator(String)",2,3,5
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getAbstractType()",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getComparatorSerializedSize()",1,2,2
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getRemainingPart()",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.serializeComparator(ByteBuffer)",1,3,3
"org.apache.cassandra.db.marshal.DynamicCompositeType.getAndAppendNextComparator(int,ByteBuffer,StringBuilder)",2,2,4
"org.apache.cassandra.db.marshal.DynamicCompositeType.getComparator(ByteBuffer)",2,2,4
"org.apache.cassandra.db.marshal.DynamicCompositeType.getInstance(Map<Byte, AbstractType>)",1,2,2
"org.apache.cassandra.db.marshal.DynamicCompositeType.getInstance(TypeParser)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.getNextComparator(int,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.getNextComparator(int,ByteBuffer,ByteBuffer)",2,2,2
"org.apache.cassandra.db.marshal.DynamicCompositeType.parseNextComparator(int,String)",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.toString()",1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.validateNextComparator(int,ByteBuffer)",5,2,6
"org.apache.cassandra.db.marshal.FloatType.FloatType()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.compare(ByteBuffer,ByteBuffer)",3,2,4
"org.apache.cassandra.db.marshal.FloatType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.FloatType.decompose(Float)",1,2,2
"org.apache.cassandra.db.marshal.FloatType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.FloatType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.getPrecision(Float)",1,1,1
"org.apache.cassandra.db.marshal.FloatType.getScale(Float)",1,1,1
"org.apache.cassandra.db.marshal.FloatType.getString(ByteBuffer)",3,2,3
"org.apache.cassandra.db.marshal.FloatType.getType()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.FloatType.toString(Float)",1,1,1
"org.apache.cassandra.db.marshal.FloatType.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.db.marshal.IntegerType.IntegerType()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.compare(ByteBuffer,ByteBuffer)",9,2,11
"org.apache.cassandra.db.marshal.IntegerType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.decompose(BigInteger)",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.findMostSignificantByte(ByteBuffer)",5,2,10
"org.apache.cassandra.db.marshal.IntegerType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.IntegerType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.getPrecision(BigInteger)",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.getScale(BigInteger)",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.getString(ByteBuffer)",3,1,3
"org.apache.cassandra.db.marshal.IntegerType.getType()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.toString(BigInteger)",1,1,1
"org.apache.cassandra.db.marshal.IntegerType.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.LexicalUUIDType()",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.compare(ByteBuffer,ByteBuffer)",3,2,4
"org.apache.cassandra.db.marshal.LexicalUUIDType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.decompose(UUID)",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.LexicalUUIDType.getString(ByteBuffer)",3,1,3
"org.apache.cassandra.db.marshal.LexicalUUIDType.getType()",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.toString(UUID)",1,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.db.marshal.LocalByPartionerType.LocalByPartionerType(IPartitioner<T>)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.compare(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.decompose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.getPrecision(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.getScale(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.getType()",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.toString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LocalByPartionerType.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LongType.LongType()",1,1,1
"org.apache.cassandra.db.marshal.LongType.compare(ByteBuffer,ByteBuffer)",4,2,5
"org.apache.cassandra.db.marshal.LongType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.LongType.decompose(Long)",1,1,1
"org.apache.cassandra.db.marshal.LongType.fromString(String)",2,2,3
"org.apache.cassandra.db.marshal.LongType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.LongType.getPrecision(Long)",1,1,1
"org.apache.cassandra.db.marshal.LongType.getScale(Long)",1,1,1
"org.apache.cassandra.db.marshal.LongType.getString(ByteBuffer)",3,2,3
"org.apache.cassandra.db.marshal.LongType.getType()",1,1,1
"org.apache.cassandra.db.marshal.LongType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.LongType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.LongType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.LongType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.LongType.toString(Long)",1,1,1
"org.apache.cassandra.db.marshal.LongType.validate(ByteBuffer)",2,3,3
"org.apache.cassandra.db.marshal.MarshalException.MarshalException(String)",1,1,1
"org.apache.cassandra.db.marshal.MarshalException.MarshalException(String,Throwable)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.ReversedType(AbstractType<T>)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.compare(ByteBuffer,ByteBuffer)",3,2,4
"org.apache.cassandra.db.marshal.ReversedType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.decompose(T)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.getInstance(AbstractType<T>)",1,2,2
"org.apache.cassandra.db.marshal.ReversedType.getInstance(TypeParser)",2,2,2
"org.apache.cassandra.db.marshal.ReversedType.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.getPrecision(T)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.getScale(T)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.getString(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.getType()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.toString()",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.toString(T)",1,1,1
"org.apache.cassandra.db.marshal.ReversedType.validate(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.TimeUUIDType()",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.compare(ByteBuffer,ByteBuffer)",4,2,5
"org.apache.cassandra.db.marshal.TimeUUIDType.compareTimestampBytes(ByteBuffer,ByteBuffer)",8,1,8
"org.apache.cassandra.db.marshal.TimeUUIDType.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.decompose(UUID)",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.fromString(String)",6,7,9
"org.apache.cassandra.db.marshal.TimeUUIDType.getString(ByteBuffer)",4,1,4
"org.apache.cassandra.db.marshal.TimeUUIDType.getType()",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.toString(UUID)",1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.validate(ByteBuffer)",4,4,5
"org.apache.cassandra.db.marshal.TypeParser.TypeParser(String,int)",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.getAbstractType(String)",1,3,4
"org.apache.cassandra.db.marshal.TypeParser.getAbstractType(String,TypeParser)",1,4,5
"org.apache.cassandra.db.marshal.TypeParser.getAliasParameters()",5,7,11
"org.apache.cassandra.db.marshal.TypeParser.getKeyValueParameters()",5,5,8
"org.apache.cassandra.db.marshal.TypeParser.getRawAbstractType(Class<? extends AbstractType>)",1,3,3
"org.apache.cassandra.db.marshal.TypeParser.getRawAbstractType(Class<? extends AbstractType>,TypeParser)",1,4,4
"org.apache.cassandra.db.marshal.TypeParser.getTypeParameters()",5,3,6
"org.apache.cassandra.db.marshal.TypeParser.isBlank(int)",1,1,3
"org.apache.cassandra.db.marshal.TypeParser.isEOS()",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.isEOS(String,int)",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.isIdentifierChar(int)",1,1,11
"org.apache.cassandra.db.marshal.TypeParser.parse()",2,3,3
"org.apache.cassandra.db.marshal.TypeParser.parse(CharSequence)",1,2,2
"org.apache.cassandra.db.marshal.TypeParser.parse(String)",4,4,8
"org.apache.cassandra.db.marshal.TypeParser.readNextIdentifier()",1,2,3
"org.apache.cassandra.db.marshal.TypeParser.skipBlank()",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.skipBlank(String,int)",1,2,3
"org.apache.cassandra.db.marshal.TypeParser.skipBlankAndComma()",5,3,5
"org.apache.cassandra.db.marshal.TypeParser.stringifyAliasesParameters(Map<Byte, AbstractType>)",1,3,3
"org.apache.cassandra.db.marshal.TypeParser.stringifyTypeParameters(List<AbstractType>)",1,1,1
"org.apache.cassandra.db.marshal.TypeParser.throwSyntaxError(String)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.UTF8Type()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.UTF8Validator.validate(ByteBuffer)",17,3,28
"org.apache.cassandra.db.marshal.UTF8Type.compare(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.compose(ByteBuffer)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.decompose(String)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.fromString(String)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.getJdbcType()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.getPrecision(String)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.getScale(String)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.getString(ByteBuffer)",1,2,2
"org.apache.cassandra.db.marshal.UTF8Type.getType()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.isCaseSensitive()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.isCurrency()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.isSigned()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.needsQuotes()",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.toString(String)",1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.validate(ByteBuffer)",2,1,2
"org.apache.cassandra.db.marshal.UUIDType.UUIDType()",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.compare(ByteBuffer,ByteBuffer)",8,7,12
"org.apache.cassandra.db.marshal.UUIDType.compareTimestampBytes(ByteBuffer,ByteBuffer)",8,1,8
"org.apache.cassandra.db.marshal.UUIDType.compose(ByteBuffer)",2,1,2
"org.apache.cassandra.db.marshal.UUIDType.decompose(UUID)",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.fromString(String)",5,7,8
"org.apache.cassandra.db.marshal.UUIDType.getString(ByteBuffer)",3,1,3
"org.apache.cassandra.db.marshal.UUIDType.getType()",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.toString(UUID)",1,1,1
"org.apache.cassandra.db.marshal.UUIDType.validate(ByteBuffer)",2,2,3
"org.apache.cassandra.db.migration.AddColumnFamily.AddColumnFamily()",1,1,1
"org.apache.cassandra.db.migration.AddColumnFamily.AddColumnFamily(CFMetaData)",6,5,7
"org.apache.cassandra.db.migration.AddColumnFamily.applyModels()",1,2,3
"org.apache.cassandra.db.migration.AddColumnFamily.makeNewKeyspaceDefinition(KSMetaData)",1,1,1
"org.apache.cassandra.db.migration.AddColumnFamily.subdeflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.AddColumnFamily.subinflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.AddColumnFamily.toString()",1,1,1
"org.apache.cassandra.db.migration.AddKeyspace.AddKeyspace()",1,1,1
"org.apache.cassandra.db.migration.AddKeyspace.AddKeyspace(KSMetaData)",5,2,5
"org.apache.cassandra.db.migration.AddKeyspace.applyModels()",2,3,4
"org.apache.cassandra.db.migration.AddKeyspace.subdeflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.AddKeyspace.subinflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.AddKeyspace.toString()",1,1,1
"org.apache.cassandra.db.migration.DropColumnFamily.DropColumnFamily()",1,1,1
"org.apache.cassandra.db.migration.DropColumnFamily.DropColumnFamily(String,String)",3,2,3
"org.apache.cassandra.db.migration.DropColumnFamily.applyModels()",1,2,2
"org.apache.cassandra.db.migration.DropColumnFamily.makeNewKeyspaceDefinition(KSMetaData)",1,1,1
"org.apache.cassandra.db.migration.DropColumnFamily.subdeflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.DropColumnFamily.subinflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.DropColumnFamily.toString()",1,1,1
"org.apache.cassandra.db.migration.DropKeyspace.DropKeyspace()",1,1,1
"org.apache.cassandra.db.migration.DropKeyspace.DropKeyspace(String)",2,1,2
"org.apache.cassandra.db.migration.DropKeyspace.applyModels()",1,3,3
"org.apache.cassandra.db.migration.DropKeyspace.subdeflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.DropKeyspace.subinflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.DropKeyspace.toString()",1,1,1
"org.apache.cassandra.db.migration.Migration.Migration()",1,1,1
"org.apache.cassandra.db.migration.Migration.Migration(UUID,UUID)",1,1,1
"org.apache.cassandra.db.migration.Migration.announce()",1,1,1
"org.apache.cassandra.db.migration.Migration.apply()",6,4,9
"org.apache.cassandra.db.migration.Migration.deserialize(ByteBuffer,int)",1,2,3
"org.apache.cassandra.db.migration.Migration.getLastMigrationId()",2,3,3
"org.apache.cassandra.db.migration.Migration.getLocalMigrations(UUID,UUID)",1,1,1
"org.apache.cassandra.db.migration.Migration.getVersion()",1,1,1
"org.apache.cassandra.db.migration.Migration.isLegalName(String)",1,1,1
"org.apache.cassandra.db.migration.Migration.makeDefinitionMutation(KSMetaData,KSMetaData,UUID)",3,7,8
"org.apache.cassandra.db.migration.Migration.passiveAnnounce()",1,1,1
"org.apache.cassandra.db.migration.Migration.serialize()",1,1,2
"org.apache.cassandra.db.migration.Migration.toUTF8Bytes(UUID)",1,1,1
"org.apache.cassandra.db.migration.RenameColumnFamily.RenameColumnFamily()",1,1,1
"org.apache.cassandra.db.migration.RenameColumnFamily.RenameColumnFamily(String,String,String)",5,1,5
"org.apache.cassandra.db.migration.RenameColumnFamily.applyModels()",1,2,3
"org.apache.cassandra.db.migration.RenameColumnFamily.makeNewKeyspaceDefinition(KSMetaData)",1,1,1
"org.apache.cassandra.db.migration.RenameColumnFamily.subdeflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.RenameColumnFamily.subinflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.RenameColumnFamily.toString()",1,1,1
"org.apache.cassandra.db.migration.RenameKeyspace.RenameKeyspace()",1,1,1
"org.apache.cassandra.db.migration.RenameKeyspace.RenameKeyspace(String,String)",4,1,4
"org.apache.cassandra.db.migration.RenameKeyspace.applyModels()",2,5,6
"org.apache.cassandra.db.migration.RenameKeyspace.rename(KSMetaData,String,boolean)",1,3,3
"org.apache.cassandra.db.migration.RenameKeyspace.renameKsStorageFiles(String,String)",2,5,5
"org.apache.cassandra.db.migration.RenameKeyspace.subdeflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.RenameKeyspace.subinflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.RenameKeyspace.toString()",1,1,1
"org.apache.cassandra.db.migration.UpdateColumnFamily.UpdateColumnFamily()",1,1,1
"org.apache.cassandra.db.migration.UpdateColumnFamily.UpdateColumnFamily(CfDef)",5,5,6
"org.apache.cassandra.db.migration.UpdateColumnFamily.applyModels()",1,2,3
"org.apache.cassandra.db.migration.UpdateColumnFamily.subdeflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.UpdateColumnFamily.subinflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.UpdateColumnFamily.toString()",1,1,1
"org.apache.cassandra.db.migration.UpdateKeyspace.UpdateKeyspace()",1,1,1
"org.apache.cassandra.db.migration.UpdateKeyspace.UpdateKeyspace(KSMetaData)",3,1,3
"org.apache.cassandra.db.migration.UpdateKeyspace.applyModels()",1,1,2
"org.apache.cassandra.db.migration.UpdateKeyspace.subdeflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.UpdateKeyspace.subinflate(Migration)",1,1,1
"org.apache.cassandra.db.migration.UpdateKeyspace.toString()",1,1,1
"org.apache.cassandra.dht.AbstractBounds.AbstractBounds(Token,Token,IPartitioner)",1,1,1
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.deserialize(DataInput)",2,2,2
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.serialize(AbstractBounds,DataOutput)",1,2,2
"org.apache.cassandra.dht.AbstractBounds.hashCode()",1,1,1
"org.apache.cassandra.dht.AbstractBounds.normalize(Collection<? extends AbstractBounds>)",1,2,2
"org.apache.cassandra.dht.AbstractBounds.serializer()",1,1,1
"org.apache.cassandra.dht.AbstractBounds.split(Token)",1,3,4
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.bigForBytes(ByteBuffer,int)",1,1,1
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.bytesForBig(BigInteger,int,boolean)",1,2,4
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.convertFromDiskFormat(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.describeOwnership(List<Token>)",1,6,7
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.getRandomToken()",1,1,1
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.midpoint(Token,Token)",1,3,3
"org.apache.cassandra.dht.AbstractByteOrderedPartitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.BigIntegerToken.BigIntegerToken(BigInteger)",1,1,1
"org.apache.cassandra.dht.BigIntegerToken.BigIntegerToken(String)",1,1,1
"org.apache.cassandra.dht.BigIntegerToken.compareTo(Token<BigInteger>)",1,1,1
"org.apache.cassandra.dht.BootStrapper.BootStrapper(InetAddress,Token,TokenMetadata)",1,1,1
"org.apache.cassandra.dht.BootStrapper.BootstrapTokenCallback.getToken(long)",1,1,3
"org.apache.cassandra.dht.BootStrapper.BootstrapTokenCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.dht.BootStrapper.BootstrapTokenCallback.response(Message)",1,1,1
"org.apache.cassandra.dht.BootStrapper.BootstrapTokenVerbHandler.doVerb(Message,String)",1,1,1
"org.apache.cassandra.dht.BootStrapper.bootstrap()",1,8,9
"org.apache.cassandra.dht.BootStrapper.getBalancedToken(TokenMetadata,Map<InetAddress, Double>)",1,1,1
"org.apache.cassandra.dht.BootStrapper.getBootstrapSource(TokenMetadata,Map<InetAddress, Double>)",7,2,8
"org.apache.cassandra.dht.BootStrapper.getBootstrapToken(TokenMetadata,Map<InetAddress, Double>)",3,2,3
"org.apache.cassandra.dht.BootStrapper.getBootstrapTokenFrom(InetAddress)",3,2,3
"org.apache.cassandra.dht.BootStrapper.getRangesWithSources(String)",4,4,4
"org.apache.cassandra.dht.BootStrapper.getWorkMap(Multimap<Range, InetAddress>)",1,1,1
"org.apache.cassandra.dht.BootStrapper.getWorkMap(Multimap<Range, InetAddress>,IFailureDetector)",4,4,4
"org.apache.cassandra.dht.Bounds.Bounds(Token,Token)",1,1,1
"org.apache.cassandra.dht.Bounds.Bounds(Token,Token,IPartitioner)",1,2,2
"org.apache.cassandra.dht.Bounds.contains(Token)",1,2,2
"org.apache.cassandra.dht.Bounds.createFrom(Token)",1,1,1
"org.apache.cassandra.dht.Bounds.equals(Object)",2,2,3
"org.apache.cassandra.dht.Bounds.toString()",1,1,1
"org.apache.cassandra.dht.Bounds.unwrap()",1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.getToken(ByteBuffer)",2,1,2
"org.apache.cassandra.dht.BytesToken.BytesToken(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.BytesToken.BytesToken(byte[])",1,1,1
"org.apache.cassandra.dht.BytesToken.compareTo(Token<byte[]>)",1,1,1
"org.apache.cassandra.dht.BytesToken.equals(Object)",3,1,3
"org.apache.cassandra.dht.BytesToken.hashCode()",1,1,1
"org.apache.cassandra.dht.BytesToken.toString()",1,1,1
"org.apache.cassandra.dht.CollatingOrderPreservingPartitioner.describeOwnership(List<Token>)",1,1,1
"org.apache.cassandra.dht.CollatingOrderPreservingPartitioner.getToken(ByteBuffer)",2,1,3
"org.apache.cassandra.dht.LocalPartitioner.LocalPartitioner(AbstractType)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.convertFromDiskFormat(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.describeOwnership(List<Token>)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getRandomToken()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getToken(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.midpoint(Token,Token)",1,1,1
"org.apache.cassandra.dht.LocalPartitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.LocalToken.LocalToken(AbstractType,ByteBuffer)",1,1,1
"org.apache.cassandra.dht.LocalToken.compareTo(Token<ByteBuffer>)",1,1,1
"org.apache.cassandra.dht.LocalToken.equals(Object)",3,1,3
"org.apache.cassandra.dht.LocalToken.hashCode()",1,1,1
"org.apache.cassandra.dht.LocalToken.toString()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.bigForString(String,int)",1,2,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.convertFromDiskFormat(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.describeOwnership(List<Token>)",1,6,7
"org.apache.cassandra.dht.OrderPreservingPartitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.getRandomToken()",1,2,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.getToken(ByteBuffer)",1,1,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.midpoint(Token,Token)",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.stringForBig(BigInteger,int,boolean)",1,2,4
"org.apache.cassandra.dht.RandomPartitioner.convertFromDiskFormat(ByteBuffer)",3,2,4
"org.apache.cassandra.dht.RandomPartitioner.decorateKey(ByteBuffer)",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.describeOwnership(List<Token>)",2,3,4
"org.apache.cassandra.dht.RandomPartitioner.getMinimumToken()",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.getRandomToken()",1,2,2
"org.apache.cassandra.dht.RandomPartitioner.getToken(ByteBuffer)",2,1,2
"org.apache.cassandra.dht.RandomPartitioner.getTokenFactory()",1,1,1
"org.apache.cassandra.dht.RandomPartitioner.midpoint(Token,Token)",1,1,3
"org.apache.cassandra.dht.RandomPartitioner.preservesOrder()",1,1,1
"org.apache.cassandra.dht.Range.Range(Token,Token)",1,1,1
"org.apache.cassandra.dht.Range.Range(Token,Token,IPartitioner)",1,1,1
"org.apache.cassandra.dht.Range.compare(Token,Token)",3,4,4
"org.apache.cassandra.dht.Range.compareTo(Range)",3,1,3
"org.apache.cassandra.dht.Range.contains(Range)",4,5,6
"org.apache.cassandra.dht.Range.contains(Token)",1,1,1
"org.apache.cassandra.dht.Range.contains(Token,Token,Token)",3,4,4
"org.apache.cassandra.dht.Range.createFrom(Token)",2,1,2
"org.apache.cassandra.dht.Range.differenceToFetch(Range)",1,3,3
"org.apache.cassandra.dht.Range.equals(Object)",2,2,3
"org.apache.cassandra.dht.Range.intersectionBothWrapping(Range,Range)",1,2,2
"org.apache.cassandra.dht.Range.intersectionOneWrapping(Range,Range)",1,4,4
"org.apache.cassandra.dht.Range.intersectionWith(Range)",7,9,13
"org.apache.cassandra.dht.Range.intersects(Range)",1,1,1
"org.apache.cassandra.dht.Range.isTokenInRanges(Token,Iterable<Range>)",3,2,3
"org.apache.cassandra.dht.Range.isWrapAround()",1,1,1
"org.apache.cassandra.dht.Range.isWrapAround(Token,Token)",1,1,1
"org.apache.cassandra.dht.Range.rangeSet(Range...)",1,1,1
"org.apache.cassandra.dht.Range.subtractContained(Range)",1,3,3
"org.apache.cassandra.dht.Range.toString()",1,1,1
"org.apache.cassandra.dht.Range.unwrap()",2,3,3
"org.apache.cassandra.dht.StringToken.StringToken(String)",1,1,1
"org.apache.cassandra.dht.StringToken.compareTo(Token<String>)",1,1,1
"org.apache.cassandra.dht.Token.Token(T)",1,1,1
"org.apache.cassandra.dht.Token.TokenSerializer.deserialize(DataInput)",1,1,1
"org.apache.cassandra.dht.Token.TokenSerializer.serialize(Token,DataOutput)",1,1,1
"org.apache.cassandra.dht.Token.equals(Object)",2,1,2
"org.apache.cassandra.dht.Token.hashCode()",1,1,1
"org.apache.cassandra.dht.Token.serializer()",1,1,1
"org.apache.cassandra.dht.Token.toString()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.ArrivalWindow(int)",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.add(double)",1,1,2
"org.apache.cassandra.gms.ArrivalWindow.clear()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.mean()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.phi(long)",1,2,2
"org.apache.cassandra.gms.ArrivalWindow.stdev()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.sum()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.sumOfDeviations()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.toString()",1,1,1
"org.apache.cassandra.gms.ArrivalWindow.variance()",1,1,1
"org.apache.cassandra.gms.EndpointState.EndpointState(HeartBeatState)",1,1,1
"org.apache.cassandra.gms.EndpointState.addApplicationState(ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.gms.EndpointState.getApplicationState(ApplicationState)",1,1,1
"org.apache.cassandra.gms.EndpointState.getApplicationStateMap()",1,1,1
"org.apache.cassandra.gms.EndpointState.getHeartBeatState()",1,1,1
"org.apache.cassandra.gms.EndpointState.getUpdateTimestamp()",1,1,1
"org.apache.cassandra.gms.EndpointState.hasToken()",1,1,1
"org.apache.cassandra.gms.EndpointState.isAlive()",1,1,1
"org.apache.cassandra.gms.EndpointState.markAlive()",1,1,1
"org.apache.cassandra.gms.EndpointState.markDead()",1,1,1
"org.apache.cassandra.gms.EndpointState.serializer()",1,1,1
"org.apache.cassandra.gms.EndpointState.setHasToken(boolean)",1,1,1
"org.apache.cassandra.gms.EndpointState.setHeartBeatState(HeartBeatState)",1,1,1
"org.apache.cassandra.gms.EndpointState.updateTimestamp()",1,1,1
"org.apache.cassandra.gms.EndpointStateSerializer.deserialize(DataInputStream,int)",3,2,3
"org.apache.cassandra.gms.EndpointStateSerializer.serialize(EndpointState,DataOutputStream,int)",1,3,3
"org.apache.cassandra.gms.EndpointStatesSerializationHelper.deserialize(DataInputStream,int)",1,2,2
"org.apache.cassandra.gms.EndpointStatesSerializationHelper.serialize(Map<InetAddress, EndpointState>,DataOutputStream,int)",1,2,2
"org.apache.cassandra.gms.FailureDetector.FailureDetector()",1,1,2
"org.apache.cassandra.gms.FailureDetector.dumpInterArrivalTimes()",1,1,2
"org.apache.cassandra.gms.FailureDetector.getAllEndpointStates()",1,3,3
"org.apache.cassandra.gms.FailureDetector.getPhiConvictThreshold()",1,1,1
"org.apache.cassandra.gms.FailureDetector.interpret(InetAddress)",2,4,5
"org.apache.cassandra.gms.FailureDetector.isAlive(InetAddress)",2,3,4
"org.apache.cassandra.gms.FailureDetector.main(String[])",1,1,1
"org.apache.cassandra.gms.FailureDetector.registerFailureDetectionEventListener(IFailureDetectionEventListener)",1,1,1
"org.apache.cassandra.gms.FailureDetector.remove(InetAddress)",1,1,1
"org.apache.cassandra.gms.FailureDetector.report(InetAddress)",1,3,3
"org.apache.cassandra.gms.FailureDetector.setPhiConvictThreshold(int)",1,1,1
"org.apache.cassandra.gms.FailureDetector.toString()",1,2,2
"org.apache.cassandra.gms.FailureDetector.unregisterFailureDetectionEventListener(IFailureDetectionEventListener)",1,1,1
"org.apache.cassandra.gms.GossipDigest.GossipDigest(InetAddress,int,int)",1,1,1
"org.apache.cassandra.gms.GossipDigest.compareTo(GossipDigest)",2,1,2
"org.apache.cassandra.gms.GossipDigest.getEndpoint()",1,1,1
"org.apache.cassandra.gms.GossipDigest.getGeneration()",1,1,1
"org.apache.cassandra.gms.GossipDigest.getMaxVersion()",1,1,1
"org.apache.cassandra.gms.GossipDigest.serializer()",1,1,1
"org.apache.cassandra.gms.GossipDigest.toString()",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2Message.GossipDigestAck2Message(Map<InetAddress, EndpointState>)",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2Message.getEndpointStateMap()",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2Message.serializer()",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2MessageSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2MessageSerializer.serialize(GossipDigestAck2Message,DataOutputStream,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestAck2VerbHandler.doVerb(Message,String)",1,2,3
"org.apache.cassandra.gms.GossipDigestAckMessage.GossipDigestAckMessage(List<GossipDigest>,Map<InetAddress, EndpointState>)",1,1,1
"org.apache.cassandra.gms.GossipDigestAckMessage.getEndpointStateMap()",1,1,1
"org.apache.cassandra.gms.GossipDigestAckMessage.getGossipDigestList()",1,1,1
"org.apache.cassandra.gms.GossipDigestAckMessage.serializer()",1,1,1
"org.apache.cassandra.gms.GossipDigestAckMessageSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestAckMessageSerializer.serialize(GossipDigestAckMessage,DataOutputStream,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestAckVerbHandler.doVerb(Message,String)",2,8,9
"org.apache.cassandra.gms.GossipDigestSerializationHelper.deserialize(DataInputStream,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestSerializationHelper.serialize(List<GossipDigest>,DataOutputStream,int)",1,2,2
"org.apache.cassandra.gms.GossipDigestSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSerializer.serialize(GossipDigest,DataOutputStream,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSynMessage.GossipDigestSynMessage(String,List<GossipDigest>)",1,1,1
"org.apache.cassandra.gms.GossipDigestSynMessage.getGossipDigests()",1,1,1
"org.apache.cassandra.gms.GossipDigestSynMessage.serializer()",1,1,1
"org.apache.cassandra.gms.GossipDigestSynMessageSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSynMessageSerializer.serialize(GossipDigestSynMessage,DataOutputStream,int)",1,1,1
"org.apache.cassandra.gms.GossipDigestSynVerbHandler.doSort(List<GossipDigest>)",1,5,5
"org.apache.cassandra.gms.GossipDigestSynVerbHandler.doVerb(Message,String)",3,8,9
"org.apache.cassandra.gms.Gossiper.GossipTask.run()",1,7,7
"org.apache.cassandra.gms.Gossiper.Gossiper()",1,1,1
"org.apache.cassandra.gms.Gossiper.addLocalApplicationState(ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.gms.Gossiper.addSavedEndpoint(InetAddress)",1,2,2
"org.apache.cassandra.gms.Gossiper.advertiseRemoving(InetAddress,Token,Token)",2,1,3
"org.apache.cassandra.gms.Gossiper.advertiseTokenRemoved(InetAddress,Token)",1,1,2
"org.apache.cassandra.gms.Gossiper.applyNewStates(InetAddress,EndpointState,EndpointState)",1,3,3
"org.apache.cassandra.gms.Gossiper.applyStateLocally(Map<InetAddress, EndpointState>)",4,13,14
"org.apache.cassandra.gms.Gossiper.compareEndpointStartup(InetAddress,InetAddress)",1,1,2
"org.apache.cassandra.gms.Gossiper.convict(InetAddress,double)",1,2,2
"org.apache.cassandra.gms.Gossiper.doGossipToLiveMember(MessageProducer)",2,1,2
"org.apache.cassandra.gms.Gossiper.doGossipToSeed(MessageProducer)",3,5,6
"org.apache.cassandra.gms.Gossiper.doGossipToUnreachableMember(MessageProducer)",1,3,3
"org.apache.cassandra.gms.Gossiper.doNotifications(InetAddress,ApplicationState,VersionedValue)",1,2,2
"org.apache.cassandra.gms.Gossiper.doStatusCheck()",3,15,16
"org.apache.cassandra.gms.Gossiper.evictFromMembership(InetAddress)",1,2,2
"org.apache.cassandra.gms.Gossiper.examineGossiper(List<GossipDigest>,List<GossipDigest>,Map<InetAddress, EndpointState>)",4,8,10
"org.apache.cassandra.gms.Gossiper.getCurrentGenerationNumber(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.getEndpointDowntime(InetAddress)",2,2,2
"org.apache.cassandra.gms.Gossiper.getEndpointStateForEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.getEndpointStates()",1,1,1
"org.apache.cassandra.gms.Gossiper.getLiveMembers()",1,2,2
"org.apache.cassandra.gms.Gossiper.getMaxEndpointStateVersion(EndpointState)",1,2,2
"org.apache.cassandra.gms.Gossiper.getStateForVersionBiggerThan(InetAddress,int)",1,8,8
"org.apache.cassandra.gms.Gossiper.getUnreachableMembers()",1,1,1
"org.apache.cassandra.gms.Gossiper.getVersion(InetAddress)",2,2,2
"org.apache.cassandra.gms.Gossiper.handleMajorStateChange(InetAddress,EndpointState)",1,9,9
"org.apache.cassandra.gms.Gossiper.initializeNodeUnsafe(InetAddress,int)",1,2,2
"org.apache.cassandra.gms.Gossiper.isDeadState(String)",3,2,3
"org.apache.cassandra.gms.Gossiper.isEnabled()",1,1,1
"org.apache.cassandra.gms.Gossiper.isKnownEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.makeGossipDigestAck2Message(GossipDigestAck2Message,int)",1,1,1
"org.apache.cassandra.gms.Gossiper.makeGossipDigestAckMessage(GossipDigestAckMessage,int)",1,1,1
"org.apache.cassandra.gms.Gossiper.makeGossipDigestSynMessage(List<GossipDigest>,int)",1,1,1
"org.apache.cassandra.gms.Gossiper.makeRandomGossipDigest(List<GossipDigest>)",1,5,5
"org.apache.cassandra.gms.Gossiper.markAlive(InetAddress,EndpointState)",1,4,4
"org.apache.cassandra.gms.Gossiper.markDead(InetAddress,EndpointState)",1,4,4
"org.apache.cassandra.gms.Gossiper.maybeInitializeLocalState(int)",1,2,2
"org.apache.cassandra.gms.Gossiper.notifyFailureDetector(InetAddress,EndpointState)",3,5,5
"org.apache.cassandra.gms.Gossiper.notifyFailureDetector(List<GossipDigest>)",1,2,2
"org.apache.cassandra.gms.Gossiper.notifyFailureDetector(Map<InetAddress, EndpointState>)",1,2,2
"org.apache.cassandra.gms.Gossiper.register(IEndpointStateChangeSubscriber)",1,1,1
"org.apache.cassandra.gms.Gossiper.removeEndpoint(InetAddress)",1,3,3
"org.apache.cassandra.gms.Gossiper.requestAll(GossipDigest,List<GossipDigest>,int)",1,2,2
"org.apache.cassandra.gms.Gossiper.resetVersion(InetAddress)",1,1,1
"org.apache.cassandra.gms.Gossiper.sendAll(GossipDigest,Map<InetAddress, EndpointState>,int)",1,2,2
"org.apache.cassandra.gms.Gossiper.sendGossip(MessageProducer,Set<InetAddress>)",2,3,5
"org.apache.cassandra.gms.Gossiper.setVersion(InetAddress,int)",1,1,1
"org.apache.cassandra.gms.Gossiper.start(int)",3,3,4
"org.apache.cassandra.gms.Gossiper.stop()",1,1,1
"org.apache.cassandra.gms.Gossiper.unregister(IEndpointStateChangeSubscriber)",1,1,1
"org.apache.cassandra.gms.HeartBeatState.HeartBeatState(int)",1,1,1
"org.apache.cassandra.gms.HeartBeatState.HeartBeatState(int,int)",1,1,1
"org.apache.cassandra.gms.HeartBeatState.forceNewerGenerationUnsafe()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.getGeneration()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.getHeartBeatVersion()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.serializer()",1,1,1
"org.apache.cassandra.gms.HeartBeatState.updateHeartBeat()",1,1,1
"org.apache.cassandra.gms.HeartBeatStateSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.gms.HeartBeatStateSerializer.serialize(HeartBeatState,DataOutputStream,int)",1,1,1
"org.apache.cassandra.gms.PureRandom.PureRandom()",1,1,1
"org.apache.cassandra.gms.PureRandom.main(String[])",1,3,3
"org.apache.cassandra.gms.PureRandom.nextInt(int)",2,4,5
"org.apache.cassandra.gms.VersionGenerator.getNextVersion()",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValue(String)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValue(String,int)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.VersionedValueFactory(IPartitioner)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.bootstrapping(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.datacenter(String)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.leaving(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.left(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.load(double)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.migration(UUID)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.moving(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.normal(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.rack(String)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.releaseVersion()",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removalCoordinator(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removedNonlocal(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removingNonlocal(Token)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.rpcaddress(InetAddress)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.serialize(VersionedValue,DataOutputStream,int)",1,1,1
"org.apache.cassandra.gms.VersionedValue.compareTo(VersionedValue)",1,1,1
"org.apache.cassandra.gms.VersionedValue.toString()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat.SplitCallable.SplitCallable(TokenRange,Configuration)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat.SplitCallable.call()",1,3,3
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat.createConnection(String,Integer,boolean)",1,1,3
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat.getRangeMap(Configuration)",3,5,7
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat.getSplits(JobContext)",2,6,7
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat.getSubSplits(String,String,TokenRange,Configuration)",2,3,5
"org.apache.cassandra.hadoop.ColumnFamilyInputFormat.validateConfiguration(Configuration)",3,2,4
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.NullOutputCommitter.abortTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.NullOutputCommitter.cleanupJob(JobContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.NullOutputCommitter.commitTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.NullOutputCommitter.needsTaskCommit(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.NullOutputCommitter.setupJob(JobContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.NullOutputCommitter.setupTask(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.checkOutputSpecs(Configuration)",2,2,3
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.checkOutputSpecs(FileSystem,JobConf)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.checkOutputSpecs(JobContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.createAuthenticatedClient(TSocket,Configuration)",1,2,2
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.getOutputCommitter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.getRecordWriter(FileSystem,JobConf,String,Progressable)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyOutputFormat.getRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.RowIterator()",1,3,6
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.computeNext()",2,3,3
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.maybeInit()",5,3,8
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.rowsRead()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.unthriftify(ColumnOrSuperColumn)",4,4,4
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.unthriftifyCounter(CounterColumn)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.unthriftifySimple(Column)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.unthriftifySuper(SuperColumn)",1,2,2
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.RowIterator.unthriftifySuperCounter(CounterSuperColumn)",1,2,2
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.close()",1,3,3
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.getCurrentKey()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.getCurrentValue()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.getLocation()",4,3,6
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.getProgress()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.initialize(InputSplit,TaskAttemptContext)",2,3,5
"org.apache.cassandra.hadoop.ColumnFamilyRecordReader.nextKeyValue()",2,1,2
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.ColumnFamilyRecordWriter(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.ColumnFamilyRecordWriter(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.RangeClient.RangeClient(List<InetAddress>)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.RangeClient.close()",2,1,3
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.RangeClient.closeInternal()",1,2,2
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.RangeClient.put(Pair<ByteBuffer, Mutation>)",4,2,5
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.RangeClient.run()",7,9,13
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.RangeClient.toString()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.close()",2,2,4
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.close(Reporter)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.close(TaskAttemptContext)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilyRecordWriter.write(ByteBuffer,List<Mutation>)",1,3,3
"org.apache.cassandra.hadoop.ColumnFamilySplit.ColumnFamilySplit()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.ColumnFamilySplit(String,String,String[])",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getEndToken()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getLength()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getLocations()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getStartToken()",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.read(DataInput)",1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.readFields(DataInput)",1,2,2
"org.apache.cassandra.hadoop.ColumnFamilySplit.toString()",1,2,2
"org.apache.cassandra.hadoop.ColumnFamilySplit.write(DataOutput)",1,2,2
"org.apache.cassandra.hadoop.ConfigHelper.getInitialAddress(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputColumnFamily(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyRange(Configuration)",1,2,2
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspace(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspacePassword(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspaceUserName(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputSlicePredicate(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputSplitSize(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputColumnFamily(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspace(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspacePassword(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspaceUserName(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getPartitioner(Configuration)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.getRangeBatchSize(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getRawInputSlicePredicate(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getReadConsistencyLevel(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getRpcPort(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getWriteConsistencyLevel(Configuration)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.keyRangeFromString(String)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.keyRangeToString(KeyRange)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.predicateFromString(String)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.predicateToString(SlicePredicate)",1,1,2
"org.apache.cassandra.hadoop.ConfigHelper.setInitialAddress(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputColumnFamily(Configuration,String,String)",3,1,3
"org.apache.cassandra.hadoop.ConfigHelper.setInputRange(Configuration,String,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputSlicePredicate(Configuration,SlicePredicate)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputSplitSize(Configuration,int)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputColumnFamily(Configuration,String,String)",3,1,3
"org.apache.cassandra.hadoop.ConfigHelper.setPartitioner(Configuration,String)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setRangeBatchSize(Configuration,int)",1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setRpcPort(Configuration,String)",1,1,1
"org.apache.cassandra.io.DeletionService.executeDelete(String)",1,1,1
"org.apache.cassandra.io.DeletionService.waitFor()",1,1,1
"org.apache.cassandra.io.SerDeUtils.createArray(int,Schema)",1,1,1
"org.apache.cassandra.io.SerDeUtils.createDataInputStream(ByteBuffer)",1,1,1
"org.apache.cassandra.io.SerDeUtils.deserialize(Schema,ByteBuffer,T)",1,1,1
"org.apache.cassandra.io.SerDeUtils.deserializeWithSchema(ByteBuffer,T)",1,1,1
"org.apache.cassandra.io.SerDeUtils.serialize(T)",1,1,1
"org.apache.cassandra.io.SerDeUtils.serializeWithSchema(T)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.AbstractSSTableSimpleWriter(File,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.addColumn(ByteBuffer,ByteBuffer,long)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.addColumn(IColumn)",2,2,4
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.addCounterColumn(ByteBuffer,long)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.addExpiringColumn(ByteBuffer,ByteBuffer,long,int,long)",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.getWriter()",1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.makeFilename(File,String,String)",2,3,5
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.newRow(ByteBuffer)",1,3,3
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.newSuperColumn(ByteBuffer)",2,1,2
"org.apache.cassandra.io.sstable.BloomFilterTracker.addFalsePositive()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.addTruePositive()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getFalsePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getRecentFalsePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getRecentTruePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getTruePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.Component.Component(Type)",1,1,1
"org.apache.cassandra.io.sstable.Component.Component(Type,int)",1,1,1
"org.apache.cassandra.io.sstable.Component.Type.Type(String)",1,1,1
"org.apache.cassandra.io.sstable.Component.Type.fromRepresentation(String)",3,2,3
"org.apache.cassandra.io.sstable.Component.equals(Object)",3,1,4
"org.apache.cassandra.io.sstable.Component.fromFilename(File,String)",2,3,9
"org.apache.cassandra.io.sstable.Component.hashCode()",1,1,1
"org.apache.cassandra.io.sstable.Component.name()",3,2,3
"org.apache.cassandra.io.sstable.Component.toString()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(File,String,String,int,boolean)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(String,File,String,String,int,boolean)",1,1,4
"org.apache.cassandra.io.sstable.Descriptor.asTemporary(boolean)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.baseFilename()",1,3,3
"org.apache.cassandra.io.sstable.Descriptor.equals(Object)",3,4,6
"org.apache.cassandra.io.sstable.Descriptor.extractKeyspaceName(File)",2,2,2
"org.apache.cassandra.io.sstable.Descriptor.filenameFor(Component)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.filenameFor(String)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(File,String)",1,3,3
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(String)",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.hasReplayPosition()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.hashCode()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.isFromTheFuture()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.isSnapshotInPath(File)",3,2,3
"org.apache.cassandra.io.sstable.Descriptor.toString()",1,1,1
"org.apache.cassandra.io.sstable.Descriptor.versionValidate(String)",4,3,5
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.IndexInfo(ByteBuffer,ByteBuffer,long,long)",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.deserialize(FileDataInput)",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.serialize(DataOutput)",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.serializedSize()",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.defreezeBloomFilter(FileDataInput,boolean)",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.defreezeBloomFilter(FileDataInput,long,boolean)",2,2,4
"org.apache.cassandra.io.sstable.IndexHelper.deserializeIndex(FileDataInput)",2,2,3
"org.apache.cassandra.io.sstable.IndexHelper.getComparator(AbstractType,boolean)",1,1,2
"org.apache.cassandra.io.sstable.IndexHelper.indexFor(ByteBuffer,List<IndexInfo>,AbstractType,boolean)",2,3,5
"org.apache.cassandra.io.sstable.IndexHelper.skipBloomFilter(FileDataInput)",1,1,1
"org.apache.cassandra.io.sstable.IndexHelper.skipIndex(FileDataInput)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummary(long)",2,2,2
"org.apache.cassandra.io.sstable.IndexSummary.KeyPosition.KeyPosition(DecoratedKey,long)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.KeyPosition.compareTo(KeyPosition)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.KeyPosition.toString()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.addEntry(DecoratedKey,long)",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.complete()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getIndexPositions()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.incrementRowid()",1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.maybeAddEntry(DecoratedKey,long)",1,2,2
"org.apache.cassandra.io.sstable.IndexSummary.shouldAddEntry()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.KeyIterator(Descriptor)",1,1,2
"org.apache.cassandra.io.sstable.KeyIterator.close()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.computeNext()",2,2,3
"org.apache.cassandra.io.sstable.KeyIterator.getBytesRead()",1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.getTotalBytes()",1,1,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.ReducingKeyIterator(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.close()",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.getBytesRead()",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.getTaskType()",1,1,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.getTotalBytes()",1,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.hasNext()",1,1,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.next()",1,1,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.remove()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.SSTable(Descriptor,CFMetaData,ReplayPosition,IPartitioner)",1,1,1
"org.apache.cassandra.io.sstable.SSTable.SSTable(Descriptor,Set<Component>,CFMetaData,ReplayPosition,IPartitioner)",1,1,1
"org.apache.cassandra.io.sstable.SSTable.SSTable(Descriptor,Set<Component>,CFMetaData,ReplayPosition,IPartitioner,EstimatedHistogram,EstimatedHistogram)",1,1,2
"org.apache.cassandra.io.sstable.SSTable.bytesOnDisk()",1,2,2
"org.apache.cassandra.io.sstable.SSTable.componentsFor(Descriptor,boolean)",1,4,5
"org.apache.cassandra.io.sstable.SSTable.defaultColumnHistogram()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.defaultRowHistogram()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.delete(Descriptor,Set<Component>)",3,4,6
"org.apache.cassandra.io.sstable.SSTable.estimateRowsFromData(Descriptor,BufferedRandomAccessFile)",1,2,3
"org.apache.cassandra.io.sstable.SSTable.estimateRowsFromIndex(BufferedRandomAccessFile)",1,5,5
"org.apache.cassandra.io.sstable.SSTable.getColumnFamilyName()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getEstimatedColumnCount()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getEstimatedRowSize()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getFilename()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getTableName()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.getTotalBytes(Iterable<SSTableReader>)",1,2,2
"org.apache.cassandra.io.sstable.SSTable.toString()",1,1,1
"org.apache.cassandra.io.sstable.SSTable.tryComponentFromFilename(File,String)",1,4,4
"org.apache.cassandra.io.sstable.SSTableBoundedScanner.BoundedKeyScanningIterator.hasNext()",4,2,4
"org.apache.cassandra.io.sstable.SSTableBoundedScanner.SSTableBoundedScanner(SSTableReader,int,boolean,Range)",2,2,3
"org.apache.cassandra.io.sstable.SSTableBoundedScanner.hasNext()",1,3,3
"org.apache.cassandra.io.sstable.SSTableBoundedScanner.next()",1,3,3
"org.apache.cassandra.io.sstable.SSTableDeletingReference.CleanupTask.run()",3,3,3
"org.apache.cassandra.io.sstable.SSTableDeletingReference.SSTableDeletingReference(DataTracker,SSTableReader,ReferenceQueue<? super SSTableReader>)",1,1,1
"org.apache.cassandra.io.sstable.SSTableDeletingReference.cleanup()",1,2,2
"org.apache.cassandra.io.sstable.SSTableDeletingReference.deleteOnCleanup()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.SSTableIdentityIterator(CFMetaData,BufferedRandomAccessFile,DecoratedKey,long,long,boolean)",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.SSTableIdentityIterator(CFMetaData,BufferedRandomAccessFile,DecoratedKey,long,long,boolean,SSTableReader,boolean)",3,4,6
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.SSTableIdentityIterator(SSTableReader,BufferedRandomAccessFile,DecoratedKey,long,long)",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.SSTableIdentityIterator(SSTableReader,BufferedRandomAccessFile,DecoratedKey,long,long,boolean)",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.close()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.compareTo(SSTableIdentityIterator)",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.echoData(DataOutput)",1,2,2
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.getColumnFamily()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.getColumnFamilyWithColumns()",2,2,3
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.getKey()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.getPath()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.hasNext()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.next()",1,2,4
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.remove()",1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.reset()",1,1,2
"org.apache.cassandra.io.sstable.SSTableLoader.Client.addRangeForEndpoint(Range,InetAddress)",1,2,2
"org.apache.cassandra.io.sstable.SSTableLoader.Client.getEndpointToRangesMap()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.stop()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.CountDownCallback.CountDownCallback(CountDownLatch,InetAddress)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.CountDownCallback.run()",1,2,2
"org.apache.cassandra.io.sstable.SSTableLoader.LoaderFuture.LoaderFuture(int)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.LoaderFuture.cancel(boolean)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.LoaderFuture.get()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.LoaderFuture.get(long,TimeUnit)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.LoaderFuture.getPendingFiles()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.LoaderFuture.isCancelled()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.LoaderFuture.isDone()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.LoaderFuture.setPendings(InetAddress,Collection<PendingFile>)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.SSTableLoader(File,Client,OutputHandler)",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.names(Collection<SSTableReader>)",1,2,2
"org.apache.cassandra.io.sstable.SSTableLoader.openSSTables()",4,6,8
"org.apache.cassandra.io.sstable.SSTableLoader.stream()",1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.stream(Set<InetAddress>)",4,4,4
"org.apache.cassandra.io.sstable.SSTableReader.Operator.Equals.apply(int)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.Operator.GreaterThan.apply(int)",1,1,2
"org.apache.cassandra.io.sstable.SSTableReader.Operator.GreaterThanOrEqualTo.apply(int)",1,1,2
"org.apache.cassandra.io.sstable.SSTableReader.SSTableReader(Descriptor,Set<Component>,CFMetaData,ReplayPosition,IPartitioner,SegmentedFile,SegmentedFile,IndexSummary,Filter,long,EstimatedHistogram,EstimatedHistogram)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.cacheKey(DecoratedKey,Long)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.compareTo(SSTableReader)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.createColumnFamily()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.createLinks(String)",1,2,2
"org.apache.cassandra.io.sstable.SSTableReader.decodeKey(IPartitioner,Descriptor,ByteBuffer)",2,2,2
"org.apache.cassandra.io.sstable.SSTableReader.estimatedKeys()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.forceFilterFailures()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getApproximateKeyCount(Iterable<SSTableReader>)",1,3,3
"org.apache.cassandra.io.sstable.SSTableReader.getBloomFilter()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getBloomFilterFalsePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getBloomFilterTruePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getCachedPosition(DecoratedKey)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getCachedPosition(Pair<Descriptor, DecoratedKey>)",2,3,3
"org.apache.cassandra.io.sstable.SSTableReader.getColumnComparator()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getColumnSerializer()",1,2,2
"org.apache.cassandra.io.sstable.SSTableReader.getDirectScanner(int)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getDirectScanner(int,Range)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getFileDataInput(DecoratedKey,int)",2,1,2
"org.apache.cassandra.io.sstable.SSTableReader.getIndexScanPosition(DecoratedKey)",3,3,4
"org.apache.cassandra.io.sstable.SSTableReader.getKeyCache()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getKeySamples()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getKeySamples(Range)",4,4,5
"org.apache.cassandra.io.sstable.SSTableReader.getPosition(DecoratedKey,Operator)",10,16,21
"org.apache.cassandra.io.sstable.SSTableReader.getPositionsForRanges(Collection<Range>)",4,4,6
"org.apache.cassandra.io.sstable.SSTableReader.getRecentBloomFilterFalsePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getRecentBloomFilterTruePositiveCount()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.getSampleIndexesForRanges(List<KeyPosition>,Collection<Range>)",5,3,9
"org.apache.cassandra.io.sstable.SSTableReader.getScanner(int,QueryFilter)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.internalOpen(Descriptor,Set<Component>,CFMetaData,ReplayPosition,IPartitioner,SegmentedFile,SegmentedFile,IndexSummary,Filter,long,EstimatedHistogram,EstimatedHistogram)",1,1,6
"org.apache.cassandra.io.sstable.SSTableReader.length()",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.load(boolean,Set<DecoratedKey>)",3,12,15
"org.apache.cassandra.io.sstable.SSTableReader.loadBloomFilter()",2,3,3
"org.apache.cassandra.io.sstable.SSTableReader.markCompacted()",2,2,4
"org.apache.cassandra.io.sstable.SSTableReader.newSince(long)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.open(Descriptor)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.open(Descriptor,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.open(Descriptor,Set<Component>,CFMetaData,IPartitioner)",1,1,1
"org.apache.cassandra.io.sstable.SSTableReader.open(Descriptor,Set<Component>,Set<DecoratedKey>,DataTracker,CFMetaData,IPartitioner)",1,8,8
"org.apache.cassandra.io.sstable.SSTableReader.readRowSize(DataInput,Descriptor)",2,2,2
"org.apache.cassandra.io.sstable.SSTableReader.setTrackedBy(DataTracker)",1,2,2
"org.apache.cassandra.io.sstable.SSTableScanner.KeyScanningIterator.hasNext()",2,2,3
"org.apache.cassandra.io.sstable.SSTableScanner.KeyScanningIterator.next()",2,3,4
"org.apache.cassandra.io.sstable.SSTableScanner.KeyScanningIterator.remove()",1,1,1
"org.apache.cassandra.io.sstable.SSTableScanner.KeyScanningIterator.toString()",1,1,1
"org.apache.cassandra.io.sstable.SSTableScanner.SSTableScanner(SSTableReader,QueryFilter,int)",1,1,2
"org.apache.cassandra.io.sstable.SSTableScanner.SSTableScanner(SSTableReader,int,boolean)",1,1,2
"org.apache.cassandra.io.sstable.SSTableScanner.close()",1,1,1
"org.apache.cassandra.io.sstable.SSTableScanner.getFileLength()",1,1,2
"org.apache.cassandra.io.sstable.SSTableScanner.getFilePointer()",1,1,1
"org.apache.cassandra.io.sstable.SSTableScanner.hasNext()",1,3,3
"org.apache.cassandra.io.sstable.SSTableScanner.next()",1,3,3
"org.apache.cassandra.io.sstable.SSTableScanner.remove()",1,1,1
"org.apache.cassandra.io.sstable.SSTableScanner.seekTo(DecoratedKey)",2,1,3
"org.apache.cassandra.io.sstable.SSTableScanner.toString()",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.SSTableSimpleUnsortedWriter(File,String,String,AbstractType,AbstractType,int)",1,1,2
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.close()",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.getColumnFamily()",1,2,2
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.sync()",2,2,3
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.writeRow(DecoratedKey,ColumnFamily)",1,2,2
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.SSTableSimpleWriter(File,CFMetaData)",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.SSTableSimpleWriter(File,String,String,AbstractType,AbstractType)",1,1,2
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.close()",1,2,2
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.getColumnFamily()",1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.writeRow(DecoratedKey,ColumnFamily)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.Builder.Builder(Descriptor,OperationType)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.Builder.build()",2,1,2
"org.apache.cassandra.io.sstable.SSTableWriter.Builder.getCompactionInfo()",1,1,2
"org.apache.cassandra.io.sstable.SSTableWriter.Builder.maybeOpenIndexer()",2,1,4
"org.apache.cassandra.io.sstable.SSTableWriter.CommutativeRowIndexer.CommutativeRowIndexer(Descriptor,ColumnFamilyStore,OperationType)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.CommutativeRowIndexer.close()",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.CommutativeRowIndexer.doIndexing()",1,3,3
"org.apache.cassandra.io.sstable.SSTableWriter.IndexWriter.IndexWriter(Descriptor,IPartitioner,long)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.IndexWriter.afterAppend(DecoratedKey,long)",1,2,2
"org.apache.cassandra.io.sstable.SSTableWriter.IndexWriter.close()",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.IndexWriter.mark()",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.IndexWriter.reset()",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.RowIndexer.RowIndexer(Descriptor,BufferedRandomAccessFile,ColumnFamilyStore,OperationType)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.RowIndexer.RowIndexer(Descriptor,ColumnFamilyStore,OperationType)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.RowIndexer.close()",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.RowIndexer.doIndexing()",1,2,2
"org.apache.cassandra.io.sstable.SSTableWriter.RowIndexer.index()",1,1,2
"org.apache.cassandra.io.sstable.SSTableWriter.RowIndexer.prepareIndexing()",1,2,2
"org.apache.cassandra.io.sstable.SSTableWriter.RowIndexer.updateCache(DecoratedKey,long,AbstractCompactedRow)",2,5,6
"org.apache.cassandra.io.sstable.SSTableWriter.SSTableWriter(String,long)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.SSTableWriter(String,long,CFMetaData,IPartitioner,ReplayPosition)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.afterAppend(DecoratedKey,long)",1,2,2
"org.apache.cassandra.io.sstable.SSTableWriter.append(AbstractCompactedRow)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.append(DecoratedKey,ByteBuffer)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.append(DecoratedKey,ColumnFamily)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.beforeAppend(DecoratedKey)",3,4,5
"org.apache.cassandra.io.sstable.SSTableWriter.closeAndOpenReader()",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.closeAndOpenReader(long)",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.createBuilder(Descriptor,OperationType)",2,2,2
"org.apache.cassandra.io.sstable.SSTableWriter.getFilePointer()",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.mark()",1,1,1
"org.apache.cassandra.io.sstable.SSTableWriter.rename(Descriptor,Set<Component>)",1,2,3
"org.apache.cassandra.io.sstable.SSTableWriter.reset()",1,1,2
"org.apache.cassandra.io.sstable.SSTableWriter.writeMetadata(Descriptor,EstimatedHistogram,EstimatedHistogram,ReplayPosition)",1,1,1
"org.apache.cassandra.io.util.AbstractDataInput.readBoolean()",2,1,2
"org.apache.cassandra.io.util.AbstractDataInput.readByte()",2,1,2
"org.apache.cassandra.io.util.AbstractDataInput.readChar()",2,1,2
"org.apache.cassandra.io.util.AbstractDataInput.readDouble()",1,1,1
"org.apache.cassandra.io.util.AbstractDataInput.readFloat()",1,1,1
"org.apache.cassandra.io.util.AbstractDataInput.readFully(byte[])",1,1,1
"org.apache.cassandra.io.util.AbstractDataInput.readFully(byte[],int,int)",5,2,8
"org.apache.cassandra.io.util.AbstractDataInput.readInt()",2,1,2
"org.apache.cassandra.io.util.AbstractDataInput.readLine()",7,8,9
"org.apache.cassandra.io.util.AbstractDataInput.readLong()",2,2,2
"org.apache.cassandra.io.util.AbstractDataInput.readShort()",2,1,2
"org.apache.cassandra.io.util.AbstractDataInput.readUTF()",1,1,1
"org.apache.cassandra.io.util.AbstractDataInput.readUnsignedByte()",2,1,2
"org.apache.cassandra.io.util.AbstractDataInput.readUnsignedShort()",2,1,2
"org.apache.cassandra.io.util.BufferedRandomAccessFile.BufferedRandomAccessFile(File,String)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.BufferedRandomAccessFile(File,String,int)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.BufferedRandomAccessFile(File,String,int,boolean)",2,2,3
"org.apache.cassandra.io.util.BufferedRandomAccessFile.BufferedRandomAccessFile(String,String)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.BufferedRandomAccessFile(String,String,int)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.BufferedRandomAccessFileMark.BufferedRandomAccessFileMark(long)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.bytesPastMark()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.bytesPastMark(FileMark)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.bytesRemaining()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.close()",1,2,3
"org.apache.cassandra.io.util.BufferedRandomAccessFile.flush()",1,5,6
"org.apache.cassandra.io.util.BufferedRandomAccessFile.getFilePointer()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.getPath()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.getUncachingReader(String)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.isEOF()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.isReadOnly()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.length()",1,2,2
"org.apache.cassandra.io.util.BufferedRandomAccessFile.mark()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.reBuffer()",4,3,7
"org.apache.cassandra.io.util.BufferedRandomAccessFile.read()",2,2,4
"org.apache.cassandra.io.util.BufferedRandomAccessFile.read(byte[])",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.read(byte[],int,int)",3,2,5
"org.apache.cassandra.io.util.BufferedRandomAccessFile.readBytes(int)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.reset()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.reset(FileMark)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.resetBuffer()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.seek(long)",3,4,6
"org.apache.cassandra.io.util.BufferedRandomAccessFile.setLength(long)",2,4,5
"org.apache.cassandra.io.util.BufferedRandomAccessFile.skipBytes(int)",2,2,3
"org.apache.cassandra.io.util.BufferedRandomAccessFile.sync()",1,3,3
"org.apache.cassandra.io.util.BufferedRandomAccessFile.toString()",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.write(byte[])",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.write(byte[],int,int)",3,2,4
"org.apache.cassandra.io.util.BufferedRandomAccessFile.write(int)",1,1,1
"org.apache.cassandra.io.util.BufferedRandomAccessFile.writeAtMost(byte[],int,int)",1,2,2
"org.apache.cassandra.io.util.BufferedSegmentedFile.BufferedSegmentedFile(String,long)",1,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.Builder.addPotentialBoundary(long)",1,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.Builder.complete(String)",1,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.getSegment(long,int)",1,1,2
"org.apache.cassandra.io.util.ColumnIterator.ColumnIterator(ColumnSerializer,DataInput,ColumnFamilyStore,int,boolean,int)",1,1,1
"org.apache.cassandra.io.util.ColumnIterator.deserializeNext()",1,1,2
"org.apache.cassandra.io.util.ColumnIterator.hasNext()",1,1,1
"org.apache.cassandra.io.util.ColumnIterator.next()",2,1,2
"org.apache.cassandra.io.util.ColumnIterator.remove()",1,1,1
"org.apache.cassandra.io.util.ColumnSet.ColumnSet(ColumnSerializer,DataInput,ColumnFamilyStore,int,boolean,int)",1,1,1
"org.apache.cassandra.io.util.ColumnSet.add(Entry<ByteBuffer, IColumn>)",1,1,1
"org.apache.cassandra.io.util.ColumnSet.addAll(Collection<? extends Entry<ByteBuffer, IColumn>>)",1,1,1
"org.apache.cassandra.io.util.ColumnSet.clear()",1,1,1
"org.apache.cassandra.io.util.ColumnSet.contains(Object)",1,1,1
"org.apache.cassandra.io.util.ColumnSet.containsAll(Collection<?>)",1,1,1
"org.apache.cassandra.io.util.ColumnSet.isEmpty()",1,1,1
"org.apache.cassandra.io.util.ColumnSet.iterator()",1,1,1
"org.apache.cassandra.io.util.ColumnSet.remove(Object)",1,1,1
"org.apache.cassandra.io.util.ColumnSet.removeAll(Collection<?>)",1,1,1
"org.apache.cassandra.io.util.ColumnSet.retainAll(Collection<?>)",1,1,1
"org.apache.cassandra.io.util.ColumnSet.size()",1,1,1
"org.apache.cassandra.io.util.ColumnSet.toArray()",1,1,1
"org.apache.cassandra.io.util.ColumnSet.toArray(T[])",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.ColumnSortedMap(Comparator<ByteBuffer>,ColumnSerializer,DataInput,ColumnFamilyStore,int,boolean,int)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.clear()",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.comparator()",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.containsKey(Object)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.containsValue(Object)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.entrySet()",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.firstKey()",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.get(Object)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.headMap(ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.isEmpty()",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.keySet()",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.lastKey()",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.put(ByteBuffer,IColumn)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.putAll(Map<? extends ByteBuffer, ? extends IColumn>)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.remove(Object)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.size()",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.subMap(ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.tailMap(ByteBuffer)",1,1,1
"org.apache.cassandra.io.util.ColumnSortedMap.values()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.DataOutputBuffer()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.DataOutputBuffer(int)",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.asByteArray()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.buffer()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.getData()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.getLength()",1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.reset()",1,1,1
"org.apache.cassandra.io.util.FileUtils.FileComparator.compare(File,File)",1,1,1
"org.apache.cassandra.io.util.FileUtils.close(Iterable<? extends Closeable>)",2,4,5
"org.apache.cassandra.io.util.FileUtils.closeQuietly(Closeable)",1,3,3
"org.apache.cassandra.io.util.FileUtils.createDirectory(String)",3,2,3
"org.apache.cassandra.io.util.FileUtils.delete(File[])",1,2,2
"org.apache.cassandra.io.util.FileUtils.delete(List<String>)",1,4,4
"org.apache.cassandra.io.util.FileUtils.delete(String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.deleteRecursive(File)",1,3,3
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(File)",2,3,3
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(String)",1,1,1
"org.apache.cassandra.io.util.FileUtils.renameWithConfirm(File,File)",2,3,3
"org.apache.cassandra.io.util.FileUtils.skipBytesFully(DataInput,int)",3,2,3
"org.apache.cassandra.io.util.FileUtils.skipBytesFully(DataInput,long)",3,2,3
"org.apache.cassandra.io.util.FileUtils.stringifyFileSize(double)",5,5,5
"org.apache.cassandra.io.util.FileUtils.truncate(String,long)",1,1,2
"org.apache.cassandra.io.util.MappedFileDataInput.MappedFileDataInput(FileInputStream,String,int)",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.MappedFileDataInput(MappedByteBuffer,String,int)",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.MappedFileDataInputMark.MappedFileDataInputMark(int)",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.bytesPastMark(FileMark)",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.bytesRemaining()",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.getPath()",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.getPosition()",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.isEOF()",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.mark()",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.markSupported()",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.read()",2,1,2
"org.apache.cassandra.io.util.MappedFileDataInput.readBytes(int)",2,2,2
"org.apache.cassandra.io.util.MappedFileDataInput.readFully(byte[])",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.readFully(byte[],int,int)",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.reset(FileMark)",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.seekInternal(int)",1,1,1
"org.apache.cassandra.io.util.MappedFileDataInput.skipBytes(int)",2,1,2
"org.apache.cassandra.io.util.MappedFileDataInput.toString()",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.MemoryInputStream(FreeableMemory)",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.close()",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.getPosition()",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.read()",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.seekInternal(int)",1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.skipBytes(int)",1,1,1
"org.apache.cassandra.io.util.MemoryOutputStream.MemoryOutputStream(Memory)",1,1,1
"org.apache.cassandra.io.util.MemoryOutputStream.position()",1,1,1
"org.apache.cassandra.io.util.MemoryOutputStream.write(int)",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.Builder()",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.addPotentialBoundary(long)",2,3,4
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.complete(String)",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.createSegments(String)",1,3,4
"org.apache.cassandra.io.util.MmappedSegmentedFile.MmappedSegmentedFile(String,long,Segment[])",1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.floor(long)",1,1,3
"org.apache.cassandra.io.util.MmappedSegmentedFile.getSegment(long,int)",2,1,3
"org.apache.cassandra.io.util.OutputBuffer.OutputBuffer()",1,1,1
"org.apache.cassandra.io.util.OutputBuffer.OutputBuffer(int)",1,1,1
"org.apache.cassandra.io.util.OutputBuffer.asByteArray()",2,1,2
"org.apache.cassandra.io.util.OutputBuffer.getData()",1,1,1
"org.apache.cassandra.io.util.OutputBuffer.getLength()",1,1,1
"org.apache.cassandra.io.util.OutputBuffer.write(DataInput,int)",1,2,2
"org.apache.cassandra.io.util.SegmentedFile.Segment.Segment(long,MappedByteBuffer)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Segment.compareTo(Segment)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentIterator.SegmentIterator(long,int)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentIterator.hasNext()",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentIterator.next()",2,1,3
"org.apache.cassandra.io.util.SegmentedFile.SegmentIterator.remove()",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentedFile(String,long)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.getBuilder(DiskAccessMode)",1,1,2
"org.apache.cassandra.io.util.SegmentedFile.iterator(long,int)",1,1,1
"org.apache.cassandra.io.util.SegmentedFile.toString()",1,1,1
"org.apache.cassandra.locator.AbstractEndpointSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",1,1,1
"org.apache.cassandra.locator.AbstractEndpointSnitch.gossiperStarting()",1,1,1
"org.apache.cassandra.locator.AbstractNetworkTopologySnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",7,7,13
"org.apache.cassandra.locator.AbstractNetworkTopologySnitch.getSortedListByProximity(InetAddress,Collection<InetAddress>)",1,1,1
"org.apache.cassandra.locator.AbstractNetworkTopologySnitch.sortByProximity(InetAddress,List<InetAddress>)",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.AbstractReplicationStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.cacheEndpoint(Token,ArrayList<InetAddress>)",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.clearEndpointCache()",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.createReplicationStrategy(String,Class<? extends AbstractReplicationStrategy>,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.createReplicationStrategy(String,String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges()",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges(TokenMetadata)",1,3,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getCachedEndpoints(Token)",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getClass(String)",1,1,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.getHintedEndpoints(Collection<InetAddress>)",5,8,10
"org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalEndpoints(Token)",1,2,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.getPendingAddressRanges(TokenMetadata,Token,InetAddress)",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getRangeAddresses(TokenMetadata)",1,3,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getWriteResponseHandler(Collection<InetAddress>,Multimap<InetAddress, InetAddress>,ConsistencyLevel)",3,3,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.invalidateCachedTokenEndpointValues()",1,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.validateReplicationFactor(String)",2,1,3
"org.apache.cassandra.locator.AdaptiveLatencyTracker.AdaptiveLatencyTracker(int)",1,1,1
"org.apache.cassandra.locator.AdaptiveLatencyTracker.add(double)",1,2,3
"org.apache.cassandra.locator.AdaptiveLatencyTracker.clear()",1,1,1
"org.apache.cassandra.locator.AdaptiveLatencyTracker.iterator()",1,1,1
"org.apache.cassandra.locator.AdaptiveLatencyTracker.score()",1,2,2
"org.apache.cassandra.locator.AdaptiveLatencyTracker.size()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.DynamicEndpointSnitch(IEndpointSnitch)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",3,4,5
"org.apache.cassandra.locator.DynamicEndpointSnitch.dumpTimings(String)",1,3,3
"org.apache.cassandra.locator.DynamicEndpointSnitch.getBadnessThreshold()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getDatacenter(InetAddress)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getRack(InetAddress)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getResetInterval()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getScores()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getSortedListByProximity(InetAddress,Collection<InetAddress>)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getSubsnitchClassName()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getUpdateInterval()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.gossiperStarting()",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.receiveTiming(InetAddress,Double)",2,2,4
"org.apache.cassandra.locator.DynamicEndpointSnitch.registerMBean()",1,1,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.reset()",1,2,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximity(InetAddress,List<InetAddress>)",1,2,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximityWithBadness(InetAddress,List<InetAddress>)",6,3,6
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximityWithScore(InetAddress,List<InetAddress>)",1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.unregisterMBean()",1,1,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.updateScores()",2,4,5
"org.apache.cassandra.locator.Ec2Snitch.Ec2Snitch()",1,1,2
"org.apache.cassandra.locator.Ec2Snitch.awsApiCall(String)",2,1,2
"org.apache.cassandra.locator.Ec2Snitch.getDatacenter(InetAddress)",2,1,2
"org.apache.cassandra.locator.Ec2Snitch.getRack(InetAddress)",2,1,2
"org.apache.cassandra.locator.Ec2Snitch.gossiperStarting()",1,1,1
"org.apache.cassandra.locator.EndpointSnitchInfo.create()",1,1,2
"org.apache.cassandra.locator.EndpointSnitchInfo.getDatacenter(String)",1,1,1
"org.apache.cassandra.locator.EndpointSnitchInfo.getRack(String)",1,1,1
"org.apache.cassandra.locator.LocalStrategy.LocalStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.LocalStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",1,1,1
"org.apache.cassandra.locator.LocalStrategy.getReplicationFactor()",1,1,1
"org.apache.cassandra.locator.LocalStrategy.validateOptions()",1,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.NetworkTopologyStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",4,3,4
"org.apache.cassandra.locator.NetworkTopologyStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",1,11,11
"org.apache.cassandra.locator.NetworkTopologyStrategy.getDatacenters()",1,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.getReplicationFactor()",1,1,2
"org.apache.cassandra.locator.NetworkTopologyStrategy.getReplicationFactor(String)",1,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.validateOptions()",1,2,2
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.OldNetworkTopologyStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",4,12,13
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.getReplicationFactor()",1,1,1
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.validateOptions()",2,2,3
"org.apache.cassandra.locator.PropertyFileSnitch.PropertyFileSnitch()",1,2,2
"org.apache.cassandra.locator.PropertyFileSnitch.getDatacenter(InetAddress)",1,1,1
"org.apache.cassandra.locator.PropertyFileSnitch.getEndpointInfo(InetAddress)",2,2,2
"org.apache.cassandra.locator.PropertyFileSnitch.getRack(InetAddress)",1,1,1
"org.apache.cassandra.locator.PropertyFileSnitch.reloadConfiguration()",3,3,7
"org.apache.cassandra.locator.RackInferringSnitch.getDatacenter(InetAddress)",1,1,1
"org.apache.cassandra.locator.RackInferringSnitch.getRack(InetAddress)",1,1,1
"org.apache.cassandra.locator.SimpleSeedProvider.SimpleSeedProvider(Map<String, String>)",1,3,3
"org.apache.cassandra.locator.SimpleSeedProvider.addSeed(InetAddress)",1,2,2
"org.apache.cassandra.locator.SimpleSeedProvider.getSeeds()",1,1,1
"org.apache.cassandra.locator.SimpleSnitch.getDatacenter(InetAddress)",1,1,1
"org.apache.cassandra.locator.SimpleSnitch.getRack(InetAddress)",1,1,1
"org.apache.cassandra.locator.SimpleSnitch.getSortedListByProximity(InetAddress,Collection<InetAddress>)",1,1,1
"org.apache.cassandra.locator.SimpleSnitch.sortByProximity(InetAddress,List<InetAddress>)",1,1,1
"org.apache.cassandra.locator.SimpleStrategy.SimpleStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,1,1
"org.apache.cassandra.locator.SimpleStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",2,3,4
"org.apache.cassandra.locator.SimpleStrategy.getReplicationFactor()",1,1,1
"org.apache.cassandra.locator.SimpleStrategy.validateOptions()",2,2,3
"org.apache.cassandra.locator.TokenMetadata.TokenMetadata()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.TokenMetadata(BiMap<Token, InetAddress>)",1,2,2
"org.apache.cassandra.locator.TokenMetadata.addBootstrapToken(Token,InetAddress)",3,3,5
"org.apache.cassandra.locator.TokenMetadata.addLeavingEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.addMovingEndpoint(Token,InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.clearUnsafe()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.cloneAfterAllLeft()",1,2,2
"org.apache.cassandra.locator.TokenMetadata.cloneAfterAllSettled()",1,3,3
"org.apache.cassandra.locator.TokenMetadata.cloneOnlyTokenMap()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.entrySet()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.firstToken(ArrayList<Token>,Token)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(ArrayList,Token,boolean)",1,2,4
"org.apache.cassandra.locator.TokenMetadata.getBootstrapTokens()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getEndpoint(Token)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getLeavingEndpoints()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getMovingEndpoints()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getPendingRanges(String)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getPendingRanges(String,InetAddress)",1,3,3
"org.apache.cassandra.locator.TokenMetadata.getPendingRangesMM(String)",1,2,3
"org.apache.cassandra.locator.TokenMetadata.getPredecessor(Token)",1,2,2
"org.apache.cassandra.locator.TokenMetadata.getPrimaryRangeFor(Token)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getSuccessor(Token)",1,2,2
"org.apache.cassandra.locator.TokenMetadata.getToken(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getTokenToEndpointMap()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.getWriteEndpoints(Token,String,Collection<InetAddress>)",2,3,4
"org.apache.cassandra.locator.TokenMetadata.invalidateCaches()",1,2,2
"org.apache.cassandra.locator.TokenMetadata.isLeaving(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.isMember(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.isMoving(InetAddress)",3,2,3
"org.apache.cassandra.locator.TokenMetadata.pendingRangeChanges(InetAddress)",1,2,3
"org.apache.cassandra.locator.TokenMetadata.printPendingRanges()",1,3,3
"org.apache.cassandra.locator.TokenMetadata.register(AbstractReplicationStrategy)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.removeBootstrapToken(Token)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.removeEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.removeFromMoving(InetAddress)",3,3,3
"org.apache.cassandra.locator.TokenMetadata.ringIterator(ArrayList<Token>,Token,boolean)",4,6,10
"org.apache.cassandra.locator.TokenMetadata.setPendingRanges(String,Multimap<Range, InetAddress>)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.sortTokens()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.sortedTokens()",1,1,1
"org.apache.cassandra.locator.TokenMetadata.toString()",1,8,8
"org.apache.cassandra.locator.TokenMetadata.unregister(AbstractReplicationStrategy)",1,1,1
"org.apache.cassandra.locator.TokenMetadata.updateNormalToken(Token,InetAddress)",1,3,3
"org.apache.cassandra.net.AsyncResult.AsyncResult()",1,1,1
"org.apache.cassandra.net.AsyncResult.get(long,TimeUnit)",2,4,6
"org.apache.cassandra.net.AsyncResult.getFrom()",1,1,1
"org.apache.cassandra.net.AsyncResult.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.net.AsyncResult.result(Message)",1,2,2
"org.apache.cassandra.net.CachingMessageProducer.CachingMessageProducer(MessageProducer)",1,1,1
"org.apache.cassandra.net.CachingMessageProducer.getMessage(Integer)",1,2,2
"org.apache.cassandra.net.CompactEndpointSerializationHelper.deserialize(DataInputStream)",1,1,1
"org.apache.cassandra.net.CompactEndpointSerializationHelper.serialize(InetAddress,DataOutputStream)",1,1,1
"org.apache.cassandra.net.Header.Header(InetAddress,Verb)",1,1,1
"org.apache.cassandra.net.Header.Header(InetAddress,Verb,Map<String, byte[]>)",1,1,1
"org.apache.cassandra.net.Header.getDetail(String)",1,1,1
"org.apache.cassandra.net.Header.getFrom()",1,1,1
"org.apache.cassandra.net.Header.getVerb()",1,1,1
"org.apache.cassandra.net.Header.removeDetail(String)",1,1,1
"org.apache.cassandra.net.Header.serializer()",1,1,1
"org.apache.cassandra.net.Header.setDetail(String,byte[])",1,1,1
"org.apache.cassandra.net.HeaderSerializer.deserialize(DataInputStream,int)",1,2,2
"org.apache.cassandra.net.HeaderSerializer.serialize(Header,DataOutputStream,int)",1,2,2
"org.apache.cassandra.net.IncomingTcpConnection.IncomingTcpConnection(Socket)",1,1,1
"org.apache.cassandra.net.IncomingTcpConnection.close()",1,3,3
"org.apache.cassandra.net.IncomingTcpConnection.run()",5,14,15
"org.apache.cassandra.net.IncomingTcpConnection.stream(StreamHeader,DataInputStream)",1,2,2
"org.apache.cassandra.net.Message.Message(Header,byte[],int)",1,1,1
"org.apache.cassandra.net.Message.Message(InetAddress,Verb,byte[],int)",1,1,1
"org.apache.cassandra.net.Message.MessageSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.net.Message.MessageSerializer.serialize(Message,DataOutputStream,int)",1,1,1
"org.apache.cassandra.net.Message.getFrom()",1,1,1
"org.apache.cassandra.net.Message.getHeader(String)",1,1,1
"org.apache.cassandra.net.Message.getInternalReply(byte[],int)",1,1,1
"org.apache.cassandra.net.Message.getMessageBody()",1,1,1
"org.apache.cassandra.net.Message.getMessageType()",1,1,1
"org.apache.cassandra.net.Message.getReply(InetAddress,byte[],int)",1,1,1
"org.apache.cassandra.net.Message.getVerb()",1,1,1
"org.apache.cassandra.net.Message.getVersion()",1,1,1
"org.apache.cassandra.net.Message.removeHeader(String)",1,1,1
"org.apache.cassandra.net.Message.serializer()",1,1,1
"org.apache.cassandra.net.Message.setHeader(String,byte[])",1,1,1
"org.apache.cassandra.net.Message.toString()",1,1,1
"org.apache.cassandra.net.MessageDeliveryTask.MessageDeliveryTask(Message,String)",1,1,1
"org.apache.cassandra.net.MessageDeliveryTask.run()",3,4,4
"org.apache.cassandra.net.MessagingService.MessagingService()",1,4,5
"org.apache.cassandra.net.MessagingService.SocketThread.SocketThread(ServerSocket,String)",1,1,1
"org.apache.cassandra.net.MessagingService.SocketThread.close()",1,1,1
"org.apache.cassandra.net.MessagingService.SocketThread.run()",2,3,4
"org.apache.cassandra.net.MessagingService.addCallback(IMessageCallback,String,InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.addCallback(IMessageCallback,String,InetAddress,long)",1,1,1
"org.apache.cassandra.net.MessagingService.addLatency(InetAddress,double)",1,2,2
"org.apache.cassandra.net.MessagingService.constructStreamHeader(StreamHeader,boolean,int)",1,1,3
"org.apache.cassandra.net.MessagingService.convict(InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.getBits(int,int,int)",1,1,1
"org.apache.cassandra.net.MessagingService.getCommandCompletedTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getCommandPendingTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getConnection(InetAddress,Message)",1,1,1
"org.apache.cassandra.net.MessagingService.getConnectionPool(InetAddress)",1,2,2
"org.apache.cassandra.net.MessagingService.getDefaultCallbackTimeout()",1,1,1
"org.apache.cassandra.net.MessagingService.getDroppedMessages()",1,2,2
"org.apache.cassandra.net.MessagingService.getRecentTimeoutsPerHost()",1,2,2
"org.apache.cassandra.net.MessagingService.getRecentTotalTimouts()",1,1,1
"org.apache.cassandra.net.MessagingService.getRecentlyDroppedMessages()",1,2,2
"org.apache.cassandra.net.MessagingService.getRegisteredCallbackAge(String)",1,1,1
"org.apache.cassandra.net.MessagingService.getResponseCompletedTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getResponsePendingTasks()",1,2,2
"org.apache.cassandra.net.MessagingService.getServerSocket(InetAddress)",4,5,6
"org.apache.cassandra.net.MessagingService.getTimeoutsPerHost()",1,2,2
"org.apache.cassandra.net.MessagingService.getTotalTimeouts()",1,1,1
"org.apache.cassandra.net.MessagingService.getVerbHandler(Verb)",1,1,1
"org.apache.cassandra.net.MessagingService.incrementDroppedMessages(Verb)",1,1,1
"org.apache.cassandra.net.MessagingService.instance()",1,1,1
"org.apache.cassandra.net.MessagingService.listen(InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.logDroppedMessages()",1,4,4
"org.apache.cassandra.net.MessagingService.maybeAddLatency(IMessageCallback,InetAddress,double)",1,2,2
"org.apache.cassandra.net.MessagingService.nextId()",1,1,1
"org.apache.cassandra.net.MessagingService.packIt(byte[],boolean,int)",1,1,2
"org.apache.cassandra.net.MessagingService.receive(Message,String)",2,2,3
"org.apache.cassandra.net.MessagingService.register(ILatencySubscriber)",1,1,1
"org.apache.cassandra.net.MessagingService.registerVerbHandlers(Verb,IVerbHandler)",1,1,1
"org.apache.cassandra.net.MessagingService.removeRegisteredCallback(String)",1,1,1
"org.apache.cassandra.net.MessagingService.sendOneWay(Message,InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.sendOneWay(Message,String,InetAddress)",3,3,5
"org.apache.cassandra.net.MessagingService.sendRR(Message,InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.sendRR(Message,InetAddress,IMessageCallback)",1,1,1
"org.apache.cassandra.net.MessagingService.sendRR(Message,InetAddress,IMessageCallback,long)",1,1,1
"org.apache.cassandra.net.MessagingService.sendRR(MessageProducer,InetAddress,IAsyncCallback)",1,1,2
"org.apache.cassandra.net.MessagingService.sendReply(Message,String,InetAddress)",1,1,1
"org.apache.cassandra.net.MessagingService.shutdown()",1,1,2
"org.apache.cassandra.net.MessagingService.stream(StreamHeader,InetAddress)",1,2,3
"org.apache.cassandra.net.MessagingService.validateMagic(int)",2,1,2
"org.apache.cassandra.net.MessagingService.waitFor()",1,2,2
"org.apache.cassandra.net.MessagingService.waitUntilListening()",1,2,2
"org.apache.cassandra.net.OutboundTcpConnection.OutboundTcpConnection(InetAddress)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.closeSocket()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.connect()",2,6,8
"org.apache.cassandra.net.OutboundTcpConnection.disconnect()",1,4,4
"org.apache.cassandra.net.OutboundTcpConnection.getCompletedMesssages()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.getPendingMessages()",1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.run()",3,5,5
"org.apache.cassandra.net.OutboundTcpConnection.take()",1,1,2
"org.apache.cassandra.net.OutboundTcpConnection.write(ByteBuffer)",1,1,2
"org.apache.cassandra.net.OutboundTcpConnection.writeConnected(ByteBuffer)",1,4,4
"org.apache.cassandra.net.OutboundTcpConnectionPool.OutboundTcpConnectionPool(InetAddress)",1,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.getConnection(Message)",1,1,4
"org.apache.cassandra.net.OutboundTcpConnectionPool.reset()",1,2,2
"org.apache.cassandra.net.ResponseVerbHandler.doVerb(Message,String)",2,5,5
"org.apache.cassandra.net.sink.SinkManager.add(IMessageSink)",1,1,1
"org.apache.cassandra.net.sink.SinkManager.clear()",1,1,1
"org.apache.cassandra.net.sink.SinkManager.processClientMessage(Message,String,InetAddress)",4,2,4
"org.apache.cassandra.net.sink.SinkManager.processServerMessage(Message,String)",4,2,4
"org.apache.cassandra.scheduler.NoScheduler.NoScheduler()",1,1,1
"org.apache.cassandra.scheduler.NoScheduler.NoScheduler(RequestSchedulerOptions)",1,1,1
"org.apache.cassandra.scheduler.NoScheduler.queue(Thread,String)",1,1,1
"org.apache.cassandra.scheduler.NoScheduler.release()",1,1,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.RoundRobinScheduler(RequestSchedulerOptions)",1,2,2
"org.apache.cassandra.scheduler.RoundRobinScheduler.getTaskCount()",1,1,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.getWeight(String)",1,3,3
"org.apache.cassandra.scheduler.RoundRobinScheduler.getWeightedQueue(String)",3,1,3
"org.apache.cassandra.scheduler.RoundRobinScheduler.queue(Thread,String)",1,1,2
"org.apache.cassandra.scheduler.RoundRobinScheduler.release()",1,1,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.schedule()",4,4,4
"org.apache.cassandra.security.SSLFactory.createSSLContext(EncryptionOptions)",1,1,2
"org.apache.cassandra.security.SSLFactory.getServerSocket(EncryptionOptions,InetAddress,int)",1,1,1
"org.apache.cassandra.security.SSLFactory.getSocket(EncryptionOptions)",1,1,1
"org.apache.cassandra.security.SSLFactory.getSocket(EncryptionOptions,InetAddress,int,InetAddress,int)",1,1,1
"org.apache.cassandra.security.streaming.SSLFileStreamTask.SSLFileStreamTask(StreamHeader,InetAddress)",1,1,1
"org.apache.cassandra.security.streaming.SSLFileStreamTask.bind()",1,1,1
"org.apache.cassandra.security.streaming.SSLFileStreamTask.close()",1,1,1
"org.apache.cassandra.security.streaming.SSLFileStreamTask.connect()",1,1,1
"org.apache.cassandra.security.streaming.SSLFileStreamTask.write(FileChannel,Pair<Long, Long>,long,long)",1,1,1
"org.apache.cassandra.security.streaming.SSLFileStreamTask.writeHeader(ByteBuffer)",1,1,1
"org.apache.cassandra.security.streaming.SSLIncomingStreamReader.SSLIncomingStreamReader(StreamHeader,Socket,DataInputStream)",1,1,1
"org.apache.cassandra.security.streaming.SSLIncomingStreamReader.readnwrite(long,long,long,FileChannel)",1,1,1
"org.apache.cassandra.service.AbstractCassandraDaemon.CleaningThreadPool.CleaningThreadPool(ThreadLocal<ClientState>,int,int)",1,1,1
"org.apache.cassandra.service.AbstractCassandraDaemon.CleaningThreadPool.afterExecute(Runnable,Throwable)",1,1,1
"org.apache.cassandra.service.AbstractCassandraDaemon.activate()",1,4,4
"org.apache.cassandra.service.AbstractCassandraDaemon.deactivate()",1,1,1
"org.apache.cassandra.service.AbstractCassandraDaemon.destroy()",1,1,1
"org.apache.cassandra.service.AbstractCassandraDaemon.init(String[])",1,1,1
"org.apache.cassandra.service.AbstractCassandraDaemon.initLog4j()",3,4,6
"org.apache.cassandra.service.AbstractCassandraDaemon.isRPCServerRunning()",1,1,1
"org.apache.cassandra.service.AbstractCassandraDaemon.setup()",1,13,13
"org.apache.cassandra.service.AbstractCassandraDaemon.start()",1,2,2
"org.apache.cassandra.service.AbstractCassandraDaemon.startRPCServer()",1,2,2
"org.apache.cassandra.service.AbstractCassandraDaemon.stop()",1,1,1
"org.apache.cassandra.service.AbstractCassandraDaemon.stopRPCServer()",1,2,2
"org.apache.cassandra.service.AbstractRowResolver.AbstractRowResolver(ByteBuffer,String)",1,1,1
"org.apache.cassandra.service.AbstractRowResolver.getMessages()",1,1,1
"org.apache.cassandra.service.AbstractRowResolver.injectPreProcessed(ReadResponse)",1,1,1
"org.apache.cassandra.service.AbstractRowResolver.preprocess(Message)",1,2,4
"org.apache.cassandra.service.AbstractWriteResponseHandler.AbstractWriteResponseHandler(Collection<InetAddress>,Multimap<InetAddress, InetAddress>,ConsistencyLevel)",1,1,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.get()",2,1,3
"org.apache.cassandra.service.AntiEntropyService.AntiEntropyService()",1,1,1
"org.apache.cassandra.service.AntiEntropyService.CFPair.CFPair(String,String)",1,1,2
"org.apache.cassandra.service.AntiEntropyService.RepairFuture.RepairFuture(RepairSession)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.Differencer.Callback.runMayThrow()",2,1,2
"org.apache.cassandra.service.AntiEntropyService.RepairSession.Differencer.Differencer(String,InetAddress,MerkleTree,MerkleTree)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.Differencer.performStreamingRepair()",1,1,2
"org.apache.cassandra.service.AntiEntropyService.RepairSession.Differencer.run()",2,4,5
"org.apache.cassandra.service.AntiEntropyService.RepairSession.Differencer.toString()",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.RepairJob.RepairJob(String)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.RepairJob.addTree(TreeRequest,MerkleTree)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.RepairJob.completedSynchronizationJob(InetAddress)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.RepairJob.sendTreeRequests()",1,2,2
"org.apache.cassandra.service.AntiEntropyService.RepairSession.RepairJob.submitDifferencers()",3,2,3
"org.apache.cassandra.service.AntiEntropyService.RepairSession.RepairSession(Range,String,String...)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.RepairSession(String,Range,String,String[])",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.RepairSession(TreeRequest,String,String...)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.completed(InetAddress,String)",1,3,3
"org.apache.cassandra.service.AntiEntropyService.RepairSession.convict(InetAddress,double)",4,1,4
"org.apache.cassandra.service.AntiEntropyService.RepairSession.failedNode(InetAddress)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.getFuture()",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.getName()",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.onAlive(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.onChange(InetAddress,ApplicationState,VersionedValue)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.onJoin(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.onRestart(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.RepairSession.runMayThrow()",5,5,7
"org.apache.cassandra.service.AntiEntropyService.TreePair.TreePair(MerkleTree,MerkleTree)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.TreeRequest.TreeRequest(String,InetAddress,Range,CFPair)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.TreeRequest.equals(Object)",2,4,5
"org.apache.cassandra.service.AntiEntropyService.TreeRequest.hashCode()",1,1,1
"org.apache.cassandra.service.AntiEntropyService.TreeRequest.toString()",1,1,1
"org.apache.cassandra.service.AntiEntropyService.TreeRequestVerbHandler.deserialize(DataInputStream,int)",1,2,2
"org.apache.cassandra.service.AntiEntropyService.TreeRequestVerbHandler.doVerb(Message,String)",1,1,2
"org.apache.cassandra.service.AntiEntropyService.TreeRequestVerbHandler.makeVerb(TreeRequest,int)",1,1,2
"org.apache.cassandra.service.AntiEntropyService.TreeRequestVerbHandler.serialize(TreeRequest,DataOutputStream,int)",1,2,2
"org.apache.cassandra.service.AntiEntropyService.TreeResponseVerbHandler.deserialize(DataInputStream,int)",1,1,2
"org.apache.cassandra.service.AntiEntropyService.TreeResponseVerbHandler.doVerb(Message,String)",1,1,2
"org.apache.cassandra.service.AntiEntropyService.TreeResponseVerbHandler.makeVerb(InetAddress,Validator)",1,1,2
"org.apache.cassandra.service.AntiEntropyService.TreeResponseVerbHandler.serialize(Validator,DataOutputStream,int)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.Validator.Validator(TreeRequest)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.Validator.Validator(TreeRequest,MerkleTree)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.Validator.add(AbstractCompactedRow)",1,4,4
"org.apache.cassandra.service.AntiEntropyService.Validator.complete()",1,1,1
"org.apache.cassandra.service.AntiEntropyService.Validator.completeTree()",1,3,3
"org.apache.cassandra.service.AntiEntropyService.Validator.prepare(ColumnFamilyStore)",5,5,6
"org.apache.cassandra.service.AntiEntropyService.Validator.rowHash(AbstractCompactedRow)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.Validator.run()",1,1,1
"org.apache.cassandra.service.AntiEntropyService.getNeighbors(String,Range)",2,4,4
"org.apache.cassandra.service.AntiEntropyService.rendezvous(TreeRequest,MerkleTree)",1,3,3
"org.apache.cassandra.service.AntiEntropyService.request(String,InetAddress,Range,String,String)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.respond(Validator,InetAddress)",1,2,2
"org.apache.cassandra.service.AntiEntropyService.submitArtificialRepairSession(TreeRequest,String,String...)",1,1,1
"org.apache.cassandra.service.AntiEntropyService.submitRepairSession(Range,String,String...)",1,1,1
"org.apache.cassandra.service.AsyncRepairCallback.AsyncRepairCallback(RowRepairResolver,int)",1,1,1
"org.apache.cassandra.service.AsyncRepairCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.AsyncRepairCallback.response(Message)",1,2,2
"org.apache.cassandra.service.ClientState.ClientState()",1,1,1
"org.apache.cassandra.service.ClientState.getKeyspace()",2,1,2
"org.apache.cassandra.service.ClientState.getSchedulingValue()",2,2,2
"org.apache.cassandra.service.ClientState.hasAccess(AuthenticatedUser,Set<Permission>,Permission,List<Object>)",2,1,2
"org.apache.cassandra.service.ClientState.hasColumnFamilyAccess(String,Permission)",1,1,1
"org.apache.cassandra.service.ClientState.hasColumnFamilySchemaAccess(Permission)",2,2,3
"org.apache.cassandra.service.ClientState.hasKeyspaceSchemaAccess(Permission)",1,1,1
"org.apache.cassandra.service.ClientState.login(Map<? extends CharSequence, ? extends CharSequence>)",1,2,2
"org.apache.cassandra.service.ClientState.logout()",1,2,2
"org.apache.cassandra.service.ClientState.reset()",1,1,1
"org.apache.cassandra.service.ClientState.resourceClear()",1,1,1
"org.apache.cassandra.service.ClientState.setKeyspace(String)",1,1,1
"org.apache.cassandra.service.ClientState.validateKeyspace()",2,1,2
"org.apache.cassandra.service.ClientState.validateLogin()",2,1,2
"org.apache.cassandra.service.DatacenterReadCallback.DatacenterReadCallback(IResponseResolver,ConsistencyLevel,IReadCommand,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.DatacenterReadCallback.assureSufficientLiveNodes()",2,6,7
"org.apache.cassandra.service.DatacenterReadCallback.determineBlockFor(ConsistencyLevel,String)",1,1,1
"org.apache.cassandra.service.DatacenterReadCallback.preferredEndpoints(List<InetAddress>)",3,3,4
"org.apache.cassandra.service.DatacenterReadCallback.waitingFor(Message)",1,1,1
"org.apache.cassandra.service.DatacenterReadCallback.waitingFor(ReadResponse)",1,1,1
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.DatacenterSyncWriteResponseHandler(Collection<InetAddress>,Multimap<InetAddress, InetAddress>,ConsistencyLevel,String)",1,2,2
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.assureSufficientLiveNodes()",3,5,6
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.create(Collection<InetAddress>,Multimap<InetAddress, InetAddress>,ConsistencyLevel,String)",1,1,1
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.response(Message)",3,3,4
"org.apache.cassandra.service.DatacenterWriteResponseHandler.DatacenterWriteResponseHandler(Collection<InetAddress>,Multimap<InetAddress, InetAddress>,ConsistencyLevel,String)",1,1,1
"org.apache.cassandra.service.DatacenterWriteResponseHandler.assureSufficientLiveNodes()",2,3,5
"org.apache.cassandra.service.DatacenterWriteResponseHandler.create(Collection<InetAddress>,Multimap<InetAddress, InetAddress>,ConsistencyLevel,String)",1,1,1
"org.apache.cassandra.service.DatacenterWriteResponseHandler.determineBlockFor(String)",1,1,1
"org.apache.cassandra.service.DatacenterWriteResponseHandler.response(Message)",1,4,4
"org.apache.cassandra.service.DigestMismatchException.DigestMismatchException(DecoratedKey,ByteBuffer,ByteBuffer)",1,1,1
"org.apache.cassandra.service.EmbeddedCassandraService.start()",1,1,1
"org.apache.cassandra.service.GCInspector.GCInspector()",1,2,3
"org.apache.cassandra.service.GCInspector.logGCResults()",4,9,13
"org.apache.cassandra.service.GCInspector.start()",2,1,2
"org.apache.cassandra.service.IndexScanVerbHandler.doVerb(Message,String)",1,2,3
"org.apache.cassandra.service.MigrationManager.announce(IColumn)",1,2,2
"org.apache.cassandra.service.MigrationManager.applyMigrations(UUID,UUID)",2,4,7
"org.apache.cassandra.service.MigrationManager.makeColumns(Message)",1,2,2
"org.apache.cassandra.service.MigrationManager.makeMigrationMessage(Collection<IColumn>,int)",1,2,2
"org.apache.cassandra.service.MigrationManager.onAlive(InetAddress,EndpointState)",1,2,2
"org.apache.cassandra.service.MigrationManager.onChange(InetAddress,ApplicationState,VersionedValue)",2,1,2
"org.apache.cassandra.service.MigrationManager.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.MigrationManager.onJoin(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.MigrationManager.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.service.MigrationManager.onRestart(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.MigrationManager.passiveAnnounce(UUID)",1,1,1
"org.apache.cassandra.service.MigrationManager.pushMigrations(InetAddress,Collection<IColumn>)",1,1,2
"org.apache.cassandra.service.MigrationManager.rectify(UUID,InetAddress)",1,5,5
"org.apache.cassandra.service.RangeSliceResponseResolver.RangeSliceResponseResolver(String,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.RangeSliceResponseResolver.RowIterator.RowIterator(Iterator<Row>,InetAddress)",1,1,1
"org.apache.cassandra.service.RangeSliceResponseResolver.RowIterator.computeNext()",1,2,2
"org.apache.cassandra.service.RangeSliceResponseResolver.getData()",1,1,1
"org.apache.cassandra.service.RangeSliceResponseResolver.getMessages()",1,1,1
"org.apache.cassandra.service.RangeSliceResponseResolver.isDataPresent()",1,1,1
"org.apache.cassandra.service.RangeSliceResponseResolver.preprocess(Message)",1,1,1
"org.apache.cassandra.service.RangeSliceResponseResolver.resolve()",1,7,7
"org.apache.cassandra.service.RangeSliceVerbHandler.doVerb(Message,String)",2,2,4
"org.apache.cassandra.service.ReadCallback.AsyncRepairRunner.runMayThrow()",1,4,4
"org.apache.cassandra.service.ReadCallback.ReadCallback(IResponseResolver<T>,ConsistencyLevel,IReadCommand,List<InetAddress>)",1,3,4
"org.apache.cassandra.service.ReadCallback.assureSufficientLiveNodes()",2,2,2
"org.apache.cassandra.service.ReadCallback.determineBlockFor(ConsistencyLevel,String)",7,4,7
"org.apache.cassandra.service.ReadCallback.get()",2,4,5
"org.apache.cassandra.service.ReadCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.ReadCallback.maybeResolveForRepair()",1,3,3
"org.apache.cassandra.service.ReadCallback.preferredEndpoints(List<InetAddress>)",1,1,1
"org.apache.cassandra.service.ReadCallback.randomlyReadRepair()",2,2,2
"org.apache.cassandra.service.ReadCallback.response(Message)",1,4,4
"org.apache.cassandra.service.ReadCallback.response(ReadResponse)",1,4,4
"org.apache.cassandra.service.ReadCallback.waitingFor(Message)",1,1,1
"org.apache.cassandra.service.ReadCallback.waitingFor(ReadResponse)",1,1,1
"org.apache.cassandra.service.RepairCallback.RepairCallback(IResponseResolver<T>,List<InetAddress>)",1,1,1
"org.apache.cassandra.service.RepairCallback.get()",1,2,3
"org.apache.cassandra.service.RepairCallback.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.RepairCallback.response(Message)",1,2,2
"org.apache.cassandra.service.RowDigestResolver.RowDigestResolver(String,ByteBuffer)",1,1,1
"org.apache.cassandra.service.RowDigestResolver.getData()",3,3,3
"org.apache.cassandra.service.RowDigestResolver.isDataPresent()",3,2,3
"org.apache.cassandra.service.RowDigestResolver.resolve()",7,8,10
"org.apache.cassandra.service.RowRepairResolver.RowRepairResolver(String,ByteBuffer)",1,1,1
"org.apache.cassandra.service.RowRepairResolver.getData()",1,1,1
"org.apache.cassandra.service.RowRepairResolver.isDataPresent()",1,1,1
"org.apache.cassandra.service.RowRepairResolver.maybeScheduleRepairs(ColumnFamily,String,DecoratedKey,List<ColumnFamily>,List<InetAddress>)",3,2,4
"org.apache.cassandra.service.RowRepairResolver.resolve()",1,7,7
"org.apache.cassandra.service.RowRepairResolver.resolveSuperset(List<ColumnFamily>)",6,4,7
"org.apache.cassandra.service.SocketSessionManagementService.clear()",1,1,1
"org.apache.cassandra.service.SocketSessionManagementService.get(SocketAddress)",1,2,2
"org.apache.cassandra.service.SocketSessionManagementService.put(SocketAddress,ClientState)",1,2,3
"org.apache.cassandra.service.SocketSessionManagementService.remove(SocketAddress)",1,1,2
"org.apache.cassandra.service.StorageLoadBalancer.LoadBalancer.LoadBalancer()",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.LoadBalancer.run()",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.StorageLoadBalancer()",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.averageSystemLoad()",1,3,4
"org.apache.cassandra.service.StorageLoadBalancer.findARandomLightNode()",2,4,4
"org.apache.cassandra.service.StorageLoadBalancer.getLoadInfo()",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.isANeighbour(InetAddress)",3,1,3
"org.apache.cassandra.service.StorageLoadBalancer.isHeavyNode()",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.isMoveable(InetAddress)",3,3,3
"org.apache.cassandra.service.StorageLoadBalancer.localLoad()",1,1,2
"org.apache.cassandra.service.StorageLoadBalancer.onAlive(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.onChange(InetAddress,ApplicationState,VersionedValue)",2,1,2
"org.apache.cassandra.service.StorageLoadBalancer.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.onJoin(InetAddress,EndpointState)",1,2,2
"org.apache.cassandra.service.StorageLoadBalancer.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.onRestart(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.StorageLoadBalancer.startBroadcasting()",1,2,2
"org.apache.cassandra.service.StorageLoadBalancer.waitForLoadInfo()",1,1,2
"org.apache.cassandra.service.StorageProxy.DroppableRunnable.DroppableRunnable(Verb)",1,1,1
"org.apache.cassandra.service.StorageProxy.DroppableRunnable.run()",2,2,3
"org.apache.cassandra.service.StorageProxy.LocalReadRunnable.LocalReadRunnable(ReadCommand,ReadCallback<Row>)",1,1,1
"org.apache.cassandra.service.StorageProxy.LocalReadRunnable.runMayThrow()",1,2,2
"org.apache.cassandra.service.StorageProxy.StorageProxy()",1,1,1
"org.apache.cassandra.service.StorageProxy.addHintHeader(Message,InetAddress)",1,2,2
"org.apache.cassandra.service.StorageProxy.applyCounterMutationOnCoordinator(CounterMutation,String)",1,1,1
"org.apache.cassandra.service.StorageProxy.applyCounterMutationOnLeader(CounterMutation,String)",1,1,1
"org.apache.cassandra.service.StorageProxy.counterWriteTask(IMutation,Multimap<InetAddress, InetAddress>,IWriteResponseHandler,String,ConsistencyLevel)",1,3,3
"org.apache.cassandra.service.StorageProxy.describeSchemaVersions()",3,10,12
"org.apache.cassandra.service.StorageProxy.fetchRows(List<ReadCommand>,ConsistencyLevel)",6,16,20
"org.apache.cassandra.service.StorageProxy.findSuitableEndpoint(String,ByteBuffer,String)",3,4,5
"org.apache.cassandra.service.StorageProxy.getHintedHandoffEnabled()",1,1,1
"org.apache.cassandra.service.StorageProxy.getMaxHintWindow()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRangeOperations()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRangeSlice(RangeSliceCommand,ConsistencyLevel)",4,14,17
"org.apache.cassandra.service.StorageProxy.getReadCallback(IResponseResolver<T>,IReadCommand,ConsistencyLevel,List<InetAddress>)",2,2,3
"org.apache.cassandra.service.StorageProxy.getReadOperations()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRecentRangeLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRecentRangeLatencyMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRecentReadLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRecentReadLatencyMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRecentWriteLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRecentWriteLatencyMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getRestrictedRanges(AbstractBounds)",4,11,12
"org.apache.cassandra.service.StorageProxy.getTotalRangeLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getTotalRangeLatencyMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getTotalReadLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getTotalReadLatencyMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getTotalWriteLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getTotalWriteLatencyMicros()",1,1,1
"org.apache.cassandra.service.StorageProxy.getWriteEndpoints(String,ByteBuffer)",1,1,1
"org.apache.cassandra.service.StorageProxy.getWriteOperations()",1,1,1
"org.apache.cassandra.service.StorageProxy.insertLocal(RowMutation,IWriteResponseHandler)",1,2,2
"org.apache.cassandra.service.StorageProxy.isAnyHostDown()",1,1,1
"org.apache.cassandra.service.StorageProxy.isHintedHandoffEnabled()",1,1,1
"org.apache.cassandra.service.StorageProxy.mutate(List<? extends IMutation>,ConsistencyLevel)",1,8,8
"org.apache.cassandra.service.StorageProxy.mutateCounter(CounterMutation,String)",2,3,3
"org.apache.cassandra.service.StorageProxy.performWrite(IMutation,ConsistencyLevel,String,WritePerformer)",1,1,1
"org.apache.cassandra.service.StorageProxy.read(List<ReadCommand>,ConsistencyLevel)",2,1,2
"org.apache.cassandra.service.StorageProxy.scan(String,String,IndexClause,SlicePredicate,ConsistencyLevel)",3,9,10
"org.apache.cassandra.service.StorageProxy.sendMessages(String,Map<String, Multimap<Message, InetAddress>>,IWriteResponseHandler)",1,8,8
"org.apache.cassandra.service.StorageProxy.sendToHintedEndpoints(RowMutation,Multimap<InetAddress, InetAddress>,IWriteResponseHandler,String,ConsistencyLevel)",1,12,12
"org.apache.cassandra.service.StorageProxy.setHintedHandoffEnabled(boolean)",1,1,1
"org.apache.cassandra.service.StorageProxy.setMaxHintWindow(int)",1,1,1
"org.apache.cassandra.service.StorageProxy.shouldHint(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageProxy.truncateBlocking(String,String)",2,3,3
"org.apache.cassandra.service.StorageService.StorageService()",2,1,3
"org.apache.cassandra.service.StorageService.bootstrap(Token)",1,1,2
"org.apache.cassandra.service.StorageService.bulkLoad(String)",2,4,6
"org.apache.cassandra.service.StorageService.calculatePendingRanges()",1,2,2
"org.apache.cassandra.service.StorageService.calculatePendingRanges(AbstractReplicationStrategy,String)",2,13,13
"org.apache.cassandra.service.StorageService.calculateStreamAndFetchRanges(Collection<Range>,Collection<Range>)",1,1,1
"org.apache.cassandra.service.StorageService.calculateStreamAndFetchRanges(Iterator<Range>,Iterator<Range>)",1,7,7
"org.apache.cassandra.service.StorageService.clearSnapshot(String,String...)",1,5,6
"org.apache.cassandra.service.StorageService.confirmReplication(InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.constructRangeToEndpointMap(String,List<Range>)",1,2,2
"org.apache.cassandra.service.StorageService.decommission()",5,3,6
"org.apache.cassandra.service.StorageService.deliverHints(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.deliverHints(String)",1,1,1
"org.apache.cassandra.service.StorageService.drain()",2,4,4
"org.apache.cassandra.service.StorageService.excise(Token,InetAddress)",1,2,2
"org.apache.cassandra.service.StorageService.finishBootstrapping()",1,1,1
"org.apache.cassandra.service.StorageService.flushLargestMemtables()",2,11,11
"org.apache.cassandra.service.StorageService.forceRemoveCompletion()",2,4,4
"org.apache.cassandra.service.StorageService.forceTableCleanup(String,String...)",2,2,3
"org.apache.cassandra.service.StorageService.forceTableCompaction(String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceTableFlush(String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceTableRepair(Range,String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.forceTableRepair(String,String...)",3,5,7
"org.apache.cassandra.service.StorageService.getAllDataFileLocations()",1,1,1
"org.apache.cassandra.service.StorageService.getAllDataFileLocationsForTable(String)",1,1,1
"org.apache.cassandra.service.StorageService.getAllRanges(List<Token>)",2,4,4
"org.apache.cassandra.service.StorageService.getBootstrapToken()",6,8,10
"org.apache.cassandra.service.StorageService.getChangedRangesForLeaving(String,InetAddress)",1,7,7
"org.apache.cassandra.service.StorageService.getCommitLogLocation()",1,1,1
"org.apache.cassandra.service.StorageService.getCompactionThroughputMbPerSec()",1,1,1
"org.apache.cassandra.service.StorageService.getCurrentGenerationNumber()",1,1,1
"org.apache.cassandra.service.StorageService.getDrainProgress()",1,1,1
"org.apache.cassandra.service.StorageService.getExceptionCount()",1,1,1
"org.apache.cassandra.service.StorageService.getJoiningNodes()",1,1,1
"org.apache.cassandra.service.StorageService.getKeyspaces()",1,1,1
"org.apache.cassandra.service.StorageService.getLeavingNodes()",1,1,1
"org.apache.cassandra.service.StorageService.getLiveNaturalEndpoints(String,ByteBuffer)",1,1,1
"org.apache.cassandra.service.StorageService.getLiveNaturalEndpoints(String,Token)",1,3,3
"org.apache.cassandra.service.StorageService.getLiveNodes()",1,1,1
"org.apache.cassandra.service.StorageService.getLoad()",1,3,3
"org.apache.cassandra.service.StorageService.getLoadMap()",1,2,2
"org.apache.cassandra.service.StorageService.getLoadString()",1,1,1
"org.apache.cassandra.service.StorageService.getLocalPrimaryRange()",1,1,1
"org.apache.cassandra.service.StorageService.getLocalRanges(String)",1,1,1
"org.apache.cassandra.service.StorageService.getLocalToken()",1,1,1
"org.apache.cassandra.service.StorageService.getMovingNodes()",1,2,2
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,ByteBuffer)",1,1,1
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,String,String)",1,1,1
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,Token)",1,1,1
"org.apache.cassandra.service.StorageService.getNewSourceRanges(String,Set<Range>)",4,4,4
"org.apache.cassandra.service.StorageService.getOperationMode()",1,1,1
"org.apache.cassandra.service.StorageService.getOwnership()",1,1,1
"org.apache.cassandra.service.StorageService.getPartitioner()",1,1,1
"org.apache.cassandra.service.StorageService.getPendingRangeToEndpointMap(String)",1,3,3
"org.apache.cassandra.service.StorageService.getPredecessor(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.getPrimaryRangeForEndpoint(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.getRangeToAddressMap(String)",1,2,2
"org.apache.cassandra.service.StorageService.getRangeToEndpointMap(String)",1,2,2
"org.apache.cassandra.service.StorageService.getRangeToRpcaddressMap(String)",1,3,3
"org.apache.cassandra.service.StorageService.getRangesForEndpoint(String,InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.getReleaseVersion()",1,1,1
"org.apache.cassandra.service.StorageService.getRemovalStatus()",2,1,2
"org.apache.cassandra.service.StorageService.getRpcaddress(InetAddress)",3,3,3
"org.apache.cassandra.service.StorageService.getSavedCachesLocation()",1,1,1
"org.apache.cassandra.service.StorageService.getSplits(String,String,Range,int)",1,5,5
"org.apache.cassandra.service.StorageService.getSuccessor(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.getToken()",1,1,1
"org.apache.cassandra.service.StorageService.getTokenMetadata()",1,1,1
"org.apache.cassandra.service.StorageService.getTokenToEndpointMap()",1,2,2
"org.apache.cassandra.service.StorageService.getUnreachableNodes()",1,1,1
"org.apache.cassandra.service.StorageService.getValidColumnFamilies(String,String...)",4,4,4
"org.apache.cassandra.service.StorageService.getValidTable(String)",2,1,2
"org.apache.cassandra.service.StorageService.handleStateBootstrap(InetAddress,String[])",1,4,4
"org.apache.cassandra.service.StorageService.handleStateLeaving(InetAddress,String[])",1,4,4
"org.apache.cassandra.service.StorageService.handleStateLeft(InetAddress,String[])",1,2,2
"org.apache.cassandra.service.StorageService.handleStateMoving(InetAddress,String[])",1,2,2
"org.apache.cassandra.service.StorageService.handleStateNormal(InetAddress,String[])",1,9,9
"org.apache.cassandra.service.StorageService.handleStateRemoving(InetAddress,String[])",2,6,7
"org.apache.cassandra.service.StorageService.hasUnreclaimedSpace()",3,2,3
"org.apache.cassandra.service.StorageService.initClient()",1,1,1
"org.apache.cassandra.service.StorageService.initClient(int)",3,1,4
"org.apache.cassandra.service.StorageService.initServer()",3,10,12
"org.apache.cassandra.service.StorageService.invalidateKeyCaches(String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.invalidateRowCaches(String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.isBootstrapMode()",1,1,1
"org.apache.cassandra.service.StorageService.isClientMode()",1,1,1
"org.apache.cassandra.service.StorageService.isInitialized()",1,1,1
"org.apache.cassandra.service.StorageService.isJoined()",1,1,1
"org.apache.cassandra.service.StorageService.isRPCServerRunning()",2,1,2
"org.apache.cassandra.service.StorageService.joinRing()",1,2,2
"org.apache.cassandra.service.StorageService.joinTokenRing()",3,11,12
"org.apache.cassandra.service.StorageService.leaveRing()",1,1,2
"org.apache.cassandra.service.StorageService.loadNewSSTables(String,String)",1,1,1
"org.apache.cassandra.service.StorageService.move(String)",1,1,1
"org.apache.cassandra.service.StorageService.move(Token)",6,15,18
"org.apache.cassandra.service.StorageService.onAlive(InetAddress,EndpointState)",1,3,3
"org.apache.cassandra.service.StorageService.onChange(InetAddress,ApplicationState,VersionedValue)",2,9,10
"org.apache.cassandra.service.StorageService.onDead(InetAddress,EndpointState)",1,1,1
"org.apache.cassandra.service.StorageService.onJoin(InetAddress,EndpointState)",1,2,2
"org.apache.cassandra.service.StorageService.onRemove(InetAddress)",1,1,1
"org.apache.cassandra.service.StorageService.onRestart(InetAddress,EndpointState)",1,2,2
"org.apache.cassandra.service.StorageService.reduceCacheSizes()",1,2,2
"org.apache.cassandra.service.StorageService.registerDaemon(CassandraDaemon)",1,1,1
"org.apache.cassandra.service.StorageService.removeToken(String)",8,6,12
"org.apache.cassandra.service.StorageService.requestGC()",2,2,3
"org.apache.cassandra.service.StorageService.requestRanges(Map<String, Multimap<InetAddress, Range>>)",3,6,6
"org.apache.cassandra.service.StorageService.restoreReplicaCount(InetAddress,InetAddress)",1,9,9
"org.apache.cassandra.service.StorageService.saveCaches()",1,2,2
"org.apache.cassandra.service.StorageService.scrub(String,String...)",1,2,2
"org.apache.cassandra.service.StorageService.sendReplicationNotification(InetAddress,InetAddress)",2,3,4
"org.apache.cassandra.service.StorageService.setCompactionThroughputMbPerSec(int)",1,1,1
"org.apache.cassandra.service.StorageService.setLog4jLevel(String,String)",1,1,1
"org.apache.cassandra.service.StorageService.setMode(String,boolean)",1,2,2
"org.apache.cassandra.service.StorageService.setPartitionerUnsafe(IPartitioner)",1,1,1
"org.apache.cassandra.service.StorageService.setToken(Token)",1,2,2
"org.apache.cassandra.service.StorageService.setTokenMetadataUnsafe(TokenMetadata)",1,1,1
"org.apache.cassandra.service.StorageService.startGossiping()",1,2,2
"org.apache.cassandra.service.StorageService.startLeaving()",1,1,1
"org.apache.cassandra.service.StorageService.startRPCServer()",2,1,2
"org.apache.cassandra.service.StorageService.stopClient()",1,1,2
"org.apache.cassandra.service.StorageService.stopGossiping()",1,2,2
"org.apache.cassandra.service.StorageService.stopRPCServer()",2,1,2
"org.apache.cassandra.service.StorageService.streamRanges(Map<String, Multimap<Range, InetAddress>>)",3,5,5
"org.apache.cassandra.service.StorageService.stringify(Iterable<InetAddress>)",1,2,2
"org.apache.cassandra.service.StorageService.takeSnapshot(String,String...)",4,6,8
"org.apache.cassandra.service.StorageService.truncate(String,String)",1,1,1
"org.apache.cassandra.service.StorageService.unbootstrap(Runnable)",1,3,4
"org.apache.cassandra.service.StorageService.updateEfficientCrossDCWriteMode()",3,2,3
"org.apache.cassandra.service.StorageService.updateSnitch(String,Boolean,Integer,Integer,Double)",1,4,4
"org.apache.cassandra.service.StorageService.useEfficientCrossDCWrites()",1,1,1
"org.apache.cassandra.service.TruncateResponseHandler.TruncateResponseHandler(int)",1,1,1
"org.apache.cassandra.service.TruncateResponseHandler.get()",2,2,3
"org.apache.cassandra.service.TruncateResponseHandler.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.TruncateResponseHandler.response(Message)",1,2,2
"org.apache.cassandra.service.WriteResponseHandler.WriteResponseHandler(Collection<InetAddress>,Multimap<InetAddress, InetAddress>,ConsistencyLevel,String)",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.WriteResponseHandler(InetAddress)",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.assureSufficientLiveNodes()",4,3,6
"org.apache.cassandra.service.WriteResponseHandler.create(Collection<InetAddress>,Multimap<InetAddress, InetAddress>,ConsistencyLevel,String)",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.create(InetAddress)",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.determineBlockFor(String)",8,4,8
"org.apache.cassandra.service.WriteResponseHandler.isLatencyForSnitch()",1,1,1
"org.apache.cassandra.service.WriteResponseHandler.response(Message)",1,2,2
"org.apache.cassandra.streaming.FileStreamTask.FileStreamTask(StreamHeader,InetAddress)",1,1,1
"org.apache.cassandra.streaming.FileStreamTask.bind()",1,1,1
"org.apache.cassandra.streaming.FileStreamTask.close()",1,1,1
"org.apache.cassandra.streaming.FileStreamTask.connect()",1,1,1
"org.apache.cassandra.streaming.FileStreamTask.connectAttempt()",3,3,5
"org.apache.cassandra.streaming.FileStreamTask.runMayThrow()",1,4,4
"org.apache.cassandra.streaming.FileStreamTask.stream()",2,4,5
"org.apache.cassandra.streaming.FileStreamTask.write(FileChannel,Pair<Long, Long>,long,long)",1,1,1
"org.apache.cassandra.streaming.FileStreamTask.writeHeader(ByteBuffer)",1,1,1
"org.apache.cassandra.streaming.IncomingStreamReader.IncomingStreamReader(StreamHeader,Socket)",1,2,2
"org.apache.cassandra.streaming.IncomingStreamReader.read()",1,2,2
"org.apache.cassandra.streaming.IncomingStreamReader.readFile()",1,5,5
"org.apache.cassandra.streaming.IncomingStreamReader.readnwrite(long,long,long,FileChannel)",2,1,2
"org.apache.cassandra.streaming.PendingFile.PendingFile(Descriptor,PendingFile)",1,1,1
"org.apache.cassandra.streaming.PendingFile.PendingFile(SSTable,Descriptor,String,List<Pair<Long, Long>>,OperationType)",1,1,2
"org.apache.cassandra.streaming.PendingFile.PendingFileSerializer.deserialize(DataInputStream,int)",2,3,4
"org.apache.cassandra.streaming.PendingFile.PendingFileSerializer.serialize(PendingFile,DataOutputStream,int)",2,4,4
"org.apache.cassandra.streaming.PendingFile.equals(Object)",2,1,2
"org.apache.cassandra.streaming.PendingFile.getFilename()",1,1,1
"org.apache.cassandra.streaming.PendingFile.hashCode()",1,1,1
"org.apache.cassandra.streaming.PendingFile.serializer()",1,1,1
"org.apache.cassandra.streaming.PendingFile.toString()",1,1,1
"org.apache.cassandra.streaming.ReplicationFinishedVerbHandler.doVerb(Message,String)",1,2,2
"org.apache.cassandra.streaming.StreamHeader.StreamHeader(String,long,PendingFile)",1,1,1
"org.apache.cassandra.streaming.StreamHeader.StreamHeader(String,long,PendingFile,Collection<PendingFile>)",1,1,1
"org.apache.cassandra.streaming.StreamHeader.StreamHeaderSerializer.deserialize(DataInputStream,int)",1,2,2
"org.apache.cassandra.streaming.StreamHeader.StreamHeaderSerializer.serialize(StreamHeader,DataOutputStream,int)",1,2,2
"org.apache.cassandra.streaming.StreamHeader.serializer()",1,1,1
"org.apache.cassandra.streaming.StreamIn.getContextMapping(PendingFile)",1,1,1
"org.apache.cassandra.streaming.StreamIn.requestRanges(InetAddress,String,Collection<Range>,Runnable,OperationType)",1,2,2
"org.apache.cassandra.streaming.StreamInSession.StreamInSession(Pair<InetAddress, Long>,Runnable)",1,1,1
"org.apache.cassandra.streaming.StreamInSession.addFiles(Collection<PendingFile>)",1,3,3
"org.apache.cassandra.streaming.StreamInSession.closeIfFinished()",4,7,10
"org.apache.cassandra.streaming.StreamInSession.create(InetAddress,Runnable)",1,1,1
"org.apache.cassandra.streaming.StreamInSession.finished(PendingFile,PendingFile)",1,2,3
"org.apache.cassandra.streaming.StreamInSession.get(InetAddress,long)",1,2,3
"org.apache.cassandra.streaming.StreamInSession.getHost()",1,1,1
"org.apache.cassandra.streaming.StreamInSession.getIncomingFiles(InetAddress)",1,4,4
"org.apache.cassandra.streaming.StreamInSession.getSessionId()",1,1,1
"org.apache.cassandra.streaming.StreamInSession.getSources()",1,2,2
"org.apache.cassandra.streaming.StreamInSession.retry(PendingFile)",1,1,1
"org.apache.cassandra.streaming.StreamInSession.setCurrentFile(PendingFile)",1,1,1
"org.apache.cassandra.streaming.StreamInSession.setTable(String)",1,1,1
"org.apache.cassandra.streaming.StreamOut.createPendingFiles(Collection<SSTableReader>,Collection<Range>,OperationType)",3,2,3
"org.apache.cassandra.streaming.StreamOut.flushSSTable(String)",2,2,4
"org.apache.cassandra.streaming.StreamOut.transferRanges(InetAddress,String,Collection<Range>,Runnable,OperationType)",1,1,2
"org.apache.cassandra.streaming.StreamOut.transferRangesForRequest(StreamOutSession,Collection<Range>,OperationType)",1,1,2
"org.apache.cassandra.streaming.StreamOut.transferSSTables(StreamOutSession,Collection<SSTableReader>,Collection<Range>,OperationType)",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.StreamOutSession(String,Pair<InetAddress, Long>,Runnable)",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.addFilesToStream(List<PendingFile>)",1,3,3
"org.apache.cassandra.streaming.StreamOutSession.await()",1,2,2
"org.apache.cassandra.streaming.StreamOutSession.begin()",1,3,3
"org.apache.cassandra.streaming.StreamOutSession.close()",1,2,2
"org.apache.cassandra.streaming.StreamOutSession.create(String,InetAddress,Runnable)",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.create(String,InetAddress,long)",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.create(String,InetAddress,long,Runnable)",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.get(InetAddress,long)",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.getDestinations()",1,2,2
"org.apache.cassandra.streaming.StreamOutSession.getFiles()",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.getHost()",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.getOutgoingFiles(InetAddress)",1,3,3
"org.apache.cassandra.streaming.StreamOutSession.getSessionId()",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.retry()",1,1,1
"org.apache.cassandra.streaming.StreamOutSession.startNext()",1,2,2
"org.apache.cassandra.streaming.StreamOutSession.streamFile(PendingFile)",1,2,2
"org.apache.cassandra.streaming.StreamOutSession.validateCurrentFile(String)",2,2,2
"org.apache.cassandra.streaming.StreamReply.FileStatusSerializer.deserialize(DataInputStream,int)",1,1,1
"org.apache.cassandra.streaming.StreamReply.FileStatusSerializer.serialize(StreamReply,DataOutputStream,int)",1,1,1
"org.apache.cassandra.streaming.StreamReply.StreamReply(String,long,Status)",1,1,1
"org.apache.cassandra.streaming.StreamReply.getMessage(Integer)",1,1,1
"org.apache.cassandra.streaming.StreamReply.toString()",1,1,1
"org.apache.cassandra.streaming.StreamReplyVerbHandler.doVerb(Message,String)",3,3,7
"org.apache.cassandra.streaming.StreamRequestMessage.StreamRequestMessage(InetAddress,Collection<Range>,String,long,OperationType)",1,1,1
"org.apache.cassandra.streaming.StreamRequestMessage.StreamRequestMessage(InetAddress,PendingFile,long)",1,1,1
"org.apache.cassandra.streaming.StreamRequestMessage.StreamRequestMessageSerializer.deserialize(DataInputStream,int)",2,4,5
"org.apache.cassandra.streaming.StreamRequestMessage.StreamRequestMessageSerializer.serialize(StreamRequestMessage,DataOutputStream,int)",1,4,4
"org.apache.cassandra.streaming.StreamRequestMessage.getMessage(Integer)",1,1,2
"org.apache.cassandra.streaming.StreamRequestMessage.serializer()",1,1,1
"org.apache.cassandra.streaming.StreamRequestMessage.toString()",1,3,3
"org.apache.cassandra.streaming.StreamRequestVerbHandler.doVerb(Message,String)",1,3,4
"org.apache.cassandra.streaming.StreamingService.StreamingService()",1,1,2
"org.apache.cassandra.streaming.StreamingService.getIncomingFiles(String)",1,2,2
"org.apache.cassandra.streaming.StreamingService.getOutgoingFiles(String)",2,2,3
"org.apache.cassandra.streaming.StreamingService.getStatus()",1,5,5
"org.apache.cassandra.streaming.StreamingService.getStreamDestinations()",1,1,1
"org.apache.cassandra.streaming.StreamingService.getStreamSources()",1,1,1
"org.apache.cassandra.thrift.CassandraDaemon.ThriftServer.ThriftServer(InetAddress,int)",2,6,6
"org.apache.cassandra.thrift.CassandraDaemon.ThriftServer.run()",1,1,1
"org.apache.cassandra.thrift.CassandraDaemon.ThriftServer.stopServer()",1,1,1
"org.apache.cassandra.thrift.CassandraDaemon.main(String[])",1,1,1
"org.apache.cassandra.thrift.CassandraDaemon.startServer()",1,2,2
"org.apache.cassandra.thrift.CassandraDaemon.stopServer()",1,3,3
"org.apache.cassandra.thrift.CassandraServer.CassandraServer()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel)",2,2,4
"org.apache.cassandra.thrift.CassandraServer.applyMigrationOnStage(Migration)",1,1,3
"org.apache.cassandra.thrift.CassandraServer.batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>>,ConsistencyLevel)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_cluster_name()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_keyspace(String)",2,1,2
"org.apache.cassandra.thrift.CassandraServer.describe_keyspaces()",1,3,3
"org.apache.cassandra.thrift.CassandraServer.describe_partitioner()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_ring(String)",2,4,5
"org.apache.cassandra.thrift.CassandraServer.describe_schema_versions()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_snitch()",2,2,2
"org.apache.cassandra.thrift.CassandraServer.describe_splits(String,String,String,int)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.describe_version()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.doInsert(ConsistencyLevel,List<? extends IMutation>)",1,2,3
"org.apache.cassandra.thrift.CassandraServer.execute_cql_query(ByteBuffer,Compression)",4,8,12
"org.apache.cassandra.thrift.CassandraServer.get(ByteBuffer,ColumnPath,ConsistencyLevel)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.getSlice(List<ReadCommand>,ConsistencyLevel)",1,2,3
"org.apache.cassandra.thrift.CassandraServer.get_count(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.get_indexed_slices(ColumnParent,IndexClause,SlicePredicate,ConsistencyLevel)",1,1,3
"org.apache.cassandra.thrift.CassandraServer.get_range_slices(ColumnParent,SlicePredicate,KeyRange,ConsistencyLevel)",1,2,4
"org.apache.cassandra.thrift.CassandraServer.get_slice(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.internal_batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>>,ConsistencyLevel)",1,12,14
"org.apache.cassandra.thrift.CassandraServer.internal_get(ByteBuffer,ColumnPath,ConsistencyLevel)",3,1,5
"org.apache.cassandra.thrift.CassandraServer.internal_insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel)",2,2,4
"org.apache.cassandra.thrift.CassandraServer.internal_remove(ByteBuffer,ColumnPath,long,ConsistencyLevel,boolean)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.login(AuthenticationRequest)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.multigetSliceInternal(String,List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel)",1,4,4
"org.apache.cassandra.thrift.CassandraServer.multiget_count(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel)",1,2,2
"org.apache.cassandra.thrift.CassandraServer.multiget_slice(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.readColumnFamily(List<ReadCommand>,ConsistencyLevel)",2,2,5
"org.apache.cassandra.thrift.CassandraServer.release()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.remove(ByteBuffer,ColumnPath,long,ConsistencyLevel)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.schedule()",1,1,1
"org.apache.cassandra.thrift.CassandraServer.set_keyspace(String)",1,1,1
"org.apache.cassandra.thrift.CassandraServer.state()",1,3,3
"org.apache.cassandra.thrift.CassandraServer.system_add_column_family(CfDef)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.system_add_keyspace(KsDef)",3,6,6
"org.apache.cassandra.thrift.CassandraServer.system_drop_column_family(String)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.system_drop_keyspace(String)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.system_update_column_family(CfDef)",3,3,6
"org.apache.cassandra.thrift.CassandraServer.system_update_keyspace(KsDef)",2,4,5
"org.apache.cassandra.thrift.CassandraServer.thriftifyColumnFamily(ColumnFamily,boolean,boolean)",5,6,7
"org.apache.cassandra.thrift.CassandraServer.thriftifyColumns(Collection<IColumn>,boolean)",3,5,6
"org.apache.cassandra.thrift.CassandraServer.thriftifyCounterSubColumns(Collection<IColumn>)",4,3,5
"org.apache.cassandra.thrift.CassandraServer.thriftifyCounterSuperColumns(Collection<IColumn>,boolean)",3,3,4
"org.apache.cassandra.thrift.CassandraServer.thriftifyKeySlices(List<Row>,ColumnParent,SlicePredicate)",1,2,3
"org.apache.cassandra.thrift.CassandraServer.thriftifySubColumns(Collection<IColumn>)",4,4,6
"org.apache.cassandra.thrift.CassandraServer.thriftifySuperColumns(Collection<IColumn>,boolean)",3,3,4
"org.apache.cassandra.thrift.CassandraServer.thriftifySuperColumns(Collection<IColumn>,boolean,boolean)",2,2,2
"org.apache.cassandra.thrift.CassandraServer.truncate(String)",1,3,3
"org.apache.cassandra.thrift.CassandraServer.validateSchemaAgreement()",2,1,2
"org.apache.cassandra.thrift.CustomTHsHaServer.CustomTHsHaServer(Args,ExecutorService,int)",1,2,2
"org.apache.cassandra.thrift.CustomTHsHaServer.Invocation.Invocation(FrameBuffer,SelectorThread)",1,1,1
"org.apache.cassandra.thrift.CustomTHsHaServer.Invocation.run()",1,1,1
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.SelectorThread(String)",1,1,2
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.cleanupSelectionkey(SelectionKey)",1,2,2
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.handleAccept()",1,4,5
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.handleRead(SelectionKey)",2,4,4
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.handleWrite(SelectionKey)",1,2,2
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.processInterestChanges()",1,2,2
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.requestSelectInterestChange(FrameBuffer)",1,1,1
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.run()",1,3,3
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.select()",3,6,6
"org.apache.cassandra.thrift.CustomTHsHaServer.SelectorThread.wakeupSelector()",1,1,1
"org.apache.cassandra.thrift.CustomTHsHaServer.joinSelector()",1,3,3
"org.apache.cassandra.thrift.CustomTHsHaServer.requestInvoke(FrameBuffer,SelectorThread)",1,2,2
"org.apache.cassandra.thrift.CustomTHsHaServer.requestSelectInterestChange(FrameBuffer)",1,1,1
"org.apache.cassandra.thrift.CustomTHsHaServer.serve()",3,1,3
"org.apache.cassandra.thrift.CustomTHsHaServer.startThreads()",1,2,2
"org.apache.cassandra.thrift.CustomTHsHaServer.stop()",1,2,2
"org.apache.cassandra.thrift.CustomTNonBlockingServer.CustomTNonBlockingServer(Args)",1,1,1
"org.apache.cassandra.thrift.CustomTNonBlockingServer.requestInvoke(FrameBuffer)",1,1,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.CustomTThreadPoolServer(Args,ExecutorService)",1,1,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.WorkerProcess.WorkerProcess(TTransport)",1,1,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.WorkerProcess.run()",1,8,8
"org.apache.cassandra.thrift.CustomTThreadPoolServer.serve()",4,9,10
"org.apache.cassandra.thrift.CustomTThreadPoolServer.stop()",1,1,1
"org.apache.cassandra.thrift.TBinaryProtocol.Factory.Factory()",1,1,1
"org.apache.cassandra.thrift.TBinaryProtocol.Factory.Factory(boolean,boolean)",1,1,1
"org.apache.cassandra.thrift.TBinaryProtocol.Factory.Factory(boolean,boolean,int)",1,1,1
"org.apache.cassandra.thrift.TBinaryProtocol.Factory.getProtocol(TTransport)",1,2,2
"org.apache.cassandra.thrift.TBinaryProtocol.TBinaryProtocol(TTransport)",1,1,1
"org.apache.cassandra.thrift.TBinaryProtocol.TBinaryProtocol(TTransport,boolean,boolean)",1,1,1
"org.apache.cassandra.thrift.TBinaryProtocol.writeBinary(ByteBuffer)",1,3,3
"org.apache.cassandra.thrift.TCustomNonblockingServerSocket.TCustomNonblockingServerSocket(InetSocketAddress,boolean,Integer,Integer)",1,1,1
"org.apache.cassandra.thrift.TCustomNonblockingServerSocket.acceptImpl()",2,7,8
"org.apache.cassandra.thrift.TCustomServerSocket.TCustomServerSocket(InetSocketAddress,boolean,Integer,Integer)",1,1,1
"org.apache.cassandra.thrift.TCustomServerSocket.acceptImpl()",1,6,6
"org.apache.cassandra.thrift.ThriftValidation.summarize(ByteBuffer)",2,1,2
"org.apache.cassandra.thrift.ThriftValidation.validateCfDef(CfDef,CFMetaData)",17,16,27
"org.apache.cassandra.thrift.ThriftValidation.validateColumnData(CFMetaData,Column,boolean)",4,7,10
"org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily(String,String)",3,1,3
"org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily(String,String,boolean)",4,2,4
"org.apache.cassandra.thrift.ThriftValidation.validateColumnNames(CFMetaData,ByteBuffer,Iterable<ByteBuffer>)",8,4,9
"org.apache.cassandra.thrift.ThriftValidation.validateColumnNames(CFMetaData,ColumnParent,Iterable<ByteBuffer>)",1,1,1
"org.apache.cassandra.thrift.ThriftValidation.validateColumnOrSuperColumn(CFMetaData,ColumnOrSuperColumn)",10,7,16
"org.apache.cassandra.thrift.ThriftValidation.validateColumnParent(CFMetaData,ColumnParent)",3,2,4
"org.apache.cassandra.thrift.ThriftValidation.validateColumnPath(CFMetaData,ColumnPath)",5,3,7
"org.apache.cassandra.thrift.ThriftValidation.validateColumnPathOrParent(CFMetaData,ColumnPath)",5,3,8
"org.apache.cassandra.thrift.ThriftValidation.validateCommutativeForWrite(CFMetaData,ConsistencyLevel)",3,3,4
"org.apache.cassandra.thrift.ThriftValidation.validateConsistencyLevel(String,ConsistencyLevel)",3,3,3
"org.apache.cassandra.thrift.ThriftValidation.validateDeletion(CFMetaData,Deletion)",6,5,8
"org.apache.cassandra.thrift.ThriftValidation.validateIndexClauses(CFMetaData,IndexClause)",4,5,7
"org.apache.cassandra.thrift.ThriftValidation.validateKey(CFMetaData,ByteBuffer)",3,4,5
"org.apache.cassandra.thrift.ThriftValidation.validateKeyRange(KeyRange)",8,3,9
"org.apache.cassandra.thrift.ThriftValidation.validateKeyspaceNotYetExisting(String)",3,2,3
"org.apache.cassandra.thrift.ThriftValidation.validateKsDef(KsDef)",2,1,2
"org.apache.cassandra.thrift.ThriftValidation.validateMemtableSettings(CfDef)",1,4,4
"org.apache.cassandra.thrift.ThriftValidation.validateMinMaxCompactionThresholds(CfDef)",7,5,10
"org.apache.cassandra.thrift.ThriftValidation.validateMutation(CFMetaData,Mutation)",2,2,5
"org.apache.cassandra.thrift.ThriftValidation.validatePredicate(CFMetaData,ColumnParent,SlicePredicate)",3,2,6
"org.apache.cassandra.thrift.ThriftValidation.validateRange(CFMetaData,ColumnParent,SliceRange)",3,4,7
"org.apache.cassandra.thrift.ThriftValidation.validateSlicePredicate(CFMetaData,ByteBuffer,SlicePredicate)",2,3,5
"org.apache.cassandra.thrift.ThriftValidation.validateTable(String)",2,1,2
"org.apache.cassandra.thrift.ThriftValidation.validateTtl(Column)",2,3,4
"org.apache.cassandra.tools.BulkLoader.CmdLineOptions.addOption(String,String,String)",1,1,1
"org.apache.cassandra.tools.BulkLoader.CmdLineOptions.addOption(String,String,String,String)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ExternalClient.ExternalClient(OutputHandler)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ExternalClient.createThriftClient(String,int)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ExternalClient.init(String)",2,5,8
"org.apache.cassandra.tools.BulkLoader.ExternalClient.stop()",1,1,1
"org.apache.cassandra.tools.BulkLoader.ExternalClient.validateColumnFamily(String,String)",1,2,2
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.LoaderOptions(File)",1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.debug(String)",1,2,2
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.errorMsg(String,CmdLineOptions)",1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.getCmdLineOptions()",1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.output(String)",1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.parseArgs(String[])",1,10,10
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.printUsage(Options)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.ProgressIndicator(Map<InetAddress, Collection<PendingFile>>)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.mbPerSec(long,long)",1,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.printProgress()",1,2,7
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.start()",1,1,1
"org.apache.cassandra.tools.BulkLoader.main(String[])",1,6,7
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.ColumnFamilyStoreMBeanIterator(MBeanServerConnection)",1,1,1
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.hasNext()",1,1,1
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.next()",1,1,1
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.remove()",1,1,1
"org.apache.cassandra.tools.GetVersion.main(String[])",1,1,1
"org.apache.cassandra.tools.NodeCmd.NodeCmd(NodeProbe)",1,1,1
"org.apache.cassandra.tools.NodeCmd.ToolCommandLine.ToolCommandLine(CommandLine)",1,1,1
"org.apache.cassandra.tools.NodeCmd.ToolCommandLine.getCommand()",2,1,3
"org.apache.cassandra.tools.NodeCmd.ToolCommandLine.getCommandArguments()",2,2,3
"org.apache.cassandra.tools.NodeCmd.ToolCommandLine.getOptionValue(String)",1,1,1
"org.apache.cassandra.tools.NodeCmd.ToolCommandLine.getOptions()",1,1,1
"org.apache.cassandra.tools.NodeCmd.ToolCommandLine.hasOption(String)",1,1,1
"org.apache.cassandra.tools.NodeCmd.ToolOptions.addOption(Pair<String, String>,boolean,String)",1,1,1
"org.apache.cassandra.tools.NodeCmd.ToolOptions.addOption(Pair<String, String>,boolean,String,boolean)",1,1,1
"org.apache.cassandra.tools.NodeCmd.ToolOptions.addOption(String,String,boolean,String,boolean)",1,1,1
"org.apache.cassandra.tools.NodeCmd.addCmdHelp(StringBuilder,String,String)",1,3,3
"org.apache.cassandra.tools.NodeCmd.badUse(String)",1,1,1
"org.apache.cassandra.tools.NodeCmd.complainNonzeroArgs(String[],NodeCommand)",1,2,2
"org.apache.cassandra.tools.NodeCmd.err(Exception,String)",1,1,1
"org.apache.cassandra.tools.NodeCmd.handleSnapshots(NodeCommand,String,String[],NodeProbe)",2,6,7
"org.apache.cassandra.tools.NodeCmd.main(String[])",3,23,53
"org.apache.cassandra.tools.NodeCmd.optionalKSandCFs(NodeCommand,String[],NodeProbe)",3,11,19
"org.apache.cassandra.tools.NodeCmd.printCfHistograms(String,String,PrintStream)",1,2,7
"org.apache.cassandra.tools.NodeCmd.printColumnFamilyStats(PrintStream)",1,10,12
"org.apache.cassandra.tools.NodeCmd.printCompactionStats(PrintStream)",1,4,4
"org.apache.cassandra.tools.NodeCmd.printEndPoints(String,String,String,PrintStream)",1,2,2
"org.apache.cassandra.tools.NodeCmd.printInfo(PrintStream)",1,2,2
"org.apache.cassandra.tools.NodeCmd.printIsThriftServerRunning(PrintStream)",1,1,2
"org.apache.cassandra.tools.NodeCmd.printNetworkStats(InetAddress,PrintStream)",1,13,17
"org.apache.cassandra.tools.NodeCmd.printReleaseVersion(PrintStream)",1,1,1
"org.apache.cassandra.tools.NodeCmd.printRemovalStatus(PrintStream)",1,1,1
"org.apache.cassandra.tools.NodeCmd.printRing(PrintStream)",1,7,11
"org.apache.cassandra.tools.NodeCmd.printThreadPoolStats(PrintStream)",1,3,3
"org.apache.cassandra.tools.NodeCmd.printUsage()",1,1,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String,int)",1,1,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String,int,String,String)",1,4,4
"org.apache.cassandra.tools.NodeProbe.clearSnapshot(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.close()",1,1,1
"org.apache.cassandra.tools.NodeProbe.connect()",1,2,3
"org.apache.cassandra.tools.NodeProbe.decommission()",1,1,1
"org.apache.cassandra.tools.NodeProbe.drain()",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceRemoveCompletion()",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceTableCleanup(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceTableCompaction(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceTableFlush(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.forceTableRepair(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.getCfsProxy(String,String)",1,2,2
"org.apache.cassandra.tools.NodeProbe.getColumnFamilyStoreMBeanProxies()",1,1,3
"org.apache.cassandra.tools.NodeProbe.getCompactionManagerProxy()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getCompactionThreshold(PrintStream,String,String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.getCurrentGenerationNumber()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getDataCenter()",1,1,2
"org.apache.cassandra.tools.NodeProbe.getDroppedMessages()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getEndpointSnitchInfoProxy()",1,1,2
"org.apache.cassandra.tools.NodeProbe.getEndpoints(String,String,String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.getExceptionCount()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getFilesDestinedFor(InetAddress)",1,1,1
"org.apache.cassandra.tools.NodeProbe.getHeapMemoryUsage()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getIncomingFiles(InetAddress)",1,1,1
"org.apache.cassandra.tools.NodeProbe.getJoiningNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getKeyCacheMBean(String,String)",1,1,2
"org.apache.cassandra.tools.NodeProbe.getKeyspaces()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLeavingNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLiveNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLoadMap()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getLoadString()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getMovingNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getOperationMode()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getOwnership()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getRack()",1,1,2
"org.apache.cassandra.tools.NodeProbe.getReleaseVersion()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getRemovalStatus()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getRowCacheMBean(String,String)",1,1,2
"org.apache.cassandra.tools.NodeProbe.getStreamDestinations()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getStreamSources()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getThreadPoolMBeanProxies()",1,1,3
"org.apache.cassandra.tools.NodeProbe.getToken()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getTokenToEndpointMap()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getUnreachableNodes()",1,1,1
"org.apache.cassandra.tools.NodeProbe.getUptime()",1,1,1
"org.apache.cassandra.tools.NodeProbe.invalidateKeyCaches(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.invalidateRowCaches(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.isInitialized()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isJoined()",1,1,1
"org.apache.cassandra.tools.NodeProbe.isThriftServerRunning()",1,1,1
"org.apache.cassandra.tools.NodeProbe.joinRing()",1,1,1
"org.apache.cassandra.tools.NodeProbe.loadNewSSTables(String,String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.move(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.removeToken(String)",1,1,1
"org.apache.cassandra.tools.NodeProbe.scrub(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.setCacheCapacities(String,String,int,int)",1,1,2
"org.apache.cassandra.tools.NodeProbe.setCompactionThreshold(String,String,int,int)",1,1,1
"org.apache.cassandra.tools.NodeProbe.setCompactionThroughput(int)",1,1,1
"org.apache.cassandra.tools.NodeProbe.startGossiping()",1,1,1
"org.apache.cassandra.tools.NodeProbe.startThriftServer()",1,1,1
"org.apache.cassandra.tools.NodeProbe.stopGossiping()",1,1,1
"org.apache.cassandra.tools.NodeProbe.stopThriftServer()",1,1,1
"org.apache.cassandra.tools.NodeProbe.takeSnapshot(String,String...)",1,1,1
"org.apache.cassandra.tools.NodeProbe.truncate(String,String)",1,1,4
"org.apache.cassandra.tools.SSTableExport.enumeratekeys(String,PrintStream)",3,3,4
"org.apache.cassandra.tools.SSTableExport.export(SSTableReader,PrintStream,String[])",3,5,5
"org.apache.cassandra.tools.SSTableExport.export(String,PrintStream,Collection<String>,String[])",5,5,8
"org.apache.cassandra.tools.SSTableExport.export(String,PrintStream,String[])",1,2,2
"org.apache.cassandra.tools.SSTableExport.export(String,String[])",1,1,1
"org.apache.cassandra.tools.SSTableExport.main(String[])",2,6,7
"org.apache.cassandra.tools.SSTableExport.serializeColumn(IColumn,AbstractType,CFMetaData)",1,4,4
"org.apache.cassandra.tools.SSTableExport.serializeColumns(Iterator<IColumn>,PrintStream,AbstractType,CFMetaData)",1,3,3
"org.apache.cassandra.tools.SSTableExport.serializeRow(SSTableIdentityIterator,DecoratedKey,PrintStream)",1,4,6
"org.apache.cassandra.tools.SSTableExport.writeJSON(PrintStream,Object)",1,2,2
"org.apache.cassandra.tools.SSTableExport.writeKey(PrintStream,String)",1,1,1
"org.apache.cassandra.tools.SSTableImport.JsonColumn.JsonColumn(T,CFMetaData,boolean)",1,7,9
"org.apache.cassandra.tools.SSTableImport.JsonColumn.getName()",1,1,1
"org.apache.cassandra.tools.SSTableImport.JsonColumn.getValue()",1,1,1
"org.apache.cassandra.tools.SSTableImport.JsonColumn.isCounter()",1,1,1
"org.apache.cassandra.tools.SSTableImport.JsonColumn.isDeleted()",1,1,1
"org.apache.cassandra.tools.SSTableImport.JsonColumn.isExpiring()",1,1,1
"org.apache.cassandra.tools.SSTableImport.addColumnsToCF(List<?>,ByteBuffer,ColumnFamily)",1,5,5
"org.apache.cassandra.tools.SSTableImport.addToStandardCF(List<?>,ColumnFamily)",1,1,1
"org.apache.cassandra.tools.SSTableImport.addToSuperCF(Map<?, ?>,ColumnFamily)",1,2,2
"org.apache.cassandra.tools.SSTableImport.getParser(String)",1,1,1
"org.apache.cassandra.tools.SSTableImport.importJson(String,String,String,String)",1,3,3
"org.apache.cassandra.tools.SSTableImport.importSorted(String,ColumnFamily,String,IPartitioner<?>)",12,10,14
"org.apache.cassandra.tools.SSTableImport.importUnsorted(JsonParser,ColumnFamily,String,IPartitioner<?>)",3,6,7
"org.apache.cassandra.tools.SSTableImport.main(String[])",2,6,7
"org.apache.cassandra.tools.SSTableImport.printProgramUsage()",1,2,2
"org.apache.cassandra.tools.SSTableImport.setKeyCountToImport(Integer)",1,1,1
"org.apache.cassandra.tools.SSTableImport.stringAsType(String,AbstractType)",1,3,3
"org.apache.cassandra.tools.ThreadPoolProxyMBeanIterator.ThreadPoolProxyMBeanIterator(MBeanServerConnection)",1,1,1
"org.apache.cassandra.tools.ThreadPoolProxyMBeanIterator.hasNext()",1,1,1
"org.apache.cassandra.tools.ThreadPoolProxyMBeanIterator.next()",1,1,1
"org.apache.cassandra.tools.ThreadPoolProxyMBeanIterator.remove()",1,1,1
"org.apache.cassandra.utils.AbstractStatsDeque.mean()",1,1,1
"org.apache.cassandra.utils.AbstractStatsDeque.stdev()",1,1,1
"org.apache.cassandra.utils.AbstractStatsDeque.sum()",1,1,2
"org.apache.cassandra.utils.AbstractStatsDeque.sumOfDeviations()",1,1,2
"org.apache.cassandra.utils.AbstractStatsDeque.variance()",1,1,1
"org.apache.cassandra.utils.BloomCalculations.BloomSpecification.BloomSpecification(int,int)",1,1,1
"org.apache.cassandra.utils.BloomCalculations.BloomSpecification.toString()",1,1,1
"org.apache.cassandra.utils.BloomCalculations.computeBloomSpec(int)",1,1,1
"org.apache.cassandra.utils.BloomCalculations.computeBloomSpec(int,double)",3,2,5
"org.apache.cassandra.utils.BloomCalculations.maxBucketsPerElement(long)",2,1,2
"org.apache.cassandra.utils.BloomFilter.BloomFilter(int,OpenBitSet)",1,1,1
"org.apache.cassandra.utils.BloomFilter.add(ByteBuffer)",1,2,2
"org.apache.cassandra.utils.BloomFilter.buckets()",1,1,1
"org.apache.cassandra.utils.BloomFilter.bucketsFor(long,int)",1,1,1
"org.apache.cassandra.utils.BloomFilter.clear()",1,1,1
"org.apache.cassandra.utils.BloomFilter.emptyFilter()",1,1,1
"org.apache.cassandra.utils.BloomFilter.getFilter(long,double)",1,1,1
"org.apache.cassandra.utils.BloomFilter.getFilter(long,int)",1,3,3
"org.apache.cassandra.utils.BloomFilter.getHashBuckets(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.BloomFilter.getHashBuckets(ByteBuffer,int,long)",1,2,2
"org.apache.cassandra.utils.BloomFilter.isPresent(ByteBuffer)",3,2,3
"org.apache.cassandra.utils.BloomFilter.serializer()",1,1,1
"org.apache.cassandra.utils.BloomFilterSerializer.deserialize(DataInput)",1,2,2
"org.apache.cassandra.utils.BloomFilterSerializer.serialize(BloomFilter,DataOutput)",1,2,2
"org.apache.cassandra.utils.BoundedStatsDeque.BoundedStatsDeque(int)",1,1,1
"org.apache.cassandra.utils.BoundedStatsDeque.add(double)",1,2,2
"org.apache.cassandra.utils.BoundedStatsDeque.clear()",1,1,1
"org.apache.cassandra.utils.BoundedStatsDeque.iterator()",1,1,1
"org.apache.cassandra.utils.BoundedStatsDeque.size()",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.arrayCopy(ByteBuffer,int,ByteBuffer,int,int)",3,5,6
"org.apache.cassandra.utils.ByteBufferUtil.arrayCopy(ByteBuffer,int,byte[],int,int)",1,2,2
"org.apache.cassandra.utils.ByteBufferUtil.bytes(String)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(String,Charset)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(double)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(float)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(long)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytesToHex(ByteBuffer)",1,2,2
"org.apache.cassandra.utils.ByteBufferUtil.clone(ByteBuffer)",2,2,3
"org.apache.cassandra.utils.ByteBufferUtil.compare(ByteBuffer,byte[])",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.compare(byte[],ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.compareSubArrays(ByteBuffer,int,ByteBuffer,int,int)",6,2,7
"org.apache.cassandra.utils.ByteBufferUtil.compareUnsigned(ByteBuffer,ByteBuffer)",3,3,6
"org.apache.cassandra.utils.ByteBufferUtil.getArray(ByteBuffer)",3,5,5
"org.apache.cassandra.utils.ByteBufferUtil.hexToBytes(String)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.inputStream(ByteBuffer)",3,1,3
"org.apache.cassandra.utils.ByteBufferUtil.lastIndexOf(ByteBuffer,byte,int)",4,4,5
"org.apache.cassandra.utils.ByteBufferUtil.read(DataInput,int)",1,2,2
"org.apache.cassandra.utils.ByteBufferUtil.readShortLength(DataInput)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readWithLength(DataInput)",2,1,2
"org.apache.cassandra.utils.ByteBufferUtil.readWithShortLength(DataInput)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.skipShortLength(DataInput)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,Charset)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,int,int)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,int,int,Charset)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toDouble(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toFloat(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toInt(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toLong(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.write(ByteBuffer,DataOutput)",1,3,3
"org.apache.cassandra.utils.ByteBufferUtil.writeWithLength(ByteBuffer,DataOutput)",1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.writeWithShortLength(ByteBuffer,DataOutput)",1,1,3
"org.apache.cassandra.utils.CLibrary.CLibrary()",1,1,1
"org.apache.cassandra.utils.CLibrary.createHardLink(File,File)",2,3,4
"org.apache.cassandra.utils.CLibrary.createHardLinkWithExec(File,File)",1,3,4
"org.apache.cassandra.utils.CLibrary.errno(RuntimeException)",1,2,2
"org.apache.cassandra.utils.CLibrary.fcntl(int,int,long)",1,1,1
"org.apache.cassandra.utils.CLibrary.getfd(FileDescriptor)",2,2,3
"org.apache.cassandra.utils.CLibrary.link(String,String)",1,1,1
"org.apache.cassandra.utils.CLibrary.mlockall(int)",1,1,1
"org.apache.cassandra.utils.CLibrary.munlockall()",1,1,1
"org.apache.cassandra.utils.CLibrary.posix_fadvise(int,int,int,int)",1,1,1
"org.apache.cassandra.utils.CLibrary.tryFcntl(int,int,int)",2,2,3
"org.apache.cassandra.utils.CLibrary.tryMlockall()",2,5,7
"org.apache.cassandra.utils.CLibrary.trySkipCache(int,int,int)",2,3,5
"org.apache.cassandra.utils.DefaultDouble.DefaultDouble(double)",1,1,1
"org.apache.cassandra.utils.DefaultDouble.isModified()",1,1,1
"org.apache.cassandra.utils.DefaultDouble.set(double)",1,1,1
"org.apache.cassandra.utils.DefaultDouble.value()",1,1,1
"org.apache.cassandra.utils.DefaultInteger.DefaultInteger(int)",1,1,1
"org.apache.cassandra.utils.DefaultInteger.isModified()",1,1,1
"org.apache.cassandra.utils.DefaultInteger.set(int)",1,1,1
"org.apache.cassandra.utils.DefaultInteger.value()",1,1,1
"org.apache.cassandra.utils.DestructivePQIterator.DestructivePQIterator(PriorityQueue<T>)",1,1,1
"org.apache.cassandra.utils.DestructivePQIterator.hasNext()",1,1,1
"org.apache.cassandra.utils.DestructivePQIterator.next()",1,1,1
"org.apache.cassandra.utils.DestructivePQIterator.remove()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram(int)",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram(long[],long[])",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer.deserialize(DataInput)",1,2,3
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer.serialize(EstimatedHistogram,DataOutput)",1,2,3
"org.apache.cassandra.utils.EstimatedHistogram.add(long)",1,1,2
"org.apache.cassandra.utils.EstimatedHistogram.get(int)",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.getBucketOffsets()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.getBuckets(boolean)",1,4,4
"org.apache.cassandra.utils.EstimatedHistogram.isOverflowed()",1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.makeOffsets(int)",1,2,3
"org.apache.cassandra.utils.EstimatedHistogram.max()",4,2,4
"org.apache.cassandra.utils.EstimatedHistogram.mean()",2,2,3
"org.apache.cassandra.utils.EstimatedHistogram.min()",3,2,4
"org.apache.cassandra.utils.ExpiringMap.CacheMonitor.run()",1,4,4
"org.apache.cassandra.utils.ExpiringMap.CacheableObject.CacheableObject(T,long)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.CacheableObject.getValue()",1,1,1
"org.apache.cassandra.utils.ExpiringMap.CacheableObject.isReadyToDie(long)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.ExpiringMap(long)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.ExpiringMap(long,Function<Pair<K, V>, ?>)",2,1,2
"org.apache.cassandra.utils.ExpiringMap.containsKey(K)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.get(K)",1,2,2
"org.apache.cassandra.utils.ExpiringMap.getAge(K)",1,1,2
"org.apache.cassandra.utils.ExpiringMap.isEmpty()",1,1,1
"org.apache.cassandra.utils.ExpiringMap.keySet()",1,1,1
"org.apache.cassandra.utils.ExpiringMap.put(K,V)",1,1,1
"org.apache.cassandra.utils.ExpiringMap.put(K,V,long)",1,2,2
"org.apache.cassandra.utils.ExpiringMap.remove(K)",1,2,2
"org.apache.cassandra.utils.ExpiringMap.shutdown()",1,1,1
"org.apache.cassandra.utils.ExpiringMap.size()",1,1,1
"org.apache.cassandra.utils.FBUtilities.absoluteFromFraction(double,long)",3,2,5
"org.apache.cassandra.utils.FBUtilities.atomicSetMax(AtomicInteger,int)",3,3,4
"org.apache.cassandra.utils.FBUtilities.atomicSetMax(AtomicLong,long)",3,3,4
"org.apache.cassandra.utils.FBUtilities.bytesToHex(byte...)",1,1,2
"org.apache.cassandra.utils.FBUtilities.classForName(String,String)",1,2,2
"org.apache.cassandra.utils.FBUtilities.compareUnsigned(byte[],byte[],int,int,int,int)",6,1,9
"org.apache.cassandra.utils.FBUtilities.construct(String,String)",2,6,6
"org.apache.cassandra.utils.FBUtilities.copyIntoBytes(byte[],int,int)",1,1,1
"org.apache.cassandra.utils.FBUtilities.copyIntoBytes(byte[],int,long)",1,1,1
"org.apache.cassandra.utils.FBUtilities.deserialize(TDeserializer,TBase,DataInput)",1,1,2
"org.apache.cassandra.utils.FBUtilities.encodedUTF8Length(String)",1,2,5
"org.apache.cassandra.utils.FBUtilities.getCollatingIterator()",1,1,1
"org.apache.cassandra.utils.FBUtilities.getLocalAddress()",2,3,4
"org.apache.cassandra.utils.FBUtilities.getProtectedConstructor(Class,Class...)",1,1,2
"org.apache.cassandra.utils.FBUtilities.getProtectedField(Class,String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.getReleaseVersionString()",2,2,3
"org.apache.cassandra.utils.FBUtilities.hash(ByteBuffer...)",1,2,2
"org.apache.cassandra.utils.FBUtilities.hashToBigInteger(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.FBUtilities.hexToBytes(String)",1,2,3
"org.apache.cassandra.utils.FBUtilities.midpoint(BigInteger,BigInteger,int)",1,2,2
"org.apache.cassandra.utils.FBUtilities.newCacheProvider(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.newMessageDigest(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.newPartitioner(String)",1,1,2
"org.apache.cassandra.utils.FBUtilities.parseDoubleOrPercent(String)",2,2,2
"org.apache.cassandra.utils.FBUtilities.renameWithConfirm(String,String)",2,1,2
"org.apache.cassandra.utils.FBUtilities.resourceToFile(String)",2,1,2
"org.apache.cassandra.utils.FBUtilities.serialize(TSerializer,TBase,DataOutput)",1,1,2
"org.apache.cassandra.utils.FBUtilities.singleton(T)",1,1,1
"org.apache.cassandra.utils.FBUtilities.sortSampledKeys(List<DecoratedKey>,Range)",2,6,6
"org.apache.cassandra.utils.FBUtilities.threadLocalMD5Digest()",1,1,1
"org.apache.cassandra.utils.FBUtilities.threadLocalRandom()",1,1,1
"org.apache.cassandra.utils.FBUtilities.timestampMicros()",1,1,1
"org.apache.cassandra.utils.FBUtilities.toByteArray(int)",1,1,1
"org.apache.cassandra.utils.FBUtilities.toByteArray(long)",1,1,1
"org.apache.cassandra.utils.FBUtilities.toString(Map<?, ?>)",1,1,1
"org.apache.cassandra.utils.FBUtilities.waitOnFutures(Iterable<Future<?>>)",2,2,4
"org.apache.cassandra.utils.FBUtilities.wrapCharArray(char[])",2,2,5
"org.apache.cassandra.utils.FBUtilities.xor(byte[],byte[])",2,1,5
"org.apache.cassandra.utils.Filter.getHashCount()",1,1,1
"org.apache.cassandra.utils.GuidGenerator.convertToStandardFormat(String)",1,1,1
"org.apache.cassandra.utils.GuidGenerator.guid()",1,3,3
"org.apache.cassandra.utils.GuidGenerator.guidAsBytes()",1,1,1
"org.apache.cassandra.utils.GuidGenerator.guidToString(byte[])",1,3,3
"org.apache.cassandra.utils.LatencyTracker.addMicro(long)",1,1,1
"org.apache.cassandra.utils.LatencyTracker.addNano(long)",1,1,1
"org.apache.cassandra.utils.LatencyTracker.getOpCount()",1,1,1
"org.apache.cassandra.utils.LatencyTracker.getRecentLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.utils.LatencyTracker.getRecentLatencyMicros()",1,1,1
"org.apache.cassandra.utils.LatencyTracker.getTotalLatencyHistogramMicros()",1,1,1
"org.apache.cassandra.utils.LatencyTracker.getTotalLatencyMicros()",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.LegacyBloomFilter(int,BitSet)",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.add(ByteBuffer)",1,2,2
"org.apache.cassandra.utils.LegacyBloomFilter.alwaysMatchingBloomFilter()",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.buckets()",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.bucketsFor(long,int)",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.clear()",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.emptyBuckets()",1,2,3
"org.apache.cassandra.utils.LegacyBloomFilter.getBitSet()",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.getFilter(long,double)",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.getFilter(long,int)",1,2,2
"org.apache.cassandra.utils.LegacyBloomFilter.getHashBuckets(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.getHashBuckets(ByteBuffer,int,int)",1,2,2
"org.apache.cassandra.utils.LegacyBloomFilter.isPresent(ByteBuffer)",3,2,3
"org.apache.cassandra.utils.LegacyBloomFilter.serializer()",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.toString()",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilter.tserializer()",1,1,1
"org.apache.cassandra.utils.LegacyBloomFilterSerializer.deserialize(DataInputStream,int)",1,1,2
"org.apache.cassandra.utils.LegacyBloomFilterSerializer.serialize(LegacyBloomFilter,DataOutputStream,int)",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.Hashable(byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer.deserialize(DataInputStream,int)",3,3,3
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer.serialize(Hashable,DataOutputStream,int)",3,3,3
"org.apache.cassandra.utils.MerkleTree.Hashable.addHash(byte[])",1,2,2
"org.apache.cassandra.utils.MerkleTree.Hashable.binaryHash(byte[],byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash(byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash(byte[],byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.toString(byte[])",2,1,2
"org.apache.cassandra.utils.MerkleTree.Inner.Inner(Token,Hashable,Hashable)",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer.deserialize(DataInputStream,int)",1,2,3
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer.serialize(Inner,DataOutputStream,int)",1,2,2
"org.apache.cassandra.utils.MerkleTree.Inner.lchild()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.lchild(Hashable)",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.rchild()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.rchild(Hashable)",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.toString(StringBuilder,int)",1,4,4
"org.apache.cassandra.utils.MerkleTree.Leaf.Leaf()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.Leaf(byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.Leaf(byte[],byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer.deserialize(DataInputStream,int)",1,2,3
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer.serialize(Leaf,DataOutputStream,int)",1,2,2
"org.apache.cassandra.utils.MerkleTree.Leaf.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.toString(StringBuilder,int)",1,1,1
"org.apache.cassandra.utils.MerkleTree.MerkleTree(IPartitioner,Range,byte,long)",1,1,1
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer.deserialize(DataInputStream,int)",2,2,3
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer.serialize(MerkleTree,DataOutputStream,int)",1,2,2
"org.apache.cassandra.utils.MerkleTree.RowHash.RowHash(Token,byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.RowHash.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.BadRange.BadRange()",1,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.InvalidHash.InvalidHash()",1,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.TooDeep.TooDeep()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.TreeRange(MerkleTree,Token,Token,byte,Hashable)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.addAll(Iterator<RowHash>)",1,2,2
"org.apache.cassandra.utils.MerkleTree.TreeRange.addHash(RowHash)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.hash()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.hash(byte[])",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.toString()",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.TreeRangeIterator(MerkleTree)",1,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.computeNext()",3,6,6
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.iterator()",1,1,1
"org.apache.cassandra.utils.MerkleTree.difference(MerkleTree,MerkleTree)",2,6,8
"org.apache.cassandra.utils.MerkleTree.differenceHelper(MerkleTree,MerkleTree,List<TreeRange>,TreeRange)",4,8,13
"org.apache.cassandra.utils.MerkleTree.get(Token)",1,1,1
"org.apache.cassandra.utils.MerkleTree.getHelper(Hashable,Token,Token,byte,Token)",3,2,3
"org.apache.cassandra.utils.MerkleTree.hash(Range)",1,1,2
"org.apache.cassandra.utils.MerkleTree.hashHelper(Hashable,Range,Range)",7,6,7
"org.apache.cassandra.utils.MerkleTree.inc(byte)",1,1,1
"org.apache.cassandra.utils.MerkleTree.init()",1,1,1
"org.apache.cassandra.utils.MerkleTree.initHelper(Token,Token,byte,byte)",3,2,4
"org.apache.cassandra.utils.MerkleTree.invalidate(Token)",1,1,1
"org.apache.cassandra.utils.MerkleTree.invalidateHelper(Hashable,Token,Token)",2,2,3
"org.apache.cassandra.utils.MerkleTree.invalids()",1,1,1
"org.apache.cassandra.utils.MerkleTree.maxsize()",1,1,1
"org.apache.cassandra.utils.MerkleTree.maxsize(long)",1,1,1
"org.apache.cassandra.utils.MerkleTree.partitioner()",1,1,1
"org.apache.cassandra.utils.MerkleTree.partitioner(IPartitioner)",1,1,1
"org.apache.cassandra.utils.MerkleTree.root()",1,1,1
"org.apache.cassandra.utils.MerkleTree.size()",1,1,1
"org.apache.cassandra.utils.MerkleTree.split(Token)",2,1,3
"org.apache.cassandra.utils.MerkleTree.splitHelper(Hashable,Token,Token,byte,Token)",4,4,6
"org.apache.cassandra.utils.MerkleTree.toString()",1,1,1
"org.apache.cassandra.utils.MurmurHash.hash32(ByteBuffer,int,int,int)",1,6,6
"org.apache.cassandra.utils.MurmurHash.hash64(ByteBuffer,int,int,long)",2,9,10
"org.apache.cassandra.utils.Mx4jTool.getAddress()",1,1,1
"org.apache.cassandra.utils.Mx4jTool.getPort()",1,3,3
"org.apache.cassandra.utils.Mx4jTool.maybeLoad()",1,3,3
"org.apache.cassandra.utils.NodeId.LocalNodeIdHistory.LocalNodeIdHistory()",1,2,2
"org.apache.cassandra.utils.NodeId.LocalNodeIdHistory.renewCurrent()",1,1,1
"org.apache.cassandra.utils.NodeId.NodeId(ByteBuffer)",2,1,2
"org.apache.cassandra.utils.NodeId.NodeIdRecord.NodeIdRecord(NodeId,long)",1,1,1
"org.apache.cassandra.utils.NodeId.NodeIdRecord.equals(Object)",3,3,5
"org.apache.cassandra.utils.NodeId.NodeIdRecord.toString()",1,1,1
"org.apache.cassandra.utils.NodeId.OneShotRenewer.OneShotRenewer()",1,1,1
"org.apache.cassandra.utils.NodeId.OneShotRenewer.maybeRenew(CounterColumn)",1,3,3
"org.apache.cassandra.utils.NodeId.bytes()",1,1,1
"org.apache.cassandra.utils.NodeId.compareTo(NodeId)",1,1,1
"org.apache.cassandra.utils.NodeId.equals(Object)",3,2,4
"org.apache.cassandra.utils.NodeId.fromInt(int)",1,1,1
"org.apache.cassandra.utils.NodeId.generate()",1,1,1
"org.apache.cassandra.utils.NodeId.getLocalId()",1,1,1
"org.apache.cassandra.utils.NodeId.getOldLocalNodeIds()",1,1,1
"org.apache.cassandra.utils.NodeId.hashCode()",1,1,1
"org.apache.cassandra.utils.NodeId.isLocalId()",1,1,1
"org.apache.cassandra.utils.NodeId.localIds()",1,1,1
"org.apache.cassandra.utils.NodeId.renewLocalId()",1,1,1
"org.apache.cassandra.utils.NodeId.toString()",1,1,1
"org.apache.cassandra.utils.NodeId.wrap(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.NodeId.wrap(ByteBuffer,int)",1,1,1
"org.apache.cassandra.utils.Pair.Pair(T1,T2)",1,1,1
"org.apache.cassandra.utils.Pair.create(X,Y)",1,1,1
"org.apache.cassandra.utils.Pair.equals(Object)",2,2,3
"org.apache.cassandra.utils.Pair.hashCode()",1,3,3
"org.apache.cassandra.utils.Pair.toString()",1,1,1
"org.apache.cassandra.utils.ReducingIterator.ReducingIterator(Iterator<T1>)",1,1,1
"org.apache.cassandra.utils.ReducingIterator.computeNext()",4,6,8
"org.apache.cassandra.utils.ReducingIterator.isEqual(T1,T1)",1,1,1
"org.apache.cassandra.utils.ReducingIterator.iterator()",1,1,1
"org.apache.cassandra.utils.ReducingIterator.onKeyChange()",1,1,1
"org.apache.cassandra.utils.ResourceWatcher.WatchedResource.WatchedResource(String,Runnable)",1,1,1
"org.apache.cassandra.utils.ResourceWatcher.WatchedResource.run()",1,3,3
"org.apache.cassandra.utils.ResourceWatcher.watch(String,Runnable,int)",1,1,1
"org.apache.cassandra.utils.SimpleCondition.await()",1,2,2
"org.apache.cassandra.utils.SimpleCondition.await(long,TimeUnit)",1,3,7
"org.apache.cassandra.utils.SimpleCondition.awaitNanos(long)",1,1,1
"org.apache.cassandra.utils.SimpleCondition.awaitUninterruptibly()",1,1,1
"org.apache.cassandra.utils.SimpleCondition.awaitUntil(Date)",1,1,1
"org.apache.cassandra.utils.SimpleCondition.isSignaled()",1,1,1
"org.apache.cassandra.utils.SimpleCondition.reset()",1,1,1
"org.apache.cassandra.utils.SimpleCondition.signal()",1,1,1
"org.apache.cassandra.utils.SimpleCondition.signalAll()",1,1,1
"org.apache.cassandra.utils.SkipNullRepresenter.representJavaBeanProperty(Object,Property,Object,Tag)",2,2,2
"org.apache.cassandra.utils.StatusLogger.log()",1,3,6
"org.apache.cassandra.utils.UUIDGen.UUIDGen()",2,1,2
"org.apache.cassandra.utils.UUIDGen.createTime(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.createTimeSafe()",1,1,2
"org.apache.cassandra.utils.UUIDGen.createTimeUUIDBytes(long)",1,1,3
"org.apache.cassandra.utils.UUIDGen.createTimeUnsafe(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.decompose(UUID)",1,1,2
"org.apache.cassandra.utils.UUIDGen.getAdjustedTimestamp(UUID)",2,2,2
"org.apache.cassandra.utils.UUIDGen.getClockSeqAndNode()",1,1,2
"org.apache.cassandra.utils.UUIDGen.getClockSeqAndNode(InetAddress)",1,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUIDBytes()",1,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUIDBytes(long)",1,1,1
"org.apache.cassandra.utils.UUIDGen.getUUID(ByteBuffer)",1,1,1
"org.apache.cassandra.utils.UUIDGen.makeNode(InetAddress)",2,2,3
"org.apache.cassandra.utils.UUIDGen.makeType1UUIDFromHost(InetAddress)",1,1,1
"org.apache.cassandra.utils.WrappedRunnable.run()",1,1,2
"org.apache.cassandra.utils.XMLUtils.XMLUtils(String)",1,1,1
"org.apache.cassandra.utils.XMLUtils.getAttributeValue(Node,String)",1,2,2
"org.apache.cassandra.utils.XMLUtils.getNodeValue(String)",1,1,2
"org.apache.cassandra.utils.XMLUtils.getNodeValues(String)",1,2,2
"org.apache.cassandra.utils.XMLUtils.getRequestedNodeList(String)",1,1,1
"org.apache.cassandra.utils.obs.ArrayUtil.grow(long[])",1,1,1
"org.apache.cassandra.utils.obs.ArrayUtil.grow(long[],int)",2,2,2
"org.apache.cassandra.utils.obs.BitUtil.isPowerOfTwo(int)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.isPowerOfTwo(long)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.nextHighestPowerOfTwo(int)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.nextHighestPowerOfTwo(long)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.ntz(int)",4,1,4
"org.apache.cassandra.utils.obs.BitUtil.ntz(long)",8,1,8
"org.apache.cassandra.utils.obs.BitUtil.ntz2(long)",1,1,4
"org.apache.cassandra.utils.obs.BitUtil.ntz3(long)",1,1,6
"org.apache.cassandra.utils.obs.BitUtil.pop(long)",1,1,1
"org.apache.cassandra.utils.obs.BitUtil.pop_andnot(long[],long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.BitUtil.pop_array(long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.BitUtil.pop_intersect(long[],long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.BitUtil.pop_union(long[],long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.BitUtil.pop_xor(long[],long[],int,int)",1,5,5
"org.apache.cassandra.utils.obs.OpenBitSet.OpenBitSet()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.OpenBitSet(BitSet)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.OpenBitSet(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.OpenBitSet(long[],int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.and(OpenBitSet)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.andNot(OpenBitSet)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.andNotCount(OpenBitSet,OpenBitSet)",1,2,2
"org.apache.cassandra.utils.obs.OpenBitSet.bits2words(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.capacity()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.cardinality()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.clear(int,int)",4,1,5
"org.apache.cassandra.utils.obs.OpenBitSet.clear(long)",2,1,2
"org.apache.cassandra.utils.obs.OpenBitSet.clear(long,long)",4,1,5
"org.apache.cassandra.utils.obs.OpenBitSet.clone()",1,1,2
"org.apache.cassandra.utils.obs.OpenBitSet.ensureCapacity(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.ensureCapacityWords(int)",1,2,2
"org.apache.cassandra.utils.obs.OpenBitSet.equals(Object)",7,1,8
"org.apache.cassandra.utils.obs.OpenBitSet.expandingWordNum(long)",1,2,2
"org.apache.cassandra.utils.obs.OpenBitSet.fastClear(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.fastClear(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.fastFlip(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.fastFlip(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.fastGet(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.fastGet(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.fastSet(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.fastSet(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.flip(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.flip(long,long)",3,1,4
"org.apache.cassandra.utils.obs.OpenBitSet.flipAndGet(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.flipAndGet(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.get(int)",2,1,2
"org.apache.cassandra.utils.obs.OpenBitSet.get(long)",2,1,2
"org.apache.cassandra.utils.obs.OpenBitSet.getAndSet(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getAndSet(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getBit(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getBits()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getNumWords()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.hashCode()",1,1,2
"org.apache.cassandra.utils.obs.OpenBitSet.intersect(OpenBitSet)",1,2,3
"org.apache.cassandra.utils.obs.OpenBitSet.intersectionCount(OpenBitSet,OpenBitSet)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.intersects(OpenBitSet)",3,1,3
"org.apache.cassandra.utils.obs.OpenBitSet.isEmpty()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.length()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.nextSetBit(int)",5,4,5
"org.apache.cassandra.utils.obs.OpenBitSet.nextSetBit(long)",5,4,5
"org.apache.cassandra.utils.obs.OpenBitSet.or(OpenBitSet)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.remove(OpenBitSet)",1,1,2
"org.apache.cassandra.utils.obs.OpenBitSet.set(long)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.set(long,long)",3,1,3
"org.apache.cassandra.utils.obs.OpenBitSet.setBits(long[])",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.setNumWords(int)",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.size()",1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.trimTrailingZeros()",1,1,3
"org.apache.cassandra.utils.obs.OpenBitSet.union(OpenBitSet)",1,2,3
"org.apache.cassandra.utils.obs.OpenBitSet.unionCount(OpenBitSet,OpenBitSet)",1,3,3
"org.apache.cassandra.utils.obs.OpenBitSet.xor(OpenBitSet)",1,2,3
"org.apache.cassandra.utils.obs.OpenBitSet.xorCount(OpenBitSet,OpenBitSet)",1,3,3

