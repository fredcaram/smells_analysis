Method,ev(G),iv(G),v(G)
"null.call(IEntity)",1,1,1
"null.check(String,String)",1,1,1
"null.check(byte,byte)",1,1,1
"null.check(char,char)",1,1,1
"null.check(double,double)",1,1,1
"null.check(float,float)",1,1,1
"null.check(int,int)",1,1,1
"null.check(long,long)",1,1,1
"null.check(short,short)",1,1,1
"null.compare(IEntity,IEntity)",1,1,1
"null.compare(IModifier<?>,IModifier<?>)",3,1,3
"null.compare(TextureAtlasSourceWithWithLocationCallback<?>,TextureAtlasSourceWithWithLocationCallback<?>)",2,2,2
"null.matches(int,int,int,int,int,int)",1,1,1
"null.onAllocatePoolItem()",1,1,1
"null.onHandleRecycleItem(IntLRUCacheQueueNode)",1,1,1
"null.onHandleRecycleItem(IntLRUCacheValueHolder<V>)",1,1,1
"null.onHandleRecycleItem(LRUCacheQueueNode<K>)",1,1,1
"null.onHandleRecycleItem(LRUCacheValueHolder<K, V>)",1,1,1
"null.swapAxis(float[])",1,1,1
"org.andengine.AndEngine.checkCodePathSupport()",2,2,3
"org.andengine.AndEngine.checkDeviceSupported()",1,1,1
"org.andengine.AndEngine.checkEGLConfigChooserSupport()",1,1,2
"org.andengine.AndEngine.checkOpenGLSupport()",1,1,1
"org.andengine.AndEngine.isDeviceSupported()",1,1,2
"org.andengine.audio.BaseAudioEntity.BaseAudioEntity(IAudioManager<? extends IAudioEntity>)",1,1,1
"org.andengine.audio.BaseAudioEntity.assertNotReleased()",1,2,2
"org.andengine.audio.BaseAudioEntity.getActualLeftVolume()",1,1,1
"org.andengine.audio.BaseAudioEntity.getActualRightVolume()",1,1,1
"org.andengine.audio.BaseAudioEntity.getAudioManager()",1,1,1
"org.andengine.audio.BaseAudioEntity.getLeftVolume()",1,1,1
"org.andengine.audio.BaseAudioEntity.getMasterVolume()",1,1,1
"org.andengine.audio.BaseAudioEntity.getRightVolume()",1,1,1
"org.andengine.audio.BaseAudioEntity.getVolume()",1,1,1
"org.andengine.audio.BaseAudioEntity.isReleased()",1,1,1
"org.andengine.audio.BaseAudioEntity.onMasterVolumeChanged(float)",1,1,1
"org.andengine.audio.BaseAudioEntity.pause()",1,1,1
"org.andengine.audio.BaseAudioEntity.play()",1,1,1
"org.andengine.audio.BaseAudioEntity.release()",1,1,1
"org.andengine.audio.BaseAudioEntity.resume()",1,1,1
"org.andengine.audio.BaseAudioEntity.setLooping(boolean)",1,1,1
"org.andengine.audio.BaseAudioEntity.setVolume(float)",1,1,1
"org.andengine.audio.BaseAudioEntity.setVolume(float,float)",1,1,1
"org.andengine.audio.BaseAudioEntity.stop()",1,1,1
"org.andengine.audio.BaseAudioManager.add(T)",1,1,1
"org.andengine.audio.BaseAudioManager.getMasterVolume()",1,1,1
"org.andengine.audio.BaseAudioManager.releaseAll()",1,2,2
"org.andengine.audio.BaseAudioManager.remove(T)",1,1,1
"org.andengine.audio.BaseAudioManager.setMasterVolume(float)",1,2,2
"org.andengine.audio.exception.AudioException.AudioException()",1,1,1
"org.andengine.audio.exception.AudioException.AudioException(String)",1,1,1
"org.andengine.audio.exception.AudioException.AudioException(String,Throwable)",1,1,1
"org.andengine.audio.exception.AudioException.AudioException(Throwable)",1,1,1
"org.andengine.audio.music.Music.Music(MusicManager,MediaPlayer)",1,1,1
"org.andengine.audio.music.Music.getAudioManager()",1,1,1
"org.andengine.audio.music.Music.getMediaPlayer()",1,1,1
"org.andengine.audio.music.Music.isPlaying()",1,1,1
"org.andengine.audio.music.Music.onMasterVolumeChanged(float)",1,1,1
"org.andengine.audio.music.Music.pause()",1,1,1
"org.andengine.audio.music.Music.play()",1,1,1
"org.andengine.audio.music.Music.release()",1,1,1
"org.andengine.audio.music.Music.resume()",1,1,1
"org.andengine.audio.music.Music.seekTo(int)",1,1,1
"org.andengine.audio.music.Music.setLooping(boolean)",1,1,1
"org.andengine.audio.music.Music.setOnCompletionListener(OnCompletionListener)",1,1,1
"org.andengine.audio.music.Music.setVolume(float,float)",1,1,1
"org.andengine.audio.music.Music.stop()",1,1,1
"org.andengine.audio.music.Music.throwOnReleased()",1,1,1
"org.andengine.audio.music.MusicFactory.createMusicFromAsset(MusicManager,Context,String)",1,1,1
"org.andengine.audio.music.MusicFactory.createMusicFromAssetFileDescriptor(MusicManager,AssetFileDescriptor)",1,1,1
"org.andengine.audio.music.MusicFactory.createMusicFromFile(MusicManager,File)",1,1,1
"org.andengine.audio.music.MusicFactory.createMusicFromResource(MusicManager,Context,int)",1,1,1
"org.andengine.audio.music.MusicFactory.getAssetBasePath()",1,1,1
"org.andengine.audio.music.MusicFactory.onCreate()",1,1,1
"org.andengine.audio.music.MusicFactory.setAssetBasePath(String)",2,2,3
"org.andengine.audio.music.MusicManager.MusicManager()",1,1,1
"org.andengine.audio.music.exception.MusicException.MusicException()",1,1,1
"org.andengine.audio.music.exception.MusicException.MusicException(String)",1,1,1
"org.andengine.audio.music.exception.MusicException.MusicException(String,Throwable)",1,1,1
"org.andengine.audio.music.exception.MusicException.MusicException(Throwable)",1,1,1
"org.andengine.audio.sound.Sound.Sound(SoundManager,int)",1,1,1
"org.andengine.audio.sound.Sound.getAudioManager()",1,1,1
"org.andengine.audio.sound.Sound.getRate()",1,1,1
"org.andengine.audio.sound.Sound.getSoundID()",1,1,1
"org.andengine.audio.sound.Sound.getSoundPool()",1,1,1
"org.andengine.audio.sound.Sound.getStreamID()",1,1,1
"org.andengine.audio.sound.Sound.isLoaded()",1,1,1
"org.andengine.audio.sound.Sound.onMasterVolumeChanged(float)",1,1,1
"org.andengine.audio.sound.Sound.pause()",1,2,2
"org.andengine.audio.sound.Sound.play()",1,1,1
"org.andengine.audio.sound.Sound.release()",1,1,1
"org.andengine.audio.sound.Sound.resume()",1,2,2
"org.andengine.audio.sound.Sound.setLoaded(boolean)",1,1,1
"org.andengine.audio.sound.Sound.setLoopCount(int)",1,2,2
"org.andengine.audio.sound.Sound.setLooping(boolean)",1,1,2
"org.andengine.audio.sound.Sound.setRate(float)",1,2,2
"org.andengine.audio.sound.Sound.setVolume(float,float)",1,2,2
"org.andengine.audio.sound.Sound.stop()",1,2,2
"org.andengine.audio.sound.Sound.throwOnReleased()",1,1,1
"org.andengine.audio.sound.SoundFactory.createSoundFromAsset(SoundManager,Context,String)",1,1,1
"org.andengine.audio.sound.SoundFactory.createSoundFromAssetFileDescriptor(SoundManager,AssetFileDescriptor)",1,1,1
"org.andengine.audio.sound.SoundFactory.createSoundFromFile(SoundManager,File)",1,1,1
"org.andengine.audio.sound.SoundFactory.createSoundFromFileDescriptor(SoundManager,FileDescriptor,long,long)",1,1,1
"org.andengine.audio.sound.SoundFactory.createSoundFromPath(SoundManager,String)",1,1,1
"org.andengine.audio.sound.SoundFactory.createSoundFromResource(SoundManager,Context,int)",1,1,1
"org.andengine.audio.sound.SoundFactory.getAssetBasePath()",1,1,1
"org.andengine.audio.sound.SoundFactory.onCreate()",1,1,1
"org.andengine.audio.sound.SoundFactory.setAssetBasePath(String)",2,2,3
"org.andengine.audio.sound.SoundManager.SoundManager()",1,1,1
"org.andengine.audio.sound.SoundManager.SoundManager(int)",1,1,1
"org.andengine.audio.sound.SoundManager.add(Sound)",1,1,1
"org.andengine.audio.sound.SoundManager.getSoundPool()",1,1,1
"org.andengine.audio.sound.SoundManager.onLoadComplete(SoundPool,int,int)",3,3,3
"org.andengine.audio.sound.SoundManager.releaseAll()",1,1,1
"org.andengine.audio.sound.SoundManager.remove(Sound)",1,2,2
"org.andengine.audio.sound.exception.SoundException.SoundException()",1,1,1
"org.andengine.audio.sound.exception.SoundException.SoundException(String)",1,1,1
"org.andengine.audio.sound.exception.SoundException.SoundException(String,Throwable)",1,1,1
"org.andengine.audio.sound.exception.SoundException.SoundException(Throwable)",1,1,1
"org.andengine.engine.Engine.Engine(EngineOptions)",1,5,6
"org.andengine.engine.Engine.EngineLock.EngineLock(boolean)",1,1,1
"org.andengine.engine.Engine.EngineLock.notifyCanDraw()",1,1,1
"org.andengine.engine.Engine.EngineLock.notifyCanUpdate()",1,1,1
"org.andengine.engine.Engine.EngineLock.waitUntilCanDraw()",1,2,2
"org.andengine.engine.Engine.EngineLock.waitUntilCanUpdate()",1,2,2
"org.andengine.engine.Engine.UpdateThread.UpdateThread()",1,1,1
"org.andengine.engine.Engine.UpdateThread.postRunnable(Runnable)",1,1,1
"org.andengine.engine.Engine.UpdateThread.run()",1,4,4
"org.andengine.engine.Engine.UpdateThread.setEngine(Engine)",1,1,1
"org.andengine.engine.Engine.clearDrawHandlers()",1,1,1
"org.andengine.engine.Engine.clearUpdateHandlers()",1,1,1
"org.andengine.engine.Engine.convertSceneToSurfaceTouchEvent(Camera,TouchEvent)",1,1,1
"org.andengine.engine.Engine.convertSurfaceToSceneTouchEvent(Camera,TouchEvent)",1,1,1
"org.andengine.engine.Engine.disableAccelerationSensor(Context)",2,2,2
"org.andengine.engine.Engine.disableLocationSensor(Context)",1,1,1
"org.andengine.engine.Engine.disableOrientationSensor(Context)",2,3,3
"org.andengine.engine.Engine.enableAccelerationSensor(Context,IAccelerationListener)",1,1,1
"org.andengine.engine.Engine.enableAccelerationSensor(Context,IAccelerationListener,AccelerationSensorOptions)",2,3,3
"org.andengine.engine.Engine.enableLocationSensor(Context,ILocationListener,LocationSensorOptions)",1,1,1
"org.andengine.engine.Engine.enableOrientationSensor(Context,IOrientationListener)",1,1,1
"org.andengine.engine.Engine.enableOrientationSensor(Context,IOrientationListener,OrientationSensorOptions)",2,4,4
"org.andengine.engine.Engine.enableVibrator(Context)",1,1,1
"org.andengine.engine.Engine.getAccelerationData()",1,1,1
"org.andengine.engine.Engine.getCamera()",1,1,1
"org.andengine.engine.Engine.getCameraFromSurfaceTouchEvent(TouchEvent)",1,1,1
"org.andengine.engine.Engine.getEngineLock()",1,1,1
"org.andengine.engine.Engine.getEngineOptions()",1,1,1
"org.andengine.engine.Engine.getFontManager()",1,1,1
"org.andengine.engine.Engine.getMusicManager()",2,1,2
"org.andengine.engine.Engine.getNanosecondsElapsed()",1,1,1
"org.andengine.engine.Engine.getOrientationData()",1,1,1
"org.andengine.engine.Engine.getScene()",1,1,1
"org.andengine.engine.Engine.getSceneFromSurfaceTouchEvent(TouchEvent)",1,1,1
"org.andengine.engine.Engine.getSecondsElapsedTotal()",1,1,1
"org.andengine.engine.Engine.getShaderProgramManager()",1,1,1
"org.andengine.engine.Engine.getSoundManager()",2,1,2
"org.andengine.engine.Engine.getSurfaceHeight()",1,1,1
"org.andengine.engine.Engine.getSurfaceWidth()",1,1,1
"org.andengine.engine.Engine.getTextureManager()",1,1,1
"org.andengine.engine.Engine.getTouchController()",1,1,1
"org.andengine.engine.Engine.getVertexBufferObjectManager()",1,1,1
"org.andengine.engine.Engine.isRunning()",1,1,1
"org.andengine.engine.Engine.isSensorSupported(SensorManager,int)",1,1,1
"org.andengine.engine.Engine.onAccuracyChanged(Sensor,int)",2,5,6
"org.andengine.engine.Engine.onDestroy()",1,2,2
"org.andengine.engine.Engine.onDrawFrame(GLState)",1,1,1
"org.andengine.engine.Engine.onDrawScene(GLState,Camera)",1,2,2
"org.andengine.engine.Engine.onLocationChanged(Location)",1,3,3
"org.andengine.engine.Engine.onProviderDisabled(String)",1,1,1
"org.andengine.engine.Engine.onProviderEnabled(String)",1,1,1
"org.andengine.engine.Engine.onReloadResources()",1,1,1
"org.andengine.engine.Engine.onSensorChanged(SensorEvent)",2,5,6
"org.andengine.engine.Engine.onStatusChanged(String,int,Bundle)",2,2,4
"org.andengine.engine.Engine.onTickUpdate()",1,2,2
"org.andengine.engine.Engine.onTouch(View,MotionEvent)",2,3,3
"org.andengine.engine.Engine.onTouchEvent(TouchEvent)",2,2,2
"org.andengine.engine.Engine.onTouchHUD(Camera,TouchEvent)",2,2,2
"org.andengine.engine.Engine.onTouchScene(Scene,TouchEvent)",2,2,2
"org.andengine.engine.Engine.onUpdate(long)",1,1,1
"org.andengine.engine.Engine.onUpdateCameraSurface()",1,1,1
"org.andengine.engine.Engine.onUpdateDrawHandlers(GLState,Camera)",1,1,1
"org.andengine.engine.Engine.onUpdateScene(float)",1,2,2
"org.andengine.engine.Engine.onUpdateUpdateHandlers(float)",1,1,1
"org.andengine.engine.Engine.registerDrawHandler(IDrawHandler)",1,1,1
"org.andengine.engine.Engine.registerSelfAsSensorListener(SensorManager,int,SensorDelay)",1,1,1
"org.andengine.engine.Engine.registerUpdateHandler(IUpdateHandler)",1,1,1
"org.andengine.engine.Engine.runOnUpdateThread(Runnable)",1,1,1
"org.andengine.engine.Engine.runOnUpdateThread(Runnable,boolean)",1,2,2
"org.andengine.engine.Engine.runSafely(Runnable)",1,1,1
"org.andengine.engine.Engine.setScene(Scene)",1,1,1
"org.andengine.engine.Engine.setSurfaceSize(int,int)",1,1,1
"org.andengine.engine.Engine.setTouchController(ITouchController)",1,1,1
"org.andengine.engine.Engine.start()",1,2,2
"org.andengine.engine.Engine.startUpdateThread()",1,1,1
"org.andengine.engine.Engine.stop()",1,1,2
"org.andengine.engine.Engine.throwOnDestroyed()",2,1,2
"org.andengine.engine.Engine.unregisterDrawHandler(IDrawHandler)",1,1,1
"org.andengine.engine.Engine.unregisterSelfAsSensorListener(SensorManager,int)",1,1,1
"org.andengine.engine.Engine.unregisterUpdateHandler(IUpdateHandler)",1,1,1
"org.andengine.engine.Engine.vibrate(long)",2,2,2
"org.andengine.engine.Engine.vibrate(long[],int)",2,2,2
"org.andengine.engine.FixedStepEngine.FixedStepEngine(EngineOptions,int)",1,1,1
"org.andengine.engine.FixedStepEngine.onUpdate(long)",1,2,2
"org.andengine.engine.LimitedFPSEngine.LimitedFPSEngine(EngineOptions,int)",1,1,1
"org.andengine.engine.LimitedFPSEngine.onUpdate(long)",1,2,2
"org.andengine.engine.camera.BoundCamera.BoundCamera(float,float,float,float)",1,1,1
"org.andengine.engine.camera.BoundCamera.BoundCamera(float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.engine.camera.BoundCamera.ensureInBounds()",1,3,3
"org.andengine.engine.camera.BoundCamera.getBoundedX(float)",4,1,4
"org.andengine.engine.camera.BoundCamera.getBoundedY(float)",4,1,4
"org.andengine.engine.camera.BoundCamera.getBoundsHeight()",1,1,1
"org.andengine.engine.camera.BoundCamera.getBoundsWidth()",1,1,1
"org.andengine.engine.camera.BoundCamera.getBoundsXMax()",1,1,1
"org.andengine.engine.camera.BoundCamera.getBoundsXMin()",1,1,1
"org.andengine.engine.camera.BoundCamera.getBoundsYMax()",1,1,1
"org.andengine.engine.camera.BoundCamera.getBoundsYMin()",1,1,1
"org.andengine.engine.camera.BoundCamera.isBoundsEnabled()",1,1,1
"org.andengine.engine.camera.BoundCamera.setBounds(float,float,float,float)",1,1,1
"org.andengine.engine.camera.BoundCamera.setBoundsEnabled(boolean)",1,1,1
"org.andengine.engine.camera.BoundCamera.setCenter(float,float)",1,2,2
"org.andengine.engine.camera.Camera.Camera(float,float,float,float)",1,1,1
"org.andengine.engine.camera.Camera.allocateUpdateHandlers()",1,1,1
"org.andengine.engine.camera.Camera.applyCameraSceneRotation(TouchEvent)",1,2,2
"org.andengine.engine.camera.Camera.applyCameraSceneRotation(float[])",1,2,2
"org.andengine.engine.camera.Camera.applyRotation(GLState,float,float,float)",1,1,1
"org.andengine.engine.camera.Camera.applySceneRotation(TouchEvent)",1,2,2
"org.andengine.engine.camera.Camera.applySceneRotation(float[])",1,2,2
"org.andengine.engine.camera.Camera.applySceneToCameraSceneOffset(TouchEvent)",1,1,1
"org.andengine.engine.camera.Camera.applySceneToCameraSceneOffset(float[])",1,1,1
"org.andengine.engine.camera.Camera.clearUpdateHandlers()",2,1,2
"org.andengine.engine.camera.Camera.convertAxisAlignedSceneToSurfaceTouchEvent(TouchEvent,int,int)",1,1,1
"org.andengine.engine.camera.Camera.convertAxisAlignedSurfaceToSceneTouchEvent(TouchEvent,float,float)",1,1,1
"org.andengine.engine.camera.Camera.convertCameraSceneToSceneTouchEvent(TouchEvent)",1,1,1
"org.andengine.engine.camera.Camera.convertSceneToCameraSceneTouchEvent(TouchEvent)",1,1,1
"org.andengine.engine.camera.Camera.convertSceneToSurfaceTouchEvent(TouchEvent,int,int)",1,3,3
"org.andengine.engine.camera.Camera.convertSurfaceToSceneTouchEvent(TouchEvent,int,int)",1,3,3
"org.andengine.engine.camera.Camera.getCameraSceneCoordinatesFromSceneCoordinates(float,float)",1,1,1
"org.andengine.engine.camera.Camera.getCameraSceneCoordinatesFromSceneCoordinates(float[])",1,1,1
"org.andengine.engine.camera.Camera.getCameraSceneRotation()",1,1,1
"org.andengine.engine.camera.Camera.getCenterX()",1,1,1
"org.andengine.engine.camera.Camera.getCenterY()",1,1,1
"org.andengine.engine.camera.Camera.getHUD()",1,1,1
"org.andengine.engine.camera.Camera.getHeight()",1,1,1
"org.andengine.engine.camera.Camera.getHeightRaw()",1,1,1
"org.andengine.engine.camera.Camera.getRotation()",1,1,1
"org.andengine.engine.camera.Camera.getSceneCoordinatesFromCameraSceneCoordinates(float,float)",1,1,1
"org.andengine.engine.camera.Camera.getSceneCoordinatesFromCameraSceneCoordinates(float[])",1,1,1
"org.andengine.engine.camera.Camera.getSurfaceHeight()",1,1,1
"org.andengine.engine.camera.Camera.getSurfaceWidth()",1,1,1
"org.andengine.engine.camera.Camera.getSurfaceX()",1,1,1
"org.andengine.engine.camera.Camera.getSurfaceY()",1,1,1
"org.andengine.engine.camera.Camera.getWidth()",1,1,1
"org.andengine.engine.camera.Camera.getWidthRaw()",1,1,1
"org.andengine.engine.camera.Camera.getXMax()",1,1,1
"org.andengine.engine.camera.Camera.getXMin()",1,1,1
"org.andengine.engine.camera.Camera.getYMax()",1,1,1
"org.andengine.engine.camera.Camera.getYMin()",1,1,1
"org.andengine.engine.camera.Camera.getZFar()",1,1,1
"org.andengine.engine.camera.Camera.getZNear()",1,1,1
"org.andengine.engine.camera.Camera.hasHUD()",1,1,1
"org.andengine.engine.camera.Camera.isLineVisible(Line)",1,1,1
"org.andengine.engine.camera.Camera.isRectangularShapeVisible(RectangularShape)",1,1,1
"org.andengine.engine.camera.Camera.isRectangularShapeVisible(float,float,float,float,Transformation)",1,1,1
"org.andengine.engine.camera.Camera.isResizeOnSurfaceSizeChanged()",1,1,1
"org.andengine.engine.camera.Camera.isRotated()",1,1,1
"org.andengine.engine.camera.Camera.offsetCenter(float,float)",1,1,1
"org.andengine.engine.camera.Camera.onApplyCameraSceneMatrix(GLState)",1,2,2
"org.andengine.engine.camera.Camera.onApplySceneBackgroundMatrix(GLState)",1,2,2
"org.andengine.engine.camera.Camera.onApplySceneMatrix(GLState)",1,2,2
"org.andengine.engine.camera.Camera.onDrawHUD(GLState)",1,2,2
"org.andengine.engine.camera.Camera.onSurfaceSizeChanged(int,int,int,int,int,int,int,int)",1,2,2
"org.andengine.engine.camera.Camera.onSurfaceSizeInitialized(int,int,int,int)",1,1,1
"org.andengine.engine.camera.Camera.onUpdate(float)",1,3,3
"org.andengine.engine.camera.Camera.registerUpdateHandler(IUpdateHandler)",1,2,2
"org.andengine.engine.camera.Camera.reset()",1,1,1
"org.andengine.engine.camera.Camera.set(float,float,float,float)",1,1,1
"org.andengine.engine.camera.Camera.setCameraSceneRotation(float)",1,1,1
"org.andengine.engine.camera.Camera.setCenter(float,float)",1,1,1
"org.andengine.engine.camera.Camera.setChaseEntity(IEntity)",1,1,1
"org.andengine.engine.camera.Camera.setHUD(HUD)",1,2,2
"org.andengine.engine.camera.Camera.setResizeOnSurfaceSizeChanged(boolean)",1,1,1
"org.andengine.engine.camera.Camera.setRotation(float)",1,1,1
"org.andengine.engine.camera.Camera.setSurfaceSize(int,int,int,int)",1,3,5
"org.andengine.engine.camera.Camera.setXMax(float)",1,1,1
"org.andengine.engine.camera.Camera.setXMin(float)",1,1,1
"org.andengine.engine.camera.Camera.setYMax(float)",1,1,1
"org.andengine.engine.camera.Camera.setYMin(float)",1,1,1
"org.andengine.engine.camera.Camera.setZClippingPlanes(float,float)",1,1,1
"org.andengine.engine.camera.Camera.setZFar(float)",1,1,1
"org.andengine.engine.camera.Camera.setZNear(float)",1,1,1
"org.andengine.engine.camera.Camera.unapplyCameraSceneRotation(TouchEvent)",1,2,2
"org.andengine.engine.camera.Camera.unapplyCameraSceneRotation(float[])",1,2,2
"org.andengine.engine.camera.Camera.unapplySceneRotation(TouchEvent)",1,2,2
"org.andengine.engine.camera.Camera.unapplySceneRotation(float[])",1,2,2
"org.andengine.engine.camera.Camera.unapplySceneToCameraSceneOffset(TouchEvent)",1,1,1
"org.andengine.engine.camera.Camera.unapplySceneToCameraSceneOffset(float[])",1,1,1
"org.andengine.engine.camera.Camera.unregisterUpdateHandler(IUpdateHandler)",2,1,2
"org.andengine.engine.camera.Camera.unregisterUpdateHandlers(IUpdateHandlerMatcher)",2,1,2
"org.andengine.engine.camera.Camera.updateChaseEntity()",1,2,2
"org.andengine.engine.camera.CameraFactory.createPixelPerfectCamera(Context,float,float)",1,1,1
"org.andengine.engine.camera.CameraFactory.getDisplayMetrics(Context)",1,1,1
"org.andengine.engine.camera.SmoothCamera.SmoothCamera(float,float,float,float,float,float,float)",1,1,1
"org.andengine.engine.camera.SmoothCamera.getMaxVelocityX()",1,1,1
"org.andengine.engine.camera.SmoothCamera.getMaxVelocityY()",1,1,1
"org.andengine.engine.camera.SmoothCamera.getMaxZoomFactorChange()",1,1,1
"org.andengine.engine.camera.SmoothCamera.getTargetCenterX()",1,1,1
"org.andengine.engine.camera.SmoothCamera.getTargetCenterY()",1,1,1
"org.andengine.engine.camera.SmoothCamera.getTargetZoomFactor()",1,1,1
"org.andengine.engine.camera.SmoothCamera.limitToMaxVelocityX(float,float)",2,2,2
"org.andengine.engine.camera.SmoothCamera.limitToMaxVelocityY(float,float)",2,2,2
"org.andengine.engine.camera.SmoothCamera.limitToMaxZoomFactorChange(float,float)",2,2,2
"org.andengine.engine.camera.SmoothCamera.onSmoothZoomFinished()",1,1,1
"org.andengine.engine.camera.SmoothCamera.onSmoothZoomStarted()",1,1,1
"org.andengine.engine.camera.SmoothCamera.onUpdate(float)",1,4,5
"org.andengine.engine.camera.SmoothCamera.setCenter(float,float)",1,1,1
"org.andengine.engine.camera.SmoothCamera.setCenterDirect(float,float)",1,1,1
"org.andengine.engine.camera.SmoothCamera.setMaxVelocity(float,float)",1,1,1
"org.andengine.engine.camera.SmoothCamera.setMaxVelocityX(float)",1,1,1
"org.andengine.engine.camera.SmoothCamera.setMaxVelocityY(float)",1,1,1
"org.andengine.engine.camera.SmoothCamera.setMaxZoomFactorChange(float)",1,1,1
"org.andengine.engine.camera.SmoothCamera.setZoomFactor(float)",1,3,3
"org.andengine.engine.camera.SmoothCamera.setZoomFactorDirect(float)",1,2,2
"org.andengine.engine.camera.ZoomCamera.ZoomCamera(float,float,float,float)",1,1,1
"org.andengine.engine.camera.ZoomCamera.applySceneToCameraSceneOffset(TouchEvent)",1,2,2
"org.andengine.engine.camera.ZoomCamera.applySceneToCameraSceneOffset(float[])",1,2,2
"org.andengine.engine.camera.ZoomCamera.getHeight()",1,1,1
"org.andengine.engine.camera.ZoomCamera.getWidth()",1,1,1
"org.andengine.engine.camera.ZoomCamera.getXMax()",2,2,2
"org.andengine.engine.camera.ZoomCamera.getXMin()",2,2,2
"org.andengine.engine.camera.ZoomCamera.getYMax()",2,2,2
"org.andengine.engine.camera.ZoomCamera.getYMin()",2,2,2
"org.andengine.engine.camera.ZoomCamera.getZoomFactor()",1,1,1
"org.andengine.engine.camera.ZoomCamera.setZoomFactor(float)",1,2,2
"org.andengine.engine.camera.ZoomCamera.unapplySceneToCameraSceneOffset(TouchEvent)",1,2,2
"org.andengine.engine.camera.ZoomCamera.unapplySceneToCameraSceneOffset(float[])",1,2,2
"org.andengine.engine.camera.hud.HUD.HUD()",1,1,1
"org.andengine.engine.camera.hud.controls.AnalogOnScreenControl.AnalogOnScreenControl(float,float,Camera,ITextureRegion,ITextureRegion,float,VertexBufferObjectManager,IAnalogOnScreenControlListener)",1,1,1
"org.andengine.engine.camera.hud.controls.AnalogOnScreenControl.AnalogOnScreenControl(float,float,Camera,ITextureRegion,ITextureRegion,float,long,VertexBufferObjectManager,IAnalogOnScreenControlListener)",1,1,1
"org.andengine.engine.camera.hud.controls.AnalogOnScreenControl.getOnScreenControlListener()",1,1,1
"org.andengine.engine.camera.hud.controls.AnalogOnScreenControl.onClick(ClickDetector,int,float,float)",1,1,1
"org.andengine.engine.camera.hud.controls.AnalogOnScreenControl.onHandleControlBaseTouched(TouchEvent,float,float)",1,1,1
"org.andengine.engine.camera.hud.controls.AnalogOnScreenControl.onUpdateControlKnob(float,float)",1,2,2
"org.andengine.engine.camera.hud.controls.AnalogOnScreenControl.setOnControlClickEnabled(boolean)",1,1,1
"org.andengine.engine.camera.hud.controls.AnalogOnScreenControl.setOnControlClickMaximumMilliseconds(long)",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.BaseOnScreenControl(float,float,Camera,ITextureRegion,ITextureRegion,float,VertexBufferObjectManager,IOnScreenControlListener)",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.getControlBase()",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.getControlKnob()",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.getOnScreenControlListener()",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.onHandleControlBaseLeft()",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.onHandleControlBaseTouched(TouchEvent,float,float)",5,5,7
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.onHandleControlKnobReleased()",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.onSceneTouchEvent(Scene,TouchEvent)",2,3,3
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.onUpdateControlKnob(float,float)",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.refreshControlKnobPosition()",1,1,1
"org.andengine.engine.camera.hud.controls.BaseOnScreenControl.updateControlKnob(float,float)",1,1,1
"org.andengine.engine.camera.hud.controls.DigitalOnScreenControl.DigitalOnScreenControl(float,float,Camera,ITextureRegion,ITextureRegion,float,VertexBufferObjectManager,IOnScreenControlListener)",1,1,1
"org.andengine.engine.camera.hud.controls.DigitalOnScreenControl.DigitalOnScreenControl(float,float,Camera,ITextureRegion,ITextureRegion,float,boolean,VertexBufferObjectManager,IOnScreenControlListener)",1,1,1
"org.andengine.engine.camera.hud.controls.DigitalOnScreenControl.isAllowDiagonal()",1,1,1
"org.andengine.engine.camera.hud.controls.DigitalOnScreenControl.onUpdateControlKnob(float,float)",2,19,20
"org.andengine.engine.camera.hud.controls.DigitalOnScreenControl.setAllowDiagonal(boolean)",1,1,1
"org.andengine.engine.camera.hud.controls.DigitalOnScreenControl.testDiagonalAngle(float,float)",1,1,2
"org.andengine.engine.handler.BaseEntityUpdateHandler.BaseEntityUpdateHandler(IEntity)",1,1,1
"org.andengine.engine.handler.BaseEntityUpdateHandler.getEntity()",1,1,1
"org.andengine.engine.handler.BaseEntityUpdateHandler.onUpdate(float)",1,1,1
"org.andengine.engine.handler.BaseEntityUpdateHandler.reset()",1,1,1
"org.andengine.engine.handler.BaseEntityUpdateHandler.setEntity(IEntity)",1,1,1
"org.andengine.engine.handler.DrawHandlerList.DrawHandlerList()",1,1,1
"org.andengine.engine.handler.DrawHandlerList.DrawHandlerList(int)",1,1,1
"org.andengine.engine.handler.DrawHandlerList.onDraw(GLState,Camera)",1,2,2
"org.andengine.engine.handler.UpdateHandlerList.UpdateHandlerList()",1,1,1
"org.andengine.engine.handler.UpdateHandlerList.UpdateHandlerList(int)",1,1,1
"org.andengine.engine.handler.UpdateHandlerList.onUpdate(float)",1,2,2
"org.andengine.engine.handler.UpdateHandlerList.reset()",1,2,2
"org.andengine.engine.handler.collision.CollisionHandler.CollisionHandler(ICollisionCallback,IShape,ArrayList<? extends IShape>)",4,1,4
"org.andengine.engine.handler.collision.CollisionHandler.CollisionHandler(ICollisionCallback,IShape,IShape)",1,1,1
"org.andengine.engine.handler.collision.CollisionHandler.onUpdate(float)",4,3,4
"org.andengine.engine.handler.collision.CollisionHandler.reset()",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.PhysicsHandler(IEntity)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.accelerate(float,float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.getAccelerationX()",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.getAccelerationY()",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.getAngularVelocity()",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.getVelocityX()",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.getVelocityY()",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.isEnabled()",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.onUpdate(float,IEntity)",1,4,7
"org.andengine.engine.handler.physics.PhysicsHandler.reset()",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setAcceleration(float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setAcceleration(float,float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setAccelerationX(float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setAccelerationY(float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setAngularVelocity(float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setEnabled(boolean)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setVelocity(float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setVelocity(float,float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setVelocityX(float)",1,1,1
"org.andengine.engine.handler.physics.PhysicsHandler.setVelocityY(float)",1,1,1
"org.andengine.engine.handler.runnable.RunnableHandler.onUpdate(float)",1,2,2
"org.andengine.engine.handler.runnable.RunnableHandler.postRunnable(Runnable)",1,1,1
"org.andengine.engine.handler.runnable.RunnableHandler.reset()",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.TimerHandler(float,ITimerCallback)",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.TimerHandler(float,boolean,ITimerCallback)",2,1,2
"org.andengine.engine.handler.timer.TimerHandler.getTimerSeconds()",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.getTimerSecondsElapsed()",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.isAutoReset()",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.isTimerCallbackTriggered()",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.onUpdate(float)",1,5,5
"org.andengine.engine.handler.timer.TimerHandler.reset()",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.setAutoReset(boolean)",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.setTimerCallbackTriggered(boolean)",1,1,1
"org.andengine.engine.handler.timer.TimerHandler.setTimerSeconds(float)",2,1,2
"org.andengine.engine.options.AudioOptions.getMusicOptions()",1,1,1
"org.andengine.engine.options.AudioOptions.getSoundOptions()",1,1,1
"org.andengine.engine.options.AudioOptions.needsMusic()",1,1,1
"org.andengine.engine.options.AudioOptions.needsSound()",1,1,1
"org.andengine.engine.options.AudioOptions.setNeedsMusic(boolean)",1,1,1
"org.andengine.engine.options.AudioOptions.setNeedsSound(boolean)",1,1,1
"org.andengine.engine.options.EngineOptions.EngineOptions(boolean,ScreenOrientation,IResolutionPolicy,Camera)",1,1,1
"org.andengine.engine.options.EngineOptions.getAudioOptions()",1,1,1
"org.andengine.engine.options.EngineOptions.getCamera()",1,1,1
"org.andengine.engine.options.EngineOptions.getEngineLock()",1,1,1
"org.andengine.engine.options.EngineOptions.getRenderOptions()",1,1,1
"org.andengine.engine.options.EngineOptions.getResolutionPolicy()",1,1,1
"org.andengine.engine.options.EngineOptions.getScreenOrientation()",1,1,1
"org.andengine.engine.options.EngineOptions.getTouchOptions()",1,1,1
"org.andengine.engine.options.EngineOptions.getUpdateThread()",1,1,1
"org.andengine.engine.options.EngineOptions.getUpdateThreadPriority()",1,1,1
"org.andengine.engine.options.EngineOptions.getWakeLockOptions()",1,1,1
"org.andengine.engine.options.EngineOptions.hasEngineLock()",1,1,1
"org.andengine.engine.options.EngineOptions.hasUpdateThread()",1,1,1
"org.andengine.engine.options.EngineOptions.isFullscreen()",1,1,1
"org.andengine.engine.options.EngineOptions.setEngineLock(EngineLock)",1,1,1
"org.andengine.engine.options.EngineOptions.setUpdateThread(UpdateThread)",1,1,1
"org.andengine.engine.options.EngineOptions.setUpdateThreadPriority(int)",1,1,1
"org.andengine.engine.options.EngineOptions.setWakeLockOptions(WakeLockOptions)",1,1,1
"org.andengine.engine.options.MusicOptions.needsMusic()",1,1,1
"org.andengine.engine.options.MusicOptions.setNeedsMusic(boolean)",1,1,1
"org.andengine.engine.options.RenderOptions.isDithering()",1,1,1
"org.andengine.engine.options.RenderOptions.isMultiSampling()",1,1,1
"org.andengine.engine.options.RenderOptions.setDithering(boolean)",1,1,1
"org.andengine.engine.options.RenderOptions.setMultiSampling(boolean)",1,1,1
"org.andengine.engine.options.SoundOptions.getMaxSimultaneousStreams()",1,1,1
"org.andengine.engine.options.SoundOptions.needsSound()",1,1,1
"org.andengine.engine.options.SoundOptions.setMaxSimultaneousStreams(int)",1,1,1
"org.andengine.engine.options.SoundOptions.setNeedsSound(boolean)",1,1,1
"org.andengine.engine.options.TouchOptions.getTouchEventIntervalMilliseconds()",1,1,1
"org.andengine.engine.options.TouchOptions.needsMultiTouch()",1,1,1
"org.andengine.engine.options.TouchOptions.setNeedsMultiTouch(boolean)",1,1,1
"org.andengine.engine.options.TouchOptions.setTouchEventIntervalMilliseconds(long)",1,1,1
"org.andengine.engine.options.WakeLockOptions.WakeLockOptions(int)",1,1,1
"org.andengine.engine.options.WakeLockOptions.getFlag()",1,1,1
"org.andengine.engine.options.resolutionpolicy.BaseResolutionPolicy.throwOnNotMeasureSpecEXACTLY(int,int)",2,1,3
"org.andengine.engine.options.resolutionpolicy.FillResolutionPolicy.onMeasure(RenderSurfaceView,int,int)",1,1,1
"org.andengine.engine.options.resolutionpolicy.FixedResolutionPolicy.FixedResolutionPolicy(int,int)",1,1,1
"org.andengine.engine.options.resolutionpolicy.FixedResolutionPolicy.onMeasure(RenderSurfaceView,int,int)",1,1,1
"org.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy.RatioResolutionPolicy(float)",1,1,1
"org.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy.RatioResolutionPolicy(float,float)",1,1,1
"org.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy.onMeasure(RenderSurfaceView,int,int)",1,2,2
"org.andengine.engine.options.resolutionpolicy.RelativeResolutionPolicy.RelativeResolutionPolicy(float)",1,1,1
"org.andengine.engine.options.resolutionpolicy.RelativeResolutionPolicy.RelativeResolutionPolicy(float,float)",1,1,1
"org.andengine.engine.options.resolutionpolicy.RelativeResolutionPolicy.onMeasure(RenderSurfaceView,int,int)",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.DoubleSceneSplitScreenEngine(EngineOptions,Camera)",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.convertSurfaceToSceneTouchEvent(Camera,TouchEvent)",1,2,2
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.getCamera()",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.getCameraFromSurfaceTouchEvent(TouchEvent)",2,2,2
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.getFirstCamera()",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.getFirstScene()",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.getScene()",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.getSceneFromSurfaceTouchEvent(TouchEvent)",2,2,2
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.getSecondCamera()",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.getSecondScene()",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.onDrawScene(GLState,Camera)",1,3,3
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.onUpdateCameraSurface()",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.onUpdateScene(float)",1,2,2
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.onUpdateUpdateHandlers(float)",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.setFirstScene(Scene)",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.setScene(Scene)",1,1,1
"org.andengine.engine.splitscreen.DoubleSceneSplitScreenEngine.setSecondScene(Scene)",1,1,1
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.SingleSceneSplitScreenEngine(EngineOptions,Camera)",1,1,1
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.convertSurfaceToSceneTouchEvent(Camera,TouchEvent)",1,2,2
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.getCamera()",1,1,1
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.getCameraFromSurfaceTouchEvent(TouchEvent)",2,2,2
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.getFirstCamera()",1,1,1
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.getSecondCamera()",1,1,1
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.onDrawScene(GLState,Camera)",1,2,2
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.onUpdateCameraSurface()",1,1,1
"org.andengine.engine.splitscreen.SingleSceneSplitScreenEngine.onUpdateUpdateHandlers(float)",1,1,1
"org.andengine.entity.Entity.Entity()",1,1,1
"org.andengine.entity.Entity.Entity(float,float)",1,1,1
"org.andengine.entity.Entity.allocateChildren()",1,1,1
"org.andengine.entity.Entity.allocateEntityModifiers()",1,1,1
"org.andengine.entity.Entity.allocateUpdateHandlers()",1,1,1
"org.andengine.entity.Entity.applyRotation(GLState)",1,2,2
"org.andengine.entity.Entity.applyScale(GLState)",1,2,3
"org.andengine.entity.Entity.applySkew(GLState)",1,2,3
"org.andengine.entity.Entity.applyTranslation(GLState)",1,1,1
"org.andengine.entity.Entity.assertEntityHasNoParent(IEntity)",2,2,2
"org.andengine.entity.Entity.attachChild(IEntity)",1,2,2
"org.andengine.entity.Entity.callOnChildren(IEntityParameterCallable)",2,1,2
"org.andengine.entity.Entity.callOnChildren(IEntityParameterCallable,IEntityMatcher)",2,1,2
"org.andengine.entity.Entity.clearEntityModifiers()",2,1,2
"org.andengine.entity.Entity.clearUpdateHandlers()",2,1,2
"org.andengine.entity.Entity.convertLocalToSceneCoordinates(float,float)",1,1,1
"org.andengine.entity.Entity.convertLocalToSceneCoordinates(float,float,float[])",1,1,1
"org.andengine.entity.Entity.convertLocalToSceneCoordinates(float[])",1,1,1
"org.andengine.entity.Entity.convertLocalToSceneCoordinates(float[],float[])",1,1,1
"org.andengine.entity.Entity.convertSceneToLocalCoordinates(float,float)",1,1,1
"org.andengine.entity.Entity.convertSceneToLocalCoordinates(float,float,float[])",1,1,1
"org.andengine.entity.Entity.convertSceneToLocalCoordinates(float[])",1,1,1
"org.andengine.entity.Entity.convertSceneToLocalCoordinates(float[],float[])",1,1,1
"org.andengine.entity.Entity.detachChild(IEntity)",2,1,2
"org.andengine.entity.Entity.detachChild(IEntityMatcher)",2,1,2
"org.andengine.entity.Entity.detachChild(int)",4,3,4
"org.andengine.entity.Entity.detachChildren()",2,1,2
"org.andengine.entity.Entity.detachChildren(IEntityMatcher)",2,1,2
"org.andengine.entity.Entity.detachSelf()",2,2,2
"org.andengine.entity.Entity.dispose()",2,1,2
"org.andengine.entity.Entity.draw(GLState,Camera)",1,1,1
"org.andengine.entity.Entity.finalize()",1,2,2
"org.andengine.entity.Entity.getAlpha()",1,1,1
"org.andengine.entity.Entity.getBlue()",1,1,1
"org.andengine.entity.Entity.getChildByIndex(int)",2,1,2
"org.andengine.entity.Entity.getChildByMatcher(IEntityMatcher)",2,1,2
"org.andengine.entity.Entity.getChildByTag(int)",4,2,4
"org.andengine.entity.Entity.getChildCount()",2,1,2
"org.andengine.entity.Entity.getColor()",1,1,1
"org.andengine.entity.Entity.getEntityModifierCount()",2,1,2
"org.andengine.entity.Entity.getFirstChild()",2,1,2
"org.andengine.entity.Entity.getGreen()",1,1,1
"org.andengine.entity.Entity.getLastChild()",2,1,2
"org.andengine.entity.Entity.getLocalToParentTransformation()",1,5,8
"org.andengine.entity.Entity.getLocalToSceneTransformation()",1,2,3
"org.andengine.entity.Entity.getParent()",1,1,1
"org.andengine.entity.Entity.getParentToLocalTransformation()",1,5,8
"org.andengine.entity.Entity.getRed()",1,1,1
"org.andengine.entity.Entity.getRotation()",1,1,1
"org.andengine.entity.Entity.getRotationCenterX()",1,1,1
"org.andengine.entity.Entity.getRotationCenterY()",1,1,1
"org.andengine.entity.Entity.getScaleCenterX()",1,1,1
"org.andengine.entity.Entity.getScaleCenterY()",1,1,1
"org.andengine.entity.Entity.getScaleX()",1,1,1
"org.andengine.entity.Entity.getScaleY()",1,1,1
"org.andengine.entity.Entity.getSceneCenterCoordinates()",1,1,1
"org.andengine.entity.Entity.getSceneCenterCoordinates(float[])",1,1,1
"org.andengine.entity.Entity.getSceneToLocalTransformation()",1,2,3
"org.andengine.entity.Entity.getSkewCenterX()",1,1,1
"org.andengine.entity.Entity.getSkewCenterY()",1,1,1
"org.andengine.entity.Entity.getSkewX()",1,1,1
"org.andengine.entity.Entity.getSkewY()",1,1,1
"org.andengine.entity.Entity.getTag()",1,1,1
"org.andengine.entity.Entity.getUpdateHandlerCount()",2,1,2
"org.andengine.entity.Entity.getUserData()",1,1,1
"org.andengine.entity.Entity.getX()",1,1,1
"org.andengine.entity.Entity.getY()",1,1,1
"org.andengine.entity.Entity.getZIndex()",1,1,1
"org.andengine.entity.Entity.hasParent()",1,1,1
"org.andengine.entity.Entity.isChildrenIgnoreUpdate()",1,1,1
"org.andengine.entity.Entity.isChildrenVisible()",1,1,1
"org.andengine.entity.Entity.isCulled(Camera)",1,1,1
"org.andengine.entity.Entity.isCullingEnabled()",1,1,1
"org.andengine.entity.Entity.isDisposed()",1,1,1
"org.andengine.entity.Entity.isIgnoreUpdate()",1,1,1
"org.andengine.entity.Entity.isRotated()",1,1,1
"org.andengine.entity.Entity.isRotatedOrScaledOrSkewed()",1,1,5
"org.andengine.entity.Entity.isScaled()",1,1,2
"org.andengine.entity.Entity.isSkewed()",1,1,2
"org.andengine.entity.Entity.isVisible()",1,1,1
"org.andengine.entity.Entity.onApplyTransformations(GLState)",1,1,1
"org.andengine.entity.Entity.onAttached()",1,1,1
"org.andengine.entity.Entity.onDetached()",1,1,1
"org.andengine.entity.Entity.onDraw(GLState,Camera)",1,4,4
"org.andengine.entity.Entity.onManagedDraw(GLState,Camera)",4,6,7
"org.andengine.entity.Entity.onManagedUpdate(float)",1,5,6
"org.andengine.entity.Entity.onUpdate(float)",1,2,2
"org.andengine.entity.Entity.onUpdateColor()",1,1,1
"org.andengine.entity.Entity.postDraw(GLState,Camera)",1,1,1
"org.andengine.entity.Entity.preDraw(GLState,Camera)",1,1,1
"org.andengine.entity.Entity.query(IEntityMatcher)",1,1,1
"org.andengine.entity.Entity.query(IEntityMatcher,L)",1,3,3
"org.andengine.entity.Entity.queryFirst(IEntityMatcher)",1,1,1
"org.andengine.entity.Entity.queryFirstForSubclass(IEntityMatcher)",4,2,4
"org.andengine.entity.Entity.queryForSubclass(IEntityMatcher)",1,1,1
"org.andengine.entity.Entity.queryForSubclass(IEntityMatcher,L)",1,3,3
"org.andengine.entity.Entity.registerEntityModifier(IEntityModifier)",1,2,2
"org.andengine.entity.Entity.registerUpdateHandler(IUpdateHandler)",1,2,2
"org.andengine.entity.Entity.reset()",1,4,4
"org.andengine.entity.Entity.setAlpha(float)",1,2,2
"org.andengine.entity.Entity.setBlue(float)",1,2,2
"org.andengine.entity.Entity.setChildrenIgnoreUpdate(boolean)",1,1,1
"org.andengine.entity.Entity.setChildrenVisible(boolean)",1,1,1
"org.andengine.entity.Entity.setColor(Color)",1,1,1
"org.andengine.entity.Entity.setColor(float,float,float)",1,2,2
"org.andengine.entity.Entity.setColor(float,float,float,float)",1,2,2
"org.andengine.entity.Entity.setCullingEnabled(boolean)",1,1,1
"org.andengine.entity.Entity.setGreen(float)",1,2,2
"org.andengine.entity.Entity.setIgnoreUpdate(boolean)",1,1,1
"org.andengine.entity.Entity.setParent(IEntity)",1,1,1
"org.andengine.entity.Entity.setPosition(IEntity)",1,1,1
"org.andengine.entity.Entity.setPosition(float,float)",1,1,1
"org.andengine.entity.Entity.setRed(float)",1,2,2
"org.andengine.entity.Entity.setRotation(float)",1,1,1
"org.andengine.entity.Entity.setRotationCenter(float,float)",1,1,1
"org.andengine.entity.Entity.setRotationCenterX(float)",1,1,1
"org.andengine.entity.Entity.setRotationCenterY(float)",1,1,1
"org.andengine.entity.Entity.setScale(float)",1,1,1
"org.andengine.entity.Entity.setScale(float,float)",1,1,1
"org.andengine.entity.Entity.setScaleCenter(float,float)",1,1,1
"org.andengine.entity.Entity.setScaleCenterX(float)",1,1,1
"org.andengine.entity.Entity.setScaleCenterY(float)",1,1,1
"org.andengine.entity.Entity.setScaleX(float)",1,1,1
"org.andengine.entity.Entity.setScaleY(float)",1,1,1
"org.andengine.entity.Entity.setSkew(float)",1,1,1
"org.andengine.entity.Entity.setSkew(float,float)",1,1,1
"org.andengine.entity.Entity.setSkewCenter(float,float)",1,1,1
"org.andengine.entity.Entity.setSkewCenterX(float)",1,1,1
"org.andengine.entity.Entity.setSkewCenterY(float)",1,1,1
"org.andengine.entity.Entity.setSkewX(float)",1,1,1
"org.andengine.entity.Entity.setSkewY(float)",1,1,1
"org.andengine.entity.Entity.setTag(int)",1,1,1
"org.andengine.entity.Entity.setUserData(Object)",1,1,1
"org.andengine.entity.Entity.setVisible(boolean)",1,1,1
"org.andengine.entity.Entity.setX(float)",1,1,1
"org.andengine.entity.Entity.setY(float)",1,1,1
"org.andengine.entity.Entity.setZIndex(int)",1,1,1
"org.andengine.entity.Entity.sortChildren()",1,1,1
"org.andengine.entity.Entity.sortChildren(IEntityComparator)",2,1,2
"org.andengine.entity.Entity.sortChildren(boolean)",2,2,3
"org.andengine.entity.Entity.toString()",1,1,1
"org.andengine.entity.Entity.toString(StringBuilder)",1,5,5
"org.andengine.entity.Entity.unregisterEntityModifier(IEntityModifier)",2,1,2
"org.andengine.entity.Entity.unregisterEntityModifiers(IEntityModifierMatcher)",2,1,2
"org.andengine.entity.Entity.unregisterUpdateHandler(IUpdateHandler)",2,1,2
"org.andengine.entity.Entity.unregisterUpdateHandlers(IUpdateHandlerMatcher)",2,1,2
"org.andengine.entity.TagEntityMatcher.TagEntityMatcher(int)",1,1,1
"org.andengine.entity.TagEntityMatcher.getTag()",1,1,1
"org.andengine.entity.TagEntityMatcher.matches(IEntity)",1,1,1
"org.andengine.entity.TagEntityMatcher.setTag(int)",1,1,1
"org.andengine.entity.ZIndexSorter.ZIndexSorter()",1,1,1
"org.andengine.entity.ZIndexSorter.getInstance()",1,1,2
"org.andengine.entity.ZIndexSorter.sort(IEntity[])",1,1,1
"org.andengine.entity.ZIndexSorter.sort(IEntity[],int,int)",1,1,1
"org.andengine.entity.ZIndexSorter.sort(IList<IEntity>)",1,1,1
"org.andengine.entity.ZIndexSorter.sort(IList<IEntity>,int,int)",1,1,1
"org.andengine.entity.ZIndexSorter.sort(List<IEntity>)",1,1,1
"org.andengine.entity.ZIndexSorter.sort(List<IEntity>,int,int)",1,1,1
"org.andengine.entity.modifier.AlphaModifier.AlphaModifier(AlphaModifier)",1,1,1
"org.andengine.entity.modifier.AlphaModifier.AlphaModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.AlphaModifier.AlphaModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.AlphaModifier.AlphaModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.AlphaModifier.AlphaModifier(float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.AlphaModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.AlphaModifier.onSetInitialValue(IEntity,float)",1,1,1
"org.andengine.entity.modifier.AlphaModifier.onSetValue(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifier(float,CardinalSplineMoveModifierConfig)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifier(float,CardinalSplineMoveModifierConfig,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifier(float,CardinalSplineMoveModifierConfig,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifier(float,CardinalSplineMoveModifierConfig,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifierConfig.CardinalSplineMoveModifierConfig(int,float)",2,2,2
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifierConfig.deepCopy()",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifierConfig.deepCopyReverse()",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifierConfig.getControlPointCount()",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifierConfig.getControlPointX(int)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifierConfig.getControlPointY(int)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.CardinalSplineMoveModifierConfig.setControlPoint(int,float,float)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.cardinalSplineX(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.cardinalSplineY(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.onManagedInitialize(IEntity)",1,1,1
"org.andengine.entity.modifier.CardinalSplineMoveModifier.onManagedUpdate(float,IEntity)",1,1,2
"org.andengine.entity.modifier.CardinalSplineMoveModifier.reverse()",1,1,1
"org.andengine.entity.modifier.CatmullRomSplineMoveModifier.CatmullRomMoveModifierConfig.CatmullRomMoveModifierConfig(int)",1,1,1
"org.andengine.entity.modifier.CatmullRomSplineMoveModifier.CatmullRomSplineMoveModifier(float,CatmullRomMoveModifierConfig)",1,1,1
"org.andengine.entity.modifier.CatmullRomSplineMoveModifier.CatmullRomSplineMoveModifier(float,CatmullRomMoveModifierConfig,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.CatmullRomSplineMoveModifier.CatmullRomSplineMoveModifier(float,CatmullRomMoveModifierConfig,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.CatmullRomSplineMoveModifier.CatmullRomSplineMoveModifier(float,CatmullRomMoveModifierConfig,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(ColorModifier)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(float,Color,Color)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(float,Color,Color,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(float,Color,Color,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(float,Color,Color,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(float,float,float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.ColorModifier.ColorModifier(float,float,float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ColorModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.ColorModifier.onSetInitialValues(IEntity,float,float,float)",1,1,1
"org.andengine.entity.modifier.ColorModifier.onSetValues(IEntity,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.CubicBezierCurveMoveModifier.CubicBezierCurveMoveModifier(float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.CubicBezierCurveMoveModifier.CubicBezierCurveMoveModifier(float,float,float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.CubicBezierCurveMoveModifier.CubicBezierCurveMoveModifier(float,float,float,float,float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.CubicBezierCurveMoveModifier.CubicBezierCurveMoveModifier(float,float,float,float,float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.CubicBezierCurveMoveModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.CubicBezierCurveMoveModifier.onManagedInitialize(IEntity)",1,1,1
"org.andengine.entity.modifier.CubicBezierCurveMoveModifier.onManagedUpdate(float,IEntity)",1,1,1
"org.andengine.entity.modifier.DelayModifier.DelayModifier(DelayModifier)",1,1,1
"org.andengine.entity.modifier.DelayModifier.DelayModifier(float)",1,1,1
"org.andengine.entity.modifier.DelayModifier.DelayModifier(float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.DelayModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.DelayModifier.onManagedInitialize(IEntity)",1,1,1
"org.andengine.entity.modifier.DelayModifier.onManagedUpdate(float,IEntity)",1,1,1
"org.andengine.entity.modifier.DoubleValueChangeEntityModifier.DoubleValueChangeEntityModifier(DoubleValueChangeEntityModifier)",1,1,1
"org.andengine.entity.modifier.DoubleValueChangeEntityModifier.DoubleValueChangeEntityModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.DoubleValueChangeEntityModifier.DoubleValueChangeEntityModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.DoubleValueSpanEntityModifier.DoubleValueSpanEntityModifier(DoubleValueSpanEntityModifier)",1,1,1
"org.andengine.entity.modifier.DoubleValueSpanEntityModifier.DoubleValueSpanEntityModifier(float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.DoubleValueSpanEntityModifier.DoubleValueSpanEntityModifier(float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.DoubleValueSpanEntityModifier.DoubleValueSpanEntityModifier(float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.DoubleValueSpanEntityModifier.DoubleValueSpanEntityModifier(float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.DurationEntityModifier.DurationEntityModifier(DurationEntityModifier)",1,1,1
"org.andengine.entity.modifier.DurationEntityModifier.DurationEntityModifier(float)",1,1,1
"org.andengine.entity.modifier.DurationEntityModifier.DurationEntityModifier(float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.EntityModifier.EntityModifier()",1,1,1
"org.andengine.entity.modifier.EntityModifier.EntityModifier(IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.EntityModifierList.EntityModifierList(IEntity)",1,1,1
"org.andengine.entity.modifier.EntityModifierList.EntityModifierList(IEntity,int)",1,1,1
"org.andengine.entity.modifier.FadeInModifier.FadeInModifier(FadeInModifier)",1,1,1
"org.andengine.entity.modifier.FadeInModifier.FadeInModifier(float)",1,1,1
"org.andengine.entity.modifier.FadeInModifier.FadeInModifier(float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.FadeInModifier.FadeInModifier(float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.FadeInModifier.FadeInModifier(float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.FadeInModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.FadeOutModifier.FadeOutModifier(FadeOutModifier)",1,1,1
"org.andengine.entity.modifier.FadeOutModifier.FadeOutModifier(float)",1,1,1
"org.andengine.entity.modifier.FadeOutModifier.FadeOutModifier(float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.FadeOutModifier.FadeOutModifier(float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.FadeOutModifier.FadeOutModifier(float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.FadeOutModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(JumpModifier)",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(float,float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(float,float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(float,float,float,float,float,float,int)",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(float,float,float,float,float,float,int,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(float,float,float,float,float,float,int,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.JumpModifier.JumpModifier(float,float,float,float,float,float,int,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.JumpModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.JumpModifier.onSetValues(IEntity,float,float,float)",1,1,1
"org.andengine.entity.modifier.LoopEntityModifier.LoopEntityModifier(IEntityModifier)",1,1,1
"org.andengine.entity.modifier.LoopEntityModifier.LoopEntityModifier(IEntityModifier,int)",1,1,1
"org.andengine.entity.modifier.LoopEntityModifier.LoopEntityModifier(IEntityModifier,int,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.LoopEntityModifier.LoopEntityModifier(IEntityModifier,int,ILoopEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.LoopEntityModifier.LoopEntityModifier(IEntityModifierListener,int,ILoopEntityModifierListener,IEntityModifier)",1,1,1
"org.andengine.entity.modifier.LoopEntityModifier.LoopEntityModifier(LoopEntityModifier)",1,1,1
"org.andengine.entity.modifier.LoopEntityModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.MoveByModifier.MoveByModifier(DoubleValueChangeEntityModifier)",1,1,1
"org.andengine.entity.modifier.MoveByModifier.MoveByModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.MoveByModifier.MoveByModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.MoveByModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.MoveByModifier.onChangeValues(float,IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.MoveModifier.MoveModifier(MoveModifier)",1,1,1
"org.andengine.entity.modifier.MoveModifier.MoveModifier(float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.MoveModifier.MoveModifier(float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.MoveModifier.MoveModifier(float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.MoveModifier.MoveModifier(float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.MoveModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.MoveModifier.onSetInitialValues(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.MoveModifier.onSetValues(IEntity,float,float,float)",1,1,1
"org.andengine.entity.modifier.MoveXModifier.MoveXModifier(MoveXModifier)",1,1,1
"org.andengine.entity.modifier.MoveXModifier.MoveXModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.MoveXModifier.MoveXModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.MoveXModifier.MoveXModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.MoveXModifier.MoveXModifier(float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.MoveXModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.MoveXModifier.onSetInitialValue(IEntity,float)",1,1,1
"org.andengine.entity.modifier.MoveXModifier.onSetValue(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.MoveYModifier.MoveYModifier(MoveYModifier)",1,1,1
"org.andengine.entity.modifier.MoveYModifier.MoveYModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.MoveYModifier.MoveYModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.MoveYModifier.MoveYModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.MoveYModifier.MoveYModifier(float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.MoveYModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.MoveYModifier.onSetInitialValue(IEntity,float)",1,1,1
"org.andengine.entity.modifier.MoveYModifier.onSetValue(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.ParallelEntityModifier.ParallelEntityModifier(IEntityModifier...)",1,1,1
"org.andengine.entity.modifier.ParallelEntityModifier.ParallelEntityModifier(IEntityModifierListener,IEntityModifier...)",1,1,1
"org.andengine.entity.modifier.ParallelEntityModifier.ParallelEntityModifier(ParallelEntityModifier)",1,1,1
"org.andengine.entity.modifier.ParallelEntityModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.Path(Path)",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.Path(float[],float[])",2,1,2
"org.andengine.entity.modifier.PathModifier.Path.Path(int)",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.deepCopy()",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.getCoordinatesX()",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.getCoordinatesY()",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.getLength()",1,2,2
"org.andengine.entity.modifier.PathModifier.Path.getSegmentLength(int)",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.getSize()",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.to(float,float)",1,1,1
"org.andengine.entity.modifier.PathModifier.Path.updateLength()",1,2,2
"org.andengine.entity.modifier.PathModifier.PathModifier(PathModifier)",1,1,1
"org.andengine.entity.modifier.PathModifier.PathModifier(float,Path)",1,1,1
"org.andengine.entity.modifier.PathModifier.PathModifier(float,Path,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.PathModifier.PathModifier(float,Path,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.PathModifier.PathModifier(float,Path,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.PathModifier.PathModifier(float,Path,IEntityModifierListener,IPathModifierListener)",1,1,1
"org.andengine.entity.modifier.PathModifier.PathModifier(float,Path,IEntityModifierListener,IPathModifierListener,IEaseFunction)",2,6,7
"org.andengine.entity.modifier.PathModifier.PathModifier(float,Path,IPathModifierListener)",1,1,1
"org.andengine.entity.modifier.PathModifier.PathModifier(float,Path,IPathModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.PathModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.PathModifier.getDuration()",1,1,1
"org.andengine.entity.modifier.PathModifier.getPath()",1,1,1
"org.andengine.entity.modifier.PathModifier.getPathModifierListener()",1,1,1
"org.andengine.entity.modifier.PathModifier.getSecondsElapsed()",1,1,1
"org.andengine.entity.modifier.PathModifier.isFinished()",1,1,1
"org.andengine.entity.modifier.PathModifier.onUpdate(float,IEntity)",1,1,1
"org.andengine.entity.modifier.PathModifier.reset()",1,1,1
"org.andengine.entity.modifier.PathModifier.setPathModifierListener(IPathModifierListener)",1,1,1
"org.andengine.entity.modifier.QuadraticBezierCurveMoveModifier.QuadraticBezierCurveMoveModifier(float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.QuadraticBezierCurveMoveModifier.QuadraticBezierCurveMoveModifier(float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.QuadraticBezierCurveMoveModifier.QuadraticBezierCurveMoveModifier(float,float,float,float,float,float,float,IEaseFunction,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.QuadraticBezierCurveMoveModifier.QuadraticBezierCurveMoveModifier(float,float,float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.QuadraticBezierCurveMoveModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.QuadraticBezierCurveMoveModifier.onManagedInitialize(IEntity)",1,1,1
"org.andengine.entity.modifier.QuadraticBezierCurveMoveModifier.onManagedUpdate(float,IEntity)",1,1,1
"org.andengine.entity.modifier.RotationAtModifier.RotationAtModifier(RotationAtModifier)",1,1,1
"org.andengine.entity.modifier.RotationAtModifier.RotationAtModifier(float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.RotationAtModifier.RotationAtModifier(float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.RotationAtModifier.RotationAtModifier(float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.RotationAtModifier.RotationAtModifier(float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.RotationAtModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.RotationAtModifier.onManagedInitialize(IEntity)",1,1,1
"org.andengine.entity.modifier.RotationByModifier.RotationByModifier(RotationByModifier)",1,1,1
"org.andengine.entity.modifier.RotationByModifier.RotationByModifier(float,float)",1,1,1
"org.andengine.entity.modifier.RotationByModifier.RotationByModifier(float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.RotationByModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.RotationByModifier.onChangeValue(float,IEntity,float)",1,1,1
"org.andengine.entity.modifier.RotationModifier.RotationModifier(RotationModifier)",1,1,1
"org.andengine.entity.modifier.RotationModifier.RotationModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.RotationModifier.RotationModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.RotationModifier.RotationModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.RotationModifier.RotationModifier(float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.RotationModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.RotationModifier.onSetInitialValue(IEntity,float)",1,1,1
"org.andengine.entity.modifier.RotationModifier.onSetValue(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(ScaleAtModifier)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(float,float,float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.ScaleAtModifier(float,float,float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.ScaleAtModifier.onManagedInitialize(IEntity)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(ScaleModifier)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.ScaleModifier(float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.ScaleModifier.onSetInitialValues(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.ScaleModifier.onSetValues(IEntity,float,float,float)",1,1,1
"org.andengine.entity.modifier.SequenceEntityModifier.SequenceEntityModifier(IEntityModifier...)",1,1,1
"org.andengine.entity.modifier.SequenceEntityModifier.SequenceEntityModifier(IEntityModifierListener,IEntityModifier...)",1,1,1
"org.andengine.entity.modifier.SequenceEntityModifier.SequenceEntityModifier(ISubSequenceShapeModifierListener,IEntityModifier...)",1,1,1
"org.andengine.entity.modifier.SequenceEntityModifier.SequenceEntityModifier(ISubSequenceShapeModifierListener,IEntityModifierListener,IEntityModifier...)",1,1,1
"org.andengine.entity.modifier.SequenceEntityModifier.SequenceEntityModifier(SequenceEntityModifier)",1,1,1
"org.andengine.entity.modifier.SequenceEntityModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.SingleValueChangeEntityModifier.SingleValueChangeEntityModifier(SingleValueChangeEntityModifier)",1,1,1
"org.andengine.entity.modifier.SingleValueChangeEntityModifier.SingleValueChangeEntityModifier(float,float)",1,1,1
"org.andengine.entity.modifier.SingleValueChangeEntityModifier.SingleValueChangeEntityModifier(float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.SingleValueSpanEntityModifier.SingleValueSpanEntityModifier(SingleValueSpanEntityModifier)",1,1,1
"org.andengine.entity.modifier.SingleValueSpanEntityModifier.SingleValueSpanEntityModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.SingleValueSpanEntityModifier.SingleValueSpanEntityModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.SingleValueSpanEntityModifier.SingleValueSpanEntityModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.SingleValueSpanEntityModifier.SingleValueSpanEntityModifier(float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.SkewModifier.SkewModifier(SkewModifier)",1,1,1
"org.andengine.entity.modifier.SkewModifier.SkewModifier(float,float,float,float,float)",1,1,1
"org.andengine.entity.modifier.SkewModifier.SkewModifier(float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.SkewModifier.SkewModifier(float,float,float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.SkewModifier.SkewModifier(float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.SkewModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.SkewModifier.onSetInitialValues(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.SkewModifier.onSetValues(IEntity,float,float,float)",1,1,1
"org.andengine.entity.modifier.SkewXModifier.SkewXModifier(SkewXModifier)",1,1,1
"org.andengine.entity.modifier.SkewXModifier.SkewXModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.SkewXModifier.SkewXModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.SkewXModifier.SkewXModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.SkewXModifier.SkewXModifier(float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.SkewXModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.SkewXModifier.onSetInitialValue(IEntity,float)",1,1,1
"org.andengine.entity.modifier.SkewXModifier.onSetValue(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.SkewYModifier.SkewYModifier(SkewYModifier)",1,1,1
"org.andengine.entity.modifier.SkewYModifier.SkewYModifier(float,float,float)",1,1,1
"org.andengine.entity.modifier.SkewYModifier.SkewYModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.SkewYModifier.SkewYModifier(float,float,float,IEntityModifierListener)",1,1,1
"org.andengine.entity.modifier.SkewYModifier.SkewYModifier(float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.SkewYModifier.deepCopy()",1,1,1
"org.andengine.entity.modifier.SkewYModifier.onSetInitialValue(IEntity,float)",1,1,1
"org.andengine.entity.modifier.SkewYModifier.onSetValue(IEntity,float,float)",1,1,1
"org.andengine.entity.modifier.TripleValueSpanEntityModifier.TripleValueSpanEntityModifier(TripleValueSpanEntityModifier)",1,1,1
"org.andengine.entity.modifier.TripleValueSpanEntityModifier.TripleValueSpanEntityModifier(float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.modifier.TripleValueSpanEntityModifier.TripleValueSpanEntityModifier(float,float,float,float,float,float,float,IEntityModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.particle.BatchedPseudoSpriteParticleSystem.BatchedPseudoSpriteParticleSystem(IParticleEmitter,float,float,int,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.particle.BatchedPseudoSpriteParticleSystem.BatchedPseudoSpriteParticleSystem(float,float,IParticleEmitter,float,float,int,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.particle.BatchedPseudoSpriteParticleSystem.onManagedDraw(GLState,Camera)",1,2,2
"org.andengine.entity.particle.BatchedSpriteParticleSystem.BatchedSpriteParticleSystem(IParticleEmitter,float,float,int,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.particle.BatchedSpriteParticleSystem.BatchedSpriteParticleSystem(float,float,IParticleEmitter,float,float,int,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.particle.BatchedSpriteParticleSystem.onManagedDraw(GLState,Camera)",1,2,2
"org.andengine.entity.particle.BlendFunctionParticleSystem.BlendFunctionParticleSystem(IEntityFactory<T>,IParticleEmitter,float,float,int)",1,1,1
"org.andengine.entity.particle.BlendFunctionParticleSystem.BlendFunctionParticleSystem(float,float,IEntityFactory<T>,IParticleEmitter,float,float,int)",1,1,1
"org.andengine.entity.particle.BlendFunctionParticleSystem.getBlendFunctionDestination()",1,1,1
"org.andengine.entity.particle.BlendFunctionParticleSystem.getBlendFunctionSource()",1,1,1
"org.andengine.entity.particle.BlendFunctionParticleSystem.isBlendingEnabled()",1,1,1
"org.andengine.entity.particle.BlendFunctionParticleSystem.postDraw(GLState,Camera)",1,2,2
"org.andengine.entity.particle.BlendFunctionParticleSystem.preDraw(GLState,Camera)",1,2,2
"org.andengine.entity.particle.BlendFunctionParticleSystem.setBlendFunction(int,int)",1,1,1
"org.andengine.entity.particle.BlendFunctionParticleSystem.setBlendFunctionDestination(int)",1,1,1
"org.andengine.entity.particle.BlendFunctionParticleSystem.setBlendFunctionSource(int)",1,1,1
"org.andengine.entity.particle.BlendFunctionParticleSystem.setBlendingEnabled(boolean)",1,1,1
"org.andengine.entity.particle.Particle.getEntity()",1,1,1
"org.andengine.entity.particle.Particle.getExpireTime()",1,1,1
"org.andengine.entity.particle.Particle.getLifeTime()",1,1,1
"org.andengine.entity.particle.Particle.getPhysicsHandler()",1,1,1
"org.andengine.entity.particle.Particle.isExpired()",1,1,1
"org.andengine.entity.particle.Particle.onDraw(GLState,Camera)",1,2,2
"org.andengine.entity.particle.Particle.onUpdate(float)",1,3,4
"org.andengine.entity.particle.Particle.reset()",1,1,1
"org.andengine.entity.particle.Particle.setEntity(T)",1,1,1
"org.andengine.entity.particle.Particle.setExpireTime(float)",1,1,1
"org.andengine.entity.particle.Particle.setExpired(boolean)",1,1,1
"org.andengine.entity.particle.ParticleSystem.ParticleSystem(IEntityFactory<T>,IParticleEmitter,float,float,int)",1,1,1
"org.andengine.entity.particle.ParticleSystem.ParticleSystem(float,float,IEntityFactory<T>,IParticleEmitter,float,float,int)",1,1,1
"org.andengine.entity.particle.ParticleSystem.addParticleInitializer(IParticleInitializer<T>)",1,1,1
"org.andengine.entity.particle.ParticleSystem.addParticleModifier(IParticleModifier<T>)",1,1,1
"org.andengine.entity.particle.ParticleSystem.determineCurrentRate()",2,2,2
"org.andengine.entity.particle.ParticleSystem.getParticleEmitter()",1,1,1
"org.andengine.entity.particle.ParticleSystem.getParticleFactory()",1,1,1
"org.andengine.entity.particle.ParticleSystem.isParticlesSpawnEnabled()",1,1,1
"org.andengine.entity.particle.ParticleSystem.moveParticleToEnd(int)",1,2,2
"org.andengine.entity.particle.ParticleSystem.onManagedDraw(GLState,Camera)",1,2,2
"org.andengine.entity.particle.ParticleSystem.onManagedUpdate(float)",1,5,5
"org.andengine.entity.particle.ParticleSystem.removeParticleInitializer(IParticleInitializer<T>)",1,1,1
"org.andengine.entity.particle.ParticleSystem.removeParticleModifier(IParticleModifier<T>)",1,1,1
"org.andengine.entity.particle.ParticleSystem.reset()",1,1,1
"org.andengine.entity.particle.ParticleSystem.setParticlesSpawnEnabled(boolean)",1,1,1
"org.andengine.entity.particle.ParticleSystem.spawnParticle()",1,5,5
"org.andengine.entity.particle.ParticleSystem.spawnParticles(float)",1,2,2
"org.andengine.entity.particle.SpriteParticleSystem.SpriteParticleSystem(IParticleEmitter,float,float,int,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.particle.SpriteParticleSystem.SpriteParticleSystem(float,float,IEntityFactory<Sprite>,IParticleEmitter,float,float,int)",1,1,1
"org.andengine.entity.particle.SpriteParticleSystem.SpriteParticleSystem(float,float,IParticleEmitter,float,float,int,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.particle.emitter.BaseCircleParticleEmitter.BaseCircleParticleEmitter(float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.BaseCircleParticleEmitter.BaseCircleParticleEmitter(float,float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.BaseCircleParticleEmitter.getRadiusX()",1,1,1
"org.andengine.entity.particle.emitter.BaseCircleParticleEmitter.getRadiusY()",1,1,1
"org.andengine.entity.particle.emitter.BaseCircleParticleEmitter.setRadius(float)",1,1,1
"org.andengine.entity.particle.emitter.BaseCircleParticleEmitter.setRadius(float,float)",1,1,1
"org.andengine.entity.particle.emitter.BaseCircleParticleEmitter.setRadiusX(float)",1,1,1
"org.andengine.entity.particle.emitter.BaseCircleParticleEmitter.setRadiusY(float)",1,1,1
"org.andengine.entity.particle.emitter.BaseParticleEmitter.BaseParticleEmitter(float,float)",1,1,1
"org.andengine.entity.particle.emitter.BaseParticleEmitter.getCenterX()",1,1,1
"org.andengine.entity.particle.emitter.BaseParticleEmitter.getCenterY()",1,1,1
"org.andengine.entity.particle.emitter.BaseParticleEmitter.onUpdate(float)",1,1,1
"org.andengine.entity.particle.emitter.BaseParticleEmitter.reset()",1,1,1
"org.andengine.entity.particle.emitter.BaseParticleEmitter.setCenter(float,float)",1,1,1
"org.andengine.entity.particle.emitter.BaseParticleEmitter.setCenterX(float)",1,1,1
"org.andengine.entity.particle.emitter.BaseParticleEmitter.setCenterY(float)",1,1,1
"org.andengine.entity.particle.emitter.BaseRectangleParticleEmitter.BaseRectangleParticleEmitter(float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.BaseRectangleParticleEmitter.BaseRectangleParticleEmitter(float,float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.BaseRectangleParticleEmitter.getHeight()",1,1,1
"org.andengine.entity.particle.emitter.BaseRectangleParticleEmitter.getWidth()",1,1,1
"org.andengine.entity.particle.emitter.BaseRectangleParticleEmitter.setHeight(float)",1,1,1
"org.andengine.entity.particle.emitter.BaseRectangleParticleEmitter.setWidth(float)",1,1,1
"org.andengine.entity.particle.emitter.CircleOutlineParticleEmitter.CircleOutlineParticleEmitter(float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.CircleOutlineParticleEmitter.CircleOutlineParticleEmitter(float,float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.CircleOutlineParticleEmitter.getPositionOffset(float[])",1,1,1
"org.andengine.entity.particle.emitter.CircleParticleEmitter.CircleParticleEmitter(float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.CircleParticleEmitter.CircleParticleEmitter(float,float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.CircleParticleEmitter.getPositionOffset(float[])",1,1,1
"org.andengine.entity.particle.emitter.PointParticleEmitter.PointParticleEmitter(float,float)",1,1,1
"org.andengine.entity.particle.emitter.PointParticleEmitter.getPositionOffset(float[])",1,1,1
"org.andengine.entity.particle.emitter.RectangleOutlineParticleEmitter.RectangleOutlineParticleEmitter(float,float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.RectangleOutlineParticleEmitter.getPositionOffset(float[])",1,1,1
"org.andengine.entity.particle.emitter.RectangleParticleEmitter.RectangleParticleEmitter(float,float,float,float)",1,1,1
"org.andengine.entity.particle.emitter.RectangleParticleEmitter.getPositionOffset(float[])",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.AccelerationParticleInitializer(float)",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.AccelerationParticleInitializer(float,float)",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.AccelerationParticleInitializer(float,float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.getMaxAccelerationX()",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.getMaxAccelerationY()",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.getMinAccelerationX()",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.getMinAccelerationY()",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.onInitializeParticle(Particle<T>,float,float)",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.setAcceleration(float,float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.setAccelerationX(float)",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.setAccelerationX(float,float)",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.setAccelerationY(float)",1,1,1
"org.andengine.entity.particle.initializer.AccelerationParticleInitializer.setAccelerationY(float,float)",1,1,1
"org.andengine.entity.particle.initializer.AlphaParticleInitializer.AlphaParticleInitializer(float)",1,1,1
"org.andengine.entity.particle.initializer.AlphaParticleInitializer.AlphaParticleInitializer(float,float)",1,1,1
"org.andengine.entity.particle.initializer.AlphaParticleInitializer.onInitializeParticle(Particle<T>,float)",1,1,1
"org.andengine.entity.particle.initializer.BaseDoubleValueParticleInitializer.BaseDoubleValueParticleInitializer(float,float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.BaseDoubleValueParticleInitializer.getRandomValueB()",2,2,2
"org.andengine.entity.particle.initializer.BaseDoubleValueParticleInitializer.onInitializeParticle(Particle<T>,float)",1,1,1
"org.andengine.entity.particle.initializer.BaseSingleValueParticleInitializer.BaseSingleValueParticleInitializer(float,float)",1,1,1
"org.andengine.entity.particle.initializer.BaseSingleValueParticleInitializer.getRandomValue()",2,2,2
"org.andengine.entity.particle.initializer.BaseSingleValueParticleInitializer.onInitializeParticle(Particle<T>)",1,1,1
"org.andengine.entity.particle.initializer.BaseTripleValueParticleInitializer.BaseTripleValueParticleInitializer(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.BaseTripleValueParticleInitializer.getRandomValueC()",2,2,2
"org.andengine.entity.particle.initializer.BaseTripleValueParticleInitializer.onInitializeParticle(Particle<T>,float,float)",1,1,1
"org.andengine.entity.particle.initializer.BlendFunctionParticleInitializer.BlendFunctionParticleInitializer(int,int)",1,1,1
"org.andengine.entity.particle.initializer.BlendFunctionParticleInitializer.onInitializeParticle(Particle<T>)",1,1,1
"org.andengine.entity.particle.initializer.ColorParticleInitializer.ColorParticleInitializer(Color)",1,1,1
"org.andengine.entity.particle.initializer.ColorParticleInitializer.ColorParticleInitializer(Color,Color)",1,1,1
"org.andengine.entity.particle.initializer.ColorParticleInitializer.ColorParticleInitializer(float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.ColorParticleInitializer.ColorParticleInitializer(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.ColorParticleInitializer.onInitializeParticle(Particle<T>,float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.GravityParticleInitializer.GravityParticleInitializer()",1,1,1
"org.andengine.entity.particle.initializer.RotationParticleInitializer.RotationParticleInitializer(float)",1,1,1
"org.andengine.entity.particle.initializer.RotationParticleInitializer.RotationParticleInitializer(float,float)",1,1,1
"org.andengine.entity.particle.initializer.RotationParticleInitializer.getMaxRotation()",1,1,1
"org.andengine.entity.particle.initializer.RotationParticleInitializer.getMinRotation()",1,1,1
"org.andengine.entity.particle.initializer.RotationParticleInitializer.onInitializeParticle(Particle<T>,float)",1,1,1
"org.andengine.entity.particle.initializer.RotationParticleInitializer.setRotation(float)",1,1,1
"org.andengine.entity.particle.initializer.RotationParticleInitializer.setRotation(float,float)",1,1,1
"org.andengine.entity.particle.initializer.ScaleParticleInitializer.ScaleParticleInitializer(float)",1,1,1
"org.andengine.entity.particle.initializer.ScaleParticleInitializer.ScaleParticleInitializer(float,float)",1,1,1
"org.andengine.entity.particle.initializer.ScaleParticleInitializer.onInitializeParticle(Particle<T>,float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.VelocityParticleInitializer(float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.VelocityParticleInitializer(float,float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.VelocityParticleInitializer(float,float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.getMaxVelocityX()",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.getMaxVelocityY()",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.getMinVelocityX()",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.getMinVelocityY()",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.onInitializeParticle(Particle<T>,float,float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.setVelocity(float,float,float,float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.setVelocityX(float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.setVelocityX(float,float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.setVelocityY(float)",1,1,1
"org.andengine.entity.particle.initializer.VelocityParticleInitializer.setVelocityY(float,float)",1,1,1
"org.andengine.entity.particle.modifier.AlphaParticleModifier.AlphaParticleModifier(float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.AlphaParticleModifier.AlphaParticleModifier(float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.particle.modifier.AlphaParticleModifier.onSetInitialValue(Particle<T>,float)",1,1,1
"org.andengine.entity.particle.modifier.AlphaParticleModifier.onSetValue(Particle<T>,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseDoubleValueSpanParticleModifier.BaseDoubleValueSpanParticleModifier(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseDoubleValueSpanParticleModifier.BaseDoubleValueSpanParticleModifier(float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.particle.modifier.BaseDoubleValueSpanParticleModifier.onSetInitialValue(Particle<T>,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseDoubleValueSpanParticleModifier.onSetValue(Particle<T>,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseDoubleValueSpanParticleModifier.reset(float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseDoubleValueSpanParticleModifier.reset(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseSingleValueSpanParticleModifier.BaseSingleValueSpanParticleModifier(float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseSingleValueSpanParticleModifier.BaseSingleValueSpanParticleModifier(float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.particle.modifier.BaseSingleValueSpanParticleModifier.onInitializeParticle(Particle<T>)",1,1,1
"org.andengine.entity.particle.modifier.BaseSingleValueSpanParticleModifier.onUpdateParticle(Particle<T>)",1,2,3
"org.andengine.entity.particle.modifier.BaseSingleValueSpanParticleModifier.reset(float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseTripleValueSpanParticleModifier.BaseTripleValueSpanParticleModifier(float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseTripleValueSpanParticleModifier.BaseTripleValueSpanParticleModifier(float,float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.particle.modifier.BaseTripleValueSpanParticleModifier.onSetInitialValues(Particle<T>,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseTripleValueSpanParticleModifier.onSetValues(Particle<T>,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseTripleValueSpanParticleModifier.reset(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.BaseTripleValueSpanParticleModifier.reset(float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.ColorParticleModifier.ColorParticleModifier(float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.ColorParticleModifier.ColorParticleModifier(float,float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.particle.modifier.ColorParticleModifier.onSetInitialValues(Particle<T>,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.ColorParticleModifier.onSetValues(Particle<T>,float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.ExpireParticleInitializer.ExpireParticleInitializer(float)",1,1,1
"org.andengine.entity.particle.modifier.ExpireParticleInitializer.ExpireParticleInitializer(float,float)",1,1,1
"org.andengine.entity.particle.modifier.ExpireParticleInitializer.getMaxLifeTime()",1,1,1
"org.andengine.entity.particle.modifier.ExpireParticleInitializer.getMinLifeTime()",1,1,1
"org.andengine.entity.particle.modifier.ExpireParticleInitializer.onInitializeParticle(Particle<T>)",1,1,1
"org.andengine.entity.particle.modifier.ExpireParticleInitializer.setLifeTime(float)",1,1,1
"org.andengine.entity.particle.modifier.ExpireParticleInitializer.setLifeTime(float,float)",1,1,1
"org.andengine.entity.particle.modifier.OffCameraExpireParticleModifier.OffCameraExpireParticleModifier(Camera)",1,1,1
"org.andengine.entity.particle.modifier.OffCameraExpireParticleModifier.getCamera()",1,1,1
"org.andengine.entity.particle.modifier.OffCameraExpireParticleModifier.onInitializeParticle(Particle<T>)",1,1,1
"org.andengine.entity.particle.modifier.OffCameraExpireParticleModifier.onUpdateParticle(Particle<T>)",1,2,2
"org.andengine.entity.particle.modifier.RotationParticleModifier.RotationParticleModifier(float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.RotationParticleModifier.RotationParticleModifier(float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.particle.modifier.RotationParticleModifier.onSetInitialValue(Particle<T>,float)",1,1,1
"org.andengine.entity.particle.modifier.RotationParticleModifier.onSetValue(Particle<T>,float,float)",1,1,1
"org.andengine.entity.particle.modifier.ScaleParticleModifier.ScaleParticleModifier(float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.ScaleParticleModifier.ScaleParticleModifier(float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.particle.modifier.ScaleParticleModifier.ScaleParticleModifier(float,float,float,float,float,float)",1,1,1
"org.andengine.entity.particle.modifier.ScaleParticleModifier.ScaleParticleModifier(float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.particle.modifier.ScaleParticleModifier.onSetInitialValues(Particle<T>,float,float)",1,1,1
"org.andengine.entity.particle.modifier.ScaleParticleModifier.onSetValues(Particle<T>,float,float,float)",1,1,1
"org.andengine.entity.primitive.DrawMode.DrawMode(int)",1,1,1
"org.andengine.entity.primitive.DrawMode.getDrawMode()",1,1,1
"org.andengine.entity.primitive.Line.Line(float,float,float,float,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.primitive.Line.Line(float,float,float,float,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.primitive.Line.Line(float,float,float,float,float,ILineVertexBufferObject)",1,1,1
"org.andengine.entity.primitive.Line.Line(float,float,float,float,float,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.primitive.Line.Line(float,float,float,float,float,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.primitive.Line.collidesWith(IShape)",3,3,3
"org.andengine.entity.primitive.Line.contains(float,float)",1,1,1
"org.andengine.entity.primitive.Line.draw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.Line.getLineWidth()",1,1,1
"org.andengine.entity.primitive.Line.getSceneCenterCoordinates()",1,1,1
"org.andengine.entity.primitive.Line.getSceneCenterCoordinates(float[])",1,1,1
"org.andengine.entity.primitive.Line.getVertexBufferObject()",1,1,1
"org.andengine.entity.primitive.Line.getX()",1,1,1
"org.andengine.entity.primitive.Line.getX1()",1,1,1
"org.andengine.entity.primitive.Line.getX2()",1,1,1
"org.andengine.entity.primitive.Line.getY()",1,1,1
"org.andengine.entity.primitive.Line.getY1()",1,1,1
"org.andengine.entity.primitive.Line.getY2()",1,1,1
"org.andengine.entity.primitive.Line.isCulled(Camera)",1,1,1
"org.andengine.entity.primitive.Line.onUpdateColor()",1,1,1
"org.andengine.entity.primitive.Line.onUpdateVertices()",1,1,1
"org.andengine.entity.primitive.Line.postDraw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.Line.preDraw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.Line.setLineWidth(float)",1,1,1
"org.andengine.entity.primitive.Line.setPosition(float,float)",1,1,1
"org.andengine.entity.primitive.Line.setPosition(float,float,float,float)",1,1,1
"org.andengine.entity.primitive.Line.setX(float)",1,1,1
"org.andengine.entity.primitive.Line.setY(float)",1,1,1
"org.andengine.entity.primitive.Mesh.Mesh(float,float,float[],int,DrawMode,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.primitive.Mesh.Mesh(float,float,float[],int,DrawMode,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.primitive.Mesh.Mesh(float,float,int,DrawMode,IMeshVertexBufferObject)",1,1,1
"org.andengine.entity.primitive.Mesh.collidesWith(IShape)",3,1,3
"org.andengine.entity.primitive.Mesh.contains(float,float)",1,1,1
"org.andengine.entity.primitive.Mesh.draw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.Mesh.getBufferData()",1,1,1
"org.andengine.entity.primitive.Mesh.getVertexBufferObject()",1,1,1
"org.andengine.entity.primitive.Mesh.onUpdateColor()",1,1,1
"org.andengine.entity.primitive.Mesh.onUpdateVertices()",1,1,1
"org.andengine.entity.primitive.Mesh.postDraw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.Mesh.preDraw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.Mesh.setDrawMode(DrawMode)",1,1,1
"org.andengine.entity.primitive.Mesh.setVertexCountToDraw(int)",1,1,1
"org.andengine.entity.primitive.Rectangle.Rectangle(float,float,float,float,IRectangleVertexBufferObject)",1,1,1
"org.andengine.entity.primitive.Rectangle.Rectangle(float,float,float,float,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.primitive.Rectangle.Rectangle(float,float,float,float,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.primitive.Rectangle.draw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.Rectangle.getVertexBufferObject()",1,1,1
"org.andengine.entity.primitive.Rectangle.onUpdateColor()",1,1,1
"org.andengine.entity.primitive.Rectangle.onUpdateVertices()",1,1,1
"org.andengine.entity.primitive.Rectangle.postDraw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.Rectangle.preDraw(GLState,Camera)",1,1,1
"org.andengine.entity.primitive.vbo.HighPerformanceLineVertexBufferObject.HighPerformanceLineVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.primitive.vbo.HighPerformanceLineVertexBufferObject.onUpdateColor(Line)",1,1,1
"org.andengine.entity.primitive.vbo.HighPerformanceLineVertexBufferObject.onUpdateVertices(Line)",1,1,1
"org.andengine.entity.primitive.vbo.HighPerformanceMeshVertexBufferObject.HighPerformanceMeshVertexBufferObject(VertexBufferObjectManager,float[],int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.primitive.vbo.HighPerformanceMeshVertexBufferObject.onUpdateColor(Mesh)",1,1,2
"org.andengine.entity.primitive.vbo.HighPerformanceMeshVertexBufferObject.onUpdateVertices(Mesh)",1,1,1
"org.andengine.entity.primitive.vbo.HighPerformanceRectangleVertexBufferObject.HighPerformanceRectangleVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.primitive.vbo.HighPerformanceRectangleVertexBufferObject.onUpdateColor(Rectangle)",1,1,1
"org.andengine.entity.primitive.vbo.HighPerformanceRectangleVertexBufferObject.onUpdateVertices(Rectangle)",1,1,1
"org.andengine.entity.primitive.vbo.LowMemoryLineVertexBufferObject.LowMemoryLineVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.primitive.vbo.LowMemoryLineVertexBufferObject.onUpdateColor(Line)",1,1,1
"org.andengine.entity.primitive.vbo.LowMemoryLineVertexBufferObject.onUpdateVertices(Line)",1,1,1
"org.andengine.entity.primitive.vbo.LowMemoryRectangleVertexBufferObject.LowMemoryRectangleVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.primitive.vbo.LowMemoryRectangleVertexBufferObject.onUpdateColor(Rectangle)",1,1,1
"org.andengine.entity.primitive.vbo.LowMemoryRectangleVertexBufferObject.onUpdateVertices(Rectangle)",1,1,1
"org.andengine.entity.scene.CameraScene.CameraScene()",1,1,1
"org.andengine.entity.scene.CameraScene.CameraScene(Camera)",1,1,1
"org.andengine.entity.scene.CameraScene.centerShapeInCamera(IAreaShape)",1,1,1
"org.andengine.entity.scene.CameraScene.centerShapeInCameraHorizontally(IAreaShape)",1,1,1
"org.andengine.entity.scene.CameraScene.centerShapeInCameraVertically(IAreaShape)",1,1,1
"org.andengine.entity.scene.CameraScene.getCamera()",1,1,1
"org.andengine.entity.scene.CameraScene.onApplyMatrix(GLState,Camera)",1,1,1
"org.andengine.entity.scene.CameraScene.onChildSceneTouchEvent(TouchEvent)",2,2,2
"org.andengine.entity.scene.CameraScene.onSceneTouchEvent(TouchEvent)",3,3,3
"org.andengine.entity.scene.CameraScene.setCamera(Camera)",1,1,1
"org.andengine.entity.scene.Scene.Scene()",1,1,1
"org.andengine.entity.scene.Scene.Scene(int)",1,2,2
"org.andengine.entity.scene.Scene.back()",1,2,2
"org.andengine.entity.scene.Scene.clearChildScene()",1,1,1
"org.andengine.entity.scene.Scene.clearTouchAreas()",1,1,1
"org.andengine.entity.scene.Scene.getBackground()",1,1,1
"org.andengine.entity.scene.Scene.getChildScene()",1,1,1
"org.andengine.entity.scene.Scene.getOnAreaTouchListener()",1,1,1
"org.andengine.entity.scene.Scene.getOnSceneTouchListener()",1,1,1
"org.andengine.entity.scene.Scene.getSecondsElapsedTotal()",1,1,1
"org.andengine.entity.scene.Scene.getTouchAreas()",1,1,1
"org.andengine.entity.scene.Scene.hasChildScene()",1,1,1
"org.andengine.entity.scene.Scene.hasOnAreaTouchListener()",1,1,1
"org.andengine.entity.scene.Scene.hasOnSceneTouchListener()",1,1,1
"org.andengine.entity.scene.Scene.isBackgroundEnabled()",1,1,1
"org.andengine.entity.scene.Scene.isOnSceneTouchListenerBindingOnActionDownEnabled()",1,1,1
"org.andengine.entity.scene.Scene.isTouchAreaBindingOnActionDownEnabled()",1,1,1
"org.andengine.entity.scene.Scene.isTouchAreaBindingOnActionMoveEnabled()",1,1,1
"org.andengine.entity.scene.Scene.onApplyMatrix(GLState,Camera)",1,1,1
"org.andengine.entity.scene.Scene.onAreaTouchEvent(TouchEvent,float,float,ITouchArea)",3,3,3
"org.andengine.entity.scene.Scene.onChildSceneTouchEvent(TouchEvent)",1,1,1
"org.andengine.entity.scene.Scene.onManagedDraw(GLState,Camera)",1,4,5
"org.andengine.entity.scene.Scene.onManagedUpdate(float)",1,3,4
"org.andengine.entity.scene.Scene.onSceneTouchEvent(TouchEvent)",24,23,39
"org.andengine.entity.scene.Scene.postRunnable(Runnable)",1,1,1
"org.andengine.entity.scene.Scene.registerTouchArea(ITouchArea)",1,1,1
"org.andengine.entity.scene.Scene.reset()",1,1,1
"org.andengine.entity.scene.Scene.setBackground(IBackground)",1,1,1
"org.andengine.entity.scene.Scene.setBackgroundEnabled(boolean)",1,1,1
"org.andengine.entity.scene.Scene.setChildScene(Scene)",1,1,1
"org.andengine.entity.scene.Scene.setChildScene(Scene,boolean,boolean,boolean)",1,1,1
"org.andengine.entity.scene.Scene.setChildSceneModal(Scene)",1,1,1
"org.andengine.entity.scene.Scene.setOnAreaTouchListener(IOnAreaTouchListener)",1,1,1
"org.andengine.entity.scene.Scene.setOnAreaTouchTraversalBackToFront()",1,1,1
"org.andengine.entity.scene.Scene.setOnAreaTouchTraversalFrontToBack()",1,1,1
"org.andengine.entity.scene.Scene.setOnSceneTouchListener(IOnSceneTouchListener)",1,1,1
"org.andengine.entity.scene.Scene.setOnSceneTouchListenerBindingOnActionDownEnabled(boolean)",1,2,3
"org.andengine.entity.scene.Scene.setParent(IEntity)",1,1,1
"org.andengine.entity.scene.Scene.setParentScene(Scene)",1,1,1
"org.andengine.entity.scene.Scene.setTouchAreaBindingOnActionDownEnabled(boolean)",1,2,3
"org.andengine.entity.scene.Scene.setTouchAreaBindingOnActionMoveEnabled(boolean)",1,2,3
"org.andengine.entity.scene.Scene.unregisterTouchArea(ITouchArea)",1,1,1
"org.andengine.entity.scene.Scene.unregisterTouchAreas(ITouchAreaMatcher)",1,1,1
"org.andengine.entity.scene.background.AutoParallaxBackground.AutoParallaxBackground(float,float,float,float)",1,1,1
"org.andengine.entity.scene.background.AutoParallaxBackground.onUpdate(float)",1,1,1
"org.andengine.entity.scene.background.AutoParallaxBackground.setParallaxChangePerSecond(float)",1,1,1
"org.andengine.entity.scene.background.Background.Background()",1,1,1
"org.andengine.entity.scene.background.Background.Background(Color)",1,1,1
"org.andengine.entity.scene.background.Background.Background(float,float,float)",1,1,1
"org.andengine.entity.scene.background.Background.Background(float,float,float,float)",1,1,1
"org.andengine.entity.scene.background.Background.allocateBackgroundModifiers()",1,1,1
"org.andengine.entity.scene.background.Background.clearBackgroundModifiers()",1,2,2
"org.andengine.entity.scene.background.Background.isColorEnabled()",1,1,1
"org.andengine.entity.scene.background.Background.onDraw(GLState,Camera)",1,2,2
"org.andengine.entity.scene.background.Background.onUpdate(float)",1,2,2
"org.andengine.entity.scene.background.Background.registerBackgroundModifier(IModifier<IBackground>)",1,2,2
"org.andengine.entity.scene.background.Background.reset()",1,1,1
"org.andengine.entity.scene.background.Background.setColor(Color)",1,1,1
"org.andengine.entity.scene.background.Background.setColor(float,float,float)",1,1,1
"org.andengine.entity.scene.background.Background.setColor(float,float,float,float)",1,1,1
"org.andengine.entity.scene.background.Background.setColorEnabled(boolean)",1,1,1
"org.andengine.entity.scene.background.Background.unregisterBackgroundModifier(IModifier<IBackground>)",2,2,2
"org.andengine.entity.scene.background.EntityBackground.EntityBackground(IEntity)",1,1,1
"org.andengine.entity.scene.background.EntityBackground.EntityBackground(float,float,float,IEntity)",1,1,1
"org.andengine.entity.scene.background.EntityBackground.onDraw(GLState,Camera)",1,1,1
"org.andengine.entity.scene.background.ParallaxBackground.ParallaxBackground(float,float,float)",1,1,1
"org.andengine.entity.scene.background.ParallaxBackground.ParallaxEntity.ParallaxEntity(float,IAreaShape)",1,1,1
"org.andengine.entity.scene.background.ParallaxBackground.ParallaxEntity.onDraw(GLState,Camera,float)",1,2,3
"org.andengine.entity.scene.background.ParallaxBackground.attachParallaxEntity(ParallaxEntity)",1,1,1
"org.andengine.entity.scene.background.ParallaxBackground.detachParallaxEntity(ParallaxEntity)",1,1,2
"org.andengine.entity.scene.background.ParallaxBackground.onDraw(GLState,Camera)",1,2,2
"org.andengine.entity.scene.background.ParallaxBackground.setParallaxValue(float)",1,1,1
"org.andengine.entity.scene.background.RepeatingSpriteBackground.RepeatingSpriteBackground(float,float,TextureManager,IBitmapTextureAtlasSource,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.background.RepeatingSpriteBackground.RepeatingSpriteBackground(float,float,TextureManager,IBitmapTextureAtlasSource,float,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.background.RepeatingSpriteBackground.getBitmapTextureAtlas()",1,1,1
"org.andengine.entity.scene.background.RepeatingSpriteBackground.loadSprite(float,float,TextureManager,IBitmapTextureAtlasSource,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.background.SpriteBackground.SpriteBackground(Sprite)",1,1,1
"org.andengine.entity.scene.background.SpriteBackground.SpriteBackground(float,float,float,Sprite)",1,1,1
"org.andengine.entity.scene.background.SpriteBackground.getSprite()",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(ColorBackgroundModifier)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(float,Color,Color)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(float,Color,Color,IBackgroundModifierListener)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(float,Color,Color,IBackgroundModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(float,Color,Color,IEaseFunction)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(float,float,float,float,float,float,float,IBackgroundModifierListener)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(float,float,float,float,float,float,float,IBackgroundModifierListener,IEaseFunction)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.ColorBackgroundModifier(float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.deepCopy()",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.onSetInitialValues(IBackground,float,float,float)",1,1,1
"org.andengine.entity.scene.background.modifier.ColorBackgroundModifier.onSetValues(IBackground,float,float,float,float)",1,1,1
"org.andengine.entity.scene.background.modifier.LoopBackgroundModifier.LoopBackgroundModifier(IBackgroundModifier)",1,1,1
"org.andengine.entity.scene.background.modifier.LoopBackgroundModifier.LoopBackgroundModifier(IBackgroundModifier,int)",1,1,1
"org.andengine.entity.scene.background.modifier.LoopBackgroundModifier.LoopBackgroundModifier(IBackgroundModifier,int,IBackgroundModifierListener)",1,1,1
"org.andengine.entity.scene.background.modifier.LoopBackgroundModifier.LoopBackgroundModifier(IBackgroundModifier,int,ILoopBackgroundModifierListener)",1,1,1
"org.andengine.entity.scene.background.modifier.LoopBackgroundModifier.LoopBackgroundModifier(IBackgroundModifier,int,ILoopBackgroundModifierListener,IBackgroundModifierListener)",1,1,1
"org.andengine.entity.scene.background.modifier.LoopBackgroundModifier.LoopBackgroundModifier(LoopBackgroundModifier)",1,1,1
"org.andengine.entity.scene.background.modifier.LoopBackgroundModifier.deepCopy()",1,1,1
"org.andengine.entity.scene.background.modifier.ParallelBackgroundModifier.ParallelBackgroundModifier(IBackgroundModifier...)",1,1,1
"org.andengine.entity.scene.background.modifier.ParallelBackgroundModifier.ParallelBackgroundModifier(IBackgroundModifierListener,IBackgroundModifier...)",1,1,1
"org.andengine.entity.scene.background.modifier.ParallelBackgroundModifier.ParallelBackgroundModifier(ParallelBackgroundModifier)",1,1,1
"org.andengine.entity.scene.background.modifier.ParallelBackgroundModifier.deepCopy()",1,1,1
"org.andengine.entity.scene.background.modifier.SequenceBackgroundModifier.SequenceBackgroundModifier(IBackgroundModifier...)",1,1,1
"org.andengine.entity.scene.background.modifier.SequenceBackgroundModifier.SequenceBackgroundModifier(IBackgroundModifierListener,IBackgroundModifier...)",1,1,1
"org.andengine.entity.scene.background.modifier.SequenceBackgroundModifier.SequenceBackgroundModifier(ISubSequenceBackgroundModifierListener,IBackgroundModifier...)",1,1,1
"org.andengine.entity.scene.background.modifier.SequenceBackgroundModifier.SequenceBackgroundModifier(ISubSequenceBackgroundModifierListener,IBackgroundModifierListener,IBackgroundModifier...)",1,1,1
"org.andengine.entity.scene.background.modifier.SequenceBackgroundModifier.SequenceBackgroundModifier(SequenceBackgroundModifier)",1,1,1
"org.andengine.entity.scene.background.modifier.SequenceBackgroundModifier.deepCopy()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.MenuScene()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.MenuScene(Camera)",1,1,1
"org.andengine.entity.scene.menu.MenuScene.MenuScene(Camera,IOnMenuItemClickListener)",1,1,1
"org.andengine.entity.scene.menu.MenuScene.MenuScene(IOnMenuItemClickListener)",1,1,1
"org.andengine.entity.scene.menu.MenuScene.addMenuItem(IMenuItem)",1,1,1
"org.andengine.entity.scene.menu.MenuScene.back()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.buildAnimations()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.clearChildScene()",1,2,2
"org.andengine.entity.scene.menu.MenuScene.clearMenuItems()",1,2,2
"org.andengine.entity.scene.menu.MenuScene.closeMenuScene()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.getChildScene()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.getMenuItemCount()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.getOnMenuItemClickListener()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.onAreaTouched(TouchEvent,ITouchArea,float,float)",3,4,7
"org.andengine.entity.scene.menu.MenuScene.onSceneTouchEvent(Scene,TouchEvent)",1,2,2
"org.andengine.entity.scene.menu.MenuScene.prepareAnimations()",1,1,1
"org.andengine.entity.scene.menu.MenuScene.reset()",1,2,2
"org.andengine.entity.scene.menu.MenuScene.setChildScene(Scene,boolean,boolean,boolean)",2,2,2
"org.andengine.entity.scene.menu.MenuScene.setMenuAnimator(IMenuAnimator)",1,1,1
"org.andengine.entity.scene.menu.MenuScene.setOnMenuItemClickListener(IOnMenuItemClickListener)",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.AlphaMenuAnimator()",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.AlphaMenuAnimator(HorizontalAlign)",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.AlphaMenuAnimator(HorizontalAlign,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.AlphaMenuAnimator(HorizontalAlign,float)",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.AlphaMenuAnimator(HorizontalAlign,float,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.AlphaMenuAnimator(IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.AlphaMenuAnimator(float)",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.AlphaMenuAnimator(float,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.buildAnimations(ArrayList<IMenuItem>,float,float)",1,2,2
"org.andengine.entity.scene.menu.animator.AlphaMenuAnimator.prepareAnimations(ArrayList<IMenuItem>,float,float)",2,3,5
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.BaseMenuAnimator()",1,1,1
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.BaseMenuAnimator(HorizontalAlign)",1,1,1
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.BaseMenuAnimator(HorizontalAlign,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.BaseMenuAnimator(HorizontalAlign,float)",1,1,1
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.BaseMenuAnimator(HorizontalAlign,float,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.BaseMenuAnimator(IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.BaseMenuAnimator(float)",1,1,1
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.BaseMenuAnimator(float,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.getMaximumWidth(ArrayList<IMenuItem>)",1,2,2
"org.andengine.entity.scene.menu.animator.BaseMenuAnimator.getOverallHeight(ArrayList<IMenuItem>)",1,2,2
"org.andengine.entity.scene.menu.animator.DirectMenuAnimator.DirectMenuAnimator()",1,1,1
"org.andengine.entity.scene.menu.animator.DirectMenuAnimator.DirectMenuAnimator(HorizontalAlign)",1,1,1
"org.andengine.entity.scene.menu.animator.DirectMenuAnimator.DirectMenuAnimator(HorizontalAlign,float)",1,1,1
"org.andengine.entity.scene.menu.animator.DirectMenuAnimator.DirectMenuAnimator(float)",1,1,1
"org.andengine.entity.scene.menu.animator.DirectMenuAnimator.buildAnimations(ArrayList<IMenuItem>,float,float)",1,1,1
"org.andengine.entity.scene.menu.animator.DirectMenuAnimator.prepareAnimations(ArrayList<IMenuItem>,float,float)",2,3,5
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.SlideMenuAnimator()",1,1,1
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.SlideMenuAnimator(HorizontalAlign)",1,1,1
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.SlideMenuAnimator(HorizontalAlign,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.SlideMenuAnimator(HorizontalAlign,float)",1,1,1
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.SlideMenuAnimator(HorizontalAlign,float,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.SlideMenuAnimator(IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.SlideMenuAnimator(float)",1,1,1
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.SlideMenuAnimator(float,IEaseFunction)",1,1,1
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.buildAnimations(ArrayList<IMenuItem>,float,float)",2,3,5
"org.andengine.entity.scene.menu.animator.SlideMenuAnimator.prepareAnimations(ArrayList<IMenuItem>,float,float)",1,2,2
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,ITiledTextureRegion,ITiledSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,ITiledTextureRegion,ITiledSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,ITiledTextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,ITiledTextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,ITiledTextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,ITiledTextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,float,float,ITiledTextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.AnimatedSpriteMenuItem(int,float,float,ITiledTextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.getID()",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.onSelected()",1,1,1
"org.andengine.entity.scene.menu.item.AnimatedSpriteMenuItem.onUnselected()",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,ITextureRegion,ISpriteVertexBufferObject)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,ITextureRegion,ISpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,float,float,ITextureRegion,ISpriteVertexBufferObject)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,float,float,ITextureRegion,ISpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.SpriteMenuItem(int,float,float,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.getID()",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.onSelected()",1,1,1
"org.andengine.entity.scene.menu.item.SpriteMenuItem.onUnselected()",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,TextOptions,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,TextOptions,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,TextOptions,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,TextOptions,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,TextOptions,ITextVertexBufferObject)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,TextOptions,ITextVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,TextOptions,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,TextOptions,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,TextOptions,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.TextMenuItem(int,IFont,CharSequence,int,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.getID()",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.onSelected()",1,1,1
"org.andengine.entity.scene.menu.item.TextMenuItem.onUnselected()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.BaseMenuItemDecorator(IMenuItem)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.attachChild(IEntity)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.callOnChildren(IEntityParameterCallable)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.callOnChildren(IEntityParameterCallable,IEntityMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.clearEntityModifiers()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.clearUpdateHandlers()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.collidesWith(IShape)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.contains(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.convertLocalToSceneCoordinates(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.convertLocalToSceneCoordinates(float,float,float[])",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.convertLocalToSceneCoordinates(float[])",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.convertLocalToSceneCoordinates(float[],float[])",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.convertSceneToLocalCoordinates(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.convertSceneToLocalCoordinates(float,float,float[])",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.convertSceneToLocalCoordinates(float[])",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.convertSceneToLocalCoordinates(float[],float[])",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.detachChild(IEntity)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.detachChild(IEntityMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.detachChild(int)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.detachChildren()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.detachChildren(IEntityMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.detachSelf()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.dispose()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getAlpha()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getBlendFunctionDestination()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getBlendFunctionSource()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getBlue()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getChildByIndex(int)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getChildByMatcher(IEntityMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getChildByTag(int)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getChildCount()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getColor()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getEntityModifierCount()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getFirstChild()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getGreen()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getHeight()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getHeightScaled()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getID()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getLastChild()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getLocalToParentTransformation()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getLocalToSceneTransformation()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getParent()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getParentToLocalTransformation()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getRed()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getRotation()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getRotationCenterX()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getRotationCenterY()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getScaleCenterX()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getScaleCenterY()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getScaleX()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getScaleY()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getSceneCenterCoordinates()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getSceneCenterCoordinates(float[])",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getSceneToLocalTransformation()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getShaderProgram()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getSkewCenterX()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getSkewCenterY()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getSkewX()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getSkewY()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getTag()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getUpdateHandlerCount()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getUserData()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getVertexBufferObject()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getVertexBufferObjectManager()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getWidth()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getWidthScaled()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getX()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getY()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.getZIndex()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.hasParent()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isBlendingEnabled()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isChildrenIgnoreUpdate()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isChildrenVisible()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isCulled(Camera)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isCullingEnabled()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isDisposed()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isIgnoreUpdate()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isRotated()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isRotatedOrScaledOrSkewed()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isScaled()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isSkewed()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.isVisible()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.onAreaTouched(TouchEvent,float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.onAttached()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.onDetached()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.onDraw(GLState,Camera)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.onSelected()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.onUnselected()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.onUpdate(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.query(IEntityMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.query(IEntityMatcher,L)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.queryFirst(IEntityMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.queryFirstForSubclass(IEntityMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.queryForSubclass(IEntityMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.queryForSubclass(IEntityMatcher,L)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.registerEntityModifier(IEntityModifier)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.registerUpdateHandler(IUpdateHandler)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.reset()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setAlpha(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setBlendFunction(int,int)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setBlendFunctionDestination(int)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setBlendFunctionSource(int)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setBlendingEnabled(boolean)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setBlue(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setChildrenIgnoreUpdate(boolean)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setChildrenVisible(boolean)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setColor(Color)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setColor(float,float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setColor(float,float,float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setCullingEnabled(boolean)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setGreen(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setHeight(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setIgnoreUpdate(boolean)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setParent(IEntity)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setPosition(IEntity)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setPosition(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setRed(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setRotation(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setRotationCenter(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setRotationCenterX(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setRotationCenterY(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setScale(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setScale(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setScaleCenter(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setScaleCenterX(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setScaleCenterY(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setScaleX(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setScaleY(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setShaderProgram(ShaderProgram)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setSize(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setSkew(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setSkew(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setSkewCenter(float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setSkewCenterX(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setSkewCenterY(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setSkewX(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setSkewY(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setTag(int)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setUserData(Object)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setVisible(boolean)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setWidth(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setX(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setY(float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.setZIndex(int)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.sortChildren()",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.sortChildren(IEntityComparator)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.sortChildren(boolean)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.toString(StringBuilder)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.unregisterEntityModifier(IEntityModifier)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.unregisterEntityModifiers(IEntityModifierMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.unregisterUpdateHandler(IUpdateHandler)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.BaseMenuItemDecorator.unregisterUpdateHandlers(IUpdateHandlerMatcher)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.ColorMenuItemDecorator.ColorMenuItemDecorator(IMenuItem,Color,Color)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.ColorMenuItemDecorator.onMenuItemReset(IMenuItem)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.ColorMenuItemDecorator.onMenuItemSelected(IMenuItem)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.ColorMenuItemDecorator.onMenuItemUnselected(IMenuItem)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.ScaleMenuItemDecorator.ScaleMenuItemDecorator(IMenuItem,float,float)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.ScaleMenuItemDecorator.onMenuItemReset(IMenuItem)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.ScaleMenuItemDecorator.onMenuItemSelected(IMenuItem)",1,1,1
"org.andengine.entity.scene.menu.item.decorator.ScaleMenuItemDecorator.onMenuItemUnselected(IMenuItem)",1,1,1
"org.andengine.entity.shape.RectangularShape.RectangularShape(float,float,float,float,ShaderProgram)",1,1,1
"org.andengine.entity.shape.RectangularShape.collidesWith(IShape)",3,3,3
"org.andengine.entity.shape.RectangularShape.contains(float,float)",1,1,1
"org.andengine.entity.shape.RectangularShape.getHeight()",1,1,1
"org.andengine.entity.shape.RectangularShape.getHeightScaled()",1,1,1
"org.andengine.entity.shape.RectangularShape.getSceneCenterCoordinates()",1,1,1
"org.andengine.entity.shape.RectangularShape.getSceneCenterCoordinates(float[])",1,1,1
"org.andengine.entity.shape.RectangularShape.getWidth()",1,1,1
"org.andengine.entity.shape.RectangularShape.getWidthScaled()",1,1,1
"org.andengine.entity.shape.RectangularShape.isCulled(Camera)",1,1,1
"org.andengine.entity.shape.RectangularShape.reset()",1,1,1
"org.andengine.entity.shape.RectangularShape.resetRotationCenter()",1,1,1
"org.andengine.entity.shape.RectangularShape.resetScaleCenter()",1,1,1
"org.andengine.entity.shape.RectangularShape.resetSkewCenter()",1,1,1
"org.andengine.entity.shape.RectangularShape.setHeight(float)",1,1,1
"org.andengine.entity.shape.RectangularShape.setSize(float,float)",1,1,1
"org.andengine.entity.shape.RectangularShape.setWidth(float)",1,1,1
"org.andengine.entity.shape.Shape.Shape(float,float,ShaderProgram)",1,1,1
"org.andengine.entity.shape.Shape.dispose()",1,4,4
"org.andengine.entity.shape.Shape.getBlendFunctionDestination()",1,1,1
"org.andengine.entity.shape.Shape.getBlendFunctionSource()",1,1,1
"org.andengine.entity.shape.Shape.getShaderProgram()",1,1,1
"org.andengine.entity.shape.Shape.getVertexBufferObjectManager()",1,1,1
"org.andengine.entity.shape.Shape.initBlendFunction(ITexture)",1,1,1
"org.andengine.entity.shape.Shape.initBlendFunction(ITextureRegion)",1,1,1
"org.andengine.entity.shape.Shape.initBlendFunction(TextureOptions)",1,2,2
"org.andengine.entity.shape.Shape.isBlendingEnabled()",1,1,1
"org.andengine.entity.shape.Shape.onAreaTouched(TouchEvent,float,float)",1,1,1
"org.andengine.entity.shape.Shape.postDraw(GLState,Camera)",1,2,2
"org.andengine.entity.shape.Shape.preDraw(GLState,Camera)",1,2,2
"org.andengine.entity.shape.Shape.reset()",1,1,1
"org.andengine.entity.shape.Shape.setBlendFunction(int,int)",1,1,1
"org.andengine.entity.shape.Shape.setBlendFunctionDestination(int)",1,1,1
"org.andengine.entity.shape.Shape.setBlendFunctionSource(int)",1,1,1
"org.andengine.entity.shape.Shape.setBlendingEnabled(boolean)",1,1,1
"org.andengine.entity.shape.Shape.setShaderProgram(ShaderProgram)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,float,float,ITiledTextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.AnimatedSprite(float,float,float,float,ITiledTextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(IAnimationData)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(IAnimationData,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long,boolean)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long,boolean,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long,int)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long,int,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[])",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],boolean)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],boolean,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int,int,boolean)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int,int,boolean,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int,int,int)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int,int,int,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int[])",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int[],IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int[],boolean)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int[],boolean,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int[],int)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.animate(long[],int[],int,IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.initAnimation(IAnimationListener)",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.isAnimationRunning()",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.onManagedUpdate(float)",5,16,18
"org.andengine.entity.sprite.AnimatedSprite.stopAnimation()",1,1,1
"org.andengine.entity.sprite.AnimatedSprite.stopAnimation(int)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData()",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(IAnimationData)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long,int)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long,int,boolean)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long,int,int)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long[])",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long[],boolean)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long[],int)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long[],int,int,boolean)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long[],int,int,int)",1,1,1
"org.andengine.entity.sprite.AnimationData.AnimationData(long[],int[],int)",1,1,1
"org.andengine.entity.sprite.AnimationData.calculateCurrentFrameIndex(long)",3,1,3
"org.andengine.entity.sprite.AnimationData.deepCopy()",1,1,1
"org.andengine.entity.sprite.AnimationData.fillFrameDurations(long,int)",1,1,1
"org.andengine.entity.sprite.AnimationData.getAnimationDuration()",1,1,1
"org.andengine.entity.sprite.AnimationData.getFirstFrameIndex()",1,1,1
"org.andengine.entity.sprite.AnimationData.getFrameCount()",1,1,1
"org.andengine.entity.sprite.AnimationData.getFrameDurations()",1,1,1
"org.andengine.entity.sprite.AnimationData.getFrames()",1,1,1
"org.andengine.entity.sprite.AnimationData.getLoopCount()",1,1,1
"org.andengine.entity.sprite.AnimationData.set(IAnimationData)",1,1,1
"org.andengine.entity.sprite.AnimationData.set(long,int)",1,1,1
"org.andengine.entity.sprite.AnimationData.set(long,int,boolean)",1,1,2
"org.andengine.entity.sprite.AnimationData.set(long,int,int)",1,1,1
"org.andengine.entity.sprite.AnimationData.set(long[])",1,1,1
"org.andengine.entity.sprite.AnimationData.set(long[],boolean)",1,1,2
"org.andengine.entity.sprite.AnimationData.set(long[],int)",1,1,1
"org.andengine.entity.sprite.AnimationData.set(long[],int,int)",1,1,1
"org.andengine.entity.sprite.AnimationData.set(long[],int,int,boolean)",1,1,2
"org.andengine.entity.sprite.AnimationData.set(long[],int,int,int)",2,1,2
"org.andengine.entity.sprite.AnimationData.set(long[],int,int[],int,int)",2,1,4
"org.andengine.entity.sprite.AnimationData.set(long[],int[])",1,1,1
"org.andengine.entity.sprite.AnimationData.set(long[],int[],boolean)",1,1,2
"org.andengine.entity.sprite.AnimationData.set(long[],int[],int)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.ButtonSprite(float,float,ITextureRegion,ITextureRegion,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.ButtonSprite(float,float,ITextureRegion,ITextureRegion,ITextureRegion,VertexBufferObjectManager,OnClickListener)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.ButtonSprite(float,float,ITextureRegion,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.ButtonSprite(float,float,ITextureRegion,ITextureRegion,VertexBufferObjectManager,OnClickListener)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.ButtonSprite(float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.ButtonSprite(float,float,ITextureRegion,VertexBufferObjectManager,OnClickListener)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.ButtonSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.ButtonSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager,OnClickListener)",2,3,5
"org.andengine.entity.sprite.ButtonSprite.State.State(int)",1,1,1
"org.andengine.entity.sprite.ButtonSprite.State.getTiledTextureRegionIndex()",1,1,1
"org.andengine.entity.sprite.ButtonSprite.changeState(State)",2,2,3
"org.andengine.entity.sprite.ButtonSprite.contains(float,float)",2,2,2
"org.andengine.entity.sprite.ButtonSprite.getState()",1,1,1
"org.andengine.entity.sprite.ButtonSprite.isEnabled()",1,1,1
"org.andengine.entity.sprite.ButtonSprite.isPressed()",1,1,1
"org.andengine.entity.sprite.ButtonSprite.onAreaTouched(TouchEvent,float,float)",1,8,8
"org.andengine.entity.sprite.ButtonSprite.setEnabled(boolean)",1,3,4
"org.andengine.entity.sprite.ButtonSprite.setOnClickListener(OnClickListener)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,ITextureRegion,IDiamondSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,ITextureRegion,IDiamondSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,float,float,ITextureRegion,IDiamondSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,float,float,ITextureRegion,IDiamondSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.DiamondSprite.DiamondSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,ITextureRegion,ISpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,ITextureRegion,ISpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,float,float,ITextureRegion,ISpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,float,float,ITextureRegion,ISpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.Sprite.Sprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.Sprite.draw(GLState,Camera)",1,1,1
"org.andengine.entity.sprite.Sprite.getTextureRegion()",1,1,1
"org.andengine.entity.sprite.Sprite.getVertexBufferObject()",1,1,1
"org.andengine.entity.sprite.Sprite.isFlippedHorizontal()",1,1,1
"org.andengine.entity.sprite.Sprite.isFlippedVertical()",1,1,1
"org.andengine.entity.sprite.Sprite.onUpdateColor()",1,1,1
"org.andengine.entity.sprite.Sprite.onUpdateTextureCoordinates()",1,1,1
"org.andengine.entity.sprite.Sprite.onUpdateVertices()",1,1,1
"org.andengine.entity.sprite.Sprite.postDraw(GLState,Camera)",1,1,1
"org.andengine.entity.sprite.Sprite.preDraw(GLState,Camera)",1,1,1
"org.andengine.entity.sprite.Sprite.reset()",1,1,1
"org.andengine.entity.sprite.Sprite.setFlipped(boolean,boolean)",1,2,3
"org.andengine.entity.sprite.Sprite.setFlippedHorizontal(boolean)",1,2,2
"org.andengine.entity.sprite.Sprite.setFlippedVertical(boolean)",1,2,2
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,ITiledTextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,float,float,ITiledTextureRegion,ITiledSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,float,float,ITiledTextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,float,float,ITiledTextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.TiledSprite.TiledSprite(float,float,float,float,ITiledTextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.TiledSprite.draw(GLState,Camera)",1,1,1
"org.andengine.entity.sprite.TiledSprite.getCurrentTileIndex()",1,1,1
"org.andengine.entity.sprite.TiledSprite.getTextureRegion()",1,1,1
"org.andengine.entity.sprite.TiledSprite.getTileCount()",1,1,1
"org.andengine.entity.sprite.TiledSprite.getTiledTextureRegion()",1,1,1
"org.andengine.entity.sprite.TiledSprite.getVertexBufferObject()",1,1,1
"org.andengine.entity.sprite.TiledSprite.onUpdateColor()",1,1,1
"org.andengine.entity.sprite.TiledSprite.onUpdateTextureCoordinates()",1,1,1
"org.andengine.entity.sprite.TiledSprite.onUpdateVertices()",1,1,1
"org.andengine.entity.sprite.TiledSprite.setCurrentTileIndex(int)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,ITextureRegion,IUncoloredSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,ITextureRegion,IUncoloredSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,ITextureRegion,ShaderProgram,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,float,float,ITextureRegion,IUncoloredSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,float,float,ITextureRegion,IUncoloredSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.UncoloredSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UncoloredSprite.onUpdateColor()",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,ITextureRegion,IUniformColorSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,ITextureRegion,IUniformColorSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,float,float,ITextureRegion,IUniformColorSpriteVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,float,float,ITextureRegion,IUniformColorSpriteVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.UniformColorSprite(float,float,float,float,ITextureRegion,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.draw(GLState,Camera)",1,1,1
"org.andengine.entity.sprite.UniformColorSprite.preDraw(GLState,Camera)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(ITexture,int,ISpriteBatchVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(ITexture,int,ISpriteBatchVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(ITexture,int,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(ITexture,int,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(ITexture,int,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(ITexture,int,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(float,float,ITexture,int,ISpriteBatchVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(float,float,ITexture,int,ISpriteBatchVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(float,float,ITexture,int,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(float,float,ITexture,int,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(float,float,ITexture,int,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.DynamicSpriteBatch(float,float,ITexture,int,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.DynamicSpriteBatch.begin()",1,2,2
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(ITexture,int,ISpriteBatchVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(ITexture,int,ISpriteBatchVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(ITexture,int,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(ITexture,int,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(ITexture,int,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(ITexture,int,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(float,float,ITexture,VertexBufferObjectManager,int,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(float,float,ITexture,int,ISpriteBatchVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(float,float,ITexture,int,ISpriteBatchVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(float,float,ITexture,int,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(float,float,ITexture,int,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.SpriteBatch(float,float,ITexture,int,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.add(ITextureRegion,float,float,Transformation,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.add(ITextureRegion,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.add(ITextureRegion,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.add(ITextureRegion,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.add(ITextureRegion,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.add(ITextureRegion,float,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.addInner(ITextureRegion,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.addInner(ITextureRegion,float,float,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.addWithPackedColor(ITextureRegion,float,float,Transformation,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.addWithPackedColor(ITextureRegion,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.addWithPackedColor(ITextureRegion,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.addWithPackedColor(ITextureRegion,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.addWithPackedColor(ITextureRegion,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.assertCapacity()",2,1,2
"org.andengine.entity.sprite.batch.SpriteBatch.assertCapacity(int)",2,1,2
"org.andengine.entity.sprite.batch.SpriteBatch.assertTexture(ITextureRegion)",2,1,2
"org.andengine.entity.sprite.batch.SpriteBatch.begin()",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.collidesWith(IShape)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.contains(float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.dispose()",1,4,4
"org.andengine.entity.sprite.batch.SpriteBatch.draw(GLState,Camera)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,IEntity,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,IEntity,float,float,float)",1,3,3
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,IEntity,float,float,float,float,float,float)",1,3,3
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,float,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(ITextureRegion,float,float,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(Sprite)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(Sprite,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.draw(Sprite,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,IEntity,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,IEntity,float,float,float)",1,3,3
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,IEntity,float,float,float,float,float,float)",1,3,3
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,float,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(ITextureRegion,float,float,float,float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(Sprite)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(Sprite,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.drawWithoutChecks(Sprite,float,float,float,float)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.end()",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.getIndex()",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.getTexture()",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.getVertexBufferObject()",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.onSubmit()",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.onUpdateVertices()",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.postDraw(GLState,Camera)",1,2,2
"org.andengine.entity.sprite.batch.SpriteBatch.preDraw(GLState,Camera)",1,2,2
"org.andengine.entity.sprite.batch.SpriteBatch.reset()",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.setIndex(int)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.setTexture(ITexture)",1,1,1
"org.andengine.entity.sprite.batch.SpriteBatch.submit()",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(ITexture,int,ISpriteBatchVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(ITexture,int,ISpriteBatchVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(ITexture,int,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(ITexture,int,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(ITexture,int,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(ITexture,int,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(float,float,ITexture,int,ISpriteBatchVertexBufferObject)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(float,float,ITexture,int,ISpriteBatchVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(float,float,ITexture,int,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(float,float,ITexture,int,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(float,float,ITexture,int,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.SpriteGroup(float,float,ITexture,int,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.assertCapacity()",2,2,2
"org.andengine.entity.sprite.batch.SpriteGroup.attachChild(IEntity)",2,2,2
"org.andengine.entity.sprite.batch.SpriteGroup.attachChild(Sprite)",1,1,1
"org.andengine.entity.sprite.batch.SpriteGroup.attachChildren(ArrayList<? extends Sprite>)",1,2,2
"org.andengine.entity.sprite.batch.SpriteGroup.onUpdateSpriteBatch()",2,3,3
"org.andengine.entity.sprite.batch.vbo.HighPerformanceSpriteBatchVertexBufferObject.HighPerformanceSpriteBatchVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.batch.vbo.HighPerformanceSpriteBatchVertexBufferObject.addWithPackedColor(ITextureRegion,float,float,float,float,float)",1,1,2
"org.andengine.entity.sprite.batch.vbo.HighPerformanceSpriteBatchVertexBufferObject.addWithPackedColor(ITextureRegion,float,float,float,float,float,float,float,float,float)",1,1,2
"org.andengine.entity.sprite.batch.vbo.HighPerformanceSpriteBatchVertexBufferObject.getBufferDataOffset()",1,1,1
"org.andengine.entity.sprite.batch.vbo.HighPerformanceSpriteBatchVertexBufferObject.setBufferDataOffset(int)",1,1,1
"org.andengine.entity.sprite.batch.vbo.LowMemorySpriteBatchVertexBufferObject.LowMemorySpriteBatchVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.batch.vbo.LowMemorySpriteBatchVertexBufferObject.addWithPackedColor(ITextureRegion,float,float,float,float,float)",1,2,2
"org.andengine.entity.sprite.batch.vbo.LowMemorySpriteBatchVertexBufferObject.addWithPackedColor(ITextureRegion,float,float,float,float,float,float,float,float,float)",1,2,2
"org.andengine.entity.sprite.batch.vbo.LowMemorySpriteBatchVertexBufferObject.getBufferDataOffset()",1,1,1
"org.andengine.entity.sprite.batch.vbo.LowMemorySpriteBatchVertexBufferObject.setBufferDataOffset(int)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceDiamondSpriteVertexBufferObject.HighPerformanceDiamondSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceDiamondSpriteVertexBufferObject.onUpdateTextureCoordinates(Sprite)",1,4,5
"org.andengine.entity.sprite.vbo.HighPerformanceDiamondSpriteVertexBufferObject.onUpdateVertices(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceSpriteVertexBufferObject.HighPerformanceSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceSpriteVertexBufferObject.onUpdateColor(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceSpriteVertexBufferObject.onUpdateTextureCoordinates(Sprite)",1,4,5
"org.andengine.entity.sprite.vbo.HighPerformanceSpriteVertexBufferObject.onUpdateVertices(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceTiledSpriteVertexBufferObject.HighPerformanceTiledSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceTiledSpriteVertexBufferObject.onUpdateColor(TiledSprite)",1,1,2
"org.andengine.entity.sprite.vbo.HighPerformanceTiledSpriteVertexBufferObject.onUpdateTextureCoordinates(TiledSprite)",1,5,6
"org.andengine.entity.sprite.vbo.HighPerformanceTiledSpriteVertexBufferObject.onUpdateVertices(TiledSprite)",1,1,2
"org.andengine.entity.sprite.vbo.HighPerformanceUncoloredSpriteVertexBufferObject.HighPerformanceUncoloredSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceUncoloredSpriteVertexBufferObject.onUpdateTextureCoordinates(Sprite)",1,4,5
"org.andengine.entity.sprite.vbo.HighPerformanceUncoloredSpriteVertexBufferObject.onUpdateVertices(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceUniformColorSpriteVertexBufferObject.HighPerformanceUniformColorSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceUniformColorSpriteVertexBufferObject.onUpdateColor(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.HighPerformanceUniformColorSpriteVertexBufferObject.onUpdateTextureCoordinates(Sprite)",1,4,5
"org.andengine.entity.sprite.vbo.HighPerformanceUniformColorSpriteVertexBufferObject.onUpdateVertices(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemoryDiamondSpriteVertexBufferObject.LowMemoryDiamondSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemoryDiamondSpriteVertexBufferObject.onUpdateTextureCoordinates(Sprite)",1,5,5
"org.andengine.entity.sprite.vbo.LowMemoryDiamondSpriteVertexBufferObject.onUpdateVertices(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemorySpriteVertexBufferObject.LowMemorySpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemorySpriteVertexBufferObject.onUpdateColor(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemorySpriteVertexBufferObject.onUpdateTextureCoordinates(Sprite)",1,5,5
"org.andengine.entity.sprite.vbo.LowMemorySpriteVertexBufferObject.onUpdateVertices(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemoryTiledSpriteVertexBufferObject.LowMemoryTiledSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemoryTiledSpriteVertexBufferObject.onUpdateColor(TiledSprite)",1,2,2
"org.andengine.entity.sprite.vbo.LowMemoryTiledSpriteVertexBufferObject.onUpdateTextureCoordinates(TiledSprite)",1,6,6
"org.andengine.entity.sprite.vbo.LowMemoryTiledSpriteVertexBufferObject.onUpdateVertices(TiledSprite)",1,2,2
"org.andengine.entity.sprite.vbo.LowMemoryUncoloredSpriteVertexBufferObject.LowMemoryUncoloredSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemoryUncoloredSpriteVertexBufferObject.onUpdateTextureCoordinates(Sprite)",1,5,5
"org.andengine.entity.sprite.vbo.LowMemoryUncoloredSpriteVertexBufferObject.onUpdateVertices(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemoryUniformColorSpriteVertexBufferObject.LowMemoryUniformColorSpriteVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemoryUniformColorSpriteVertexBufferObject.onUpdateColor(Sprite)",1,1,1
"org.andengine.entity.sprite.vbo.LowMemoryUniformColorSpriteVertexBufferObject.onUpdateTextureCoordinates(Sprite)",1,5,5
"org.andengine.entity.sprite.vbo.LowMemoryUniformColorSpriteVertexBufferObject.onUpdateVertices(Sprite)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,TextOptions,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,TextOptions,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,TextOptions,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,TextOptions,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,TextOptions,ITextVertexBufferObject)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,TextOptions,ITextVertexBufferObject,ShaderProgram)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,TextOptions,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,TextOptions,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,TextOptions,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,VertexBufferObjectManager,DrawType)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,VertexBufferObjectManager,DrawType,ShaderProgram)",1,1,1
"org.andengine.entity.text.Text.Text(float,float,IFont,CharSequence,int,VertexBufferObjectManager,ShaderProgram)",1,1,1
"org.andengine.entity.text.Text.draw(GLState,Camera)",1,1,1
"org.andengine.entity.text.Text.getAutoWrap()",1,1,1
"org.andengine.entity.text.Text.getAutoWrapWidth()",1,1,1
"org.andengine.entity.text.Text.getCharactersMaximum()",1,1,1
"org.andengine.entity.text.Text.getFont()",1,1,1
"org.andengine.entity.text.Text.getHorizontalAlign()",1,1,1
"org.andengine.entity.text.Text.getLeading()",1,1,1
"org.andengine.entity.text.Text.getLineAlignmentWidth()",1,1,1
"org.andengine.entity.text.Text.getLineWidthMaximum()",1,1,1
"org.andengine.entity.text.Text.getLineWidths()",1,1,1
"org.andengine.entity.text.Text.getLines()",1,1,1
"org.andengine.entity.text.Text.getText()",1,1,1
"org.andengine.entity.text.Text.getTextOptions()",1,1,1
"org.andengine.entity.text.Text.getVertexBufferObject()",1,1,1
"org.andengine.entity.text.Text.invalidateText()",1,1,1
"org.andengine.entity.text.Text.onUpdateColor()",1,1,1
"org.andengine.entity.text.Text.onUpdateVertices()",1,1,1
"org.andengine.entity.text.Text.postDraw(GLState,Camera)",1,1,1
"org.andengine.entity.text.Text.preDraw(GLState,Camera)",1,1,1
"org.andengine.entity.text.Text.setAutoWrap(AutoWrap)",1,1,1
"org.andengine.entity.text.Text.setAutoWrapWidth(float)",1,1,1
"org.andengine.entity.text.Text.setCharactersToDraw(int)",2,1,2
"org.andengine.entity.text.Text.setHorizontalAlign(HorizontalAlign)",1,1,1
"org.andengine.entity.text.Text.setLeading(float)",1,1,1
"org.andengine.entity.text.Text.setText(CharSequence)",1,3,4
"org.andengine.entity.text.Text.setTextOptions(TextOptions)",1,1,1
"org.andengine.entity.text.TextOptions.TextOptions()",1,1,1
"org.andengine.entity.text.TextOptions.TextOptions(AutoWrap,float)",1,1,1
"org.andengine.entity.text.TextOptions.TextOptions(AutoWrap,float,HorizontalAlign)",1,1,1
"org.andengine.entity.text.TextOptions.TextOptions(AutoWrap,float,HorizontalAlign,float)",1,1,1
"org.andengine.entity.text.TextOptions.TextOptions(HorizontalAlign)",1,1,1
"org.andengine.entity.text.TextOptions.getAutoWrap()",1,1,1
"org.andengine.entity.text.TextOptions.getAutoWrapWidth()",1,1,1
"org.andengine.entity.text.TextOptions.getHorizontalAlign()",1,1,1
"org.andengine.entity.text.TextOptions.getLeading()",1,1,1
"org.andengine.entity.text.TextOptions.setAutoWrap(AutoWrap)",1,1,1
"org.andengine.entity.text.TextOptions.setAutoWrapWidth(float)",1,1,1
"org.andengine.entity.text.TextOptions.setHorizontalAlign(HorizontalAlign)",1,1,1
"org.andengine.entity.text.TextOptions.setLeading(float)",1,1,1
"org.andengine.entity.text.TickerText.TickerText(float,float,IFont,String,TickerTextOptions,VertexBufferObjectManager)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.TickerTextOptions()",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.TickerTextOptions(AutoWrap,float,HorizontalAlign,float)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.TickerTextOptions(AutoWrap,float,HorizontalAlign,float,float)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.TickerTextOptions(AutoWrap,float,HorizontalAlign,float,float,boolean)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.TickerTextOptions(HorizontalAlign,float)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.TickerTextOptions(HorizontalAlign,float,boolean)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.TickerTextOptions(float)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.TickerTextOptions(float,boolean)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.getCharactersPerSecond()",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.isReverse()",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.setCharactersPerSecond(float)",1,1,1
"org.andengine.entity.text.TickerText.TickerTextOptions.setReverse(boolean)",1,1,1
"org.andengine.entity.text.TickerText.draw(GLState,Camera)",1,1,1
"org.andengine.entity.text.TickerText.getCharactersPerSecond()",1,1,1
"org.andengine.entity.text.TickerText.getCharactersVisible()",1,1,1
"org.andengine.entity.text.TickerText.getTextOptions()",1,1,1
"org.andengine.entity.text.TickerText.isReverse()",1,1,1
"org.andengine.entity.text.TickerText.onManagedUpdate(float)",1,4,4
"org.andengine.entity.text.TickerText.reset()",1,1,1
"org.andengine.entity.text.TickerText.setCharactersPerSecond(float)",1,1,1
"org.andengine.entity.text.TickerText.setReverse(boolean)",1,1,1
"org.andengine.entity.text.TickerText.setText(CharSequence)",1,1,2
"org.andengine.entity.text.exception.OutOfCharactersException.OutOfCharactersException()",1,1,1
"org.andengine.entity.text.exception.OutOfCharactersException.OutOfCharactersException(String)",1,1,1
"org.andengine.entity.text.exception.OutOfCharactersException.OutOfCharactersException(String,Throwable)",1,1,1
"org.andengine.entity.text.exception.OutOfCharactersException.OutOfCharactersException(Throwable)",1,1,1
"org.andengine.entity.text.exception.TextException.TextException()",1,1,1
"org.andengine.entity.text.exception.TextException.TextException(String)",1,1,1
"org.andengine.entity.text.exception.TextException.TextException(String,Throwable)",1,1,1
"org.andengine.entity.text.exception.TextException.TextException(Throwable)",1,1,1
"org.andengine.entity.text.vbo.HighPerformanceTextVertexBufferObject.HighPerformanceTextVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.text.vbo.HighPerformanceTextVertexBufferObject.onUpdateColor(Text)",1,1,2
"org.andengine.entity.text.vbo.HighPerformanceTextVertexBufferObject.onUpdateVertices(Text)",2,5,8
"org.andengine.entity.text.vbo.LowMemoryTextVertexBufferObject.LowMemoryTextVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.entity.text.vbo.LowMemoryTextVertexBufferObject.onUpdateColor(Text)",1,2,2
"org.andengine.entity.text.vbo.LowMemoryTextVertexBufferObject.onUpdateVertices(Text)",2,6,8
"org.andengine.entity.util.AverageFPSCounter.AverageFPSCounter()",1,1,1
"org.andengine.entity.util.AverageFPSCounter.AverageFPSCounter(float)",1,1,1
"org.andengine.entity.util.AverageFPSCounter.onUpdate(float)",1,2,2
"org.andengine.entity.util.FPSCounter.getFPS()",1,1,1
"org.andengine.entity.util.FPSCounter.onUpdate(float)",1,1,1
"org.andengine.entity.util.FPSCounter.reset()",1,1,1
"org.andengine.entity.util.FPSLogger.FPSLogger()",1,1,1
"org.andengine.entity.util.FPSLogger.FPSLogger(float)",1,1,1
"org.andengine.entity.util.FPSLogger.onHandleAverageDurationElapsed(float)",1,1,1
"org.andengine.entity.util.FPSLogger.onLogFPS()",1,2,2
"org.andengine.entity.util.FPSLogger.onUpdate(float)",1,1,1
"org.andengine.entity.util.FPSLogger.reset()",1,1,1
"org.andengine.entity.util.FrameCountCrasher.FrameCountCrasher(int)",1,1,1
"org.andengine.entity.util.FrameCountCrasher.onUpdate(float)",2,4,4
"org.andengine.entity.util.FrameCountCrasher.reset()",1,1,1
"org.andengine.entity.util.FrameCounter.getFrames()",1,1,1
"org.andengine.entity.util.FrameCounter.onUpdate(float)",1,1,1
"org.andengine.entity.util.FrameCounter.reset()",1,1,1
"org.andengine.entity.util.ScreenCapture.capture(int,int,String,IScreenCaptureCallback)",1,1,1
"org.andengine.entity.util.ScreenCapture.capture(int,int,int,int,String,IScreenCaptureCallback)",1,1,1
"org.andengine.entity.util.ScreenCapture.onManagedDraw(GLState,Camera)",1,1,1
"org.andengine.entity.util.ScreenCapture.onManagedUpdate(float)",1,1,1
"org.andengine.entity.util.ScreenCapture.onScreenGrabFailed(Exception)",1,1,1
"org.andengine.entity.util.ScreenCapture.onScreenGrabbed(Bitmap)",1,2,2
"org.andengine.entity.util.ScreenCapture.reset()",1,1,1
"org.andengine.entity.util.ScreenCapture.saveCapture(Bitmap,String)",1,2,2
"org.andengine.entity.util.ScreenGrabber.grab(int,int,IScreenGrabberCallback)",1,1,1
"org.andengine.entity.util.ScreenGrabber.grab(int,int,int,int)",1,1,3
"org.andengine.entity.util.ScreenGrabber.grab(int,int,int,int,IScreenGrabberCallback)",1,1,1
"org.andengine.entity.util.ScreenGrabber.onManagedDraw(GLState,Camera)",1,3,3
"org.andengine.entity.util.ScreenGrabber.onManagedUpdate(float)",1,1,1
"org.andengine.entity.util.ScreenGrabber.reset()",1,1,1
"org.andengine.input.sensor.BaseSensorData.BaseSensorData(int,int)",1,1,1
"org.andengine.input.sensor.BaseSensorData.getAccuracy()",1,1,1
"org.andengine.input.sensor.BaseSensorData.getValues()",1,1,1
"org.andengine.input.sensor.BaseSensorData.setAccuracy(int)",1,1,1
"org.andengine.input.sensor.BaseSensorData.setValues(float[])",1,1,1
"org.andengine.input.sensor.BaseSensorData.toString()",1,1,1
"org.andengine.input.sensor.SensorDelay.SensorDelay(int)",1,1,1
"org.andengine.input.sensor.SensorDelay.getDelay()",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.AccelerationData(int)",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.getX()",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.getY()",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.getZ()",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.setValues(float[])",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.setX(float)",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.setY(float)",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.setZ(float)",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationData.toString()",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationSensorOptions.AccelerationSensorOptions(SensorDelay)",1,1,1
"org.andengine.input.sensor.acceleration.AccelerationSensorOptions.getSensorDelay()",1,1,1
"org.andengine.input.sensor.location.LocationSensorOptions.LocationSensorOptions()",1,1,1
"org.andengine.input.sensor.location.LocationSensorOptions.LocationSensorOptions(int,boolean,boolean,boolean,int,boolean,boolean,long,long)",1,1,1
"org.andengine.input.sensor.location.LocationSensorOptions.getMinimumTriggerDistance()",1,1,1
"org.andengine.input.sensor.location.LocationSensorOptions.getMinimumTriggerTime()",1,1,1
"org.andengine.input.sensor.location.LocationSensorOptions.isEnabledOnly()",1,1,1
"org.andengine.input.sensor.location.LocationSensorOptions.setEnabledOnly(boolean)",1,1,1
"org.andengine.input.sensor.location.LocationSensorOptions.setMinimumTriggerDistance(long)",1,1,1
"org.andengine.input.sensor.location.LocationSensorOptions.setMinimumTriggerTime(long)",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.OrientationData(int)",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.getAccelerationAccuracy()",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.getMagneticFieldAccuracy()",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.getPitch()",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.getRoll()",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.getYaw()",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.setAccelerationAccuracy(int)",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.setAccelerationValues(float[])",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.setAccuracy(int)",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.setMagneticFieldAccuracy(int)",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.setMagneticFieldValues(float[])",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.setValues(float[])",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.toString()",1,1,1
"org.andengine.input.sensor.orientation.OrientationData.updateOrientation()",2,2,4
"org.andengine.input.sensor.orientation.OrientationSensorOptions.OrientationSensorOptions(SensorDelay)",1,1,1
"org.andengine.input.sensor.orientation.OrientationSensorOptions.getSensorDelay()",1,1,1
"org.andengine.input.touch.TouchEvent.TouchEventPool.onAllocatePoolItem()",1,1,1
"org.andengine.input.touch.TouchEvent.getAction()",1,1,1
"org.andengine.input.touch.TouchEvent.getMotionEvent()",1,1,1
"org.andengine.input.touch.TouchEvent.getPointerID()",1,1,1
"org.andengine.input.touch.TouchEvent.getX()",1,1,1
"org.andengine.input.touch.TouchEvent.getY()",1,1,1
"org.andengine.input.touch.TouchEvent.isActionCancel()",1,1,1
"org.andengine.input.touch.TouchEvent.isActionDown()",1,1,1
"org.andengine.input.touch.TouchEvent.isActionMove()",1,1,1
"org.andengine.input.touch.TouchEvent.isActionOutside()",1,1,1
"org.andengine.input.touch.TouchEvent.isActionUp()",1,1,1
"org.andengine.input.touch.TouchEvent.obtain(float,float,int,int,MotionEvent)",1,1,1
"org.andengine.input.touch.TouchEvent.offset(float,float)",1,1,1
"org.andengine.input.touch.TouchEvent.recycle()",1,1,1
"org.andengine.input.touch.TouchEvent.recycle(TouchEvent)",1,1,1
"org.andengine.input.touch.TouchEvent.set(float,float)",1,1,1
"org.andengine.input.touch.TouchEvent.set(float,float,int,int,MotionEvent)",1,1,1
"org.andengine.input.touch.controller.BaseTouchController.BaseTouchController()",1,1,1
"org.andengine.input.touch.controller.BaseTouchController.TouchEventRunnablePoolItem.onRecycle()",1,1,1
"org.andengine.input.touch.controller.BaseTouchController.TouchEventRunnablePoolItem.run()",1,1,1
"org.andengine.input.touch.controller.BaseTouchController.TouchEventRunnablePoolItem.set(TouchEvent)",1,1,1
"org.andengine.input.touch.controller.BaseTouchController.fireTouchEvent(float,float,int,int,MotionEvent)",1,1,1
"org.andengine.input.touch.controller.BaseTouchController.onUpdate(float)",1,1,1
"org.andengine.input.touch.controller.BaseTouchController.reset()",1,1,1
"org.andengine.input.touch.controller.BaseTouchController.setTouchEventCallback(ITouchEventCallback)",1,1,1
"org.andengine.input.touch.controller.MultiTouch.isSupported(Context)",1,2,2
"org.andengine.input.touch.controller.MultiTouch.isSupportedDistinct(Context)",1,2,2
"org.andengine.input.touch.controller.MultiTouchController.getPointerIndex(MotionEvent)",1,1,1
"org.andengine.input.touch.controller.MultiTouchController.onHandleMotionEvent(MotionEvent)",2,2,6
"org.andengine.input.touch.controller.MultiTouchController.onHandleTouchAction(int,MotionEvent)",1,1,1
"org.andengine.input.touch.controller.MultiTouchController.onHandleTouchMove(MotionEvent)",1,2,2
"org.andengine.input.touch.controller.SingleTouchController.SingleTouchController()",1,1,1
"org.andengine.input.touch.controller.SingleTouchController.onHandleMotionEvent(MotionEvent)",1,1,1
"org.andengine.input.touch.detector.BaseDetector.isEnabled()",1,1,1
"org.andengine.input.touch.detector.BaseDetector.onSceneTouchEvent(Scene,TouchEvent)",1,1,1
"org.andengine.input.touch.detector.BaseDetector.onTouchEvent(TouchEvent)",2,2,2
"org.andengine.input.touch.detector.BaseDetector.setEnabled(boolean)",1,1,1
"org.andengine.input.touch.detector.ClickDetector.ClickDetector(IClickDetectorListener)",1,1,1
"org.andengine.input.touch.detector.ClickDetector.ClickDetector(long,IClickDetectorListener)",1,1,1
"org.andengine.input.touch.detector.ClickDetector.getTriggerClickMaximumMilliseconds()",1,1,1
"org.andengine.input.touch.detector.ClickDetector.onManagedTouchEvent(TouchEvent)",4,5,6
"org.andengine.input.touch.detector.ClickDetector.prepareClick(TouchEvent)",1,1,1
"org.andengine.input.touch.detector.ClickDetector.reset()",1,1,1
"org.andengine.input.touch.detector.ClickDetector.setTriggerClickMaximumMilliseconds(long)",1,1,1
"org.andengine.input.touch.detector.ContinuousHoldDetector.ContinuousHoldDetector(IHoldDetectorListener)",1,1,1
"org.andengine.input.touch.detector.ContinuousHoldDetector.ContinuousHoldDetector(long,float,float,IHoldDetectorListener)",1,1,1
"org.andengine.input.touch.detector.ContinuousHoldDetector.fireListener()",1,5,5
"org.andengine.input.touch.detector.ContinuousHoldDetector.onManagedTouchEvent(TouchEvent)",8,11,11
"org.andengine.input.touch.detector.ContinuousHoldDetector.onUpdate(float)",1,1,1
"org.andengine.input.touch.detector.ContinuousHoldDetector.prepareHold(TouchEvent)",1,1,1
"org.andengine.input.touch.detector.ContinuousHoldDetector.reset()",1,1,1
"org.andengine.input.touch.detector.HoldDetector.HoldDetector(IHoldDetectorListener)",1,1,1
"org.andengine.input.touch.detector.HoldDetector.HoldDetector(long,float,IHoldDetectorListener)",1,1,1
"org.andengine.input.touch.detector.HoldDetector.getTriggerHoldMaximumDistance()",1,1,1
"org.andengine.input.touch.detector.HoldDetector.getTriggerHoldMinimumMilliseconds()",1,1,1
"org.andengine.input.touch.detector.HoldDetector.isHolding()",1,1,1
"org.andengine.input.touch.detector.HoldDetector.onManagedTouchEvent(TouchEvent)",8,19,19
"org.andengine.input.touch.detector.HoldDetector.prepareHold(TouchEvent)",1,2,2
"org.andengine.input.touch.detector.HoldDetector.reset()",1,2,2
"org.andengine.input.touch.detector.HoldDetector.setTriggerHoldMaximumDistance(float)",2,1,2
"org.andengine.input.touch.detector.HoldDetector.setTriggerHoldMinimumMilliseconds(long)",2,1,2
"org.andengine.input.touch.detector.HoldDetector.triggerOnHold(long)",1,2,2
"org.andengine.input.touch.detector.HoldDetector.triggerOnHoldFinished(long)",1,2,2
"org.andengine.input.touch.detector.HoldDetector.triggerOnHoldStarted()",1,2,2
"org.andengine.input.touch.detector.PinchZoomDetector.PinchZoomDetector(IPinchZoomDetectorListener)",1,1,1
"org.andengine.input.touch.detector.PinchZoomDetector.calculatePointerDistance(MotionEvent)",1,1,1
"org.andengine.input.touch.detector.PinchZoomDetector.getZoomFactor()",1,1,1
"org.andengine.input.touch.detector.PinchZoomDetector.hasTwoOrMorePointers(MotionEvent)",1,1,1
"org.andengine.input.touch.detector.PinchZoomDetector.isZooming()",1,1,1
"org.andengine.input.touch.detector.PinchZoomDetector.onManagedTouchEvent(TouchEvent)",2,9,11
"org.andengine.input.touch.detector.PinchZoomDetector.reset()",1,2,2
"org.andengine.input.touch.detector.ScrollDetector.ScrollDetector(IScrollDetectorListener)",1,1,1
"org.andengine.input.touch.detector.ScrollDetector.ScrollDetector(float,IScrollDetectorListener)",1,1,1
"org.andengine.input.touch.detector.ScrollDetector.getTriggerScrollMinimumDistance()",1,1,1
"org.andengine.input.touch.detector.ScrollDetector.getX(TouchEvent)",1,1,1
"org.andengine.input.touch.detector.ScrollDetector.getY(TouchEvent)",1,1,1
"org.andengine.input.touch.detector.ScrollDetector.onManagedTouchEvent(TouchEvent)",5,11,13
"org.andengine.input.touch.detector.ScrollDetector.prepareScroll(int,float,float)",1,1,1
"org.andengine.input.touch.detector.ScrollDetector.reset()",1,2,2
"org.andengine.input.touch.detector.ScrollDetector.setTriggerScrollMinimumDistance(float)",1,1,1
"org.andengine.input.touch.detector.ScrollDetector.triggerOnScroll(float,float)",1,2,2
"org.andengine.input.touch.detector.ScrollDetector.triggerOnScrollFinished(float,float)",1,2,2
"org.andengine.input.touch.detector.ScrollDetector.triggerOnScrollStarted(float,float)",1,2,2
"org.andengine.input.touch.detector.SurfaceGestureDetector.InnerOnGestureDetectorListener.InnerOnGestureDetectorListener(float)",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetector.InnerOnGestureDetectorListener.onDoubleTap(MotionEvent)",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetector.InnerOnGestureDetectorListener.onFling(MotionEvent,MotionEvent,float,float)",6,6,6
"org.andengine.input.touch.detector.SurfaceGestureDetector.InnerOnGestureDetectorListener.onSingleTapConfirmed(MotionEvent)",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetector.SurfaceGestureDetector(Context)",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetector.SurfaceGestureDetector(Context,float)",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetector.onManagedTouchEvent(TouchEvent)",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetector.reset()",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetectorAdapter.SurfaceGestureDetectorAdapter(Context)",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetectorAdapter.SurfaceGestureDetectorAdapter(Context,float)",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetectorAdapter.onDoubleTap()",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetectorAdapter.onSingleTap()",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetectorAdapter.onSwipeDown()",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetectorAdapter.onSwipeLeft()",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetectorAdapter.onSwipeRight()",1,1,1
"org.andengine.input.touch.detector.SurfaceGestureDetectorAdapter.onSwipeUp()",1,1,1
"org.andengine.input.touch.detector.SurfaceScrollDetector.SurfaceScrollDetector(IScrollDetectorListener)",1,1,1
"org.andengine.input.touch.detector.SurfaceScrollDetector.SurfaceScrollDetector(float,IScrollDetectorListener)",1,1,1
"org.andengine.input.touch.detector.SurfaceScrollDetector.getX(TouchEvent)",1,1,1
"org.andengine.input.touch.detector.SurfaceScrollDetector.getY(TouchEvent)",1,1,1
"org.andengine.opengl.GLES20Fix.GLES20Fix()",1,1,1
"org.andengine.opengl.GLES20Fix.glDrawElements(int,int,int,int)",1,1,1
"org.andengine.opengl.GLES20Fix.glDrawElementsFix(int,int,int,int)",1,2,2
"org.andengine.opengl.GLES20Fix.glVertexAttribPointer(int,int,int,boolean,int,int)",1,1,1
"org.andengine.opengl.GLES20Fix.glVertexAttribPointerFix(int,int,int,boolean,int,int)",1,2,2
"org.andengine.opengl.exception.GLException.GLException(int)",1,1,1
"org.andengine.opengl.exception.GLException.GLException(int,String)",1,1,1
"org.andengine.opengl.exception.GLException.getError()",1,1,1
"org.andengine.opengl.exception.GLException.getErrorString(int)",1,2,2
"org.andengine.opengl.exception.GLFrameBufferException.GLFrameBufferException(int)",1,1,1
"org.andengine.opengl.exception.GLFrameBufferException.GLFrameBufferException(int,String)",1,1,1
"org.andengine.opengl.exception.RenderTextureInitializationException.RenderTextureInitializationException()",1,1,1
"org.andengine.opengl.exception.RenderTextureInitializationException.RenderTextureInitializationException(String)",1,1,1
"org.andengine.opengl.exception.RenderTextureInitializationException.RenderTextureInitializationException(String,Throwable)",1,1,1
"org.andengine.opengl.exception.RenderTextureInitializationException.RenderTextureInitializationException(Throwable)",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFont(TextureManager,AssetManager,String)",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFont(TextureManager,AssetManager,String,BitmapTextureFormat)",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFont(TextureManager,AssetManager,String,BitmapTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFont(TextureManager,AssetManager,String,BitmapTextureFormat,TextureOptions,BitmapFontOptions)",12,9,18
"org.andengine.opengl.font.BitmapFont.BitmapFont(TextureManager,AssetManager,String,TextureOptions)",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.BitmapFontInfo(String)",4,1,4
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getCharset()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getFace()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getPaddingBottom()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getPaddingLeft()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getPaddingRight()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getPaddingTop()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getSize()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getSpacingX()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getSpacingY()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getStretchHeight()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.getUnicode()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.isAntiAliased()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.isBold()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.isItalic()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontInfo.isSmooth()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontOptions.BitmapFontOptions(int,int)",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontOptions.getTextureOffsetX()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontOptions.getTextureOffsetY()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontPage.BitmapFontPage(AssetManager,String,String)",3,1,3
"org.andengine.opengl.font.BitmapFont.BitmapFontPage.getID()",1,1,1
"org.andengine.opengl.font.BitmapFont.BitmapFontPage.getTexture()",1,1,1
"org.andengine.opengl.font.BitmapFont.getAttribute(String[],int,String)",2,1,2
"org.andengine.opengl.font.BitmapFont.getBase()",1,1,1
"org.andengine.opengl.font.BitmapFont.getBitmapFontInfo()",1,1,1
"org.andengine.opengl.font.BitmapFont.getBitmapFontPage(int)",1,1,1
"org.andengine.opengl.font.BitmapFont.getBitmapFontPageCount()",1,1,1
"org.andengine.opengl.font.BitmapFont.getBitmapFontPages()",1,1,1
"org.andengine.opengl.font.BitmapFont.getBooleanAttribute(String[],int,String)",2,2,3
"org.andengine.opengl.font.BitmapFont.getCharAttribute(String[],int,String)",1,1,1
"org.andengine.opengl.font.BitmapFont.getIntAttribute(String[],int,String)",2,2,3
"org.andengine.opengl.font.BitmapFont.getLetter(char)",2,1,2
"org.andengine.opengl.font.BitmapFont.getLineHeight()",1,1,1
"org.andengine.opengl.font.BitmapFont.getScaleHeight()",1,1,1
"org.andengine.opengl.font.BitmapFont.getScaleWidth()",1,1,1
"org.andengine.opengl.font.BitmapFont.getStringAttribute(String[],int,String)",2,2,3
"org.andengine.opengl.font.BitmapFont.getTexture()",1,1,1
"org.andengine.opengl.font.BitmapFont.isPacked()",1,1,1
"org.andengine.opengl.font.BitmapFont.load()",1,1,1
"org.andengine.opengl.font.BitmapFont.loadTextures()",1,2,2
"org.andengine.opengl.font.BitmapFont.parseCharacters(int,BufferedReader)",4,2,4
"org.andengine.opengl.font.BitmapFont.parseKernings(int,BufferedReader)",4,2,4
"org.andengine.opengl.font.BitmapFont.unload()",1,1,1
"org.andengine.opengl.font.BitmapFont.unloadTextures()",1,2,2
"org.andengine.opengl.font.Font.Font(FontManager,ITexture,Typeface,float,boolean,Color)",1,1,1
"org.andengine.opengl.font.Font.Font(FontManager,ITexture,Typeface,float,boolean,int)",1,1,1
"org.andengine.opengl.font.Font.createLetter(char)",3,5,6
"org.andengine.opengl.font.Font.drawLetter(String,float,float)",1,1,1
"org.andengine.opengl.font.Font.getAscent()",1,1,1
"org.andengine.opengl.font.Font.getDescent()",1,1,1
"org.andengine.opengl.font.Font.getLeading()",1,1,1
"org.andengine.opengl.font.Font.getLetter(char)",1,2,2
"org.andengine.opengl.font.Font.getLetterAdvance(String)",1,1,1
"org.andengine.opengl.font.Font.getLetterBitmap(Letter)",1,1,1
"org.andengine.opengl.font.Font.getLineHeight()",1,1,1
"org.andengine.opengl.font.Font.getTexture()",1,1,1
"org.andengine.opengl.font.Font.invalidateLetters()",1,2,2
"org.andengine.opengl.font.Font.load()",1,1,1
"org.andengine.opengl.font.Font.prepareLetters(char...)",1,2,2
"org.andengine.opengl.font.Font.unload()",1,1,1
"org.andengine.opengl.font.Font.update(GLState)",1,10,10
"org.andengine.opengl.font.Font.updateTextBounds(String)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,ITexture,Typeface,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,ITexture,float)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,ITexture,float,boolean)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,ITexture,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,ITexture,float,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,BitmapTextureFormat,TextureOptions,Typeface,float)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,BitmapTextureFormat,TextureOptions,Typeface,float,boolean)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,BitmapTextureFormat,TextureOptions,Typeface,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,BitmapTextureFormat,TextureOptions,Typeface,float,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,TextureOptions,Typeface,float)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,TextureOptions,Typeface,float,boolean)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,TextureOptions,Typeface,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,TextureOptions,Typeface,float,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,TextureOptions,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,Typeface,float)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,Typeface,float,boolean)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,Typeface,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,Typeface,float,int)",1,1,1
"org.andengine.opengl.font.FontFactory.create(FontManager,TextureManager,int,int,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.createFromAsset(FontManager,ITexture,AssetManager,String,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.createFromAsset(FontManager,TextureManager,int,int,AssetManager,String,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.createFromAsset(FontManager,TextureManager,int,int,BitmapTextureFormat,TextureOptions,AssetManager,String,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.createFromAsset(FontManager,TextureManager,int,int,TextureOptions,AssetManager,String,float,boolean,int)",1,1,1
"org.andengine.opengl.font.FontFactory.createStroke(FontManager,ITexture,Typeface,float,boolean,int,float,int)",1,1,1
"org.andengine.opengl.font.FontFactory.createStroke(FontManager,ITexture,Typeface,float,boolean,int,float,int,boolean)",1,1,1
"org.andengine.opengl.font.FontFactory.createStrokeFromAsset(FontManager,ITexture,AssetManager,String,float,boolean,int,float,int)",1,1,1
"org.andengine.opengl.font.FontFactory.createStrokeFromAsset(FontManager,ITexture,AssetManager,String,float,boolean,int,float,int,boolean)",1,1,1
"org.andengine.opengl.font.FontFactory.getAssetBasePath()",1,1,1
"org.andengine.opengl.font.FontFactory.onCreate()",1,1,1
"org.andengine.opengl.font.FontFactory.setAssetBasePath(String)",2,2,3
"org.andengine.opengl.font.FontLibrary.FontLibrary()",1,1,1
"org.andengine.opengl.font.FontLibrary.FontLibrary(int)",1,1,1
"org.andengine.opengl.font.FontLibrary.loadFonts(FontManager)",1,3,3
"org.andengine.opengl.font.FontManager.loadFont(Font)",2,1,2
"org.andengine.opengl.font.FontManager.loadFonts(Font...)",1,2,2
"org.andengine.opengl.font.FontManager.onCreate()",1,1,1
"org.andengine.opengl.font.FontManager.onDestroy()",1,2,2
"org.andengine.opengl.font.FontManager.onReload()",1,2,2
"org.andengine.opengl.font.FontManager.unloadFont(Font)",2,1,2
"org.andengine.opengl.font.FontManager.unloadFonts(Font...)",1,2,2
"org.andengine.opengl.font.FontManager.updateFonts(GLState)",1,3,3
"org.andengine.opengl.font.FontUtils.breakText(IFont,CharSequence,MeasureDirection,float,float[])",1,1,1
"org.andengine.opengl.font.FontUtils.getAdvanceCorrection(IFont,CharSequence,int)",1,1,1
"org.andengine.opengl.font.FontUtils.measureText(IFont,CharSequence)",1,1,1
"org.andengine.opengl.font.FontUtils.measureText(IFont,CharSequence,float[])",1,1,1
"org.andengine.opengl.font.FontUtils.measureText(IFont,CharSequence,int,int)",1,1,1
"org.andengine.opengl.font.FontUtils.measureText(IFont,CharSequence,int,int,float[])",3,5,7
"org.andengine.opengl.font.FontUtils.splitLines(CharSequence,L)",1,1,1
"org.andengine.opengl.font.FontUtils.splitLines(IFont,CharSequence,L,AutoWrap,float)",5,5,5
"org.andengine.opengl.font.FontUtils.splitLinesByCJK(IFont,CharSequence,L,float)",7,7,12
"org.andengine.opengl.font.FontUtils.splitLinesByLetters(IFont,CharSequence,L,float)",1,7,9
"org.andengine.opengl.font.FontUtils.splitLinesByWords(IFont,CharSequence,L,float)",10,13,18
"org.andengine.opengl.font.Letter.Letter(char,boolean,int,int,int,int,float,float,float,float,float,float,float)",1,1,1
"org.andengine.opengl.font.Letter.Letter(char,float)",1,1,1
"org.andengine.opengl.font.Letter.Letter(char,int,int,int,int,float,float,float,float,float,float,float)",1,1,1
"org.andengine.opengl.font.Letter.addKerning(int,int)",1,1,2
"org.andengine.opengl.font.Letter.equals(Object)",5,1,5
"org.andengine.opengl.font.Letter.getKerning(int)",2,1,2
"org.andengine.opengl.font.Letter.hashCode()",1,1,1
"org.andengine.opengl.font.Letter.isWhitespace()",1,1,1
"org.andengine.opengl.font.Letter.toString()",1,1,1
"org.andengine.opengl.font.StrokeFont.StrokeFont(FontManager,ITexture,Typeface,float,boolean,Color,float,Color)",1,1,1
"org.andengine.opengl.font.StrokeFont.StrokeFont(FontManager,ITexture,Typeface,float,boolean,Color,float,Color,boolean)",1,1,1
"org.andengine.opengl.font.StrokeFont.StrokeFont(FontManager,ITexture,Typeface,float,boolean,int,float,int)",1,1,1
"org.andengine.opengl.font.StrokeFont.StrokeFont(FontManager,ITexture,Typeface,float,boolean,int,float,int,boolean)",1,1,1
"org.andengine.opengl.font.StrokeFont.drawLetter(String,float,float)",1,2,2
"org.andengine.opengl.font.StrokeFont.updateTextBounds(String)",1,1,1
"org.andengine.opengl.font.exception.FontException.FontException()",1,1,1
"org.andengine.opengl.font.exception.FontException.FontException(String)",1,1,1
"org.andengine.opengl.font.exception.FontException.FontException(String,Throwable)",1,1,1
"org.andengine.opengl.font.exception.FontException.FontException(Throwable)",1,1,1
"org.andengine.opengl.font.exception.LetterNotFoundException.LetterNotFoundException()",1,1,1
"org.andengine.opengl.font.exception.LetterNotFoundException.LetterNotFoundException(String)",1,1,1
"org.andengine.opengl.font.exception.LetterNotFoundException.LetterNotFoundException(String,Throwable)",1,1,1
"org.andengine.opengl.font.exception.LetterNotFoundException.LetterNotFoundException(Throwable)",1,1,1
"org.andengine.opengl.shader.PositionColorShaderProgram.PositionColorShaderProgram()",1,1,1
"org.andengine.opengl.shader.PositionColorShaderProgram.bind(GLState,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.shader.PositionColorShaderProgram.getInstance()",1,1,2
"org.andengine.opengl.shader.PositionColorShaderProgram.link(GLState)",1,1,1
"org.andengine.opengl.shader.PositionColorShaderProgram.unbind(GLState)",1,1,1
"org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram.PositionColorTextureCoordinatesShaderProgram()",1,1,1
"org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram.bind(GLState,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram.getInstance()",1,1,2
"org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram.link(GLState)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram()",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram.bind(GLState,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram.getInstance()",1,1,2
"org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram.link(GLState)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram.unbind(GLState)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram.PositionTextureCoordinatesShaderProgram()",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram.bind(GLState,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram.getInstance()",1,1,2
"org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram.link(GLState)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram.unbind(GLState)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram.PositionTextureCoordinatesTextureSelectShaderProgram()",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram.bind(GLState,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram.getInstance()",1,1,2
"org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram.link(GLState)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram.unbind(GLState)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram.PositionTextureCoordinatesUniformColorShaderProgram()",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram.bind(GLState,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram.getInstance()",1,1,2
"org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram.link(GLState)",1,1,1
"org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram.unbind(GLState)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.ShaderProgram(IShaderSource,IShaderSource)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.ShaderProgram(String,String)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.bind(GLState,VertexBufferObjectAttributes)",1,2,2
"org.andengine.opengl.shader.ShaderProgram.compile(GLState)",1,1,2
"org.andengine.opengl.shader.ShaderProgram.compileShader(String,int)",3,2,3
"org.andengine.opengl.shader.ShaderProgram.delete(GLState)",1,2,2
"org.andengine.opengl.shader.ShaderProgram.getAttributeLocation(String)",2,2,2
"org.andengine.opengl.shader.ShaderProgram.getAttributeLocationOptional(String)",2,2,2
"org.andengine.opengl.shader.ShaderProgram.getUniformLocation(String)",2,2,2
"org.andengine.opengl.shader.ShaderProgram.getUniformLocationOptional(String)",2,2,2
"org.andengine.opengl.shader.ShaderProgram.initAttributeLocations()",4,3,9
"org.andengine.opengl.shader.ShaderProgram.initUniformLocations()",4,3,9
"org.andengine.opengl.shader.ShaderProgram.isCompiled()",1,1,1
"org.andengine.opengl.shader.ShaderProgram.link(GLState)",2,2,2
"org.andengine.opengl.shader.ShaderProgram.setCompiled(boolean)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.setTexture(String,int)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.setTextureOptional(String,int)",1,2,2
"org.andengine.opengl.shader.ShaderProgram.setUniform(String,float)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.setUniform(String,float,float)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.setUniform(String,float,float,float)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.setUniform(String,float,float,float,float)",1,1,1
"org.andengine.opengl.shader.ShaderProgram.setUniform(String,float[])",1,1,1
"org.andengine.opengl.shader.ShaderProgram.setUniformOptional(String,float)",1,2,2
"org.andengine.opengl.shader.ShaderProgram.setUniformOptional(String,float,float)",1,2,2
"org.andengine.opengl.shader.ShaderProgram.setUniformOptional(String,float,float,float)",1,2,2
"org.andengine.opengl.shader.ShaderProgram.setUniformOptional(String,float,float,float,float)",1,2,2
"org.andengine.opengl.shader.ShaderProgram.setUniformOptional(String,float[])",1,2,2
"org.andengine.opengl.shader.ShaderProgram.unbind(GLState)",1,1,1
"org.andengine.opengl.shader.ShaderProgramManager.loadShaderProgram(ShaderProgram)",2,3,4
"org.andengine.opengl.shader.ShaderProgramManager.loadShaderPrograms(ShaderProgram...)",1,2,2
"org.andengine.opengl.shader.ShaderProgramManager.onCreate()",1,1,1
"org.andengine.opengl.shader.ShaderProgramManager.onDestroy()",1,2,2
"org.andengine.opengl.shader.ShaderProgramManager.onReload()",1,2,2
"org.andengine.opengl.shader.exception.ShaderProgramCompileException.ShaderProgramCompileException(String,String)",1,1,1
"org.andengine.opengl.shader.exception.ShaderProgramException.ShaderProgramException(String)",1,1,1
"org.andengine.opengl.shader.exception.ShaderProgramException.ShaderProgramException(String,ShaderProgramException)",1,1,1
"org.andengine.opengl.shader.exception.ShaderProgramLinkException.ShaderProgramLinkException(String)",1,1,1
"org.andengine.opengl.shader.exception.ShaderProgramLinkException.ShaderProgramLinkException(String,ShaderProgramException)",1,1,1
"org.andengine.opengl.shader.source.CriteriaShaderSource.CriteriaShaderSource(CriteriaShaderSourceEntry...)",1,1,1
"org.andengine.opengl.shader.source.CriteriaShaderSource.CriteriaShaderSourceEntry.CriteriaShaderSourceEntry(String)",1,1,1
"org.andengine.opengl.shader.source.CriteriaShaderSource.CriteriaShaderSourceEntry.CriteriaShaderSourceEntry(String,IGLCriteria...)",1,1,1
"org.andengine.opengl.shader.source.CriteriaShaderSource.CriteriaShaderSourceEntry.getShaderSource()",1,1,1
"org.andengine.opengl.shader.source.CriteriaShaderSource.CriteriaShaderSourceEntry.isMet(GLState)",4,3,4
"org.andengine.opengl.shader.source.CriteriaShaderSource.getShaderSource(GLState)",3,3,3
"org.andengine.opengl.shader.source.StringShaderSource.StringShaderSource(String)",1,1,1
"org.andengine.opengl.shader.source.StringShaderSource.getShaderSource(GLState)",1,1,1
"org.andengine.opengl.texture.DebugTextureStateListener.onLoadedToHardware(ITexture)",1,2,2
"org.andengine.opengl.texture.DebugTextureStateListener.onUnloadedFromHardware(ITexture)",1,2,2
"org.andengine.opengl.texture.PixelFormat.PixelFormat(int,int,int,int)",1,1,1
"org.andengine.opengl.texture.PixelFormat.getBitsPerPixel()",1,1,1
"org.andengine.opengl.texture.PixelFormat.getGLFormat()",1,1,1
"org.andengine.opengl.texture.PixelFormat.getGLInternalFormat()",1,1,1
"org.andengine.opengl.texture.PixelFormat.getGLType()",1,1,1
"org.andengine.opengl.texture.Texture.Texture(TextureManager,PixelFormat,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.Texture.bind(GLState)",1,1,1
"org.andengine.opengl.texture.Texture.bind(GLState,int)",1,1,1
"org.andengine.opengl.texture.Texture.getHardwareTextureID()",1,1,1
"org.andengine.opengl.texture.Texture.getPixelFormat()",1,1,1
"org.andengine.opengl.texture.Texture.getTextureOptions()",1,1,1
"org.andengine.opengl.texture.Texture.getTextureStateListener()",1,1,1
"org.andengine.opengl.texture.Texture.hasTextureStateListener()",1,1,1
"org.andengine.opengl.texture.Texture.isLoadedToHardware()",1,1,1
"org.andengine.opengl.texture.Texture.isUpdateOnHardwareNeeded()",1,1,1
"org.andengine.opengl.texture.Texture.load()",1,1,1
"org.andengine.opengl.texture.Texture.load(GLState)",1,1,1
"org.andengine.opengl.texture.Texture.loadToHardware(GLState)",1,2,2
"org.andengine.opengl.texture.Texture.reloadToHardware(GLState)",1,1,1
"org.andengine.opengl.texture.Texture.setNotLoadedToHardware()",1,1,1
"org.andengine.opengl.texture.Texture.setTextureStateListener(ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.Texture.setUpdateOnHardwareNeeded(boolean)",1,1,1
"org.andengine.opengl.texture.Texture.unload()",1,1,1
"org.andengine.opengl.texture.Texture.unload(GLState)",1,1,1
"org.andengine.opengl.texture.Texture.unloadFromHardware(GLState)",1,2,2
"org.andengine.opengl.texture.TextureManager.addMappedTexture(String,ITexture)",4,3,4
"org.andengine.opengl.texture.TextureManager.getMappedTexture(String)",2,1,2
"org.andengine.opengl.texture.TextureManager.getTexture(String,AssetManager,String)",1,1,1
"org.andengine.opengl.texture.TextureManager.getTexture(String,AssetManager,String,TextureOptions)",2,2,2
"org.andengine.opengl.texture.TextureManager.getTexture(String,IInputStreamOpener)",1,1,1
"org.andengine.opengl.texture.TextureManager.getTexture(String,IInputStreamOpener,BitmapTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.TextureManager.getTexture(String,IInputStreamOpener,BitmapTextureFormat,TextureOptions,boolean)",2,3,3
"org.andengine.opengl.texture.TextureManager.getTexture(String,IInputStreamOpener,TextureOptions)",1,1,1
"org.andengine.opengl.texture.TextureManager.hasMappedTexture(String)",2,1,2
"org.andengine.opengl.texture.TextureManager.loadTexture(GLState,ITexture)",3,4,5
"org.andengine.opengl.texture.TextureManager.loadTexture(ITexture)",3,2,3
"org.andengine.opengl.texture.TextureManager.onCreate()",1,1,1
"org.andengine.opengl.texture.TextureManager.onDestroy()",1,2,2
"org.andengine.opengl.texture.TextureManager.onReload()",1,5,5
"org.andengine.opengl.texture.TextureManager.removedMappedTexture(String)",2,1,2
"org.andengine.opengl.texture.TextureManager.unloadTexture(GLState,ITexture)",3,4,4
"org.andengine.opengl.texture.TextureManager.unloadTexture(ITexture)",3,4,5
"org.andengine.opengl.texture.TextureManager.updateTextures(GLState)",1,12,13
"org.andengine.opengl.texture.TextureOptions.TextureOptions(int,int,int,int,boolean)",1,1,1
"org.andengine.opengl.texture.TextureOptions.apply()",1,1,1
"org.andengine.opengl.texture.TextureStateAdapter.onLoadedToHardware(ITexture)",1,1,1
"org.andengine.opengl.texture.TextureStateAdapter.onUnloadedFromHardware(ITexture)",1,1,1
"org.andengine.opengl.texture.TextureWarmUpVertexBufferObject.TextureWarmUpVertexBufferObject()",1,1,1
"org.andengine.opengl.texture.TextureWarmUpVertexBufferObject.getHeapMemoryByteSize()",1,1,1
"org.andengine.opengl.texture.TextureWarmUpVertexBufferObject.getNativeHeapMemoryByteSize()",1,1,1
"org.andengine.opengl.texture.TextureWarmUpVertexBufferObject.onBufferData()",1,1,1
"org.andengine.opengl.texture.TextureWarmUpVertexBufferObject.warmup(GLState,ITexture)",1,1,1
"org.andengine.opengl.texture.atlas.ITextureAtlas.ITextureAtlasStateListener.DebugTextureAtlasStateListener.onLoadedToHardware(ITexture)",1,2,2
"org.andengine.opengl.texture.atlas.ITextureAtlas.ITextureAtlasStateListener.DebugTextureAtlasStateListener.onTextureAtlasSourceLoadExeption(ITextureAtlas<T>,T,Throwable)",1,1,1
"org.andengine.opengl.texture.atlas.ITextureAtlas.ITextureAtlasStateListener.DebugTextureAtlasStateListener.onTextureAtlasSourceLoaded(ITextureAtlas<T>,T)",1,1,1
"org.andengine.opengl.texture.atlas.ITextureAtlas.ITextureAtlasStateListener.DebugTextureAtlasStateListener.onUnloadedFromHardware(ITexture)",1,2,2
"org.andengine.opengl.texture.atlas.ITextureAtlas.ITextureAtlasStateListener.TextureAtlasStateAdapter.onLoadedToHardware(ITexture)",1,1,1
"org.andengine.opengl.texture.atlas.ITextureAtlas.ITextureAtlasStateListener.TextureAtlasStateAdapter.onTextureAtlasSourceLoadExeption(ITextureAtlas<T>,T,Throwable)",1,1,1
"org.andengine.opengl.texture.atlas.ITextureAtlas.ITextureAtlasStateListener.TextureAtlasStateAdapter.onTextureAtlasSourceLoaded(ITextureAtlas<T>,T)",1,1,1
"org.andengine.opengl.texture.atlas.ITextureAtlas.ITextureAtlasStateListener.TextureAtlasStateAdapter.onUnloadedFromHardware(ITexture)",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.TextureAtlas(TextureManager,int,int,PixelFormat,TextureOptions,ITextureAtlasStateListener<T>)",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.addTextureAtlasSource(T,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.addTextureAtlasSource(T,int,int,int)",1,6,6
"org.andengine.opengl.texture.atlas.TextureAtlas.checkTextureAtlasSourcePosition(T,int,int)",4,4,5
"org.andengine.opengl.texture.atlas.TextureAtlas.clearTextureAtlasSources()",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.getHeight()",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.getTextureAtlasStateListener()",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.getTextureStateListener()",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.getWidth()",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.hasTextureAtlasStateListener()",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.hasTextureStateListener()",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.removeTextureAtlasSource(T,int,int)",3,5,5
"org.andengine.opengl.texture.atlas.TextureAtlas.setTextureAtlasStateListener(ITextureAtlasStateListener<T>)",1,1,1
"org.andengine.opengl.texture.atlas.TextureAtlas.setTextureStateListener(ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.BitmapTextureAtlas(TextureManager,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.BitmapTextureAtlas(TextureManager,int,int,BitmapTextureFormat)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.BitmapTextureAtlas(TextureManager,int,int,BitmapTextureFormat,ITextureAtlasStateListener<IBitmapTextureAtlasSource>)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.BitmapTextureAtlas(TextureManager,int,int,BitmapTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.BitmapTextureAtlas(TextureManager,int,int,BitmapTextureFormat,TextureOptions,ITextureAtlasStateListener<IBitmapTextureAtlasSource>)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.BitmapTextureAtlas(TextureManager,int,int,ITextureAtlasStateListener<IBitmapTextureAtlasSource>)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.BitmapTextureAtlas(TextureManager,int,int,TextureOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.BitmapTextureAtlas(TextureManager,int,int,TextureOptions,ITextureAtlasStateListener<IBitmapTextureAtlasSource>)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.addEmptyTextureAtlasSource(int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.getBitmapTextureFormat()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas.writeTextureToHardware(GLState)",4,12,12
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromAsset(BitmapTextureAtlas,AssetManager,String,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromAsset(BitmapTextureAtlas,Context,String,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromAsset(BuildableBitmapTextureAtlas,AssetManager,String)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromAsset(BuildableBitmapTextureAtlas,AssetManager,String,boolean)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromAsset(BuildableBitmapTextureAtlas,Context,String)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromAsset(BuildableBitmapTextureAtlas,Context,String,boolean)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromResource(BitmapTextureAtlas,Context,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromResource(BitmapTextureAtlas,Resources,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromResource(BuildableBitmapTextureAtlas,Context,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromResource(BuildableBitmapTextureAtlas,Context,int,boolean)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromResource(BuildableBitmapTextureAtlas,Resources,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromResource(BuildableBitmapTextureAtlas,Resources,int,boolean)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromSource(BitmapTextureAtlas,IBitmapTextureAtlasSource,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromSource(BuildableBitmapTextureAtlas,IBitmapTextureAtlasSource)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createFromSource(BuildableBitmapTextureAtlas,IBitmapTextureAtlasSource,boolean)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(BitmapTextureAtlas,AssetManager,String,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(BitmapTextureAtlas,Context,String,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(BuildableBitmapTextureAtlas,AssetManager,String,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromAsset(BuildableBitmapTextureAtlas,Context,String,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromAssetDirectory(BuildableBitmapTextureAtlas,AssetManager,String)",1,2,3
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromResource(BitmapTextureAtlas,Context,int,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromResource(BitmapTextureAtlas,Resources,int,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromResource(BuildableBitmapTextureAtlas,Context,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromResource(BuildableBitmapTextureAtlas,Resources,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromSource(BitmapTextureAtlas,IBitmapTextureAtlasSource,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.createTiledFromSource(BuildableBitmapTextureAtlas,IBitmapTextureAtlasSource,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.getAssetBasePath()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.reset()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory.setAssetBasePath(String)",2,2,3
"org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas.BuildableBitmapTextureAtlas(TextureManager,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas.BuildableBitmapTextureAtlas(TextureManager,int,int,BitmapTextureFormat)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas.BuildableBitmapTextureAtlas(TextureManager,int,int,BitmapTextureFormat,ITextureAtlasStateListener<IBitmapTextureAtlasSource>)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas.BuildableBitmapTextureAtlas(TextureManager,int,int,BitmapTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas.BuildableBitmapTextureAtlas(TextureManager,int,int,BitmapTextureFormat,TextureOptions,ITextureAtlasStateListener<IBitmapTextureAtlasSource>)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas.BuildableBitmapTextureAtlas(TextureManager,int,int,ITextureAtlasStateListener<IBitmapTextureAtlasSource>)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas.BuildableBitmapTextureAtlas(TextureManager,int,int,TextureOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.BuildableBitmapTextureAtlas.BuildableBitmapTextureAtlas(TextureManager,int,int,TextureOptions,ITextureAtlasStateListener<IBitmapTextureAtlasSource>)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource.AssetBitmapTextureAtlasSource(AssetManager,String,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource.create(AssetManager,String)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource.create(AssetManager,String,int,int)",1,2,2
"org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource.onLoadBitmap(Config)",1,2,2
"org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource.toString()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.EmptyBitmapTextureAtlasSource.EmptyBitmapTextureAtlasSource(int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.EmptyBitmapTextureAtlasSource.EmptyBitmapTextureAtlasSource(int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.EmptyBitmapTextureAtlasSource.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.EmptyBitmapTextureAtlasSource.onLoadBitmap(Config)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.EmptyBitmapTextureAtlasSource.toString()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.FileBitmapTextureAtlasSource.FileBitmapTextureAtlasSource(File,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.FileBitmapTextureAtlasSource.create(File)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.FileBitmapTextureAtlasSource.create(File,int,int)",1,2,2
"org.andengine.opengl.texture.atlas.bitmap.source.FileBitmapTextureAtlasSource.createFromExternalStorage(Context,String,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.FileBitmapTextureAtlasSource.createFromInternalStorage(Context,String,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.FileBitmapTextureAtlasSource.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.FileBitmapTextureAtlasSource.onLoadBitmap(Config)",1,2,2
"org.andengine.opengl.texture.atlas.bitmap.source.FileBitmapTextureAtlasSource.toString()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.PictureBitmapTextureAtlasSource.PictureBitmapTextureAtlasSource(Picture)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.PictureBitmapTextureAtlasSource.PictureBitmapTextureAtlasSource(Picture,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.PictureBitmapTextureAtlasSource.PictureBitmapTextureAtlasSource(Picture,int,int,float)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.PictureBitmapTextureAtlasSource.PictureBitmapTextureAtlasSource(Picture,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.PictureBitmapTextureAtlasSource.onLoadBitmap(Config)",2,2,2
"org.andengine.opengl.texture.atlas.bitmap.source.ResourceBitmapTextureAtlasSource.ResourceBitmapTextureAtlasSource(Resources,int,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.ResourceBitmapTextureAtlasSource.create(Resources,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.ResourceBitmapTextureAtlasSource.create(Resources,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.ResourceBitmapTextureAtlasSource.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.ResourceBitmapTextureAtlasSource.onLoadBitmap(Config)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.ResourceBitmapTextureAtlasSource.toString()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.BaseBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.BaseBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,TextureAtlasSourceDecoratorOptions)",1,1,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.getAntiAliasing()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.getInsetBottom()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.getInsetLeft()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.getInsetRight()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.getInsetTop()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.setAntiAliasing(boolean)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.setInsetBottom(float)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.setInsetLeft(float)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.setInsetRight(float)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.setInsetTop(float)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.setInsets(float)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions.setInsets(float,float,float,float)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.ensureLoadedBitmapIsMutable(Bitmap)",2,2,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.getPaint()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.getTextureAtlasSourceDecoratorOptions()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.getTextureHeight()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.getTextureWidth()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.onLoadBitmap(Config)",1,2,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.setPaint(Paint)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.setTextureAtlasSourceDecoratorOptions(TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseShapeBitmapTextureAtlasSourceDecorator.BaseShapeBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseShapeBitmapTextureAtlasSourceDecorator.onDecorateBitmap(Canvas)",1,1,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.ColorKeyBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,Color)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.ColorKeyBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,Color,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.ColorKeyBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,Color,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.ColorKeyBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,Color,int,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.ColorKeyBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.ColorKeyBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.ColorKeyBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.ColorKeyBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorKeyBitmapTextureAtlasSourceDecorator.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.ColorSwapBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,Color,Color)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.ColorSwapBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,Color,Color,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.ColorSwapBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,Color,int,Color)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.ColorSwapBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,Color,int,Color,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.ColorSwapBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.ColorSwapBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.ColorSwapBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.ColorSwapBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int,int,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.ColorSwapBitmapTextureAtlasSourceDecorator.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.FillBitmapTextureAtlasSourceDecorator.FillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.FillBitmapTextureAtlasSourceDecorator.FillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.FillBitmapTextureAtlasSourceDecorator.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientDirection.LinearGradientDirection(int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientDirection.getFromX(int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientDirection.getFromY(int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientDirection.getToX(int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientDirection.getToY(int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientFillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int,LinearGradientDirection)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientFillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int,LinearGradientDirection,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientFillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int[],float[],LinearGradientDirection)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.LinearGradientFillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int[],float[],LinearGradientDirection,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.LinearGradientFillBitmapTextureAtlasSourceDecorator.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.OutlineBitmapTextureAtlasSourceDecorator.OutlineBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.OutlineBitmapTextureAtlasSourceDecorator.OutlineBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.OutlineBitmapTextureAtlasSourceDecorator.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.RadialGradientFillBitmapTextureAtlasSourceDecorator.RadialGradientFillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int,RadialGradientDirection)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.RadialGradientFillBitmapTextureAtlasSourceDecorator.RadialGradientFillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int,int,RadialGradientDirection,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.RadialGradientFillBitmapTextureAtlasSourceDecorator.RadialGradientFillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int[],float[],RadialGradientDirection)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.RadialGradientFillBitmapTextureAtlasSourceDecorator.RadialGradientFillBitmapTextureAtlasSourceDecorator(IBitmapTextureAtlasSource,IBitmapTextureAtlasSourceDecoratorShape,int[],float[],RadialGradientDirection,TextureAtlasSourceDecoratorOptions)",2,2,3
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.RadialGradientFillBitmapTextureAtlasSourceDecorator.deepCopy()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.ArcBitmapTextureAtlasSourceDecoratorShape.ArcBitmapTextureAtlasSourceDecoratorShape()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.ArcBitmapTextureAtlasSourceDecoratorShape.ArcBitmapTextureAtlasSourceDecoratorShape(float,float,boolean)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.ArcBitmapTextureAtlasSourceDecoratorShape.getDefaultInstance()",1,1,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.ArcBitmapTextureAtlasSourceDecoratorShape.onDecorateBitmap(Canvas,Paint,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.CircleBitmapTextureAtlasSourceDecoratorShape.CircleBitmapTextureAtlasSourceDecoratorShape()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.CircleBitmapTextureAtlasSourceDecoratorShape.getDefaultInstance()",1,1,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.CircleBitmapTextureAtlasSourceDecoratorShape.onDecorateBitmap(Canvas,Paint,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.EllipseBitmapTextureAtlasSourceDecoratorShape.EllipseBitmapTextureAtlasSourceDecoratorShape()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.EllipseBitmapTextureAtlasSourceDecoratorShape.getDefaultInstance()",1,1,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.EllipseBitmapTextureAtlasSourceDecoratorShape.onDecorateBitmap(Canvas,Paint,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.RectangleBitmapTextureAtlasSourceDecoratorShape.RectangleBitmapTextureAtlasSourceDecoratorShape()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.RectangleBitmapTextureAtlasSourceDecoratorShape.getDefaultInstance()",1,1,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.RectangleBitmapTextureAtlasSourceDecoratorShape.onDecorateBitmap(Canvas,Paint,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.RoundedRectangleBitmapTextureAtlasSourceDecoratorShape.RoundedRectangleBitmapTextureAtlasSourceDecoratorShape()",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.RoundedRectangleBitmapTextureAtlasSourceDecoratorShape.RoundedRectangleBitmapTextureAtlasSourceDecoratorShape(float,float)",1,1,1
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.RoundedRectangleBitmapTextureAtlasSourceDecoratorShape.getDefaultInstance()",1,1,2
"org.andengine.opengl.texture.atlas.bitmap.source.decorator.shape.RoundedRectangleBitmapTextureAtlasSourceDecoratorShape.onDecorateBitmap(Canvas,Paint,TextureAtlasSourceDecoratorOptions)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.BuildableTextureAtlas(T)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.TextureAtlasSourceWithWithLocationCallback.TextureAtlasSourceWithWithLocationCallback(T,Callback<T>)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.TextureAtlasSourceWithWithLocationCallback.getCallback()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.TextureAtlasSourceWithWithLocationCallback.getTextureAtlasSource()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.addEmptyTextureAtlasSource(int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.addTextureAtlasSource(S,Callback<S>)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.addTextureAtlasSource(S,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.addTextureAtlasSource(S,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.bind(GLState)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.bind(GLState,int)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.build(ITextureAtlasBuilder<S, T>)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.clearTextureAtlasSources()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.getHardwareTextureID()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.getHeight()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.getPixelFormat()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.getTextureAtlasStateListener()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.getTextureOptions()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.getTextureStateListener()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.getWidth()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.hasTextureAtlasStateListener()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.hasTextureStateListener()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.isLoadedToHardware()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.isUpdateOnHardwareNeeded()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.load()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.load(GLState)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.loadToHardware(GLState)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.reloadToHardware(GLState)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.removeTextureAtlasSource(ITextureAtlasSource)",3,3,3
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.removeTextureAtlasSource(S,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.setNotLoadedToHardware()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.setTextureAtlasStateListener(ITextureAtlasStateListener<S>)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.setTextureStateListener(ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.setUpdateOnHardwareNeeded(boolean)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.unload()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.unload(GLState)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlas.unloadFromHardware(GLState)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlasTextureRegionFactory.createFromSource(BuildableTextureAtlas<T, A>,T,boolean)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.BuildableTextureAtlasTextureRegionFactory.createTiledFromSource(BuildableTextureAtlas<T, A>,T,int,int)",1,3,3
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.BlackPawnTextureAtlasBuilder(int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Node.Node(Rect)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Node.Node(int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Node.createChildren(ITextureAtlasSource,int,int,int,int,int,int)",1,2,2
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Node.getChildA()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Node.getChildB()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Node.getRect()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Node.insert(ITextureAtlasSource,int,int,int,int)",16,11,21
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Rect.Rect(int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Rect.getBottom()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Rect.getHeight()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Rect.getLeft()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Rect.getRight()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Rect.getTop()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Rect.getWidth()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.Rect.toString()",1,1,1
"org.andengine.opengl.texture.atlas.buildable.builder.BlackPawnTextureAtlasBuilder.build(A,ArrayList<TextureAtlasSourceWithWithLocationCallback<T>>)",3,4,4
"org.andengine.opengl.texture.atlas.buildable.builder.ITextureAtlasBuilder.TextureAtlasBuilderException.TextureAtlasBuilderException(String)",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.BaseTextureAtlasSource(int,int,int,int)",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.getTextureHeight()",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.getTextureWidth()",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.getTextureX()",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.getTextureY()",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.setTextureHeight(int)",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.setTextureWidth(int)",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.setTextureX(int)",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.setTextureY(int)",1,1,1
"org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource.toString()",1,1,1
"org.andengine.opengl.texture.bitmap.AssetBitmapTexture.AssetBitmapTexture(TextureManager,AssetManager,String)",1,1,1
"org.andengine.opengl.texture.bitmap.AssetBitmapTexture.AssetBitmapTexture(TextureManager,AssetManager,String,BitmapTextureFormat)",1,1,1
"org.andengine.opengl.texture.bitmap.AssetBitmapTexture.AssetBitmapTexture(TextureManager,AssetManager,String,BitmapTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.bitmap.AssetBitmapTexture.AssetBitmapTexture(TextureManager,AssetManager,String,BitmapTextureFormat,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.bitmap.AssetBitmapTexture.AssetBitmapTexture(TextureManager,AssetManager,String,TextureOptions)",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.BitmapTexture(TextureManager,IInputStreamOpener)",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.BitmapTexture(TextureManager,IInputStreamOpener,BitmapTextureFormat)",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.BitmapTexture(TextureManager,IInputStreamOpener,BitmapTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.BitmapTexture(TextureManager,IInputStreamOpener,BitmapTextureFormat,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.BitmapTexture(TextureManager,IInputStreamOpener,TextureOptions)",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.getHeight()",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.getWidth()",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.onGetBitmap(Config)",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTexture.writeTextureToHardware(GLState)",2,7,7
"org.andengine.opengl.texture.bitmap.BitmapTextureFormat.BitmapTextureFormat(Config,PixelFormat)",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTextureFormat.fromPixelFormat(PixelFormat)",6,2,6
"org.andengine.opengl.texture.bitmap.BitmapTextureFormat.getBitmapConfig()",1,1,1
"org.andengine.opengl.texture.bitmap.BitmapTextureFormat.getPixelFormat()",1,1,1
"org.andengine.opengl.texture.bitmap.ResourceBitmapTexture.ResourceBitmapTexture(TextureManager,Resources,int)",1,1,1
"org.andengine.opengl.texture.bitmap.ResourceBitmapTexture.ResourceBitmapTexture(TextureManager,Resources,int,BitmapTextureFormat)",1,1,1
"org.andengine.opengl.texture.bitmap.ResourceBitmapTexture.ResourceBitmapTexture(TextureManager,Resources,int,BitmapTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.bitmap.ResourceBitmapTexture.ResourceBitmapTexture(TextureManager,Resources,int,BitmapTextureFormat,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.bitmap.ResourceBitmapTexture.ResourceBitmapTexture(TextureManager,Resources,int,TextureOptions)",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.ETC1Texture(TextureManager)",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.ETC1Texture(TextureManager,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.ETC1Texture(TextureManager,TextureOptions)",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.ETC1Texture(TextureManager,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.ETC1TextureHeader.ETC1TextureHeader(byte[])",3,3,3
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.ETC1TextureHeader.getHeight()",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.ETC1TextureHeader.getWidth()",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.getHeight()",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.getWidth()",1,1,1
"org.andengine.opengl.texture.compressed.etc1.ETC1Texture.writeTextureToHardware(GLState)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZCompressionFormat.CCZCompressionFormat(short)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZCompressionFormat.fromID(short)",3,1,3
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZCompressionFormat.wrap(InputStream)",4,2,4
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZHeader.CCZHeader(byte[])",2,2,2
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZHeader.getCCZCompressionFormat()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZHeader.getCCZCompressionFormatID()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZHeader.getUncompressedSize()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZHeader.getUserdata()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.CCZHeader.getVersion()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.PVRCCZTexture(TextureManager,PVRTextureFormat)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.PVRCCZTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.PVRCCZTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.PVRCCZTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,TextureOptions)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.PVRCCZTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.PVRCCZTexture(TextureManager,PVRTextureFormat,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.PVRCCZTexture(TextureManager,PVRTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.PVRCCZTexture(TextureManager,PVRTextureFormat,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.getInputStream()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRCCZTexture.getPVRTextureBuffer()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.PVRGZTexture(TextureManager,PVRTextureFormat)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.PVRGZTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.PVRGZTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.PVRGZTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,TextureOptions)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.PVRGZTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.PVRGZTexture(TextureManager,PVRTextureFormat,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.PVRGZTexture(TextureManager,PVRTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.PVRGZTexture(TextureManager,PVRTextureFormat,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRGZTexture.getInputStream()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTexture(TextureManager,PVRTextureFormat)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,TextureOptions)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTexture(TextureManager,PVRTextureFormat,IPVRTexturePixelBufferStrategy,TextureOptions,ITextureStateListener)",4,6,7
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTexture(TextureManager,PVRTextureFormat,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTexture(TextureManager,PVRTextureFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTexture(TextureManager,PVRTextureFormat,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureFormat.PVRTextureFormat(int,boolean,PixelFormat)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureFormat.fromID(int)",3,1,3
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureFormat.fromPixelFormat(PixelFormat)",5,2,5
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureFormat.getID()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureFormat.getPixelFormat()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureFormat.isCompressed()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.PVRTextureHeader(byte[])",2,2,2
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getBitmaskAlpha()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getBitmaskBlue()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getBitmaskGreen()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getBitmaskRed()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getBitsPerPixel()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getDataLength()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getFlags()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getHeight()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getNumMipmaps()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getPVRTag()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getPVRTextureFormat()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.getWidth()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.hasAlpha()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.headerLength()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.PVRTextureHeader.numSurfs()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.getHeight()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.getInputStream()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.getPVRTextureBuffer()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.getPVRTextureHeader()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.getWidth()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.hasMipMaps()",1,1,1
"org.andengine.opengl.texture.compressed.pvr.PVRTexture.writeTextureToHardware(GLState)",1,5,5
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.GreedyPVRTexturePixelBufferStrategy.GreedyPVRTexturePixelBufferStrategyBufferManager.GreedyPVRTexturePixelBufferStrategyBufferManager(PVRTexture)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.GreedyPVRTexturePixelBufferStrategy.GreedyPVRTexturePixelBufferStrategyBufferManager.getPixelBuffer(int,int)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.GreedyPVRTexturePixelBufferStrategy.loadPVRTextureData(IPVRTexturePixelBufferStrategyBufferManager,int,int,int,PixelFormat,int,int,int)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.GreedyPVRTexturePixelBufferStrategy.newPVRTexturePixelBufferStrategyManager(PVRTexture)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.SmartPVRTexturePixelBufferStrategy.SmartPVRTexturePixelBufferStrategy(int)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.SmartPVRTexturePixelBufferStrategy.SmartPVRTexturePixelBufferStrategyBufferManager.SmartPVRTexturePixelBufferStrategyBufferManager(PVRTexture)",1,1,1
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.SmartPVRTexturePixelBufferStrategy.SmartPVRTexturePixelBufferStrategyBufferManager.getPixelBuffer(int,int)",4,2,6
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.SmartPVRTexturePixelBufferStrategy.loadPVRTextureData(IPVRTexturePixelBufferStrategyBufferManager,int,int,int,PixelFormat,int,int,int)",1,2,2
"org.andengine.opengl.texture.compressed.pvr.pixelbufferstrategy.SmartPVRTexturePixelBufferStrategy.newPVRTexturePixelBufferStrategyManager(PVRTexture)",1,1,1
"org.andengine.opengl.texture.region.BaseTextureRegion.BaseTextureRegion(ITexture)",1,1,1
"org.andengine.opengl.texture.region.BaseTextureRegion.getTexture()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.TextureRegion(ITexture,float,float,float,float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.TextureRegion(ITexture,float,float,float,float,boolean)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.TextureRegion(ITexture,float,float,float,float,float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.TextureRegion(ITexture,float,float,float,float,float,boolean)",1,1,2
"org.andengine.opengl.texture.region.TextureRegion.deepCopy()",2,1,2
"org.andengine.opengl.texture.region.TextureRegion.getHeight()",2,1,2
"org.andengine.opengl.texture.region.TextureRegion.getScale()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.getTextureX()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.getTextureY()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.getU()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.getU2()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.getV()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.getV2()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.getWidth()",2,1,2
"org.andengine.opengl.texture.region.TextureRegion.isRotated()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.isScaled()",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.set(float,float,float,float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.setTextureHeight(float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.setTexturePosition(float,float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.setTextureSize(float,float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.setTextureWidth(float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.setTextureX(float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.setTextureY(float)",1,1,1
"org.andengine.opengl.texture.region.TextureRegion.updateUV()",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.createFromSource(ITextureAtlas<T>,T,int,int)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.createFromSource(ITextureAtlas<T>,T,int,int,boolean)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.createTiledFromSource(ITextureAtlas<T>,T,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.createTiledFromSource(ITextureAtlas<T>,T,int,int,int,int,boolean)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.extractFromTexture(ITexture)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.extractFromTexture(ITexture,boolean)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.extractFromTexture(ITexture,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.extractFromTexture(ITexture,int,int,int,int,boolean)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.extractTiledFromTexture(ITexture,int,int)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionFactory.extractTiledFromTexture(ITexture,int,int,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionLibrary.TextureRegionLibrary(int)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionLibrary.get(int)",1,1,1
"org.andengine.opengl.texture.region.TextureRegionLibrary.getTiled(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.TiledTextureRegion(ITexture,ITextureRegion...)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.TiledTextureRegion(ITexture,boolean,ITextureRegion...)",4,4,4
"org.andengine.opengl.texture.region.TiledTextureRegion.create(ITexture,int,int,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.create(ITexture,int,int,int,int,int,int,boolean)",1,1,3
"org.andengine.opengl.texture.region.TiledTextureRegion.deepCopy()",1,2,2
"org.andengine.opengl.texture.region.TiledTextureRegion.getCurrentTileIndex()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getHeight()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getHeight(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getScale()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getScale(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getTextureRegion(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getTextureX()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getTextureX(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getTextureY()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getTextureY(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getTileCount()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getU()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getU(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getU2()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getU2(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getV()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getV(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getV2()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getV2(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getWidth()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.getWidth(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.isRotated()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.isRotated(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.isScaled()",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.isScaled(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.nextTile()",1,1,2
"org.andengine.opengl.texture.region.TiledTextureRegion.set(float,float,float,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.set(int,float,float,float,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setCurrentTileIndex(int)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureHeight(float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureHeight(int,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTexturePosition(float,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTexturePosition(int,float,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureSize(float,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureSize(int,float,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureWidth(float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureWidth(int,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureX(float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureX(int,float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureY(float)",1,1,1
"org.andengine.opengl.texture.region.TiledTextureRegion.setTextureY(int,float)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.RenderTexture(TextureManager,int,int)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.RenderTexture(TextureManager,int,int,PixelFormat)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.RenderTexture(TextureManager,int,int,PixelFormat,TextureOptions)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.RenderTexture(TextureManager,int,int,PixelFormat,TextureOptions,ITextureStateListener)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.RenderTexture(TextureManager,int,int,TextureOptions)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.begin(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.begin(GLState,Color)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.begin(GLState,boolean,boolean)",1,1,3
"org.andengine.opengl.texture.render.RenderTexture.begin(GLState,boolean,boolean,Color)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.begin(GLState,boolean,boolean,float,float,float,float)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.begin(GLState,float,float,float,float)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.destroy(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.end(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.end(GLState,boolean,boolean)",1,3,3
"org.andengine.opengl.texture.render.RenderTexture.finish(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.flush(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.getBitmap(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.getBitmap(GLState,int,int,int,int)",2,1,2
"org.andengine.opengl.texture.render.RenderTexture.getHeight()",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.getPixelsARGB_8888(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.getPixelsARGB_8888(GLState,int,int,int,int)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.getWidth()",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.init(GLState)",1,2,3
"org.andengine.opengl.texture.render.RenderTexture.isInitialized()",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.resotorePreviousViewport()",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.restorePreviousFramebufferObjectID(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.savePreviousFramebufferObjectID(GLState)",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.savePreviousViewport()",1,1,1
"org.andengine.opengl.texture.render.RenderTexture.writeTextureToHardware(GLState)",1,1,1
"org.andengine.opengl.util.BufferUtils.allocateDirectByteBuffer(int)",2,2,2
"org.andengine.opengl.util.BufferUtils.freeDirectByteBuffer(ByteBuffer)",1,2,2
"org.andengine.opengl.util.BufferUtils.getUnsignedByte(ByteBuffer)",1,1,1
"org.andengine.opengl.util.BufferUtils.getUnsignedByte(ByteBuffer,int)",1,1,1
"org.andengine.opengl.util.BufferUtils.getUnsignedInt(ByteBuffer)",1,1,1
"org.andengine.opengl.util.BufferUtils.getUnsignedInt(ByteBuffer,int)",1,1,1
"org.andengine.opengl.util.BufferUtils.getUnsignedShort(ByteBuffer)",1,1,1
"org.andengine.opengl.util.BufferUtils.getUnsignedShort(ByteBuffer,int)",1,1,1
"org.andengine.opengl.util.BufferUtils.jniAllocateDirect(int)",1,1,1
"org.andengine.opengl.util.BufferUtils.jniFreeDirect(ByteBuffer)",1,1,1
"org.andengine.opengl.util.BufferUtils.jniPut(ByteBuffer,float[],int,int)",1,1,1
"org.andengine.opengl.util.BufferUtils.put(ByteBuffer,float[],int,int)",1,3,3
"org.andengine.opengl.util.BufferUtils.putUnsignedByte(ByteBuffer,int)",1,1,1
"org.andengine.opengl.util.BufferUtils.putUnsignedByte(ByteBuffer,int,int)",1,1,1
"org.andengine.opengl.util.BufferUtils.putUnsignedInt(ByteBuffer,int,long)",1,1,1
"org.andengine.opengl.util.BufferUtils.putUnsignedInt(ByteBuffer,long)",1,1,1
"org.andengine.opengl.util.BufferUtils.putUnsignedShort(ByteBuffer,int)",1,1,1
"org.andengine.opengl.util.BufferUtils.putUnsignedShort(ByteBuffer,int,int)",1,1,1
"org.andengine.opengl.util.GLHelper.convertARGB_8888toA_8(int[])",1,1,2
"org.andengine.opengl.util.GLHelper.convertARGB_8888toRGBA_4444(int[])",1,1,1
"org.andengine.opengl.util.GLHelper.convertARGB_8888toRGBA_4444(int[],ByteOrder)",1,1,4
"org.andengine.opengl.util.GLHelper.convertARGB_8888toRGBA_8888(int[])",1,1,1
"org.andengine.opengl.util.GLHelper.convertARGB_8888toRGBA_8888(int[],ByteOrder)",1,1,4
"org.andengine.opengl.util.GLHelper.convertARGB_8888toRGB_565(int[])",1,1,1
"org.andengine.opengl.util.GLHelper.convertARGB_8888toRGB_565(int[],ByteOrder)",1,1,4
"org.andengine.opengl.util.GLHelper.convertRGBA_8888toARGB_8888(int[])",1,1,1
"org.andengine.opengl.util.GLHelper.convertRGBA_8888toARGB_8888(int[],ByteOrder)",1,1,4
"org.andengine.opengl.util.GLHelper.convertRGBA_8888toARGB_8888_FlippedVertical(int[],int,int)",1,1,1
"org.andengine.opengl.util.GLHelper.convertRGBA_8888toARGB_8888_FlippedVertical(int[],int,int,ByteOrder)",1,1,6
"org.andengine.opengl.util.GLHelper.getPixels(Bitmap,PixelFormat)",1,1,1
"org.andengine.opengl.util.GLHelper.getPixels(Bitmap,PixelFormat,ByteOrder)",5,5,7
"org.andengine.opengl.util.GLHelper.getPixelsARGB_8888(Bitmap)",1,1,1
"org.andengine.opengl.util.GLMatrixStack.GLMatrixStack()",1,1,1
"org.andengine.opengl.util.GLMatrixStack.GLMatrixStackOverflowException.GLMatrixStackOverflowException()",1,1,1
"org.andengine.opengl.util.GLMatrixStack.GLMatrixStackUnderflowException.GLMatrixStackUnderflowException()",1,1,1
"org.andengine.opengl.util.GLMatrixStack.getMatrix(float[])",1,1,1
"org.andengine.opengl.util.GLMatrixStack.glLoadIdentity()",1,1,1
"org.andengine.opengl.util.GLMatrixStack.glOrthof(float,float,float,float,float,float)",1,1,1
"org.andengine.opengl.util.GLMatrixStack.glPopMatrix()",2,1,2
"org.andengine.opengl.util.GLMatrixStack.glPushMatrix()",2,1,2
"org.andengine.opengl.util.GLMatrixStack.glRotatef(float,float,float,float)",1,1,1
"org.andengine.opengl.util.GLMatrixStack.glScalef(float,float,float)",1,1,1
"org.andengine.opengl.util.GLMatrixStack.glSkewf(float,float)",1,1,1
"org.andengine.opengl.util.GLMatrixStack.glTranslatef(float,float,float)",1,1,1
"org.andengine.opengl.util.GLMatrixStack.reset()",1,1,1
"org.andengine.opengl.util.GLMatrixStack.setSkewM(float[],int,float,float)",1,1,1
"org.andengine.opengl.util.GLState.activeTexture(int)",1,2,2
"org.andengine.opengl.util.GLState.bindArrayBuffer(int)",1,2,2
"org.andengine.opengl.util.GLState.bindFramebuffer(int)",1,1,1
"org.andengine.opengl.util.GLState.bindIndexBuffer(int)",1,2,2
"org.andengine.opengl.util.GLState.bindTexture(int)",1,2,2
"org.andengine.opengl.util.GLState.blendFunction(int,int)",1,2,3
"org.andengine.opengl.util.GLState.checkError()",2,1,2
"org.andengine.opengl.util.GLState.checkFramebufferStatus()",7,3,8
"org.andengine.opengl.util.GLState.clearError()",1,1,1
"org.andengine.opengl.util.GLState.deleteArrayBuffer(int)",1,1,2
"org.andengine.opengl.util.GLState.deleteFramebuffer(int)",1,1,2
"org.andengine.opengl.util.GLState.deleteIndexBuffer(int)",1,1,2
"org.andengine.opengl.util.GLState.deleteProgram(int)",1,1,2
"org.andengine.opengl.util.GLState.deleteTexture(int)",1,1,2
"org.andengine.opengl.util.GLState.disableBlend()",2,1,2
"org.andengine.opengl.util.GLState.disableCulling()",2,1,2
"org.andengine.opengl.util.GLState.disableDepthTest()",2,1,2
"org.andengine.opengl.util.GLState.disableDither()",2,1,2
"org.andengine.opengl.util.GLState.disableScissorTest()",2,1,2
"org.andengine.opengl.util.GLState.enableBlend()",2,1,2
"org.andengine.opengl.util.GLState.enableCulling()",2,1,2
"org.andengine.opengl.util.GLState.enableDepthTest()",2,1,2
"org.andengine.opengl.util.GLState.enableDither()",2,1,2
"org.andengine.opengl.util.GLState.enableScissorTest()",2,1,2
"org.andengine.opengl.util.GLState.finish()",1,1,1
"org.andengine.opengl.util.GLState.flush()",1,1,1
"org.andengine.opengl.util.GLState.generateArrayBuffer(int,int)",1,1,1
"org.andengine.opengl.util.GLState.generateBuffer()",1,1,1
"org.andengine.opengl.util.GLState.generateFramebuffer()",1,1,1
"org.andengine.opengl.util.GLState.generateIndexBuffer(int,int)",1,1,1
"org.andengine.opengl.util.GLState.generateTexture()",1,1,1
"org.andengine.opengl.util.GLState.getActiveFramebuffer()",1,1,1
"org.andengine.opengl.util.GLState.getActiveTexture()",1,1,1
"org.andengine.opengl.util.GLState.getError()",1,1,1
"org.andengine.opengl.util.GLState.getExtensions()",1,1,1
"org.andengine.opengl.util.GLState.getFramebufferStatus()",1,1,1
"org.andengine.opengl.util.GLState.getInteger(int)",1,1,1
"org.andengine.opengl.util.GLState.getMaximumFragmentShaderUniformVectorCount()",1,1,1
"org.andengine.opengl.util.GLState.getMaximumTextureSize()",1,1,1
"org.andengine.opengl.util.GLState.getMaximumTextureUnits()",1,1,1
"org.andengine.opengl.util.GLState.getMaximumVertexAttributeCount()",1,1,1
"org.andengine.opengl.util.GLState.getMaximumVertexShaderUniformVectorCount()",1,1,1
"org.andengine.opengl.util.GLState.getModelViewGLMatrix()",1,1,1
"org.andengine.opengl.util.GLState.getModelViewProjectionGLMatrix()",1,1,1
"org.andengine.opengl.util.GLState.getProjectionGLMatrix()",1,1,1
"org.andengine.opengl.util.GLState.getRenderer()",1,1,1
"org.andengine.opengl.util.GLState.getVersion()",1,1,1
"org.andengine.opengl.util.GLState.glTexImage2D(int,int,Bitmap,int,PixelFormat)",1,1,1
"org.andengine.opengl.util.GLState.glTexSubImage2D(int,int,int,int,Bitmap,PixelFormat)",1,1,1
"org.andengine.opengl.util.GLState.isBlendEnabled()",1,1,1
"org.andengine.opengl.util.GLState.isCullingEnabled()",1,1,1
"org.andengine.opengl.util.GLState.isDepthTestEnabled()",1,1,1
"org.andengine.opengl.util.GLState.isDitherEnabled()",1,1,1
"org.andengine.opengl.util.GLState.isScissorTestEnabled()",1,1,1
"org.andengine.opengl.util.GLState.isTexture(int)",1,1,1
"org.andengine.opengl.util.GLState.lineWidth(float)",1,2,2
"org.andengine.opengl.util.GLState.loadModelViewGLMatrixIdentity()",1,1,1
"org.andengine.opengl.util.GLState.loadProjectionGLMatrixIdentity()",1,1,1
"org.andengine.opengl.util.GLState.orthoModelViewGLMatrixf(float,float,float,float,float,float)",1,1,1
"org.andengine.opengl.util.GLState.orthoProjectionGLMatrixf(float,float,float,float,float,float)",1,1,1
"org.andengine.opengl.util.GLState.popModelViewGLMatrix()",1,1,1
"org.andengine.opengl.util.GLState.popProjectionGLMatrix()",1,1,1
"org.andengine.opengl.util.GLState.pushModelViewGLMatrix()",1,1,1
"org.andengine.opengl.util.GLState.pushProjectionGLMatrix()",1,1,1
"org.andengine.opengl.util.GLState.reset(RenderOptions,ConfigChooser,EGLConfig)",1,2,2
"org.andengine.opengl.util.GLState.resetGLMatrixStacks()",1,1,1
"org.andengine.opengl.util.GLState.resetModelViewGLMatrixStack()",1,1,1
"org.andengine.opengl.util.GLState.resetProjectionGLMatrixStack()",1,1,1
"org.andengine.opengl.util.GLState.rotateModelViewGLMatrixf(float,float,float,float)",1,1,1
"org.andengine.opengl.util.GLState.rotateProjectionGLMatrixf(float,float,float,float)",1,1,1
"org.andengine.opengl.util.GLState.scaleModelViewGLMatrixf(float,float,int)",1,1,1
"org.andengine.opengl.util.GLState.scaleProjectionGLMatrixf(float,float,float)",1,1,1
"org.andengine.opengl.util.GLState.setBlendEnabled(boolean)",2,2,2
"org.andengine.opengl.util.GLState.setCullingEnabled(boolean)",2,2,2
"org.andengine.opengl.util.GLState.setDepthTestEnabled(boolean)",2,2,2
"org.andengine.opengl.util.GLState.setDitherEnabled(boolean)",2,2,2
"org.andengine.opengl.util.GLState.setScissorTestEnabled(boolean)",2,2,2
"org.andengine.opengl.util.GLState.skewModelViewGLMatrixf(float,float)",1,1,1
"org.andengine.opengl.util.GLState.skewProjectionGLMatrixf(float,float)",1,1,1
"org.andengine.opengl.util.GLState.translateModelViewGLMatrixf(float,float,float)",1,1,1
"org.andengine.opengl.util.GLState.translateProjectionGLMatrixf(float,float,float)",1,1,1
"org.andengine.opengl.util.GLState.useProgram(int)",1,2,2
"org.andengine.opengl.util.VertexUtils.getVertex(float[],int,int,int)",1,1,1
"org.andengine.opengl.util.criteria.AndroidVersionCodeGLCriteria.AndroidVersionCodeGLCriteria(IntOperator,int)",1,1,1
"org.andengine.opengl.util.criteria.AndroidVersionCodeGLCriteria.getActualCriteria(GLState)",1,1,1
"org.andengine.opengl.util.criteria.BuildModelGLCriteria.BuildModelGLCriteria(StringOperator,String)",1,1,1
"org.andengine.opengl.util.criteria.BuildModelGLCriteria.getActualCriteria(GLState)",1,1,1
"org.andengine.opengl.util.criteria.GLExtensionsGLCriteria.GLExtensionsGLCriteria(StringOperator,String)",1,1,1
"org.andengine.opengl.util.criteria.GLExtensionsGLCriteria.getActualCriteria(GLState)",1,1,1
"org.andengine.opengl.util.criteria.GLRendererGLCriteria.GLRendererGLCriteria(StringOperator,String)",1,1,1
"org.andengine.opengl.util.criteria.GLRendererGLCriteria.getActualCriteria(GLState)",1,1,1
"org.andengine.opengl.util.criteria.GLVersionGLCriteria.GLVersionGLCriteria(StringOperator,String)",1,1,1
"org.andengine.opengl.util.criteria.GLVersionGLCriteria.getActualCriteria(GLState)",1,1,1
"org.andengine.opengl.util.criteria.IntGLCriteria.IntGLCriteria(IntOperator,int)",1,1,1
"org.andengine.opengl.util.criteria.IntGLCriteria.isMet(GLState)",1,1,1
"org.andengine.opengl.util.criteria.LogicalAndGLCriteria.LogicalAndGLCriteria(IGLCriteria...)",1,1,1
"org.andengine.opengl.util.criteria.LogicalAndGLCriteria.isMet(GLState)",3,2,3
"org.andengine.opengl.util.criteria.LogicalOrGLCriteria.LogicalOrGLCriteria(IGLCriteria...)",1,1,1
"org.andengine.opengl.util.criteria.LogicalOrGLCriteria.isMet(GLState)",3,2,3
"org.andengine.opengl.util.criteria.StringGLCriteria.StringGLCriteria(StringOperator,String)",1,1,1
"org.andengine.opengl.util.criteria.StringGLCriteria.isMet(GLState)",1,1,1
"org.andengine.opengl.vbo.DrawType.DrawType(int)",1,1,1
"org.andengine.opengl.vbo.DrawType.getUsage()",1,1,1
"org.andengine.opengl.vbo.HighPerformanceVertexBufferObject.HighPerformanceVertexBufferObject(VertexBufferObjectManager,float[],DrawType,boolean,VertexBufferObjectAttributes)",1,2,2
"org.andengine.opengl.vbo.HighPerformanceVertexBufferObject.HighPerformanceVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,2,2
"org.andengine.opengl.vbo.HighPerformanceVertexBufferObject.getBufferData()",1,1,1
"org.andengine.opengl.vbo.HighPerformanceVertexBufferObject.getHeapMemoryByteSize()",1,1,1
"org.andengine.opengl.vbo.HighPerformanceVertexBufferObject.getNativeHeapMemoryByteSize()",1,1,1
"org.andengine.opengl.vbo.HighPerformanceVertexBufferObject.onBufferData()",1,2,2
"org.andengine.opengl.vbo.LowMemoryVertexBufferObject.LowMemoryVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.vbo.LowMemoryVertexBufferObject.getFloatBuffer()",1,1,1
"org.andengine.opengl.vbo.LowMemoryVertexBufferObject.getHeapMemoryByteSize()",1,1,1
"org.andengine.opengl.vbo.LowMemoryVertexBufferObject.getNativeHeapMemoryByteSize()",1,1,1
"org.andengine.opengl.vbo.LowMemoryVertexBufferObject.onBufferData()",1,1,1
"org.andengine.opengl.vbo.SharedMemoryVertexBufferObject.SharedMemoryVertexBufferObject(VertexBufferObjectManager,int,DrawType,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.vbo.SharedMemoryVertexBufferObject.aquireByteBuffer()",1,4,4
"org.andengine.opengl.vbo.SharedMemoryVertexBufferObject.dispose()",1,2,2
"org.andengine.opengl.vbo.SharedMemoryVertexBufferObject.getSharedByteBufferByteCapacity()",1,2,2
"org.andengine.opengl.vbo.SharedMemoryVertexBufferObject.releaseByteBuffer(ByteBuffer)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.VertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.bind(GLState)",1,4,4
"org.andengine.opengl.vbo.VertexBufferObject.bind(GLState,ShaderProgram)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.dispose()",2,3,3
"org.andengine.opengl.vbo.VertexBufferObject.draw(int,int)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.draw(int,int,int)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.finalize()",1,2,2
"org.andengine.opengl.vbo.VertexBufferObject.getByteCapacity()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.getCapacity()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.getGPUMemoryByteSize()",2,2,2
"org.andengine.opengl.vbo.VertexBufferObject.getHardwareBufferID()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.getVertexBufferObjectManager()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.isAutoDispose()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.isDirtyOnHardware()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.isDisposed()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.isLoadedToHardware()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.loadToHardware(GLState)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.setDirtyOnHardware()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.setNotLoadedToHardware()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.unbind(GLState,ShaderProgram)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObject.unloadFromHardware(GLState)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObjectManager.getGPUHeapMemoryByteSize()",1,2,2
"org.andengine.opengl.vbo.VertexBufferObjectManager.getHeapMemoryByteSize()",1,2,2
"org.andengine.opengl.vbo.VertexBufferObjectManager.getNativeHeapMemoryByteSize()",1,2,2
"org.andengine.opengl.vbo.VertexBufferObjectManager.onCreate()",1,1,1
"org.andengine.opengl.vbo.VertexBufferObjectManager.onDestroy()",1,2,2
"org.andengine.opengl.vbo.VertexBufferObjectManager.onReload()",1,2,2
"org.andengine.opengl.vbo.VertexBufferObjectManager.onUnloadVertexBufferObject(IVertexBufferObject)",1,2,2
"org.andengine.opengl.vbo.VertexBufferObjectManager.onVertexBufferObjectLoaded(IVertexBufferObject)",1,1,1
"org.andengine.opengl.vbo.VertexBufferObjectManager.updateVertexBufferObjects(GLState)",1,3,3
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.ZeroMemoryVertexBufferObject(VertexBufferObjectManager,int,DrawType,boolean,VertexBufferObjectAttributes)",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.aquireByteBuffer()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.bind(GLState)",1,4,4
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.bind(GLState,ShaderProgram)",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.dispose()",2,2,2
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.draw(int,int)",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.draw(int,int,int)",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.finalize()",1,2,2
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.getByteCapacity()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.getCapacity()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.getGPUMemoryByteSize()",2,2,2
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.getHardwareBufferID()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.getHeapMemoryByteSize()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.getNativeHeapMemoryByteSize()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.getVertexBufferObjectManager()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.isAutoDispose()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.isDirtyOnHardware()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.isDisposed()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.isLoadedToHardware()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.loadToHardware(GLState)",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.releaseByteBuffer(ByteBuffer)",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.setDirtyOnHardware()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.setNotLoadedToHardware()",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.unbind(GLState,ShaderProgram)",1,1,1
"org.andengine.opengl.vbo.ZeroMemoryVertexBufferObject.unloadFromHardware(GLState)",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute.VertexBufferObjectAttribute(int,String,int,int,boolean,int)",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute.getLocation()",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute.getName()",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute.getOffset()",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute.getSize()",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute.getType()",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute.glVertexAttribPointer(int)",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute.isNormalized()",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributeFix.VertexBufferObjectAttributeFix(int,String,int,int,boolean,int)",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributeFix.glVertexAttribPointer(int)",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes.VertexBufferObjectAttributes(int,VertexBufferObjectAttribute...)",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes.glVertexAttribPointers()",1,2,2
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributesBuilder.VertexBufferObjectAttributesBuilder(int)",1,1,1
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributesBuilder.add(int,String,int,int,boolean)",2,2,5
"org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributesBuilder.build()",2,2,2
"org.andengine.opengl.view.ConfigChooser.ConfigChooser(boolean)",1,1,1
"org.andengine.opengl.view.ConfigChooser.chooseConfig(EGL10,EGLDisplay)",1,1,4
"org.andengine.opengl.view.ConfigChooser.chooseConfig(EGL10,EGLDisplay,ConfigChooserMatcher)",5,5,5
"org.andengine.opengl.view.ConfigChooser.findEGLConfig(EGL10,EGLDisplay,EGLConfig[],ConfigChooserMatcher)",4,3,4
"org.andengine.opengl.view.ConfigChooser.findEGLConfig(EGL10,EGLDisplay,int[],int,ConfigChooserMatcher)",2,1,2
"org.andengine.opengl.view.ConfigChooser.getAlphaSize()",1,1,1
"org.andengine.opengl.view.ConfigChooser.getBlueSize()",1,1,1
"org.andengine.opengl.view.ConfigChooser.getConfigAttrib(EGL10,EGLDisplay,EGLConfig,int,int)",2,1,2
"org.andengine.opengl.view.ConfigChooser.getDepthSize()",1,1,1
"org.andengine.opengl.view.ConfigChooser.getEGLConfigCount(EGL10,EGLDisplay,int[])",2,1,2
"org.andengine.opengl.view.ConfigChooser.getGreenSize()",1,1,1
"org.andengine.opengl.view.ConfigChooser.getRedSize()",1,1,1
"org.andengine.opengl.view.ConfigChooser.getStencilSize()",1,1,1
"org.andengine.opengl.view.ConfigChooser.isCoverageMultiSampling()",1,1,1
"org.andengine.opengl.view.ConfigChooser.isMultiSampling()",1,1,1
"org.andengine.opengl.view.EngineRenderer.EngineRenderer(Engine,ConfigChooser,IRendererListener)",1,1,1
"org.andengine.opengl.view.EngineRenderer.onDrawFrame(GL10)",1,4,4
"org.andengine.opengl.view.EngineRenderer.onSurfaceChanged(GL10,int,int)",1,2,2
"org.andengine.opengl.view.EngineRenderer.onSurfaceCreated(GL10,EGLConfig)",1,2,2
"org.andengine.opengl.view.RenderSurfaceView.RenderSurfaceView(Context)",1,1,1
"org.andengine.opengl.view.RenderSurfaceView.RenderSurfaceView(Context,AttributeSet)",1,1,1
"org.andengine.opengl.view.RenderSurfaceView.getConfigChooser()",2,2,2
"org.andengine.opengl.view.RenderSurfaceView.onMeasure(int,int)",2,2,2
"org.andengine.opengl.view.RenderSurfaceView.setMeasuredDimensionProxy(int,int)",1,1,1
"org.andengine.opengl.view.RenderSurfaceView.setRenderer(Engine,IRendererListener)",1,2,2
"org.andengine.ui.activity.BaseActivity.doAsync(int,int,AsyncCallable<T>,Callback<T>,Callback<Exception>)",1,1,1
"org.andengine.ui.activity.BaseActivity.doAsync(int,int,Callable<T>,Callback<T>)",1,1,1
"org.andengine.ui.activity.BaseActivity.doAsync(int,int,Callable<T>,Callback<T>,Callback<Exception>)",1,1,1
"org.andengine.ui.activity.BaseActivity.doProgressAsync(int,int,ProgressCallable<T>,Callback<T>)",1,1,1
"org.andengine.ui.activity.BaseActivity.doProgressAsync(int,int,ProgressCallable<T>,Callback<T>,Callback<Exception>)",1,1,1
"org.andengine.ui.activity.BaseActivity.toastOnUIThread(CharSequence)",1,1,1
"org.andengine.ui.activity.BaseActivity.toastOnUIThread(CharSequence,int)",1,2,2
"org.andengine.ui.activity.BaseGameActivity.acquireWakeLock()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.acquireWakeLock(WakeLockOptions)",1,3,3
"org.andengine.ui.activity.BaseGameActivity.applyEngineOptions()",2,7,10
"org.andengine.ui.activity.BaseGameActivity.callGameResumedOnUIThread()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.createSurfaceViewLayoutParams()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.disableAccelerationSensor()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.disableLocationSensor()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.disableOrientationSensor()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.enableAccelerationSensor(IAccelerationListener)",1,1,1
"org.andengine.ui.activity.BaseGameActivity.enableAccelerationSensor(IAccelerationListener,AccelerationSensorOptions)",1,1,1
"org.andengine.ui.activity.BaseGameActivity.enableLocationSensor(ILocationListener,LocationSensorOptions)",1,1,1
"org.andengine.ui.activity.BaseGameActivity.enableOrientationSensor(IOrientationListener)",1,1,1
"org.andengine.ui.activity.BaseGameActivity.enableOrientationSensor(IOrientationListener,OrientationSensorOptions)",1,1,1
"org.andengine.ui.activity.BaseGameActivity.enableVibrator()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.getEngine()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.getFontManager()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.getMusicManager()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.getShaderProgramManager()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.getSoundManager()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.getTextureManager()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.getVertexBufferObjectManager()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.isGameLoaded()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.isGamePaused()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.isGameRunning()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.onCreate(Bundle)",1,2,2
"org.andengine.ui.activity.BaseGameActivity.onCreateEngine(EngineOptions)",1,1,1
"org.andengine.ui.activity.BaseGameActivity.onCreateGame()",1,10,10
"org.andengine.ui.activity.BaseGameActivity.onDestroy()",1,3,3
"org.andengine.ui.activity.BaseGameActivity.onDestroyResources()",1,4,4
"org.andengine.ui.activity.BaseGameActivity.onGameCreated()",1,3,3
"org.andengine.ui.activity.BaseGameActivity.onGameDestroyed()",1,2,2
"org.andengine.ui.activity.BaseGameActivity.onPause()",1,3,3
"org.andengine.ui.activity.BaseGameActivity.onPauseGame()",1,2,2
"org.andengine.ui.activity.BaseGameActivity.onReloadResources()",1,2,2
"org.andengine.ui.activity.BaseGameActivity.onResume()",1,2,2
"org.andengine.ui.activity.BaseGameActivity.onResumeGame()",1,2,2
"org.andengine.ui.activity.BaseGameActivity.onSetContentView()",1,1,1
"org.andengine.ui.activity.BaseGameActivity.onSurfaceChanged(GLState,int,int)",1,2,2
"org.andengine.ui.activity.BaseGameActivity.onSurfaceCreated(GLState)",1,5,6
"org.andengine.ui.activity.BaseGameActivity.onWindowFocusChanged(boolean)",1,2,4
"org.andengine.ui.activity.BaseGameActivity.releaseWakeLock()",1,3,3
"org.andengine.ui.activity.BaseGameActivity.runOnUpdateThread(Runnable)",1,1,1
"org.andengine.ui.activity.BaseGameActivity.runOnUpdateThread(Runnable,boolean)",1,1,1
"org.andengine.ui.activity.LayoutGameActivity.onSetContentView()",1,1,1
"org.andengine.ui.activity.LegacyBaseGameActivity.onCreateEngine(EngineOptions)",1,1,1
"org.andengine.ui.activity.LegacyBaseGameActivity.onCreateEngineOptions()",1,1,1
"org.andengine.ui.activity.LegacyBaseGameActivity.onCreateResources(OnCreateResourcesCallback)",1,1,1
"org.andengine.ui.activity.LegacyBaseGameActivity.onCreateScene(OnCreateSceneCallback)",1,1,1
"org.andengine.ui.activity.LegacyBaseGameActivity.onDestroyResources()",1,1,1
"org.andengine.ui.activity.LegacyBaseGameActivity.onGameCreated()",1,1,1
"org.andengine.ui.activity.LegacyBaseGameActivity.onPopulateScene(Scene,OnPopulateSceneCallback)",1,1,1
"org.andengine.ui.activity.SimpleAsyncGameActivity.onCreateResources(OnCreateResourcesCallback)",1,1,1
"org.andengine.ui.activity.SimpleAsyncGameActivity.onCreateScene(OnCreateSceneCallback)",1,1,1
"org.andengine.ui.activity.SimpleAsyncGameActivity.onPopulateScene(Scene,OnPopulateSceneCallback)",1,1,1
"org.andengine.ui.activity.SimpleBaseGameActivity.onCreateResources(OnCreateResourcesCallback)",1,1,1
"org.andengine.ui.activity.SimpleBaseGameActivity.onCreateScene(OnCreateSceneCallback)",1,1,1
"org.andengine.ui.activity.SimpleBaseGameActivity.onPopulateScene(Scene,OnPopulateSceneCallback)",1,1,1
"org.andengine.ui.activity.SimpleLayoutGameActivity.onCreateResources(OnCreateResourcesCallback)",1,1,1
"org.andengine.ui.activity.SimpleLayoutGameActivity.onCreateScene(OnCreateSceneCallback)",1,1,1
"org.andengine.ui.activity.SimpleLayoutGameActivity.onPopulateScene(Scene,OnPopulateSceneCallback)",1,1,1
"org.andengine.ui.dialog.GenericInputDialogBuilder.GenericInputDialogBuilder(Context,int,int,int,int,Callback<T>,OnCancelListener)",1,1,1
"org.andengine.ui.dialog.GenericInputDialogBuilder.GenericInputDialogBuilder(Context,int,int,int,int,String,Callback<T>,OnCancelListener)",1,1,1
"org.andengine.ui.dialog.GenericInputDialogBuilder.create()",1,5,5
"org.andengine.ui.dialog.GenericInputDialogBuilder.setView(Builder,EditText)",1,1,1
"org.andengine.ui.dialog.StringInputDialogBuilder.StringInputDialogBuilder(Context,int,int,int,int,Callback<String>,OnCancelListener)",1,1,1
"org.andengine.ui.dialog.StringInputDialogBuilder.StringInputDialogBuilder(Context,int,int,int,int,String,Callback<String>,OnCancelListener)",1,1,1
"org.andengine.ui.dialog.StringInputDialogBuilder.generateResult(String)",1,1,1
"org.andengine.util.ActivityUtils.doAsync(Context,CharSequence,CharSequence,AsyncCallable<T>,Callback<T>,Callback<Exception>)",1,2,2
"org.andengine.util.ActivityUtils.doAsync(Context,CharSequence,CharSequence,Callable<T>,Callback<T>)",1,1,1
"org.andengine.util.ActivityUtils.doAsync(Context,CharSequence,CharSequence,Callable<T>,Callback<T>,Callback<Exception>)",1,1,1
"org.andengine.util.ActivityUtils.doAsync(Context,CharSequence,CharSequence,Callable<T>,Callback<T>,Callback<Exception>,boolean)",1,5,7
"org.andengine.util.ActivityUtils.doAsync(Context,CharSequence,CharSequence,Callable<T>,Callback<T>,boolean)",1,1,1
"org.andengine.util.ActivityUtils.doAsync(Context,int,int,AsyncCallable<T>,Callback<T>,Callback<Exception>)",1,1,1
"org.andengine.util.ActivityUtils.doAsync(Context,int,int,Callable<T>,Callback<T>)",1,1,1
"org.andengine.util.ActivityUtils.doAsync(Context,int,int,Callable<T>,Callback<T>,Callback<Exception>)",1,1,1
"org.andengine.util.ActivityUtils.doAsync(Context,int,int,Callable<T>,Callback<T>,Callback<Exception>,boolean)",1,1,1
"org.andengine.util.ActivityUtils.doAsync(Context,int,int,Callable<T>,Callback<T>,boolean)",1,1,1
"org.andengine.util.ActivityUtils.doProgressAsync(Context,CharSequence,int,ProgressCallable<T>,Callback<T>)",1,1,1
"org.andengine.util.ActivityUtils.doProgressAsync(Context,CharSequence,int,ProgressCallable<T>,Callback<T>,Callback<Exception>)",1,4,6
"org.andengine.util.ActivityUtils.doProgressAsync(Context,int,int,ProgressCallable<T>,Callback<T>)",1,1,1
"org.andengine.util.ActivityUtils.doProgressAsync(Context,int,int,ProgressCallable<T>,Callback<T>,Callback<Exception>)",1,1,1
"org.andengine.util.ActivityUtils.keepScreenOn(Activity)",1,1,1
"org.andengine.util.ActivityUtils.requestFullscreen(Activity)",1,1,1
"org.andengine.util.ActivityUtils.setScreenBrightness(Activity,float)",1,1,1
"org.andengine.util.BetaUtils.finishWhenExpired(Activity,GregorianCalendar,int,int)",1,1,1
"org.andengine.util.BetaUtils.finishWhenExpired(Activity,GregorianCalendar,int,int,Intent,Intent)",2,4,4
"org.andengine.util.DialogUtils.keepScreenOn(Dialog)",1,1,1
"org.andengine.util.FileUtils.copyFile(File,File)",1,1,1
"org.andengine.util.FileUtils.copyToExternalStorage(Context,InputStream,String)",2,2,2
"org.andengine.util.FileUtils.copyToExternalStorage(Context,String,String)",1,1,1
"org.andengine.util.FileUtils.copyToExternalStorage(Context,int,String)",1,1,1
"org.andengine.util.FileUtils.copyToExternalStorage(InputStream,String)",2,2,2
"org.andengine.util.FileUtils.copyToInternalStorage(Context,InputStream,String)",1,1,1
"org.andengine.util.FileUtils.copyToInternalStorage(Context,String,String)",1,1,1
"org.andengine.util.FileUtils.copyToInternalStorage(Context,int,String)",1,1,1
"org.andengine.util.FileUtils.deleteDirectory(File)",4,3,4
"org.andengine.util.FileUtils.ensureDirectoriesExistOnExternalStorage(Context,String)",3,2,3
"org.andengine.util.FileUtils.getAbsolutePathOnExternalStorage(Context,String)",1,1,1
"org.andengine.util.FileUtils.getAbsolutePathOnExternalStorage(String)",1,1,1
"org.andengine.util.FileUtils.getAbsolutePathOnInternalStorage(Context,String)",1,1,1
"org.andengine.util.FileUtils.getDirectoryListOnExternalStorage(Context,String)",1,1,1
"org.andengine.util.FileUtils.getDirectoryListOnExternalStorage(Context,String,FilenameFilter)",1,1,1
"org.andengine.util.FileUtils.isDirectoryExistingOnExternalStorage(Context,String)",2,3,3
"org.andengine.util.FileUtils.isExternalStorageReadable()",1,2,2
"org.andengine.util.FileUtils.isExternalStorageWriteable()",1,1,1
"org.andengine.util.FileUtils.isFileExistingOnExternalStorage(Context,String)",2,3,3
"org.andengine.util.FileUtils.isFileExistingOnExternalStorage(String)",2,3,3
"org.andengine.util.FileUtils.openOnExternalStorage(Context,String)",1,1,1
"org.andengine.util.FileUtils.openOnExternalStorage(String)",1,1,1
"org.andengine.util.IDisposable.AlreadyDisposedException.AlreadyDisposedException()",1,1,1
"org.andengine.util.IDisposable.AlreadyDisposedException.AlreadyDisposedException(String)",1,1,1
"org.andengine.util.IDisposable.AlreadyDisposedException.AlreadyDisposedException(String,Throwable)",1,1,1
"org.andengine.util.IDisposable.AlreadyDisposedException.AlreadyDisposedException(Throwable)",1,1,1
"org.andengine.util.ProbabilityGenerator.Entry.Entry(float,T...)",1,1,1
"org.andengine.util.ProbabilityGenerator.Entry.getReturnValue()",2,2,2
"org.andengine.util.ProbabilityGenerator.add(float,T...)",1,1,1
"org.andengine.util.ProbabilityGenerator.clear()",1,1,1
"org.andengine.util.ProbabilityGenerator.next()",3,3,3
"org.andengine.util.SAXUtils.appendAttribute(StringBuilder,String,String)",1,1,1
"org.andengine.util.SAXUtils.appendAttribute(StringBuilder,String,boolean)",1,1,1
"org.andengine.util.SAXUtils.appendAttribute(StringBuilder,String,byte)",1,1,1
"org.andengine.util.SAXUtils.appendAttribute(StringBuilder,String,double)",1,1,1
"org.andengine.util.SAXUtils.appendAttribute(StringBuilder,String,float)",1,1,1
"org.andengine.util.SAXUtils.appendAttribute(StringBuilder,String,int)",1,1,1
"org.andengine.util.SAXUtils.appendAttribute(StringBuilder,String,long)",1,1,1
"org.andengine.util.SAXUtils.appendAttribute(StringBuilder,String,short)",1,1,1
"org.andengine.util.SAXUtils.getAttribute(Attributes,String,String)",1,1,2
"org.andengine.util.SAXUtils.getAttributeOrThrow(Attributes,String)",2,1,2
"org.andengine.util.SAXUtils.getBooleanAttribute(Attributes,String,boolean)",1,2,2
"org.andengine.util.SAXUtils.getBooleanAttributeOrThrow(Attributes,String)",1,1,1
"org.andengine.util.SAXUtils.getByteAttribute(Attributes,String,byte)",1,2,2
"org.andengine.util.SAXUtils.getByteAttributeOrThrow(Attributes,String)",1,1,1
"org.andengine.util.SAXUtils.getDoubleAttribute(Attributes,String,double)",1,2,2
"org.andengine.util.SAXUtils.getDoubleAttributeOrThrow(Attributes,String)",1,1,1
"org.andengine.util.SAXUtils.getFloatAttribute(Attributes,String,float)",1,2,2
"org.andengine.util.SAXUtils.getFloatAttributeOrThrow(Attributes,String)",1,1,1
"org.andengine.util.SAXUtils.getIntAttribute(Attributes,String,int)",1,2,2
"org.andengine.util.SAXUtils.getIntAttributeOrThrow(Attributes,String)",1,1,1
"org.andengine.util.SAXUtils.getLongAttribute(Attributes,String,long)",1,2,2
"org.andengine.util.SAXUtils.getLongAttributeOrThrow(Attributes,String)",1,1,1
"org.andengine.util.SAXUtils.getShortAttribute(Attributes,String,short)",1,2,2
"org.andengine.util.SAXUtils.getShortAttributeOrThrow(Attributes,String)",1,1,1
"org.andengine.util.SocketUtils.closeSocket(DatagramSocket)",1,3,3
"org.andengine.util.SocketUtils.closeSocket(ServerSocket)",1,4,4
"org.andengine.util.SocketUtils.closeSocket(Socket)",1,4,4
"org.andengine.util.StreamUtils.close(Closeable)",1,3,3
"org.andengine.util.StreamUtils.copy(InputStream,ByteBuffer)",1,2,2
"org.andengine.util.StreamUtils.copy(InputStream,OutputStream)",1,1,1
"org.andengine.util.StreamUtils.copy(InputStream,OutputStream,int)",4,5,5
"org.andengine.util.StreamUtils.copy(InputStream,byte[])",1,2,2
"org.andengine.util.StreamUtils.copyAndClose(InputStream,OutputStream)",1,1,2
"org.andengine.util.StreamUtils.flushCloseStream(OutputStream)",1,3,3
"org.andengine.util.StreamUtils.flushCloseWriter(Writer)",1,3,3
"org.andengine.util.StreamUtils.readFully(InputStream)",1,2,2
"org.andengine.util.StreamUtils.streamToBytes(InputStream)",1,1,1
"org.andengine.util.StreamUtils.streamToBytes(InputStream,int)",1,1,2
"org.andengine.util.StreamUtils.streamToBytes(InputStream,int,byte[])",1,1,1
"org.andengine.util.StreamUtils.streamToBytes(InputStream,int,byte[],int)",5,1,5
"org.andengine.util.TextUtils.countCharacters(List<CharSequence>)",1,1,1
"org.andengine.util.TextUtils.countCharacters(List<CharSequence>,boolean)",1,5,6
"org.andengine.util.TextUtils.countOccurrences(CharSequence,char)",1,2,2
"org.andengine.util.TextUtils.formatStackTrace(StackTraceElement)",1,1,1
"org.andengine.util.TextUtils.formatStackTrace(StackTraceElement[])",1,3,3
"org.andengine.util.TextUtils.padFront(CharSequence,char,int)",2,3,3
"org.andengine.util.TextUtils.split(CharSequence,char)",1,1,1
"org.andengine.util.TextUtils.split(CharSequence,char,L)",1,3,3
"org.andengine.util.ThreadUtils.dumpCurrentThreadInfo()",1,1,1
"org.andengine.util.ThreadUtils.dumpCurrentThreadInfo(DebugLevel)",1,1,1
"org.andengine.util.ThreadUtils.dumpCurrentThreadInfo(DebugLevel,StackTraceElement)",1,1,1
"org.andengine.util.TimeUtils.formatSeconds(int)",1,1,1
"org.andengine.util.TimeUtils.formatSeconds(int,StringBuilder)",1,2,2
"org.andengine.util.ViewUtils.inflate(Context,int)",1,1,1
"org.andengine.util.ViewUtils.inflate(Context,int,ViewGroup)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.contains(byte[],byte)",3,1,3
"org.andengine.util.adt.array.ArrayUtils.contains(char[],char)",3,1,3
"org.andengine.util.adt.array.ArrayUtils.contains(double[],double)",3,1,3
"org.andengine.util.adt.array.ArrayUtils.contains(float[],float)",3,1,3
"org.andengine.util.adt.array.ArrayUtils.contains(int[],int)",3,1,3
"org.andengine.util.adt.array.ArrayUtils.contains(long[],long)",3,1,3
"org.andengine.util.adt.array.ArrayUtils.contains(short[],short)",3,1,3
"org.andengine.util.adt.array.ArrayUtils.equals(byte[],int,byte[],int,int)",5,1,5
"org.andengine.util.adt.array.ArrayUtils.idealBooleanArraySize(int)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.idealByteArraySize(int)",3,1,3
"org.andengine.util.adt.array.ArrayUtils.idealCharArraySize(int)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.idealDoubleArraySize(int)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.idealFloatArraySize(int)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.idealIntArraySize(int)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.idealLongArraySize(int)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.idealObjectArraySize(int)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.idealShortArraySize(int)",1,1,1
"org.andengine.util.adt.array.ArrayUtils.join(Class<T>,T[]...)",5,3,11
"org.andengine.util.adt.array.ArrayUtils.random(T[])",1,1,1
"org.andengine.util.adt.array.ArrayUtils.random(byte[])",1,1,1
"org.andengine.util.adt.array.ArrayUtils.random(double[])",1,1,1
"org.andengine.util.adt.array.ArrayUtils.random(float[])",1,1,1
"org.andengine.util.adt.array.ArrayUtils.random(int[])",1,1,1
"org.andengine.util.adt.array.ArrayUtils.random(long[])",1,1,1
"org.andengine.util.adt.array.ArrayUtils.random(short[])",1,1,1
"org.andengine.util.adt.array.ArrayUtils.reverse(Object[])",2,1,3
"org.andengine.util.adt.array.ArrayUtils.reverse(byte[])",2,1,3
"org.andengine.util.adt.array.ArrayUtils.reverse(double[])",2,1,3
"org.andengine.util.adt.array.ArrayUtils.reverse(float[])",2,1,3
"org.andengine.util.adt.array.ArrayUtils.reverse(int[])",2,1,3
"org.andengine.util.adt.array.ArrayUtils.reverse(long[])",2,1,3
"org.andengine.util.adt.array.ArrayUtils.reverse(short[])",2,1,3
"org.andengine.util.adt.array.ArrayUtils.toByteArray(List<Byte>)",1,2,2
"org.andengine.util.adt.array.ArrayUtils.toCharArray(List<Character>)",1,2,2
"org.andengine.util.adt.array.ArrayUtils.toDoubleArray(List<Double>)",1,2,2
"org.andengine.util.adt.array.ArrayUtils.toFloatArray(List<Float>)",1,2,2
"org.andengine.util.adt.array.ArrayUtils.toIntArray(List<Integer>)",1,2,2
"org.andengine.util.adt.array.ArrayUtils.toLongArray(List<Long>)",1,2,2
"org.andengine.util.adt.array.ArrayUtils.toShortArray(List<Short>)",1,2,2
"org.andengine.util.adt.bit.BitVector.BitVector(byte[])",2,2,11
"org.andengine.util.adt.bit.BitVector.BitVector(int)",2,1,3
"org.andengine.util.adt.bit.BitVector.getBit(int)",3,1,3
"org.andengine.util.adt.bit.BitVector.getBits(int,int)",6,1,8
"org.andengine.util.adt.bit.BitVector.getByte(int)",1,1,1
"org.andengine.util.adt.bit.BitVector.getCapacity()",1,1,1
"org.andengine.util.adt.bit.BitVector.getInt(int)",1,1,1
"org.andengine.util.adt.bit.BitVector.getLong(int)",1,1,1
"org.andengine.util.adt.bit.BitVector.getShort(int)",1,1,1
"org.andengine.util.adt.bit.BitVector.toByteArray()",2,2,12
"org.andengine.util.adt.bit.BitVector.toString()",1,3,5
"org.andengine.util.adt.bounds.FloatBounds.FloatBounds(float,float)",1,1,1
"org.andengine.util.adt.bounds.FloatBounds.FloatBounds(float,float,float,float)",1,1,1
"org.andengine.util.adt.bounds.FloatBounds.contains(float,float)",1,1,1
"org.andengine.util.adt.bounds.FloatBounds.getXMax()",1,1,1
"org.andengine.util.adt.bounds.FloatBounds.getXMin()",1,1,1
"org.andengine.util.adt.bounds.FloatBounds.getYMax()",1,1,1
"org.andengine.util.adt.bounds.FloatBounds.getYMin()",1,1,1
"org.andengine.util.adt.bounds.FloatBounds.set(float,float)",1,1,1
"org.andengine.util.adt.bounds.FloatBounds.set(float,float,float,float)",3,1,3
"org.andengine.util.adt.bounds.IntBounds.IntBounds(int,int)",1,1,1
"org.andengine.util.adt.bounds.IntBounds.IntBounds(int,int,int,int)",1,1,1
"org.andengine.util.adt.bounds.IntBounds.contains(int,int)",1,1,1
"org.andengine.util.adt.bounds.IntBounds.getXMax()",1,1,1
"org.andengine.util.adt.bounds.IntBounds.getXMin()",1,1,1
"org.andengine.util.adt.bounds.IntBounds.getYMax()",1,1,1
"org.andengine.util.adt.bounds.IntBounds.getYMin()",1,1,1
"org.andengine.util.adt.bounds.IntBounds.set(int,int)",1,1,1
"org.andengine.util.adt.bounds.IntBounds.set(int,int,int,int)",3,1,3
"org.andengine.util.adt.cache.IntLRUCache.IntLRUCache(int)",1,1,1
"org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue.add(IntLRUCacheQueueNode)",1,1,2
"org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue.add(int)",1,1,1
"org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue.isEmpty()",1,1,1
"org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue.moveToTail(IntLRUCacheQueueNode)",2,1,3
"org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue.poll()",2,1,3
"org.andengine.util.adt.cache.IntLRUCache.clear()",3,2,3
"org.andengine.util.adt.cache.IntLRUCache.get(int)",2,1,2
"org.andengine.util.adt.cache.IntLRUCache.getCapacity()",1,1,1
"org.andengine.util.adt.cache.IntLRUCache.getSize()",1,1,1
"org.andengine.util.adt.cache.IntLRUCache.isEmpty()",1,1,1
"org.andengine.util.adt.cache.IntLRUCache.put(int,V)",2,3,3
"org.andengine.util.adt.cache.LRUCache.LRUCache(int)",1,1,1
"org.andengine.util.adt.cache.LRUCache.LRUCacheQueue.add(K)",1,1,1
"org.andengine.util.adt.cache.LRUCache.LRUCacheQueue.add(LRUCacheQueueNode<K>)",1,1,2
"org.andengine.util.adt.cache.LRUCache.LRUCacheQueue.isEmpty()",1,1,1
"org.andengine.util.adt.cache.LRUCache.LRUCacheQueue.moveToTail(LRUCacheQueueNode<K>)",2,1,3
"org.andengine.util.adt.cache.LRUCache.LRUCacheQueue.poll()",1,1,2
"org.andengine.util.adt.cache.LRUCache.clear()",1,2,2
"org.andengine.util.adt.cache.LRUCache.get(K)",2,1,2
"org.andengine.util.adt.cache.LRUCache.getCapacity()",1,1,1
"org.andengine.util.adt.cache.LRUCache.getSize()",1,1,1
"org.andengine.util.adt.cache.LRUCache.isEmpty()",1,1,1
"org.andengine.util.adt.cache.LRUCache.put(K,V)",2,3,3
"org.andengine.util.adt.cache.concurrent.SynchronizedIntLRUCache.SynchronizedIntLRUCache(int)",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedIntLRUCache.clear()",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedIntLRUCache.get(int)",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedIntLRUCache.getSize()",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedIntLRUCache.isEmpty()",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedIntLRUCache.put(int,V)",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedLRUCache.SynchronizedLRUCache(int)",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedLRUCache.clear()",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedLRUCache.get(K)",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedLRUCache.getSize()",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedLRUCache.isEmpty()",1,1,1
"org.andengine.util.adt.cache.concurrent.SynchronizedLRUCache.put(K,V)",1,1,1
"org.andengine.util.adt.data.DataUtils.unsignedByteToInt(byte)",1,1,1
"org.andengine.util.adt.io.in.AssetInputStreamOpener.AssetInputStreamOpener(AssetManager,String)",1,1,1
"org.andengine.util.adt.io.in.AssetInputStreamOpener.open()",1,1,1
"org.andengine.util.adt.io.in.ByteArrayInputStreamOpener.ByteArrayInputStreamOpener(byte[])",1,1,1
"org.andengine.util.adt.io.in.ByteArrayInputStreamOpener.ByteArrayInputStreamOpener(byte[],int,int)",1,1,1
"org.andengine.util.adt.io.in.ByteArrayInputStreamOpener.open()",1,1,1
"org.andengine.util.adt.io.in.ResourceInputStreamOpener.ResourceInputStreamOpener(Resources,int)",1,1,1
"org.andengine.util.adt.io.in.ResourceInputStreamOpener.open()",1,1,1
"org.andengine.util.adt.io.out.ByteBufferOutputStream.ByteBufferOutputStream(int,int)",1,1,1
"org.andengine.util.adt.io.out.ByteBufferOutputStream.close()",1,1,1
"org.andengine.util.adt.io.out.ByteBufferOutputStream.ensureCapacity(int)",1,2,2
"org.andengine.util.adt.io.out.ByteBufferOutputStream.grow(int)",3,1,4
"org.andengine.util.adt.io.out.ByteBufferOutputStream.toByteBuffer()",1,1,1
"org.andengine.util.adt.io.out.ByteBufferOutputStream.write(byte[],int,int)",1,1,1
"org.andengine.util.adt.io.out.ByteBufferOutputStream.write(int)",1,1,1
"org.andengine.util.adt.list.CircularList.CircularList()",1,1,1
"org.andengine.util.adt.list.CircularList.CircularList(int)",1,1,1
"org.andengine.util.adt.list.CircularList.add(T)",1,1,1
"org.andengine.util.adt.list.CircularList.add(int,T)",1,6,13
"org.andengine.util.adt.list.CircularList.clear()",1,2,2
"org.andengine.util.adt.list.CircularList.encodeToInternalIndex(int)",1,1,2
"org.andengine.util.adt.list.CircularList.ensureCapacity()",1,2,2
"org.andengine.util.adt.list.CircularList.get(int)",1,1,1
"org.andengine.util.adt.list.CircularList.indexOf(T)",6,4,6
"org.andengine.util.adt.list.CircularList.isEmpty()",1,1,1
"org.andengine.util.adt.list.CircularList.remove(T)",2,2,2
"org.andengine.util.adt.list.CircularList.remove(int)",1,6,9
"org.andengine.util.adt.list.CircularList.removeFirst()",1,1,1
"org.andengine.util.adt.list.CircularList.removeLast()",1,1,1
"org.andengine.util.adt.list.CircularList.set(int,T)",1,1,1
"org.andengine.util.adt.list.CircularList.size()",1,1,1
"org.andengine.util.adt.list.FloatArrayList.FloatArrayList()",1,1,1
"org.andengine.util.adt.list.FloatArrayList.FloatArrayList(int)",1,1,1
"org.andengine.util.adt.list.FloatArrayList.add(float)",1,1,1
"org.andengine.util.adt.list.FloatArrayList.add(int,float)",1,1,1
"org.andengine.util.adt.list.FloatArrayList.clear()",1,1,1
"org.andengine.util.adt.list.FloatArrayList.ensureCapacity(int)",1,2,2
"org.andengine.util.adt.list.FloatArrayList.get(int)",1,1,1
"org.andengine.util.adt.list.FloatArrayList.isEmpty()",1,1,1
"org.andengine.util.adt.list.FloatArrayList.remove(int)",1,2,2
"org.andengine.util.adt.list.FloatArrayList.size()",1,1,1
"org.andengine.util.adt.list.FloatArrayList.toArray()",1,1,1
"org.andengine.util.adt.list.IntArrayList.IntArrayList()",1,1,1
"org.andengine.util.adt.list.IntArrayList.IntArrayList(int)",1,1,1
"org.andengine.util.adt.list.IntArrayList.add(int)",1,1,1
"org.andengine.util.adt.list.IntArrayList.add(int,int)",1,1,1
"org.andengine.util.adt.list.IntArrayList.clear()",1,1,1
"org.andengine.util.adt.list.IntArrayList.ensureCapacity(int)",1,2,2
"org.andengine.util.adt.list.IntArrayList.get(int)",1,1,1
"org.andengine.util.adt.list.IntArrayList.isEmpty()",1,1,1
"org.andengine.util.adt.list.IntArrayList.remove(int)",1,2,2
"org.andengine.util.adt.list.IntArrayList.size()",1,1,1
"org.andengine.util.adt.list.IntArrayList.toArray()",1,1,1
"org.andengine.util.adt.list.ListUtils.encodeInsertionIndex(int)",1,1,1
"org.andengine.util.adt.list.ListUtils.random(List<T>)",1,1,1
"org.andengine.util.adt.list.ListUtils.swap(IList<T>,int,int)",1,1,1
"org.andengine.util.adt.list.ListUtils.swap(List<T>,int,int)",1,1,1
"org.andengine.util.adt.list.ListUtils.synchronizedQueue(IQueue<T>)",1,1,1
"org.andengine.util.adt.list.ListUtils.toList(T)",1,1,1
"org.andengine.util.adt.list.ListUtils.toList(T...)",1,2,2
"org.andengine.util.adt.list.LongArrayList.LongArrayList()",1,1,1
"org.andengine.util.adt.list.LongArrayList.LongArrayList(int)",1,1,1
"org.andengine.util.adt.list.LongArrayList.add(int,long)",1,1,1
"org.andengine.util.adt.list.LongArrayList.add(long)",1,1,1
"org.andengine.util.adt.list.LongArrayList.clear()",1,1,1
"org.andengine.util.adt.list.LongArrayList.ensureCapacity(int)",1,2,2
"org.andengine.util.adt.list.LongArrayList.get(int)",1,1,1
"org.andengine.util.adt.list.LongArrayList.isEmpty()",1,1,1
"org.andengine.util.adt.list.LongArrayList.remove(int)",1,2,2
"org.andengine.util.adt.list.LongArrayList.size()",1,1,1
"org.andengine.util.adt.list.LongArrayList.toArray()",1,1,1
"org.andengine.util.adt.list.ShiftList.ShiftList()",1,1,1
"org.andengine.util.adt.list.ShiftList.ShiftList(int)",1,1,1
"org.andengine.util.adt.list.ShiftList.add(T)",1,1,1
"org.andengine.util.adt.list.ShiftList.add(int,T)",1,1,1
"org.andengine.util.adt.list.ShiftList.clear()",1,1,1
"org.andengine.util.adt.list.ShiftList.ensureShiftableLeft()",1,4,4
"org.andengine.util.adt.list.ShiftList.ensureShiftableRight()",1,3,3
"org.andengine.util.adt.list.ShiftList.enter(T)",1,1,1
"org.andengine.util.adt.list.ShiftList.enter(int,T)",1,2,2
"org.andengine.util.adt.list.ShiftList.enterShiftingLeft(int,T)",1,2,2
"org.andengine.util.adt.list.ShiftList.enterShiftingRight(int,T,int)",1,2,2
"org.andengine.util.adt.list.ShiftList.get(int)",1,1,1
"org.andengine.util.adt.list.ShiftList.indexOf(T)",6,3,6
"org.andengine.util.adt.list.ShiftList.isEmpty()",1,1,1
"org.andengine.util.adt.list.ShiftList.peek()",2,1,2
"org.andengine.util.adt.list.ShiftList.poll()",2,1,3
"org.andengine.util.adt.list.ShiftList.remove(T)",2,2,2
"org.andengine.util.adt.list.ShiftList.remove(int)",1,4,4
"org.andengine.util.adt.list.ShiftList.removeFirst()",1,1,1
"org.andengine.util.adt.list.ShiftList.removeLast()",1,1,1
"org.andengine.util.adt.list.ShiftList.set(int,T)",1,1,1
"org.andengine.util.adt.list.ShiftList.shift()",1,3,3
"org.andengine.util.adt.list.ShiftList.size()",1,1,1
"org.andengine.util.adt.list.SmartList.SmartList()",1,1,1
"org.andengine.util.adt.list.SmartList.SmartList(int)",1,1,1
"org.andengine.util.adt.list.SmartList.addFirst(T)",1,1,1
"org.andengine.util.adt.list.SmartList.addLast(T)",1,1,1
"org.andengine.util.adt.list.SmartList.call(IMatcher<T>,ParameterCallable<T>)",1,3,3
"org.andengine.util.adt.list.SmartList.call(ParameterCallable<T>)",1,2,2
"org.andengine.util.adt.list.SmartList.clear(ParameterCallable<T>)",1,2,2
"org.andengine.util.adt.list.SmartList.get(IMatcher<T>)",3,2,3
"org.andengine.util.adt.list.SmartList.getFirst()",1,1,1
"org.andengine.util.adt.list.SmartList.getLast()",1,1,1
"org.andengine.util.adt.list.SmartList.indexOf(IMatcher<T>)",3,2,3
"org.andengine.util.adt.list.SmartList.lastIndexOf(IMatcher<T>)",3,2,3
"org.andengine.util.adt.list.SmartList.query(IMatcher<T>)",1,1,1
"org.andengine.util.adt.list.SmartList.query(IMatcher<T>,L)",1,3,3
"org.andengine.util.adt.list.SmartList.queryForSubclass(IMatcher<T>)",1,1,1
"org.andengine.util.adt.list.SmartList.queryForSubclass(IMatcher<T>,L)",1,3,3
"org.andengine.util.adt.list.SmartList.remove(IMatcher<T>)",3,3,3
"org.andengine.util.adt.list.SmartList.remove(IMatcher<T>,ParameterCallable<T>)",3,3,3
"org.andengine.util.adt.list.SmartList.remove(T,ParameterCallable<T>)",1,2,2
"org.andengine.util.adt.list.SmartList.removeAll(IMatcher<T>)",1,3,3
"org.andengine.util.adt.list.SmartList.removeAll(IMatcher<T>,ParameterCallable<T>)",1,3,3
"org.andengine.util.adt.list.SmartList.removeFirst()",1,1,1
"org.andengine.util.adt.list.SmartList.removeLast()",1,1,1
"org.andengine.util.adt.list.SortedList.SortedList(IList<T>)",1,1,1
"org.andengine.util.adt.list.SortedList.add(T)",1,2,2
"org.andengine.util.adt.list.SortedList.add(int,T)",1,1,1
"org.andengine.util.adt.list.SortedList.binarySearch(T,boolean)",2,2,2
"org.andengine.util.adt.list.SortedList.binarySearch(int,int,T)",4,2,4
"org.andengine.util.adt.list.SortedList.clear()",1,1,1
"org.andengine.util.adt.list.SortedList.get(int)",1,1,1
"org.andengine.util.adt.list.SortedList.indexOf(T)",1,1,1
"org.andengine.util.adt.list.SortedList.isEmpty()",1,1,1
"org.andengine.util.adt.list.SortedList.remove(T)",3,3,3
"org.andengine.util.adt.list.SortedList.remove(int)",1,1,1
"org.andengine.util.adt.list.SortedList.removeFirst()",1,1,1
"org.andengine.util.adt.list.SortedList.removeLast()",1,1,1
"org.andengine.util.adt.list.SortedList.scanForEqualItem(int,int,int,T,boolean)",7,5,9
"org.andengine.util.adt.list.SortedList.set(int,T)",1,1,1
"org.andengine.util.adt.list.SortedList.size()",1,1,1
"org.andengine.util.adt.list.UniqueList.UniqueList(IList<T>)",1,1,1
"org.andengine.util.adt.list.UniqueList.add(T)",1,2,2
"org.andengine.util.adt.list.UniqueList.add(int,T)",1,2,2
"org.andengine.util.adt.list.UniqueList.clear()",1,1,1
"org.andengine.util.adt.list.UniqueList.get(int)",1,1,1
"org.andengine.util.adt.list.UniqueList.indexOf(T)",1,1,1
"org.andengine.util.adt.list.UniqueList.isEmpty()",1,1,1
"org.andengine.util.adt.list.UniqueList.remove(T)",1,1,1
"org.andengine.util.adt.list.UniqueList.remove(int)",1,1,1
"org.andengine.util.adt.list.UniqueList.removeFirst()",1,1,1
"org.andengine.util.adt.list.UniqueList.removeLast()",1,1,1
"org.andengine.util.adt.list.UniqueList.set(int,T)",1,1,1
"org.andengine.util.adt.list.UniqueList.size()",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.SynchronizedList(IList<T>)",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.add(T)",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.add(int,T)",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.clear()",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.get(int)",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.indexOf(T)",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.isEmpty()",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.remove(T)",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.remove(int)",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.removeFirst()",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.removeLast()",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.set(int,T)",1,1,1
"org.andengine.util.adt.list.concurrent.SynchronizedList.size()",1,1,1
"org.andengine.util.adt.map.Library.Library()",1,1,1
"org.andengine.util.adt.map.Library.Library(int)",1,1,1
"org.andengine.util.adt.map.Library.clear()",1,1,1
"org.andengine.util.adt.map.Library.get(int)",1,1,1
"org.andengine.util.adt.map.Library.put(int,T)",2,2,2
"org.andengine.util.adt.map.Library.remove(int)",1,1,1
"org.andengine.util.adt.map.LongSparseArray.LongSparseArray()",1,1,1
"org.andengine.util.adt.map.LongSparseArray.LongSparseArray(int)",1,1,1
"org.andengine.util.adt.map.LongSparseArray.append(long,E)",2,4,6
"org.andengine.util.adt.map.LongSparseArray.binarySearch(long[],int,int,long)",3,1,5
"org.andengine.util.adt.map.LongSparseArray.checkIntegrity()",3,4,4
"org.andengine.util.adt.map.LongSparseArray.clear()",1,1,2
"org.andengine.util.adt.map.LongSparseArray.delete(long)",1,1,3
"org.andengine.util.adt.map.LongSparseArray.gc()",1,1,4
"org.andengine.util.adt.map.LongSparseArray.get(long)",1,1,1
"org.andengine.util.adt.map.LongSparseArray.get(long,E)",2,1,3
"org.andengine.util.adt.map.LongSparseArray.getKeys()",1,1,1
"org.andengine.util.adt.map.LongSparseArray.indexOfKey(long)",1,2,2
"org.andengine.util.adt.map.LongSparseArray.indexOfValue(E)",3,2,4
"org.andengine.util.adt.map.LongSparseArray.keyAt(int)",1,2,2
"org.andengine.util.adt.map.LongSparseArray.put(long,E)",3,5,8
"org.andengine.util.adt.map.LongSparseArray.remove(long)",1,1,1
"org.andengine.util.adt.map.LongSparseArray.setValueAt(int,E)",1,2,2
"org.andengine.util.adt.map.LongSparseArray.setValues(long[],E)",1,2,2
"org.andengine.util.adt.map.LongSparseArray.size()",1,2,2
"org.andengine.util.adt.map.LongSparseArray.valueAt(int)",1,2,2
"org.andengine.util.adt.map.MultiKey.MultiKey(K...)",1,1,1
"org.andengine.util.adt.map.MultiKey.equals(Object)",3,2,3
"org.andengine.util.adt.map.MultiKey.getKey(int)",1,1,1
"org.andengine.util.adt.map.MultiKey.getKeys()",1,1,1
"org.andengine.util.adt.map.MultiKey.hash(Object...)",1,3,3
"org.andengine.util.adt.map.MultiKey.hashCode()",1,1,1
"org.andengine.util.adt.map.MultiKey.size()",1,1,1
"org.andengine.util.adt.map.MultiKey.toString()",1,1,1
"org.andengine.util.adt.map.MultiKeyHashMap.get(K...)",3,4,4
"org.andengine.util.adt.map.MultiKeyHashMap.isEqualKey(K[],K[])",6,4,6
"org.andengine.util.adt.map.SparseArrayUtils.toString(LongSparseArray<?>)",1,3,3
"org.andengine.util.adt.map.SparseArrayUtils.toString(SparseArray<?>)",1,3,3
"org.andengine.util.adt.map.SparseArrayUtils.toString(SparseBooleanArray)",1,3,3
"org.andengine.util.adt.map.SparseArrayUtils.toString(SparseIntArray)",1,3,3
"org.andengine.util.adt.pool.EntityDetachRunnablePoolItem.run()",1,2,2
"org.andengine.util.adt.pool.EntityDetachRunnablePoolItem.setCallback(Callback<IEntity>)",1,1,1
"org.andengine.util.adt.pool.EntityDetachRunnablePoolItem.setEntity(IEntity)",1,1,1
"org.andengine.util.adt.pool.EntityDetachRunnablePoolUpdateHandler.EntityDetachRunnablePoolUpdateHandler()",1,1,1
"org.andengine.util.adt.pool.EntityDetachRunnablePoolUpdateHandler.EntityDetachRunnablePoolUpdateHandler(int)",1,1,1
"org.andengine.util.adt.pool.EntityDetachRunnablePoolUpdateHandler.EntityDetachRunnablePoolUpdateHandler(int,int)",1,1,1
"org.andengine.util.adt.pool.EntityDetachRunnablePoolUpdateHandler.EntityDetachRunnablePoolUpdateHandler(int,int,int)",1,1,1
"org.andengine.util.adt.pool.EntityDetachRunnablePoolUpdateHandler.onAllocatePoolItem()",1,1,1
"org.andengine.util.adt.pool.EntityDetachRunnablePoolUpdateHandler.scheduleDetach(IEntity)",1,1,1
"org.andengine.util.adt.pool.EntityDetachRunnablePoolUpdateHandler.scheduleDetach(IEntity,Callback<IEntity>)",1,1,1
"org.andengine.util.adt.pool.GenericPool.GenericPool()",1,1,1
"org.andengine.util.adt.pool.GenericPool.GenericPool(int)",1,1,1
"org.andengine.util.adt.pool.GenericPool.GenericPool(int,int)",1,1,1
"org.andengine.util.adt.pool.GenericPool.GenericPool(int,int,int)",3,2,4
"org.andengine.util.adt.pool.GenericPool.batchAllocatePoolItems(int)",1,2,3
"org.andengine.util.adt.pool.GenericPool.getAvailableItemCount()",1,1,1
"org.andengine.util.adt.pool.GenericPool.getAvailableItemCountMaximum()",1,1,1
"org.andengine.util.adt.pool.GenericPool.getUnrecycledItemCount()",1,1,1
"org.andengine.util.adt.pool.GenericPool.obtainPoolItem()",1,4,5
"org.andengine.util.adt.pool.GenericPool.onHandleAllocatePoolItem()",1,1,1
"org.andengine.util.adt.pool.GenericPool.onHandleObtainItem(T)",1,1,1
"org.andengine.util.adt.pool.GenericPool.onHandleRecycleItem(T)",1,1,1
"org.andengine.util.adt.pool.GenericPool.recyclePoolItem(T)",2,3,4
"org.andengine.util.adt.pool.GenericPool.shufflePoolItems()",1,1,1
"org.andengine.util.adt.pool.MultiPool.obtainPoolItem(int)",2,2,2
"org.andengine.util.adt.pool.MultiPool.recyclePoolItem(int,T)",1,2,2
"org.andengine.util.adt.pool.MultiPool.registerPool(int,GenericPool<T>)",1,1,1
"org.andengine.util.adt.pool.Pool.Pool()",1,1,1
"org.andengine.util.adt.pool.Pool.Pool(int)",1,1,1
"org.andengine.util.adt.pool.Pool.Pool(int,int)",1,1,1
"org.andengine.util.adt.pool.Pool.Pool(int,int,int)",1,1,1
"org.andengine.util.adt.pool.Pool.onHandleAllocatePoolItem()",1,1,1
"org.andengine.util.adt.pool.Pool.onHandleObtainItem(T)",1,1,1
"org.andengine.util.adt.pool.Pool.onHandleRecycleItem(T)",1,1,1
"org.andengine.util.adt.pool.Pool.ownsPoolItem(T)",1,1,1
"org.andengine.util.adt.pool.Pool.recycle(PoolItem)",1,1,1
"org.andengine.util.adt.pool.Pool.recyclePoolItem(T)",4,3,4
"org.andengine.util.adt.pool.PoolItem.getParent()",1,1,1
"org.andengine.util.adt.pool.PoolItem.isFromPool(Pool<? extends PoolItem>)",1,1,1
"org.andengine.util.adt.pool.PoolItem.isRecycled()",1,1,1
"org.andengine.util.adt.pool.PoolItem.onObtain()",1,1,1
"org.andengine.util.adt.pool.PoolItem.onRecycle()",1,1,1
"org.andengine.util.adt.pool.PoolItem.recycle()",2,1,2
"org.andengine.util.adt.pool.PoolUpdateHandler.PoolUpdateHandler()",1,1,1
"org.andengine.util.adt.pool.PoolUpdateHandler.PoolUpdateHandler(int)",1,1,1
"org.andengine.util.adt.pool.PoolUpdateHandler.PoolUpdateHandler(int,int)",1,1,1
"org.andengine.util.adt.pool.PoolUpdateHandler.PoolUpdateHandler(int,int,int)",1,1,1
"org.andengine.util.adt.pool.PoolUpdateHandler.obtainPoolItem()",1,1,1
"org.andengine.util.adt.pool.PoolUpdateHandler.onUpdate(float)",1,2,2
"org.andengine.util.adt.pool.PoolUpdateHandler.postPoolItem(T)",3,2,3
"org.andengine.util.adt.pool.PoolUpdateHandler.reset()",1,2,2
"org.andengine.util.adt.pool.RunnablePoolUpdateHandler.RunnablePoolUpdateHandler()",1,1,1
"org.andengine.util.adt.pool.RunnablePoolUpdateHandler.RunnablePoolUpdateHandler(int)",1,1,1
"org.andengine.util.adt.pool.RunnablePoolUpdateHandler.RunnablePoolUpdateHandler(int,int)",1,1,1
"org.andengine.util.adt.pool.RunnablePoolUpdateHandler.RunnablePoolUpdateHandler(int,int,int)",1,1,1
"org.andengine.util.adt.pool.RunnablePoolUpdateHandler.onHandlePoolItem(T)",1,1,1
"org.andengine.util.adt.queue.CircularQueue.CircularQueue()",1,1,1
"org.andengine.util.adt.queue.CircularQueue.CircularQueue(int)",1,1,1
"org.andengine.util.adt.queue.CircularQueue.enter(T)",1,1,1
"org.andengine.util.adt.queue.CircularQueue.enter(int,T)",1,1,1
"org.andengine.util.adt.queue.CircularQueue.peek()",2,2,2
"org.andengine.util.adt.queue.CircularQueue.poll()",2,2,2
"org.andengine.util.adt.queue.ShiftQueue.ShiftQueue()",1,1,1
"org.andengine.util.adt.queue.ShiftQueue.ShiftQueue(int)",1,1,1
"org.andengine.util.adt.queue.ShiftQueue.enter(T)",1,1,1
"org.andengine.util.adt.queue.ShiftQueue.enter(int,T)",1,1,1
"org.andengine.util.adt.queue.ShiftQueue.peek()",2,2,2
"org.andengine.util.adt.queue.ShiftQueue.poll()",2,2,2
"org.andengine.util.adt.queue.SortedQueue.SortedQueue(IQueue<T>)",1,1,1
"org.andengine.util.adt.queue.SortedQueue.enter(T)",1,1,1
"org.andengine.util.adt.queue.SortedQueue.enter(int,T)",1,1,1
"org.andengine.util.adt.queue.SortedQueue.peek()",2,2,2
"org.andengine.util.adt.queue.SortedQueue.poll()",2,2,2
"org.andengine.util.adt.queue.UniqueQueue.UniqueQueue(IQueue<T>)",1,1,1
"org.andengine.util.adt.queue.UniqueQueue.enter(T)",1,1,1
"org.andengine.util.adt.queue.UniqueQueue.enter(int,T)",1,1,1
"org.andengine.util.adt.queue.UniqueQueue.peek()",2,2,2
"org.andengine.util.adt.queue.UniqueQueue.poll()",2,2,2
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.SynchronizedQueue(IQueue<T>)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.add(T)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.add(int,T)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.clear()",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.enter(T)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.enter(int,T)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.get(int)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.indexOf(T)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.isEmpty()",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.peek()",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.poll()",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.remove(T)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.remove(int)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.removeFirst()",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.removeLast()",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.set(int,T)",1,1,1
"org.andengine.util.adt.queue.concurrent.SynchronizedQueue.size()",1,1,1
"org.andengine.util.adt.spatial.bounds.util.FloatBoundsUtils.contains(IFloatBounds,IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.FloatBoundsUtils.contains(IFloatBounds,float,float)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.FloatBoundsUtils.contains(IFloatBounds,float,float,float,float)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.FloatBoundsUtils.contains(float,float,float,float,float,float)",1,1,4
"org.andengine.util.adt.spatial.bounds.util.FloatBoundsUtils.contains(float,float,float,float,float,float,float,float)",1,1,4
"org.andengine.util.adt.spatial.bounds.util.FloatBoundsUtils.intersects(IFloatBounds,IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.FloatBoundsUtils.intersects(float,float,float,float,float,float,float,float)",1,3,6
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.adjacent(IIntBounds,IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.adjacent(int,int,int,int,int,int,int,int)",1,1,4
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.contains(IIntBounds,IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.contains(IIntBounds,int,int)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.contains(IIntBounds,int,int,int,int)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.contains(int,int,int,int,int,int)",1,1,4
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.contains(int,int,int,int,int,int,int,int)",1,1,4
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.intersects(IIntBounds,IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.bounds.util.IntBoundsUtils.intersects(int,int,int,int,int,int,int,int)",1,3,6
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTree(IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTree(IFloatBounds,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTree(float,float,float,float)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTree(float,float,float,float,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.FloatQuadTreeNode(int,IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.FloatQuadTreeNode(int,float,float,float,float)",3,1,3
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.appendBoundsToString(StringBuilder)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.containedBy(IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.contains(BoundsSplit,IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.contains(IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.contains(float,float,float,float)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getHeight()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getWidth()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getXMax()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getXMax(BoundsSplit)",6,2,6
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getXMin()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getXMin(BoundsSplit)",6,2,6
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getYMax()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getYMax(BoundsSplit)",6,2,6
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getYMin()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.getYMin(BoundsSplit)",6,2,6
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.intersects(IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.intersects(IFloatBounds,IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.intersects(float,float,float,float)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.FloatQuadTreeNode.split(BoundsSplit)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.containsAny(float,float)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.containsAny(float,float,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.containsAny(float,float,float,float)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.containsAny(float,float,float,float,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.getRoot()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.getXMax()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.getXMin()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.getYMax()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.getYMin()",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.initRoot(IFloatBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.query(float,float)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.query(float,float,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.query(float,float,IMatcher<T>,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.query(float,float,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.query(float,float,float,float)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.query(float,float,float,float,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.query(float,float,float,float,IMatcher<T>,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.query(float,float,float,float,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.queryForSubclass(float,float,IMatcher<T>,List<S>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.FloatQuadTree.queryForSubclass(float,float,float,float,IMatcher<T>,List<S>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTree(IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTree(IIntBounds,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTree(int,int,int,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTree(int,int,int,int,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.IntQuadTreeNode(int,IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.IntQuadTreeNode(int,int,int,int,int)",3,1,3
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.appendBoundsToString(StringBuilder)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.containedBy(IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.contains(BoundsSplit,IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.contains(IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.contains(int,int,int,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getHeight()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getWidth()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getXMax()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getXMax(BoundsSplit)",10,4,10
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getXMin()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getXMin(BoundsSplit)",10,4,10
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getYMax()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getYMax(BoundsSplit)",10,4,10
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getYMin()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.getYMin(BoundsSplit)",10,4,10
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.intersects(IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.intersects(IIntBounds,IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.intersects(int,int,int,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.IntQuadTreeNode.split(BoundsSplit)",2,1,3
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.containsAny(int,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.containsAny(int,int,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.containsAny(int,int,int,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.containsAny(int,int,int,int,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.getRoot()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.getXMax()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.getXMin()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.getYMax()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.getYMin()",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.initRoot(IIntBounds)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.query(int,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.query(int,int,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.query(int,int,IMatcher<T>,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.query(int,int,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.query(int,int,int,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.query(int,int,int,int,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.query(int,int,int,int,IMatcher<T>,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.query(int,int,int,int,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.queryForSubclass(int,int,IMatcher<T>,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.IntQuadTree.queryForSubclass(int,int,int,int,IMatcher<T>,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTree(B)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTree(B,int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.QuadTreeNode(int)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.add(T,B)",14,22,22
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.addItemSafe(T)",1,1,2
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.callItems(ParameterCallable<T>)",1,7,7
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.callNodes(ParameterCallable<QuadTreeNode>)",1,5,5
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.clear()",1,6,6
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.containsAny(B)",8,6,8
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.containsAny(B,IMatcher<T>)",8,7,9
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.containsAnyChild(B,IMatcher<T>,QuadTreeNode)",3,2,4
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.containsAnyChild(B,QuadTreeNode)",3,2,4
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.getItemCount()",1,6,6
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.getItems()",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.getItemsAndItemsBelow()",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.getItemsAndItemsBelow(IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.getItemsAndItemsBelow(IMatcher<T>,L)",1,8,8
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.getItemsAndItemsBelow(L)",1,6,6
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.getItemsAndItemsBelowForSubclass(IMatcher<T>,L)",1,8,8
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.hasChildren()",1,1,4
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.query(B)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.query(B,IMatcher<T>,L)",5,8,9
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.query(B,L)",5,7,8
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.queryChild(B,IMatcher<T>,L,QuadTreeNode)",3,4,5
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.queryChild(B,L,QuadTreeNode)",3,4,5
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.queryChildForSubclass(B,IMatcher<T>,L,QuadTreeNode)",3,4,5
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.queryForSubclass(B,IMatcher<T>,L)",5,8,9
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.remove(T)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.remove(T,B)",7,11,11
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.toString()",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.QuadTreeNode.toString(int)",1,10,16
"org.andengine.util.adt.spatial.quadtree.QuadTree.add(T)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.add(T,B)",2,2,2
"org.andengine.util.adt.spatial.quadtree.QuadTree.addAll(ArrayList<T>)",1,2,2
"org.andengine.util.adt.spatial.quadtree.QuadTree.addAll(Collection<T>)",1,2,2
"org.andengine.util.adt.spatial.quadtree.QuadTree.addAll(T...)",1,2,2
"org.andengine.util.adt.spatial.quadtree.QuadTree.callItems(ParameterCallable<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.callNodes(ParameterCallable<QuadTreeNode>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.clear()",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.containsAny(B)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.containsAny(B,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.getBounds()",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.getItemCount()",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.getMaxLevel()",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.isEmpty()",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.move(T,B)",2,2,2
"org.andengine.util.adt.spatial.quadtree.QuadTree.move(T,B,B)",2,2,2
"org.andengine.util.adt.spatial.quadtree.QuadTree.query(B)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.query(B,IMatcher<T>)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.query(B,IMatcher<T>,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.query(B,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.queryForSubclass(B,IMatcher<T>,L)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.remove(T)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.remove(T,B)",1,1,1
"org.andengine.util.adt.spatial.quadtree.QuadTree.toString()",1,1,1
"org.andengine.util.adt.transformation.Transformation.Transformation()",1,1,1
"org.andengine.util.adt.transformation.Transformation.postConcat(Transformation)",1,1,1
"org.andengine.util.adt.transformation.Transformation.postConcat(float,float,float,float,float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.postRotate(float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.postScale(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.postSkew(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.postTranslate(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.preConcat(Transformation)",1,1,1
"org.andengine.util.adt.transformation.Transformation.preConcat(float,float,float,float,float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.preRotate(float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.preScale(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.preSkew(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.preTranslate(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.reset()",1,1,1
"org.andengine.util.adt.transformation.Transformation.setTo(Transformation)",1,1,1
"org.andengine.util.adt.transformation.Transformation.setToIdentity()",1,1,1
"org.andengine.util.adt.transformation.Transformation.setToRotate(float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.setToScale(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.setToSkew(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.setToTranslate(float,float)",1,1,1
"org.andengine.util.adt.transformation.Transformation.toString()",1,1,1
"org.andengine.util.adt.transformation.Transformation.transform(float[])",1,1,2
"org.andengine.util.adt.transformation.TransformationPool.obtain()",1,1,1
"org.andengine.util.adt.transformation.TransformationPool.recycle(Transformation)",1,1,1
"org.andengine.util.adt.trie.Trie.TrieNode.TrieNode()",1,1,1
"org.andengine.util.adt.trie.Trie.TrieNode.TrieNode(boolean)",1,1,1
"org.andengine.util.adt.trie.Trie.TrieNode.add(CharSequence)",2,1,2
"org.andengine.util.adt.trie.Trie.TrieNode.add(CharSequence,int,int)",1,3,4
"org.andengine.util.adt.trie.Trie.TrieNode.contains(CharSequence)",2,1,2
"org.andengine.util.adt.trie.Trie.TrieNode.contains(CharSequence,int,int)",4,3,4
"org.andengine.util.adt.trie.Trie.add(CharSequence)",1,1,1
"org.andengine.util.adt.trie.Trie.add(CharSequence,int,int)",1,1,1
"org.andengine.util.adt.trie.Trie.contains(CharSequence)",1,1,1
"org.andengine.util.adt.trie.Trie.contains(CharSequence,int,int)",1,1,1
"org.andengine.util.algorithm.Spiral.Spiral(int,int)",1,1,1
"org.andengine.util.algorithm.Spiral.Spiral(int,int,int)",1,1,1
"org.andengine.util.algorithm.Spiral.getCenterX()",1,1,1
"org.andengine.util.algorithm.Spiral.getCenterY()",1,1,1
"org.andengine.util.algorithm.Spiral.getX()",1,1,1
"org.andengine.util.algorithm.Spiral.getY()",1,1,1
"org.andengine.util.algorithm.Spiral.step()",1,2,3
"org.andengine.util.algorithm.collision.BaseCollisionChecker.checkAxisAlignedRectangleCollision(float,float,float,float,float,float,float,float)",1,1,4
"org.andengine.util.algorithm.collision.BaseCollisionChecker.checkAxisAlignedRectangleContains(float,float,float,float,float,float)",1,1,4
"org.andengine.util.algorithm.collision.BaseCollisionChecker.relativeCCW(float,float,float,float,float,float)",1,1,6
"org.andengine.util.algorithm.collision.LineCollisionChecker.checkLineCollision(float,float,float,float,float,float,float,float)",1,2,2
"org.andengine.util.algorithm.collision.LineCollisionChecker.fillVertices(Line,float[])",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.checkCollision(RectangularShape,Line)",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.checkCollision(RectangularShape,RectangularShape)",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.checkContains(Entity,float,float,float,float)",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.checkContains(RectangularShape,float,float)",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.checkContains(float,float,float,float,Transformation,float,float)",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.fillVertices(Camera,float[])",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.fillVertices(RectangularShape,float[])",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.fillVertices(float,float,float,float,Transformation,float[])",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.isVisible(Camera,Line)",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.isVisible(Camera,RectangularShape)",1,1,1
"org.andengine.util.algorithm.collision.RectangularShapeCollisionChecker.isVisible(Camera,float,float,float,float,Transformation)",1,1,1
"org.andengine.util.algorithm.collision.ShapeCollisionChecker.checkCollision(float[],int,float[],int)",1,1,1
"org.andengine.util.algorithm.collision.ShapeCollisionChecker.checkCollision(float[],int,int,int,int,float[],int,int,int,int)",6,4,6
"org.andengine.util.algorithm.collision.ShapeCollisionChecker.checkCollisionSub(float[],int,int,int,int,int,float[],int,int,int,int)",4,2,4
"org.andengine.util.algorithm.collision.ShapeCollisionChecker.checkContains(float[],int,float,float)",1,1,1
"org.andengine.util.algorithm.collision.ShapeCollisionChecker.checkContains(float[],int,int,int,int,float,float)",1,2,8
"org.andengine.util.algorithm.collision.TriangleCollisionChecker.checkContains(float,float,float,float,float,float,Transformation,float,float)",1,1,1
"org.andengine.util.algorithm.collision.TriangleCollisionChecker.checkContains(float,float,float,float,float,float,float,float)",1,1,3
"org.andengine.util.algorithm.hull.HullUtils.indexOfLowestVertex(float[],int,int,int)",1,1,3
"org.andengine.util.algorithm.hull.HullUtils.swap(float[],int,int,int)",1,1,2
"org.andengine.util.algorithm.hull.JarvisMarch.computeHull(float[],int,int,int,int)",1,1,1
"org.andengine.util.algorithm.hull.JarvisMarch.jarvisMarch(float[],int,int,int,int)",4,5,12
"org.andengine.util.algorithm.path.Direction.Direction(int,int)",1,1,1
"org.andengine.util.algorithm.path.Direction.fromDelta(int,int)",10,5,12
"org.andengine.util.algorithm.path.Direction.getDeltaX()",1,1,1
"org.andengine.util.algorithm.path.Direction.getDeltaY()",1,1,1
"org.andengine.util.algorithm.path.Direction.isHorizontal()",1,1,1
"org.andengine.util.algorithm.path.Direction.isVertical()",1,1,1
"org.andengine.util.algorithm.path.Direction.opposite()",9,2,9
"org.andengine.util.algorithm.path.Direction.rotateLeft()",9,2,9
"org.andengine.util.algorithm.path.Direction.rotateRight()",9,2,9
"org.andengine.util.algorithm.path.Path.Path(int)",1,1,1
"org.andengine.util.algorithm.path.Path.contains(int,int)",3,1,4
"org.andengine.util.algorithm.path.Path.getDirectionToNextStep(int)",2,2,2
"org.andengine.util.algorithm.path.Path.getDirectionToPreviousStep(int)",2,2,2
"org.andengine.util.algorithm.path.Path.getFromX()",1,1,1
"org.andengine.util.algorithm.path.Path.getFromY()",1,1,1
"org.andengine.util.algorithm.path.Path.getLength()",1,1,1
"org.andengine.util.algorithm.path.Path.getToX()",1,1,1
"org.andengine.util.algorithm.path.Path.getToY()",1,1,1
"org.andengine.util.algorithm.path.Path.getX(int)",1,1,1
"org.andengine.util.algorithm.path.Path.getY(int)",1,1,1
"org.andengine.util.algorithm.path.Path.set(int,int,int)",1,1,1
"org.andengine.util.algorithm.path.astar.AStarPathFinder.Node.Node(int,int,float)",1,1,1
"org.andengine.util.algorithm.path.astar.AStarPathFinder.Node.calculateID(int,int)",1,1,1
"org.andengine.util.algorithm.path.astar.AStarPathFinder.Node.compareTo(Node)",3,1,3
"org.andengine.util.algorithm.path.astar.AStarPathFinder.Node.equals(Node)",1,1,1
"org.andengine.util.algorithm.path.astar.AStarPathFinder.Node.equals(Object)",4,3,4
"org.andengine.util.algorithm.path.astar.AStarPathFinder.Node.setParent(Node,float)",1,1,1
"org.andengine.util.algorithm.path.astar.AStarPathFinder.Node.toString()",1,1,1
"org.andengine.util.algorithm.path.astar.AStarPathFinder.findPath(IPathFinderMap<T>,int,int,int,int,T,int,int,int,int,boolean,IAStarHeuristic<T>,ICostFunction<T>)",1,1,1
"org.andengine.util.algorithm.path.astar.AStarPathFinder.findPath(IPathFinderMap<T>,int,int,int,int,T,int,int,int,int,boolean,IAStarHeuristic<T>,ICostFunction<T>,float)",1,1,1
"org.andengine.util.algorithm.path.astar.AStarPathFinder.findPath(IPathFinderMap<T>,int,int,int,int,T,int,int,int,int,boolean,IAStarHeuristic<T>,ICostFunction<T>,float,IPathFinderListener<T>)",11,13,25
"org.andengine.util.algorithm.path.astar.EuclideanHeuristic.getExpectedRestCost(IPathFinderMap<T>,T,int,int,int,int)",1,1,1
"org.andengine.util.algorithm.path.astar.ManhattanHeuristic.getExpectedRestCost(IPathFinderMap<T>,T,int,int,int,int)",1,1,1
"org.andengine.util.algorithm.path.astar.NullHeuristic.getExpectedRestCost(IPathFinderMap<T>,T,int,int,int,int)",1,1,1
"org.andengine.util.algorithm.sort.InsertionSorter.sort(IList<T>,int,int,Comparator<T>)",1,5,5
"org.andengine.util.algorithm.sort.InsertionSorter.sort(List<T>,int,int,Comparator<T>)",1,5,5
"org.andengine.util.algorithm.sort.InsertionSorter.sort(T[],int,int,Comparator<T>)",1,4,5
"org.andengine.util.algorithm.sort.Sorter.sort(IList<T>,Comparator<T>)",1,1,1
"org.andengine.util.algorithm.sort.Sorter.sort(List<T>,Comparator<T>)",1,1,1
"org.andengine.util.algorithm.sort.Sorter.sort(T[],Comparator<T>)",1,1,1
"org.andengine.util.animationpack.AnimationPack.AnimationPack(TexturePackLibrary,AnimationPackTiledTextureRegionLibrary)",1,1,1
"org.andengine.util.animationpack.AnimationPack.getAnimationPackAnimationDataLibrary()",1,1,1
"org.andengine.util.animationpack.AnimationPack.getTexturePackLibrary()",1,1,1
"org.andengine.util.animationpack.AnimationPackLoader.AnimationPackLoader(AssetManager,TextureManager)",1,1,1
"org.andengine.util.animationpack.AnimationPackLoader.load(InputStream,String)",1,1,4
"org.andengine.util.animationpack.AnimationPackLoader.loadFromAsset(String,String)",1,2,2
"org.andengine.util.animationpack.AnimationPackParser.AnimationPackParser(AssetManager,String,TextureManager)",1,1,1
"org.andengine.util.animationpack.AnimationPackParser.endElement(String,String,String)",7,6,7
"org.andengine.util.animationpack.AnimationPackParser.getAnimationPack()",1,1,1
"org.andengine.util.animationpack.AnimationPackParser.startElement(String,String,String,Attributes)",8,7,8
"org.andengine.util.animationpack.AnimationPackTiledTextureRegion.AnimationPackTiledTextureRegion(String,long[],int,ITexture,ITextureRegion...)",1,1,2
"org.andengine.util.animationpack.AnimationPackTiledTextureRegion.getAnimationData()",1,1,1
"org.andengine.util.animationpack.AnimationPackTiledTextureRegion.getAnimationName()",1,1,1
"org.andengine.util.animationpack.AnimationPackTiledTextureRegionLibrary.get(String)",1,1,1
"org.andengine.util.animationpack.AnimationPackTiledTextureRegionLibrary.put(AnimationPackTiledTextureRegion)",1,1,1
"org.andengine.util.animationpack.exception.AnimationPackParseException.AnimationPackParseException()",1,1,1
"org.andengine.util.animationpack.exception.AnimationPackParseException.AnimationPackParseException(Exception)",1,1,1
"org.andengine.util.animationpack.exception.AnimationPackParseException.AnimationPackParseException(String)",1,1,1
"org.andengine.util.animationpack.exception.AnimationPackParseException.AnimationPackParseException(String,Exception)",1,1,1
"org.andengine.util.base64.Base64.Base64()",1,1,1
"org.andengine.util.base64.Base64.Decoder.Decoder(int,byte[])",1,1,2
"org.andengine.util.base64.Base64.Decoder.maxOutputSize(int)",1,1,1
"org.andengine.util.base64.Base64.Decoder.process(byte[],int,int,boolean)",21,3,33
"org.andengine.util.base64.Base64.Encoder.Encoder(int,byte[])",1,1,3
"org.andengine.util.base64.Base64.Encoder.maxOutputSize(int)",1,1,1
"org.andengine.util.base64.Base64.Encoder.process(byte[],int,int,boolean)",2,2,30
"org.andengine.util.base64.Base64.decode(String,int)",1,1,1
"org.andengine.util.base64.Base64.decode(byte[],int)",1,1,1
"org.andengine.util.base64.Base64.decode(byte[],int,int,int)",3,1,3
"org.andengine.util.base64.Base64.encode(byte[],int)",1,1,1
"org.andengine.util.base64.Base64.encode(byte[],int,int,int)",2,2,9
"org.andengine.util.base64.Base64.encodeToString(byte[],int)",1,1,2
"org.andengine.util.base64.Base64.encodeToString(byte[],int,int,int)",1,1,2
"org.andengine.util.base64.Base64InputStream.Base64InputStream(InputStream,int)",1,1,1
"org.andengine.util.base64.Base64InputStream.Base64InputStream(InputStream,int,boolean)",1,1,2
"org.andengine.util.base64.Base64InputStream.available()",1,1,1
"org.andengine.util.base64.Base64InputStream.close()",1,1,1
"org.andengine.util.base64.Base64InputStream.mark(int)",1,1,1
"org.andengine.util.base64.Base64InputStream.markSupported()",1,1,1
"org.andengine.util.base64.Base64InputStream.read()",2,2,3
"org.andengine.util.base64.Base64InputStream.read(byte[],int,int)",2,2,3
"org.andengine.util.base64.Base64InputStream.refill()",3,2,4
"org.andengine.util.base64.Base64InputStream.reset()",1,1,1
"org.andengine.util.base64.Base64InputStream.skip(long)",2,2,3
"org.andengine.util.color.Color.Color(Color)",1,1,1
"org.andengine.util.color.Color.Color(float,float,float)",1,1,1
"org.andengine.util.color.Color.Color(float,float,float,float)",1,1,1
"org.andengine.util.color.Color.equals(Color)",1,1,1
"org.andengine.util.color.Color.equals(Object)",4,3,4
"org.andengine.util.color.Color.getABGRPackedFloat()",1,1,1
"org.andengine.util.color.Color.getABGRPackedInt()",1,1,1
"org.andengine.util.color.Color.getARGBPackedInt()",1,1,1
"org.andengine.util.color.Color.getAlpha()",1,1,1
"org.andengine.util.color.Color.getBlue()",1,1,1
"org.andengine.util.color.Color.getGreen()",1,1,1
"org.andengine.util.color.Color.getRed()",1,1,1
"org.andengine.util.color.Color.hashCode()",1,1,1
"org.andengine.util.color.Color.mix(Color,float,Color,float)",1,1,1
"org.andengine.util.color.Color.packABGR()",1,1,1
"org.andengine.util.color.Color.packABGRAlpha()",1,1,1
"org.andengine.util.color.Color.packABGRBlue()",1,1,1
"org.andengine.util.color.Color.packABGRGreen()",1,1,1
"org.andengine.util.color.Color.packABGRRed()",1,1,1
"org.andengine.util.color.Color.reset()",1,1,1
"org.andengine.util.color.Color.set(Color)",1,1,1
"org.andengine.util.color.Color.set(float,float,float)",1,1,1
"org.andengine.util.color.Color.set(float,float,float,float)",1,1,1
"org.andengine.util.color.Color.setAlpha(float)",1,1,1
"org.andengine.util.color.Color.setAlphaChecking(float)",2,2,2
"org.andengine.util.color.Color.setBlue(float)",1,1,1
"org.andengine.util.color.Color.setBlueChecking(float)",2,2,2
"org.andengine.util.color.Color.setChecking(Color)",2,1,2
"org.andengine.util.color.Color.setChecking(float,float,float)",2,2,4
"org.andengine.util.color.Color.setChecking(float,float,float,float)",2,2,5
"org.andengine.util.color.Color.setGreen(float)",1,1,1
"org.andengine.util.color.Color.setGreenChecking(float)",2,2,2
"org.andengine.util.color.Color.setRed(float)",1,1,1
"org.andengine.util.color.Color.setRedChecking(float)",2,2,2
"org.andengine.util.color.Color.toString()",1,1,1
"org.andengine.util.color.ColorPool.onAllocatePoolItem()",1,1,1
"org.andengine.util.color.ColorPool.onHandleRecycleItem(Color)",1,1,1
"org.andengine.util.color.ColorUtils.convertABGRPackedIntToColor(int)",1,1,1
"org.andengine.util.color.ColorUtils.convertARGBPackedIntToColor(int)",1,1,1
"org.andengine.util.color.ColorUtils.convertHSVToARGBPackedInt(float,float,float)",1,1,1
"org.andengine.util.color.ColorUtils.convertHSVToColor(float,float,float)",1,1,1
"org.andengine.util.color.ColorUtils.convertPackedIntToPackedFloat(int)",1,1,1
"org.andengine.util.color.ColorUtils.convertRGBAToABGRPackedFloat(float,float,float,float)",1,1,1
"org.andengine.util.color.ColorUtils.convertRGBAToABGRPackedInt(float,float,float,float)",1,1,1
"org.andengine.util.color.ColorUtils.convertRGBAToARGBPackedFloat(float,float,float,float)",1,1,1
"org.andengine.util.color.ColorUtils.convertRGBAToARGBPackedInt(float,float,float,float)",1,1,1
"org.andengine.util.color.ColorUtils.extractAlphaFromABGRPackedInt(int)",1,1,1
"org.andengine.util.color.ColorUtils.extractAlphaFromARGBPackedInt(int)",1,1,1
"org.andengine.util.color.ColorUtils.extractBlueFromABGRPackedInt(int)",1,1,1
"org.andengine.util.color.ColorUtils.extractBlueFromARGBPackedInt(int)",1,1,1
"org.andengine.util.color.ColorUtils.extractGreenFromABGRPackedInt(int)",1,1,1
"org.andengine.util.color.ColorUtils.extractGreenFromARGBPackedInt(int)",1,1,1
"org.andengine.util.color.ColorUtils.extractRedFromABGRPackedInt(int)",1,1,1
"org.andengine.util.color.ColorUtils.extractRedFromARGBPackedInt(int)",1,1,1
"org.andengine.util.debug.Debug.DebugLevel.isSameOrLessThan(DebugLevel)",1,1,1
"org.andengine.util.debug.Debug.d(String)",1,1,1
"org.andengine.util.debug.Debug.d(String,String)",1,1,1
"org.andengine.util.debug.Debug.d(String,String,Throwable)",1,3,3
"org.andengine.util.debug.Debug.d(String,Throwable)",1,1,1
"org.andengine.util.debug.Debug.dUser(String,String)",1,2,2
"org.andengine.util.debug.Debug.dUser(String,String,String)",1,2,2
"org.andengine.util.debug.Debug.dUser(String,String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.dUser(String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.e(String)",1,1,1
"org.andengine.util.debug.Debug.e(String,String)",1,1,1
"org.andengine.util.debug.Debug.e(String,String,Throwable)",1,3,3
"org.andengine.util.debug.Debug.e(String,Throwable)",1,1,1
"org.andengine.util.debug.Debug.e(Throwable)",1,1,1
"org.andengine.util.debug.Debug.eUser(String,String)",1,2,2
"org.andengine.util.debug.Debug.eUser(String,String,String)",1,2,2
"org.andengine.util.debug.Debug.eUser(String,String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.eUser(String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.eUser(Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.getDebugLevel()",1,1,1
"org.andengine.util.debug.Debug.getTag()",1,1,1
"org.andengine.util.debug.Debug.i(String)",1,1,1
"org.andengine.util.debug.Debug.i(String,String)",1,1,1
"org.andengine.util.debug.Debug.i(String,String,Throwable)",1,3,3
"org.andengine.util.debug.Debug.i(String,Throwable)",1,1,1
"org.andengine.util.debug.Debug.iUser(String,String)",1,2,2
"org.andengine.util.debug.Debug.iUser(String,String,String)",1,2,2
"org.andengine.util.debug.Debug.iUser(String,String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.iUser(String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.log(DebugLevel,String)",3,2,7
"org.andengine.util.debug.Debug.log(DebugLevel,String,String)",3,2,7
"org.andengine.util.debug.Debug.log(DebugLevel,String,String,Throwable)",3,2,7
"org.andengine.util.debug.Debug.log(DebugLevel,String,Throwable)",3,2,7
"org.andengine.util.debug.Debug.setDebugLevel(DebugLevel)",2,1,2
"org.andengine.util.debug.Debug.setDebugUser(String)",2,1,2
"org.andengine.util.debug.Debug.setTag(String)",1,1,1
"org.andengine.util.debug.Debug.v(String)",1,1,1
"org.andengine.util.debug.Debug.v(String,String)",1,1,1
"org.andengine.util.debug.Debug.v(String,String,Throwable)",1,3,3
"org.andengine.util.debug.Debug.v(String,Throwable)",1,1,1
"org.andengine.util.debug.Debug.vUser(String,String)",1,2,2
"org.andengine.util.debug.Debug.vUser(String,String,String)",1,2,2
"org.andengine.util.debug.Debug.vUser(String,String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.vUser(String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.w(String)",1,1,1
"org.andengine.util.debug.Debug.w(String,String)",1,1,1
"org.andengine.util.debug.Debug.w(String,String,Throwable)",1,3,3
"org.andengine.util.debug.Debug.w(String,Throwable)",1,1,1
"org.andengine.util.debug.Debug.w(Throwable)",1,1,1
"org.andengine.util.debug.Debug.wUser(String,String)",1,2,2
"org.andengine.util.debug.Debug.wUser(String,String,String)",1,2,2
"org.andengine.util.debug.Debug.wUser(String,String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.wUser(String,Throwable,String)",1,2,2
"org.andengine.util.debug.Debug.wUser(Throwable,String)",1,2,2
"org.andengine.util.debug.DebugTimer.DebugTime.DebugTime(long,String)",1,1,1
"org.andengine.util.debug.DebugTimer.DebugTime.DebugTime(long,String,boolean)",1,1,1
"org.andengine.util.debug.DebugTimer.DebugTime.begin(DebugTime)",1,1,1
"org.andengine.util.debug.DebugTimer.DebugTime.dump(int)",1,1,1
"org.andengine.util.debug.DebugTimer.DebugTime.dump(int,String)",1,4,4
"org.andengine.util.debug.DebugTimer.DebugTime.end(long)",1,1,1
"org.andengine.util.debug.DebugTimer.DebugTime.ensureChildrenAllocated()",1,1,2
"org.andengine.util.debug.DebugTimer.DebugTime.split(String)",1,1,2
"org.andengine.util.debug.DebugTimer.DebugTimer(DebugLevel,String)",1,1,1
"org.andengine.util.debug.DebugTimer.DebugTimer(String)",1,1,1
"org.andengine.util.debug.DebugTimer.begin(String)",1,1,1
"org.andengine.util.debug.DebugTimer.clear()",1,1,1
"org.andengine.util.debug.DebugTimer.dump()",1,1,1
"org.andengine.util.debug.DebugTimer.dump(boolean)",1,3,3
"org.andengine.util.debug.DebugTimer.end()",2,2,2
"org.andengine.util.debug.DebugTimer.init(String)",1,1,1
"org.andengine.util.debug.DebugTimer.split(String)",1,1,1
"org.andengine.util.exception.AndEngineException.AndEngineException()",1,1,1
"org.andengine.util.exception.AndEngineException.AndEngineException(String)",1,1,1
"org.andengine.util.exception.AndEngineException.AndEngineException(String,Throwable)",1,1,1
"org.andengine.util.exception.AndEngineException.AndEngineException(Throwable)",1,1,1
"org.andengine.util.exception.AndEngineRuntimeException.AndEngineRuntimeException()",1,1,1
"org.andengine.util.exception.AndEngineRuntimeException.AndEngineRuntimeException(String)",1,1,1
"org.andengine.util.exception.AndEngineRuntimeException.AndEngineRuntimeException(String,Throwable)",1,1,1
"org.andengine.util.exception.AndEngineRuntimeException.AndEngineRuntimeException(Throwable)",1,1,1
"org.andengine.util.exception.DeviceNotSupportedException.DeviceNotSupportedException(DeviceNotSupportedCause)",1,1,1
"org.andengine.util.exception.DeviceNotSupportedException.DeviceNotSupportedException(DeviceNotSupportedCause,Throwable)",1,1,1
"org.andengine.util.exception.DeviceNotSupportedException.getDeviceNotSupportedCause()",1,1,1
"org.andengine.util.exception.MethodNotSupportedException.MethodNotSupportedException()",1,1,1
"org.andengine.util.exception.MethodNotSupportedException.MethodNotSupportedException(String)",1,1,1
"org.andengine.util.exception.MethodNotSupportedException.MethodNotSupportedException(String,Throwable)",1,1,1
"org.andengine.util.exception.MethodNotSupportedException.MethodNotSupportedException(Throwable)",1,1,1
"org.andengine.util.exception.MethodNotYetImplementedException.MethodNotYetImplementedException()",1,1,1
"org.andengine.util.exception.MethodNotYetImplementedException.MethodNotYetImplementedException(String)",1,1,1
"org.andengine.util.exception.MethodNotYetImplementedException.MethodNotYetImplementedException(String,Throwable)",1,1,1
"org.andengine.util.exception.MethodNotYetImplementedException.MethodNotYetImplementedException(Throwable)",1,1,1
"org.andengine.util.exception.NullBitmapException.NullBitmapException()",1,1,1
"org.andengine.util.exception.NullBitmapException.NullBitmapException(String)",1,1,1
"org.andengine.util.exception.NullBitmapException.NullBitmapException(String,Throwable)",1,1,1
"org.andengine.util.exception.NullBitmapException.NullBitmapException(Throwable)",1,1,1
"org.andengine.util.level.LevelLoader.LevelLoader()",1,1,1
"org.andengine.util.level.LevelLoader.LevelLoader(String)",1,1,1
"org.andengine.util.level.LevelLoader.getAssetBasePath()",1,1,1
"org.andengine.util.level.LevelLoader.getDefaultEntityLoader()",1,1,1
"org.andengine.util.level.LevelLoader.loadLevelFromAsset(AssetManager,String)",1,1,1
"org.andengine.util.level.LevelLoader.loadLevelFromResource(Resources,int)",1,1,1
"org.andengine.util.level.LevelLoader.loadLevelFromStream(InputStream)",1,3,3
"org.andengine.util.level.LevelLoader.onAfterLoadLevel()",1,1,1
"org.andengine.util.level.LevelLoader.onBeforeLoadLevel()",1,1,1
"org.andengine.util.level.LevelLoader.registerEntityLoader(String,IEntityLoader)",1,1,1
"org.andengine.util.level.LevelLoader.registerEntityLoader(String[],IEntityLoader)",1,2,2
"org.andengine.util.level.LevelLoader.setAssetBasePath(String)",2,2,3
"org.andengine.util.level.LevelLoader.setDefaultEntityLoader(IEntityLoader)",1,1,1
"org.andengine.util.level.LevelParser.LevelParser(IEntityLoader,HashMap<String, IEntityLoader>)",1,1,1
"org.andengine.util.level.LevelParser.endElement(String,String,String)",1,1,1
"org.andengine.util.level.LevelParser.startElement(String,String,String,Attributes)",3,5,6
"org.andengine.util.levelstats.LevelStatsDBConnector.LevelStatsDBConnector(Context,String,String)",1,2,2
"org.andengine.util.levelstats.LevelStatsDBConnector.submitAsync(int,boolean,int)",1,1,1
"org.andengine.util.levelstats.LevelStatsDBConnector.submitAsync(int,boolean,int,Callback<Boolean>)",1,8,9
"org.andengine.util.math.MathUtils.arrayAverage(float[])",1,1,1
"org.andengine.util.math.MathUtils.arraySum(float[])",1,1,2
"org.andengine.util.math.MathUtils.arraySumInternal(int[])",1,1,2
"org.andengine.util.math.MathUtils.arraySumInternal(long[])",1,1,2
"org.andengine.util.math.MathUtils.arraySumInternal(long[],long)",1,1,2
"org.andengine.util.math.MathUtils.arraySumInto(long[],long[],long)",1,1,2
"org.andengine.util.math.MathUtils.atan2(float,float)",1,1,1
"org.andengine.util.math.MathUtils.bringToBounds(float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.bringToBounds(int,int,int)",1,1,1
"org.andengine.util.math.MathUtils.cross(float,float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.degToRad(float)",1,1,1
"org.andengine.util.math.MathUtils.distance(float,float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.dot(float,float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.isEven(int)",1,1,1
"org.andengine.util.math.MathUtils.isInBounds(float,float,float)",1,1,2
"org.andengine.util.math.MathUtils.isInBounds(int,int,int)",1,1,2
"org.andengine.util.math.MathUtils.isOdd(int)",1,1,1
"org.andengine.util.math.MathUtils.isPowerOfTwo(int)",1,1,2
"org.andengine.util.math.MathUtils.length(float,float)",1,1,1
"org.andengine.util.math.MathUtils.mix(float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.mix(int,int,float)",1,1,1
"org.andengine.util.math.MathUtils.nextPowerOfTwo(float)",1,1,1
"org.andengine.util.math.MathUtils.nextPowerOfTwo(int)",2,1,3
"org.andengine.util.math.MathUtils.radToDeg(float)",1,1,1
"org.andengine.util.math.MathUtils.random(float,float)",1,1,1
"org.andengine.util.math.MathUtils.random(int,int)",1,1,1
"org.andengine.util.math.MathUtils.randomSign()",2,1,2
"org.andengine.util.math.MathUtils.revertRotateAndScaleAroundCenter(float[],float,float,float,float,float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.revertRotateAroundCenter(float[],float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.revertScaleAroundCenter(float[],float,float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.rotateAndScaleAroundCenter(float[],float,float,float,float,float,float,float)",1,1,1
"org.andengine.util.math.MathUtils.rotateAroundCenter(float[],float,float,float)",1,2,3
"org.andengine.util.math.MathUtils.scaleAroundCenter(float[],float,float,float,float)",1,1,4
"org.andengine.util.math.MathUtils.signum(int)",3,1,3
"org.andengine.util.math.MathUtils.sum(int[])",1,1,2
"org.andengine.util.mime.MIMEType.MIMEType(String)",1,1,1
"org.andengine.util.mime.MIMEType.getTypeString()",1,1,1
"org.andengine.util.modifier.BaseDoubleValueChangeModifier.BaseDoubleValueChangeModifier(BaseDoubleValueChangeModifier<T>)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueChangeModifier.BaseDoubleValueChangeModifier(float,float,float)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueChangeModifier.BaseDoubleValueChangeModifier(float,float,float,IModifierListener<T>)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueChangeModifier.onChangeValue(float,T,float)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.BaseDoubleValueSpanModifier(BaseDoubleValueSpanModifier<T>)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.BaseDoubleValueSpanModifier(float,float,float,float,float)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.BaseDoubleValueSpanModifier(float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.BaseDoubleValueSpanModifier(float,float,float,float,float,IModifierListener<T>)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.BaseDoubleValueSpanModifier(float,float,float,float,float,IModifierListener<T>,IEaseFunction)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.getFromValue()",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.getFromValueA()",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.getFromValueB()",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.getToValue()",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.getToValueA()",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.getToValueB()",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.onSetInitialValue(T,float)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.onSetValue(T,float,float)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.reset(float,float,float)",1,1,1
"org.andengine.util.modifier.BaseDoubleValueSpanModifier.reset(float,float,float,float,float)",1,1,1
"org.andengine.util.modifier.BaseDurationModifier.BaseDurationModifier(BaseDurationModifier<T>)",1,1,1
"org.andengine.util.modifier.BaseDurationModifier.BaseDurationModifier(float)",1,1,1
"org.andengine.util.modifier.BaseDurationModifier.BaseDurationModifier(float,IModifierListener<T>)",1,1,1
"org.andengine.util.modifier.BaseDurationModifier.getDuration()",1,1,1
"org.andengine.util.modifier.BaseDurationModifier.getSecondsElapsed()",1,1,1
"org.andengine.util.modifier.BaseDurationModifier.onUpdate(float,T)",2,4,6
"org.andengine.util.modifier.BaseDurationModifier.reset()",1,1,1
"org.andengine.util.modifier.BaseModifier.BaseModifier()",1,1,1
"org.andengine.util.modifier.BaseModifier.BaseModifier(IModifierListener<T>)",1,1,1
"org.andengine.util.modifier.BaseModifier.addModifierListener(IModifierListener<T>)",1,2,2
"org.andengine.util.modifier.BaseModifier.assertNoNullModifier(IModifier<T>)",2,2,2
"org.andengine.util.modifier.BaseModifier.assertNoNullModifier(IModifier<T>...)",3,3,3
"org.andengine.util.modifier.BaseModifier.isAutoUnregisterWhenFinished()",1,1,1
"org.andengine.util.modifier.BaseModifier.isFinished()",1,1,1
"org.andengine.util.modifier.BaseModifier.onModifierFinished(T)",1,2,2
"org.andengine.util.modifier.BaseModifier.onModifierStarted(T)",1,2,2
"org.andengine.util.modifier.BaseModifier.removeModifierListener(IModifierListener<T>)",2,2,2
"org.andengine.util.modifier.BaseModifier.setAutoUnregisterWhenFinished(boolean)",1,1,1
"org.andengine.util.modifier.BaseQuadrupelValueSpanModifier.BaseQuadrupelValueSpanModifier(BaseQuadrupelValueSpanModifier<T>)",1,1,1
"org.andengine.util.modifier.BaseQuadrupelValueSpanModifier.BaseQuadrupelValueSpanModifier(float,float,float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.util.modifier.BaseQuadrupelValueSpanModifier.BaseQuadrupelValueSpanModifier(float,float,float,float,float,float,float,float,float,IModifierListener<T>,IEaseFunction)",1,1,1
"org.andengine.util.modifier.BaseQuadrupelValueSpanModifier.onSetInitialValues(T,float,float,float)",1,1,1
"org.andengine.util.modifier.BaseQuadrupelValueSpanModifier.onSetValues(T,float,float,float,float)",1,1,1
"org.andengine.util.modifier.BaseQuadrupelValueSpanModifier.reset(float,float,float,float,float,float,float)",1,1,1
"org.andengine.util.modifier.BaseQuadrupelValueSpanModifier.reset(float,float,float,float,float,float,float,float,float)",1,1,1
"org.andengine.util.modifier.BaseSingleValueChangeModifier.BaseSingleValueChangeModifier(BaseSingleValueChangeModifier<T>)",1,1,1
"org.andengine.util.modifier.BaseSingleValueChangeModifier.BaseSingleValueChangeModifier(float,float)",1,1,1
"org.andengine.util.modifier.BaseSingleValueChangeModifier.BaseSingleValueChangeModifier(float,float,IModifierListener<T>)",1,1,1
"org.andengine.util.modifier.BaseSingleValueChangeModifier.onManagedInitialize(T)",1,1,1
"org.andengine.util.modifier.BaseSingleValueChangeModifier.onManagedUpdate(float,T)",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.BaseSingleValueSpanModifier(BaseSingleValueSpanModifier<T>)",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.BaseSingleValueSpanModifier(float,float,float)",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.BaseSingleValueSpanModifier(float,float,float,IEaseFunction)",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.BaseSingleValueSpanModifier(float,float,float,IModifierListener<T>)",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.BaseSingleValueSpanModifier(float,float,float,IModifierListener<T>,IEaseFunction)",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.getFromValue()",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.getToValue()",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.onManagedInitialize(T)",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.onManagedUpdate(float,T)",1,1,1
"org.andengine.util.modifier.BaseSingleValueSpanModifier.reset(float,float,float)",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.BaseTripleValueSpanModifier(BaseTripleValueSpanModifier<T>)",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.BaseTripleValueSpanModifier(float,float,float,float,float,float,float,IEaseFunction)",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.BaseTripleValueSpanModifier(float,float,float,float,float,float,float,IModifierListener<T>,IEaseFunction)",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.getFromValueC()",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.getToValueC()",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.onSetInitialValues(T,float,float)",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.onSetValues(T,float,float,float)",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.reset(float,float,float,float,float)",1,1,1
"org.andengine.util.modifier.BaseTripleValueSpanModifier.reset(float,float,float,float,float,float,float)",1,1,1
"org.andengine.util.modifier.LoopModifier.LoopModifier(IModifier<T>)",1,1,1
"org.andengine.util.modifier.LoopModifier.LoopModifier(IModifier<T>,int)",1,1,1
"org.andengine.util.modifier.LoopModifier.LoopModifier(IModifier<T>,int,ILoopModifierListener<T>)",1,1,1
"org.andengine.util.modifier.LoopModifier.LoopModifier(IModifier<T>,int,ILoopModifierListener<T>,IModifierListener<T>)",1,2,2
"org.andengine.util.modifier.LoopModifier.LoopModifier(IModifier<T>,int,IModifierListener<T>)",1,1,1
"org.andengine.util.modifier.LoopModifier.LoopModifier(LoopModifier<T>)",1,1,1
"org.andengine.util.modifier.LoopModifier.deepCopy()",1,1,1
"org.andengine.util.modifier.LoopModifier.getDuration()",1,1,1
"org.andengine.util.modifier.LoopModifier.getLoopModifierListener()",1,1,1
"org.andengine.util.modifier.LoopModifier.getSecondsElapsed()",1,1,1
"org.andengine.util.modifier.LoopModifier.onModifierFinished(IModifier<T>,T)",1,4,4
"org.andengine.util.modifier.LoopModifier.onModifierStarted(IModifier<T>,T)",1,3,3
"org.andengine.util.modifier.LoopModifier.onUpdate(float,T)",2,3,4
"org.andengine.util.modifier.LoopModifier.reset()",1,1,1
"org.andengine.util.modifier.LoopModifier.setLoopModifierListener(ILoopModifierListener<T>)",1,1,1
"org.andengine.util.modifier.ModifierList.ModifierList(T)",1,1,1
"org.andengine.util.modifier.ModifierList.ModifierList(T,int)",1,1,1
"org.andengine.util.modifier.ModifierList.add(IModifier<T>)",2,2,2
"org.andengine.util.modifier.ModifierList.getTarget()",1,1,1
"org.andengine.util.modifier.ModifierList.onUpdate(float)",1,5,5
"org.andengine.util.modifier.ModifierList.reset()",1,2,2
"org.andengine.util.modifier.ParallelModifier.ParallelModifier(IModifier<T>...)",1,1,1
"org.andengine.util.modifier.ParallelModifier.ParallelModifier(IModifierListener<T>,IModifier<T>...)",2,1,2
"org.andengine.util.modifier.ParallelModifier.ParallelModifier(ParallelModifier<T>)",1,2,2
"org.andengine.util.modifier.ParallelModifier.deepCopy()",1,1,1
"org.andengine.util.modifier.ParallelModifier.getDuration()",1,1,1
"org.andengine.util.modifier.ParallelModifier.getSecondsElapsed()",1,1,1
"org.andengine.util.modifier.ParallelModifier.onModifierFinished(IModifier<T>,T)",1,1,1
"org.andengine.util.modifier.ParallelModifier.onModifierStarted(IModifier<T>,T)",1,1,1
"org.andengine.util.modifier.ParallelModifier.onUpdate(float,T)",2,4,5
"org.andengine.util.modifier.ParallelModifier.reset()",1,2,2
"org.andengine.util.modifier.SequenceModifier.SequenceModifier(IModifier<T>...)",1,1,1
"org.andengine.util.modifier.SequenceModifier.SequenceModifier(IModifierListener<T>,IModifier<T>...)",1,1,1
"org.andengine.util.modifier.SequenceModifier.SequenceModifier(ISubSequenceModifierListener<T>,IModifier<T>...)",1,1,1
"org.andengine.util.modifier.SequenceModifier.SequenceModifier(ISubSequenceModifierListener<T>,IModifierListener<T>,IModifier<T>...)",2,1,2
"org.andengine.util.modifier.SequenceModifier.SequenceModifier(SequenceModifier<T>)",1,2,2
"org.andengine.util.modifier.SequenceModifier.deepCopy()",1,1,1
"org.andengine.util.modifier.SequenceModifier.getDuration()",1,1,1
"org.andengine.util.modifier.SequenceModifier.getSecondsElapsed()",1,1,1
"org.andengine.util.modifier.SequenceModifier.getSubSequenceModifierListener()",1,1,1
"org.andengine.util.modifier.SequenceModifier.onModifierFinished(IModifier<T>,T)",1,3,3
"org.andengine.util.modifier.SequenceModifier.onModifierStarted(IModifier<T>,T)",1,3,3
"org.andengine.util.modifier.SequenceModifier.onUpdate(float,T)",2,3,4
"org.andengine.util.modifier.SequenceModifier.reset()",1,3,3
"org.andengine.util.modifier.SequenceModifier.setSubSequenceModifierListener(ISubSequenceModifierListener<T>)",1,1,1
"org.andengine.util.modifier.ease.EaseBackIn.EaseBackIn()",1,1,1
"org.andengine.util.modifier.ease.EaseBackIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseBackIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseBackIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseBackInOut.EaseBackInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseBackInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseBackInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseBackOut.EaseBackOut()",1,1,1
"org.andengine.util.modifier.ease.EaseBackOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseBackOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseBackOut.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseBounceIn.EaseBounceIn()",1,1,1
"org.andengine.util.modifier.ease.EaseBounceIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseBounceIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseBounceIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseBounceInOut.EaseBounceInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseBounceInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseBounceInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseBounceOut.EaseBounceOut()",1,1,1
"org.andengine.util.modifier.ease.EaseBounceOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseBounceOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseBounceOut.getValue(float)",4,1,4
"org.andengine.util.modifier.ease.EaseCircularIn.EaseCircularIn()",1,1,1
"org.andengine.util.modifier.ease.EaseCircularIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseCircularIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseCircularIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseCircularInOut.EaseCircularInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseCircularInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseCircularInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseCircularOut.EaseCircularOut()",1,1,1
"org.andengine.util.modifier.ease.EaseCircularOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseCircularOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseCircularOut.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseCubicIn.EaseCubicIn()",1,1,1
"org.andengine.util.modifier.ease.EaseCubicIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseCubicIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseCubicIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseCubicInOut.EaseCubicInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseCubicInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseCubicInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseCubicOut.EaseCubicOut()",1,1,1
"org.andengine.util.modifier.ease.EaseCubicOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseCubicOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseCubicOut.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseElasticIn.EaseElasticIn()",1,1,1
"org.andengine.util.modifier.ease.EaseElasticIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseElasticIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseElasticIn.getValue(float,float,float)",3,1,3
"org.andengine.util.modifier.ease.EaseElasticInOut.EaseElasticInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseElasticInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseElasticInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseElasticOut.EaseElasticOut()",1,1,1
"org.andengine.util.modifier.ease.EaseElasticOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseElasticOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseElasticOut.getValue(float,float,float)",3,1,3
"org.andengine.util.modifier.ease.EaseExponentialIn.EaseExponentialIn()",1,1,1
"org.andengine.util.modifier.ease.EaseExponentialIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseExponentialIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseExponentialIn.getValue(float)",1,2,2
"org.andengine.util.modifier.ease.EaseExponentialInOut.EaseExponentialInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseExponentialInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseExponentialInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseExponentialOut.EaseExponentialOut()",1,1,1
"org.andengine.util.modifier.ease.EaseExponentialOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseExponentialOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseExponentialOut.getValue(float)",1,2,2
"org.andengine.util.modifier.ease.EaseLinear.EaseLinear()",1,1,1
"org.andengine.util.modifier.ease.EaseLinear.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseLinear.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuadIn.EaseQuadIn()",1,1,1
"org.andengine.util.modifier.ease.EaseQuadIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuadIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuadIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuadInOut.EaseQuadInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseQuadInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuadInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseQuadOut.EaseQuadOut()",1,1,1
"org.andengine.util.modifier.ease.EaseQuadOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuadOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuadOut.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuartIn.EaseQuartIn()",1,1,1
"org.andengine.util.modifier.ease.EaseQuartIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuartIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuartIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuartInOut.EaseQuartInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseQuartInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuartInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseQuartOut.EaseQuartOut()",1,1,1
"org.andengine.util.modifier.ease.EaseQuartOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuartOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuartOut.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuintIn.EaseQuintIn()",1,1,1
"org.andengine.util.modifier.ease.EaseQuintIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuintIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuintIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuintInOut.EaseQuintInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseQuintInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuintInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseQuintOut.EaseQuintOut()",1,1,1
"org.andengine.util.modifier.ease.EaseQuintOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseQuintOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseQuintOut.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseSineIn.EaseSineIn()",1,1,1
"org.andengine.util.modifier.ease.EaseSineIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseSineIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseSineIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseSineInOut.EaseSineInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseSineInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseSineInOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseSineOut.EaseSineOut()",1,1,1
"org.andengine.util.modifier.ease.EaseSineOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseSineOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseSineOut.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseStrongIn.EaseStrongIn()",1,1,1
"org.andengine.util.modifier.ease.EaseStrongIn.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseStrongIn.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseStrongIn.getValue(float)",1,1,1
"org.andengine.util.modifier.ease.EaseStrongInOut.EaseStrongInOut()",1,1,1
"org.andengine.util.modifier.ease.EaseStrongInOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseStrongInOut.getPercentage(float,float)",2,2,2
"org.andengine.util.modifier.ease.EaseStrongOut.EaseStrongOut()",1,1,1
"org.andengine.util.modifier.ease.EaseStrongOut.getInstance()",1,1,2
"org.andengine.util.modifier.ease.EaseStrongOut.getPercentage(float,float)",1,1,1
"org.andengine.util.modifier.ease.EaseStrongOut.getValue(float)",1,1,1
"org.andengine.util.modifier.util.ModifierUtils.getSequenceDurationOfModifier(IModifier<?>[])",1,2,2
"org.andengine.util.preferences.SimplePreferences.getAccessCount(Context,String)",1,1,1
"org.andengine.util.preferences.SimplePreferences.getEditorInstance(Context)",1,2,2
"org.andengine.util.preferences.SimplePreferences.getInstance(Context)",1,2,2
"org.andengine.util.preferences.SimplePreferences.incrementAccessCount(Context,String)",1,1,1
"org.andengine.util.preferences.SimplePreferences.incrementAccessCount(Context,String,int)",1,1,1
"org.andengine.util.progress.ProgressMonitor.ProgressMonitor()",1,1,1
"org.andengine.util.progress.ProgressMonitor.ProgressMonitor(IProgressListener)",1,1,1
"org.andengine.util.progress.ProgressMonitor.addProgressListener(IProgressListener)",1,1,1
"org.andengine.util.progress.ProgressMonitor.onProgressChanged(int)",1,2,2
"org.andengine.util.progress.ProgressMonitor.registerChildProgressMonitor(ProgressMonitor,int,int)",1,1,1
"org.andengine.util.progress.ProgressMonitor.removeProgressListener(IProgressListener)",1,1,1
"org.andengine.util.progress.ProgressMonitor.unregisterChildProgressMonitor(ProgressMonitor)",1,1,1
"org.andengine.util.system.CPUUsage.CPUUsage()",1,1,1
"org.andengine.util.system.CPUUsage.getUsage()",1,1,1
"org.andengine.util.system.CPUUsage.update()",1,2,2
"org.andengine.util.system.SystemUtils.SystemUtilsException.SystemUtilsException()",1,1,1
"org.andengine.util.system.SystemUtils.SystemUtilsException.SystemUtilsException(Throwable)",1,1,1
"org.andengine.util.system.SystemUtils.getApkFilePath(Context)",1,1,1
"org.andengine.util.system.SystemUtils.getCPUBogoMips()",2,2,3
"org.andengine.util.system.SystemUtils.getCPUFrequencyCurrent()",1,1,1
"org.andengine.util.system.SystemUtils.getCPUFrequencyMax()",1,1,1
"org.andengine.util.system.SystemUtils.getCPUFrequencyMaxScaling()",1,1,1
"org.andengine.util.system.SystemUtils.getCPUFrequencyMin()",1,1,1
"org.andengine.util.system.SystemUtils.getCPUFrequencyMinScaling()",1,1,1
"org.andengine.util.system.SystemUtils.getMemoryFree()",2,2,3
"org.andengine.util.system.SystemUtils.getMemoryTotal()",2,2,3
"org.andengine.util.system.SystemUtils.getPackageInfo(Context)",1,2,2
"org.andengine.util.system.SystemUtils.getPackageName(Context)",1,1,1
"org.andengine.util.system.SystemUtils.getPackageVersionCode(Context)",1,1,1
"org.andengine.util.system.SystemUtils.getPackageVersionName(Context)",1,1,1
"org.andengine.util.system.SystemUtils.hasSystemFeature(Context,String)",1,2,3
"org.andengine.util.system.SystemUtils.isAndroidVersion(int,int)",1,1,2
"org.andengine.util.system.SystemUtils.isAndroidVersionOrHigher(int)",1,1,1
"org.andengine.util.system.SystemUtils.isAndroidVersionOrLower(int)",1,1,1
"org.andengine.util.system.SystemUtils.isGoogleTV(Context)",1,1,1
"org.andengine.util.system.SystemUtils.matchSystemFile(String,String,int)",2,2,3
"org.andengine.util.system.SystemUtils.readSystemFileAsInt(String)",1,1,3
"org.andengine.util.texturepack.TexturePack.TexturePack(ITexture,TexturePackTextureRegionLibrary)",1,1,1
"org.andengine.util.texturepack.TexturePack.getTexture()",1,1,1
"org.andengine.util.texturepack.TexturePack.getTexturePackTextureRegionLibrary()",1,1,1
"org.andengine.util.texturepack.TexturePack.loadTexture()",1,1,1
"org.andengine.util.texturepack.TexturePack.unloadTexture()",1,1,1
"org.andengine.util.texturepack.TexturePackLibrary.getTexturePackTextureRegion(String)",1,1,1
"org.andengine.util.texturepack.TexturePackLibrary.put(String,TexturePack)",1,1,1
"org.andengine.util.texturepack.TexturePackLoader.TexturePackLoader(AssetManager,TextureManager)",1,1,1
"org.andengine.util.texturepack.TexturePackLoader.load(InputStream,String)",1,1,4
"org.andengine.util.texturepack.TexturePackLoader.loadFromAsset(String,String)",1,2,2
"org.andengine.util.texturepack.TexturePackParser.TexturePackParser(AssetManager,String,TextureManager)",1,1,1
"org.andengine.util.texturepack.TexturePackParser.getTexturePack()",1,1,1
"org.andengine.util.texturepack.TexturePackParser.onGetInputStream(String)",1,1,1
"org.andengine.util.texturepack.TexturePackParser.parseMagFilter(Attributes)",3,2,3
"org.andengine.util.texturepack.TexturePackParser.parseMinFilter(Attributes)",7,6,7
"org.andengine.util.texturepack.TexturePackParser.parsePixelFormat(Attributes)",1,1,1
"org.andengine.util.texturepack.TexturePackParser.parsePremultiplyalpha(Attributes)",1,1,1
"org.andengine.util.texturepack.TexturePackParser.parseTexture(Attributes)",6,6,10
"org.andengine.util.texturepack.TexturePackParser.parseTextureOptions(Attributes)",1,1,1
"org.andengine.util.texturepack.TexturePackParser.parseWrap(Attributes,String)",4,4,5
"org.andengine.util.texturepack.TexturePackParser.parseWrapS(Attributes)",1,1,1
"org.andengine.util.texturepack.TexturePackParser.parseWrapT(Attributes)",1,1,1
"org.andengine.util.texturepack.TexturePackParser.startElement(String,String,String,Attributes)",3,3,3
"org.andengine.util.texturepack.TexturePackTextureRegion.TexturePackTextureRegion(ITexture,int,int,int,int,int,String,boolean,boolean,int,int,int,int)",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegion.getID()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegion.getSource()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegion.getSourceHeight()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegion.getSourceWidth()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegion.getSourceX()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegion.getSourceY()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegion.isTrimmed()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.TexturePackTextureRegionLibrary(int)",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.get(String)",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.get(String,boolean)",3,3,3
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.get(int)",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.getIDMapping()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.getSourceMapping()",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.put(TexturePackTextureRegion)",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.remove(int)",1,1,1
"org.andengine.util.texturepack.TexturePackTextureRegionLibrary.throwOnCollision(TexturePackTextureRegion)",3,3,3
"org.andengine.util.texturepack.exception.TexturePackParseException.TexturePackParseException()",1,1,1
"org.andengine.util.texturepack.exception.TexturePackParseException.TexturePackParseException(Exception)",1,1,1
"org.andengine.util.texturepack.exception.TexturePackParseException.TexturePackParseException(String)",1,1,1
"org.andengine.util.texturepack.exception.TexturePackParseException.TexturePackParseException(String,Exception)",1,1,1

