Method,ev(G),iv(G),v(G)
"AddEventRequest.AddEventRequest(int,String,String,String)",1,1,1
"AddEventRequest.getDate()",1,1,1
"AddEventRequest.getEventId()",1,1,1
"AddEventRequest.getTitle()",1,1,1
"AddEventRequest.setDate(String)",1,1,1
"AddEventRequest.setEventId(String)",1,1,1
"AddEventRequest.setTitle(String)",1,1,1
"AddEventRequest.submit(GCalendar)",1,1,1
"AddEventRequest.toString()",1,1,1
"CalEvent.CalEvent(String,String,String,String,String)",1,1,1
"CalEvent.getDate()",1,1,1
"CalEvent.getDay()",1,1,1
"CalEvent.getEditURL()",1,1,1
"CalEvent.getId()",1,1,1
"CalEvent.getJSONObject()",1,1,1
"CalEvent.getTitle()",1,1,1
"CalEvent.getVersionId()",1,1,1
"CalEvent.setDate(String)",1,1,1
"CalEvent.setId(String)",1,1,1
"CalEvent.setTitle(String)",1,1,1
"CalEvent.toString()",1,1,1
"CalendarController.addEvent(String,String,String)",1,5,5
"CalendarController.clearCalendar()",1,1,1
"CalendarController.deleteEvent(String)",3,5,6
"CalendarController.destroy()",1,1,1
"CalendarController.getConflicts()",3,3,3
"CalendarController.goOffline()",1,1,1
"CalendarController.goOnline()",1,2,2
"CalendarController.init()",1,2,2
"CalendarController.isOnline()",1,1,1
"CalendarController.log(String)",1,1,1
"CalendarController.logSql()",1,1,1
"CalendarController.login(String,String,String,String,String,String,boolean)",1,1,1
"CalendarController.refresh()",1,5,5
"CalendarController.start()",1,1,1
"CalendarController.startConsole(String)",1,1,1
"CalendarController.stop()",1,1,1
"CalendarController.updateEvent(String,String)",1,5,5
"DatabaseManager.beginTransaction()",2,1,2
"DatabaseManager.clearTables()",1,1,1
"DatabaseManager.commitTransaction()",2,1,2
"DatabaseManager.createTables()",1,1,1
"DatabaseManager.dropTables()",3,3,5
"DatabaseManager.executeQueryNoParams(Connection,String)",1,1,1
"DatabaseManager.executeUpdate(String)",1,1,1
"DatabaseManager.getConnection()",2,2,2
"DatabaseManager.initDataSource(String,String,String)",1,1,1
"DatabaseManager.initDatabase(String,String,String,boolean)",1,3,3
"DatabaseManager.logSql()",1,1,1
"DatabaseManager.releaseConnection(Connection)",1,2,2
"DatabaseManager.rollbackTransaction()",2,1,2
"DatabaseManager.tableDoesntExist(String)",1,2,2
"DatabaseManager.tableExists(String)",1,1,1
"DeleteEventRequest.DeleteEventRequest(int,String,String)",1,1,1
"DeleteEventRequest.getEditURL()",1,1,1
"DeleteEventRequest.getEventId()",1,1,1
"DeleteEventRequest.setEditURL(String)",1,1,1
"DeleteEventRequest.setEventId(String)",1,1,1
"DeleteEventRequest.submit(GCalendar)",1,1,1
"DeleteEventRequest.toString()",1,1,1
"EventManager.addEvent(CalEvent)",1,3,3
"EventManager.deleteEvent(String)",1,1,1
"EventManager.getEvent(String)",2,1,2
"EventManager.getEvents()",1,2,2
"EventManager.refresh(Collection<CalEvent>)",1,2,2
"EventManager.updateEvent(CalEvent)",2,4,4
"EventManager.updateEventId(String,String)",1,1,1
"GCalendar.GCalendar(String,String,String,String,String,String)",1,2,2
"GCalendar.addEvent(String,String)",1,2,2
"GCalendar.clearCalendar()",1,2,2
"GCalendar.createDerbyCalEvent(EventEntry)",1,1,1
"GCalendar.createEventEntry(CalEvent)",1,1,1
"GCalendar.deleteEvent(String)",1,2,2
"GCalendar.getEvents()",1,3,3
"GCalendar.getNextDay(String)",1,1,1
"GCalendar.handleException(Exception,String,EventEntry)",2,7,8
"GCalendar.parseId(String)",2,1,2
"GCalendar.updateEvent(CalEvent)",1,2,2
"GCalendarRequest.GCalendarRequest(int)",1,1,1
"GCalendarRequest.getId()",1,1,1
"GCalendarRequest.setId(int)",1,1,1
"NetworkDownException.NetworkDownException(String,Throwable)",1,1,1
"NetworkDownException.NetworkDownException(Throwable)",1,1,1
"RequestManager.createRequestFromRow(ResultSet)",2,2,5
"RequestManager.deleteRequest(GCalendarRequest)",1,1,1
"RequestManager.deleteRequestsForEvent(String)",1,1,1
"RequestManager.findAddRequest(String)",2,2,2
"RequestManager.getConflicts()",1,1,1
"RequestManager.getRequests()",1,2,2
"RequestManager.storeAddEvent(String,String,String)",1,1,1
"RequestManager.storeDeleteEvent(String,String)",1,2,2
"RequestManager.storeUpdateEvent(CalEvent)",1,2,2
"RequestManager.submitRequests(GCalendar)",2,3,5
"RequestManager.updateAddRequest(int,String)",1,1,1
"SimpleApp.go(String[])",1,19,19
"SimpleApp.loadDriver()",1,4,4
"SimpleApp.main(String[])",1,1,1
"SimpleApp.parseArguments(String[])",1,3,4
"SimpleApp.printSQLException(SQLException)",1,2,2
"SimpleApp.reportFailure(String)",1,1,1
"SimpleMobileApp.haveClass(String)",1,1,2
"SimpleMobileApp.main(String[])",1,2,2
"SimpleMobileApp.printSQLException(SQLException)",1,2,2
"SimpleMobileApp.runDemo()",1,19,21
"SimpleMobileApp.vmSupportsJSR169()",2,1,2
"SimpleNetworkClientSample.getClientDataSource(String,String,String)",1,4,4
"SimpleNetworkClientSample.getClientDataSourceConn(DataSource)",1,1,1
"SimpleNetworkClientSample.getClientDriverManagerConnection()",1,1,1
"SimpleNetworkClientSample.loadDriver()",1,1,1
"SimpleNetworkClientSample.main(String[])",1,1,1
"SimpleNetworkClientSample.parseArguments(String[])",4,3,4
"SimpleNetworkClientSample.startSample(String[])",1,4,4
"SimpleNetworkClientSample.test(Connection)",1,5,5
"SimpleNetworkServerSample.getEmbeddedConnection(String,String)",1,1,1
"SimpleNetworkServerSample.ijUsage()",1,1,1
"SimpleNetworkServerSample.main(String[])",1,4,5
"SimpleNetworkServerSample.startNetworkServer()",1,1,1
"SimpleNetworkServerSample.startWithProperty()",1,1,1
"SimpleNetworkServerSample.test(Connection)",1,5,5
"SimpleNetworkServerSample.waitForExit()",1,1,1
"SimpleNetworkServerSample.waitForStart()",3,4,4
"UpdateEventRequest.UpdateEventRequest(int,String,String)",1,1,1
"UpdateEventRequest.getEventId()",1,1,1
"UpdateEventRequest.getTitle()",1,1,1
"UpdateEventRequest.setEventId(String)",1,1,1
"UpdateEventRequest.setTitle(String)",1,1,1
"UpdateEventRequest.submit(GCalendar)",2,2,2
"UpdateEventRequest.toString()",1,1,1
"WwdClientExample.SQLExceptionPrint(SQLException)",1,2,2
"WwdClientExample.errorPrint(Throwable)",1,2,2
"WwdClientExample.main(String[])",1,10,11
"WwdEmbedded.SQLExceptionPrint(SQLException)",1,2,2
"WwdEmbedded.errorPrint(Throwable)",1,2,2
"WwdEmbedded.main(String[])",1,10,11
"WwdUtils.getWishItem()",1,4,4
"WwdUtils.main(String[])",1,3,3
"WwdUtils.wwdChk4Table(Connection)",3,5,5
"nserverdemo.NetworkServerUtil.NetworkServerUtil(int,PrintWriter)",1,2,2
"nserverdemo.NetworkServerUtil.shutdown()",1,2,2
"nserverdemo.NetworkServerUtil.start()",1,2,2
"nserverdemo.NetworkServerUtil.testForConnection()",1,1,1
"nserverdemo.NetworkServerUtil.trace(boolean)",1,2,2
"nserverdemo.NsSample.main(String[])",1,1,1
"nserverdemo.NsSample.parseArguments(String[])",4,3,4
"nserverdemo.NsSample.startSample(String[])",1,10,11
"nserverdemo.NsSampleClientThread.NsSampleClientThread(int,String,Properties,PrintWriter)",1,1,1
"nserverdemo.NsSampleClientThread.run()",1,1,1
"nserverdemo.NsSampleWork.NsSampleWork(int,String,Properties,PrintWriter)",1,1,1
"nserverdemo.NsSampleWork.checkAndCreateSchema(Connection,PrintWriter)",2,8,8
"nserverdemo.NsSampleWork.cleanup()",1,7,7
"nserverdemo.NsSampleWork.closeConnection(Connection)",1,3,3
"nserverdemo.NsSampleWork.deleteRow(PreparedStatement,long)",1,2,2
"nserverdemo.NsSampleWork.doIUDOperation()",2,9,9
"nserverdemo.NsSampleWork.doSelectOperation(long)",1,5,5
"nserverdemo.NsSampleWork.doWork()",3,8,9
"nserverdemo.NsSampleWork.getConnection(String,Properties)",1,2,2
"nserverdemo.NsSampleWork.insertRow(PreparedStatement)",1,2,2
"nserverdemo.NsSampleWork.loadSchema(Connection,int,PrintWriter)",1,6,6
"nserverdemo.NsSampleWork.prepareStmts(Connection)",1,2,2
"nserverdemo.NsSampleWork.setIsolationLevel(Connection,int)",1,2,2
"nserverdemo.NsSampleWork.updateRow(PreparedStatement,long)",1,2,2
"null.compare(Object,Object)",3,1,3
"null.initialValue()",1,1,1
"null.run()",1,1,1
"org.apache.derby.PackagePrivateTestSuite.PackagePrivateTestSuite(String)",1,1,1
"org.apache.derby.PackagePrivateTestSuite.suite()",1,1,1
"org.apache.derby.authentication.SystemPrincipal.SystemPrincipal(String)",3,1,3
"org.apache.derby.authentication.SystemPrincipal.equals(Object)",3,1,3
"org.apache.derby.authentication.SystemPrincipal.getName()",1,1,1
"org.apache.derby.authentication.SystemPrincipal.hashCode()",1,1,1
"org.apache.derby.authentication.SystemPrincipal.toString()",1,1,1
"org.apache.derby.catalog.GetProcedureColumns.GetProcedureColumns(AliasInfo,String)",3,4,5
"org.apache.derby.catalog.GetProcedureColumns.close()",1,1,1
"org.apache.derby.catalog.GetProcedureColumns.getInt(int)",10,7,12
"org.apache.derby.catalog.GetProcedureColumns.getMetaData()",1,1,1
"org.apache.derby.catalog.GetProcedureColumns.getShort(int)",11,4,13
"org.apache.derby.catalog.GetProcedureColumns.getString(int)",5,3,5
"org.apache.derby.catalog.GetProcedureColumns.next()",2,4,5
"org.apache.derby.catalog.GetProcedureColumns.translate(int)",8,2,8
"org.apache.derby.catalog.SystemProcedures.COSH(double)",1,1,1
"org.apache.derby.catalog.SystemProcedures.COT(double)",1,1,1
"org.apache.derby.catalog.SystemProcedures.INSTALL_JAR(String,String,int)",1,3,3
"org.apache.derby.catalog.SystemProcedures.LOG10(double)",1,1,1
"org.apache.derby.catalog.SystemProcedures.METADATA(ResultSet[])",1,1,1
"org.apache.derby.catalog.SystemProcedures.PI()",1,1,1
"org.apache.derby.catalog.SystemProcedures.RAND(int)",1,1,1
"org.apache.derby.catalog.SystemProcedures.REMOVE_JAR(String,int)",1,3,3
"org.apache.derby.catalog.SystemProcedures.REPLACE_JAR(String,String)",1,3,3
"org.apache.derby.catalog.SystemProcedures.SIGN(double)",1,1,3
"org.apache.derby.catalog.SystemProcedures.SINH(double)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SQLCAMESSAGE(int,short,String,String,int,int,int,int,int,int,String,String,String,String,String[],int[])",3,6,9
"org.apache.derby.catalog.SystemProcedures.SQLCOLPRIVILEGES(String,String,String,String,String,ResultSet[])",1,1,1
"org.apache.derby.catalog.SystemProcedures.SQLCOLUMNS(String,String,String,String,String,ResultSet[])",1,2,2
"org.apache.derby.catalog.SystemProcedures.SQLFOREIGNKEYS(String,String,String,String,String,String,String,ResultSet[])",1,6,6
"org.apache.derby.catalog.SystemProcedures.SQLFUNCTIONPARAMS(String,String,String,String,String,ResultSet[])",1,1,1
"org.apache.derby.catalog.SystemProcedures.SQLFUNCTIONS(String,String,String,String,ResultSet[])",1,1,1
"org.apache.derby.catalog.SystemProcedures.SQLGETTYPEINFO(short,String,ResultSet[])",1,2,2
"org.apache.derby.catalog.SystemProcedures.SQLPRIMARYKEYS(String,String,String,String,ResultSet[])",1,1,1
"org.apache.derby.catalog.SystemProcedures.SQLPROCEDURECOLS(String,String,String,String,String,ResultSet[])",1,2,2
"org.apache.derby.catalog.SystemProcedures.SQLPROCEDURES(String,String,String,String,ResultSet[])",1,2,2
"org.apache.derby.catalog.SystemProcedures.SQLSPECIALCOLUMNS(short,String,String,String,short,short,String,ResultSet[])",1,4,5
"org.apache.derby.catalog.SystemProcedures.SQLSTATISTICS(String,String,String,short,short,String,ResultSet[])",1,2,4
"org.apache.derby.catalog.SystemProcedures.SQLTABLEPRIVILEGES(String,String,String,String,ResultSet[])",1,1,1
"org.apache.derby.catalog.SystemProcedures.SQLTABLES(String,String,String,String,String,ResultSet[])",6,10,10
"org.apache.derby.catalog.SystemProcedures.SQLUDTS(String,String,String,String,String,ResultSet[])",2,4,6
"org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE(String)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE(String,short)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE_AND_ENABLE_LOG_ARCHIVE_MODE_NOWAIT(String,short)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_BACKUP_DATABASE_NOWAIT(String)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_BULK_INSERT(String,String,String,String)",1,2,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_CHECKPOINT_DATABASE()",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_CHECK_TABLE(String,String)",1,1,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_COMPRESS_TABLE(String,String,short)",1,1,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_DISABLE_LOG_ARCHIVE_MODE(short)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_EMPTY_STATEMENT_CACHE()",1,2,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_EXPORT_QUERY(String,String,String,String,String)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_EXPORT_QUERY_LOBS_TO_EXTFILE(String,String,String,String,String,String)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_EXPORT_TABLE(String,String,String,String,String,String)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE(String,String,String,String,String,String,String)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_FREEZE_DATABASE()",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_GET_DATABASE_PROPERTY(String)",1,2,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_GET_RUNTIMESTATISTICS()",2,1,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_GET_USER_ACCESS(String)",4,4,6
"org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_DATA(String,String,String,String,String,String,String,String,short)",1,2,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_DATA_LOBS_FROM_EXTFILE(String,String,String,String,String,String,String,String,short)",1,2,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_TABLE(String,String,String,String,String,String,short)",1,2,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE(String,String,String,String,String,String,short)",1,2,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_INPLACE_COMPRESS_TABLE(String,String,short,short,short)",2,3,7
"org.apache.derby.catalog.SystemProcedures.SYSCS_RELOAD_SECURITY_POLICY()",2,2,3
"org.apache.derby.catalog.SystemProcedures.SYSCS_SET_DATABASE_PROPERTY(String,String)",1,1,1
"org.apache.derby.catalog.SystemProcedures.SYSCS_SET_RUNTIMESTATISTICS(short)",1,1,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_SET_STATISTICS_TIMING(short)",1,1,2
"org.apache.derby.catalog.SystemProcedures.SYSCS_SET_USER_ACCESS(String,String)",5,7,7
"org.apache.derby.catalog.SystemProcedures.SYSCS_UNFREEZE_DATABASE()",1,1,1
"org.apache.derby.catalog.SystemProcedures.TANH(double)",1,1,1
"org.apache.derby.catalog.SystemProcedures.checkJarSQLName(String)",2,3,3
"org.apache.derby.catalog.SystemProcedures.getDMD()",1,1,1
"org.apache.derby.catalog.SystemProcedures.getDefaultConn()",3,2,3
"org.apache.derby.catalog.SystemProcedures.getOption(String,String)",5,2,5
"org.apache.derby.catalog.SystemProcedures.isForODBC(String)",1,2,2
"org.apache.derby.catalog.SystemProcedures.removeFromAccessList(String,String)",1,2,2
"org.apache.derby.catalog.TriggerNewTransitionRows.TriggerNewTransitionRows()",3,1,3
"org.apache.derby.catalog.TriggerNewTransitionRows.close()",1,1,1
"org.apache.derby.catalog.TriggerNewTransitionRows.executeQuery()",1,1,1
"org.apache.derby.catalog.TriggerNewTransitionRows.getMetaData()",1,1,1
"org.apache.derby.catalog.TriggerNewTransitionRows.getResultSetConcurrency()",1,1,1
"org.apache.derby.catalog.TriggerOldTransitionRows.TriggerOldTransitionRows()",3,1,3
"org.apache.derby.catalog.TriggerOldTransitionRows.close()",1,1,1
"org.apache.derby.catalog.TriggerOldTransitionRows.executeQuery()",1,1,1
"org.apache.derby.catalog.TriggerOldTransitionRows.getResultSetConcurrency()",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.BaseTypeIdImpl()",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.BaseTypeIdImpl(String)",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.BaseTypeIdImpl(int)",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.equals(Object)",2,2,2
"org.apache.derby.catalog.types.BaseTypeIdImpl.getJDBCTypeId()",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.getSQLTypeName()",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.hashCode()",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.readExternal(ObjectInput)",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.setTypeIdSpecificInstanceVariables()",2,3,24
"org.apache.derby.catalog.types.BaseTypeIdImpl.toParsableString(TypeDescriptor)",2,2,4
"org.apache.derby.catalog.types.BaseTypeIdImpl.toString()",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.userType()",1,1,1
"org.apache.derby.catalog.types.BaseTypeIdImpl.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.catalog.types.DecimalTypeIdImpl.DecimalTypeIdImpl(boolean)",1,2,2
"org.apache.derby.catalog.types.DecimalTypeIdImpl.readExternal(ObjectInput)",1,2,2
"org.apache.derby.catalog.types.DecimalTypeIdImpl.setNumericType()",1,1,1
"org.apache.derby.catalog.types.DecimalTypeIdImpl.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.DefaultInfoImpl()",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.DefaultInfoImpl(boolean,String,DataValueDescriptor)",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.calcType(boolean)",1,1,2
"org.apache.derby.catalog.types.DefaultInfoImpl.getDefaultText()",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.getDefaultValue()",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.isDefaultValueAutoinc()",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.readExternal(ObjectInput)",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.setDefaultValue(DataValueDescriptor)",1,1,1
"org.apache.derby.catalog.types.DefaultInfoImpl.toString()",2,1,2
"org.apache.derby.catalog.types.DefaultInfoImpl.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.IndexDescriptorImpl()",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.IndexDescriptorImpl(String,boolean,boolean,int[],boolean[],int)",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.baseColumnPositions()",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.equals(Object)",5,6,10
"org.apache.derby.catalog.types.IndexDescriptorImpl.getKeyColumnPosition(int)",3,1,3
"org.apache.derby.catalog.types.IndexDescriptorImpl.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.hashCode()",1,1,3
"org.apache.derby.catalog.types.IndexDescriptorImpl.indexType()",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.isAscending()",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.isAscending(Integer)",2,1,3
"org.apache.derby.catalog.types.IndexDescriptorImpl.isDescending(Integer)",2,1,3
"org.apache.derby.catalog.types.IndexDescriptorImpl.isUnique()",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.isUniqueWithDuplicateNulls()",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.numberOfOrderedColumns()",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.readExternal(ObjectInput)",1,3,3
"org.apache.derby.catalog.types.IndexDescriptorImpl.setBaseColumnPositions(int[])",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.setIsAscending(boolean[])",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.setNumberOfOrderedColumns(int)",1,1,1
"org.apache.derby.catalog.types.IndexDescriptorImpl.toString()",1,6,6
"org.apache.derby.catalog.types.IndexDescriptorImpl.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.catalog.types.MethodAliasInfo.MethodAliasInfo()",1,1,1
"org.apache.derby.catalog.types.MethodAliasInfo.MethodAliasInfo(String)",1,1,1
"org.apache.derby.catalog.types.MethodAliasInfo.getMethodName()",1,1,1
"org.apache.derby.catalog.types.MethodAliasInfo.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.MethodAliasInfo.isTableFunction()",1,1,1
"org.apache.derby.catalog.types.MethodAliasInfo.readExternal(ObjectInput)",1,1,1
"org.apache.derby.catalog.types.MethodAliasInfo.toString()",1,1,1
"org.apache.derby.catalog.types.MethodAliasInfo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.catalog.types.OldRoutineType.getCatalogType()",1,1,1
"org.apache.derby.catalog.types.OldRoutineType.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.OldRoutineType.readExternal(ObjectInput)",1,1,1
"org.apache.derby.catalog.types.OldRoutineType.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl.ReferencedColumnsDescriptorImpl()",1,1,1
"org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl.ReferencedColumnsDescriptorImpl(int[])",1,1,1
"org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl.getReferencedColumnPositions()",1,1,1
"org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl.readExternal(ObjectInput)",1,2,2
"org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl.toString()",1,3,3
"org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.catalog.types.RoutineAliasInfo.RoutineAliasInfo()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.RoutineAliasInfo(String,int,String[],TypeDescriptor[],int[],int,short,short)",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.RoutineAliasInfo(String,int,String[],TypeDescriptor[],int[],int,short,short,boolean,TypeDescriptor)",1,11,22
"org.apache.derby.catalog.types.RoutineAliasInfo.calledOnNullInput()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getMaxDynamicResultSets()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getParameterCount()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getParameterModes()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getParameterNames()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getParameterStyle()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getParameterTypes()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getReturnType()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getSQLAllowed()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.getStoredType(Object)",2,2,2
"org.apache.derby.catalog.types.RoutineAliasInfo.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.RoutineAliasInfo.isTableFunction()",2,2,2
"org.apache.derby.catalog.types.RoutineAliasInfo.parameterMode(int)",5,2,5
"org.apache.derby.catalog.types.RoutineAliasInfo.readExternal(ObjectInput)",1,3,3
"org.apache.derby.catalog.types.RoutineAliasInfo.setCollationTypeForAllStringTypes(int)",1,4,4
"org.apache.derby.catalog.types.RoutineAliasInfo.toString()",2,8,11
"org.apache.derby.catalog.types.RoutineAliasInfo.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.catalog.types.RowMultiSetImpl.RowMultiSetImpl()",1,1,1
"org.apache.derby.catalog.types.RowMultiSetImpl.RowMultiSetImpl(String[],TypeDescriptor[])",2,1,4
"org.apache.derby.catalog.types.RowMultiSetImpl.getColumnNames()",1,1,1
"org.apache.derby.catalog.types.RowMultiSetImpl.getJDBCTypeId()",1,1,1
"org.apache.derby.catalog.types.RowMultiSetImpl.getSQLTypeName()",1,3,3
"org.apache.derby.catalog.types.RowMultiSetImpl.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.RowMultiSetImpl.getTypes()",1,1,1
"org.apache.derby.catalog.types.RowMultiSetImpl.readExternal(ObjectInput)",1,3,3
"org.apache.derby.catalog.types.RowMultiSetImpl.writeExternal(ObjectOutput)",1,3,3
"org.apache.derby.catalog.types.StatisticsImpl.StatisticsImpl()",1,1,1
"org.apache.derby.catalog.types.StatisticsImpl.StatisticsImpl(long,long)",1,1,1
"org.apache.derby.catalog.types.StatisticsImpl.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.StatisticsImpl.readExternal(ObjectInput)",1,1,1
"org.apache.derby.catalog.types.StatisticsImpl.selectivity(Object[])",2,1,2
"org.apache.derby.catalog.types.StatisticsImpl.toString()",1,1,1
"org.apache.derby.catalog.types.StatisticsImpl.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.SynonymAliasInfo()",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.SynonymAliasInfo(String,String)",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.getMethodName()",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.getSynonymSchema()",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.getSynonymTable()",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.isTableFunction()",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.readExternal(ObjectInput)",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.toString()",1,1,1
"org.apache.derby.catalog.types.SynonymAliasInfo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.TypeDescriptorImpl()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.TypeDescriptorImpl(BaseTypeIdImpl,boolean,int)",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.TypeDescriptorImpl(BaseTypeIdImpl,int,int,boolean,int)",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.TypeDescriptorImpl(BaseTypeIdImpl,int,int,boolean,int,int)",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.TypeDescriptorImpl(TypeDescriptorImpl,boolean,int)",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.TypeDescriptorImpl(TypeDescriptorImpl,int,int,boolean,int)",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.TypeDescriptorImpl(TypeDescriptorImpl,int,int,boolean,int,int)",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.equals(Object)",5,7,9
"org.apache.derby.catalog.types.TypeDescriptorImpl.getCollationType()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.getJDBCTypeId()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.getMaximumWidth()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.getMaximumWidthInBytes()",9,2,10
"org.apache.derby.catalog.types.TypeDescriptorImpl.getPrecision()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.getRowColumnNames()",2,1,2
"org.apache.derby.catalog.types.TypeDescriptorImpl.getRowTypes()",2,1,2
"org.apache.derby.catalog.types.TypeDescriptorImpl.getSQLstring()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.getScale()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.getTypeId()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.getTypeName()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.isNullable()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.isRowMultiSet()",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.isStringType()",3,2,3
"org.apache.derby.catalog.types.TypeDescriptorImpl.readExternal(ObjectInput)",2,2,3
"org.apache.derby.catalog.types.TypeDescriptorImpl.setCollationType(int)",1,1,1
"org.apache.derby.catalog.types.TypeDescriptorImpl.toString()",2,1,2
"org.apache.derby.catalog.types.TypeDescriptorImpl.writeExternal(ObjectOutput)",2,2,3
"org.apache.derby.catalog.types.TypesImplInstanceGetter.getNewInstance()",5,2,5
"org.apache.derby.catalog.types.UserDefinedTypeIdImpl.UserDefinedTypeIdImpl()",1,1,1
"org.apache.derby.catalog.types.UserDefinedTypeIdImpl.UserDefinedTypeIdImpl(String)",1,1,1
"org.apache.derby.catalog.types.UserDefinedTypeIdImpl.getClassName()",1,1,1
"org.apache.derby.catalog.types.UserDefinedTypeIdImpl.getTypeFormatId()",1,1,1
"org.apache.derby.catalog.types.UserDefinedTypeIdImpl.readExternal(ObjectInput)",1,1,1
"org.apache.derby.catalog.types.UserDefinedTypeIdImpl.userType()",1,1,1
"org.apache.derby.catalog.types.UserDefinedTypeIdImpl.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.client.ClientDataSourceFactory.ClientDataSourceFactory()",1,1,1
"org.apache.derby.client.ClientDataSourceFactory.getObjectInstance(Object,Name,Context,Hashtable)",1,4,4
"org.apache.derby.client.ClientDataSourceFactory.setBeanProperties(Object,Reference)",1,5,5
"org.apache.derby.client.ClientPooledConnection.ClientPooledConnection(ClientBaseDataSource,LogWriter,String,String)",1,3,3
"org.apache.derby.client.ClientPooledConnection.ClientPooledConnection(ClientBaseDataSource,LogWriter,String,String,int)",1,2,3
"org.apache.derby.client.ClientPooledConnection.addConnectionEventListener(ConnectionEventListener)",1,2,2
"org.apache.derby.client.ClientPooledConnection.close()",2,3,4
"org.apache.derby.client.ClientPooledConnection.createLogicalConnection()",2,4,6
"org.apache.derby.client.ClientPooledConnection.finalize()",1,2,2
"org.apache.derby.client.ClientPooledConnection.getConnection()",1,5,5
"org.apache.derby.client.ClientPooledConnection.getNetXAConnection(ClientBaseDataSource,NetLogWriter,String,String,int)",1,1,1
"org.apache.derby.client.ClientPooledConnection.informListeners(SqlException)",2,2,3
"org.apache.derby.client.ClientPooledConnection.isStatementPoolingEnabled()",1,1,1
"org.apache.derby.client.ClientPooledConnection.nullLogicalConnection()",1,1,1
"org.apache.derby.client.ClientPooledConnection.onStatementClose(PreparedStatement)",1,1,1
"org.apache.derby.client.ClientPooledConnection.onStatementErrorOccurred(PreparedStatement,SQLException)",1,1,1
"org.apache.derby.client.ClientPooledConnection.recycleConnection()",1,3,3
"org.apache.derby.client.ClientPooledConnection.removeConnectionEventListener(ConnectionEventListener)",1,2,2
"org.apache.derby.client.ClientPooledConnection40.ClientPooledConnection40(ClientBaseDataSource,LogWriter,String,String)",1,1,1
"org.apache.derby.client.ClientPooledConnection40.ClientPooledConnection40(ClientBaseDataSource,LogWriter,String,String,int)",1,1,1
"org.apache.derby.client.ClientPooledConnection40.addStatementEventListener(StatementEventListener)",1,3,3
"org.apache.derby.client.ClientPooledConnection40.onStatementClose(PreparedStatement)",1,3,3
"org.apache.derby.client.ClientPooledConnection40.onStatementErrorOccurred(PreparedStatement,SQLException)",1,3,3
"org.apache.derby.client.ClientPooledConnection40.removeStatementEventListener(StatementEventListener)",1,2,2
"org.apache.derby.client.ClientXAConnection.ClientXAConnection(ClientXADataSource,NetLogWriter,String,String)",1,1,1
"org.apache.derby.client.ClientXAConnection.close()",1,1,1
"org.apache.derby.client.ClientXAConnection.createControlConnection(NetLogWriter,String,String,ClientDataSource,int,boolean)",1,3,3
"org.apache.derby.client.ClientXAConnection.getConnection()",1,4,4
"org.apache.derby.client.ClientXAConnection.getDataSource()",1,2,2
"org.apache.derby.client.ClientXAConnection.getRmId()",1,1,1
"org.apache.derby.client.ClientXAConnection.getUnigueRmId()",1,1,1
"org.apache.derby.client.ClientXAConnection.getXAResource()",1,2,2
"org.apache.derby.client.ClientXAConnection40.ClientXAConnection40(ClientXADataSource,NetLogWriter,String,String)",1,1,1
"org.apache.derby.client.ClientXAConnection40.addStatementEventListener(StatementEventListener)",1,3,3
"org.apache.derby.client.ClientXAConnection40.onStatementClose(PreparedStatement)",1,3,3
"org.apache.derby.client.ClientXAConnection40.onStatementErrorOccurred(PreparedStatement,SQLException)",1,3,3
"org.apache.derby.client.ClientXAConnection40.removeStatementEventListener(StatementEventListener)",1,2,2
"org.apache.derby.client.ClientXid.ClientXid()",1,1,1
"org.apache.derby.client.ClientXid.ClientXid(int,byte[],byte[])",1,1,1
"org.apache.derby.client.ClientXid.equals(Object)",1,1,1
"org.apache.derby.client.ClientXid.getBqualLength()",1,1,1
"org.apache.derby.client.ClientXid.getBranchQualifier()",1,1,1
"org.apache.derby.client.ClientXid.getData()",1,1,1
"org.apache.derby.client.ClientXid.getFormatId()",1,1,1
"org.apache.derby.client.ClientXid.getGlobalTransactionId()",1,1,1
"org.apache.derby.client.ClientXid.getGtridLength()",1,1,1
"org.apache.derby.client.ClientXid.hashCode()",2,1,2
"org.apache.derby.client.ClientXid.setBranchQualifier(byte[])",1,1,2
"org.apache.derby.client.ClientXid.setFormatID(int)",1,1,1
"org.apache.derby.client.ClientXid.toString()",1,3,4
"org.apache.derby.client.am.Agent.Agent(Connection,LogWriter)",1,1,1
"org.apache.derby.client.am.Agent.accumulateChainBreakingReadExceptionAndThrow(DisconnectException)",1,1,1
"org.apache.derby.client.am.Agent.accumulateDeferredException(SqlException)",1,2,2
"org.apache.derby.client.am.Agent.accumulateDisconnectException(DisconnectException)",1,3,3
"org.apache.derby.client.am.Agent.accumulateReadException(SqlException)",1,3,3
"org.apache.derby.client.am.Agent.batchUpdateExceptionGenerated()",1,1,1
"org.apache.derby.client.am.Agent.beginBatchedReadChain(Statement,int)",1,1,1
"org.apache.derby.client.am.Agent.beginBatchedWriteChain(Statement)",1,1,1
"org.apache.derby.client.am.Agent.beginReadChain(Statement)",1,1,1
"org.apache.derby.client.am.Agent.beginReadChainOutsideUOW()",1,1,1
"org.apache.derby.client.am.Agent.beginWriteChain(Statement)",1,1,1
"org.apache.derby.client.am.Agent.beginWriteChainOutsideUOW()",1,1,1
"org.apache.derby.client.am.Agent.checkForDeferredExceptions()",2,1,2
"org.apache.derby.client.am.Agent.checkForExceptions()",2,1,2
"org.apache.derby.client.am.Agent.close()",1,2,2
"org.apache.derby.client.am.Agent.disableBatchedExceptionTracking()",1,1,1
"org.apache.derby.client.am.Agent.disconnectEvent()",1,1,2
"org.apache.derby.client.am.Agent.enableBatchedExceptionTracking(int)",1,1,1
"org.apache.derby.client.am.Agent.endBatchedReadChain(int[],SqlException)",2,3,6
"org.apache.derby.client.am.Agent.endBatchedWriteChain()",1,1,1
"org.apache.derby.client.am.Agent.endReadChain()",1,1,1
"org.apache.derby.client.am.Agent.endWriteChain()",1,1,1
"org.apache.derby.client.am.Agent.flow(Statement)",1,1,1
"org.apache.derby.client.am.Agent.flowBatch(Statement,int)",1,1,1
"org.apache.derby.client.am.Agent.flowOutsideUOW()",1,1,1
"org.apache.derby.client.am.Agent.getLogWriter()",1,1,2
"org.apache.derby.client.am.Agent.labelAsBatchedException(SqlException,int)",1,2,2
"org.apache.derby.client.am.Agent.loggingEnabled()",1,1,2
"org.apache.derby.client.am.Agent.resetAgent(Connection,LogWriter,int,String,int)",1,1,1
"org.apache.derby.client.am.Agent.resetAgent(LogWriter)",1,1,1
"org.apache.derby.client.am.Agent.setBatchedExceptionLabelIndex(int)",1,1,1
"org.apache.derby.client.am.Agent.setLogWriter(LogWriter)",1,2,2
"org.apache.derby.client.am.AsciiStream.AsciiStream(String)",1,1,1
"org.apache.derby.client.am.AsciiStream.AsciiStream(String,Reader)",1,1,1
"org.apache.derby.client.am.AsciiStream.available()",1,1,1
"org.apache.derby.client.am.AsciiStream.read()",3,1,3
"org.apache.derby.client.am.BatchUpdateException.BatchUpdateException(LogWriter)",1,1,1
"org.apache.derby.client.am.BatchUpdateException.BatchUpdateException(LogWriter,ClientMessageId,Object,int[])",1,1,1
"org.apache.derby.client.am.BatchUpdateException.BatchUpdateException(LogWriter,ClientMessageId,Object[],int[])",1,2,2
"org.apache.derby.client.am.BatchUpdateException.BatchUpdateException(LogWriter,ClientMessageId,int[])",1,1,1
"org.apache.derby.client.am.BatchUpdateException.BatchUpdateException(LogWriter,String,String,int,int[])",1,2,2
"org.apache.derby.client.am.BatchUpdateException.BatchUpdateException(LogWriter,String,String,int[])",1,1,1
"org.apache.derby.client.am.BatchUpdateException.BatchUpdateException(LogWriter,String,int[])",1,1,1
"org.apache.derby.client.am.BatchUpdateException.BatchUpdateException(LogWriter,int[])",1,1,1
"org.apache.derby.client.am.Blob.Blob(Agent,InputStream)",1,1,1
"org.apache.derby.client.am.Blob.Blob(Agent,InputStream,int)",1,1,1
"org.apache.derby.client.am.Blob.Blob(Agent,int)",1,1,1
"org.apache.derby.client.am.Blob.Blob(byte[],Agent,int)",1,1,1
"org.apache.derby.client.am.Blob.binaryStringPosition(byte[],long)",3,2,3
"org.apache.derby.client.am.Blob.free()",3,5,7
"org.apache.derby.client.am.Blob.getBinaryStream()",1,4,4
"org.apache.derby.client.am.Blob.getBinaryStream(long,long)",1,4,5
"org.apache.derby.client.am.Blob.getBinaryStreamX()",3,2,3
"org.apache.derby.client.am.Blob.getBinaryString()",1,1,1
"org.apache.derby.client.am.Blob.getBytes(long,int)",4,4,7
"org.apache.derby.client.am.Blob.getBytesX(long,int)",1,2,2
"org.apache.derby.client.am.Blob.getLocatorLength()",1,1,1
"org.apache.derby.client.am.Blob.isBinaryStream()",1,1,1
"org.apache.derby.client.am.Blob.isBinaryString()",1,1,1
"org.apache.derby.client.am.Blob.isSubString(byte[],int)",3,1,3
"org.apache.derby.client.am.Blob.length()",1,4,4
"org.apache.derby.client.am.Blob.materializeStream()",1,1,1
"org.apache.derby.client.am.Blob.position(Blob,long)",3,4,6
"org.apache.derby.client.am.Blob.position(byte[],long)",3,4,6
"org.apache.derby.client.am.Blob.positionX(Blob,long)",3,4,5
"org.apache.derby.client.am.Blob.positionX(byte[],long)",2,2,2
"org.apache.derby.client.am.Blob.setBinaryStream(long)",2,4,6
"org.apache.derby.client.am.Blob.setBytes(long,byte[])",1,4,4
"org.apache.derby.client.am.Blob.setBytes(long,byte[],int,int)",1,4,4
"org.apache.derby.client.am.Blob.setBytesX(long,byte[],int,int)",7,5,13
"org.apache.derby.client.am.Blob.truncate(long)",3,5,7
"org.apache.derby.client.am.BlobLocatorInputStream.BlobLocatorInputStream(Connection,Blob)",1,2,2
"org.apache.derby.client.am.BlobLocatorInputStream.BlobLocatorInputStream(Connection,Blob,long,long)",1,3,3
"org.apache.derby.client.am.BlobLocatorInputStream.read()",2,1,2
"org.apache.derby.client.am.BlobLocatorInputStream.read(byte[],int,int)",4,2,6
"org.apache.derby.client.am.BlobLocatorInputStream.readBytes(int)",1,3,3
"org.apache.derby.client.am.BlobLocatorOutputStream.BlobLocatorOutputStream(Connection,Blob,long)",2,2,3
"org.apache.derby.client.am.BlobLocatorOutputStream.write(byte[])",1,1,1
"org.apache.derby.client.am.BlobLocatorOutputStream.write(byte[],int,int)",3,2,9
"org.apache.derby.client.am.BlobLocatorOutputStream.write(int)",1,1,1
"org.apache.derby.client.am.BlobLocatorOutputStream.writeBytes(byte[])",1,2,2
"org.apache.derby.client.am.BlobOutputStream.BlobOutputStream(Blob,long)",2,1,2
"org.apache.derby.client.am.BlobOutputStream.write(byte[],int,int)",4,1,8
"org.apache.derby.client.am.BlobOutputStream.write(int)",1,1,1
"org.apache.derby.client.am.BlobOutputStream.writeX(byte[],int,int)",1,1,2
"org.apache.derby.client.am.ByteArrayCombinerStream.ByteArrayCombinerStream(ArrayList,long)",6,5,8
"org.apache.derby.client.am.ByteArrayCombinerStream.available()",1,1,1
"org.apache.derby.client.am.ByteArrayCombinerStream.nextArray()",2,1,2
"org.apache.derby.client.am.ByteArrayCombinerStream.read()",4,2,4
"org.apache.derby.client.am.ByteArrayCombinerStream.read(byte[],int,int)",5,3,6
"org.apache.derby.client.am.CachingLogicalConnection.CachingLogicalConnection(Connection,ClientPooledConnection,JDBCStatementCache)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection.close()",1,2,2
"org.apache.derby.client.am.CachingLogicalConnection.prepareCall(String)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection.prepareCall(String,int,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection.prepareCall(String,int,int,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection.prepareStatement(String)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection.prepareStatement(String,String[])",1,3,6
"org.apache.derby.client.am.CachingLogicalConnection.prepareStatement(String,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection.prepareStatement(String,int,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection.prepareStatement(String,int,int,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection.prepareStatement(String,int[])",1,3,6
"org.apache.derby.client.am.CachingLogicalConnection40.CachingLogicalConnection40(Connection,ClientPooledConnection,JDBCStatementCache)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection40.close()",1,2,2
"org.apache.derby.client.am.CachingLogicalConnection40.prepareCall(String)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection40.prepareCall(String,int,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection40.prepareCall(String,int,int,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection40.prepareStatement(String)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection40.prepareStatement(String,String[])",1,3,6
"org.apache.derby.client.am.CachingLogicalConnection40.prepareStatement(String,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection40.prepareStatement(String,int,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection40.prepareStatement(String,int,int,int)",1,1,1
"org.apache.derby.client.am.CachingLogicalConnection40.prepareStatement(String,int[])",1,3,6
"org.apache.derby.client.am.CallableLocatorProcedures.CallableLocatorProcedures(Connection)",1,1,1
"org.apache.derby.client.am.CallableLocatorProcedures.blobCreateLocator()",3,3,5
"org.apache.derby.client.am.CallableLocatorProcedures.blobGetBytes(int,long,int)",6,4,8
"org.apache.derby.client.am.CallableLocatorProcedures.blobGetLength(int)",1,3,3
"org.apache.derby.client.am.CallableLocatorProcedures.blobGetPositionFromBytes(int,byte[],long)",6,5,8
"org.apache.derby.client.am.CallableLocatorProcedures.blobGetPositionFromBytes(int,long,byte[],int,int)",1,4,4
"org.apache.derby.client.am.CallableLocatorProcedures.blobGetPositionFromLocator(int,int,long)",1,3,3
"org.apache.derby.client.am.CallableLocatorProcedures.blobReleaseLocator(int)",1,3,3
"org.apache.derby.client.am.CallableLocatorProcedures.blobSetBytes(int,long,int,byte[])",2,5,6
"org.apache.derby.client.am.CallableLocatorProcedures.blobTruncate(int,long)",1,3,3
"org.apache.derby.client.am.CallableLocatorProcedures.clobCreateLocator()",3,3,5
"org.apache.derby.client.am.CallableLocatorProcedures.clobGetLength(int)",1,3,3
"org.apache.derby.client.am.CallableLocatorProcedures.clobGetPositionFromLocator(int,int,long)",1,3,3
"org.apache.derby.client.am.CallableLocatorProcedures.clobGetPositionFromString(int,String,long)",6,5,8
"org.apache.derby.client.am.CallableLocatorProcedures.clobGetPositionFromString(int,long,String,int,int)",1,4,4
"org.apache.derby.client.am.CallableLocatorProcedures.clobGetSubString(int,long,int)",6,5,8
"org.apache.derby.client.am.CallableLocatorProcedures.clobReleaseLocator(int)",1,3,3
"org.apache.derby.client.am.CallableLocatorProcedures.clobSetString(int,long,int,String)",2,5,5
"org.apache.derby.client.am.CallableLocatorProcedures.clobTruncate(int,long)",1,3,3
"org.apache.derby.client.am.CallableLocatorProcedures.handleInvalidLocator(SqlException)",3,2,3
"org.apache.derby.client.am.CallableStatement.CallableStatement(Agent,Connection,String,int,int,int,ClientPooledConnection)",1,1,1
"org.apache.derby.client.am.CallableStatement.checkForValidOutParameter(int)",2,1,3
"org.apache.derby.client.am.CallableStatement.checkGetterPreconditions(int)",1,1,1
"org.apache.derby.client.am.CallableStatement.clearParameters()",1,2,2
"org.apache.derby.client.am.CallableStatement.finalize()",1,2,2
"org.apache.derby.client.am.CallableStatement.getArray(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getArray(int)",2,5,6
"org.apache.derby.client.am.CallableStatement.getBigDecimal(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getBigDecimal(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getBigDecimal(int,int)",1,6,6
"org.apache.derby.client.am.CallableStatement.getBlob(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getBlob(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getBoolean(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getBoolean(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getByte(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getByte(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getBytes(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getBytes(int)",1,4,4
"org.apache.derby.client.am.CallableStatement.getBytesX(int)",1,2,2
"org.apache.derby.client.am.CallableStatement.getCharacterStream(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getClob(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getClob(int)",1,4,4
"org.apache.derby.client.am.CallableStatement.getDate(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getDate(String,Calendar)",1,2,2
"org.apache.derby.client.am.CallableStatement.getDate(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getDate(int,Calendar)",2,5,5
"org.apache.derby.client.am.CallableStatement.getDouble(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getDouble(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getFloat(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getFloat(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getInt(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getInt(int)",1,4,4
"org.apache.derby.client.am.CallableStatement.getIntX(int)",1,2,2
"org.apache.derby.client.am.CallableStatement.getJdbcStatementInterfaceName()",1,1,1
"org.apache.derby.client.am.CallableStatement.getLong(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getLong(int)",1,4,4
"org.apache.derby.client.am.CallableStatement.getLongX(int)",1,2,2
"org.apache.derby.client.am.CallableStatement.getObject(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getObject(String,Map)",1,2,2
"org.apache.derby.client.am.CallableStatement.getObject(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getObject(int,Map)",2,4,5
"org.apache.derby.client.am.CallableStatement.getRef(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getRef(int)",2,5,6
"org.apache.derby.client.am.CallableStatement.getShort(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getShort(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getString(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getString(int)",1,4,4
"org.apache.derby.client.am.CallableStatement.getStringX(int)",1,2,2
"org.apache.derby.client.am.CallableStatement.getTime(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getTime(String,Calendar)",1,2,2
"org.apache.derby.client.am.CallableStatement.getTime(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getTime(int,Calendar)",2,5,5
"org.apache.derby.client.am.CallableStatement.getTimestamp(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getTimestamp(String,Calendar)",1,2,2
"org.apache.derby.client.am.CallableStatement.getTimestamp(int)",1,5,5
"org.apache.derby.client.am.CallableStatement.getTimestamp(int,Calendar)",2,5,5
"org.apache.derby.client.am.CallableStatement.getURL(String)",1,2,2
"org.apache.derby.client.am.CallableStatement.getURL(int)",1,2,2
"org.apache.derby.client.am.CallableStatement.guessScaleForDecimalOrNumeric(int)",2,1,3
"org.apache.derby.client.am.CallableStatement.initCallableStatement()",1,1,1
"org.apache.derby.client.am.CallableStatement.jdbcMethodNotImplemented()",1,2,2
"org.apache.derby.client.am.CallableStatement.registerOutParameter(String,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.registerOutParameter(String,int,String)",1,2,2
"org.apache.derby.client.am.CallableStatement.registerOutParameter(String,int,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.registerOutParameter(int,int)",1,3,3
"org.apache.derby.client.am.CallableStatement.registerOutParameter(int,int,String)",1,2,2
"org.apache.derby.client.am.CallableStatement.registerOutParameter(int,int,int)",1,3,3
"org.apache.derby.client.am.CallableStatement.registerOutParameterX(int,int)",1,1,1
"org.apache.derby.client.am.CallableStatement.registerOutParameterX(int,int,int)",1,1,1
"org.apache.derby.client.am.CallableStatement.reset(boolean)",1,2,2
"org.apache.derby.client.am.CallableStatement.resetCallableStatement(Agent,Connection,String,Section)",1,1,1
"org.apache.derby.client.am.CallableStatement.resetCallableStatement(Agent,Connection,String,Section,ColumnMetaData,ColumnMetaData)",1,1,1
"org.apache.derby.client.am.CallableStatement.resetCallableStatement(Agent,Connection,String,int,int,int)",1,1,1
"org.apache.derby.client.am.CallableStatement.setAsciiStream(String,InputStream,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.setBigDecimal(String,BigDecimal)",1,2,2
"org.apache.derby.client.am.CallableStatement.setBinaryStream(String,InputStream,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.setBoolean(String,boolean)",1,2,2
"org.apache.derby.client.am.CallableStatement.setByte(String,byte)",1,2,2
"org.apache.derby.client.am.CallableStatement.setBytes(String,byte[])",1,2,2
"org.apache.derby.client.am.CallableStatement.setCharacterStream(String,Reader,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.setDate(String,Date)",1,2,2
"org.apache.derby.client.am.CallableStatement.setDate(String,Date,Calendar)",1,2,2
"org.apache.derby.client.am.CallableStatement.setDouble(String,double)",1,2,2
"org.apache.derby.client.am.CallableStatement.setFloat(String,float)",1,2,2
"org.apache.derby.client.am.CallableStatement.setInt(String,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.setLong(String,long)",1,2,2
"org.apache.derby.client.am.CallableStatement.setNull(String,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.setNull(String,int,String)",1,2,2
"org.apache.derby.client.am.CallableStatement.setObject(String,Object)",1,2,2
"org.apache.derby.client.am.CallableStatement.setObject(String,Object,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.setObject(String,Object,int,int)",1,2,2
"org.apache.derby.client.am.CallableStatement.setShort(String,short)",1,2,2
"org.apache.derby.client.am.CallableStatement.setString(String,String)",1,2,2
"org.apache.derby.client.am.CallableStatement.setTime(String,Time)",1,2,2
"org.apache.derby.client.am.CallableStatement.setTime(String,Time,Calendar)",1,2,2
"org.apache.derby.client.am.CallableStatement.setTimestamp(String,Timestamp)",1,2,2
"org.apache.derby.client.am.CallableStatement.setTimestamp(String,Timestamp,Calendar)",1,2,2
"org.apache.derby.client.am.CallableStatement.setURL(String,URL)",1,2,2
"org.apache.derby.client.am.CallableStatement.setWasNull(int)",1,1,3
"org.apache.derby.client.am.CallableStatement.wasNull()",1,4,4
"org.apache.derby.client.am.CallableStatement.wasNullX()",2,1,2
"org.apache.derby.client.am.CallableStatement40.CallableStatement40(Agent,Connection,String,int,int,int,ClientPooledConnection)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getCharacterStream(String)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getNCharacterStream(String)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getNCharacterStream(int)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getNClob(String)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getNClob(int)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getNString(String)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getNString(int)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getRowId(String)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getRowId(int)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getSQLXML(String)",1,1,1
"org.apache.derby.client.am.CallableStatement40.getSQLXML(int)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setAsciiStream(String,InputStream)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setAsciiStream(String,InputStream,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setBinaryStream(String,InputStream)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setBinaryStream(String,InputStream,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setBlob(String,Blob)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setBlob(String,InputStream)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setBlob(String,InputStream,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setCharacterStream(String,Reader)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setClob(String,Clob)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setClob(String,Reader)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setClob(String,Reader,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNCharacterStream(String,Reader)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNClob(String,NClob)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNClob(String,Reader)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNClob(String,Reader,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNClob(int,NClob)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNClob(int,Reader)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNClob(int,Reader,long)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNString(String,String)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setNString(int,String)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setRowId(String,RowId)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setRowId(int,RowId)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setSQLXML(String,SQLXML)",1,1,1
"org.apache.derby.client.am.CallableStatement40.setSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.client.am.CallableStatement40.unwrap(Class<T>)",1,3,3
"org.apache.derby.client.am.ClientMessageId.ClientMessageId(String)",1,1,1
"org.apache.derby.client.am.Clob.Clob(Agent,InputStream,String)",2,1,2
"org.apache.derby.client.am.Clob.Clob(Agent,InputStream,String,int)",4,4,5
"org.apache.derby.client.am.Clob.Clob(Agent,Reader)",1,1,1
"org.apache.derby.client.am.Clob.Clob(Agent,Reader,int)",1,1,1
"org.apache.derby.client.am.Clob.Clob(Agent,String)",1,1,1
"org.apache.derby.client.am.Clob.Clob(Agent,boolean)",1,1,1
"org.apache.derby.client.am.Clob.Clob(Agent,byte[],String,int)",2,1,3
"org.apache.derby.client.am.Clob.Clob(Agent,int)",1,1,1
"org.apache.derby.client.am.Clob.convertFromAsciiToCharacterStream()",1,1,2
"org.apache.derby.client.am.Clob.createClobWrapper(Clob)",2,2,4
"org.apache.derby.client.am.Clob.free()",5,10,12
"org.apache.derby.client.am.Clob.getAsciiStream()",1,4,4
"org.apache.derby.client.am.Clob.getAsciiStreamX()",3,2,3
"org.apache.derby.client.am.Clob.getCharacterStream()",1,4,4
"org.apache.derby.client.am.Clob.getCharacterStream(long,long)",2,6,6
"org.apache.derby.client.am.Clob.getCharacterStreamX()",3,2,3
"org.apache.derby.client.am.Clob.getLocatorLength()",1,1,1
"org.apache.derby.client.am.Clob.getString()",1,1,1
"org.apache.derby.client.am.Clob.getSubString(long,int)",4,4,7
"org.apache.derby.client.am.Clob.getSubStringX(long,int)",2,2,2
"org.apache.derby.client.am.Clob.getUTF8Length()",2,1,3
"org.apache.derby.client.am.Clob.getUnicodeStream()",1,1,1
"org.apache.derby.client.am.Clob.getUtf8String()",1,1,1
"org.apache.derby.client.am.Clob.isAsciiStream()",1,1,1
"org.apache.derby.client.am.Clob.isCharacterStream()",1,1,1
"org.apache.derby.client.am.Clob.isString()",1,1,1
"org.apache.derby.client.am.Clob.isUnicodeStream()",1,1,1
"org.apache.derby.client.am.Clob.length()",1,4,4
"org.apache.derby.client.am.Clob.materializeStream()",1,1,2
"org.apache.derby.client.am.Clob.position(Clob,long)",3,4,6
"org.apache.derby.client.am.Clob.position(String,long)",3,4,6
"org.apache.derby.client.am.Clob.positionX(Clob,long)",3,2,6
"org.apache.derby.client.am.Clob.positionX(String,long)",2,2,4
"org.apache.derby.client.am.Clob.setAsciiStream(long)",1,4,5
"org.apache.derby.client.am.Clob.setCharacterStream(long)",1,4,5
"org.apache.derby.client.am.Clob.setString(long,String)",1,4,4
"org.apache.derby.client.am.Clob.setString(long,String,int,int)",1,4,4
"org.apache.derby.client.am.Clob.setStringX(long,String,int,int)",6,4,9
"org.apache.derby.client.am.Clob.truncate(long)",4,4,7
"org.apache.derby.client.am.ClobLocatorInputStream.ClobLocatorInputStream(Connection,Clob)",1,2,2
"org.apache.derby.client.am.ClobLocatorInputStream.ClobLocatorInputStream(Connection,Clob,long)",1,1,1
"org.apache.derby.client.am.ClobLocatorInputStream.getBytesFromString(String)",1,2,3
"org.apache.derby.client.am.ClobLocatorInputStream.read()",2,1,2
"org.apache.derby.client.am.ClobLocatorInputStream.read(byte[],int,int)",4,2,6
"org.apache.derby.client.am.ClobLocatorInputStream.readBytes(int)",1,2,2
"org.apache.derby.client.am.ClobLocatorOutputStream.ClobLocatorOutputStream(Connection,Clob,long)",2,1,2
"org.apache.derby.client.am.ClobLocatorOutputStream.flush()",1,1,1
"org.apache.derby.client.am.ClobLocatorOutputStream.write(byte[])",1,1,1
"org.apache.derby.client.am.ClobLocatorOutputStream.write(byte[],int,int)",3,2,8
"org.apache.derby.client.am.ClobLocatorOutputStream.write(int)",1,1,1
"org.apache.derby.client.am.ClobLocatorOutputStream.writeBytes(byte[])",1,2,2
"org.apache.derby.client.am.ClobLocatorReader.ClobLocatorReader(Connection,Clob)",1,2,2
"org.apache.derby.client.am.ClobLocatorReader.ClobLocatorReader(Connection,Clob,long,long)",1,3,3
"org.apache.derby.client.am.ClobLocatorReader.checkClosed()",2,1,2
"org.apache.derby.client.am.ClobLocatorReader.close()",2,1,2
"org.apache.derby.client.am.ClobLocatorReader.read()",2,1,2
"org.apache.derby.client.am.ClobLocatorReader.read(char[],int,int)",4,2,6
"org.apache.derby.client.am.ClobLocatorReader.readCharacters(int)",1,3,3
"org.apache.derby.client.am.ClobLocatorWriter.ClobLocatorWriter(Connection,Clob,long)",2,1,2
"org.apache.derby.client.am.ClobLocatorWriter.checkClosed()",2,1,2
"org.apache.derby.client.am.ClobLocatorWriter.close()",2,1,2
"org.apache.derby.client.am.ClobLocatorWriter.flush()",1,1,1
"org.apache.derby.client.am.ClobLocatorWriter.write(char[])",1,1,1
"org.apache.derby.client.am.ClobLocatorWriter.write(char[],int,int)",3,1,6
"org.apache.derby.client.am.ClobLocatorWriter.write(int)",1,1,1
"org.apache.derby.client.am.ClobLocatorWriter.writeCharacters(char[],int,int)",1,2,2
"org.apache.derby.client.am.ClobOutputStream.ClobOutputStream(Clob,long)",2,1,2
"org.apache.derby.client.am.ClobOutputStream.write(byte[],int,int)",4,1,8
"org.apache.derby.client.am.ClobOutputStream.write(int)",1,1,1
"org.apache.derby.client.am.ClobOutputStream.writeBytes(byte[])",1,1,1
"org.apache.derby.client.am.ClobWriter.ClobWriter()",1,1,1
"org.apache.derby.client.am.ClobWriter.ClobWriter(Clob,long)",2,1,2
"org.apache.derby.client.am.ClobWriter.close()",1,1,1
"org.apache.derby.client.am.ClobWriter.flush()",1,1,1
"org.apache.derby.client.am.ClobWriter.updateClob(StringBuffer)",1,1,1
"org.apache.derby.client.am.ClobWriter.write(String)",1,1,1
"org.apache.derby.client.am.ClobWriter.write(String,int,int)",1,1,1
"org.apache.derby.client.am.ClobWriter.write(char[],int,int)",3,1,7
"org.apache.derby.client.am.ClobWriter.write(int)",1,1,1
"org.apache.derby.client.am.CloseFilterInputStream.CloseFilterInputStream(InputStream)",1,1,1
"org.apache.derby.client.am.CloseFilterInputStream.available()",2,1,2
"org.apache.derby.client.am.CloseFilterInputStream.close()",1,1,1
"org.apache.derby.client.am.CloseFilterInputStream.read()",2,1,2
"org.apache.derby.client.am.CloseFilterInputStream.read(byte[])",2,1,2
"org.apache.derby.client.am.CloseFilterInputStream.read(byte[],int,int)",2,1,2
"org.apache.derby.client.am.CloseFilterInputStream.skip(long)",2,1,2
"org.apache.derby.client.am.ColumnMetaData.ColumnMetaData(LogWriter)",1,1,1
"org.apache.derby.client.am.ColumnMetaData.ColumnMetaData(LogWriter,int)",1,1,1
"org.apache.derby.client.am.ColumnMetaData.assignColumnName(int)",1,1,2
"org.apache.derby.client.am.ColumnMetaData.checkForClosedStatement()",2,1,2
"org.apache.derby.client.am.ColumnMetaData.checkForValidColumnIndex(int)",2,1,3
"org.apache.derby.client.am.ColumnMetaData.columnIsNotInUnicode(int)",1,1,1
"org.apache.derby.client.am.ColumnMetaData.finalize()",1,1,1
"org.apache.derby.client.am.ColumnMetaData.findColumnX(String)",5,7,7
"org.apache.derby.client.am.ColumnMetaData.getCatalogName(int)",1,2,2
"org.apache.derby.client.am.ColumnMetaData.getColumnClassName(int)",21,3,22
"org.apache.derby.client.am.ColumnMetaData.getColumnCount()",1,2,2
"org.apache.derby.client.am.ColumnMetaData.getColumnDisplaySize(int)",11,3,17
"org.apache.derby.client.am.ColumnMetaData.getColumnLabel(int)",2,3,6
"org.apache.derby.client.am.ColumnMetaData.getColumnName(int)",1,3,4
"org.apache.derby.client.am.ColumnMetaData.getColumnType(int)",1,2,2
"org.apache.derby.client.am.ColumnMetaData.getColumnTypeName(int)",22,3,23
"org.apache.derby.client.am.ColumnMetaData.getInternalTypeForGuessedOrRegisteredJdbcType(int)",20,2,20
"org.apache.derby.client.am.ColumnMetaData.getPrecision(int)",13,3,14
"org.apache.derby.client.am.ColumnMetaData.getScale(int)",2,2,3
"org.apache.derby.client.am.ColumnMetaData.getSchemaName(int)",2,2,4
"org.apache.derby.client.am.ColumnMetaData.getTableName(int)",2,2,4
"org.apache.derby.client.am.ColumnMetaData.hasLobColumns()",4,3,4
"org.apache.derby.client.am.ColumnMetaData.initializeCache(int)",1,1,1
"org.apache.derby.client.am.ColumnMetaData.isAutoIncrement(int)",2,2,3
"org.apache.derby.client.am.ColumnMetaData.isCaseSensitive(int)",1,2,5
"org.apache.derby.client.am.ColumnMetaData.isCompatibleDriverTypes(int,int)",4,2,8
"org.apache.derby.client.am.ColumnMetaData.isCurrency(int)",1,2,2
"org.apache.derby.client.am.ColumnMetaData.isDefinitelyWritable(int)",2,2,3
"org.apache.derby.client.am.ColumnMetaData.isNullable(int)",2,2,3
"org.apache.derby.client.am.ColumnMetaData.isParameterModeGuessedAsAnInput(int)",2,1,3
"org.apache.derby.client.am.ColumnMetaData.isParameterModeGuessedAsOutput(int)",1,1,1
"org.apache.derby.client.am.ColumnMetaData.isReadOnly(int)",2,2,3
"org.apache.derby.client.am.ColumnMetaData.isSearchable(int)",1,2,2
"org.apache.derby.client.am.ColumnMetaData.isSigned(int)",1,2,9
"org.apache.derby.client.am.ColumnMetaData.isWritable(int)",2,2,3
"org.apache.derby.client.am.ColumnMetaData.markClosed()",1,1,1
"org.apache.derby.client.am.ColumnMetaData.nullDataForGC()",1,1,1
"org.apache.derby.client.am.ColumnMetaData.setLogWriter(LogWriter)",1,1,1
"org.apache.derby.client.am.ColumnMetaData.setParmModeForInputParameter(int)",1,1,3
"org.apache.derby.client.am.ColumnMetaData.setParmModeForOutputParameter(int)",1,1,3
"org.apache.derby.client.am.ColumnMetaData40.ColumnMetaData40(LogWriter)",1,1,1
"org.apache.derby.client.am.ColumnMetaData40.ColumnMetaData40(LogWriter,int)",1,1,1
"org.apache.derby.client.am.ColumnMetaData40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.client.am.ColumnMetaData40.unwrap(Class<T>)",1,2,2
"org.apache.derby.client.am.ColumnTypeConversionException.ColumnTypeConversionException(LogWriter,String,String)",1,1,1
"org.apache.derby.client.am.Configuration.Configuration()",1,1,1
"org.apache.derby.client.am.Configuration.buildProductVersionHolder()",1,1,1
"org.apache.derby.client.am.Configuration.getProductVersionHolder()",1,1,1
"org.apache.derby.client.am.Configuration.loadProductVersionHolder()",1,3,3
"org.apache.derby.client.am.Configuration.supportsJDBC40()",2,1,2
"org.apache.derby.client.am.Connection.Connection(LogWriter,String,String,ClientBaseDataSource)",1,1,1
"org.apache.derby.client.am.Connection.Connection(LogWriter,String,String,boolean,ClientBaseDataSource)",1,1,1
"org.apache.derby.client.am.Connection.Connection(LogWriter,boolean,ClientBaseDataSource)",1,2,2
"org.apache.derby.client.am.Connection.Connection(LogWriter,int,String,int,String,Properties)",1,2,2
"org.apache.derby.client.am.Connection.accumulate440WarningForMessageProcFailure(SqlWarning)",1,2,2
"org.apache.derby.client.am.Connection.accumulate444WarningForMessageProcFailure(SqlWarning)",1,2,2
"org.apache.derby.client.am.Connection.accumulateWarning(SqlWarning)",1,2,2
"org.apache.derby.client.am.Connection.checkForClosedConnection()",2,2,2
"org.apache.derby.client.am.Connection.checkForInvalidXAStateOnCommitOrRollback()",2,1,2
"org.apache.derby.client.am.Connection.checkForTransactionInProgress()",2,2,3
"org.apache.derby.client.am.Connection.clearWarnings()",1,3,3
"org.apache.derby.client.am.Connection.clearWarningsX()",1,1,1
"org.apache.derby.client.am.Connection.close()",1,2,2
"org.apache.derby.client.am.Connection.closeForReuse(boolean)",3,2,5
"org.apache.derby.client.am.Connection.closeResources()",1,2,4
"org.apache.derby.client.am.Connection.closeResourcesX()",1,7,8
"org.apache.derby.client.am.Connection.closeX()",2,1,2
"org.apache.derby.client.am.Connection.commit()",1,3,3
"org.apache.derby.client.am.Connection.completeAbnormalUnitOfWork()",1,1,1
"org.apache.derby.client.am.Connection.completeAbnormalUnitOfWork(UnitOfWorkListener)",1,1,1
"org.apache.derby.client.am.Connection.completeChainBreakingDisconnect()",1,1,1
"org.apache.derby.client.am.Connection.completeConnect()",1,2,2
"org.apache.derby.client.am.Connection.completeLocalCommit()",1,2,2
"org.apache.derby.client.am.Connection.completeLocalRollback()",1,2,2
"org.apache.derby.client.am.Connection.completePiggyBackIsolation(int)",1,2,2
"org.apache.derby.client.am.Connection.completePiggyBackSchema(String)",1,2,2
"org.apache.derby.client.am.Connection.completeReset(boolean,boolean)",1,6,6
"org.apache.derby.client.am.Connection.completeSpecificRollback(UnitOfWorkListener)",3,3,3
"org.apache.derby.client.am.Connection.completeSqlca(Sqlca)",1,4,4
"org.apache.derby.client.am.Connection.completeTransactionStart()",1,1,1
"org.apache.derby.client.am.Connection.createBlob()",1,5,6
"org.apache.derby.client.am.Connection.createClob()",1,5,6
"org.apache.derby.client.am.Connection.createStatement()",1,4,4
"org.apache.derby.client.am.Connection.createStatement(int,int)",1,4,4
"org.apache.derby.client.am.Connection.createStatement(int,int,int)",1,4,4
"org.apache.derby.client.am.Connection.createStatementX(int,int,int)",1,3,4
"org.apache.derby.client.am.Connection.downgradeResultSetType(int)",2,2,2
"org.apache.derby.client.am.Connection.finalize()",2,2,3
"org.apache.derby.client.am.Connection.flowAutoCommit()",2,2,2
"org.apache.derby.client.am.Connection.flowClose()",1,5,5
"org.apache.derby.client.am.Connection.flowCommit()",1,2,2
"org.apache.derby.client.am.Connection.flowRollback()",1,2,2
"org.apache.derby.client.am.Connection.getAutoCommit()",2,3,4
"org.apache.derby.client.am.Connection.getCatalog()",1,3,3
"org.apache.derby.client.am.Connection.getCurrentSchemaName()",2,5,5
"org.apache.derby.client.am.Connection.getHoldability()",1,3,3
"org.apache.derby.client.am.Connection.getMetaData()",1,3,3
"org.apache.derby.client.am.Connection.getServerVersion()",1,1,1
"org.apache.derby.client.am.Connection.getTransactionID()",1,1,1
"org.apache.derby.client.am.Connection.getTransactionIsolation()",2,11,14
"org.apache.derby.client.am.Connection.getTypeMap()",1,4,4
"org.apache.derby.client.am.Connection.getWarnings()",1,4,4
"org.apache.derby.client.am.Connection.getXAState()",1,1,1
"org.apache.derby.client.am.Connection.holdability()",2,1,3
"org.apache.derby.client.am.Connection.initConnection(LogWriter,String,ClientBaseDataSource)",1,2,8
"org.apache.derby.client.am.Connection.isClosed()",1,2,2
"org.apache.derby.client.am.Connection.isClosedX()",1,1,1
"org.apache.derby.client.am.Connection.isPhysicalConnClosed()",1,1,2
"org.apache.derby.client.am.Connection.isReadOnly()",1,3,3
"org.apache.derby.client.am.Connection.isXAConnection()",1,1,1
"org.apache.derby.client.am.Connection.lightReset()",2,1,3
"org.apache.derby.client.am.Connection.locatorProcedureCall()",1,1,2
"org.apache.derby.client.am.Connection.markClosed(boolean)",1,2,2
"org.apache.derby.client.am.Connection.markClosedForReuse(boolean)",1,1,1
"org.apache.derby.client.am.Connection.markStatementsClosed()",1,2,2
"org.apache.derby.client.am.Connection.nativeSQL(String)",1,4,4
"org.apache.derby.client.am.Connection.nativeSQLX(String)",4,3,4
"org.apache.derby.client.am.Connection.prepareCall(String)",1,4,4
"org.apache.derby.client.am.Connection.prepareCall(String,int,int)",1,4,4
"org.apache.derby.client.am.Connection.prepareCall(String,int,int,int)",1,4,4
"org.apache.derby.client.am.Connection.prepareCallX(String,int,int,int)",1,1,1
"org.apache.derby.client.am.Connection.prepareDynamicCatalogQuery(String)",1,1,1
"org.apache.derby.client.am.Connection.prepareMessageProc(String)",1,1,1
"org.apache.derby.client.am.Connection.preparePositionedUpdateStatement(String,Section)",1,1,1
"org.apache.derby.client.am.Connection.prepareStatement(String)",1,4,4
"org.apache.derby.client.am.Connection.prepareStatement(String,String[])",1,4,6
"org.apache.derby.client.am.Connection.prepareStatement(String,int)",1,4,4
"org.apache.derby.client.am.Connection.prepareStatement(String,int,int)",1,4,4
"org.apache.derby.client.am.Connection.prepareStatement(String,int,int,int)",1,4,4
"org.apache.derby.client.am.Connection.prepareStatement(String,int[])",1,4,6
"org.apache.derby.client.am.Connection.prepareStatementX(String,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.am.Connection.readAutoCommit()",1,2,2
"org.apache.derby.client.am.Connection.readCloseStatements()",1,2,2
"org.apache.derby.client.am.Connection.readCommit()",1,2,2
"org.apache.derby.client.am.Connection.readRollback()",1,2,2
"org.apache.derby.client.am.Connection.readTransactionStart()",1,1,1
"org.apache.derby.client.am.Connection.releaseSavepoint(Savepoint)",4,5,10
"org.apache.derby.client.am.Connection.reset(LogWriter,boolean)",1,3,3
"org.apache.derby.client.am.Connection.resetConnection(LogWriter,boolean)",1,2,3
"org.apache.derby.client.am.Connection.resetPrepareCall(CallableStatement)",1,1,1
"org.apache.derby.client.am.Connection.resetPrepareStatement(PreparedStatement)",1,1,1
"org.apache.derby.client.am.Connection.resetStatement(Statement)",1,1,1
"org.apache.derby.client.am.Connection.rollback()",1,3,3
"org.apache.derby.client.am.Connection.rollback(Savepoint)",4,5,10
"org.apache.derby.client.am.Connection.setAutoCommit(boolean)",4,5,7
"org.apache.derby.client.am.Connection.setCatalog(String)",1,3,3
"org.apache.derby.client.am.Connection.setHoldability(int)",3,3,6
"org.apache.derby.client.am.Connection.setInUnitOfWork(boolean)",1,1,1
"org.apache.derby.client.am.Connection.setReadOnly(boolean)",1,3,3
"org.apache.derby.client.am.Connection.setSavepoint()",2,3,5
"org.apache.derby.client.am.Connection.setSavepoint(String)",3,3,5
"org.apache.derby.client.am.Connection.setSavepointX(Savepoint)",1,4,5
"org.apache.derby.client.am.Connection.setTransactionIsolation(int)",1,3,3
"org.apache.derby.client.am.Connection.setTransactionIsolationX(int)",2,5,12
"org.apache.derby.client.am.Connection.setTypeMap(Map)",1,3,3
"org.apache.derby.client.am.Connection.setXAState(int)",1,1,1
"org.apache.derby.client.am.Connection.transactionInProgress()",1,1,2
"org.apache.derby.client.am.Connection.translateIsolation(String)",5,4,5
"org.apache.derby.client.am.Connection.willAutoCommitGenerateFlow()",3,1,3
"org.apache.derby.client.am.Connection.writeAutoCommit()",1,2,2
"org.apache.derby.client.am.Connection.writeCloseStatements()",1,2,2
"org.apache.derby.client.am.Connection.writeCommit()",1,2,2
"org.apache.derby.client.am.Connection.writeRollback()",1,2,2
"org.apache.derby.client.am.Connection.writeTransactionStart(Statement)",1,2,2
"org.apache.derby.client.am.CrossConverters.CrossConverters(Agent)",1,1,1
"org.apache.derby.client.am.CrossConverters.date_valueOf(String)",2,1,2
"org.apache.derby.client.am.CrossConverters.getBigDecimalFromBoolean(boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.getBigDecimalFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getBooleanFromBigDecimal(BigDecimal)",1,1,1
"org.apache.derby.client.am.CrossConverters.getBooleanFromByte(byte)",1,1,1
"org.apache.derby.client.am.CrossConverters.getBooleanFromDouble(double)",1,1,1
"org.apache.derby.client.am.CrossConverters.getBooleanFromFloat(float)",1,1,1
"org.apache.derby.client.am.CrossConverters.getBooleanFromInt(int)",1,1,1
"org.apache.derby.client.am.CrossConverters.getBooleanFromLong(long)",1,1,1
"org.apache.derby.client.am.CrossConverters.getBooleanFromShort(short)",1,1,1
"org.apache.derby.client.am.CrossConverters.getBooleanFromString(String)",1,2,2
"org.apache.derby.client.am.CrossConverters.getByteFromBigDecimal(BigDecimal)",2,4,4
"org.apache.derby.client.am.CrossConverters.getByteFromBoolean(boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.getByteFromDouble(double)",2,2,4
"org.apache.derby.client.am.CrossConverters.getByteFromFloat(float)",2,2,4
"org.apache.derby.client.am.CrossConverters.getByteFromInt(int)",2,2,4
"org.apache.derby.client.am.CrossConverters.getByteFromLong(long)",2,2,4
"org.apache.derby.client.am.CrossConverters.getByteFromShort(short)",2,2,4
"org.apache.derby.client.am.CrossConverters.getByteFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getDateFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getDateFromTime(Time)",1,1,1
"org.apache.derby.client.am.CrossConverters.getDateFromTimestamp(Timestamp)",1,1,1
"org.apache.derby.client.am.CrossConverters.getDoubleFromBigDecimal(BigDecimal)",2,4,4
"org.apache.derby.client.am.CrossConverters.getDoubleFromBoolean(boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.getDoubleFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getFloatFromBigDecimal(BigDecimal)",2,4,4
"org.apache.derby.client.am.CrossConverters.getFloatFromBoolean(boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.getFloatFromDouble(double)",2,3,3
"org.apache.derby.client.am.CrossConverters.getFloatFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getInputJdbcType(int)",5,2,5
"org.apache.derby.client.am.CrossConverters.getIntFromBigDecimal(BigDecimal)",2,4,4
"org.apache.derby.client.am.CrossConverters.getIntFromBoolean(boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.getIntFromDouble(double)",2,2,4
"org.apache.derby.client.am.CrossConverters.getIntFromFloat(float)",2,2,4
"org.apache.derby.client.am.CrossConverters.getIntFromLong(long)",2,2,4
"org.apache.derby.client.am.CrossConverters.getIntFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getLongFromBigDecimal(BigDecimal)",2,4,4
"org.apache.derby.client.am.CrossConverters.getLongFromBoolean(boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.getLongFromDouble(double)",2,2,4
"org.apache.derby.client.am.CrossConverters.getLongFromFloat(float)",2,2,4
"org.apache.derby.client.am.CrossConverters.getLongFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getShortFromBigDecimal(BigDecimal)",2,4,4
"org.apache.derby.client.am.CrossConverters.getShortFromBoolean(boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.getShortFromDouble(double)",2,2,4
"org.apache.derby.client.am.CrossConverters.getShortFromFloat(float)",2,2,4
"org.apache.derby.client.am.CrossConverters.getShortFromInt(int)",2,2,4
"org.apache.derby.client.am.CrossConverters.getShortFromLong(long)",2,2,4
"org.apache.derby.client.am.CrossConverters.getShortFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getStringFromBoolean(boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.getStringFromBytes(byte[])",1,3,3
"org.apache.derby.client.am.CrossConverters.getTimeFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getTimeFromTimestamp(Timestamp)",1,1,1
"org.apache.derby.client.am.CrossConverters.getTimestampFromDate(Date)",1,1,1
"org.apache.derby.client.am.CrossConverters.getTimestampFromString(String)",1,1,2
"org.apache.derby.client.am.CrossConverters.getTimestampFromTime(Time)",1,1,1
"org.apache.derby.client.am.CrossConverters.parseByte(String)",2,1,3
"org.apache.derby.client.am.CrossConverters.parseInt(String)",12,4,13
"org.apache.derby.client.am.CrossConverters.parseLong(String)",12,4,13
"org.apache.derby.client.am.CrossConverters.parseShort(String)",2,1,3
"org.apache.derby.client.am.CrossConverters.setBooleanFromObject(Object,int)",9,9,9
"org.apache.derby.client.am.CrossConverters.setByteFromObject(Object,int)",9,9,9
"org.apache.derby.client.am.CrossConverters.setBytesFromStream(InputStream,int)",2,3,5
"org.apache.derby.client.am.CrossConverters.setObject(int,BigDecimal)",14,23,24
"org.apache.derby.client.am.CrossConverters.setObject(int,Blob)",3,2,3
"org.apache.derby.client.am.CrossConverters.setObject(int,Clob)",3,2,3
"org.apache.derby.client.am.CrossConverters.setObject(int,Date)",5,4,5
"org.apache.derby.client.am.CrossConverters.setObject(int,Object)",19,19,19
"org.apache.derby.client.am.CrossConverters.setObject(int,Reader,int)",5,3,5
"org.apache.derby.client.am.CrossConverters.setObject(int,String)",13,11,14
"org.apache.derby.client.am.CrossConverters.setObject(int,Time)",4,3,4
"org.apache.derby.client.am.CrossConverters.setObject(int,Timestamp)",6,5,6
"org.apache.derby.client.am.CrossConverters.setObject(int,boolean)",1,1,2
"org.apache.derby.client.am.CrossConverters.setObject(int,byte)",1,1,1
"org.apache.derby.client.am.CrossConverters.setObject(int,byte[])",4,2,4
"org.apache.derby.client.am.CrossConverters.setObject(int,double)",14,9,24
"org.apache.derby.client.am.CrossConverters.setObject(int,float)",14,10,24
"org.apache.derby.client.am.CrossConverters.setObject(int,int)",10,5,12
"org.apache.derby.client.am.CrossConverters.setObject(int,long)",11,6,15
"org.apache.derby.client.am.CrossConverters.setObject(int,short)",9,4,9
"org.apache.derby.client.am.CrossConverters.setObjectFromBinaryStream(int,InputStream,int)",5,3,5
"org.apache.derby.client.am.CrossConverters.setObjectFromCharacterStream(int,InputStream,String,int)",5,3,5
"org.apache.derby.client.am.CrossConverters.setStringFromReader(Reader,int)",2,3,5
"org.apache.derby.client.am.CrossConverters.setStringFromStream(InputStream,String,int)",2,3,6
"org.apache.derby.client.am.CrossConverters.skipPadding(String,int,int)",3,2,3
"org.apache.derby.client.am.CrossConverters.time_valueOf(String)",2,1,2
"org.apache.derby.client.am.CrossConverters.timestamp_valueOf(String)",2,1,2
"org.apache.derby.client.am.Cursor.Cursor(Agent)",1,1,1
"org.apache.derby.client.am.Cursor.Cursor(Agent,byte[])",1,1,1
"org.apache.derby.client.am.Cursor.allRowsReceivedFromServer()",1,1,1
"org.apache.derby.client.am.Cursor.allocateCharBuffer()",2,2,4
"org.apache.derby.client.am.Cursor.currentRowPositionIsEqualToNextRowPosition()",1,1,1
"org.apache.derby.client.am.Cursor.dataBufferHasUnprocessedData()",1,1,1
"org.apache.derby.client.am.Cursor.getArray(int)",1,1,1
"org.apache.derby.client.am.Cursor.getAsciiStream(int)",8,9,11
"org.apache.derby.client.am.Cursor.getBigDecimal(int)",9,10,10
"org.apache.derby.client.am.Cursor.getBinaryStream(int)",5,6,6
"org.apache.derby.client.am.Cursor.getBlob(int)",3,3,3
"org.apache.derby.client.am.Cursor.getBoolean(int)",10,10,10
"org.apache.derby.client.am.Cursor.getByte(int)",10,10,10
"org.apache.derby.client.am.Cursor.getBytes(int)",4,4,6
"org.apache.derby.client.am.Cursor.getBytesFromVARCHAR(int)",1,1,1
"org.apache.derby.client.am.Cursor.getCHAR(int)",3,3,5
"org.apache.derby.client.am.Cursor.getCharacterStream(int)",8,9,12
"org.apache.derby.client.am.Cursor.getClob(int)",3,3,3
"org.apache.derby.client.am.Cursor.getColumnPrecision(int)",1,1,1
"org.apache.derby.client.am.Cursor.getColumnScale(int)",1,1,1
"org.apache.derby.client.am.Cursor.getDATE(int)",1,1,2
"org.apache.derby.client.am.Cursor.getDataBuffer()",1,1,1
"org.apache.derby.client.am.Cursor.getDataBufferLength()",1,1,1
"org.apache.derby.client.am.Cursor.getDate(int)",6,6,6
"org.apache.derby.client.am.Cursor.getDateFromTIMESTAMP(int)",1,1,2
"org.apache.derby.client.am.Cursor.getDouble(int)",9,9,10
"org.apache.derby.client.am.Cursor.getDoubleFromDECIMAL(int)",1,1,3
"org.apache.derby.client.am.Cursor.getFloat(int)",10,10,10
"org.apache.derby.client.am.Cursor.getInt(int)",10,10,10
"org.apache.derby.client.am.Cursor.getIsRowUpdated()",1,1,1
"org.apache.derby.client.am.Cursor.getIsUpdateDeleteHole()",1,1,1
"org.apache.derby.client.am.Cursor.getLastValidBytePosition()",1,1,1
"org.apache.derby.client.am.Cursor.getLocatorProcedures()",1,1,1
"org.apache.derby.client.am.Cursor.getLong(int)",10,10,10
"org.apache.derby.client.am.Cursor.getLongFromDECIMAL(int)",1,1,3
"org.apache.derby.client.am.Cursor.getObject(int)",17,17,17
"org.apache.derby.client.am.Cursor.getPosition()",1,1,1
"org.apache.derby.client.am.Cursor.getRecyclableCalendar()",1,1,2
"org.apache.derby.client.am.Cursor.getRef(int)",1,1,1
"org.apache.derby.client.am.Cursor.getShort(int)",10,10,10
"org.apache.derby.client.am.Cursor.getString(int)",13,17,20
"org.apache.derby.client.am.Cursor.getStringFromDATE(int)",1,1,1
"org.apache.derby.client.am.Cursor.getStringFromTIME(int)",1,1,1
"org.apache.derby.client.am.Cursor.getStringFromTIMESTAMP(int)",1,1,1
"org.apache.derby.client.am.Cursor.getStringWithoutConvert(int,int)",1,1,2
"org.apache.derby.client.am.Cursor.getTIME(int)",1,1,2
"org.apache.derby.client.am.Cursor.getTIMESTAMP(int)",1,1,2
"org.apache.derby.client.am.Cursor.getTime(int)",6,6,6
"org.apache.derby.client.am.Cursor.getTimeFromTIMESTAMP(int)",1,1,2
"org.apache.derby.client.am.Cursor.getTimestamp(int)",7,7,7
"org.apache.derby.client.am.Cursor.getTimestampFromDATE(int)",1,1,2
"org.apache.derby.client.am.Cursor.getTimestampFromTIME(int)",1,1,2
"org.apache.derby.client.am.Cursor.getUnicodeStream(int)",8,8,12
"org.apache.derby.client.am.Cursor.getVARCHAR(int)",3,3,5
"org.apache.derby.client.am.Cursor.get_BIGINT(int)",1,1,1
"org.apache.derby.client.am.Cursor.get_CHAR_FOR_BIT_DATA(int)",1,2,2
"org.apache.derby.client.am.Cursor.get_DECIMAL(int)",1,1,2
"org.apache.derby.client.am.Cursor.get_DOUBLE(int)",1,1,1
"org.apache.derby.client.am.Cursor.get_FLOAT(int)",1,1,1
"org.apache.derby.client.am.Cursor.get_INTEGER(int)",1,1,1
"org.apache.derby.client.am.Cursor.get_SMALLINT(int)",1,1,1
"org.apache.derby.client.am.Cursor.get_VARCHAR_FOR_BIT_DATA(int)",1,2,2
"org.apache.derby.client.am.Cursor.incrementRowsReadEvent()",1,1,1
"org.apache.derby.client.am.Cursor.makeNextRowPositionCurrent()",1,1,1
"org.apache.derby.client.am.Cursor.markCurrentRowPosition()",1,1,1
"org.apache.derby.client.am.Cursor.markNextRowPosition()",1,1,1
"org.apache.derby.client.am.Cursor.next()",1,1,1
"org.apache.derby.client.am.Cursor.nullDataForGC()",1,1,1
"org.apache.derby.client.am.Cursor.repositionCursorToCurrentRow()",1,1,1
"org.apache.derby.client.am.Cursor.repositionCursorToNextRow()",1,1,1
"org.apache.derby.client.am.Cursor.resetDataBuffer()",1,1,1
"org.apache.derby.client.am.Cursor.setAllRowsReceivedFromServer(boolean)",1,1,1
"org.apache.derby.client.am.Cursor.setBuffer(byte[])",1,1,1
"org.apache.derby.client.am.Cursor.setIsRowUpdated(boolean)",1,1,1
"org.apache.derby.client.am.Cursor.setIsUpdataDeleteHole(int,boolean)",1,2,3
"org.apache.derby.client.am.Cursor.setNumberOfColumns(int)",1,1,1
"org.apache.derby.client.am.Cursor.setPosition(int)",1,1,1
"org.apache.derby.client.am.Cursor.stepNext(boolean)",3,2,3
"org.apache.derby.client.am.DatabaseMetaData.DatabaseMetaData(Agent,Connection,ProductLevel)",1,1,3
"org.apache.derby.client.am.DatabaseMetaData.allProceduresAreCallable()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.allTablesAreSelectable()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.autoCommitFailureClosesAllResultSets()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.checkForClosedConnection()",1,2,2
"org.apache.derby.client.am.DatabaseMetaData.checkForClosedConnectionX()",2,2,2
"org.apache.derby.client.am.DatabaseMetaData.checkServerJdbcVersionX(String,int,int)",2,1,4
"org.apache.derby.client.am.DatabaseMetaData.dataDefinitionCausesTransactionCommit()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.dataDefinitionIgnoredInTransactions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.deletesAreDetected(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.doesMaxRowSizeIncludeBlobs()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.executeCatalogQuery(PreparedStatement)",3,4,4
"org.apache.derby.client.am.DatabaseMetaData.getAttributes(String,String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getAttributesX()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getBestRowIdentifier(String,String,String,int,boolean)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getBestRowIdentifierX(String,String,String,int,boolean)",2,2,3
"org.apache.derby.client.am.DatabaseMetaData.getCatalogSeparator()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getCatalogTerm()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getCatalogs()",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getCatalogsX()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getClientInfoProperties()",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getClientInfoPropertiesX()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getColumnPrivileges(String,String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getColumnPrivilegesX(String,String,String,String)",2,1,2
"org.apache.derby.client.am.DatabaseMetaData.getColumns(String,String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getColumnsX(String,String,String,String)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getConnection()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getCrossReference(String,String,String,String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getCrossReferenceX(String,String,String,String,String,String)",3,1,3
"org.apache.derby.client.am.DatabaseMetaData.getDatabaseMajorVersion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getDatabaseMinorVersion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getDatabaseProductName()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getDatabaseProductVersion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getDefaultTransactionIsolation()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getDriverMajorVersion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getDriverMinorVersion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getDriverName()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getDriverVersion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getExportedKeys(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getExportedKeysX(String,String,String)",2,2,3
"org.apache.derby.client.am.DatabaseMetaData.getExtraNameCharacters()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getFunctionColumns(String,String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getFunctionColumnsX(String,String,String,String)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getFunctions(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getFunctionsX(String,String,String)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getIdentifierQuoteString()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getImportedKeys(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getImportedKeysX(String,String,String)",2,2,3
"org.apache.derby.client.am.DatabaseMetaData.getIndexInfo(String,String,String,boolean,boolean)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getIndexInfoX(String,String,String,boolean,boolean)",2,3,4
"org.apache.derby.client.am.DatabaseMetaData.getJDBCMajorVersion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getJDBCMinorVersion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxBinaryLiteralLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxCatalogNameLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxCharLiteralLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxColumnNameLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxColumnsInGroupBy()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxColumnsInIndex()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxColumnsInOrderBy()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxColumnsInSelect()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxColumnsInTable()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxConnections()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxCursorNameLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxIndexLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxProcedureNameLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxRowSize()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxSchemaNameLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxStatementLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxStatements()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxTableNameLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxTablesInSelect()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMaxUserNameLength()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoBoolean(int)",2,3,3
"org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoBooleanWithType(int,int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoBooleanWithTypeClient(int,int)",6,8,8
"org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoBooleanWithTypeServer(int,int)",3,4,5
"org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoBoolean_supportsConvert(int,int,int)",5,6,7
"org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoInt(int)",2,3,3
"org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoInt_SupportsResultSetConcurrency(int,int,int)",5,6,7
"org.apache.derby.client.am.DatabaseMetaData.getMetaDataInfoString(int)",2,2,3
"org.apache.derby.client.am.DatabaseMetaData.getNumericFunctions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getOptions()",1,1,2
"org.apache.derby.client.am.DatabaseMetaData.getPrimaryKeys(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getPrimaryKeysX(String,String,String)",2,1,2
"org.apache.derby.client.am.DatabaseMetaData.getProcedureColumns(String,String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getProcedureColumnsX(String,String,String,String)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getProcedureTerm()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getProcedures(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getProceduresX(String,String,String)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getResultSetHoldability()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getSQLKeywords()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getSQLStateType()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getSchemaTerm()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getSchemas()",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getSchemas(String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getSchemasX()",1,1,2
"org.apache.derby.client.am.DatabaseMetaData.getSchemasX(String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getSearchStringEscape()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getStringFunctions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getSuperTables(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getSuperTablesX()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getSuperTypes(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getSuperTypesX()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getSystemFunctions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getTablePrivileges(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getTablePrivilegesX(String,String,String)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getTableTypes()",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getTableTypesX()",1,1,2
"org.apache.derby.client.am.DatabaseMetaData.getTables(String,String,String,String[])",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getTablesX(String,String,String,String[])",1,9,10
"org.apache.derby.client.am.DatabaseMetaData.getTimeDateFunctions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getTypeInfo()",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getTypeInfoX()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getUDTs(String,String,String,int[])",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getUDTsX(String,String,String,int[])",1,3,4
"org.apache.derby.client.am.DatabaseMetaData.getURL()",1,2,2
"org.apache.derby.client.am.DatabaseMetaData.getUserName()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.getVersionColumns(String,String,String)",1,3,3
"org.apache.derby.client.am.DatabaseMetaData.getVersionColumnsX(String,String,String)",2,1,2
"org.apache.derby.client.am.DatabaseMetaData.insertsAreDetected(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.isCatalogAtStart()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.isReadOnly()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.locatorsUpdateCopy()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.metaDataInfoCall()",1,2,4
"org.apache.derby.client.am.DatabaseMetaData.nullPlusNonNullIsNull()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.nullsAreSortedAtEnd()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.nullsAreSortedAtStart()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.nullsAreSortedHigh()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.nullsAreSortedLow()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.othersDeletesAreVisible(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.othersInsertsAreVisible(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.othersUpdatesAreVisible(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.ownDeletesAreVisible(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.ownInsertsAreVisible(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.ownUpdatesAreVisible(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.prepareMetaDataQuery(String)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.storesLowerCaseIdentifiers()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.storesLowerCaseQuotedIdentifiers()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.storesMixedCaseIdentifiers()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.storesMixedCaseQuotedIdentifiers()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.storesUpperCaseIdentifiers()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.storesUpperCaseQuotedIdentifiers()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsANSI92EntryLevelSQL()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsANSI92FullSQL()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsANSI92IntermediateSQL()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsAlterTableWithAddColumn()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsAlterTableWithDropColumn()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsBatchUpdates()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsCatalogsInDataManipulation()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsCatalogsInIndexDefinitions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsCatalogsInPrivilegeDefinitions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsCatalogsInProcedureCalls()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsCatalogsInTableDefinitions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsColumnAliasing()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsConvert()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsConvert(int,int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsCoreSQLGrammar()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsCorrelatedSubqueries()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsDataManipulationTransactionsOnly()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsDifferentTableCorrelationNames()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsExpressionsInOrderBy()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsExtendedSQLGrammar()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsFullOuterJoins()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsGetGeneratedKeys()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsGroupBy()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsGroupByBeyondSelect()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsGroupByUnrelated()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsIntegrityEnhancementFacility()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsLikeEscapeClause()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsLimitedOuterJoins()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsMinimumSQLGrammar()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsMixedCaseIdentifiers()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsMixedCaseQuotedIdentifiers()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsMultipleOpenResults()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsMultipleResultSets()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsMultipleTransactions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsNamedParameters()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsNonNullableColumns()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsOpenCursorsAcrossCommit()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsOpenCursorsAcrossRollback()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsOpenStatementsAcrossCommit()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsOpenStatementsAcrossRollback()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsOrderByUnrelated()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsOuterJoins()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsPositionedDelete()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsPositionedUpdate()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsResultSetConcurrency(int,int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsResultSetHoldability(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsResultSetType(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSavepoints()",2,1,2
"org.apache.derby.client.am.DatabaseMetaData.supportsSchemasInDataManipulation()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSchemasInIndexDefinitions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSchemasInPrivilegeDefinitions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSchemasInProcedureCalls()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSchemasInTableDefinitions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSelectForUpdate()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsStatementPooling()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsStoredFunctionsUsingCallSyntax()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsStoredProcedures()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSubqueriesInComparisons()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSubqueriesInExists()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSubqueriesInIns()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsSubqueriesInQuantifieds()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsTableCorrelationNames()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsTransactionIsolationLevel(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsTransactions()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsUnion()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.supportsUnionAll()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.updatesAreDetected(int)",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.usesLocalFilePerTable()",1,1,1
"org.apache.derby.client.am.DatabaseMetaData.usesLocalFiles()",1,1,1
"org.apache.derby.client.am.DateTime.DateTime()",1,1,1
"org.apache.derby.client.am.DateTime.dateBytesToDate(byte[],int,Calendar,String)",2,2,2
"org.apache.derby.client.am.DateTime.dateBytesToTimestamp(byte[],int,Calendar,String)",1,1,1
"org.apache.derby.client.am.DateTime.dateToDateBytes(byte[],int,Date)",2,1,2
"org.apache.derby.client.am.DateTime.dateToTimestampBytes(byte[],int,Date)",2,1,2
"org.apache.derby.client.am.DateTime.getCleanCalendar(Calendar)",2,2,2
"org.apache.derby.client.am.DateTime.parseTimestampString(String,Calendar)",1,1,1
"org.apache.derby.client.am.DateTime.timeBytesToTime(byte[],int,Calendar,String)",1,1,1
"org.apache.derby.client.am.DateTime.timeBytesToTimestamp(byte[],int,Calendar,String)",1,1,1
"org.apache.derby.client.am.DateTime.timeToTimeBytes(byte[],int,Time)",1,1,1
"org.apache.derby.client.am.DateTime.timeToTimestampBytes(byte[],int,Time)",1,1,1
"org.apache.derby.client.am.DateTime.timestampBytesToDate(byte[],int,Calendar,String)",1,1,1
"org.apache.derby.client.am.DateTime.timestampBytesToTime(byte[],int,Calendar,String)",1,1,1
"org.apache.derby.client.am.DateTime.timestampBytesToTimestamp(byte[],int,Calendar,String)",1,1,1
"org.apache.derby.client.am.DateTime.timestampToDateBytes(byte[],int,Timestamp)",2,1,2
"org.apache.derby.client.am.DateTime.timestampToTimeBytes(byte[],int,Timestamp)",1,1,1
"org.apache.derby.client.am.DateTime.timestampToTimestampBytes(byte[],int,Timestamp)",2,1,2
"org.apache.derby.client.am.Decimal.Decimal()",1,1,1
"org.apache.derby.client.am.Decimal.bigDecimalToPackedDecimalBytes(byte[],int,BigDecimal,int,int)",5,9,16
"org.apache.derby.client.am.Decimal.computeMagnitude(int[])",1,1,3
"org.apache.derby.client.am.Decimal.getBigDecimal(byte[],int,int,int)",5,5,6
"org.apache.derby.client.am.Decimal.getDouble(byte[],int,int,int)",5,5,6
"org.apache.derby.client.am.Decimal.getLong(byte[],int,int,int)",2,2,6
"org.apache.derby.client.am.Decimal.packedNybblesToInt(byte[],int,int,int)",1,1,4
"org.apache.derby.client.am.Decimal.packedNybblesToLong(byte[],int,int,int)",1,1,4
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId)",1,1,1
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId,Object)",1,1,1
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId,Object,Object)",1,1,1
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId,Object,Throwable)",1,1,1
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId,Object[])",1,1,1
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId,Object[],SqlCode)",1,1,1
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId,Object[],SqlCode,Throwable)",1,2,3
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId,Object[],Throwable)",1,1,1
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,ClientMessageId,SqlCode)",1,1,1
"org.apache.derby.client.am.DisconnectException.DisconnectException(Agent,SqlException)",1,1,1
"org.apache.derby.client.am.EncryptionManager.EncryptionManager(Agent)",2,1,3
"org.apache.derby.client.am.EncryptionManager.EncryptionManager(Agent,String)",1,1,2
"org.apache.derby.client.am.EncryptionManager.calculateEncryptionToken(int,byte[])",1,1,8
"org.apache.derby.client.am.EncryptionManager.decryptData(byte[],int,byte[],byte[])",1,4,8
"org.apache.derby.client.am.EncryptionManager.encryptData(byte[],int,byte[],byte[])",1,4,8
"org.apache.derby.client.am.EncryptionManager.generatePrivateKey(byte[])",3,1,13
"org.apache.derby.client.am.EncryptionManager.generateSeed()",1,1,1
"org.apache.derby.client.am.EncryptionManager.keyParityCheck(byte[])",2,1,7
"org.apache.derby.client.am.EncryptionManager.obtainPublicKey()",3,1,7
"org.apache.derby.client.am.EncryptionManager.resetSecurityKeys()",1,1,1
"org.apache.derby.client.am.EncryptionManager.setInitVector(byte[])",1,1,1
"org.apache.derby.client.am.EncryptionManager.setSecKey(byte[])",1,1,1
"org.apache.derby.client.am.EncryptionManager.substitutePassword(String,String,byte[],byte[])",1,3,3
"org.apache.derby.client.am.EncryptionManager.toHexByte(String,int,int)",1,2,2
"org.apache.derby.client.am.EncryptionManager.toHexString(byte[],int,int)",1,2,2
"org.apache.derby.client.am.ErrorKey.getErrorCode()",1,1,1
"org.apache.derby.client.am.ErrorKey.getResourceKey()",1,1,1
"org.apache.derby.client.am.ErrorKey.getSQLState()",1,1,1
"org.apache.derby.client.am.ExceptionFormatter.printTrace(SQLException,PrintWriter,String,boolean)",1,7,7
"org.apache.derby.client.am.ExceptionFormatter.printTrace(SqlException,PrintWriter,String,boolean)",1,12,12
"org.apache.derby.client.am.ExceptionFormatter.printTrace(Sqlca,PrintWriter,String)",1,1,1
"org.apache.derby.client.am.ExceptionFormatter.printTrace(Throwable,PrintWriter,String)",1,1,1
"org.apache.derby.client.am.ExceptionFormatter.printTrace(XAException,PrintWriter,String)",1,1,1
"org.apache.derby.client.am.FailedProperties40.FailedProperties40(Properties)",2,3,4
"org.apache.derby.client.am.FailedProperties40.getFirstKey()",1,1,1
"org.apache.derby.client.am.FailedProperties40.getFirstValue()",1,1,1
"org.apache.derby.client.am.FailedProperties40.getProperties()",1,1,1
"org.apache.derby.client.am.FailedProperties40.makeProperties(String,String)",1,2,3
"org.apache.derby.client.am.FloatingPoint.FloatingPoint()",1,1,1
"org.apache.derby.client.am.FloatingPoint.convertFromByteToInt(byte[],int)",1,1,1
"org.apache.derby.client.am.FloatingPoint.convertFromByteToLong(byte[],int)",1,1,1
"org.apache.derby.client.am.FloatingPoint.doubleToIeee754Bytes(byte[],int,double)",1,1,1
"org.apache.derby.client.am.FloatingPoint.floatToIeee754Bytes(byte[],int,float)",1,1,1
"org.apache.derby.client.am.FloatingPoint.getDouble(byte[],int)",1,1,1
"org.apache.derby.client.am.FloatingPoint.getFloat(byte[],int)",1,1,1
"org.apache.derby.client.am.GetFileInputStreamAction.GetFileInputStreamAction(String)",1,1,1
"org.apache.derby.client.am.GetFileInputStreamAction.getCanonicalPath()",1,1,1
"org.apache.derby.client.am.GetFileInputStreamAction.run()",1,1,1
"org.apache.derby.client.am.GetResourceBundleAction.GetResourceBundleAction(String)",1,1,1
"org.apache.derby.client.am.GetResourceBundleAction.run()",1,1,1
"org.apache.derby.client.am.GetResourceBundleAction.setResourceBundleName(String)",1,1,1
"org.apache.derby.client.am.GetResourceInputStreamAction.GetResourceInputStreamAction(String)",1,1,1
"org.apache.derby.client.am.GetResourceInputStreamAction.getResourceLoaderId()",1,1,1
"org.apache.derby.client.am.GetResourceInputStreamAction.getResourcePath()",1,1,1
"org.apache.derby.client.am.GetResourceInputStreamAction.run()",7,7,9
"org.apache.derby.client.am.GetResourceInputStreamAction.setResourceName(String)",1,1,1
"org.apache.derby.client.am.GetSystemPropertiesAction.GetSystemPropertiesAction()",1,1,1
"org.apache.derby.client.am.GetSystemPropertiesAction.getSystemProperties()",1,1,1
"org.apache.derby.client.am.GetSystemPropertiesAction.run()",1,1,1
"org.apache.derby.client.am.LOBStateTracker.LOBStateTracker(int[],boolean[],boolean)",1,1,1
"org.apache.derby.client.am.LOBStateTracker.checkCurrentRow(Cursor)",6,5,8
"org.apache.derby.client.am.LOBStateTracker.discardState()",1,1,1
"org.apache.derby.client.am.LOBStateTracker.markAccessed(int)",1,1,1
"org.apache.derby.client.am.Lob.Lob(Agent,boolean)",1,1,1
"org.apache.derby.client.am.Lob.checkForClosedConnection()",2,2,2
"org.apache.derby.client.am.Lob.checkForLocatorValidity()",1,1,1
"org.apache.derby.client.am.Lob.checkPosAndLength(long,long)",4,4,4
"org.apache.derby.client.am.Lob.checkValidity()",2,4,4
"org.apache.derby.client.am.Lob.completeLocalCommit()",1,1,1
"org.apache.derby.client.am.Lob.completeLocalCommit(Iterator)",1,1,1
"org.apache.derby.client.am.Lob.completeLocalRollback()",1,1,1
"org.apache.derby.client.am.Lob.completeLocalRollback(Iterator)",1,1,1
"org.apache.derby.client.am.Lob.finalize()",1,1,1
"org.apache.derby.client.am.Lob.getAgent()",1,1,1
"org.apache.derby.client.am.Lob.getLocator()",1,1,1
"org.apache.derby.client.am.Lob.getLocatorLength()",1,1,1
"org.apache.derby.client.am.Lob.getUpdateCount()",1,1,1
"org.apache.derby.client.am.Lob.incrementUpdateCount()",1,1,1
"org.apache.derby.client.am.Lob.isLayerBStreamingPossible(Agent)",1,3,3
"org.apache.derby.client.am.Lob.isLengthObtained(Lob)",1,1,1
"org.apache.derby.client.am.Lob.isLocator()",1,1,1
"org.apache.derby.client.am.Lob.listenToUnitOfWork()",1,1,1
"org.apache.derby.client.am.Lob.materializeStream(InputStream,String)",2,4,9
"org.apache.derby.client.am.Lob.setSqlLength(long)",1,1,1
"org.apache.derby.client.am.Lob.sqlLength()",4,3,4
"org.apache.derby.client.am.Lob.willBeLayerBStreamed()",1,1,1
"org.apache.derby.client.am.LogWriter.LogWriter(PrintWriter,int)",1,1,1
"org.apache.derby.client.am.LogWriter.buildExternalMethodHeader(Object,String)",1,1,1
"org.apache.derby.client.am.LogWriter.close()",1,2,2
"org.apache.derby.client.am.LogWriter.dncprint(String)",1,1,1
"org.apache.derby.client.am.LogWriter.dncprint(String,String)",1,1,1
"org.apache.derby.client.am.LogWriter.dncprintln(String)",1,1,1
"org.apache.derby.client.am.LogWriter.dncprintln(String,String)",1,1,1
"org.apache.derby.client.am.LogWriter.escapePassword(String)",1,2,2
"org.apache.derby.client.am.LogWriter.getClassNameOfInstanceIfTraced(Object)",16,30,30
"org.apache.derby.client.am.LogWriter.getMemoryMapDisplay(Map)",1,1,1
"org.apache.derby.client.am.LogWriter.getPrintWriter(String,boolean)",1,2,2
"org.apache.derby.client.am.LogWriter.getProperties(ClientBaseDataSource)",1,4,5
"org.apache.derby.client.am.LogWriter.loggingEnabled(int)",1,1,2
"org.apache.derby.client.am.LogWriter.traceColumnMetaData(String,ColumnMetaData)",2,3,22
"org.apache.derby.client.am.LogWriter.traceConnectEntry(ClientBaseDataSource)",2,3,4
"org.apache.derby.client.am.LogWriter.traceConnectEntry(String,int,String,Properties)",2,3,4
"org.apache.derby.client.am.LogWriter.traceConnectExit(Connection)",2,2,3
"org.apache.derby.client.am.LogWriter.traceConnectResetEntry(Object,LogWriter,String,ClientBaseDataSource)",2,2,3
"org.apache.derby.client.am.LogWriter.traceConnectResetExit(Connection)",2,2,3
"org.apache.derby.client.am.LogWriter.traceConnectsEntry(ClientBaseDataSource)",2,2,3
"org.apache.derby.client.am.LogWriter.traceConnectsEntry(String,int,String,Properties)",2,1,2
"org.apache.derby.client.am.LogWriter.traceConnectsExit(Connection)",2,2,3
"org.apache.derby.client.am.LogWriter.traceConnectsResetEntry(ClientBaseDataSource)",2,2,3
"org.apache.derby.client.am.LogWriter.traceConnectsResetEntry(String,int,String,Properties)",2,1,2
"org.apache.derby.client.am.LogWriter.traceConnectsResetExit(Connection)",2,2,3
"org.apache.derby.client.am.LogWriter.traceDeprecatedEntry(Object,String,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceDeprecatedEntry(Object,String,Object,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceDeprecatedEntry(Object,String,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceDeprecatedEntry(Object,String,int,Object,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceDeprecatedEntry(Object,String,int,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceDeprecatedEntryAllArgs(Object,String,String)",3,1,3
"org.apache.derby.client.am.LogWriter.traceDeprecatedExit(Object,String,Object)",3,1,3
"org.apache.derby.client.am.LogWriter.traceDeprecatedExit(Object,String,byte[])",2,1,2
"org.apache.derby.client.am.LogWriter.traceDiagnosable(SQLException)",3,1,3
"org.apache.derby.client.am.LogWriter.traceDiagnosable(SqlException)",3,1,3
"org.apache.derby.client.am.LogWriter.traceDiagnosable(XAException)",3,1,3
"org.apache.derby.client.am.LogWriter.traceDriverConfigurationJdbc1()",2,2,3
"org.apache.derby.client.am.LogWriter.traceDriverConfigurationJdbc2()",2,2,3
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,Object,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,Object,Object,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,Object,Object,Object,Object,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,Object,Object,boolean,boolean)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,Object,Object,int,boolean)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,Object,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,Object,int,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,boolean)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,boolean,boolean)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,boolean,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,byte)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,double)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,float)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,int,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,int,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,int,int,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,long)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,Object,short)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,boolean)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,Object,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,Object,Object,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,Object,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,Object,int,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,boolean)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,byte)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,byte[])",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,double)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,float)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,int,Object)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,int,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,long)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntry(Object,String,int,short)",2,1,2
"org.apache.derby.client.am.LogWriter.traceEntryAllArgs(Object,String,String)",3,1,3
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,Blob)",2,2,3
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,CallableStatement)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,Clob)",2,2,3
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,ColumnMetaData)",2,2,3
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,Connection)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,DatabaseMetaData)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,Object)",3,1,3
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,PreparedStatement)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,ResultSet)",2,2,3
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,Statement)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,boolean)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,byte)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,byte[])",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,double)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,float)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,int)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,int[])",2,1,2
"org.apache.derby.client.am.LogWriter.traceExit(Object,String,long)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExternalDeprecatedMethod(Object,String,String)",2,1,2
"org.apache.derby.client.am.LogWriter.traceExternalMethod(Object,String,String)",2,1,2
"org.apache.derby.client.am.LogWriter.traceParameterMetaData(Statement,ColumnMetaData)",3,3,5
"org.apache.derby.client.am.LogWriter.traceResultSetMetaData(Statement,ColumnMetaData)",3,3,5
"org.apache.derby.client.am.LogWriter.traceSuspended()",1,1,1
"org.apache.derby.client.am.LogWriter.tracepoint(String,int,Object,String,String)",2,1,2
"org.apache.derby.client.am.LogWriter.tracepoint(String,int,Object,String,String,Map)",2,1,2
"org.apache.derby.client.am.LogWriter.tracepoint(String,int,String)",2,1,2
"org.apache.derby.client.am.LogWriter.tracepoint(String,int,String,String)",2,1,2
"org.apache.derby.client.am.LogWriter.tracepoint(String,int,String,String,Map)",2,1,2
"org.apache.derby.client.am.LogWriter.writeDriverConfiguration()",1,1,1
"org.apache.derby.client.am.LogWriter.writeProperties(Properties)",1,4,4
"org.apache.derby.client.am.LogicalCallableStatement.LogicalCallableStatement(CallableStatement,StatementKey,StatementCacheInteractor)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getArray(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getArray(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBigDecimal(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBigDecimal(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBigDecimal(int,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBlob(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBlob(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBoolean(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBoolean(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getByte(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getByte(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBytes(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getBytes(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getClob(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getClob(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getDate(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getDate(String,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getDate(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getDate(int,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getDouble(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getDouble(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getFloat(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getFloat(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getInt(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getInt(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getLong(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getLong(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getObject(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getObject(String,Map)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getObject(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getObject(int,Map)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getRef(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getRef(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getShort(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getShort(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getString(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getString(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getTime(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getTime(String,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getTime(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getTime(int,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getTimestamp(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getTimestamp(String,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getTimestamp(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getTimestamp(int,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getURL(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.getURL(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.registerOutParameter(String,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.registerOutParameter(String,int,String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.registerOutParameter(String,int,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.registerOutParameter(int,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.registerOutParameter(int,int,String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.registerOutParameter(int,int,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setAsciiStream(String,InputStream,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setBigDecimal(String,BigDecimal)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setBinaryStream(String,InputStream,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setBoolean(String,boolean)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setByte(String,byte)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setBytes(String,byte[])",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setCharacterStream(String,Reader,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setDate(String,Date)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setDate(String,Date,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setDouble(String,double)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setFloat(String,float)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setInt(String,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setLong(String,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setNull(String,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setNull(String,int,String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setObject(String,Object)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setObject(String,Object,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setObject(String,Object,int,int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setShort(String,short)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setString(String,String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setTime(String,Time)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setTime(String,Time,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setTimestamp(String,Timestamp)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setTimestamp(String,Timestamp,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.setURL(String,URL)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement.wasNull()",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.LogicalCallableStatement40(CallableStatement,StatementKey,StatementCacheInteractor)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getCharacterStream(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getCharacterStream(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getNCharacterStream(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getNCharacterStream(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getNClob(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getNClob(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getNString(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getNString(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getRowId(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getRowId(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getSQLXML(String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.getSQLXML(int)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.isClosed()",1,2,2
"org.apache.derby.client.am.LogicalCallableStatement40.isPoolable()",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setAsciiStream(String,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setAsciiStream(String,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setAsciiStream(int,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setAsciiStream(int,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBinaryStream(String,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBinaryStream(String,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBinaryStream(int,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBinaryStream(int,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBlob(String,Blob)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBlob(String,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBlob(String,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBlob(int,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setBlob(int,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setCharacterStream(String,Reader)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setCharacterStream(int,Reader)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setClob(String,Clob)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setClob(String,Reader)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setClob(String,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setClob(int,Reader)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setClob(int,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNCharacterStream(String,Reader)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNClob(String,NClob)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNClob(String,Reader)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNClob(String,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNClob(int,NClob)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNClob(int,Reader)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNClob(int,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNString(String,String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setNString(int,String)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setPoolable(boolean)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setRowId(String,RowId)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setRowId(int,RowId)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setSQLXML(String,SQLXML)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.setSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.client.am.LogicalCallableStatement40.unwrap(Class<T>)",2,3,3
"org.apache.derby.client.am.LogicalConnection.LogicalConnection(Connection,ClientPooledConnection)",1,1,2
"org.apache.derby.client.am.LogicalConnection.checkForNullPhysicalConnection()",2,2,2
"org.apache.derby.client.am.LogicalConnection.clearWarnings()",1,2,2
"org.apache.derby.client.am.LogicalConnection.close()",2,5,6
"org.apache.derby.client.am.LogicalConnection.closeWithoutRecyclingToPool()",3,1,3
"org.apache.derby.client.am.LogicalConnection.commit()",1,2,2
"org.apache.derby.client.am.LogicalConnection.createStatement()",1,2,2
"org.apache.derby.client.am.LogicalConnection.createStatement(int,int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.createStatement(int,int,int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.finalize()",1,1,1
"org.apache.derby.client.am.LogicalConnection.getAutoCommit()",1,2,2
"org.apache.derby.client.am.LogicalConnection.getCatalog()",1,2,2
"org.apache.derby.client.am.LogicalConnection.getHoldability()",1,2,2
"org.apache.derby.client.am.LogicalConnection.getMetaData()",1,2,2
"org.apache.derby.client.am.LogicalConnection.getServerVersion()",2,2,2
"org.apache.derby.client.am.LogicalConnection.getTransactionIsolation()",1,2,2
"org.apache.derby.client.am.LogicalConnection.getTypeMap()",1,2,2
"org.apache.derby.client.am.LogicalConnection.getWarnings()",1,2,2
"org.apache.derby.client.am.LogicalConnection.isClosed()",2,1,2
"org.apache.derby.client.am.LogicalConnection.isReadOnly()",1,2,2
"org.apache.derby.client.am.LogicalConnection.nativeSQL(String)",1,2,2
"org.apache.derby.client.am.LogicalConnection.notifyException(SQLException)",1,2,2
"org.apache.derby.client.am.LogicalConnection.nullPhysicalConnection()",1,1,1
"org.apache.derby.client.am.LogicalConnection.prepareCall(String)",1,2,2
"org.apache.derby.client.am.LogicalConnection.prepareCall(String,int,int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.prepareCall(String,int,int,int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.preparePositionedUpdateStatement(String,Section)",1,1,2
"org.apache.derby.client.am.LogicalConnection.prepareStatement(String)",1,2,2
"org.apache.derby.client.am.LogicalConnection.prepareStatement(String,String[])",1,2,2
"org.apache.derby.client.am.LogicalConnection.prepareStatement(String,int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.prepareStatement(String,int,int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.prepareStatement(String,int,int,int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.prepareStatement(String,int[])",1,2,2
"org.apache.derby.client.am.LogicalConnection.releaseSavepoint(Savepoint)",1,2,2
"org.apache.derby.client.am.LogicalConnection.rollback()",1,2,2
"org.apache.derby.client.am.LogicalConnection.rollback(Savepoint)",1,2,2
"org.apache.derby.client.am.LogicalConnection.setAutoCommit(boolean)",1,2,2
"org.apache.derby.client.am.LogicalConnection.setCatalog(String)",1,2,2
"org.apache.derby.client.am.LogicalConnection.setHoldability(int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.setReadOnly(boolean)",1,2,2
"org.apache.derby.client.am.LogicalConnection.setSavepoint()",1,2,2
"org.apache.derby.client.am.LogicalConnection.setSavepoint(String)",1,2,2
"org.apache.derby.client.am.LogicalConnection.setTransactionIsolation(int)",1,2,2
"org.apache.derby.client.am.LogicalConnection.setTypeMap(Map)",1,2,2
"org.apache.derby.client.am.LogicalConnection40.LogicalConnection40(Connection,ClientPooledConnection)",1,1,1
"org.apache.derby.client.am.LogicalConnection40.createArrayOf(String,Object[])",1,2,2
"org.apache.derby.client.am.LogicalConnection40.createBlob()",1,2,2
"org.apache.derby.client.am.LogicalConnection40.createClob()",1,2,2
"org.apache.derby.client.am.LogicalConnection40.createNClob()",1,2,2
"org.apache.derby.client.am.LogicalConnection40.createSQLXML()",1,2,2
"org.apache.derby.client.am.LogicalConnection40.createStruct(String,Object[])",1,2,2
"org.apache.derby.client.am.LogicalConnection40.getClientInfo()",1,2,2
"org.apache.derby.client.am.LogicalConnection40.getClientInfo(String)",1,2,2
"org.apache.derby.client.am.LogicalConnection40.getTypeMap()",1,2,2
"org.apache.derby.client.am.LogicalConnection40.isValid(int)",2,2,3
"org.apache.derby.client.am.LogicalConnection40.isWrapperFor(Class<?>)",1,2,2
"org.apache.derby.client.am.LogicalConnection40.setClientInfo(Properties)",1,3,3
"org.apache.derby.client.am.LogicalConnection40.setClientInfo(String,String)",1,3,3
"org.apache.derby.client.am.LogicalConnection40.unwrap(Class<T>)",1,3,3
"org.apache.derby.client.am.LogicalPreparedStatement.LogicalPreparedStatement(PreparedStatement,StatementKey,StatementCacheInteractor)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.addBatch()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.addBatch(String)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.cancel()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.clearBatch()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.clearParameters()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.clearWarnings()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.execute()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.execute(String)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.execute(String,String[])",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.execute(String,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.execute(String,int[])",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.executeBatch()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.executeQuery()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.executeQuery(String)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate(String)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate(String,String[])",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate(String,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.executeUpdate(String,int[])",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getConnection()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getFetchDirection()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getFetchSize()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getGeneratedKeys()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getMaxFieldSize()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getMaxRows()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getMetaData()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getMoreResults()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getMoreResults(int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getParameterMetaData()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getQueryTimeout()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getResultSet()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getResultSetConcurrency()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getResultSetHoldability()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getResultSetType()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getUpdateCount()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.getWarnings()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setArray(int,Array)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setBigDecimal(int,BigDecimal)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setBlob(int,Blob)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setBoolean(int,boolean)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setByte(int,byte)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setBytes(int,byte[])",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setCharacterStream(int,Reader,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setClob(int,Clob)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setCursorName(String)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setDate(int,Date)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setDate(int,Date,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setDouble(int,double)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setEscapeProcessing(boolean)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setFetchDirection(int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setFetchSize(int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setFloat(int,float)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setInt(int,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setLong(int,long)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setMaxFieldSize(int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setMaxRows(int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setNull(int,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setNull(int,int,String)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setObject(int,Object)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setObject(int,Object,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setObject(int,Object,int,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setQueryTimeout(int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setRef(int,Ref)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setShort(int,short)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setString(int,String)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setTime(int,Time)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setTime(int,Time,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setTimestamp(int,Timestamp)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setTimestamp(int,Timestamp,Calendar)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setURL(int,URL)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement.setUnicodeStream(int,InputStream,int)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.LogicalPreparedStatement40(PreparedStatement,StatementKey,StatementCacheInteractor)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.isClosed()",1,2,2
"org.apache.derby.client.am.LogicalPreparedStatement40.isPoolable()",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setAsciiStream(int,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setAsciiStream(int,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setBinaryStream(int,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setBinaryStream(int,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setBlob(int,InputStream)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setBlob(int,InputStream,long)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setCharacterStream(int,Reader)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setClob(int,Reader)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setClob(int,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setNClob(int,NClob)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setNClob(int,Reader)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setNClob(int,Reader,long)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setNString(int,String)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setPoolable(boolean)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setRowId(int,RowId)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.setSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.client.am.LogicalPreparedStatement40.unwrap(Class<T>)",2,3,3
"org.apache.derby.client.am.LogicalStatementEntity.LogicalStatementEntity(PreparedStatement,StatementKey,StatementCacheInteractor)",2,1,3
"org.apache.derby.client.am.LogicalStatementEntity.close()",3,4,5
"org.apache.derby.client.am.LogicalStatementEntity.getPhysCs()",2,3,3
"org.apache.derby.client.am.LogicalStatementEntity.getPhysPs()",2,2,2
"org.apache.derby.client.am.LogicalStatementEntity.isLogicalEntityClosed()",1,1,1
"org.apache.derby.client.am.LogicalStatementEntityTest.LogicalStatementEntityTest(String)",1,1,1
"org.apache.derby.client.am.LogicalStatementEntityTest.createLogicalStatementEntity(String,boolean,JDBCStatementCache)",1,2,2
"org.apache.derby.client.am.LogicalStatementEntityTest.insertStatementIntoCache(JDBCStatementCache,PreparedStatement,String)",1,2,2
"org.apache.derby.client.am.LogicalStatementEntityTest.suite()",1,1,1
"org.apache.derby.client.am.LogicalStatementEntityTest.testCloseBehaviorExternalCs()",1,2,2
"org.apache.derby.client.am.LogicalStatementEntityTest.testCloseBehaviorExternalPs()",1,2,2
"org.apache.derby.client.am.LogicalStatementEntityTest.testCloseOnDuplicateStatement()",1,2,2
"org.apache.derby.client.am.LogicalStatementEntityTest.testCloseWhenStatementShallBeCached()",1,1,1
"org.apache.derby.client.am.LogicalStatementEntityTest.testClosedUnderlyingStatement()",1,2,2
"org.apache.derby.client.am.LogicalStatementEntityTest.testEvictionFromCache()",1,2,2
"org.apache.derby.client.am.LossOfPrecisionConversionException.LossOfPrecisionConversionException(LogWriter,String)",1,1,1
"org.apache.derby.client.am.ParameterMetaData.ParameterMetaData(ColumnMetaData)",1,1,1
"org.apache.derby.client.am.ParameterMetaData.getParameterClassName(int)",1,1,1
"org.apache.derby.client.am.ParameterMetaData.getParameterCount()",1,1,1
"org.apache.derby.client.am.ParameterMetaData.getParameterMode(int)",4,2,5
"org.apache.derby.client.am.ParameterMetaData.getParameterType(int)",1,1,1
"org.apache.derby.client.am.ParameterMetaData.getParameterTypeName(int)",1,1,1
"org.apache.derby.client.am.ParameterMetaData.getPrecision(int)",1,1,1
"org.apache.derby.client.am.ParameterMetaData.getScale(int)",1,1,1
"org.apache.derby.client.am.ParameterMetaData.isNullable(int)",1,1,1
"org.apache.derby.client.am.ParameterMetaData.isSigned(int)",1,1,1
"org.apache.derby.client.am.ParameterMetaData40.ParameterMetaData40(ColumnMetaData)",1,1,1
"org.apache.derby.client.am.ParameterMetaData40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.client.am.ParameterMetaData40.unwrap(Class<T>)",1,2,2
"org.apache.derby.client.am.PreparedStatement.PossibleTypes.PossibleTypes(int[])",1,1,1
"org.apache.derby.client.am.PreparedStatement.PossibleTypes.checkType(int)",1,3,3
"org.apache.derby.client.am.PreparedStatement.PossibleTypes.getPossibleTypesForNull(int)",19,2,19
"org.apache.derby.client.am.PreparedStatement.PossibleTypes.throw22005Exception(LogWriter,int,int)",1,1,1
"org.apache.derby.client.am.PreparedStatement.PreparedStatement(Agent,Connection,String,Section,ClientPooledConnection)",1,1,1
"org.apache.derby.client.am.PreparedStatement.PreparedStatement(Agent,Connection,String,int,int,int,int,String[],int[],ClientPooledConnection)",1,1,1
"org.apache.derby.client.am.PreparedStatement.addBatch()",1,4,5
"org.apache.derby.client.am.PreparedStatement.checkForSupportedDataType(int)",2,2,2
"org.apache.derby.client.am.PreparedStatement.checkForValidParameterIndex(int)",3,1,4
"org.apache.derby.client.am.PreparedStatement.checkForValidScale(int)",2,1,3
"org.apache.derby.client.am.PreparedStatement.checkScaleForINOUTDecimal(int,int)",5,4,7
"org.apache.derby.client.am.PreparedStatement.checkStatementValidity(SqlException)",1,3,3
"org.apache.derby.client.am.PreparedStatement.checkThatAllParametersAreSet()",4,1,5
"org.apache.derby.client.am.PreparedStatement.checkTypeForSetAsciiStream(int)",1,2,2
"org.apache.derby.client.am.PreparedStatement.checkTypeForSetBinaryStream(int)",1,2,2
"org.apache.derby.client.am.PreparedStatement.checkTypeForSetBlob(int)",1,2,2
"org.apache.derby.client.am.PreparedStatement.checkTypeForSetCharacterStream(int)",1,2,2
"org.apache.derby.client.am.PreparedStatement.checkTypeForSetClob(int)",1,2,2
"org.apache.derby.client.am.PreparedStatement.clearParameters()",1,4,4
"org.apache.derby.client.am.PreparedStatement.completeDescribeInput(ColumnMetaData,Sqlca)",2,3,5
"org.apache.derby.client.am.PreparedStatement.completeDescribeOutput(ColumnMetaData,Sqlca)",2,2,3
"org.apache.derby.client.am.PreparedStatement.completeLocalCommit(Iterator)",1,1,2
"org.apache.derby.client.am.PreparedStatement.completeLocalRollback(Iterator)",1,1,2
"org.apache.derby.client.am.PreparedStatement.completePrepareDescribe()",2,1,2
"org.apache.derby.client.am.PreparedStatement.execute()",1,4,4
"org.apache.derby.client.am.PreparedStatement.execute(String)",1,2,2
"org.apache.derby.client.am.PreparedStatement.execute(String,String[])",1,2,2
"org.apache.derby.client.am.PreparedStatement.execute(String,int)",1,2,2
"org.apache.derby.client.am.PreparedStatement.execute(String,int[])",1,2,2
"org.apache.derby.client.am.PreparedStatement.executeBatch()",1,4,4
"org.apache.derby.client.am.PreparedStatement.executeBatchRequestX(boolean)",8,17,28
"org.apache.derby.client.am.PreparedStatement.executeBatchX(boolean)",1,1,1
"org.apache.derby.client.am.PreparedStatement.executeQuery()",1,4,4
"org.apache.derby.client.am.PreparedStatement.executeQuery(String)",1,2,2
"org.apache.derby.client.am.PreparedStatement.executeQueryX()",1,1,1
"org.apache.derby.client.am.PreparedStatement.executeUpdate()",1,4,4
"org.apache.derby.client.am.PreparedStatement.executeUpdate(String)",1,2,2
"org.apache.derby.client.am.PreparedStatement.executeUpdate(String,String[])",1,2,2
"org.apache.derby.client.am.PreparedStatement.executeUpdate(String,int)",1,2,2
"org.apache.derby.client.am.PreparedStatement.executeUpdate(String,int[])",1,2,2
"org.apache.derby.client.am.PreparedStatement.executeUpdateX()",1,1,1
"org.apache.derby.client.am.PreparedStatement.executeX()",1,1,1
"org.apache.derby.client.am.PreparedStatement.expandBooleanArray(boolean[],int)",3,2,3
"org.apache.derby.client.am.PreparedStatement.expandObjectArray(Object[],int)",3,2,3
"org.apache.derby.client.am.PreparedStatement.flowExecute(int)",4,22,45
"org.apache.derby.client.am.PreparedStatement.flowPrepareDescribeInputOutput()",1,2,2
"org.apache.derby.client.am.PreparedStatement.getColumnMetaDataX()",1,2,2
"org.apache.derby.client.am.PreparedStatement.getJdbcStatementInterfaceName()",1,1,1
"org.apache.derby.client.am.PreparedStatement.getMetaData()",1,4,4
"org.apache.derby.client.am.PreparedStatement.getMetaDataX()",1,1,1
"org.apache.derby.client.am.PreparedStatement.getParameterMetaData()",1,4,4
"org.apache.derby.client.am.PreparedStatement.getParameterMetaDataX()",1,1,1
"org.apache.derby.client.am.PreparedStatement.initPreparedStatement()",1,1,1
"org.apache.derby.client.am.PreparedStatement.initPreparedStatement(ColumnMetaData,ColumnMetaData)",1,1,2
"org.apache.derby.client.am.PreparedStatement.initPreparedStatement(String)",3,5,8
"org.apache.derby.client.am.PreparedStatement.initPreparedStatement(String,Section)",1,1,1
"org.apache.derby.client.am.PreparedStatement.initResetPreparedStatement()",1,1,1
"org.apache.derby.client.am.PreparedStatement.listenToUnitOfWork()",1,2,2
"org.apache.derby.client.am.PreparedStatement.markClosed(boolean)",1,5,5
"org.apache.derby.client.am.PreparedStatement.prepare()",1,2,2
"org.apache.derby.client.am.PreparedStatement.readDescribeInput()",1,1,1
"org.apache.derby.client.am.PreparedStatement.readDescribeOutput()",1,1,1
"org.apache.derby.client.am.PreparedStatement.readExecute()",1,1,1
"org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInput()",1,1,1
"org.apache.derby.client.am.PreparedStatement.readPrepareDescribeInputOutput()",1,1,1
"org.apache.derby.client.am.PreparedStatement.reset(boolean)",1,2,2
"org.apache.derby.client.am.PreparedStatement.resetForReuse()",1,1,1
"org.apache.derby.client.am.PreparedStatement.resetParameters()",1,2,2
"org.apache.derby.client.am.PreparedStatement.resetPreparedStatement(Agent,Connection,String,Section)",1,1,1
"org.apache.derby.client.am.PreparedStatement.resetPreparedStatement(Agent,Connection,String,Section,ColumnMetaData,ColumnMetaData)",1,1,1
"org.apache.derby.client.am.PreparedStatement.resetPreparedStatement(Agent,Connection,String,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.am.PreparedStatement.setArray(int,Array)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setAsciiStream(int,InputStream)",2,4,4
"org.apache.derby.client.am.PreparedStatement.setAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derby.client.am.PreparedStatement.setAsciiStream(int,InputStream,long)",3,5,5
"org.apache.derby.client.am.PreparedStatement.setBigDecimal(int,BigDecimal)",2,5,5
"org.apache.derby.client.am.PreparedStatement.setBinaryStream(int,InputStream)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derby.client.am.PreparedStatement.setBinaryStream(int,InputStream,long)",2,4,4
"org.apache.derby.client.am.PreparedStatement.setBinaryStreamX(int,InputStream,int)",2,2,3
"org.apache.derby.client.am.PreparedStatement.setBlob(int,Blob)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setBlob(int,InputStream)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setBlob(int,InputStream,long)",2,4,4
"org.apache.derby.client.am.PreparedStatement.setBlobX(int,Blob)",2,2,2
"org.apache.derby.client.am.PreparedStatement.setBoolean(int,boolean)",1,4,5
"org.apache.derby.client.am.PreparedStatement.setByte(int,byte)",1,4,4
"org.apache.derby.client.am.PreparedStatement.setBytes(int,byte[])",1,4,4
"org.apache.derby.client.am.PreparedStatement.setBytesX(int,byte[])",2,2,2
"org.apache.derby.client.am.PreparedStatement.setCharacterStream(int,Reader)",2,4,4
"org.apache.derby.client.am.PreparedStatement.setCharacterStream(int,Reader,int)",1,1,1
"org.apache.derby.client.am.PreparedStatement.setCharacterStream(int,Reader,long)",3,5,5
"org.apache.derby.client.am.PreparedStatement.setClob(int,Clob)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setClob(int,Reader)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setClob(int,Reader,long)",2,4,4
"org.apache.derby.client.am.PreparedStatement.setClobX(int,Clob)",2,2,2
"org.apache.derby.client.am.PreparedStatement.setDate(int,Date)",2,5,5
"org.apache.derby.client.am.PreparedStatement.setDate(int,Date,Calendar)",2,4,6
"org.apache.derby.client.am.PreparedStatement.setDouble(int,double)",1,4,4
"org.apache.derby.client.am.PreparedStatement.setFloat(int,float)",1,4,4
"org.apache.derby.client.am.PreparedStatement.setInput(int,Object)",1,1,1
"org.apache.derby.client.am.PreparedStatement.setInt(int,int)",1,4,4
"org.apache.derby.client.am.PreparedStatement.setIntX(int,int)",1,1,1
"org.apache.derby.client.am.PreparedStatement.setLong(int,long)",1,4,4
"org.apache.derby.client.am.PreparedStatement.setLongX(int,long)",1,1,1
"org.apache.derby.client.am.PreparedStatement.setNull(int,int)",1,4,4
"org.apache.derby.client.am.PreparedStatement.setNull(int,int,String)",1,2,2
"org.apache.derby.client.am.PreparedStatement.setNullX(int,int)",2,1,2
"org.apache.derby.client.am.PreparedStatement.setObject(int,Object)",18,20,20
"org.apache.derby.client.am.PreparedStatement.setObject(int,Object,int)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setObject(int,Object,int,int)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setObjectX(int,Object,int,int)",2,4,6
"org.apache.derby.client.am.PreparedStatement.setRef(int,Ref)",1,3,3
"org.apache.derby.client.am.PreparedStatement.setShort(int,short)",1,4,4
"org.apache.derby.client.am.PreparedStatement.setShortX(int,short)",1,1,1
"org.apache.derby.client.am.PreparedStatement.setString(int,String)",1,4,4
"org.apache.derby.client.am.PreparedStatement.setStringX(int,String)",2,2,2
"org.apache.derby.client.am.PreparedStatement.setTime(int,Time)",2,5,5
"org.apache.derby.client.am.PreparedStatement.setTime(int,Time,Calendar)",2,4,6
"org.apache.derby.client.am.PreparedStatement.setTimestamp(int,Timestamp)",2,5,5
"org.apache.derby.client.am.PreparedStatement.setTimestamp(int,Timestamp,Calendar)",2,5,7
"org.apache.derby.client.am.PreparedStatement.setURL(int,URL)",1,2,2
"org.apache.derby.client.am.PreparedStatement.setUnicodeStream(int,InputStream,int)",1,2,2
"org.apache.derby.client.am.PreparedStatement.writeDescribeInput(Section)",1,1,1
"org.apache.derby.client.am.PreparedStatement.writeDescribeOutput(Section)",1,1,1
"org.apache.derby.client.am.PreparedStatement.writeExecute(Section,ColumnMetaData,Object[],int,boolean,boolean)",1,1,1
"org.apache.derby.client.am.PreparedStatement.writeOpenQuery(Section,int,int,int,ColumnMetaData,Object[])",1,1,1
"org.apache.derby.client.am.PreparedStatement.writePrepareDescribeInput()",1,1,1
"org.apache.derby.client.am.PreparedStatement.writePrepareDescribeInputOutput()",1,1,1
"org.apache.derby.client.am.PreparedStatement.writePrepareDescribeInputOutput(String,Section)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.PreparedStatement40(Agent,Connection,String,Section,ClientPooledConnection)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.PreparedStatement40(Agent,Connection,String,int,int,int,int,String[],int[],ClientPooledConnection)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.setNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.setNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.setNClob(int,NClob)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.setNClob(int,Reader)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.setNClob(int,Reader,long)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.setNString(int,String)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.setRowId(int,RowId)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.setSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.client.am.PreparedStatement40.unwrap(Class<T>)",1,3,3
"org.apache.derby.client.am.ProductLevel.ProductLevel(String,String,String)",1,2,4
"org.apache.derby.client.am.ProductLevel.greaterThanOrEqualTo(int,int,int)",6,1,6
"org.apache.derby.client.am.ProductLevel.lessThan(int,int,int)",6,1,6
"org.apache.derby.client.am.ResultSet.ResultSet(Agent,Statement,Cursor,int,int,int)",1,3,4
"org.apache.derby.client.am.ResultSet.absolute(int)",1,4,4
"org.apache.derby.client.am.ResultSet.absoluteX(int)",4,8,13
"org.apache.derby.client.am.ResultSet.accumulateWarning(SqlWarning)",1,2,2
"org.apache.derby.client.am.ResultSet.adjustAbsoluteRowset(long)",1,1,1
"org.apache.derby.client.am.ResultSet.adjustFirstRowset()",1,1,1
"org.apache.derby.client.am.ResultSet.adjustLastRowset(long)",1,1,2
"org.apache.derby.client.am.ResultSet.adjustNextRowset()",1,1,1
"org.apache.derby.client.am.ResultSet.adjustPreviousRowset(int,long,boolean)",1,1,8
"org.apache.derby.client.am.ResultSet.adjustRefreshRowset()",1,1,1
"org.apache.derby.client.am.ResultSet.adjustRelativeRowset(long)",1,1,1
"org.apache.derby.client.am.ResultSet.afterLast()",1,3,3
"org.apache.derby.client.am.ResultSet.afterLastX()",1,4,4
"org.apache.derby.client.am.ResultSet.beforeFirst()",1,3,3
"org.apache.derby.client.am.ResultSet.beforeFirstX()",1,4,4
"org.apache.derby.client.am.ResultSet.buildDeleteString()",1,1,2
"org.apache.derby.client.am.ResultSet.buildInsertString()",2,4,5
"org.apache.derby.client.am.ResultSet.buildUpdateString()",4,3,7
"org.apache.derby.client.am.ResultSet.cancelRowUpdates()",3,3,5
"org.apache.derby.client.am.ResultSet.checkAndThrowReceivedQueryTerminatingException()",3,5,7
"org.apache.derby.client.am.ResultSet.checkForClosedResultSet()",2,2,2
"org.apache.derby.client.am.ResultSet.checkForUpdatableResultSet(String)",2,1,2
"org.apache.derby.client.am.ResultSet.checkForValidColumnIndex(int)",2,1,3
"org.apache.derby.client.am.ResultSet.checkForValidCursorPosition()",2,1,2
"org.apache.derby.client.am.ResultSet.checkGetterPreconditions(int)",1,1,1
"org.apache.derby.client.am.ResultSet.checkPositionedOnPlainRow()",2,1,3
"org.apache.derby.client.am.ResultSet.checkRowsetSqlca()",1,1,1
"org.apache.derby.client.am.ResultSet.checkRowsetSqlca(int)",4,4,9
"org.apache.derby.client.am.ResultSet.checkThatResultSetIsNotDynamic()",2,1,2
"org.apache.derby.client.am.ResultSet.checkThatResultSetTypeIsScrollable()",2,1,2
"org.apache.derby.client.am.ResultSet.checkUpdatePreconditions(int,String)",4,1,6
"org.apache.derby.client.am.ResultSet.clearWarnings()",1,3,3
"org.apache.derby.client.am.ResultSet.clearWarningsX()",1,1,1
"org.apache.derby.client.am.ResultSet.close()",1,3,3
"org.apache.derby.client.am.ResultSet.closeCloseFilterInputStream()",2,3,3
"org.apache.derby.client.am.ResultSet.closeX()",2,4,7
"org.apache.derby.client.am.ResultSet.completeLocalCommit(Iterator)",1,2,2
"org.apache.derby.client.am.ResultSet.completeLocalRollback(Iterator)",1,1,1
"org.apache.derby.client.am.ResultSet.completeSqlca(Sqlca)",2,4,6
"org.apache.derby.client.am.ResultSet.createCloseFilterInputStream(InputStream)",3,1,3
"org.apache.derby.client.am.ResultSet.createLOBColumnTracker()",1,3,6
"org.apache.derby.client.am.ResultSet.delete()",1,6,7
"org.apache.derby.client.am.ResultSet.deleteRow()",1,3,3
"org.apache.derby.client.am.ResultSet.deleteRowX()",2,5,8
"org.apache.derby.client.am.ResultSet.earlyCloseComplete(Sqlca)",1,1,1
"org.apache.derby.client.am.ResultSet.expandRowsetSqlca()",1,1,4
"org.apache.derby.client.am.ResultSet.findColumn(String)",1,4,4
"org.apache.derby.client.am.ResultSet.findColumnX(String)",1,1,1
"org.apache.derby.client.am.ResultSet.first()",1,4,4
"org.apache.derby.client.am.ResultSet.firstX()",1,3,3
"org.apache.derby.client.am.ResultSet.flowCloseAndAutoCommitIfNotAutoCommitted()",1,1,1
"org.apache.derby.client.am.ResultSet.flowFetch()",1,1,2
"org.apache.derby.client.am.ResultSet.flowGetRowset(int,long)",1,1,2
"org.apache.derby.client.am.ResultSet.flowPositioningFetch(int,int)",1,1,3
"org.apache.derby.client.am.ResultSet.getAbsoluteRowset(long)",2,6,10
"org.apache.derby.client.am.ResultSet.getArray(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getArray(int)",2,5,6
"org.apache.derby.client.am.ResultSet.getAsciiStream(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getAsciiStream(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getBigDecimal(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getBigDecimal(String,int)",1,3,3
"org.apache.derby.client.am.ResultSet.getBigDecimal(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getBigDecimal(int,int)",1,6,6
"org.apache.derby.client.am.ResultSet.getBinaryStream(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getBinaryStream(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getBlob(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getBlob(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getBoolean(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getBoolean(int)",1,8,9
"org.apache.derby.client.am.ResultSet.getByte(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getByte(int)",1,8,9
"org.apache.derby.client.am.ResultSet.getBytes(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getBytes(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getCharacterStream(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getCharacterStream(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getClob(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getClob(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getConcurrency()",1,3,3
"org.apache.derby.client.am.ResultSet.getConnectionCallbackInterface()",1,1,1
"org.apache.derby.client.am.ResultSet.getCursorName()",2,6,6
"org.apache.derby.client.am.ResultSet.getDate(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getDate(String,Calendar)",1,3,3
"org.apache.derby.client.am.ResultSet.getDate(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getDate(int,Calendar)",2,5,6
"org.apache.derby.client.am.ResultSet.getDouble(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getDouble(int)",1,8,9
"org.apache.derby.client.am.ResultSet.getFetchDirection()",1,3,3
"org.apache.derby.client.am.ResultSet.getFetchSize()",1,3,3
"org.apache.derby.client.am.ResultSet.getFirstRowset()",2,4,4
"org.apache.derby.client.am.ResultSet.getFloat(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getFloat(int)",1,8,9
"org.apache.derby.client.am.ResultSet.getHoldability()",1,4,4
"org.apache.derby.client.am.ResultSet.getInt(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getInt(int)",1,8,9
"org.apache.derby.client.am.ResultSet.getLastRowset(long)",3,6,11
"org.apache.derby.client.am.ResultSet.getLong(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getLong(int)",1,8,9
"org.apache.derby.client.am.ResultSet.getMetaData()",1,4,4
"org.apache.derby.client.am.ResultSet.getMetaDataX()",1,1,1
"org.apache.derby.client.am.ResultSet.getNextRowset()",6,9,13
"org.apache.derby.client.am.ResultSet.getObject(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getObject(String,Map)",1,3,3
"org.apache.derby.client.am.ResultSet.getObject(int)",1,4,4
"org.apache.derby.client.am.ResultSet.getObject(int,Map)",2,6,7
"org.apache.derby.client.am.ResultSet.getObjectX(int)",1,3,3
"org.apache.derby.client.am.ResultSet.getPreparedStatementForDelete()",1,1,1
"org.apache.derby.client.am.ResultSet.getPreparedStatementForInsert()",1,1,2
"org.apache.derby.client.am.ResultSet.getPreparedStatementForUpdate()",2,1,2
"org.apache.derby.client.am.ResultSet.getPreviousRowset()",5,10,18
"org.apache.derby.client.am.ResultSet.getRSReturnability()",1,1,1
"org.apache.derby.client.am.ResultSet.getRef(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getRef(int)",2,5,6
"org.apache.derby.client.am.ResultSet.getRefreshRowset()",1,3,3
"org.apache.derby.client.am.ResultSet.getRelativeRowset(long)",3,8,8
"org.apache.derby.client.am.ResultSet.getRow()",1,4,4
"org.apache.derby.client.am.ResultSet.getRowCount()",1,4,13
"org.apache.derby.client.am.ResultSet.getRowUncast()",1,1,1
"org.apache.derby.client.am.ResultSet.getRowX()",1,5,8
"org.apache.derby.client.am.ResultSet.getServerCursorName()",1,1,1
"org.apache.derby.client.am.ResultSet.getShort(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getShort(int)",1,8,9
"org.apache.derby.client.am.ResultSet.getStatement()",2,4,4
"org.apache.derby.client.am.ResultSet.getStatementCallbackInterface()",1,1,1
"org.apache.derby.client.am.ResultSet.getString(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getString(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getTableName()",3,4,8
"org.apache.derby.client.am.ResultSet.getTime(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getTime(String,Calendar)",1,3,3
"org.apache.derby.client.am.ResultSet.getTime(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getTime(int,Calendar)",2,5,6
"org.apache.derby.client.am.ResultSet.getTimestamp(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getTimestamp(String,Calendar)",1,3,3
"org.apache.derby.client.am.ResultSet.getTimestamp(int)",1,6,6
"org.apache.derby.client.am.ResultSet.getTimestamp(int,Calendar)",2,5,6
"org.apache.derby.client.am.ResultSet.getType()",1,3,3
"org.apache.derby.client.am.ResultSet.getURL(String)",1,1,1
"org.apache.derby.client.am.ResultSet.getURL(int)",1,1,1
"org.apache.derby.client.am.ResultSet.getUnicodeStream(String)",1,3,3
"org.apache.derby.client.am.ResultSet.getUnicodeStream(int)",1,2,2
"org.apache.derby.client.am.ResultSet.getWarnings()",1,4,4
"org.apache.derby.client.am.ResultSet.insert()",1,3,4
"org.apache.derby.client.am.ResultSet.insertRow()",1,3,3
"org.apache.derby.client.am.ResultSet.insertRowX()",3,5,10
"org.apache.derby.client.am.ResultSet.isAfterLast()",1,4,4
"org.apache.derby.client.am.ResultSet.isAfterLastX()",2,2,7
"org.apache.derby.client.am.ResultSet.isBeforeFirst()",1,4,4
"org.apache.derby.client.am.ResultSet.isBeforeFirstX()",2,3,3
"org.apache.derby.client.am.ResultSet.isClosed()",1,3,3
"org.apache.derby.client.am.ResultSet.isFirst()",1,4,4
"org.apache.derby.client.am.ResultSet.isFirstX()",2,1,3
"org.apache.derby.client.am.ResultSet.isLast()",1,4,4
"org.apache.derby.client.am.ResultSet.isLastX()",2,2,3
"org.apache.derby.client.am.ResultSet.isNull(int)",2,1,3
"org.apache.derby.client.am.ResultSet.isServerCursorPositionAfterLast()",1,1,1
"org.apache.derby.client.am.ResultSet.isServersCursorPositionBeforeFirst()",1,4,4
"org.apache.derby.client.am.ResultSet.jdbc3MethodNotSupported()",1,1,1
"org.apache.derby.client.am.ResultSet.last()",1,4,4
"org.apache.derby.client.am.ResultSet.lastX()",1,4,7
"org.apache.derby.client.am.ResultSet.listenToUnitOfWork()",1,2,2
"org.apache.derby.client.am.ResultSet.markAutoCommitted()",1,1,1
"org.apache.derby.client.am.ResultSet.markClosed()",1,1,1
"org.apache.derby.client.am.ResultSet.markClosed(boolean)",1,2,2
"org.apache.derby.client.am.ResultSet.markClosedOnServer()",1,1,1
"org.apache.derby.client.am.ResultSet.markLOBAsAccessed(int)",1,1,1
"org.apache.derby.client.am.ResultSet.markPositionedUpdateDeletePreparedStatementsClosed()",1,3,3
"org.apache.derby.client.am.ResultSet.moveToAfterLast()",1,1,1
"org.apache.derby.client.am.ResultSet.moveToBeforeFirst()",1,1,1
"org.apache.derby.client.am.ResultSet.moveToCurrentRow()",1,3,3
"org.apache.derby.client.am.ResultSet.moveToCurrentRowX()",1,5,5
"org.apache.derby.client.am.ResultSet.moveToInsertRow()",1,3,3
"org.apache.derby.client.am.ResultSet.next()",1,4,4
"org.apache.derby.client.am.ResultSet.nextX()",5,9,23
"org.apache.derby.client.am.ResultSet.nullDataForGC()",1,2,3
"org.apache.derby.client.am.ResultSet.nullOutReferenceInStatement()",1,1,5
"org.apache.derby.client.am.ResultSet.parseScrollableRowset()",1,5,5
"org.apache.derby.client.am.ResultSet.positionToCurrentRowAndDelete()",1,5,13
"org.apache.derby.client.am.ResultSet.positionToCurrentRowAndUpdate()",1,5,13
"org.apache.derby.client.am.ResultSet.previous()",1,4,4
"org.apache.derby.client.am.ResultSet.previousX()",2,3,7
"org.apache.derby.client.am.ResultSet.quoteSqlIdentifier(String)",1,2,2
"org.apache.derby.client.am.ResultSet.readAutoCommitIfNotAutoCommitted()",1,2,3
"org.apache.derby.client.am.ResultSet.readClose()",1,2,2
"org.apache.derby.client.am.ResultSet.readCloseAndAutoCommit(boolean)",1,2,2
"org.apache.derby.client.am.ResultSet.readDeleteRow()",1,1,1
"org.apache.derby.client.am.ResultSet.readInsertRow()",1,1,1
"org.apache.derby.client.am.ResultSet.readUpdateRow()",1,1,1
"org.apache.derby.client.am.ResultSet.refreshRow()",1,3,3
"org.apache.derby.client.am.ResultSet.refreshRowX()",3,4,6
"org.apache.derby.client.am.ResultSet.relative(int)",1,4,4
"org.apache.derby.client.am.ResultSet.relativeX(int)",10,14,21
"org.apache.derby.client.am.ResultSet.repositionScrollableResultSetBeforeJDBC1PositionedUpdateDelete()",1,2,3
"org.apache.derby.client.am.ResultSet.resetRowsetFlags()",1,1,1
"org.apache.derby.client.am.ResultSet.resetRowsetSqlca()",1,1,3
"org.apache.derby.client.am.ResultSet.resetUpdatedColumns()",1,1,5
"org.apache.derby.client.am.ResultSet.resetUpdatedColumnsForInsert()",1,2,5
"org.apache.derby.client.am.ResultSet.resultSetContainsNoRows()",1,2,2
"org.apache.derby.client.am.ResultSet.rowCountIsKnown()",1,1,1
"org.apache.derby.client.am.ResultSet.rowCountIsUnknown()",2,1,2
"org.apache.derby.client.am.ResultSet.rowDeleted()",1,4,4
"org.apache.derby.client.am.ResultSet.rowInserted()",1,3,3
"org.apache.derby.client.am.ResultSet.rowIsInCurrentRowset(long)",3,1,5
"org.apache.derby.client.am.ResultSet.rowIsInCurrentRowset(long,int)",9,3,10
"org.apache.derby.client.am.ResultSet.rowUpdated()",1,3,3
"org.apache.derby.client.am.ResultSet.setAbsolutePositionBasedOnAllRowsReceived()",1,1,2
"org.apache.derby.client.am.ResultSet.setFetchDirection(int)",2,4,5
"org.apache.derby.client.am.ResultSet.setFetchSize(int)",2,4,6
"org.apache.derby.client.am.ResultSet.setRSReturnability(byte)",1,1,3
"org.apache.derby.client.am.ResultSet.setRowCountEvent(long)",1,1,2
"org.apache.derby.client.am.ResultSet.setRowsetAfterLastEvent()",1,1,2
"org.apache.derby.client.am.ResultSet.setRowsetBeforeFirstEvent()",1,1,1
"org.apache.derby.client.am.ResultSet.setRowsetNoRowsEvent()",1,1,1
"org.apache.derby.client.am.ResultSet.setValidCursorPosition(boolean)",1,1,1
"org.apache.derby.client.am.ResultSet.setWasNull(int)",1,2,6
"org.apache.derby.client.am.ResultSet.unuseStreams()",2,1,3
"org.apache.derby.client.am.ResultSet.update()",2,6,8
"org.apache.derby.client.am.ResultSet.updateArray(String,Array)",1,1,1
"org.apache.derby.client.am.ResultSet.updateArray(int,Array)",1,1,1
"org.apache.derby.client.am.ResultSet.updateAsciiStream(String,InputStream)",1,2,2
"org.apache.derby.client.am.ResultSet.updateAsciiStream(String,InputStream,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateAsciiStream(String,InputStream,long)",1,2,2
"org.apache.derby.client.am.ResultSet.updateAsciiStream(int,InputStream)",1,3,3
"org.apache.derby.client.am.ResultSet.updateAsciiStream(int,InputStream,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateAsciiStream(int,InputStream,long)",2,2,2
"org.apache.derby.client.am.ResultSet.updateBigDecimal(String,BigDecimal)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBigDecimal(int,BigDecimal)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBinaryStream(String,InputStream)",1,2,2
"org.apache.derby.client.am.ResultSet.updateBinaryStream(String,InputStream,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBinaryStream(String,InputStream,long)",1,2,2
"org.apache.derby.client.am.ResultSet.updateBinaryStream(int,InputStream)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBinaryStream(int,InputStream,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBinaryStream(int,InputStream,long)",2,2,2
"org.apache.derby.client.am.ResultSet.updateBlob(String,Blob)",1,2,2
"org.apache.derby.client.am.ResultSet.updateBlob(String,InputStream)",1,2,2
"org.apache.derby.client.am.ResultSet.updateBlob(String,InputStream,long)",1,2,2
"org.apache.derby.client.am.ResultSet.updateBlob(int,Blob)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBlob(int,InputStream)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBlob(int,InputStream,long)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBoolean(String,boolean)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBoolean(int,boolean)",1,3,3
"org.apache.derby.client.am.ResultSet.updateByte(String,byte)",1,3,3
"org.apache.derby.client.am.ResultSet.updateByte(int,byte)",1,3,3
"org.apache.derby.client.am.ResultSet.updateBytes(String,byte[])",1,3,3
"org.apache.derby.client.am.ResultSet.updateBytes(int,byte[])",1,3,3
"org.apache.derby.client.am.ResultSet.updateCharacterStream(String,Reader)",1,2,2
"org.apache.derby.client.am.ResultSet.updateCharacterStream(String,Reader,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateCharacterStream(String,Reader,long)",1,2,2
"org.apache.derby.client.am.ResultSet.updateCharacterStream(int,Reader)",1,3,3
"org.apache.derby.client.am.ResultSet.updateCharacterStream(int,Reader,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateCharacterStream(int,Reader,long)",2,2,2
"org.apache.derby.client.am.ResultSet.updateClob(String,Clob)",1,2,2
"org.apache.derby.client.am.ResultSet.updateClob(String,Reader)",1,2,2
"org.apache.derby.client.am.ResultSet.updateClob(String,Reader,long)",1,2,2
"org.apache.derby.client.am.ResultSet.updateClob(int,Clob)",1,3,3
"org.apache.derby.client.am.ResultSet.updateClob(int,Reader)",1,3,3
"org.apache.derby.client.am.ResultSet.updateClob(int,Reader,long)",1,3,3
"org.apache.derby.client.am.ResultSet.updateColumn(int,Object)",1,1,3
"org.apache.derby.client.am.ResultSet.updateColumnInfoFromCache()",1,1,1
"org.apache.derby.client.am.ResultSet.updateDate(String,Date)",1,3,3
"org.apache.derby.client.am.ResultSet.updateDate(int,Date)",1,3,3
"org.apache.derby.client.am.ResultSet.updateDouble(String,double)",1,3,3
"org.apache.derby.client.am.ResultSet.updateDouble(int,double)",1,3,3
"org.apache.derby.client.am.ResultSet.updateFloat(String,float)",1,3,3
"org.apache.derby.client.am.ResultSet.updateFloat(int,float)",1,3,3
"org.apache.derby.client.am.ResultSet.updateInt(String,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateInt(int,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateLong(String,long)",1,3,3
"org.apache.derby.client.am.ResultSet.updateLong(int,long)",1,3,3
"org.apache.derby.client.am.ResultSet.updateNCharacterStream(String,Reader)",1,1,1
"org.apache.derby.client.am.ResultSet.updateNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.client.am.ResultSet.updateNClob(String,Reader)",1,1,1
"org.apache.derby.client.am.ResultSet.updateNClob(int,Reader)",1,1,1
"org.apache.derby.client.am.ResultSet.updateNull(String)",1,3,3
"org.apache.derby.client.am.ResultSet.updateNull(int)",2,3,4
"org.apache.derby.client.am.ResultSet.updateObject(String,Object)",1,3,3
"org.apache.derby.client.am.ResultSet.updateObject(String,Object,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateObject(int,Object)",1,3,3
"org.apache.derby.client.am.ResultSet.updateObject(int,Object,int)",1,3,3
"org.apache.derby.client.am.ResultSet.updateRef(String,Ref)",1,1,1
"org.apache.derby.client.am.ResultSet.updateRef(int,Ref)",1,1,1
"org.apache.derby.client.am.ResultSet.updateRow()",1,4,5
"org.apache.derby.client.am.ResultSet.updateRowX()",11,8,20
"org.apache.derby.client.am.ResultSet.updateShort(String,short)",1,3,3
"org.apache.derby.client.am.ResultSet.updateShort(int,short)",1,3,3
"org.apache.derby.client.am.ResultSet.updateString(String,String)",1,3,3
"org.apache.derby.client.am.ResultSet.updateString(int,String)",1,3,3
"org.apache.derby.client.am.ResultSet.updateTime(String,Time)",1,3,3
"org.apache.derby.client.am.ResultSet.updateTime(int,Time)",1,3,3
"org.apache.derby.client.am.ResultSet.updateTimestamp(String,Timestamp)",1,3,3
"org.apache.derby.client.am.ResultSet.updateTimestamp(int,Timestamp)",1,3,3
"org.apache.derby.client.am.ResultSet.useStream(int)",2,1,2
"org.apache.derby.client.am.ResultSet.wasNonNullSensitiveUpdate(int)",1,1,2
"org.apache.derby.client.am.ResultSet.wasNull()",2,4,5
"org.apache.derby.client.am.ResultSet.wasNullSensitiveUpdate(int)",1,1,3
"org.apache.derby.client.am.ResultSet.writeAutoCommitIfNotAutoCommitted()",1,2,3
"org.apache.derby.client.am.ResultSet.writeClose()",1,2,2
"org.apache.derby.client.am.ResultSet.writeCloseAndAutoCommit()",1,2,2
"org.apache.derby.client.am.ResultSet.writeDeleteRow()",1,3,3
"org.apache.derby.client.am.ResultSet.writeInsertRow(boolean)",1,3,3
"org.apache.derby.client.am.ResultSet.writeUpdateRow(boolean)",1,2,2
"org.apache.derby.client.am.SQLExceptionFactory.getSQLException(String,String,int)",1,1,1
"org.apache.derby.client.am.SQLExceptionFactory.notImplemented(String)",1,1,1
"org.apache.derby.client.am.SQLExceptionFactory40.getSQLException(String,String,int)",1,16,17
"org.apache.derby.client.am.Savepoint.Savepoint(Agent,String)",1,1,1
"org.apache.derby.client.am.Savepoint.Savepoint(Agent,int)",1,1,1
"org.apache.derby.client.am.Savepoint.getSavepointId()",2,2,2
"org.apache.derby.client.am.Savepoint.getSavepointName()",2,2,2
"org.apache.derby.client.am.Section.Section(Agent,String,int,String,int)",1,1,1
"org.apache.derby.client.am.Section.Section(Agent,String,int,String,int,boolean)",1,1,1
"org.apache.derby.client.am.Section.free()",1,2,2
"org.apache.derby.client.am.Section.getClientCursorName()",1,1,1
"org.apache.derby.client.am.Section.getPKGNAMCBytes()",1,1,1
"org.apache.derby.client.am.Section.getPackage()",1,1,1
"org.apache.derby.client.am.Section.getPackageName()",1,1,1
"org.apache.derby.client.am.Section.getPositionedUpdateSection()",1,1,1
"org.apache.derby.client.am.Section.getSectionNumber()",1,1,1
"org.apache.derby.client.am.Section.getServerCursorName()",1,1,1
"org.apache.derby.client.am.Section.getServerCursorNameForPositionedUpdate()",1,1,1
"org.apache.derby.client.am.Section.getStaticStatementType()",1,1,1
"org.apache.derby.client.am.Section.init(Agent,String,int,String,int,boolean)",1,1,4
"org.apache.derby.client.am.Section.isReservedPositionedUpdate()",1,1,1
"org.apache.derby.client.am.Section.setClientCursorName(String)",1,1,1
"org.apache.derby.client.am.Section.setCursorName(String)",1,1,1
"org.apache.derby.client.am.Section.setPKGNAMCBytes(byte[])",1,2,2
"org.apache.derby.client.am.SectionManager.SectionManager(String,Agent,String)",1,1,1
"org.apache.derby.client.am.SectionManager.freeSection(Section,int)",1,3,3
"org.apache.derby.client.am.SectionManager.getDynamicSection(int)",3,3,3
"org.apache.derby.client.am.SectionManager.getPositionedUpdateResultSet(String)",2,1,3
"org.apache.derby.client.am.SectionManager.getPositionedUpdateSection(Section)",1,1,1
"org.apache.derby.client.am.SectionManager.getPositionedUpdateSection(String,boolean)",2,2,2
"org.apache.derby.client.am.SectionManager.getSection(Stack,String,String,int)",3,2,3
"org.apache.derby.client.am.SectionManager.mapCursorNameToQuerySection(String,Section)",1,1,1
"org.apache.derby.client.am.SectionManager.mapCursorNameToResultSet(String,ResultSet)",1,1,1
"org.apache.derby.client.am.SectionManager.removeCursorNameToQuerySectionMapping(String,String)",1,3,3
"org.apache.derby.client.am.SectionManager.removeCursorNameToResultSetMapping(String,String)",1,3,3
"org.apache.derby.client.am.SectionManager.setPKGNAMCBytes(byte[],int)",1,1,3
"org.apache.derby.client.am.SetAccessibleAction.SetAccessibleAction(Field,boolean)",1,1,1
"org.apache.derby.client.am.SetAccessibleAction.run()",1,1,1
"org.apache.derby.client.am.SetAccessibleAction.setAccessible(boolean)",1,1,1
"org.apache.derby.client.am.SetAccessibleAction.setField(Field)",1,1,1
"org.apache.derby.client.am.SignedBinary.SignedBinary()",1,1,1
"org.apache.derby.client.am.SignedBinary.getInt(byte[],int)",1,1,1
"org.apache.derby.client.am.SignedBinary.getLong(byte[],int)",1,1,1
"org.apache.derby.client.am.SignedBinary.getShort(byte[],int)",1,1,1
"org.apache.derby.client.am.SignedBinary.intToBigEndianBytes(byte[],int,int)",1,1,1
"org.apache.derby.client.am.SignedBinary.longToBigEndianBytes(byte[],int,long)",1,1,1
"org.apache.derby.client.am.SignedBinary.shortToBigEndianBytes(byte[],int,short)",1,1,1
"org.apache.derby.client.am.SqlCode.SqlCode(int)",1,1,1
"org.apache.derby.client.am.SqlCode.getCode()",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object,Object)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object,Object,Object)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object,Object,SqlCode)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object,Object,Throwable)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object,SqlCode)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object,Throwable)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object[])",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object[],SqlCode)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object[],SqlCode,Throwable)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Object[],Throwable)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,SqlCode)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,ClientMessageId,Throwable)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,Sqlca)",1,2,2
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,String,String,int)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(LogWriter,Throwable,String,String,int)",1,2,2
"org.apache.derby.client.am.SqlException.SqlException(SQLException)",1,1,1
"org.apache.derby.client.am.SqlException.SqlException(Sqlca,int,boolean)",1,3,3
"org.apache.derby.client.am.SqlException.copyAsUnchainedSQLException(LogWriter)",2,2,2
"org.apache.derby.client.am.SqlException.getErrorCode()",2,2,2
"org.apache.derby.client.am.SqlException.getMessage()",2,3,6
"org.apache.derby.client.am.SqlException.getMessageUtil()",1,1,2
"org.apache.derby.client.am.SqlException.getNextException()",2,2,2
"org.apache.derby.client.am.SqlException.getSQLException()",2,2,3
"org.apache.derby.client.am.SqlException.getSQLState()",2,2,2
"org.apache.derby.client.am.SqlException.getSqlca()",1,1,1
"org.apache.derby.client.am.SqlException.javaException(LogWriter,Throwable)",1,1,1
"org.apache.derby.client.am.SqlException.printTrace(PrintWriter,String)",1,1,1
"org.apache.derby.client.am.SqlException.setBatchPositionLabel(int)",1,1,1
"org.apache.derby.client.am.SqlException.setExceptionFactory(SQLExceptionFactory)",1,1,1
"org.apache.derby.client.am.SqlException.setNextException(SQLException)",1,2,3
"org.apache.derby.client.am.SqlException.setNextException(SqlException)",1,2,2
"org.apache.derby.client.am.SqlException.setThrowable(Throwable)",1,4,4
"org.apache.derby.client.am.SqlState.SqlState(String)",1,1,1
"org.apache.derby.client.am.SqlState.getState()",1,1,1
"org.apache.derby.client.am.SqlWarning.SqlWarning(LogWriter,ClientMessageId)",1,1,1
"org.apache.derby.client.am.SqlWarning.SqlWarning(LogWriter,ClientMessageId,Object)",1,1,1
"org.apache.derby.client.am.SqlWarning.SqlWarning(LogWriter,ClientMessageId,Object,Object)",1,1,1
"org.apache.derby.client.am.SqlWarning.SqlWarning(LogWriter,ClientMessageId,Object,Object,Object)",1,1,1
"org.apache.derby.client.am.SqlWarning.SqlWarning(LogWriter,ClientMessageId,Object[])",1,1,1
"org.apache.derby.client.am.SqlWarning.SqlWarning(LogWriter,ClientMessageId,Object[],Throwable)",1,1,1
"org.apache.derby.client.am.SqlWarning.SqlWarning(LogWriter,Sqlca)",1,1,1
"org.apache.derby.client.am.SqlWarning.getNextWarning()",1,1,1
"org.apache.derby.client.am.SqlWarning.getSQLWarning()",1,3,3
"org.apache.derby.client.am.SqlWarning.setNextWarning(SqlWarning)",1,1,2
"org.apache.derby.client.am.Sqlca.Sqlca(Connection)",1,1,2
"org.apache.derby.client.am.Sqlca.bytes2String(byte[],int,int)",1,1,1
"org.apache.derby.client.am.Sqlca.chainDeferredExceptionsToAgentOrAsConnectionWarnings(SqlException)",1,4,4
"org.apache.derby.client.am.Sqlca.containsSqlcax()",1,1,1
"org.apache.derby.client.am.Sqlca.getJDBCMessage(int)",2,3,4
"org.apache.derby.client.am.Sqlca.getMessage(int)",4,9,13
"org.apache.derby.client.am.Sqlca.getRowCount()",1,1,1
"org.apache.derby.client.am.Sqlca.getRowsetRowCount()",1,1,1
"org.apache.derby.client.am.Sqlca.getSqlCode()",1,1,1
"org.apache.derby.client.am.Sqlca.getSqlErrd()",2,1,2
"org.apache.derby.client.am.Sqlca.getSqlErrmc()",4,2,5
"org.apache.derby.client.am.Sqlca.getSqlErrp()",3,1,4
"org.apache.derby.client.am.Sqlca.getSqlState()",1,1,1
"org.apache.derby.client.am.Sqlca.getSqlState(int)",2,1,2
"org.apache.derby.client.am.Sqlca.getSqlWarn()",2,2,4
"org.apache.derby.client.am.Sqlca.getUnformattedMessage(int)",1,2,2
"org.apache.derby.client.am.Sqlca.getUpdateCount()",2,1,2
"org.apache.derby.client.am.Sqlca.includesSqlCode(int[])",3,2,3
"org.apache.derby.client.am.Sqlca.initSqlErrmcMessages()",1,2,3
"org.apache.derby.client.am.Sqlca.numberOfMessages()",2,1,2
"org.apache.derby.client.am.Sqlca.processSqlErrmcTokens(byte[])",3,2,5
"org.apache.derby.client.am.Sqlca.resetRowsetSqlca(Connection,int,String,byte[])",1,1,1
"org.apache.derby.client.am.Sqlca.returnTokensOnlyInMessageText(boolean)",1,1,1
"org.apache.derby.client.am.Sqlca.setContainsSqlcax(boolean)",1,1,1
"org.apache.derby.client.am.Sqlca.setRowsetRowCount(long)",1,1,1
"org.apache.derby.client.am.Statement.Statement()",1,1,1
"org.apache.derby.client.am.Statement.Statement(Agent,Connection)",1,1,1
"org.apache.derby.client.am.Statement.Statement(Agent,Connection,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.am.Statement.accumulateWarning(SqlWarning)",1,2,2
"org.apache.derby.client.am.Statement.addBatch(String)",1,3,3
"org.apache.derby.client.am.Statement.cacheCursorAttributesToSendOnPrepare()",1,7,7
"org.apache.derby.client.am.Statement.cancel()",1,3,3
"org.apache.derby.client.am.Statement.checkAutoGeneratedKeysParameters()",5,1,8
"org.apache.derby.client.am.Statement.checkForAppropriateSqlMode(int,int)",3,1,5
"org.apache.derby.client.am.Statement.checkForClosedStatement()",3,3,4
"org.apache.derby.client.am.Statement.checkForDuplicateCursorName()",2,2,3
"org.apache.derby.client.am.Statement.checkForInvalidBatchedSql(String)",3,1,8
"org.apache.derby.client.am.Statement.checkForStoredProcResultSetCount(int)",1,3,3
"org.apache.derby.client.am.Statement.checkResultSetCount(int)",5,4,9
"org.apache.derby.client.am.Statement.clearBatch()",1,3,3
"org.apache.derby.client.am.Statement.clearWarnings()",1,3,3
"org.apache.derby.client.am.Statement.clearWarningsX()",1,1,1
"org.apache.derby.client.am.Statement.close()",1,3,3
"org.apache.derby.client.am.Statement.closeX()",2,2,4
"org.apache.derby.client.am.Statement.completeExecute(Sqlca)",2,4,7
"org.apache.derby.client.am.Statement.completeExecuteCall(Sqlca,Cursor)",1,2,5
"org.apache.derby.client.am.Statement.completeExecuteCall(Sqlca,Cursor,ResultSet[])",1,1,2
"org.apache.derby.client.am.Statement.completeExecuteCallOpenQuery(Sqlca,ResultSet,ColumnMetaData,Section)",2,2,4
"org.apache.derby.client.am.Statement.completeExecuteImmediate(Sqlca)",2,2,3
"org.apache.derby.client.am.Statement.completeExecuteSetStatement(Sqlca)",1,1,1
"org.apache.derby.client.am.Statement.completeLocalCommit(Iterator)",1,1,1
"org.apache.derby.client.am.Statement.completeLocalRollback(Iterator)",1,1,1
"org.apache.derby.client.am.Statement.completeOpenQuery(Sqlca,ResultSet)",3,3,9
"org.apache.derby.client.am.Statement.completePrepare(Sqlca)",2,1,2
"org.apache.derby.client.am.Statement.completePrepareDescribeOutput(ColumnMetaData,Sqlca)",1,2,2
"org.apache.derby.client.am.Statement.completeSqlca(Sqlca)",2,3,4
"org.apache.derby.client.am.Statement.escape(String)",1,1,1
"org.apache.derby.client.am.Statement.execute(String)",1,4,4
"org.apache.derby.client.am.Statement.execute(String,String[])",1,4,6
"org.apache.derby.client.am.Statement.execute(String,int)",1,4,4
"org.apache.derby.client.am.Statement.execute(String,int[])",1,4,6
"org.apache.derby.client.am.Statement.executeBatch()",1,4,4
"org.apache.derby.client.am.Statement.executeBatchX()",1,1,1
"org.apache.derby.client.am.Statement.executeQuery(String)",1,4,4
"org.apache.derby.client.am.Statement.executeQueryX(String)",1,1,1
"org.apache.derby.client.am.Statement.executeUpdate(String)",1,4,4
"org.apache.derby.client.am.Statement.executeUpdate(String,String[])",1,4,6
"org.apache.derby.client.am.Statement.executeUpdate(String,int)",1,4,4
"org.apache.derby.client.am.Statement.executeUpdate(String,int[])",1,4,6
"org.apache.derby.client.am.Statement.executeUpdateX(String)",1,1,1
"org.apache.derby.client.am.Statement.executeX(String)",1,1,1
"org.apache.derby.client.am.Statement.extractCursorNameFromWhereCurrentOf(String)",5,10,10
"org.apache.derby.client.am.Statement.finalize()",1,3,3
"org.apache.derby.client.am.Statement.flowClose()",1,1,1
"org.apache.derby.client.am.Statement.flowCloseOutsideUOW()",1,1,1
"org.apache.derby.client.am.Statement.flowCloseRetrievedResultSets()",1,1,2
"org.apache.derby.client.am.Statement.flowCloseRetrievedResultSetsOutsideUOW()",1,1,2
"org.apache.derby.client.am.Statement.flowExecute(int,String)",6,20,41
"org.apache.derby.client.am.Statement.flowExecuteBatch(int[])",1,12,15
"org.apache.derby.client.am.Statement.getConnection()",1,3,3
"org.apache.derby.client.am.Statement.getConnectionCallbackInterface()",1,1,1
"org.apache.derby.client.am.Statement.getFetchDirection()",1,3,3
"org.apache.derby.client.am.Statement.getFetchSize()",1,3,3
"org.apache.derby.client.am.Statement.getGeneratedKeys()",1,4,4
"org.apache.derby.client.am.Statement.getGuessedResultSetMetaData()",1,1,1
"org.apache.derby.client.am.Statement.getJdbcStatementInterfaceName()",1,1,1
"org.apache.derby.client.am.Statement.getMaxFieldSize()",1,3,3
"org.apache.derby.client.am.Statement.getMaxRows()",1,3,3
"org.apache.derby.client.am.Statement.getMoreResults()",1,4,4
"org.apache.derby.client.am.Statement.getMoreResults(int)",1,4,4
"org.apache.derby.client.am.Statement.getMoreResultsX(int)",1,7,12
"org.apache.derby.client.am.Statement.getOwner()",1,1,1
"org.apache.derby.client.am.Statement.getPreparedStatementForAutoGeneratedKeys()",1,2,2
"org.apache.derby.client.am.Statement.getProcedureName(String)",4,1,4
"org.apache.derby.client.am.Statement.getQueryTimeout()",1,3,3
"org.apache.derby.client.am.Statement.getResultSet()",1,4,4
"org.apache.derby.client.am.Statement.getResultSetConcurrency()",1,3,3
"org.apache.derby.client.am.Statement.getResultSetHoldability()",1,3,3
"org.apache.derby.client.am.Statement.getResultSetType()",1,3,3
"org.apache.derby.client.am.Statement.getSqlWarnings()",1,1,1
"org.apache.derby.client.am.Statement.getUpdateCount()",1,4,4
"org.apache.derby.client.am.Statement.getWarnings()",1,4,4
"org.apache.derby.client.am.Statement.initResetPreparedStatement()",1,1,1
"org.apache.derby.client.am.Statement.initResetStatement()",1,3,3
"org.apache.derby.client.am.Statement.initStatement()",1,2,2
"org.apache.derby.client.am.Statement.initStatement(Agent,Connection)",1,1,1
"org.apache.derby.client.am.Statement.initStatement(int,int,int,int,String[],int[])",5,5,9
"org.apache.derby.client.am.Statement.isClosed()",1,3,3
"org.apache.derby.client.am.Statement.isPoolable()",1,3,3
"org.apache.derby.client.am.Statement.isQueryMode()",2,1,2
"org.apache.derby.client.am.Statement.isWrapperFor(Class)",1,2,2
"org.apache.derby.client.am.Statement.jdbc3FeatureNotSupported()",1,1,1
"org.apache.derby.client.am.Statement.jdbc3FeatureNotSupported(boolean)",1,3,3
"org.apache.derby.client.am.Statement.listenToUnitOfWork()",1,1,1
"org.apache.derby.client.am.Statement.mapCursorNameToResultSet()",1,2,2
"org.apache.derby.client.am.Statement.markAutoCommitted()",1,5,5
"org.apache.derby.client.am.Statement.markClosed()",1,1,1
"org.apache.derby.client.am.Statement.markClosed(boolean)",1,4,4
"org.apache.derby.client.am.Statement.markClosedOnServer()",1,3,3
"org.apache.derby.client.am.Statement.markPrepared()",1,1,1
"org.apache.derby.client.am.Statement.markPreparedStatementForAutoGeneratedKeysClosed()",1,2,2
"org.apache.derby.client.am.Statement.markResultSetsClosed()",1,1,1
"org.apache.derby.client.am.Statement.markResultSetsClosed(boolean)",1,6,6
"org.apache.derby.client.am.Statement.parseSqlAndSetSqlModes(String)",7,8,10
"org.apache.derby.client.am.Statement.parseStorProcReturnedScrollableRowset()",1,6,6
"org.apache.derby.client.am.Statement.parseUpdateSql(String)",1,1,4
"org.apache.derby.client.am.Statement.prepareAutoGeneratedKeysStatement()",1,2,2
"org.apache.derby.client.am.Statement.readClose(boolean)",1,1,1
"org.apache.derby.client.am.Statement.readCloseResultSets(boolean)",1,1,2
"org.apache.derby.client.am.Statement.readCloseResultSets(int,boolean)",1,10,16
"org.apache.derby.client.am.Statement.readExecuteCall()",1,1,1
"org.apache.derby.client.am.Statement.readExecuteImmediate()",1,1,1
"org.apache.derby.client.am.Statement.readExecuteImmediateForBatch(String)",1,1,1
"org.apache.derby.client.am.Statement.readOpenQuery()",1,1,1
"org.apache.derby.client.am.Statement.readPrepare()",1,1,1
"org.apache.derby.client.am.Statement.readPrepareAutoGeneratedKeysStatement()",1,2,2
"org.apache.derby.client.am.Statement.readPrepareDescribeOutput()",1,1,1
"org.apache.derby.client.am.Statement.readSetSpecialRegister()",1,2,2
"org.apache.derby.client.am.Statement.removeClientCursorNameFromCache()",1,3,3
"org.apache.derby.client.am.Statement.reset(boolean)",1,2,2
"org.apache.derby.client.am.Statement.resetCursorNameAndRemoveFromWhereCurrentOfMappings()",1,2,2
"org.apache.derby.client.am.Statement.resetForReuse()",1,3,4
"org.apache.derby.client.am.Statement.resetStatement()",1,1,1
"org.apache.derby.client.am.Statement.resetStatement(Agent,Connection)",1,1,1
"org.apache.derby.client.am.Statement.resetStatement(Agent,Connection,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.am.Statement.resetUserControllableAttributes()",1,1,1
"org.apache.derby.client.am.Statement.resultSetCommitting(ResultSet)",1,1,1
"org.apache.derby.client.am.Statement.resultSetCommitting(ResultSet,boolean)",9,3,10
"org.apache.derby.client.am.Statement.setCursorName(String)",3,4,7
"org.apache.derby.client.am.Statement.setEscapeProcessing(boolean)",1,3,3
"org.apache.derby.client.am.Statement.setFetchDirection(int)",2,4,5
"org.apache.derby.client.am.Statement.setFetchSize(int)",2,4,6
"org.apache.derby.client.am.Statement.setMaxFieldSize(int)",2,3,4
"org.apache.derby.client.am.Statement.setMaxRows(int)",2,3,4
"org.apache.derby.client.am.Statement.setOwner(Statement)",1,1,1
"org.apache.derby.client.am.Statement.setPoolable(boolean)",1,3,3
"org.apache.derby.client.am.Statement.setQueryTimeout(int)",2,3,5
"org.apache.derby.client.am.Statement.setUpdateCount(int)",1,1,1
"org.apache.derby.client.am.Statement.setupCursorNameCacheAndMappings()",1,2,2
"org.apache.derby.client.am.Statement.substituteClientCursorNameWithServerCursorName(String,Section)",2,2,2
"org.apache.derby.client.am.Statement.upperCaseProcedureName(String)",2,5,6
"org.apache.derby.client.am.Statement.willTickleServer(int,boolean)",10,5,16
"org.apache.derby.client.am.Statement.writeClose(boolean)",1,1,1
"org.apache.derby.client.am.Statement.writeCloseResultSets(boolean)",1,1,2
"org.apache.derby.client.am.Statement.writeCloseResultSets(int,boolean)",3,10,17
"org.apache.derby.client.am.Statement.writeExecuteCall(String,boolean)",1,1,1
"org.apache.derby.client.am.Statement.writeExecuteCall(boolean,String,Section,int,boolean,int,ColumnMetaData,Object[])",1,1,1
"org.apache.derby.client.am.Statement.writeExecuteImmediate(String,Section)",1,1,1
"org.apache.derby.client.am.Statement.writeOpenQuery(Section,int,int)",1,1,1
"org.apache.derby.client.am.Statement.writePrepare(String,Section)",1,1,1
"org.apache.derby.client.am.Statement.writePrepareDescribeOutput(String,Section)",1,1,1
"org.apache.derby.client.am.Statement.writeSetSpecialRegister(ArrayList)",1,2,2
"org.apache.derby.client.am.Statement40.Statement40(Agent,Connection)",1,1,1
"org.apache.derby.client.am.Statement40.Statement40(Agent,Connection,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.am.Statement40.unwrap(Class<T>)",1,3,3
"org.apache.derby.client.am.StatementCacheInteractor.StatementCacheInteractor(JDBCStatementCache,Connection)",1,1,1
"org.apache.derby.client.am.StatementCacheInteractor.closeOpenLogicalStatements()",1,2,2
"org.apache.derby.client.am.StatementCacheInteractor.createLogicalCallableStatement(CallableStatement,StatementKey)",1,1,1
"org.apache.derby.client.am.StatementCacheInteractor.createLogicalPreparedStatement(PreparedStatement,StatementKey)",1,1,1
"org.apache.derby.client.am.StatementCacheInteractor.getCache()",1,1,1
"org.apache.derby.client.am.StatementCacheInteractor.markClosed(LogicalStatementEntity)",1,3,3
"org.apache.derby.client.am.StatementCacheInteractor.prepareCall(String)",1,2,2
"org.apache.derby.client.am.StatementCacheInteractor.prepareCall(String,int,int)",1,2,2
"org.apache.derby.client.am.StatementCacheInteractor.prepareCall(String,int,int,int)",1,2,2
"org.apache.derby.client.am.StatementCacheInteractor.prepareStatement(String)",1,2,2
"org.apache.derby.client.am.StatementCacheInteractor.prepareStatement(String,int)",1,2,2
"org.apache.derby.client.am.StatementCacheInteractor.prepareStatement(String,int,int)",1,2,2
"org.apache.derby.client.am.StatementCacheInteractor.prepareStatement(String,int,int,int)",1,2,2
"org.apache.derby.client.am.Types.Types()",1,1,1
"org.apache.derby.client.am.Types.getTypeString(int)",26,2,26
"org.apache.derby.client.am.Types.mapDERBYTypeToDriverType(boolean,int,long,int)",22,2,28
"org.apache.derby.client.am.UpdateSensitiveBlobLocatorInputStream.UpdateSensitiveBlobLocatorInputStream(Connection,Blob)",1,1,1
"org.apache.derby.client.am.UpdateSensitiveBlobLocatorInputStream.UpdateSensitiveBlobLocatorInputStream(Connection,Blob,long,long)",1,1,1
"org.apache.derby.client.am.UpdateSensitiveBlobLocatorInputStream.reCreateStream()",1,1,2
"org.apache.derby.client.am.UpdateSensitiveClobLocatorInputStream.UpdateSensitiveClobLocatorInputStream(Connection,Clob)",1,1,1
"org.apache.derby.client.am.UpdateSensitiveClobLocatorInputStream.reCreateStream()",1,1,1
"org.apache.derby.client.am.UpdateSensitiveClobLocatorReader.UpdateSensitiveClobLocatorReader(Connection,Clob)",1,1,1
"org.apache.derby.client.am.UpdateSensitiveClobLocatorReader.UpdateSensitiveClobLocatorReader(Connection,Clob,long,long)",1,1,1
"org.apache.derby.client.am.UpdateSensitiveClobLocatorReader.close()",1,1,1
"org.apache.derby.client.am.UpdateSensitiveClobLocatorReader.identifyAndReplaceObseleteStream()",2,3,3
"org.apache.derby.client.am.UpdateSensitiveClobLocatorReader.reCreateStream()",1,1,2
"org.apache.derby.client.am.UpdateSensitiveClobLocatorReader.read()",2,1,2
"org.apache.derby.client.am.UpdateSensitiveClobLocatorReader.read(char[],int,int)",2,1,2
"org.apache.derby.client.am.UpdateSensitiveLOBLocatorInputStream.UpdateSensitiveLOBLocatorInputStream(Connection,Lob,InputStream)",1,1,1
"org.apache.derby.client.am.UpdateSensitiveLOBLocatorInputStream.UpdateSensitiveLOBLocatorInputStream(Connection,Lob,InputStream,long,long)",1,1,1
"org.apache.derby.client.am.UpdateSensitiveLOBLocatorInputStream.close()",1,2,2
"org.apache.derby.client.am.UpdateSensitiveLOBLocatorInputStream.identifyAndReplaceObseleteStream()",2,3,3
"org.apache.derby.client.am.UpdateSensitiveLOBLocatorInputStream.read()",2,1,2
"org.apache.derby.client.am.UpdateSensitiveLOBLocatorInputStream.read(byte[],int,int)",2,1,2
"org.apache.derby.client.am.Utils.accumulateSQLException(SQLException,SQLException)",2,2,2
"org.apache.derby.client.am.Utils.accumulateSQLException(SqlException,SqlException)",2,2,2
"org.apache.derby.client.am.Utils.accumulateSQLWarning(SqlWarning,SqlWarning)",1,1,1
"org.apache.derby.client.am.Utils.byteArrayCmp(byte[],byte[])",10,1,10
"org.apache.derby.client.am.Utils.checkForNegativePositiveSqlcard(Sqlca,ResultSet)",3,4,4
"org.apache.derby.client.am.Utils.checkForNegativePositiveSqlcard(Sqlca,Statement)",3,4,4
"org.apache.derby.client.am.Utils.computeBigDecimalPrecision(BigDecimal)",5,3,5
"org.apache.derby.client.am.Utils.getNonNullableSqlType(int)",1,1,1
"org.apache.derby.client.am.Utils.getSQLTypeName(int)",23,2,23
"org.apache.derby.client.am.Utils.getSqlcodeFromSqlca(Sqlca)",2,1,2
"org.apache.derby.client.am.Utils.getStringFromBytes(byte[])",2,3,4
"org.apache.derby.client.am.Utils.getStringFromInts(int[])",2,3,4
"org.apache.derby.client.am.Utils.getStringFromStrings(String[])",2,3,4
"org.apache.derby.client.am.Utils.getUpdateCountFromSqlcard(Sqlca)",2,2,2
"org.apache.derby.client.am.Utils.isSqlTypeNullable(int)",1,1,1
"org.apache.derby.client.am.Utils.max(int,int)",1,1,2
"org.apache.derby.client.am.Utils.min(int,int)",1,1,2
"org.apache.derby.client.am.Utils.padOrTruncate(String,int)",2,3,3
"org.apache.derby.client.am.Version.detectLocalHost(SecurityManager,PrintWriter)",1,3,3
"org.apache.derby.client.am.Version.getBuildNumber()",1,1,1
"org.apache.derby.client.am.Version.getDriverName()",1,1,1
"org.apache.derby.client.am.Version.getDriverNameAndVersion()",1,1,1
"org.apache.derby.client.am.Version.getDriverVersion()",1,1,1
"org.apache.derby.client.am.Version.getMajorVersion()",1,1,1
"org.apache.derby.client.am.Version.getMinorVersion()",1,1,1
"org.apache.derby.client.am.Version.getProtocolMaintVersion()",1,1,1
"org.apache.derby.client.am.Version.isAlpha()",1,1,1
"org.apache.derby.client.am.Version.isBeta()",1,1,1
"org.apache.derby.client.am.Version.printSystemProperty(SecurityManager,String,String,PrintWriter)",1,3,3
"org.apache.derby.client.am.Version.writeDriverConfiguration(PrintWriter)",1,4,4
"org.apache.derby.client.am.XaException.XaException(LogWriter)",1,2,2
"org.apache.derby.client.am.XaException.XaException(LogWriter,String)",1,2,2
"org.apache.derby.client.am.XaException.XaException(LogWriter,Throwable)",1,2,2
"org.apache.derby.client.am.XaException.XaException(LogWriter,Throwable,String)",1,2,2
"org.apache.derby.client.am.XaException.XaException(LogWriter,Throwable,int)",1,2,2
"org.apache.derby.client.am.XaException.XaException(LogWriter,int)",1,2,2
"org.apache.derby.client.am.XaException.copyAsUnchainedXAException(LogWriter)",1,1,1
"org.apache.derby.client.am.XaException.getSqlca()",1,1,1
"org.apache.derby.client.am.XaException.printTrace(PrintWriter,String)",1,1,1
"org.apache.derby.client.am._Suite._Suite(String)",1,1,1
"org.apache.derby.client.am._Suite.suite()",1,1,1
"org.apache.derby.client.am.stmtcache.JDBCStatementCache.BoundedLinkedHashMap.BoundedLinkedHashMap(int)",1,1,1
"org.apache.derby.client.am.stmtcache.JDBCStatementCache.BoundedLinkedHashMap.removeEldestEntry(Entry)",1,4,5
"org.apache.derby.client.am.stmtcache.JDBCStatementCache.JDBCStatementCache(int)",2,1,2
"org.apache.derby.client.am.stmtcache.JDBCStatementCache.cacheStatement(StatementKey,PreparedStatement)",1,3,3
"org.apache.derby.client.am.stmtcache.JDBCStatementCache.getCached(StatementKey)",1,2,2
"org.apache.derby.client.am.stmtcache.StatementKey.StatementKey(boolean,String,String,int,int,int,int)",2,2,8
"org.apache.derby.client.am.stmtcache.StatementKey.equals(Object)",10,1,11
"org.apache.derby.client.am.stmtcache.StatementKey.hashCode()",1,2,3
"org.apache.derby.client.am.stmtcache.StatementKey.toString()",1,1,1
"org.apache.derby.client.am.stmtcache.StatementKeyFactory.StatementKeyFactory()",1,1,1
"org.apache.derby.client.am.stmtcache.StatementKeyFactory.newCallable(String,String,int)",1,1,1
"org.apache.derby.client.am.stmtcache.StatementKeyFactory.newCallable(String,String,int,int,int)",1,1,1
"org.apache.derby.client.am.stmtcache.StatementKeyFactory.newPrepared(String,String,int)",1,1,1
"org.apache.derby.client.am.stmtcache.StatementKeyFactory.newPrepared(String,String,int,int)",1,1,1
"org.apache.derby.client.am.stmtcache.StatementKeyFactory.newPrepared(String,String,int,int,int)",1,1,1
"org.apache.derby.client.net.CcsidManager.CcsidManager(byte,byte,byte[],byte[])",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newCachingLogicalConnection(Connection,ClientPooledConnection,JDBCStatementCache)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newCallableStatement(Agent,Connection,String,int,int,int,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newClientPooledConnection(ClientBaseDataSource,LogWriter,String,String)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newClientPooledConnection(ClientBaseDataSource,LogWriter,String,String,int)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newClientXAConnection(ClientBaseDataSource,LogWriter,String,String)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newColumnMetaData(LogWriter)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newColumnMetaData(LogWriter,int)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newLogicalCallableStatement(CallableStatement,StatementKey,StatementCacheInteractor)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newLogicalConnection(Connection,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newLogicalPreparedStatement(PreparedStatement,StatementKey,StatementCacheInteractor)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(LogWriter,ClientBaseDataSource,String,String)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(LogWriter,String,Properties)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(LogWriter,String,String,ClientBaseDataSource,int,boolean)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(LogWriter,String,String,ClientBaseDataSource,int,boolean,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(LogWriter,String,int,ClientBaseDataSource,boolean)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetConnection(LogWriter,int,String,int,String,Properties)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetDatabaseMetaData(Agent,Connection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newNetResultSet(Agent,MaterialStatement,Cursor,int,int,int,int,int,long,int,int,int)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newParameterMetaData(ColumnMetaData)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newPreparedStatement(Agent,Connection,String,Section,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newPreparedStatement(Agent,Connection,String,int,int,int,int,String[],int[],ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newStatement(Agent,Connection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl.newStatement(Agent,Connection,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.ClientJDBCObjectFactoryImpl40()",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newCachingLogicalConnection(Connection,ClientPooledConnection,JDBCStatementCache)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newCallableStatement(Agent,Connection,String,int,int,int,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newClientPooledConnection(ClientBaseDataSource,LogWriter,String,String)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newClientPooledConnection(ClientBaseDataSource,LogWriter,String,String,int)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newClientXAConnection(ClientBaseDataSource,LogWriter,String,String)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newColumnMetaData(LogWriter)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newColumnMetaData(LogWriter,int)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newLogicalCallableStatement(CallableStatement,StatementKey,StatementCacheInteractor)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newLogicalConnection(Connection,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newLogicalPreparedStatement(PreparedStatement,StatementKey,StatementCacheInteractor)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(LogWriter,ClientBaseDataSource,String,String)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(LogWriter,String,Properties)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(LogWriter,String,String,ClientBaseDataSource,int,boolean)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(LogWriter,String,String,ClientBaseDataSource,int,boolean,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(LogWriter,String,int,ClientBaseDataSource,boolean)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetConnection(LogWriter,int,String,int,String,Properties)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetDatabaseMetaData(Agent,Connection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newNetResultSet(Agent,MaterialStatement,Cursor,int,int,int,int,int,long,int,int,int)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newParameterMetaData(ColumnMetaData)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newPreparedStatement(Agent,Connection,String,Section,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newPreparedStatement(Agent,Connection,String,int,int,int,int,String[],int[],ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newStatement(Agent,Connection)",1,1,1
"org.apache.derby.client.net.ClientJDBCObjectFactoryImpl40.newStatement(Agent,Connection,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.net.CodePoint.CodePoint()",1,1,1
"org.apache.derby.client.net.CodePointNameTable.CodePointNameTable()",1,1,1
"org.apache.derby.client.net.CodePointNameTable.lookup(int)",1,1,1
"org.apache.derby.client.net.ConnectionReply.ConnectionReply(Agent,ConnectionReplyInterface)",1,1,1
"org.apache.derby.client.net.ConnectionReply.readCommitSubstitute(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.ConnectionReply.readLocalCommit(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.ConnectionReply.readLocalRollback(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.ConnectionReply.readLocalXACommit(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.ConnectionReply.readLocalXARollback(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.ConnectionReply.readLocalXAStart(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.DssConstants.DssConstants()",1,1,1
"org.apache.derby.client.net.EbcdicCcsidManager.EbcdicCcsidManager()",1,1,1
"org.apache.derby.client.net.EbcdicCcsidManager.convertFromUCS2(String,Agent)",1,1,1
"org.apache.derby.client.net.EbcdicCcsidManager.convertFromUCS2(String,byte[],int,Agent)",3,2,3
"org.apache.derby.client.net.EbcdicCcsidManager.convertToUCS2(byte[])",1,1,3
"org.apache.derby.client.net.EbcdicCcsidManager.convertToUCS2(byte[],int,int)",1,1,3
"org.apache.derby.client.net.EbcdicCcsidManager.convertToUCS2Char(byte)",1,1,2
"org.apache.derby.client.net.EncodedInputStream.EncodedInputStream(Reader,String,int,int)",1,3,3
"org.apache.derby.client.net.EncodedInputStream.PublicBufferOutputStream.PublicBufferOutputStream(int)",1,1,1
"org.apache.derby.client.net.EncodedInputStream.PublicBufferOutputStream.getBuffer()",1,1,1
"org.apache.derby.client.net.EncodedInputStream.available()",2,2,3
"org.apache.derby.client.net.EncodedInputStream.close()",1,4,4
"org.apache.derby.client.net.EncodedInputStream.createUTF16BEStream(Reader)",1,1,1
"org.apache.derby.client.net.EncodedInputStream.createUTF8Stream(Reader)",1,1,1
"org.apache.derby.client.net.EncodedInputStream.finalize()",1,1,1
"org.apache.derby.client.net.EncodedInputStream.reEncode(Reader)",2,2,3
"org.apache.derby.client.net.EncodedInputStream.read()",4,3,5
"org.apache.derby.client.net.FdocaSimpleDataArray.FdocaSimpleDataArray(int,int,int,int,int,int,int,int)",1,1,1
"org.apache.derby.client.net.FdocaSimpleDataArray.update(int,int,int,int,int,int,int,int)",1,1,1
"org.apache.derby.client.net.NaiveTrustManager.NaiveTrustManager()",1,1,1
"org.apache.derby.client.net.NaiveTrustManager.checkClientTrusted(X509Certificate[],String)",1,1,1
"org.apache.derby.client.net.NaiveTrustManager.checkServerTrusted(X509Certificate[],String)",1,1,1
"org.apache.derby.client.net.NaiveTrustManager.getAcceptedIssuers()",1,1,1
"org.apache.derby.client.net.NaiveTrustManager.getSocketFactory()",1,4,5
"org.apache.derby.client.net.NetAgent.NetAgent(NetConnection,LogWriter)",1,1,1
"org.apache.derby.client.net.NetAgent.NetAgent(NetConnection,LogWriter,int,String,int,int)",2,6,10
"org.apache.derby.client.net.NetAgent.beginReadChain(Statement)",1,1,1
"org.apache.derby.client.net.NetAgent.beginReadChainOutsideUOW()",1,1,1
"org.apache.derby.client.net.NetAgent.beginWriteChain(Statement)",1,1,1
"org.apache.derby.client.net.NetAgent.beginWriteChainOutsideUOW()",1,1,1
"org.apache.derby.client.net.NetAgent.checkForChainBreakingException_()",1,2,2
"org.apache.derby.client.net.NetAgent.clearSvrcod()",1,1,1
"org.apache.derby.client.net.NetAgent.close_()",2,7,8
"org.apache.derby.client.net.NetAgent.convertToStringTcpIpAddress(int)",1,1,1
"org.apache.derby.client.net.NetAgent.endReadChain()",1,1,1
"org.apache.derby.client.net.NetAgent.endWriteChain()",1,1,1
"org.apache.derby.client.net.NetAgent.flush_()",1,1,1
"org.apache.derby.client.net.NetAgent.getInputStream()",1,1,1
"org.apache.derby.client.net.NetAgent.getOutputStream()",1,1,1
"org.apache.derby.client.net.NetAgent.getPort()",1,1,1
"org.apache.derby.client.net.NetAgent.getSvrcod()",1,1,1
"org.apache.derby.client.net.NetAgent.getTimeout()",1,3,3
"org.apache.derby.client.net.NetAgent.markChainBreakingException_()",1,1,1
"org.apache.derby.client.net.NetAgent.newLogWriter_(PrintWriter,int)",1,1,1
"org.apache.derby.client.net.NetAgent.readDeferredResetConnection()",2,2,3
"org.apache.derby.client.net.NetAgent.resetAgent_(LogWriter,int,String,int)",1,2,3
"org.apache.derby.client.net.NetAgent.sendRequest()",1,2,2
"org.apache.derby.client.net.NetAgent.setInputStream(InputStream)",1,1,1
"org.apache.derby.client.net.NetAgent.setOutputStream(OutputStream)",1,1,1
"org.apache.derby.client.net.NetAgent.setSvrcod(int)",1,1,2
"org.apache.derby.client.net.NetAgent.setTimeout(int)",1,3,3
"org.apache.derby.client.net.NetAgent.throwCommunicationsFailure(Throwable)",1,1,1
"org.apache.derby.client.net.NetAgent.writeDeferredResetConnection()",2,2,3
"org.apache.derby.client.net.NetCallableStatement.NetCallableStatement(CallableStatement,NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetCallableStatement.NetCallableStatement(NetAgent,NetConnection,String,int,int,int,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.NetCallableStatement.finalize()",1,1,1
"org.apache.derby.client.net.NetCallableStatement.initNetCallableStatement()",1,1,1
"org.apache.derby.client.net.NetCallableStatement.initNetCallableStatement(CallableStatement)",1,1,1
"org.apache.derby.client.net.NetCallableStatement.resetNetCallableStatement(CallableStatement,NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetCallableStatement.resetNetCallableStatement(NetAgent,NetConnection,String,Section)",1,1,1
"org.apache.derby.client.net.NetCallableStatement.resetNetCallableStatement(NetAgent,NetConnection,String,Section,ColumnMetaData,ColumnMetaData)",1,1,1
"org.apache.derby.client.net.NetCallableStatement.resetNetCallableStatement(NetAgent,NetConnection,String,int,int,int)",1,1,1
"org.apache.derby.client.net.NetConnection.NetConnection(NetLogWriter,ClientBaseDataSource,String,String)",1,1,1
"org.apache.derby.client.net.NetConnection.NetConnection(NetLogWriter,String,Properties)",1,1,1
"org.apache.derby.client.net.NetConnection.NetConnection(NetLogWriter,String,String,ClientBaseDataSource,int,boolean)",1,1,1
"org.apache.derby.client.net.NetConnection.NetConnection(NetLogWriter,String,String,ClientBaseDataSource,int,boolean,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.NetConnection.NetConnection(NetLogWriter,String,int,ClientBaseDataSource,boolean)",2,1,2
"org.apache.derby.client.net.NetConnection.NetConnection(NetLogWriter,int,String,int,String,Properties)",2,2,3
"org.apache.derby.client.net.NetConnection.addSpecialRegisters(String)",1,2,2
"org.apache.derby.client.net.NetConnection.allowCloseInUOW_()",1,1,1
"org.apache.derby.client.net.NetConnection.allowLocalCommitRollback_()",2,1,2
"org.apache.derby.client.net.NetConnection.checkAlternateServerHasEqualOrHigherProductLevel(ProductLevel,int)",2,3,7
"org.apache.derby.client.net.NetConnection.checkDatabaseName()",2,1,2
"org.apache.derby.client.net.NetConnection.checkPasswordLength(String)",2,1,3
"org.apache.derby.client.net.NetConnection.checkSecmgrForSecmecSupport(int)",2,1,5
"org.apache.derby.client.net.NetConnection.checkUser(String)",2,1,2
"org.apache.derby.client.net.NetConnection.checkUserLength(String)",2,1,3
"org.apache.derby.client.net.NetConnection.checkUserPassword(String,String)",2,1,2
"org.apache.derby.client.net.NetConnection.close()",3,2,4
"org.apache.derby.client.net.NetConnection.closeForReuse()",3,2,4
"org.apache.derby.client.net.NetConnection.closeResources()",3,2,4
"org.apache.derby.client.net.NetConnection.closeX()",3,2,4
"org.apache.derby.client.net.NetConnection.completeConnect()",1,1,1
"org.apache.derby.client.net.NetConnection.completeReset(boolean,boolean)",1,1,2
"org.apache.derby.client.net.NetConnection.constructCrrtkn()",1,2,6
"org.apache.derby.client.net.NetConnection.constructExtnam()",1,1,1
"org.apache.derby.client.net.NetConnection.constructPrddta()",1,3,4
"org.apache.derby.client.net.NetConnection.doCloseStatementsOnClose_()",1,1,1
"org.apache.derby.client.net.NetConnection.doResetNow()",2,1,2
"org.apache.derby.client.net.NetConnection.encryptedPasswordForEUSRIDPWD(String)",1,1,1
"org.apache.derby.client.net.NetConnection.encryptedPasswordForUSRENCPWD(String)",1,1,1
"org.apache.derby.client.net.NetConnection.encryptedUseridForEUSRIDPWD()",1,1,1
"org.apache.derby.client.net.NetConnection.finalize()",1,1,1
"org.apache.derby.client.net.NetConnection.flipBits(char[])",1,1,2
"org.apache.derby.client.net.NetConnection.flowConnect(String,int)",2,5,13
"org.apache.derby.client.net.NetConnection.flowEUSRIDDTAconnect()",1,1,1
"org.apache.derby.client.net.NetConnection.flowEUSRIDPWDconnect(String)",1,1,1
"org.apache.derby.client.net.NetConnection.flowEUSRPWDDTAconnect(String)",1,1,1
"org.apache.derby.client.net.NetConnection.flowKeyExchange(int,byte[])",1,1,1
"org.apache.derby.client.net.NetConnection.flowReconnect(String,int)",2,4,12
"org.apache.derby.client.net.NetConnection.flowSecurityCheckAndAccessRdb(int,String,String,byte[],byte[])",1,1,1
"org.apache.derby.client.net.NetConnection.flowSeedExchange(int,byte[])",1,1,1
"org.apache.derby.client.net.NetConnection.flowServerAttributes()",1,1,1
"org.apache.derby.client.net.NetConnection.flowServerAttributesAndKeyExchange(int,byte[])",1,1,1
"org.apache.derby.client.net.NetConnection.flowServerAttributesAndSeedExchange(int,byte[])",1,1,1
"org.apache.derby.client.net.NetConnection.flowSimpleConnect()",1,4,5
"org.apache.derby.client.net.NetConnection.flowUSRENCPWDconnect(String)",1,1,1
"org.apache.derby.client.net.NetConnection.flowUSRIDONLconnect()",1,1,1
"org.apache.derby.client.net.NetConnection.flowUSRIDPWDconnect(String)",1,1,1
"org.apache.derby.client.net.NetConnection.flowUSRSSBPWDconnect(String)",1,1,1
"org.apache.derby.client.net.NetConnection.getAGENT()",1,1,1
"org.apache.derby.client.net.NetConnection.getCMNTCPIP()",1,1,1
"org.apache.derby.client.net.NetConnection.getCnnToken()",1,1,1
"org.apache.derby.client.net.NetConnection.getDeferredResetPassword()",2,1,2
"org.apache.derby.client.net.NetConnection.getEncryptionManager()",1,1,1
"org.apache.derby.client.net.NetConnection.getInputStream()",1,1,1
"org.apache.derby.client.net.NetConnection.getOutputStream()",1,1,1
"org.apache.derby.client.net.NetConnection.getProductID()",1,1,1
"org.apache.derby.client.net.NetConnection.getRDB()",1,1,1
"org.apache.derby.client.net.NetConnection.getRSYNCMGR()",1,1,1
"org.apache.derby.client.net.NetConnection.getSECMGR()",1,1,1
"org.apache.derby.client.net.NetConnection.getSQLAM()",1,1,1
"org.apache.derby.client.net.NetConnection.getSYNCPTMGR()",1,1,1
"org.apache.derby.client.net.NetConnection.getSecurityMechanism()",1,1,1
"org.apache.derby.client.net.NetConnection.getSequenceNumber()",1,1,1
"org.apache.derby.client.net.NetConnection.getSocketAndInputOutputStreams(String,int,int)",1,5,6
"org.apache.derby.client.net.NetConnection.getSpecialRegisters()",2,2,2
"org.apache.derby.client.net.NetConnection.getTargetPublicKey()",1,1,1
"org.apache.derby.client.net.NetConnection.getXAMGR()",1,1,1
"org.apache.derby.client.net.NetConnection.initialize(String,ClientBaseDataSource,int,boolean)",1,1,1
"org.apache.derby.client.net.NetConnection.initializeClientSeed()",1,1,2
"org.apache.derby.client.net.NetConnection.initializePublicKeyForEncryption()",1,1,2
"org.apache.derby.client.net.NetConnection.isConnectionNull()",1,1,1
"org.apache.derby.client.net.NetConnection.isGlobalPending_()",1,1,1
"org.apache.derby.client.net.NetConnection.isOpen()",1,1,1
"org.apache.derby.client.net.NetConnection.mapSecchkcd(int)",13,12,13
"org.apache.derby.client.net.NetConnection.markClosed_()",1,1,1
"org.apache.derby.client.net.NetConnection.newAgent_(LogWriter,int,String,int,int)",1,1,1
"org.apache.derby.client.net.NetConnection.newCallableStatement_(String,int,int,int)",1,1,1
"org.apache.derby.client.net.NetConnection.newDatabaseMetaData_()",1,1,1
"org.apache.derby.client.net.NetConnection.newPositionedUpdatePreparedStatement_(String,Section)",1,1,1
"org.apache.derby.client.net.NetConnection.newPreparedStatement_(String,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.net.NetConnection.newSectionManager(String,Agent,String)",1,1,1
"org.apache.derby.client.net.NetConnection.newStatement_(int,int,int)",1,1,1
"org.apache.derby.client.net.NetConnection.passwordSubstituteForUSRSSBPWD(String)",1,4,5
"org.apache.derby.client.net.NetConnection.rdbAccessed(int,String,boolean,byte[])",1,1,2
"org.apache.derby.client.net.NetConnection.readAllConnectCommandsChained(int)",1,1,1
"org.apache.derby.client.net.NetConnection.readCommitSubstitute_()",1,1,1
"org.apache.derby.client.net.NetConnection.readDeferredReset()",1,3,4
"org.apache.derby.client.net.NetConnection.readLocalCommit_()",1,1,1
"org.apache.derby.client.net.NetConnection.readLocalRollback_()",1,1,1
"org.apache.derby.client.net.NetConnection.readLocalXACommit_()",1,1,1
"org.apache.derby.client.net.NetConnection.readLocalXARollback_()",1,1,1
"org.apache.derby.client.net.NetConnection.readLocalXAStart_()",1,1,1
"org.apache.derby.client.net.NetConnection.readSecurityCheckAndAccessRdb()",1,1,1
"org.apache.derby.client.net.NetConnection.readServerAttributesAndKeyExchange(int)",1,1,1
"org.apache.derby.client.net.NetConnection.readServerAttributesAndSeedExchange()",1,1,1
"org.apache.derby.client.net.NetConnection.readTransactionStart()",1,1,1
"org.apache.derby.client.net.NetConnection.readXACommit_()",1,1,1
"org.apache.derby.client.net.NetConnection.readXARollback_()",1,1,1
"org.apache.derby.client.net.NetConnection.resetCallableStatement_(CallableStatement,String,int,int,int)",1,1,1
"org.apache.derby.client.net.NetConnection.resetNetConnection(LogWriter,boolean)",1,1,2
"org.apache.derby.client.net.NetConnection.resetPreparedStatement_(PreparedStatement,String,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.net.NetConnection.resetStatement_(Statement,int,int,int)",1,1,1
"org.apache.derby.client.net.NetConnection.reset_(LogWriter,boolean)",2,1,2
"org.apache.derby.client.net.NetConnection.securityCheckComplete(int,int)",2,1,2
"org.apache.derby.client.net.NetConnection.serverSupportsLayerBStreaming()",1,1,1
"org.apache.derby.client.net.NetConnection.serverSupportsLocators()",1,1,1
"org.apache.derby.client.net.NetConnection.serverSupportsQryclsimp()",1,1,1
"org.apache.derby.client.net.NetConnection.setAccessSecurityData(int,int,int[],boolean,byte[])",1,6,12
"org.apache.derby.client.net.NetConnection.setConnectionNull(boolean)",1,1,1
"org.apache.derby.client.net.NetConnection.setDeferredResetPassword(String)",1,2,2
"org.apache.derby.client.net.NetConnection.setIndoubtTransactions(Hashtable)",1,3,3
"org.apache.derby.client.net.NetConnection.setInputStream(InputStream)",1,1,1
"org.apache.derby.client.net.NetConnection.setOutputStream(OutputStream)",1,1,1
"org.apache.derby.client.net.NetConnection.setReadOnlyTransactionFlag(boolean)",1,1,1
"org.apache.derby.client.net.NetConnection.setServerAttributeData(String,String,String,String)",1,1,1
"org.apache.derby.client.net.NetConnection.supportsSessionDataCaching()",1,1,1
"org.apache.derby.client.net.NetConnection.willAutoCommitGenerateFlow()",3,1,4
"org.apache.derby.client.net.NetConnection.writeAllConnectCommandsChained(int,String,String)",1,1,1
"org.apache.derby.client.net.NetConnection.writeCommitSubstitute_()",1,1,1
"org.apache.derby.client.net.NetConnection.writeDeferredReset()",1,7,7
"org.apache.derby.client.net.NetConnection.writeLocalCommit_()",1,1,1
"org.apache.derby.client.net.NetConnection.writeLocalRollback_()",1,1,1
"org.apache.derby.client.net.NetConnection.writeLocalXACommit_()",1,1,1
"org.apache.derby.client.net.NetConnection.writeLocalXARollback_()",1,1,1
"org.apache.derby.client.net.NetConnection.writeLocalXAStart_()",1,1,1
"org.apache.derby.client.net.NetConnection.writeSecurityCheckAndAccessRdb(int,String,String,byte[],byte[])",1,1,1
"org.apache.derby.client.net.NetConnection.writeServerAttributesAndKeyExchange(int,byte[])",1,1,1
"org.apache.derby.client.net.NetConnection.writeServerAttributesAndSeedExchange(byte[])",1,1,1
"org.apache.derby.client.net.NetConnection.writeTransactionStart(Statement)",1,1,1
"org.apache.derby.client.net.NetConnection.writeXACommit_()",1,1,1
"org.apache.derby.client.net.NetConnection.writeXARollback_()",1,1,1
"org.apache.derby.client.net.NetConnection.writeXATransactionStart(Statement)",1,1,1
"org.apache.derby.client.net.NetConnection40.NetConnection40(NetLogWriter,ClientBaseDataSource,String,String)",1,1,1
"org.apache.derby.client.net.NetConnection40.NetConnection40(NetLogWriter,String,Properties)",1,1,1
"org.apache.derby.client.net.NetConnection40.NetConnection40(NetLogWriter,String,String,ClientBaseDataSource,int,boolean)",1,1,1
"org.apache.derby.client.net.NetConnection40.NetConnection40(NetLogWriter,String,String,ClientBaseDataSource,int,boolean,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.NetConnection40.NetConnection40(NetLogWriter,String,int,ClientBaseDataSource,boolean)",1,1,1
"org.apache.derby.client.net.NetConnection40.NetConnection40(NetLogWriter,int,String,int,String,Properties)",1,1,1
"org.apache.derby.client.net.NetConnection40.close()",1,2,2
"org.apache.derby.client.net.NetConnection40.createArrayOf(String,Object[])",1,1,1
"org.apache.derby.client.net.NetConnection40.createNClob()",1,1,1
"org.apache.derby.client.net.NetConnection40.createSQLXML()",1,1,1
"org.apache.derby.client.net.NetConnection40.createStruct(String,Object[])",1,1,1
"org.apache.derby.client.net.NetConnection40.getClientInfo()",1,2,2
"org.apache.derby.client.net.NetConnection40.getClientInfo(String)",1,2,2
"org.apache.derby.client.net.NetConnection40.getTypeMap()",2,2,3
"org.apache.derby.client.net.NetConnection40.isValid(int)",3,3,5
"org.apache.derby.client.net.NetConnection40.isWrapperFor(Class<?>)",1,2,2
"org.apache.derby.client.net.NetConnection40.setClientInfo(Properties)",2,3,4
"org.apache.derby.client.net.NetConnection40.setClientInfo(String,String)",2,2,4
"org.apache.derby.client.net.NetConnection40.unwrap(Class<T>)",1,3,3
"org.apache.derby.client.net.NetConnectionReply.NetConnectionReply(NetAgent,int)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.checkAndGetReceivedFlag(boolean)",1,2,2
"org.apache.derby.client.net.NetConnectionReply.checkRequiredObjects(boolean)",1,2,2
"org.apache.derby.client.net.NetConnectionReply.checkRequiredObjects(boolean,boolean)",1,2,3
"org.apache.derby.client.net.NetConnectionReply.checkRequiredObjects(boolean,boolean,boolean)",1,2,4
"org.apache.derby.client.net.NetConnectionReply.checkRequiredObjects(boolean,boolean,boolean,boolean)",1,2,5
"org.apache.derby.client.net.NetConnectionReply.checkRequiredObjects(boolean,boolean,boolean,boolean,boolean,boolean)",1,2,7
"org.apache.derby.client.net.NetConnectionReply.checkRequiredObjects(boolean,boolean,boolean,boolean,boolean,boolean,boolean)",1,2,8
"org.apache.derby.client.net.NetConnectionReply.doDtamchrmSemantics()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.doMgrlvlrmSemantics(String,String)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.doMgrlvlrmSemantics(int,int)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.doMgrlvlrmSemantics(int[],int[])",1,3,3
"org.apache.derby.client.net.NetConnectionReply.doObjnsprmSemantics(int)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.doPrccnvrmSemantics(int)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.doPrmnsprmSemantics(int)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.doValnsprmSemantics(int,String)",4,4,9
"org.apache.derby.client.net.NetConnectionReply.doValnsprmSemantics(int,int)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseABNUOWRM()",1,5,5
"org.apache.derby.client.net.NetConnectionReply.parseACCRDBRM(NetConnection)",1,9,9
"org.apache.derby.client.net.NetConnectionReply.parseACCRDBreply(NetConnection)",3,2,3
"org.apache.derby.client.net.NetConnectionReply.parseACCSECRD(NetConnection,int)",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parseACCSECreply(NetConnection,int)",3,2,3
"org.apache.derby.client.net.NetConnectionReply.parseAbnormalEndUow(ConnectionCallbackInterface,UnitOfWorkListener)",1,4,4
"org.apache.derby.client.net.NetConnectionReply.parseAbnormalEndUow(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseAbnormalEndUow(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseAccessRdbError(NetConnection)",2,2,7
"org.apache.derby.client.net.NetConnectionReply.parseAccessSecurityError(NetConnection)",2,2,5
"org.apache.derby.client.net.NetConnectionReply.parseCCSIDDBC()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseCCSIDMBC()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseCCSIDSBC()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseCMDCHKRM()",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parseCMDNSPRM()",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parseCODPNT()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseCODPNTDR()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseCRRTKN(boolean)",2,2,2
"org.apache.derby.client.net.NetConnectionReply.parseCommitError(ConnectionCallbackInterface)",2,2,5
"org.apache.derby.client.net.NetConnectionReply.parseCommonError(int)",2,2,6
"org.apache.derby.client.net.NetConnectionReply.parseConnectError()",2,2,4
"org.apache.derby.client.net.NetConnectionReply.parseDummyEXCSATRD(NetConnection)",1,8,8
"org.apache.derby.client.net.NetConnectionReply.parseDummyEXCSATreply(NetConnection)",2,2,2
"org.apache.derby.client.net.NetConnectionReply.parseENDUOWRM(ConnectionCallbackInterface)",1,7,7
"org.apache.derby.client.net.NetConnectionReply.parseEXCSATRD(NetConnection)",1,8,8
"org.apache.derby.client.net.NetConnectionReply.parseEXCSATreply(NetConnection)",2,2,2
"org.apache.derby.client.net.NetConnectionReply.parseEXTNAM()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseExchangeServerAttributesError()",2,2,4
"org.apache.derby.client.net.NetConnectionReply.parseFastNVCMorNVCS()",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parseFastSQLNUMGRP()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseFastSQLNUMROW()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseFastSVRCOD(int,int)",1,3,10
"org.apache.derby.client.net.NetConnectionReply.parseFastVCS()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseIndoubtList()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseMGRLVLLS(NetConnection)",2,13,35
"org.apache.derby.client.net.NetConnectionReply.parseMGRLVLN()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseMGRLVLRM()",1,7,8
"org.apache.derby.client.net.NetConnectionReply.parseOBJNSPRM()",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parsePBSD()",2,3,5
"org.apache.derby.client.net.NetConnectionReply.parsePRCCNVCD()",1,2,12
"org.apache.derby.client.net.NetConnectionReply.parsePRCCNVRM()",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parsePRDID(boolean)",2,2,2
"org.apache.derby.client.net.NetConnectionReply.parseRDBACCRM()",1,5,5
"org.apache.derby.client.net.NetConnectionReply.parseRDBAFLRM()",1,5,5
"org.apache.derby.client.net.NetConnectionReply.parseRDBATHRM(NetConnection)",1,5,5
"org.apache.derby.client.net.NetConnectionReply.parseRDBCMMreply(ConnectionCallbackInterface)",2,3,4
"org.apache.derby.client.net.NetConnectionReply.parseRDBNACRM()",1,5,5
"org.apache.derby.client.net.NetConnectionReply.parseRDBNAM(boolean)",2,2,2
"org.apache.derby.client.net.NetConnectionReply.parseRDBNFNRM(NetConnection)",1,5,5
"org.apache.derby.client.net.NetConnectionReply.parseRDBRLLBCKreply(ConnectionCallbackInterface)",2,2,2
"org.apache.derby.client.net.NetConnectionReply.parseRdbAccessFailed(NetConnection)",1,3,3
"org.apache.derby.client.net.NetConnectionReply.parseRollbackError()",2,2,4
"org.apache.derby.client.net.NetConnectionReply.parseSECCHKCD()",1,2,3
"org.apache.derby.client.net.NetConnectionReply.parseSECCHKRM(NetConnection)",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parseSECCHKreply(NetConnection)",2,3,3
"org.apache.derby.client.net.NetConnectionReply.parseSECMEC()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSECTKN(boolean)",2,2,2
"org.apache.derby.client.net.NetConnectionReply.parseSQLCAGRP(Sqlca[])",2,2,4
"org.apache.derby.client.net.NetConnectionReply.parseSQLCARD(Sqlca[])",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSQLCARDrow(Sqlca[])",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSQLCAXGRP(NetSqlca)",2,5,5
"org.apache.derby.client.net.NetConnectionReply.parseSQLCNGRP()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSQLCNROW()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSQLDCGRP(Sqlca[],int)",1,3,4
"org.apache.derby.client.net.NetConnectionReply.parseSQLDCROW(Sqlca[],int)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSQLDCTOKS()",2,2,3
"org.apache.derby.client.net.NetConnectionReply.parseSQLDCXGRP()",2,1,2
"org.apache.derby.client.net.NetConnectionReply.parseSQLDIAGCI(Sqlca[])",2,3,4
"org.apache.derby.client.net.NetConnectionReply.parseSQLDIAGCN()",2,2,3
"org.apache.derby.client.net.NetConnectionReply.parseSQLDIAGGRP(Sqlca[])",2,1,2
"org.apache.derby.client.net.NetConnectionReply.parseSQLDIAGSTT(Sqlca[])",2,1,2
"org.apache.derby.client.net.NetConnectionReply.parseSQLNUMGRP()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSQLNUMROW()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSQLTOKGRP()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSQLTOKROW()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSRVCLSNM()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSRVNAM()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSRVRLSLV()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSVRCOD(int,int)",1,3,10
"org.apache.derby.client.net.NetConnectionReply.parseSYNCCRD(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSYNCCTLError(int)",2,2,6
"org.apache.derby.client.net.NetConnectionReply.parseSYNCCTLreply(ConnectionCallbackInterface)",1,2,2
"org.apache.derby.client.net.NetConnectionReply.parseSYNCTYPE()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseSYNERRCD()",1,2,3
"org.apache.derby.client.net.NetConnectionReply.parseSYNTAXRM()",1,7,7
"org.apache.derby.client.net.NetConnectionReply.parseSecurityCheckError(NetConnection)",2,2,6
"org.apache.derby.client.net.NetConnectionReply.parseTYPDEFNAM()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseTYPDEFOVR()",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parseTypdefsOrMgrlvlovrs()",4,6,6
"org.apache.derby.client.net.NetConnectionReply.parseUOWDSP()",1,2,3
"org.apache.derby.client.net.NetConnectionReply.parseUSRID(boolean)",2,2,2
"org.apache.derby.client.net.NetConnectionReply.parseVALNSPRM()",1,6,6
"org.apache.derby.client.net.NetConnectionReply.parseXARETVAL()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseXID()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.parseXIDCNT()",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readAccessDatabase(Connection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readAccessSecurity(Connection,int)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readCommitSubstitute(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readDummyExchangeServerAttributes(Connection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readExchangeServerAttributes(Connection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readLocalCommit(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readLocalRollback(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readLocalXACommit(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readLocalXARollback(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readLocalXAStart(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readSecurityCheck(Connection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readXaCommit(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readXaEndUnitOfWork(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readXaForget(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readXaPrepare(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readXaRecover(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readXaRollback(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.readXaStartUnitOfWork(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionReply.resetRowsetSqlca(Sqlca[],int)",1,1,3
"org.apache.derby.client.net.NetConnectionReply.skipFastNVCMorNVCS()",1,6,6
"org.apache.derby.client.net.NetConnectionReply.verifyConnectReply(int)",4,3,4
"org.apache.derby.client.net.NetConnectionRequest.NetConnectionRequest(NetAgent,CcsidManager,int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildACCRDB(String,boolean,byte[],byte[],Typdef)",1,2,2
"org.apache.derby.client.net.NetConnectionRequest.buildACCSEC(int,String,byte[])",1,2,2
"org.apache.derby.client.net.NetConnectionRequest.buildCRRTKN(byte[])",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildDummyEXCSAT()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildEXCSAT(String,int,int,int,int,int,int,int,int,int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildEXTNAM(String)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildMGRLVLLS(int,int,int,int,int,int,int)",1,5,5
"org.apache.derby.client.net.NetConnectionRequest.buildPASSWORD(String)",2,1,4
"org.apache.derby.client.net.NetConnectionRequest.buildPRDDTA(byte[])",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildPRDID()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildRDBACCCL()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildRDBALWUPD(boolean)",1,2,2
"org.apache.derby.client.net.NetConnectionRequest.buildRDBCMM()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildRDBNAM(String)",3,3,3
"org.apache.derby.client.net.NetConnectionRequest.buildRDBRLLBCK()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildSECCHK(int,String,String,String,byte[],byte[])",1,5,5
"org.apache.derby.client.net.NetConnectionRequest.buildSECMEC(int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildSECTKN(byte[])",2,1,2
"org.apache.derby.client.net.NetConnectionRequest.buildSRVCLSNM()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildSRVNAM(String)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildSRVRLSLV()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildSYNCCTLCommit(int,Xid)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildSYNCCTLMigrate()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildSYNCCTLRollback(int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildTYPDEFNAM(String)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.buildTYPDEFOVR(boolean,int,boolean,int,boolean,int)",1,4,4
"org.apache.derby.client.net.NetConnectionRequest.buildUSRID(String)",2,1,3
"org.apache.derby.client.net.NetConnectionRequest.writeAccessDatabase(String,boolean,byte[],byte[],Typdef)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeAccessSecurity(int,String,byte[])",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeCommitSubstitute(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeDummyExchangeServerAttributes()",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeExchangeServerAttributes(String,int,int,int,int,int,int,int,int,int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeForget(int,int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeLocalCommit(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeLocalRollback(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeLocalXACommit(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeLocalXARollback(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeLocalXAStart(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeNullXID(int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeReleaseConversation(int,int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeSYNCType(int,int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeSecurityCheck(int,String,String,String,byte[],byte[])",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXAFlags(int,int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXATimeout(int,long)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXID(int,Xid)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXaCommit(NetConnection,Xid)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXaEndUnitOfWork(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXaForget(NetConnection,Xid)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXaPrepare(NetConnection)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXaRecover(NetConnection,int)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXaRollback(NetConnection,Xid)",1,1,1
"org.apache.derby.client.net.NetConnectionRequest.writeXaStartUnitOfWork(NetConnection)",1,1,1
"org.apache.derby.client.net.NetCursor.NetCursor(NetAgent)",1,1,1
"org.apache.derby.client.net.NetCursor.NetCursor(NetAgent,int)",1,1,3
"org.apache.derby.client.net.NetCursor.adjustColumnOffsetsForColumnsPreviouslyCalculated(int)",1,1,2
"org.apache.derby.client.net.NetCursor.allocateColumnDataComputedLengthArray(int)",1,2,2
"org.apache.derby.client.net.NetCursor.allocateColumnDataIsNullArray(int)",1,2,2
"org.apache.derby.client.net.NetCursor.allocateColumnDataPositionArray(int)",1,2,2
"org.apache.derby.client.net.NetCursor.allocateColumnOffsetAndLengthArrays()",1,1,1
"org.apache.derby.client.net.NetCursor.allocateDataBuffer()",1,1,2
"org.apache.derby.client.net.NetCursor.allocateDataBuffer(int)",1,1,1
"org.apache.derby.client.net.NetCursor.calculateColumnOffsetsForRow_(int,boolean)",12,36,54
"org.apache.derby.client.net.NetCursor.calculateLobColumnPositionsForRow()",1,4,4
"org.apache.derby.client.net.NetCursor.checkAndThrowReceivedEndqryrm()",2,3,4
"org.apache.derby.client.net.NetCursor.checkAndThrowReceivedEndqryrm(int)",2,1,2
"org.apache.derby.client.net.NetCursor.clearLobData_()",1,1,1
"org.apache.derby.client.net.NetCursor.completeSplitRow()",1,2,3
"org.apache.derby.client.net.NetCursor.completeSplitRow(int)",1,2,3
"org.apache.derby.client.net.NetCursor.ensureSpaceForDataBuffer(int)",1,3,4
"org.apache.derby.client.net.NetCursor.findExtdtaData(int)",1,2,2
"org.apache.derby.client.net.NetCursor.getBlobColumn_(int,Agent,boolean)",2,2,5
"org.apache.derby.client.net.NetCursor.getClobBytes_(int,int[])",1,1,3
"org.apache.derby.client.net.NetCursor.getClobColumn_(int,Agent,boolean)",2,2,5
"org.apache.derby.client.net.NetCursor.getDecimalLength(int)",1,1,1
"org.apache.derby.client.net.NetCursor.getMoreData_()",1,2,2
"org.apache.derby.client.net.NetCursor.getQryclsimpEnabled()",1,1,1
"org.apache.derby.client.net.NetCursor.initializeColumnInfoArrays(Typdef,int,int)",1,1,1
"org.apache.derby.client.net.NetCursor.isDataBufferNull()",2,1,2
"org.apache.derby.client.net.NetCursor.isNonTrivialDataLob(int)",2,2,7
"org.apache.derby.client.net.NetCursor.locator(int)",2,1,7
"org.apache.derby.client.net.NetCursor.nullDataForGC()",1,3,3
"org.apache.derby.client.net.NetCursor.parseSQLCAGRP(Typdef)",2,2,3
"org.apache.derby.client.net.NetCursor.parseSQLCARD(Typdef)",1,1,1
"org.apache.derby.client.net.NetCursor.parseSQLCAXGRP(Typdef,NetSqlca)",2,4,4
"org.apache.derby.client.net.NetCursor.parseSQLDCGRP()",1,2,2
"org.apache.derby.client.net.NetCursor.parseSQLDCROW()",1,1,1
"org.apache.derby.client.net.NetCursor.parseSQLDCTOKS()",2,1,2
"org.apache.derby.client.net.NetCursor.parseSQLDCXGRP()",2,1,2
"org.apache.derby.client.net.NetCursor.parseSQLDIAGCI()",1,2,3
"org.apache.derby.client.net.NetCursor.parseSQLDIAGCN()",2,1,2
"org.apache.derby.client.net.NetCursor.parseSQLDIAGGRP()",2,1,2
"org.apache.derby.client.net.NetCursor.parseSQLDIAGSTT()",2,1,2
"org.apache.derby.client.net.NetCursor.parseVCS(Typdef)",1,1,1
"org.apache.derby.client.net.NetCursor.readFdocaBytes(int)",1,2,3
"org.apache.derby.client.net.NetCursor.readFdocaInt()",1,2,2
"org.apache.derby.client.net.NetCursor.readFdocaLong()",1,2,2
"org.apache.derby.client.net.NetCursor.readFdocaOneByte()",1,2,2
"org.apache.derby.client.net.NetCursor.readFdocaOneByte(int)",1,2,2
"org.apache.derby.client.net.NetCursor.readFdocaString(int,String)",2,3,4
"org.apache.derby.client.net.NetCursor.readFdocaTwoByteLength()",1,2,2
"org.apache.derby.client.net.NetCursor.readFdocaTwoByteLength(int)",1,2,2
"org.apache.derby.client.net.NetCursor.resetCurrentRowPosition()",1,1,1
"org.apache.derby.client.net.NetCursor.scanDataBufferForEndOfData()",1,3,3
"org.apache.derby.client.net.NetCursor.setAllRowsReceivedFromServer(boolean)",1,2,3
"org.apache.derby.client.net.NetCursor.setBlocking(int)",1,1,2
"org.apache.derby.client.net.NetCursor.setQryclsimpEnabled(boolean)",1,1,1
"org.apache.derby.client.net.NetCursor.shiftPartialRowToBeginning()",1,2,3
"org.apache.derby.client.net.NetCursor.skipFdocaBytes(int)",1,2,2
"org.apache.derby.client.net.NetCursor.skipFdocaBytes(int,int)",1,2,2
"org.apache.derby.client.net.NetDatabaseMetaData.NetDatabaseMetaData(NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData.computeFeatureSet_()",1,1,2
"org.apache.derby.client.net.NetDatabaseMetaData.getURL_()",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData.serverSupportsLayerBStreaming()",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData.serverSupportsQryclsimp()",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData.serverSupportsSessionDataCaching()",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData40.NetDatabaseMetaData40(NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData40.getJDBCMajorVersion()",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData40.getJDBCMinorVersion()",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData40.getRowIdLifetime()",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.client.net.NetDatabaseMetaData40.unwrap(Class<T>)",1,2,2
"org.apache.derby.client.net.NetIndoubtTransaction.NetIndoubtTransaction(Xid,byte[],byte[],byte[],String,int)",1,1,1
"org.apache.derby.client.net.NetIndoubtTransaction.getCSyncLog()",1,1,1
"org.apache.derby.client.net.NetIndoubtTransaction.getIpAddr()",1,1,1
"org.apache.derby.client.net.NetIndoubtTransaction.getPSyncLog()",1,1,1
"org.apache.derby.client.net.NetIndoubtTransaction.getPort()",1,1,1
"org.apache.derby.client.net.NetIndoubtTransaction.getUOWID()",1,1,1
"org.apache.derby.client.net.NetIndoubtTransaction.getXid()",1,1,1
"org.apache.derby.client.net.NetLogWriter.NetLogWriter(PrintWriter,int)",1,1,2
"org.apache.derby.client.net.NetLogWriter.dncnetprint(String)",1,1,1
"org.apache.derby.client.net.NetLogWriter.dncnetprintln(String)",1,1,1
"org.apache.derby.client.net.NetLogWriter.dncnetprintln(char[])",1,1,1
"org.apache.derby.client.net.NetLogWriter.getCodePoint(byte[],int)",1,1,1
"org.apache.derby.client.net.NetLogWriter.getHeader(int)",4,2,4
"org.apache.derby.client.net.NetLogWriter.getStartPosition(int)",4,2,4
"org.apache.derby.client.net.NetLogWriter.printHeaderWithCodePointName(String,int)",1,3,3
"org.apache.derby.client.net.NetLogWriter.traceConnectsExit(Connection)",2,1,2
"org.apache.derby.client.net.NetLogWriter.traceConnectsResetExit(Connection)",2,1,2
"org.apache.derby.client.net.NetLogWriter.traceProtocolFlow(byte[],int,int,int,String,String,int)",3,11,22
"org.apache.derby.client.net.NetPackageReply.NetPackageReply(NetAgent,int)",1,1,1
"org.apache.derby.client.net.NetPackageReply.parseDTAMCHRM()",1,5,5
"org.apache.derby.client.net.NetPackageReply.parsePKGNAMCT(boolean)",2,2,2
"org.apache.derby.client.net.NetPackageReply.parseRDBUPDRM()",1,5,5
"org.apache.derby.client.net.NetPackageReply.parseSQLERRRM()",1,5,5
"org.apache.derby.client.net.NetPackageReply.parseSqlErrorCondition()",1,1,1
"org.apache.derby.client.net.NetPackageRequest.NetPackageRequest(NetAgent,CcsidManager,int)",1,1,1
"org.apache.derby.client.net.NetPackageRequest.buildCommonPKGNAMinfo(Section)",1,4,4
"org.apache.derby.client.net.NetPackageRequest.buildNOCMorNOCS(String)",1,3,3
"org.apache.derby.client.net.NetPackageRequest.buildPKGNAMCSN(Section)",1,3,3
"org.apache.derby.client.net.NetPackageRequest.buildSCLDTA(String,int)",1,2,2
"org.apache.derby.client.net.NetPackageRequest.buildSQLATTRcommandData(String)",1,3,3
"org.apache.derby.client.net.NetPackageRequest.buildSQLSTT(String)",1,1,1
"org.apache.derby.client.net.NetPackageRequest.buildSQLSTTGRP(String)",1,1,1
"org.apache.derby.client.net.NetPackageRequest.buildSQLSTTcommandData(String)",1,3,3
"org.apache.derby.client.net.NetPackageRequest.canCommandUseDefaultPKGNAMCSN()",1,1,1
"org.apache.derby.client.net.NetPackageRequest.checkPKGNAMlengths(String,int,int)",2,1,2
"org.apache.derby.client.net.NetPackageRequest.encryptDataStream(int)",1,2,3
"org.apache.derby.client.net.NetPackageRequest.getBytes(String,String)",1,2,2
"org.apache.derby.client.net.NetPackageRequest.storePKGNAMCBytes(Section)",1,1,1
"org.apache.derby.client.net.NetPackageRequest.writeStoredPKGNAMCBytes(Section)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.NetPreparedStatement(NetAgent,NetConnection,String,Section,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.NetPreparedStatement(NetAgent,NetConnection,String,int,int,int,int,String[],int[],ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.NetPreparedStatement(PreparedStatement,NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.finalize()",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.initNetPreparedStatement(PreparedStatement)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.readDescribeInput_()",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.readDescribeOutput_()",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.readExecute_()",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.resetNetPreparedStatement(NetAgent,NetConnection,String,Section)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.resetNetPreparedStatement(NetAgent,NetConnection,String,Section,ColumnMetaData,ColumnMetaData)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.resetNetPreparedStatement(NetAgent,NetConnection,String,int,int,int,int,String[],int[])",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.resetNetPreparedStatement(PreparedStatement,NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.writeDescribeInput_(Section)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.writeDescribeOutput_(Section)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.writeExecute_(Section,ColumnMetaData,Object[],int,boolean,boolean)",1,1,1
"org.apache.derby.client.net.NetPreparedStatement.writeOpenQuery_(Section,int,int,int,ColumnMetaData,Object[])",1,1,1
"org.apache.derby.client.net.NetResultSet.NetResultSet(NetAgent,NetStatement,Cursor,int,int,int,int,int,long,int,int,int)",2,2,8
"org.apache.derby.client.net.NetResultSet.flowFetchToCompleteRowset()",1,1,3
"org.apache.derby.client.net.NetResultSet.parseRowset_()",1,6,8
"org.apache.derby.client.net.NetResultSet.preClose_()",1,2,2
"org.apache.derby.client.net.NetResultSet.queryDataWasReturnedOnOpen()",1,1,1
"org.apache.derby.client.net.NetResultSet.readCursorClose_()",1,1,1
"org.apache.derby.client.net.NetResultSet.readFetch_()",1,1,1
"org.apache.derby.client.net.NetResultSet.readPositioningFetch_()",1,1,1
"org.apache.derby.client.net.NetResultSet.readScrollableFetch_()",1,1,1
"org.apache.derby.client.net.NetResultSet.setFetchSize_(int)",1,1,3
"org.apache.derby.client.net.NetResultSet.writeCursorClose_(Section)",1,1,1
"org.apache.derby.client.net.NetResultSet.writeFetch_(Section)",1,2,4
"org.apache.derby.client.net.NetResultSet.writePositioningFetch_(Section,int,long)",1,1,1
"org.apache.derby.client.net.NetResultSet.writeScrollableFetch_(Section,int,int,long,boolean)",1,1,1
"org.apache.derby.client.net.NetResultSet40.NetResultSet40(NetAgent,NetStatement,Cursor,int,int,int,int,int,long,int,int,int)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getNCharacterStream(String)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getNCharacterStream(int)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getNClob(String)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getNClob(int)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getNString(String)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getNString(int)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getRowId(String)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getRowId(int)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getSQLXML(String)",1,1,1
"org.apache.derby.client.net.NetResultSet40.getSQLXML(int)",1,1,1
"org.apache.derby.client.net.NetResultSet40.isWrapperFor(Class<?>)",1,2,2
"org.apache.derby.client.net.NetResultSet40.unwrap(Class<T>)",1,3,3
"org.apache.derby.client.net.NetResultSet40.updateNCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateNClob(String,InputStream,long)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateNClob(String,NClob)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateNClob(String,Reader,long)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateNClob(int,NClob)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateNClob(int,Reader,long)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateNString(String,String)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateNString(int,String)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateRowId(String,RowId)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateRowId(int,RowId)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateSQLXML(String,SQLXML)",1,1,1
"org.apache.derby.client.net.NetResultSet40.updateSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.client.net.NetResultSetReply.NetResultSetReply(NetAgent,int)",1,1,1
"org.apache.derby.client.net.NetResultSetReply.parseCLSQRYreply(ResultSetCallbackInterface)",1,2,2
"org.apache.derby.client.net.NetResultSetReply.parseCNTQRYreply(ResultSetCallbackInterface,boolean)",3,20,26
"org.apache.derby.client.net.NetResultSetReply.parseCloseError(ResultSetCallbackInterface)",2,3,6
"org.apache.derby.client.net.NetResultSetReply.parseFetchError(ResultSetCallbackInterface)",2,3,7
"org.apache.derby.client.net.NetResultSetReply.parseQRYNOPRM(ResultSetCallbackInterface)",1,7,7
"org.apache.derby.client.net.NetResultSetReply.readCursorClose(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetResultSetReply.readFetch(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetResultSetReply.readPositioningFetch(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetResultSetReply.readScrollableFetch(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.NetResultSetRequest(NetAgent,CcsidManager,int)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.buildCLSQRY(Section,long)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.buildCNTQRY(Section,boolean,long,int,boolean)",1,2,2
"org.apache.derby.client.net.NetResultSetRequest.buildCoreCNTQRY(Section,boolean,long,int)",1,3,3
"org.apache.derby.client.net.NetResultSetRequest.buildOUTOVR(NetResultSet,ColumnMetaData,boolean,boolean)",1,3,3
"org.apache.derby.client.net.NetResultSetRequest.buildPositioningCNTQRY(int,long,Section,boolean,long,int)",1,3,4
"org.apache.derby.client.net.NetResultSetRequest.buildQRYBLKRST(int)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.buildQRYROWNBR(long)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.buildQRYRTNDTA(int)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.buildQRYSCRORN(int)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.buildRTNEXTDTA(int)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.buildScrollCNTQRY(int,long,Section,boolean,long,int,boolean)",1,3,4
"org.apache.derby.client.net.NetResultSetRequest.computePROTOCOLOrientation(int)",6,2,6
"org.apache.derby.client.net.NetResultSetRequest.writeCursorClose(NetResultSet,Section)",1,1,1
"org.apache.derby.client.net.NetResultSetRequest.writeFetch(NetResultSet,Section,int)",1,1,5
"org.apache.derby.client.net.NetResultSetRequest.writePositioningFetch(NetResultSet,Section,int,long)",1,1,3
"org.apache.derby.client.net.NetResultSetRequest.writeScrollableFetch(NetResultSet,Section,int,int,long,boolean)",1,1,4
"org.apache.derby.client.net.NetSqlca.NetSqlca(Connection,int,String,byte[])",1,1,1
"org.apache.derby.client.net.NetSqlca.NetSqlca(Connection,int,byte[],byte[])",1,1,2
"org.apache.derby.client.net.NetSqlca.getRowCount(Typdef)",1,2,2
"org.apache.derby.client.net.NetSqlca.setSqlerrd(int[])",1,1,1
"org.apache.derby.client.net.NetSqlca.setSqlerrmcBytes(byte[],int)",1,1,1
"org.apache.derby.client.net.NetSqlca.setSqlwarnBytes(byte[])",1,1,1
"org.apache.derby.client.net.NetSqldta.NetSqldta(NetAgent)",1,1,1
"org.apache.derby.client.net.NetSqldta.calculateColumnOffsetsForRow()",3,10,20
"org.apache.derby.client.net.NetSqldta.next()",2,2,2
"org.apache.derby.client.net.NetSqldta.readFdocaOneByte()",1,1,1
"org.apache.derby.client.net.NetSqldta.readFdocaTwoByteLength()",1,1,1
"org.apache.derby.client.net.NetSqldta.skipFdocaBytes(int)",1,1,1
"org.apache.derby.client.net.NetStatement.NetStatement()",1,1,1
"org.apache.derby.client.net.NetStatement.NetStatement(NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetStatement.NetStatement(NetAgent,NetConnection,int,int,int)",1,1,1
"org.apache.derby.client.net.NetStatement.NetStatement(Statement,NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetStatement.finalize()",1,1,1
"org.apache.derby.client.net.NetStatement.initNetStatement()",1,1,1
"org.apache.derby.client.net.NetStatement.initNetStatement(Statement,NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetStatement.markClosedOnServer_()",1,1,1
"org.apache.derby.client.net.NetStatement.netReset(NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetStatement.readExecuteCall_()",1,1,1
"org.apache.derby.client.net.NetStatement.readExecuteImmediateForBatch_(String)",1,1,1
"org.apache.derby.client.net.NetStatement.readExecuteImmediate_()",1,1,1
"org.apache.derby.client.net.NetStatement.readOpenQuery_()",1,1,1
"org.apache.derby.client.net.NetStatement.readPrepareDescribeOutput_()",1,1,1
"org.apache.derby.client.net.NetStatement.readPrepare_()",1,1,1
"org.apache.derby.client.net.NetStatement.readSetSpecialRegister_()",1,1,1
"org.apache.derby.client.net.NetStatement.resetNetStatement()",1,1,1
"org.apache.derby.client.net.NetStatement.resetNetStatement(NetAgent,NetConnection,int,int,int)",1,1,1
"org.apache.derby.client.net.NetStatement.resetNetStatement(Statement,NetAgent,NetConnection)",1,1,1
"org.apache.derby.client.net.NetStatement.reset_()",1,1,1
"org.apache.derby.client.net.NetStatement.writeExecuteCall_(boolean,String,Section,int,boolean,int,ColumnMetaData,Object[])",1,1,1
"org.apache.derby.client.net.NetStatement.writeExecuteImmediate_(String,Section)",1,1,1
"org.apache.derby.client.net.NetStatement.writeOpenQuery_(Section,int,int)",1,1,1
"org.apache.derby.client.net.NetStatement.writePrepareDescribeOutput_(String,Section)",1,1,1
"org.apache.derby.client.net.NetStatement.writePrepare_(String,Section)",1,1,1
"org.apache.derby.client.net.NetStatement.writeSetSpecialRegister_(Section,ArrayList)",1,1,1
"org.apache.derby.client.net.NetStatementReply.NetStatementReply(NetAgent,int)",1,1,1
"org.apache.derby.client.net.NetStatementReply.calculateResultSetConcurrency(int,int)",4,2,4
"org.apache.derby.client.net.NetStatementReply.calculateResultSetHoldability(int)",2,1,2
"org.apache.derby.client.net.NetStatementReply.calculateResultSetType(int,int,int)",4,2,4
"org.apache.derby.client.net.NetStatementReply.checkFastRLO(int[][])",1,5,5
"org.apache.derby.client.net.NetStatementReply.checkPreviousSQLDTARDtriplet(int,int,int,int)",1,3,3
"org.apache.derby.client.net.NetStatementReply.copyEXTDTA(NetCursor)",1,3,3
"org.apache.derby.client.net.NetStatementReply.descriptorErrorDetected()",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseDSCSQLSTTreply(PreparedStatementCallbackInterface,int)",1,6,7
"org.apache.derby.client.net.NetStatementReply.parseDescribeError(StatementCallbackInterface)",2,4,6
"org.apache.derby.client.net.NetStatementReply.parseENDQRYRM(ResultSetCallbackInterface)",1,5,5
"org.apache.derby.client.net.NetStatementReply.parseEXCSQLIMMreply(StatementCallbackInterface)",2,5,6
"org.apache.derby.client.net.NetStatementReply.parseEXCSQLSETreply(StatementCallbackInterface)",1,4,4
"org.apache.derby.client.net.NetStatementReply.parseEXCSQLSTTreply(StatementCallbackInterface)",2,11,11
"org.apache.derby.client.net.NetStatementReply.parseEndQuery(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseExecuteError(StatementCallbackInterface)",2,4,8
"org.apache.derby.client.net.NetStatementReply.parseExecuteImmediateError(StatementCallbackInterface)",2,4,8
"org.apache.derby.client.net.NetStatementReply.parseExecuteSetStatementError(StatementCallbackInterface)",2,4,8
"org.apache.derby.client.net.NetStatementReply.parseFDODSC(NetCursor)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseFDODTA(NetCursor)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseFastQRYATTSCR()",1,2,3
"org.apache.derby.client.net.NetStatementReply.parseFastQRYATTSET()",1,2,3
"org.apache.derby.client.net.NetStatementReply.parseFastQRYATTSNS()",2,2,3
"org.apache.derby.client.net.NetStatementReply.parseFastQRYATTUPD()",2,2,3
"org.apache.derby.client.net.NetStatementReply.parseFastQRYINSID()",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseFastQRYPRCTYP()",1,2,3
"org.apache.derby.client.net.NetStatementReply.parseFastSQLCSRHLD()",1,2,3
"org.apache.derby.client.net.NetStatementReply.parseFastSQLDTARDdata(NetCursor)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseFastVCMorVCS()",1,4,5
"org.apache.derby.client.net.NetStatementReply.parseOPNQFLRM(StatementCallbackInterface)",1,5,5
"org.apache.derby.client.net.NetStatementReply.parseOPNQRYRM(StatementCallbackInterface,boolean)",2,14,16
"org.apache.derby.client.net.NetStatementReply.parseOPNQRYreply(StatementCallbackInterface)",1,6,6
"org.apache.derby.client.net.NetStatementReply.parseOpenQuery(StatementCallbackInterface)",1,7,7
"org.apache.derby.client.net.NetStatementReply.parseOpenQueryError(StatementCallbackInterface)",2,3,8
"org.apache.derby.client.net.NetStatementReply.parseOpenQueryFailure(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parsePKGNAMCSN(boolean)",7,7,11
"org.apache.derby.client.net.NetStatementReply.parsePKGSNLST()",1,2,2
"org.apache.derby.client.net.NetStatementReply.parsePRPSQLSTTreply(StatementCallbackInterface)",1,5,5
"org.apache.derby.client.net.NetStatementReply.parsePrepareError(StatementCallbackInterface)",2,4,8
"org.apache.derby.client.net.NetStatementReply.parseQRYATTSCR()",1,2,3
"org.apache.derby.client.net.NetStatementReply.parseQRYATTSET()",1,2,3
"org.apache.derby.client.net.NetStatementReply.parseQRYATTSNS()",2,2,3
"org.apache.derby.client.net.NetStatementReply.parseQRYATTUPD()",2,2,3
"org.apache.derby.client.net.NetStatementReply.parseQRYDSC(NetCursor)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseQRYDTA(NetResultSet)",1,3,6
"org.apache.derby.client.net.NetStatementReply.parseQRYPOPRM()",1,6,6
"org.apache.derby.client.net.NetStatementReply.parseQRYPRCTYP()",1,2,3
"org.apache.derby.client.net.NetStatementReply.parseRSLSETRM()",1,5,5
"org.apache.derby.client.net.NetStatementReply.parseResultSetCursor(StatementCallbackInterface,Section)",1,5,5
"org.apache.derby.client.net.NetStatementReply.parseResultSetProcedure(StatementCallbackInterface)",1,4,4
"org.apache.derby.client.net.NetStatementReply.parseSQLCINRD()",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLCINRDarray()",1,2,2
"org.apache.derby.client.net.NetStatementReply.parseSQLCSRHLD()",1,2,3
"org.apache.derby.client.net.NetStatementReply.parseSQLDAGRP(ColumnMetaData,int)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLDARD(ColumnMetaData,boolean)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLDARDarray(ColumnMetaData,boolean)",2,6,8
"org.apache.derby.client.net.NetStatementReply.parseSQLDAROW(ColumnMetaData,int)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLDHGRP(ColumnMetaData)",2,1,2
"org.apache.derby.client.net.NetStatementReply.parseSQLDHROW(ColumnMetaData)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLDOPTGRP(ColumnMetaData,int)",2,1,6
"org.apache.derby.client.net.NetStatementReply.parseSQLDTAGRPdataLabelsAndUpdateColumn(NetCursor,int,int)",1,2,2
"org.apache.derby.client.net.NetStatementReply.parseSQLDTARD(NetSqldta)",1,5,5
"org.apache.derby.client.net.NetStatementReply.parseSQLDTARDarray(NetCursor,boolean)",3,11,19
"org.apache.derby.client.net.NetStatementReply.parseSQLDTARDdata(NetCursor)",1,3,3
"org.apache.derby.client.net.NetStatementReply.parseSQLDXGRP(ColumnMetaData,int)",2,1,13
"org.apache.derby.client.net.NetStatementReply.parseSQLRSGRP(Section)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLRSLRD(ArrayList)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLRSLRDarray(ArrayList)",1,2,2
"org.apache.derby.client.net.NetStatementReply.parseSQLRSROW(Section)",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLSTT()",1,1,1
"org.apache.derby.client.net.NetStatementReply.parseSQLSTTGRP()",1,3,3
"org.apache.derby.client.net.NetStatementReply.parseSQLUDTGRP(ColumnMetaData,int)",2,1,2
"org.apache.derby.client.net.NetStatementReply.parseVCMorVCS()",1,4,5
"org.apache.derby.client.net.NetStatementReply.readDescribeInput(PreparedStatementCallbackInterface)",1,1,4
"org.apache.derby.client.net.NetStatementReply.readDescribeOutput(PreparedStatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.readExecute(PreparedStatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.readExecuteCall(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.readExecuteImmediate(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.readOpenQuery(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.readPrepare(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.readPrepareDescribeOutput(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementReply.readSetSpecialRegister(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.NetStatementRequest(NetAgent,CcsidManager,int)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.allocateLidAndLengthsArray(ColumnMetaData)",1,1,3
"org.apache.derby.client.net.NetStatementRequest.buildDSCSQLSTT(Section,boolean,int)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.buildEXCSQLIMM(Section,boolean,long)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.buildEXCSQLSET(Section)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildEXCSQLSTT(Section,boolean,boolean,boolean,String,boolean,boolean,int,boolean,int,boolean,int,boolean,int)",1,8,9
"org.apache.derby.client.net.NetStatementRequest.buildEXTDTA(ColumnMetaData,Object[],boolean)",7,15,29
"org.apache.derby.client.net.NetStatementRequest.buildFDODSC(int,int[][],boolean,Hashtable,ArrayList)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildFDODTA(int,int[][],Object[])",6,18,38
"org.apache.derby.client.net.NetStatementRequest.buildMAXBLKEXT(int)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.buildMAXRSLCNT(int)",2,1,2
"org.apache.derby.client.net.NetStatementRequest.buildMddOverrides(ArrayList)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.buildOPNQRY(Section,boolean,int)",1,3,3
"org.apache.derby.client.net.NetStatementRequest.buildOUTEXP(boolean)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.buildOUTOVR(ResultSet,ColumnMetaData)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildPRCNAM(String)",3,1,4
"org.apache.derby.client.net.NetStatementRequest.buildPRPSQLSTT(Section,String,boolean,boolean,int)",1,3,3
"org.apache.derby.client.net.NetStatementRequest.buildPlaceholderLength(long)",4,1,4
"org.apache.derby.client.net.NetStatementRequest.buildQRYBLKSZ()",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildQRYCLSIMP()",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildQRYINSID(long)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildQRYROWSET(int)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildRDBCMTOK()",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildRSLSETFLG(int)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildRTNSQLDA()",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildSQLCADTA(int,int[][])",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildSQLDTA(int,int[][],boolean,Hashtable,ArrayList)",1,3,3
"org.apache.derby.client.net.NetStatementRequest.buildSQLDTAGRP(int,int[][],boolean,Hashtable)",3,2,3
"org.apache.derby.client.net.NetStatementRequest.buildSQLDTARD(int,int[][])",1,1,1
"org.apache.derby.client.net.NetStatementRequest.buildSQLDTAcommandData(int,ColumnMetaData,Object[])",1,3,3
"org.apache.derby.client.net.NetStatementRequest.buildTYPSQLDA(int)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.calculateColumnsInSQLDTAGRPtriplet(int)",2,1,2
"org.apache.derby.client.net.NetStatementRequest.calculateOUTOVRLidAndLengthOverrides(ResultSet,ColumnMetaData)",2,2,6
"org.apache.derby.client.net.NetStatementRequest.calculateResultSetFlags()",1,1,1
"org.apache.derby.client.net.NetStatementRequest.checkFetchsize(int,int)",1,1,3
"org.apache.derby.client.net.NetStatementRequest.checkSendQryrowset(int,int)",1,1,2
"org.apache.derby.client.net.NetStatementRequest.computeProtocolTypesAndLengths(Object[],ColumnMetaData,int[][],Hashtable)",11,35,58
"org.apache.derby.client.net.NetStatementRequest.getNextOverrideLid()",1,1,1
"org.apache.derby.client.net.NetStatementRequest.retrievePromotedParameterIfExists(int)",2,1,2
"org.apache.derby.client.net.NetStatementRequest.setFDODTALob(int,Lob,int[][],int)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.setFDODTALobLength(int[][],int,long)",1,6,7
"org.apache.derby.client.net.NetStatementRequest.setFDODTALobLengthUnknown(int)",1,1,2
"org.apache.derby.client.net.NetStatementRequest.writeDescribeInput(NetPreparedStatement,Section)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.writeDescribeOutput(NetPreparedStatement,Section)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.writeExecute(NetPreparedStatement,Section,ColumnMetaData,Object[],int,boolean,boolean)",1,4,4
"org.apache.derby.client.net.NetStatementRequest.writeExecuteCall(NetStatement,boolean,String,Section,int,boolean,int,ColumnMetaData,Object[])",1,4,7
"org.apache.derby.client.net.NetStatementRequest.writeExecuteImmediate(NetStatement,String,Section)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.writeOpenQuery(NetPreparedStatement,Section,int,int,int,ColumnMetaData,Object[])",1,4,4
"org.apache.derby.client.net.NetStatementRequest.writeOpenQuery(NetStatement,Section,int,int)",1,1,1
"org.apache.derby.client.net.NetStatementRequest.writePrepare(NetStatement,String,Section)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.writePrepareDescribeOutput(NetStatement,String,Section)",1,2,2
"org.apache.derby.client.net.NetStatementRequest.writeSetSpecialRegister(Section,ArrayList)",1,2,2
"org.apache.derby.client.net.NetXACallInfo.NetXACallInfo()",1,1,1
"org.apache.derby.client.net.NetXACallInfo.NetXACallInfo(Xid,int,NetXAResource,NetXAConnection)",1,1,1
"org.apache.derby.client.net.NetXACallInfo.getCorrelatorToken()",1,1,1
"org.apache.derby.client.net.NetXACallInfo.getInputStream()",1,1,1
"org.apache.derby.client.net.NetXACallInfo.getOutputStream()",1,1,1
"org.apache.derby.client.net.NetXACallInfo.getReadOnlyTransactionFlag()",1,1,1
"org.apache.derby.client.net.NetXACallInfo.getUOWID()",1,1,1
"org.apache.derby.client.net.NetXACallInfo.saveConnectionVariables()",1,1,1
"org.apache.derby.client.net.NetXACallInfo.setReadOnlyTransactionFlag(boolean)",1,1,1
"org.apache.derby.client.net.NetXACallInfo.setUOWID(byte[])",1,1,1
"org.apache.derby.client.net.NetXAConnection.NetXAConnection(NetLogWriter,String,String,ClientBaseDataSource,int,boolean,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnection.checkPlatformVersion()",2,1,2
"org.apache.derby.client.net.NetXAConnection.createNetConnection(NetLogWriter,String,String,ClientBaseDataSource,int,boolean,ClientPooledConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnection.finalize()",1,1,1
"org.apache.derby.client.net.NetXAConnection.getCorrelatorToken()",1,1,1
"org.apache.derby.client.net.NetXAConnection.getNetConnection()",1,1,1
"org.apache.derby.client.net.NetXAConnection.getPort(Xid)",2,1,2
"org.apache.derby.client.net.NetXAConnection.getUOWID(Xid)",2,1,2
"org.apache.derby.client.net.NetXAConnection.readCommit()",2,3,3
"org.apache.derby.client.net.NetXAConnection.readLocalXACommit_()",1,1,1
"org.apache.derby.client.net.NetXAConnection.readLocalXARollback_()",1,1,1
"org.apache.derby.client.net.NetXAConnection.readLocalXAStart_()",1,1,1
"org.apache.derby.client.net.NetXAConnection.readRollback()",2,2,2
"org.apache.derby.client.net.NetXAConnection.setCorrelatorToken(byte[])",1,1,1
"org.apache.derby.client.net.NetXAConnection.setNetXAResource(NetXAResource)",1,1,1
"org.apache.derby.client.net.NetXAConnection.writeCommit()",1,2,2
"org.apache.derby.client.net.NetXAConnection.writeLocalXACommit_()",1,1,1
"org.apache.derby.client.net.NetXAConnection.writeLocalXARollback_()",1,1,1
"org.apache.derby.client.net.NetXAConnection.writeLocalXAStart_()",1,1,1
"org.apache.derby.client.net.NetXAConnection.writeRollback()",1,1,1
"org.apache.derby.client.net.NetXAConnection.writeTransactionStart(Statement)",2,1,2
"org.apache.derby.client.net.NetXAConnectionReply.NetXAConnectionReply(NetAgent,int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.parseIndoubtList()",1,3,3
"org.apache.derby.client.net.NetXAConnectionReply.parseSQLSTT()",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.parseSQLSTTGRPNOCMorNOCS()",1,3,3
"org.apache.derby.client.net.NetXAConnectionReply.parseSYNCCRD(ConnectionCallbackInterface)",1,7,7
"org.apache.derby.client.net.NetXAConnectionReply.parseSYNCCTLreply(ConnectionCallbackInterface)",2,4,4
"org.apache.derby.client.net.NetXAConnectionReply.parseSYNCTYPE()",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.parseXARETVAL()",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.parseXID()",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.parseXIDCNT()",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.readLocalXACommit(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.readLocalXARollback(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.readLocalXAStart(ConnectionCallbackInterface)",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.readXaCommit(NetConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.readXaEndUnitOfWork(NetConnection)",2,1,2
"org.apache.derby.client.net.NetXAConnectionReply.readXaForget(NetConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.readXaPrepare(NetConnection)",1,2,2
"org.apache.derby.client.net.NetXAConnectionReply.readXaRecover(NetConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.readXaRollback(NetConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnectionReply.readXaStartUnitOfWork(NetConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.NetXAConnectionRequest(NetAgent,CcsidManager,int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.buildSYNCCTLCommit(int,Xid)",1,2,2
"org.apache.derby.client.net.NetXAConnectionRequest.buildSYNCCTLMigrate()",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.buildSYNCCTLRollback(int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeForget(int,int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeLocalXACommit(NetConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeLocalXARollback(NetConnection)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeNullXID(int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeReleaseConversation(int,int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeSYNCType(int,int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeXAFlags(int,int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeXATimeout(int,long)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeXID(int,Xid)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeXaCommit(NetConnection,Xid)",1,2,2
"org.apache.derby.client.net.NetXAConnectionRequest.writeXaEndUnitOfWork(NetConnection)",1,2,2
"org.apache.derby.client.net.NetXAConnectionRequest.writeXaForget(NetConnection,Xid)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeXaPrepare(NetConnection)",1,2,2
"org.apache.derby.client.net.NetXAConnectionRequest.writeXaRecover(NetConnection,int)",1,1,1
"org.apache.derby.client.net.NetXAConnectionRequest.writeXaRollback(NetConnection,Xid)",1,2,2
"org.apache.derby.client.net.NetXAConnectionRequest.writeXaStartUnitOfWork(NetConnection)",1,3,3
"org.apache.derby.client.net.NetXAResource.NetXAResource(XAConnection,int,String,String,NetXAConnection)",1,1,2
"org.apache.derby.client.net.NetXAResource.addSpecialRegisters(String)",1,3,3
"org.apache.derby.client.net.NetXAResource.commit(Xid,boolean)",1,6,7
"org.apache.derby.client.net.NetXAResource.connectionClosedFailure()",1,1,1
"org.apache.derby.client.net.NetXAResource.end(Xid,int)",1,6,6
"org.apache.derby.client.net.NetXAResource.forget(Xid)",1,6,6
"org.apache.derby.client.net.NetXAResource.getSpecialRegisters()",1,1,1
"org.apache.derby.client.net.NetXAResource.getTransactionTimeout()",1,4,4
"org.apache.derby.client.net.NetXAResource.getXAExceptionText(int)",2,2,26
"org.apache.derby.client.net.NetXAResource.getXAFuncStr(int)",8,2,8
"org.apache.derby.client.net.NetXAResource.initForReuse()",6,5,10
"org.apache.derby.client.net.NetXAResource.isSameRM(XAResource)",7,7,11
"org.apache.derby.client.net.NetXAResource.prepare(Xid)",1,7,9
"org.apache.derby.client.net.NetXAResource.processLocalHost(String)",2,2,4
"org.apache.derby.client.net.NetXAResource.recover(int)",1,9,9
"org.apache.derby.client.net.NetXAResource.removeXaresFromSameRMchain()",3,4,4
"org.apache.derby.client.net.NetXAResource.rollback(Xid)",1,6,6
"org.apache.derby.client.net.NetXAResource.setTransactionTimeout(int)",2,3,4
"org.apache.derby.client.net.NetXAResource.setXaStateForXAException(int)",2,2,3
"org.apache.derby.client.net.NetXAResource.start(Xid,int)",1,13,13
"org.apache.derby.client.net.NetXAResource.throwXAException(int)",1,1,1
"org.apache.derby.client.net.NetXAResource.throwXAException(int,boolean)",1,2,3
"org.apache.derby.client.net.NetXAResource.xaRetValErrorAccumSQL(NetXACallInfo,int)",4,2,4
"org.apache.derby.client.net.NetXAResource.xidsEqual(Xid,Xid)",8,1,8
"org.apache.derby.client.net.OpenSocketAction.OpenSocketAction(String,int,int)",1,1,1
"org.apache.derby.client.net.OpenSocketAction.run()",2,2,5
"org.apache.derby.client.net.Reply.Reply(NetAgent,int)",1,1,1
"org.apache.derby.client.net.Reply.adjustCollectionAndDssLengths(int)",1,1,2
"org.apache.derby.client.net.Reply.adjustDdmLength(int,int)",1,2,2
"org.apache.derby.client.net.Reply.adjustLengths(int)",1,1,1
"org.apache.derby.client.net.Reply.compressBLayerData(int)",1,5,9
"org.apache.derby.client.net.Reply.decryptData(int,int)",1,13,20
"org.apache.derby.client.net.Reply.doSyntaxrmSemantics(int)",1,1,1
"org.apache.derby.client.net.Reply.endOfSameIdChainData()",1,4,4
"org.apache.derby.client.net.Reply.ensureALayerDataInBuffer(int)",1,2,2
"org.apache.derby.client.net.Reply.ensureBLayerDataInBuffer(int)",2,2,3
"org.apache.derby.client.net.Reply.ensureSpaceInBufferForFill(int)",1,3,4
"org.apache.derby.client.net.Reply.fill(int)",1,6,7
"org.apache.derby.client.net.Reply.getData(ByteArrayOutputStream)",1,3,6
"org.apache.derby.client.net.Reply.getDdmLength()",1,1,1
"org.apache.derby.client.net.Reply.getFastData(ByteArrayOutputStream)",1,3,6
"org.apache.derby.client.net.Reply.getFastSkipSQLCARDrowLength()",1,1,1
"org.apache.derby.client.net.Reply.initialize()",1,1,1
"org.apache.derby.client.net.Reply.mark()",1,1,1
"org.apache.derby.client.net.Reply.matchCodePoint(int)",1,2,2
"org.apache.derby.client.net.Reply.parseLengthAndMatchCodePoint(int)",1,4,5
"org.apache.derby.client.net.Reply.peekCodePoint()",5,4,9
"org.apache.derby.client.net.Reply.peekExtendedLength()",2,3,5
"org.apache.derby.client.net.Reply.peekFastBytes(byte[],int,int)",1,1,2
"org.apache.derby.client.net.Reply.peekFastLength()",1,1,1
"org.apache.derby.client.net.Reply.peekForNullSqlcagrp()",1,1,1
"org.apache.derby.client.net.Reply.peekLength()",1,1,1
"org.apache.derby.client.net.Reply.peekNumOfColumns()",1,1,1
"org.apache.derby.client.net.Reply.peekTotalColumnCount(int)",1,2,2
"org.apache.derby.client.net.Reply.popCollectionStack()",1,1,1
"org.apache.derby.client.net.Reply.popMark()",1,1,1
"org.apache.derby.client.net.Reply.pushLengthOnCollectionStack()",1,1,1
"org.apache.derby.client.net.Reply.readBoolean()",1,1,1
"org.apache.derby.client.net.Reply.readByte()",1,1,1
"org.apache.derby.client.net.Reply.readBytes()",1,1,1
"org.apache.derby.client.net.Reply.readBytes(int)",1,1,1
"org.apache.derby.client.net.Reply.readDSSContinuationHeader()",1,2,3
"org.apache.derby.client.net.Reply.readDssHeader()",1,9,14
"org.apache.derby.client.net.Reply.readExtendedLength()",2,2,4
"org.apache.derby.client.net.Reply.readFastByte()",1,1,1
"org.apache.derby.client.net.Reply.readFastBytes(int)",1,1,1
"org.apache.derby.client.net.Reply.readFastInt()",1,1,1
"org.apache.derby.client.net.Reply.readFastIntArray(int[])",1,2,2
"org.apache.derby.client.net.Reply.readFastLDBytes()",2,1,2
"org.apache.derby.client.net.Reply.readFastLong()",1,1,1
"org.apache.derby.client.net.Reply.readFastShort()",1,1,1
"org.apache.derby.client.net.Reply.readFastString(int)",1,1,1
"org.apache.derby.client.net.Reply.readFastString(int,String)",1,2,2
"org.apache.derby.client.net.Reply.readFastUnsignedByte()",1,1,1
"org.apache.derby.client.net.Reply.readFastUnsignedShort()",1,1,1
"org.apache.derby.client.net.Reply.readInt()",1,1,1
"org.apache.derby.client.net.Reply.readIntArray(int[])",1,2,2
"org.apache.derby.client.net.Reply.readLDBytes()",2,2,2
"org.apache.derby.client.net.Reply.readLengthAndCodePoint()",5,6,8
"org.apache.derby.client.net.Reply.readLong()",1,1,1
"org.apache.derby.client.net.Reply.readShort()",1,1,1
"org.apache.derby.client.net.Reply.readString()",1,1,1
"org.apache.derby.client.net.Reply.readString(int)",1,1,1
"org.apache.derby.client.net.Reply.readString(int,String)",1,2,2
"org.apache.derby.client.net.Reply.readUnsignedByte()",1,1,1
"org.apache.derby.client.net.Reply.readUnsignedShort()",1,1,1
"org.apache.derby.client.net.Reply.readUnsignedShortList()",1,1,2
"org.apache.derby.client.net.Reply.shiftBuffer(byte[])",1,1,1
"org.apache.derby.client.net.Reply.skipBytes()",1,1,1
"org.apache.derby.client.net.Reply.skipBytes(int)",1,1,1
"org.apache.derby.client.net.Reply.skipFastBytes(int)",1,1,1
"org.apache.derby.client.net.Reply.skipSQLDHROW(int)",2,1,2
"org.apache.derby.client.net.Reply.startSameIdChainParse()",1,1,1
"org.apache.derby.client.net.Request.Request(NetAgent,CcsidManager,int)",1,1,1
"org.apache.derby.client.net.Request.Request(NetAgent,int,CcsidManager)",1,1,1
"org.apache.derby.client.net.Request.buildDss(boolean,boolean,boolean,int,int,boolean)",1,3,5
"org.apache.derby.client.net.Request.buildLengthAndCodePointForEncryptedLob(int,int,boolean,int)",1,6,6
"org.apache.derby.client.net.Request.buildLengthAndCodePointForLob(int,boolean)",1,2,2
"org.apache.derby.client.net.Request.buildLengthAndCodePointForLob(int,int,boolean,int)",1,5,5
"org.apache.derby.client.net.Request.buildTripletHeader(int,int,int)",1,1,1
"org.apache.derby.client.net.Request.calculateExtendedLengthByteCount(long)",4,1,4
"org.apache.derby.client.net.Request.clearBuffer()",3,1,3
"org.apache.derby.client.net.Request.createCommand()",1,1,1
"org.apache.derby.client.net.Request.createCommandData()",1,1,1
"org.apache.derby.client.net.Request.createEncryptedCommandData()",1,3,3
"org.apache.derby.client.net.Request.createXACommand()",1,1,1
"org.apache.derby.client.net.Request.doesRequestContainData()",1,1,1
"org.apache.derby.client.net.Request.ensureLength(int)",1,2,2
"org.apache.derby.client.net.Request.finalizeDssLength()",1,3,7
"org.apache.derby.client.net.Request.finalizePreviousChainedDss(boolean)",1,1,2
"org.apache.derby.client.net.Request.flush(OutputStream)",1,2,2
"org.apache.derby.client.net.Request.flushExistingDSS()",1,3,3
"org.apache.derby.client.net.Request.flushScalarStreamSegment()",1,2,2
"org.apache.derby.client.net.Request.flushScalarStreamSegment(int,int)",1,4,4
"org.apache.derby.client.net.Request.initialize()",1,1,1
"org.apache.derby.client.net.Request.mark()",1,1,1
"org.apache.derby.client.net.Request.markForCachingPKGNAMCSN()",1,1,1
"org.apache.derby.client.net.Request.markLengthBytes(int)",1,1,1
"org.apache.derby.client.net.Request.maskOutPassword()",1,2,4
"org.apache.derby.client.net.Request.padBytes(byte,int)",1,1,2
"org.apache.derby.client.net.Request.padScalarStreamForError(int,int)",1,2,3
"org.apache.derby.client.net.Request.peekStream(BufferedInputStream)",1,1,1
"org.apache.derby.client.net.Request.popMark()",1,1,1
"org.apache.derby.client.net.Request.popMarkForCachingPKGNAMCSN()",1,1,1
"org.apache.derby.client.net.Request.prepScalarStream(boolean,boolean,boolean,int)",1,7,7
"org.apache.derby.client.net.Request.sendBytes(OutputStream)",1,3,4
"org.apache.derby.client.net.Request.setCcsidMgr(CcsidManager)",1,1,1
"org.apache.derby.client.net.Request.setCorrelationID(int)",1,1,1
"org.apache.derby.client.net.Request.setDssLengthLocation(int)",1,1,1
"org.apache.derby.client.net.Request.updateLengthBytes()",1,2,3
"org.apache.derby.client.net.Request.write1Byte(int)",1,1,1
"org.apache.derby.client.net.Request.write2Bytes(int)",1,1,1
"org.apache.derby.client.net.Request.write4Bytes(long)",1,1,1
"org.apache.derby.client.net.Request.writeBigDecimal(BigDecimal,int,int)",1,1,1
"org.apache.derby.client.net.Request.writeBoolean(boolean)",1,1,2
"org.apache.derby.client.net.Request.writeByte(byte)",1,1,1
"org.apache.derby.client.net.Request.writeBytes(byte[])",1,1,1
"org.apache.derby.client.net.Request.writeBytes(byte[],int)",1,1,1
"org.apache.derby.client.net.Request.writeCodePoint4Bytes(int,int)",1,1,1
"org.apache.derby.client.net.Request.writeDDMString(String)",1,1,1
"org.apache.derby.client.net.Request.writeDate(Date)",1,1,2
"org.apache.derby.client.net.Request.writeDouble(double)",1,1,1
"org.apache.derby.client.net.Request.writeEXTDTALengthCodePointForEncryption(int,int)",1,1,1
"org.apache.derby.client.net.Request.writeEncryptedScalarStream(boolean,boolean,int,int,InputStream,boolean,int)",3,12,12
"org.apache.derby.client.net.Request.writeExtendedLengthBytes(int,long)",1,1,2
"org.apache.derby.client.net.Request.writeExtendedLengthBytesForEncryption(int,long)",1,1,2
"org.apache.derby.client.net.Request.writeFloat(float)",1,1,1
"org.apache.derby.client.net.Request.writeInt(int)",1,1,1
"org.apache.derby.client.net.Request.writeIntFdocaData(int)",1,1,1
"org.apache.derby.client.net.Request.writeLDBytes(byte[])",1,1,1
"org.apache.derby.client.net.Request.writeLDBytesX(int,byte[])",1,1,1
"org.apache.derby.client.net.Request.writeLengthCodePoint(int,int)",1,1,1
"org.apache.derby.client.net.Request.writeLidAndLengths(int[][],int,int)",1,1,2
"org.apache.derby.client.net.Request.writeLidAndLengths(int[][],int,int,boolean,Hashtable)",1,4,4
"org.apache.derby.client.net.Request.writeLong(long)",1,1,1
"org.apache.derby.client.net.Request.writeLongFdocaData(long)",1,1,1
"org.apache.derby.client.net.Request.writePlainScalarStream(boolean,boolean,int,InputStream,boolean,int)",4,6,8
"org.apache.derby.client.net.Request.writePlainScalarStream(boolean,boolean,int,int,InputStream,boolean,int)",4,8,8
"org.apache.derby.client.net.Request.writeScalar1Byte(int,int)",1,1,1
"org.apache.derby.client.net.Request.writeScalar2Bytes(int,int)",1,1,1
"org.apache.derby.client.net.Request.writeScalar4Bytes(int,long)",1,1,1
"org.apache.derby.client.net.Request.writeScalar8Bytes(int,long)",1,1,1
"org.apache.derby.client.net.Request.writeScalarBytes(int,byte[])",1,1,1
"org.apache.derby.client.net.Request.writeScalarBytes(int,byte[],int)",1,1,2
"org.apache.derby.client.net.Request.writeScalarBytes(int,byte[],int,int)",1,1,1
"org.apache.derby.client.net.Request.writeScalarHeader(int,int)",1,1,1
"org.apache.derby.client.net.Request.writeScalarPaddedBytes(byte[],int,byte)",1,1,2
"org.apache.derby.client.net.Request.writeScalarPaddedBytes(int,byte[],int,byte)",1,1,2
"org.apache.derby.client.net.Request.writeScalarPaddedString(String,int)",1,1,2
"org.apache.derby.client.net.Request.writeScalarPaddedString(int,String,int)",1,1,2
"org.apache.derby.client.net.Request.writeScalarStream(boolean,boolean,int,InputStream,boolean,int)",1,1,1
"org.apache.derby.client.net.Request.writeScalarStream(boolean,boolean,int,Reader,boolean,int)",1,1,1
"org.apache.derby.client.net.Request.writeScalarStream(boolean,boolean,int,int,InputStream,boolean,int)",1,3,3
"org.apache.derby.client.net.Request.writeScalarStream(boolean,boolean,int,int,Reader,boolean,int)",1,1,1
"org.apache.derby.client.net.Request.writeScalarString(int,String)",1,1,1
"org.apache.derby.client.net.Request.writeShort(short)",1,1,1
"org.apache.derby.client.net.Request.writeShortFdocaData(short)",1,1,1
"org.apache.derby.client.net.Request.writeSingleorMixedCcsidLDString(String,String)",2,1,3
"org.apache.derby.client.net.Request.writeTime(Time)",1,1,2
"org.apache.derby.client.net.Request.writeTimestamp(Timestamp)",1,1,2
"org.apache.derby.client.net.ResultSetReply.ResultSetReply(Agent,ResultSetReplyInterface,StatementReplyInterface,ConnectionReplyInterface)",1,1,1
"org.apache.derby.client.net.ResultSetReply.readCursorClose(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.ResultSetReply.readFetch(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.ResultSetReply.readPositioningFetch(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.ResultSetReply.readScrollableFetch(ResultSetCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.StatementReply(Agent,StatementReplyInterface,ConnectionReplyInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readDescribeInput(PreparedStatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readDescribeOutput(PreparedStatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readExecute(PreparedStatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readExecuteCall(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readExecuteImmediate(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readOpenQuery(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readPrepare(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readPrepareDescribeOutput(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.StatementReply.readSetSpecialRegister(StatementCallbackInterface)",1,1,1
"org.apache.derby.client.net.Typdef.Typdef(NetAgent)",1,1,1
"org.apache.derby.client.net.Typdef.Typdef(NetAgent,int,String)",1,1,1
"org.apache.derby.client.net.Typdef.Typdef(NetAgent,int,String,int,int)",1,1,1
"org.apache.derby.client.net.Typdef.clearCcsidDbc()",1,1,1
"org.apache.derby.client.net.Typdef.clearCcsidMbc()",1,1,1
"org.apache.derby.client.net.Typdef.clearCcsidSbc()",1,1,1
"org.apache.derby.client.net.Typdef.clearMddOverrides()",2,1,3
"org.apache.derby.client.net.Typdef.clone()",1,1,2
"org.apache.derby.client.net.Typdef.getByteOrder()",1,1,1
"org.apache.derby.client.net.Typdef.getCcsidDbc()",1,1,1
"org.apache.derby.client.net.Typdef.getCcsidDbcEncoding()",1,1,2
"org.apache.derby.client.net.Typdef.getCcsidMbc()",1,1,1
"org.apache.derby.client.net.Typdef.getCcsidMbcEncoding()",1,1,2
"org.apache.derby.client.net.Typdef.getCcsidSbc()",1,1,1
"org.apache.derby.client.net.Typdef.getCcsidSbcEncoding()",1,1,2
"org.apache.derby.client.net.Typdef.getTypdefnam()",1,1,1
"org.apache.derby.client.net.Typdef.initialize(NetAgent,int,boolean,int,boolean,int,boolean,String)",1,1,1
"org.apache.derby.client.net.Typdef.isCcsidDbcSet()",1,1,1
"org.apache.derby.client.net.Typdef.isCcsidMbcSet()",1,1,1
"org.apache.derby.client.net.Typdef.isCcsidSbcSet()",1,1,1
"org.apache.derby.client.net.Typdef.mapFdocaTypeToTypeToUseForComputingDataLength(int)",6,2,6
"org.apache.derby.client.net.Typdef.setCcsidDbc(int)",1,1,1
"org.apache.derby.client.net.Typdef.setCcsidMbc(int)",1,1,1
"org.apache.derby.client.net.Typdef.setCcsidSbc(int)",1,1,1
"org.apache.derby.client.net.Typdef.setMddOverride(int,int,int,int,int,int,int)",1,2,2
"org.apache.derby.client.net.Typdef.setTypdefnam(String)",2,1,2
"org.apache.derby.client.net.Typdef.updateColumn(NetCursor,int,int,int)",3,8,18
"org.apache.derby.diag.ConglomInfo.ConglomInfo(long,String,boolean)",1,1,1
"org.apache.derby.diag.ConglomInfo.getConglomId()",1,1,1
"org.apache.derby.diag.ConglomInfo.getConglomName()",1,1,1
"org.apache.derby.diag.ConglomInfo.getIsIndex()",1,1,1
"org.apache.derby.diag.ErrorLogReader.ErrorLogReader()",1,1,2
"org.apache.derby.diag.ErrorLogReader.ErrorLogReader(String)",1,1,1
"org.apache.derby.diag.ErrorLogReader.close()",1,2,3
"org.apache.derby.diag.ErrorLogReader.getMetaData()",1,1,1
"org.apache.derby.diag.ErrorLogReader.getString(int)",10,12,14
"org.apache.derby.diag.ErrorLogReader.next()",6,5,11
"org.apache.derby.diag.ErrorLogReader.wasNull()",1,1,1
"org.apache.derby.diag.ErrorMessages.ErrorMessages()",1,1,1
"org.apache.derby.diag.ErrorMessages.close()",1,1,1
"org.apache.derby.diag.ErrorMessages.getEstimatedCostPerInstantiation(VTIEnvironment)",1,1,1
"org.apache.derby.diag.ErrorMessages.getEstimatedRowCount(VTIEnvironment)",1,1,1
"org.apache.derby.diag.ErrorMessages.getInt(int)",3,2,3
"org.apache.derby.diag.ErrorMessages.getMetaData()",1,1,1
"org.apache.derby.diag.ErrorMessages.getString(int)",4,2,4
"org.apache.derby.diag.ErrorMessages.loadProperties()",3,2,4
"org.apache.derby.diag.ErrorMessages.next()",2,4,4
"org.apache.derby.diag.ErrorMessages.notAnException()",3,1,3
"org.apache.derby.diag.ErrorMessages.run()",1,1,1
"org.apache.derby.diag.ErrorMessages.supportsMultipleInstantiations(VTIEnvironment)",1,1,1
"org.apache.derby.diag.LockTable.LockTable()",1,1,1
"org.apache.derby.diag.LockTable.LockTable(int)",1,1,1
"org.apache.derby.diag.LockTable.close()",1,1,1
"org.apache.derby.diag.LockTable.dumpLock(Latch)",7,8,13
"org.apache.derby.diag.LockTable.getEstimatedCostPerInstantiation(VTIEnvironment)",1,1,1
"org.apache.derby.diag.LockTable.getEstimatedRowCount(VTIEnvironment)",1,1,1
"org.apache.derby.diag.LockTable.getMetaData()",1,1,1
"org.apache.derby.diag.LockTable.getString(int)",1,1,1
"org.apache.derby.diag.LockTable.next()",1,6,6
"org.apache.derby.diag.LockTable.supportsMultipleInstantiations(VTIEnvironment)",1,1,1
"org.apache.derby.diag.LockTable.wasNull()",1,1,1
"org.apache.derby.diag.SpaceTable.SpaceTable(String)",1,1,1
"org.apache.derby.diag.SpaceTable.SpaceTable(String,String)",1,1,1
"org.apache.derby.diag.SpaceTable.close()",1,1,1
"org.apache.derby.diag.SpaceTable.getConglomInfo(LanguageConnectionContext)",2,4,5
"org.apache.derby.diag.SpaceTable.getEstimatedCostPerInstantiation(VTIEnvironment)",1,1,1
"org.apache.derby.diag.SpaceTable.getEstimatedRowCount(VTIEnvironment)",1,1,1
"org.apache.derby.diag.SpaceTable.getInt(int)",1,1,1
"org.apache.derby.diag.SpaceTable.getLong(int)",2,4,8
"org.apache.derby.diag.SpaceTable.getMetaData()",1,1,1
"org.apache.derby.diag.SpaceTable.getShort(int)",1,1,2
"org.apache.derby.diag.SpaceTable.getSpaceInfo(int)",1,1,1
"org.apache.derby.diag.SpaceTable.getString(int)",1,1,1
"org.apache.derby.diag.SpaceTable.next()",3,3,5
"org.apache.derby.diag.SpaceTable.supportsMultipleInstantiations(VTIEnvironment)",1,1,1
"org.apache.derby.diag.SpaceTable.wasNull()",1,1,1
"org.apache.derby.diag.StatementCache.StatementCache()",1,3,3
"org.apache.derby.diag.StatementCache.close()",1,1,1
"org.apache.derby.diag.StatementCache.getBoolean(int)",4,3,4
"org.apache.derby.diag.StatementCache.getMetaData()",1,1,1
"org.apache.derby.diag.StatementCache.getString(int)",4,4,5
"org.apache.derby.diag.StatementCache.getTimestamp(int)",1,1,1
"org.apache.derby.diag.StatementCache.next()",4,2,4
"org.apache.derby.diag.StatementCache.wasNull()",1,1,1
"org.apache.derby.diag.StatementDuration.StatementDuration()",1,1,2
"org.apache.derby.diag.StatementDuration.StatementDuration(String)",1,1,1
"org.apache.derby.diag.StatementDuration.close()",1,2,3
"org.apache.derby.diag.StatementDuration.getMetaData()",1,1,1
"org.apache.derby.diag.StatementDuration.getString(int)",1,1,1
"org.apache.derby.diag.StatementDuration.next()",6,7,10
"org.apache.derby.diag.StatementDuration.setupColumn(int)",8,10,12
"org.apache.derby.diag.StatementDuration.wasNull()",1,1,1
"org.apache.derby.diag.TransactionTable.close()",1,1,1
"org.apache.derby.diag.TransactionTable.getEstimatedCostPerInstantiation(VTIEnvironment)",1,1,1
"org.apache.derby.diag.TransactionTable.getEstimatedRowCount(VTIEnvironment)",1,1,1
"org.apache.derby.diag.TransactionTable.getMetaData()",1,1,1
"org.apache.derby.diag.TransactionTable.getString(int)",2,2,9
"org.apache.derby.diag.TransactionTable.next()",4,2,5
"org.apache.derby.diag.TransactionTable.supportsMultipleInstantiations(VTIEnvironment)",1,1,1
"org.apache.derby.diag.TransactionTable.wasNull()",1,1,1
"org.apache.derby.drda.NetServlet.displayCurrentStatus(HttpServletRequest,LocalizedResource,String)",1,4,6
"org.apache.derby.drda.NetServlet.doGet(HttpServletRequest,HttpServletResponse)",17,46,65
"org.apache.derby.drda.NetServlet.doPost(HttpServletRequest,HttpServletResponse)",1,1,1
"org.apache.derby.drda.NetServlet.escapeSingleQuotes(String)",2,2,5
"org.apache.derby.drda.NetServlet.fixLanguageCode(String)",3,3,3
"org.apache.derby.drda.NetServlet.fixLanguageCode(String,int)",1,1,1
"org.apache.derby.drda.NetServlet.getCurrentAppUI(HttpServletRequest)",4,3,4
"org.apache.derby.drda.NetServlet.getDoAction(HttpServletRequest)",1,1,1
"org.apache.derby.drda.NetServlet.getForm(HttpServletRequest)",1,1,1
"org.apache.derby.drda.NetServlet.getHtmlLabelledMessageInstance(LocalizedResource,String,String)",1,1,2
"org.apache.derby.drda.NetServlet.getIntParameter(HttpServletRequest,String,String,LocalizedResource,String)",3,4,5
"org.apache.derby.drda.NetServlet.getLocStringFromLanguage(String)",1,2,2
"org.apache.derby.drda.NetServlet.getLogging(HttpServletRequest)",1,1,1
"org.apache.derby.drda.NetServlet.getParam(HttpServletRequest,String)",2,1,2
"org.apache.derby.drda.NetServlet.getServerStatus()",2,1,3
"org.apache.derby.drda.NetServlet.getTrace(HttpServletRequest)",1,1,1
"org.apache.derby.drda.NetServlet.init(ServletConfig)",4,6,11
"org.apache.derby.drda.NetServlet.isServerStarted(NetworkServerControl,int)",3,2,4
"org.apache.derby.drda.NetServlet.logging(LocalizedResource,boolean,HttpServletRequest,String)",1,2,2
"org.apache.derby.drda.NetServlet.printAsContentHeader(String)",1,1,1
"org.apache.derby.drda.NetServlet.printBanner(LocalizedResource)",1,1,1
"org.apache.derby.drda.NetServlet.printErrorForm(LocalizedResource,HttpServletRequest,Exception,String)",1,1,1
"org.apache.derby.drda.NetServlet.printErrorForm(LocalizedResource,HttpServletRequest,String,String)",1,1,1
"org.apache.derby.drda.NetServlet.runServer(LocalizedResource,HttpServletRequest,String)",4,10,13
"org.apache.derby.drda.NetServlet.setDefaults()",1,1,1
"org.apache.derby.drda.NetServlet.setNetParam(LocalizedResource,int,int,HttpServletRequest,String)",1,2,2
"org.apache.derby.drda.NetServlet.shutdownServer(LocalizedResource,HttpServletRequest,String)",1,2,2
"org.apache.derby.drda.NetServlet.traceAll(LocalizedResource,boolean,HttpServletRequest,String)",1,2,2
"org.apache.derby.drda.NetServlet.traceDirectory(LocalizedResource,String,HttpServletRequest,String)",2,4,4
"org.apache.derby.drda.NetServlet.traceSession(LocalizedResource,boolean,int,HttpServletRequest,String)",1,2,2
"org.apache.derby.drda.NetServlet.translationAvailable(String)",3,2,3
"org.apache.derby.drda.NetworkServerControl.NetworkServerControl()",1,1,1
"org.apache.derby.drda.NetworkServerControl.NetworkServerControl(InetAddress,int)",1,1,1
"org.apache.derby.drda.NetworkServerControl.NetworkServerControl(InetAddress,int,String,String)",1,1,1
"org.apache.derby.drda.NetworkServerControl.NetworkServerControl(String,String)",1,1,1
"org.apache.derby.drda.NetworkServerControl.getCodeSourcePrefix(NetworkServerControlImpl)",1,2,2
"org.apache.derby.drda.NetworkServerControl.getCurrentProperties()",1,1,1
"org.apache.derby.drda.NetworkServerControl.getHostNameForSocketPermission(NetworkServerControlImpl)",1,3,4
"org.apache.derby.drda.NetworkServerControl.getMaxThreads()",1,1,1
"org.apache.derby.drda.NetworkServerControl.getPolicyFileURL()",1,1,1
"org.apache.derby.drda.NetworkServerControl.getRuntimeInfo()",1,1,1
"org.apache.derby.drda.NetworkServerControl.getSysinfo()",1,1,1
"org.apache.derby.drda.NetworkServerControl.getTimeSlice()",1,1,1
"org.apache.derby.drda.NetworkServerControl.hostnamesEqual(String,String)",1,1,2
"org.apache.derby.drda.NetworkServerControl.installSecurityManager(NetworkServerControlImpl)",1,3,3
"org.apache.derby.drda.NetworkServerControl.isIPV6Address(String)",5,2,6
"org.apache.derby.drda.NetworkServerControl.logConnections(boolean)",1,1,1
"org.apache.derby.drda.NetworkServerControl.main(String[])",1,7,7
"org.apache.derby.drda.NetworkServerControl.needsSecurityManager(NetworkServerControlImpl,int)",1,3,3
"org.apache.derby.drda.NetworkServerControl.ping()",1,1,1
"org.apache.derby.drda.NetworkServerControl.setClientLocale(String)",1,1,1
"org.apache.derby.drda.NetworkServerControl.setMaxThreads(int)",1,1,1
"org.apache.derby.drda.NetworkServerControl.setTimeSlice(int)",1,1,1
"org.apache.derby.drda.NetworkServerControl.setTraceDirectory(String)",1,1,1
"org.apache.derby.drda.NetworkServerControl.shutdown()",1,1,1
"org.apache.derby.drda.NetworkServerControl.start(PrintWriter)",1,1,1
"org.apache.derby.drda.NetworkServerControl.trace(boolean)",1,1,1
"org.apache.derby.drda.NetworkServerControl.trace(int,boolean)",1,1,1
"org.apache.derby.drda.NetworkServerControl.verifySecurityState(NetworkServerControlImpl)",1,1,1
"org.apache.derby.iapi.db.ConnectionInfo.ConnectionInfo()",1,1,1
"org.apache.derby.iapi.db.ConnectionInfo.lastAutoincrementValue(String,String,String)",1,1,1
"org.apache.derby.iapi.db.ConnectionInfo.nextAutoincrementValue(String,String,String)",1,2,2
"org.apache.derby.iapi.db.ConsistencyChecker.ConsistencyChecker()",1,1,1
"org.apache.derby.iapi.db.ConsistencyChecker.checkTable(String,String)",15,22,26
"org.apache.derby.iapi.db.Factory.getDatabaseOfConnection()",1,1,1
"org.apache.derby.iapi.db.Factory.getTriggerExecutionContext()",1,1,1
"org.apache.derby.iapi.db.OptimizerTrace.getOptimizerTraceOutput()",1,1,2
"org.apache.derby.iapi.db.OptimizerTrace.setOptimizerTrace(boolean)",1,1,2
"org.apache.derby.iapi.db.OptimizerTrace.setOptimizerTraceHtml(boolean)",1,1,2
"org.apache.derby.iapi.db.OptimizerTrace.writeOptimizerTraceOutputHtml(String)",1,1,2
"org.apache.derby.iapi.db.PropertyInfo.PropertyInfo()",1,1,1
"org.apache.derby.iapi.db.PropertyInfo.getConglomerateProperties(String,String,boolean)",4,4,6
"org.apache.derby.iapi.db.PropertyInfo.getIndexProperties(String,String)",1,1,1
"org.apache.derby.iapi.db.PropertyInfo.getTableProperties(String,String)",1,1,1
"org.apache.derby.iapi.db.PropertyInfo.setDatabaseProperty(String,String)",1,2,2
"org.apache.derby.iapi.error.ErrorStringBuilder.ErrorStringBuilder(PrintWriterGetHeader)",1,1,1
"org.apache.derby.iapi.error.ErrorStringBuilder.append(String)",1,2,2
"org.apache.derby.iapi.error.ErrorStringBuilder.appendln(String)",1,2,2
"org.apache.derby.iapi.error.ErrorStringBuilder.get()",1,1,1
"org.apache.derby.iapi.error.ErrorStringBuilder.reset()",1,1,1
"org.apache.derby.iapi.error.ErrorStringBuilder.stackTrace(Throwable)",1,6,6
"org.apache.derby.iapi.error.PassThroughException.PassThroughException(Exception)",1,1,1
"org.apache.derby.iapi.error.PassThroughException.getException()",1,1,1
"org.apache.derby.iapi.error.PublicAPI.wrapStandardException(StandardException)",1,1,1
"org.apache.derby.iapi.error.SQLWarningFactory.newSQLWarning(String)",1,1,1
"org.apache.derby.iapi.error.SQLWarningFactory.newSQLWarning(String,Object)",1,1,1
"org.apache.derby.iapi.error.ShutdownException.ShutdownException()",1,1,1
"org.apache.derby.iapi.error.StandardException.StandardException(String)",1,1,1
"org.apache.derby.iapi.error.StandardException.StandardException(String,Object[])",1,1,1
"org.apache.derby.iapi.error.StandardException.StandardException(String,String)",1,1,1
"org.apache.derby.iapi.error.StandardException.StandardException(String,Throwable,Object[])",1,3,3
"org.apache.derby.iapi.error.StandardException.closeException()",1,1,1
"org.apache.derby.iapi.error.StandardException.getArgumentFerry(SQLException)",3,1,4
"org.apache.derby.iapi.error.StandardException.getArguments()",1,1,1
"org.apache.derby.iapi.error.StandardException.getErrorCode()",1,1,1
"org.apache.derby.iapi.error.StandardException.getErrorProperty(String)",1,1,1
"org.apache.derby.iapi.error.StandardException.getErrorProperty(String,String)",1,1,1
"org.apache.derby.iapi.error.StandardException.getMessage()",1,2,2
"org.apache.derby.iapi.error.StandardException.getMessageId()",1,1,1
"org.apache.derby.iapi.error.StandardException.getSQLState()",1,1,1
"org.apache.derby.iapi.error.StandardException.getSQLStateFromIdentifier(String)",2,1,2
"org.apache.derby.iapi.error.StandardException.getSeverity()",1,1,1
"org.apache.derby.iapi.error.StandardException.getSeverityFromIdentifier(String)",6,6,17
"org.apache.derby.iapi.error.StandardException.interrupt(InterruptedException)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Object,Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Object,Throwable)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object,Throwable)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Object[])",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable,Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable,Object,Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newException(String,Throwable,Object,Object,Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newPreLocalizedException(String,Throwable,String)",1,2,2
"org.apache.derby.iapi.error.StandardException.newWarning(String)",1,1,1
"org.apache.derby.iapi.error.StandardException.newWarning(String,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newWarning(String,Object,Object)",1,1,1
"org.apache.derby.iapi.error.StandardException.newWarningCommon(String,Object[])",1,1,1
"org.apache.derby.iapi.error.StandardException.normalClose()",1,1,1
"org.apache.derby.iapi.error.StandardException.plainWrapException(Throwable)",4,5,6
"org.apache.derby.iapi.error.StandardException.report()",1,1,1
"org.apache.derby.iapi.error.StandardException.setArguments(Object[])",1,1,1
"org.apache.derby.iapi.error.StandardException.setReport(int)",1,1,1
"org.apache.derby.iapi.error.StandardException.setSeverity(int)",1,1,1
"org.apache.derby.iapi.error.StandardException.toString()",1,1,1
"org.apache.derby.iapi.error.StandardException.unexpectedUserException(Throwable)",7,15,18
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.BrokeredCallableStatement(BrokeredStatementControl,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.createDuplicateStatement(Connection,CallableStatement)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getArray(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getBigDecimal(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getBigDecimal(int,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getBlob(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getBoolean(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getByte(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getBytes(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getCallableStatement()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getClob(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getDate(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getDate(int,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getDouble(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getFloat(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getInt(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getLong(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getObject(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getObject(int,Map)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getPreparedStatement()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getRef(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getShort(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getString(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getTime(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getTime(int,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getTimestamp(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.getTimestamp(int,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.registerOutParameter(int,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.registerOutParameter(int,int,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.registerOutParameter(int,int,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement.wasNull()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.BrokeredCallableStatement30(BrokeredStatementControl,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.createDuplicateStatement(Connection,CallableStatement)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getArray(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getBigDecimal(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getBlob(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getBoolean(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getByte(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getBytes(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getClob(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getDate(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getDate(String,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getDouble(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getFloat(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getInt(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getLong(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getObject(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getObject(String,Map)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getParameterMetaData()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getRef(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getShort(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getString(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getTime(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getTime(String,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getTimestamp(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getTimestamp(String,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getURL(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.getURL(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.registerOutParameter(String,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.registerOutParameter(String,int,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.registerOutParameter(String,int,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setAsciiStream(String,InputStream,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setBigDecimal(String,BigDecimal)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setBinaryStream(String,InputStream,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setBoolean(String,boolean)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setByte(String,byte)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setBytes(String,byte[])",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setCharacterStream(String,Reader,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setDate(String,Date)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setDate(String,Date,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setDouble(String,double)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setFloat(String,float)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setInt(String,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setLong(String,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setNull(String,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setNull(String,int,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setObject(String,Object)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setObject(String,Object,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setObject(String,Object,int,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setShort(String,short)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setString(String,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setTime(String,Time)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setTime(String,Time,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setTimestamp(String,Timestamp)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setTimestamp(String,Timestamp,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setURL(String,URL)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement30.setURL(int,URL)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.BrokeredCallableStatement40(BrokeredStatementControl,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getCharacterStream(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getCharacterStream(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNCharacterStream(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNCharacterStream(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNClob(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNClob(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNString(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getNString(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getRowId(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getRowId(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getSQLXML(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.getSQLXML(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.isClosed()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.isPoolable()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setAsciiStream(String,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setAsciiStream(String,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setAsciiStream(int,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setAsciiStream(int,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBinaryStream(String,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBinaryStream(String,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBinaryStream(int,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBinaryStream(int,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(String,Blob)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(String,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(String,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(int,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setBlob(int,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setCharacterStream(String,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setCharacterStream(int,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(String,Clob)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(String,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(String,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(int,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setClob(int,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNCharacterStream(String,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(String,NClob)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(String,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(String,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(int,NClob)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(int,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNClob(int,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNString(String,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setNString(int,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setPoolable(boolean)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setRowId(String,RowId)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setRowId(int,RowId)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setSQLXML(String,SQLXML)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.setSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredCallableStatement40.unwrap(Class<T>)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.BrokeredConnection(BrokeredConnectionControl)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection.addWarning(SQLWarning)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection.checkIfClosed()",2,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.clearLOBMapping()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection.clearWarnings()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.close()",3,2,4
"org.apache.derby.iapi.jdbc.BrokeredConnection.commit()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.createStatement()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.createStatement(int,int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getAutoCommit()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getCatalog()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getCurrentSchemaName()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getHoldability()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getIsolationUptoDate()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getLOBMapping(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection.getMetaData()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getPrepareIsolation()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection.getRealConnection()",2,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getTransactionIsolation()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getTypeMap()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.getWarnings()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.isClosed()",2,3,4
"org.apache.derby.iapi.jdbc.BrokeredConnection.isReadOnly()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.nativeSQL(String)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.newBrokeredStatement(BrokeredStatementControl)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection.notifyException(SQLException)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.prepareCall(String)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.prepareCall(String,int,int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.prepareStatement(String)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.prepareStatement(String,int,int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.prepareStatement(String,int,int,int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.rollback()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.setAutoCommit(boolean)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.setCatalog(String)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.setDrdaID(String)",1,1,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.setPrepareIsolation(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection.setReadOnly(boolean)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.setState(boolean)",2,3,3
"org.apache.derby.iapi.jdbc.BrokeredConnection.setTransactionIsolation(int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.setTypeMap(Map)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.statementHoldabilityCheck(int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection.syncState()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection.toString()",1,2,3
"org.apache.derby.iapi.jdbc.BrokeredConnection30.BrokeredConnection30(BrokeredConnectionControl)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection30.createStatement(int,int,int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.newBrokeredStatement(BrokeredStatementControl,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection30.newBrokeredStatement(BrokeredStatementControl,String,Object)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection30.prepareCall(String,int,int,int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.prepareStatement(String,String[])",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.prepareStatement(String,int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.prepareStatement(String,int[])",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.releaseSavepoint(Savepoint)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.rollback(Savepoint)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.setHoldability(int)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.setSavepoint()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection30.setSavepoint(String)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.BrokeredConnection40(BrokeredConnectionControl)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredConnection40.createArrayOf(String,Object[])",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.createBlob()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.createClob()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.createNClob()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.createSQLXML()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.createStruct(String,Object[])",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.getClientInfo()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.getClientInfo(String)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.getTypeMap()",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.isValid(int)",2,2,3
"org.apache.derby.iapi.jdbc.BrokeredConnection40.isWrapperFor(Class<?>)",2,3,3
"org.apache.derby.iapi.jdbc.BrokeredConnection40.newBrokeredStatement(BrokeredStatementControl)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.newBrokeredStatement(BrokeredStatementControl,String)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.newBrokeredStatement(BrokeredStatementControl,String,Object)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredConnection40.setClientInfo(Properties)",1,3,3
"org.apache.derby.iapi.jdbc.BrokeredConnection40.setClientInfo(String,String)",1,3,3
"org.apache.derby.iapi.jdbc.BrokeredConnection40.unwrap(Class<T>)",2,4,4
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.BrokeredPreparedStatement(BrokeredStatementControl,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.addBatch()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.clearParameters()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.createDuplicateStatement(Connection,PreparedStatement)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.execute()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.executeQuery()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.executeUpdate()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.getMetaData()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.getPreparedStatement()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.getStatement()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setArray(int,Array)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setBigDecimal(int,BigDecimal)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setBinaryStream(int,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setBlob(int,Blob)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setBoolean(int,boolean)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setByte(int,byte)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setBytes(int,byte[])",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setCharacterStream(int,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setCharacterStream(int,Reader,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setClob(int,Clob)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setDate(int,Date)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setDate(int,Date,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setDouble(int,double)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setFloat(int,float)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setInt(int,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setLong(int,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setNull(int,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setNull(int,int,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setObject(int,Object)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setObject(int,Object,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setObject(int,Object,int,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setRef(int,Ref)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setShort(int,short)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setString(int,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setTime(int,Time)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setTime(int,Time,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setTimestamp(int,Timestamp)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setTimestamp(int,Timestamp,Calendar)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement.setUnicodeStream(int,InputStream,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement30.BrokeredPreparedStatement30(BrokeredStatementControl,String,Object)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement30.createDuplicateStatement(Connection,PreparedStatement)",1,4,4
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement30.getParameterMetaData()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement30.setURL(int,URL)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.BrokeredPreparedStatement40(BrokeredStatementControl,String,Object)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.isClosed()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.isPoolable()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setAsciiStream(int,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setAsciiStream(int,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setBinaryStream(int,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setBlob(int,InputStream)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setBlob(int,InputStream,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setClob(int,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setClob(int,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNClob(int,NClob)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNClob(int,Reader)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNClob(int,Reader,long)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setNString(int,String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setPoolable(boolean)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setRowId(int,RowId)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.setSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredPreparedStatement40.unwrap(Class<T>)",1,2,2
"org.apache.derby.iapi.jdbc.BrokeredStatement.BrokeredStatement(BrokeredStatementControl)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.addBatch(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.cancel()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.checkIfClosed()",2,2,2
"org.apache.derby.iapi.jdbc.BrokeredStatement.clearBatch()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.clearWarnings()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.close()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.controlCheck()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.createDuplicateStatement(Connection,Statement)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.execute(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.execute(String,String[])",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.execute(String,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.execute(String,int[])",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.executeBatch()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.executeQuery(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(String,String[])",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(String,int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.executeUpdate(String,int[])",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getConnection()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getFetchDirection()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getFetchSize()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getGeneratedKeys()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getMaxFieldSize()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getMaxRows()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getMoreResults()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getMoreResults(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getQueryTimeout()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getResultSet()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getResultSetConcurrency()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getResultSetHoldability()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getResultSetType()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getStatement()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getUpdateCount()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.getWarnings()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.isClosed()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.isWrapperFor(Class)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.setCursorName(String)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.setEscapeProcessing(boolean)",1,1,2
"org.apache.derby.iapi.jdbc.BrokeredStatement.setFetchDirection(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.setFetchSize(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.setMaxFieldSize(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.setMaxRows(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.setQueryTimeout(int)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement.setStatementState(Statement,Statement)",1,3,3
"org.apache.derby.iapi.jdbc.BrokeredStatement.wrapResultSet(ResultSet)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement40.BrokeredStatement40(BrokeredStatementControl)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement40.isClosed()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement40.isPoolable()",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement40.setPoolable(boolean)",1,1,1
"org.apache.derby.iapi.jdbc.BrokeredStatement40.unwrap(Class<T>)",1,2,2
"org.apache.derby.iapi.jdbc.DRDAServerStarter.boot(boolean,Properties)",3,9,9
"org.apache.derby.iapi.jdbc.DRDAServerStarter.findStartStopMethods(Class)",1,1,1
"org.apache.derby.iapi.jdbc.DRDAServerStarter.run()",1,3,3
"org.apache.derby.iapi.jdbc.DRDAServerStarter.setStartInfo(InetAddress,int,PrintWriter)",1,1,2
"org.apache.derby.iapi.jdbc.DRDAServerStarter.setStartInfo(InetAddress,int,String,String,PrintWriter)",1,1,1
"org.apache.derby.iapi.jdbc.DRDAServerStarter.stop()",1,5,5
"org.apache.derby.iapi.jdbc.FailedProperties40.FailedProperties40(Properties)",2,3,4
"org.apache.derby.iapi.jdbc.FailedProperties40.getFirstKey()",1,1,1
"org.apache.derby.iapi.jdbc.FailedProperties40.getFirstValue()",1,1,1
"org.apache.derby.iapi.jdbc.FailedProperties40.getProperties()",1,1,1
"org.apache.derby.iapi.jdbc.FailedProperties40.makeProperties(String,String)",1,2,3
"org.apache.derby.iapi.jdbc.JDBCBoot.JDBCBoot()",1,1,1
"org.apache.derby.iapi.jdbc.JDBCBoot.addProperty(String,String)",1,1,1
"org.apache.derby.iapi.jdbc.JDBCBoot.boot(String,PrintStream)",1,4,4
"org.apache.derby.iapi.security.SecurityUtil.checkSubjectHasPermission(Subject,Permission)",1,1,1
"org.apache.derby.iapi.security.SecurityUtil.checkUserHasPermission(String,Permission)",2,1,2
"org.apache.derby.iapi.security.SecurityUtil.createSystemPrincipalSubject(String)",1,2,2
"org.apache.derby.iapi.security.SecurityUtil.getAuthorizationId(String)",3,2,4
"org.apache.derby.iapi.services.cache.ClassSize.estimateAndCatalogBase(Class)",1,1,1
"org.apache.derby.iapi.services.cache.ClassSize.estimateArrayOverhead()",1,1,1
"org.apache.derby.iapi.services.cache.ClassSize.estimateBase(Class)",1,1,1
"org.apache.derby.iapi.services.cache.ClassSize.estimateBaseFromCatalog(Class)",1,1,1
"org.apache.derby.iapi.services.cache.ClassSize.estimateBaseFromCatalog(Class,boolean)",4,4,7
"org.apache.derby.iapi.services.cache.ClassSize.estimateBaseFromCoefficients(int[])",1,1,2
"org.apache.derby.iapi.services.cache.ClassSize.estimateHashEntrySize()",1,1,1
"org.apache.derby.iapi.services.cache.ClassSize.estimateMemoryUsage(String)",2,1,2
"org.apache.derby.iapi.services.cache.ClassSize.getIntSize()",1,1,1
"org.apache.derby.iapi.services.cache.ClassSize.getRefSize()",1,1,1
"org.apache.derby.iapi.services.cache.ClassSize.getSizeCoefficients(Class)",1,22,23
"org.apache.derby.iapi.services.cache.ClassSize.setDummyCatalog()",1,1,1
"org.apache.derby.iapi.services.classfile.AttributeEntry.AttributeEntry(ClassInput)",1,1,1
"org.apache.derby.iapi.services.classfile.AttributeEntry.AttributeEntry(int,ClassFormatOutput)",1,1,1
"org.apache.derby.iapi.services.classfile.AttributeEntry.classFileSize()",1,2,2
"org.apache.derby.iapi.services.classfile.AttributeEntry.getNameIndex()",1,1,1
"org.apache.derby.iapi.services.classfile.AttributeEntry.put(ClassFormatOutput)",1,2,2
"org.apache.derby.iapi.services.classfile.Attributes.Attributes(int)",1,1,1
"org.apache.derby.iapi.services.classfile.Attributes.addEntry(AttributeEntry)",1,1,1
"org.apache.derby.iapi.services.classfile.Attributes.classFileSize()",1,1,1
"org.apache.derby.iapi.services.classfile.Attributes.put(ClassFormatOutput)",1,2,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Double_info.CONSTANT_Double_info(double)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Double_info.classFileSize()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Double_info.equals(Object)",2,1,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Double_info.hashCode()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Double_info.put(ClassFormatOutput)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Float_info.CONSTANT_Float_info(float)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Float_info.classFileSize()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Float_info.equals(Object)",2,1,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Float_info.hashCode()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Float_info.put(ClassFormatOutput)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.CONSTANT_Index_info(int,int,int)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.classFileSize()",1,1,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.equals(Object)",2,1,4
"org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.getI1()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.getI2()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.hashCode()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.put(ClassFormatOutput)",1,2,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Index_info.set(int,int,int)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Integer_info.CONSTANT_Integer_info(int)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Integer_info.classFileSize()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Integer_info.equals(Object)",2,1,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Integer_info.hashCode()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Integer_info.put(ClassFormatOutput)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Long_info.CONSTANT_Long_info(long)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Long_info.classFileSize()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Long_info.equals(Object)",2,1,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Long_info.hashCode()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Long_info.put(ClassFormatOutput)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.CONSTANT_Utf8_info(String)",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.classFileSize()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.getKey()",1,1,1
"org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.put(ClassFormatOutput)",1,2,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.setAlternative(int)",1,1,2
"org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.setAsCode()",2,3,3
"org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.setAsString()",2,3,3
"org.apache.derby.iapi.services.classfile.CONSTANT_Utf8_info.toString()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassEnumeration.ClassEnumeration(ClassHolder,Enumeration,Enumeration,Enumeration)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassEnumeration.distillClasses(String,HashSet)",7,6,9
"org.apache.derby.iapi.services.classfile.ClassEnumeration.findClassReferences(HashSet)",7,5,7
"org.apache.derby.iapi.services.classfile.ClassEnumeration.findFieldReferences(Enumeration,HashSet)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassEnumeration.findMethodReferences(Enumeration,HashSet)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassEnumeration.hasMoreElements()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassEnumeration.nextElement()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.ClassFormatOutput()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.ClassFormatOutput(OutputStream)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.ClassFormatOutput(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.getData()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.limit(String,int,int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.putU1(int)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.putU2(String,int)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.putU2(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.putU4(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassFormatOutput.writeTo(OutputStream)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.ClassHolder(String,String,int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.ClassHolder(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addAttribute(String,ClassFormatOutput)",1,1,2
"org.apache.derby.iapi.services.classfile.ClassHolder.addClassReference(String)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassHolder.addCodeUtf8(String)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassHolder.addConstant(String)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addConstant(double)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addConstant(float)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addConstant(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addConstant(long)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addDirectEntry(ConstantPoolEntry)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassHolder.addEntry(Object,ConstantPoolEntry)",2,3,3
"org.apache.derby.iapi.services.classfile.ClassHolder.addExtraUtf8(String)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addFieldReference(ClassMember)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addFieldReference(String,String,String)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addIndexReference(int,int,int)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassHolder.addMember(String,String,int)",1,7,10
"org.apache.derby.iapi.services.classfile.ClassHolder.addMethodReference(String,String,String,boolean)",1,1,2
"org.apache.derby.iapi.services.classfile.ClassHolder.addNameAndType(String,String)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addReference(int,ClassMember)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addReference(int,String,String,String)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addString(String)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassHolder.addUtf8(String)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.addUtf8Entry(String)",1,2,2
"org.apache.derby.iapi.services.classfile.ClassHolder.className(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.convertToInternal(String,boolean)",2,18,23
"org.apache.derby.iapi.services.classfile.ClassHolder.convertToInternalClassName(String)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.convertToInternalDescriptor(String)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.cptPut(ClassFormatOutput)",3,2,3
"org.apache.derby.iapi.services.classfile.ClassHolder.findClass(String)",2,1,2
"org.apache.derby.iapi.services.classfile.ClassHolder.findIndexEntry(int,int,int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.findIndexIndex(int,int,int)",2,1,2
"org.apache.derby.iapi.services.classfile.ClassHolder.findMatchingEntry(Object)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.findNameAndType(String,String)",3,1,3
"org.apache.derby.iapi.services.classfile.ClassHolder.findUtf8(String)",2,1,2
"org.apache.derby.iapi.services.classfile.ClassHolder.getClassName(int)",2,1,2
"org.apache.derby.iapi.services.classfile.ClassHolder.getConstantPoolIndex()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.getEntry(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.getFileFormat()",1,4,5
"org.apache.derby.iapi.services.classfile.ClassHolder.getModifier()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.getName()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.getSuperClassName()",2,2,2
"org.apache.derby.iapi.services.classfile.ClassHolder.isExternalClassName(String)",3,2,3
"org.apache.derby.iapi.services.classfile.ClassHolder.makeDesc(String,int,boolean)",2,3,4
"org.apache.derby.iapi.services.classfile.ClassHolder.makeDesc(char,int)",12,5,14
"org.apache.derby.iapi.services.classfile.ClassHolder.nameIndexToString(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassHolder.put(ClassFormatOutput)",1,6,6
"org.apache.derby.iapi.services.classfile.ClassInput.ClassInput(InputStream)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassInput.getU1Array(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassInput.getU2()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassInput.getU4()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassInvestigator.ClassInvestigator(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassInvestigator.doRenameString(int,String)",2,1,2
"org.apache.derby.iapi.services.classfile.ClassInvestigator.getClasses(Enumeration,Enumeration)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassInvestigator.getConstant(ClassInput)",2,2,9
"org.apache.derby.iapi.services.classfile.ClassInvestigator.getFields()",2,2,2
"org.apache.derby.iapi.services.classfile.ClassInvestigator.getMember(String,String)",4,2,4
"org.apache.derby.iapi.services.classfile.ClassInvestigator.getMethods()",2,2,2
"org.apache.derby.iapi.services.classfile.ClassInvestigator.getStrings()",3,3,4
"org.apache.derby.iapi.services.classfile.ClassInvestigator.implementedInterfaces()",1,2,3
"org.apache.derby.iapi.services.classfile.ClassInvestigator.load(InputStream)",2,10,11
"org.apache.derby.iapi.services.classfile.ClassInvestigator.newDescriptor(Hashtable,String)",3,6,9
"org.apache.derby.iapi.services.classfile.ClassInvestigator.processCodeAttribute(ClassMember,AttributeEntry)",2,6,7
"org.apache.derby.iapi.services.classfile.ClassInvestigator.readClassMember(ClassInvestigator,ClassInput)",1,3,3
"org.apache.derby.iapi.services.classfile.ClassInvestigator.referencedClasses()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassInvestigator.removeAttributes()",1,17,20
"org.apache.derby.iapi.services.classfile.ClassInvestigator.renameClassElements(Hashtable,Hashtable)",4,6,7
"org.apache.derby.iapi.services.classfile.ClassInvestigator.renameMembers(Enumeration,Hashtable,Hashtable)",1,4,4
"org.apache.derby.iapi.services.classfile.ClassInvestigator.renameString(Hashtable,CONSTANT_Index_info)",2,5,5
"org.apache.derby.iapi.services.classfile.ClassMember.ClassMember(ClassHolder,int,int,int)",1,1,1
"org.apache.derby.iapi.services.classfile.ClassMember.addAttribute(String,ClassFormatOutput)",1,1,2
"org.apache.derby.iapi.services.classfile.ClassMember.classFileSize()",1,2,2
"org.apache.derby.iapi.services.classfile.ClassMember.getDescriptor()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassMember.getModifier()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassMember.getName()",1,1,1
"org.apache.derby.iapi.services.classfile.ClassMember.put(ClassFormatOutput)",1,2,2
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.ConstantPoolEntry(int)",1,1,1
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.doubleSlot()",1,1,1
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.getI1()",1,1,1
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.getI2()",1,1,1
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.getIndex()",1,3,3
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.getKey()",1,1,1
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.getTag()",1,1,1
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.put(ClassFormatOutput)",1,1,1
"org.apache.derby.iapi.services.classfile.ConstantPoolEntry.setIndex(int)",1,1,1
"org.apache.derby.iapi.services.classfile.MemberTable.MemberTable(int)",1,1,2
"org.apache.derby.iapi.services.classfile.MemberTable.addEntry(ClassMember)",1,1,1
"org.apache.derby.iapi.services.classfile.MemberTable.classFileSize()",1,2,2
"org.apache.derby.iapi.services.classfile.MemberTable.find(String,String)",2,1,2
"org.apache.derby.iapi.services.classfile.MemberTable.put(ClassFormatOutput)",1,2,2
"org.apache.derby.iapi.services.classfile.MemberTable.size()",1,1,1
"org.apache.derby.iapi.services.classfile.MemberTableHash.MemberTableHash(String,String)",1,1,1
"org.apache.derby.iapi.services.classfile.MemberTableHash.MemberTableHash(String,String,int)",1,2,3
"org.apache.derby.iapi.services.classfile.MemberTableHash.equals(Object)",3,2,4
"org.apache.derby.iapi.services.classfile.MemberTableHash.hashCode()",1,1,1
"org.apache.derby.iapi.services.classfile.MemberTableHash.setHashCode()",1,1,1
"org.apache.derby.iapi.services.context.ContextImpl.ContextImpl(ContextManager,String)",1,1,1
"org.apache.derby.iapi.services.context.ContextImpl.appendErrorInfo()",1,1,1
"org.apache.derby.iapi.services.context.ContextImpl.getContextManager()",1,1,1
"org.apache.derby.iapi.services.context.ContextImpl.getIdName()",1,1,1
"org.apache.derby.iapi.services.context.ContextImpl.isLastHandler(int)",1,1,1
"org.apache.derby.iapi.services.context.ContextImpl.popMe()",1,1,1
"org.apache.derby.iapi.services.context.ContextImpl.pushMe()",1,1,1
"org.apache.derby.iapi.services.context.ContextManager.ContextManager(ContextService,HeaderPrintWriter)",1,1,2
"org.apache.derby.iapi.services.context.ContextManager.CtxStack.getUnmodifiableList()",1,1,1
"org.apache.derby.iapi.services.context.ContextManager.CtxStack.isEmpty()",1,1,1
"org.apache.derby.iapi.services.context.ContextManager.CtxStack.pop()",1,2,2
"org.apache.derby.iapi.services.context.ContextManager.CtxStack.push(Context)",1,1,1
"org.apache.derby.iapi.services.context.ContextManager.CtxStack.remove(Context)",2,2,2
"org.apache.derby.iapi.services.context.ContextManager.CtxStack.top()",1,1,1
"org.apache.derby.iapi.services.context.ContextManager.checkInterrupt()",2,1,2
"org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(Throwable)",11,24,30
"org.apache.derby.iapi.services.context.ContextManager.flushErrorString()",1,1,1
"org.apache.derby.iapi.services.context.ContextManager.getContext(String)",1,5,5
"org.apache.derby.iapi.services.context.ContextManager.getContextStack(String)",1,2,2
"org.apache.derby.iapi.services.context.ContextManager.getMessageLocale()",3,3,4
"org.apache.derby.iapi.services.context.ContextManager.isEmpty()",1,1,1
"org.apache.derby.iapi.services.context.ContextManager.popContext()",2,4,5
"org.apache.derby.iapi.services.context.ContextManager.popContext(Context)",1,2,2
"org.apache.derby.iapi.services.context.ContextManager.pushContext(Context)",1,2,2
"org.apache.derby.iapi.services.context.ContextManager.reportError(Throwable)",4,3,6
"org.apache.derby.iapi.services.context.ContextManager.setInterrupted(Context)",1,2,3
"org.apache.derby.iapi.services.context.ContextManager.setLocaleFinder(LocaleFinder)",1,1,1
"org.apache.derby.iapi.services.context.ContextManager.setMessageLocale(String)",1,1,1
"org.apache.derby.iapi.services.context.ContextService.ContextService()",1,1,1
"org.apache.derby.iapi.services.context.ContextService.addToThreadList(Thread,ContextManager)",6,9,11
"org.apache.derby.iapi.services.context.ContextService.getContext(String)",2,1,2
"org.apache.derby.iapi.services.context.ContextService.getContextOrNull(String)",3,1,3
"org.apache.derby.iapi.services.context.ContextService.getCurrentContextManager()",5,2,5
"org.apache.derby.iapi.services.context.ContextService.getFactory()",2,1,2
"org.apache.derby.iapi.services.context.ContextService.newContextManager()",1,4,4
"org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(Context)",4,3,5
"org.apache.derby.iapi.services.context.ContextService.removeContext(ContextManager)",1,2,2
"org.apache.derby.iapi.services.context.ContextService.resetCurrentContextManager(ContextManager)",3,13,17
"org.apache.derby.iapi.services.context.ContextService.setCurrentContextManager(ContextManager)",1,4,6
"org.apache.derby.iapi.services.context.ContextService.stop()",1,1,2
"org.apache.derby.iapi.services.context.SystemContext.SystemContext(ContextManager)",1,1,1
"org.apache.derby.iapi.services.context.SystemContext.cleanupOnError(Throwable)",4,3,7
"org.apache.derby.iapi.services.diag.DiagnosticUtil.DiagnosticUtil()",1,1,1
"org.apache.derby.iapi.services.diag.DiagnosticUtil.findDiagnostic(Object)",3,3,5
"org.apache.derby.iapi.services.diag.DiagnosticUtil.toDiagString(Object)",2,3,5
"org.apache.derby.iapi.services.diag.DiagnosticableGeneric.DiagnosticableGeneric()",1,1,1
"org.apache.derby.iapi.services.diag.DiagnosticableGeneric.diag()",1,1,1
"org.apache.derby.iapi.services.diag.DiagnosticableGeneric.diag_detail(Properties)",1,1,1
"org.apache.derby.iapi.services.diag.DiagnosticableGeneric.init(Object)",1,1,1
"org.apache.derby.iapi.services.i18n.MessageService.MessageService()",1,1,1
"org.apache.derby.iapi.services.i18n.MessageService.formatMessage(ResourceBundle,String,Object[],boolean)",3,5,11
"org.apache.derby.iapi.services.i18n.MessageService.getBundle(String)",1,3,3
"org.apache.derby.iapi.services.i18n.MessageService.getBundleForLocale(Locale,String)",1,1,2
"org.apache.derby.iapi.services.i18n.MessageService.getBundleWithEnDefault(String,Locale)",1,2,2
"org.apache.derby.iapi.services.i18n.MessageService.getCompleteMessage(String,Object[])",1,1,3
"org.apache.derby.iapi.services.i18n.MessageService.getLocalizedMessage(Locale,String,Object[])",1,1,3
"org.apache.derby.iapi.services.i18n.MessageService.getLocalizedMessage(int,short,String,String,int,int,int,int,int,int,String,String,String,String,String[],int[])",1,5,13
"org.apache.derby.iapi.services.i18n.MessageService.getProperty(String,String)",2,2,3
"org.apache.derby.iapi.services.i18n.MessageService.getTextMessage(String)",1,1,1
"org.apache.derby.iapi.services.i18n.MessageService.getTextMessage(String,Object)",1,1,1
"org.apache.derby.iapi.services.i18n.MessageService.getTextMessage(String,Object,Object)",1,1,1
"org.apache.derby.iapi.services.i18n.MessageService.getTextMessage(String,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.services.i18n.MessageService.getTextMessage(String,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.services.i18n.MessageService.hashString50(String)",1,2,3
"org.apache.derby.iapi.services.i18n.MessageService.setFinder(BundleFinder)",1,1,1
"org.apache.derby.iapi.services.info.JVMInfo.derbyVMLevel()",6,2,7
"org.apache.derby.iapi.services.info.JVMInfo.vmCheck(String,String)",1,2,2
"org.apache.derby.iapi.services.info.ProductVersionHolder.ProductVersionHolder()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.ProductVersionHolder(String,String,String,int,int,int,int,String,Boolean)",1,4,4
"org.apache.derby.iapi.services.info.ProductVersionHolder.fullVersionString(int,int,int,boolean,String)",1,4,9
"org.apache.derby.iapi.services.info.ProductVersionHolder.getBuildNumber()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getBuildNumberAsInt()",2,3,6
"org.apache.derby.iapi.services.info.ProductVersionHolder.getDrdaMaintVersion()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getFixPackVersion()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getMaintVersion()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getMajorVersion()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getMinorVersion()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getProductName()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getProductTechnologyName()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getProductVendorName()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getProductVersionHolder(Properties)",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getProductVersionHolder(String,String,String,int,int,int,int,String,Boolean)",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getProductVersionHolderFromMyEnv(InputStream)",2,2,4
"org.apache.derby.iapi.services.info.ProductVersionHolder.getProductVersionHolderFromMyEnv(String)",2,1,2
"org.apache.derby.iapi.services.info.ProductVersionHolder.getSimpleVersionString()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.getVersionBuildString(boolean)",1,1,2
"org.apache.derby.iapi.services.info.ProductVersionHolder.isAlpha()",1,1,3
"org.apache.derby.iapi.services.info.ProductVersionHolder.isBeta()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.loadProperties(String)",2,1,3
"org.apache.derby.iapi.services.info.ProductVersionHolder.parseInt(String)",1,2,4
"org.apache.derby.iapi.services.info.ProductVersionHolder.run()",1,1,1
"org.apache.derby.iapi.services.info.ProductVersionHolder.simpleVersionString(int,int,boolean)",1,2,2
"org.apache.derby.iapi.services.info.ProductVersionHolder.toString()",1,1,1
"org.apache.derby.iapi.services.info.Version.Version(ProductVersionHolder,String)",1,1,1
"org.apache.derby.iapi.services.info.Version.checkMonitor()",1,3,3
"org.apache.derby.iapi.services.info.Version.getBuildNumber()",1,1,1
"org.apache.derby.iapi.services.info.Version.getMaintenanceVersion()",1,1,1
"org.apache.derby.iapi.services.info.Version.getMajorVersion()",1,1,1
"org.apache.derby.iapi.services.info.Version.getMinorVersion()",1,1,1
"org.apache.derby.iapi.services.info.Version.getProductName()",1,1,1
"org.apache.derby.iapi.services.info.Version.getProductTechnologyName()",1,1,1
"org.apache.derby.iapi.services.info.Version.getProductVendorName()",1,1,1
"org.apache.derby.iapi.services.info.Version.getVersionString()",1,1,1
"org.apache.derby.iapi.services.info.Version.isAlpha()",1,1,1
"org.apache.derby.iapi.services.info.Version.isBeta()",1,1,1
"org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream.AccessibleByteArrayOutputStream()",1,1,1
"org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream.AccessibleByteArrayOutputStream(int)",1,1,1
"org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream.copyStream(InputStream,int)",1,1,1
"org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream.getInputStream()",1,1,1
"org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream.getInternalByteArray()",1,1,1
"org.apache.derby.iapi.services.io.AccessibleByteArrayOutputStream.readFrom(InputStream)",3,2,3
"org.apache.derby.iapi.services.io.ApplicationObjectInputStream.ApplicationObjectInputStream(InputStream,ClassFactory)",1,1,1
"org.apache.derby.iapi.services.io.ApplicationObjectInputStream.getErrorInfo()",2,1,2
"org.apache.derby.iapi.services.io.ApplicationObjectInputStream.getNestedException()",1,1,1
"org.apache.derby.iapi.services.io.ApplicationObjectInputStream.resolveClass(ObjectStreamClass)",2,2,3
"org.apache.derby.iapi.services.io.ArrayInputStream.ArrayInputStream()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.ArrayInputStream(byte[])",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.available()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.clearLimit()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.getData()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.getErrorInfo()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.getNestedException()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.getPosition()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.read()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.read(byte[],int,int)",3,1,3
"org.apache.derby.iapi.services.io.ArrayInputStream.readBoolean()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.readByte()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.readChar()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.readCompressedInt()",1,5,6
"org.apache.derby.iapi.services.io.ArrayInputStream.readCompressedLong()",1,1,4
"org.apache.derby.iapi.services.io.ArrayInputStream.readDerbyUTF(char[][])",13,1,19
"org.apache.derby.iapi.services.io.ArrayInputStream.readDouble()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.readFloat()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.readFully(byte[])",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.readFully(byte[],int,int)",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.readInt()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.readLine()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.readLong()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.readObject()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.readShort()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.readUTF()",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.readUnsignedByte()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.readUnsignedShort()",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.setData(byte[])",1,1,1
"org.apache.derby.iapi.services.io.ArrayInputStream.setLimit(int)",2,1,2
"org.apache.derby.iapi.services.io.ArrayInputStream.setLimit(int,int)",2,1,4
"org.apache.derby.iapi.services.io.ArrayInputStream.setPosition(int)",2,1,3
"org.apache.derby.iapi.services.io.ArrayInputStream.skip(long)",3,1,3
"org.apache.derby.iapi.services.io.ArrayInputStream.skipBytes(int)",1,1,2
"org.apache.derby.iapi.services.io.ArrayOutputStream.ArrayOutputStream()",1,1,1
"org.apache.derby.iapi.services.io.ArrayOutputStream.ArrayOutputStream(byte[])",1,1,1
"org.apache.derby.iapi.services.io.ArrayOutputStream.clearLimit()",1,1,1
"org.apache.derby.iapi.services.io.ArrayOutputStream.getPosition()",1,1,1
"org.apache.derby.iapi.services.io.ArrayOutputStream.setData(byte[])",1,1,2
"org.apache.derby.iapi.services.io.ArrayOutputStream.setLimit(int)",3,1,3
"org.apache.derby.iapi.services.io.ArrayOutputStream.setPosition(int)",2,1,3
"org.apache.derby.iapi.services.io.ArrayOutputStream.write(byte[],int,int)",2,1,2
"org.apache.derby.iapi.services.io.ArrayOutputStream.write(int)",2,1,2
"org.apache.derby.iapi.services.io.ArrayUtil.readArrayItems(ObjectInput,Object[])",1,2,2
"org.apache.derby.iapi.services.io.ArrayUtil.readArrayLength(ObjectInput)",1,1,1
"org.apache.derby.iapi.services.io.ArrayUtil.readBooleanArray(ObjectInput)",1,2,2
"org.apache.derby.iapi.services.io.ArrayUtil.readIntArray(ObjectInput)",2,2,3
"org.apache.derby.iapi.services.io.ArrayUtil.readInts(ObjectInput)",1,3,3
"org.apache.derby.iapi.services.io.ArrayUtil.readLongArray(ObjectInput)",1,2,2
"org.apache.derby.iapi.services.io.ArrayUtil.readObjectArray(ObjectInput)",2,1,2
"org.apache.derby.iapi.services.io.ArrayUtil.readStringArray(ObjectInput)",2,1,3
"org.apache.derby.iapi.services.io.ArrayUtil.toString(int[])",1,1,4
"org.apache.derby.iapi.services.io.ArrayUtil.writeArray(ObjectOutput,Object[])",2,3,3
"org.apache.derby.iapi.services.io.ArrayUtil.writeArrayItems(ObjectOutput,Object[])",2,2,3
"org.apache.derby.iapi.services.io.ArrayUtil.writeArrayLength(ObjectOutput,Object[])",1,1,1
"org.apache.derby.iapi.services.io.ArrayUtil.writeBooleanArray(ObjectOutput,boolean[])",1,3,3
"org.apache.derby.iapi.services.io.ArrayUtil.writeIntArray(ObjectOutput,int[])",1,3,3
"org.apache.derby.iapi.services.io.ArrayUtil.writeInts(ObjectOutput,int[][])",1,3,3
"org.apache.derby.iapi.services.io.ArrayUtil.writeLongArray(ObjectOutput,long[])",1,3,3
"org.apache.derby.iapi.services.io.CompressedNumber.checkInt(int,short)",1,11,11
"org.apache.derby.iapi.services.io.CompressedNumber.checkLong(long,short)",1,14,14
"org.apache.derby.iapi.services.io.CompressedNumber.main(String[])",1,3,3
"org.apache.derby.iapi.services.io.CompressedNumber.readInt(DataInput)",3,5,5
"org.apache.derby.iapi.services.io.CompressedNumber.readInt(InputStream)",3,3,3
"org.apache.derby.iapi.services.io.CompressedNumber.readInt(byte[],int)",3,5,5
"org.apache.derby.iapi.services.io.CompressedNumber.readIntAndReturnIntPlusOverhead(byte[],int)",3,5,5
"org.apache.derby.iapi.services.io.CompressedNumber.readLong(DataInput)",3,3,3
"org.apache.derby.iapi.services.io.CompressedNumber.readLong(InputStream)",3,3,3
"org.apache.derby.iapi.services.io.CompressedNumber.readLong(byte[],int)",3,1,3
"org.apache.derby.iapi.services.io.CompressedNumber.sizeInt(int)",3,1,3
"org.apache.derby.iapi.services.io.CompressedNumber.sizeLong(long)",3,1,3
"org.apache.derby.iapi.services.io.CompressedNumber.skipInt(DataInput)",3,3,3
"org.apache.derby.iapi.services.io.CompressedNumber.skipInt(InputStream)",3,2,5
"org.apache.derby.iapi.services.io.CompressedNumber.skipLong(DataInput)",3,3,3
"org.apache.derby.iapi.services.io.CompressedNumber.skipLong(InputStream)",2,1,4
"org.apache.derby.iapi.services.io.CompressedNumber.writeInt(DataOutput,int)",4,3,4
"org.apache.derby.iapi.services.io.CompressedNumber.writeInt(OutputStream,int)",4,3,4
"org.apache.derby.iapi.services.io.CompressedNumber.writeLong(DataOutput,long)",4,3,4
"org.apache.derby.iapi.services.io.CompressedNumber.writeLong(OutputStream,long)",4,3,4
"org.apache.derby.iapi.services.io.CounterOutputStream.CounterOutputStream()",1,1,1
"org.apache.derby.iapi.services.io.CounterOutputStream.clearLimit()",1,1,1
"org.apache.derby.iapi.services.io.CounterOutputStream.getCount()",1,1,1
"org.apache.derby.iapi.services.io.CounterOutputStream.setLimit(int)",1,1,1
"org.apache.derby.iapi.services.io.CounterOutputStream.setOutputStream(OutputStream)",1,1,1
"org.apache.derby.iapi.services.io.CounterOutputStream.write(byte[])",2,1,3
"org.apache.derby.iapi.services.io.CounterOutputStream.write(byte[],int,int)",2,1,3
"org.apache.derby.iapi.services.io.CounterOutputStream.write(int)",2,1,3
"org.apache.derby.iapi.services.io.DebugByteTeeOutputStream.DebugByteTeeOutputStream(OutputStream)",1,1,1
"org.apache.derby.iapi.services.io.DebugByteTeeOutputStream.checkObject(Formatable)",3,6,8
"org.apache.derby.iapi.services.io.DebugByteTeeOutputStream.write(byte[],int,int)",1,1,1
"org.apache.derby.iapi.services.io.DebugByteTeeOutputStream.write(int)",1,1,1
"org.apache.derby.iapi.services.io.DerbyIOException.DerbyIOException(String,String)",1,1,1
"org.apache.derby.iapi.services.io.DerbyIOException.getSQLState()",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.DynamicByteArrayOutputStream()",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.DynamicByteArrayOutputStream(DynamicByteArrayOutputStream)",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.DynamicByteArrayOutputStream(byte[])",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.DynamicByteArrayOutputStream(int)",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.close()",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.discardLeft(int)",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.expandBuffer(int)",1,1,6
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.getBeginPosition()",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.getByteArray()",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.getPosition()",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.getUsed()",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.reset()",1,1,1
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.setBeginPosition(int)",2,1,2
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.setPosition(int)",1,3,4
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.write(byte[],int,int)",1,2,3
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.write(int)",1,2,3
"org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream.writeCompleteStream(InputStream,int)",1,2,3
"org.apache.derby.iapi.services.io.FileUtil.copyDirectory(File,File)",1,1,1
"org.apache.derby.iapi.services.io.FileUtil.copyDirectory(File,File,byte[],String[])",13,6,15
"org.apache.derby.iapi.services.io.FileUtil.copyDirectory(StorageFactory,StorageFile,File)",1,1,1
"org.apache.derby.iapi.services.io.FileUtil.copyDirectory(StorageFactory,StorageFile,File,byte[],String[],boolean)",14,7,16
"org.apache.derby.iapi.services.io.FileUtil.copyDirectory(String,String)",1,1,1
"org.apache.derby.iapi.services.io.FileUtil.copyDirectory(WritableStorageFactory,File,StorageFile)",1,1,1
"org.apache.derby.iapi.services.io.FileUtil.copyDirectory(WritableStorageFactory,File,StorageFile,byte[],String[])",13,6,15
"org.apache.derby.iapi.services.io.FileUtil.copyFile(File,File)",1,1,1
"org.apache.derby.iapi.services.io.FileUtil.copyFile(File,File,byte[])",1,4,8
"org.apache.derby.iapi.services.io.FileUtil.copyFile(StorageFactory,StorageFile,File)",1,1,1
"org.apache.derby.iapi.services.io.FileUtil.copyFile(StorageFactory,StorageFile,File,byte[])",1,4,8
"org.apache.derby.iapi.services.io.FileUtil.copyFile(WritableStorageFactory,File,StorageFile)",1,1,1
"org.apache.derby.iapi.services.io.FileUtil.copyFile(WritableStorageFactory,File,StorageFile,byte[])",1,4,8
"org.apache.derby.iapi.services.io.FileUtil.copyFile(WritableStorageFactory,StorageFile,StorageFile)",1,1,1
"org.apache.derby.iapi.services.io.FileUtil.copyFile(WritableStorageFactory,StorageFile,StorageFile,byte[])",1,4,8
"org.apache.derby.iapi.services.io.FileUtil.getAbsoluteFile(File,String)",3,1,3
"org.apache.derby.iapi.services.io.FileUtil.newFile(File,String)",2,1,2
"org.apache.derby.iapi.services.io.FileUtil.removeDirectory(File)",9,4,9
"org.apache.derby.iapi.services.io.FileUtil.removeDirectory(String)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdInputStream.FormatIdInputStream(InputStream)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdInputStream.closeStream()",1,2,2
"org.apache.derby.iapi.services.io.FormatIdInputStream.getClassFactory()",1,3,3
"org.apache.derby.iapi.services.io.FormatIdInputStream.getErrorInfo()",2,1,2
"org.apache.derby.iapi.services.io.FormatIdInputStream.getInputStream()",1,1,1
"org.apache.derby.iapi.services.io.FormatIdInputStream.getNestedException()",3,1,3
"org.apache.derby.iapi.services.io.FormatIdInputStream.getObjectStream()",1,1,2
"org.apache.derby.iapi.services.io.FormatIdInputStream.initStream()",1,2,2
"org.apache.derby.iapi.services.io.FormatIdInputStream.readObject()",6,11,12
"org.apache.derby.iapi.services.io.FormatIdInputStream.resetStream()",1,2,2
"org.apache.derby.iapi.services.io.FormatIdInputStream.setErrorInfo(ErrorInfo)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdInputStream.setInput(InputStream)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdOutputStream.FormatIdOutputStream(OutputStream)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdOutputStream.getErrorInfo()",1,1,1
"org.apache.derby.iapi.services.io.FormatIdOutputStream.getNestedException()",1,1,1
"org.apache.derby.iapi.services.io.FormatIdOutputStream.setOutput(OutputStream)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdOutputStream.writeObject(Object)",8,16,19
"org.apache.derby.iapi.services.io.FormatIdUtil.FormatIdUtil()",1,1,1
"org.apache.derby.iapi.services.io.FormatIdUtil.formatIdToString(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdUtil.getFormatIdByteLength(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdUtil.readFormatIdInteger(DataInput)",1,1,1
"org.apache.derby.iapi.services.io.FormatIdUtil.readFormatIdInteger(byte[])",1,1,1
"org.apache.derby.iapi.services.io.FormatIdUtil.writeFormatIdInteger(DataOutput,int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableArrayHolder.FormatableArrayHolder()",1,1,1
"org.apache.derby.iapi.services.io.FormatableArrayHolder.FormatableArrayHolder(Object[])",1,2,2
"org.apache.derby.iapi.services.io.FormatableArrayHolder.getArray(Class)",1,1,2
"org.apache.derby.iapi.services.io.FormatableArrayHolder.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.services.io.FormatableArrayHolder.readExternal(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.services.io.FormatableArrayHolder.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.services.io.FormatableArrayHolder.setArray(Object[])",1,2,2
"org.apache.derby.iapi.services.io.FormatableArrayHolder.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.services.io.FormatableBitSet.FormatableBitSet()",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.FormatableBitSet(FormatableBitSet)",1,3,3
"org.apache.derby.iapi.services.io.FormatableBitSet.FormatableBitSet(byte[])",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.FormatableBitSet(int)",2,1,2
"org.apache.derby.iapi.services.io.FormatableBitSet.and(FormatableBitSet)",2,4,6
"org.apache.derby.iapi.services.io.FormatableBitSet.anySetBit()",3,3,4
"org.apache.derby.iapi.services.io.FormatableBitSet.anySetBit(int)",5,4,6
"org.apache.derby.iapi.services.io.FormatableBitSet.calculateLength(int)",2,1,2
"org.apache.derby.iapi.services.io.FormatableBitSet.checkPosition(int)",2,1,3
"org.apache.derby.iapi.services.io.FormatableBitSet.clear()",1,1,2
"org.apache.derby.iapi.services.io.FormatableBitSet.clear(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.clone()",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.compare(FormatableBitSet)",7,2,11
"org.apache.derby.iapi.services.io.FormatableBitSet.equals(FormatableBitSet)",2,1,2
"org.apache.derby.iapi.services.io.FormatableBitSet.firstSet(byte)",8,1,8
"org.apache.derby.iapi.services.io.FormatableBitSet.get(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.getByteArray()",1,2,2
"org.apache.derby.iapi.services.io.FormatableBitSet.getLength()",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.getLengthInBytes()",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.getNumBitsSet()",1,2,3
"org.apache.derby.iapi.services.io.FormatableBitSet.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.grow(int)",3,3,5
"org.apache.derby.iapi.services.io.FormatableBitSet.hashCode()",1,1,3
"org.apache.derby.iapi.services.io.FormatableBitSet.initializeBits(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.invariantHolds()",4,1,5
"org.apache.derby.iapi.services.io.FormatableBitSet.isSet(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.maxBitsForSpace(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.numBitsInLastByte(int)",2,1,3
"org.apache.derby.iapi.services.io.FormatableBitSet.numBytesFromBits(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.or(FormatableBitSet)",2,3,5
"org.apache.derby.iapi.services.io.FormatableBitSet.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.set(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.shrink(int)",2,2,6
"org.apache.derby.iapi.services.io.FormatableBitSet.size()",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.toString()",1,4,4
"org.apache.derby.iapi.services.io.FormatableBitSet.udiv8(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.umod8(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.umul8(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableBitSet.writeExternal(ObjectOutput)",1,3,3
"org.apache.derby.iapi.services.io.FormatableBitSet.xor(FormatableBitSet)",2,3,5
"org.apache.derby.iapi.services.io.FormatableHashtable.FormatableHashtable()",1,1,1
"org.apache.derby.iapi.services.io.FormatableHashtable.getBoolean(Object)",1,1,2
"org.apache.derby.iapi.services.io.FormatableHashtable.getInt(Object)",1,1,1
"org.apache.derby.iapi.services.io.FormatableHashtable.getLong(Object)",1,1,1
"org.apache.derby.iapi.services.io.FormatableHashtable.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.services.io.FormatableHashtable.put(Object,Object)",2,4,9
"org.apache.derby.iapi.services.io.FormatableHashtable.putBoolean(Object,boolean)",1,1,2
"org.apache.derby.iapi.services.io.FormatableHashtable.putInt(Object,int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableHashtable.putLong(Object,long)",1,1,1
"org.apache.derby.iapi.services.io.FormatableHashtable.readExternal(ArrayInputStream)",1,2,2
"org.apache.derby.iapi.services.io.FormatableHashtable.readExternal(ObjectInput)",1,2,2
"org.apache.derby.iapi.services.io.FormatableHashtable.writeExternal(ObjectOutput)",1,4,4
"org.apache.derby.iapi.services.io.FormatableInstanceGetter.setFormatId(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableIntHolder.FormatableIntHolder()",1,1,1
"org.apache.derby.iapi.services.io.FormatableIntHolder.FormatableIntHolder(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableIntHolder.getFormatableIntHolders(int[])",2,1,3
"org.apache.derby.iapi.services.io.FormatableIntHolder.getInt()",1,1,1
"org.apache.derby.iapi.services.io.FormatableIntHolder.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.services.io.FormatableIntHolder.readExternal(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.services.io.FormatableIntHolder.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.services.io.FormatableIntHolder.setInt(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableIntHolder.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.iapi.services.io.FormatableLongHolder.FormatableLongHolder()",1,1,1
"org.apache.derby.iapi.services.io.FormatableLongHolder.FormatableLongHolder(long)",1,1,1
"org.apache.derby.iapi.services.io.FormatableLongHolder.getFormatableLongHolders(long[])",2,1,3
"org.apache.derby.iapi.services.io.FormatableLongHolder.getLong()",1,1,1
"org.apache.derby.iapi.services.io.FormatableLongHolder.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.services.io.FormatableLongHolder.readExternal(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.services.io.FormatableLongHolder.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.services.io.FormatableLongHolder.setLong(int)",1,1,1
"org.apache.derby.iapi.services.io.FormatableLongHolder.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.iapi.services.io.FormatableProperties.FormatableProperties()",1,1,1
"org.apache.derby.iapi.services.io.FormatableProperties.FormatableProperties(Properties)",1,1,1
"org.apache.derby.iapi.services.io.FormatableProperties.clearDefaults()",1,1,1
"org.apache.derby.iapi.services.io.FormatableProperties.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.services.io.FormatableProperties.readExternal(ArrayInputStream)",1,2,2
"org.apache.derby.iapi.services.io.FormatableProperties.readExternal(ObjectInput)",1,2,2
"org.apache.derby.iapi.services.io.FormatableProperties.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.services.io.InputStreamUtil.readFully(InputStream,byte[],int,int)",3,2,3
"org.apache.derby.iapi.services.io.InputStreamUtil.readLoop(InputStream,byte[],int,int)",3,2,3
"org.apache.derby.iapi.services.io.InputStreamUtil.readUnsignedByte(InputStream)",2,1,2
"org.apache.derby.iapi.services.io.InputStreamUtil.skipBytes(InputStream,long)",3,2,3
"org.apache.derby.iapi.services.io.LimitInputStream.LimitInputStream(InputStream)",1,1,1
"org.apache.derby.iapi.services.io.LimitInputStream.available()",4,2,4
"org.apache.derby.iapi.services.io.LimitInputStream.clearLimit()",1,1,1
"org.apache.derby.iapi.services.io.LimitInputStream.read()",3,2,4
"org.apache.derby.iapi.services.io.LimitInputStream.read(byte[],int,int)",3,2,5
"org.apache.derby.iapi.services.io.LimitInputStream.setInput(InputStream)",1,1,1
"org.apache.derby.iapi.services.io.LimitInputStream.setLimit(int)",1,1,1
"org.apache.derby.iapi.services.io.LimitInputStream.skip(long)",3,2,4
"org.apache.derby.iapi.services.io.LimitReader.LimitReader(Reader)",1,1,1
"org.apache.derby.iapi.services.io.LimitReader.clearLimit()",1,1,1
"org.apache.derby.iapi.services.io.LimitReader.close()",1,1,1
"org.apache.derby.iapi.services.io.LimitReader.getLimit()",1,1,1
"org.apache.derby.iapi.services.io.LimitReader.read()",3,2,4
"org.apache.derby.iapi.services.io.LimitReader.read(char[],int,int)",3,2,5
"org.apache.derby.iapi.services.io.LimitReader.setLimit(int)",1,1,1
"org.apache.derby.iapi.services.io.LimitReader.skip(long)",3,2,4
"org.apache.derby.iapi.services.io.NewByteArrayInputStream.NewByteArrayInputStream(byte[])",1,1,1
"org.apache.derby.iapi.services.io.NewByteArrayInputStream.NewByteArrayInputStream(byte[],int,int)",1,1,1
"org.apache.derby.iapi.services.io.NewByteArrayInputStream.available()",2,1,2
"org.apache.derby.iapi.services.io.NewByteArrayInputStream.close()",1,1,1
"org.apache.derby.iapi.services.io.NewByteArrayInputStream.getData()",1,1,1
"org.apache.derby.iapi.services.io.NewByteArrayInputStream.read()",3,1,3
"org.apache.derby.iapi.services.io.NewByteArrayInputStream.read(byte[],int,int)",3,1,4
"org.apache.derby.iapi.services.io.NewByteArrayInputStream.skip(long)",3,1,5
"org.apache.derby.iapi.services.io.NullOutputStream.write(byte[])",1,1,1
"org.apache.derby.iapi.services.io.NullOutputStream.write(byte[],int,int)",1,1,1
"org.apache.derby.iapi.services.io.NullOutputStream.write(int)",1,1,1
"org.apache.derby.iapi.services.io.SQLExceptionWrapper.SQLExceptionWrapper(Exception)",1,1,1
"org.apache.derby.iapi.services.io.SQLExceptionWrapper.handleMe()",3,2,4
"org.apache.derby.iapi.services.io.SQLExceptionWrapper.handleMeToo()",2,2,3
"org.apache.derby.iapi.services.loader.ClassFactoryContext.ClassFactoryContext(ContextManager,ClassFactory)",1,1,1
"org.apache.derby.iapi.services.loader.ClassFactoryContext.cleanupOnError(Throwable)",1,3,3
"org.apache.derby.iapi.services.loader.ClassFactoryContext.getClassFactory()",1,1,1
"org.apache.derby.iapi.services.loader.ClassInfo.ClassInfo(Class)",1,1,1
"org.apache.derby.iapi.services.loader.ClassInfo.getClassName()",1,1,1
"org.apache.derby.iapi.services.loader.ClassInfo.getClassObject()",1,1,1
"org.apache.derby.iapi.services.loader.ClassInfo.getNewInstance()",3,5,6
"org.apache.derby.iapi.services.loader.ClassInspector.ClassInspector(ClassFactory)",1,1,1
"org.apache.derby.iapi.services.loader.ClassInspector.accessible(String)",3,1,3
"org.apache.derby.iapi.services.loader.ClassInspector.assignableTo(String,String)",3,3,5
"org.apache.derby.iapi.services.loader.ClassInspector.classConvertableFromTo(Class,Class,boolean)",19,36,46
"org.apache.derby.iapi.services.loader.ClassInspector.classIsLoadable(String)",1,1,3
"org.apache.derby.iapi.services.loader.ClassInspector.findPublicConstructor(String,String[],String[],boolean[])",7,6,14
"org.apache.derby.iapi.services.loader.ClassInspector.findPublicField(String,String,boolean)",5,6,15
"org.apache.derby.iapi.services.loader.ClassInspector.findPublicMethod(String,String,String[],String[],boolean[],boolean,boolean)",14,11,19
"org.apache.derby.iapi.services.loader.ClassInspector.getClass(String)",5,16,21
"org.apache.derby.iapi.services.loader.ClassInspector.getDeclaringClass(Member)",1,1,1
"org.apache.derby.iapi.services.loader.ClassInspector.getParameterTypes(Member)",1,3,3
"org.apache.derby.iapi.services.loader.ClassInspector.getType(Member)",1,4,4
"org.apache.derby.iapi.services.loader.ClassInspector.instanceOf(String,Object)",2,1,2
"org.apache.derby.iapi.services.loader.ClassInspector.isMethodMoreSpecificOrEqual(Member,Member,boolean[])",3,2,3
"org.apache.derby.iapi.services.loader.ClassInspector.primitiveType(String)",3,2,3
"org.apache.derby.iapi.services.loader.ClassInspector.readableClassName(Class)",2,4,4
"org.apache.derby.iapi.services.loader.ClassInspector.resolveMethod(Class,String,Class[],Class[],boolean[],boolean,boolean,Member[])",17,33,46
"org.apache.derby.iapi.services.loader.ClassInspector.signatureConvertableFromTo(Class[],Class[],Class[],boolean[],boolean)",6,6,12
"org.apache.derby.iapi.services.locks.ShExLockable.ShExLockable()",1,1,1
"org.apache.derby.iapi.services.locks.ShExLockable.lockAttributes(int,Hashtable)",2,1,2
"org.apache.derby.iapi.services.locks.ShExLockable.lockEvent(Latch)",1,3,3
"org.apache.derby.iapi.services.locks.ShExLockable.lockerAlwaysCompatible()",1,1,1
"org.apache.derby.iapi.services.locks.ShExLockable.requestCompatible(Object,Object)",1,5,5
"org.apache.derby.iapi.services.locks.ShExLockable.unlockEvent(Latch)",1,3,3
"org.apache.derby.iapi.services.locks.ShExQual.ShExQual(int)",1,1,1
"org.apache.derby.iapi.services.locks.ShExQual.getLockState()",1,1,1
"org.apache.derby.iapi.services.locks.ShExQual.toString()",2,1,2
"org.apache.derby.iapi.services.memory.LowMemory.isLowMemory()",4,1,4
"org.apache.derby.iapi.services.memory.LowMemory.setLowMemory()",1,4,5
"org.apache.derby.iapi.services.monitor.Monitor.Monitor()",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(boolean,Object,String,Properties)",1,2,2
"org.apache.derby.iapi.services.monitor.Monitor.bootServiceModule(boolean,Object,String,String,Properties)",1,2,2
"org.apache.derby.iapi.services.monitor.Monitor.classFromIdentifier(int)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.clearMonitor()",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.createPersistentService(String,String,Properties)",1,2,2
"org.apache.derby.iapi.services.monitor.Monitor.exceptionStartingModule(Throwable)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.findService(String,String)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.findServiceModule(Object,String)",2,2,2
"org.apache.derby.iapi.services.monitor.Monitor.findSystemModule(String)",2,2,2
"org.apache.derby.iapi.services.monitor.Monitor.getEngineType(Properties)",2,3,3
"org.apache.derby.iapi.services.monitor.Monitor.getLocaleFromString(String)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.getMonitor()",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.getMonitorLite()",2,1,3
"org.apache.derby.iapi.services.monitor.Monitor.getServiceModule(Object,String)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.getServiceName(Object)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.getStream()",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.getSystemModule(String)",2,1,2
"org.apache.derby.iapi.services.monitor.Monitor.isDesiredCreateType(Properties,int)",2,1,2
"org.apache.derby.iapi.services.monitor.Monitor.isDesiredType(Properties,int)",1,2,2
"org.apache.derby.iapi.services.monitor.Monitor.isDesiredType(int,int)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.isFullUpgrade(Properties,String)",3,4,4
"org.apache.derby.iapi.services.monitor.Monitor.logMessage(String)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.logTextMessage(String)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.logTextMessage(String,Object)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.logTextMessage(String,Object,Object)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.logTextMessage(String,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.logTextMessage(String,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.logThrowable(Throwable)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.missingImplementation(String)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.missingProductVersion(String)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.newInstanceFromIdentifier(int)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.removePersistentService(String)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.setMonitor(ModuleFactory)",2,1,2
"org.apache.derby.iapi.services.monitor.Monitor.startMonitor(Properties,PrintStream)",1,1,1
"org.apache.derby.iapi.services.monitor.Monitor.startNonPersistentService(String,String,Properties)",1,2,2
"org.apache.derby.iapi.services.monitor.Monitor.startPersistentService(String,Properties)",1,2,2
"org.apache.derby.iapi.services.monitor.Monitor.startSystemModule(String)",1,2,2
"org.apache.derby.iapi.services.property.PropertyUtil.booleanProperty(String,Serializable,boolean)",4,1,4
"org.apache.derby.iapi.services.property.PropertyUtil.existsBuiltinUser(PersistentSet,String)",3,2,4
"org.apache.derby.iapi.services.property.PropertyUtil.getDatabaseProperty(PersistentSet,String)",3,1,3
"org.apache.derby.iapi.services.property.PropertyUtil.getPropertyFromSet(Dictionary,String)",1,2,2
"org.apache.derby.iapi.services.property.PropertyUtil.getPropertyFromSet(Properties,String)",1,2,2
"org.apache.derby.iapi.services.property.PropertyUtil.getPropertyFromSet(boolean,Dictionary,String)",6,3,6
"org.apache.derby.iapi.services.property.PropertyUtil.getPropertyFromSet(boolean,Properties,String)",6,3,6
"org.apache.derby.iapi.services.property.PropertyUtil.getServiceBoolean(PersistentSet,String,boolean)",1,1,1
"org.apache.derby.iapi.services.property.PropertyUtil.getServiceInt(PersistentSet,Properties,String,int,int,int)",1,3,3
"org.apache.derby.iapi.services.property.PropertyUtil.getServiceInt(PersistentSet,String,int,int,int)",1,1,1
"org.apache.derby.iapi.services.property.PropertyUtil.getServiceProperty(PersistentSet,String)",1,1,1
"org.apache.derby.iapi.services.property.PropertyUtil.getServiceProperty(PersistentSet,String,String)",5,3,6
"org.apache.derby.iapi.services.property.PropertyUtil.getSystemBoolean(String)",1,1,1
"org.apache.derby.iapi.services.property.PropertyUtil.getSystemBoolean(String,boolean)",2,2,2
"org.apache.derby.iapi.services.property.PropertyUtil.getSystemInt(String,int)",1,1,1
"org.apache.derby.iapi.services.property.PropertyUtil.getSystemInt(String,int,int,int)",1,1,1
"org.apache.derby.iapi.services.property.PropertyUtil.getSystemProperty(String)",1,1,1
"org.apache.derby.iapi.services.property.PropertyUtil.getSystemProperty(String,String)",1,3,4
"org.apache.derby.iapi.services.property.PropertyUtil.handleInt(String,int,int,int)",3,1,5
"org.apache.derby.iapi.services.property.PropertyUtil.intPropertyValue(String,Serializable,int,int,int)",3,3,5
"org.apache.derby.iapi.services.property.PropertyUtil.isDBOnly(Dictionary)",2,2,3
"org.apache.derby.iapi.services.property.PropertyUtil.isDBOnly(Properties)",2,2,3
"org.apache.derby.iapi.services.property.PropertyUtil.isServiceProperty(String)",3,2,3
"org.apache.derby.iapi.services.property.PropertyUtil.propertiesContainsBuiltinUser(Properties,String)",5,4,5
"org.apache.derby.iapi.services.property.PropertyUtil.systemPropertiesExistsBuiltinUser(String)",3,2,4
"org.apache.derby.iapi.services.property.PropertyUtil.whereSet(String,Dictionary)",6,4,7
"org.apache.derby.iapi.services.property.PropertyValidation.PropertyValidation()",1,1,1
"org.apache.derby.iapi.services.property.PropertyValidation.addPropertySetNotification(PropertySetCallback)",1,1,2
"org.apache.derby.iapi.services.property.PropertyValidation.doMap(String,Serializable,Dictionary)",2,4,5
"org.apache.derby.iapi.services.property.PropertyValidation.doValidateApplyAndMap(TransactionController,String,Serializable,Dictionary,boolean)",6,7,9
"org.apache.derby.iapi.services.property.PropertyValidation.validateSingleProperty(String,Serializable,Dictionary)",2,4,4
"org.apache.derby.iapi.services.property.PropertyValidation.verifyPropertySet(Properties,Properties)",3,2,3
"org.apache.derby.iapi.services.sanity.AssertFailure.AssertFailure(String)",1,1,1
"org.apache.derby.iapi.services.sanity.AssertFailure.AssertFailure(String,Throwable)",1,1,1
"org.apache.derby.iapi.sql.StatementUtil.StatementUtil()",1,1,1
"org.apache.derby.iapi.sql.StatementUtil.typeName(int)",2,2,3
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.compile.NodeFactory.getNode(int,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,ContextManager)",1,1,1
"org.apache.derby.iapi.sql.conn.ConnectionUtil.getCurrentLCC()",2,2,2
"org.apache.derby.iapi.sql.depend.ProviderList.addProvider(Provider)",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.AliasDescriptor(DataDictionary,UUID,String,UUID,String,char,char,boolean,AliasInfo,String)",1,2,2
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.drop(LanguageConnectionContext)",2,3,4
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.equals(Object)",2,1,2
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getAliasInfo()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getAliasType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getAliasType(char)",4,2,4
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getDescriptorType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getJavaClassName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getNameSpace()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getSchemaUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getSpecificName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getSystemAlias()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.hashCode()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.isPersistent()",1,1,1
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.isTableFunction()",2,1,2
"org.apache.derby.iapi.sql.dictionary.AliasDescriptor.toString()",2,1,2
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.CatalogRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.generateIndexName(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getCanonicalHeapName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getCanonicalHeapUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getCanonicalIndexUUID(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getCanonicalTableUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getCatalogName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getCreateHeapProperties()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getCreateIndexProperties(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getDataValueFactory()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getExecutionFactory()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getHeapColumnCount()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getIndexColumnCount(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getIndexColumnPositions(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getIndexName(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getNumIndexes()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getPrimaryKeyIndexNumber()",1,2,2
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.getUUIDFactory()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.initInfo(int,String,int[][],boolean[],String[])",1,3,4
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.isIndexUnique(int)",1,1,2
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.makeEmptyRow()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CatalogRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,2,2
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.CheckConstraintDescriptor(DataDictionary,TableDescriptor,String,boolean,boolean,UUID,String,ReferencedColumns,SchemaDescriptor,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.getConglomerateId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.getConstraintText()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.getConstraintType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.getReferencedColumns()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.getReferencedColumnsDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.hasBackingIndex()",1,1,1
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.needsToFire(int,int[])",4,1,4
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.setReferencedColumnsDescriptor(ReferencedColumns)",1,1,1
"org.apache.derby.iapi.sql.dictionary.CheckConstraintDescriptor.toString()",2,2,2
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.ColPermsDescriptor(DataDictionary,String,String,UUID,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.ColPermsDescriptor(DataDictionary,String,String,UUID,String,FormatableBitSet)",1,2,2
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.ColPermsDescriptor(DataDictionary,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.checkOwner(String)",2,1,2
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.equals(Object)",2,4,5
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.getCatalogNumber()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.getColumns()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.getTableUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.getType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.hashCode()",1,2,2
"org.apache.derby.iapi.sql.dictionary.ColPermsDescriptor.toString()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.ColumnDescriptor(String,int,DataTypeDescriptor,DataValueDescriptor,DefaultInfo,TableDescriptor,UUID,long,long)",1,2,2
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.ColumnDescriptor(String,int,DataTypeDescriptor,DataValueDescriptor,DefaultInfo,TableDescriptor,UUID,long,long,long)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.ColumnDescriptor(String,int,DataTypeDescriptor,DataValueDescriptor,DefaultInfo,UUID,UUID,long,long,long)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.assertAutoinc(boolean,long,DefaultInfo)",1,5,5
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getAutoincInc()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getAutoincStart()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getAutoincValue()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getAutoinc_create_or_modify_Start_Increment()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getColumnName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getDefaultDescriptor(DataDictionary)",1,1,2
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getDefaultInfo()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getDefaultUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getDefaultValue()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getDescriptorType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getPosition()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getReferencingUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getTableDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.getType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.hasNonNullDefault()",2,2,3
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.isAutoincAlways()",1,2,2
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.isAutoincrement()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.setAutoinc_create_or_modify_Start_Increment(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.setColumnName(String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.setPosition(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.setTableDescriptor(TableDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.toString()",2,1,2
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptor.updatableByCursor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList.add(UUID,ColumnDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList.elementAt(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList.getColumnDescriptor(UUID,String)",3,3,4
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList.getColumnDescriptor(UUID,int)",3,3,4
"org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList.getColumnNames()",1,2,2
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.ConglomerateDescriptor(DataDictionary,long,String,boolean,IndexRowGenerator,boolean,UUID,UUID,UUID)",1,2,2
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.describeSharedConglomerate(ConglomerateDescriptor[],boolean)",9,9,16
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.drop(LanguageConnectionContext,TableDescriptor)",1,6,7
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getClassType()",2,1,2
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getColumnNames()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getConglomerateName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getConglomerateNumber()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getDescriptorType()",2,1,2
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getIndexDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getObjectName()",1,2,2
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getSchemaID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getTableID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.isConstraint()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.isIndex()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.setColumnNames(String[])",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.setConglomerateName(String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.setConglomerateNumber(long)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor.toString()",2,3,5
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.dropConglomerateDescriptor(UUID,ConglomerateDescriptor)",3,5,5
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.dropConglomerateDescriptorByUUID(UUID)",3,3,3
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptor(String)",3,2,3
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptor(UUID)",3,2,3
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptor(long)",3,2,3
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptors(UUID)",2,2,5
"org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptorList.getConglomerateDescriptors(long)",2,2,5
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.ConstraintDescriptor(DataDictionary,TableDescriptor,String,boolean,boolean,int[],UUID,SchemaDescriptor,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.areColumnsComparable(ColumnDescriptorList)",4,2,6
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.columnIntersects(int[])",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.deferrable()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.doColumnsIntersect(int[],int[])",5,1,6
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.drop(LanguageConnectionContext,boolean)",5,6,6
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getColumnDescriptors()",1,3,3
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getConstraintName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getConstraintText()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getDescriptorType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getKeyColumns()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getReferenceCount()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getReferencedColumns()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getSchemaDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getTableDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getTableId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.initiallyDeferred()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.isEnabled()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.isReferenced()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.isValid()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.makeInvalid(int,LanguageConnectionContext)",2,6,9
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.prepareToInvalidate(Provider,int,LanguageConnectionContext)",2,2,3
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.setDisabled()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.setEnabled()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor.toString()",2,2,2
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.dropConstraintDescriptorById(UUID)",3,3,3
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.elementAt(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptor(UUID)",4,2,4
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptorById(UUID)",3,2,3
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptorByName(SchemaDescriptor,String)",4,4,5
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getConstraintDescriptorList(boolean)",1,3,3
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getPrimaryKey()",3,2,3
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getScanned()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.getSubList(int)",1,3,3
"org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList.setScanned(boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DDUtils.checkForAnyExistingDeleteConnectionViolations(DataDictionary,TableDescriptor,int,Hashtable,String)",11,9,13
"org.apache.derby.iapi.sql.dictionary.DDUtils.checkForMultiplePathInvalidCases(int,int,String,String)",4,4,5
"org.apache.derby.iapi.sql.dictionary.DDUtils.columnNamesMatch(String[],ColumnDescriptorList)",4,2,4
"org.apache.derby.iapi.sql.dictionary.DDUtils.generateError(String,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DDUtils.generateError(String,String,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DDUtils.generateError(String,String,int)",2,2,7
"org.apache.derby.iapi.sql.dictionary.DDUtils.getColumnDescriptors(DataDictionary,TableDescriptor,String[])",1,2,2
"org.apache.derby.iapi.sql.dictionary.DDUtils.getCurrentDeleteConnections(DataDictionary,TableDescriptor,int,Hashtable,boolean,boolean)",6,5,10
"org.apache.derby.iapi.sql.dictionary.DDUtils.locateReferencedConstraint(DataDictionary,TableDescriptor,String,String[],ConsInfo)",8,9,11
"org.apache.derby.iapi.sql.dictionary.DDUtils.validateDeleteConnection(DataDictionary,TableDescriptor,TableDescriptor,int,Hashtable,Hashtable,boolean,String,boolean,StringBuffer,String,boolean,int)",18,24,30
"org.apache.derby.iapi.sql.dictionary.DDUtils.validateReferentialActions(DataDictionary,TableDescriptor,String,ConsInfo,String[])",5,5,6
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.DataDescriptorGenerator(DataDictionary)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.getUUIDFactory()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newCheckConstraintDescriptor(TableDescriptor,String,boolean,boolean,UUID,String,ReferencedColumns,SchemaDescriptor,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newCheckConstraintDescriptor(TableDescriptor,String,boolean,boolean,UUID,String,int[],SchemaDescriptor,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newColPermsDescriptor(TableDescriptor,String,FormatableBitSet,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newConglomerateDescriptor(long,String,boolean,IndexRowGenerator,boolean,UUID,UUID,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newFileInfoDescriptor(UUID,SchemaDescriptor,String,long)",1,2,2
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newForeignKeyConstraintDescriptor(TableDescriptor,String,boolean,boolean,int[],UUID,UUID,SchemaDescriptor,ReferencedKeyConstraintDescriptor,boolean,int,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newForeignKeyConstraintDescriptor(TableDescriptor,String,boolean,boolean,int[],UUID,UUID,SchemaDescriptor,UUID,boolean,int,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newPrimaryKeyConstraintDescriptor(TableDescriptor,String,boolean,boolean,int[],UUID,UUID,SchemaDescriptor,boolean,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newRoleGrantDescriptor(UUID,String,String,String,boolean,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newRoutinePermsDescriptor(AliasDescriptor,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newSchemaDescriptor(String,String,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newTableDescriptor(String,SchemaDescriptor,int,boolean,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newTableDescriptor(String,SchemaDescriptor,int,char)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newTablePermsDescriptor(TableDescriptor,String,String,String,String,String,String,String)",2,6,7
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newTriggerDescriptor(SchemaDescriptor,UUID,String,int,boolean,boolean,boolean,TableDescriptor,UUID,UUID,Timestamp,int[],String,boolean,boolean,String,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newUniqueConstraintDescriptor(TableDescriptor,String,boolean,boolean,int[],UUID,UUID,SchemaDescriptor,boolean,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator.newViewDescriptor(UUID,String,String,int,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.DefaultDescriptor(DataDictionary,UUID,UUID,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.getColumnNumber()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.getTableUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.isValid()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.makeInvalid(int,LanguageConnectionContext)",1,2,2
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.prepareToInvalidate(Provider,int,LanguageConnectionContext)",2,2,2
"org.apache.derby.iapi.sql.dictionary.DefaultDescriptor.toString()",2,1,2
"org.apache.derby.iapi.sql.dictionary.DependencyDescriptor.DependencyDescriptor(Dependent,Provider)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DependencyDescriptor.DependencyDescriptor(UUID,DependableFinder,UUID,DependableFinder)",1,1,1
"org.apache.derby.iapi.sql.dictionary.DependencyDescriptor.getDependentFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DependencyDescriptor.getProviderFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DependencyDescriptor.getProviderID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.DependencyDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.FileInfoDescriptor(DataDictionary,UUID,SchemaDescriptor,String,long)",1,3,3
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getDescriptorType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getGenerationId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getSchemaDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.FileInfoDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.ForeignKeyConstraintDescriptor(DataDictionary,TableDescriptor,String,boolean,boolean,int[],UUID,UUID,SchemaDescriptor,ReferencedKeyConstraintDescriptor,boolean,int,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.ForeignKeyConstraintDescriptor(DataDictionary,TableDescriptor,String,boolean,boolean,int[],UUID,UUID,SchemaDescriptor,UUID,boolean,int,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getConstraintType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getRaDeleteRule()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getRaUpdateRule()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getReferencedConstraint()",2,6,7
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.getReferencedConstraintId()",2,4,4
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.isSelfReferencingFK()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ForeignKeyConstraintDescriptor.needsToFire(int,int[])",4,1,4
"org.apache.derby.iapi.sql.dictionary.GenericDescriptorList.elements()",1,1,1
"org.apache.derby.iapi.sql.dictionary.GenericDescriptorList.getScanned()",1,1,1
"org.apache.derby.iapi.sql.dictionary.GenericDescriptorList.getUniqueTupleDescriptor(UUID)",3,2,3
"org.apache.derby.iapi.sql.dictionary.GenericDescriptorList.setScanned(boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexLister.IndexLister(TableDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexLister.getAllIndexes()",7,4,11
"org.apache.derby.iapi.sql.dictionary.IndexLister.getDistinctIndexConglomerateNumbers()",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexLister.getDistinctIndexNames()",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexLister.getDistinctIndexRowGenerators()",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexLister.getIndexConglomerateNumbers()",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexLister.getIndexNames()",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexLister.getIndexRowGenerators()",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.IndexRowGenerator()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.IndexRowGenerator(IndexDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.IndexRowGenerator(String,boolean,boolean,int[],boolean[],int)",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.IndexRowGenerator(String,boolean,int[],boolean[],int)",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.baseColumnPositions()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.equals(Object)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getColumnCollationIds(ColumnDescriptorList)",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getExecutionFactory()",1,2,2
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getIndexDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getIndexRow(ExecRow,RowLocation,ExecIndexRow,FormatableBitSet)",1,6,7
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getIndexRowTemplate()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getKeyColumnPosition(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.hashCode()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.indexType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.isAscending()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.isAscending(Integer)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.isDescending(Integer)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.isUnique()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.isUniqueWithDuplicateNulls()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.numberOfOrderedColumns()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.setBaseColumnPositions(int[])",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.setIsAscending(boolean[])",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.setNumberOfOrderedColumns(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.toString()",1,1,1
"org.apache.derby.iapi.sql.dictionary.IndexRowGenerator.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.KeyConstraintDescriptor(DataDictionary,TableDescriptor,String,boolean,boolean,int[],UUID,UUID,SchemaDescriptor,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.getConglomerateId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.getIndexConglomerateDescriptor(DataDictionary)",1,2,2
"org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.getIndexId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.getIndexUUIDString()",1,1,1
"org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.hasBackingIndex()",1,1,1
"org.apache.derby.iapi.sql.dictionary.KeyConstraintDescriptor.toString()",2,2,2
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.PermissionsDescriptor(DataDictionary,String,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.clone()",1,3,3
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.getGrantee()",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.getGrantor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.isPersistent()",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.keyEquals(PermissionsDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.keyHashCode()",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.setGrantee(String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.PermissionsDescriptor.setUUID(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.ReferencedKeyConstraintDescriptor(int,DataDictionary,TableDescriptor,String,boolean,boolean,int[],UUID,UUID,SchemaDescriptor,boolean,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.checkType(int)",2,3,4
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.decrementReferenceCount()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.getConstraintType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.getForeignKeyConstraints(int)",5,9,9
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.getReferenceCount()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.hasNonSelfReferencingFK(int)",4,3,5
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.hasSelfReferencingFK(ConstraintDescriptorList,int)",5,4,7
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.incrementReferenceCount()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.isReferenced()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor.needsToFire(int,int[])",4,2,6
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.RoleGrantDescriptor(DataDictionary,UUID,String,String,String,boolean,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.drop(LanguageConnectionContext)",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getDescriptorType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getGrantee()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getGrantor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getObjectName()",1,1,3
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getRoleName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.isDef()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.isPersistent()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.isWithAdminOption()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.setWithAdminOption(boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoleGrantDescriptor.toString()",2,1,2
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.RoutinePermsDescriptor(DataDictionary,String,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.RoutinePermsDescriptor(DataDictionary,String,String,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.RoutinePermsDescriptor(DataDictionary,String,String,UUID,boolean)",1,2,2
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.RoutinePermsDescriptor(DataDictionary,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.checkOwner(String)",2,1,2
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.equals(Object)",2,2,3
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.getCatalogNumber()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.getHasExecutePermission()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.getRoutineUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.hashCode()",1,1,1
"org.apache.derby.iapi.sql.dictionary.RoutinePermsDescriptor.toString()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.SPSDescriptor(DataDictionary,String,UUID,UUID,UUID,char,boolean,String,String,Timestamp,ExecPreparedStatement,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.SPSDescriptor(DataDictionary,String,UUID,UUID,UUID,char,boolean,String,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.compileStatement(LanguageConnectionContext,TableDescriptor,TransactionController)",2,8,9
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getCompSchemaId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getCompileTime()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getDescriptorType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getParameterDefaults()",1,2,2
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getParams()",1,3,4
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getPreparedStatement(boolean)",4,7,10
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getQualifiedName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getSchemaDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getText()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getTypeAsString()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.getUsingText()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.initiallyCompilable()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.isValid()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.loadGeneratedClass()",1,2,2
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.makeInvalid(int,LanguageConnectionContext)",2,4,7
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareAndRelease(LanguageConnectionContext)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareAndRelease(LanguageConnectionContext,TableDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareAndRelease(LanguageConnectionContext,TableDescriptor,TransactionController)",1,3,3
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.prepareToInvalidate(Provider,int,LanguageConnectionContext)",2,2,3
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.recreateUUID(String)",1,2,2
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.revalidate(LanguageConnectionContext)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.setCompileTime()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.setParameterDefaults(Object[])",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.setParams(DataTypeDescriptor[])",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.setUUID(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.toString()",2,2,3
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.updateSYSSTATEMENTS(LanguageConnectionContext,int,TransactionController)",2,2,5
"org.apache.derby.iapi.sql.dictionary.SPSDescriptor.validType(char)",1,1,2
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.SchemaDescriptor(DataDictionary,String,String,UUID,boolean)",1,3,3
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.drop(LanguageConnectionContext,Activation)",3,4,4
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.equals(Object)",3,2,4
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getAuthorizationId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getCollationType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getDescriptorType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getSchemaName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.hashCode()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.isSYSIBM()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.isSchemaWithGrantableRoutines()",3,2,4
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.isSystemSchema()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.setUUID(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SchemaDescriptor.toString()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.StatementColumnPermission(UUID,int,FormatableBitSet)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.addPermittedColumns(DataDictionary,boolean,String,FormatableBitSet)",4,4,5
"org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.check(LanguageConnectionContext,String,boolean)",5,5,8
"org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.equals(Object)",3,2,3
"org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getColumns()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getPUBLIClevelColPermsDescriptor(String,DataDictionary)",4,3,5
"org.apache.derby.iapi.sql.dictionary.StatementColumnPermission.getPermissionDescriptor(String,DataDictionary)",7,6,7
"org.apache.derby.iapi.sql.dictionary.StatementPermission.StatementPermission()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementRolePermission.StatementRolePermission(String,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementRolePermission.check(LanguageConnectionContext,String,boolean)",4,5,5
"org.apache.derby.iapi.sql.dictionary.StatementRolePermission.getPermissionDescriptor(String,DataDictionary)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission.StatementRoutinePermission(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission.check(LanguageConnectionContext,String,boolean)",4,7,8
"org.apache.derby.iapi.sql.dictionary.StatementRoutinePermission.getPermissionDescriptor(String,DataDictionary)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementSchemaPermission.StatementSchemaPermission(String,String,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementSchemaPermission.check(LanguageConnectionContext,String,boolean)",5,7,10
"org.apache.derby.iapi.sql.dictionary.StatementSchemaPermission.getPermissionDescriptor(String,DataDictionary)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.StatementTablePermission(UUID,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.check(LanguageConnectionContext,String,boolean)",2,2,3
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.equals(Object)",3,3,4
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.getPermissionDescriptor(String,DataDictionary)",2,2,2
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.getPrivName()",7,2,7
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.getPrivType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.getTableDescriptor(DataDictionary)",2,2,2
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.getTableUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.hasPermissionOnTable(DataDictionary,String,boolean)",1,2,2
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.hashCode()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatementTablePermission.oneAuthHasPermissionOnTable(DataDictionary,String,boolean)",3,4,10
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.StatisticsDescriptor(DataDictionary,UUID,UUID,UUID,String,Statistics,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.getColumnCount()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.getReferenceID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.getStatType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.getStatistic()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.getTableUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.getUpdateTimestamp()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.isValid()",1,1,1
"org.apache.derby.iapi.sql.dictionary.StatisticsDescriptor.toString()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor.SubCheckConstraintDescriptor(UUID,String,ReferencedColumns)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor.getConstraintText()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor.getReferencedColumnsDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor.hasBackingIndex()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubCheckConstraintDescriptor.toString()",2,2,2
"org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor.SubConstraintDescriptor(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor.getTableDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor.setConstraintId(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor.setTableDescriptor(TableDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubConstraintDescriptor.toString()",2,1,2
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.SubKeyConstraintDescriptor(UUID,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.SubKeyConstraintDescriptor(UUID,UUID,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.SubKeyConstraintDescriptor(UUID,UUID,UUID,int,int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.getIndexId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.getKeyConstraintId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.getRaDeleteRule()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.getRaUpdateRule()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.hasBackingIndex()",1,1,1
"org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor.toString()",2,2,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.TableDescriptor(DataDictionary,String,SchemaDescriptor,int,boolean,boolean)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.TableDescriptor(DataDictionary,String,SchemaDescriptor,int,char)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.emptyConstraintDescriptorList()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.emptyTriggerDescriptorList()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantConstraints(int,boolean,int[],boolean[],ConstraintDescriptorList)",3,6,16
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAllRelevantTriggers(int,int[],GenericDescriptorList)",1,4,7
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getAutoincIncrementArray()",2,3,4
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getColumnCollationIds()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getColumnDescriptor(String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getColumnDescriptor(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getColumnDescriptorList()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getColumnNamesArray()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptor(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptor(long)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptorList()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptors()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptors(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConglomerateDescriptors(long)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getConstraintDescriptorList()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getDependableFinder()",2,2,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getDescriptorType()",1,1,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getEmptyExecRow()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getHeapConglomerateId()",4,5,7
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getIndexLister()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getLockGranularity()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getMaxColumnID()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getNumberOfColumns()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getObjectName()",2,5,6
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getPrimaryKey()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getQualifiedName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getReferencedColumnMap()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getSchemaDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getSchemaName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getStatistics()",2,1,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getTableType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getTotalNumberOfIndexes()",1,2,3
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getTriggerDescriptorList()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.getViewDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.isOnCommitDeleteRows()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.isOnRollbackDeleteRows()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.isPersistent()",2,2,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.isSynonymDescriptor()",2,1,2
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.quoteProtectName(String)",2,2,3
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.removeConglomerateDescriptor(ConglomerateDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.removeConstraintDescriptor(ConstraintDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.resetHeapConglomNumber()",1,3,3
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.selectivityForConglomerate(ConglomerateDescriptor,int)",6,5,8
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.setConstraintDescriptorList(ConstraintDescriptorList)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.setLockGranularity(char)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.setReferencedColumnMap(FormatableBitSet)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.setTableName(String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.setTriggerDescriptorList(GenericDescriptorList)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.setUUID(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.setViewDescriptor(ViewDescriptor)",1,3,3
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.statisticsExist(ConglomerateDescriptor)",4,3,4
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.tableHasAutoincrement()",3,2,3
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.tableNameEquals(String,String)",2,3,4
"org.apache.derby.iapi.sql.dictionary.TableDescriptor.toString()",2,1,3
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.TablePermsDescriptor(DataDictionary,String,String,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.TablePermsDescriptor(DataDictionary,String,String,UUID,String,String,String,String,String,String)",1,2,2
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.TablePermsDescriptor(DataDictionary,UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.checkOwner(String)",2,1,2
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.equals(Object)",2,2,3
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getCatalogNumber()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getDeletePriv()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getInsertPriv()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getReferencesPriv()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getSelectPriv()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getTableUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getTriggerPriv()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.getUpdatePriv()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.hashCode()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TablePermsDescriptor.toString()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.TriggerDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.TriggerDescriptor(DataDictionary,SchemaDescriptor,UUID,String,int,boolean,boolean,boolean,TableDescriptor,UUID,UUID,Timestamp,int[],String,boolean,boolean,String,String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.drop(LanguageConnectionContext)",1,2,2
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getActionId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getActionSPS(LanguageConnectionContext)",1,2,2
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getCreationTimestamp()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getDataDictionary()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getDescriptorName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getDescriptorType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getNewReferencingName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getOldReferencingName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getReferencedCols()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getReferencingNew()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getReferencingOld()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getSchemaDescriptor()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getTableDescriptor()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getTableId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getTriggerDefinition()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getTriggerEventMask()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getWhenClauseId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.getWhenClauseSPS()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.isBeforeTrigger()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.isEnabled()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.isRowTrigger()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.isValid()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.listensForEvent(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.makeInvalid(int,LanguageConnectionContext)",2,2,4
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.needsToFire(int,int[])",5,5,11
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.prepareToInvalidate(Provider,int,LanguageConnectionContext)",2,3,3
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.readExternal(ObjectInput)",1,3,3
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.setDisabled()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.setEnabled()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.toString()",2,1,2
"org.apache.derby.iapi.sql.dictionary.TriggerDescriptor.writeExternal(ObjectOutput)",1,4,4
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.TupleDescriptor()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.TupleDescriptor(DataDictionary)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.getColumnDependableFinder(int,byte[])",1,1,1
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.getDataDictionary()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.getDependableFinder(int)",1,1,1
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.getDescriptorName()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.getDescriptorType()",1,2,2
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.isPersistent()",1,1,1
"org.apache.derby.iapi.sql.dictionary.TupleDescriptor.setDataDictionary(DataDictionary)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.ViewDescriptor(DataDictionary,UUID,String,String,int,UUID)",1,3,3
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.drop(LanguageConnectionContext,SchemaDescriptor,TableDescriptor)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getCheckOptionType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getClassType()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getCompSchemaId()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getDependableFinder()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getObjectID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getObjectName()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getUUID()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.getViewText()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.isValid()",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.makeInvalid(int,LanguageConnectionContext)",2,3,5
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.prepareToInvalidate(Provider,int,LanguageConnectionContext)",2,2,3
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.setUUID(UUID)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.setViewName(String)",1,1,1
"org.apache.derby.iapi.sql.dictionary.ViewDescriptor.toString()",2,1,2
"org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtable()",1,1,1
"org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtable(TransactionController,RowSource,int[],boolean,long,long,int,float,boolean,boolean)",1,5,11
"org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtableEnumeration.BackingStoreHashtableEnumeration()",1,2,3
"org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtableEnumeration.hasMoreElements()",4,2,4
"org.apache.derby.iapi.store.access.BackingStoreHashtable.BackingStoreHashtableEnumeration.nextElement()",3,3,3
"org.apache.derby.iapi.store.access.BackingStoreHashtable.add_row_to_hash_table(DataValueDescriptor[],boolean)",2,5,6
"org.apache.derby.iapi.store.access.BackingStoreHashtable.cloneRow(DataValueDescriptor[])",1,3,3
"org.apache.derby.iapi.store.access.BackingStoreHashtable.close()",1,2,2
"org.apache.derby.iapi.store.access.BackingStoreHashtable.doSpaceAccounting(DataValueDescriptor[],boolean)",1,2,3
"org.apache.derby.iapi.store.access.BackingStoreHashtable.elements()",2,2,2
"org.apache.derby.iapi.store.access.BackingStoreHashtable.get(Object)",2,1,3
"org.apache.derby.iapi.store.access.BackingStoreHashtable.getAllRuntimeStats(Properties)",1,2,2
"org.apache.derby.iapi.store.access.BackingStoreHashtable.getEstimatedMemUsage(DataValueDescriptor[])",1,2,2
"org.apache.derby.iapi.store.access.BackingStoreHashtable.getNextRowFromRowSource()",6,4,6
"org.apache.derby.iapi.store.access.BackingStoreHashtable.putRow(boolean,DataValueDescriptor[])",5,5,6
"org.apache.derby.iapi.store.access.BackingStoreHashtable.remove(Object)",2,1,3
"org.apache.derby.iapi.store.access.BackingStoreHashtable.setAuxillaryRuntimeStats(Properties)",1,1,1
"org.apache.derby.iapi.store.access.BackingStoreHashtable.shallowCloneRow(DataValueDescriptor[])",1,3,3
"org.apache.derby.iapi.store.access.BackingStoreHashtable.size()",2,2,2
"org.apache.derby.iapi.store.access.BackingStoreHashtable.spillToDisk(DataValueDescriptor[])",7,6,9
"org.apache.derby.iapi.store.access.DiskHashtable.DiskHashtable(TransactionController,DataValueDescriptor[],int[],int[],boolean,boolean)",1,4,5
"org.apache.derby.iapi.store.access.DiskHashtable.ElementEnum.ElementEnum()",1,5,6
"org.apache.derby.iapi.store.access.DiskHashtable.ElementEnum.hasMoreElements()",1,1,1
"org.apache.derby.iapi.store.access.DiskHashtable.ElementEnum.nextElement()",4,7,9
"org.apache.derby.iapi.store.access.DiskHashtable.close()",1,1,1
"org.apache.derby.iapi.store.access.DiskHashtable.elements()",1,1,1
"org.apache.derby.iapi.store.access.DiskHashtable.get(Object)",1,1,1
"org.apache.derby.iapi.store.access.DiskHashtable.getRemove(Object,boolean,boolean)",5,7,10
"org.apache.derby.iapi.store.access.DiskHashtable.put(Object,Object[])",3,2,7
"org.apache.derby.iapi.store.access.DiskHashtable.remove(Object)",1,1,1
"org.apache.derby.iapi.store.access.DiskHashtable.rowMatches(DataValueDescriptor[],Object)",4,3,4
"org.apache.derby.iapi.store.access.DiskHashtable.size()",1,1,1
"org.apache.derby.iapi.store.access.GlobalXact.equals(Object)",3,4,5
"org.apache.derby.iapi.store.access.GlobalXact.hashCode()",1,1,3
"org.apache.derby.iapi.store.access.GlobalXact.toString()",1,7,7
"org.apache.derby.iapi.store.access.KeyHasher.KeyHasher(int)",1,1,1
"org.apache.derby.iapi.store.access.KeyHasher.buildHashKey(Object[],int[])",2,2,3
"org.apache.derby.iapi.store.access.KeyHasher.equals(Object)",5,2,5
"org.apache.derby.iapi.store.access.KeyHasher.getObject(int)",1,1,1
"org.apache.derby.iapi.store.access.KeyHasher.hashCode()",1,2,2
"org.apache.derby.iapi.store.access.KeyHasher.setObject(int,Object)",1,1,1
"org.apache.derby.iapi.store.access.RowUtil.RowUtil()",1,1,1
"org.apache.derby.iapi.store.access.RowUtil.columnOutOfRange(DataValueDescriptor[],FormatableBitSet,int)",5,2,5
"org.apache.derby.iapi.store.access.RowUtil.getColumn(DataValueDescriptor[],FormatableBitSet,int)",3,2,6
"org.apache.derby.iapi.store.access.RowUtil.getColumn(Object[],FormatableBitSet,int)",3,2,6
"org.apache.derby.iapi.store.access.RowUtil.getFetchDescriptorConstant(int)",2,1,2
"org.apache.derby.iapi.store.access.RowUtil.getNumberOfColumns(int,FormatableBitSet)",1,3,6
"org.apache.derby.iapi.store.access.RowUtil.getQualifierBitSet(Qualifier[][])",1,4,4
"org.apache.derby.iapi.store.access.RowUtil.isRowEmpty(DataValueDescriptor[])",3,1,3
"org.apache.derby.iapi.store.access.RowUtil.newRowFromClassInfoTemplateError()",1,2,2
"org.apache.derby.iapi.store.access.RowUtil.newRowFromTemplate(DataValueDescriptor[])",1,3,3
"org.apache.derby.iapi.store.access.RowUtil.newTemplate(DataValueFactory,FormatableBitSet,int[],int[])",1,6,6
"org.apache.derby.iapi.store.access.RowUtil.nextColumn(Object[],FormatableBitSet,int)",5,3,6
"org.apache.derby.iapi.store.access.RowUtil.qualifyRow(DataValueDescriptor[],Qualifier[][])",7,10,15
"org.apache.derby.iapi.store.access.RowUtil.toString(Hashtable)",2,6,6
"org.apache.derby.iapi.store.access.RowUtil.toString(Object[])",2,1,5
"org.apache.derby.iapi.store.access.xa.XAXactId.XAXactId(String)",1,10,12
"org.apache.derby.iapi.store.access.xa.XAXactId.XAXactId(Xid)",2,1,2
"org.apache.derby.iapi.store.access.xa.XAXactId.XAXactId(int,byte[],byte[])",1,1,1
"org.apache.derby.iapi.store.access.xa.XAXactId.copy_init_xid(int,byte[],byte[])",1,1,1
"org.apache.derby.iapi.store.access.xa.XAXactId.equals(Object)",4,6,8
"org.apache.derby.iapi.store.access.xa.XAXactId.getBranchQualifier()",1,1,1
"org.apache.derby.iapi.store.access.xa.XAXactId.getFormatId()",1,1,1
"org.apache.derby.iapi.store.access.xa.XAXactId.getGlobalTransactionId()",1,1,1
"org.apache.derby.iapi.store.access.xa.XAXactId.toHexString()",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.ContainerKey(long,long)",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.equals(Object)",3,1,4
"org.apache.derby.iapi.store.raw.ContainerKey.getContainerId()",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.getSegmentId()",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.hashCode()",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.lockAttributes(int,Hashtable)",2,2,3
"org.apache.derby.iapi.store.raw.ContainerKey.lockEvent(Latch)",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.lockerAlwaysCompatible()",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.match(Object)",4,3,4
"org.apache.derby.iapi.store.raw.ContainerKey.read(ObjectInput)",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.requestCompatible(Object,Object)",1,2,2
"org.apache.derby.iapi.store.raw.ContainerKey.toString()",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.unlockEvent(Latch)",1,1,1
"org.apache.derby.iapi.store.raw.ContainerKey.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.iapi.store.raw.ContainerLock.ContainerLock(int)",1,1,3
"org.apache.derby.iapi.store.raw.ContainerLock.getType()",1,1,1
"org.apache.derby.iapi.store.raw.ContainerLock.isCompatible(ContainerLock)",1,1,1
"org.apache.derby.iapi.store.raw.ContainerLock.toString()",1,1,1
"org.apache.derby.iapi.store.raw.D_ContainerKey.diag()",1,1,1
"org.apache.derby.iapi.store.raw.D_ContainerKey.diag_detail(Properties)",1,1,1
"org.apache.derby.iapi.store.raw.D_ContainerLock.diag()",1,1,1
"org.apache.derby.iapi.store.raw.D_RowLock.diag()",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.FetchDescriptor()",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.FetchDescriptor(int)",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.FetchDescriptor(int,FormatableBitSet,Qualifier[][])",1,1,2
"org.apache.derby.iapi.store.raw.FetchDescriptor.FetchDescriptor(int,int)",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.getMaterializedColumns()",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.getMaxFetchColumnId()",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.getQualifierList()",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.getValidColumns()",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.getValidColumnsArray()",1,1,1
"org.apache.derby.iapi.store.raw.FetchDescriptor.reset()",1,4,5
"org.apache.derby.iapi.store.raw.FetchDescriptor.setMaxFetchColumnId()",4,3,5
"org.apache.derby.iapi.store.raw.FetchDescriptor.setValidColumns(FormatableBitSet)",1,3,4
"org.apache.derby.iapi.store.raw.PageKey.PageKey(ContainerKey,long)",1,1,1
"org.apache.derby.iapi.store.raw.PageKey.equals(Object)",2,3,3
"org.apache.derby.iapi.store.raw.PageKey.getContainerId()",1,1,1
"org.apache.derby.iapi.store.raw.PageKey.getPageNumber()",1,1,1
"org.apache.derby.iapi.store.raw.PageKey.hashCode()",1,1,1
"org.apache.derby.iapi.store.raw.PageKey.read(ObjectInput)",1,1,1
"org.apache.derby.iapi.store.raw.PageKey.toString()",1,1,1
"org.apache.derby.iapi.store.raw.PageKey.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.iapi.store.raw.RowLock.RowLock(int)",1,1,3
"org.apache.derby.iapi.store.raw.RowLock.getType()",1,1,1
"org.apache.derby.iapi.store.raw.RowLock.isCompatible(RowLock)",1,1,1
"org.apache.derby.iapi.store.raw.RowLock.toString()",1,1,1
"org.apache.derby.iapi.store.raw.xact.RawTransaction.checkLogicalOperationOk()",1,1,1
"org.apache.derby.iapi.store.raw.xact.RawTransaction.notifyObservers(Object)",1,2,2
"org.apache.derby.iapi.store.raw.xact.RawTransaction.recoveryRollbackFirst()",1,1,1
"org.apache.derby.iapi.store.raw.xact.RawTransaction.setObserverException(StandardException)",1,1,2
"org.apache.derby.iapi.tools.i18n.LocalizedInput.LocalizedInput(InputStream)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedInput.LocalizedInput(InputStream,String)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedInput.close()",1,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedInput.isStandardInput()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedOutput.LocalizedOutput(OutputStream)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedOutput.LocalizedOutput(OutputStream,String)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedOutput.close()",1,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedOutput.isStandardOutput()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.InputReader()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.LocalizedResource()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.LocalizedResource(String,String,String)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.OutputWriter()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.enableLocalization(boolean)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getColumnDisplaySize(ResultSetMetaData,int)",5,2,5
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getDateAsString(Date)",2,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getEnvProperty(String)",1,1,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getInstance()",1,1,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getLocale()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getLocalizedString(ResultSet,ResultSetMetaData,int)",8,8,15
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getMessage(String)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getMessage(String,Object)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getMessage(String,Object,Object)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getMessage(String,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getMessage(String,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNewEncodedInput(InputStream,String)",1,1,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNewEncodedOutput(OutputStream,String)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNewInput(InputStream)",2,1,3
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNewLocale(String)",2,3,5
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNewOutput(OutputStream)",2,1,3
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNumber(int)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNumber(long)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNumberAsString(Object)",2,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNumberAsString(double)",2,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNumberAsString(int)",2,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getNumberAsString(long)",2,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getStringFromDate(String)",2,1,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getStringFromTime(String)",2,1,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getStringFromTimestamp(String)",2,1,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getStringFromValue(String)",2,1,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getTextMessage(String)",1,2,3
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getTextMessage(String,Object)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getTextMessage(String,Object,Object)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getTextMessage(String,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getTextMessage(String,Object,Object,Object,Object)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getTextMessage(String,Object[])",1,3,4
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getTimeAsString(Date)",2,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getTimestampAsString(Timestamp)",2,2,2
"org.apache.derby.iapi.tools.i18n.LocalizedResource.getUnicodeEscape()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.init()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.init(String,String,String)",1,5,9
"org.apache.derby.iapi.tools.i18n.LocalizedResource.initMaxSizes2()",1,4,6
"org.apache.derby.iapi.tools.i18n.LocalizedResource.isLocalized()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.run()",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.setResource()",2,4,5
"org.apache.derby.iapi.tools.i18n.LocalizedResource.setUnicodeEscape(boolean)",1,1,1
"org.apache.derby.iapi.tools.i18n.LocalizedResource.toString()",1,2,2
"org.apache.derby.iapi.tools.run.main(String[])",1,6,6
"org.apache.derby.iapi.tools.run.printUsage()",1,1,1
"org.apache.derby.iapi.tools.run.run()",1,1,1
"org.apache.derby.iapi.tools.run.trimArgs(String[])",1,1,1
"org.apache.derby.iapi.transaction.TransactionControl.TransactionControl()",1,1,1
"org.apache.derby.iapi.transaction.TransactionControl.addListener(TransactionListener)",1,1,1
"org.apache.derby.iapi.transaction.TransactionControl.preCommitNotify()",4,5,6
"org.apache.derby.iapi.transaction.TransactionControl.preRollbackNotify()",3,3,5
"org.apache.derby.iapi.transaction.TransactionControl.removeListener(TransactionListener)",1,1,1
"org.apache.derby.iapi.types.BigIntegerDecimal.BigIntegerDecimal()",1,1,1
"org.apache.derby.iapi.types.BigIntegerDecimal.divideNN(NumberDataValue,NumberDataValue,NumberDataValue,int)",2,5,6
"org.apache.derby.iapi.types.BigIntegerDecimal.getBID(DataValueDescriptor)",5,5,6
"org.apache.derby.iapi.types.BigIntegerDecimal.getBoolean()",2,1,2
"org.apache.derby.iapi.types.BigIntegerDecimal.getDecimalValuePrecision()",4,1,5
"org.apache.derby.iapi.types.BigIntegerDecimal.getDouble()",2,1,2
"org.apache.derby.iapi.types.BigIntegerDecimal.getFloat()",2,1,2
"org.apache.derby.iapi.types.BigIntegerDecimal.getLong()",5,5,9
"org.apache.derby.iapi.types.BigIntegerDecimal.getNewNull()",1,1,1
"org.apache.derby.iapi.types.BigIntegerDecimal.getString()",4,4,8
"org.apache.derby.iapi.types.BigIntegerDecimal.minus(NumberDataValue)",1,3,3
"org.apache.derby.iapi.types.BigIntegerDecimal.normalize(DataTypeDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.BigIntegerDecimal.plusNN(NumberDataValue,NumberDataValue,NumberDataValue)",1,3,4
"org.apache.derby.iapi.types.BigIntegerDecimal.rescale(BigInteger,int)",2,5,6
"org.apache.derby.iapi.types.BigIntegerDecimal.setValue(String)",8,13,13
"org.apache.derby.iapi.types.BigIntegerDecimal.setWidth(int,int,boolean)",5,3,5
"org.apache.derby.iapi.types.BigIntegerDecimal.timesNN(NumberDataValue,NumberDataValue,NumberDataValue)",1,1,2
"org.apache.derby.iapi.types.BigIntegerDecimal.toString()",2,2,2
"org.apache.derby.iapi.types.BigIntegerDecimal.typeCompare(DataValueDescriptor)",1,3,3
"org.apache.derby.iapi.types.BinaryDecimal.BinaryDecimal()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.divide(NumberDataValue,NumberDataValue,NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.divide(NumberDataValue,NumberDataValue,NumberDataValue,int)",2,4,4
"org.apache.derby.iapi.types.BinaryDecimal.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.getByte()",3,1,5
"org.apache.derby.iapi.types.BinaryDecimal.getClone()",1,2,2
"org.apache.derby.iapi.types.BinaryDecimal.getDecimalValueScale()",2,1,2
"org.apache.derby.iapi.types.BinaryDecimal.getInt()",3,1,5
"org.apache.derby.iapi.types.BinaryDecimal.getLength()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.getShort()",3,1,5
"org.apache.derby.iapi.types.BinaryDecimal.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.getTypeName()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.hashCode()",2,1,3
"org.apache.derby.iapi.types.BinaryDecimal.isNegative()",1,2,2
"org.apache.derby.iapi.types.BinaryDecimal.isNull()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.minus(NumberDataValue,NumberDataValue,NumberDataValue)",2,4,4
"org.apache.derby.iapi.types.BinaryDecimal.minusNN(NumberDataValue,NumberDataValue,NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.plus(NumberDataValue,NumberDataValue,NumberDataValue)",2,4,4
"org.apache.derby.iapi.types.BinaryDecimal.readExternal(ObjectInput)",1,1,3
"org.apache.derby.iapi.types.BinaryDecimal.readExternalFromArray(ArrayInputStream)",1,1,3
"org.apache.derby.iapi.types.BinaryDecimal.reduceBytes2c(byte[],int,int)",8,2,10
"org.apache.derby.iapi.types.BinaryDecimal.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.setCoreValue(double)",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.setFrom(DataValueDescriptor)",2,2,4
"org.apache.derby.iapi.types.BinaryDecimal.setValue(Number)",1,4,5
"org.apache.derby.iapi.types.BinaryDecimal.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.BinaryDecimal.setValue(double)",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.setValue(float)",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.setValue(int)",1,1,3
"org.apache.derby.iapi.types.BinaryDecimal.setValue(long)",1,7,9
"org.apache.derby.iapi.types.BinaryDecimal.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.times(NumberDataValue,NumberDataValue,NumberDataValue)",2,4,4
"org.apache.derby.iapi.types.BinaryDecimal.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.BinaryDecimal.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.CDCDataValueFactory.CDCDataValueFactory()",1,1,1
"org.apache.derby.iapi.types.CDCDataValueFactory.canSupport(Properties)",1,1,1
"org.apache.derby.iapi.types.CDCDataValueFactory.getDecimalDataValue(Long,NumberDataValue)",1,1,2
"org.apache.derby.iapi.types.CDCDataValueFactory.getDecimalDataValue(String)",1,1,1
"org.apache.derby.iapi.types.CDCDataValueFactory.getNullDecimal(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.CollatorSQLChar.CollatorSQLChar(RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.CollatorSQLChar(String,RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.getClone()",1,3,3
"org.apache.derby.iapi.types.CollatorSQLChar.getCollationElementsForString()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.getCollatorForCollation()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.getCountOfCollationElements()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.getNewNull()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.getValue(RuleBasedCollator)",2,2,2
"org.apache.derby.iapi.types.CollatorSQLChar.like(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.like(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.setCollator(RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLChar.stringCompare(SQLChar,SQLChar)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.CollatorSQLClob(RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.CollatorSQLClob(String,RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.getClone()",1,3,3
"org.apache.derby.iapi.types.CollatorSQLClob.getCollationElementsForString()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.getCollatorForCollation()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.getCountOfCollationElements()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.getNewNull()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.getValue(RuleBasedCollator)",2,2,2
"org.apache.derby.iapi.types.CollatorSQLClob.like(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.like(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.setCollator(RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLClob.stringCompare(SQLChar,SQLChar)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.CollatorSQLLongvarchar(RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.CollatorSQLLongvarchar(String,RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.getClone()",1,3,3
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.getCollationElementsForString()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.getCollatorForCollation()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.getCountOfCollationElements()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.getNewNull()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.getValue(RuleBasedCollator)",2,2,2
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.like(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.like(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.setCollator(RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLLongvarchar.stringCompare(SQLChar,SQLChar)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.CollatorSQLVarchar(RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.CollatorSQLVarchar(String,RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.getClone()",1,3,3
"org.apache.derby.iapi.types.CollatorSQLVarchar.getCollationElementsForString()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.getCollatorForCollation()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.getCountOfCollationElements()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.getNewNull()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.getNewVarchar()",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.getValue(RuleBasedCollator)",2,2,2
"org.apache.derby.iapi.types.CollatorSQLVarchar.like(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.like(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.setCollator(RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.CollatorSQLVarchar.stringCompare(SQLChar,SQLChar)",1,1,1
"org.apache.derby.iapi.types.DTSClassInfo.getNewInstance()",1,1,1
"org.apache.derby.iapi.types.DataType.checkHostVariable(int)",1,1,1
"org.apache.derby.iapi.types.DataType.cloneObject()",1,1,1
"org.apache.derby.iapi.types.DataType.coalesce(DataValueDescriptor[],DataValueDescriptor)",3,4,4
"org.apache.derby.iapi.types.DataType.compare(DataValueDescriptor,boolean)",4,3,7
"org.apache.derby.iapi.types.DataType.compare(int,DataValueDescriptor,boolean,boolean)",8,4,9
"org.apache.derby.iapi.types.DataType.compare(int,DataValueDescriptor,boolean,boolean,boolean)",8,4,9
"org.apache.derby.iapi.types.DataType.compareTo(Object)",2,4,4
"org.apache.derby.iapi.types.DataType.dataTypeConversion(String)",1,1,1
"org.apache.derby.iapi.types.DataType.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataType.equals(Object)",2,1,3
"org.apache.derby.iapi.types.DataType.flip(int)",5,3,6
"org.apache.derby.iapi.types.DataType.genericSetObject(Object)",1,1,1
"org.apache.derby.iapi.types.DataType.getBoolean()",1,1,1
"org.apache.derby.iapi.types.DataType.getByte()",1,1,1
"org.apache.derby.iapi.types.DataType.getBytes()",1,1,1
"org.apache.derby.iapi.types.DataType.getDate(Calendar)",1,1,1
"org.apache.derby.iapi.types.DataType.getDouble()",1,1,1
"org.apache.derby.iapi.types.DataType.getFloat()",1,1,1
"org.apache.derby.iapi.types.DataType.getInt()",1,1,1
"org.apache.derby.iapi.types.DataType.getLong()",1,1,1
"org.apache.derby.iapi.types.DataType.getNationalString(LocaleFinder)",1,1,1
"org.apache.derby.iapi.types.DataType.getObject()",1,1,1
"org.apache.derby.iapi.types.DataType.getShort()",1,1,1
"org.apache.derby.iapi.types.DataType.getStream()",1,1,1
"org.apache.derby.iapi.types.DataType.getTime(Calendar)",1,1,1
"org.apache.derby.iapi.types.DataType.getTimestamp(Calendar)",1,1,1
"org.apache.derby.iapi.types.DataType.getTraceString()",1,1,1
"org.apache.derby.iapi.types.DataType.getTypeName(String)",1,1,1
"org.apache.derby.iapi.types.DataType.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataType.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataType.in(DataValueDescriptor,DataValueDescriptor[],boolean)",9,7,13
"org.apache.derby.iapi.types.DataType.invalidFormat()",1,1,1
"org.apache.derby.iapi.types.DataType.isNotNull()",1,1,1
"org.apache.derby.iapi.types.DataType.isNullOp()",1,1,1
"org.apache.derby.iapi.types.DataType.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataType.lessThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataType.normalize(DataTypeDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataType.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataType.outOfRange()",1,1,1
"org.apache.derby.iapi.types.DataType.recycle()",1,1,1
"org.apache.derby.iapi.types.DataType.setBigDecimal(Number)",1,1,1
"org.apache.derby.iapi.types.DataType.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataType.setInto(PreparedStatement,int)",1,1,1
"org.apache.derby.iapi.types.DataType.setInto(ResultSet,int)",1,1,1
"org.apache.derby.iapi.types.DataType.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.DataType.setObjectForCast(Object,boolean,String)",3,3,3
"org.apache.derby.iapi.types.DataType.setToNull()",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(DataValueDescriptor)",4,5,5
"org.apache.derby.iapi.types.DataType.setValue(Date)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(Date,Calendar)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(InputStream,int)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(String)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(Time)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(Time,Calendar)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(Timestamp)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(Timestamp,Calendar)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(boolean)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(byte)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(byte[])",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(double)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(float)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(int)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(long)",1,1,1
"org.apache.derby.iapi.types.DataType.setValue(short)",1,1,1
"org.apache.derby.iapi.types.DataType.throwLangSetMismatch(Object)",1,1,1
"org.apache.derby.iapi.types.DataType.throwLangSetMismatch(String)",1,1,1
"org.apache.derby.iapi.types.DataType.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.DataType.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(DataTypeDescriptor,boolean)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(DataTypeDescriptor,boolean,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(DataTypeDescriptor,int,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(DataTypeDescriptor,int,int,boolean,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(TypeDescriptorImpl,TypeId)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(TypeId,boolean)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(TypeId,boolean,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(TypeId,int,int,boolean,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.DataTypeDescriptor(TypeId,int,int,boolean,int,int,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.comparable(DataTypeDescriptor,boolean,ClassFactory)",18,23,31
"org.apache.derby.iapi.types.DataTypeDescriptor.compareCollationInfo(DataTypeDescriptor)",3,3,5
"org.apache.derby.iapi.types.DataTypeDescriptor.equals(Object)",2,2,3
"org.apache.derby.iapi.types.DataTypeDescriptor.estimatedMemoryUsage()",18,5,18
"org.apache.derby.iapi.types.DataTypeDescriptor.getBuiltInDataTypeDescriptor(String)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getBuiltInDataTypeDescriptor(String,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getBuiltInDataTypeDescriptor(int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getBuiltInDataTypeDescriptor(int,boolean)",5,2,7
"org.apache.derby.iapi.types.DataTypeDescriptor.getBuiltInDataTypeDescriptor(int,boolean,int)",2,1,2
"org.apache.derby.iapi.types.DataTypeDescriptor.getBuiltInDataTypeDescriptor(int,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getCatalogType()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getCatalogType(TypeDescriptor,int)",3,2,3
"org.apache.derby.iapi.types.DataTypeDescriptor.getCatalogType(int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getCatalogType(int,int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getCollatedType(int,int)",3,2,4
"org.apache.derby.iapi.types.DataTypeDescriptor.getCollationDerivation()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getCollationName()",1,2,3
"org.apache.derby.iapi.types.DataTypeDescriptor.getCollationType()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getDominantType(DataTypeDescriptor,ClassFactory)",1,25,34
"org.apache.derby.iapi.types.DataTypeDescriptor.getFullSQLTypeName()",1,4,4
"org.apache.derby.iapi.types.DataTypeDescriptor.getJDBCTypeId()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getMaximumWidth()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getNull()",3,3,4
"org.apache.derby.iapi.types.DataTypeDescriptor.getNullabilityType(boolean)",2,1,2
"org.apache.derby.iapi.types.DataTypeDescriptor.getPrecision()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getRowMultiSet(String[],TypeDescriptor[])",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getRowMultiSetCollation(TypeDescriptor,int)",4,3,5
"org.apache.derby.iapi.types.DataTypeDescriptor.getSQLDataTypeDescriptor(String)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getSQLDataTypeDescriptor(String,boolean)",2,1,2
"org.apache.derby.iapi.types.DataTypeDescriptor.getSQLDataTypeDescriptor(String,int,int,boolean,int)",2,1,2
"org.apache.derby.iapi.types.DataTypeDescriptor.getSQLTypeNameWithCollation()",1,2,2
"org.apache.derby.iapi.types.DataTypeDescriptor.getSQLstring()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getScale()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getType(TypeDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getTypeId()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.getTypeName()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.isAsciiStreamAssignable(int)",1,2,2
"org.apache.derby.iapi.types.DataTypeDescriptor.isBinaryStreamAssignable(int)",1,2,2
"org.apache.derby.iapi.types.DataTypeDescriptor.isBinaryType(int)",3,2,3
"org.apache.derby.iapi.types.DataTypeDescriptor.isCharacterStreamAssignable(int)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.isCharacterType(int)",3,2,3
"org.apache.derby.iapi.types.DataTypeDescriptor.isExactTypeAndLengthMatch(DataTypeDescriptor)",5,1,5
"org.apache.derby.iapi.types.DataTypeDescriptor.isJDBCTypeEquivalent(int,int)",19,8,21
"org.apache.derby.iapi.types.DataTypeDescriptor.isNullable()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.isNumericType(int)",3,2,3
"org.apache.derby.iapi.types.DataTypeDescriptor.isUserCreatableType()",4,5,6
"org.apache.derby.iapi.types.DataTypeDescriptor.normalize(DataValueDescriptor,DataValueDescriptor)",5,16,18
"org.apache.derby.iapi.types.DataTypeDescriptor.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.toString()",1,1,1
"org.apache.derby.iapi.types.DataTypeDescriptor.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.iapi.types.DataTypeUtilities.computeMaxWidth(int,int)",1,1,3
"org.apache.derby.iapi.types.DataTypeUtilities.getColumnDisplaySize(DataTypeDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataTypeUtilities.getColumnDisplaySize(int,int)",2,2,15
"org.apache.derby.iapi.types.DataTypeUtilities.getDigitPrecision(DataTypeDescriptor)",4,2,4
"org.apache.derby.iapi.types.DataTypeUtilities.getPrecision(DataTypeDescriptor)",4,3,4
"org.apache.derby.iapi.types.DataTypeUtilities.isCaseSensitive(DataTypeDescriptor)",1,1,5
"org.apache.derby.iapi.types.DataTypeUtilities.isCurrency(DataTypeDescriptor)",1,1,2
"org.apache.derby.iapi.types.DataTypeUtilities.isNullable(DataTypeDescriptor)",1,1,2
"org.apache.derby.iapi.types.DataTypeUtilities.isSigned(DataTypeDescriptor)",1,1,9
"org.apache.derby.iapi.types.DataValueFactoryImpl.DataValueFactoryImpl()",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.boot(boolean,Properties)",4,6,6
"org.apache.derby.iapi.types.DataValueFactoryImpl.getBitDataValue(byte[])",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getBitDataValue(byte[],BitDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getBlobDataValue(byte[],BitDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getCharDataValue(String)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getCharDataValue(String,StringDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getCharDataValue(String,StringDataValue,int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getCharacterCollator(int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getClobDataValue(String,StringDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getClobDataValue(String,StringDataValue,int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Boolean)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Boolean,BooleanDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(BooleanDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Byte)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Byte,NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Date)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Date,DateTimeDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Double)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Double,NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Float)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Float,NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Integer)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Integer,NumberDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Long)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Long,NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Object)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Object,UserDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(RowLocation,RefDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Short)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Short,NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Time)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Time,DateTimeDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Timestamp)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(Timestamp,DateTimeDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(boolean)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(boolean,BooleanDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(byte,NumberDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(char,NumberDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(double,NumberDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(float,NumberDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(int)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(int,NumberDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(long)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(long,NumberDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDataValue(short,NumberDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDate(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDateValue(String,boolean)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDecimalDataValue(Number)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDecimalDataValue(Number,NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getDecimalDataValue(String,NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getLocaleFinder()",1,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getLongVarbitDataValue(byte[],BitDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getLongvarcharDataValue(String)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getLongvarcharDataValue(String,StringDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getLongvarcharDataValue(String,StringDataValue,int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNull(int,int)",4,3,4
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullBit(BitDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullBlob(BitDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullBoolean(BooleanDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullByte(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullChar(StringDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullChar(StringDataValue,int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullClob(StringDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullClob(StringDataValue,int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullDVDWithUCS_BASICcollation(int)",24,2,24
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullDate(DateTimeDataValue)",2,4,4
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullDouble(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullFloat(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullInteger(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullLong(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullLongVarbit(BitDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullLongvarchar(StringDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullLongvarchar(StringDataValue,int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullObject(UserDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullRef(RefDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullShort(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullTime(DateTimeDataValue)",2,4,4
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullTimestamp(DateTimeDataValue)",2,4,4
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullVarbit(BitDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullVarchar(StringDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullVarchar(StringDataValue,int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getNullXML(XMLDataValue)",2,2,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getTimeValue(String,boolean)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getTimestamp(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getTimestamp(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getTimestampValue(String,boolean)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getVarbitDataValue(byte[],BitDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getVarcharDataValue(String)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.getVarcharDataValue(String,StringDataValue)",2,1,2
"org.apache.derby.iapi.types.DataValueFactoryImpl.getVarcharDataValue(String,StringDataValue,int)",3,3,3
"org.apache.derby.iapi.types.DataValueFactoryImpl.getXMLDataValue(XMLDataValue)",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.stop()",1,1,1
"org.apache.derby.iapi.types.DataValueFactoryImpl.verifyCollatorSupport()",4,3,4
"org.apache.derby.iapi.types.DateTimeParser.DateTimeParser(String)",1,1,1
"org.apache.derby.iapi.types.DateTimeParser.checkEnd()",3,5,6
"org.apache.derby.iapi.types.DateTimeParser.getCurrentSeparator()",1,1,1
"org.apache.derby.iapi.types.DateTimeParser.getTrimmedString()",1,1,1
"org.apache.derby.iapi.types.DateTimeParser.nextSeparator()",3,2,3
"org.apache.derby.iapi.types.DateTimeParser.parseChoice(String[])",6,5,6
"org.apache.derby.iapi.types.DateTimeParser.parseInt(int,boolean,char[],boolean)",13,10,18
"org.apache.derby.iapi.types.DateTimeParser.updateCurrentSeparator()",5,4,5
"org.apache.derby.iapi.types.J2SEDataValueFactory.J2SEDataValueFactory()",1,1,1
"org.apache.derby.iapi.types.J2SEDataValueFactory.boot(boolean,Properties)",1,1,1
"org.apache.derby.iapi.types.J2SEDataValueFactory.getDecimalDataValue(Long,NumberDataValue)",1,1,2
"org.apache.derby.iapi.types.J2SEDataValueFactory.getDecimalDataValue(String)",2,1,2
"org.apache.derby.iapi.types.J2SEDataValueFactory.getNullDecimal(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.JSQLType.JSQLType()",1,1,1
"org.apache.derby.iapi.types.JSQLType.JSQLType(DataTypeDescriptor)",1,1,1
"org.apache.derby.iapi.types.JSQLType.JSQLType(String)",1,2,2
"org.apache.derby.iapi.types.JSQLType.JSQLType(byte)",1,1,1
"org.apache.derby.iapi.types.JSQLType.getCategory()",1,1,1
"org.apache.derby.iapi.types.JSQLType.getJavaClassName()",1,1,1
"org.apache.derby.iapi.types.JSQLType.getPrimitiveID(String)",3,2,3
"org.apache.derby.iapi.types.JSQLType.getPrimitiveKind()",1,1,1
"org.apache.derby.iapi.types.JSQLType.getSQLType()",1,3,3
"org.apache.derby.iapi.types.JSQLType.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.JSQLType.getWrapperClassName(byte)",2,1,2
"org.apache.derby.iapi.types.JSQLType.initialize(DataTypeDescriptor)",1,1,1
"org.apache.derby.iapi.types.JSQLType.initialize(String)",1,1,1
"org.apache.derby.iapi.types.JSQLType.initialize(byte)",1,1,1
"org.apache.derby.iapi.types.JSQLType.initialize(byte,DataTypeDescriptor,String,byte)",1,1,1
"org.apache.derby.iapi.types.JSQLType.readExternal(ObjectInput)",2,2,4
"org.apache.derby.iapi.types.JSQLType.writeExternal(ObjectOutput)",2,2,4
"org.apache.derby.iapi.types.Like.Like()",1,1,1
"org.apache.derby.iapi.types.Like.checkEquality(char[],int,char[],int,RuleBasedCollator)",3,1,3
"org.apache.derby.iapi.types.Like.checkLengths(int,int,int,char[],int)",6,1,6
"org.apache.derby.iapi.types.Like.getMinLen(char[],int,int,boolean,char)",1,1,5
"org.apache.derby.iapi.types.Like.greaterEqualString(String,String,int)",3,7,8
"org.apache.derby.iapi.types.Like.greaterEqualString(String,char)",5,4,7
"org.apache.derby.iapi.types.Like.greaterEqualStringFromParameter(String,int)",2,1,2
"org.apache.derby.iapi.types.Like.greaterEqualStringFromParameterWithEsc(String,String,int)",2,1,2
"org.apache.derby.iapi.types.Like.isLikeComparisonNeeded(String)",4,2,6
"org.apache.derby.iapi.types.Like.isOptimizable(String)",3,1,4
"org.apache.derby.iapi.types.Like.lessThanString(String,String,int)",7,7,11
"org.apache.derby.iapi.types.Like.lessThanStringFromParameter(String,int)",2,1,2
"org.apache.derby.iapi.types.Like.lessThanStringFromParameterWithEsc(String,String,int)",2,1,2
"org.apache.derby.iapi.types.Like.like(char[],int,char[],int,RuleBasedCollator)",2,1,3
"org.apache.derby.iapi.types.Like.like(char[],int,char[],int,char[],int,RuleBasedCollator)",1,1,1
"org.apache.derby.iapi.types.Like.like(char[],int,int,char[],int,int,char[],int,RuleBasedCollator)",22,14,32
"org.apache.derby.iapi.types.Like.matchSpecial(int[],int,int,int[])",5,1,5
"org.apache.derby.iapi.types.Like.padWithNulls(String,int)",2,1,2
"org.apache.derby.iapi.types.Like.stripEscapesNoPatternChars(String,char)",5,4,7
"org.apache.derby.iapi.types.NumberDataType.absolute(NumberDataValue)",2,3,3
"org.apache.derby.iapi.types.NumberDataType.compare(DataValueDescriptor)",5,2,6
"org.apache.derby.iapi.types.NumberDataType.compare(int,DataValueDescriptor,boolean,boolean)",3,3,4
"org.apache.derby.iapi.types.NumberDataType.divide(NumberDataValue,NumberDataValue,NumberDataValue)",3,5,5
"org.apache.derby.iapi.types.NumberDataType.divide(NumberDataValue,NumberDataValue,NumberDataValue,int)",1,1,1
"org.apache.derby.iapi.types.NumberDataType.getDecimalValuePrecision()",1,1,1
"org.apache.derby.iapi.types.NumberDataType.getDecimalValueScale()",1,1,1
"org.apache.derby.iapi.types.NumberDataType.minus(NumberDataValue,NumberDataValue,NumberDataValue)",4,6,6
"org.apache.derby.iapi.types.NumberDataType.mod(NumberDataValue,NumberDataValue,NumberDataValue)",1,2,2
"org.apache.derby.iapi.types.NumberDataType.normalizeDOUBLE(double)",2,6,10
"org.apache.derby.iapi.types.NumberDataType.normalizeREAL(double)",2,6,10
"org.apache.derby.iapi.types.NumberDataType.normalizeREAL(float)",2,6,10
"org.apache.derby.iapi.types.NumberDataType.objectNull(Object)",2,2,2
"org.apache.derby.iapi.types.NumberDataType.plus(NumberDataValue,NumberDataValue,NumberDataValue)",4,6,6
"org.apache.derby.iapi.types.NumberDataType.setBigDecimal(Number)",3,3,4
"org.apache.derby.iapi.types.NumberDataType.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.NumberDataType.setValue(Number)",2,3,4
"org.apache.derby.iapi.types.NumberDataType.setValue(byte)",1,1,1
"org.apache.derby.iapi.types.NumberDataType.setValue(short)",1,1,1
"org.apache.derby.iapi.types.NumberDataType.sqrt(NumberDataValue)",4,5,5
"org.apache.derby.iapi.types.NumberDataType.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.RawToBinaryFormatStream.RawToBinaryFormatStream(InputStream,int)",2,1,4
"org.apache.derby.iapi.types.RawToBinaryFormatStream.RawToBinaryFormatStream(InputStream,int,String)",3,1,3
"org.apache.derby.iapi.types.RawToBinaryFormatStream.checkSufficientData()",6,5,8
"org.apache.derby.iapi.types.RawToBinaryFormatStream.read()",3,3,4
"org.apache.derby.iapi.types.RawToBinaryFormatStream.read(byte[],int,int)",6,4,7
"org.apache.derby.iapi.types.ReaderToUTF8Stream.ReaderToUTF8Stream(Reader,int,String)",3,1,3
"org.apache.derby.iapi.types.ReaderToUTF8Stream.ReaderToUTF8Stream(Reader,int,int,String)",1,1,1
"org.apache.derby.iapi.types.ReaderToUTF8Stream.available()",1,1,2
"org.apache.derby.iapi.types.ReaderToUTF8Stream.canTruncate()",3,2,3
"org.apache.derby.iapi.types.ReaderToUTF8Stream.checkSufficientData()",5,7,9
"org.apache.derby.iapi.types.ReaderToUTF8Stream.close()",1,1,1
"org.apache.derby.iapi.types.ReaderToUTF8Stream.fillBuffer(int)",3,3,8
"org.apache.derby.iapi.types.ReaderToUTF8Stream.read()",4,5,5
"org.apache.derby.iapi.types.ReaderToUTF8Stream.read(byte[],int,int)",6,7,8
"org.apache.derby.iapi.types.ReaderToUTF8Stream.truncate()",4,4,4
"org.apache.derby.iapi.types.SQLBinary.SQLBinary()",1,1,1
"org.apache.derby.iapi.types.SQLBinary.SQLBinary(byte[])",1,1,1
"org.apache.derby.iapi.types.SQLBinary.charLength(NumberDataValue)",2,2,3
"org.apache.derby.iapi.types.SQLBinary.checkHostVariable(int)",2,2,5
"org.apache.derby.iapi.types.SQLBinary.cloneObject()",2,2,2
"org.apache.derby.iapi.types.SQLBinary.compare(DataValueDescriptor)",5,4,6
"org.apache.derby.iapi.types.SQLBinary.compare(byte[],byte[])",6,1,7
"org.apache.derby.iapi.types.SQLBinary.compare(int,DataValueDescriptor,boolean,boolean)",3,12,13
"org.apache.derby.iapi.types.SQLBinary.concatenate(BitDataValue,BitDataValue,BitDataValue)",2,3,3
"org.apache.derby.iapi.types.SQLBinary.equals(DataValueDescriptor,DataValueDescriptor)",1,3,3
"org.apache.derby.iapi.types.SQLBinary.estimateMemoryUsage()",3,3,3
"org.apache.derby.iapi.types.SQLBinary.getBytes()",1,1,1
"org.apache.derby.iapi.types.SQLBinary.getClone()",1,3,3
"org.apache.derby.iapi.types.SQLBinary.getLength()",3,2,4
"org.apache.derby.iapi.types.SQLBinary.getStream()",1,1,1
"org.apache.derby.iapi.types.SQLBinary.getString()",3,3,3
"org.apache.derby.iapi.types.SQLBinary.getTraceString()",3,2,3
"org.apache.derby.iapi.types.SQLBinary.getValue()",1,4,5
"org.apache.derby.iapi.types.SQLBinary.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,3,3
"org.apache.derby.iapi.types.SQLBinary.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,3,3
"org.apache.derby.iapi.types.SQLBinary.hashCode()",2,3,6
"org.apache.derby.iapi.types.SQLBinary.isNull()",1,1,2
"org.apache.derby.iapi.types.SQLBinary.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,3,3
"org.apache.derby.iapi.types.SQLBinary.lessThan(DataValueDescriptor,DataValueDescriptor)",1,3,3
"org.apache.derby.iapi.types.SQLBinary.loadStream()",1,1,1
"org.apache.derby.iapi.types.SQLBinary.notEquals(DataValueDescriptor,DataValueDescriptor)",1,3,3
"org.apache.derby.iapi.types.SQLBinary.objectNull(Object)",2,2,2
"org.apache.derby.iapi.types.SQLBinary.readBinaryLength(ObjectInput)",4,4,9
"org.apache.derby.iapi.types.SQLBinary.readExternal(ObjectInput)",1,2,2
"org.apache.derby.iapi.types.SQLBinary.readExternalFromArray(ArrayInputStream)",1,2,2
"org.apache.derby.iapi.types.SQLBinary.readFromStream(InputStream)",3,3,5
"org.apache.derby.iapi.types.SQLBinary.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLBinary.returnStream()",1,1,1
"org.apache.derby.iapi.types.SQLBinary.setFrom(DataValueDescriptor)",1,2,2
"org.apache.derby.iapi.types.SQLBinary.setInto(PreparedStatement,int)",1,1,1
"org.apache.derby.iapi.types.SQLBinary.setStream(InputStream)",1,1,1
"org.apache.derby.iapi.types.SQLBinary.setValue(InputStream,int)",1,1,1
"org.apache.derby.iapi.types.SQLBinary.setValue(byte[])",1,1,1
"org.apache.derby.iapi.types.SQLBinary.substring(NumberDataValue,NumberDataValue,ConcatableDataValue,int)",5,16,20
"org.apache.derby.iapi.types.SQLBinary.toString()",3,4,4
"org.apache.derby.iapi.types.SQLBinary.writeExternal(ObjectOutput)",1,3,3
"org.apache.derby.iapi.types.SQLBit.SQLBit()",1,1,1
"org.apache.derby.iapi.types.SQLBit.SQLBit(byte[])",1,1,1
"org.apache.derby.iapi.types.SQLBit.getMaxMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLBit.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLBit.getObject()",1,1,1
"org.apache.derby.iapi.types.SQLBit.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLBit.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLBit.normalize(DataTypeDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLBit.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLBit.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLBit.setWidth(int,int,boolean)",7,6,7
"org.apache.derby.iapi.types.SQLBit.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLBlob.SQLBlob()",1,1,1
"org.apache.derby.iapi.types.SQLBlob.SQLBlob(byte[])",1,1,1
"org.apache.derby.iapi.types.SQLBlob.getMaxMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLBlob.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLBlob.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLBlob.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLBlob.isLengthLess()",1,1,2
"org.apache.derby.iapi.types.SQLBlob.normalize(DataTypeDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLBlob.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLBlob.setObject(Object)",2,3,4
"org.apache.derby.iapi.types.SQLBlob.setValueFromResultSet(ResultSet,int,boolean)",1,2,2
"org.apache.derby.iapi.types.SQLBlob.setWidth(int,int,boolean)",5,3,5
"org.apache.derby.iapi.types.SQLBlob.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.SQLBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.SQLBoolean(Boolean)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.SQLBoolean(boolean)",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.SQLBoolean(boolean,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.and(BooleanDataValue)",2,4,4
"org.apache.derby.iapi.types.SQLBoolean.compare(DataValueDescriptor)",7,2,9
"org.apache.derby.iapi.types.SQLBoolean.compare(int,DataValueDescriptor,boolean,boolean)",3,3,4
"org.apache.derby.iapi.types.SQLBoolean.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.equals(boolean)",2,1,2
"org.apache.derby.iapi.types.SQLBoolean.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.falseTruthValue()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getByte()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getDouble()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getFloat()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getImmutable()",2,1,3
"org.apache.derby.iapi.types.SQLBoolean.getInt()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getLong()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getObject()",2,1,2
"org.apache.derby.iapi.types.SQLBoolean.getShort()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getString()",3,1,3
"org.apache.derby.iapi.types.SQLBoolean.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,2
"org.apache.derby.iapi.types.SQLBoolean.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,1,2
"org.apache.derby.iapi.types.SQLBoolean.hashCode()",2,1,3
"org.apache.derby.iapi.types.SQLBoolean.is(BooleanDataValue)",4,4,7
"org.apache.derby.iapi.types.SQLBoolean.isNot(BooleanDataValue)",2,1,2
"org.apache.derby.iapi.types.SQLBoolean.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,2
"org.apache.derby.iapi.types.SQLBoolean.lessThan(DataValueDescriptor,DataValueDescriptor)",1,1,2
"org.apache.derby.iapi.types.SQLBoolean.makeInt(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLBoolean.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.or(BooleanDataValue)",2,4,4
"org.apache.derby.iapi.types.SQLBoolean.readExternal(ObjectInput)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.readExternalFromArray(ArrayInputStream)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.recycle()",2,1,2
"org.apache.derby.iapi.types.SQLBoolean.restoreToNull()",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.setBigDecimal(Number)",1,3,3
"org.apache.derby.iapi.types.SQLBoolean.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLBoolean.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.setValue(Boolean)",1,3,3
"org.apache.derby.iapi.types.SQLBoolean.setValue(String)",4,5,5
"org.apache.derby.iapi.types.SQLBoolean.setValue(boolean)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.setValue(byte)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.setValue(byte[])",4,2,5
"org.apache.derby.iapi.types.SQLBoolean.setValue(double)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.setValue(float)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.setValue(int)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.setValue(long)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.setValue(short)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.setValueCore(Number)",1,3,3
"org.apache.derby.iapi.types.SQLBoolean.setValueFromResultSet(ResultSet,int,boolean)",1,2,2
"org.apache.derby.iapi.types.SQLBoolean.throwExceptionIfFalse(String,String,String)",2,3,3
"org.apache.derby.iapi.types.SQLBoolean.toString()",3,1,3
"org.apache.derby.iapi.types.SQLBoolean.trueTruthValue()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.truthValue(DataValueDescriptor,DataValueDescriptor,Boolean)",3,4,5
"org.apache.derby.iapi.types.SQLBoolean.truthValue(DataValueDescriptor,DataValueDescriptor,boolean)",3,3,4
"org.apache.derby.iapi.types.SQLBoolean.truthValue(boolean)",2,1,2
"org.apache.derby.iapi.types.SQLBoolean.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.unknownTruthValue()",1,1,1
"org.apache.derby.iapi.types.SQLBoolean.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLChar.SQLChar()",1,1,1
"org.apache.derby.iapi.types.SQLChar.SQLChar(String)",1,1,1
"org.apache.derby.iapi.types.SQLChar.ansiTrim(int,StringDataValue,StringDataValue)",3,5,5
"org.apache.derby.iapi.types.SQLChar.appendBlanks(char[],int,int)",1,2,3
"org.apache.derby.iapi.types.SQLChar.charLength(NumberDataValue)",2,2,3
"org.apache.derby.iapi.types.SQLChar.cloneObject()",2,2,2
"org.apache.derby.iapi.types.SQLChar.compare(DataValueDescriptor)",2,2,2
"org.apache.derby.iapi.types.SQLChar.compare(int,DataValueDescriptor,boolean,boolean)",4,4,5
"org.apache.derby.iapi.types.SQLChar.concatenate(StringDataValue,StringDataValue,StringDataValue)",2,5,5
"org.apache.derby.iapi.types.SQLChar.copyState(SQLChar)",1,1,1
"org.apache.derby.iapi.types.SQLChar.equals(DataValueDescriptor,DataValueDescriptor)",1,2,3
"org.apache.derby.iapi.types.SQLChar.estimateMemoryUsage()",1,1,2
"org.apache.derby.iapi.types.SQLChar.formatJDBCDate(Calendar,StringBuffer)",1,1,1
"org.apache.derby.iapi.types.SQLChar.formatJDBCTime(Calendar,StringBuffer)",1,1,1
"org.apache.derby.iapi.types.SQLChar.getBoolean()",2,2,3
"org.apache.derby.iapi.types.SQLChar.getByte()",2,2,3
"org.apache.derby.iapi.types.SQLChar.getCharArray()",3,3,3
"org.apache.derby.iapi.types.SQLChar.getClone()",1,3,3
"org.apache.derby.iapi.types.SQLChar.getCollationKey()",4,2,6
"org.apache.derby.iapi.types.SQLChar.getCollatorForCollation()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getDate(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLChar.getDate(Calendar,String,LocaleFinder)",2,1,2
"org.apache.derby.iapi.types.SQLChar.getDateFormat()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getDateFormat(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLChar.getDouble()",2,2,3
"org.apache.derby.iapi.types.SQLChar.getFloat()",2,2,3
"org.apache.derby.iapi.types.SQLChar.getInt()",2,2,3
"org.apache.derby.iapi.types.SQLChar.getLength()",2,2,3
"org.apache.derby.iapi.types.SQLChar.getLocale()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getLocaleFinder()",1,3,3
"org.apache.derby.iapi.types.SQLChar.getLong()",2,2,3
"org.apache.derby.iapi.types.SQLChar.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getNewVarchar()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getObject()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getShort()",2,2,3
"org.apache.derby.iapi.types.SQLChar.getStream()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getString()",4,6,7
"org.apache.derby.iapi.types.SQLChar.getTime(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLChar.getTime(Calendar,String,LocaleFinder)",2,1,2
"org.apache.derby.iapi.types.SQLChar.getTimeFormat()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getTimeFormat(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLChar.getTimestamp(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLChar.getTimestamp(Calendar,String,LocaleFinder)",2,1,2
"org.apache.derby.iapi.types.SQLChar.getTimestampFormat()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getTimestampFormat(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLChar.getTraceString()",2,1,2
"org.apache.derby.iapi.types.SQLChar.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLChar.getValue(RuleBasedCollator)",2,2,2
"org.apache.derby.iapi.types.SQLChar.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,2,3
"org.apache.derby.iapi.types.SQLChar.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,2,3
"org.apache.derby.iapi.types.SQLChar.growBy()",1,1,1
"org.apache.derby.iapi.types.SQLChar.hasNonBlankChars(String,int,int)",3,3,3
"org.apache.derby.iapi.types.SQLChar.hashCode()",2,5,7
"org.apache.derby.iapi.types.SQLChar.isNull()",1,1,3
"org.apache.derby.iapi.types.SQLChar.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,2,3
"org.apache.derby.iapi.types.SQLChar.lessThan(DataValueDescriptor,DataValueDescriptor)",1,2,3
"org.apache.derby.iapi.types.SQLChar.like(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLChar.like(DataValueDescriptor,DataValueDescriptor)",3,4,6
"org.apache.derby.iapi.types.SQLChar.loadStream()",1,1,1
"org.apache.derby.iapi.types.SQLChar.locate(StringDataValue,NumberDataValue,NumberDataValue)",4,6,7
"org.apache.derby.iapi.types.SQLChar.lower(StringDataValue)",2,3,3
"org.apache.derby.iapi.types.SQLChar.normalize(DataTypeDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLChar.normalize(DataTypeDescriptor,String)",3,3,5
"org.apache.derby.iapi.types.SQLChar.notEquals(DataValueDescriptor,DataValueDescriptor)",1,2,3
"org.apache.derby.iapi.types.SQLChar.readExternal(ObjectInput)",11,7,25
"org.apache.derby.iapi.types.SQLChar.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLChar.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLChar.returnStream()",1,1,1
"org.apache.derby.iapi.types.SQLChar.setBigDecimal(Number)",1,2,2
"org.apache.derby.iapi.types.SQLChar.setDateFormatCalendar(DateFormat,Calendar)",1,3,3
"org.apache.derby.iapi.types.SQLChar.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setInto(PreparedStatement,int)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setLocaleFinder(LocaleFinder)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setObjectForCast(Object,boolean,String)",2,3,3
"org.apache.derby.iapi.types.SQLChar.setStream(InputStream)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValue(Date,Calendar)",1,3,3
"org.apache.derby.iapi.types.SQLChar.setValue(InputStream,int)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValue(String)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValue(Time,Calendar)",1,3,3
"org.apache.derby.iapi.types.SQLChar.setValue(Timestamp,Calendar)",1,6,6
"org.apache.derby.iapi.types.SQLChar.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLChar.setValue(byte)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValue(byte[])",2,2,4
"org.apache.derby.iapi.types.SQLChar.setValue(double)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValue(float)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValue(int)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValue(long)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValue(short)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLChar.setWidth(int,int,boolean)",2,6,8
"org.apache.derby.iapi.types.SQLChar.stringCompare(SQLChar,SQLChar)",1,1,1
"org.apache.derby.iapi.types.SQLChar.stringCompare(String,String)",11,3,14
"org.apache.derby.iapi.types.SQLChar.stringCompare(char[],int,char[],int)",11,1,14
"org.apache.derby.iapi.types.SQLChar.substring(NumberDataValue,NumberDataValue,ConcatableDataValue,int)",7,16,21
"org.apache.derby.iapi.types.SQLChar.toString()",4,3,6
"org.apache.derby.iapi.types.SQLChar.trimInternal(int,char,String)",10,5,12
"org.apache.derby.iapi.types.SQLChar.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLChar.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.SQLChar.upper(StringDataValue)",2,3,3
"org.apache.derby.iapi.types.SQLChar.writeExternal(ObjectOutput)",1,10,16
"org.apache.derby.iapi.types.SQLClob.SQLClob()",1,1,1
"org.apache.derby.iapi.types.SQLClob.SQLClob(String)",1,1,1
"org.apache.derby.iapi.types.SQLClob.getBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getByte()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getBytes()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getClone()",1,3,3
"org.apache.derby.iapi.types.SQLClob.getDate(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLClob.getDouble()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getFloat()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getInt()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getLong()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getObject()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getShort()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getTime(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLClob.getTimestamp(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLClob.getTraceString()",3,2,3
"org.apache.derby.iapi.types.SQLClob.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLClob.getValue(RuleBasedCollator)",2,2,2
"org.apache.derby.iapi.types.SQLClob.normalize(DataTypeDescriptor,DataValueDescriptor)",3,3,3
"org.apache.derby.iapi.types.SQLClob.setBigDecimal(Number)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setObject(Object)",2,3,4
"org.apache.derby.iapi.types.SQLClob.setValue(Date,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(Time,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(Timestamp,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(boolean)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(byte)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(byte[])",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(double)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(float)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(int)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(long)",1,1,1
"org.apache.derby.iapi.types.SQLClob.setValue(short)",1,1,1
"org.apache.derby.iapi.types.SQLClob.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLClob.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.SQLDate.SQLDate()",1,1,1
"org.apache.derby.iapi.types.SQLDate.SQLDate(Date)",1,1,1
"org.apache.derby.iapi.types.SQLDate.SQLDate(String,boolean,LocaleFinder)",1,1,1
"org.apache.derby.iapi.types.SQLDate.SQLDate(String,boolean,LocaleFinder,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLDate.SQLDate(int)",1,1,1
"org.apache.derby.iapi.types.SQLDate.compare(DataValueDescriptor)",5,3,9
"org.apache.derby.iapi.types.SQLDate.compare(int,DataValueDescriptor,boolean,boolean)",3,3,4
"org.apache.derby.iapi.types.SQLDate.computeDateFunction(DataValueDescriptor,DataValueFactory)",10,10,13
"org.apache.derby.iapi.types.SQLDate.computeEncodedDate(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLDate.computeEncodedDate(Date)",1,1,1
"org.apache.derby.iapi.types.SQLDate.computeEncodedDate(Date,Calendar)",2,1,3
"org.apache.derby.iapi.types.SQLDate.computeEncodedDate(int,int,int)",3,3,12
"org.apache.derby.iapi.types.SQLDate.dateToString(int,int,int,StringBuffer)",1,4,4
"org.apache.derby.iapi.types.SQLDate.encodedDateToString(int)",1,1,1
"org.apache.derby.iapi.types.SQLDate.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLDate.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLDate.getDate(Calendar)",2,1,2
"org.apache.derby.iapi.types.SQLDate.getDate(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLDate.getDay(int)",1,1,1
"org.apache.derby.iapi.types.SQLDate.getEncodedDate()",1,1,1
"org.apache.derby.iapi.types.SQLDate.getHours(NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLDate.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLDate.getMinutes(NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLDate.getMonth(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLDate.getMonth(int)",1,1,1
"org.apache.derby.iapi.types.SQLDate.getNationalString(LocaleFinder)",2,2,2
"org.apache.derby.iapi.types.SQLDate.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLDate.getObject()",1,1,1
"org.apache.derby.iapi.types.SQLDate.getSeconds(NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLDate.getString()",2,5,5
"org.apache.derby.iapi.types.SQLDate.getTimeInMillis(Calendar)",1,1,2
"org.apache.derby.iapi.types.SQLDate.getTimestamp(Calendar)",2,1,2
"org.apache.derby.iapi.types.SQLDate.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLDate.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLDate.getYear(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLDate.getYear(int)",1,1,1
"org.apache.derby.iapi.types.SQLDate.hashCode()",1,1,1
"org.apache.derby.iapi.types.SQLDate.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLDate.nullValueInt()",1,1,1
"org.apache.derby.iapi.types.SQLDate.parseDate(Date)",1,1,1
"org.apache.derby.iapi.types.SQLDate.parseDate(String,boolean,LocaleFinder,Calendar)",4,8,15
"org.apache.derby.iapi.types.SQLDate.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLDate.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLDate.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLDate.setDateInCalendar(Calendar,int)",1,1,1
"org.apache.derby.iapi.types.SQLDate.setFrom(DataValueDescriptor)",1,2,2
"org.apache.derby.iapi.types.SQLDate.setInto(PreparedStatement,int)",1,1,1
"org.apache.derby.iapi.types.SQLDate.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLDate.setSource(int,NumberDataValue)",1,1,2
"org.apache.derby.iapi.types.SQLDate.setValue(Date,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLDate.setValue(String)",1,3,3
"org.apache.derby.iapi.types.SQLDate.setValue(Timestamp,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLDate.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLDate.timestampAdd(int,NumberDataValue,Date,DateTimeDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLDate.timestampDiff(int,DateTimeDataValue,Date,NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLDate.toString()",2,2,2
"org.apache.derby.iapi.types.SQLDate.toTimestamp()",1,1,1
"org.apache.derby.iapi.types.SQLDate.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLDate.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLDecimal.SQLDecimal()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.SQLDecimal(BigDecimal)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.SQLDecimal(BigDecimal,int,int)",1,2,3
"org.apache.derby.iapi.types.SQLDecimal.SQLDecimal(String)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.divide(NumberDataValue,NumberDataValue,NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.divide(NumberDataValue,NumberDataValue,NumberDataValue,int)",3,5,6
"org.apache.derby.iapi.types.SQLDecimal.estimateMemoryUsage()",1,2,3
"org.apache.derby.iapi.types.SQLDecimal.getBigDecimal()",1,1,3
"org.apache.derby.iapi.types.SQLDecimal.getBigDecimal(DataValueDescriptor)",5,9,9
"org.apache.derby.iapi.types.SQLDecimal.getBoolean()",2,1,2
"org.apache.derby.iapi.types.SQLDecimal.getByte()",3,1,5
"org.apache.derby.iapi.types.SQLDecimal.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.getDecimalValuePrecision()",2,1,2
"org.apache.derby.iapi.types.SQLDecimal.getDecimalValueScale()",4,1,4
"org.apache.derby.iapi.types.SQLDecimal.getDouble()",2,1,2
"org.apache.derby.iapi.types.SQLDecimal.getFloat()",2,1,2
"org.apache.derby.iapi.types.SQLDecimal.getInt()",3,1,5
"org.apache.derby.iapi.types.SQLDecimal.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.getLong()",3,3,4
"org.apache.derby.iapi.types.SQLDecimal.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.getObject()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.getShort()",3,1,5
"org.apache.derby.iapi.types.SQLDecimal.getString()",5,4,7
"org.apache.derby.iapi.types.SQLDecimal.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.getWholeDigits(BigDecimal)",5,4,8
"org.apache.derby.iapi.types.SQLDecimal.hashCode()",1,4,4
"org.apache.derby.iapi.types.SQLDecimal.isNegative()",1,2,2
"org.apache.derby.iapi.types.SQLDecimal.isNull()",1,1,2
"org.apache.derby.iapi.types.SQLDecimal.minus(NumberDataValue)",2,2,3
"org.apache.derby.iapi.types.SQLDecimal.minus(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLDecimal.normalize(DataTypeDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.plus(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLDecimal.readExternal(ObjectInput)",1,1,3
"org.apache.derby.iapi.types.SQLDecimal.readExternalFromArray(ArrayInputStream)",1,1,3
"org.apache.derby.iapi.types.SQLDecimal.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setBigDecimal(Number)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setCoreValue(BigDecimal)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setCoreValue(double)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLDecimal.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setValue(Number)",1,4,7
"org.apache.derby.iapi.types.SQLDecimal.setValue(String)",2,3,3
"org.apache.derby.iapi.types.SQLDecimal.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLDecimal.setValue(double)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setValue(float)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setValue(int)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setValue(long)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.setWidth(int,int,boolean)",3,3,4
"org.apache.derby.iapi.types.SQLDecimal.times(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLDecimal.toString()",2,2,2
"org.apache.derby.iapi.types.SQLDecimal.typeCompare(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.SQLDecimal.writeExternal(ObjectOutput)",1,6,6
"org.apache.derby.iapi.types.SQLDouble.SQLDouble()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.SQLDouble(Double)",1,2,2
"org.apache.derby.iapi.types.SQLDouble.SQLDouble(double)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.SQLDouble(double,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.divide(NumberDataValue,NumberDataValue,NumberDataValue)",5,6,8
"org.apache.derby.iapi.types.SQLDouble.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.getBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.getByte()",2,2,3
"org.apache.derby.iapi.types.SQLDouble.getClone()",1,3,3
"org.apache.derby.iapi.types.SQLDouble.getDouble()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.getFloat()",2,2,2
"org.apache.derby.iapi.types.SQLDouble.getInt()",2,2,3
"org.apache.derby.iapi.types.SQLDouble.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.getLong()",2,2,3
"org.apache.derby.iapi.types.SQLDouble.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.getObject()",2,1,2
"org.apache.derby.iapi.types.SQLDouble.getShort()",2,2,3
"org.apache.derby.iapi.types.SQLDouble.getString()",2,2,2
"org.apache.derby.iapi.types.SQLDouble.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.hashCode()",1,2,2
"org.apache.derby.iapi.types.SQLDouble.isNegative()",1,2,2
"org.apache.derby.iapi.types.SQLDouble.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.lessThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.minus(NumberDataValue)",2,2,3
"org.apache.derby.iapi.types.SQLDouble.minus(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLDouble.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.plus(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLDouble.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.setBigDecimal(Number)",2,1,2
"org.apache.derby.iapi.types.SQLDouble.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLDouble.setInto(ResultSet,int)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.setValue(Number)",2,3,4
"org.apache.derby.iapi.types.SQLDouble.setValue(String)",2,3,3
"org.apache.derby.iapi.types.SQLDouble.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLDouble.setValue(double)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.setValue(float)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.setValue(int)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.setValue(long)",1,1,1
"org.apache.derby.iapi.types.SQLDouble.setValueFromResultSet(ResultSet,int,boolean)",1,3,3
"org.apache.derby.iapi.types.SQLDouble.times(NumberDataValue,NumberDataValue,NumberDataValue)",3,4,7
"org.apache.derby.iapi.types.SQLDouble.toString()",2,2,2
"org.apache.derby.iapi.types.SQLDouble.typeCompare(DataValueDescriptor)",3,1,3
"org.apache.derby.iapi.types.SQLDouble.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.SQLDouble.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLInteger.SQLInteger()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.SQLInteger(Integer)",1,2,2
"org.apache.derby.iapi.types.SQLInteger.SQLInteger(char)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.SQLInteger(int)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getByte()",2,2,3
"org.apache.derby.iapi.types.SQLInteger.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getDouble()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getFloat()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getInt()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getLong()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getObject()",2,1,2
"org.apache.derby.iapi.types.SQLInteger.getShort()",2,2,3
"org.apache.derby.iapi.types.SQLInteger.getString()",2,2,2
"org.apache.derby.iapi.types.SQLInteger.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.hashCode()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.isNegative()",1,2,2
"org.apache.derby.iapi.types.SQLInteger.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.lessThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.minus(NumberDataValue)",3,3,4
"org.apache.derby.iapi.types.SQLInteger.mod(NumberDataValue,NumberDataValue,NumberDataValue)",3,4,5
"org.apache.derby.iapi.types.SQLInteger.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLInteger.setInto(ResultSet,int)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.setValue(String)",2,3,3
"org.apache.derby.iapi.types.SQLInteger.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLInteger.setValue(double)",2,2,3
"org.apache.derby.iapi.types.SQLInteger.setValue(float)",2,2,3
"org.apache.derby.iapi.types.SQLInteger.setValue(int)",1,1,1
"org.apache.derby.iapi.types.SQLInteger.setValue(long)",2,2,3
"org.apache.derby.iapi.types.SQLInteger.setValueFromResultSet(ResultSet,int,boolean)",1,3,3
"org.apache.derby.iapi.types.SQLInteger.times(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLInteger.toString()",2,2,2
"org.apache.derby.iapi.types.SQLInteger.typeCompare(DataValueDescriptor)",3,1,3
"org.apache.derby.iapi.types.SQLInteger.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLInteger.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLLongVarbit.SQLLongVarbit()",1,1,1
"org.apache.derby.iapi.types.SQLLongVarbit.SQLLongVarbit(byte[])",1,1,1
"org.apache.derby.iapi.types.SQLLongVarbit.getMaxMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLLongVarbit.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLLongVarbit.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLLongVarbit.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLLongVarbit.normalize(DataTypeDescriptor,DataValueDescriptor)",1,2,2
"org.apache.derby.iapi.types.SQLLongVarbit.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.SQLLongint()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.SQLLongint(Long)",1,2,2
"org.apache.derby.iapi.types.SQLLongint.SQLLongint(long)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.SQLLongint(long,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.divide(NumberDataValue,NumberDataValue,NumberDataValue)",3,4,5
"org.apache.derby.iapi.types.SQLLongint.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getByte()",2,2,3
"org.apache.derby.iapi.types.SQLLongint.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getDouble()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getFloat()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getInt()",2,2,3
"org.apache.derby.iapi.types.SQLLongint.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getLong()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getObject()",2,1,2
"org.apache.derby.iapi.types.SQLLongint.getShort()",2,2,3
"org.apache.derby.iapi.types.SQLLongint.getString()",2,2,2
"org.apache.derby.iapi.types.SQLLongint.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.hashCode()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.isNegative()",1,2,2
"org.apache.derby.iapi.types.SQLLongint.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.lessThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.minus(NumberDataValue)",3,3,4
"org.apache.derby.iapi.types.SQLLongint.minus(NumberDataValue,NumberDataValue,NumberDataValue)",4,5,6
"org.apache.derby.iapi.types.SQLLongint.mod(NumberDataValue,NumberDataValue,NumberDataValue)",3,4,5
"org.apache.derby.iapi.types.SQLLongint.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.plus(NumberDataValue,NumberDataValue,NumberDataValue)",4,5,6
"org.apache.derby.iapi.types.SQLLongint.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLLongint.setInto(ResultSet,int)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.setValue(Number)",2,3,4
"org.apache.derby.iapi.types.SQLLongint.setValue(String)",2,3,3
"org.apache.derby.iapi.types.SQLLongint.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLLongint.setValue(double)",2,2,3
"org.apache.derby.iapi.types.SQLLongint.setValue(float)",2,2,3
"org.apache.derby.iapi.types.SQLLongint.setValue(int)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.setValue(long)",1,1,1
"org.apache.derby.iapi.types.SQLLongint.setValueFromResultSet(ResultSet,int,boolean)",1,3,3
"org.apache.derby.iapi.types.SQLLongint.times(NumberDataValue,NumberDataValue,NumberDataValue)",3,5,6
"org.apache.derby.iapi.types.SQLLongint.toString()",2,2,2
"org.apache.derby.iapi.types.SQLLongint.typeCompare(DataValueDescriptor)",3,1,3
"org.apache.derby.iapi.types.SQLLongint.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLLongint.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLLongvarchar.SQLLongvarchar()",1,1,1
"org.apache.derby.iapi.types.SQLLongvarchar.SQLLongvarchar(String)",1,1,1
"org.apache.derby.iapi.types.SQLLongvarchar.concatenate(StringDataValue,StringDataValue,StringDataValue)",2,3,3
"org.apache.derby.iapi.types.SQLLongvarchar.getClone()",1,3,3
"org.apache.derby.iapi.types.SQLLongvarchar.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLLongvarchar.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLLongvarchar.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLLongvarchar.getValue(RuleBasedCollator)",2,2,2
"org.apache.derby.iapi.types.SQLLongvarchar.normalize(DataTypeDescriptor,String)",2,2,2
"org.apache.derby.iapi.types.SQLLongvarchar.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLReal.SQLReal()",1,1,1
"org.apache.derby.iapi.types.SQLReal.SQLReal(Float)",1,2,2
"org.apache.derby.iapi.types.SQLReal.SQLReal(float)",1,1,1
"org.apache.derby.iapi.types.SQLReal.divide(NumberDataValue,NumberDataValue,NumberDataValue)",5,6,8
"org.apache.derby.iapi.types.SQLReal.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLReal.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLReal.getBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLReal.getByte()",2,2,3
"org.apache.derby.iapi.types.SQLReal.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLReal.getDouble()",1,1,1
"org.apache.derby.iapi.types.SQLReal.getFloat()",1,1,1
"org.apache.derby.iapi.types.SQLReal.getInt()",2,2,3
"org.apache.derby.iapi.types.SQLReal.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLReal.getLong()",2,2,3
"org.apache.derby.iapi.types.SQLReal.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLReal.getObject()",2,1,2
"org.apache.derby.iapi.types.SQLReal.getShort()",2,2,3
"org.apache.derby.iapi.types.SQLReal.getString()",2,2,2
"org.apache.derby.iapi.types.SQLReal.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLReal.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLReal.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLReal.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLReal.hashCode()",1,2,2
"org.apache.derby.iapi.types.SQLReal.isNegative()",1,2,2
"org.apache.derby.iapi.types.SQLReal.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLReal.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLReal.lessThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLReal.minus(NumberDataValue)",2,2,3
"org.apache.derby.iapi.types.SQLReal.minus(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLReal.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLReal.plus(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLReal.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLReal.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLReal.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLReal.setBigDecimal(Number)",2,1,2
"org.apache.derby.iapi.types.SQLReal.setFrom(DataValueDescriptor)",1,3,3
"org.apache.derby.iapi.types.SQLReal.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLReal.setInto(ResultSet,int)",1,1,1
"org.apache.derby.iapi.types.SQLReal.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLReal.setValue(Number)",2,3,4
"org.apache.derby.iapi.types.SQLReal.setValue(String)",2,3,3
"org.apache.derby.iapi.types.SQLReal.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLReal.setValue(double)",2,2,3
"org.apache.derby.iapi.types.SQLReal.setValue(float)",1,1,1
"org.apache.derby.iapi.types.SQLReal.setValue(int)",1,1,1
"org.apache.derby.iapi.types.SQLReal.setValue(long)",1,1,1
"org.apache.derby.iapi.types.SQLReal.setValueFromResultSet(ResultSet,int,boolean)",1,3,3
"org.apache.derby.iapi.types.SQLReal.times(NumberDataValue,NumberDataValue,NumberDataValue)",3,4,7
"org.apache.derby.iapi.types.SQLReal.toString()",2,2,2
"org.apache.derby.iapi.types.SQLReal.typeCompare(DataValueDescriptor)",3,1,3
"org.apache.derby.iapi.types.SQLReal.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLReal.typeToBigDecimal()",1,1,1
"org.apache.derby.iapi.types.SQLReal.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLRef.SQLRef()",1,1,1
"org.apache.derby.iapi.types.SQLRef.SQLRef(RowLocation)",1,1,1
"org.apache.derby.iapi.types.SQLRef.compare(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLRef.compare(int,DataValueDescriptor,boolean,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLRef.estimateMemoryUsage()",1,2,2
"org.apache.derby.iapi.types.SQLRef.getClone()",2,2,2
"org.apache.derby.iapi.types.SQLRef.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLRef.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLRef.getObject()",1,1,1
"org.apache.derby.iapi.types.SQLRef.getString()",2,2,2
"org.apache.derby.iapi.types.SQLRef.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLRef.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLRef.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLRef.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLRef.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLRef.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLRef.setFrom(DataValueDescriptor)",1,2,2
"org.apache.derby.iapi.types.SQLRef.setInto(PreparedStatement,int)",1,2,2
"org.apache.derby.iapi.types.SQLRef.setValue(RowLocation)",1,1,1
"org.apache.derby.iapi.types.SQLRef.setValueFromResultSet(ResultSet,int,boolean)",1,2,2
"org.apache.derby.iapi.types.SQLRef.toString()",2,2,2
"org.apache.derby.iapi.types.SQLRef.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLSmallint.SQLSmallint()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.SQLSmallint(short)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.SQLSmallint(short,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getByte()",2,2,3
"org.apache.derby.iapi.types.SQLSmallint.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getDouble()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getFloat()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getInt()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getLong()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getObject()",2,1,2
"org.apache.derby.iapi.types.SQLSmallint.getShort()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getString()",2,2,2
"org.apache.derby.iapi.types.SQLSmallint.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.hashCode()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.isNegative()",1,2,2
"org.apache.derby.iapi.types.SQLSmallint.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.lessThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.minus(NumberDataValue)",2,2,3
"org.apache.derby.iapi.types.SQLSmallint.mod(NumberDataValue,NumberDataValue,NumberDataValue)",3,4,5
"org.apache.derby.iapi.types.SQLSmallint.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLSmallint.setInto(ResultSet,int)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.setValue(String)",2,3,3
"org.apache.derby.iapi.types.SQLSmallint.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLSmallint.setValue(byte)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.setValue(double)",2,2,3
"org.apache.derby.iapi.types.SQLSmallint.setValue(float)",2,2,3
"org.apache.derby.iapi.types.SQLSmallint.setValue(int)",2,2,3
"org.apache.derby.iapi.types.SQLSmallint.setValue(long)",2,2,3
"org.apache.derby.iapi.types.SQLSmallint.setValue(short)",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.setValueFromResultSet(ResultSet,int,boolean)",1,3,3
"org.apache.derby.iapi.types.SQLSmallint.times(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLSmallint.toString()",2,2,2
"org.apache.derby.iapi.types.SQLSmallint.typeCompare(DataValueDescriptor)",3,1,3
"org.apache.derby.iapi.types.SQLSmallint.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLSmallint.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLTime.SQLTime()",1,1,1
"org.apache.derby.iapi.types.SQLTime.SQLTime(String,boolean,LocaleFinder)",1,1,1
"org.apache.derby.iapi.types.SQLTime.SQLTime(String,boolean,LocaleFinder,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLTime.SQLTime(Time)",1,1,1
"org.apache.derby.iapi.types.SQLTime.SQLTime(int,int)",1,1,1
"org.apache.derby.iapi.types.SQLTime.compare(DataValueDescriptor)",5,3,9
"org.apache.derby.iapi.types.SQLTime.compare(int,DataValueDescriptor,boolean,boolean)",3,3,4
"org.apache.derby.iapi.types.SQLTime.computeEncodedTime(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLTime.computeEncodedTime(Date)",1,1,1
"org.apache.derby.iapi.types.SQLTime.computeEncodedTime(Date,Calendar)",2,1,3
"org.apache.derby.iapi.types.SQLTime.computeEncodedTime(int,int,int)",4,4,10
"org.apache.derby.iapi.types.SQLTime.encodedTimeToString(int)",1,1,1
"org.apache.derby.iapi.types.SQLTime.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLTime.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLTime.getDate(NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLTime.getEncodedTime()",1,1,1
"org.apache.derby.iapi.types.SQLTime.getHour(int)",1,1,1
"org.apache.derby.iapi.types.SQLTime.getHours(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLTime.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLTime.getMinute(int)",1,1,1
"org.apache.derby.iapi.types.SQLTime.getMinutes(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLTime.getMonth(NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLTime.getNationalString(LocaleFinder)",2,2,2
"org.apache.derby.iapi.types.SQLTime.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLTime.getObject()",1,1,1
"org.apache.derby.iapi.types.SQLTime.getSecond(int)",1,1,1
"org.apache.derby.iapi.types.SQLTime.getSeconds(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLTime.getString()",2,5,5
"org.apache.derby.iapi.types.SQLTime.getTime(Calendar)",2,1,2
"org.apache.derby.iapi.types.SQLTime.getTime(Calendar,int,int)",1,1,2
"org.apache.derby.iapi.types.SQLTime.getTimestamp(Calendar)",2,3,3
"org.apache.derby.iapi.types.SQLTime.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLTime.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLTime.getYear(NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLTime.hashCode()",2,1,2
"org.apache.derby.iapi.types.SQLTime.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLTime.nullValueInt()",1,1,1
"org.apache.derby.iapi.types.SQLTime.parseTime(Date)",1,1,1
"org.apache.derby.iapi.types.SQLTime.parseTime(String,boolean,LocaleFinder,Calendar)",12,17,28
"org.apache.derby.iapi.types.SQLTime.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLTime.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLTime.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLTime.setFrom(DataValueDescriptor)",1,2,2
"org.apache.derby.iapi.types.SQLTime.setInto(PreparedStatement,int)",1,1,1
"org.apache.derby.iapi.types.SQLTime.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLTime.setTimeInCalendar(Calendar,int)",1,1,1
"org.apache.derby.iapi.types.SQLTime.setValue(String)",1,3,3
"org.apache.derby.iapi.types.SQLTime.setValue(Time,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLTime.setValue(Timestamp,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLTime.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLTime.timeToString(int,int,int,StringBuffer)",1,4,4
"org.apache.derby.iapi.types.SQLTime.timestampAdd(int,NumberDataValue,Date,DateTimeDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLTime.timestampDiff(int,DateTimeDataValue,Date,NumberDataValue)",1,1,1
"org.apache.derby.iapi.types.SQLTime.toString()",2,2,2
"org.apache.derby.iapi.types.SQLTime.toTimestamp(Date)",1,1,1
"org.apache.derby.iapi.types.SQLTime.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLTime.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLTimestamp.SQLTimestamp()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.SQLTimestamp(DataValueDescriptor,DataValueDescriptor)",2,6,8
"org.apache.derby.iapi.types.SQLTimestamp.SQLTimestamp(String,boolean,LocaleFinder)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.SQLTimestamp(String,boolean,LocaleFinder,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.SQLTimestamp(Timestamp)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.SQLTimestamp(int,int,int)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.addInternal(int,int,SQLTimestamp)",2,5,5
"org.apache.derby.iapi.types.SQLTimestamp.compare(DataValueDescriptor)",5,3,13
"org.apache.derby.iapi.types.SQLTimestamp.compare(int,DataValueDescriptor,boolean,boolean)",3,3,4
"org.apache.derby.iapi.types.SQLTimestamp.computeEncodedDate(Date,Calendar)",2,1,2
"org.apache.derby.iapi.types.SQLTimestamp.computeEncodedTime(Date,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.computeTimestampFunction(DataValueDescriptor,DataValueFactory)",5,5,6
"org.apache.derby.iapi.types.SQLTimestamp.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.getDate(Calendar)",2,1,3
"org.apache.derby.iapi.types.SQLTimestamp.getDate(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLTimestamp.getHours(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLTimestamp.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.getMinutes(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLTimestamp.getMonth(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLTimestamp.getNationalString(LocaleFinder)",2,2,2
"org.apache.derby.iapi.types.SQLTimestamp.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.getObject()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.getSeconds(NumberDataValue)",2,3,5
"org.apache.derby.iapi.types.SQLTimestamp.getString()",2,7,8
"org.apache.derby.iapi.types.SQLTimestamp.getTime(Calendar)",2,1,2
"org.apache.derby.iapi.types.SQLTimestamp.getTimestamp(Calendar)",2,1,3
"org.apache.derby.iapi.types.SQLTimestamp.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.getYear(NumberDataValue)",2,2,2
"org.apache.derby.iapi.types.SQLTimestamp.hashCode()",2,1,2
"org.apache.derby.iapi.types.SQLTimestamp.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.nullValueDouble()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.nullValueInt()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.parseDateOrTimestamp(DateTimeParser,boolean)",1,5,7
"org.apache.derby.iapi.types.SQLTimestamp.parseDateTimeInteger(String,int,int)",3,3,3
"org.apache.derby.iapi.types.SQLTimestamp.parseLocalTimestamp(String,LocaleFinder,Calendar)",1,4,4
"org.apache.derby.iapi.types.SQLTimestamp.parseTimestamp(String,boolean,LocaleFinder,Calendar)",2,1,5
"org.apache.derby.iapi.types.SQLTimestamp.promote(DateTimeDataValue,Date)",4,4,4
"org.apache.derby.iapi.types.SQLTimestamp.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.setCalendar(Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.setFrom(DataValueDescriptor)",1,2,2
"org.apache.derby.iapi.types.SQLTimestamp.setInto(PreparedStatement,int)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.setNumericTimestamp(Timestamp,Calendar)",1,3,4
"org.apache.derby.iapi.types.SQLTimestamp.setObject(Object)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.setValue(Date,Calendar)",1,2,3
"org.apache.derby.iapi.types.SQLTimestamp.setValue(String)",1,3,3
"org.apache.derby.iapi.types.SQLTimestamp.setValue(Timestamp,Calendar)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.timestampAdd(int,NumberDataValue,Date,DateTimeDataValue)",3,5,17
"org.apache.derby.iapi.types.SQLTimestamp.timestampDiff(int,DateTimeDataValue,Date,NumberDataValue)",17,14,33
"org.apache.derby.iapi.types.SQLTimestamp.toString()",2,2,2
"org.apache.derby.iapi.types.SQLTimestamp.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLTimestamp.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLTinyint.SQLTinyint()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.SQLTinyint(byte)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.SQLTinyint(byte,boolean)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.estimateMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getBoolean()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getByte()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getClone()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getDouble()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getFloat()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getInt()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getLength()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getLong()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getObject()",1,1,2
"org.apache.derby.iapi.types.SQLTinyint.getShort()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getString()",1,2,2
"org.apache.derby.iapi.types.SQLTinyint.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.greaterOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.greaterThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.hashCode()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.isNegative()",1,2,2
"org.apache.derby.iapi.types.SQLTinyint.isNull()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.lessOrEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.lessThan(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.minus(NumberDataValue)",2,2,3
"org.apache.derby.iapi.types.SQLTinyint.mod(NumberDataValue,NumberDataValue,NumberDataValue)",3,4,5
"org.apache.derby.iapi.types.SQLTinyint.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.setInto(PreparedStatement,int)",2,2,2
"org.apache.derby.iapi.types.SQLTinyint.setInto(ResultSet,int)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.setValue(String)",2,3,3
"org.apache.derby.iapi.types.SQLTinyint.setValue(boolean)",1,1,2
"org.apache.derby.iapi.types.SQLTinyint.setValue(byte)",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.setValue(double)",2,2,3
"org.apache.derby.iapi.types.SQLTinyint.setValue(float)",2,2,3
"org.apache.derby.iapi.types.SQLTinyint.setValue(int)",2,2,3
"org.apache.derby.iapi.types.SQLTinyint.setValue(long)",2,2,3
"org.apache.derby.iapi.types.SQLTinyint.setValue(short)",2,2,3
"org.apache.derby.iapi.types.SQLTinyint.setValueFromResultSet(ResultSet,int,boolean)",1,2,2
"org.apache.derby.iapi.types.SQLTinyint.times(NumberDataValue,NumberDataValue,NumberDataValue)",2,3,4
"org.apache.derby.iapi.types.SQLTinyint.toString()",2,2,2
"org.apache.derby.iapi.types.SQLTinyint.typeCompare(DataValueDescriptor)",3,1,3
"org.apache.derby.iapi.types.SQLTinyint.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLTinyint.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.SQLVarbit.SQLVarbit()",1,1,1
"org.apache.derby.iapi.types.SQLVarbit.SQLVarbit(byte[])",1,1,1
"org.apache.derby.iapi.types.SQLVarbit.getMaxMemoryUsage()",1,1,1
"org.apache.derby.iapi.types.SQLVarbit.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLVarbit.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLVarbit.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLVarbit.normalize(DataTypeDescriptor,DataValueDescriptor)",1,2,2
"org.apache.derby.iapi.types.SQLVarbit.setWidth(int,int,boolean)",6,5,6
"org.apache.derby.iapi.types.SQLVarbit.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SQLVarchar.SQLVarchar()",1,1,1
"org.apache.derby.iapi.types.SQLVarchar.SQLVarchar(String)",1,1,1
"org.apache.derby.iapi.types.SQLVarchar.getClone()",1,3,3
"org.apache.derby.iapi.types.SQLVarchar.getNewNull()",1,1,1
"org.apache.derby.iapi.types.SQLVarchar.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SQLVarchar.getTypeName()",1,1,1
"org.apache.derby.iapi.types.SQLVarchar.getValue(RuleBasedCollator)",2,2,2
"org.apache.derby.iapi.types.SQLVarchar.growBy()",1,1,1
"org.apache.derby.iapi.types.SQLVarchar.normalize(DataTypeDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.SQLVarchar.normalize(DataTypeDescriptor,String)",1,2,2
"org.apache.derby.iapi.types.SQLVarchar.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.SqlXmlUtil.SqlXmlUtil()",1,3,4
"org.apache.derby.iapi.types.SqlXmlUtil.XMLErrorHandler.error(SAXParseException)",1,1,1
"org.apache.derby.iapi.types.SqlXmlUtil.XMLErrorHandler.fatalError(SAXParseException)",1,1,1
"org.apache.derby.iapi.types.SqlXmlUtil.XMLErrorHandler.warning(SAXParseException)",1,1,1
"org.apache.derby.iapi.types.SqlXmlUtil.compileXQExpr(String,String)",1,2,2
"org.apache.derby.iapi.types.SqlXmlUtil.evalXQExpression(XMLDataValue,boolean,int[])",5,11,15
"org.apache.derby.iapi.types.SqlXmlUtil.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.SqlXmlUtil.getXPathContext()",1,1,2
"org.apache.derby.iapi.types.SqlXmlUtil.loadSerializer()",1,1,1
"org.apache.derby.iapi.types.SqlXmlUtil.readExternal(ObjectInput)",1,2,2
"org.apache.derby.iapi.types.SqlXmlUtil.serializeToString(ArrayList,XMLDataValue)",2,9,10
"org.apache.derby.iapi.types.SqlXmlUtil.serializeToString(String)",1,2,2
"org.apache.derby.iapi.types.SqlXmlUtil.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.TypeId.TypeId(int,BaseTypeIdImpl)",1,1,1
"org.apache.derby.iapi.types.TypeId.TypeId(int,BaseTypeIdImpl,boolean)",1,1,1
"org.apache.derby.iapi.types.TypeId.create(int,int)",1,1,1
"org.apache.derby.iapi.types.TypeId.equals(Object)",2,2,2
"org.apache.derby.iapi.types.TypeId.getApproximateLengthInBytes(DataTypeDescriptor)",16,10,16
"org.apache.derby.iapi.types.TypeId.getBaseTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.getBuiltInTypeId(String)",24,1,24
"org.apache.derby.iapi.types.TypeId.getBuiltInTypeId(int)",23,2,23
"org.apache.derby.iapi.types.TypeId.getClassNameWasDelimitedIdentifier()",1,1,1
"org.apache.derby.iapi.types.TypeId.getCorrespondingJavaTypeName()",1,3,3
"org.apache.derby.iapi.types.TypeId.getJDBCTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.getMaximumMaximumWidth()",1,1,1
"org.apache.derby.iapi.types.TypeId.getMaximumPrecision()",1,1,1
"org.apache.derby.iapi.types.TypeId.getMaximumScale()",1,1,1
"org.apache.derby.iapi.types.TypeId.getNull()",24,4,25
"org.apache.derby.iapi.types.TypeId.getPrecision(DataTypeDescriptor,DataTypeDescriptor)",1,3,4
"org.apache.derby.iapi.types.TypeId.getResultSetMetaDataTypeName()",3,3,5
"org.apache.derby.iapi.types.TypeId.getSQLTypeForJavaType(String)",18,22,23
"org.apache.derby.iapi.types.TypeId.getSQLTypeName()",1,1,1
"org.apache.derby.iapi.types.TypeId.getScale(DataTypeDescriptor,DataTypeDescriptor)",1,3,3
"org.apache.derby.iapi.types.TypeId.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.TypeId.getTypeId(TypeDescriptor)",3,2,3
"org.apache.derby.iapi.types.TypeId.getUserDefinedTypeId(String,boolean)",1,1,1
"org.apache.derby.iapi.types.TypeId.hashCode()",1,1,1
"org.apache.derby.iapi.types.TypeId.isBitTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isBlobTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isBooleanTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isClobTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isConcatableTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isDateTimeTimeStampTypeID()",1,1,3
"org.apache.derby.iapi.types.TypeId.isDateTimeTimeStampTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isDecimalTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isDoubleTypeId()",1,1,2
"org.apache.derby.iapi.types.TypeId.isFixedStringTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isFloatingPointTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isLOBTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isLongConcatableTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isLongVarbinaryTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isLongVarcharTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isNumericTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isRealTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isRefTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isStringTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isUserDefinedTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.isXMLTypeId()",1,1,1
"org.apache.derby.iapi.types.TypeId.orderable(ClassFactory)",3,2,5
"org.apache.derby.iapi.types.TypeId.setTypeIdSpecificInstanceVariables()",2,3,24
"org.apache.derby.iapi.types.TypeId.setUserTypeIdInfo()",1,1,1
"org.apache.derby.iapi.types.TypeId.streamStorable()",1,2,2
"org.apache.derby.iapi.types.TypeId.toParsableString(DataTypeDescriptor)",1,1,1
"org.apache.derby.iapi.types.TypeId.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.TypeId.userType()",1,1,1
"org.apache.derby.iapi.types.TypeId.variableLength()",3,2,3
"org.apache.derby.iapi.types.UserType.UserType()",1,1,1
"org.apache.derby.iapi.types.UserType.UserType(Object)",1,1,1
"org.apache.derby.iapi.types.UserType.compare(DataValueDescriptor)",5,3,9
"org.apache.derby.iapi.types.UserType.compare(int,DataValueDescriptor,boolean,boolean)",5,7,8
"org.apache.derby.iapi.types.UserType.equals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.UserType.estimateMemoryUsage()",1,2,2
"org.apache.derby.iapi.types.UserType.getBoolean()",3,3,3
"org.apache.derby.iapi.types.UserType.getByte()",3,3,3
"org.apache.derby.iapi.types.UserType.getBytes()",3,1,3
"org.apache.derby.iapi.types.UserType.getClone()",1,1,1
"org.apache.derby.iapi.types.UserType.getDate(Calendar)",4,4,4
"org.apache.derby.iapi.types.UserType.getDouble()",3,3,3
"org.apache.derby.iapi.types.UserType.getFloat()",3,3,3
"org.apache.derby.iapi.types.UserType.getInt()",3,3,3
"org.apache.derby.iapi.types.UserType.getLength()",1,1,1
"org.apache.derby.iapi.types.UserType.getLong()",3,3,3
"org.apache.derby.iapi.types.UserType.getNewNull()",1,1,1
"org.apache.derby.iapi.types.UserType.getObject()",1,1,1
"org.apache.derby.iapi.types.UserType.getShort()",3,3,3
"org.apache.derby.iapi.types.UserType.getString()",2,2,2
"org.apache.derby.iapi.types.UserType.getTime(Calendar)",4,4,4
"org.apache.derby.iapi.types.UserType.getTimestamp(Calendar)",5,5,5
"org.apache.derby.iapi.types.UserType.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.UserType.getTypeName()",1,2,2
"org.apache.derby.iapi.types.UserType.getTypeName(String)",1,1,1
"org.apache.derby.iapi.types.UserType.hashCode()",2,1,2
"org.apache.derby.iapi.types.UserType.isNull()",1,1,1
"org.apache.derby.iapi.types.UserType.notEquals(DataValueDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.UserType.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.types.UserType.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.iapi.types.UserType.restoreToNull()",1,1,1
"org.apache.derby.iapi.types.UserType.setBigDecimal(Number)",1,1,1
"org.apache.derby.iapi.types.UserType.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.iapi.types.UserType.setValue(Object)",1,1,1
"org.apache.derby.iapi.types.UserType.setValue(String)",1,1,2
"org.apache.derby.iapi.types.UserType.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.iapi.types.UserType.toString()",2,2,2
"org.apache.derby.iapi.types.UserType.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.UserType.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.WorkHorseForCollatorDatatypes(RuleBasedCollator,SQLChar)",1,1,1
"org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.getCollationElementsForString()",3,5,7
"org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.getCollatorForCollation()",1,1,1
"org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.getCountOfCollationElements()",1,1,1
"org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.like(DataValueDescriptor)",1,2,2
"org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.like(DataValueDescriptor,DataValueDescriptor)",3,5,6
"org.apache.derby.iapi.types.WorkHorseForCollatorDatatypes.stringCompare(SQLChar,SQLChar)",4,1,5
"org.apache.derby.iapi.types.XML.XML()",1,1,1
"org.apache.derby.iapi.types.XML.XML(SQLChar,int,boolean)",1,3,3
"org.apache.derby.iapi.types.XML.XMLExists(SqlXmlUtil)",2,4,5
"org.apache.derby.iapi.types.XML.XMLParse(String,boolean,SqlXmlUtil)",1,4,5
"org.apache.derby.iapi.types.XML.XMLQuery(XMLDataValue,SqlXmlUtil)",2,4,6
"org.apache.derby.iapi.types.XML.XMLSerialize(StringDataValue,int,int,int)",6,8,12
"org.apache.derby.iapi.types.XML.checkXMLRequirements()",2,4,5
"org.apache.derby.iapi.types.XML.compare(DataValueDescriptor)",4,4,6
"org.apache.derby.iapi.types.XML.estimateMemoryUsage()",1,2,2
"org.apache.derby.iapi.types.XML.getClone()",1,1,1
"org.apache.derby.iapi.types.XML.getLength()",1,2,2
"org.apache.derby.iapi.types.XML.getNewNull()",1,1,1
"org.apache.derby.iapi.types.XML.getString()",1,2,2
"org.apache.derby.iapi.types.XML.getTypeFormatId()",1,1,1
"org.apache.derby.iapi.types.XML.getTypeName()",1,1,1
"org.apache.derby.iapi.types.XML.getXType()",1,1,1
"org.apache.derby.iapi.types.XML.hasTopLevelAttr()",1,1,1
"org.apache.derby.iapi.types.XML.isNull()",1,2,2
"org.apache.derby.iapi.types.XML.loadStream()",1,1,1
"org.apache.derby.iapi.types.XML.markAsHavingTopLevelAttr()",1,1,1
"org.apache.derby.iapi.types.XML.normalize(DataTypeDescriptor,DataValueDescriptor)",2,3,3
"org.apache.derby.iapi.types.XML.readExternal(ObjectInput)",1,1,2
"org.apache.derby.iapi.types.XML.readExternalFromArray(ArrayInputStream)",1,1,2
"org.apache.derby.iapi.types.XML.restoreToNull()",1,2,2
"org.apache.derby.iapi.types.XML.returnStream()",1,2,2
"org.apache.derby.iapi.types.XML.setFrom(DataValueDescriptor)",2,4,5
"org.apache.derby.iapi.types.XML.setStream(InputStream)",1,3,4
"org.apache.derby.iapi.types.XML.setValueFromResultSet(ResultSet,int,boolean)",2,5,6
"org.apache.derby.iapi.types.XML.setXType(int)",1,1,2
"org.apache.derby.iapi.types.XML.typePrecedence()",1,1,1
"org.apache.derby.iapi.types.XML.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.iapi.util.ByteArray.ByteArray()",1,1,1
"org.apache.derby.iapi.util.ByteArray.ByteArray(byte[])",1,1,1
"org.apache.derby.iapi.util.ByteArray.ByteArray(byte[],int,int)",1,1,1
"org.apache.derby.iapi.util.ByteArray.equals(Object)",2,2,2
"org.apache.derby.iapi.util.ByteArray.equals(byte[],int,int,byte[],int,int)",4,1,4
"org.apache.derby.iapi.util.ByteArray.getArray()",1,1,1
"org.apache.derby.iapi.util.ByteArray.getLength()",1,1,1
"org.apache.derby.iapi.util.ByteArray.getOffset()",1,1,1
"org.apache.derby.iapi.util.ByteArray.hashCode()",1,1,2
"org.apache.derby.iapi.util.ByteArray.readExternal(ObjectInput)",1,1,1
"org.apache.derby.iapi.util.ByteArray.setBytes(byte[])",1,1,1
"org.apache.derby.iapi.util.ByteArray.setBytes(byte[],int)",1,1,1
"org.apache.derby.iapi.util.ByteArray.setBytes(byte[],int,int)",1,1,1
"org.apache.derby.iapi.util.ByteArray.setLength(int)",1,1,1
"org.apache.derby.iapi.util.ByteArray.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.iapi.util.CheapDateFormatter.formatDate(long)",3,1,11
"org.apache.derby.iapi.util.CheapDateFormatter.threeDigits(long)",1,3,3
"org.apache.derby.iapi.util.CheapDateFormatter.twoDigits(long)",1,2,2
"org.apache.derby.iapi.util.DoubleProperties.DoubleProperties(Properties,Properties)",1,1,1
"org.apache.derby.iapi.util.DoubleProperties.getProperty(String)",1,1,1
"org.apache.derby.iapi.util.DoubleProperties.getProperty(String,String)",1,1,1
"org.apache.derby.iapi.util.DoubleProperties.propertyNames()",1,5,5
"org.apache.derby.iapi.util.DoubleProperties.put(Object,Object)",1,1,1
"org.apache.derby.iapi.util.IdUtil.SQLIdentifier2CanonicalPropertyUsername(String)",3,3,9
"org.apache.derby.iapi.util.IdUtil.appendNormalToList(String,String)",2,1,2
"org.apache.derby.iapi.util.IdUtil.deleteId(String,String)",3,4,5
"org.apache.derby.iapi.util.IdUtil.dups(String[])",2,3,4
"org.apache.derby.iapi.util.IdUtil.getUserAuthorizationId(String)",2,2,3
"org.apache.derby.iapi.util.IdUtil.getUserNameFromURLProps(Properties)",1,1,2
"org.apache.derby.iapi.util.IdUtil.idChar(boolean,int)",4,4,13
"org.apache.derby.iapi.util.IdUtil.idOnList(String,String)",4,2,4
"org.apache.derby.iapi.util.IdUtil.intersect(String[],String[])",2,4,6
"org.apache.derby.iapi.util.IdUtil.mkIdList(String[])",1,3,3
"org.apache.derby.iapi.util.IdUtil.mkIdListAsEntered(String[])",1,3,3
"org.apache.derby.iapi.util.IdUtil.mkQualifiedName(String,String)",2,2,2
"org.apache.derby.iapi.util.IdUtil.mkQualifiedName(String[])",1,3,3
"org.apache.derby.iapi.util.IdUtil.normalToDelimited(String)",1,1,1
"org.apache.derby.iapi.util.IdUtil.parseDbClassPath(String)",7,8,9
"org.apache.derby.iapi.util.IdUtil.parseId(StringReader,boolean)",3,4,4
"org.apache.derby.iapi.util.IdUtil.parseIdList(String)",2,1,2
"org.apache.derby.iapi.util.IdUtil.parseIdList(StringReader,boolean)",5,7,8
"org.apache.derby.iapi.util.IdUtil.parseMultiPartSQLIdentifier(String)",1,1,1
"org.apache.derby.iapi.util.IdUtil.parseMultiPartSQLIdentifier(StringReader)",3,5,5
"org.apache.derby.iapi.util.IdUtil.parseQId(StringReader,boolean)",8,9,9
"org.apache.derby.iapi.util.IdUtil.parseSQLIdentifier(String)",1,1,1
"org.apache.derby.iapi.util.IdUtil.parseUnQId(StringReader,boolean)",4,5,5
"org.apache.derby.iapi.util.IdUtil.pruneDups(String)",2,3,4
"org.apache.derby.iapi.util.IdUtil.vectorToIdList(Vector,boolean)",3,2,3
"org.apache.derby.iapi.util.IdUtil.verifyEmpty(Reader)",2,3,3
"org.apache.derby.iapi.util.JBitSet.JBitSet(BitSet,int)",1,1,1
"org.apache.derby.iapi.util.JBitSet.JBitSet(int)",1,1,1
"org.apache.derby.iapi.util.JBitSet.and(JBitSet)",1,1,1
"org.apache.derby.iapi.util.JBitSet.clear(int)",1,1,1
"org.apache.derby.iapi.util.JBitSet.clearAll()",1,3,3
"org.apache.derby.iapi.util.JBitSet.clone()",1,1,1
"org.apache.derby.iapi.util.JBitSet.contains(JBitSet)",3,4,5
"org.apache.derby.iapi.util.JBitSet.equals(Object)",1,2,2
"org.apache.derby.iapi.util.JBitSet.get(int)",1,1,1
"org.apache.derby.iapi.util.JBitSet.getFirstSetBit()",3,2,3
"org.apache.derby.iapi.util.JBitSet.grow(int)",1,2,2
"org.apache.derby.iapi.util.JBitSet.hasSingleBitSet()",4,2,4
"org.apache.derby.iapi.util.JBitSet.hashCode()",1,1,1
"org.apache.derby.iapi.util.JBitSet.or(JBitSet)",1,1,1
"org.apache.derby.iapi.util.JBitSet.set(int)",1,1,1
"org.apache.derby.iapi.util.JBitSet.setTo(JBitSet)",1,2,2
"org.apache.derby.iapi.util.JBitSet.size()",1,1,1
"org.apache.derby.iapi.util.JBitSet.toString()",1,1,1
"org.apache.derby.iapi.util.JBitSet.xor(JBitSet)",1,1,1
"org.apache.derby.iapi.util.PrivilegedFileOps.exists(File)",2,2,3
"org.apache.derby.iapi.util.PrivilegedFileOps.isDirectory(File)",2,2,3
"org.apache.derby.iapi.util.PrivilegedFileOps.list(File)",2,2,3
"org.apache.derby.iapi.util.PropertyUtil.copyProperties(Properties,Properties)",1,2,2
"org.apache.derby.iapi.util.PropertyUtil.loadWithTrimmedValues(InputStream,Properties)",2,2,4
"org.apache.derby.iapi.util.PropertyUtil.sortProperties(Properties)",1,1,1
"org.apache.derby.iapi.util.PropertyUtil.sortProperties(Properties,String)",1,11,12
"org.apache.derby.iapi.util.ReuseFactory.ReuseFactory()",1,1,1
"org.apache.derby.iapi.util.ReuseFactory.getBoolean(boolean)",1,1,2
"org.apache.derby.iapi.util.ReuseFactory.getByte(byte)",2,1,3
"org.apache.derby.iapi.util.ReuseFactory.getInteger(int)",7,2,8
"org.apache.derby.iapi.util.ReuseFactory.getLong(long)",2,1,3
"org.apache.derby.iapi.util.ReuseFactory.getShort(short)",2,1,3
"org.apache.derby.iapi.util.ReuseFactory.getZeroLenByteArray()",1,1,1
"org.apache.derby.iapi.util.StringUtil.SQLEqualsIgnoreCase(String,String)",2,2,2
"org.apache.derby.iapi.util.StringUtil.SQLToUpperCase(String)",1,1,1
"org.apache.derby.iapi.util.StringUtil.compressQuotes(String,String)",1,2,2
"org.apache.derby.iapi.util.StringUtil.formatForPrint(String)",1,2,2
"org.apache.derby.iapi.util.StringUtil.fromHexString(String,int,int)",4,2,5
"org.apache.derby.iapi.util.StringUtil.getAsciiBytes(String)",1,1,2
"org.apache.derby.iapi.util.StringUtil.hexDump(byte[])",1,7,9
"org.apache.derby.iapi.util.StringUtil.normalizeSQLIdentifier(String)",3,4,5
"org.apache.derby.iapi.util.StringUtil.quoteString(String,char)",1,3,3
"org.apache.derby.iapi.util.StringUtil.quoteStringLiteral(String)",1,1,1
"org.apache.derby.iapi.util.StringUtil.slice(String,int,int,boolean)",1,2,2
"org.apache.derby.iapi.util.StringUtil.split(String,char)",2,2,3
"org.apache.derby.iapi.util.StringUtil.toHexByte(String,int,int)",1,2,2
"org.apache.derby.iapi.util.StringUtil.toHexString(byte[],int,int)",1,2,2
"org.apache.derby.iapi.util.StringUtil.toStringArray(Object[])",1,2,2
"org.apache.derby.iapi.util.StringUtil.trimTrailing(String)",4,2,4
"org.apache.derby.iapi.util.StringUtil.truncate(String,int)",1,3,3
"org.apache.derby.iapi.util.UTF8Util.SkipCount.SkipCount(long,long)",3,1,4
"org.apache.derby.iapi.util.UTF8Util.SkipCount.bytesSkipped()",1,1,1
"org.apache.derby.iapi.util.UTF8Util.SkipCount.charsSkipped()",1,1,1
"org.apache.derby.iapi.util.UTF8Util.UTF8Util()",1,1,1
"org.apache.derby.iapi.util.UTF8Util.internalSkip(InputStream,long)",10,6,13
"org.apache.derby.iapi.util.UTF8Util.skipFully(InputStream,long)",2,2,2
"org.apache.derby.iapi.util.UTF8Util.skipPersistent(InputStream,long)",4,3,4
"org.apache.derby.iapi.util.UTF8Util.skipUntilEOF(InputStream)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.BasicDatabase()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.apply(String,Serializable,Dictionary)",2,2,4
"org.apache.derby.impl.db.BasicDatabase.backup(String,boolean)",1,2,2
"org.apache.derby.impl.db.BasicDatabase.backupAndEnableLogArchiveMode(String,boolean,boolean)",1,2,2
"org.apache.derby.impl.db.BasicDatabase.boot(boolean,Properties)",1,9,9
"org.apache.derby.impl.db.BasicDatabase.bootAuthenticationService(boolean,Properties)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.bootClassFactory(boolean,Properties)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.bootResourceAdapter(boolean,Properties)",1,1,2
"org.apache.derby.impl.db.BasicDatabase.bootStore(boolean,Properties)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.bootValidation(boolean,Properties)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.canSupport(Properties)",1,3,4
"org.apache.derby.impl.db.BasicDatabase.checkpoint()",1,2,2
"org.apache.derby.impl.db.BasicDatabase.createFinished()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.disableLogArchiveMode(boolean)",1,2,2
"org.apache.derby.impl.db.BasicDatabase.failover(String)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.freeze()",1,2,2
"org.apache.derby.impl.db.BasicDatabase.getAllDatabaseProperties()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.getAuthenticationService()",1,2,2
"org.apache.derby.impl.db.BasicDatabase.getClasspath(Properties)",1,2,2
"org.apache.derby.impl.db.BasicDatabase.getCollator()",3,3,3
"org.apache.derby.impl.db.BasicDatabase.getConnectionTransaction(ContextManager)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.getCurrentLocale()",2,1,2
"org.apache.derby.impl.db.BasicDatabase.getDataDictionary()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.getDateFormat()",2,3,3
"org.apache.derby.impl.db.BasicDatabase.getEngineType()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.getId()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.getJarFile(String,String)",2,2,2
"org.apache.derby.impl.db.BasicDatabase.getLocale()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.getResourceAdapter()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.getTimeFormat()",2,3,3
"org.apache.derby.impl.db.BasicDatabase.getTimestampFormat()",2,3,3
"org.apache.derby.impl.db.BasicDatabase.init(boolean,Dictionary)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.isActive()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.isInSlaveMode()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.isReadOnly()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.makeDatabaseID(boolean,Properties)",1,4,4
"org.apache.derby.impl.db.BasicDatabase.map(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.noLocale()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.pushClassFactoryContext(ContextManager,ClassFactory)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.pushDbContext(ContextManager)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.setLocale(Locale)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.setupConnection(ContextManager,String,String,String)",1,1,1
"org.apache.derby.impl.db.BasicDatabase.startReplicationMaster(String,String,int,String)",1,2,2
"org.apache.derby.impl.db.BasicDatabase.stop()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.stopReplicationMaster()",1,2,2
"org.apache.derby.impl.db.BasicDatabase.stopReplicationSlave()",1,1,1
"org.apache.derby.impl.db.BasicDatabase.unfreeze()",1,2,2
"org.apache.derby.impl.db.BasicDatabase.validate(String,Serializable,Dictionary)",6,7,8
"org.apache.derby.impl.db.DatabaseContextImpl.DatabaseContextImpl(ContextManager,Database)",1,1,1
"org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(Throwable)",3,2,4
"org.apache.derby.impl.db.DatabaseContextImpl.equals(Object)",2,1,2
"org.apache.derby.impl.db.DatabaseContextImpl.getDatabase()",1,1,1
"org.apache.derby.impl.db.DatabaseContextImpl.hashCode()",1,1,1
"org.apache.derby.impl.db.SlaveDatabase.SlaveDatabase()",1,1,1
"org.apache.derby.impl.db.SlaveDatabase.SlaveDatabaseBootThread.SlaveDatabaseBootThread(boolean,Properties)",1,1,1
"org.apache.derby.impl.db.SlaveDatabase.SlaveDatabaseBootThread.run()",1,3,3
"org.apache.derby.impl.db.SlaveDatabase.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.db.SlaveDatabase.bootBasicDatabase(boolean,Properties)",1,1,1
"org.apache.derby.impl.db.SlaveDatabase.canSupport(Properties)",1,3,4
"org.apache.derby.impl.db.SlaveDatabase.failover(String)",1,3,4
"org.apache.derby.impl.db.SlaveDatabase.getAuthenticationService()",2,2,2
"org.apache.derby.impl.db.SlaveDatabase.handleShutdown(StandardException)",2,1,3
"org.apache.derby.impl.db.SlaveDatabase.isInSlaveMode()",1,1,1
"org.apache.derby.impl.db.SlaveDatabase.isSlaveFactorySet()",2,1,3
"org.apache.derby.impl.db.SlaveDatabase.setupConnection(ContextManager,String,String,String)",2,2,2
"org.apache.derby.impl.db.SlaveDatabase.stop()",1,2,4
"org.apache.derby.impl.db.SlaveDatabase.stopReplicationSlave()",3,3,4
"org.apache.derby.impl.db.SlaveDatabase.verifyShutdownSlave()",2,2,2
"org.apache.derby.impl.db.SlaveDatabase.verifySuccessfulBoot()",3,4,5
"org.apache.derby.impl.db.StoreClassFactoryContext.StoreClassFactoryContext(ContextManager,ClassFactory,AccessFactory,JarReader)",1,1,1
"org.apache.derby.impl.db.StoreClassFactoryContext.getJarReader()",1,1,1
"org.apache.derby.impl.db.StoreClassFactoryContext.getLockSpace()",2,1,2
"org.apache.derby.impl.db.StoreClassFactoryContext.getPersistentSet()",2,1,2
"org.apache.derby.impl.drda.AppRequester.AppRequester()",1,1,2
"org.apache.derby.impl.drda.AppRequester.equals(AppRequester)",9,1,9
"org.apache.derby.impl.drda.AppRequester.getClientType()",1,1,1
"org.apache.derby.impl.drda.AppRequester.getManagerLevel(int)",1,3,4
"org.apache.derby.impl.drda.AppRequester.greaterThanOrEqualTo(int,int,int)",6,1,6
"org.apache.derby.impl.drda.AppRequester.isXARequester()",1,1,1
"org.apache.derby.impl.drda.AppRequester.notEquals(Object,Object)",4,2,7
"org.apache.derby.impl.drda.AppRequester.setClientVersion(String)",1,3,4
"org.apache.derby.impl.drda.AppRequester.setManagerLevel(int,int)",1,3,5
"org.apache.derby.impl.drda.AppRequester.supportedMessageParamLength()",3,2,3
"org.apache.derby.impl.drda.AppRequester.supportsQryclsimpForLmtblkprc()",1,1,1
"org.apache.derby.impl.drda.AppRequester.supportsSecMecUSRSSBPWD()",1,2,2
"org.apache.derby.impl.drda.AppRequester.supportsSessionDataCaching()",1,2,2
"org.apache.derby.impl.drda.CcsidManager.CcsidManager(byte,byte,byte[])",1,1,1
"org.apache.derby.impl.drda.CharacterEncodings.CharacterEncodings()",1,1,1
"org.apache.derby.impl.drda.CharacterEncodings.getJavaEncoding(int)",2,1,2
"org.apache.derby.impl.drda.CharacterEncodings.populate_ccsidToJavaEncodingTable()",1,1,1
"org.apache.derby.impl.drda.ClientThread.ClientThread(NetworkServerControlImpl,ServerSocket)",1,1,1
"org.apache.derby.impl.drda.ClientThread.run()",2,8,9
"org.apache.derby.impl.drda.CodePoint.CodePoint()",1,1,1
"org.apache.derby.impl.drda.CodePoint.getManagerIndex(int)",3,1,3
"org.apache.derby.impl.drda.CodePoint.isKnownManager(int)",3,1,3
"org.apache.derby.impl.drda.CodePointNameTable.CodePointNameTable()",1,1,1
"org.apache.derby.impl.drda.CodePointNameTable.lookup(int)",1,1,1
"org.apache.derby.impl.drda.ConsistencyToken.ConsistencyToken(byte[])",1,1,1
"org.apache.derby.impl.drda.ConsistencyToken.equals(Object)",5,1,5
"org.apache.derby.impl.drda.ConsistencyToken.getBytes()",1,1,1
"org.apache.derby.impl.drda.ConsistencyToken.hashCode()",1,1,3
"org.apache.derby.impl.drda.ConsistencyToken.toString()",1,1,1
"org.apache.derby.impl.drda.DDMReader.DDMReader(CcsidManager,InputStream)",1,1,1
"org.apache.derby.impl.drda.DDMReader.DDMReader(DRDAConnThread,DssTrace)",1,1,1
"org.apache.derby.impl.drda.DDMReader.adjustLengths(int)",1,1,2
"org.apache.derby.impl.drda.DDMReader.clearBuffer()",1,1,1
"org.apache.derby.impl.drda.DDMReader.compressBLayerData(int)",1,5,9
"org.apache.derby.impl.drda.DDMReader.computeMagnitude(int[])",1,1,3
"org.apache.derby.impl.drda.DDMReader.convertBytes(byte[])",1,1,1
"org.apache.derby.impl.drda.DDMReader.doingLayerBStreaming()",1,1,1
"org.apache.derby.impl.drda.DDMReader.ensureALayerDataInBuffer(int)",1,2,2
"org.apache.derby.impl.drda.DDMReader.ensureBLayerDataInBuffer(int,boolean)",1,4,4
"org.apache.derby.impl.drda.DDMReader.ensureSpaceInBufferForFill(int)",1,3,4
"org.apache.derby.impl.drda.DDMReader.fill(int)",2,7,10
"org.apache.derby.impl.drda.DDMReader.finishLayerBStreaming()",1,1,1
"org.apache.derby.impl.drda.DDMReader.getCodePoint()",3,3,3
"org.apache.derby.impl.drda.DDMReader.getCodePoint(int)",1,2,2
"org.apache.derby.impl.drda.DDMReader.getCurrChainState()",3,1,4
"org.apache.derby.impl.drda.DDMReader.getDdmLength()",1,1,1
"org.apache.derby.impl.drda.DDMReader.getEXTDTAReaderInputStream(boolean)",3,2,4
"org.apache.derby.impl.drda.DDMReader.getExtData(boolean)",1,1,1
"org.apache.derby.impl.drda.DDMReader.getExtData(long,boolean)",3,5,9
"org.apache.derby.impl.drda.DDMReader.initialize(DRDAConnThread,DssTrace)",1,2,2
"org.apache.derby.impl.drda.DDMReader.initialize(InputStream)",1,1,1
"org.apache.derby.impl.drda.DDMReader.isChainedWithDiffID()",1,1,1
"org.apache.derby.impl.drda.DDMReader.isChainedWithSameID()",1,1,1
"org.apache.derby.impl.drda.DDMReader.isCmd()",1,1,1
"org.apache.derby.impl.drda.DDMReader.isEXTDTANull()",2,1,2
"org.apache.derby.impl.drda.DDMReader.markCollection()",1,1,1
"org.apache.derby.impl.drda.DDMReader.moreData()",1,1,1
"org.apache.derby.impl.drda.DDMReader.moreDdmData()",1,1,1
"org.apache.derby.impl.drda.DDMReader.moreDssData()",1,1,1
"org.apache.derby.impl.drda.DDMReader.packedNybblesToInt(byte[],int,int,int)",1,1,4
"org.apache.derby.impl.drda.DDMReader.packedNybblesToLong(byte[],int,int,int)",1,1,4
"org.apache.derby.impl.drda.DDMReader.readBigDecimal(int,int)",5,5,6
"org.apache.derby.impl.drda.DDMReader.readBoolean()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readByte()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readBytes()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readBytes(int)",1,2,2
"org.apache.derby.impl.drda.DDMReader.readCmdString()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readCmdString(int)",2,1,2
"org.apache.derby.impl.drda.DDMReader.readCodePoint()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readDSSContinuationHeader()",1,2,3
"org.apache.derby.impl.drda.DDMReader.readDouble(int)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readDssHeader()",1,9,15
"org.apache.derby.impl.drda.DDMReader.readEncryptedString(DecryptionManager,int,byte[],byte[])",2,2,2
"org.apache.derby.impl.drda.DDMReader.readFloat(int)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readInt(int)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readLDStringData(String)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readLOBChunk(boolean,long)",1,5,6
"org.apache.derby.impl.drda.DDMReader.readLOBContinuationStream()",1,2,2
"org.apache.derby.impl.drda.DDMReader.readLOBContinuationStream(long)",1,2,2
"org.apache.derby.impl.drda.DDMReader.readLOBInitStream()",1,2,2
"org.apache.derby.impl.drda.DDMReader.readLOBInitStream(long)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readLengthAndCodePoint(boolean)",2,6,13
"org.apache.derby.impl.drda.DDMReader.readLong(int)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readNetworkInt()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readNetworkLong()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readNetworkShort()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readNetworkSixByteLong()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readReplyDss()",1,4,7
"org.apache.derby.impl.drda.DDMReader.readShort(int)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readSignedNetworkShort()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readString()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readString(DRDAString,int,boolean)",1,1,4
"org.apache.derby.impl.drda.DDMReader.readString(int)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readString(int,String)",1,2,2
"org.apache.derby.impl.drda.DDMReader.readStringData()",1,1,1
"org.apache.derby.impl.drda.DDMReader.readStringData(int)",1,1,1
"org.apache.derby.impl.drda.DDMReader.readUnsignedByte()",1,1,1
"org.apache.derby.impl.drda.DDMReader.shiftBuffer(byte[])",1,3,4
"org.apache.derby.impl.drda.DDMReader.skipBytes()",1,1,1
"org.apache.derby.impl.drda.DDMReader.skipBytes(int)",1,1,1
"org.apache.derby.impl.drda.DDMReader.skipDss()",1,2,2
"org.apache.derby.impl.drda.DDMReader.startLayerBStreaming()",1,1,1
"org.apache.derby.impl.drda.DDMReader.terminateChainOnErr()",1,1,1
"org.apache.derby.impl.drda.DDMReader.toDebugString(String)",1,1,2
"org.apache.derby.impl.drda.DDMReader.trace(String)",1,2,2
"org.apache.derby.impl.drda.DDMWriter.DDMWriter(CcsidManager,DRDAConnThread,DssTrace)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.beginDss(boolean,int)",1,1,2
"org.apache.derby.impl.drda.DDMWriter.beginDss(int,boolean)",1,2,2
"org.apache.derby.impl.drda.DDMWriter.calculateExtendedLengthByteCount(long)",5,1,5
"org.apache.derby.impl.drda.DDMWriter.clearBuffer()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.clearDSSesBackToMark(int)",1,2,2
"org.apache.derby.impl.drda.DDMWriter.clearDdm()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.copyDSSDataToEnd(int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.createDssObject()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.createDssReply()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.createDssRequest()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.doesRequestContainData()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.endDdm()",1,3,3
"org.apache.derby.impl.drda.DDMWriter.endDdmAndDss()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.endDss()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.endDss(boolean)",2,2,3
"org.apache.derby.impl.drda.DDMWriter.endDss(byte)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.ensureLength(int)",1,3,3
"org.apache.derby.impl.drda.DDMWriter.finalizeChain(byte,OutputStream)",2,5,7
"org.apache.derby.impl.drda.DDMWriter.finalizeDssLength()",1,3,7
"org.apache.derby.impl.drda.DDMWriter.flush()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.flush(OutputStream)",1,3,3
"org.apache.derby.impl.drda.DDMWriter.flushScalarStreamSegment(boolean,OutputStream)",1,3,3
"org.apache.derby.impl.drda.DDMWriter.getCorrelationID()",1,1,3
"org.apache.derby.impl.drda.DDMWriter.getDSSLength()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.getLayerBStreamingBufferSize()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.markDSSClearPoint()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.markDssAsContinued(boolean)",1,3,3
"org.apache.derby.impl.drda.DDMWriter.maxEncodedLength(String)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.overrideChainByte(int,byte)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.padBytes(byte,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.peekStream(InputStream)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.placeLayerBStreamingBuffer(OutputStream)",2,1,2
"org.apache.derby.impl.drda.DDMWriter.prepScalarStream(boolean,int,boolean)",1,3,4
"org.apache.derby.impl.drda.DDMWriter.reset(DssTrace)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.resetChainState()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.sendBytes(OutputStream)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.sendBytes(OutputStream,boolean)",1,4,4
"org.apache.derby.impl.drda.DDMWriter.setCMDProtocol()",1,1,1
"org.apache.derby.impl.drda.DDMWriter.startDdm(int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.startDdm(int,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.toDebugString(String)",1,2,2
"org.apache.derby.impl.drda.DDMWriter.truncateDSS(int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeBigDecimal(BigDecimal,int,int)",5,13,14
"org.apache.derby.impl.drda.DDMWriter.writeBoolean(boolean)",1,1,2
"org.apache.derby.impl.drda.DDMWriter.writeByte(int)",1,3,3
"org.apache.derby.impl.drda.DDMWriter.writeBytes(byte[])",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeBytes(byte[],int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeBytes(byte[],int,int)",1,4,5
"org.apache.derby.impl.drda.DDMWriter.writeCodePoint4Bytes(int,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeDouble(double)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeExtendedLength(long)",1,2,2
"org.apache.derby.impl.drda.DDMWriter.writeFloat(float)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeInt(int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeLDBytes(byte[])",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeLDBytes(byte[],int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeLDString(String)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeLDString(String,int)",1,2,3
"org.apache.derby.impl.drda.DDMWriter.writeLengthCodePoint(int,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeLong(long)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeNetworkInt(int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeNetworkShort(int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalar1Byte(int,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalar2Bytes(int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalar2Bytes(int,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalarBytes(int,byte[])",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalarBytes(int,byte[],int)",1,4,5
"org.apache.derby.impl.drda.DDMWriter.writeScalarBytes(int,byte[],int,int)",1,4,5
"org.apache.derby.impl.drda.DDMWriter.writeScalarHeader(int,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalarPaddedBytes(byte[],int,byte)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalarPaddedBytes(int,byte[],int,byte)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalarPaddedString(DRDAString,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalarPaddedString(String,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalarPaddedString(int,String,int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeScalarStream(boolean,int,EXTDTAInputStream,boolean)",4,5,8
"org.apache.derby.impl.drda.DDMWriter.writeScalarString(int,String)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeShort(boolean)",1,1,2
"org.apache.derby.impl.drda.DDMWriter.writeShort(int)",1,1,1
"org.apache.derby.impl.drda.DDMWriter.writeString(String)",1,2,2
"org.apache.derby.impl.drda.DDMWriter.zeroPadString(String,int)",4,3,4
"org.apache.derby.impl.drda.DRDAConnThread.DRDAConnThread(Session,NetworkServerControlImpl,long,boolean)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.PublicBufferOutputStream.PublicBufferOutputStream(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.PublicBufferOutputStream.getBuffer()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.PublicBufferOutputStream.getCount()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.addDatabase(String)",1,1,2
"org.apache.derby.impl.drda.DRDAConnThread.agentError(String)",1,1,2
"org.apache.derby.impl.drda.DRDAConnThread.badObjectLength(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.buildPreformattedSqlerrmc(SQLException)",2,3,4
"org.apache.derby.impl.drda.DRDAConnThread.buildRuntimeInfo(String,LocalizedResource)",2,2,2
"org.apache.derby.impl.drda.DRDAConnThread.buildSqlerrmc(SQLException)",1,5,6
"org.apache.derby.impl.drda.DRDAConnThread.buildTokenizedSqlerrmc(EmbedSQLException)",1,3,5
"org.apache.derby.impl.drda.DRDAConnThread.canIgnoreStmt(String)",2,1,2
"org.apache.derby.impl.drda.DRDAConnThread.checkLength(int,int)",1,3,3
"org.apache.derby.impl.drda.DRDAConnThread.checkRequired(int)",3,2,4
"org.apache.derby.impl.drda.DRDAConnThread.checkValidTypDefNam(String)",7,1,7
"org.apache.derby.impl.drda.DRDAConnThread.checkWarning(Connection,Statement,ResultSet,int,boolean,boolean)",1,10,14
"org.apache.derby.impl.drda.DRDAConnThread.cleanUpAndCloseResultSet(DRDAStatement,SQLException,int)",1,5,5
"org.apache.derby.impl.drda.DRDAConnThread.close()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.closeSession()",2,3,4
"org.apache.derby.impl.drda.DRDAConnThread.closeStream(InputStream)",1,3,3
"org.apache.derby.impl.drda.DRDAConnThread.closed()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.codePointNotSupported(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.convertAsByteArrayInputStream(EXTDTAReaderInputStream)",1,3,3
"org.apache.derby.impl.drda.DRDAConnThread.convertToHexString(byte[])",1,3,3
"org.apache.derby.impl.drda.DRDAConnThread.copyToRequired(int[])",1,1,3
"org.apache.derby.impl.drda.DRDAConnThread.doneData(DRDAStatement,ResultSet)",1,9,11
"org.apache.derby.impl.drda.DRDAConnThread.errorInChain(SQLException)",1,4,4
"org.apache.derby.impl.drda.DRDAConnThread.exchangeServerAttributes()",2,3,4
"org.apache.derby.impl.drda.DRDAConnThread.finalizeChain()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getByteOrder()",1,1,3
"org.apache.derby.impl.drda.DRDAConnThread.getBytesRead()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getBytesWritten()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getConnFromDatabaseName()",2,10,12
"org.apache.derby.impl.drda.DRDAConnThread.getCorrelationID()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getCrrtkn()",2,1,2
"org.apache.derby.impl.drda.DRDAConnThread.getDatabase()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getDbName()",2,1,2
"org.apache.derby.impl.drda.DRDAConnThread.getExceptionSeverity(SQLException)",3,3,8
"org.apache.derby.impl.drda.DRDAConnThread.getInputStream()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getLogConnections()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getOutputStream()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getRdbAccessErrorCodePoint()",3,4,5
"org.apache.derby.impl.drda.DRDAConnThread.getReader()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getServer()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getSession()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getSqlCode(int)",3,1,3
"org.apache.derby.impl.drda.DRDAConnThread.getTimeSlice()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.getWriter()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.handleException(Exception)",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.hasSession()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.initialize()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.initializeForSession()",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.invalidCodePoint(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.invalidValue(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.isAuthenticationException(SQLException)",1,2,4
"org.apache.derby.impl.drda.DRDAConnThread.markCommunicationsFailure(Exception,String,String,String,String)",1,2,3
"org.apache.derby.impl.drda.DRDAConnThread.markCommunicationsFailure(String,String,String,String)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.missingCodePoint(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.parseACCRDB()",2,22,38
"org.apache.derby.impl.drda.DRDAConnThread.parseACCSEC()",2,22,38
"org.apache.derby.impl.drda.DRDAConnThread.parseCLSQRY()",2,6,12
"org.apache.derby.impl.drda.DRDAConnThread.parseCNTQRY()",4,23,42
"org.apache.derby.impl.drda.DRDAConnThread.parseCNTQRYobjects(DRDAStatement)",2,4,5
"org.apache.derby.impl.drda.DRDAConnThread.parseCcsidMBC(int)",2,4,5
"org.apache.derby.impl.drda.DRDAConnThread.parseCcsidSBC(int)",2,4,5
"org.apache.derby.impl.drda.DRDAConnThread.parseDRDAConnection()",5,7,9
"org.apache.derby.impl.drda.DRDAConnThread.parseDSCSQLSTT()",2,5,9
"org.apache.derby.impl.drda.DRDAConnThread.parseEXCSAT()",3,13,19
"org.apache.derby.impl.drda.DRDAConnThread.parseEXCSAT2()",2,3,5
"org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLIMM()",2,4,8
"org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSET()",2,3,7
"org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSETobjects()",6,8,15
"org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTT()",2,35,52
"org.apache.derby.impl.drda.DRDAConnThread.parseEXCSQLSTTobjects(DRDAStatement)",2,6,11
"org.apache.derby.impl.drda.DRDAConnThread.parseEXECSQLIMMobjects()",2,6,9
"org.apache.derby.impl.drda.DRDAConnThread.parseEncodedString()",2,2,2
"org.apache.derby.impl.drda.DRDAConnThread.parseMGRLVLLS(int)",2,9,9
"org.apache.derby.impl.drda.DRDAConnThread.parseMONITOR()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.parseNOCMorNOCS()",1,4,4
"org.apache.derby.impl.drda.DRDAConnThread.parseOPNQRY()",2,11,21
"org.apache.derby.impl.drda.DRDAConnThread.parseOPNQRYobjects(DRDAStatement)",2,4,8
"org.apache.derby.impl.drda.DRDAConnThread.parseOUTOVR(DRDAStatement)",6,11,12
"org.apache.derby.impl.drda.DRDAConnThread.parseOUTOVROPT()",1,3,4
"org.apache.derby.impl.drda.DRDAConnThread.parsePKGNAMCSN()",1,26,27
"org.apache.derby.impl.drda.DRDAConnThread.parsePKGNAMCT()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTT()",4,4,11
"org.apache.derby.impl.drda.DRDAConnThread.parsePRPSQLSTTobjects(DRDAStatement)",2,6,10
"org.apache.derby.impl.drda.DRDAConnThread.parseQRYBLKSZ()",1,3,4
"org.apache.derby.impl.drda.DRDAConnThread.parseQRYCLSIMP()",1,3,5
"org.apache.derby.impl.drda.DRDAConnThread.parseQRYCLSRLS()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.parseQRYROWSET(int)",1,3,4
"org.apache.derby.impl.drda.DRDAConnThread.parseRDBCMTOK()",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.parseRDBNAM()",1,4,5
"org.apache.derby.impl.drda.DRDAConnThread.parseSECCHK()",2,23,48
"org.apache.derby.impl.drda.DRDAConnThread.parseSQLATTR(DRDAStatement)",1,5,9
"org.apache.derby.impl.drda.DRDAConnThread.parseSQLDTA(DRDAStatement)",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.parseSQLDTA_work(DRDAStatement)",8,22,28
"org.apache.derby.impl.drda.DRDAConnThread.parseSQLSTTDss()",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.parseTYPDEFNAM()",1,6,6
"org.apache.derby.impl.drda.DRDAConnThread.parseTYPDEFOVR(DRDAStatement)",2,12,23
"org.apache.derby.impl.drda.DRDAConnThread.parseTYPSQLDA()",3,4,8
"org.apache.derby.impl.drda.DRDAConnThread.parseVCMorVCS()",1,4,4
"org.apache.derby.impl.drda.DRDAConnThread.peekStream(EXTDTAInputStream)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.positionCursor(DRDAStatement,ResultSet)",2,7,11
"org.apache.derby.impl.drda.DRDAConnThread.println2Log(String,String,String)",1,4,4
"org.apache.derby.impl.drda.DRDAConnThread.processCommands()",2,41,61
"org.apache.derby.impl.drda.DRDAConnThread.processLeftoverQRYDTA(DRDAStatement)",2,3,5
"org.apache.derby.impl.drda.DRDAConnThread.rdbNotFound(String)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.rdbnamMismatch(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.readAndSetAllExtParams(DRDAStatement,boolean)",1,3,4
"org.apache.derby.impl.drda.DRDAConnThread.readAndSetExtParam(int,DRDAStatement,int,int,boolean)",6,14,20
"org.apache.derby.impl.drda.DRDAConnThread.readAndSetParams(int,DRDAStatement,ParameterMetaData)",5,42,42
"org.apache.derby.impl.drda.DRDAConnThread.readBoolean(int)",3,3,3
"org.apache.derby.impl.drda.DRDAConnThread.readLobLength(int)",6,6,6
"org.apache.derby.impl.drda.DRDAConnThread.removeFromRequired(int)",1,1,3
"org.apache.derby.impl.drda.DRDAConnThread.run()",4,12,17
"org.apache.derby.impl.drda.DRDAConnThread.sendProtocolException(DRDAProtocolException)",1,2,3
"org.apache.derby.impl.drda.DRDAConnThread.sendUnexpectedException(Exception)",1,1,3
"org.apache.derby.impl.drda.DRDAConnThread.sessionInitialState()",3,4,4
"org.apache.derby.impl.drda.DRDAConnThread.setAsCharacterStream(DRDAStatement,int,boolean,DDMReader,boolean,String)",1,3,3
"org.apache.derby.impl.drda.DRDAConnThread.setDatabase(int)",2,3,4
"org.apache.derby.impl.drda.DRDAConnThread.setLogConnections(boolean)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.setStmtOrDbByteOrder(boolean,DRDAStatement,String)",1,1,3
"org.apache.derby.impl.drda.DRDAConnThread.setTimeSlice(long)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.showmem()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.skipRemainder(boolean)",1,4,4
"org.apache.derby.impl.drda.DRDAConnThread.splitQRYDTA(DRDAStatement,int)",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.svrcodFromSecchkcd(int)",2,1,5
"org.apache.derby.impl.drda.DRDAConnThread.throwSyntaxrm(int,int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.tooBig(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.tooMany(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.trace(String)",1,2,3
"org.apache.derby.impl.drda.DRDAConnThread.validateSecMecUSRSSBPWD()",6,13,16
"org.apache.derby.impl.drda.DRDAConnThread.valueNotSupported(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.verifyInOrderACCSEC_SECCHK(int,int)",2,1,2
"org.apache.derby.impl.drda.DRDAConnThread.verifyRequiredObject(int,int)",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.verifyUserIdPassword()",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.writeABNUOWRM()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeACCRDBRM(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeACCSECRD(int)",1,8,8
"org.apache.derby.impl.drda.DRDAConnThread.writeCMDCHKRM(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeENDQRYRM(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeENDUOWRM(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeEXCSATRD()",1,3,3
"org.apache.derby.impl.drda.DRDAConnThread.writeEXTDTA(DRDAStatement)",2,4,7
"org.apache.derby.impl.drda.DRDAConnThread.writeFDODTA(DRDAStatement)",8,42,53
"org.apache.derby.impl.drda.DRDAConnThread.writeFdocaVal(int,Object,int,int,int,boolean,DRDAStatement)",2,10,27
"org.apache.derby.impl.drda.DRDAConnThread.writeMGRLEVELS()",1,4,4
"org.apache.derby.impl.drda.DRDAConnThread.writeNullSQLCARDobject()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeNullability(int,boolean)",1,3,3
"org.apache.derby.impl.drda.DRDAConnThread.writeOPNQFLRM(SQLException)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeOPNQRYRM(boolean,DRDAStatement)",1,12,12
"org.apache.derby.impl.drda.DRDAConnThread.writePBSD()",2,6,7
"org.apache.derby.impl.drda.DRDAConnThread.writePKGNAMCSN()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writePKGNAMCSN(byte[])",1,4,4
"org.apache.derby.impl.drda.DRDAConnThread.writeQRYDSC(DRDAStatement,boolean)",1,11,16
"org.apache.derby.impl.drda.DRDAConnThread.writeQRYDTA(DRDAStatement)",2,12,13
"org.apache.derby.impl.drda.DRDAConnThread.writeQRYNOPRM(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeQRYPOPRM()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeRDBNAM(String)",1,2,3
"org.apache.derby.impl.drda.DRDAConnThread.writeRDBUPDRM()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeRDBfailure(int)",2,4,4
"org.apache.derby.impl.drda.DRDAConnThread.writeRSLSETRM(DRDAStatement)",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.writeSECCHKRM(int)",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLCAERRWARN(int,long)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLCAGRP(SQLException,int,int,long)",3,4,7
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLCAGRP(byte[],int,int,long)",2,2,3
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLCARD(SQLException,int,int,long)",1,3,4
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLCARDs(SQLException,int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLCARDs(SQLException,int,boolean)",2,4,4
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLCAXGRP(int,long,String,SQLException)",1,3,3
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLCINRD(DRDAStatement)",1,5,5
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDAGRP(ResultSetMetaData,ParameterMetaData,int,boolean)",3,20,25
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDARD(DRDAStatement,boolean,SQLException)",1,7,10
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDCGRP(long,int,String,String,String)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDCROW(long,int,String,String,String)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDHROW(int)",2,2,2
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDIAGCI(SQLException)",1,6,10
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDIAGCN()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDIAGGRP(SQLException)",2,5,6
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDIAGSTT()",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDOPTGRP(ResultSetMetaData,ParameterMetaData,int,boolean)",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDTAGRP(DRDAStatement,ResultSetMetaData,ParameterMetaData,int,int,boolean)",1,12,12
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLDXGRP(ResultSetMetaData,ParameterMetaData,int,boolean)",1,9,11
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLERRRM(int)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLNUMGRP(SQLException)",1,1,2
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLNUMROW(SQLException)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLRSLRD(DRDAStatement)",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.writeSQLUDTGRP(ResultSetMetaData,ParameterMetaData,int,boolean)",1,1,1
"org.apache.derby.impl.drda.DRDAConnThread.writeTYPDEFOVR()",1,2,2
"org.apache.derby.impl.drda.DRDAConnThread.writeVCMorVCS(String)",2,2,2
"org.apache.derby.impl.drda.DRDAProtocolException.DRDAProtocolException(String,DRDAConnThread,int,int)",1,1,1
"org.apache.derby.impl.drda.DRDAProtocolException.DRDAProtocolException(String,DRDAConnThread,int,int,Object[])",1,8,10
"org.apache.derby.impl.drda.DRDAProtocolException.getMessage()",1,1,1
"org.apache.derby.impl.drda.DRDAProtocolException.isDisconnectException()",1,1,1
"org.apache.derby.impl.drda.DRDAProtocolException.newAgentError(DRDAConnThread,int,String,String)",1,2,2
"org.apache.derby.impl.drda.DRDAProtocolException.newDisconnectException(DRDAConnThread,Object[])",1,1,1
"org.apache.derby.impl.drda.DRDAProtocolException.write(DDMWriter)",1,6,8
"org.apache.derby.impl.drda.DRDAProtocolExceptionInfo.DRDAProtocolExceptionInfo(int,int,int,boolean)",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.CLSQRY()",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.DRDAResultSet()",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.addExtDtaObject(Object,int)",1,1,3
"org.apache.derby.impl.drda.DRDAResultSet.clearExtDtaObjects()",1,3,3
"org.apache.derby.impl.drda.DRDAResultSet.close()",1,2,2
"org.apache.derby.impl.drda.DRDAResultSet.getExtDtaObjects()",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.getQryprctyp()",1,4,6
"org.apache.derby.impl.drda.DRDAResultSet.getResultSet()",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.getResultSetCursorName()",2,2,2
"org.apache.derby.impl.drda.DRDAResultSet.getRsDRDAType(int)",2,1,3
"org.apache.derby.impl.drda.DRDAResultSet.getRsDRDATypes()",2,1,2
"org.apache.derby.impl.drda.DRDAResultSet.getRsLen(int)",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.getRsPrecision(int)",2,1,2
"org.apache.derby.impl.drda.DRDAResultSet.getRsScale(int)",2,1,2
"org.apache.derby.impl.drda.DRDAResultSet.getSplitQRYDTA()",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.getStateString(int)",4,2,4
"org.apache.derby.impl.drda.DRDAResultSet.hasLobColumns()",3,2,4
"org.apache.derby.impl.drda.DRDAResultSet.isClosed()",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.isExtDtaValueNullable(int)",3,2,4
"org.apache.derby.impl.drda.DRDAResultSet.reset()",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.setExtDtaObjects(ArrayList)",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.setOPNQRYOptions(int,int,int,int,int,int)",1,1,2
"org.apache.derby.impl.drda.DRDAResultSet.setPkgcnstkn(ConsistencyToken)",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.setQryprctyp(int)",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.setResultSet(ResultSet)",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.setRsDRDAType(int,int)",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.setRsPrecision(int,int)",1,1,2
"org.apache.derby.impl.drda.DRDAResultSet.setRsScale(int,int)",1,1,2
"org.apache.derby.impl.drda.DRDAResultSet.setSplitQRYDTA(byte[])",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.suspend()",1,1,1
"org.apache.derby.impl.drda.DRDAResultSet.toDebugString(String)",1,2,3
"org.apache.derby.impl.drda.DRDAResultSet.wasExplicitlyClosed()",1,1,1
"org.apache.derby.impl.drda.DRDASocketTimeoutException.DRDASocketTimeoutException(DRDAConnThread)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.CLSQRY()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.DRDAStatement(Database)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.addDrdaParam(byte,int)",1,2,2
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.addExtPos(int)",1,2,2
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.clear(boolean)",1,1,3
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.drainStreamedParameter()",1,3,3
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.getDrdaLen(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.getDrdaParamCount()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.getDrdaType(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.getExtPos(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.getExtPosCount()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.growArray(Object)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.DrdaParamState.setStreamedParameter(EXTDTAReaderInputStream)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.addDrdaParam(byte,int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.addExtDtaObject(Object,int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.addExtPosition(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.addResultSet(ResultSet,int)",1,3,3
"org.apache.derby.impl.drda.DRDAStatement.calculateResultSetPkgcnstkn(int)",2,2,3
"org.apache.derby.impl.drda.DRDAStatement.clearDrdaParams()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.clearExtDtaObjects()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.close()",1,3,3
"org.apache.derby.impl.drda.DRDAStatement.execute()",1,6,7
"org.apache.derby.impl.drda.DRDAStatement.explicitPrepare(String)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.finishParams()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getBlksize()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getConcurType()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getCurrentDrdaResultSet()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getDrdaParamCount()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getDrdaResultSet(ConsistencyToken)",2,2,4
"org.apache.derby.impl.drda.DRDAStatement.getDrdaResultSet(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getExtDtaObjects()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getExtPosition(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getExtPositionCount()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getMoreResults(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getNumResultSets()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getNumRsCols()",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.getOutovr_drdaType()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getOutputParamPrecision(int)",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.getOutputParamScale(int)",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.getOutputParamType(int)",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.getOutputParameterTypeFromClassName(String)",16,16,21
"org.apache.derby.impl.drda.DRDAStatement.getParamDRDAType(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getParamLen(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getParamPrecision(int)",2,2,3
"org.apache.derby.impl.drda.DRDAStatement.getParamScale(int)",2,2,3
"org.apache.derby.impl.drda.DRDAStatement.getParameterMetaData()",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.getPkgnamcsn()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getPreparedStatement()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getQryprctyp()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getQryrownbr()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getQryrowset()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getQryrtndta()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getQryscrorn()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getResultSet()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getResultSetCursorName(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getResultSetPkgcnstkn(int)",2,2,2
"org.apache.derby.impl.drda.DRDAStatement.getRsDRDAType(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getRsDRDATypes()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getRsLen(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getRsPrecision(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getRsScale(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getSQLText()",1,1,2
"org.apache.derby.impl.drda.DRDAStatement.getScrollType()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getSplitQRYDTA()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getStatement()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.getStaticPackageIsolation(String)",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.hasOutputParams()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.hasdata()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.initialize()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.isCallableSQL(String)",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.isCallableStatement()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.isDynamicPkgid(String)",1,3,5
"org.apache.derby.impl.drda.DRDAStatement.isExtDtaValueNullable(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.isOutputParam(int)",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.isRSCloseImplicit(boolean)",1,4,4
"org.apache.derby.impl.drda.DRDAStatement.isScrollable()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.parsePkgidToFindHoldability()",2,2,4
"org.apache.derby.impl.drda.DRDAStatement.prepare(String)",1,5,6
"org.apache.derby.impl.drda.DRDAStatement.registerAllOutParams()",1,3,4
"org.apache.derby.impl.drda.DRDAStatement.registerOutParam(int)",1,2,2
"org.apache.derby.impl.drda.DRDAStatement.reset()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.rsClose()",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.rsIsClosed()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.rsSuspend()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setConcurType(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setCurrentDrdaResultSet(Pkgnamcsn)",1,1,2
"org.apache.derby.impl.drda.DRDAStatement.setCurrentDrdaResultSet(int)",2,1,2
"org.apache.derby.impl.drda.DRDAStatement.setDatabase(Database)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setExtDtaObjects(ArrayList)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setHasdata(boolean)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setOPNQRYOptions(int,int,int,int,int,int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setOutovr_drdaType(int[])",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setPkgnamcsn(Pkgnamcsn)",1,2,2
"org.apache.derby.impl.drda.DRDAStatement.setQryprctyp(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setQryrownbr(long)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setQryrtndta(boolean)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setQryscrorn(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setQueryOptions(int,boolean,long,boolean,int,int,int,boolean,boolean,boolean,int,int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setRsDRDAType(int,int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setRsDefaultOptions(DRDAResultSet)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setRsPrecision(int,int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setRsScale(int,int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setScrollType(int)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setSplitQRYDTA(byte[])",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setStatement(Connection)",1,2,2
"org.apache.derby.impl.drda.DRDAStatement.setStreamedParameter(EXTDTAReaderInputStream)",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setTypDefValues()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.setupCallableStatementParams(CallableStatement)",2,3,9
"org.apache.derby.impl.drda.DRDAStatement.toDebugString(String)",1,2,2
"org.apache.derby.impl.drda.DRDAStatement.wasExplicitlyClosed()",1,1,1
"org.apache.derby.impl.drda.DRDAStatement.wasExplicitlyPrepared()",1,1,1
"org.apache.derby.impl.drda.DRDAString.DRDAString(CcsidManager)",1,1,1
"org.apache.derby.impl.drda.DRDAString.equalTo(byte[],int,int)",4,1,4
"org.apache.derby.impl.drda.DRDAString.getBytes()",1,1,1
"org.apache.derby.impl.drda.DRDAString.length()",1,1,1
"org.apache.derby.impl.drda.DRDAString.setBytes(byte[],int,int)",2,1,3
"org.apache.derby.impl.drda.DRDAString.toString()",1,2,2
"org.apache.derby.impl.drda.DRDAString.wasModified()",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.DRDAXAProtocol(DRDAConnThread)",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.commitLocalTransaction()",1,3,3
"org.apache.derby.impl.drda.DRDAXAProtocol.commitTransaction(Xid,int)",1,2,2
"org.apache.derby.impl.drda.DRDAXAProtocol.commitXATransaction(Xid,int)",1,3,3
"org.apache.derby.impl.drda.DRDAXAProtocol.endXA(Xid,int)",1,3,3
"org.apache.derby.impl.drda.DRDAXAProtocol.forgetXATransaction(Xid)",1,3,3
"org.apache.derby.impl.drda.DRDAXAProtocol.getResourceAdapter()",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.getXAResource()",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.parseSYNCCTL()",3,10,23
"org.apache.derby.impl.drda.DRDAXAProtocol.parseSYNCTYPE()",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.parseXAFlags()",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.parseXATimeout()",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.parseXID()",1,2,2
"org.apache.derby.impl.drda.DRDAXAProtocol.parseXIDSHR()",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.prepareXATransaction(Xid)",1,3,3
"org.apache.derby.impl.drda.DRDAXAProtocol.processXAException(XAException)",1,2,2
"org.apache.derby.impl.drda.DRDAXAProtocol.recoverXA()",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.recoverXA(int)",1,2,2
"org.apache.derby.impl.drda.DRDAXAProtocol.rollbackCurrentTransaction()",1,5,5
"org.apache.derby.impl.drda.DRDAXAProtocol.rollbackLocalTransaction(boolean)",1,4,4
"org.apache.derby.impl.drda.DRDAXAProtocol.rollbackTransaction(Xid,boolean)",1,2,2
"org.apache.derby.impl.drda.DRDAXAProtocol.rollbackXATransaction(Xid,boolean)",1,4,4
"org.apache.derby.impl.drda.DRDAXAProtocol.startXATransaction(Xid,int,long)",3,8,9
"org.apache.derby.impl.drda.DRDAXAProtocol.syncTypeToString(int)",13,2,13
"org.apache.derby.impl.drda.DRDAXAProtocol.writePRPHRCLST(Xid[])",1,2,3
"org.apache.derby.impl.drda.DRDAXAProtocol.writeSYNCCRD(int,int,Xid[])",1,2,2
"org.apache.derby.impl.drda.DRDAXAProtocol.writeXID(Xid)",1,1,1
"org.apache.derby.impl.drda.DRDAXAProtocol.xaflagsToString(int)",11,2,11
"org.apache.derby.impl.drda.DRDAXid.DRDAXid(int,byte[],byte[])",1,1,1
"org.apache.derby.impl.drda.DRDAXid.convertToHexString(byte[])",2,3,4
"org.apache.derby.impl.drda.DRDAXid.getBranchQualifier()",1,1,1
"org.apache.derby.impl.drda.DRDAXid.getFormatId()",1,1,1
"org.apache.derby.impl.drda.DRDAXid.getGlobalTransactionId()",1,1,1
"org.apache.derby.impl.drda.DRDAXid.toString()",1,1,1
"org.apache.derby.impl.drda.Database.Database(String)",1,3,3
"org.apache.derby.impl.drda.Database.appendAttrString(Properties)",2,2,3
"org.apache.derby.impl.drda.Database.buildRuntimeInfo(String,LocalizedResource)",1,2,2
"org.apache.derby.impl.drda.Database.close()",1,7,7
"org.apache.derby.impl.drda.Database.commit()",1,2,2
"org.apache.derby.impl.drda.Database.getConnection()",1,1,1
"org.apache.derby.impl.drda.Database.getCurrentStatement()",1,1,1
"org.apache.derby.impl.drda.Database.getDRDAStatement(Pkgnamcsn)",1,2,2
"org.apache.derby.impl.drda.Database.getDefaultStatement()",1,1,1
"org.apache.derby.impl.drda.Database.getDefaultStatement(Pkgnamcsn)",1,1,1
"org.apache.derby.impl.drda.Database.getPiggyBackedSessionData(boolean)",1,1,1
"org.apache.derby.impl.drda.Database.getPrepareIsolation()",1,1,1
"org.apache.derby.impl.drda.Database.initializeDefaultStatement()",1,1,1
"org.apache.derby.impl.drda.Database.makeConnection(Properties)",1,3,3
"org.apache.derby.impl.drda.Database.makeDummyConnection()",1,2,3
"org.apache.derby.impl.drda.Database.newDRDAStatement(Pkgnamcsn)",1,2,2
"org.apache.derby.impl.drda.Database.removeStatement(DRDAStatement)",1,1,1
"org.apache.derby.impl.drda.Database.reset()",1,1,1
"org.apache.derby.impl.drda.Database.rollback()",1,2,2
"org.apache.derby.impl.drda.Database.setConnection(EngineConnection)",1,2,3
"org.apache.derby.impl.drda.Database.setCurrentStatement(DRDAStatement)",1,1,1
"org.apache.derby.impl.drda.Database.setDrdaID(String)",1,2,2
"org.apache.derby.impl.drda.Database.setPrepareIsolation(int)",1,1,1
"org.apache.derby.impl.drda.Database.storeStatement(DRDAStatement)",1,1,1
"org.apache.derby.impl.drda.Database.supportsLocator()",1,2,2
"org.apache.derby.impl.drda.DecryptionManager.DecryptionManager()",1,9,9
"org.apache.derby.impl.drda.DecryptionManager.calculateDecryptionToken(int,byte[])",1,1,8
"org.apache.derby.impl.drda.DecryptionManager.decryptData(byte[],int,byte[],byte[])",3,8,25
"org.apache.derby.impl.drda.DecryptionManager.generateSeed()",1,2,2
"org.apache.derby.impl.drda.DecryptionManager.obtainPublicKey()",3,1,7
"org.apache.derby.impl.drda.DecryptionManager.toHexByte(String,int,int)",1,2,2
"org.apache.derby.impl.drda.DecryptionManager.toHexString(byte[],int,int)",1,2,2
"org.apache.derby.impl.drda.DssConstants.DssConstants()",1,1,1
"org.apache.derby.impl.drda.DssTrace.getCodePoint(byte[],int)",1,1,1
"org.apache.derby.impl.drda.DssTrace.getHeader(int)",4,2,4
"org.apache.derby.impl.drda.DssTrace.getStartPosition(int)",4,2,4
"org.apache.derby.impl.drda.DssTrace.isComBufferTraceOn()",1,1,1
"org.apache.derby.impl.drda.DssTrace.printHeaderWithCodePointName(String,int)",1,3,3
"org.apache.derby.impl.drda.DssTrace.startComBufferTrace(String)",3,4,5
"org.apache.derby.impl.drda.DssTrace.stopComBufferTrace()",1,3,3
"org.apache.derby.impl.drda.DssTrace.writeComBufferData(byte[],int,int,int,String,String,int)",1,9,15
"org.apache.derby.impl.drda.EXTDTAInputStream.EXTDTAInputStream(ResultSet,int,int)",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.available()",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.close()",1,2,2
"org.apache.derby.impl.drda.EXTDTAInputStream.equals(Object)",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.finalize()",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.getEXTDTAStream(ResultSet,int,int)",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.hashCode()",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.initInputStream()",5,6,9
"org.apache.derby.impl.drda.EXTDTAInputStream.isEmptyStream()",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.isNull()",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.mark(int)",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.markSupported()",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.read()",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.read(byte[])",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.read(byte[],int,int)",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.reset()",1,1,1
"org.apache.derby.impl.drda.EXTDTAInputStream.skip(long)",2,1,2
"org.apache.derby.impl.drda.EbcdicCcsidManager.EbcdicCcsidManager()",1,1,1
"org.apache.derby.impl.drda.EbcdicCcsidManager.convertFromUCS2(String)",1,1,1
"org.apache.derby.impl.drda.EbcdicCcsidManager.convertFromUCS2(String,ByteBuffer)",1,3,3
"org.apache.derby.impl.drda.EbcdicCcsidManager.convertToUCS2(byte[])",1,1,3
"org.apache.derby.impl.drda.EbcdicCcsidManager.convertToUCS2(byte[],int,int)",1,1,3
"org.apache.derby.impl.drda.FdocaConstants.isNullable(int)",1,1,1
"org.apache.derby.impl.drda.FdocaConstants.mapJdbcTypeToDrdaType(int,boolean,int[])",3,2,21
"org.apache.derby.impl.drda.LayerBStreamedEXTDTAReaderInputStream.LayerBStreamedEXTDTAReaderInputStream(DDMReader)",1,1,1
"org.apache.derby.impl.drda.LayerBStreamedEXTDTAReaderInputStream.available()",1,1,1
"org.apache.derby.impl.drda.LayerBStreamedEXTDTAReaderInputStream.read()",1,3,3
"org.apache.derby.impl.drda.LayerBStreamedEXTDTAReaderInputStream.read(byte[],int,int)",1,3,3
"org.apache.derby.impl.drda.LayerBStreamedEXTDTAReaderInputStream.refreshCurrentBuffer()",2,1,2
"org.apache.derby.impl.drda.NaiveTrustManager.NaiveTrustManager()",1,1,1
"org.apache.derby.impl.drda.NaiveTrustManager.checkClientTrusted(X509Certificate[],String)",1,1,1
"org.apache.derby.impl.drda.NaiveTrustManager.checkServerTrusted(X509Certificate[],String)",1,1,1
"org.apache.derby.impl.drda.NaiveTrustManager.getAcceptedIssuers()",1,1,1
"org.apache.derby.impl.drda.NaiveTrustManager.getSocketFactory()",1,4,5
"org.apache.derby.impl.drda.NetworkServerControlImpl.NetworkServerControlImpl()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.NetworkServerControlImpl(InetAddress,int)",1,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.NetworkServerControlImpl(InetAddress,int,String,String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.NetworkServerControlImpl(String,String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.addSession(Socket)",1,6,6
"org.apache.derby.impl.drda.NetworkServerControlImpl.blockingStart(PrintWriter)",4,17,21
"org.apache.derby.impl.drda.NetworkServerControlImpl.buildLocalAddressList(InetAddress)",1,2,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.buildRuntimeInfo(LocalizedResource)",1,3,4
"org.apache.derby.impl.drda.NetworkServerControlImpl.checkAddressIsLocal(InetAddress)",3,2,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.checkShutdownPrivileges()",4,6,7
"org.apache.derby.impl.drda.NetworkServerControlImpl.clientSocketError(IOException)",1,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.closeSocket()",1,4,4
"org.apache.derby.impl.drda.NetworkServerControlImpl.connectToDatabase(DDMWriter,String,String,String)",1,6,6
"org.apache.derby.impl.drda.NetworkServerControlImpl.consoleError(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.consoleExceptionPrint(Exception)",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.consoleExceptionPrintTrace(Throwable)",1,3,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.consoleMessage(String)",1,3,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(String,String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessage(String,String[])",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.consolePropertyMessageWork(String,String[])",5,7,11
"org.apache.derby.impl.drda.NetworkServerControlImpl.consoleTraceMessage(int,boolean)",1,2,4
"org.apache.derby.impl.drda.NetworkServerControlImpl.createServerSocket()",2,5,5
"org.apache.derby.impl.drda.NetworkServerControlImpl.directShutdown()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.directShutdownInternal()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.ensureDataInBuffer(int)",1,3,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.executeWork(int)",3,11,20
"org.apache.derby.impl.drda.NetworkServerControlImpl.fillReplyBuffer()",1,3,4
"org.apache.derby.impl.drda.NetworkServerControlImpl.findCommand(String[])",5,8,9
"org.apache.derby.impl.drda.NetworkServerControlImpl.getActiveSessions()",1,2,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.getAppRequester(AppRequester)",3,5,6
"org.apache.derby.impl.drda.NetworkServerControlImpl.getBytesRead()",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.getBytesWritten()",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.getCLSSysInfo()",1,1,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.getConnectionNumber()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getCurrentProperties()",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.getDriver()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getFormattedTimestamp()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getHost()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getIntPropVal(String,String)",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.getKeepAlive()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getLogConnections()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getManagerLevel(int)",1,3,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.getMaxThreads()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getMessageType(String)",7,1,7
"org.apache.derby.impl.drda.NetworkServerControlImpl.getMinThreads()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getNetProductVersionHolder()",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.getNetSysInfo()",1,2,4
"org.apache.derby.impl.drda.NetworkServerControlImpl.getNextSession(Session)",6,5,8
"org.apache.derby.impl.drda.NetworkServerControlImpl.getPropertyInfo()",1,15,22
"org.apache.derby.impl.drda.NetworkServerControlImpl.getPropertyValues()",1,7,9
"org.apache.derby.impl.drda.NetworkServerControlImpl.getRunQueueSize()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getRuntimeInfo()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getSSLMode()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getSSLModeString(int)",5,2,5
"org.apache.derby.impl.drda.NetworkServerControlImpl.getSSLModeValue(String)",5,5,5
"org.apache.derby.impl.drda.NetworkServerControlImpl.getSecMecValue(String)",1,4,5
"org.apache.derby.impl.drda.NetworkServerControlImpl.getSecurityMechanism()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getShutdown()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getShutdownSync()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getStringValueForSecMec(int)",5,2,5
"org.apache.derby.impl.drda.NetworkServerControlImpl.getThreadListSize()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getTimeSlice()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getTraceAll()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.getTraceDirectory()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.init()",1,5,7
"org.apache.derby.impl.drda.NetworkServerControlImpl.isCmd(String)",2,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.isMsgProperty(String)",2,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.isOn(String)",2,3,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.isServerStarted()",1,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.localizeMessage(String,LocalizedResource,String[])",2,5,9
"org.apache.derby.impl.drda.NetworkServerControlImpl.localizeMessage(String,String[])",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.logConnections(boolean)",1,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.makePrintWriter(OutputStream)",2,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.netSetMaxThreads(int)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.netSetTimeSlice(int)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.parseArgs(String[])",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.ping()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.pingWithNoOpen()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.processCommands(DDMReader,DDMWriter,Session)",4,15,27
"org.apache.derby.impl.drda.NetworkServerControlImpl.processDashArg(int,String[])",5,15,30
"org.apache.derby.impl.drda.NetworkServerControlImpl.readBytesReply(String)",2,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.readCommandReplyHeader()",1,3,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.readInt()",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.readLDBytes()",1,2,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.readLDString()",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.readResult()",2,4,5
"org.apache.derby.impl.drda.NetworkServerControlImpl.readShort()",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.readStringReply(String)",2,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.removeFromSessionTable(int)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.removeThread(DRDAConnThread)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.runQueueAdd(Session)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.runningUnsecure()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.runtimeInfo()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.send()",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.sendMessage(DDMWriter,int,String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.sendOK(DDMWriter)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.sendOKInt(DDMWriter,int)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.sendPropInfo(DDMWriter)",1,3,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.sendRuntimeInfo(DDMWriter)",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.sendSQLMessage(DDMWriter,SQLException,int)",1,4,6
"org.apache.derby.impl.drda.NetworkServerControlImpl.sendSetTraceDirectory(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.sendSysInfo(DDMWriter)",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.setClientLocale(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.setLogConnections(boolean)",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.setLogWriter(PrintWriter)",1,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.setMaxThreads(int)",1,2,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.setMinThreads(int)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.setSSLMode(int)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.setSecurityMechanism(String)",1,2,4
"org.apache.derby.impl.drda.NetworkServerControlImpl.setTimeSlice(int)",1,2,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.setTrace(boolean)",3,9,9
"org.apache.derby.impl.drda.NetworkServerControlImpl.setTraceAll(boolean)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.setTraceDirectory(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.setUniqueThreadName(Thread,String)",2,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.setUpSocket()",2,8,10
"org.apache.derby.impl.drda.NetworkServerControlImpl.shutdown()",2,3,4
"org.apache.derby.impl.drda.NetworkServerControlImpl.start(PrintWriter)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.startNetworkServer()",1,5,5
"org.apache.derby.impl.drda.NetworkServerControlImpl.supportsCCSID(int)",1,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.supportsEUSRIDPWD()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.sysinfo()",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.throwSQLException(String)",1,7,7
"org.apache.derby.impl.drda.NetworkServerControlImpl.throwSQLWarning(String)",1,7,7
"org.apache.derby.impl.drda.NetworkServerControlImpl.throwUnexpectedException(Exception)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.trace(boolean)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.trace(int,boolean)",1,1,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.usage()",1,2,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.wrapSQLError(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.wrapSQLWarning(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.writeByte(int)",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.writeCommandHeader(int)",1,3,4
"org.apache.derby.impl.drda.NetworkServerControlImpl.writeCommandReplyHeader(DDMWriter)",1,1,1
"org.apache.derby.impl.drda.NetworkServerControlImpl.writeLDString(String)",1,3,3
"org.apache.derby.impl.drda.NetworkServerControlImpl.writeShort(int)",1,2,2
"org.apache.derby.impl.drda.NetworkServerControlImpl.writeString(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.NetworkServerMBeanImpl(NetworkServerControlImpl)",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.checkControl()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.checkMonitor()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.checkPermission(SystemPermission)",1,3,3
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getAccumulatedConnectionCount()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getActiveConnectionCount()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getBytesReceived()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getBytesReceivedPerSecond()",1,2,2
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getBytesSent()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getBytesSentPerSecond()",1,2,2
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getConnectionCount()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getConnectionThreadPoolSize()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaHost()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaKeepAlive()",1,1,2
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaMaxThreads()",1,2,3
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaPortNumber()",1,1,2
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaSecurityMechanism()",1,1,2
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaSslMode()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaStreamOutBufferSize()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaTimeSlice()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaTraceAll()",1,1,2
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getDrdaTraceDirectory()",1,3,3
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getServerProperty(String)",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getStartTime()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getUptime()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.getWaitingConnectionCount()",1,1,1
"org.apache.derby.impl.drda.NetworkServerMBeanImpl.ping()",1,2,2
"org.apache.derby.impl.drda.PiggyBackedSessionData.PiggyBackedSessionData(EngineConnection)",1,1,1
"org.apache.derby.impl.drda.PiggyBackedSessionData.getInstance(PiggyBackedSessionData,EngineConnection,boolean)",3,3,7
"org.apache.derby.impl.drda.PiggyBackedSessionData.getIso()",1,1,1
"org.apache.derby.impl.drda.PiggyBackedSessionData.getSchema()",1,1,1
"org.apache.derby.impl.drda.PiggyBackedSessionData.isIsoModified()",1,1,1
"org.apache.derby.impl.drda.PiggyBackedSessionData.isModified()",1,1,2
"org.apache.derby.impl.drda.PiggyBackedSessionData.isSchemaModified()",1,1,1
"org.apache.derby.impl.drda.PiggyBackedSessionData.refresh()",1,1,3
"org.apache.derby.impl.drda.PiggyBackedSessionData.setUnmodified()",1,1,1
"org.apache.derby.impl.drda.PiggyBackedSessionData.toString()",1,1,3
"org.apache.derby.impl.drda.Pkgnamcsn.Pkgnamcsn(String,String,String,int,ConsistencyToken)",1,1,1
"org.apache.derby.impl.drda.Pkgnamcsn.StatementKey.equals(Object)",3,3,3
"org.apache.derby.impl.drda.Pkgnamcsn.StatementKey.hashCode()",1,2,2
"org.apache.derby.impl.drda.Pkgnamcsn.StatementKey.isKeyFor(Pkgnamcsn)",1,4,4
"org.apache.derby.impl.drda.Pkgnamcsn.getPkgcnstkn()",1,1,1
"org.apache.derby.impl.drda.Pkgnamcsn.getPkgid()",1,1,1
"org.apache.derby.impl.drda.Pkgnamcsn.getPkgsn()",1,1,1
"org.apache.derby.impl.drda.Pkgnamcsn.getRdbcolid()",1,1,1
"org.apache.derby.impl.drda.Pkgnamcsn.getRdbnam()",1,1,1
"org.apache.derby.impl.drda.Pkgnamcsn.getStatementKey()",1,1,2
"org.apache.derby.impl.drda.Pkgnamcsn.toString()",1,1,1
"org.apache.derby.impl.drda.ReEncodedInputStream.PublicBufferOutputStream.PublicBufferOutputStream(int)",1,1,1
"org.apache.derby.impl.drda.ReEncodedInputStream.PublicBufferOutputStream.getBuffer()",1,1,1
"org.apache.derby.impl.drda.ReEncodedInputStream.ReEncodedInputStream(Reader)",1,1,1
"org.apache.derby.impl.drda.ReEncodedInputStream.available()",2,1,2
"org.apache.derby.impl.drda.ReEncodedInputStream.close()",1,4,4
"org.apache.derby.impl.drda.ReEncodedInputStream.finalize()",1,1,1
"org.apache.derby.impl.drda.ReEncodedInputStream.reEncode(Reader)",2,2,3
"org.apache.derby.impl.drda.ReEncodedInputStream.read()",4,2,4
"org.apache.derby.impl.drda.SQLTypes.SQLTypes()",1,1,1
"org.apache.derby.impl.drda.SQLTypes.getNonNullableSqlType(int)",1,1,1
"org.apache.derby.impl.drda.SQLTypes.mapDB2SqlTypeToJdbcType(int,long,int)",23,2,26
"org.apache.derby.impl.drda.SQLTypes.mapJdbcTypeToDB2SqlType(int,boolean,int[])",19,2,20
"org.apache.derby.impl.drda.Session.Session(int,Socket,String,boolean)",1,1,2
"org.apache.derby.impl.drda.Session.addDatabase(Database)",1,1,1
"org.apache.derby.impl.drda.Session.buildRuntimeInfo(String,LocalizedResource)",2,1,2
"org.apache.derby.impl.drda.Session.close()",1,3,4
"org.apache.derby.impl.drda.Session.getConnNum()",1,1,1
"org.apache.derby.impl.drda.Session.getDatabase(String)",1,1,1
"org.apache.derby.impl.drda.Session.getRequiredSecurityCodepoint()",4,2,4
"org.apache.derby.impl.drda.Session.initTrace(String)",1,1,3
"org.apache.derby.impl.drda.Session.initialize(String)",1,2,2
"org.apache.derby.impl.drda.Session.isTraceOn()",2,1,2
"org.apache.derby.impl.drda.Session.requiresSecurityCodepoint()",1,1,1
"org.apache.derby.impl.drda.Session.setState(int)",1,1,1
"org.apache.derby.impl.drda.Session.setTraceOff()",2,2,3
"org.apache.derby.impl.drda.Session.setTraceOn(String)",2,1,2
"org.apache.derby.impl.drda.SignedBinary.SignedBinary()",1,1,1
"org.apache.derby.impl.drda.SignedBinary.bigEndianBytesToInt(byte[],int)",1,1,1
"org.apache.derby.impl.drda.SignedBinary.bigEndianBytesToLong(byte[],int)",1,1,1
"org.apache.derby.impl.drda.SignedBinary.bigEndianBytesToShort(byte[],int)",1,1,1
"org.apache.derby.impl.drda.SignedBinary.getInt(byte[],int,int)",4,4,4
"org.apache.derby.impl.drda.SignedBinary.getLong(byte[],int,int)",4,4,4
"org.apache.derby.impl.drda.SignedBinary.getShort(byte[],int,int)",4,4,4
"org.apache.derby.impl.drda.SignedBinary.littleEndianBytesToInt(byte[],int)",1,1,1
"org.apache.derby.impl.drda.SignedBinary.littleEndianBytesToLong(byte[],int)",1,1,1
"org.apache.derby.impl.drda.SignedBinary.littleEndianBytesToShort(byte[],int)",1,1,1
"org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream.StandardEXTDTAReaderInputStream(DDMReader)",1,1,1
"org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream.available()",2,1,2
"org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream.getLength()",1,1,1
"org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream.read()",2,3,4
"org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream.read(byte[],int,int)",2,2,3
"org.apache.derby.impl.drda.StandardEXTDTAReaderInputStream.refreshCurrentBuffer()",2,2,2
"org.apache.derby.impl.drda.TestFile.TestFile()",1,1,1
"org.apache.derby.impl.drda.TestFile.executeFile(String)",1,1,1
"org.apache.derby.impl.drda.TestFile.main(String[])",1,2,2
"org.apache.derby.impl.drda.TestProto.TestProto(String,int)",1,3,3
"org.apache.derby.impl.drda.TestProto.checkError()",13,15,20
"org.apache.derby.impl.drda.TestProto.checkIntOrCP(int)",1,6,7
"org.apache.derby.impl.drda.TestProto.checkSQLCARD(int,String)",4,4,4
"org.apache.derby.impl.drda.TestProto.closeConnection()",1,1,2
"org.apache.derby.impl.drda.TestProto.completeTest()",1,1,1
"org.apache.derby.impl.drda.TestProto.convertHex(String)",1,3,4
"org.apache.derby.impl.drda.TestProto.cpError(int,int)",1,1,1
"org.apache.derby.impl.drda.TestProto.decodeCP(String)",1,2,2
"org.apache.derby.impl.drda.TestProto.fail(String)",3,3,4
"org.apache.derby.impl.drda.TestProto.getBytes()",2,5,5
"org.apache.derby.impl.drda.TestProto.getCP()",1,1,1
"org.apache.derby.impl.drda.TestProto.getConnection()",1,4,4
"org.apache.derby.impl.drda.TestProto.getEBCDIC(String)",1,1,1
"org.apache.derby.impl.drda.TestProto.getHostName()",1,1,2
"org.apache.derby.impl.drda.TestProto.getInt()",3,6,6
"org.apache.derby.impl.drda.TestProto.getIntOrCP()",3,3,3
"org.apache.derby.impl.drda.TestProto.getString()",1,2,2
"org.apache.derby.impl.drda.TestProto.init()",1,2,2
"org.apache.derby.impl.drda.TestProto.processCommand()",2,14,56
"org.apache.derby.impl.drda.TestProto.processFile(String)",2,4,6
"org.apache.derby.impl.drda.TestProto.processIncludeFile()",1,1,1
"org.apache.derby.impl.drda.TestProto.readLengthAndCodePoint()",1,2,2
"org.apache.derby.impl.drda.TestProto.readSecMecAndSECCHKCD()",2,3,5
"org.apache.derby.impl.drda.TestProto.reset()",1,1,1
"org.apache.derby.impl.drda.TestProto.skipDdm()",1,1,1
"org.apache.derby.impl.drda.TestProto.skipDss()",1,1,1
"org.apache.derby.impl.drda.TestProto.writeEncodedLDString(String,String,int)",1,3,3
"org.apache.derby.impl.drda.TestProto.writeEncodedString(String,String)",1,2,2
"org.apache.derby.impl.drda.XADatabase.XADatabase(String)",1,1,1
"org.apache.derby.impl.drda.XADatabase.getResourceAdapter()",1,1,1
"org.apache.derby.impl.drda.XADatabase.getXAResource()",1,1,1
"org.apache.derby.impl.drda.XADatabase.makeConnection(Properties)",1,3,4
"org.apache.derby.impl.drda.XADatabase.setXAResource(XAResource)",1,1,1
"org.apache.derby.impl.drda.memCheck.freeMemory()",1,1,1
"org.apache.derby.impl.drda.memCheck.getMemInfo()",1,1,1
"org.apache.derby.impl.drda.memCheck.main(String[])",1,1,1
"org.apache.derby.impl.drda.memCheck.memCheck()",1,1,1
"org.apache.derby.impl.drda.memCheck.memCheck(int)",1,1,1
"org.apache.derby.impl.drda.memCheck.run()",1,3,3
"org.apache.derby.impl.drda.memCheck.showmem()",1,1,1
"org.apache.derby.impl.drda.memCheck.totalMemory()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.BaseStorageFactory()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.createTempDir()",2,3,4
"org.apache.derby.impl.io.BaseStorageFactory.createTemporaryFile(String,String)",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.getCanonicalName()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.getSeparator()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.getStorageFactoryVersion()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.getTempDir()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.init(String,String,String,String)",1,2,2
"org.apache.derby.impl.io.BaseStorageFactory.isFast()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.isReadOnlyDatabase()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.newStorageFile(StorageFile,String)",4,4,5
"org.apache.derby.impl.io.BaseStorageFactory.newStorageFile(String)",2,3,4
"org.apache.derby.impl.io.BaseStorageFactory.newStorageFile(String,String)",3,4,4
"org.apache.derby.impl.io.BaseStorageFactory.readOnlyTempRoot()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.shutdown()",1,1,1
"org.apache.derby.impl.io.BaseStorageFactory.supportsRandomAccess()",1,1,1
"org.apache.derby.impl.io.CPFile.CPFile(CPFile,String)",1,1,1
"org.apache.derby.impl.io.CPFile.CPFile(CPStorageFactory,String)",1,1,1
"org.apache.derby.impl.io.CPFile.CPFile(CPStorageFactory,String,String)",1,1,1
"org.apache.derby.impl.io.CPFile.CPFile(CPStorageFactory,String,int)",1,1,1
"org.apache.derby.impl.io.CPFile.exists()",1,1,1
"org.apache.derby.impl.io.CPFile.getInputStream()",2,5,5
"org.apache.derby.impl.io.CPFile.getParentDir(int)",1,1,1
"org.apache.derby.impl.io.CPFile.getURL()",4,3,4
"org.apache.derby.impl.io.CPStorageFactory.doInit()",1,2,2
"org.apache.derby.impl.io.CPStorageFactory.newPersistentFile(StorageFile,String)",2,2,2
"org.apache.derby.impl.io.CPStorageFactory.newPersistentFile(String)",1,1,1
"org.apache.derby.impl.io.CPStorageFactory.newPersistentFile(String,String)",2,3,3
"org.apache.derby.impl.io.DirFile.DirFile(DirFile,String)",1,1,1
"org.apache.derby.impl.io.DirFile.DirFile(String)",1,1,1
"org.apache.derby.impl.io.DirFile.DirFile(String,String)",1,1,1
"org.apache.derby.impl.io.DirFile.deleteAll()",6,4,7
"org.apache.derby.impl.io.DirFile.getExclusiveFileLock()",1,4,4
"org.apache.derby.impl.io.DirFile.getInputStream()",1,1,1
"org.apache.derby.impl.io.DirFile.getOutputStream()",1,1,1
"org.apache.derby.impl.io.DirFile.getOutputStream(boolean)",1,1,1
"org.apache.derby.impl.io.DirFile.getParentDir()",2,1,2
"org.apache.derby.impl.io.DirFile.getRandomAccessFile(String)",1,2,3
"org.apache.derby.impl.io.DirFile.getTempDir()",1,1,1
"org.apache.derby.impl.io.DirFile.getURL()",1,1,1
"org.apache.derby.impl.io.DirFile.releaseExclusiveFileLock()",1,2,2
"org.apache.derby.impl.io.DirFile.renameTo(StorageFile)",1,1,1
"org.apache.derby.impl.io.DirFile4.DirFile4(DirFile,String,boolean)",1,1,1
"org.apache.derby.impl.io.DirFile4.DirFile4(String,String,boolean)",1,1,1
"org.apache.derby.impl.io.DirFile4.DirFile4(String,boolean)",1,1,1
"org.apache.derby.impl.io.DirFile4.getExclusiveFileLock()",1,6,7
"org.apache.derby.impl.io.DirFile4.getOutputStream(boolean)",1,1,1
"org.apache.derby.impl.io.DirFile4.getParentDir()",2,1,2
"org.apache.derby.impl.io.DirFile4.getRandomAccessFile(String)",1,3,4
"org.apache.derby.impl.io.DirFile4.releaseExclusiveFileLock()",1,4,5
"org.apache.derby.impl.io.DirRandomAccessFile.DirRandomAccessFile(File,String)",1,1,1
"org.apache.derby.impl.io.DirRandomAccessFile.sync(boolean)",1,1,1
"org.apache.derby.impl.io.DirRandomAccessFile4.DirRandomAccessFile4(File,String)",1,1,1
"org.apache.derby.impl.io.DirRandomAccessFile4.sync(boolean)",1,2,3
"org.apache.derby.impl.io.DirStorageFactory.doInit()",1,7,7
"org.apache.derby.impl.io.DirStorageFactory.isReadOnlyDatabase()",1,1,1
"org.apache.derby.impl.io.DirStorageFactory.newPersistentFile(StorageFile,String)",1,1,1
"org.apache.derby.impl.io.DirStorageFactory.newPersistentFile(String)",2,1,2
"org.apache.derby.impl.io.DirStorageFactory.newPersistentFile(String,String)",1,1,1
"org.apache.derby.impl.io.DirStorageFactory.newStorageFile(StorageFile,String)",1,1,1
"org.apache.derby.impl.io.DirStorageFactory.newStorageFile(String)",1,1,1
"org.apache.derby.impl.io.DirStorageFactory.newStorageFile(String,String)",1,1,1
"org.apache.derby.impl.io.DirStorageFactory.supportsRandomAccess()",1,1,1
"org.apache.derby.impl.io.DirStorageFactory.supportsWriteSync()",1,1,1
"org.apache.derby.impl.io.DirStorageFactory.sync(OutputStream,boolean)",1,1,1
"org.apache.derby.impl.io.DirStorageFactory4.DirStorageFactory4()",1,1,1
"org.apache.derby.impl.io.DirStorageFactory4.newPersistentFile(StorageFile,String)",1,1,1
"org.apache.derby.impl.io.DirStorageFactory4.newPersistentFile(String)",2,1,2
"org.apache.derby.impl.io.DirStorageFactory4.newPersistentFile(String,String)",1,1,1
"org.apache.derby.impl.io.DirStorageFactory4.supportsWriteSync()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.InputStreamFile(BaseStorageFactory,String)",1,4,4
"org.apache.derby.impl.io.InputStreamFile.InputStreamFile(BaseStorageFactory,String,String)",1,2,2
"org.apache.derby.impl.io.InputStreamFile.InputStreamFile(BaseStorageFactory,String,int)",1,1,1
"org.apache.derby.impl.io.InputStreamFile.InputStreamFile(InputStreamFile,String)",1,2,2
"org.apache.derby.impl.io.InputStreamFile.canWrite()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.createNewFile()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.delete()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.deleteAll()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.equals(Object)",2,2,3
"org.apache.derby.impl.io.InputStreamFile.getCanonicalPath()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.getExclusiveFileLock()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.getName()",1,2,2
"org.apache.derby.impl.io.InputStreamFile.getOutputStream()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.getOutputStream(boolean)",1,1,1
"org.apache.derby.impl.io.InputStreamFile.getParentDir()",2,1,2
"org.apache.derby.impl.io.InputStreamFile.getPath()",2,2,2
"org.apache.derby.impl.io.InputStreamFile.getRandomAccessFile(String)",1,2,2
"org.apache.derby.impl.io.InputStreamFile.getURL()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.hashCode()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.isDirectory()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.length()",2,1,3
"org.apache.derby.impl.io.InputStreamFile.list()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.mkdir()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.mkdirs()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.releaseExclusiveFileLock()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.renameTo(StorageFile)",1,1,1
"org.apache.derby.impl.io.InputStreamFile.setReadOnly()",1,1,1
"org.apache.derby.impl.io.InputStreamFile.toString()",1,1,1
"org.apache.derby.impl.io.JarDBFile.JarDBFile(JarDBFile,String)",1,1,1
"org.apache.derby.impl.io.JarDBFile.JarDBFile(JarStorageFactory,String)",1,1,1
"org.apache.derby.impl.io.JarDBFile.JarDBFile(JarStorageFactory,String,String)",1,1,1
"org.apache.derby.impl.io.JarDBFile.JarDBFile(JarStorageFactory,String,int)",1,1,1
"org.apache.derby.impl.io.JarDBFile.exists()",1,1,1
"org.apache.derby.impl.io.JarDBFile.getEntry()",1,1,1
"org.apache.derby.impl.io.JarDBFile.getInputStream()",2,1,3
"org.apache.derby.impl.io.JarDBFile.getParentDir(int)",1,1,1
"org.apache.derby.impl.io.JarDBFile.getURL()",1,1,1
"org.apache.derby.impl.io.JarDBFile.length()",2,1,2
"org.apache.derby.impl.io.JarDBFile.toString()",1,1,1
"org.apache.derby.impl.io.JarStorageFactory.doInit()",2,4,7
"org.apache.derby.impl.io.JarStorageFactory.getJarFile(String)",1,2,3
"org.apache.derby.impl.io.JarStorageFactory.newPersistentFile(StorageFile,String)",2,2,2
"org.apache.derby.impl.io.JarStorageFactory.newPersistentFile(String)",1,1,1
"org.apache.derby.impl.io.JarStorageFactory.newPersistentFile(String,String)",2,3,3
"org.apache.derby.impl.io.JarStorageFactory.shutdown()",1,2,3
"org.apache.derby.impl.io.URLFile.URLFile(URLFile,String)",1,1,1
"org.apache.derby.impl.io.URLFile.URLFile(URLStorageFactory,String)",1,1,1
"org.apache.derby.impl.io.URLFile.URLFile(URLStorageFactory,String,String)",1,1,1
"org.apache.derby.impl.io.URLFile.URLFile(URLStorageFactory,String,int)",1,1,1
"org.apache.derby.impl.io.URLFile.exists()",2,1,3
"org.apache.derby.impl.io.URLFile.getInputStream()",1,1,2
"org.apache.derby.impl.io.URLFile.getParentDir(int)",1,1,1
"org.apache.derby.impl.io.URLStorageFactory.doInit()",1,3,3
"org.apache.derby.impl.io.URLStorageFactory.newPersistentFile(StorageFile,String)",2,2,2
"org.apache.derby.impl.io.URLStorageFactory.newPersistentFile(String)",1,1,1
"org.apache.derby.impl.io.URLStorageFactory.newPersistentFile(String,String)",2,3,3
"org.apache.derby.impl.jdbc.AutoPositioningStream.AutoPositioningStream(ConnectionChild,InputStream,Object)",1,2,2
"org.apache.derby.impl.jdbc.AutoPositioningStream.read()",1,1,3
"org.apache.derby.impl.jdbc.AutoPositioningStream.read(byte[])",1,1,1
"org.apache.derby.impl.jdbc.AutoPositioningStream.read(byte[],int,int)",1,1,3
"org.apache.derby.impl.jdbc.AutoPositioningStream.setPosition()",1,3,3
"org.apache.derby.impl.jdbc.AutoPositioningStream.skip(long)",1,1,1
"org.apache.derby.impl.jdbc.BiggerStoreStreamClobTest.BiggerStoreStreamClobTest(String)",1,1,1
"org.apache.derby.impl.jdbc.BiggerStoreStreamClobTest.setUp()",1,1,1
"org.apache.derby.impl.jdbc.BiggerStoreStreamClobTest.suite()",1,1,1
"org.apache.derby.impl.jdbc.BiggerStoreStreamClobTest.tearDown()",1,1,1
"org.apache.derby.impl.jdbc.BiggerTemporaryClobTest.BiggerTemporaryClobTest(String)",1,1,1
"org.apache.derby.impl.jdbc.BiggerTemporaryClobTest.setUp()",1,1,1
"org.apache.derby.impl.jdbc.BiggerTemporaryClobTest.suite()",1,1,1
"org.apache.derby.impl.jdbc.BiggerTemporaryClobTest.tearDown()",1,1,1
"org.apache.derby.impl.jdbc.BinaryToRawStream.BinaryToRawStream(InputStream,Object)",8,4,16
"org.apache.derby.impl.jdbc.BinaryToRawStream.getLength()",1,1,1
"org.apache.derby.impl.jdbc.ClobAsciiStream.ClobAsciiStream(Writer)",1,1,1
"org.apache.derby.impl.jdbc.ClobAsciiStream.write(byte[],int,int)",1,2,3
"org.apache.derby.impl.jdbc.ClobAsciiStream.write(int)",1,1,1
"org.apache.derby.impl.jdbc.ClobUpdatableReader.ClobUpdatableReader(EmbedClob)",1,1,1
"org.apache.derby.impl.jdbc.ClobUpdatableReader.ClobUpdatableReader(EmbedClob,long,long)",1,3,3
"org.apache.derby.impl.jdbc.ClobUpdatableReader.ClobUpdatableReader(LOBInputStream,ConnectionChild)",1,1,1
"org.apache.derby.impl.jdbc.ClobUpdatableReader.close()",1,1,1
"org.apache.derby.impl.jdbc.ClobUpdatableReader.init(LOBInputStream,long)",4,4,4
"org.apache.derby.impl.jdbc.ClobUpdatableReader.read(char[],int,int)",2,1,3
"org.apache.derby.impl.jdbc.ClobUpdatableReader.updateIfRequired()",3,6,6
"org.apache.derby.impl.jdbc.ClobUtf8Writer.ClobUtf8Writer(TemporaryClob,long)",1,1,1
"org.apache.derby.impl.jdbc.ClobUtf8Writer.close()",1,1,1
"org.apache.derby.impl.jdbc.ClobUtf8Writer.flush()",2,2,2
"org.apache.derby.impl.jdbc.ClobUtf8Writer.write(char[],int,int)",2,3,4
"org.apache.derby.impl.jdbc.ConnectionChild.ConnectionChild(EmbedConnection)",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.commitIfAutoCommit()",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.commitIfNeeded()",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.getCal()",1,1,2
"org.apache.derby.impl.jdbc.ConnectionChild.getConnectionSynchronization()",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.getEmbedConnection()",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.handleException(Throwable)",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.needCommit()",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(String)",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(String,Object)",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.newSQLException(String,Object,Object)",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.restoreContextStack()",1,1,1
"org.apache.derby.impl.jdbc.ConnectionChild.setupContextStack()",1,1,1
"org.apache.derby.impl.jdbc.EmbedBlob.EmbedBlob(DataValueDescriptor,EmbedConnection)",3,9,9
"org.apache.derby.impl.jdbc.EmbedBlob.EmbedBlob(byte[],EmbedConnection)",1,3,3
"org.apache.derby.impl.jdbc.EmbedBlob.checkMatch(Blob)",6,2,8
"org.apache.derby.impl.jdbc.EmbedBlob.checkMatch(byte[])",3,2,4
"org.apache.derby.impl.jdbc.EmbedBlob.checkValidity()",2,2,2
"org.apache.derby.impl.jdbc.EmbedBlob.finalize()",1,2,2
"org.apache.derby.impl.jdbc.EmbedBlob.free()",3,3,4
"org.apache.derby.impl.jdbc.EmbedBlob.getBinaryStream()",2,5,5
"org.apache.derby.impl.jdbc.EmbedBlob.getBinaryStream(long,long)",4,5,5
"org.apache.derby.impl.jdbc.EmbedBlob.getBytes(long,int)",6,11,12
"org.apache.derby.impl.jdbc.EmbedBlob.getLocator()",1,2,2
"org.apache.derby.impl.jdbc.EmbedBlob.handleMyExceptions(Throwable)",1,3,3
"org.apache.derby.impl.jdbc.EmbedBlob.isMaterialized()",1,1,1
"org.apache.derby.impl.jdbc.EmbedBlob.length()",6,8,10
"org.apache.derby.impl.jdbc.EmbedBlob.position(Blob,long)",9,12,15
"org.apache.derby.impl.jdbc.EmbedBlob.position(byte[],long)",9,11,13
"org.apache.derby.impl.jdbc.EmbedBlob.read()",3,4,4
"org.apache.derby.impl.jdbc.EmbedBlob.setBinaryStream(long)",4,6,6
"org.apache.derby.impl.jdbc.EmbedBlob.setBytes(long,byte[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedBlob.setBytes(long,byte[],int,int)",4,6,6
"org.apache.derby.impl.jdbc.EmbedBlob.setPosition(long)",4,5,5
"org.apache.derby.impl.jdbc.EmbedBlob.truncate(long)",2,5,5
"org.apache.derby.impl.jdbc.EmbedCallableStatement.EmbedCallableStatement(EmbedConnection,String,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.addBatch()",3,3,4
"org.apache.derby.impl.jdbc.EmbedCallableStatement.checkRequiresCallableStatement(Activation)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.executeStatement(Activation,boolean,boolean)",2,6,7
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getBlob(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getBoolean(int)",1,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getByte(int)",1,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getBytes(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getClob(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getDate(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getDate(int,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getDouble(int)",1,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getFloat(int)",1,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getInt(int)",1,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getLong(int)",1,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getObject(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getShort(int)",1,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getString(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getTime(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getTime(int,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getTimestamp(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getTimestamp(int,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getURL(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.getURL(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int,int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int,int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.registerOutParameter(int,int,int)",2,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement.setURL(String,URL)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement.wasNull()",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement169.EmbedCallableStatement169(EmbedConnection,String,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.EmbedCallableStatement20(EmbedConnection,String,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getArray(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getArray(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBigDecimal(int,int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBinaryStream(int)",3,5,7
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBlob(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBoolean(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getByte(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getBytes(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getCharacterStream(int)",4,8,11
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getClob(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getDate(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getDate(String,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getDouble(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getFloat(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getInt(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getLong(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(String,Map)",3,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getObject(int,Map)",3,3,3
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getRef(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getRef(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getShort(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getString(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getTime(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getTime(String,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getTimestamp(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.getTimestamp(String,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.registerOutParameter(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.registerOutParameter(String,int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.registerOutParameter(String,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setArray(int,Array)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setAsciiStream(String,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBigDecimal(String,BigDecimal)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBigDecimal(int,BigDecimal)",1,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBinaryStream(String,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBoolean(String,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setByte(String,byte)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setBytes(String,byte[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setCharacterStream(String,Reader,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setDate(String,Date)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setDate(String,Date,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setDouble(String,double)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setFloat(String,float)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setInt(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setLong(String,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setNull(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setNull(String,int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setObject(String,Object)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setObject(String,Object,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setObject(String,Object,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setObjectConvert(int,Object)",2,2,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setRef(int,Ref)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setShort(String,short)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setString(String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setTime(String,Time)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setTime(String,Time,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setTimestamp(String,Timestamp)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement20.setTimestamp(String,Timestamp,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement30.EmbedCallableStatement30(EmbedConnection,String,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement30.getParameterMetaData()",2,1,2
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.EmbedCallableStatement40(EmbedConnection,String,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getCharacterStream(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNCharacterStream(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNCharacterStream(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNClob(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNClob(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNString(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getNString(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getParameterMetaData()",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getRowId(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getRowId(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getSQLXML(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.getSQLXML(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setAsciiStream(String,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setAsciiStream(String,InputStream,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBinaryStream(String,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBinaryStream(String,InputStream,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBlob(String,Blob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBlob(String,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setBlob(String,InputStream,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setCharacterStream(String,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setClob(String,Clob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setClob(String,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setClob(String,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNCharacterStream(String,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(String,NClob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(String,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(String,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(int,NClob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNClob(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNString(String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setNString(int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setRowId(String,RowId)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setRowId(int,RowId)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setSQLXML(String,SQLXML)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.setSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.impl.jdbc.EmbedCallableStatement40.unwrap(Class<T>)",1,2,2
"org.apache.derby.impl.jdbc.EmbedClob.EmbedClob(EmbedConnection)",1,1,1
"org.apache.derby.impl.jdbc.EmbedClob.EmbedClob(EmbedConnection,DataValueDescriptor)",3,8,8
"org.apache.derby.impl.jdbc.EmbedClob.checkValidity()",2,2,2
"org.apache.derby.impl.jdbc.EmbedClob.free()",2,3,3
"org.apache.derby.impl.jdbc.EmbedClob.getAsciiStream()",1,1,1
"org.apache.derby.impl.jdbc.EmbedClob.getCharacterStream()",1,2,2
"org.apache.derby.impl.jdbc.EmbedClob.getCharacterStream(long,long)",4,5,5
"org.apache.derby.impl.jdbc.EmbedClob.getInternalClob()",1,1,1
"org.apache.derby.impl.jdbc.EmbedClob.getLocator()",1,2,2
"org.apache.derby.impl.jdbc.EmbedClob.getSubString(long,int)",5,7,8
"org.apache.derby.impl.jdbc.EmbedClob.length()",1,2,2
"org.apache.derby.impl.jdbc.EmbedClob.makeWritableClobClone()",1,1,1
"org.apache.derby.impl.jdbc.EmbedClob.makeWritableClobClone(long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedClob.position(Clob,long)",12,7,14
"org.apache.derby.impl.jdbc.EmbedClob.position(String,long)",12,14,20
"org.apache.derby.impl.jdbc.EmbedClob.setAsciiStream(long)",1,2,2
"org.apache.derby.impl.jdbc.EmbedClob.setCharacterStream(long)",1,3,3
"org.apache.derby.impl.jdbc.EmbedClob.setString(long,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedClob.setString(long,String,int,int)",2,5,5
"org.apache.derby.impl.jdbc.EmbedClob.truncate(long)",2,5,5
"org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection(EmbedConnection)",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.EmbedConnection(InternalDriver,String,Properties)",15,47,58
"org.apache.derby.impl.jdbc.EmbedConnection.addLOBMapping(Object)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.addLOBReference(Object)",1,1,2
"org.apache.derby.impl.jdbc.EmbedConnection.addWarning(SQLWarning)",2,1,2
"org.apache.derby.impl.jdbc.EmbedConnection.bootDatabase(Properties,boolean)",2,5,6
"org.apache.derby.impl.jdbc.EmbedConnection.cancelRunningStatement()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.checkDatabaseBooted(Database,String,String)",2,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.checkDatabaseCreatePrivileges(String,String)",3,4,6
"org.apache.derby.impl.jdbc.EmbedConnection.checkIfClosed()",2,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.checkIsDBOwner(int)",7,8,8
"org.apache.derby.impl.jdbc.EmbedConnection.checkUserCredentials(String,Properties)",3,7,9
"org.apache.derby.impl.jdbc.EmbedConnection.checkUserIsNotARole()",3,5,6
"org.apache.derby.impl.jdbc.EmbedConnection.clearLOBMapping()",1,4,4
"org.apache.derby.impl.jdbc.EmbedConnection.clearWarnings()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.close()",2,5,5
"org.apache.derby.impl.jdbc.EmbedConnection.close(StandardException)",4,6,6
"org.apache.derby.impl.jdbc.EmbedConnection.commit()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.commitIfAutoCommit()",2,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.commitIfNeeded()",2,3,4
"org.apache.derby.impl.jdbc.EmbedConnection.createBlob()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.createBoot(Properties)",4,5,9
"org.apache.derby.impl.jdbc.EmbedConnection.createClob()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.createDatabase(String,Properties)",1,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.createStatement()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.createStatement(int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.createStatement(int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.filterProperties(Properties)",3,2,3
"org.apache.derby.impl.jdbc.EmbedConnection.finalize()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.getApplicationConnection()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getAutoCommit()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getCatalog()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getConnectionSynchronization()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getContextManager()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.getCurrentSchemaName()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getDBName()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.getDatabase()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.getEngineType()",2,1,2
"org.apache.derby.impl.jdbc.EmbedConnection.getHoldability()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getIncLOBKey()",1,1,8
"org.apache.derby.impl.jdbc.EmbedConnection.getLOBMapping(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getLanguageConnection()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.getLocalDriver()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.getMetaData()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.getPrepareIsolation()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getReplicationOperation(Properties)",2,2,8
"org.apache.derby.impl.jdbc.EmbedConnection.getResultSetOrderId()",2,1,2
"org.apache.derby.impl.jdbc.EmbedConnection.getTR()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getTransactionIsolation()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getTypeMap()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getWarnings()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.getlobHMObj()",1,1,2
"org.apache.derby.impl.jdbc.EmbedConnection.handleDBNotFound()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.handleException(Throwable)",1,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.handleException(Throwable,boolean)",1,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.handleFailoverMaster(TransactionResourceImpl)",1,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.handleFailoverSlave(Database)",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.handleStartReplicationMaster(TransactionResourceImpl,Properties)",2,5,5
"org.apache.derby.impl.jdbc.EmbedConnection.handleStopReplicationMaster(TransactionResourceImpl,Properties)",1,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.handleStopReplicationSlave(Database,Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.internalStopReplicationSlave(Database,Properties)",2,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.isClosed()",3,2,3
"org.apache.derby.impl.jdbc.EmbedConnection.isEncryptionBoot(Properties)",1,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.isHardUpgradeBoot(Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.isInternalShutdownSlaveDatabase(Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.isReadOnly()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.isReplicationFailover(Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.isStartReplicationMasterBoot(Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.isStartReplicationSlaveBoot(Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.isStopReplicationMasterBoot(Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.isStopReplicationSlaveBoot(Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.nativeSQL(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.needCommit()",1,1,2
"org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(String,Object)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.newSQLException(String,Object,Object)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(String,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareCall(String,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareMetaDataStatement(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(String,String[])",1,1,3
"org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(String,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(String,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(String,int,int,int,int,int[],String[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.prepareStatement(String,int[])",1,1,3
"org.apache.derby.impl.jdbc.EmbedConnection.pushConnectionContext(ContextManager)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.removeLOBMapping(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.removePhaseTwoProps(Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.resetFromPool()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.restoreContextStack()",1,5,6
"org.apache.derby.impl.jdbc.EmbedConnection.rollback()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.setApplicationConnection(Connection)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.setAutoCommit(boolean)",3,4,4
"org.apache.derby.impl.jdbc.EmbedConnection.setCatalog(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.setDrdaID(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.setHoldability(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.setInactive()",2,1,2
"org.apache.derby.impl.jdbc.EmbedConnection.setPrepareIsolation(int)",3,2,4
"org.apache.derby.impl.jdbc.EmbedConnection.setReadOnly(boolean)",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.setResultSetType(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.setTransactionIsolation(int)",3,3,8
"org.apache.derby.impl.jdbc.EmbedConnection.setTypeMap(Map)",3,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.setupContextStack()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.stripSubSubProtocolPrefix(String)",3,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.toString()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.transactionIsIdle()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection.xa_commit(boolean)",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection.xa_prepare()",1,3,3
"org.apache.derby.impl.jdbc.EmbedConnection.xa_rollback()",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection30.EmbedConnection30(EmbedConnection)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection30.EmbedConnection30(InternalDriver,String,Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection30.commonSetSavepointCode(String,boolean)",4,7,8
"org.apache.derby.impl.jdbc.EmbedConnection30.releaseSavepoint(Savepoint)",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection30.rollback(Savepoint)",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnection30.setSavepoint()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection30.setSavepoint(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection30.verifySavepointArg(Savepoint)",3,3,3
"org.apache.derby.impl.jdbc.EmbedConnection30.verifySavepointCommandIsAllowed()",3,4,4
"org.apache.derby.impl.jdbc.EmbedConnection40.EmbedConnection40(EmbedConnection)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.EmbedConnection40(InternalDriver,String,Properties)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.createArrayOf(String,Object[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.createNClob()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.createSQLXML()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.createStruct(String,Object[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.getClientInfo()",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.getClientInfo(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.getTypeMap()",2,2,3
"org.apache.derby.impl.jdbc.EmbedConnection40.isValid(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedConnection40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnection40.setClientInfo(Properties)",2,3,4
"org.apache.derby.impl.jdbc.EmbedConnection40.setClientInfo(String,String)",2,2,4
"org.apache.derby.impl.jdbc.EmbedConnection40.unwrap(Class<T>)",1,2,2
"org.apache.derby.impl.jdbc.EmbedConnectionContext.EmbedConnectionContext(ContextManager,EmbedConnection)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnectionContext.cleanupOnError(Throwable)",4,3,6
"org.apache.derby.impl.jdbc.EmbedConnectionContext.getNestedConnection(boolean)",4,6,6
"org.apache.derby.impl.jdbc.EmbedConnectionContext.getResultSet(ResultSet)",1,1,1
"org.apache.derby.impl.jdbc.EmbedConnectionContext.processInaccessibleDynamicResult(ResultSet)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.EmbedDatabaseMetaData(EmbedConnection,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.PBloadQueryDescriptions()",1,4,4
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.allProceduresAreCallable()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.allTablesAreSelectable()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.dataDefinitionCausesTransactionCommit()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.dataDefinitionIgnoredInTransactions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.deletesAreDetected(int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.doGetBestRowId(String,String,String,int,boolean,String)",6,9,13
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.doGetCols(String,String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.doGetIndexInfo(String,String,String,boolean,boolean,String)",2,2,3
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.doGetProcCols(String,String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.doGetProcs(String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.doGetVersionCols(String,String,String,String)",2,2,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.doesMaxRowSizeIncludeBlobs()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getAttributes(String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getBestRowIdentifier(String,String,String,int,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getBestRowIdentifierForODBC(String,String,String,int,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getCatalogSeparator()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getCatalogTerm()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getCatalogs()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getClientCachedMetaData()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getClientInfoProperties()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getColumnPrivileges(String,String,String,String)",2,2,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getColumns(String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getColumnsForODBC(String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getConnection()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getCrossReference(String,String,String,String,String,String)",2,2,3
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getCrossReferenceForODBC(String,String,String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseMajorVersion()",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseMinorVersion()",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseProductName()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDatabaseProductVersion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDefaultTransactionIsolation()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverMajorVersion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverMinorVersion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverName()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getDriverVersion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getExportedKeys(String,String,String)",2,2,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getExtraNameCharacters()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getFunctionColumns(String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getFunctions(String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getGenericConstantActionFactory()",1,2,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getIdentifierQuoteString()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getImportedKeys(String,String,String)",2,2,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getIndexInfo(String,String,String,boolean,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getIndexInfoForODBC(String,String,String,boolean,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getJDBCMajorVersion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getJDBCMinorVersion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getLanguageConnectionContext()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxBinaryLiteralLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxCatalogNameLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxCharLiteralLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxColumnNameLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxColumnsInGroupBy()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxColumnsInIndex()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxColumnsInOrderBy()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxColumnsInSelect()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxColumnsInTable()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxConnections()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxCursorNameLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxIndexLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxProcedureNameLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxRowSize()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxSchemaNameLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxStatementLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxStatements()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxTableNameLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxTablesInSelect()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getMaxUserNameLength()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getNumericFunctions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getPreparedQuery(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getPreparedQuery(String,boolean)",2,4,4
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getPreparedQueryUsingSystemTables(String,boolean)",2,3,3
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getPrimaryKeys(String,String,String)",2,2,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getProcedureColumns(String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getProcedureColumnsForODBC(String,String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getProcedureTerm()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getProcedures(String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getProceduresForODBC(String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getQueryDescriptions(boolean)",2,1,4
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getQueryFromDescription(String,boolean)",1,2,4
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getResultSetHoldability()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSQLKeywords()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSQLStateType()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSchemaTerm()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSchemas()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSchemas(String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSearchStringEscape()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSimpleQuery(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSimpleQuery(String,boolean)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getStringFunctions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSuperTables(String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSuperTypes(String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getSystemFunctions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTablePrivileges(String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTableTypes()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTables(String,String,String,String[])",1,8,11
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTimeDateFunctions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTypeInfo()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getTypeInfoForODBC()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getUDTs(String,String,String,int[])",1,1,5
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getURL()",3,2,3
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getUserName()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getVersionColumns(String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.getVersionColumnsForODBC(String,String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.insertsAreDetected(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.isCatalogAtStart()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.isReadOnly()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.loadQueryDescriptions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.locatorsUpdateCopy()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.notInSoftUpgradeMode()",2,3,3
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.nullPlusNonNullIsNull()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.nullsAreSortedAtEnd()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.nullsAreSortedAtStart()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.nullsAreSortedHigh()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.nullsAreSortedLow()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.othersDeletesAreVisible(int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.othersInsertsAreVisible(int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.othersUpdatesAreVisible(int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.ownDeletesAreVisible(int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.ownInsertsAreVisible(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.ownUpdatesAreVisible(int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.prepareSPS(String,String,boolean)",2,3,4
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.run()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.storesLowerCaseIdentifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.storesLowerCaseQuotedIdentifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.storesMixedCaseIdentifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.storesMixedCaseQuotedIdentifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.storesUpperCaseIdentifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.storesUpperCaseQuotedIdentifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsANSI92EntryLevelSQL()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsANSI92FullSQL()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsANSI92IntermediateSQL()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsAlterTableWithAddColumn()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsAlterTableWithDropColumn()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsBatchUpdates()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsCatalogsInDataManipulation()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsCatalogsInIndexDefinitions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsCatalogsInPrivilegeDefinitions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsCatalogsInProcedureCalls()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsCatalogsInTableDefinitions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsColumnAliasing()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsConvert()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsConvert(int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsCoreSQLGrammar()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsCorrelatedSubqueries()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsDataDefinitionAndDataManipulationTransactions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsDataManipulationTransactionsOnly()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsDifferentTableCorrelationNames()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsExpressionsInOrderBy()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsExtendedSQLGrammar()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsFullOuterJoins()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsGetGeneratedKeys()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsGroupBy()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsGroupByBeyondSelect()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsGroupByUnrelated()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsIntegrityEnhancementFacility()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsLikeEscapeClause()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsLimitedOuterJoins()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsMinimumSQLGrammar()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsMixedCaseIdentifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsMixedCaseQuotedIdentifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsMultipleOpenResults()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsMultipleResultSets()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsMultipleTransactions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsNamedParameters()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsNonNullableColumns()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsOpenCursorsAcrossCommit()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsOpenCursorsAcrossRollback()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsOpenStatementsAcrossCommit()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsOpenStatementsAcrossRollback()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsOrderByUnrelated()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsOuterJoins()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsPositionedDelete()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsPositionedUpdate()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsResultSetConcurrency(int,int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsResultSetHoldability(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsResultSetType(int)",2,1,3
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSavepoints()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSchemasInDataManipulation()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSchemasInIndexDefinitions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSchemasInPrivilegeDefinitions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSchemasInProcedureCalls()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSchemasInTableDefinitions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSelectForUpdate()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsStatementPooling()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsStoredProcedures()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSubqueriesInComparisons()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSubqueriesInExists()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSubqueriesInIns()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsSubqueriesInQuantifieds()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsTableCorrelationNames()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsTransactionIsolationLevel(int)",1,1,4
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsTransactions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsUnion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.supportsUnionAll()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.swapNull(String)",1,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.updatesAreDetected(int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.usesLocalFilePerTable()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData.usesLocalFiles()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.EmbedDatabaseMetaData40(EmbedConnection,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.autoCommitFailureClosesAllResultSets()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.getJDBCMajorVersion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.getJDBCMinorVersion()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.getRowIdLifetime()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.supportsStoredFunctionsUsingCallSyntax()",1,1,1
"org.apache.derby.impl.jdbc.EmbedDatabaseMetaData40.unwrap(Class<T>)",1,2,2
"org.apache.derby.impl.jdbc.EmbedParameterMetaData30.EmbedParameterMetaData30(ParameterValueSet,DataTypeDescriptor[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedParameterMetaData40.EmbedParameterMetaData40(ParameterValueSet,DataTypeDescriptor[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedParameterMetaData40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.impl.jdbc.EmbedParameterMetaData40.unwrap(Class<T>)",1,2,2
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.EmbedParameterSetMetaData(ParameterValueSet,DataTypeDescriptor[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.checkPosition(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterClassName(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterCount()",1,1,1
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterMode(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterType(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getParameterTypeName(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getPrecision(int)",1,3,4
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.getScale(int)",2,3,3
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.isNullable(int)",2,1,2
"org.apache.derby.impl.jdbc.EmbedParameterSetMetaData.isSigned(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.EmbedPreparedStatement(EmbedConnection,String,boolean,int,int,int,int,int[],String[])",2,4,4
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.addBatch()",1,1,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.addBatch(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkAsciiStreamConditions(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkBinaryStreamConditions(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkBlobConditions(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkCharacterStreamConditions(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkClobConditions(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkForSupportedDataType(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.checkStatementValidity(SQLException)",1,3,3
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.clearParameters()",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.closeActions()",1,3,4
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.dataTypeConversion(int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute()",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(String,String[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.execute(String,int[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeBatchElement(Object)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery()",1,4,4
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeQuery(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeStatement(Activation,boolean,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate()",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(String,String[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.executeUpdate(String,int[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.finalize()",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.getEmbedParameterSetMetaData()",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.getMetaData()",1,10,10
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.getParameterJDBCType(int)",1,2,3
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.getParameterSQLType(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.getParms()",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.getTypes(int)",3,3,4
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.newEmbedResultSetMetaData(ResultDescription)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setAsciiStream(int,InputStream)",2,3,3
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setAsciiStream(int,InputStream,long)",2,3,3
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStream(int,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStream(int,InputStream,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBinaryStreamInternal(int,InputStream,boolean,long)",4,6,8
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBlob(int,Blob)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBlob(int,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBlob(int,InputStream,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBoolean(int,boolean)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBrokeredConnectionControl(BrokeredConnectionControl)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setByte(int,byte)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setBytes(int,byte[])",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setCharacterStream(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setCharacterStream(int,Reader,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setCharacterStreamInternal(int,Reader,boolean,long)",4,6,10
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setClob(int,Clob)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setClob(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setClob(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setDate(int,Date)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setDate(int,Date,Calendar)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setDouble(int,double)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setFloat(int,float)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setInt(int,int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setLong(int,long)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setNull(int,int)",2,3,3
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setNull(int,int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(int,Object)",18,18,19
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(int,Object,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObject(int,Object,int,int)",4,5,6
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setObjectConvert(int,Object)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setScale(int,int)",2,4,4
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setShort(int,short)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setString(int,String)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setTime(int,Time)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setTime(int,Time,Calendar)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setTimestamp(int,Timestamp)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setTimestamp(int,Timestamp,Calendar)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setURL(int,URL)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.setUnicodeStream(int,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.toString()",2,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement.transferParameters(EmbedPreparedStatement)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement169.EmbedPreparedStatement169(EmbedConnection,String,boolean,int,int,int,int,int[],String[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement20.EmbedPreparedStatement20(EmbedConnection,String,boolean,int,int,int,int,int[],String[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setArray(int,Array)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setBigDecimal(int,BigDecimal)",1,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setObjectConvert(int,Object)",2,2,2
"org.apache.derby.impl.jdbc.EmbedPreparedStatement20.setRef(int,Ref)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement30.EmbedPreparedStatement30(EmbedConnection,String,boolean,int,int,int,int,int[],String[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement30.getParameterMetaData()",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.EmbedPreparedStatement40(EmbedConnection,String,boolean,int,int,int,int,int[],String[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.getParameterMetaData()",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNClob(int,NClob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNClob(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNClob(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setNString(int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setRowId(int,RowId)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.setSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.impl.jdbc.EmbedPreparedStatement40.unwrap(Class<T>)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.EmbedResultSet(EmbedConnection,ResultSet,boolean,EmbedStatement,boolean)",2,9,12
"org.apache.derby.impl.jdbc.EmbedResultSet.absolute(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.addWarning(SQLWarning)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.afterLast()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.beforeFirst()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.cancelRowUpdates()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.checkExecIfClosed(String)",3,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.checkIfClosed(String)",2,4,4
"org.apache.derby.impl.jdbc.EmbedResultSet.checkNotOnInsertRow()",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checkOnRow()",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checkRowPosition(int,String)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checkScrollCursor(String)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checkUpdatableCursor(String)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeInsert()",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateAsciiStream(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateBinaryStream(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateCharacterStream(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateOrDelete(String,int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.checksBeforeUpdateXXX(String,int)",4,5,5
"org.apache.derby.impl.jdbc.EmbedResultSet.clearWarnings()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.close()",2,7,9
"org.apache.derby.impl.jdbc.EmbedResultSet.closeCurrentStream()",1,4,5
"org.apache.derby.impl.jdbc.EmbedResultSet.closeOnTransactionError(Throwable)",1,4,4
"org.apache.derby.impl.jdbc.EmbedResultSet.compareTo(Object)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.dataTypeConversion(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.dataTypeConversion(int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.deleteRow()",1,4,4
"org.apache.derby.impl.jdbc.EmbedResultSet.findColumn(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.findColumnName(String)",3,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.first()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getAsciiStream(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getAsciiStream(int)",4,3,5
"org.apache.derby.impl.jdbc.EmbedResultSet.getBinaryStream(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getBinaryStream(int)",3,6,9
"org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getBlob(int)",3,5,7
"org.apache.derby.impl.jdbc.EmbedResultSet.getBoolean(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getBoolean(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedResultSet.getByte(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getByte(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedResultSet.getBytes(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getBytes(int)",2,5,6
"org.apache.derby.impl.jdbc.EmbedResultSet.getCharacterStream(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getCharacterStream(int)",6,9,13
"org.apache.derby.impl.jdbc.EmbedResultSet.getClob(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getClob(int)",3,5,7
"org.apache.derby.impl.jdbc.EmbedResultSet.getColumn(int)",3,4,6
"org.apache.derby.impl.jdbc.EmbedResultSet.getColumnSQLType(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getColumnType(int)",2,4,4
"org.apache.derby.impl.jdbc.EmbedResultSet.getConcurrency()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getCursorName()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getDVDforColumnToBeUpdated(int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getDate(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getDate(String,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getDate(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getDate(int,Calendar)",2,3,4
"org.apache.derby.impl.jdbc.EmbedResultSet.getDouble(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getDouble(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedResultSet.getFetchDirection()",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.getFetchSize()",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.getFloat(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getFloat(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedResultSet.getFullBaseTableName(ExecCursorTableReference)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.getHoldability()",2,1,2
"org.apache.derby.impl.jdbc.EmbedResultSet.getInt(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getInt(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedResultSet.getLength(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.getLong(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getLong(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedResultSet.getMaxColumnWidth(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getMetaData()",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.getObject(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getObject(int)",7,7,8
"org.apache.derby.impl.jdbc.EmbedResultSet.getParameterValueSet()",2,1,2
"org.apache.derby.impl.jdbc.EmbedResultSet.getRow()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getSQLText()",2,1,2
"org.apache.derby.impl.jdbc.EmbedResultSet.getShort(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getShort(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedResultSet.getStatement()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getString(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getString(int)",2,5,6
"org.apache.derby.impl.jdbc.EmbedResultSet.getTime(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getTime(String,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getTime(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getTime(int,Calendar)",2,3,4
"org.apache.derby.impl.jdbc.EmbedResultSet.getTimestamp(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getTimestamp(String,Calendar)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getTimestamp(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getTimestamp(int,Calendar)",2,3,4
"org.apache.derby.impl.jdbc.EmbedResultSet.getType()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getURL(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getURL(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.getWarnings()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.initializeUpdateRowModifiers()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.insertRow()",1,8,8
"org.apache.derby.impl.jdbc.EmbedResultSet.isAfterLast()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.isBeforeFirst()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.isClosed()",2,1,3
"org.apache.derby.impl.jdbc.EmbedResultSet.isFirst()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.isForUpdate()",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.isLast()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.isMaxFieldSizeType(int)",1,1,6
"org.apache.derby.impl.jdbc.EmbedResultSet.isNull(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.last()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(int,int,String)",2,14,24
"org.apache.derby.impl.jdbc.EmbedResultSet.moveToCurrentRow()",1,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.moveToInsertRow()",1,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.next()",3,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.noStateChangeException(Throwable)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.previous()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.quoteSqlIdentifier(String)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.refreshRow()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.relative(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.rowDeleted()",1,4,4
"org.apache.derby.impl.jdbc.EmbedResultSet.rowInserted()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.rowUpdated()",1,4,4
"org.apache.derby.impl.jdbc.EmbedResultSet.setApplicationStatement(Statement)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.setDynamicResultSet(EmbedStatement)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.setFetchDirection(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.setFetchSize(int)",2,4,5
"org.apache.derby.impl.jdbc.EmbedResultSet.updateAsciiStream(String,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateAsciiStream(String,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateAsciiStream(String,InputStream,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateAsciiStream(int,InputStream)",2,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.updateAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateAsciiStream(int,InputStream,long)",2,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBinaryStream(String,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBinaryStream(String,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBinaryStream(String,InputStream,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBinaryStream(int,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBinaryStream(int,InputStream,long)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBinaryStreamInternal(int,InputStream,boolean,long,String)",4,5,5
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBlob(String,Blob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBlob(String,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBlob(String,InputStream,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBlob(int,Blob)",2,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBlob(int,InputStream)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBlob(int,InputStream,long)",2,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBoolean(String,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBoolean(int,boolean)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateByte(String,byte)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateByte(int,byte)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBytes(String,byte[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateBytes(int,byte[])",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateCharacterStream(String,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateCharacterStream(String,Reader,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateCharacterStream(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateCharacterStream(int,Reader,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateCharacterStreamInternal(int,Reader,boolean,long,String)",5,7,8
"org.apache.derby.impl.jdbc.EmbedResultSet.updateClob(String,Clob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateClob(String,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateClob(String,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateClob(int,Clob)",2,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.updateClob(int,Reader)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateClob(int,Reader,long)",2,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.updateDate(String,Date)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateDate(int,Date)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateDouble(String,double)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateDouble(int,double)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateFloat(String,float)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateFloat(int,float)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateInt(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateInt(int,int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateLong(String,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateLong(int,long)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateNull(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateNull(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateObject(String,Object)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateObject(String,Object,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateObject(int,Object)",16,17,17
"org.apache.derby.impl.jdbc.EmbedResultSet.updateObject(int,Object,int)",3,4,5
"org.apache.derby.impl.jdbc.EmbedResultSet.updateRow()",2,10,11
"org.apache.derby.impl.jdbc.EmbedResultSet.updateShort(String,short)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateShort(int,short)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateString(String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateString(int,String)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateTime(String,Time)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateTime(int,Time)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.updateTimestamp(String,Timestamp)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet.updateTimestamp(int,Timestamp)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet.useStream(int)",3,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet.wasNull()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet169.EmbedResultSet169(EmbedConnection,ResultSet,boolean,EmbedStatement,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.EmbedResultSet20(EmbedConnection,ResultSet,boolean,EmbedStatement,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getArray(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getArray(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getBigDecimal(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getBigDecimal(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getBigDecimal(int)",2,2,3
"org.apache.derby.impl.jdbc.EmbedResultSet20.getBigDecimal(int,int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet20.getObject(String,Map)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getObject(int,Map)",3,3,3
"org.apache.derby.impl.jdbc.EmbedResultSet20.getRef(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getRef(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getUnicodeStream(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.getUnicodeStream(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.updateArray(String,Array)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.updateArray(int,Array)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.updateBigDecimal(String,BigDecimal)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.updateBigDecimal(int,BigDecimal)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet20.updateObject(int,Object)",2,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet20.updateRef(String,Ref)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet20.updateRef(int,Ref)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.EmbedResultSet40(EmbedConnection,ResultSet,boolean,EmbedStatement,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getNCharacterStream(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getNCharacterStream(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getNClob(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getNClob(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getNString(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getNString(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getRowId(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getRowId(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getSQLXML(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.getSQLXML(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.unwrap(Class<T>)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNCharacterStream(String,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNCharacterStream(String,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNCharacterStream(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNCharacterStream(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(String,NClob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(String,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(String,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(int,NClob)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(int,Reader)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNClob(int,Reader,long)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNString(String,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateNString(int,String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateRowId(String,RowId)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateRowId(int,RowId)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateSQLXML(String,SQLXML)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSet40.updateSQLXML(int,SQLXML)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.EmbedResultSetMetaData(ResultColumnDescriptor[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getCatalogName(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnClassName(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnCount()",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnDisplaySize(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnLabel(int)",1,2,2
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnName(int)",1,1,2
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnType(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnTypeDescriptor(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getColumnTypeName(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getPrecision(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getResultColumnDescriptor(String,DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getResultColumnDescriptor(String,int,boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getResultColumnDescriptor(String,int,boolean,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getScale(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getSchemaName(int)",1,1,2
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.getTableName(int)",1,1,2
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isAutoIncrement(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isCaseSensitive(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isCurrency(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isDefinitelyWritable(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isNullable(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isReadOnly(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isSearchable(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isSigned(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.isWritable(int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData.validColumnNumber(int)",2,3,3
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData40.EmbedResultSetMetaData40(ResultColumnDescriptor[])",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.impl.jdbc.EmbedResultSetMetaData40.unwrap(Class<T>)",1,2,2
"org.apache.derby.impl.jdbc.EmbedSQLException.EmbedSQLException(String,String,SQLException,int,Throwable,Object[])",1,3,4
"org.apache.derby.impl.jdbc.EmbedSQLException.getArguments()",1,1,1
"org.apache.derby.impl.jdbc.EmbedSQLException.getMessageId()",1,1,1
"org.apache.derby.impl.jdbc.EmbedSQLException.isSimpleWrapper()",1,1,1
"org.apache.derby.impl.jdbc.EmbedSQLException.toString()",1,1,1
"org.apache.derby.impl.jdbc.EmbedSQLException.wrapStandardException(String,String,int,Throwable)",1,2,2
"org.apache.derby.impl.jdbc.EmbedSavepoint30.EmbedSavepoint30(EmbedConnection,String)",1,2,2
"org.apache.derby.impl.jdbc.EmbedSavepoint30.getInternalName()",1,1,1
"org.apache.derby.impl.jdbc.EmbedSavepoint30.getSavepointId()",2,2,2
"org.apache.derby.impl.jdbc.EmbedSavepoint30.getSavepointName()",2,2,2
"org.apache.derby.impl.jdbc.EmbedSavepoint30.sameConnection(EmbedConnection)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.EmbedStatement(EmbedConnection,boolean,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.addBatch(String)",1,1,2
"org.apache.derby.impl.jdbc.EmbedStatement.addWarning(SQLWarning)",1,3,3
"org.apache.derby.impl.jdbc.EmbedStatement.cancel()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.checkExecStatus()",2,1,2
"org.apache.derby.impl.jdbc.EmbedStatement.checkIfInMiddleOfBatch()",2,2,2
"org.apache.derby.impl.jdbc.EmbedStatement.checkRequiresCallableStatement(Activation)",3,2,4
"org.apache.derby.impl.jdbc.EmbedStatement.checkStatus()",3,4,4
"org.apache.derby.impl.jdbc.EmbedStatement.clearBatch()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.clearResultSets()",5,9,12
"org.apache.derby.impl.jdbc.EmbedStatement.clearWarnings()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.close()",2,1,2
"org.apache.derby.impl.jdbc.EmbedStatement.closeActions()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.execute(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.execute(String,String[])",1,1,3
"org.apache.derby.impl.jdbc.EmbedStatement.execute(String,boolean,boolean,int,int[],String[])",2,4,4
"org.apache.derby.impl.jdbc.EmbedStatement.execute(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.execute(String,int[])",1,1,3
"org.apache.derby.impl.jdbc.EmbedStatement.executeBatch()",3,5,7
"org.apache.derby.impl.jdbc.EmbedStatement.executeBatchElement(Object)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.executeQuery(String)",1,3,3
"org.apache.derby.impl.jdbc.EmbedStatement.executeStatement(Activation,boolean,boolean)",5,18,22
"org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(String,String[])",1,1,3
"org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(String,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.executeUpdate(String,int[])",1,1,3
"org.apache.derby.impl.jdbc.EmbedStatement.finalize()",1,2,3
"org.apache.derby.impl.jdbc.EmbedStatement.getConnection()",2,2,3
"org.apache.derby.impl.jdbc.EmbedStatement.getExecuteHoldable()",3,1,3
"org.apache.derby.impl.jdbc.EmbedStatement.getFetchDirection()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getFetchSize()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getGeneratedKeys()",2,2,2
"org.apache.derby.impl.jdbc.EmbedStatement.getMaxFieldSize()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getMaxRows()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getMoreResults()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getMoreResults(int)",9,6,14
"org.apache.derby.impl.jdbc.EmbedStatement.getParameterValueSet()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getQueryTimeout()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getResultSet()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getResultSetConcurrency()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getResultSetHoldability()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getResultSetType()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getSQLText()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getUpdateCount()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.getWarnings()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.isClosed()",1,2,3
"org.apache.derby.impl.jdbc.EmbedStatement.isPoolable()",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.processDynamicResult(EmbedConnection,ResultSet,EmbedStatement)",4,1,5
"org.apache.derby.impl.jdbc.EmbedStatement.processDynamicResults(ResultSet[][],int)",3,6,7
"org.apache.derby.impl.jdbc.EmbedStatement.resultSetClosing(EmbedResultSet)",7,1,7
"org.apache.derby.impl.jdbc.EmbedStatement.setApplicationStatement(EngineStatement)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.setCursorName(String)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.setEscapeProcessing(boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.setFetchDirection(int)",2,2,4
"org.apache.derby.impl.jdbc.EmbedStatement.setFetchSize(int)",2,4,5
"org.apache.derby.impl.jdbc.EmbedStatement.setMaxFieldSize(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedStatement.setMaxRows(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedStatement.setPoolable(boolean)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement.setQueryTimeout(int)",2,2,2
"org.apache.derby.impl.jdbc.EmbedStatement.transferBatch(EmbedStatement)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement40.EmbedStatement40(EmbedConnection,boolean,int,int,int)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.impl.jdbc.EmbedStatement40.unwrap(Class<T>)",1,2,2
"org.apache.derby.impl.jdbc.EncryptedLOBFile.EncryptedLOBFile(StorageFile,DataFactory)",1,1,1
"org.apache.derby.impl.jdbc.EncryptedLOBFile.close()",1,1,1
"org.apache.derby.impl.jdbc.EncryptedLOBFile.getBlocks(long,int)",2,2,2
"org.apache.derby.impl.jdbc.EncryptedLOBFile.getFilePointer()",1,1,1
"org.apache.derby.impl.jdbc.EncryptedLOBFile.length()",1,1,1
"org.apache.derby.impl.jdbc.EncryptedLOBFile.read(byte[],int,int)",4,3,6
"org.apache.derby.impl.jdbc.EncryptedLOBFile.readByte()",3,1,3
"org.apache.derby.impl.jdbc.EncryptedLOBFile.seek(long)",2,2,3
"org.apache.derby.impl.jdbc.EncryptedLOBFile.setLength(long)",2,2,3
"org.apache.derby.impl.jdbc.EncryptedLOBFile.write(byte[])",1,1,1
"org.apache.derby.impl.jdbc.EncryptedLOBFile.write(byte[],int,int)",4,6,7
"org.apache.derby.impl.jdbc.EncryptedLOBFile.write(int)",1,3,4
"org.apache.derby.impl.jdbc.InternalClobTest.FakeStoreStream.FakeStoreStream(long)",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.FakeStoreStream.closeStream()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.FakeStoreStream.initStream()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.FakeStoreStream.read()",2,1,5
"org.apache.derby.impl.jdbc.InternalClobTest.FakeStoreStream.read(byte[],int,int)",4,2,4
"org.apache.derby.impl.jdbc.InternalClobTest.FakeStoreStream.resetStream()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.InternalClobTest(String)",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.addModifyingTests(Class<? extends TestCase>)",1,6,6
"org.apache.derby.impl.jdbc.InternalClobTest.modTestInsertString_append_small()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.modTestInsertString_replace_and_append_small()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.modTestInsertString_replace_small()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.readFromStream(Reader,long)",3,2,3
"org.apache.derby.impl.jdbc.InternalClobTest.subString(InternalClob,long,int)",3,2,3
"org.apache.derby.impl.jdbc.InternalClobTest.tearDown()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetByteLength()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetByteLengthAfterRelease()",1,1,2
"org.apache.derby.impl.jdbc.InternalClobTest.testGetBytePositionAfterRelease()",1,1,2
"org.apache.derby.impl.jdbc.InternalClobTest.testGetBytePosition_first()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetBytePosition_last()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetBytePosition_lastPlussOne()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetBytePosition_lastPlussThousand()",1,1,2
"org.apache.derby.impl.jdbc.InternalClobTest.testGetBytePosition_lastPlussTwo()",1,1,2
"org.apache.derby.impl.jdbc.InternalClobTest.testGetBytePosition_second()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetCharLength()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetCharLengthAfterRelease()",1,1,2
"org.apache.derby.impl.jdbc.InternalClobTest.testGetRawByteStreamAfterRelease()",1,1,2
"org.apache.derby.impl.jdbc.InternalClobTest.testGetReaderAfterEndPos()",1,1,2
"org.apache.derby.impl.jdbc.InternalClobTest.testGetReaderAfterRelease()",1,1,2
"org.apache.derby.impl.jdbc.InternalClobTest.testGetReaderAtEndPos()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetReaderAtSecondPos()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetReaderAtStartPos()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testGetWriterAfterRelease()",1,2,3
"org.apache.derby.impl.jdbc.InternalClobTest.testInsertStringAfterRelease()",1,2,3
"org.apache.derby.impl.jdbc.InternalClobTest.testReleaseAfterRelase()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testSanity()",1,1,1
"org.apache.derby.impl.jdbc.InternalClobTest.testTruncateAfterRelease()",1,2,3
"org.apache.derby.impl.jdbc.InternalClobTest.transferData(Reader,Writer,long)",1,2,2
"org.apache.derby.impl.jdbc.LOBFile.LOBFile(StorageFile)",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.close()",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.getFilePointer()",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.length()",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.read(byte[],int,int)",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.readByte()",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.seek(long)",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.setLength(long)",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.write(byte[])",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.write(byte[],int,int)",1,1,1
"org.apache.derby.impl.jdbc.LOBFile.write(int)",1,1,1
"org.apache.derby.impl.jdbc.LOBInputStream.LOBInputStream(LOBStreamControl,long)",1,1,1
"org.apache.derby.impl.jdbc.LOBInputStream.close()",1,1,1
"org.apache.derby.impl.jdbc.LOBInputStream.handleSQLException(SQLException)",3,2,3
"org.apache.derby.impl.jdbc.LOBInputStream.isObsolete()",1,1,1
"org.apache.derby.impl.jdbc.LOBInputStream.length()",1,1,1
"org.apache.derby.impl.jdbc.LOBInputStream.reInitialize()",1,1,1
"org.apache.derby.impl.jdbc.LOBInputStream.read()",2,4,5
"org.apache.derby.impl.jdbc.LOBInputStream.read(byte[],int,int)",3,4,5
"org.apache.derby.impl.jdbc.LOBOutputStream.LOBOutputStream(LOBStreamControl,long)",1,1,1
"org.apache.derby.impl.jdbc.LOBOutputStream.close()",1,1,1
"org.apache.derby.impl.jdbc.LOBOutputStream.write(byte[],int,int)",3,5,5
"org.apache.derby.impl.jdbc.LOBOutputStream.write(int)",2,4,4
"org.apache.derby.impl.jdbc.LOBStoredProcedure.BLOBCREATELOCATOR()",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.BLOBGETBYTES(int,long,int)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.BLOBGETLENGTH(int)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.BLOBGETPOSITIONFROMBYTES(int,byte[],long)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.BLOBGETPOSITIONFROMLOCATOR(int,int,long)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.BLOBRELEASELOCATOR(int)",2,2,2
"org.apache.derby.impl.jdbc.LOBStoredProcedure.BLOBSETBYTES(int,long,int,byte[])",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.BLOBTRUNCATE(int,long)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.CLOBCREATELOCATOR()",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.CLOBGETLENGTH(int)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.CLOBGETPOSITIONFROMLOCATOR(int,int,long)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.CLOBGETPOSITIONFROMSTRING(int,String,long)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.CLOBGETSUBSTRING(int,long,int)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.CLOBRELEASELOCATOR(int)",2,2,2
"org.apache.derby.impl.jdbc.LOBStoredProcedure.CLOBSETSTRING(int,long,int,String)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.CLOBTRUNCATE(int,long)",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.getBlobObjectCorrespondingtoLOCATOR(int)",2,2,2
"org.apache.derby.impl.jdbc.LOBStoredProcedure.getClobObjectCorrespondingtoLOCATOR(int)",2,2,2
"org.apache.derby.impl.jdbc.LOBStoredProcedure.getEmbedConnection()",1,1,1
"org.apache.derby.impl.jdbc.LOBStoredProcedure.newSQLException(String)",1,1,1
"org.apache.derby.impl.jdbc.LOBStreamControl.LOBStreamControl(String)",1,1,1
"org.apache.derby.impl.jdbc.LOBStreamControl.LOBStreamControl(String,byte[])",1,1,1
"org.apache.derby.impl.jdbc.LOBStreamControl.copyData(InputStream,long)",3,2,3
"org.apache.derby.impl.jdbc.LOBStreamControl.deleteFile(StorageFile)",3,2,4
"org.apache.derby.impl.jdbc.LOBStreamControl.finalize()",1,1,1
"org.apache.derby.impl.jdbc.LOBStreamControl.free()",1,2,2
"org.apache.derby.impl.jdbc.LOBStreamControl.getInputStream(long)",1,1,1
"org.apache.derby.impl.jdbc.LOBStreamControl.getLength()",2,1,2
"org.apache.derby.impl.jdbc.LOBStreamControl.getOutputStream(long)",1,1,1
"org.apache.derby.impl.jdbc.LOBStreamControl.getUpdateCount()",1,1,1
"org.apache.derby.impl.jdbc.LOBStreamControl.init(byte[],long)",4,4,7
"org.apache.derby.impl.jdbc.LOBStreamControl.isValidOffset(int,int)",2,2,3
"org.apache.derby.impl.jdbc.LOBStreamControl.isValidPostion(long)",8,8,8
"org.apache.derby.impl.jdbc.LOBStreamControl.read(byte[],int,int,long)",2,2,2
"org.apache.derby.impl.jdbc.LOBStreamControl.read(long)",3,2,5
"org.apache.derby.impl.jdbc.LOBStreamControl.readBytes(byte[],int,int,long)",2,1,3
"org.apache.derby.impl.jdbc.LOBStreamControl.replaceBytes(byte[],long,long)",7,8,10
"org.apache.derby.impl.jdbc.LOBStreamControl.truncate(long)",1,4,4
"org.apache.derby.impl.jdbc.LOBStreamControl.updateData(byte[],int,int,long)",4,5,5
"org.apache.derby.impl.jdbc.LOBStreamControl.write(byte[],int,int,long)",4,5,5
"org.apache.derby.impl.jdbc.LOBStreamControl.write(int,long)",3,3,3
"org.apache.derby.impl.jdbc.PositionedStoreStream.PositionedStoreStream(InputStream)",1,1,1
"org.apache.derby.impl.jdbc.PositionedStoreStream.closeStream()",1,1,1
"org.apache.derby.impl.jdbc.PositionedStoreStream.getPosition()",1,1,1
"org.apache.derby.impl.jdbc.PositionedStoreStream.initStream()",1,1,1
"org.apache.derby.impl.jdbc.PositionedStoreStream.read()",1,1,2
"org.apache.derby.impl.jdbc.PositionedStoreStream.read(byte[])",1,1,1
"org.apache.derby.impl.jdbc.PositionedStoreStream.read(byte[],int,int)",1,1,1
"org.apache.derby.impl.jdbc.PositionedStoreStream.reposition(long)",1,3,3
"org.apache.derby.impl.jdbc.PositionedStoreStream.resetStream()",1,1,1
"org.apache.derby.impl.jdbc.PositionedStoreStream.skip(long)",1,1,1
"org.apache.derby.impl.jdbc.PositionedStoreStream.skipFully(long)",4,3,4
"org.apache.derby.impl.jdbc.ReaderToAscii.ReaderToAscii(Reader)",1,1,2
"org.apache.derby.impl.jdbc.ReaderToAscii.close()",1,2,2
"org.apache.derby.impl.jdbc.ReaderToAscii.read()",4,1,4
"org.apache.derby.impl.jdbc.ReaderToAscii.read(byte[],int,int)",4,2,7
"org.apache.derby.impl.jdbc.ReaderToAscii.skip(long)",2,1,2
"org.apache.derby.impl.jdbc.SQLExceptionFactory.getArgumentFerry(SQLException)",1,1,1
"org.apache.derby.impl.jdbc.SQLExceptionFactory.getSQLException(String,String,SQLException,int,Throwable,Object[])",1,1,1
"org.apache.derby.impl.jdbc.SQLExceptionFactory40.getSQLException(String,String,SQLException,int,Throwable,Object[])",1,8,9
"org.apache.derby.impl.jdbc.SQLExceptionFactory40.wrapArgsForTransportAcrossDRDA(String,String,SQLException,int,Throwable,Object[])",1,2,2
"org.apache.derby.impl.jdbc.SmallStoreStreamClobTest.SmallStoreStreamClobTest(String)",1,1,1
"org.apache.derby.impl.jdbc.SmallStoreStreamClobTest.setUp()",1,1,1
"org.apache.derby.impl.jdbc.SmallStoreStreamClobTest.suite()",1,1,1
"org.apache.derby.impl.jdbc.SmallStoreStreamClobTest.tearDown()",1,1,1
"org.apache.derby.impl.jdbc.SmallTemporaryClobTest.SmallTemporaryClobTest(String)",1,1,1
"org.apache.derby.impl.jdbc.SmallTemporaryClobTest.setUp()",1,1,1
"org.apache.derby.impl.jdbc.SmallTemporaryClobTest.suite()",1,1,1
"org.apache.derby.impl.jdbc.SmallTemporaryClobTest.tearDown()",1,1,1
"org.apache.derby.impl.jdbc.StoreStreamClob.StoreStreamClob(InputStream,ConnectionChild)",1,1,1
"org.apache.derby.impl.jdbc.StoreStreamClob.checkIfValid()",2,1,2
"org.apache.derby.impl.jdbc.StoreStreamClob.getByteLength()",4,4,5
"org.apache.derby.impl.jdbc.StoreStreamClob.getBytePosition(long)",1,1,1
"org.apache.derby.impl.jdbc.StoreStreamClob.getCharLength()",1,2,2
"org.apache.derby.impl.jdbc.StoreStreamClob.getRawByteStream()",1,2,2
"org.apache.derby.impl.jdbc.StoreStreamClob.getReader(long)",3,3,4
"org.apache.derby.impl.jdbc.StoreStreamClob.getWriter(long)",1,1,1
"org.apache.derby.impl.jdbc.StoreStreamClob.insertString(String,long)",1,1,1
"org.apache.derby.impl.jdbc.StoreStreamClob.isWritable()",1,1,1
"org.apache.derby.impl.jdbc.StoreStreamClob.noStateChangeLOB(Throwable)",1,3,3
"org.apache.derby.impl.jdbc.StoreStreamClob.release()",1,2,2
"org.apache.derby.impl.jdbc.StoreStreamClob.truncate(long)",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.CharToBytePositionCache.CharToBytePositionCache()",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.CharToBytePositionCache.getBytePos()",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.CharToBytePositionCache.getCharPos()",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.CharToBytePositionCache.reset()",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.CharToBytePositionCache.updateCachedPos(long,long)",2,1,2
"org.apache.derby.impl.jdbc.TemporaryClob.TemporaryClob(String,ConnectionChild)",2,1,2
"org.apache.derby.impl.jdbc.TemporaryClob.TemporaryClob(String,String,ConnectionChild)",2,1,2
"org.apache.derby.impl.jdbc.TemporaryClob.checkIfValid()",2,1,2
"org.apache.derby.impl.jdbc.TemporaryClob.cloneClobContent(String,ConnectionChild,InternalClob)",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.cloneClobContent(String,ConnectionChild,InternalClob,long)",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.copyClobContent(InternalClob)",1,2,2
"org.apache.derby.impl.jdbc.TemporaryClob.copyClobContent(InternalClob,long)",1,2,2
"org.apache.derby.impl.jdbc.TemporaryClob.getByteFromString(String)",1,2,5
"org.apache.derby.impl.jdbc.TemporaryClob.getByteLength()",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.getBytePosition(long)",1,3,3
"org.apache.derby.impl.jdbc.TemporaryClob.getCharLength()",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.getRawByteStream()",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.getReader(long)",4,2,4
"org.apache.derby.impl.jdbc.TemporaryClob.getWriter(long)",1,2,2
"org.apache.derby.impl.jdbc.TemporaryClob.insertString(String,long)",3,4,6
"org.apache.derby.impl.jdbc.TemporaryClob.isWritable()",1,1,1
"org.apache.derby.impl.jdbc.TemporaryClob.release()",1,2,2
"org.apache.derby.impl.jdbc.TemporaryClob.truncate(long)",1,3,3
"org.apache.derby.impl.jdbc.TransactionResourceImpl.TransactionResourceImpl(InternalDriver,String,Properties)",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Throwable)",1,2,2
"org.apache.derby.impl.jdbc.TransactionResourceImpl.clearContextInError()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.clearLcc()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.commit()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.getContextManager()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.getCsf()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.getDBName()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.getDatabase()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.getDriver()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.getLcc()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.getUrl()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.getUserName()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Throwable,boolean,boolean)",2,9,13
"org.apache.derby.impl.jdbc.TransactionResourceImpl.isActive()",1,3,3
"org.apache.derby.impl.jdbc.TransactionResourceImpl.isIdle()",1,2,2
"org.apache.derby.impl.jdbc.TransactionResourceImpl.restoreContextStack()",2,1,3
"org.apache.derby.impl.jdbc.TransactionResourceImpl.rollback()",1,2,2
"org.apache.derby.impl.jdbc.TransactionResourceImpl.setDatabase(Database)",1,2,2
"org.apache.derby.impl.jdbc.TransactionResourceImpl.setupContextStack()",1,2,2
"org.apache.derby.impl.jdbc.TransactionResourceImpl.shutdownDatabaseException()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.startTransaction()",1,1,1
"org.apache.derby.impl.jdbc.TransactionResourceImpl.wrapInSQLException(Throwable)",5,3,5
"org.apache.derby.impl.jdbc.UTF8Reader.UTF8Reader(InputStream,long,ConnectionChild,Object)",2,4,4
"org.apache.derby.impl.jdbc.UTF8Reader.UTF8Reader(InputStream,long,long,ConnectionChild,Object)",1,2,2
"org.apache.derby.impl.jdbc.UTF8Reader.close()",1,1,1
"org.apache.derby.impl.jdbc.UTF8Reader.closeIn()",1,2,3
"org.apache.derby.impl.jdbc.UTF8Reader.fillBuffer()",16,18,30
"org.apache.derby.impl.jdbc.UTF8Reader.read()",4,2,4
"org.apache.derby.impl.jdbc.UTF8Reader.read(char[],int,int)",4,2,5
"org.apache.derby.impl.jdbc.UTF8Reader.readAsciiInto(byte[],int,int)",3,2,6
"org.apache.derby.impl.jdbc.UTF8Reader.readInto(StringBuffer,int)",3,2,4
"org.apache.derby.impl.jdbc.UTF8Reader.readUnsignedShort()",2,1,2
"org.apache.derby.impl.jdbc.UTF8Reader.skip(long)",5,2,6
"org.apache.derby.impl.jdbc.UTF8Reader.utfFormatException(String)",1,1,1
"org.apache.derby.impl.jdbc.UpdatableBlobStream.UpdatableBlobStream(EmbedBlob,InputStream)",1,1,1
"org.apache.derby.impl.jdbc.UpdatableBlobStream.UpdatableBlobStream(EmbedBlob,InputStream,long,long)",1,2,2
"org.apache.derby.impl.jdbc.UpdatableBlobStream.read()",2,1,3
"org.apache.derby.impl.jdbc.UpdatableBlobStream.read(byte[])",1,1,2
"org.apache.derby.impl.jdbc.UpdatableBlobStream.read(byte[],int,int)",1,1,2
"org.apache.derby.impl.jdbc.UpdatableBlobStream.skip(long)",1,1,2
"org.apache.derby.impl.jdbc.UpdatableBlobStream.updateIfRequired()",6,6,7
"org.apache.derby.impl.jdbc.Util.ASSERT(EmbedConnection,boolean,String)",2,3,3
"org.apache.derby.impl.jdbc.Util.THROWASSERT(EmbedConnection,String)",2,3,3
"org.apache.derby.impl.jdbc.Util.generateCsSQLException(StandardException)",1,1,1
"org.apache.derby.impl.jdbc.Util.generateCsSQLException(String)",1,1,1
"org.apache.derby.impl.jdbc.Util.generateCsSQLException(String,Object)",1,1,1
"org.apache.derby.impl.jdbc.Util.generateCsSQLException(String,Object,Object)",1,1,1
"org.apache.derby.impl.jdbc.Util.generateCsSQLException(String,Object,Object,Object)",1,1,1
"org.apache.derby.impl.jdbc.Util.generateCsSQLException(String,Object,Throwable)",1,1,1
"org.apache.derby.impl.jdbc.Util.getExceptionFactory()",1,1,1
"org.apache.derby.impl.jdbc.Util.javaException(Throwable)",1,4,5
"org.apache.derby.impl.jdbc.Util.newEmbedSQLException(String,Object[],SQLException,int,Throwable)",1,1,1
"org.apache.derby.impl.jdbc.Util.newEmbedSQLException(String,Object[],int)",1,1,1
"org.apache.derby.impl.jdbc.Util.newEmbedSQLException(String,Object[],int,Throwable)",1,1,1
"org.apache.derby.impl.jdbc.Util.newEmbedSQLException(String,int)",1,1,1
"org.apache.derby.impl.jdbc.Util.newException(String,Object,Object,Object)",1,1,1
"org.apache.derby.impl.jdbc.Util.noCurrentConnection()",1,1,1
"org.apache.derby.impl.jdbc.Util.notImplemented()",1,1,1
"org.apache.derby.impl.jdbc.Util.notImplemented(String)",1,1,1
"org.apache.derby.impl.jdbc.Util.policyNotReloaded(Throwable)",1,1,1
"org.apache.derby.impl.jdbc.Util.seeNextException(String,Object[],SQLException)",1,1,1
"org.apache.derby.impl.jdbc.Util.setExceptionFactory(SQLExceptionFactory)",1,1,1
"org.apache.derby.impl.jdbc.Util.setStreamFailure(IOException)",1,2,2
"org.apache.derby.impl.jdbc.Util.typeMisMatch(int)",1,1,1
"org.apache.derby.impl.jdbc.Util.typeName(int)",33,2,33
"org.apache.derby.impl.jdbc._Suite._Suite(String)",1,1,1
"org.apache.derby.impl.jdbc._Suite.suite()",1,1,1
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.AuthenticationServiceBase()",1,1,1
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.apply(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.authenticate(String,Properties)",3,4,6
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.boot(boolean,Properties)",1,2,2
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.encryptPassword(String)",2,1,3
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.getDatabaseProperty(String)",1,3,4
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.getProperty(String)",1,3,4
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.getSystemProperty(String)",2,1,2
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.init(boolean,Dictionary)",1,1,1
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.map(String,Serializable,Dictionary)",3,3,5
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.requireAuthentication(Properties)",1,1,1
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.setAuthenticationService(UserAuthenticator)",1,3,3
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.stop()",1,1,1
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.substitutePassword(String,String,Properties,boolean)",1,4,5
"org.apache.derby.impl.jdbc.authentication.AuthenticationServiceBase.validate(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.authenticateUser(String,String,String,Properties)",4,5,9
"org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.boot(boolean,Properties)",1,2,2
"org.apache.derby.impl.jdbc.authentication.BasicAuthenticationServiceImpl.canSupport(Properties)",3,3,5
"org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationSchemeBase.JNDIAuthenticationSchemeBase(JNDIAuthenticationService,Properties)",1,1,1
"org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationSchemeBase.getLoginSQLException(Exception)",1,1,1
"org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationSchemeBase.setInitDirContextEnv(Properties)",1,4,4
"org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService.JNDIAuthenticationService()",1,1,1
"org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.jdbc.authentication.JNDIAuthenticationService.canSupport(Properties)",3,2,4
"org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.LDAPAuthenticationSchemeImpl(JNDIAuthenticationService,Properties)",1,1,1
"org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.authenticateUser(String,String,String,Properties)",2,8,12
"org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.getDNFromUID(String)",4,7,8
"org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.privInitialDirContext(Properties)",2,2,3
"org.apache.derby.impl.jdbc.authentication.LDAPAuthenticationSchemeImpl.setJNDIProviderProperties()",1,15,19
"org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl.authenticateUser(String,String,String,Properties)",1,1,1
"org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.jdbc.authentication.NoneAuthenticationServiceImpl.canSupport(Properties)",1,1,1
"org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl.boot(boolean,Properties)",2,2,5
"org.apache.derby.impl.jdbc.authentication.SpecificAuthenticationServiceImpl.canSupport(Properties)",3,4,6
"org.apache.derby.impl.load.ColumnInfo.ColumnInfo(Connection,String,String,String,String,String)",6,10,13
"org.apache.derby.impl.load.ColumnInfo.getColumnNamesWithCasts()",2,11,12
"org.apache.derby.impl.load.ColumnInfo.getExpectedNumberOfColumnsInFile()",1,1,1
"org.apache.derby.impl.load.ColumnInfo.getExpectedVtiColumnTypes(String,int)",1,2,4
"org.apache.derby.impl.load.ColumnInfo.getExpectedVtiColumnTypesAsString()",2,5,5
"org.apache.derby.impl.load.ColumnInfo.getInsertColumnNames()",2,4,4
"org.apache.derby.impl.load.ColumnInfo.getTypeOption(String,int,int,int)",8,9,19
"org.apache.derby.impl.load.ColumnInfo.importExportSupportedType(int)",1,1,4
"org.apache.derby.impl.load.ColumnInfo.initializeColumnInfo(String)",3,3,3
"org.apache.derby.impl.load.ColumnInfo.tableExists()",1,1,2
"org.apache.derby.impl.load.ControlInfo.ControlInfo()",2,2,2
"org.apache.derby.impl.load.ControlInfo.commonToFieldAndRecordDelimiters(String,String,char)",1,2,2
"org.apache.derby.impl.load.ControlInfo.getColumnDefinition()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getColumnWidths()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getCurrentProperties()",1,2,2
"org.apache.derby.impl.load.ControlInfo.getCurrentVersion()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getDataCodeset()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getFieldEndDelimiter()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getFieldSeparator()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getFieldStartDelimiter()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getFormat()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getHasDelimeterAtEndString()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getHasDelimiterAtEnd()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getNullString()",1,1,1
"org.apache.derby.impl.load.ControlInfo.getPropertyValue(String)",1,1,1
"org.apache.derby.impl.load.ControlInfo.getRecordSeparator()",1,1,1
"org.apache.derby.impl.load.ControlInfo.loadDefaultValues()",1,1,1
"org.apache.derby.impl.load.ControlInfo.mapFromUserFriendlyFieldDelimiters(String)",9,1,9
"org.apache.derby.impl.load.ControlInfo.mapFromUserFriendlyRecordDelimiters(String)",8,1,9
"org.apache.derby.impl.load.ControlInfo.setCharacterDelimiter(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setColumnWidths(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setControlProperties(String,String,String)",1,1,1
"org.apache.derby.impl.load.ControlInfo.setDataCodeset(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setFieldEndDelimiter(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setFieldSeparator(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setFieldStartDelimiter(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setHasDelimiterAtEnd(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setNullString(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setRecordSeparator(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.setcolumnDefinition(String)",1,2,2
"org.apache.derby.impl.load.ControlInfo.validateDelimiters()",3,8,8
"org.apache.derby.impl.load.Export.Export(Connection,String,String,String,String,String,String,String)",1,2,2
"org.apache.derby.impl.load.Export.dataFileExists(String)",2,2,2
"org.apache.derby.impl.load.Export.doExport()",5,8,9
"org.apache.derby.impl.load.Export.exportQuery(Connection,String,String,String,String,String)",1,1,1
"org.apache.derby.impl.load.Export.exportQuery(Connection,String,String,String,String,String,String)",1,1,1
"org.apache.derby.impl.load.Export.exportTable(Connection,String,String,String,String,String,String)",1,1,1
"org.apache.derby.impl.load.Export.exportTable(Connection,String,String,String,String,String,String,String)",1,1,1
"org.apache.derby.impl.load.Export.getExportWriteData()",2,1,2
"org.apache.derby.impl.load.Export.lobsFileExists(String)",2,2,2
"org.apache.derby.impl.load.Export.setLobsExtFileName(String)",2,2,2
"org.apache.derby.impl.load.ExportAbstract.doAllTheWork()",1,6,17
"org.apache.derby.impl.load.ExportAbstract.getControlFileReader()",1,1,1
"org.apache.derby.impl.load.ExportAbstract.getOneRowAtATime(ResultSet,boolean[],boolean[])",2,5,7
"org.apache.derby.impl.load.ExportAbstract.resultSetForEntity()",1,1,1
"org.apache.derby.impl.load.ExportResultSetForObject.ExportResultSetForObject(Connection,String,String,String)",1,1,3
"org.apache.derby.impl.load.ExportResultSetForObject.close()",1,2,2
"org.apache.derby.impl.load.ExportResultSetForObject.getColumnCount()",1,1,1
"org.apache.derby.impl.load.ExportResultSetForObject.getColumnDefinition()",1,1,1
"org.apache.derby.impl.load.ExportResultSetForObject.getColumnLengths()",1,1,1
"org.apache.derby.impl.load.ExportResultSetForObject.getColumnTypes()",1,1,1
"org.apache.derby.impl.load.ExportResultSetForObject.getMetaDataInfo()",3,3,3
"org.apache.derby.impl.load.ExportResultSetForObject.getResultSet()",1,1,1
"org.apache.derby.impl.load.ExportWriteData.ExportWriteData(String,ControlInfo)",1,1,1
"org.apache.derby.impl.load.ExportWriteData.ExportWriteData(String,String,ControlInfo)",1,1,1
"org.apache.derby.impl.load.ExportWriteData.init()",1,2,2
"org.apache.derby.impl.load.ExportWriteData.makeDoubleDelimiterString(String,String)",2,3,3
"org.apache.derby.impl.load.ExportWriteData.noMoreRows()",1,5,5
"org.apache.derby.impl.load.ExportWriteData.openFiles()",1,10,13
"org.apache.derby.impl.load.ExportWriteData.run()",1,1,1
"org.apache.derby.impl.load.ExportWriteData.writeBinaryColumnToExternalFile(InputStream)",1,3,4
"org.apache.derby.impl.load.ExportWriteData.writeCharColumnToExternalFile(Reader)",1,3,4
"org.apache.derby.impl.load.ExportWriteData.writeColumnDefinitionOptionally(String[],String[])",1,3,5
"org.apache.derby.impl.load.ExportWriteData.writeData(String[],boolean[])",1,4,4
"org.apache.derby.impl.load.ExportWriteData.writeNextColumn(String,boolean)",1,5,5
"org.apache.derby.impl.load.ExportWriteDataAbstract.loadPropertiesInfo()",1,1,1
"org.apache.derby.impl.load.ExportWriteDataAbstract.setColumnLengths(int[])",1,1,1
"org.apache.derby.impl.load.Import.Import(String,String,String,String,int,String,boolean,int)",1,2,2
"org.apache.derby.impl.load.Import.bumpImportCounter()",1,1,1
"org.apache.derby.impl.load.Import.doImport()",2,2,2
"org.apache.derby.impl.load.Import.formatImportError(Import,String,Throwable)",1,2,2
"org.apache.derby.impl.load.Import.getImportReadData()",1,1,1
"org.apache.derby.impl.load.Import.importData(Connection,String,String,String,String,String,String,String,String,short,boolean)",1,1,1
"org.apache.derby.impl.load.Import.importTable(Connection,String,String,String,String,String,String,short,boolean)",1,1,1
"org.apache.derby.impl.load.Import.performImport(Connection,String,String,String,String,String,String,String,String,short,boolean)",3,6,15
"org.apache.derby.impl.load.ImportAbstract.close()",1,3,3
"org.apache.derby.impl.load.ImportAbstract.doAllTheWork()",1,1,2
"org.apache.derby.impl.load.ImportAbstract.getBlob(int)",4,4,4
"org.apache.derby.impl.load.ImportAbstract.getBytes(int)",3,3,3
"org.apache.derby.impl.load.ImportAbstract.getClob(int)",1,2,3
"org.apache.derby.impl.load.ImportAbstract.getCurrentLineNumber()",1,1,1
"org.apache.derby.impl.load.ImportAbstract.getMetaData()",1,1,1
"org.apache.derby.impl.load.ImportAbstract.getRow()",1,1,1
"org.apache.derby.impl.load.ImportAbstract.getString(int)",2,3,3
"org.apache.derby.impl.load.ImportAbstract.importError(Exception)",1,3,4
"org.apache.derby.impl.load.ImportAbstract.isColumnInExtFile(int)",2,1,4
"org.apache.derby.impl.load.ImportAbstract.loadColumnNames()",1,1,2
"org.apache.derby.impl.load.ImportAbstract.next()",1,2,2
"org.apache.derby.impl.load.ImportAbstract.wasNull()",1,1,1
"org.apache.derby.impl.load.ImportBlob.ImportBlob(ImportLobFile,long,long)",1,1,1
"org.apache.derby.impl.load.ImportBlob.ImportBlob(byte[])",1,1,1
"org.apache.derby.impl.load.ImportBlob.getBinaryStream()",2,3,3
"org.apache.derby.impl.load.ImportBlob.getBytes(long,int)",1,1,1
"org.apache.derby.impl.load.ImportBlob.length()",1,1,1
"org.apache.derby.impl.load.ImportBlob.position(Blob,long)",1,1,1
"org.apache.derby.impl.load.ImportBlob.position(byte[],long)",1,1,1
"org.apache.derby.impl.load.ImportBlob.setBinaryStream(long)",1,1,1
"org.apache.derby.impl.load.ImportBlob.setBytes(long,byte[])",1,1,1
"org.apache.derby.impl.load.ImportBlob.setBytes(long,byte[],int,int)",1,1,1
"org.apache.derby.impl.load.ImportBlob.truncate(long)",1,1,1
"org.apache.derby.impl.load.ImportClob.ImportClob(ImportLobFile,long,long)",1,1,1
"org.apache.derby.impl.load.ImportClob.ImportClob(String)",1,1,1
"org.apache.derby.impl.load.ImportClob.getAsciiStream()",1,1,1
"org.apache.derby.impl.load.ImportClob.getCharacterStream()",2,3,3
"org.apache.derby.impl.load.ImportClob.getSubString(long,int)",1,1,1
"org.apache.derby.impl.load.ImportClob.length()",1,1,1
"org.apache.derby.impl.load.ImportClob.position(Clob,long)",1,1,1
"org.apache.derby.impl.load.ImportClob.position(String,long)",1,1,1
"org.apache.derby.impl.load.ImportClob.setAsciiStream(long)",1,1,1
"org.apache.derby.impl.load.ImportClob.setCharacterStream(long)",1,1,1
"org.apache.derby.impl.load.ImportClob.setString(long,String)",1,1,1
"org.apache.derby.impl.load.ImportClob.setString(long,String,int,int)",1,1,1
"org.apache.derby.impl.load.ImportClob.truncate(long)",1,1,1
"org.apache.derby.impl.load.ImportFileInputStream.ImportFileInputStream(RandomAccessFile)",1,1,1
"org.apache.derby.impl.load.ImportFileInputStream.available()",1,1,1
"org.apache.derby.impl.load.ImportFileInputStream.close()",1,2,2
"org.apache.derby.impl.load.ImportFileInputStream.read()",1,1,1
"org.apache.derby.impl.load.ImportFileInputStream.read(byte[],int,int)",1,1,1
"org.apache.derby.impl.load.ImportFileInputStream.seek(long)",1,1,1
"org.apache.derby.impl.load.ImportLobFile.ImportLobFile(File,String)",1,1,1
"org.apache.derby.impl.load.ImportLobFile.close()",1,4,4
"org.apache.derby.impl.load.ImportLobFile.getBinaryStream(long,long)",1,1,1
"org.apache.derby.impl.load.ImportLobFile.getCharacterStream(long,long)",1,1,2
"org.apache.derby.impl.load.ImportLobFile.getClobDataLength(long,long)",1,2,3
"org.apache.derby.impl.load.ImportLobFile.getString(int,int)",1,2,3
"org.apache.derby.impl.load.ImportLobFile.openLobFile(File)",1,3,3
"org.apache.derby.impl.load.ImportReadData.ImportReadData(String,ControlInfo)",1,1,1
"org.apache.derby.impl.load.ImportReadData.checkForWhiteSpaceInBack()",1,2,8
"org.apache.derby.impl.load.ImportReadData.checkForWhiteSpaceInFront()",1,2,9
"org.apache.derby.impl.load.ImportReadData.closeStream()",1,5,5
"org.apache.derby.impl.load.ImportReadData.findNumberOfColumnsInARow()",1,1,4
"org.apache.derby.impl.load.ImportReadData.getBlobColumnFromExtFile(String,int)",2,1,2
"org.apache.derby.impl.load.ImportReadData.getClobColumnFromExtFile(String,int)",2,2,3
"org.apache.derby.impl.load.ImportReadData.getClobColumnFromExtFileAsString(String,int)",2,3,3
"org.apache.derby.impl.load.ImportReadData.getCurrentRowNumber()",1,1,1
"org.apache.derby.impl.load.ImportReadData.getNumberOfColumns()",1,1,1
"org.apache.derby.impl.load.ImportReadData.ignoreFirstRow()",1,1,1
"org.apache.derby.impl.load.ImportReadData.initExternalLobFile(String,int)",2,4,4
"org.apache.derby.impl.load.ImportReadData.isFieldSep(char[])",3,1,4
"org.apache.derby.impl.load.ImportReadData.loadColumnTypes()",1,1,2
"org.apache.derby.impl.load.ImportReadData.loadMetaData()",1,3,3
"org.apache.derby.impl.load.ImportReadData.loadPropertiesInfo()",1,3,3
"org.apache.derby.impl.load.ImportReadData.lookForPassedSeparator(char[],int,int,int,boolean)",14,14,20
"org.apache.derby.impl.load.ImportReadData.omitLineFeed()",1,2,2
"org.apache.derby.impl.load.ImportReadData.openFile()",1,2,2
"org.apache.derby.impl.load.ImportReadData.reCheckRestOfTheCharacters(int,char[],int)",1,1,3
"org.apache.derby.impl.load.ImportReadData.readNextDelimitedRow(String[])",13,15,24
"org.apache.derby.impl.load.ImportReadData.readNextFixedRow(String[])",8,10,11
"org.apache.derby.impl.load.ImportReadData.readNextRow(String[])",1,4,4
"org.apache.derby.impl.load.ImportReadData.readNextToken(char[],int,int,boolean)",4,6,7
"org.apache.derby.impl.load.ImportReadData.readTokensUntilEndOfRecord()",6,4,7
"org.apache.derby.impl.load.ImportReadData.realOpenFile()",2,4,6
"org.apache.derby.impl.load.ImportReadData.run()",1,1,1
"org.apache.derby.impl.load.ImportReadData.skipDoubleDelimiters(char[])",3,3,3
"org.apache.derby.impl.load.ImportResultSetMetaData.ImportResultSetMetaData(int,String[],int[],int[])",1,1,1
"org.apache.derby.impl.load.ImportResultSetMetaData.getColumnCount()",1,1,1
"org.apache.derby.impl.load.ImportResultSetMetaData.getColumnDisplaySize(int)",2,1,2
"org.apache.derby.impl.load.ImportResultSetMetaData.getColumnName(int)",1,1,1
"org.apache.derby.impl.load.ImportResultSetMetaData.getColumnType(int)",2,2,7
"org.apache.derby.impl.load.ImportResultSetMetaData.isNullable(int)",1,1,1
"org.apache.derby.impl.load.LoadError.connectionNull()",1,1,1
"org.apache.derby.impl.load.LoadError.dataAfterStopDelimiter(int,int)",1,1,1
"org.apache.derby.impl.load.LoadError.dataFileExists(String)",1,1,1
"org.apache.derby.impl.load.LoadError.dataFileNotFound(String,Exception)",1,1,1
"org.apache.derby.impl.load.LoadError.dataFileNull()",1,1,1
"org.apache.derby.impl.load.LoadError.delimitersAreNotMutuallyExclusive()",1,1,1
"org.apache.derby.impl.load.LoadError.entityNameMissing()",1,1,1
"org.apache.derby.impl.load.LoadError.errorWritingData(IOException)",1,1,1
"org.apache.derby.impl.load.LoadError.fieldAndRecordSeparatorsSubset()",1,1,1
"org.apache.derby.impl.load.LoadError.invalidColumnName(String)",1,1,1
"org.apache.derby.impl.load.LoadError.invalidColumnNumber(int)",1,1,1
"org.apache.derby.impl.load.LoadError.lobsFileExists(String)",1,1,1
"org.apache.derby.impl.load.LoadError.nonSupportedTypeColumn(String,String)",1,1,1
"org.apache.derby.impl.load.LoadError.periodAsCharDelimiterNotAllowed()",1,1,1
"org.apache.derby.impl.load.LoadError.recordSeparatorMissing(int)",1,1,1
"org.apache.derby.impl.load.LoadError.tableNotFound(String)",1,1,1
"org.apache.derby.impl.load.LoadError.unexpectedEndOfFile(int)",1,1,1
"org.apache.derby.impl.load.LoadError.unexpectedError(Throwable)",2,2,2
"org.apache.derby.impl.services.bytecode.BCClass.BCClass(ClassFactory,String,int,String,String,BCJava)",1,3,4
"org.apache.derby.impl.services.bytecode.BCClass.addField(String,String,int)",1,1,1
"org.apache.derby.impl.services.bytecode.BCClass.addLimitExceeded(BCMethod,String,int,int)",1,2,2
"org.apache.derby.impl.services.bytecode.BCClass.addLimitExceeded(String)",1,1,2
"org.apache.derby.impl.services.bytecode.BCClass.getClassBytecode()",3,9,10
"org.apache.derby.impl.services.bytecode.BCClass.getClassFactory()",1,1,1
"org.apache.derby.impl.services.bytecode.BCClass.getName()",1,1,1
"org.apache.derby.impl.services.bytecode.BCClass.getSuperClassName()",1,1,1
"org.apache.derby.impl.services.bytecode.BCClass.modify()",1,1,1
"org.apache.derby.impl.services.bytecode.BCClass.newConstructorBuilder(int)",1,1,1
"org.apache.derby.impl.services.bytecode.BCClass.newFieldWithAccessors(String,String,int,boolean,String)",1,3,7
"org.apache.derby.impl.services.bytecode.BCClass.newMethodBuilder(int,String,String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCClass.newMethodBuilder(int,String,String,String[])",1,2,2
"org.apache.derby.impl.services.bytecode.BCJava.BCJava()",1,1,1
"org.apache.derby.impl.services.bytecode.BCJava.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.services.bytecode.BCJava.newCacheable(CacheManager)",1,1,1
"org.apache.derby.impl.services.bytecode.BCJava.newClassBuilder(ClassFactory,String,int,String,String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCJava.stop()",1,1,1
"org.apache.derby.impl.services.bytecode.BCJava.type(String)",1,3,3
"org.apache.derby.impl.services.bytecode.BCJava.vmType(BCMethodDescriptor)",1,3,3
"org.apache.derby.impl.services.bytecode.BCJava.vmTypeId(String)",13,3,14
"org.apache.derby.impl.services.bytecode.BCLocalField.BCLocalField(Type,int)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.BCMethod(ClassBuilder,String,String,int,String[],BCJava)",1,4,6
"org.apache.derby.impl.services.bytecode.BCMethod.addInstrCPE(short,int)",1,2,2
"org.apache.derby.impl.services.bytecode.BCMethod.addThrownException(String)",1,3,4
"org.apache.derby.impl.services.bytecode.BCMethod.callMethod(Object)",1,4,4
"org.apache.derby.impl.services.bytecode.BCMethod.callMethod(short,String,String,String,int)",1,9,11
"org.apache.derby.impl.services.bytecode.BCMethod.callSubMethod(BCMethod)",1,3,4
"org.apache.derby.impl.services.bytecode.BCMethod.callSuper()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.cast(String)",3,8,13
"org.apache.derby.impl.services.bytecode.BCMethod.complete()",1,2,2
"org.apache.derby.impl.services.bytecode.BCMethod.completeConditional()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.conditionalIf()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.conditionalIf(short)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.conditionalIfNull()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.constantPool()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.copyStack()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.describeMethod(short,String,String,String)",1,3,4
"org.apache.derby.impl.services.bytecode.BCMethod.dup()",1,1,2
"org.apache.derby.impl.services.bytecode.BCMethod.endStatement()",1,2,2
"org.apache.derby.impl.services.bytecode.BCMethod.getArrayElement(int)",1,2,3
"org.apache.derby.impl.services.bytecode.BCMethod.getField(LocalField)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.getField(String,String,String)",1,1,2
"org.apache.derby.impl.services.bytecode.BCMethod.getField(short,String,String,String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.getName()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.getNewSubMethod(String,boolean)",1,1,2
"org.apache.derby.impl.services.bytecode.BCMethod.getParameter(int)",1,2,2
"org.apache.derby.impl.services.bytecode.BCMethod.getStaticField(String,String,String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.growStack(Type)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.growStack(int,Type)",1,5,6
"org.apache.derby.impl.services.bytecode.BCMethod.isInstanceOf(String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.methodReturn()",1,4,4
"org.apache.derby.impl.services.bytecode.BCMethod.overflowMethodCheck()",6,1,6
"org.apache.derby.impl.services.bytecode.BCMethod.pop()",1,4,5
"org.apache.derby.impl.services.bytecode.BCMethod.popStack()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.push(String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.push(boolean)",1,1,2
"org.apache.derby.impl.services.bytecode.BCMethod.push(byte)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.push(double)",1,2,2
"org.apache.derby.impl.services.bytecode.BCMethod.push(float)",1,4,4
"org.apache.derby.impl.services.bytecode.BCMethod.push(int)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.push(int,Type)",1,4,7
"org.apache.derby.impl.services.bytecode.BCMethod.push(long)",3,3,6
"org.apache.derby.impl.services.bytecode.BCMethod.push(short)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.pushNewArray(String,int)",1,4,4
"org.apache.derby.impl.services.bytecode.BCMethod.pushNewComplete(int)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.pushNewStart(String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.pushNull(String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.pushThis()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.putField(LocalField)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.putField(String,String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.putField(String,String,String)",1,3,5
"org.apache.derby.impl.services.bytecode.BCMethod.putField(Type,int,boolean)",1,2,3
"org.apache.derby.impl.services.bytecode.BCMethod.setArrayElement(int)",1,2,3
"org.apache.derby.impl.services.bytecode.BCMethod.setField(LocalField)",1,2,2
"org.apache.derby.impl.services.bytecode.BCMethod.splitMethod()",4,3,8
"org.apache.derby.impl.services.bytecode.BCMethod.startElseCode()",1,2,2
"org.apache.derby.impl.services.bytecode.BCMethod.statementNumHitLimit(int)",2,1,2
"org.apache.derby.impl.services.bytecode.BCMethod.swap()",3,4,4
"org.apache.derby.impl.services.bytecode.BCMethod.upCast(String)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethod.vmNameDeclaringClass(String)",2,1,2
"org.apache.derby.impl.services.bytecode.BCMethod.writeExceptions()",2,3,5
"org.apache.derby.impl.services.bytecode.BCMethodCaller.BCMethodCaller(short,Type,int)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethodDescriptor.BCMethodDescriptor(String[],String,BCJava)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethodDescriptor.buildMethodDescriptor()",1,2,2
"org.apache.derby.impl.services.bytecode.BCMethodDescriptor.equals(Object)",5,2,5
"org.apache.derby.impl.services.bytecode.BCMethodDescriptor.get(String[],String,BCJava)",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethodDescriptor.hashCode()",1,1,1
"org.apache.derby.impl.services.bytecode.BCMethodDescriptor.toString()",1,1,1
"org.apache.derby.impl.services.bytecode.CodeChunk.CodeChunk(BCClass)",1,2,2
"org.apache.derby.impl.services.bytecode.CodeChunk.CodeChunk(CodeChunk,int,int)",1,2,2
"org.apache.derby.impl.services.bytecode.CodeChunk.addInstr(short)",1,4,4
"org.apache.derby.impl.services.bytecode.CodeChunk.addInstrCPE(short,int)",1,2,2
"org.apache.derby.impl.services.bytecode.CodeChunk.addInstrU1(short,int)",1,4,4
"org.apache.derby.impl.services.bytecode.CodeChunk.addInstrU2(short,int)",1,4,4
"org.apache.derby.impl.services.bytecode.CodeChunk.addInstrU2U1U1(short,int,short,short)",1,4,4
"org.apache.derby.impl.services.bytecode.CodeChunk.addInstrU4(short,int)",1,4,4
"org.apache.derby.impl.services.bytecode.CodeChunk.addInstrWide(short,int)",1,2,2
"org.apache.derby.impl.services.bytecode.CodeChunk.complete(BCMethod,ClassHolder,ClassMember,int,int)",1,8,10
"org.apache.derby.impl.services.bytecode.CodeChunk.findConditionalPCs(int,short)",9,7,12
"org.apache.derby.impl.services.bytecode.CodeChunk.findMaxStack(ClassHolder,int,int)",4,4,6
"org.apache.derby.impl.services.bytecode.CodeChunk.fixLengths(BCMethod,int,int,int)",1,4,7
"org.apache.derby.impl.services.bytecode.CodeChunk.getDescriptorWordCount(String)",2,5,7
"org.apache.derby.impl.services.bytecode.CodeChunk.getOpcode(int)",1,1,1
"org.apache.derby.impl.services.bytecode.CodeChunk.getPC()",1,1,1
"org.apache.derby.impl.services.bytecode.CodeChunk.getTypeDescriptor(ClassHolder,int)",1,1,1
"org.apache.derby.impl.services.bytecode.CodeChunk.getU2(int)",1,1,1
"org.apache.derby.impl.services.bytecode.CodeChunk.getU4(int)",1,1,1
"org.apache.derby.impl.services.bytecode.CodeChunk.getVariableStackDelta(ClassHolder,int,int)",2,2,9
"org.apache.derby.impl.services.bytecode.CodeChunk.insertCodeSpace(int,int)",1,3,3
"org.apache.derby.impl.services.bytecode.CodeChunk.instructionLength(short)",1,3,3
"org.apache.derby.impl.services.bytecode.CodeChunk.isReturn(short)",3,2,3
"org.apache.derby.impl.services.bytecode.CodeChunk.limitHit(IOException)",1,1,1
"org.apache.derby.impl.services.bytecode.CodeChunk.parameterWordCount(String)",4,3,10
"org.apache.derby.impl.services.bytecode.CodeChunk.removePushedCode(BCMethod,ClassHolder,BCMethod,int,int)",2,4,5
"org.apache.derby.impl.services.bytecode.CodeChunk.splitCodeIntoSubMethod(BCMethod,ClassHolder,BCMethod,int,int)",2,3,4
"org.apache.derby.impl.services.bytecode.CodeChunk.splitExpressionOut(BCMethod,ClassHolder,int,int)",13,14,30
"org.apache.derby.impl.services.bytecode.CodeChunk.splitMinLength(BCMethod)",1,1,3
"org.apache.derby.impl.services.bytecode.CodeChunk.splitZeroStack(BCMethod,ClassHolder,int,int)",10,7,17
"org.apache.derby.impl.services.bytecode.CodeChunk.stackWordDelta(ClassHolder,int,short)",1,3,3
"org.apache.derby.impl.services.bytecode.CodeChunk.startSubMethod(BCMethod,String,int,int)",1,1,1
"org.apache.derby.impl.services.bytecode.CodeChunk.usesParameters(BCMethod,int,int)",10,3,11
"org.apache.derby.impl.services.bytecode.Conditional.Conditional(Conditional,CodeChunk,short,Type[])",1,1,1
"org.apache.derby.impl.services.bytecode.Conditional.end(BCMethod,CodeChunk,Type[],int)",1,6,7
"org.apache.derby.impl.services.bytecode.Conditional.fillIn(BCMethod,CodeChunk,int,int)",5,9,11
"org.apache.derby.impl.services.bytecode.Conditional.startElse(BCMethod,CodeChunk,Type[])",1,1,1
"org.apache.derby.impl.services.bytecode.GClass.GClass(ClassFactory,String)",1,1,1
"org.apache.derby.impl.services.bytecode.GClass.getFullName()",1,1,1
"org.apache.derby.impl.services.bytecode.GClass.getGeneratedClass()",1,1,1
"org.apache.derby.impl.services.bytecode.GClass.validateType(String)",11,5,14
"org.apache.derby.impl.services.bytecode.GClass.writeClassFile(String,boolean,Throwable)",1,6,7
"org.apache.derby.impl.services.bytecode.Type.Type(String,String)",1,1,1
"org.apache.derby.impl.services.bytecode.Type.javaName()",1,1,1
"org.apache.derby.impl.services.bytecode.Type.vmName()",1,1,1
"org.apache.derby.impl.services.bytecode.Type.vmType()",1,1,1
"org.apache.derby.impl.services.bytecode.Type.width()",1,1,1
"org.apache.derby.impl.services.bytecode.Type.width(short)",4,2,4
"org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.clean(boolean)",1,1,1
"org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.clearIdentity()",1,1,1
"org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.createIdentity(Object,Object)",1,2,2
"org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.descriptor()",1,1,1
"org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.getIdentity()",1,1,1
"org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.isDirty()",1,1,1
"org.apache.derby.impl.services.bytecode.VMTypeIdCacheable.setIdentity(Object)",1,2,2
"org.apache.derby.impl.services.bytecode.d_BCValidate.checkMethod(short,Type,String,String[],Type)",10,15,23
"org.apache.derby.impl.services.bytecode.d_BCValidate.loadClass(String)",4,3,4
"org.apache.derby.impl.services.cache.BackgroundCleaner.BackgroundCleaner(ConcurrentCache,DaemonService,int)",1,1,1
"org.apache.derby.impl.services.cache.BackgroundCleaner.performWork(ContextManager)",1,5,5
"org.apache.derby.impl.services.cache.BackgroundCleaner.requestService()",1,2,2
"org.apache.derby.impl.services.cache.BackgroundCleaner.scheduleClean(CacheEntry)",1,2,2
"org.apache.derby.impl.services.cache.BackgroundCleaner.scheduleShrink()",1,1,1
"org.apache.derby.impl.services.cache.BackgroundCleaner.serviceASAP()",1,1,1
"org.apache.derby.impl.services.cache.BackgroundCleaner.serviceImmediately()",1,1,1
"org.apache.derby.impl.services.cache.BackgroundCleaner.unsubscribe()",1,1,1
"org.apache.derby.impl.services.cache.CacheEntry.free()",1,3,3
"org.apache.derby.impl.services.cache.CacheEntry.getCacheable()",1,2,2
"org.apache.derby.impl.services.cache.CacheEntry.isKept()",1,2,2
"org.apache.derby.impl.services.cache.CacheEntry.isValid()",1,2,3
"org.apache.derby.impl.services.cache.CacheEntry.keep(boolean)",1,3,3
"org.apache.derby.impl.services.cache.CacheEntry.lock()",1,2,2
"org.apache.derby.impl.services.cache.CacheEntry.setCacheable(Cacheable)",1,2,2
"org.apache.derby.impl.services.cache.CacheEntry.setCallback(Callback)",1,2,2
"org.apache.derby.impl.services.cache.CacheEntry.settingIdentityComplete()",1,2,2
"org.apache.derby.impl.services.cache.CacheEntry.unkeep()",1,3,4
"org.apache.derby.impl.services.cache.CacheEntry.unkeepForRemove()",1,4,4
"org.apache.derby.impl.services.cache.CacheEntry.unlock()",1,1,1
"org.apache.derby.impl.services.cache.CacheEntry.waitUntilIdentityIsSet()",1,3,3
"org.apache.derby.impl.services.cache.CacheStat.getStats()",1,1,2
"org.apache.derby.impl.services.cache.CacheStat.reset()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.CachedItem()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.clean(boolean)",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.getEntry()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.isKept()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.isValid()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.keepAfterSearch()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.keepForClean()",1,2,2
"org.apache.derby.impl.services.cache.CachedItem.keepForCreate()",1,2,2
"org.apache.derby.impl.services.cache.CachedItem.notifyRemover()",1,2,2
"org.apache.derby.impl.services.cache.CachedItem.recentlyUsed()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.remove(boolean)",3,4,4
"org.apache.derby.impl.services.cache.CachedItem.setRemoveState()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.setUsed(boolean)",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.setValidState(boolean)",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.settingIdentityComplete()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.takeOnIdentity(CacheManager,CacheableFactory,Object,boolean,Object)",2,5,5
"org.apache.derby.impl.services.cache.CachedItem.unkeep()",1,2,3
"org.apache.derby.impl.services.cache.CachedItem.unkeepForCreate()",1,1,1
"org.apache.derby.impl.services.cache.CachedItem.use()",3,6,7
"org.apache.derby.impl.services.cache.Clock.Clock(CacheableFactory,String,int,long,boolean)",1,3,3
"org.apache.derby.impl.services.cache.Clock.addEntry(CachedItem,Object,boolean,Object)",1,8,8
"org.apache.derby.impl.services.cache.Clock.ageOut()",5,6,9
"org.apache.derby.impl.services.cache.Clock.clean(Matchable)",1,1,1
"org.apache.derby.impl.services.cache.Clock.cleanAll()",1,1,1
"org.apache.derby.impl.services.cache.Clock.cleanCache(Matchable)",8,4,9
"org.apache.derby.impl.services.cache.Clock.containsKey(Object)",1,1,1
"org.apache.derby.impl.services.cache.Clock.create(Object,Object)",3,7,8
"org.apache.derby.impl.services.cache.Clock.discard(Matchable)",5,7,10
"org.apache.derby.impl.services.cache.Clock.find(Object)",5,17,18
"org.apache.derby.impl.services.cache.Clock.findCached(Object)",3,2,4
"org.apache.derby.impl.services.cache.Clock.findFreeItem()",7,6,9
"org.apache.derby.impl.services.cache.Clock.getCacheStats()",1,1,1
"org.apache.derby.impl.services.cache.Clock.getCurrentSize()",1,1,1
"org.apache.derby.impl.services.cache.Clock.getCurrentSizeNoSync()",2,2,2
"org.apache.derby.impl.services.cache.Clock.getItemSize(CachedItem)",3,1,3
"org.apache.derby.impl.services.cache.Clock.getMaximumSize()",1,1,1
"org.apache.derby.impl.services.cache.Clock.getNumberInUse()",1,2,3
"org.apache.derby.impl.services.cache.Clock.growCache()",1,1,1
"org.apache.derby.impl.services.cache.Clock.incrClockHand()",1,1,2
"org.apache.derby.impl.services.cache.Clock.performWork(ContextManager)",1,1,1
"org.apache.derby.impl.services.cache.Clock.performWork(boolean)",14,25,38
"org.apache.derby.impl.services.cache.Clock.release(Cacheable)",1,6,6
"org.apache.derby.impl.services.cache.Clock.release(CachedItem)",1,4,4
"org.apache.derby.impl.services.cache.Clock.remove(Cacheable)",1,5,5
"org.apache.derby.impl.services.cache.Clock.removeIdentity(CachedItem)",1,4,4
"org.apache.derby.impl.services.cache.Clock.resetCacheStats()",1,1,1
"org.apache.derby.impl.services.cache.Clock.resize(long)",1,4,4
"org.apache.derby.impl.services.cache.Clock.rotateClock(float)",15,28,44
"org.apache.derby.impl.services.cache.Clock.scan(Matchable,Operator)",6,8,10
"org.apache.derby.impl.services.cache.Clock.serviceASAP()",1,1,1
"org.apache.derby.impl.services.cache.Clock.serviceImmediately()",1,1,1
"org.apache.derby.impl.services.cache.Clock.setUsed(Object[])",5,4,7
"org.apache.derby.impl.services.cache.Clock.shrinkSize(long)",3,1,4
"org.apache.derby.impl.services.cache.Clock.shutdown()",1,2,2
"org.apache.derby.impl.services.cache.Clock.trimToSize()",12,7,14
"org.apache.derby.impl.services.cache.Clock.useDaemonService(DaemonService)",1,2,2
"org.apache.derby.impl.services.cache.Clock.values()",1,2,2
"org.apache.derby.impl.services.cache.ClockFactory.ClockFactory()",1,1,1
"org.apache.derby.impl.services.cache.ClockFactory.newCacheManager(CacheableFactory,String,int,int)",1,1,2
"org.apache.derby.impl.services.cache.ClockFactory.newSizedCacheManager(CacheableFactory,String,int,long)",1,1,2
"org.apache.derby.impl.services.cache.ClockPolicy.ClockPolicy(ConcurrentCache,int,int)",1,1,1
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.Holder(CacheEntry)",1,1,1
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.access()",1,1,1
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.evictIfFree()",2,3,4
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.free()",1,2,2
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.getEntry()",1,1,1
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.isEvicted()",1,1,1
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.setEvicted()",1,2,2
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.switchEntry(CacheEntry)",1,1,1
"org.apache.derby.impl.services.cache.ClockPolicy.Holder.takeIfFree(CacheEntry)",2,3,4
"org.apache.derby.impl.services.cache.ClockPolicy.doShrink()",1,2,2
"org.apache.derby.impl.services.cache.ClockPolicy.insertEntry(CacheEntry)",3,6,6
"org.apache.derby.impl.services.cache.ClockPolicy.isEvictable(CacheEntry,Holder,boolean)",4,2,6
"org.apache.derby.impl.services.cache.ClockPolicy.moveHand()",2,1,3
"org.apache.derby.impl.services.cache.ClockPolicy.removeHolder(int,Holder)",1,2,2
"org.apache.derby.impl.services.cache.ClockPolicy.rotateClock(CacheEntry,boolean)",9,7,12
"org.apache.derby.impl.services.cache.ClockPolicy.shrinkMe()",6,5,9
"org.apache.derby.impl.services.cache.ConcurrentCache.ConcurrentCache(CacheableFactory,String,int,int)",1,1,1
"org.apache.derby.impl.services.cache.ConcurrentCache.ageOut()",1,5,5
"org.apache.derby.impl.services.cache.ConcurrentCache.clean(Matchable)",1,1,1
"org.apache.derby.impl.services.cache.ConcurrentCache.cleanAll()",1,1,1
"org.apache.derby.impl.services.cache.ConcurrentCache.cleanAndUnkeepEntry(CacheEntry,Cacheable)",1,2,2
"org.apache.derby.impl.services.cache.ConcurrentCache.cleanCache(Matchable)",5,3,6
"org.apache.derby.impl.services.cache.ConcurrentCache.cleanEntry(CacheEntry)",2,1,2
"org.apache.derby.impl.services.cache.ConcurrentCache.create(Object,Object)",3,2,3
"org.apache.derby.impl.services.cache.ConcurrentCache.discard(Matchable)",5,3,6
"org.apache.derby.impl.services.cache.ConcurrentCache.evictEntry(Object)",1,1,1
"org.apache.derby.impl.services.cache.ConcurrentCache.find(Object)",3,2,3
"org.apache.derby.impl.services.cache.ConcurrentCache.findCached(Object)",3,2,4
"org.apache.derby.impl.services.cache.ConcurrentCache.getBackgroundCleaner()",1,1,1
"org.apache.derby.impl.services.cache.ConcurrentCache.getEntry(Object)",5,4,5
"org.apache.derby.impl.services.cache.ConcurrentCache.getReplacementPolicy()",1,1,1
"org.apache.derby.impl.services.cache.ConcurrentCache.insertIntoFreeSlot(Object,CacheEntry)",1,3,3
"org.apache.derby.impl.services.cache.ConcurrentCache.release(Cacheable)",1,2,2
"org.apache.derby.impl.services.cache.ConcurrentCache.remove(Cacheable)",1,2,2
"org.apache.derby.impl.services.cache.ConcurrentCache.removeEntry(Object)",1,3,3
"org.apache.derby.impl.services.cache.ConcurrentCache.settingIdentityComplete(Object,CacheEntry,Cacheable)",1,2,2
"org.apache.derby.impl.services.cache.ConcurrentCache.shutdown()",1,2,2
"org.apache.derby.impl.services.cache.ConcurrentCache.useDaemonService(DaemonService)",1,2,2
"org.apache.derby.impl.services.cache.ConcurrentCache.values()",1,3,3
"org.apache.derby.impl.services.cache.ConcurrentCacheFactory.newCacheManager(CacheableFactory,String,int,int)",1,1,1
"org.apache.derby.impl.services.daemon.BasicDaemon.BasicDaemon(ContextService)",1,1,1
"org.apache.derby.impl.services.daemon.BasicDaemon.clear()",1,1,1
"org.apache.derby.impl.services.daemon.BasicDaemon.enqueue(Serviceable,boolean)",2,7,10
"org.apache.derby.impl.services.daemon.BasicDaemon.inPause()",1,1,1
"org.apache.derby.impl.services.daemon.BasicDaemon.nextAssignment(boolean)",4,15,18
"org.apache.derby.impl.services.daemon.BasicDaemon.pause()",1,8,9
"org.apache.derby.impl.services.daemon.BasicDaemon.rest()",1,10,14
"org.apache.derby.impl.services.daemon.BasicDaemon.resume()",1,3,3
"org.apache.derby.impl.services.daemon.BasicDaemon.run()",6,5,7
"org.apache.derby.impl.services.daemon.BasicDaemon.serviceClient(ServiceRecord)",3,8,11
"org.apache.derby.impl.services.daemon.BasicDaemon.serviceNow(int)",3,2,4
"org.apache.derby.impl.services.daemon.BasicDaemon.stop()",2,1,2
"org.apache.derby.impl.services.daemon.BasicDaemon.stopRequested()",1,1,1
"org.apache.derby.impl.services.daemon.BasicDaemon.subscribe(Serviceable,boolean)",1,3,3
"org.apache.derby.impl.services.daemon.BasicDaemon.unsubscribe(int)",2,2,3
"org.apache.derby.impl.services.daemon.BasicDaemon.waitUntilQueueIsEmpty()",5,7,9
"org.apache.derby.impl.services.daemon.BasicDaemon.wakeUp()",1,3,3
"org.apache.derby.impl.services.daemon.BasicDaemon.work(boolean)",4,12,18
"org.apache.derby.impl.services.daemon.BasicDaemon.yield()",1,4,4
"org.apache.derby.impl.services.daemon.ServiceRecord.ServiceRecord(Serviceable,boolean,boolean)",1,1,1
"org.apache.derby.impl.services.daemon.ServiceRecord.called()",1,1,1
"org.apache.derby.impl.services.daemon.ServiceRecord.needImmediateService()",1,1,1
"org.apache.derby.impl.services.daemon.ServiceRecord.needService()",1,1,2
"org.apache.derby.impl.services.daemon.ServiceRecord.serviced()",1,1,1
"org.apache.derby.impl.services.daemon.SingleThreadDaemonFactory.SingleThreadDaemonFactory()",1,1,1
"org.apache.derby.impl.services.daemon.SingleThreadDaemonFactory.createNewDaemon(String)",1,1,1
"org.apache.derby.impl.services.jce.JCECipherFactory.JCECipherFactory(boolean,Properties,boolean)",1,1,1
"org.apache.derby.impl.services.jce.JCECipherFactory.changeBootPassword(String,Properties,CipherProvider)",5,5,7
"org.apache.derby.impl.services.jce.JCECipherFactory.createNewCipher(int)",1,1,1
"org.apache.derby.impl.services.jce.JCECipherFactory.createNewCipher(int,SecretKey,byte[])",1,1,1
"org.apache.derby.impl.services.jce.JCECipherFactory.decryptKey(String,int,byte[])",1,1,2
"org.apache.derby.impl.services.jce.JCECipherFactory.digest(byte[])",1,1,2
"org.apache.derby.impl.services.jce.JCECipherFactory.encryptKey(byte[],byte[])",1,1,2
"org.apache.derby.impl.services.jce.JCECipherFactory.generateIV(byte[])",1,1,5
"org.apache.derby.impl.services.jce.JCECipherFactory.generateKey(byte[])",2,5,6
"org.apache.derby.impl.services.jce.JCECipherFactory.generateUniqueBytes()",1,4,5
"org.apache.derby.impl.services.jce.JCECipherFactory.getDatabaseSecretKey(Properties,byte[],String)",5,5,5
"org.apache.derby.impl.services.jce.JCECipherFactory.getMD5Checksum(byte[])",1,2,2
"org.apache.derby.impl.services.jce.JCECipherFactory.getMuckFromBootPassword(byte[],int)",1,1,3
"org.apache.derby.impl.services.jce.JCECipherFactory.getSecureRandom()",1,1,1
"org.apache.derby.impl.services.jce.JCECipherFactory.handleBootPassword(boolean,Properties,boolean)",3,4,7
"org.apache.derby.impl.services.jce.JCECipherFactory.init(boolean,Properties,boolean)",8,27,41
"org.apache.derby.impl.services.jce.JCECipherFactory.padKey(byte[],int)",1,2,2
"org.apache.derby.impl.services.jce.JCECipherFactory.privAccessFile(StorageFactory,String,String)",1,2,2
"org.apache.derby.impl.services.jce.JCECipherFactory.privAccessGetInputStream(StorageFactory,String)",1,2,2
"org.apache.derby.impl.services.jce.JCECipherFactory.providerErrorName(String)",1,1,2
"org.apache.derby.impl.services.jce.JCECipherFactory.run()",3,5,6
"org.apache.derby.impl.services.jce.JCECipherFactory.saveProperties(Properties)",1,2,2
"org.apache.derby.impl.services.jce.JCECipherFactory.saveSecretKey(byte[],byte[])",1,1,1
"org.apache.derby.impl.services.jce.JCECipherFactory.verifyKey(boolean,StorageFactory,Properties)",4,7,8
"org.apache.derby.impl.services.jce.JCECipherFactoryBuilder.JCECipherFactoryBuilder()",1,1,1
"org.apache.derby.impl.services.jce.JCECipherFactoryBuilder.createCipherFactory(boolean,Properties,boolean)",1,1,1
"org.apache.derby.impl.services.jce.JCECipherProvider.JCECipherProvider(int,SecretKey,byte[],String,String)",4,17,22
"org.apache.derby.impl.services.jce.JCECipherProvider.decrypt(byte[],int,int,byte[],int)",2,12,12
"org.apache.derby.impl.services.jce.JCECipherProvider.encrypt(byte[],int,int,byte[],int)",2,12,12
"org.apache.derby.impl.services.jce.JCECipherProvider.getEncryptionBlockSize()",1,1,1
"org.apache.derby.impl.services.jce.JCECipherProvider.verifyIV(byte[])",5,1,5
"org.apache.derby.impl.services.jmx.JMXManagementService.JMXManagementService()",1,1,1
"org.apache.derby.impl.services.jmx.JMXManagementService.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.services.jmx.JMXManagementService.checkJMXControl()",1,3,3
"org.apache.derby.impl.services.jmx.JMXManagementService.findServer()",1,1,2
"org.apache.derby.impl.services.jmx.JMXManagementService.getSystemIdentifier()",1,1,1
"org.apache.derby.impl.services.jmx.JMXManagementService.isManagementActive()",1,1,1
"org.apache.derby.impl.services.jmx.JMXManagementService.jmxRegister(StandardMBean,ObjectName)",2,2,4
"org.apache.derby.impl.services.jmx.JMXManagementService.jmxUnregister(ObjectName)",2,1,4
"org.apache.derby.impl.services.jmx.JMXManagementService.registerMBean(Object,Class,String)",1,3,3
"org.apache.derby.impl.services.jmx.JMXManagementService.startManagement()",6,3,8
"org.apache.derby.impl.services.jmx.JMXManagementService.stop()",1,3,4
"org.apache.derby.impl.services.jmx.JMXManagementService.stopManagement()",5,3,5
"org.apache.derby.impl.services.jmx.JMXManagementService.unregisterMBean(Object)",2,1,2
"org.apache.derby.impl.services.jmx.JMXManagementService.unregisterMBean(ObjectName)",3,1,3
"org.apache.derby.impl.services.jmxnone.NoManagementService.NoManagementService()",1,1,1
"org.apache.derby.impl.services.jmxnone.NoManagementService.getSystemIdentifier()",1,1,1
"org.apache.derby.impl.services.jmxnone.NoManagementService.isManagementActive()",1,1,1
"org.apache.derby.impl.services.jmxnone.NoManagementService.registerMBean(Object,Class,String)",1,1,1
"org.apache.derby.impl.services.jmxnone.NoManagementService.startManagement()",1,1,1
"org.apache.derby.impl.services.jmxnone.NoManagementService.stopManagement()",1,1,1
"org.apache.derby.impl.services.jmxnone.NoManagementService.unregisterMBean(Object)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.AbstractPool()",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.anyoneBlocked()",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.apply(String,Serializable,Dictionary)",1,6,7
"org.apache.derby.impl.services.locks.AbstractPool.areLocksHeld(CompatibilitySpace)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.areLocksHeld(CompatibilitySpace,Object)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.clearLimit(CompatibilitySpace,Object)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.createCompatibilitySpace(Object)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.getAndApply(boolean,Dictionary,String)",1,2,3
"org.apache.derby.impl.services.locks.AbstractPool.getWaitValue(String,int)",1,1,2
"org.apache.derby.impl.services.locks.AbstractPool.init(boolean,Dictionary)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.isLockHeld(CompatibilitySpace,Object,Lockable,Object)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.lockObject(CompatibilitySpace,Object,Lockable,Object,int)",2,8,8
"org.apache.derby.impl.services.locks.AbstractPool.makeVirtualLockTable()",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.map(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.setLimit(CompatibilitySpace,Object,int,Limit)",1,1,1
"org.apache.derby.impl.services.locks.AbstractPool.transfer(CompatibilitySpace,Object,Object)",1,3,3
"org.apache.derby.impl.services.locks.AbstractPool.unlock(CompatibilitySpace,Object,Lockable,Object)",1,4,5
"org.apache.derby.impl.services.locks.AbstractPool.unlockGroup(CompatibilitySpace,Object)",1,3,3
"org.apache.derby.impl.services.locks.AbstractPool.unlockGroup(CompatibilitySpace,Object,Matchable)",1,3,3
"org.apache.derby.impl.services.locks.AbstractPool.validate(String,Serializable,Dictionary)",2,6,7
"org.apache.derby.impl.services.locks.AbstractPool.zeroDurationlockObject(CompatibilitySpace,Lockable,Object,int)",1,1,1
"org.apache.derby.impl.services.locks.ActiveLock.ActiveLock(CompatibilitySpace,Lockable,Object)",1,1,1
"org.apache.derby.impl.services.locks.ActiveLock.clearPotentiallyGranted()",1,1,1
"org.apache.derby.impl.services.locks.ActiveLock.setPotentiallyGranted()",2,1,2
"org.apache.derby.impl.services.locks.ActiveLock.waitForGrant(int)",2,5,5
"org.apache.derby.impl.services.locks.ActiveLock.wakeUp(byte)",1,1,2
"org.apache.derby.impl.services.locks.ConcurrentLockSet.ConcurrentLockSet(AbstractPool)",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.Entry.enterDeadlockDetection()",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.Entry.exitDeadlockDetection()",1,2,2
"org.apache.derby.impl.services.locks.ConcurrentLockSet.Entry.lock()",1,3,3
"org.apache.derby.impl.services.locks.ConcurrentLockSet.Entry.lockForDeadlockDetection()",1,2,2
"org.apache.derby.impl.services.locks.ConcurrentLockSet.Entry.unlock()",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.addWaiters(Map)",1,3,3
"org.apache.derby.impl.services.locks.ConcurrentLockSet.anyoneBlocked()",1,2,2
"org.apache.derby.impl.services.locks.ConcurrentLockSet.checkDeadlock(Entry,ActiveLock,byte)",1,2,2
"org.apache.derby.impl.services.locks.ConcurrentLockSet.getEntry(Lockable)",5,3,5
"org.apache.derby.impl.services.locks.ConcurrentLockSet.lockObject(CompatibilitySpace,Lockable,Object,int)",9,25,40
"org.apache.derby.impl.services.locks.ConcurrentLockSet.oneLessWaiter()",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.oneMoreWaiter()",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.setDeadlockTimeout(int)",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.setDeadlockTrace(boolean)",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.setWaitTimeout(int)",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.shallowClone()",1,3,3
"org.apache.derby.impl.services.locks.ConcurrentLockSet.toDebugString()",2,3,3
"org.apache.derby.impl.services.locks.ConcurrentLockSet.unlock(Entry,Latch,int)",2,13,15
"org.apache.derby.impl.services.locks.ConcurrentLockSet.unlock(Latch,int)",1,1,1
"org.apache.derby.impl.services.locks.ConcurrentLockSet.unlockReference(CompatibilitySpace,Lockable,Object,Map)",4,2,5
"org.apache.derby.impl.services.locks.ConcurrentLockSet.zeroDurationLockObject(CompatibilitySpace,Lockable,Object,int)",5,6,10
"org.apache.derby.impl.services.locks.ConcurrentPool.createLockTable()",1,1,1
"org.apache.derby.impl.services.locks.D_ActiveLock.diag()",1,1,1
"org.apache.derby.impl.services.locks.D_Lock.D_Lock()",1,1,1
"org.apache.derby.impl.services.locks.D_Lock.diag()",1,1,1
"org.apache.derby.impl.services.locks.D_Lock.diag_detail(Properties)",1,1,1
"org.apache.derby.impl.services.locks.D_Lock.init(Object)",1,1,1
"org.apache.derby.impl.services.locks.D_LockControl.D_LockControl()",1,1,1
"org.apache.derby.impl.services.locks.D_LockControl.debugAddThreadInfo(StringBuffer)",1,3,3
"org.apache.derby.impl.services.locks.D_LockControl.debugAppendObject(StringBuffer,String,Object)",1,3,3
"org.apache.derby.impl.services.locks.D_LockControl.debugLock(String,CompatibilitySpace,Object)",1,2,2
"org.apache.derby.impl.services.locks.D_LockControl.debugLock(String,CompatibilitySpace,Object,Lockable)",1,2,2
"org.apache.derby.impl.services.locks.D_LockControl.debugLock(String,CompatibilitySpace,Object,Lockable,Object,int)",1,2,2
"org.apache.derby.impl.services.locks.D_LockControl.debugLockString(CompatibilitySpace,Object)",2,2,2
"org.apache.derby.impl.services.locks.D_LockControl.debugLockString(CompatibilitySpace,Object,Lockable)",2,2,2
"org.apache.derby.impl.services.locks.D_LockControl.debugLockString(CompatibilitySpace,Object,Lockable,Object,int)",2,3,3
"org.apache.derby.impl.services.locks.D_LockControl.diag()",1,7,7
"org.apache.derby.impl.services.locks.D_LockControl.diag_detail(Properties)",1,1,1
"org.apache.derby.impl.services.locks.D_LockControl.init(Object)",1,1,1
"org.apache.derby.impl.services.locks.Deadlock.Deadlock()",1,1,1
"org.apache.derby.impl.services.locks.Deadlock.addInfo(StringBuffer,String,Object)",1,1,2
"org.apache.derby.impl.services.locks.Deadlock.buildException(AbstractPool,Object[])",7,14,17
"org.apache.derby.impl.services.locks.Deadlock.getWaiters(LockTable)",1,1,1
"org.apache.derby.impl.services.locks.Deadlock.handle(AbstractPool,Stack,int,Dictionary,byte)",5,3,7
"org.apache.derby.impl.services.locks.Deadlock.look(AbstractPool,LockTable,LockControl,ActiveLock,byte)",13,14,15
"org.apache.derby.impl.services.locks.Deadlock.rollback(Stack)",3,2,3
"org.apache.derby.impl.services.locks.Lock.Lock(CompatibilitySpace,Lockable,Object)",1,1,1
"org.apache.derby.impl.services.locks.Lock.addWaiters(Map)",1,1,1
"org.apache.derby.impl.services.locks.Lock.copy()",1,1,1
"org.apache.derby.impl.services.locks.Lock.equals(Object)",2,4,4
"org.apache.derby.impl.services.locks.Lock.firstWaiter()",1,1,1
"org.apache.derby.impl.services.locks.Lock.getCompatabilitySpace()",1,1,1
"org.apache.derby.impl.services.locks.Lock.getCount()",1,1,1
"org.apache.derby.impl.services.locks.Lock.getFirstGrant()",1,1,1
"org.apache.derby.impl.services.locks.Lock.getGranted()",1,1,1
"org.apache.derby.impl.services.locks.Lock.getLock(CompatibilitySpace,Object)",2,1,3
"org.apache.derby.impl.services.locks.Lock.getLockControl()",1,1,1
"org.apache.derby.impl.services.locks.Lock.getLockable()",1,1,1
"org.apache.derby.impl.services.locks.Lock.getQualifier()",1,1,1
"org.apache.derby.impl.services.locks.Lock.getWaiting()",1,1,1
"org.apache.derby.impl.services.locks.Lock.grant()",1,1,1
"org.apache.derby.impl.services.locks.Lock.hashCode()",1,1,1
"org.apache.derby.impl.services.locks.Lock.isEmpty()",1,1,1
"org.apache.derby.impl.services.locks.Lock.isGrantable(boolean,CompatibilitySpace,Object)",2,2,3
"org.apache.derby.impl.services.locks.Lock.shallowClone()",1,1,1
"org.apache.derby.impl.services.locks.Lock.unlock(Latch,int)",1,5,5
"org.apache.derby.impl.services.locks.Lock.unlock(int)",1,2,3
"org.apache.derby.impl.services.locks.LockControl.LockControl(Lock,Lockable)",1,1,1
"org.apache.derby.impl.services.locks.LockControl.LockControl(LockControl)",1,1,3
"org.apache.derby.impl.services.locks.LockControl.addLock(LockTable,CompatibilitySpace,Object)",9,13,24
"org.apache.derby.impl.services.locks.LockControl.addWaiter(Lock,LockTable)",1,1,1
"org.apache.derby.impl.services.locks.LockControl.addWaiters(Map)",2,3,4
"org.apache.derby.impl.services.locks.LockControl.firstWaiter()",2,2,3
"org.apache.derby.impl.services.locks.LockControl.getFirstGrant()",1,1,1
"org.apache.derby.impl.services.locks.LockControl.getGranted()",1,1,1
"org.apache.derby.impl.services.locks.LockControl.getGrants()",1,2,2
"org.apache.derby.impl.services.locks.LockControl.getLock(CompatibilitySpace,Object)",5,4,7
"org.apache.derby.impl.services.locks.LockControl.getLockControl()",1,1,1
"org.apache.derby.impl.services.locks.LockControl.getLockable()",1,1,1
"org.apache.derby.impl.services.locks.LockControl.getNextWaiter(ActiveLock,boolean,LockTable)",6,11,17
"org.apache.derby.impl.services.locks.LockControl.getWaiting()",1,1,1
"org.apache.derby.impl.services.locks.LockControl.giveUpWait(Object,LockTable)",1,3,4
"org.apache.derby.impl.services.locks.LockControl.grant(Lock)",1,3,3
"org.apache.derby.impl.services.locks.LockControl.isEmpty()",2,2,3
"org.apache.derby.impl.services.locks.LockControl.isGrantable(boolean,CompatibilitySpace,Object)",5,5,10
"org.apache.derby.impl.services.locks.LockControl.isUnlocked()",2,2,3
"org.apache.derby.impl.services.locks.LockControl.popFrontWaiter(LockTable)",1,1,1
"org.apache.derby.impl.services.locks.LockControl.removeWaiter(Object,LockTable)",1,1,2
"org.apache.derby.impl.services.locks.LockControl.removeWaiter(int,LockTable)",1,1,1
"org.apache.derby.impl.services.locks.LockControl.shallowClone()",1,1,1
"org.apache.derby.impl.services.locks.LockControl.unlock(Latch,int)",3,12,12
"org.apache.derby.impl.services.locks.LockList.LockList(Enumeration)",1,1,1
"org.apache.derby.impl.services.locks.LockList.hasMoreElements()",1,1,1
"org.apache.derby.impl.services.locks.LockList.nextElement()",1,1,1
"org.apache.derby.impl.services.locks.LockSet.LockSet(SinglePool)",1,1,1
"org.apache.derby.impl.services.locks.LockSet.addWaiters(Map)",1,2,2
"org.apache.derby.impl.services.locks.LockSet.anyoneBlocked()",1,2,2
"org.apache.derby.impl.services.locks.LockSet.getControl(Lockable)",1,1,1
"org.apache.derby.impl.services.locks.LockSet.lockObject(CompatibilitySpace,Lockable,Object,int)",9,26,40
"org.apache.derby.impl.services.locks.LockSet.oneLessWaiter()",1,1,1
"org.apache.derby.impl.services.locks.LockSet.oneMoreWaiter()",1,1,1
"org.apache.derby.impl.services.locks.LockSet.setDeadlockTimeout(int)",1,1,1
"org.apache.derby.impl.services.locks.LockSet.setDeadlockTrace(boolean)",1,1,1
"org.apache.derby.impl.services.locks.LockSet.setWaitTimeout(int)",1,1,1
"org.apache.derby.impl.services.locks.LockSet.shallowClone()",1,2,2
"org.apache.derby.impl.services.locks.LockSet.toDebugString()",2,3,3
"org.apache.derby.impl.services.locks.LockSet.unlock(Latch,int)",2,14,16
"org.apache.derby.impl.services.locks.LockSet.unlockReference(CompatibilitySpace,Lockable,Object,Map)",3,2,4
"org.apache.derby.impl.services.locks.LockSet.zeroDurationLockObject(CompatibilitySpace,Lockable,Object,int)",4,6,9
"org.apache.derby.impl.services.locks.LockSpace.LockSpace(Object)",1,1,1
"org.apache.derby.impl.services.locks.LockSpace.addLock(Object,Lock)",3,5,9
"org.apache.derby.impl.services.locks.LockSpace.areLocksHeld()",1,1,1
"org.apache.derby.impl.services.locks.LockSpace.areLocksHeld(Object)",1,1,1
"org.apache.derby.impl.services.locks.LockSpace.clearLimit(Object)",1,1,2
"org.apache.derby.impl.services.locks.LockSpace.deadlockCount(int)",4,3,4
"org.apache.derby.impl.services.locks.LockSpace.getGroupMap(Object)",3,1,4
"org.apache.derby.impl.services.locks.LockSpace.getOwner()",1,1,1
"org.apache.derby.impl.services.locks.LockSpace.isLockHeld(Object,Lockable,Object)",2,1,2
"org.apache.derby.impl.services.locks.LockSpace.mergeGroups(HashMap,HashMap)",1,3,3
"org.apache.derby.impl.services.locks.LockSpace.saveGroup(HashMap)",3,3,3
"org.apache.derby.impl.services.locks.LockSpace.setLimit(Object,int,Limit)",1,1,1
"org.apache.derby.impl.services.locks.LockSpace.transfer(Object,Object)",3,4,5
"org.apache.derby.impl.services.locks.LockSpace.unlockGroup(LockTable,Object)",2,3,5
"org.apache.derby.impl.services.locks.LockSpace.unlockGroup(LockTable,Object,Matchable)",4,4,7
"org.apache.derby.impl.services.locks.LockSpace.unlockReference(LockTable,Lockable,Object,Object)",4,4,7
"org.apache.derby.impl.services.locks.LockTableVTI.LockTableVTI(Map)",1,1,1
"org.apache.derby.impl.services.locks.LockTableVTI.getNextLock(Control)",1,6,6
"org.apache.derby.impl.services.locks.LockTableVTI.hasMoreElements()",6,6,9
"org.apache.derby.impl.services.locks.LockTableVTI.nextElement()",2,1,2
"org.apache.derby.impl.services.locks.SinglePool.createLockTable()",1,1,1
"org.apache.derby.impl.services.locks.TableNameInfo.TableNameInfo(LanguageConnectionContext,boolean)",1,1,2
"org.apache.derby.impl.services.locks.TableNameInfo.getIndexName(Long)",2,1,2
"org.apache.derby.impl.services.locks.TableNameInfo.getTableName(Long)",5,8,13
"org.apache.derby.impl.services.locks.TableNameInfo.getTableType(Long)",3,4,8
"org.apache.derby.impl.services.locks.Timeout.Timeout(Latch,Enumeration,long)",1,2,2
"org.apache.derby.impl.services.locks.Timeout.buildException(Latch,Enumeration,long)",1,1,1
"org.apache.derby.impl.services.locks.Timeout.buildLockTableString()",1,10,11
"org.apache.derby.impl.services.locks.Timeout.buildString(Enumeration,long)",1,1,1
"org.apache.derby.impl.services.locks.Timeout.cpArray(String,int,int)",4,3,5
"org.apache.derby.impl.services.locks.Timeout.createException()",1,1,2
"org.apache.derby.impl.services.locks.Timeout.dumpLock()",2,17,22
"org.apache.derby.impl.services.locks.Timeout.timeoutInfoHash()",2,2,3
"org.apache.derby.impl.services.monitor.AntiGC.AntiGC(Object)",1,1,1
"org.apache.derby.impl.services.monitor.AntiGC.run()",3,2,4
"org.apache.derby.impl.services.monitor.BaseMonitor.BaseMonitor()",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.ProviderEnumeration.ProviderEnumeration(Properties)",1,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.ProviderEnumeration.getNextStorageFactory()",7,6,10
"org.apache.derby.impl.services.monitor.BaseMonitor.ProviderEnumeration.hasMoreElements()",2,2,3
"org.apache.derby.impl.services.monitor.BaseMonitor.ProviderEnumeration.nextElement()",2,3,3
"org.apache.derby.impl.services.monitor.BaseMonitor.addDebugFlags(String,boolean)",3,4,5
"org.apache.derby.impl.services.monitor.BaseMonitor.boot(Object,boolean,Properties)",1,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.bootPersistentServices()",1,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.bootProviderServices(PersistentService)",3,6,8
"org.apache.derby.impl.services.monitor.BaseMonitor.bootService(PersistentService,String,String,Properties,boolean)",5,25,35
"org.apache.derby.impl.services.monitor.BaseMonitor.canSupport(Object,Properties)",3,2,3
"org.apache.derby.impl.services.monitor.BaseMonitor.classFromIdentifier(int)",4,3,10
"org.apache.derby.impl.services.monitor.BaseMonitor.createPersistentService(String,String,Properties)",2,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.determineSupportedServiceProviders()",3,3,3
"org.apache.derby.impl.services.monitor.BaseMonitor.dumpProperties(String,Properties)",1,4,4
"org.apache.derby.impl.services.monitor.BaseMonitor.dumpTempWriter(boolean)",2,5,9
"org.apache.derby.impl.services.monitor.BaseMonitor.findImplementation(Vector,int,Class)",3,2,3
"org.apache.derby.impl.services.monitor.BaseMonitor.findModule(Object,String,String)",2,1,3
"org.apache.derby.impl.services.monitor.BaseMonitor.findProviderAndStartService(String,Properties,boolean)",13,6,16
"org.apache.derby.impl.services.monitor.BaseMonitor.findProviderForCreate(String)",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.findProviderFromName(String,int)",2,2,3
"org.apache.derby.impl.services.monitor.BaseMonitor.findService(String,String)",6,4,7
"org.apache.derby.impl.services.monitor.BaseMonitor.findTopService(Object)",4,3,4
"org.apache.derby.impl.services.monitor.BaseMonitor.getApplicationProperties()",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.getBundle(String)",2,2,3
"org.apache.derby.impl.services.monitor.BaseMonitor.getDaemonThread(Runnable,String,boolean)",1,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.getDefaultImplementations()",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.getDefaultModuleProperties()",1,13,14
"org.apache.derby.impl.services.monitor.BaseMonitor.getImplementations(Properties,boolean)",12,17,28
"org.apache.derby.impl.services.monitor.BaseMonitor.getLocale(Object)",2,1,2
"org.apache.derby.impl.services.monitor.BaseMonitor.getLocaleFromString(String)",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(String)",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentService(String,String)",2,2,3
"org.apache.derby.impl.services.monitor.BaseMonitor.getPersistentServiceImplementation(Class)",2,2,3
"org.apache.derby.impl.services.monitor.BaseMonitor.getServiceList(String)",6,7,9
"org.apache.derby.impl.services.monitor.BaseMonitor.getServiceName(Object)",2,1,2
"org.apache.derby.impl.services.monitor.BaseMonitor.getServiceProvider(String)",4,2,4
"org.apache.derby.impl.services.monitor.BaseMonitor.getServiceType(Object)",2,1,2
"org.apache.derby.impl.services.monitor.BaseMonitor.getStorageFactoryClassName(String)",2,1,2
"org.apache.derby.impl.services.monitor.BaseMonitor.getSystemStreams()",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.getTempWriter()",1,1,3
"org.apache.derby.impl.services.monitor.BaseMonitor.getTimerFactory()",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.getUUIDFactory()",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.loadInstance(Class,Properties)",3,3,4
"org.apache.derby.impl.services.monitor.BaseMonitor.loadInstance(Vector,Class,Properties)",4,2,4
"org.apache.derby.impl.services.monitor.BaseMonitor.newInstance(Class)",1,4,4
"org.apache.derby.impl.services.monitor.BaseMonitor.newInstance(String)",1,5,5
"org.apache.derby.impl.services.monitor.BaseMonitor.newInstanceFromIdentifier(int)",1,1,5
"org.apache.derby.impl.services.monitor.BaseMonitor.readApplicationProperties()",2,3,6
"org.apache.derby.impl.services.monitor.BaseMonitor.removePersistentService(String)",2,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.removeRuntimeProperties(Properties)",3,2,3
"org.apache.derby.impl.services.monitor.BaseMonitor.report(String)",1,3,3
"org.apache.derby.impl.services.monitor.BaseMonitor.reportException(Throwable)",1,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.runWithState(Properties,PrintStream)",3,10,27
"org.apache.derby.impl.services.monitor.BaseMonitor.setLocale(Object,String)",3,1,3
"org.apache.derby.impl.services.monitor.BaseMonitor.setLocale(Properties)",1,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.setLocale(Properties,String)",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.setThreadPriority(int)",1,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.shutdown()",4,3,6
"org.apache.derby.impl.services.monitor.BaseMonitor.shutdown(Object)",3,3,5
"org.apache.derby.impl.services.monitor.BaseMonitor.startModule(boolean,Object,String,String,Properties)",2,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.startNonPersistentService(String,String,Properties)",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.startPersistentService(String,Properties)",1,1,1
"org.apache.derby.impl.services.monitor.BaseMonitor.startProviderService(PersistentService,String,Properties)",2,2,2
"org.apache.derby.impl.services.monitor.BaseMonitor.startServices(Properties,boolean)",2,7,8
"org.apache.derby.impl.services.monitor.BaseMonitor.staticGetLocaleFromString(String)",3,6,11
"org.apache.derby.impl.services.monitor.FileMonitor.FileMonitor()",1,1,1
"org.apache.derby.impl.services.monitor.FileMonitor.FileMonitor(Properties,PrintStream)",1,1,1
"org.apache.derby.impl.services.monitor.FileMonitor.PBapplicationPropertiesStream()",2,1,2
"org.apache.derby.impl.services.monitor.FileMonitor.PBgetJVMProperty(String)",1,1,2
"org.apache.derby.impl.services.monitor.FileMonitor.PBinitialize(boolean)",5,7,10
"org.apache.derby.impl.services.monitor.FileMonitor.applicationPropertiesStream()",1,2,2
"org.apache.derby.impl.services.monitor.FileMonitor.getDaemonThread(Runnable,String,boolean)",1,2,3
"org.apache.derby.impl.services.monitor.FileMonitor.getDefaultModuleProperties()",1,2,2
"org.apache.derby.impl.services.monitor.FileMonitor.getEngineVersion()",1,1,1
"org.apache.derby.impl.services.monitor.FileMonitor.getEnvironment()",1,1,1
"org.apache.derby.impl.services.monitor.FileMonitor.getJVMProperty(String)",2,3,3
"org.apache.derby.impl.services.monitor.FileMonitor.initialize(boolean)",1,2,3
"org.apache.derby.impl.services.monitor.FileMonitor.run()",7,7,8
"org.apache.derby.impl.services.monitor.FileMonitor.setThreadPriority(int)",1,2,2
"org.apache.derby.impl.services.monitor.ModuleInstance.ModuleInstance(Object)",1,1,1
"org.apache.derby.impl.services.monitor.ModuleInstance.ModuleInstance(Object,String,Object,Object)",1,1,1
"org.apache.derby.impl.services.monitor.ModuleInstance.getIdentifier()",1,1,1
"org.apache.derby.impl.services.monitor.ModuleInstance.getInstance()",1,1,1
"org.apache.derby.impl.services.monitor.ModuleInstance.getTopLevelService()",1,1,1
"org.apache.derby.impl.services.monitor.ModuleInstance.isTypeAndName(PersistentService,Class,String)",7,3,8
"org.apache.derby.impl.services.monitor.ProtocolKey.ProtocolKey(Class,String)",1,1,1
"org.apache.derby.impl.services.monitor.ProtocolKey.create(String,String)",1,1,3
"org.apache.derby.impl.services.monitor.ProtocolKey.equals(Object)",7,3,7
"org.apache.derby.impl.services.monitor.ProtocolKey.getFactoryInterface()",1,1,1
"org.apache.derby.impl.services.monitor.ProtocolKey.getIdentifier()",1,1,1
"org.apache.derby.impl.services.monitor.ProtocolKey.hashCode()",1,2,2
"org.apache.derby.impl.services.monitor.ProtocolKey.toString()",1,1,1
"org.apache.derby.impl.services.monitor.ServiceBootContext.ServiceBootContext(ContextManager)",1,1,1
"org.apache.derby.impl.services.monitor.ServiceBootContext.cleanupOnError(Throwable)",1,1,1
"org.apache.derby.impl.services.monitor.ServiceBootContext.isLastHandler(int)",1,1,3
"org.apache.derby.impl.services.monitor.StorageFactoryService.DirectoryList.DirectoryList()",1,1,1
"org.apache.derby.impl.services.monitor.StorageFactoryService.DirectoryList.hasMoreElements()",3,1,3
"org.apache.derby.impl.services.monitor.StorageFactoryService.DirectoryList.nextElement()",2,1,2
"org.apache.derby.impl.services.monitor.StorageFactoryService.DirectoryList.run()",5,3,7
"org.apache.derby.impl.services.monitor.StorageFactoryService.StorageFactoryService(String,Class)",2,5,6
"org.apache.derby.impl.services.monitor.StorageFactoryService.createServiceRoot(String,boolean)",7,9,11
"org.apache.derby.impl.services.monitor.StorageFactoryService.getBootTimeServices()",2,1,2
"org.apache.derby.impl.services.monitor.StorageFactoryService.getCanonicalServiceName(String)",3,3,5
"org.apache.derby.impl.services.monitor.StorageFactoryService.getDirectoryPath(String)",1,3,3
"org.apache.derby.impl.services.monitor.StorageFactoryService.getServiceProperties(String,Properties)",2,6,7
"org.apache.derby.impl.services.monitor.StorageFactoryService.getStorageFactoryClass()",1,1,1
"org.apache.derby.impl.services.monitor.StorageFactoryService.getStorageFactoryInstance(boolean,String,String,String)",1,2,2
"org.apache.derby.impl.services.monitor.StorageFactoryService.getType()",1,1,1
"org.apache.derby.impl.services.monitor.StorageFactoryService.getUserServiceName(String)",1,5,5
"org.apache.derby.impl.services.monitor.StorageFactoryService.hasStorageFactory()",1,1,1
"org.apache.derby.impl.services.monitor.StorageFactoryService.isSameService(String,String)",2,2,3
"org.apache.derby.impl.services.monitor.StorageFactoryService.privGetStorageFactoryInstance(boolean,String,String,String)",1,4,5
"org.apache.derby.impl.services.monitor.StorageFactoryService.recreateServiceRoot(String,Properties)",10,13,16
"org.apache.derby.impl.services.monitor.StorageFactoryService.removeServiceRoot(String)",2,2,5
"org.apache.derby.impl.services.monitor.StorageFactoryService.saveServiceProperties(String,Properties,boolean)",3,9,12
"org.apache.derby.impl.services.monitor.StorageFactoryService.saveServiceProperties(String,StorageFactory,Properties,boolean)",4,11,14
"org.apache.derby.impl.services.monitor.TopService.TopService(BaseMonitor)",1,1,1
"org.apache.derby.impl.services.monitor.TopService.TopService(BaseMonitor,ProtocolKey,PersistentService,Locale)",1,1,1
"org.apache.derby.impl.services.monitor.TopService.addToProtocol(ProtocolKey,ModuleInstance)",3,2,3
"org.apache.derby.impl.services.monitor.TopService.bootModule(boolean,Object,ProtocolKey,Properties)",9,10,14
"org.apache.derby.impl.services.monitor.TopService.findModule(ProtocolKey,boolean,Properties)",3,2,4
"org.apache.derby.impl.services.monitor.TopService.getKey()",1,1,1
"org.apache.derby.impl.services.monitor.TopService.getService()",1,1,1
"org.apache.derby.impl.services.monitor.TopService.getServiceType()",1,1,1
"org.apache.derby.impl.services.monitor.TopService.inService(Object)",3,2,3
"org.apache.derby.impl.services.monitor.TopService.isActiveService()",1,1,1
"org.apache.derby.impl.services.monitor.TopService.isActiveService(ProtocolKey)",6,4,9
"org.apache.derby.impl.services.monitor.TopService.isPotentialService(ProtocolKey)",5,3,6
"org.apache.derby.impl.services.monitor.TopService.setTopModule(Object)",3,4,4
"org.apache.derby.impl.services.monitor.TopService.shutdown()",4,2,4
"org.apache.derby.impl.services.monitor.TopService.stop(Object)",1,2,2
"org.apache.derby.impl.services.monitor.UpdateServiceProperties.UpdateServiceProperties(PersistentService,String,Properties,boolean)",1,1,1
"org.apache.derby.impl.services.monitor.UpdateServiceProperties.getStorageFactory()",1,1,1
"org.apache.derby.impl.services.monitor.UpdateServiceProperties.put(Object,Object)",1,2,2
"org.apache.derby.impl.services.monitor.UpdateServiceProperties.remove(Object)",1,3,3
"org.apache.derby.impl.services.monitor.UpdateServiceProperties.saveServiceProperties()",1,2,3
"org.apache.derby.impl.services.monitor.UpdateServiceProperties.setServiceBooted()",1,1,1
"org.apache.derby.impl.services.monitor.UpdateServiceProperties.setStorageFactory(WritableStorageFactory)",1,1,1
"org.apache.derby.impl.services.monitor.UpdateServiceProperties.update()",1,2,3
"org.apache.derby.impl.services.reflect.ClassLoaderLock.ClassLoaderLock(UpdateLoader)",1,1,1
"org.apache.derby.impl.services.reflect.ClassLoaderLock.unlockEvent(Latch)",1,2,2
"org.apache.derby.impl.services.reflect.DatabaseClasses.DatabaseClasses()",1,1,1
"org.apache.derby.impl.services.reflect.DatabaseClasses.WriteClassFile(String,ByteArray,Throwable)",1,4,5
"org.apache.derby.impl.services.reflect.DatabaseClasses.boot(boolean,Properties)",1,2,3
"org.apache.derby.impl.services.reflect.DatabaseClasses.buildSpecificFactory(String,String)",1,1,1
"org.apache.derby.impl.services.reflect.DatabaseClasses.getClassInspector()",1,1,1
"org.apache.derby.impl.services.reflect.DatabaseClasses.getClassLoaderVersion()",2,2,2
"org.apache.derby.impl.services.reflect.DatabaseClasses.isApplicationClass(Class)",1,1,1
"org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(ObjectStreamClass)",1,1,1
"org.apache.derby.impl.services.reflect.DatabaseClasses.loadApplicationClass(String)",4,3,8
"org.apache.derby.impl.services.reflect.DatabaseClasses.loadGeneratedClass(String,ByteArray)",1,3,3
"org.apache.derby.impl.services.reflect.DatabaseClasses.notifyModifyClasspath(String)",1,2,2
"org.apache.derby.impl.services.reflect.DatabaseClasses.notifyModifyJar(boolean)",1,2,2
"org.apache.derby.impl.services.reflect.DatabaseClasses.stop()",1,2,2
"org.apache.derby.impl.services.reflect.DirectCall.DirectCall(int)",1,1,1
"org.apache.derby.impl.services.reflect.DirectCall.invoke(Object)",11,12,13
"org.apache.derby.impl.services.reflect.JarLoader.JarLoader(UpdateLoader,String[],HeaderPrintWriter)",1,1,1
"org.apache.derby.impl.services.reflect.JarLoader.checkLoaded(String,boolean)",2,2,4
"org.apache.derby.impl.services.reflect.JarLoader.getJarName()",1,1,1
"org.apache.derby.impl.services.reflect.JarLoader.getRawStream(InputStream,String)",3,4,7
"org.apache.derby.impl.services.reflect.JarLoader.getRawStream(String)",2,1,3
"org.apache.derby.impl.services.reflect.JarLoader.getResourceAsStream(String)",2,1,2
"org.apache.derby.impl.services.reflect.JarLoader.getSigners(String,JarEntry)",4,4,6
"org.apache.derby.impl.services.reflect.JarLoader.getStream(String)",4,3,5
"org.apache.derby.impl.services.reflect.JarLoader.handleException(Exception,String)",1,1,1
"org.apache.derby.impl.services.reflect.JarLoader.initialize()",2,4,6
"org.apache.derby.impl.services.reflect.JarLoader.loadClass(String,boolean)",4,4,6
"org.apache.derby.impl.services.reflect.JarLoader.loadClassData(InputStream,String,String,boolean)",4,4,4
"org.apache.derby.impl.services.reflect.JarLoader.loadClassData(JarEntry,InputStream,String,boolean)",1,4,4
"org.apache.derby.impl.services.reflect.JarLoader.loadClassData(String,String,boolean)",4,5,7
"org.apache.derby.impl.services.reflect.JarLoader.loadClassDataFromJar(String,String,boolean)",2,1,2
"org.apache.derby.impl.services.reflect.JarLoader.readData(JarEntry,InputStream,String)",2,4,4
"org.apache.derby.impl.services.reflect.JarLoader.setInvalid()",1,2,3
"org.apache.derby.impl.services.reflect.JarLoader.toString()",1,1,1
"org.apache.derby.impl.services.reflect.LoadedGeneratedClass.LoadedGeneratedClass(ClassFactory,Class)",1,1,1
"org.apache.derby.impl.services.reflect.LoadedGeneratedClass.getClassLoaderVersion()",1,1,1
"org.apache.derby.impl.services.reflect.LoadedGeneratedClass.getJVMClass()",1,1,1
"org.apache.derby.impl.services.reflect.LoadedGeneratedClass.getName()",1,1,1
"org.apache.derby.impl.services.reflect.LoadedGeneratedClass.newInstance(Context)",1,1,5
"org.apache.derby.impl.services.reflect.ReflectClassesJava2.loadClassNotInDatabaseJar(String)",1,3,3
"org.apache.derby.impl.services.reflect.ReflectClassesJava2.loadGeneratedClassFromData(String,ByteArray)",4,5,6
"org.apache.derby.impl.services.reflect.ReflectClassesJava2.run()",4,4,4
"org.apache.derby.impl.services.reflect.ReflectGeneratedClass.ReflectGeneratedClass(ClassFactory,Class,Class)",1,1,1
"org.apache.derby.impl.services.reflect.ReflectGeneratedClass.getMethod(String)",2,4,5
"org.apache.derby.impl.services.reflect.ReflectGeneratedClass.newInstance(Context)",4,4,7
"org.apache.derby.impl.services.reflect.ReflectLoaderJava2.ReflectLoaderJava2(ClassLoader,DatabaseClasses)",1,1,1
"org.apache.derby.impl.services.reflect.ReflectLoaderJava2.findClass(String)",1,1,1
"org.apache.derby.impl.services.reflect.ReflectLoaderJava2.loadGeneratedClass(String,ByteArray)",1,1,1
"org.apache.derby.impl.services.reflect.ReflectMethod.ReflectMethod(Method)",1,1,1
"org.apache.derby.impl.services.reflect.ReflectMethod.invoke(Object)",2,2,5
"org.apache.derby.impl.services.reflect.UpdateLoader.UpdateLoader(String,DatabaseClasses,boolean,boolean)",1,2,2
"org.apache.derby.impl.services.reflect.UpdateLoader.checkLoaded(String,boolean)",3,2,3
"org.apache.derby.impl.services.reflect.UpdateLoader.close()",1,2,2
"org.apache.derby.impl.services.reflect.UpdateLoader.getClassLoaderVersion()",1,1,1
"org.apache.derby.impl.services.reflect.UpdateLoader.getClasspath()",1,1,2
"org.apache.derby.impl.services.reflect.UpdateLoader.getJarReader()",1,2,2
"org.apache.derby.impl.services.reflect.UpdateLoader.getResourceAsStream(String)",5,6,10
"org.apache.derby.impl.services.reflect.UpdateLoader.initLoaders()",2,2,3
"org.apache.derby.impl.services.reflect.UpdateLoader.initializeFromClassPath(String)",1,3,4
"org.apache.derby.impl.services.reflect.UpdateLoader.loadClass(String,boolean)",6,10,12
"org.apache.derby.impl.services.reflect.UpdateLoader.lockClassLoader(ShExQual)",2,2,4
"org.apache.derby.impl.services.reflect.UpdateLoader.modifyClasspath(String)",1,1,1
"org.apache.derby.impl.services.reflect.UpdateLoader.modifyJar(boolean)",2,2,3
"org.apache.derby.impl.services.reflect.UpdateLoader.needReload()",1,1,1
"org.apache.derby.impl.services.reflect.UpdateLoader.reload()",1,1,1
"org.apache.derby.impl.services.stream.BasicGetLogHeader.BasicGetLogHeader(boolean,boolean,String)",1,1,1
"org.apache.derby.impl.services.stream.BasicGetLogHeader.getHeader()",1,4,4
"org.apache.derby.impl.services.stream.BasicHeaderPrintWriter.BasicHeaderPrintWriter(OutputStream,PrintWriterGetHeader,boolean,String)",1,1,1
"org.apache.derby.impl.services.stream.BasicHeaderPrintWriter.BasicHeaderPrintWriter(Writer,PrintWriterGetHeader,boolean,String)",1,1,1
"org.apache.derby.impl.services.stream.BasicHeaderPrintWriter.complete()",1,2,2
"org.apache.derby.impl.services.stream.BasicHeaderPrintWriter.getHeader()",1,1,1
"org.apache.derby.impl.services.stream.BasicHeaderPrintWriter.getName()",1,1,1
"org.apache.derby.impl.services.stream.BasicHeaderPrintWriter.getPrintWriter()",1,1,1
"org.apache.derby.impl.services.stream.BasicHeaderPrintWriter.printlnWithHeader(String)",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.PBmakeFileHPW(String,PrintWriterGetHeader)",1,6,7
"org.apache.derby.impl.services.stream.SingleStream.SingleStream()",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.createDefaultStream(PrintWriterGetHeader)",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.makeFieldHPW(String,PrintWriterGetHeader)",2,2,7
"org.apache.derby.impl.services.stream.SingleStream.makeFileHPW(String,PrintWriterGetHeader)",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.makeHPW(PrintWriterGetHeader)",4,4,4
"org.apache.derby.impl.services.stream.SingleStream.makeHeader()",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.makeMethodHPW(String,PrintWriterGetHeader)",2,3,8
"org.apache.derby.impl.services.stream.SingleStream.makeStream()",1,2,2
"org.apache.derby.impl.services.stream.SingleStream.makeValueHPW(Member,Object,PrintWriterGetHeader,String)",3,2,4
"org.apache.derby.impl.services.stream.SingleStream.run()",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.stop()",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.stream()",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.useDefaultStream(PrintWriterGetHeader)",1,1,1
"org.apache.derby.impl.services.stream.SingleStream.useDefaultStream(PrintWriterGetHeader,Throwable)",1,1,1
"org.apache.derby.impl.services.timer.SingletonTimerFactory.SingletonTimerFactory()",1,1,1
"org.apache.derby.impl.services.timer.SingletonTimerFactory.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.services.timer.SingletonTimerFactory.getCancellationTimer()",1,1,1
"org.apache.derby.impl.services.timer.SingletonTimerFactory.stop()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.BasicUUID()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.BasicUUID(String)",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.BasicUUID(byte[])",1,1,4
"org.apache.derby.impl.services.uuid.BasicUUID.BasicUUID(long,long,int)",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.cloneMe()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.equals(Object)",2,1,4
"org.apache.derby.impl.services.uuid.BasicUUID.getTypeFormatId()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.hashCode()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.readMSB(StringReader)",3,1,6
"org.apache.derby.impl.services.uuid.BasicUUID.stringWorkhorse(char)",1,1,5
"org.apache.derby.impl.services.uuid.BasicUUID.toANSIidentifier()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.toByteArray()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.toHexString()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.toString()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUID.writeMSB(char[],int,long,int)",1,1,4
"org.apache.derby.impl.services.uuid.BasicUUIDFactory.BasicUUIDFactory()",1,2,3
"org.apache.derby.impl.services.uuid.BasicUUIDFactory.bumpMajor()",1,2,2
"org.apache.derby.impl.services.uuid.BasicUUIDFactory.createUUID()",1,2,2
"org.apache.derby.impl.services.uuid.BasicUUIDFactory.recreateUUID(String)",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUIDFactory.recreateUUID(byte[])",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUIDFactory.resetCounters()",1,1,1
"org.apache.derby.impl.services.uuid.BasicUUIDGetter.getNewInstance()",1,1,1
"org.apache.derby.impl.sql.CursorInfo.CursorInfo()",1,1,1
"org.apache.derby.impl.sql.CursorInfo.CursorInfo(int,ExecCursorTableReference,ResultColumnDescriptor[],String[])",1,1,1
"org.apache.derby.impl.sql.CursorInfo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.CursorInfo.readExternal(ObjectInput)",1,3,3
"org.apache.derby.impl.sql.CursorInfo.toString()",2,7,7
"org.apache.derby.impl.sql.CursorInfo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.CursorTableReference.CursorTableReference()",1,1,1
"org.apache.derby.impl.sql.CursorTableReference.CursorTableReference(String,String,String)",1,1,1
"org.apache.derby.impl.sql.CursorTableReference.getBaseName()",1,1,1
"org.apache.derby.impl.sql.CursorTableReference.getExposedName()",1,1,1
"org.apache.derby.impl.sql.CursorTableReference.getSchemaName()",1,1,1
"org.apache.derby.impl.sql.CursorTableReference.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.CursorTableReference.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.CursorTableReference.toString()",2,1,2
"org.apache.derby.impl.sql.CursorTableReference.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.GenericActivationHolder(LanguageConnectionContext,GeneratedClass,ExecPreparedStatement,boolean)",1,2,2
"org.apache.derby.impl.sql.GenericActivationHolder.addWarning(SQLWarning)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.checkIfThisActivationHasHoldCursor(String)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.checkStatementValidity()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.clearCurrentRow(int)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.clearHeapConglomerateController()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.clearIndexScanInfo()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.clearParentResultSets()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.clearWarnings()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.close()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.execute()",3,6,7
"org.apache.derby.impl.sql.GenericActivationHolder.getAutoGeneratedKeysColumnIndexes()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getAutoGeneratedKeysColumnNames()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getAutoGeneratedKeysResultsetMode()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getCallActivation()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getConstantAction()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getCursorName()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getDDLTableDescriptor()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getDataValueFactory()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getDynamicResults()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getExecutionFactory()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getForCreateTable()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getForUpdateIndexScan()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getHeapConglomerateController()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getIndexConglomerateNumber()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getIndexScanController()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getLanguageConnectionContext()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getMaxDynamicResults()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getMaxRows()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getNestedSQLSessionContext()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getNumSubqueries()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getParameterValueSet()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getParentResultSet(String)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getParentResultSets()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getPreparedStatement()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getResultDescription()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getResultSet()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getResultSetHoldability()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getRowLocationTemplate(int)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getTargetVTI()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getTransactionController()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.getWarnings()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.informOfRowCount(NoPutResultSet,long)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.isClosed()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.isCursorActivation()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.isInUse()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.isSingleExecution()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.markUnused()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.reset()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setAutoGeneratedKeysResultsetInfo(int[],String[])",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setCallActivation(Activation)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setCurrentRow(ExecRow,int)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setCursorName(String)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setDDLTableDescriptor(TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setForCreateTable()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setForUpdateIndexScan(CursorResultSet)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setHeapConglomerateController(ConglomerateController)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setIndexConglomerateNumber(long)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setIndexScanController(ScanController)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setMaxRows(int)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setParameters(ParameterValueSet,DataTypeDescriptor[])",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setParentResultSet(TemporaryRowHolder,String)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setResultSetHoldability(boolean)",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setSingleExecution()",1,1,1
"org.apache.derby.impl.sql.GenericActivationHolder.setTargetVTI(ResultSet)",1,1,1
"org.apache.derby.impl.sql.GenericClassInfo.getNewInstance()",2,2,2
"org.apache.derby.impl.sql.GenericColumnDescriptor.GenericColumnDescriptor()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.GenericColumnDescriptor(ResultColumnDescriptor)",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.GenericColumnDescriptor(String,DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.getColumnPosition()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.getName()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.getSourceSchemaName()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.getSourceTableName()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.getType()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.isAutoincrement()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.toString()",2,1,2
"org.apache.derby.impl.sql.GenericColumnDescriptor.updatableByCursor()",1,1,1
"org.apache.derby.impl.sql.GenericColumnDescriptor.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.GenericLanguageFactory.GenericLanguageFactory()",1,1,1
"org.apache.derby.impl.sql.GenericLanguageFactory.boot(boolean,Properties)",1,2,2
"org.apache.derby.impl.sql.GenericLanguageFactory.getResultDescription(ResultColumnDescriptor[],String)",1,1,1
"org.apache.derby.impl.sql.GenericLanguageFactory.newParameterValueSet(ClassInspector,int,boolean)",2,1,2
"org.apache.derby.impl.sql.GenericLanguageFactory.stop()",1,1,1
"org.apache.derby.impl.sql.GenericParameter.GenericParameter(GenericParameterValueSet,boolean)",1,1,2
"org.apache.derby.impl.sql.GenericParameter.clear()",1,1,1
"org.apache.derby.impl.sql.GenericParameter.getClone(GenericParameterValueSet)",1,1,1
"org.apache.derby.impl.sql.GenericParameter.getJDBCParameterNumberStr()",1,1,1
"org.apache.derby.impl.sql.GenericParameter.getPrecision()",1,1,1
"org.apache.derby.impl.sql.GenericParameter.getScale()",1,1,2
"org.apache.derby.impl.sql.GenericParameter.getValue()",1,1,1
"org.apache.derby.impl.sql.GenericParameter.initialize(DataValueDescriptor,int,String)",1,1,1
"org.apache.derby.impl.sql.GenericParameter.setOutParameter(int,int)",6,4,6
"org.apache.derby.impl.sql.GenericParameter.throwInvalidOutParamMap(int)",1,2,2
"org.apache.derby.impl.sql.GenericParameter.toString()",2,2,3
"org.apache.derby.impl.sql.GenericParameter.validate()",3,3,5
"org.apache.derby.impl.sql.GenericParameterValueSet.GenericParameterValueSet(ClassInspector,int,boolean)",1,1,3
"org.apache.derby.impl.sql.GenericParameterValueSet.GenericParameterValueSet(int,GenericParameterValueSet)",1,2,2
"org.apache.derby.impl.sql.GenericParameterValueSet.allAreSet()",4,2,5
"org.apache.derby.impl.sql.GenericParameterValueSet.checkNoDeclaredOutputParameters()",2,2,5
"org.apache.derby.impl.sql.GenericParameterValueSet.checkPosition(int)",3,3,4
"org.apache.derby.impl.sql.GenericParameterValueSet.clearParameters()",1,2,2
"org.apache.derby.impl.sql.GenericParameterValueSet.getClone()",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.getGenericParameter(int)",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.getParameter(int)",1,2,2
"org.apache.derby.impl.sql.GenericParameterValueSet.getParameterCount()",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.getParameterForGet(int)",2,3,3
"org.apache.derby.impl.sql.GenericParameterValueSet.getParameterForSet(int)",2,3,3
"org.apache.derby.impl.sql.GenericParameterValueSet.getParameterMode(int)",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.getParameterNumber(GenericParameter)",3,1,3
"org.apache.derby.impl.sql.GenericParameterValueSet.getPrecision(int)",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.getReturnValueForSet()",1,3,3
"org.apache.derby.impl.sql.GenericParameterValueSet.getScale(int)",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.hasReturnOutputParameter()",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.initialize(DataTypeDescriptor[])",1,2,2
"org.apache.derby.impl.sql.GenericParameterValueSet.registerOutParameter(int,int,int)",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.setParameterAsObject(int,Object)",3,3,4
"org.apache.derby.impl.sql.GenericParameterValueSet.setParameterMode(int,int)",1,1,1
"org.apache.derby.impl.sql.GenericParameterValueSet.toString()",1,2,2
"org.apache.derby.impl.sql.GenericParameterValueSet.transferDataValues(ParameterValueSet)",1,4,5
"org.apache.derby.impl.sql.GenericParameterValueSet.validate()",1,2,2
"org.apache.derby.impl.sql.GenericPreparedStatement.GenericPreparedStatement()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.GenericPreparedStatement(Statement)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.completeCompile(StatementNode)",1,2,4
"org.apache.derby.impl.sql.GenericPreparedStatement.execute(Activation,boolean,long)",4,15,16
"org.apache.derby.impl.sql.GenericPreparedStatement.execute(LanguageConnectionContext,boolean,long)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.finish(LanguageConnectionContext)",3,3,5
"org.apache.derby.impl.sql.GenericPreparedStatement.getActivation(LanguageConnectionContext,boolean)",1,3,3
"org.apache.derby.impl.sql.GenericPreparedStatement.getActivationClass()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getBeginCompileTimestamp()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getBindTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getByteCodeSaver()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getClassType()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getClone()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getCompileTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getCompileTimeWarnings()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getConstantAction()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getCursorInfo()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getDependableFinder()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getEndCompileTimestamp()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getGenerateTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getObjectID()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getObjectName()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getOptimizeTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getParameterTypes()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getParseTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getRequiredPermissionsList()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getResultDescription()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getSPSName()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getSavedObject(int)",1,3,4
"org.apache.derby.impl.sql.GenericPreparedStatement.getSavedObjects()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getSource()",1,3,3
"org.apache.derby.impl.sql.GenericPreparedStatement.getTargetColumns()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getTargetTable()",1,2,2
"org.apache.derby.impl.sql.GenericPreparedStatement.getUpdateColumns()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.getUpdateMode()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.isAtomic()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.isPersistent()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.isStorable()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.isValid()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.makeInvalid(int,LanguageConnectionContext)",3,3,4
"org.apache.derby.impl.sql.GenericPreparedStatement.needsSavepoint()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.prepareToInvalidate(Provider,int,LanguageConnectionContext)",2,2,2
"org.apache.derby.impl.sql.GenericPreparedStatement.rePrepare(LanguageConnectionContext)",1,3,3
"org.apache.derby.impl.sql.GenericPreparedStatement.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.referencesSessionSchema(StatementNode)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setActivationClass(GeneratedClass)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setCacheHolder(Cacheable)",3,4,6
"org.apache.derby.impl.sql.GenericPreparedStatement.setCompileTimeMillis(long,long,long,long,long,Timestamp,Timestamp)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setCompileTimeWarnings(SQLWarning)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setConstantAction(ConstantAction)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setCursorInfo(CursorInfo)",1,1,2
"org.apache.derby.impl.sql.GenericPreparedStatement.setExecuteStatementNameAndSchema(String,String)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setIsAtomic(boolean)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setNeedsSavepoint(boolean)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setRequiredPermissionsList(List)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setSPSAction()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setSPSName(String)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setSavedObjects(Object[])",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setSource(String)",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.setValid()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.toString()",1,1,1
"org.apache.derby.impl.sql.GenericPreparedStatement.upToDate()",1,1,3
"org.apache.derby.impl.sql.GenericResultDescription.GenericResultDescription()",1,1,1
"org.apache.derby.impl.sql.GenericResultDescription.GenericResultDescription(ResultColumnDescriptor[],String)",1,1,1
"org.apache.derby.impl.sql.GenericResultDescription.findColumnInsenstive(String)",2,5,5
"org.apache.derby.impl.sql.GenericResultDescription.getColumnCount()",1,1,2
"org.apache.derby.impl.sql.GenericResultDescription.getColumnDescriptor(int)",1,1,1
"org.apache.derby.impl.sql.GenericResultDescription.getColumnInfo()",1,1,1
"org.apache.derby.impl.sql.GenericResultDescription.getMetaData()",1,1,1
"org.apache.derby.impl.sql.GenericResultDescription.getStatementType()",1,1,1
"org.apache.derby.impl.sql.GenericResultDescription.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.GenericResultDescription.readExternal(ObjectInput)",1,3,3
"org.apache.derby.impl.sql.GenericResultDescription.setMetaData(ResultSetMetaData)",1,1,2
"org.apache.derby.impl.sql.GenericResultDescription.toString()",2,3,3
"org.apache.derby.impl.sql.GenericResultDescription.writeExternal(ObjectOutput)",1,2,4
"org.apache.derby.impl.sql.GenericStatement.GenericStatement(SchemaDescriptor,String,boolean)",1,1,1
"org.apache.derby.impl.sql.GenericStatement.equals(Object)",2,5,5
"org.apache.derby.impl.sql.GenericStatement.getCompilationSchema()",1,1,1
"org.apache.derby.impl.sql.GenericStatement.getCurrentTimeMillis(LanguageConnectionContext)",2,2,2
"org.apache.derby.impl.sql.GenericStatement.getElapsedTimeMillis(long)",2,2,2
"org.apache.derby.impl.sql.GenericStatement.getSource()",1,1,1
"org.apache.derby.impl.sql.GenericStatement.hashCode()",1,1,1
"org.apache.derby.impl.sql.GenericStatement.prepMinion(LanguageConnectionContext,boolean,Object[],SchemaDescriptor,boolean)",16,40,47
"org.apache.derby.impl.sql.GenericStatement.prepare(LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.GenericStatement.prepare(LanguageConnectionContext,boolean)",1,1,1
"org.apache.derby.impl.sql.GenericStatement.prepareStorable(LanguageConnectionContext,PreparedStatement,Object[],SchemaDescriptor,boolean)",1,1,2
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.GenericStorablePreparedStatement()",1,1,1
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.GenericStorablePreparedStatement(Statement)",1,1,1
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.getActivationClass()",1,2,2
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.getByteCodeSaver()",1,1,2
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.isStorable()",1,1,1
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.loadGeneratedClass()",1,1,1
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.readExternal(ObjectInput)",1,3,3
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.setActivationClass(GeneratedClass)",1,3,4
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.toString()",2,3,3
"org.apache.derby.impl.sql.GenericStorablePreparedStatement.writeExternal(ObjectOutput)",1,3,3
"org.apache.derby.impl.sql.LanguageDbPropertySetter.apply(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.sql.LanguageDbPropertySetter.init(boolean,Dictionary)",1,1,1
"org.apache.derby.impl.sql.LanguageDbPropertySetter.map(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.sql.LanguageDbPropertySetter.validate(String,Serializable,Dictionary)",4,5,5
"org.apache.derby.impl.sql.catalog.CoreDDFinderClassInfo.getNewInstance()",4,2,4
"org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.DDColumnDependableFinder(int)",1,1,1
"org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.DDColumnDependableFinder(int,byte[])",1,1,1
"org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.findDependable(DataDictionary,UUID)",1,2,2
"org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.getColumnBitMap()",1,1,1
"org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.setColumnBitMap(byte[])",1,1,1
"org.apache.derby.impl.sql.catalog.DDColumnDependableFinder.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.catalog.DD_Version.DD_Version()",1,1,1
"org.apache.derby.impl.sql.catalog.DD_Version.DD_Version(DataDictionaryImpl,int)",1,1,1
"org.apache.derby.impl.sql.catalog.DD_Version.applySafeChanges(TransactionController,int,int)",1,3,3
"org.apache.derby.impl.sql.catalog.DD_Version.checkVersion(int,String)",3,3,3
"org.apache.derby.impl.sql.catalog.DD_Version.doFullUpgrade(TransactionController,int,String)",2,8,8
"org.apache.derby.impl.sql.catalog.DD_Version.dropJDBCMetadataSPSes(TransactionController,boolean)",4,3,6
"org.apache.derby.impl.sql.catalog.DD_Version.dropSystemCatalog(TransactionController,CatalogRowFactory)",1,2,2
"org.apache.derby.impl.sql.catalog.DD_Version.dropSystemCatalogDescription(TransactionController,TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DD_Version.fillIndex(TransactionController,long,TabInfoImpl,int)",1,2,2
"org.apache.derby.impl.sql.catalog.DD_Version.getJBMSMinorVersionNumber()",1,1,2
"org.apache.derby.impl.sql.catalog.DD_Version.getTypeFormatId()",1,1,2
"org.apache.derby.impl.sql.catalog.DD_Version.handleMinorRevisionChange(TransactionController,DD_Version,boolean)",1,2,3
"org.apache.derby.impl.sql.catalog.DD_Version.majorToString(int)",11,2,11
"org.apache.derby.impl.sql.catalog.DD_Version.makeSystemCatalog(TransactionController,TabInfoImpl)",1,1,1
"org.apache.derby.impl.sql.catalog.DD_Version.modifySysTableNullability(TransactionController,int)",1,3,3
"org.apache.derby.impl.sql.catalog.DD_Version.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.catalog.DD_Version.toString()",1,1,1
"org.apache.derby.impl.sql.catalog.DD_Version.upgradeIfNeeded(DD_Version,TransactionController,Properties)",4,6,10
"org.apache.derby.impl.sql.catalog.DD_Version.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.catalog.DDdependableFinder.DDdependableFinder(int)",1,1,1
"org.apache.derby.impl.sql.catalog.DDdependableFinder.findDependable(DataDictionary,UUID)",16,17,18
"org.apache.derby.impl.sql.catalog.DDdependableFinder.getDependable(DataDictionary,UUID)",2,2,2
"org.apache.derby.impl.sql.catalog.DDdependableFinder.getSQLObjectType()",17,3,18
"org.apache.derby.impl.sql.catalog.DDdependableFinder.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.catalog.DDdependableFinder.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.catalog.DDdependableFinder.toString()",1,1,1
"org.apache.derby.impl.sql.catalog.DDdependableFinder.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.DataDictionaryImpl()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.activeConstraint(ConstraintDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addConstraintDescriptor(ConstraintDescriptor,TransactionController)",2,8,12
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(TupleDescriptor,TupleDescriptor,int,boolean,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptor(TupleDescriptor,TupleDescriptor,int,boolean,TransactionController,boolean)",3,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addDescriptorArray(TupleDescriptor[],TupleDescriptor,int,boolean,TransactionController)",2,4,5
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addRemovePermissionsDescriptor(boolean,PermissionsDescriptor,String,TransactionController)",5,8,13
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSDescriptor(SPSDescriptor,TransactionController,boolean)",2,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSPSParams(SPSDescriptor,TransactionController,boolean)",2,2,5
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSYSCOLUMNSIndex2Property(TransactionController,long)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSubKeyConstraint(KeyConstraintDescriptor,TransactionController)",1,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSystemSchema(String,String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addSystemTableToDictionary(TabInfoImpl,SchemaDescriptor,TransactionController,DataDescriptorGenerator)",1,5,5
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.addTableDescriptorToOtherCache(TableDescriptor,Cacheable)",2,4,6
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.boot(boolean,Properties)",1,12,14
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.bootStrapSystemIndexes(SchemaDescriptor,TransactionController,DataDescriptorGenerator,TabInfoImpl)",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.bootstrapOneIndex(SchemaDescriptor,TransactionController,DataDescriptorGenerator,TabInfoImpl,int,long)",1,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.canSupport(Properties)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.checkVersion(int,String)",1,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearCaches()",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearNoncoreTable(int)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.clearSPSPlans()",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeAutoincRowLocations(TransactionController,TableDescriptor)",2,3,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.computeRowLocation(TransactionController,TableDescriptor,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createConglomerate(String,TransactionController,ExecRow,Properties)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createDictionaryTables(Properties,TransactionController,DataDescriptorGenerator)",1,6,7
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createRoutinePermPublicDescriptor(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createRoutinePermPublicDescriptor(UUID,TransactionController,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createSPSSet(TransactionController,boolean,UUID)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createSystemProcedureOrFunction(String,UUID,String[],TypeDescriptor[],int,int,short,TypeDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createSystemProcedureOrFunction(String,UUID,String[],TypeDescriptor[],int,int,short,TypeDescriptor,TransactionController,String)",1,3,9
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.createSystemSps(TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_1_system_procedures(TransactionController,UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_2_system_procedures(TransactionController,UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_3_system_procedures(TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_3_system_procedures_SYSCS_UTIL(TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_10_3_system_procedures_SYSIBM(TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSCS_procedures(TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.create_SYSIBM_procedures(TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.debugGenerateInfo(StringBuffer,TransactionController,ConglomerateController,TabInfoImpl,int)",1,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.doneReading(int,LanguageConnectionContext)",1,9,10
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAliasDescriptor(AliasDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllColumnDescriptors(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllConglomerateDescriptors(TableDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllConstraintDescriptors(TableDescriptor,TransactionController)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllPermsByGrantee(String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllRoutinePermDescriptors(UUID,TransactionController)",2,2,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropAllTableAndColPermDescriptors(UUID,TransactionController)",2,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropColumnDescriptor(UUID,String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropColumnDescriptorCore(TransactionController,ExecIndexRow)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropColumnPermDescriptor(TransactionController,ExecIndexRow)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConglomerateDescriptor(ConglomerateDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropConstraintDescriptor(ConstraintDescriptor,TransactionController)",2,2,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropDependentsStoredDependencies(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropDependentsStoredDependencies(UUID,TransactionController,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropFileInfoDescriptor(FileInfoDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropPermsByGrantee(String,TransactionController,int,int,int)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropRoleGrant(String,String,String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropRoleGrantsByGrantee(String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropRoleGrantsByName(String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(SPSDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSPSDescriptor(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSchemaDescriptor(String,TransactionController)",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropStatisticsDescriptors(UUID,UUID,TransactionController)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropStoredDependency(DependencyDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubCheckConstraint(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropSubKeyConstraint(ConstraintDescriptor,TransactionController)",1,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTableDescriptor(TableDescriptor,SchemaDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTablePermDescriptor(TransactionController,ExecIndexRow)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropTriggerDescriptor(TriggerDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.dropViewDescriptor(ViewDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.duplicateDescriptorException(TupleDescriptor,TupleDescriptor)",2,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.existsGrantToAuthid(String,TransactionController)",1,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.existsPermByGrantee(String,TransactionController,int,int,int)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.existsRoleGrantByGrantee(String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.existsSchemaOwnedBy(String,TransactionController)",1,3,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.faultInTabInfo(TabInfoImpl)",8,9,13
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.finishTableDescriptor(TableDescriptor)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getActiveConstraintDescriptors(ConstraintDescriptorList)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAliasDescriptor(String,String,char)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAliasDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllConstraintDescriptors()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllDependencyDescriptorsList()",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllSPSDescriptors()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAllTriggerDescriptors()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getAuthorizationDatabaseOwner()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getBootParameter(Properties,String,boolean)",3,3,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getBuiltinSystemSchemas()",2,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getBuiltinVTIClass(TableDescriptor,boolean)",4,5,7
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getCacheMode()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getCollationTypeOfSystemSchemas()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getCollationTypeOfUserSchemas()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorByDefaultId(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnDescriptorsScan(UUID,ColumnDescriptorList,TupleDescriptor)",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnPermissions(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnPermissions(UUID,String,boolean,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getColumnPermissions(UUID,int,boolean,String)",1,2,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptor(String,SchemaDescriptor,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptor(UUID)",2,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptor(long)",2,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptors(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptors(long)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConglomerateDescriptorsScan(TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptor(String,UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptor(TableDescriptor,UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorById(TableDescriptor,UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorByName(TableDescriptor,SchemaDescriptor,String,boolean)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaHeap(ScanQualifier[][],TabInfoImpl,TupleDescriptor,List)",4,6,8
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorViaIndex(int,ExecIndexRow,TabInfoImpl,TableDescriptor,ConstraintDescriptorList,boolean)",4,7,10
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptors(TableDescriptor)",2,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintDescriptorsScan(TableDescriptor,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraintTableDescriptor(UUID)",2,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getConstraints(UUID,int,int)",1,6,8
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDataDescriptorGenerator()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDataValueFactory()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDeclaredGlobalTemporaryTablesSchemaDescriptor()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDependencyManager()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDependentsDescriptorList(String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaHeap(ScanQualifier[][],TabInfoImpl,TupleDescriptor,List)",3,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getDescriptorViaIndex(int,ExecIndexRow,ScanQualifier[][],TabInfoImpl,TupleDescriptor,List,boolean)",3,11,12
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getEngineType()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getExecutionFactory()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getFileInfoDescriptor(SchemaDescriptor,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getFileInfoDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getFileInfoDescriptorIndex1Scan(UUID,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getFileInfoDescriptorIndex2Scan(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getForeignKeys(UUID)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getIDValueAsCHAR(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getIndexRowFromHeapRow(IndexRowGenerator,RowLocation,ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getLCC()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getNonCoreTI(int)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getNonCoreTIByNumber(int)",2,3,18
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getPermissions(PermissionsDescriptor)",2,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getPermissionsCache()",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getProvidersDescriptorList(String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getQueryDescriptions(boolean)",1,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoleDefinitionDescriptor(String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoleGrantDescriptor(String,String,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoleGrantDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoutineList(String,String,char)",4,7,8
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoutinePermissions(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRoutinePermissions(UUID,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getRowLocationTemplate(LanguageConnectionContext,TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptor(String,SchemaDescriptor)",2,6,6
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptor(UUID)",4,4,6
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptorIndex1Scan(String,String)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSDescriptorIndex2Scan(String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSPSParams(SPSDescriptor,Vector)",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSYSCOLUMNSHeapConglomerateNumber()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSchemaDescriptor(String,TransactionController,boolean)",6,8,9
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSchemaDescriptor(UUID,TransactionController)",7,9,10
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSetAutoincrementValue(RowLocation,TransactionController,boolean,NumberDataValue,boolean)",2,4,5
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getStatisticsDescriptors(TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSubCheckConstraint(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSubKeyConstraint(UUID,int)",1,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSysIBMSchemaDescriptor()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSystemSQLName()",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSystemSchemaDescriptor()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getSystemUtilSchemaDescriptor()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(String,SchemaDescriptor,TransactionController)",4,8,9
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptor(UUID)",2,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptorIndex1Scan(String,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTableDescriptorIndex2Scan(String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTablePermissions(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTablePermissions(UUID,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTransactionCompile()",2,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTransactionExecute()",2,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptor(String,SchemaDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptors(TableDescriptor)",2,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getTriggerDescriptorsScan(TableDescriptor,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUUIDFactory()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUUIDForCoreTable(String,String,TransactionController)",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedColPermsDescriptor(ColPermsDescriptor)",2,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedPermissionsDescriptor(int,int,PermissionsDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedRoutinePermsDescriptor(RoutinePermsDescriptor)",2,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedSPSDescriptor(TableKey)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedSPSDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTableDescriptor(TableKey)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTableDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getUncachedTablePermsDescriptor(TablePermsDescriptor)",2,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getVTIClass(TableDescriptor,boolean)",4,5,5
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getViewDescriptor(TableDescriptor)",3,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getViewDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.getViewDescriptorScan(TableDescriptor)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.grantPublicAccessToSystemRoutine(String,String,char,TransactionController,String)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.grantPublicAccessToSystemRoutines(TransactionController,String)",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllConglomerateDescriptorsByNumber(TransactionController)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.hashAllTableDescriptorsByTableId(TransactionController)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.initSystemIndexVariables(DataDescriptorGenerator,TabInfoImpl,int)",1,3,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.initSystemIndexVariables(TabInfoImpl)",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.initializeCatalogInfo()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.initializeCoreInfo()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.initializeNoncoreInfo()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.invalidateAllSPSPlans()",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaEmpty(SchemaDescriptor)",5,1,5
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSchemaReferenced(TransactionController,TabInfoImpl,int,int,DataValueDescriptor)",1,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.isSystemSchemaName(String)",3,2,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadCatalogs(DataDescriptorGenerator,TabInfoImpl[])",1,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.loadDictionaryTables(TransactionController,DataDescriptorGenerator,Properties)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.locateSchemaRow(String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.locateSchemaRow(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.makeCatalog(TabInfoImpl,SchemaDescriptor,TransactionController)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.makeColumnDescriptor(SystemColumn,int,TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.newCacheable(CacheManager)",4,1,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.newDeclaredGlobalTemporaryTablesSchemaDesc(String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.newSList()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.newSystemSchemaDesc(String,String)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.populateSYSDUMMY1(TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.removePermEntryInCache(PermissionsDescriptor)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.rewriteSYSCOLPERMSforAlterTable(UUID,TransactionController,ColumnDescriptor)",2,5,6
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.run()",1,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.setAutoincrementValue(TransactionController,UUID,String,long,boolean)",1,2,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.setCacheMode(int)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.setDependencyManager()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.spsCacheEntryAdded(SPSDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.spsCacheEntryRemoved(SPSDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.startReading(LanguageConnectionContext)",5,8,9
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.startWriting(LanguageConnectionContext)",7,10,11
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.stop()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.transactionFinished()",1,3,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.twoDigits(int)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateColumnDescriptor(ColumnDescriptor,UUID,String,int[],TransactionController,boolean)",5,2,7
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConglomerateDescriptor(ConglomerateDescriptor,long,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConglomerateDescriptor(ConglomerateDescriptor[],long,TransactionController)",1,2,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateConstraintDescriptor(ConstraintDescriptor,UUID,int[],TransactionController)",2,3,7
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateLockGranularity(TableDescriptor,SchemaDescriptor,char,TransactionController)",1,1,2
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSPS(SPSDescriptor,TransactionController,boolean,boolean,boolean,boolean)",3,3,9
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSYSCOLPERMSforAddColumnToUserTable(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSYSCOLPERMSforDropColumn(UUID,TransactionController,ColumnDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSchemaAuth(String,String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateSystemSchemaAuthorization(String,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.updateTriggerDescriptor(TriggerDescriptor,UUID,int[],TransactionController)",2,3,7
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgradeFixSystemColumnDefinition(CatalogRowFactory,int,TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgradeMakeCatalog(TransactionController,int)",1,3,3
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addColumns(CatalogRowFactory,int[],TransactionController)",1,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_addInvisibleColumns(CatalogRowFactory,int[],TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_initSystemTableCols(TransactionController,boolean,int,FormatableBitSet,DataValueDescriptor[])",1,4,4
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.upgrade_makeOneIndex(TransactionController,TabInfoImpl,int,long)",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.usesSqlAuthorization()",1,1,1
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.visitPermsByGrantee(String,TransactionController,int,int,int,int)",3,7,7
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.visitRoleGrants(TabInfoImpl,SYSROLESRowFactory,int,String,TransactionController,int)",3,6,6
"org.apache.derby.impl.sql.catalog.DataDictionaryImpl.widenConglomerate(ExecRow,int[],long,TransactionController)",1,2,2
"org.apache.derby.impl.sql.catalog.DropDependencyFilter.DropDependencyFilter(UUID)",1,1,1
"org.apache.derby.impl.sql.catalog.DropDependencyFilter.execute(ExecRow)",2,2,2
"org.apache.derby.impl.sql.catalog.DropDependencyFilter.getDataValueFactory()",1,2,2
"org.apache.derby.impl.sql.catalog.DropDependencyFilter.getFalseValue()",1,2,2
"org.apache.derby.impl.sql.catalog.DropDependencyFilter.getTrueValue()",1,2,2
"org.apache.derby.impl.sql.catalog.DropDependencyFilter.getUUIDFactory()",1,2,2
"org.apache.derby.impl.sql.catalog.DropDependencyFilter.init(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.IndexInfoImpl(int,CatalogRowFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.getBaseColumnPosition(int)",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.getColumnCount()",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.getConglomerateNumber()",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.getIndexName()",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.getIndexRowGenerator()",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.isIndexUnique()",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.setConglomerateNumber(long)",1,1,1
"org.apache.derby.impl.sql.catalog.IndexInfoImpl.setIndexRowGenerator(IndexRowGenerator)",1,1,1
"org.apache.derby.impl.sql.catalog.NameTDCacheable.NameTDCacheable(DataDictionaryImpl)",1,1,1
"org.apache.derby.impl.sql.catalog.NameTDCacheable.clearIdentity()",1,1,1
"org.apache.derby.impl.sql.catalog.NameTDCacheable.createIdentity(Object,Object)",2,4,5
"org.apache.derby.impl.sql.catalog.NameTDCacheable.getIdentity()",1,1,1
"org.apache.derby.impl.sql.catalog.NameTDCacheable.setIdentity(Object)",2,4,4
"org.apache.derby.impl.sql.catalog.OIDTDCacheable.OIDTDCacheable(DataDictionaryImpl)",1,1,1
"org.apache.derby.impl.sql.catalog.OIDTDCacheable.clearIdentity()",1,1,1
"org.apache.derby.impl.sql.catalog.OIDTDCacheable.createIdentity(Object,Object)",2,4,5
"org.apache.derby.impl.sql.catalog.OIDTDCacheable.getIdentity()",1,1,1
"org.apache.derby.impl.sql.catalog.OIDTDCacheable.setIdentity(Object)",2,4,4
"org.apache.derby.impl.sql.catalog.PermissionsCacheable.PermissionsCacheable(DataDictionaryImpl)",1,1,1
"org.apache.derby.impl.sql.catalog.PermissionsCacheable.clean(boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.PermissionsCacheable.clearIdentity()",1,1,1
"org.apache.derby.impl.sql.catalog.PermissionsCacheable.createIdentity(Object,Object)",2,2,5
"org.apache.derby.impl.sql.catalog.PermissionsCacheable.getIdentity()",1,1,1
"org.apache.derby.impl.sql.catalog.PermissionsCacheable.isDirty()",1,1,1
"org.apache.derby.impl.sql.catalog.PermissionsCacheable.setIdentity(Object)",6,14,15
"org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory.PermissionsCatalogRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory.getAuthorizationID(ExecRow,int)",1,1,1
"org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory.getAuthorizationID(String)",1,1,1
"org.apache.derby.impl.sql.catalog.PermissionsCatalogRowFactory.getNullAuthorizationID()",1,1,1
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.SPSNameCacheable(DataDictionaryImpl)",1,1,1
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.checkConsistency(SPSDescriptor,Object,HeaderPrintWriter)",1,6,6
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.clean(boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.clearIdentity()",1,4,4
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.createIdentity(Object,Object)",2,9,9
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.getIdentity()",1,1,1
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.getSPSDescriptor()",1,1,1
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.isDirty()",1,1,1
"org.apache.derby.impl.sql.catalog.SPSNameCacheable.setIdentity(Object)",2,8,8
"org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.SYSALIASESRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",3,7,9
"org.apache.derby.impl.sql.catalog.SYSALIASESRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",2,4,5
"org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.SYSCHECKSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSCHECKSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.SYSCOLPERMSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,8,8
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.buildIndexKeyRow(int,PermissionsDescriptor)",2,2,4
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.getPrimaryKeyIndexNumber()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,3,3
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.orPermissions(ExecRow,PermissionsDescriptor,boolean[])",2,3,4
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.removePermissions(ExecRow,PermissionsDescriptor,boolean[])",4,4,6
"org.apache.derby.impl.sql.catalog.SYSCOLPERMSRowFactory.setUUIDOfThePassedDescriptor(ExecRow,PermissionsDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.SYSCOLUMNSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.SYSCOLUMNSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory,String)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,8,8
"org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.getCreateHeapProperties()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.getCreateIndexProperties(int)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.getPrimaryKeyIndexNumber()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCOLUMNSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,6,7
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.SYSCONGLOMERATESRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getConglomerateName(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getConglomerateUUID(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getCreateHeapProperties()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getCreateIndexProperties(int)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getSchemaUUID(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.getTableUUID(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.makeEmptyRow()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONGLOMERATESRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,4,5
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.SYSCONSTRAINTSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",4,22,33
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.getConstraintId(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.getConstraintName(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.getConstraintType(ExecRow)",2,4,8
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.getSchemaId(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.getTableId(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSCONSTRAINTSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",2,4,9
"org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.SYSDEPENDSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSDEPENDSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",4,4,4
"org.apache.derby.impl.sql.catalog.SYSDUMMY1RowFactory.SYSDUMMY1RowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSDUMMY1RowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSDUMMY1RowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSDUMMY1RowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.SYSFILESRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,5,5
"org.apache.derby.impl.sql.catalog.SYSFILESRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.SYSFOREIGNKEYSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.getRefActionAsInt(String)",2,3,8
"org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.getRefActionAsString(int)",2,3,8
"org.apache.derby.impl.sql.catalog.SYSFOREIGNKEYSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,3,3
"org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.SYSKEYSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSROLESRowFactory.SYSROLESRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSROLESRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSROLESRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,4
"org.apache.derby.impl.sql.catalog.SYSROLESRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,2,4
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.SYSROUTINEPERMSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.buildIndexKeyRow(int,PermissionsDescriptor)",2,2,4
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.getPrimaryKeyIndexNumber()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,4,4
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.orPermissions(ExecRow,PermissionsDescriptor,boolean[])",1,1,1
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.removePermissions(ExecRow,PermissionsDescriptor,boolean[])",1,1,1
"org.apache.derby.impl.sql.catalog.SYSROUTINEPERMSRowFactory.setUUIDOfThePassedDescriptor(ExecRow,PermissionsDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.SYSSCHEMASRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSSCHEMASRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,3,3
"org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.SYSSTATEMENTSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,8,8
"org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.getCreateHeapProperties()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.makeEmptyRow()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSTATEMENTSRowFactory.makeSYSSTATEMENTSrow(boolean,SPSDescriptor)",1,4,4
"org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.SYSSTATISTICSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSSTATISTICSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,2,2
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.SYSTABLEPERMSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,15,15
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.buildIndexKeyRow(int,PermissionsDescriptor)",2,2,4
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.getPrimaryKeyIndexNumber()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,3,3
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.orOnePermission(ExecRow,boolean[],int,String)",3,4,6
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.orPermissions(ExecRow,PermissionsDescriptor,boolean[])",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.removeOnePermission(ExecRow,boolean[],int,String)",2,4,5
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.removePermissions(ExecRow,PermissionsDescriptor,boolean[])",2,1,4
"org.apache.derby.impl.sql.catalog.SYSTABLEPERMSRowFactory.setUUIDOfThePassedDescriptor(ExecRow,PermissionsDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.SYSTABLESRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",2,6,10
"org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.buildEmptyIndexRow(int,RowLocation)",2,2,3
"org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.getTableName(ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTABLESRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",2,7,11
"org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.SYSTRIGGERSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",2,7,10
"org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.getCharBoolean(DataValueDescriptor,char,char)",3,4,4
"org.apache.derby.impl.sql.catalog.SYSTRIGGERSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,8,13
"org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.SYSVIEWSRowFactory(UUIDFactory,ExecutionFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.buildColumnList()",1,1,1
"org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.buildDescriptor(ExecRow,TupleDescriptor,DataDictionary)",1,5,5
"org.apache.derby.impl.sql.catalog.SYSVIEWSRowFactory.makeRow(TupleDescriptor,TupleDescriptor)",1,6,6
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.SystemColumnImpl(String,DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.getColumn(String,int,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.getColumn(String,int,boolean,int)",1,1,1
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.getIdentifierColumn(String,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.getIndicatorColumn(String)",1,1,1
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.getJavaColumn(String,String,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.getName()",1,1,1
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.getType()",1,1,1
"org.apache.derby.impl.sql.catalog.SystemColumnImpl.getUUIDColumn(String,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.TDCacheable.TDCacheable(DataDictionaryImpl)",1,1,1
"org.apache.derby.impl.sql.catalog.TDCacheable.checkConsistency(TableDescriptor,Object,HeaderPrintWriter)",1,8,8
"org.apache.derby.impl.sql.catalog.TDCacheable.clean(boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.TDCacheable.getTableDescriptor()",1,1,1
"org.apache.derby.impl.sql.catalog.TDCacheable.isDirty()",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.TabInfoImpl(CatalogRowFactory)",1,1,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRow(TransactionController,ExecIndexRow,int)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRow(TransactionController,ExecIndexRow,int,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRows(TransactionController,ExecIndexRow,int,Qualifier[][],TupleFilter,ExecIndexRow,int,int)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.deleteRows(TransactionController,ExecIndexRow,int,Qualifier[][],TupleFilter,ExecIndexRow,int,int,boolean)",1,7,14
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getBaseColumnPosition(int,int)",1,3,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getCatalogRowFactory()",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getCreateHeapProperties()",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getCreateIndexProperties(int)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getHeapConglomerate()",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexColumnCount(int)",1,3,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexConglomerate(int)",1,3,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexName(int)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexRowFromHeapRow(IndexRowGenerator,RowLocation,ExecRow)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getIndexRowGenerator(int)",1,3,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getNumberOfIndexes()",2,1,2
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getRow(TransactionController,ConglomerateController,ExecIndexRow,int)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getRow(TransactionController,ExecIndexRow,int)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowChanger(TransactionController,int[],ExecRow)",1,5,5
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowInternal(TransactionController,ConglomerateController,ExecIndexRow,int,RowLocation[])",2,3,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getRowLocation(TransactionController,ExecIndexRow,int)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getStreamStorableHeapColIds(ExecRow)",1,2,7
"org.apache.derby.impl.sql.catalog.TabInfoImpl.getTableName()",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.insertRow(ExecRow,TransactionController,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.insertRowList(ExecRow[],TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.insertRowListImpl(ExecRow[],TransactionController,RowLocation[],boolean)",6,6,11
"org.apache.derby.impl.sql.catalog.TabInfoImpl.isComplete()",2,1,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.isIndexUnique(int)",1,3,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.setHeapConglomerate(long)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.setIndexConglomerate(ConglomerateDescriptor)",3,7,7
"org.apache.derby.impl.sql.catalog.TabInfoImpl.setIndexConglomerate(int,long)",1,2,2
"org.apache.derby.impl.sql.catalog.TabInfoImpl.setIndexRowGenerator(int,IndexRowGenerator)",1,3,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.toString()",2,2,3
"org.apache.derby.impl.sql.catalog.TabInfoImpl.updateRow(ExecIndexRow,ExecRow,int,boolean[],int[],TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.updateRow(ExecIndexRow,ExecRow,int,boolean[],int[],TransactionController,boolean)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.updateRow(ExecIndexRow,ExecRow[],int,boolean[],int[],TransactionController)",1,1,1
"org.apache.derby.impl.sql.catalog.TabInfoImpl.updateRow(ExecIndexRow,ExecRow[],int,boolean[],int[],TransactionController,boolean)",1,4,7
"org.apache.derby.impl.sql.catalog.TableKey.TableKey(UUID,String)",1,1,1
"org.apache.derby.impl.sql.catalog.TableKey.equals(Object)",3,3,4
"org.apache.derby.impl.sql.catalog.TableKey.getSchemaId()",1,1,1
"org.apache.derby.impl.sql.catalog.TableKey.getTableName()",1,1,1
"org.apache.derby.impl.sql.catalog.TableKey.hashCode()",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.AccessPathImpl(Optimizer)",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.copy(AccessPath)",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.getConglomerateDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.getCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.getCoveringIndexScan()",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.getJoinStrategy()",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.getLockMode()",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.getNonMatchingIndexScan()",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.getOptimizer()",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.initializeAccessPathName(DataDictionary,TableDescriptor)",4,4,5
"org.apache.derby.impl.sql.compile.AccessPathImpl.setConglomerateDescriptor(ConglomerateDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.setCostEstimate(CostEstimate)",1,4,4
"org.apache.derby.impl.sql.compile.AccessPathImpl.setCoveringIndexScan(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.setJoinStrategy(JoinStrategy)",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.setLockMode(int)",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.setNonMatchingIndexScan(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.AccessPathImpl.toString()",2,2,2
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.ActivationClassBuilder(String,CompilerContext)",1,1,1
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.addCursorPositionCode()",1,1,1
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.beginExecuteMethod()",1,1,1
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.finishExecuteMethod(boolean)",1,3,3
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.getBaseClassName()",1,1,1
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.getCloseActivationMethod()",1,2,2
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.getCurrentSetup()",2,1,2
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.getPackageName()",1,1,1
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.getRowCount()",1,1,1
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.rememberCursor(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.rememberCursorTarget(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.setNumSubqueries()",2,1,2
"org.apache.derby.impl.sql.compile.ActivationClassBuilder.startResetMethod()",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.bindExpression(FromList,SubqueryList,Vector)",7,9,9
"org.apache.derby.impl.sql.compile.AggregateNode.checkAggregatorClassName(String)",2,2,2
"org.apache.derby.impl.sql.compile.AggregateNode.constantExpression(PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.AggregateNode.getAggregateDefinition()",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.getAggregateName()",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.getAggregatorClassName()",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.getGeneratedRC()",1,2,2
"org.apache.derby.impl.sql.compile.AggregateNode.getGeneratedRef()",1,2,2
"org.apache.derby.impl.sql.compile.AggregateNode.getNewAggregatorResultColumn(DataDictionary)",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.getNewExpressionResultColumn(DataDictionary)",1,2,2
"org.apache.derby.impl.sql.compile.AggregateNode.getNewNullResultExpression()",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.init(Object,Object,Object,Object)",1,3,3
"org.apache.derby.impl.sql.compile.AggregateNode.instantiateAggDef()",3,9,9
"org.apache.derby.impl.sql.compile.AggregateNode.isConstant()",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.isDistinct()",1,1,1
"org.apache.derby.impl.sql.compile.AggregateNode.replaceAggregatesWithColumnReferences(ResultColumnList,int)",1,3,3
"org.apache.derby.impl.sql.compile.AggregateNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.AllResultColumn.cloneMe()",1,2,2
"org.apache.derby.impl.sql.compile.AllResultColumn.getFullTableName()",2,2,2
"org.apache.derby.impl.sql.compile.AllResultColumn.getTableNameObject()",1,1,1
"org.apache.derby.impl.sql.compile.AllResultColumn.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.AlterTableNode.bindStatement()",5,12,15
"org.apache.derby.impl.sql.compile.AlterTableNode.genColumnInfo()",1,1,1
"org.apache.derby.impl.sql.compile.AlterTableNode.getChangeType()",1,1,1
"org.apache.derby.impl.sql.compile.AlterTableNode.init(Object)",2,2,2
"org.apache.derby.impl.sql.compile.AlterTableNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.AlterTableNode.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.AlterTableNode.init(Object,Object,Object,Object,Object)",2,2,3
"org.apache.derby.impl.sql.compile.AlterTableNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.AlterTableNode.prepConstantAction()",1,3,3
"org.apache.derby.impl.sql.compile.AlterTableNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.AlterTableNode.statementToString()",2,1,2
"org.apache.derby.impl.sql.compile.AlterTableNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.AndNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.AndNode.changeToCNF(boolean)",1,4,4
"org.apache.derby.impl.sql.compile.AndNode.eliminateNots(boolean)",2,1,2
"org.apache.derby.impl.sql.compile.AndNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.AndNode.postBindFixup()",1,1,1
"org.apache.derby.impl.sql.compile.AndNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,3,3
"org.apache.derby.impl.sql.compile.AndNode.putAndsOnTop()",1,2,2
"org.apache.derby.impl.sql.compile.AndNode.verifyChangeToCNF()",1,6,6
"org.apache.derby.impl.sql.compile.AndNode.verifyPutAndsOnTop()",1,4,4
"org.apache.derby.impl.sql.compile.BaseColumnNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.BaseColumnNode.getColumnName()",1,1,1
"org.apache.derby.impl.sql.compile.BaseColumnNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.BaseColumnNode.getSchemaName()",1,2,2
"org.apache.derby.impl.sql.compile.BaseColumnNode.getTableName()",1,2,2
"org.apache.derby.impl.sql.compile.BaseColumnNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BaseColumnNode.isEquivalent(ValueNode)",2,3,3
"org.apache.derby.impl.sql.compile.BaseColumnNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.BaseJoinStrategy.BaseJoinStrategy()",1,1,1
"org.apache.derby.impl.sql.compile.BaseJoinStrategy.bulkFetchOK()",1,1,1
"org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs1(TransactionController,MethodBuilder,Optimizable,OptimizablePredicateList,ExpressionClassBuilderInterface,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.BaseJoinStrategy.fillInScanArgs2(MethodBuilder,Optimizable,int,int,int,int,boolean,int)",1,6,6
"org.apache.derby.impl.sql.compile.BaseJoinStrategy.ignoreBulkFetch()",1,1,1
"org.apache.derby.impl.sql.compile.BaseJoinStrategy.isHashJoin()",1,1,1
"org.apache.derby.impl.sql.compile.BaseJoinStrategy.validForOutermostTable()",1,1,1
"org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.BaseTableNumbersVisitor(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.getColumnNumber()",1,1,1
"org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.reset()",1,1,1
"org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.setTableMap(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.skipChildren(Visitable)",1,1,3
"org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.BaseTableNumbersVisitor.visit(Visitable)",3,10,11
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.dataValueMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.generateDataValue(MethodBuilder,int,LocalField)",1,4,4
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.generateNull(MethodBuilder,int)",1,2,2
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.getPrimitiveMethodName()",1,2,2
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.getStoredFormatIdFromTypeId()",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.getTypeCompiler(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.getTypeId()",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.gnn(DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.gnn2(DataValueFactory)",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.numberConvertible(TypeId,boolean)",2,8,9
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.numberStorable(TypeId,TypeId,ClassFactory)",2,2,3
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.pushCollationForDataValue(int)",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.resolveArithmeticOperation(DataTypeDescriptor,DataTypeDescriptor,String)",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.setTypeId(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.BaseTypeCompiler.userTypeStorable(TypeId,TypeId,ClassFactory)",2,2,2
"org.apache.derby.impl.sql.compile.BetweenOperatorNode.eliminateNots(boolean)",2,2,3
"org.apache.derby.impl.sql.compile.BetweenOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.BetweenOperatorNode.init(Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.BetweenOperatorNode.preprocess(int,FromList,SubqueryList,PredicateList)",2,1,2
"org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.bindExpression(FromList,SubqueryList,Vector)",1,9,9
"org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryArithmeticOperatorNode.setNodeType(int)",2,3,8
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindComparisonOperator()",2,4,5
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.bindExpression(FromList,SubqueryList,Vector)",1,5,5
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.changeToCNF(boolean)",1,2,3
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.eliminateNots(boolean)",2,1,2
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.genSQLJavaSQLTree()",5,3,5
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.getBetweenSelectivity()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.getForQueryRewrite()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.getNegation(ValueNode,ValueNode)",1,2,2
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.preprocess(int,FromList,SubqueryList,PredicateList)",2,3,3
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.setBetweenSelectivity()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode.setForQueryRewrite(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.accept(Visitor)",2,5,6
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindComparisonOperator()",1,2,2
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.bindExpression(FromList,SubqueryList,Vector)",3,5,5
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.categorize(JBitSet,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.constantExpression(PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.getLeftOperand()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.getRightOperandList()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.isConstantExpression()",1,2,2
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.isEquivalent(ValueNode)",6,3,7
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.printSubNodes(int)",1,4,4
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.setLeftOperand(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.setRightOperandList(ValueNodeList)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryListOperatorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.bindExpression(FromList,SubqueryList,Vector)",2,3,3
"org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.resolveLogicalBinaryOperator(DataTypeDescriptor,DataTypeDescriptor)",2,4,4
"org.apache.derby.impl.sql.compile.BinaryLogicalOperatorNode.verifyEliminateNots()",2,3,3
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.accept(Visitor)",2,5,6
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.addXmlOpMethodParams(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindExpression(FromList,SubqueryList,Vector)",4,5,6
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.bindXMLQuery()",4,6,7
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.categorize(JBitSet,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.constantExpression(PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.genSQLJavaSQLTree()",1,3,3
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",3,18,19
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.getLeftOperand()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.getReceiverInterfaceName()",1,2,2
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.getRightOperand()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.init(Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.initializeResultField(ExpressionClassBuilder,MethodBuilder,LocalField)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.isConstantExpression()",1,2,2
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.isEquivalent(ValueNode)",2,3,4
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.printSubNodes(int)",1,4,4
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.setLeftOperand(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.setLeftRightInterfaceType(String)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.setMethodName(String)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.setOperator(String)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.setRightOperand(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.swapOperands()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryOperatorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.booleanSelectivity(Optimizable)",1,5,6
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.buildTableNumList(FromTable,boolean)",2,2,3
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.columnOnOneSide(Optimizable)",5,3,5
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.compareWithKnownConstant(Optimizable,boolean)",2,4,5
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.equalsComparisonWithConstantExpression(Optimizable)",2,3,4
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.genSQLJavaSQLTree()",2,1,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateAbsoluteColumnId(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateExpressionOperand(Optimizable,int,ExpressionClassBuilder,MethodBuilder)",1,4,4
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateNegate(MethodBuilder,Optimizable)",2,2,5
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateOperator(MethodBuilder,Optimizable)",2,2,7
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateOrderedNulls(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateQualMethod(ExpressionClassBuilder,MethodBuilder,Optimizable)",1,2,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.generateRelativeColumnId(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getAbsoluteColumnPosition(Optimizable)",1,4,5
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getColumnOperand(Optimizable)",5,3,5
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getColumnOperand(Optimizable,int)",7,5,7
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getCompareValue(Optimizable)",3,4,5
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getExpressionOperand(int,int,FromTable)",7,5,7
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getInListOp()",1,2,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getNegation(ValueNode,ValueNode)",1,2,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getNegationNode()",7,3,8
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperand(ColumnReference,int,boolean)",9,7,11
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOperator()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getOrderableVariantType(Optimizable)",2,2,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getReceiverInterfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getScopedOperand(int,JBitSet,ResultSetNode,int[])",3,6,7
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getStartOperator(Optimizable)",4,3,6
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getStopOperator(Optimizable)",4,3,6
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.getTransitiveSearchClause(ColumnReference)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.implicitVarcharComparison()",3,3,5
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.init(Object,Object)",2,3,9
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.initBaseTableVisitor(int,boolean)",1,4,5
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.isBinaryEqualsOperatorNode()",1,2,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.isInListProbeNode()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.isQualifier(Optimizable,boolean)",3,3,8
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.isRelationalOperator()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.keyColumnOnLeft(Optimizable)",1,5,6
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.optimizableEqualityNode(Optimizable,int,boolean)",6,1,6
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.orderedNulls()",1,1,1
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.selectivity(Optimizable)",6,2,6
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.selfComparison(ColumnReference)",1,4,4
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.usefulStartKey(Optimizable)",2,2,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.usefulStartKey(boolean)",6,2,6
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.usefulStopKey(Optimizable)",2,2,2
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.usefulStopKey(boolean)",6,2,6
"org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode.valNodeReferencesOptTable(ValueNode,FromTable,boolean,boolean)",1,4,4
"org.apache.derby.impl.sql.compile.BitConstantNode.generateConstant(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.BitConstantNode.getConstantValueAsObject()",1,1,1
"org.apache.derby.impl.sql.compile.BitConstantNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.BitConstantNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.BitTypeCompiler.compatible(TypeId)",2,1,2
"org.apache.derby.impl.sql.compile.BitTypeCompiler.convertible(TypeId,boolean)",1,4,4
"org.apache.derby.impl.sql.compile.BitTypeCompiler.dataValueMethodName()",5,3,6
"org.apache.derby.impl.sql.compile.BitTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.BitTypeCompiler.getCorrespondingPrimitiveTypeName()",1,1,1
"org.apache.derby.impl.sql.compile.BitTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.BitTypeCompiler.nullMethodName()",5,3,6
"org.apache.derby.impl.sql.compile.BitTypeCompiler.storable(TypeId,ClassFactory)",3,1,3
"org.apache.derby.impl.sql.compile.BooleanConstantNode.eliminateNots(boolean)",2,1,2
"org.apache.derby.impl.sql.compile.BooleanConstantNode.generateConstant(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.BooleanConstantNode.getConstantValueAsObject()",1,1,2
"org.apache.derby.impl.sql.compile.BooleanConstantNode.getValueAsString()",2,1,2
"org.apache.derby.impl.sql.compile.BooleanConstantNode.init(Object)",1,2,2
"org.apache.derby.impl.sql.compile.BooleanConstantNode.isBooleanFalse()",1,1,2
"org.apache.derby.impl.sql.compile.BooleanConstantNode.isBooleanTrue()",1,1,2
"org.apache.derby.impl.sql.compile.BooleanConstantNode.selectivity(Optimizable)",2,1,2
"org.apache.derby.impl.sql.compile.BooleanConstantNode.setValue(DataValueDescriptor)",1,3,4
"org.apache.derby.impl.sql.compile.BooleanTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.BooleanTypeCompiler.convertible(TypeId,boolean)",2,1,4
"org.apache.derby.impl.sql.compile.BooleanTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.BooleanTypeCompiler.getCorrespondingPrimitiveTypeName()",1,1,1
"org.apache.derby.impl.sql.compile.BooleanTypeCompiler.getPrimitiveMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.BooleanTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.BooleanTypeCompiler.nullMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.BooleanTypeCompiler.storable(TypeId,ClassFactory)",2,3,4
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.convertible(TypeId,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.dataValueMethodName()",3,3,4
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.getCorrespondingPrimitiveTypeName()",3,3,4
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.nullMethodName()",3,3,4
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.pushCollationForDataValue(int)",1,1,1
"org.apache.derby.impl.sql.compile.CLOBTypeCompiler.storable(TypeId,ClassFactory)",1,1,1
"org.apache.derby.impl.sql.compile.CallStatementNode.accept(Visitor)",2,3,3
"org.apache.derby.impl.sql.compile.CallStatementNode.bindStatement()",1,2,2
"org.apache.derby.impl.sql.compile.CallStatementNode.checkReliability()",2,3,3
"org.apache.derby.impl.sql.compile.CallStatementNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.CallStatementNode.getPrivType()",1,1,1
"org.apache.derby.impl.sql.compile.CallStatementNode.getSQLAllowedInProcedure()",1,2,2
"org.apache.derby.impl.sql.compile.CallStatementNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.CallStatementNode.makeResultDescription()",1,1,1
"org.apache.derby.impl.sql.compile.CallStatementNode.optimizeStatement()",1,2,2
"org.apache.derby.impl.sql.compile.CallStatementNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.CallStatementNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.CallStatementNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CastNode.accept(Visitor)",2,3,4
"org.apache.derby.impl.sql.compile.CastNode.bindCastNodeOnly()",4,7,7
"org.apache.derby.impl.sql.compile.CastNode.bindExpression(FromList,SubqueryList,Vector)",3,14,24
"org.apache.derby.impl.sql.compile.CastNode.categorize(JBitSet,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.constantExpression(PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.genDataValueConversion(ExpressionClassBuilder,MethodBuilder)",1,6,6
"org.apache.derby.impl.sql.compile.CastNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",2,3,3
"org.apache.derby.impl.sql.compile.CastNode.getCastFromCharConstant(int)",9,12,13
"org.apache.derby.impl.sql.compile.CastNode.getCastFromIntegralType(long,int)",12,12,15
"org.apache.derby.impl.sql.compile.CastNode.getCastFromNumericType(DataValueDescriptor,int)",3,2,9
"org.apache.derby.impl.sql.compile.CastNode.getConstantValueAsObject()",3,1,3
"org.apache.derby.impl.sql.compile.CastNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.init(Object,Object,Object)",2,1,2
"org.apache.derby.impl.sql.compile.CastNode.isConstantExpression()",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.isEquivalent(ValueNode)",2,3,3
"org.apache.derby.impl.sql.compile.CastNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.CastNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.setForDataTypeFunction(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.setForExternallyGeneratedCASTnode()",1,1,1
"org.apache.derby.impl.sql.compile.CastNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CharConstantNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.CharConstantNode.generateConstant(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.CharConstantNode.getConstantValueAsObject()",1,1,1
"org.apache.derby.impl.sql.compile.CharConstantNode.getString()",1,1,1
"org.apache.derby.impl.sql.compile.CharConstantNode.init(Object)",1,3,4
"org.apache.derby.impl.sql.compile.CharConstantNode.init(Object,Object)",2,2,4
"org.apache.derby.impl.sql.compile.CharTypeCompiler.compatible(TypeId)",1,3,3
"org.apache.derby.impl.sql.compile.CharTypeCompiler.convertible(TypeId,boolean)",4,7,8
"org.apache.derby.impl.sql.compile.CharTypeCompiler.dataValueMethodName()",5,3,6
"org.apache.derby.impl.sql.compile.CharTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.CharTypeCompiler.getCorrespondingPrimitiveTypeName()",1,1,1
"org.apache.derby.impl.sql.compile.CharTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.CharTypeCompiler.nullMethodName()",5,3,6
"org.apache.derby.impl.sql.compile.CharTypeCompiler.pushCollationForDataValue(int)",1,1,1
"org.apache.derby.impl.sql.compile.CharTypeCompiler.storable(TypeId,ClassFactory)",2,3,4
"org.apache.derby.impl.sql.compile.CoalesceFunctionNode.accept(Visitor)",2,3,4
"org.apache.derby.impl.sql.compile.CoalesceFunctionNode.bindExpression(FromList,SubqueryList,Vector)",9,7,9
"org.apache.derby.impl.sql.compile.CoalesceFunctionNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,10,10
"org.apache.derby.impl.sql.compile.CoalesceFunctionNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.CoalesceFunctionNode.isEquivalent(ValueNode)",5,2,5
"org.apache.derby.impl.sql.compile.CoalesceFunctionNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.CoalesceFunctionNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.CoalesceFunctionNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CollectNodesVisitor.CollectNodesVisitor(Class)",1,1,1
"org.apache.derby.impl.sql.compile.CollectNodesVisitor.CollectNodesVisitor(Class,Class)",1,1,1
"org.apache.derby.impl.sql.compile.CollectNodesVisitor.getList()",1,1,1
"org.apache.derby.impl.sql.compile.CollectNodesVisitor.skipChildren(Visitable)",1,2,2
"org.apache.derby.impl.sql.compile.CollectNodesVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.CollectNodesVisitor.visit(Visitable)",1,2,2
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.autoincrementCheckRange(long,long,String)",3,3,5
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.bindAndValidateDefault(DataDictionary,TableDescriptor)",5,5,7
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.checkUserType(TableDescriptor)",3,4,6
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.createDefaultInfoOfAutoInc()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.defaultTypeIsValid(TypeId,DataTypeDescriptor,TypeId,ValueNode,String)",19,14,27
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getAction()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getAutoinc_create_or_modify_Start_Increment()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getAutoincrementIncrement()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getAutoincrementStart()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getColumnName()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getDefaultInfo()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getDefaultNode()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getDefaultValue()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getOldDefaultUUID()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.getType()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.init(Object,Object,Object,Object)",1,7,9
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.isAutoincrementColumn()",1,4,9
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.setCollationType(int)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.setNullability(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateAutoincrement(DataDictionary,TableDescriptor,int)",5,4,11
"org.apache.derby.impl.sql.compile.ColumnDefinitionNode.validateDefault(DataDictionary,TableDescriptor)",5,7,8
"org.apache.derby.impl.sql.compile.ColumnOrdering.ColumnOrdering(int)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnOrdering.addColumn(int,int)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnOrdering.cloneMe()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnOrdering.contains(int,int)",3,3,4
"org.apache.derby.impl.sql.compile.ColumnOrdering.direction()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnOrdering.empty()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnOrdering.hasAnyOtherTable(int)",4,2,4
"org.apache.derby.impl.sql.compile.ColumnOrdering.hasTable(int)",4,2,4
"org.apache.derby.impl.sql.compile.ColumnOrdering.ordered(int,int,int)",3,1,3
"org.apache.derby.impl.sql.compile.ColumnOrdering.removeColumns(int)",1,3,3
"org.apache.derby.impl.sql.compile.ColumnOrdering.toString()",1,3,3
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.RemapInfo(int,int,String,ResultColumn)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.getColumnName()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.getColumnNumber()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.getSource()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.getTableNumber()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.setColName(String)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.setColNumber(int)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.setSource(ResultColumn)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.RemapInfo.setTableNumber(int)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.bindExpression(FromList,SubqueryList,Vector)",3,4,4
"org.apache.derby.impl.sql.compile.ColumnReference.categorize(JBitSet,boolean)",1,6,6
"org.apache.derby.impl.sql.compile.ColumnReference.constantExpression(PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.copyFields(ColumnReference)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.generateExpression(ExpressionClassBuilder,MethodBuilder)",2,4,4
"org.apache.derby.impl.sql.compile.ColumnReference.getClone()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getColumnName()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getColumnNumber()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getCorrelated()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.getGeneratedToReplaceAggregate()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getNestingLevel()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getSQLColumnName()",2,1,2
"org.apache.derby.impl.sql.compile.ColumnReference.getSchemaName()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.getSource()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getSourceLevel()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getSourceResultColumn()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getSourceResultSet(int[])",7,9,11
"org.apache.derby.impl.sql.compile.ColumnReference.getSourceSchemaName()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.getSourceTableName()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.getTableName()",1,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.getTableNameNode()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getTableNumber()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.getTablesReferenced(JBitSet)",1,3,3
"org.apache.derby.impl.sql.compile.ColumnReference.getTypeServices()",2,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.hasBeenRemapped()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.isCloneable()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.isEquivalent(ValueNode)",2,2,3
"org.apache.derby.impl.sql.compile.ColumnReference.isScoped()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.markAsScoped()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.markGeneratedToReplaceAggregate()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.pointsToColumnReference()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.ColumnReference.putAndsOnTop()",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.remapColumnReferences()",2,6,11
"org.apache.derby.impl.sql.compile.ColumnReference.remapColumnReferencesToExpressions()",3,13,15
"org.apache.derby.impl.sql.compile.ColumnReference.setColumnNumber(int)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.setNestingLevel(int)",1,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.setSource(ResultColumn)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.setSourceLevel(int)",1,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.setTableNameNode(TableName)",1,1,1
"org.apache.derby.impl.sql.compile.ColumnReference.setTableNumber(int)",1,2,2
"org.apache.derby.impl.sql.compile.ColumnReference.toString()",2,3,3
"org.apache.derby.impl.sql.compile.ColumnReference.unRemapColumnReferences()",2,3,6
"org.apache.derby.impl.sql.compile.ColumnReference.updatableByCursor()",1,2,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.CompilerContextImpl(ContextManager,LanguageConnectionContext,TypeCompilerFactory)",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.addProviderToAuxiliaryList(Provider)",1,2,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredColumnPriv(ColumnDescriptor)",3,2,10
"org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredRolePriv(String,int)",2,1,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredRoutinePriv(AliasDescriptor)",3,2,5
"org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredSchemaPriv(String,String,int)",2,1,3
"org.apache.derby.impl.sql.compile.CompilerContextImpl.addRequiredTablePriv(TableDescriptor)",2,1,3
"org.apache.derby.impl.sql.compile.CompilerContextImpl.addSavedObject(Object)",1,1,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.addWarning(SQLWarning)",1,2,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.cleanupOnError(Throwable)",1,5,5
"org.apache.derby.impl.sql.compile.CompilerContextImpl.closeSortCostControllers()",1,2,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.closeStoreCostControllers()",1,2,3
"org.apache.derby.impl.sql.compile.CompilerContextImpl.createDependency(Dependent,Provider)",1,2,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.createDependency(Provider)",1,3,3
"org.apache.derby.impl.sql.compile.CompilerContextImpl.firstOnStack()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getClassFactory()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getCompilationSchema()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getCurrentAuxiliaryProviderList()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getCursorInfo()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getInUse()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getJavaFactory()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNextColumnNumber()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNextEquivalenceClass()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNextResultSetNumber()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNextSubqueryNumber()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNextTableNumber()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNodeFactory()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNumResultSets()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNumSubquerys()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getNumTables()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getParameterList()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getParameterTypes()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getParser()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getReliability()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getRequiredPermissionsList()",1,16,16
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getReturnParameterFlag()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getSavedObjects()",2,1,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getScanIsolationLevel()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getSortCostController()",1,2,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getStoreCostController(long)",3,3,3
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getTypeCompilerFactory()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getUniqueClassName()",1,2,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.getWarnings()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.initRequiredPriv()",1,1,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.isFirstOnStack()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.popCurrentPrivType()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.pushCurrentPrivType(int)",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.resetContext()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.resetNextResultSetNumber()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setCompilationSchema(SchemaDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setCurrentAuxiliaryProviderList(ProviderList)",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setCurrentDependent(Dependent)",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setCursorInfo(Object)",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setInUse(boolean)",1,2,2
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setParameterList(Vector)",1,2,3
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setReliability(int)",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setReturnParameterFlag()",1,1,1
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setSavedObjects(Object[])",2,2,3
"org.apache.derby.impl.sql.compile.CompilerContextImpl.setScanIsolationLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.bindExpression(FromList,SubqueryList,Vector)",3,20,20
"org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.clobBlobHandling(DataTypeDescriptor,DataTypeDescriptor)",2,3,4
"org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.initializeResultField(ExpressionClassBuilder,MethodBuilder,LocalField)",1,1,1
"org.apache.derby.impl.sql.compile.ConcatenationOperatorNode.resolveConcatOperation(DataTypeDescriptor,DataTypeDescriptor)",5,27,36
"org.apache.derby.impl.sql.compile.ConditionalNode.accept(Visitor)",2,5,6
"org.apache.derby.impl.sql.compile.ConditionalNode.bindExpression(FromList,SubqueryList,Vector)",5,12,12
"org.apache.derby.impl.sql.compile.ConditionalNode.categorize(JBitSet,boolean)",2,2,3
"org.apache.derby.impl.sql.compile.ConditionalNode.constantExpression(PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.ConditionalNode.eliminateNots(boolean)",2,1,2
"org.apache.derby.impl.sql.compile.ConditionalNode.findType(ValueNodeList,FromList,SubqueryList,Vector)",7,11,15
"org.apache.derby.impl.sql.compile.ConditionalNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ConditionalNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ConditionalNode.isCastNode(ValueNode)",2,1,2
"org.apache.derby.impl.sql.compile.ConditionalNode.isCastToChar(ValueNode)",2,1,2
"org.apache.derby.impl.sql.compile.ConditionalNode.isConditionalNode(ValueNode)",2,1,2
"org.apache.derby.impl.sql.compile.ConditionalNode.isConstantExpression()",1,2,2
"org.apache.derby.impl.sql.compile.ConditionalNode.isEquivalent(ValueNode)",5,5,6
"org.apache.derby.impl.sql.compile.ConditionalNode.isNullNode(ValueNode)",2,2,3
"org.apache.derby.impl.sql.compile.ConditionalNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.ConditionalNode.printSubNodes(int)",1,4,4
"org.apache.derby.impl.sql.compile.ConditionalNode.recastNullNode(ValueNode,DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.ConditionalNode.recastNullNodes(ValueNodeList,DataTypeDescriptor,FromList,SubqueryList,Vector)",2,7,8
"org.apache.derby.impl.sql.compile.ConditionalNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.ConditionalNode.shouldCast(DataTypeDescriptor,DataTypeDescriptor)",2,3,4
"org.apache.derby.impl.sql.compile.ConstantNode.ConstantNode()",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.constantExpression(PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.ConstantNode.getClone()",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.getValue()",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.isCloneable()",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.isConstantExpression()",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.isEquivalent(ValueNode)",2,5,5
"org.apache.derby.impl.sql.compile.ConstantNode.isNull()",1,2,2
"org.apache.derby.impl.sql.compile.ConstantNode.setValue(DataValueDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.ConstantNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.bind(DDLStatementNode,DataDictionary)",5,5,6
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getAuxiliaryProviderList()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getBackingIndexName(DataDictionary)",1,2,2
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getBackingIndexUUID()",1,2,2
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getCheckColumnReferences()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getCheckCondition()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getColumnList()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getConstraintMoniker()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getConstraintText()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getConstraintType()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getDropBehavior()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getDropSchemaName()",2,2,2
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getProperties()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getReferenceCount()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getUUIDFactory()",1,2,2
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.getVerifyType()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.hasCheckConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.hasConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.hasForeignKeyConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.hasPrimaryKeyConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.hasUniqueKeyConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.init(Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.init(Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.init(Object,Object,Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.isEnabled()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.isReferenced()",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.requiresBackingIndex()",3,2,3
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.requiresUniqueIndex()",3,2,3
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.setAuxiliaryProviderList(ProviderList)",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.setCheckColumnReferences(int[])",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.setCheckCondition(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.setColumnList(ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.setProperties(Properties)",1,1,1
"org.apache.derby.impl.sql.compile.ConstraintDefinitionNode.toString()",2,4,4
"org.apache.derby.impl.sql.compile.CostEstimateImpl.CostEstimateImpl()",1,1,1
"org.apache.derby.impl.sql.compile.CostEstimateImpl.CostEstimateImpl(double,double,double)",1,3,5
"org.apache.derby.impl.sql.compile.CostEstimateImpl.add(CostEstimate,CostEstimate)",1,4,6
"org.apache.derby.impl.sql.compile.CostEstimateImpl.cloneMe()",1,1,1
"org.apache.derby.impl.sql.compile.CostEstimateImpl.compare(CostEstimate)",4,9,10
"org.apache.derby.impl.sql.compile.CostEstimateImpl.divide(double,CostEstimate)",1,4,6
"org.apache.derby.impl.sql.compile.CostEstimateImpl.getEstimatedCost()",1,1,1
"org.apache.derby.impl.sql.compile.CostEstimateImpl.getEstimatedRowCount()",1,1,1
"org.apache.derby.impl.sql.compile.CostEstimateImpl.isUninitialized()",1,1,3
"org.apache.derby.impl.sql.compile.CostEstimateImpl.multiply(double,CostEstimate)",1,4,6
"org.apache.derby.impl.sql.compile.CostEstimateImpl.rowCount()",1,1,1
"org.apache.derby.impl.sql.compile.CostEstimateImpl.setCost(CostEstimate)",1,1,1
"org.apache.derby.impl.sql.compile.CostEstimateImpl.setCost(double,double,double)",1,3,5
"org.apache.derby.impl.sql.compile.CostEstimateImpl.setEstimatedCost(double)",1,1,1
"org.apache.derby.impl.sql.compile.CostEstimateImpl.setEstimatedRowCount(long)",1,1,1
"org.apache.derby.impl.sql.compile.CostEstimateImpl.setSingleScanRowCount(double)",1,3,3
"org.apache.derby.impl.sql.compile.CostEstimateImpl.setState(double,double,CostEstimateImpl)",1,1,2
"org.apache.derby.impl.sql.compile.CostEstimateImpl.singleScanRowCount()",1,1,1
"org.apache.derby.impl.sql.compile.CountAggregateDefinition.CountAggregateDefinition()",1,1,1
"org.apache.derby.impl.sql.compile.CountAggregateDefinition.getAggregator(DataTypeDescriptor,StringBuffer)",1,1,1
"org.apache.derby.impl.sql.compile.CreateAliasNode.anyStringTypeDescriptor()",6,6,8
"org.apache.derby.impl.sql.compile.CreateAliasNode.bindStatement()",5,6,8
"org.apache.derby.impl.sql.compile.CreateAliasNode.init(Object,Object,Object,Object,Object,Object)",9,16,19
"org.apache.derby.impl.sql.compile.CreateAliasNode.makeConstantAction()",2,2,4
"org.apache.derby.impl.sql.compile.CreateAliasNode.statementToString()",4,2,4
"org.apache.derby.impl.sql.compile.CreateIndexNode.bindStatement()",7,7,7
"org.apache.derby.impl.sql.compile.CreateIndexNode.getBoundTableID()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.getColumnNames()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.getIndexName()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.getIndexTableName()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.getIndexType()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.getIsAscending()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.getKeyColumnIDs()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.getProperties()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.getUniqueness()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.init(Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.makeConstantAction()",1,6,7
"org.apache.derby.impl.sql.compile.CreateIndexNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.CreateIndexNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CreateIndexNode.verifyAndGetUniqueNames()",3,5,5
"org.apache.derby.impl.sql.compile.CreateRoleNode.bindStatement()",1,2,2
"org.apache.derby.impl.sql.compile.CreateRoleNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.CreateRoleNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.CreateRoleNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.CreateRoleNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CreateSchemaNode.bindStatement()",1,2,2
"org.apache.derby.impl.sql.compile.CreateSchemaNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.CreateSchemaNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.CreateSchemaNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.CreateSchemaNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CreateTableNode.bindStatement()",13,15,21
"org.apache.derby.impl.sql.compile.CreateTableNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.CreateTableNode.init(Object,Object,Object,Object)",1,3,4
"org.apache.derby.impl.sql.compile.CreateTableNode.init(Object,Object,Object,Object,Object)",1,3,3
"org.apache.derby.impl.sql.compile.CreateTableNode.makeConstantAction()",3,7,10
"org.apache.derby.impl.sql.compile.CreateTableNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.CreateTableNode.statementToString()",2,1,2
"org.apache.derby.impl.sql.compile.CreateTableNode.tempTableSchemaNameCheck(Object)",4,4,4
"org.apache.derby.impl.sql.compile.CreateTableNode.toString()",2,2,3
"org.apache.derby.impl.sql.compile.CreateTriggerNode.bindReferencesClause(DataDictionary)",9,15,21
"org.apache.derby.impl.sql.compile.CreateTriggerNode.bindStatement()",7,11,11
"org.apache.derby.impl.sql.compile.CreateTriggerNode.checkInvalidTriggerReference(String)",3,5,5
"org.apache.derby.impl.sql.compile.CreateTriggerNode.genColumnReferenceSQL(DataDictionary,String,String,boolean)",3,4,6
"org.apache.derby.impl.sql.compile.CreateTriggerNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,3,3
"org.apache.derby.impl.sql.compile.CreateTriggerNode.makeConstantAction()",1,2,4
"org.apache.derby.impl.sql.compile.CreateTriggerNode.printSubNodes(int)",1,5,5
"org.apache.derby.impl.sql.compile.CreateTriggerNode.referencesSessionSchema()",1,2,2
"org.apache.derby.impl.sql.compile.CreateTriggerNode.sortRefs(Vector,boolean)",3,8,10
"org.apache.derby.impl.sql.compile.CreateTriggerNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.CreateTriggerNode.toString()",2,4,4
"org.apache.derby.impl.sql.compile.CreateTriggerNode.validateReferencesClause(DataDictionary)",11,11,15
"org.apache.derby.impl.sql.compile.CreateViewNode.accept(Visitor)",2,4,5
"org.apache.derby.impl.sql.compile.CreateViewNode.bindStatement()",5,5,6
"org.apache.derby.impl.sql.compile.CreateViewNode.bindViewDefinition(DataDictionary,CompilerContext,LanguageConnectionContext,NodeFactory,ResultSetNode,ContextManager)",3,4,4
"org.apache.derby.impl.sql.compile.CreateViewNode.genColumnInfos(ColumnInfo[])",1,2,2
"org.apache.derby.impl.sql.compile.CreateViewNode.getCheckOption()",1,1,1
"org.apache.derby.impl.sql.compile.CreateViewNode.getColumnInfo()",1,1,1
"org.apache.derby.impl.sql.compile.CreateViewNode.getParsedQueryExpression()",1,1,1
"org.apache.derby.impl.sql.compile.CreateViewNode.getProviderInfo()",1,1,1
"org.apache.derby.impl.sql.compile.CreateViewNode.init(Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.CreateViewNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.CreateViewNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.CreateViewNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.CreateViewNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.CreateViewNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",2,2,4
"org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.init(Object)",1,2,3
"org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.isEquivalent(ValueNode)",2,1,2
"org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CurrentOfNode.bindExpressions(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.CurrentOfNode.bindNonVTITables(DataDictionary,FromList)",5,7,8
"org.apache.derby.impl.sql.compile.CurrentOfNode.estimateCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,RowOrdering)",1,2,2
"org.apache.derby.impl.sql.compile.CurrentOfNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.CurrentOfNode.getBaseCursorTargetTableName()",1,1,1
"org.apache.derby.impl.sql.compile.CurrentOfNode.getCursorName()",1,1,1
"org.apache.derby.impl.sql.compile.CurrentOfNode.getCursorStatement()",2,1,2
"org.apache.derby.impl.sql.compile.CurrentOfNode.getExposedName()",1,1,1
"org.apache.derby.impl.sql.compile.CurrentOfNode.getExposedTableName()",1,1,1
"org.apache.derby.impl.sql.compile.CurrentOfNode.getMatchingColumn(ColumnReference)",3,16,17
"org.apache.derby.impl.sql.compile.CurrentOfNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.CurrentOfNode.optimize(DataDictionary,PredicateList,double)",1,1,1
"org.apache.derby.impl.sql.compile.CurrentOfNode.preprocess(int,GroupByList,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.CurrentOfNode.printSubNodes(int)",1,2,2
"org.apache.derby.impl.sql.compile.CurrentOfNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.CurrentOfNode.updateTargetLockMode()",1,1,1
"org.apache.derby.impl.sql.compile.CurrentRowLocationNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.CurrentRowLocationNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.CurrentRowLocationNode.isEquivalent(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.CursorNode.activationKind()",1,1,1
"org.apache.derby.impl.sql.compile.CursorNode.bindStatement()",3,13,14
"org.apache.derby.impl.sql.compile.CursorNode.bindUpdateColumns(FromTable)",6,7,8
"org.apache.derby.impl.sql.compile.CursorNode.determineUpdateMode(DataDictionary)",4,4,6
"org.apache.derby.impl.sql.compile.CursorNode.genTargetResultColList()",3,2,4
"org.apache.derby.impl.sql.compile.CursorNode.generate(ActivationClassBuilder,MethodBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.CursorNode.getCursorInfo()",2,1,2
"org.apache.derby.impl.sql.compile.CursorNode.getSessionSchemaTableNamesForCursor()",1,4,5
"org.apache.derby.impl.sql.compile.CursorNode.getUpdatableColumns()",1,2,2
"org.apache.derby.impl.sql.compile.CursorNode.getUpdateBaseTableName()",1,2,2
"org.apache.derby.impl.sql.compile.CursorNode.getUpdateColumnNames()",2,1,2
"org.apache.derby.impl.sql.compile.CursorNode.getUpdateExposedTableName()",1,2,2
"org.apache.derby.impl.sql.compile.CursorNode.getUpdateMode()",1,1,1
"org.apache.derby.impl.sql.compile.CursorNode.getUpdateSchemaName()",1,2,2
"org.apache.derby.impl.sql.compile.CursorNode.getXML()",1,1,1
"org.apache.derby.impl.sql.compile.CursorNode.init(Object,Object,Object,Object,Object,Object)",1,4,4
"org.apache.derby.impl.sql.compile.CursorNode.needsSavepoint()",1,1,1
"org.apache.derby.impl.sql.compile.CursorNode.optimizeStatement()",1,3,3
"org.apache.derby.impl.sql.compile.CursorNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.CursorNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.CursorNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.CursorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.CursorNode.updateModeString(int)",6,2,6
"org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.bindExpression(FromList,SubqueryList,Vector)",2,2,2
"org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",2,1,2
"org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.getConstantLength()",14,5,14
"org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.getConstantNodeLength()",2,2,2
"org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.getReceiverInterfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.DB2LengthOperatorNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.activationKind()",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.bindName(DataDictionary)",1,2,2
"org.apache.derby.impl.sql.compile.DDLStatementNode.checkTableDescriptor(TableDescriptor,boolean)",5,3,7
"org.apache.derby.impl.sql.compile.DDLStatementNode.generate(ActivationClassBuilder,MethodBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.DDLStatementNode.getFullName()",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.getObjectName()",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.getRelativeName()",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.getSchemaDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.getSchemaDescriptor(boolean,boolean)",4,8,8
"org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor(TableName)",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor(UUID)",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.getTableDescriptor(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.initAndCheck(Object)",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.isAtomic()",1,1,1
"org.apache.derby.impl.sql.compile.DDLStatementNode.justGetDescriptor(TableName)",2,2,2
"org.apache.derby.impl.sql.compile.DDLStatementNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.DMLModStatementNode.adjustDeferredFlag(boolean)",1,1,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.bindCheckConstraint(NodeFactory,TableDescriptor,ResultColumnList,ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.bindConstraints(DataDictionary,NodeFactory,TableDescriptor,Dependent,ResultColumnList,int[],FormatableBitSet,boolean,boolean)",3,2,4
"org.apache.derby.impl.sql.compile.DMLModStatementNode.createConstraintDependencies(DataDictionary,ConstraintDescriptorList,Dependent)",1,8,8
"org.apache.derby.impl.sql.compile.DMLModStatementNode.createTriggerDependencies(GenericDescriptorList,Dependent)",1,3,3
"org.apache.derby.impl.sql.compile.DMLModStatementNode.fkSetupArrays(DataDictionary,ForeignKeyConstraintDescriptor,int,UUID[],long[],String[],boolean[],int[])",1,3,3
"org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckConstraints(ValueNode,ExpressionClassBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckConstraints(ValueNode,ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCheckTree(ConstraintDescriptorList,TableDescriptor)",1,3,3
"org.apache.derby.impl.sql.compile.DMLModStatementNode.generateCodeForTemporaryTable(ActivationClassBuilder,MethodBuilder)",1,4,4
"org.apache.derby.impl.sql.compile.DMLModStatementNode.generateFKInfo(ConstraintDescriptorList,DataDictionary,TableDescriptor,FormatableBitSet)",5,11,13
"org.apache.derby.impl.sql.compile.DMLModStatementNode.generateTriggerInfo(GenericDescriptorList,TableDescriptor,int[])",1,2,3
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getAffectedIndexes(TableDescriptor,ResultColumnList,FormatableBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getAllRelevantConstraints(DataDictionary,TableDescriptor,boolean,int[])",2,1,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getAllRelevantTriggers(DataDictionary,TableDescriptor,int[],boolean)",3,1,3
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getCheckConstraints()",1,2,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getFKInfo()",1,2,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getReadColMap(int,FormatableBitSet)",2,3,5
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList()",1,2,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList(FromBaseTable,ResultColumnList)",1,2,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getResultColumnList(ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getRowMap(FormatableBitSet,TableDescriptor)",2,2,4
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getSchemaDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getTriggerInfo()",1,2,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.getXAffectedIndexes(TableDescriptor,ResultColumnList,FormatableBitSet,Vector)",7,8,11
"org.apache.derby.impl.sql.compile.DMLModStatementNode.hasCheckConstraints(DataDictionary,TableDescriptor)",2,1,2
"org.apache.derby.impl.sql.compile.DMLModStatementNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.isAtomic()",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.markAffectedIndexes(Vector)",1,3,3
"org.apache.derby.impl.sql.compile.DMLModStatementNode.normalizeSynonymColumns(ResultColumnList,TableName)",6,5,6
"org.apache.derby.impl.sql.compile.DMLModStatementNode.optimizeStatement()",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.parseCheckConstraint(String,TableDescriptor)",1,4,4
"org.apache.derby.impl.sql.compile.DMLModStatementNode.remapReferencedColumns(ConstraintDescriptor,int[])",2,3,4
"org.apache.derby.impl.sql.compile.DMLModStatementNode.requiresDeferredProcessing()",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.setRefActionInfo(long,int[],String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.setTarget(QueryTreeNode)",1,4,4
"org.apache.derby.impl.sql.compile.DMLModStatementNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.DMLModStatementNode.verifyTargetTable()",8,8,8
"org.apache.derby.impl.sql.compile.DMLStatementNode.accept(Visitor)",2,4,4
"org.apache.derby.impl.sql.compile.DMLStatementNode.activationKind()",2,2,3
"org.apache.derby.impl.sql.compile.DMLStatementNode.bind(DataDictionary)",1,1,1
"org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressions()",1,2,2
"org.apache.derby.impl.sql.compile.DMLStatementNode.bindExpressionsWithTables()",1,2,2
"org.apache.derby.impl.sql.compile.DMLStatementNode.bindResultSetsWithTables(DataDictionary)",1,1,1
"org.apache.derby.impl.sql.compile.DMLStatementNode.bindTables(DataDictionary)",1,1,1
"org.apache.derby.impl.sql.compile.DMLStatementNode.generateParameterValueSet(ActivationClassBuilder)",2,2,3
"org.apache.derby.impl.sql.compile.DMLStatementNode.getPrivType()",1,1,1
"org.apache.derby.impl.sql.compile.DMLStatementNode.getResultSetNode()",1,1,1
"org.apache.derby.impl.sql.compile.DMLStatementNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.DMLStatementNode.isAtomic()",2,1,2
"org.apache.derby.impl.sql.compile.DMLStatementNode.makeResultDescription()",1,1,1
"org.apache.derby.impl.sql.compile.DMLStatementNode.optimizeStatement()",1,3,3
"org.apache.derby.impl.sql.compile.DMLStatementNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.DateTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.DateTypeCompiler.convertible(TypeId,boolean)",2,2,3
"org.apache.derby.impl.sql.compile.DateTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.DateTypeCompiler.getCorrespondingPrimitiveTypeName()",1,1,1
"org.apache.derby.impl.sql.compile.DateTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.DateTypeCompiler.nullMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.DateTypeCompiler.storable(TypeId,ClassFactory)",2,1,4
"org.apache.derby.impl.sql.compile.DefaultNode.bindExpression(FromList,SubqueryList,Vector)",2,5,5
"org.apache.derby.impl.sql.compile.DefaultNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.DefaultNode.getDefaultText()",1,1,1
"org.apache.derby.impl.sql.compile.DefaultNode.getDefaultTree()",1,1,1
"org.apache.derby.impl.sql.compile.DefaultNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.DefaultNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.DefaultNode.isEquivalent(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.DefaultNode.parseDefault(String,LanguageConnectionContext,CompilerContext)",1,4,4
"org.apache.derby.impl.sql.compile.DefaultNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.DefaultVTIModDeferPolicy.DefaultVTIModDeferPolicy(String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.DefaultVTIModDeferPolicy.alwaysDefer(int)",1,1,1
"org.apache.derby.impl.sql.compile.DefaultVTIModDeferPolicy.columnRequiresDefer(int,String,boolean)",4,2,5
"org.apache.derby.impl.sql.compile.DefaultVTIModDeferPolicy.modificationNotify(int,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.DefaultVTIModDeferPolicy.subselectRequiresDefer(int,String)",1,1,1
"org.apache.derby.impl.sql.compile.DefaultVTIModDeferPolicy.subselectRequiresDefer(int,String,String)",1,1,1
"org.apache.derby.impl.sql.compile.DeleteNode.bindStatement()",8,20,25
"org.apache.derby.impl.sql.compile.DeleteNode.correlateAddedColumns(ResultColumnList,FromTable)",2,3,5
"org.apache.derby.impl.sql.compile.DeleteNode.generate(ActivationClassBuilder,MethodBuilder)",1,12,16
"org.apache.derby.impl.sql.compile.DeleteNode.getDeleteReadMap(TableDescriptor,Vector,GenericDescriptorList,boolean[])",1,3,4
"org.apache.derby.impl.sql.compile.DeleteNode.getDependentTableNode(String,int,ColumnDescriptorList)",1,3,3
"org.apache.derby.impl.sql.compile.DeleteNode.getEmptyDeleteNode(String,String)",1,1,1
"org.apache.derby.impl.sql.compile.DeleteNode.getEmptyUpdateNode(String,String,ColumnDescriptorList)",1,1,1
"org.apache.derby.impl.sql.compile.DeleteNode.getPrivType()",1,1,1
"org.apache.derby.impl.sql.compile.DeleteNode.getReadMap(DataDictionary,TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.DeleteNode.getSetClause(TableName,ColumnDescriptorList)",1,3,3
"org.apache.derby.impl.sql.compile.DeleteNode.getStatementType()",1,1,1
"org.apache.derby.impl.sql.compile.DeleteNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.DeleteNode.makeConstantAction()",2,5,7
"org.apache.derby.impl.sql.compile.DeleteNode.optimizeStatement()",1,3,3
"org.apache.derby.impl.sql.compile.DeleteNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.DeleteNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.DistinctNode.estimateCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.DistinctNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.DistinctNode.init(Object,Object,Object)",1,4,4
"org.apache.derby.impl.sql.compile.DistinctNode.isOrderedOn(ColumnReference[],boolean,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.DistinctNode.optimize(DataDictionary,PredicateList,double)",1,1,1
"org.apache.derby.impl.sql.compile.DistinctNode.optimizeIt(Optimizer,OptimizablePredicateList,CostEstimate,RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.DistinctNode.pushOptPredicate(OptimizablePredicate)",1,1,1
"org.apache.derby.impl.sql.compile.DistinctNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.DropAliasNode.aliasTypeName(char)",2,2,4
"org.apache.derby.impl.sql.compile.DropAliasNode.bindStatement()",3,4,4
"org.apache.derby.impl.sql.compile.DropAliasNode.getAliasType()",1,1,1
"org.apache.derby.impl.sql.compile.DropAliasNode.init(Object,Object)",2,3,6
"org.apache.derby.impl.sql.compile.DropAliasNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.DropAliasNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.DropIndexNode.bindStatement()",4,5,5
"org.apache.derby.impl.sql.compile.DropIndexNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.DropIndexNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.DropRoleNode.bindStatement()",1,2,2
"org.apache.derby.impl.sql.compile.DropRoleNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.DropRoleNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.DropRoleNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.DropRoleNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.DropSchemaNode.bindStatement()",2,3,3
"org.apache.derby.impl.sql.compile.DropSchemaNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.DropSchemaNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.DropSchemaNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.DropSchemaNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.DropTableNode.bindStatement()",1,1,1
"org.apache.derby.impl.sql.compile.DropTableNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.DropTableNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.DropTableNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.DropTableNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.DropTableNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.DropTriggerNode.bindStatement()",2,3,3
"org.apache.derby.impl.sql.compile.DropTriggerNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.DropTriggerNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.DropViewNode.bindStatement()",1,2,2
"org.apache.derby.impl.sql.compile.DropViewNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.DropViewNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.DropViewNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.activationKind()",1,2,2
"org.apache.derby.impl.sql.compile.ExecSPSNode.bindStatement()",3,5,5
"org.apache.derby.impl.sql.compile.ExecSPSNode.executeSchemaName()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.executeStatementName()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.generate(ByteArray)",1,2,2
"org.apache.derby.impl.sql.compile.ExecSPSNode.getCursorInfo()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.getParameterTypes()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.getSPSDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.getSPSName()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.isAtomic()",1,2,2
"org.apache.derby.impl.sql.compile.ExecSPSNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.makeResultDescription()",1,1,1
"org.apache.derby.impl.sql.compile.ExecSPSNode.needsSavepoint()",1,2,2
"org.apache.derby.impl.sql.compile.ExecSPSNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.ExpressionClassBuilder(String,String,CompilerContext)",1,2,2
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.addColumnToOrdering(FormatableArrayHolder,int)",3,2,3
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.addItem(Object)",1,3,4
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.addNewArrayOfRows(int)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.beginConstructor()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.finishConstructor()",1,2,2
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.generateDataValue(MethodBuilder,TypeCompiler,int,LocalField)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.generateNull(MethodBuilder,TypeCompiler,int)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.generateNullWithExpress(MethodBuilder,TypeCompiler,int)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getClassBuilder()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getColumnOrdering(OrderedColumnList)",2,2,3
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getColumnOrdering(ResultColumnList)",1,4,6
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getConstructor()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getCurrentDateExpression(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getCurrentSetup()",2,1,2
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getCurrentTimeExpression(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getCurrentTimestampExpression(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getExecuteMethod()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getGeneratedClass(ByteArray)",2,2,3
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getRowLocationScanResultSetName()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.getTypeCompiler(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newExprFun()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newFieldDeclaration(int,String)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newFieldDeclaration(int,String,String)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newFieldName()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newGeneratedFun(String,String,int,String[])",1,2,2
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newGeneratedFun(String,int)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newGeneratedFun(String,int,String[])",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newRowLocationScanResultSetName()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.newUserExprFun()",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.pushColumnReference(MethodBuilder,int,int)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.pushDataValueFactory(MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.pushGetExecutionFactoryExpression(MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.pushGetResultSetFactoryExpression(MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.pushMethodReference(MethodBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.pushPVSReference(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ExpressionClassBuilder.pushThisAsActivation(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ExtractOperatorNode.bindExpression(FromList,SubqueryList,Vector)",4,6,12
"org.apache.derby.impl.sql.compile.ExtractOperatorNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ExtractOperatorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.bind(DDLStatementNode,DataDictionary)",4,10,11
"org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.getPrivType()",1,1,1
"org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.getRefTableName()",1,1,1
"org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.getReferencedConstraintInfo()",1,2,2
"org.apache.derby.impl.sql.compile.FKConstraintDefinitionNode.init(Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.LOJ_reorderable(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.LOJgetReferencedTables(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.accept(Visitor)",2,8,9
"org.apache.derby.impl.sql.compile.FromBaseTable.addColsToList(ResultColumnList,FormatableBitSet)",3,3,4
"org.apache.derby.impl.sql.compile.FromBaseTable.adjustForSortElimination()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.adjustForSortElimination(RequiredRowOrdering)",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.baseRowCount()",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.bindExpressions(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.bindNonVTITables(DataDictionary,FromList)",3,10,10
"org.apache.derby.impl.sql.compile.FromBaseTable.bindResultColumns(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.bindTableDescriptor()",4,4,4
"org.apache.derby.impl.sql.compile.FromBaseTable.canBeOrdered()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.changeAccessPath()",7,28,28
"org.apache.derby.impl.sql.compile.FromBaseTable.clearDependency(Vector)",1,3,3
"org.apache.derby.impl.sql.compile.FromBaseTable.convertAbsoluteToRelativeColumnPosition(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.cursorTargetTable()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.disableBulkFetch()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.doSpecialMaxScan()",1,5,5
"org.apache.derby.impl.sql.compile.FromBaseTable.estimateCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,RowOrdering)",13,71,100
"org.apache.derby.impl.sql.compile.FromBaseTable.forUpdate()",1,1,3
"org.apache.derby.impl.sql.compile.FromBaseTable.genProjectRestrict(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.genResultColList()",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.generateDistinctScan(ExpressionClassBuilder,MethodBuilder)",1,4,6
"org.apache.derby.impl.sql.compile.FromBaseTable.generateMaxSpecialResultSet(ExpressionClassBuilder,MethodBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.FromBaseTable.generateRefActionDependentTableScan(ExpressionClassBuilder,MethodBuilder)",1,2,3
"org.apache.derby.impl.sql.compile.FromBaseTable.generateResultSet(ExpressionClassBuilder,MethodBuilder)",4,6,7
"org.apache.derby.impl.sql.compile.FromBaseTable.getAllResultColumns(TableName)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getBaseCostController()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getBaseTableName()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getConglomDescs()",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.getDefaultBulkFetch()",2,2,3
"org.apache.derby.impl.sql.compile.FromBaseTable.getExistsBaseTable()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getExposedName()",2,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.getExposedTableName()",2,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.getFinalCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getFirstConglom()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getFromTableByName(String,String,boolean)",11,4,20
"org.apache.derby.impl.sql.compile.FromBaseTable.getMatchingColumn(ColumnReference)",1,11,11
"org.apache.derby.impl.sql.compile.FromBaseTable.getNextConglom(ConglomerateDescriptor)",4,1,4
"org.apache.derby.impl.sql.compile.FromBaseTable.getRowTemplate(ConglomerateDescriptor,StoreCostController)",2,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.getScanArguments(ExpressionClassBuilder,MethodBuilder)",1,7,10
"org.apache.derby.impl.sql.compile.FromBaseTable.getStoreCostController(ConglomerateDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getTableDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getTableName()",1,4,5
"org.apache.derby.impl.sql.compile.FromBaseTable.getTableNameField()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.getUserSpecifiedIndexName()",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.init(Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.initialCapacity()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.isBaseTable()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.isCoveringIndex(ConglomerateDescriptor)",8,2,8
"org.apache.derby.impl.sql.compile.FromBaseTable.isMaterializable()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.isNotExists()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet()",3,4,5
"org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(ConglomerateDescriptor,OptimizablePredicateList)",6,4,8
"org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowResultSet(OptimizablePredicateList)",3,2,3
"org.apache.derby.impl.sql.compile.FromBaseTable.isOneRowScan()",2,1,2
"org.apache.derby.impl.sql.compile.FromBaseTable.isOrdered(ColumnReference[],ConglomerateDescriptor)",9,4,11
"org.apache.derby.impl.sql.compile.FromBaseTable.isOrderedOn(ColumnReference[],boolean,Vector)",4,4,6
"org.apache.derby.impl.sql.compile.FromBaseTable.isPossibleDistinctScan(Set)",2,3,4
"org.apache.derby.impl.sql.compile.FromBaseTable.isStrictlyOrdered(ColumnReference[],ConglomerateDescriptor)",9,6,9
"org.apache.derby.impl.sql.compile.FromBaseTable.isTargetTable()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.legalJoinOrder(JBitSet)",2,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.loadFactor()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.mapAbsoluteToRelativeColumnPosition(int)",2,3,5
"org.apache.derby.impl.sql.compile.FromBaseTable.markAsCursorTargetTable()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.markForDistinctScan()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.markUpdated(ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.memoryUsageOK(double,int)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.newResultColumns(ResultColumnList,ConglomerateDescriptor,ConglomerateDescriptor,boolean)",1,4,4
"org.apache.derby.impl.sql.compile.FromBaseTable.nextAccessPath(Optimizer,OptimizablePredicateList,RowOrdering)",7,24,29
"org.apache.derby.impl.sql.compile.FromBaseTable.optimizeIt(Optimizer,OptimizablePredicateList,CostEstimate,RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.preprocess(int,GroupByList,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.pullOptPredicates(OptimizablePredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.pushIndexName(ConglomerateDescriptor,MethodBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.FromBaseTable.pushOptPredicate(OptimizablePredicate)",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.referencesTarget(String,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.scanCostAfterSelectivity(double,double,double,boolean)",1,2,5
"org.apache.derby.impl.sql.compile.FromBaseTable.setExistsBaseTable(boolean,JBitSet,boolean)",1,1,2
"org.apache.derby.impl.sql.compile.FromBaseTable.setLockingBasedOnThreshold(Optimizer,double)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.setRefActionInfo(long,int[],String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.setTableProperties(Properties)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.startOptimizing(Optimizer,RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.FromBaseTable.supersetOfUniqueIndex(JBitSet[])",6,5,7
"org.apache.derby.impl.sql.compile.FromBaseTable.supersetOfUniqueIndex(boolean[])",7,2,7
"org.apache.derby.impl.sql.compile.FromBaseTable.toString()",2,5,5
"org.apache.derby.impl.sql.compile.FromBaseTable.uniqueJoin(OptimizablePredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.FromBaseTable.updateTargetLockMode()",3,3,5
"org.apache.derby.impl.sql.compile.FromBaseTable.verifyProperties(DataDictionary)",24,25,29
"org.apache.derby.impl.sql.compile.FromList.LOJ_reorderable(int)",2,1,2
"org.apache.derby.impl.sql.compile.FromList.accept(Visitor)",1,2,2
"org.apache.derby.impl.sql.compile.FromList.addFromTable(FromTable)",5,5,5
"org.apache.derby.impl.sql.compile.FromList.bindColumnReference(ColumnReference)",7,7,10
"org.apache.derby.impl.sql.compile.FromList.bindExpressions(FromList)",1,2,3
"org.apache.derby.impl.sql.compile.FromList.bindResultColumns(FromList)",1,4,4
"org.apache.derby.impl.sql.compile.FromList.bindTables(DataDictionary,FromList)",1,3,5
"org.apache.derby.impl.sql.compile.FromList.bindUntypedNullsToResultColumns(ResultColumnList)",1,2,2
"org.apache.derby.impl.sql.compile.FromList.decrementLevel(int)",1,3,3
"org.apache.derby.impl.sql.compile.FromList.expandAll(TableName)",5,6,9
"org.apache.derby.impl.sql.compile.FromList.flattenFromTables(ResultColumnList,PredicateList,SubqueryList,GroupByList)",1,15,15
"org.apache.derby.impl.sql.compile.FromList.genExistsBaseTables(JBitSet,FromList,boolean)",1,10,10
"org.apache.derby.impl.sql.compile.FromList.getFromTableByName(String,String,boolean)",3,2,3
"org.apache.derby.impl.sql.compile.FromList.getFromTableByResultColumn(ResultColumn)",3,3,4
"org.apache.derby.impl.sql.compile.FromList.getOptimizable(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromList.getTableNumbers()",3,2,3
"org.apache.derby.impl.sql.compile.FromList.hasOuterJoins()",3,2,3
"org.apache.derby.impl.sql.compile.FromList.hashJoinSpecified()",3,3,4
"org.apache.derby.impl.sql.compile.FromList.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.FromList.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.FromList.initAccessPaths(Optimizer)",1,2,2
"org.apache.derby.impl.sql.compile.FromList.legalJoinOrder(int)",3,2,3
"org.apache.derby.impl.sql.compile.FromList.markAsTransparent()",1,1,1
"org.apache.derby.impl.sql.compile.FromList.optimizeJoinOrder()",1,1,1
"org.apache.derby.impl.sql.compile.FromList.preprocess(int,GroupByList,ValueNode)",1,2,2
"org.apache.derby.impl.sql.compile.FromList.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.FromList.pushPredicates(PredicateList)",1,3,3
"org.apache.derby.impl.sql.compile.FromList.reOrder(int[])",1,8,10
"org.apache.derby.impl.sql.compile.FromList.referencesSessionSchema()",4,2,4
"org.apache.derby.impl.sql.compile.FromList.referencesTarget(String,boolean)",3,2,3
"org.apache.derby.impl.sql.compile.FromList.rejectParameters()",1,2,2
"org.apache.derby.impl.sql.compile.FromList.returnsAtMostSingleRow(ResultColumnList,ValueNode,PredicateList,DataDictionary)",15,21,31
"org.apache.derby.impl.sql.compile.FromList.setLevel(int)",1,2,2
"org.apache.derby.impl.sql.compile.FromList.setOptimizable(int,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.FromList.setProperties(Properties)",8,8,8
"org.apache.derby.impl.sql.compile.FromList.tableNumberIsNotExists(int)",4,3,4
"org.apache.derby.impl.sql.compile.FromList.updateTargetLockMode()",1,3,3
"org.apache.derby.impl.sql.compile.FromList.useStatistics()",1,1,1
"org.apache.derby.impl.sql.compile.FromList.verifyProperties(DataDictionary)",1,2,2
"org.apache.derby.impl.sql.compile.FromSubquery.bindExpressions(FromList)",1,6,6
"org.apache.derby.impl.sql.compile.FromSubquery.bindNonVTITables(DataDictionary,FromList)",1,2,2
"org.apache.derby.impl.sql.compile.FromSubquery.bindUntypedNullsToResultColumns(ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.bindVTITables(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.decrementLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.disablePrivilegeCollection()",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.extractSubquery(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.flatten(ResultColumnList,PredicateList,SubqueryList,GroupByList)",1,7,7
"org.apache.derby.impl.sql.compile.FromSubquery.getAllResultColumns(TableName)",4,4,6
"org.apache.derby.impl.sql.compile.FromSubquery.getExposedName()",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.getFromTableByName(String,String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.getMatchingColumn(ColumnReference)",1,5,5
"org.apache.derby.impl.sql.compile.FromSubquery.getSubquery()",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.preprocess(int,GroupByList,FromList)",2,5,5
"org.apache.derby.impl.sql.compile.FromSubquery.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.FromSubquery.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.referencesTarget(String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.rejectParameters()",1,1,1
"org.apache.derby.impl.sql.compile.FromSubquery.toString()",2,2,2
"org.apache.derby.impl.sql.compile.FromTable.LOJ_reorderable(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.assignCostEstimate(CostEstimate)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.canBeOrdered()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.considerSortAvoidancePath()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.convertAbsoluteToRelativeColumnPosition(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.cursorTargetTable()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.decrementLevel(int)",1,3,5
"org.apache.derby.impl.sql.compile.FromTable.estimateCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,RowOrdering)",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.feasibleJoinStrategy(OptimizablePredicateList,Optimizer)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.fillInReferencedTableMap(JBitSet)",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.flatten(ResultColumnList,PredicateList,SubqueryList,GroupByList)",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.forUpdate()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getBaseTableName()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getBestAccessPath()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getBestSortAvoidancePath()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getCorrelationName()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getCostEstimate(Optimizer)",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.getCurrentAccessPath()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getExposedName()",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.getFinalCostEstimate()",2,2,3
"org.apache.derby.impl.sql.compile.FromTable.getFromTableByName(String,String,boolean)",3,1,3
"org.apache.derby.impl.sql.compile.FromTable.getLevel()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getName()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getNumColumnsReturned()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getOrigTableName()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getPerRowUsage()",1,7,8
"org.apache.derby.impl.sql.compile.FromTable.getProperties()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getRefCols()",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.getResultColumnsForList(TableName,ResultColumnList,TableName)",2,6,7
"org.apache.derby.impl.sql.compile.FromTable.getSchemaDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getSchemaDescriptor(TableName)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getScratchCostEstimate(Optimizer)",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.getTableDescriptor()",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.getTableName()",2,2,3
"org.apache.derby.impl.sql.compile.FromTable.getTableNumber()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getTrulyTheBestAccessPath()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.getUserSpecifiedJoinStrategy()",2,1,2
"org.apache.derby.impl.sql.compile.FromTable.hasTableNumber()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.hashKeyColumns()",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.initAccessPaths(Optimizer)",1,1,5
"org.apache.derby.impl.sql.compile.FromTable.initialCapacity()",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.isBaseTable()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.isCoveringIndex(ConglomerateDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.isFlattenableJoinNode()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.isMaterializable()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.isOneRowScan()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.isTargetTable()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.legalJoinOrder(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.loadFactor()",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.markUpdatableByCursor(Vector)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.maxCapacity(JoinStrategy,int)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.memoryUsageOK(double,int)",2,1,3
"org.apache.derby.impl.sql.compile.FromTable.modifyAccessPath(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.needsSpecialRCLBinding()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.nextAccessPath(Optimizer,OptimizablePredicateList,RowOrdering)",4,5,5
"org.apache.derby.impl.sql.compile.FromTable.optimizeIt(Optimizer,OptimizablePredicateList,CostEstimate,RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.optimizeSubqueries(DataDictionary,double)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.pullOptPredicates(OptimizablePredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.pushExpressions(PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.pushOptPredicate(OptimizablePredicate)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.rememberAsBest(int,Optimizer)",2,6,8
"org.apache.derby.impl.sql.compile.FromTable.rememberJoinStrategyAsBest(AccessPath)",1,3,3
"org.apache.derby.impl.sql.compile.FromTable.rememberSortAvoidancePath()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.resetJoinStrategies(Optimizer)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.setCostEstimate(CostEstimate)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.setHashKeyColumns(int[])",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.setLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.setOrigTableName(TableName)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.setProperties(Properties)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.setTableNumber(int)",1,2,2
"org.apache.derby.impl.sql.compile.FromTable.startOptimizing(Optimizer,RowOrdering)",1,4,4
"org.apache.derby.impl.sql.compile.FromTable.supportsMultipleInstantiations()",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.tellRowOrderingAboutConstantColumns(RowOrdering,OptimizablePredicateList)",1,5,5
"org.apache.derby.impl.sql.compile.FromTable.toString()",2,3,3
"org.apache.derby.impl.sql.compile.FromTable.transformOuterJoins(ValueNode,int)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.uniqueJoin(OptimizablePredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.FromTable.updateBestPlanMap(short,Object)",6,6,12
"org.apache.derby.impl.sql.compile.FromTable.verifyProperties(DataDictionary)",10,10,12
"org.apache.derby.impl.sql.compile.FromVTI.accept(Visitor)",2,3,3
"org.apache.derby.impl.sql.compile.FromVTI.adjustForSortElimination()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.bindExpressions(FromList)",1,3,4
"org.apache.derby.impl.sql.compile.FromVTI.bindNonVTITables(DataDictionary,FromList)",1,2,2
"org.apache.derby.impl.sql.compile.FromVTI.bindVTITables(FromList)",8,14,16
"org.apache.derby.impl.sql.compile.FromVTI.createResultColumnsForTableFunction(TypeDescriptor)",1,2,2
"org.apache.derby.impl.sql.compile.FromVTI.estimateCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,RowOrdering)",2,7,8
"org.apache.derby.impl.sql.compile.FromVTI.genProjectRestrict(int)",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.genResultColList(TableDescriptor)",1,2,2
"org.apache.derby.impl.sql.compile.FromVTI.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.generateConstructor(ActivationClassBuilder,MethodBuilder,boolean)",1,5,6
"org.apache.derby.impl.sql.compile.FromVTI.getAllResultColumns(TableName)",4,4,6
"org.apache.derby.impl.sql.compile.FromVTI.getDeferralControl()",2,2,3
"org.apache.derby.impl.sql.compile.FromVTI.getExposedName()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.getExposedTableName()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.getForUpdateColumnList()",1,3,4
"org.apache.derby.impl.sql.compile.FromVTI.getMatchingColumn(ColumnReference)",2,4,5
"org.apache.derby.impl.sql.compile.FromVTI.getMethodCall()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.getNewInstance()",3,18,20
"org.apache.derby.impl.sql.compile.FromVTI.getNodesFromParameters(Class)",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.getOriginalSQL()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.getResultSetMetaData()",3,6,9
"org.apache.derby.impl.sql.compile.FromVTI.getResultSetType()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.getScanArguments(ActivationClassBuilder,MethodBuilder)",1,8,8
"org.apache.derby.impl.sql.compile.FromVTI.getSharedState(String)",2,1,3
"org.apache.derby.impl.sql.compile.FromVTI.getSpecialTriggerVTITableName(LanguageConnectionContext,String)",4,5,5
"org.apache.derby.impl.sql.compile.FromVTI.getStatementIsolationLevel()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.getVTICosting()",2,2,4
"org.apache.derby.impl.sql.compile.FromVTI.getVTIName()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.implementsDerbyStyleVTICosting(String)",3,3,5
"org.apache.derby.impl.sql.compile.FromVTI.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.init(Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.isCompileTime()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.isConstructor()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.isMaterializable()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.isUpdatableCursor()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.legalJoinOrder(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.markUpdatableByCursor(Vector)",1,2,2
"org.apache.derby.impl.sql.compile.FromVTI.modifyAccessPath(JBitSet)",2,3,3
"org.apache.derby.impl.sql.compile.FromVTI.needsSpecialRCLBinding()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.performMaterialization(JBitSet)",1,5,5
"org.apache.derby.impl.sql.compile.FromVTI.preprocess(int,GroupByList,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.printSubNodes(int)",1,5,5
"org.apache.derby.impl.sql.compile.FromVTI.pushOptPredicate(OptimizablePredicate)",3,2,4
"org.apache.derby.impl.sql.compile.FromVTI.referencesTarget(String,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.FromVTI.setSharedState(String,Serializable)",2,1,3
"org.apache.derby.impl.sql.compile.FromVTI.setTarget()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.supportsMultipleInstantiations()",1,1,1
"org.apache.derby.impl.sql.compile.FromVTI.toString()",2,2,2
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.GetCurrentConnectionNode()",1,1,1
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.bindParameter()",1,1,1
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.categorize(JBitSet,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.checkReliability(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.GetCurrentConnectionNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.GrantNode.bindStatement()",1,1,1
"org.apache.derby.impl.sql.compile.GrantNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.GrantNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.GrantNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.GrantNode.toString()",2,4,4
"org.apache.derby.impl.sql.compile.GrantRoleNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.GrantRoleNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.GrantRoleNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.GrantRoleNode.toString()",2,6,6
"org.apache.derby.impl.sql.compile.GroupByColumn.bindExpression(FromList,SubqueryList,Vector)",3,3,3
"org.apache.derby.impl.sql.compile.GroupByColumn.getColumnExpression()",1,1,1
"org.apache.derby.impl.sql.compile.GroupByColumn.getColumnName()",1,1,1
"org.apache.derby.impl.sql.compile.GroupByColumn.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByColumn.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.GroupByColumn.setColumnExpression(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByColumn.toString()",2,2,2
"org.apache.derby.impl.sql.compile.GroupByList.addGroupByColumn(GroupByColumn)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByList.bindGroupByColumns(SelectNode,Vector)",7,11,12
"org.apache.derby.impl.sql.compile.GroupByList.findGroupingColumn(ValueNode)",3,2,3
"org.apache.derby.impl.sql.compile.GroupByList.getGroupByColumn(int)",1,3,3
"org.apache.derby.impl.sql.compile.GroupByList.getNumNeedToAddGroupingCols()",1,1,1
"org.apache.derby.impl.sql.compile.GroupByList.preprocess(int,FromList,SubqueryList,PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.GroupByList.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.GroupByList.remapColumnReferencesToExpressions()",1,3,3
"org.apache.derby.impl.sql.compile.GroupByList.toString()",2,3,3
"org.apache.derby.impl.sql.compile.GroupByNode.ExpressionSorter.compare(Object,Object)",1,1,2
"org.apache.derby.impl.sql.compile.GroupByNode.addAggregateColumns()",1,3,3
"org.apache.derby.impl.sql.compile.GroupByNode.addAggregates()",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.addDistinctAggregatesToOrderBy()",4,6,7
"org.apache.derby.impl.sql.compile.GroupByNode.addNewColumnsForAggregation()",4,6,6
"org.apache.derby.impl.sql.compile.GroupByNode.addNewPRNode()",1,3,3
"org.apache.derby.impl.sql.compile.GroupByNode.addUnAggColumns()",1,6,7
"org.apache.derby.impl.sql.compile.GroupByNode.considerPostOptimizeOptimizations(boolean)",9,16,21
"org.apache.derby.impl.sql.compile.GroupByNode.estimateCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.flattenableInFromSubquery(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.genGroupedAggregateResultSet(ActivationClassBuilder,MethodBuilder)",1,1,2
"org.apache.derby.impl.sql.compile.GroupByNode.genScalarAggregateResultSet(ActivationClassBuilder,MethodBuilder)",1,1,2
"org.apache.derby.impl.sql.compile.GroupByNode.generate(ActivationClassBuilder,MethodBuilder)",1,8,8
"org.apache.derby.impl.sql.compile.GroupByNode.getColumnReference(ResultColumn,DataDictionary)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.getIsInSortedOrder()",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.getParent()",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.init(Object,Object,Object,Object,Object,Object,Object)",4,8,9
"org.apache.derby.impl.sql.compile.GroupByNode.isOneRowResultSet()",1,2,2
"org.apache.derby.impl.sql.compile.GroupByNode.makeResultDescriptors()",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.optimize(DataDictionary,PredicateList,double)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.optimizeIt(Optimizer,OptimizablePredicateList,CostEstimate,RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.pushOptPredicate(OptimizablePredicate)",1,1,1
"org.apache.derby.impl.sql.compile.GroupByNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_bindResultColumns(boolean)",1,2,2
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJ_reorderable(int)",18,27,40
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.LOJgetNPReferencedTables(int)",2,2,3
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.addOuterJoinArguments(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.adjustNumberOfRowsReturned(CostEstimate)",1,2,2
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.getLogicalLeftResultSet()",2,1,2
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.getLogicalRightResultSet()",2,1,2
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.getNumJoinArguments()",1,1,1
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.init(Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.isRightOuterJoin()",1,1,1
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.oneRowRightSide(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.preprocess(int,GroupByList,FromList)",1,3,3
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushExpressions(PredicateList)",3,2,3
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.pushOptPredicate(OptimizablePredicate)",2,2,2
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.HalfOuterJoinNode.transformOuterJoins(ValueNode,int)",8,11,11
"org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.HasCorrelatedCRsVisitor()",1,1,1
"org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.hasCorrelatedCRs()",1,1,1
"org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.setHasCorrelatedCRs(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.skipChildren(Visitable)",1,1,1
"org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.HasCorrelatedCRsVisitor.visit(Visitable)",1,6,9
"org.apache.derby.impl.sql.compile.HasNodeVisitor.HasNodeVisitor(Class)",1,1,1
"org.apache.derby.impl.sql.compile.HasNodeVisitor.HasNodeVisitor(Class,Class)",1,1,1
"org.apache.derby.impl.sql.compile.HasNodeVisitor.hasNode()",1,1,1
"org.apache.derby.impl.sql.compile.HasNodeVisitor.reset()",1,1,1
"org.apache.derby.impl.sql.compile.HasNodeVisitor.skipChildren(Visitable)",1,2,2
"org.apache.derby.impl.sql.compile.HasNodeVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.HasNodeVisitor.visit(Visitable)",1,1,2
"org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor.HasVariantValueNodeVisitor()",1,2,2
"org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor.HasVariantValueNodeVisitor(int,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor.hasVariant()",1,1,1
"org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor.skipChildren(Visitable)",1,1,1
"org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.HasVariantValueNodeVisitor.visit(Visitable)",3,3,5
"org.apache.derby.impl.sql.compile.HashJoinStrategy.HashJoinStrategy()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.divideUpPredicateLists(Optimizable,OptimizablePredicateList,OptimizablePredicateList,OptimizablePredicateList,OptimizablePredicateList,DataDictionary)",2,16,17
"org.apache.derby.impl.sql.compile.HashJoinStrategy.doesMaterialization()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.estimateCost(Optimizable,OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,CostEstimate)",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.feasible(Optimizable,OptimizablePredicateList,Optimizer)",6,10,13
"org.apache.derby.impl.sql.compile.HashJoinStrategy.findHashKeyColumns(Optimizable,ConglomerateDescriptor,OptimizablePredicateList)",3,7,10
"org.apache.derby.impl.sql.compile.HashJoinStrategy.getBasePredicates(OptimizablePredicateList,OptimizablePredicateList,Optimizable)",1,4,4
"org.apache.derby.impl.sql.compile.HashJoinStrategy.getName()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.getScanArgs(TransactionController,MethodBuilder,Optimizable,OptimizablePredicateList,OptimizablePredicateList,ExpressionClassBuilderInterface,int,MethodBuilder,int,int,int,boolean,int,int,boolean)",1,4,4
"org.apache.derby.impl.sql.compile.HashJoinStrategy.halfOuterJoinResultSetMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.ignoreBulkFetch()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.isHashJoin()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.joinResultSetMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.maxCapacity(int,int,double)",3,1,3
"org.apache.derby.impl.sql.compile.HashJoinStrategy.multiplyBaseCostByOuterRows()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.nonBasePredicateSelectivity(Optimizable,OptimizablePredicateList)",4,3,4
"org.apache.derby.impl.sql.compile.HashJoinStrategy.putBasePredicates(OptimizablePredicateList,OptimizablePredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.HashJoinStrategy.resultSetMethodName(boolean,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.scanCostType()",1,1,1
"org.apache.derby.impl.sql.compile.HashJoinStrategy.toString()",1,1,1
"org.apache.derby.impl.sql.compile.HashTableNode.accept(Visitor)",2,6,6
"org.apache.derby.impl.sql.compile.HashTableNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.HashTableNode.generateMinion(ExpressionClassBuilder,MethodBuilder,boolean)",1,11,11
"org.apache.derby.impl.sql.compile.HashTableNode.generateResultSet(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.HashTableNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.HashTableNode.modifyAccessPath(JBitSet,Optimizer)",1,1,1
"org.apache.derby.impl.sql.compile.HashTableNode.printSubNodes(int)",1,4,4
"org.apache.derby.impl.sql.compile.InListOperatorNode.eliminateNots(boolean)",2,5,6
"org.apache.derby.impl.sql.compile.InListOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.InListOperatorNode.generateListAsArray(ExpressionClassBuilder,MethodBuilder)",1,8,8
"org.apache.derby.impl.sql.compile.InListOperatorNode.generateStartStopKey(boolean,boolean,ExpressionClassBuilder,MethodBuilder)",1,5,14
"org.apache.derby.impl.sql.compile.InListOperatorNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.InListOperatorNode.isOrdered()",1,1,1
"org.apache.derby.impl.sql.compile.InListOperatorNode.markAsOrdered()",1,1,1
"org.apache.derby.impl.sql.compile.InListOperatorNode.markSortDescending()",1,1,1
"org.apache.derby.impl.sql.compile.InListOperatorNode.preprocess(int,FromList,SubqueryList,PredicateList)",5,8,8
"org.apache.derby.impl.sql.compile.InListOperatorNode.selectivity(Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.InListOperatorNode.selfReference(ColumnReference)",3,2,3
"org.apache.derby.impl.sql.compile.InListOperatorNode.shallowCopy()",1,3,3
"org.apache.derby.impl.sql.compile.InListOperatorNode.sortDescending()",1,1,1
"org.apache.derby.impl.sql.compile.InListOperatorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.adjustForSortElimination()",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.adjustForSortElimination(RequiredRowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.decrementLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.forUpdate()",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.generate(ActivationClassBuilder,MethodBuilder)",1,7,7
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getFinalCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getIndexColMapping()",1,4,4
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.getTrulyTheBestAccessPath()",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.isNotExists()",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.isOneRowResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.isOrderedOn(ColumnReference[],boolean,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.IndexToBaseRowNode.updateTargetLockMode()",1,1,1
"org.apache.derby.impl.sql.compile.InsertNode.bindStatement()",10,22,25
"org.apache.derby.impl.sql.compile.InsertNode.enhanceAndCheckForAutoincrement(ResultSetNode,boolean,int,int[],DataDictionary,TableDescriptor,FromVTI)",1,9,9
"org.apache.derby.impl.sql.compile.InsertNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.InsertNode.getAffectedIndexes(TableDescriptor)",1,2,2
"org.apache.derby.impl.sql.compile.InsertNode.getIndexedCols()",1,2,3
"org.apache.derby.impl.sql.compile.InsertNode.getPrivType()",1,1,1
"org.apache.derby.impl.sql.compile.InsertNode.getStatementType()",1,1,1
"org.apache.derby.impl.sql.compile.InsertNode.getStatementType(Properties)",1,3,4
"org.apache.derby.impl.sql.compile.InsertNode.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.InsertNode.makeConstantAction()",2,4,6
"org.apache.derby.impl.sql.compile.InsertNode.printSubNodes(int)",1,4,4
"org.apache.derby.impl.sql.compile.InsertNode.referencesSessionSchema()",1,3,3
"org.apache.derby.impl.sql.compile.InsertNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.InsertNode.toString()",2,4,4
"org.apache.derby.impl.sql.compile.InsertNode.verifyBulkInsert(DataDictionary,String)",1,1,1
"org.apache.derby.impl.sql.compile.InsertNode.verifyTargetProperties(DataDictionary)",6,7,8
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.addNewNodes()",3,1,3
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.estimateCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.getFinalCostEstimate()",2,1,2
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.getOpType()",1,1,1
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.getOperatorName()",3,3,4
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.getRowCountEstimate(double,double)",3,4,4
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.getSingleScanRowCountEstimate(double,double)",1,1,1
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.init(Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.modifyAccessPath(JBitSet)",2,1,2
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.modifyAccessPaths()",2,1,2
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.preprocess(int,GroupByList,FromList)",4,4,8
"org.apache.derby.impl.sql.compile.IntersectOrExceptNode.pushOrderingDown(ResultSetNode)",1,4,4
"org.apache.derby.impl.sql.compile.IsNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.IsNode.changeToCNF(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.IsNode.eliminateNots(boolean)",1,1,2
"org.apache.derby.impl.sql.compile.IsNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,2
"org.apache.derby.impl.sql.compile.IsNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.IsNode.putAndsOnTop()",1,1,1
"org.apache.derby.impl.sql.compile.IsNode.verifyChangeToCNF()",1,2,2
"org.apache.derby.impl.sql.compile.IsNode.verifyPutAndsOnTop()",1,2,2
"org.apache.derby.impl.sql.compile.IsNullNode.bindParameter()",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.compareWithKnownConstant(Optimizable,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.equalsComparisonWithConstantExpression(Optimizable)",2,3,5
"org.apache.derby.impl.sql.compile.IsNullNode.generateNegate(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.generateOperator(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.getCompareValue(Optimizable)",1,2,2
"org.apache.derby.impl.sql.compile.IsNullNode.getNegation(ValueNode)",1,5,5
"org.apache.derby.impl.sql.compile.IsNullNode.getOperator()",1,4,4
"org.apache.derby.impl.sql.compile.IsNullNode.getReceiverInterfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.getStartOperator(Optimizable)",1,3,3
"org.apache.derby.impl.sql.compile.IsNullNode.getStopOperator(Optimizable)",1,3,3
"org.apache.derby.impl.sql.compile.IsNullNode.getTransitiveSearchClause(ColumnReference)",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.isNotNullNode()",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.isNullNode()",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.isRelationalOperator()",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.optimizableEqualityNode(Optimizable,int,boolean)",3,2,4
"org.apache.derby.impl.sql.compile.IsNullNode.selectivity(Optimizable)",2,4,4
"org.apache.derby.impl.sql.compile.IsNullNode.setNodeType(int)",1,4,4
"org.apache.derby.impl.sql.compile.IsNullNode.usefulStartKey(Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.IsNullNode.usefulStopKey(Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.accept(Visitor)",2,3,4
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.bindExpression(FromList,SubqueryList,Vector)",2,3,3
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.categorize(JBitSet,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.disablePrivilegeCollection()",1,2,2
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.getJavaValueNode()",1,1,1
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.isEquivalent(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.printSubNodes(int)",1,2,2
"org.apache.derby.impl.sql.compile.JavaToSQLValueNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.castToPrimitive(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.checkReliability(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.generateReceiver(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.generateReceiver(ExpressionClassBuilder,MethodBuilder,JavaValueNode)",2,2,3
"org.apache.derby.impl.sql.compile.JavaValueNode.getCollationType()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.getConstantValueAsObject()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.getJSQLType()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.getJavaTypeName()",5,5,6
"org.apache.derby.impl.sql.compile.JavaValueNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.getPrimitiveTypeName()",4,4,5
"org.apache.derby.impl.sql.compile.JavaValueNode.getReceiverExpression(ExpressionClassBuilder,MethodBuilder,JavaValueNode)",1,2,2
"org.apache.derby.impl.sql.compile.JavaValueNode.isPrimitiveType()",2,2,2
"org.apache.derby.impl.sql.compile.JavaValueNode.mapToTypeID(JSQLType)",2,1,2
"org.apache.derby.impl.sql.compile.JavaValueNode.markForCallStatement()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.markReturnValueDiscarded()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.mustCastToPrimitive()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.returnValueDiscarded()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.returnValueToSQLDomain()",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.setCollationType(int)",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.setJavaTypeName(String)",1,1,1
"org.apache.derby.impl.sql.compile.JavaValueNode.valueReturnedToSQLDomain()",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.LOJ_reorderable(int)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.LOJgetReferencedTables(int)",2,2,2
"org.apache.derby.impl.sql.compile.JoinNode.accept(Visitor)",2,8,8
"org.apache.derby.impl.sql.compile.JoinNode.addOuterJoinArguments(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.adjustNumberOfRowsReturned(CostEstimate)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.bindResultColumns(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.bindResultColumns(TableDescriptor,FromVTI,ResultColumnList,DMLStatementNode,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.buildRCL()",2,5,6
"org.apache.derby.impl.sql.compile.JoinNode.deferredBindExpressions(FromList)",7,13,13
"org.apache.derby.impl.sql.compile.JoinNode.flatten(ResultColumnList,PredicateList,SubqueryList,GroupByList)",1,7,7
"org.apache.derby.impl.sql.compile.JoinNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.generateCore(ActivationClassBuilder,MethodBuilder,int)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.generateCore(ActivationClassBuilder,MethodBuilder,int,ValueNode,SubqueryList)",1,5,5
"org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumns(TableName)",4,8,8
"org.apache.derby.impl.sql.compile.JoinNode.getAllResultColumnsNoUsing(TableName)",3,5,5
"org.apache.derby.impl.sql.compile.JoinNode.getFinalCostEstimate()",2,1,2
"org.apache.derby.impl.sql.compile.JoinNode.getJoinArguments(ActivationClassBuilder,MethodBuilder,ValueNode)",1,3,3
"org.apache.derby.impl.sql.compile.JoinNode.getLeftPredicateList()",1,2,2
"org.apache.derby.impl.sql.compile.JoinNode.getLogicalLeftResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.getLogicalRightResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.getMatchingColumn(ColumnReference)",6,8,9
"org.apache.derby.impl.sql.compile.JoinNode.getNumJoinArguments()",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.getRightPredicateList()",1,2,2
"org.apache.derby.impl.sql.compile.JoinNode.grabJoinPredicates(PredicateList)",3,3,4
"org.apache.derby.impl.sql.compile.JoinNode.init(Object,Object,Object,Object,Object,Object,Object)",1,7,7
"org.apache.derby.impl.sql.compile.JoinNode.isFlattenableJoinNode()",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.isOrderedOn(ColumnReference[],boolean,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.joinTypeToString(int)",8,3,9
"org.apache.derby.impl.sql.compile.JoinNode.modifyAccessPath(JBitSet)",1,4,4
"org.apache.derby.impl.sql.compile.JoinNode.normExpressions()",2,9,10
"org.apache.derby.impl.sql.compile.JoinNode.notFlattenableJoin()",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.oneRowRightSide(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.optimizeIt(Optimizer,OptimizablePredicateList,CostEstimate,RowOrdering)",3,3,5
"org.apache.derby.impl.sql.compile.JoinNode.preprocess(int,GroupByList,FromList)",1,3,3
"org.apache.derby.impl.sql.compile.JoinNode.printSubNodes(int)",1,6,6
"org.apache.derby.impl.sql.compile.JoinNode.projectResultColumns()",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.pushExpressions(PredicateList)",1,6,6
"org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToLeft(PredicateList)",3,3,4
"org.apache.derby.impl.sql.compile.JoinNode.pushExpressionsToRight(PredicateList)",3,3,4
"org.apache.derby.impl.sql.compile.JoinNode.pushOptPredicate(OptimizablePredicate)",1,3,3
"org.apache.derby.impl.sql.compile.JoinNode.setAggregateVector(Vector)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.setSubqueryList(SubqueryList)",1,1,1
"org.apache.derby.impl.sql.compile.JoinNode.transformOuterJoins(ValueNode,int)",2,1,2
"org.apache.derby.impl.sql.compile.JoinNode.updateTargetLockMode()",1,1,1
"org.apache.derby.impl.sql.compile.LOBTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.LOBTypeCompiler.convertible(TypeId,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.LOBTypeCompiler.dataValueMethodName()",3,3,4
"org.apache.derby.impl.sql.compile.LOBTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.LOBTypeCompiler.getCorrespondingPrimitiveTypeName()",3,3,4
"org.apache.derby.impl.sql.compile.LOBTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.LOBTypeCompiler.nullMethodName()",3,3,4
"org.apache.derby.impl.sql.compile.LOBTypeCompiler.storable(TypeId,ClassFactory)",1,1,1
"org.apache.derby.impl.sql.compile.LengthOperatorNode.bindExpression(FromList,SubqueryList,Vector)",2,2,3
"org.apache.derby.impl.sql.compile.LengthOperatorNode.bindParameter()",1,1,1
"org.apache.derby.impl.sql.compile.LengthOperatorNode.getReceiverInterfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.LengthOperatorNode.setNodeType(int)",1,3,3
"org.apache.derby.impl.sql.compile.Level2CostEstimateImpl.Level2CostEstimateImpl()",1,1,1
"org.apache.derby.impl.sql.compile.Level2CostEstimateImpl.Level2CostEstimateImpl(double,double,double)",1,1,1
"org.apache.derby.impl.sql.compile.Level2CostEstimateImpl.cloneMe()",1,1,1
"org.apache.derby.impl.sql.compile.Level2CostEstimateImpl.setState(double,double,CostEstimateImpl)",1,1,2
"org.apache.derby.impl.sql.compile.Level2CostEstimateImpl.toString()",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.Level2OptimizerFactoryImpl()",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.getCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.getOptimizerImpl(OptimizableList,OptimizablePredicateList,DataDictionary,RequiredRowOrdering,int,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerFactoryImpl.supportsOptimizerTrace()",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.Level2OptimizerImpl(OptimizableList,OptimizablePredicateList,DataDictionary,boolean,boolean,boolean,int,JoinStrategy[],int,RequiredRowOrdering,int,LanguageConnectionContext)",1,2,2
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.bestCost()",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.buildJoinOrder(String,boolean,int,int[])",1,1,3
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.costForTable(Object,int)",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.costIncluding(String,Object,int)",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.dumpConglomerateDescriptor(ConglomerateDescriptor)",2,4,5
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.getLevel()",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.getNewCostEstimate(double,double,double)",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.lockModeThreshold(String,String,double,int)",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.newCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.Level2OptimizerImpl.trace(int,int,int,double,Object)",3,4,71
"org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindComparisonOperator()",4,5,5
"org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.bindExpression(FromList,SubqueryList,Vector)",10,27,31
"org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.finishBindExpr()",1,3,3
"org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,3
"org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.preprocess(int,FromList,SubqueryList,PredicateList)",8,9,15
"org.apache.derby.impl.sql.compile.LikeEscapeOperatorNode.setupOptimizeStringFromParameter(ValueNode,ValueNode,String,int)",1,2,3
"org.apache.derby.impl.sql.compile.LockTableNode.bindStatement()",6,7,7
"org.apache.derby.impl.sql.compile.LockTableNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.LockTableNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.LockTableNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.LockTableNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.LockTableNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.MaterializeResultSetNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.MaterializeResultSetNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.MaterializeResultSetNode.printSubNodes(int)",1,2,2
"org.apache.derby.impl.sql.compile.MaterializeSubqueryNode.MaterializeSubqueryNode(LocalField)",1,1,1
"org.apache.derby.impl.sql.compile.MaterializeSubqueryNode.decrementLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.MaterializeSubqueryNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition.MaxMinAggregateDefinition()",1,1,1
"org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition.getAggregator(DataTypeDescriptor,StringBuffer)",2,2,2
"org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition.isMax()",1,1,1
"org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition.setMaxOrMin(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.accept(Visitor)",2,4,5
"org.apache.derby.impl.sql.compile.MethodCallNode.addParms(Vector)",1,3,3
"org.apache.derby.impl.sql.compile.MethodCallNode.areParametersQueryInvariant()",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.bindParameters(FromList,SubqueryList,Vector)",6,9,10
"org.apache.derby.impl.sql.compile.MethodCallNode.categorize(JBitSet,boolean)",2,5,6
"org.apache.derby.impl.sql.compile.MethodCallNode.generateOneParameter(ExpressionClassBuilder,MethodBuilder,int)",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.generateParameters(ExpressionClassBuilder,MethodBuilder)",5,5,6
"org.apache.derby.impl.sql.compile.MethodCallNode.getCorrelationTables(JBitSet)",1,3,3
"org.apache.derby.impl.sql.compile.MethodCallNode.getIsParam()",2,3,5
"org.apache.derby.impl.sql.compile.MethodCallNode.getJavaClassName()",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.getMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.getMethodParameterClasses()",2,4,4
"org.apache.derby.impl.sql.compile.MethodCallNode.getMethodParms()",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.getObjectSignature()",1,2,2
"org.apache.derby.impl.sql.compile.MethodCallNode.getObjectTypeName(JSQLType)",9,11,11
"org.apache.derby.impl.sql.compile.MethodCallNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.getParameterTypeName(JavaValueNode)",1,2,2
"org.apache.derby.impl.sql.compile.MethodCallNode.getPrimitiveSignature(boolean)",2,11,16
"org.apache.derby.impl.sql.compile.MethodCallNode.getRoutineInfo()",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.getVariantTypeOfParams()",1,4,5
"org.apache.derby.impl.sql.compile.MethodCallNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.MethodCallNode.parseValidateSignature(String,int,boolean)",16,18,21
"org.apache.derby.impl.sql.compile.MethodCallNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,4,4
"org.apache.derby.impl.sql.compile.MethodCallNode.printSubNodes(int)",1,5,5
"org.apache.derby.impl.sql.compile.MethodCallNode.remapColumnReferencesToExpressions()",1,4,4
"org.apache.derby.impl.sql.compile.MethodCallNode.resolveMethodCall(String,boolean)",11,26,35
"org.apache.derby.impl.sql.compile.MethodCallNode.setNullParameterInfo(String[])",1,3,3
"org.apache.derby.impl.sql.compile.MethodCallNode.someParametersAreNull()",3,1,3
"org.apache.derby.impl.sql.compile.MethodCallNode.throwNoMethodFound(String,String[],String[])",1,5,6
"org.apache.derby.impl.sql.compile.MethodCallNode.toString()",2,2,3
"org.apache.derby.impl.sql.compile.MiscellaneousStatementNode.activationKind()",1,1,1
"org.apache.derby.impl.sql.compile.MiscellaneousStatementNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.MiscellaneousStatementNode.needsSavepoint()",1,1,1
"org.apache.derby.impl.sql.compile.ModifyColumnNode.bindAndValidateDefault(DataDictionary,TableDescriptor)",3,6,7
"org.apache.derby.impl.sql.compile.ModifyColumnNode.checkExistingConstraints(TableDescriptor)",10,12,16
"org.apache.derby.impl.sql.compile.ModifyColumnNode.checkUserType(TableDescriptor)",6,6,7
"org.apache.derby.impl.sql.compile.ModifyColumnNode.getAction()",9,3,10
"org.apache.derby.impl.sql.compile.ModifyColumnNode.getColumnPosition()",1,2,2
"org.apache.derby.impl.sql.compile.ModifyColumnNode.getLocalColumnDescriptor(String,TableDescriptor)",2,2,2
"org.apache.derby.impl.sql.compile.ModifyColumnNode.getOldDefaultUUID()",1,1,1
"org.apache.derby.impl.sql.compile.ModifyColumnNode.useExistingCollation(TableDescriptor)",2,4,4
"org.apache.derby.impl.sql.compile.ModifyColumnNode.validateAutoincrement(DataDictionary,TableDescriptor,int)",7,6,7
"org.apache.derby.impl.sql.compile.NOPStatementNode.activationKind()",1,1,1
"org.apache.derby.impl.sql.compile.NOPStatementNode.bindStatement()",1,1,1
"org.apache.derby.impl.sql.compile.NOPStatementNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.NestedLoopJoinStrategy()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.divideUpPredicateLists(Optimizable,OptimizablePredicateList,OptimizablePredicateList,OptimizablePredicateList,OptimizablePredicateList,DataDictionary)",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.doesMaterialization()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.estimateCost(Optimizable,OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,CostEstimate)",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.feasible(Optimizable,OptimizablePredicateList,Optimizer)",3,1,3
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.getBasePredicates(OptimizablePredicateList,OptimizablePredicateList,Optimizable)",1,4,4
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.getName()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.getScanArgs(TransactionController,MethodBuilder,Optimizable,OptimizablePredicateList,OptimizablePredicateList,ExpressionClassBuilderInterface,int,MethodBuilder,int,int,int,boolean,int,int,boolean)",1,8,10
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.halfOuterJoinResultSetMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.joinResultSetMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.maxCapacity(int,int,double)",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.multiplyBaseCostByOuterRows()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.nonBasePredicateSelectivity(Optimizable,OptimizablePredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.putBasePredicates(OptimizablePredicateList,OptimizablePredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.resultSetMethodName(boolean,boolean)",3,1,3
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.scanCostType()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.toString()",1,1,1
"org.apache.derby.impl.sql.compile.NestedLoopJoinStrategy.validForOutermostTable()",1,1,1
"org.apache.derby.impl.sql.compile.NewInvocationNode.assignableTo(String)",1,1,1
"org.apache.derby.impl.sql.compile.NewInvocationNode.bindExpression(FromList,SubqueryList,Vector)",2,11,13
"org.apache.derby.impl.sql.compile.NewInvocationNode.categorize(JBitSet,boolean)",2,2,3
"org.apache.derby.impl.sql.compile.NewInvocationNode.findPublicMethod(String,boolean)",1,4,4
"org.apache.derby.impl.sql.compile.NewInvocationNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.NewInvocationNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.NewInvocationNode.init(Object,Object,Object,Object)",2,5,9
"org.apache.derby.impl.sql.compile.NewInvocationNode.isBuiltinVTI()",1,1,1
"org.apache.derby.impl.sql.compile.NewInvocationNode.setSingleInstantiation()",1,1,1
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.NodeFactoryImpl()",1,1,1
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.boot(boolean,Properties)",1,2,2
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.canSupport(Properties)",1,1,1
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.doJoinOrderOptimization()",1,1,1
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.getCreateAliasNode(Object,Object,Object,char,Boolean,ContextManager)",3,5,5
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.getNode(int,ContextManager)",1,6,6
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.mapTableAsVTI(TableDescriptor,String,ResultColumnList,Properties,ContextManager)",1,2,2
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.nodeName(int)",127,2,127
"org.apache.derby.impl.sql.compile.NodeFactoryImpl.stop()",1,1,1
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.accept(Visitor)",2,4,4
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.bindExpression(FromList,SubqueryList,Vector)",6,9,9
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.categorize(JBitSet,boolean)",2,4,5
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,6,8
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.generateReceiver(ExpressionClassBuilder,MethodBuilder)",2,1,2
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.getOrderableVariantType()",2,2,4
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.init(Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.NonStaticMethodCallNode.remapColumnReferencesToExpressions()",1,2,2
"org.apache.derby.impl.sql.compile.NormalizeResultSetNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.NormalizeResultSetNode.init(Object,Object,Object,Object)",1,4,4
"org.apache.derby.impl.sql.compile.NormalizeResultSetNode.setRefActionInfo(long,int[],String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.NotNode.eliminateNots(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.NotNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.NotNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.NumericConstantNode.generateConstant(ExpressionClassBuilder,MethodBuilder)",2,5,12
"org.apache.derby.impl.sql.compile.NumericConstantNode.getConstantValueAsObject()",1,1,1
"org.apache.derby.impl.sql.compile.NumericConstantNode.init(Object)",2,11,19
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.convertible(TypeId,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.dataValueMethodName()",2,2,2
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.generateDataValue(MethodBuilder,int,LocalField)",1,3,3
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",9,4,10
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.getCorrespondingPrimitiveTypeName()",8,3,9
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.getPrecision(String,DataTypeDescriptor,DataTypeDescriptor)",2,6,8
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.getPrimitiveMethodName()",8,3,9
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.getScale(String,DataTypeDescriptor,DataTypeDescriptor)",2,5,6
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.nullMethodName()",9,3,10
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.resolveArithmeticOperation(DataTypeDescriptor,DataTypeDescriptor,String)",4,9,14
"org.apache.derby.impl.sql.compile.NumericTypeCompiler.storable(TypeId,ClassFactory)",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.OptimizerFactoryImpl()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.boot(boolean,Properties)",1,3,4
"org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.getCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.getMaxMemoryPerTable()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.getOptimizer(OptimizableList,OptimizablePredicateList,DataDictionary,RequiredRowOrdering,int,LanguageConnectionContext)",1,1,2
"org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.getOptimizerImpl(OptimizableList,OptimizablePredicateList,DataDictionary,RequiredRowOrdering,int,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.stop()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerFactoryImpl.supportsOptimizerTrace()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.OptimizerImpl(OptimizableList,OptimizablePredicateList,DataDictionary,boolean,boolean,boolean,int,JoinStrategy[],int,RequiredRowOrdering,int)",1,3,5
"org.apache.derby.impl.sql.compile.OptimizerImpl.addScopedPredicatesToList(PredicateList)",2,5,8
"org.apache.derby.impl.sql.compile.OptimizerImpl.considerCost(Optimizable,OptimizablePredicateList,CostEstimate,CostEstimate)",3,13,14
"org.apache.derby.impl.sql.compile.OptimizerImpl.costBasedCostOptimizable(Optimizable,TableDescriptor,ConglomerateDescriptor,OptimizablePredicateList,CostEstimate)",2,15,15
"org.apache.derby.impl.sql.compile.OptimizerImpl.costOptimizable(Optimizable,TableDescriptor,ConglomerateDescriptor,OptimizablePredicateList,CostEstimate)",2,2,3
"org.apache.derby.impl.sql.compile.OptimizerImpl.costPermutation()",2,3,4
"org.apache.derby.impl.sql.compile.OptimizerImpl.endOfRoundCleanup()",1,2,2
"org.apache.derby.impl.sql.compile.OptimizerImpl.estimateTotalCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.getDataDictionary()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.getFinalCost()",2,2,3
"org.apache.derby.impl.sql.compile.OptimizerImpl.getJoinStrategy(String)",1,2,3
"org.apache.derby.impl.sql.compile.OptimizerImpl.getJoinStrategy(int)",1,4,5
"org.apache.derby.impl.sql.compile.OptimizerImpl.getLevel()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.getMaxMemoryPerTable()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.getNewCostEstimate(double,double,double)",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.getNextDecoratedPermutation()",1,29,31
"org.apache.derby.impl.sql.compile.OptimizerImpl.getNextPermutation()",27,51,81
"org.apache.derby.impl.sql.compile.OptimizerImpl.getNumberOfJoinStrategies()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.getOptimizedCost()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.isPushable(OptimizablePredicate)",2,1,2
"org.apache.derby.impl.sql.compile.OptimizerImpl.joinOrderMeetsDependencies(int)",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.modifyAccessPaths()",2,5,5
"org.apache.derby.impl.sql.compile.OptimizerImpl.newCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.prepForNextRound()",4,5,6
"org.apache.derby.impl.sql.compile.OptimizerImpl.pullOptimizableFromJoinOrder()",1,13,13
"org.apache.derby.impl.sql.compile.OptimizerImpl.pushPredicates(Optimizable,JBitSet)",3,10,13
"org.apache.derby.impl.sql.compile.OptimizerImpl.recoverCostFromProposedJoinOrder(boolean)",1,3,3
"org.apache.derby.impl.sql.compile.OptimizerImpl.rememberBestCost(CostEstimate,int)",1,8,9
"org.apache.derby.impl.sql.compile.OptimizerImpl.rewindJoinOrder()",3,3,4
"org.apache.derby.impl.sql.compile.OptimizerImpl.ruleBasedCostOptimizable(Optimizable,TableDescriptor,ConglomerateDescriptor,OptimizablePredicateList,CostEstimate)",4,11,11
"org.apache.derby.impl.sql.compile.OptimizerImpl.setOuterRows(double)",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.tableLockThreshold()",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.trace(int,int,int,double,Object)",1,1,1
"org.apache.derby.impl.sql.compile.OptimizerImpl.uniqueJoinWithOuterTable(OptimizablePredicateList)",1,4,5
"org.apache.derby.impl.sql.compile.OptimizerImpl.updateBestPlanMaps(short,Object)",1,8,13
"org.apache.derby.impl.sql.compile.OptimizerImpl.useStatistics()",1,2,2
"org.apache.derby.impl.sql.compile.OrNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.OrNode.changeToCNF(boolean)",1,5,5
"org.apache.derby.impl.sql.compile.OrNode.eliminateNots(boolean)",2,1,2
"org.apache.derby.impl.sql.compile.OrNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.OrNode.postBindFixup()",1,1,1
"org.apache.derby.impl.sql.compile.OrNode.preprocess(int,FromList,SubqueryList,PredicateList)",13,17,21
"org.apache.derby.impl.sql.compile.OrNode.setFirstOr()",1,1,1
"org.apache.derby.impl.sql.compile.OrNode.verifyChangeToCNF()",1,5,5
"org.apache.derby.impl.sql.compile.OrderByColumn.bindOrderByColumn(ResultSetNode,OrderByList)",6,10,10
"org.apache.derby.impl.sql.compile.OrderByColumn.clearAddedColumnOffset()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.collapseAddedColumnGap(int)",1,1,2
"org.apache.derby.impl.sql.compile.OrderByColumn.constantColumn(PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.getNonRedundantExpression()",1,4,4
"org.apache.derby.impl.sql.compile.OrderByColumn.getResultColumn()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.isAscending()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.isNullsOrderedLow()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.isReferedColByNum(ValueNode)",2,1,2
"org.apache.derby.impl.sql.compile.OrderByColumn.pullUpOrderByColumn(ResultSetNode)",1,4,4
"org.apache.derby.impl.sql.compile.OrderByColumn.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.resetToSourceRC()",1,3,3
"org.apache.derby.impl.sql.compile.OrderByColumn.resolveAddedColumn(ResultSetNode)",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.resolveColumnReference(ResultSetNode,ColumnReference)",6,12,13
"org.apache.derby.impl.sql.compile.OrderByColumn.setDescending()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.setNullsOrderedLow()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByColumn.toString()",2,2,2
"org.apache.derby.impl.sql.compile.OrderByList.addOrderByColumn(OrderByColumn)",1,1,2
"org.apache.derby.impl.sql.compile.OrderByList.adjustForWindowFunctionColumns()",1,2,2
"org.apache.derby.impl.sql.compile.OrderByList.allAscending()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByList.bindOrderByColumns(ResultSetNode)",2,3,4
"org.apache.derby.impl.sql.compile.OrderByList.closeGap(int)",1,2,2
"org.apache.derby.impl.sql.compile.OrderByList.estimateCost(double,RowOrdering,CostEstimate)",1,2,2
"org.apache.derby.impl.sql.compile.OrderByList.generate(ActivationClassBuilder,MethodBuilder,ResultSetNode)",2,2,2
"org.apache.derby.impl.sql.compile.OrderByList.getOrderByColumn(int)",1,3,3
"org.apache.derby.impl.sql.compile.OrderByList.getSortNeeded()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByList.isInOrderPrefix(ResultColumnList)",3,4,5
"org.apache.derby.impl.sql.compile.OrderByList.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.OrderByList.pullUpOrderByColumns(ResultSetNode)",1,2,2
"org.apache.derby.impl.sql.compile.OrderByList.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByList.removeConstantColumns(PredicateList)",1,3,3
"org.apache.derby.impl.sql.compile.OrderByList.removeDupColumns()",4,4,4
"org.apache.derby.impl.sql.compile.OrderByList.reorderRCL(ResultColumnList)",1,2,2
"org.apache.derby.impl.sql.compile.OrderByList.requiresDescending(ColumnReference,int)",4,9,11
"org.apache.derby.impl.sql.compile.OrderByList.resetToSourceRCs()",1,2,2
"org.apache.derby.impl.sql.compile.OrderByList.sortNeeded()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByList.sortNotNeeded()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByList.sortRequired(RowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.OrderByList.sortRequired(RowOrdering,JBitSet)",12,7,13
"org.apache.derby.impl.sql.compile.OrderByNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.OrderByNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.OrderByNode.makeResultDescriptors()",1,1,1
"org.apache.derby.impl.sql.compile.OrderByNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.OrderedColumn.getColumnPosition()",1,1,1
"org.apache.derby.impl.sql.compile.OrderedColumn.isAscending()",1,1,1
"org.apache.derby.impl.sql.compile.OrderedColumn.isNullsOrderedLow()",1,1,1
"org.apache.derby.impl.sql.compile.OrderedColumn.setColumnPosition(int)",1,2,2
"org.apache.derby.impl.sql.compile.OrderedColumn.toString()",2,2,2
"org.apache.derby.impl.sql.compile.OrderedColumnList.getColumnOrdering()",1,4,4
"org.apache.derby.impl.sql.compile.ParameterNode.ParameterNode()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.constantExpression(PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",4,5,6
"org.apache.derby.impl.sql.compile.ParameterNode.generateParameterValueSet(ExpressionClassBuilder,int,Vector)",1,2,2
"org.apache.derby.impl.sql.compile.ParameterNode.getDefaultValue()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.getJSQLType()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.getParameterNumber()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.getTypeId()",1,2,2
"org.apache.derby.impl.sql.compile.ParameterNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.isConstantExpression()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.isEquivalent(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.isParameterNode()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.isReturnOutputParam()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.requiresTypeFromContext()",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.setDescriptors(DataTypeDescriptor[])",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.setJSQLType(JSQLType)",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.setOrderableVariantType(int)",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.setReturnOutputParam(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.ParameterNode.setType(DataTypeDescriptor)",1,2,3
"org.apache.derby.impl.sql.compile.ParameterNode.setValueToGenerate(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.ParseException.ParseException()",1,1,1
"org.apache.derby.impl.sql.compile.ParseException.ParseException(String)",1,1,1
"org.apache.derby.impl.sql.compile.ParseException.ParseException(Token,int[][],String[])",1,1,1
"org.apache.derby.impl.sql.compile.ParseException.add_escapes(String)",4,5,14
"org.apache.derby.impl.sql.compile.ParseException.getMessage()",4,3,9
"org.apache.derby.impl.sql.compile.ParserImpl.ParserImpl(CompilerContext)",1,1,1
"org.apache.derby.impl.sql.compile.ParserImpl.getParser()",1,2,2
"org.apache.derby.impl.sql.compile.ParserImpl.getSQLtext()",1,1,1
"org.apache.derby.impl.sql.compile.ParserImpl.getTokenManager()",1,2,2
"org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(String)",1,1,1
"org.apache.derby.impl.sql.compile.ParserImpl.parseStatement(String,Object[])",1,4,4
"org.apache.derby.impl.sql.compile.Predicate.accept(Visitor)",2,4,4
"org.apache.derby.impl.sql.compile.Predicate.binaryRelOpColRefsToString()",2,3,4
"org.apache.derby.impl.sql.compile.Predicate.categorize()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.clearQualifierFlag()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.clearScanFlags()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.compareTo(Object)",5,5,19
"org.apache.derby.impl.sql.compile.Predicate.compareWithKnownConstant(Optimizable,boolean)",2,1,3
"org.apache.derby.impl.sql.compile.Predicate.copyFields(Predicate)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.equalsComparisonWithConstantExpression(Optimizable)",1,2,2
"org.apache.derby.impl.sql.compile.Predicate.generateAbsoluteColumnId(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.generateExpressionOperand(Optimizable,int,ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.generateNegate(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.generateOperator(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.generateOrderableVariantType(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.generateOrderedNulls(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.generateQualMethod(ExpressionClassBuilder,MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.generateRelativeColumnId(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getAndNode()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getCompareValue(Optimizable)",1,2,2
"org.apache.derby.impl.sql.compile.Predicate.getEquivalenceClass()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getIndexPosition()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getPredScopedForResultSet(JBitSet,ResultSetNode,int[])",2,1,2
"org.apache.derby.impl.sql.compile.Predicate.getPushable()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getReferencedMap()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getReferencedSet()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getRelop()",2,2,2
"org.apache.derby.impl.sql.compile.Predicate.getSearchClauseHT()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getSourceInList()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.getSourceInList(boolean)",4,2,4
"org.apache.derby.impl.sql.compile.Predicate.getStartOperator(Optimizable)",2,2,3
"org.apache.derby.impl.sql.compile.Predicate.getStopOperator(Optimizable)",2,2,3
"org.apache.derby.impl.sql.compile.Predicate.hasEqualOnColumnList(int[],Optimizable)",6,2,6
"org.apache.derby.impl.sql.compile.Predicate.hasMethodCall()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.hasSubquery()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.isInListProbePredicate()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.isJoinPredicate()",2,3,4
"org.apache.derby.impl.sql.compile.Predicate.isOrList()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.isPushableOrClause(Optimizable)",5,4,5
"org.apache.derby.impl.sql.compile.Predicate.isQualifier()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.isRelationalOpPredicate()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.isScopedForPush()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.isScopedToSourceResultSet()",5,3,8
"org.apache.derby.impl.sql.compile.Predicate.isStartKey()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.isStopKey()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.isStoreQualifier()",2,2,3
"org.apache.derby.impl.sql.compile.Predicate.markAsScopedForPush()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.markQualifier()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.markStartKey()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.markStopKey()",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.printSubNodes(int)",1,2,2
"org.apache.derby.impl.sql.compile.Predicate.pushableToSubqueries()",4,1,4
"org.apache.derby.impl.sql.compile.Predicate.remapScopedPred()",2,8,10
"org.apache.derby.impl.sql.compile.Predicate.selectivity(Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.setAndNode(AndNode)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.setEquivalenceClass(int)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.setIndexPosition(int)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.setPushable(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.Predicate.setTransitiveSearchClauseAdded(RelationalOperator)",1,1,2
"org.apache.derby.impl.sql.compile.Predicate.toString()",2,2,2
"org.apache.derby.impl.sql.compile.Predicate.transitiveSearchClauseAdded(RelationalOperator)",2,2,3
"org.apache.derby.impl.sql.compile.PredicateList.PredicateList()",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapper.PredicateWrapper(int,Predicate,int)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapper.before(PredicateWrapper)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapper.contiguous(PredicateWrapper)",1,1,3
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapper.getIndexPosition()",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapper.getPredicate()",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapper.getPredicateID()",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.PredicateWrapperList(int)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.createLeadingUnique()",5,2,5
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.elementAt(int)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.getWeight()",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.insert(PredicateWrapper)",3,2,4
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.removeElement(Predicate)",1,3,3
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.removeElement(PredicateWrapper)",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.removeElementAt(int)",1,2,3
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.retainLeadingContiguous()",6,4,8
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.setWeight(int)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.size()",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.PredicateWrapperList.uniqueSize()",2,1,2
"org.apache.derby.impl.sql.compile.PredicateList.addOptPredicate(OptimizablePredicate)",1,1,4
"org.apache.derby.impl.sql.compile.PredicateList.addOptPredicate(OptimizablePredicate,int)",1,1,4
"org.apache.derby.impl.sql.compile.PredicateList.addPredicate(Predicate)",1,1,4
"org.apache.derby.impl.sql.compile.PredicateList.adjustForSortElimination(RequiredRowOrdering)",4,3,5
"org.apache.derby.impl.sql.compile.PredicateList.allPushable()",3,2,3
"org.apache.derby.impl.sql.compile.PredicateList.calculateWeight(PredicateWrapperList[],int)",5,5,7
"org.apache.derby.impl.sql.compile.PredicateList.categorize()",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.checkTopPredicatesForEqualsConditions(int,boolean[],int[],JBitSet[],boolean)",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.chooseLongestMatch(PredicateWrapperList[],Vector,int)",12,7,13
"org.apache.derby.impl.sql.compile.PredicateList.classify(Optimizable,ConglomerateDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.constantColumn(ColumnReference)",6,6,8
"org.apache.derby.impl.sql.compile.PredicateList.copyPredicatesToOtherList(OptimizablePredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.countScanFlags()",1,2,5
"org.apache.derby.impl.sql.compile.PredicateList.decrementLevel(FromList,int)",8,13,13
"org.apache.derby.impl.sql.compile.PredicateList.eliminateBooleanTrueAndBooleanTrue()",1,4,4
"org.apache.derby.impl.sql.compile.PredicateList.finishKey(ExpressionClassBuilder,MethodBuilder,MethodBuilder,LocalField)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.generateInListValues(ExpressionClassBuilder,MethodBuilder)",3,8,9
"org.apache.derby.impl.sql.compile.PredicateList.generateIndexableRow(ExpressionClassBuilder,int)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.generateQualifiers(ExpressionClassBuilderInterface,MethodBuilder,Optimizable,boolean)",4,16,17
"org.apache.derby.impl.sql.compile.PredicateList.generateSetColumn(ExpressionClassBuilder,MethodBuilder,int,Predicate,Optimizable,LocalField,boolean)",1,9,9
"org.apache.derby.impl.sql.compile.PredicateList.generateSingleQualifierCode(MethodBuilder,Optimizable,boolean,ExpressionClassBuilder,RelationalOperator,LocalField,int,int)",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.generateStartKey(ExpressionClassBuilderInterface,MethodBuilder,Optimizable)",4,4,5
"org.apache.derby.impl.sql.compile.PredicateList.generateStopKey(ExpressionClassBuilderInterface,MethodBuilder,Optimizable)",4,4,5
"org.apache.derby.impl.sql.compile.PredicateList.getOptPredicate(int)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.getPushablePredicates(JBitSet)",3,4,5
"org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEqualityPredicate(Optimizable,int,boolean)",3,2,3
"org.apache.derby.impl.sql.compile.PredicateList.hasOptimizableEquijoin(Optimizable,int)",6,2,6
"org.apache.derby.impl.sql.compile.PredicateList.isRedundantPredicate(int)",4,2,4
"org.apache.derby.impl.sql.compile.PredicateList.joinClauseTransitiveClosure(int,FromList,CompilerContext)",21,22,37
"org.apache.derby.impl.sql.compile.PredicateList.markAllPredicatesQualifiers()",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.markReferencedColumns()",1,3,3
"org.apache.derby.impl.sql.compile.PredicateList.orderQualifiers()",4,7,10
"org.apache.derby.impl.sql.compile.PredicateList.orderUsefulPredicates(Optimizable,ConglomerateDescriptor,boolean,boolean,boolean)",16,51,74
"org.apache.derby.impl.sql.compile.PredicateList.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.PredicateList.pullExpressions(int,ValueNode)",1,3,3
"org.apache.derby.impl.sql.compile.PredicateList.pushExpressionsIntoSelect(SelectNode,boolean)",12,11,19
"org.apache.derby.impl.sql.compile.PredicateList.pushUsefulPredicates(Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.PredicateList.putOptimizableEqualityPredicateFirst(Optimizable,int)",3,4,5
"org.apache.derby.impl.sql.compile.PredicateList.remapColumnReferencesToExpressions()",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.removeOptPredicate(OptimizablePredicate)",1,1,4
"org.apache.derby.impl.sql.compile.PredicateList.removeOptPredicate(int)",1,1,4
"org.apache.derby.impl.sql.compile.PredicateList.removeRedundantPredicates()",3,10,12
"org.apache.derby.impl.sql.compile.PredicateList.restoreConstantPredicates()",4,8,11
"org.apache.derby.impl.sql.compile.PredicateList.restorePredicates()",3,8,10
"org.apache.derby.impl.sql.compile.PredicateList.sameStartStopPosition()",5,5,8
"org.apache.derby.impl.sql.compile.PredicateList.searchClauseTransitiveClosure(int,boolean)",16,33,44
"org.apache.derby.impl.sql.compile.PredicateList.selectivity(Optimizable)",16,8,19
"org.apache.derby.impl.sql.compile.PredicateList.selectivityNoStatistics(Optimizable)",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.setPredicatesAndProperties(OptimizablePredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.startOperator(Optimizable)",3,2,3
"org.apache.derby.impl.sql.compile.PredicateList.stopOperator(Optimizable)",3,2,3
"org.apache.derby.impl.sql.compile.PredicateList.transferAllPredicates(OptimizablePredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.PredicateList.transferNonQualifiers(Optimizable,PredicateList)",1,4,4
"org.apache.derby.impl.sql.compile.PredicateList.transferPredicates(OptimizablePredicateList,JBitSet,Optimizable)",1,5,8
"org.apache.derby.impl.sql.compile.PredicateList.useful(Optimizable,ConglomerateDescriptor)",7,9,16
"org.apache.derby.impl.sql.compile.PredicateList.xorReferencedSet(JBitSet)",1,3,3
"org.apache.derby.impl.sql.compile.PrivilegeNode.bind(HashMap,List,boolean)",17,20,26
"org.apache.derby.impl.sql.compile.PrivilegeNode.init(Object,Object,Object)",2,3,5
"org.apache.derby.impl.sql.compile.PrivilegeNode.makePrivilegeInfo()",3,3,3
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.accept(Visitor)",2,6,6
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.addNewPredicate(Predicate)",1,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerMaterialization(JBitSet)",3,8,8
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.considerSortAvoidancePath()",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.ensurePredicateList(int)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.feasibleJoinStrategy(OptimizablePredicateList,Optimizer)",2,3,3
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.flattenableInFromSubquery(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateMinion(ExpressionClassBuilder,MethodBuilder,boolean)",5,16,20
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateNOPProjectRestrict()",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.generateResultSet(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getBestAccessPath()",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getBestSortAvoidancePath()",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getCostEstimate()",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getCurrentAccessPath()",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getFinalCostEstimate()",2,2,3
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getFromTableByName(String,String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getRestrictionList()",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getTableNumber()",3,3,3
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getTrulyTheBestAccessPath()",3,3,3
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.getUserSpecifiedJoinStrategy()",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.init(Object,Object,Object,Object,Object,Object,Object)",1,2,3
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.isPossibleDistinctScan(Set)",4,5,7
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.legalJoinOrder(JBitSet)",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.markForDistinctScan()",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.modifyAccessPath(JBitSet)",5,15,18
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.nextAccessPath(Optimizer,OptimizablePredicateList,RowOrdering)",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.nopProjectRestrict()",3,3,5
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimize(DataDictionary,PredicateList,double)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.optimizeIt(Optimizer,OptimizablePredicateList,CostEstimate,RowOrdering)",1,5,6
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.preprocess(int,GroupByList,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.printRememberingBestAccessPath(int,AccessPath)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.printSubNodes(int)",1,6,6
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.pullOptPredicates(OptimizablePredicateList)",1,4,4
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushExpressions(PredicateList)",1,10,11
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.pushOptPredicate(OptimizablePredicate)",1,5,5
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.rememberAsBest(int,Optimizer)",1,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.rememberSortAvoidancePath()",1,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.replaceWithHashTableNode()",1,5,5
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.setRefActionInfo(long,int[],String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.setRestriction(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.startOptimizing(Optimizer,RowOrdering)",1,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.uniqueJoin(OptimizablePredicateList)",2,2,2
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.updateTargetLockMode()",2,2,3
"org.apache.derby.impl.sql.compile.ProjectRestrictNode.verifyProperties(DataDictionary)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.accept(Visitor)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.convertDefaultNode(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.debugFlush()",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.debugPrint(String)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.disablePrivilegeCollection()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.formatNodeString(String,int)",2,4,5
"org.apache.derby.impl.sql.compile.QueryTreeNode.foundString(String[],String)",4,2,4
"org.apache.derby.impl.sql.compile.QueryTreeNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.generateAuthorizeCheck(ActivationClassBuilder,MethodBuilder,int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getBeginOffset()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getClassFactory()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getCompilerContext()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getContextManager()",1,3,3
"org.apache.derby.impl.sql.compile.QueryTreeNode.getCursorInfo()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getDataDictionary()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getDependencyManager()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getEndOffset()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getExecutionFactory()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getGenericConstantActionFactory()",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.getIntProperty(String,String)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.getLanguageConnectionContext()",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.getNodeFactory()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getNodeType()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getNullNode(DataTypeDescriptor)",3,4,22
"org.apache.derby.impl.sql.compile.QueryTreeNode.getParameterTypes()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getRowEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getSchemaDescriptor(String)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getSchemaDescriptor(String,boolean)",1,8,9
"org.apache.derby.impl.sql.compile.QueryTreeNode.getStatementType()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.getTableDescriptor(String,SchemaDescriptor)",5,3,6
"org.apache.derby.impl.sql.compile.QueryTreeNode.getTypeCompiler(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.init(Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.isAtomic()",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.isInstanceOf(int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.isPrivilegeCollectionRequired()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.isSessionSchema(SchemaDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.isSessionSchema(String)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.makeTableName(String,String)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.nodeHeader()",2,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.parseStatement(String,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.printLabel(int,String)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.printSubNodes(int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.resolveTableToSynonym(TableName)",5,3,6
"org.apache.derby.impl.sql.compile.QueryTreeNode.setBeginOffset(int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.setContextManager(ContextManager)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.setEndOffset(int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.setNodeType(int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.setRefActionInfo(long,int[],String,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.toString()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNode.treePrint()",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.treePrint(int)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNode.verifyClassExist(String)",3,3,4
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.accept(Visitor)",2,2,3
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.addElement(QueryTreeNode)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.destructiveAppend(QueryTreeNodeVector)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.elementAt(int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.indexOf(QueryTreeNode)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.insertElementAt(QueryTreeNode,int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.nondestructiveAppend(QueryTreeNodeVector)",1,2,2
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.remove(int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.removeAllElements()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.removeElement(QueryTreeNode)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.removeElementAt(int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.setElementAt(QueryTreeNode,int)",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.size()",1,1,1
"org.apache.derby.impl.sql.compile.QueryTreeNodeVector.toString()",2,3,3
"org.apache.derby.impl.sql.compile.RefTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.RefTypeCompiler.convertible(TypeId,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.RefTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,2,2
"org.apache.derby.impl.sql.compile.RefTypeCompiler.getCorrespondingPrimitiveTypeName()",1,2,2
"org.apache.derby.impl.sql.compile.RefTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.RefTypeCompiler.nullMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.RefTypeCompiler.storable(TypeId,ClassFactory)",1,1,1
"org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.ReferencedTablesVisitor(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.getTableMap()",1,1,1
"org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.skipChildren(Visitable)",1,1,2
"org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.ReferencedTablesVisitor.visit(Visitable)",1,4,4
"org.apache.derby.impl.sql.compile.RemapCRsVisitor.RemapCRsVisitor(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.RemapCRsVisitor.skipChildren(Visitable)",1,1,1
"org.apache.derby.impl.sql.compile.RemapCRsVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.RemapCRsVisitor.visit(Visitable)",1,3,3
"org.apache.derby.impl.sql.compile.RenameNode.bindStatement()",7,8,11
"org.apache.derby.impl.sql.compile.RenameNode.descriptorExistsException(TupleDescriptor,TupleDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.RenameNode.init(Object,Object,Object,Object,Object)",2,4,7
"org.apache.derby.impl.sql.compile.RenameNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.RenameNode.referencesSessionSchema()",3,2,4
"org.apache.derby.impl.sql.compile.RenameNode.renameColumnBind(DataDictionary)",7,8,8
"org.apache.derby.impl.sql.compile.RenameNode.renameTableBind(DataDictionary)",3,4,4
"org.apache.derby.impl.sql.compile.RenameNode.statementToString()",6,4,7
"org.apache.derby.impl.sql.compile.RenameNode.toString()",6,6,6
"org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor.ReplaceAggregatesWithCRVisitor(ResultColumnList,Class)",1,1,1
"org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor.ReplaceAggregatesWithCRVisitor(ResultColumnList,int)",1,1,1
"org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor.ReplaceAggregatesWithCRVisitor(ResultColumnList,int,Class)",1,1,1
"org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor.skipChildren(Visitable)",1,2,2
"org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor.visit(Visitable)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.accept(Visitor)",2,3,4
"org.apache.derby.impl.sql.compile.ResultColumn.adjustVirtualColumnId(int)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.bindExpression(FromList,SubqueryList,Vector)",1,4,4
"org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnByName(TableDescriptor,int)",2,3,4
"org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnByPosition(TableDescriptor,int)",2,2,3
"org.apache.derby.impl.sql.compile.ResultColumn.bindResultColumnToExpression()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression(ResultColumn)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.checkStorableExpression(ValueNode)",2,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.clearTableName()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.cloneMe()",1,11,11
"org.apache.derby.impl.sql.compile.ResultColumn.collapseVirtualColumnIdGap(int)",1,1,3
"org.apache.derby.impl.sql.compile.ResultColumn.columnNameMatches(String)",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch()",5,2,6
"org.apache.derby.impl.sql.compile.ResultColumn.columnTypeAndLengthMatch(ResultColumn)",9,10,18
"org.apache.derby.impl.sql.compile.ResultColumn.compareTo(Object)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.convertConstant(TypeId,int,DataValueDescriptor)",8,7,10
"org.apache.derby.impl.sql.compile.ResultColumn.disablePrivilegeCollection()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.expressionIsWindowFunction()",2,1,2
"org.apache.derby.impl.sql.compile.ResultColumn.foundInList(String[])",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.generateHolder(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getBaseColumnNode()",6,5,6
"org.apache.derby.impl.sql.compile.ResultColumn.getColumnPosition()",2,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.getExpression()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getMaximumColumnSize()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getName()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getOrderableVariantType()",4,4,6
"org.apache.derby.impl.sql.compile.ResultColumn.getReference()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getResultSetNumber()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getSchemaName()",3,4,4
"org.apache.derby.impl.sql.compile.ResultColumn.getSourceColumnName()",2,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.getSourceSchemaName()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getSourceTableName()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getTableColumnDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getTableName()",3,3,4
"org.apache.derby.impl.sql.compile.ResultColumn.getTableNameObject()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getTableNumber()",4,4,4
"org.apache.derby.impl.sql.compile.ResultColumn.getType()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.getTypeServices()",3,2,3
"org.apache.derby.impl.sql.compile.ResultColumn.getVirtualColumnId()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.guaranteeColumnName()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.init(Object,Object)",1,5,8
"org.apache.derby.impl.sql.compile.ResultColumn.isAutoincrement()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isAutoincrementGenerated()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isDefaultColumn()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isEquivalent(ValueNode)",3,3,3
"org.apache.derby.impl.sql.compile.ResultColumn.isGenerated()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isGeneratedForUnmatchedColumnInInsert()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isGroupingColumn()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isNameGenerated()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isRedundant()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isReferenced()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.isWindowFunction()",2,3,4
"org.apache.derby.impl.sql.compile.ResultColumn.markAllRCsInChainReferenced()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.markAsGroupingColumn()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.markGenerated()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.markGeneratedForUnmatchedColumnInInsert()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.markUpdatableByCursor()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.markUpdated()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.preprocess(int,FromList,SubqueryList,PredicateList)",2,1,2
"org.apache.derby.impl.sql.compile.ResultColumn.printSubNodes(int)",1,4,4
"org.apache.derby.impl.sql.compile.ResultColumn.pullVirtualIsReferenced()",4,3,5
"org.apache.derby.impl.sql.compile.ResultColumn.rejectParameter()",2,3,3
"org.apache.derby.impl.sql.compile.ResultColumn.resetAutoincrementGenerated()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setAutoincrement()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setAutoincrementGenerated()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setColumnDescriptor(TableDescriptor,ColumnDescriptor)",3,5,5
"org.apache.derby.impl.sql.compile.ResultColumn.setDefaultColumn(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setExpression(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setExpressionToNullNode()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setName(String)",1,4,4
"org.apache.derby.impl.sql.compile.ResultColumn.setNameGenerated(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setRedundant()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setReferenced()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setResultSetNumber(int)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setUnreferenced()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.setVirtualColumnId(int)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.toString()",2,2,2
"org.apache.derby.impl.sql.compile.ResultColumn.typeUntypedNullExpression(ResultColumn)",2,5,5
"org.apache.derby.impl.sql.compile.ResultColumn.updatableByCursor()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.updated()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumn.verifyOrderable()",2,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.ResultColumnList()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.addColumn(TableName,String,DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.addRCForRID()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.addResultColumn(ResultColumn)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.adjustVirtualColumnIds(int)",1,4,4
"org.apache.derby.impl.sql.compile.ResultColumnList.allExpressionsAreColumns(ResultSetNode)",7,5,8
"org.apache.derby.impl.sql.compile.ResultColumnList.allTopCRsFromSameTable()",5,3,5
"org.apache.derby.impl.sql.compile.ResultColumnList.appendResultColumns(ResultColumnList,boolean)",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.bindExpressions(FromList,SubqueryList,Vector)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(ResultColumnList,FromVTI,DMLStatementNode)",5,7,8
"org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(TableDescriptor)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByName(TableDescriptor,DMLStatementNode)",4,7,7
"org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsByPosition(TableDescriptor)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.bindResultColumnsToExpressions()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.bindUntypedNullsToResultColumns(ResultColumnList)",2,4,4
"org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyIndexRow(TableDescriptor,ConglomerateDescriptor,StoreCostController,DataDictionary)",1,4,4
"org.apache.derby.impl.sql.compile.ResultColumnList.buildEmptyRow()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.checkAutoincrement(ResultColumnList)",5,8,8
"org.apache.derby.impl.sql.compile.ResultColumnList.checkColumnUpdateability(String[],String)",3,4,4
"org.apache.derby.impl.sql.compile.ResultColumnList.checkForInvalidDefaults()",4,3,4
"org.apache.derby.impl.sql.compile.ResultColumnList.checkStorableExpressions()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.checkStorableExpressions(ResultColumnList)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.clearColumnReferences()",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.clearTableNames()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.collapseVirtualColumnIdGap(int)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.columnTypesAndLengthsMatch()",4,2,4
"org.apache.derby.impl.sql.compile.ResultColumnList.columnTypesAndLengthsMatch(ResultColumnList)",3,3,5
"org.apache.derby.impl.sql.compile.ResultColumnList.commonCodeForUpdatableByCursor(Vector,boolean)",4,6,9
"org.apache.derby.impl.sql.compile.ResultColumnList.compactColumns(boolean,boolean)",3,3,6
"org.apache.derby.impl.sql.compile.ResultColumnList.containsAllResultColumn()",3,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.containsWindowFunctionResultColumn()",3,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.copyColumnsToNewList(ResultColumnList,FormatableBitSet)",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.copyListAndObjects()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.copyOrderBySelect(ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.copyReferencedColumnsToNewList(ResultColumnList)",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.copyResultColumnNames(ResultColumnList)",1,6,6
"org.apache.derby.impl.sql.compile.ResultColumnList.countReferencedColumns()",1,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.createListFromResultSetMetaData(ResultSetMetaData,TableName,String)",6,11,13
"org.apache.derby.impl.sql.compile.ResultColumnList.decOrderBySelect()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.disablePrivilegeCollection()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.doProjection()",1,7,7
"org.apache.derby.impl.sql.compile.ResultColumnList.expandAllsAndNameColumns(FromList)",1,7,7
"org.apache.derby.impl.sql.compile.ResultColumnList.expandToAll(TableDescriptor,TableName)",1,5,5
"org.apache.derby.impl.sql.compile.ResultColumnList.exportNames(String[])",1,4,4
"org.apache.derby.impl.sql.compile.ResultColumnList.findParentResultColumn(ResultColumn)",6,4,6
"org.apache.derby.impl.sql.compile.ResultColumnList.findResultColumnForOrderBy(String,TableName)",8,8,11
"org.apache.derby.impl.sql.compile.ResultColumnList.genCreateRow(ExpressionClassBuilder,LocalField,String,String,int)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.genVirtualColumnNodes(ResultSetNode,ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.genVirtualColumnNodes(ResultSetNode,ResultColumnList,boolean)",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.generateCore(ExpressionClassBuilder,MethodBuilder,boolean)",7,16,19
"org.apache.derby.impl.sql.compile.ResultColumnList.generateHolder(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.generateHolder(ExpressionClassBuilder,MethodBuilder,FormatableBitSet,FormatableBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.generateHolderMethod(ExpressionClassBuilder,FormatableBitSet,FormatableBitSet)",5,9,12
"org.apache.derby.impl.sql.compile.ResultColumnList.generateNulls(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.getAtMostOneResultColumn(ColumnReference,String,boolean)",5,5,6
"org.apache.derby.impl.sql.compile.ResultColumnList.getColumnNames()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.getColumnPositions(TableDescriptor)",3,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.getColumnReferenceMap()",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.getCountMismatchAllowed()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.getJoinColumns(ResultColumnList)",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumn(int)",2,1,2
"org.apache.derby.impl.sql.compile.ResultColumnList.getOrderByColumnToBind(String,TableName,int,OrderByColumn)",9,8,10
"org.apache.derby.impl.sql.compile.ResultColumnList.getOrderBySelect()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.getReferencedFormatableBitSet(boolean,boolean,boolean)",7,7,10
"org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(String)",3,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(String,String)",6,4,6
"org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(int)",5,3,5
"org.apache.derby.impl.sql.compile.ResultColumnList.getResultColumn(int,ResultSetNode,int[])",5,3,6
"org.apache.derby.impl.sql.compile.ResultColumnList.getSortedByPosition()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.getStreamStorableColIds(int)",2,3,8
"org.apache.derby.impl.sql.compile.ResultColumnList.getTotalColumnSize()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.hasConsistentTypeInfo()",5,3,6
"org.apache.derby.impl.sql.compile.ResultColumnList.incOrderBySelect()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.isCloneable()",3,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.isExactTypeAndLengthMatch(ResultColumnList)",3,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.makeColumnFromName(String)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.makeColumnReferenceFromName(TableName,String)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.makeResultDescriptors()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.mapSourceColumns()",1,6,6
"org.apache.derby.impl.sql.compile.ResultColumnList.markAllUnreferenced()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.markColumnsInSelectListUpdatableByCursor(Vector)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.markInitialSize()",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.markUpdatableByCursor()",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.markUpdatableByCursor(Vector)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.markUpdated()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.markUpdated(ResultColumnList)",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.nameAllResultColumns()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.nopProjection(ResultColumnList)",6,4,6
"org.apache.derby.impl.sql.compile.ResultColumnList.numGeneratedColumns()",1,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.numGeneratedColumnsForGroupBy()",1,3,4
"org.apache.derby.impl.sql.compile.ResultColumnList.populate(TableDescriptor,int[])",2,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.preprocess(int,FromList,SubqueryList,PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.propagateDCLInfo(ResultColumnList,String)",4,5,5
"org.apache.derby.impl.sql.compile.ResultColumnList.pullVirtualIsReferenced()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.recordColumnReferences(boolean[],JBitSet[],int)",3,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.recordColumnReferences(int[],int)",1,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.rejectParameters()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.rejectXMLValues()",4,5,6
"org.apache.derby.impl.sql.compile.ResultColumnList.remapColumnReferencesToExpressions()",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.removeGeneratedGroupingColumns()",1,4,4
"org.apache.derby.impl.sql.compile.ResultColumnList.removeJoinColumns(ResultColumnList)",1,4,4
"org.apache.derby.impl.sql.compile.ResultColumnList.removeOrderByColumns()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.removeWindowFunctionColumns()",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.replaceDefaults(TableDescriptor,ResultColumnList)",4,7,7
"org.apache.derby.impl.sql.compile.ResultColumnList.resetVirtualColumnIds()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.reusableResult()",3,3,4
"org.apache.derby.impl.sql.compile.ResultColumnList.setCountMismatchAllowed(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.setIndexRow(long,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.setNullability(boolean)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.setRedundant()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.setResultSetNumber(int)",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.setUnionResultExpression(ResultColumnList,int,int,String)",5,14,16
"org.apache.derby.impl.sql.compile.ResultColumnList.sortMe()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.treePrint(int)",1,3,3
"org.apache.derby.impl.sql.compile.ResultColumnList.updatableByCursor(int)",1,1,1
"org.apache.derby.impl.sql.compile.ResultColumnList.updateOverlaps(int[])",5,2,5
"org.apache.derby.impl.sql.compile.ResultColumnList.verifyAllOrderable()",1,2,2
"org.apache.derby.impl.sql.compile.ResultColumnList.verifyCreateConstraintColumnList(TableElementList)",3,2,3
"org.apache.derby.impl.sql.compile.ResultColumnList.verifyUniqueNames(boolean)",4,5,6
"org.apache.derby.impl.sql.compile.ResultColumnList.visibleSize()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.LOJgetReferencedTables(int)",3,3,3
"org.apache.derby.impl.sql.compile.ResultSetNode.accept(Visitor)",2,3,4
"org.apache.derby.impl.sql.compile.ResultSetNode.addNewPredicate(Predicate)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.adjustForSortElimination()",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.adjustForSortElimination(RequiredRowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.assignResultSetNumber()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.bindExpressions(FromList)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.bindExpressionsWithTables(FromList)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.bindNonVTITables(DataDictionary,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.bindResultColumns(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.bindResultColumns(TableDescriptor,FromVTI,ResultColumnList,DMLStatementNode,FromList)",1,5,5
"org.apache.derby.impl.sql.compile.ResultSetNode.bindTargetExpressions(FromList)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.bindUntypedNullsToResultColumns(ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.bindVTITables(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.changeAccessPath()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.columnTypesAndLengthsMatch()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.considerMaterialization(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.disablePrivilegeCollection()",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.enhanceRCLForInsert(int,int[],DataDictionary,TableDescriptor,FromVTI)",1,3,3
"org.apache.derby.impl.sql.compile.ResultSetNode.ensurePredicateList(int)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.fillInReferencedTableMap(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.flattenableInFromSubquery(FromList)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.genNewRCForInsert(TableDescriptor,FromVTI,int,DataDictionary)",1,6,6
"org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrict()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrict(int)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.genProjectRestrictForReordering()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.generateNormalizationResultSet(ActivationClassBuilder,MethodBuilder,int,ResultDescription)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.generateResultSet(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.getAllResultColumns(TableName)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.getCostEstimate()",1,3,3
"org.apache.derby.impl.sql.compile.ResultSetNode.getCursorTargetTable()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.getFinalCostEstimate()",1,3,3
"org.apache.derby.impl.sql.compile.ResultSetNode.getFromList()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.getFromTableByName(String,String,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.getMatchingColumn(ColumnReference)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.getNewCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.getOptimizer(OptimizableList,OptimizablePredicateList,DataDictionary,RequiredRowOrdering)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.getOptimizerImpl()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.getReferencedTableMap()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.getResultColumns()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.getResultSetNumber()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.isNotExists()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.isOneRowResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.isOrderedOn(ColumnReference[],boolean,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.isPossibleDistinctScan(Set)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.isUpdatableCursor(DataDictionary)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.makeResultDescription()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.makeResultDescriptors()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.markAsCursorTargetTable()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.markForDistinctScan()",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.markStatementResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.modifyAccessPaths()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.modifyAccessPaths(PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.notCursorTargetTable()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.notFlattenableJoin()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.numDistinctAggregates(Vector)",1,2,3
"org.apache.derby.impl.sql.compile.ResultSetNode.optimize(DataDictionary,PredicateList,double)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.parseDefault(String)",1,4,4
"org.apache.derby.impl.sql.compile.ResultSetNode.performMaterialization(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.preprocess(int,GroupByList,FromList)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.ResultSetNode.projectResultColumns()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.pushOrderByList(OrderByList)",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.referencesTarget(String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.rejectParameters()",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.rejectXMLValues()",1,2,2
"org.apache.derby.impl.sql.compile.ResultSetNode.renameGeneratedResultNames()",1,3,3
"org.apache.derby.impl.sql.compile.ResultSetNode.replaceDefaults(TableDescriptor,ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.returnsAtMostOneRow()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.setInsertSource()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.setReferencedTableMap(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.setResultColumns(ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.setResultToBooleanTrueNode(boolean)",4,3,4
"org.apache.derby.impl.sql.compile.ResultSetNode.setTableConstructorTypes(ResultColumnList)",1,17,17
"org.apache.derby.impl.sql.compile.ResultSetNode.subqueryReferencesTarget(String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.ResultSetNode.updateTargetLockMode()",1,1,1
"org.apache.derby.impl.sql.compile.ResultSetNode.verifySelectStarSubquery(FromList,int)",1,2,2
"org.apache.derby.impl.sql.compile.RevokeNode.bindStatement()",1,1,1
"org.apache.derby.impl.sql.compile.RevokeNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.RevokeNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.RevokeNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.RevokeNode.toString()",2,4,4
"org.apache.derby.impl.sql.compile.RevokeRoleNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.RevokeRoleNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.RevokeRoleNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.RevokeRoleNode.toString()",2,6,6
"org.apache.derby.impl.sql.compile.RoutineDesignator.RoutineDesignator(boolean,TableName,boolean,List)",1,1,1
"org.apache.derby.impl.sql.compile.RoutineDesignator.makePrivilegeInfo()",1,1,1
"org.apache.derby.impl.sql.compile.RoutineDesignator.setAliasDescriptor(AliasDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.RowNumberColumnNode.init()",1,1,1
"org.apache.derby.impl.sql.compile.RowNumberColumnNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.RowNumberColumnNode.isAscending()",1,1,1
"org.apache.derby.impl.sql.compile.RowNumberColumnNode.isEquivalent(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.RowOrderingImpl.RowOrderingImpl()",1,1,1
"org.apache.derby.impl.sql.compile.RowOrderingImpl.addOrderedColumn(int,int,int)",2,4,5
"org.apache.derby.impl.sql.compile.RowOrderingImpl.addUnorderedOptimizable(Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.RowOrderingImpl.alwaysOrdered(int)",1,1,1
"org.apache.derby.impl.sql.compile.RowOrderingImpl.columnAlwaysOrdered(Optimizable,int)",1,1,1
"org.apache.derby.impl.sql.compile.RowOrderingImpl.copy(RowOrdering)",1,8,8
"org.apache.derby.impl.sql.compile.RowOrderingImpl.nextOrderPosition(int)",2,1,2
"org.apache.derby.impl.sql.compile.RowOrderingImpl.optimizableAlwaysOrdered(Optimizable)",2,8,9
"org.apache.derby.impl.sql.compile.RowOrderingImpl.orderedOnColumn(int,int,int)",5,2,5
"org.apache.derby.impl.sql.compile.RowOrderingImpl.orderedOnColumn(int,int,int,int)",4,1,4
"org.apache.derby.impl.sql.compile.RowOrderingImpl.rememberCurrentColumnOrdering(int)",1,1,1
"org.apache.derby.impl.sql.compile.RowOrderingImpl.removeOptimizable(int)",1,3,3
"org.apache.derby.impl.sql.compile.RowOrderingImpl.removeOptimizableFromVector(int,Vector)",1,4,4
"org.apache.derby.impl.sql.compile.RowOrderingImpl.toString()",1,7,7
"org.apache.derby.impl.sql.compile.RowOrderingImpl.unorderedOptimizablesOtherThan(Optimizable)",3,2,3
"org.apache.derby.impl.sql.compile.RowOrderingImpl.vectorContainsOptimizable(int,Vector)",4,3,4
"org.apache.derby.impl.sql.compile.RowResultSetNode.addNewPredicate(Predicate)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.adjustForSortElimination()",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressions(FromList)",2,3,3
"org.apache.derby.impl.sql.compile.RowResultSetNode.bindExpressionsWithTables(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.bindNonVTITables(DataDictionary,FromList)",1,2,2
"org.apache.derby.impl.sql.compile.RowResultSetNode.bindTargetExpressions(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.bindUntypedNullsToResultColumns(ResultColumnList)",1,1,2
"org.apache.derby.impl.sql.compile.RowResultSetNode.canWeCacheResults()",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.ensurePredicateList(int)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.estimateCost(OptimizablePredicateList,ConglomerateDescriptor,CostEstimate,Optimizer,RowOrdering)",1,2,2
"org.apache.derby.impl.sql.compile.RowResultSetNode.flattenableInFromSubquery(FromList)",7,5,9
"org.apache.derby.impl.sql.compile.RowResultSetNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.RowResultSetNode.getExposedName()",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.getMatchingColumn(ColumnReference)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.init(Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.RowResultSetNode.modifyAccessPath(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.modifyAccessPaths()",1,2,2
"org.apache.derby.impl.sql.compile.RowResultSetNode.optimize(DataDictionary,PredicateList,double)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.optimizeSubqueries(DataDictionary,double)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.preprocess(int,GroupByList,FromList)",1,2,2
"org.apache.derby.impl.sql.compile.RowResultSetNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.RowResultSetNode.pushOrderByList(OrderByList)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.replaceDefaults(TableDescriptor,ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.returnsAtMostOneRow()",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.RowResultSetNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.RowResultSetNode.verifySelectStarSubquery(FromList,int)",1,1,1
"org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.generateConstant(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.SQLBooleanConstantNode.init(Object)",1,6,7
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.accept(Visitor)",2,3,4
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.categorize(JBitSet,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateJavaValue(ExpressionClassBuilder,MethodBuilder)",1,5,5
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateReturnsNullOnNullCheck(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.generateSQLValue(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getConstantValueAsObject()",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getJSQLType()",1,4,5
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getJavaTypeName()",2,2,2
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getPrimitiveTypeName()",2,2,2
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getSQLValueInterfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.getSQLValueNode()",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.SQLToJavaValueNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.SavepointNode.init(Object,Object)",1,3,4
"org.apache.derby.impl.sql.compile.SavepointNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.SavepointNode.needsSavepoint()",1,1,1
"org.apache.derby.impl.sql.compile.SavepointNode.statementToString()",3,1,3
"org.apache.derby.impl.sql.compile.SavepointNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.ScrollInsensitiveResultSetNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.accept(Visitor)",2,10,11
"org.apache.derby.impl.sql.compile.SelectNode.addNewPredicate(Predicate)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.bindExpressions(FromList)",6,17,18
"org.apache.derby.impl.sql.compile.SelectNode.bindExpressionsWithTables(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.bindNonVTITables(DataDictionary,FromList)",1,4,4
"org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(FromList)",2,3,3
"org.apache.derby.impl.sql.compile.SelectNode.bindResultColumns(TableDescriptor,FromVTI,ResultColumnList,DMLStatementNode,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.bindTargetExpressions(FromList)",1,1,2
"org.apache.derby.impl.sql.compile.SelectNode.bindUntypedNullsToResultColumns(ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.clearDistinct()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.decrementLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.disablePrivilegeCollection()",1,2,2
"org.apache.derby.impl.sql.compile.SelectNode.ensurePredicateList(int)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.findColumnReferenceInResult(String)",6,5,8
"org.apache.derby.impl.sql.compile.SelectNode.flattenableInFromSubquery(FromList)",7,3,10
"org.apache.derby.impl.sql.compile.SelectNode.genProjectRestrict(int)",5,27,32
"org.apache.derby.impl.sql.compile.SelectNode.getCursorTargetTable()",1,2,2
"org.apache.derby.impl.sql.compile.SelectNode.getFinalCostEstimate()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.getFromList()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.getFromTableByName(String,String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.getSelectSubquerys()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.getWhereClause()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.getWherePredicates()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.getWhereSubquerys()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.hasAggregatesInSelectList()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.hasDistinct()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.init(Object,Object,Object,Object,Object,Object)",1,3,4
"org.apache.derby.impl.sql.compile.SelectNode.isOrderedResult(ResultColumnList,ResultSetNode,boolean)",5,5,7
"org.apache.derby.impl.sql.compile.SelectNode.isUpdatableCursor(DataDictionary)",11,20,23
"org.apache.derby.impl.sql.compile.SelectNode.makeDistinct()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths()",1,10,10
"org.apache.derby.impl.sql.compile.SelectNode.modifyAccessPaths(PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.SelectNode.normExpressions(ValueNode)",1,10,10
"org.apache.derby.impl.sql.compile.SelectNode.optimize(DataDictionary,PredicateList,double)",1,20,20
"org.apache.derby.impl.sql.compile.SelectNode.performTransitiveClosure(int)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.preprocess(int,GroupByList,FromList)",1,24,28
"org.apache.derby.impl.sql.compile.SelectNode.printSubNodes(int)",1,9,9
"org.apache.derby.impl.sql.compile.SelectNode.pushExpressionsIntoSelect(Predicate)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.pushOrderByList(OrderByList)",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.referencesSessionSchema()",2,5,6
"org.apache.derby.impl.sql.compile.SelectNode.referencesTarget(String,boolean)",2,5,6
"org.apache.derby.impl.sql.compile.SelectNode.rejectParameters()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.returnsAtMostOneRow()",1,3,3
"org.apache.derby.impl.sql.compile.SelectNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.subqueryReferencesTarget(String,boolean)",2,4,5
"org.apache.derby.impl.sql.compile.SelectNode.toString()",2,4,4
"org.apache.derby.impl.sql.compile.SelectNode.uniqueSubquery(boolean)",1,4,5
"org.apache.derby.impl.sql.compile.SelectNode.updateTargetLockMode()",1,1,1
"org.apache.derby.impl.sql.compile.SelectNode.verifySelectStarSubquery(FromList,int)",6,7,8
"org.apache.derby.impl.sql.compile.SetOperatorNode.bindResultColumns(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.bindResultColumns(TableDescriptor,FromVTI,ResultColumnList,DMLStatementNode,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.bindTargetExpressions(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.bindUntypedNullsToResultColumns(ResultColumnList)",1,2,2
"org.apache.derby.impl.sql.compile.SetOperatorNode.buildRCL()",2,2,2
"org.apache.derby.impl.sql.compile.SetOperatorNode.ensurePredicateList(int)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.flattenableInFromSubquery(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.getFromTableByName(String,String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.getLeftOptPredicateList()",1,2,2
"org.apache.derby.impl.sql.compile.SetOperatorNode.getParamColumnTypes(DataTypeDescriptor[],RowResultSetNode)",1,4,4
"org.apache.derby.impl.sql.compile.SetOperatorNode.getRightOptPredicateList()",1,2,2
"org.apache.derby.impl.sql.compile.SetOperatorNode.hasUnPushedPredicates()",1,4,4
"org.apache.derby.impl.sql.compile.SetOperatorNode.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.modifyAccessPath(JBitSet,PredicateList)",3,7,8
"org.apache.derby.impl.sql.compile.SetOperatorNode.performMaterialization(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.preprocess(int,GroupByList,FromList)",1,4,5
"org.apache.derby.impl.sql.compile.SetOperatorNode.pullOptPredicates(OptimizablePredicateList)",4,5,6
"org.apache.derby.impl.sql.compile.SetOperatorNode.pushOptPredicate(OptimizablePredicate)",5,5,10
"org.apache.derby.impl.sql.compile.SetOperatorNode.pushOrderByList(OrderByList)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.setParamColumnTypes(DataTypeDescriptor[],RowResultSetNode)",1,3,3
"org.apache.derby.impl.sql.compile.SetOperatorNode.setResultToBooleanTrueNode(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SetOperatorNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.SetOperatorNode.verifySelectStarSubquery(FromList,int)",1,1,1
"org.apache.derby.impl.sql.compile.SetRoleNode.activationKind()",2,1,2
"org.apache.derby.impl.sql.compile.SetRoleNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.SetRoleNode.generateParameterValueSet(ActivationClassBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.SetRoleNode.init(Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.SetRoleNode.isAtomic()",1,1,1
"org.apache.derby.impl.sql.compile.SetRoleNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.SetRoleNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.SetRoleNode.toString()",2,2,3
"org.apache.derby.impl.sql.compile.SetSchemaNode.activationKind()",2,1,2
"org.apache.derby.impl.sql.compile.SetSchemaNode.generate(ActivationClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.SetSchemaNode.generateParameterValueSet(ActivationClassBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.SetSchemaNode.init(Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.SetSchemaNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.SetSchemaNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.SetSchemaNode.toString()",2,2,4
"org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.makeConstantAction()",1,1,1
"org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.SetTransactionIsolationNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindExpression(FromList,SubqueryList,Vector)",3,3,4
"org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.bindParameter()",1,1,1
"org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.getReceiverInterfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.SimpleStringOperatorNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.accept(Visitor)",2,4,4
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.addNewPredicate(Predicate)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.adjustForSortElimination()",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.adjustForSortElimination(RequiredRowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.changeAccessPath()",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.decrementLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.ensurePredicateList(int)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.flattenableInFromSubquery(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.forUpdate()",2,2,2
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.getChildResult()",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.getFinalCostEstimate()",2,2,2
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.getFromTableByName(String,String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.getTrulyTheBestAccessPath()",3,3,3
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.init(Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.initAccessPaths(Optimizer)",1,2,2
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.isNotExists()",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.isOneRowResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.isOrderedOn(ColumnReference[],boolean,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.modifyAccessPaths()",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.optimize(DataDictionary,PredicateList,double)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.preprocess(int,GroupByList,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.pullOptPredicates(OptimizablePredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.pushExpressions(PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.referencesTarget(String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.reflectionNeededForProjection()",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.replaceDefaults(TableDescriptor,ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.setChildResult(ResultSetNode)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.setLevel(int)",1,2,2
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.subqueryReferencesTarget(String,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.updateBestPlanMap(short,Object)",1,3,3
"org.apache.derby.impl.sql.compile.SingleChildResultSetNode.updateTargetLockMode()",1,1,1
"org.apache.derby.impl.sql.compile.SpecialFunctionNode.bindExpression(FromList,SubqueryList,Vector)",3,4,12
"org.apache.derby.impl.sql.compile.SpecialFunctionNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,3,3
"org.apache.derby.impl.sql.compile.SpecialFunctionNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.SpecialFunctionNode.isEquivalent(ValueNode)",2,2,2
"org.apache.derby.impl.sql.compile.SpecialFunctionNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.StatementNode.bindStatement()",1,1,1
"org.apache.derby.impl.sql.compile.StatementNode.executeSchemaName()",1,1,1
"org.apache.derby.impl.sql.compile.StatementNode.executeStatementName()",1,1,1
"org.apache.derby.impl.sql.compile.StatementNode.generate(ByteArray)",4,6,8
"org.apache.derby.impl.sql.compile.StatementNode.getSPSName()",1,1,1
"org.apache.derby.impl.sql.compile.StatementNode.isAtomic()",1,1,1
"org.apache.derby.impl.sql.compile.StatementNode.lockTableForCompilation(TableDescriptor)",3,3,3
"org.apache.derby.impl.sql.compile.StatementNode.makeResultDescription()",1,1,1
"org.apache.derby.impl.sql.compile.StatementNode.needsSavepoint()",1,1,1
"org.apache.derby.impl.sql.compile.StatementNode.optimizeStatement()",1,1,1
"org.apache.derby.impl.sql.compile.StatementNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.bindExpression(FromList,SubqueryList,Vector)",2,3,3
"org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.categorize(JBitSet,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.getOrderableVariantType()",2,2,3
"org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.StaticClassFieldReferenceNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.bindExpression(FromList,SubqueryList,Vector)",9,12,15
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.categorize(JBitSet,boolean)",2,2,3
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,35,40
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateOneParameter(ExpressionClassBuilder,MethodBuilder,int)",3,9,14
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.generateSetupNestedSessionContext(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.getPrivType()",1,1,1
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.init(Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.optimizeDomainValueConversion()",1,7,7
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.resolveRoutine(FromList,SubqueryList,Vector,SchemaDescriptor)",13,22,31
"org.apache.derby.impl.sql.compile.StaticMethodCallNode.toString()",2,2,3
"org.apache.derby.impl.sql.compile.SubqueryList.addSubqueryNode(SubqueryNode)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryList.decrementLevel(int)",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryList.markHavingSubqueries()",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryList.markWhereSubqueries()",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryList.modifyAccessPaths()",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryList.optimize(DataDictionary,double)",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryList.preprocess(int,FromList,SubqueryList,PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryList.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.SubqueryList.referencesSessionSchema()",3,2,3
"org.apache.derby.impl.sql.compile.SubqueryList.referencesTarget(String,boolean)",4,2,4
"org.apache.derby.impl.sql.compile.SubqueryList.setPointOfAttachment(int)",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryNode.accept(Visitor)",3,6,8
"org.apache.derby.impl.sql.compile.SubqueryNode.bindExpression(FromList,SubqueryList,Vector)",2,8,8
"org.apache.derby.impl.sql.compile.SubqueryNode.canAllBeFlattened()",1,4,4
"org.apache.derby.impl.sql.compile.SubqueryNode.categorize(JBitSet,boolean)",2,1,2
"org.apache.derby.impl.sql.compile.SubqueryNode.changeToCNF(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.changeToCorrespondingExpressionType()",2,2,7
"org.apache.derby.impl.sql.compile.SubqueryNode.eliminateNots(boolean)",2,4,18
"org.apache.derby.impl.sql.compile.SubqueryNode.flattenToExistsJoin(int,FromList,SubqueryList,PredicateList,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.flattenToNormalJoin(int,FromList,SubqueryList,PredicateList)",5,5,5
"org.apache.derby.impl.sql.compile.SubqueryNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,13,15
"org.apache.derby.impl.sql.compile.SubqueryNode.generateMaterialization(ActivationClassBuilder,MethodBuilder,String)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.getNewJoinCondition(ValueNode,ValueNode)",2,6,18
"org.apache.derby.impl.sql.compile.SubqueryNode.getOrderableVariantType()",3,3,4
"org.apache.derby.impl.sql.compile.SubqueryNode.getPointOfAttachment()",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryNode.getPreprocessed()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.getResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.getSubqueryType()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.getTrueNode()",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryNode.getUnderTopAndNode()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.hasCorrelatedCRs()",2,6,7
"org.apache.derby.impl.sql.compile.SubqueryNode.hasWindowFunctionColumn()",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.isALL()",3,2,3
"org.apache.derby.impl.sql.compile.SubqueryNode.isANY()",3,2,3
"org.apache.derby.impl.sql.compile.SubqueryNode.isEXISTS()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.isEquivalent(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.isHavingSubquery()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.isIN()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.isInvariant()",2,1,2
"org.apache.derby.impl.sql.compile.SubqueryNode.isMaterializable()",1,5,5
"org.apache.derby.impl.sql.compile.SubqueryNode.isNOT_EXISTS()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.isNOT_IN()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.isWhereExistsAnyInWithWhereSubquery()",4,4,7
"org.apache.derby.impl.sql.compile.SubqueryNode.isWhereSubquery()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.modifyAccessPaths()",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.optimize(DataDictionary,double)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.preprocess(int,FromList,SubqueryList,PredicateList)",8,44,47
"org.apache.derby.impl.sql.compile.SubqueryNode.printSubNodes(int)",1,4,4
"org.apache.derby.impl.sql.compile.SubqueryNode.pushNewPredicate(int)",2,7,9
"org.apache.derby.impl.sql.compile.SubqueryNode.remapColumnReferencesToExpressions()",1,3,3
"org.apache.derby.impl.sql.compile.SubqueryNode.setDataTypeServices(ResultColumnList)",1,2,2
"org.apache.derby.impl.sql.compile.SubqueryNode.setHavingSubquery(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.setParentComparisonOperator(BinaryComparisonOperatorNode)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.setPointOfAttachment(int)",1,1,2
"org.apache.derby.impl.sql.compile.SubqueryNode.setSubqueryType(int)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.setWhereSubquery(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.SubqueryNode.singleFromBaseTable(FromList)",1,4,5
"org.apache.derby.impl.sql.compile.SubqueryNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.SubstituteExpressionVisitor.SubstituteExpressionVisitor(ValueNode,ValueNode,Class)",1,1,1
"org.apache.derby.impl.sql.compile.SubstituteExpressionVisitor.getSource()",1,1,1
"org.apache.derby.impl.sql.compile.SubstituteExpressionVisitor.skipChildren(Visitable)",1,2,2
"org.apache.derby.impl.sql.compile.SubstituteExpressionVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.SubstituteExpressionVisitor.visit(Visitable)",3,1,3
"org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition.SumAvgAggregateDefinition()",1,1,1
"org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition.getAggregator(DataTypeDescriptor,StringBuffer)",2,4,4
"org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition.getAggregatorClassName()",2,1,2
"org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition.getOperator()",2,1,2
"org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition.setSumOrAvg(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.TableElementList.addTableElement(TableElementNode)",1,2,3
"org.apache.derby.impl.sql.compile.TableElementList.appendNewColumnsToRCL(FromBaseTable)",1,3,3
"org.apache.derby.impl.sql.compile.TableElementList.areColumnsNullable(ConstraintDefinitionNode,TableDescriptor)",3,4,5
"org.apache.derby.impl.sql.compile.TableElementList.bindAndValidateCheckConstraints(FromList)",7,7,9
"org.apache.derby.impl.sql.compile.TableElementList.checkForDuplicateColumns(DDLStatementNode,Hashtable,String)",3,3,3
"org.apache.derby.impl.sql.compile.TableElementList.checkForDuplicateConstraintNames(DDLStatementNode,Hashtable,String)",4,3,4
"org.apache.derby.impl.sql.compile.TableElementList.checkForNullColumns(ConstraintDefinitionNode,TableDescriptor)",3,5,6
"org.apache.derby.impl.sql.compile.TableElementList.columnsMatch(String[],String[])",6,3,6
"org.apache.derby.impl.sql.compile.TableElementList.containsColumnName(String)",1,1,1
"org.apache.derby.impl.sql.compile.TableElementList.countConstraints(int)",3,2,4
"org.apache.derby.impl.sql.compile.TableElementList.countNumberOfColumns()",1,1,1
"org.apache.derby.impl.sql.compile.TableElementList.findColumnDefinition(String)",4,3,4
"org.apache.derby.impl.sql.compile.TableElementList.genColumnInfos(ColumnInfo[])",4,8,9
"org.apache.derby.impl.sql.compile.TableElementList.genConstraintActions(boolean,ConstraintConstantAction[],String,SchemaDescriptor,DataDictionary)",4,12,14
"org.apache.derby.impl.sql.compile.TableElementList.genIndexAction(boolean,boolean,boolean,String,ConstraintDefinitionNode,String[],boolean,SchemaDescriptor,String,int,DataDictionary)",2,6,7
"org.apache.derby.impl.sql.compile.TableElementList.getColumnDataTypeDescriptor(String)",2,2,2
"org.apache.derby.impl.sql.compile.TableElementList.getColumnDataTypeDescriptor(String,TableDescriptor)",2,2,2
"org.apache.derby.impl.sql.compile.TableElementList.setCollationTypesOnCharacterStringColumns(SchemaDescriptor)",1,4,4
"org.apache.derby.impl.sql.compile.TableElementList.setColumnListToNotNull(ConstraintDefinitionNode)",1,2,2
"org.apache.derby.impl.sql.compile.TableElementList.toString()",2,3,3
"org.apache.derby.impl.sql.compile.TableElementList.validate(DDLStatementNode,DataDictionary,TableDescriptor)",14,31,34
"org.apache.derby.impl.sql.compile.TableElementList.verifyUniqueColumnList(DDLStatementNode,ConstraintDefinitionNode)",4,4,4
"org.apache.derby.impl.sql.compile.TableElementNode.getElementType()",7,4,7
"org.apache.derby.impl.sql.compile.TableElementNode.getName()",1,1,1
"org.apache.derby.impl.sql.compile.TableElementNode.hasCheckConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.TableElementNode.hasConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.TableElementNode.hasForeignKeyConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.TableElementNode.hasPrimaryKeyConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.TableElementNode.hasUniqueKeyConstraint()",1,1,1
"org.apache.derby.impl.sql.compile.TableElementNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.TableElementNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.TableElementNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.TableName.bind(DataDictionary)",1,1,1
"org.apache.derby.impl.sql.compile.TableName.equals(Object)",2,1,2
"org.apache.derby.impl.sql.compile.TableName.equals(String,String)",3,3,4
"org.apache.derby.impl.sql.compile.TableName.equals(TableName)",4,4,5
"org.apache.derby.impl.sql.compile.TableName.getFullTableName()",2,1,2
"org.apache.derby.impl.sql.compile.TableName.getSchemaName()",1,1,1
"org.apache.derby.impl.sql.compile.TableName.getTableName()",1,1,1
"org.apache.derby.impl.sql.compile.TableName.hasSchema()",1,1,1
"org.apache.derby.impl.sql.compile.TableName.hashCode()",1,1,1
"org.apache.derby.impl.sql.compile.TableName.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.TableName.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.TableName.setSchemaName(String)",1,1,1
"org.apache.derby.impl.sql.compile.TableName.toString()",2,2,2
"org.apache.derby.impl.sql.compile.TableOperatorNode.accept(Visitor)",2,6,6
"org.apache.derby.impl.sql.compile.TableOperatorNode.adjustForSortElimination()",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.adjustForSortElimination(RequiredRowOrdering)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.bindExpressions(FromList)",1,3,3
"org.apache.derby.impl.sql.compile.TableOperatorNode.bindExpressionsWithTables(FromList)",1,3,3
"org.apache.derby.impl.sql.compile.TableOperatorNode.bindNonVTITables(DataDictionary,FromList)",1,2,2
"org.apache.derby.impl.sql.compile.TableOperatorNode.bindResultColumns(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.bindResultColumns(TableDescriptor,FromVTI,ResultColumnList,DMLStatementNode,FromList)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.bindVTITables(FromList)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.decrementLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.getExposedName()",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.getFromTableByName(String,String,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.TableOperatorNode.getLeftResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.getLeftmostResultSet()",2,2,2
"org.apache.derby.impl.sql.compile.TableOperatorNode.getRightResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.modifyAccessPath(JBitSet)",2,6,6
"org.apache.derby.impl.sql.compile.TableOperatorNode.modifyAccessPaths()",1,7,7
"org.apache.derby.impl.sql.compile.TableOperatorNode.needsSpecialRCLBinding()",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.optimize(DataDictionary,PredicateList,double)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.optimizeSource(Optimizer,ResultSetNode,PredicateList,CostEstimate)",1,8,8
"org.apache.derby.impl.sql.compile.TableOperatorNode.preprocess(int,GroupByList,FromList)",2,4,4
"org.apache.derby.impl.sql.compile.TableOperatorNode.printSubNodes(int)",1,4,4
"org.apache.derby.impl.sql.compile.TableOperatorNode.projectResultColumns()",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.referencesSessionSchema()",1,2,2
"org.apache.derby.impl.sql.compile.TableOperatorNode.referencesTarget(String,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.TableOperatorNode.rejectParameters()",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.replaceDefaults(TableDescriptor,ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.setLeftmostResultSet(ResultSetNode)",1,2,2
"org.apache.derby.impl.sql.compile.TableOperatorNode.setLevel(int)",1,3,3
"org.apache.derby.impl.sql.compile.TableOperatorNode.setNestedInParens(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.setReferencedColumns()",1,1,1
"org.apache.derby.impl.sql.compile.TableOperatorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.TableOperatorNode.updateBestPlanMap(short,Object)",1,5,5
"org.apache.derby.impl.sql.compile.TableOperatorNode.verifyProperties(DataDictionary)",1,3,3
"org.apache.derby.impl.sql.compile.TablePrivilegesNode.addAction(int,ResultColumnList)",1,3,3
"org.apache.derby.impl.sql.compile.TablePrivilegesNode.addAll()",1,1,2
"org.apache.derby.impl.sql.compile.TablePrivilegesNode.bind(TableDescriptor,boolean)",4,8,8
"org.apache.derby.impl.sql.compile.TablePrivilegesNode.bindPrivilegesForView(TableDescriptor)",1,3,5
"org.apache.derby.impl.sql.compile.TablePrivilegesNode.makePrivilegeInfo()",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.accept(Visitor)",2,7,8
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindDateTimeArg(ValueNode,int)",3,3,3
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindExpression(FromList,SubqueryList,Vector)",1,7,7
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindParameter(ValueNode,int)",2,3,3
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.bindToBuiltIn()",1,5,5
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.castArgToString(ValueNode)",2,2,2
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.categorize(JBitSet,boolean)",1,4,4
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.constantExpression(PredicateList)",1,4,4
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,7,9
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.getLeftOperand()",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.getReceiver()",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.getRightOperand()",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.getVarcharDescriptor()",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.init(Object,Object,Object,Object,Object)",1,2,2
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.isConstantExpression()",1,4,4
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.isEquivalent(ValueNode)",2,7,8
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.locateBind()",2,11,11
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.printSubNodes(int)",1,5,5
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.remapColumnReferencesToExpressions()",1,2,2
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.setLeftOperand(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.setResultType(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.setRightOperand(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.substrBind()",3,11,14
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.throwBadType(String,String)",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampAddBind()",3,3,6
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.timestampDiffBind()",1,1,1
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.TernaryOperatorNode.trimBind()",1,6,7
"org.apache.derby.impl.sql.compile.TestConstraintNode.bindExpression(FromList,SubqueryList,Vector)",1,2,2
"org.apache.derby.impl.sql.compile.TestConstraintNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.TestConstraintNode.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.TimeTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.TimeTypeCompiler.convertible(TypeId,boolean)",2,3,4
"org.apache.derby.impl.sql.compile.TimeTypeCompiler.estimatedMemoryUsage(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.TimeTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.TimeTypeCompiler.getCorrespondingPrimitiveTypeName()",1,1,1
"org.apache.derby.impl.sql.compile.TimeTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.TimeTypeCompiler.nullMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.TimeTypeCompiler.storable(TypeId,ClassFactory)",2,1,4
"org.apache.derby.impl.sql.compile.TimestampOperatorNode.bindExpression(FromList,SubqueryList,Vector)",3,9,9
"org.apache.derby.impl.sql.compile.TimestampOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.TimestampOperatorNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.TimestampTypeCompiler.compatible(TypeId)",2,2,3
"org.apache.derby.impl.sql.compile.TimestampTypeCompiler.convertible(TypeId,boolean)",3,2,5
"org.apache.derby.impl.sql.compile.TimestampTypeCompiler.estimatedMemoryUsage(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.TimestampTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.TimestampTypeCompiler.getCorrespondingPrimitiveTypeName()",1,1,1
"org.apache.derby.impl.sql.compile.TimestampTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.TimestampTypeCompiler.nullMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.TimestampTypeCompiler.storable(TypeId,ClassFactory)",2,1,4
"org.apache.derby.impl.sql.compile.Token.newToken(int)",2,2,2
"org.apache.derby.impl.sql.compile.Token.toString()",1,1,1
"org.apache.derby.impl.sql.compile.TransactionStatementNode.activationKind()",1,1,1
"org.apache.derby.impl.sql.compile.TransactionStatementNode.isAtomic()",1,1,1
"org.apache.derby.impl.sql.compile.TransactionStatementNode.needsSavepoint()",1,1,1
"org.apache.derby.impl.sql.compile.TriggerReferencingStruct.TriggerReferencingStruct(boolean,boolean,String)",1,1,1
"org.apache.derby.impl.sql.compile.TriggerReferencingStruct.toString()",1,1,3
"org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl.getAnInstance(String,TypeCompiler,TypeId)",1,4,7
"org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl.getTypeCompiler(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl.staticGetTypeCompiler(TypeId)",19,24,24
"org.apache.derby.impl.sql.compile.UCode_CharStream.BeginToken()",2,1,3
"org.apache.derby.impl.sql.compile.UCode_CharStream.Done()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.ExpandBuff(boolean)",1,3,3
"org.apache.derby.impl.sql.compile.UCode_CharStream.FillBuff()",2,4,6
"org.apache.derby.impl.sql.compile.UCode_CharStream.GetImage()",2,1,2
"org.apache.derby.impl.sql.compile.UCode_CharStream.GetSuffix(int)",1,2,2
"org.apache.derby.impl.sql.compile.UCode_CharStream.ReInit(InputStream,int,int)",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.ReInit(InputStream,int,int,int)",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.ReInit(Reader,int,int)",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.ReInit(Reader,int,int,int)",1,1,3
"org.apache.derby.impl.sql.compile.UCode_CharStream.ReadChar()",1,2,2
"org.apache.derby.impl.sql.compile.UCode_CharStream.UCode_CharStream(InputStream,int,int)",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.UCode_CharStream(InputStream,int,int,int)",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.UCode_CharStream(Reader,int,int)",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.UCode_CharStream(Reader,int,int,int)",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.UpdateLineColumn(char)",2,2,8
"org.apache.derby.impl.sql.compile.UCode_CharStream.adjustBeginLineColumn(int,int)",1,1,7
"org.apache.derby.impl.sql.compile.UCode_CharStream.backup(int)",1,1,2
"org.apache.derby.impl.sql.compile.UCode_CharStream.getBeginColumn()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.getBeginLine()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.getBeginOffset()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.getColumn()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.getEndColumn()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.getEndLine()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.getEndOffset()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.getLine()",1,1,1
"org.apache.derby.impl.sql.compile.UCode_CharStream.readChar()",2,7,9
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindExpression(FromList,SubqueryList,Vector)",2,5,9
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindParameter()",3,2,5
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.bindSQRTABS()",2,4,5
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.checkOperandIsNumeric(TypeId)",2,2,3
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.init(Object)",2,3,7
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.isParameterNode()",2,2,3
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.requiresTypeFromContext()",2,2,3
"org.apache.derby.impl.sql.compile.UnaryArithmeticOperatorNode.setType(DataTypeDescriptor)",1,3,3
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.bindComparisonOperator()",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.eliminateNots(boolean)",2,1,2
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateAbsoluteColumnId(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateExpressionOperand(Optimizable,int,ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateOrderedNulls(MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateQualMethod(ExpressionClassBuilder,MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.generateRelativeColumnId(MethodBuilder,Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getAbsoluteColumnPosition(Optimizable)",1,3,3
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getColumnOperand(Optimizable)",3,2,3
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getColumnOperand(Optimizable,int)",4,4,5
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getExpressionOperand(int,int,FromTable)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getNegation(ValueNode)",1,2,2
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOperand(ColumnReference,int,boolean)",5,5,7
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getOrderableVariantType(Optimizable)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getStartOperator(Optimizable)",1,2,2
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.getStopOperator(Optimizable)",1,2,2
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.isQualifier(Optimizable,boolean)",3,1,3
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.orderedNulls()",1,1,1
"org.apache.derby.impl.sql.compile.UnaryComparisonOperatorNode.selfComparison(ColumnReference)",1,2,2
"org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.bindExpression(FromList,SubqueryList,Vector)",4,8,15
"org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.init(Object,Object)",2,3,5
"org.apache.derby.impl.sql.compile.UnaryDateTimestampOperatorNode.invalidOperandType()",1,1,1
"org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.bindExpression(FromList,SubqueryList,Vector)",2,2,2
"org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryLogicalOperatorNode.setFullTypeInfo()",1,1,1
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.accept(Visitor)",2,3,4
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.addXmlOpMethodParams(ExpressionClassBuilder,MethodBuilder)",3,2,4
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindExpression(FromList,SubqueryList,Vector)",1,3,3
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindOperand(FromList,SubqueryList,Vector)",3,5,6
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindParameter()",4,4,4
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLParse()",3,3,4
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.bindXMLSerialize()",3,5,7
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.categorize(JBitSet,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.constantExpression(PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,5,6
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.getOperand()",1,1,1
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.getOperatorString()",1,1,1
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.getOrderableVariantType()",1,2,2
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.getParameterOperand()",2,3,3
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.getReceiverInterfaceName()",2,2,3
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.init(Object,Object,Object)",1,3,5
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.isConstantExpression()",1,2,2
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.isEquivalent(ValueNode)",2,5,5
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.remapColumnReferencesToExpressions()",1,2,2
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.setMethodName(String)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.setOperator(String)",1,1,1
"org.apache.derby.impl.sql.compile.UnaryOperatorNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.UnionNode.addNewNodes()",2,4,5
"org.apache.derby.impl.sql.compile.UnionNode.bindExpressions(FromList)",3,7,8
"org.apache.derby.impl.sql.compile.UnionNode.generate(ActivationClassBuilder,MethodBuilder)",1,4,4
"org.apache.derby.impl.sql.compile.UnionNode.getFinalCostEstimate()",2,1,2
"org.apache.derby.impl.sql.compile.UnionNode.getOperatorName()",1,1,1
"org.apache.derby.impl.sql.compile.UnionNode.init(Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.UnionNode.markTopTableConstructor()",1,1,1
"org.apache.derby.impl.sql.compile.UnionNode.modifyAccessPath(JBitSet)",2,1,2
"org.apache.derby.impl.sql.compile.UnionNode.modifyAccessPaths()",2,1,2
"org.apache.derby.impl.sql.compile.UnionNode.optimizeIt(Optimizer,OptimizablePredicateList,CostEstimate,RowOrdering)",1,5,5
"org.apache.derby.impl.sql.compile.UnionNode.pushExpressions(PredicateList)",1,5,5
"org.apache.derby.impl.sql.compile.UnionNode.rejectParameters()",1,2,2
"org.apache.derby.impl.sql.compile.UnionNode.setTableConstructorTypes(ResultColumnList)",1,6,6
"org.apache.derby.impl.sql.compile.UnionNode.tableConstructor()",1,1,1
"org.apache.derby.impl.sql.compile.UnionNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.UntypedNullConstantNode.UntypedNullConstantNode()",1,1,1
"org.apache.derby.impl.sql.compile.UntypedNullConstantNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.UntypedNullConstantNode.convertDefaultNode(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.UntypedNullConstantNode.generateConstant(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.UpdateNode.bindStatement()",8,28,36
"org.apache.derby.impl.sql.compile.UpdateNode.checkTableNameAndScrubResultColumns(ResultColumnList)",6,6,7
"org.apache.derby.impl.sql.compile.UpdateNode.generate(ActivationClassBuilder,MethodBuilder)",1,4,4
"org.apache.derby.impl.sql.compile.UpdateNode.getChangedColumnIds(ResultColumnList)",2,2,2
"org.apache.derby.impl.sql.compile.UpdateNode.getPrivType()",1,1,1
"org.apache.derby.impl.sql.compile.UpdateNode.getReadMap(DataDictionary,TableDescriptor,ResultColumnList)",1,1,1
"org.apache.derby.impl.sql.compile.UpdateNode.getStatementType()",1,1,1
"org.apache.derby.impl.sql.compile.UpdateNode.getUpdateReadMap(TableDescriptor,ResultColumnList,Vector,ConstraintDescriptorList,GenericDescriptorList,boolean[])",3,7,9
"org.apache.derby.impl.sql.compile.UpdateNode.init(Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.UpdateNode.makeConstantAction()",2,7,10
"org.apache.derby.impl.sql.compile.UpdateNode.normalizeCorrelatedColumns(ResultColumnList,FromTable)",2,5,6
"org.apache.derby.impl.sql.compile.UpdateNode.normalizeSynonymColumns(ResultColumnList,FromTable)",2,2,3
"org.apache.derby.impl.sql.compile.UpdateNode.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.UpdateNode.referencesSessionSchema()",1,1,1
"org.apache.derby.impl.sql.compile.UpdateNode.setDeferredForUpdateOfIndexColumn()",1,4,5
"org.apache.derby.impl.sql.compile.UpdateNode.statementToString()",1,1,1
"org.apache.derby.impl.sql.compile.UpdateNode.toString()",2,2,2
"org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.convertible(TypeId,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.generateDataValue(MethodBuilder,int,LocalField)",1,1,1
"org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.getCorrespondingPrimitiveTypeName()",1,1,1
"org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.nullMethodName()",1,1,1
"org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler.storable(TypeId,ClassFactory)",1,1,1
"org.apache.derby.impl.sql.compile.UserTypeConstantNode.generateConstant(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.UserTypeConstantNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.UserTypeConstantNode.getConstantValueAsObject()",1,1,1
"org.apache.derby.impl.sql.compile.UserTypeConstantNode.getObjectValue()",1,1,1
"org.apache.derby.impl.sql.compile.UserTypeConstantNode.init(Object)",1,16,18
"org.apache.derby.impl.sql.compile.UserTypeConstantNode.isNull()",1,1,1
"org.apache.derby.impl.sql.compile.VTIDeferModPolicy.VTIDeferModPolicy(FromVTI,String[],DeferModification,int)",1,3,4
"org.apache.derby.impl.sql.compile.VTIDeferModPolicy.deferIt(int,FromVTI,String[],QueryTreeNode)",7,6,13
"org.apache.derby.impl.sql.compile.VTIDeferModPolicy.skipChildren(Visitable)",1,1,1
"org.apache.derby.impl.sql.compile.VTIDeferModPolicy.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.VTIDeferModPolicy.visit(Visitable)",1,12,17
"org.apache.derby.impl.sql.compile.ValueNode.ValueNode()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.ValueNode(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.bindExpression(FromList,SubqueryList,Vector,boolean)",1,2,2
"org.apache.derby.impl.sql.compile.ValueNode.categorize(JBitSet,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.changeToCNF(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.checkIsBoolean()",2,3,3
"org.apache.derby.impl.sql.compile.ValueNode.checkReliability(String,int)",1,2,2
"org.apache.derby.impl.sql.compile.ValueNode.checkReliability(int,String)",1,2,2
"org.apache.derby.impl.sql.compile.ValueNode.checkTopPredicatesForEqualsConditions(int,boolean[],int[],JBitSet[],boolean)",6,7,11
"org.apache.derby.impl.sql.compile.ValueNode.constantExpression(PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.copyFields(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.eliminateNots(boolean)",2,2,3
"org.apache.derby.impl.sql.compile.ValueNode.genEqualsFalseTree()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.genIsNullTree()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.genSQLJavaSQLTree()",1,2,2
"org.apache.derby.impl.sql.compile.ValueNode.generate(ActivationClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.ValueNode.generateFilter(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getClone()",1,2,2
"org.apache.derby.impl.sql.compile.ValueNode.getColumnName()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getConstantValueAsObject()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getDataValueFactory()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getSchemaName()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getSourceResultColumn()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getTableName()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getTablesReferenced()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getTransformed()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getTypeCompiler()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.getTypeId()",2,2,2
"org.apache.derby.impl.sql.compile.ValueNode.getTypeServices()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.init(Object,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isBinaryEqualsOperatorNode()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isBooleanFalse()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isBooleanTrue()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isCloneable()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isConstantExpression()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isInListProbeNode()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isParameterNode()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isRelationalOperator()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.isSameNodeType(ValueNode)",2,2,2
"org.apache.derby.impl.sql.compile.ValueNode.optimizableEqualityNode(Optimizable,int,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.putAndsOnTop()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.remapColumnReferencesToExpressions()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.requiresTypeFromContext()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.selectivity(Optimizable)",2,1,2
"org.apache.derby.impl.sql.compile.ValueNode.setCollationInfo(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setCollationInfo(int,int)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setCollationUsingCompilationSchema()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setCollationUsingCompilationSchema(int)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setNullability(boolean)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setTransformed()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setType(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setType(TypeId,boolean,int)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setType(TypeId,int,int,boolean,int)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.setValueCols(JBitSet[],boolean[],int,int)",1,4,5
"org.apache.derby.impl.sql.compile.ValueNode.throwReliabilityException(String)",1,1,2
"org.apache.derby.impl.sql.compile.ValueNode.toString()",2,3,3
"org.apache.derby.impl.sql.compile.ValueNode.updatableByCursor()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.updateMaps(JBitSet[],boolean[],int[],int,int,ValueNode,ValueNode)",7,11,14
"org.apache.derby.impl.sql.compile.ValueNode.verifyChangeToCNF()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNode.verifyEliminateNots()",2,1,2
"org.apache.derby.impl.sql.compile.ValueNode.verifyPutAndsOnTop()",1,1,1
"org.apache.derby.impl.sql.compile.ValueNodeList.addValueNode(ValueNode)",1,1,1
"org.apache.derby.impl.sql.compile.ValueNodeList.allSamePrecendence(int)",4,2,4
"org.apache.derby.impl.sql.compile.ValueNodeList.bindExpression(FromList,SubqueryList,Vector)",1,2,2
"org.apache.derby.impl.sql.compile.ValueNodeList.categorize(JBitSet,boolean)",1,3,3
"org.apache.derby.impl.sql.compile.ValueNodeList.comparable(ValueNode)",3,3,3
"org.apache.derby.impl.sql.compile.ValueNodeList.compatible(ValueNode)",4,3,4
"org.apache.derby.impl.sql.compile.ValueNodeList.constantExpression(PredicateList)",3,2,3
"org.apache.derby.impl.sql.compile.ValueNodeList.containsAllConstantNodes()",3,2,3
"org.apache.derby.impl.sql.compile.ValueNodeList.containsAllParameterNodes()",3,2,3
"org.apache.derby.impl.sql.compile.ValueNodeList.containsOnlyConstantAndParamNodes()",3,3,4
"org.apache.derby.impl.sql.compile.ValueNodeList.containsParameterNode()",3,2,3
"org.apache.derby.impl.sql.compile.ValueNodeList.genSQLJavaSQLTrees()",1,3,3
"org.apache.derby.impl.sql.compile.ValueNodeList.getDominantTypeServices()",3,9,11
"org.apache.derby.impl.sql.compile.ValueNodeList.getOrderableVariantType()",1,2,2
"org.apache.derby.impl.sql.compile.ValueNodeList.getTypeServices()",3,2,3
"org.apache.derby.impl.sql.compile.ValueNodeList.isConstantExpression()",3,2,3
"org.apache.derby.impl.sql.compile.ValueNodeList.isNullable()",3,2,3
"org.apache.derby.impl.sql.compile.ValueNodeList.preprocess(int,FromList,SubqueryList,PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.ValueNodeList.printSubNodes(int)",1,3,3
"org.apache.derby.impl.sql.compile.ValueNodeList.remapColumnReferencesToExpressions()",1,2,2
"org.apache.derby.impl.sql.compile.ValueNodeList.setParameterDescriptor(DataTypeDescriptor)",1,3,3
"org.apache.derby.impl.sql.compile.ValueNodeList.sortInAscendingOrder(DataValueDescriptor)",1,8,8
"org.apache.derby.impl.sql.compile.VarbitConstantNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.VerifyAggregateExpressionsVisitor(GroupByList)",1,1,1
"org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.skipChildren(Visitable)",1,5,5
"org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.stopTraversal()",1,1,1
"org.apache.derby.impl.sql.compile.VerifyAggregateExpressionsVisitor.visit(Visitable)",7,8,10
"org.apache.derby.impl.sql.compile.VirtualColumnNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",2,3,3
"org.apache.derby.impl.sql.compile.VirtualColumnNode.getCorrelated()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.getOrderableVariantType()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.getSchemaName()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.getSourceColumn()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.getSourceResultColumn()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.getSourceResultSet()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.getTableName()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.getTypeServices()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.init(Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.isCloneable()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.isEquivalent(ValueNode)",2,2,2
"org.apache.derby.impl.sql.compile.VirtualColumnNode.printSubNodes(int)",1,2,2
"org.apache.derby.impl.sql.compile.VirtualColumnNode.setCorrelated()",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.setType(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.VirtualColumnNode.updatableByCursor()",1,1,1
"org.apache.derby.impl.sql.compile.WindowFunctionColumnNode.bindExpression(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.WindowFunctionColumnNode.generateExpression(ExpressionClassBuilder,MethodBuilder)",1,2,2
"org.apache.derby.impl.sql.compile.WindowFunctionColumnNode.getTableName()",1,1,1
"org.apache.derby.impl.sql.compile.WindowFunctionColumnNode.getWindowNode()",1,1,1
"org.apache.derby.impl.sql.compile.WindowFunctionColumnNode.init()",1,1,1
"org.apache.derby.impl.sql.compile.WindowFunctionColumnNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,1,1
"org.apache.derby.impl.sql.compile.WindowFunctionColumnNode.setWindowNode(WindowNode)",1,1,1
"org.apache.derby.impl.sql.compile.WindowNode.bind(FromList,SubqueryList,Vector)",1,1,1
"org.apache.derby.impl.sql.compile.WindowNode.considerMaterialization(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.WindowNode.generate(ActivationClassBuilder,MethodBuilder)",3,4,5
"org.apache.derby.impl.sql.compile.WindowNode.getWindowFunctionLevel()",1,1,1
"org.apache.derby.impl.sql.compile.WindowNode.init(Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.sql.compile.WindowNode.performMaterialization(JBitSet)",1,1,1
"org.apache.derby.impl.sql.compile.WindowNode.preprocess(int,FromList,SubqueryList,PredicateList)",1,2,2
"org.apache.derby.impl.sql.compile.WindowNode.setWindowFunctionLevel(int)",1,1,1
"org.apache.derby.impl.sql.compile.XMLConstantNode.generateConstant(ExpressionClassBuilder,MethodBuilder)",1,1,1
"org.apache.derby.impl.sql.compile.XMLConstantNode.getConstantValueAsObject()",1,1,1
"org.apache.derby.impl.sql.compile.XMLConstantNode.init(Object)",1,1,1
"org.apache.derby.impl.sql.compile.XMLTypeCompiler.compatible(TypeId)",1,1,1
"org.apache.derby.impl.sql.compile.XMLTypeCompiler.convertible(TypeId,boolean)",1,1,1
"org.apache.derby.impl.sql.compile.XMLTypeCompiler.dataValueMethodName()",2,2,3
"org.apache.derby.impl.sql.compile.XMLTypeCompiler.getCastToCharWidth(DataTypeDescriptor)",1,1,1
"org.apache.derby.impl.sql.compile.XMLTypeCompiler.getCorrespondingPrimitiveTypeName()",2,2,3
"org.apache.derby.impl.sql.compile.XMLTypeCompiler.interfaceName()",1,1,1
"org.apache.derby.impl.sql.compile.XMLTypeCompiler.nullMethodName()",1,3,3
"org.apache.derby.impl.sql.compile.XMLTypeCompiler.storable(TypeId,ClassFactory)",1,1,1
"org.apache.derby.impl.sql.conn.CachedStatement.CachedStatement()",1,1,1
"org.apache.derby.impl.sql.conn.CachedStatement.clean(boolean)",1,1,1
"org.apache.derby.impl.sql.conn.CachedStatement.clearIdentity()",1,2,2
"org.apache.derby.impl.sql.conn.CachedStatement.createIdentity(Object,Object)",1,2,2
"org.apache.derby.impl.sql.conn.CachedStatement.getIdentity()",1,1,1
"org.apache.derby.impl.sql.conn.CachedStatement.getPreparedStatement()",1,1,1
"org.apache.derby.impl.sql.conn.CachedStatement.isDirty()",1,1,1
"org.apache.derby.impl.sql.conn.CachedStatement.setIdentity(Object)",1,1,1
"org.apache.derby.impl.sql.conn.GenericAuthorizer.GenericAuthorizer(String,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(Activation,int)",8,14,18
"org.apache.derby.impl.sql.conn.GenericAuthorizer.authorize(int)",1,1,1
"org.apache.derby.impl.sql.conn.GenericAuthorizer.connectionMustRemainReadOnly()",2,2,3
"org.apache.derby.impl.sql.conn.GenericAuthorizer.externalRoutineException(int,int)",2,2,5
"org.apache.derby.impl.sql.conn.GenericAuthorizer.getAuthorizationId()",1,1,1
"org.apache.derby.impl.sql.conn.GenericAuthorizer.getDefaultAccessLevel()",5,6,6
"org.apache.derby.impl.sql.conn.GenericAuthorizer.getUserAccessLevel()",1,3,5
"org.apache.derby.impl.sql.conn.GenericAuthorizer.isReadOnlyConnection()",1,1,1
"org.apache.derby.impl.sql.conn.GenericAuthorizer.refresh()",2,3,3
"org.apache.derby.impl.sql.conn.GenericAuthorizer.setReadOnlyConnection(boolean,boolean)",3,3,4
"org.apache.derby.impl.sql.conn.GenericAuthorizer.userOnAccessList(String)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.GenericLanguageConnectionContext(ContextManager,TransactionController,LanguageFactory,LanguageConnectionFactory,Database,String,int,String,String)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.addActivation(Activation)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.addDeclaredGlobalTempTable(TableDescriptor)",2,2,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.appendErrorInfo()",2,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.appendOptimizerTraceOutput(String)",1,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.autoincrementCreateCounter(String,String,String,Long,long,int)",2,3,4
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.autoincrementFlushCache(UUID)",2,3,5
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.beginNestedTransaction(boolean)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.checkIfAnyActivationHasHoldCursor(String)",3,2,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.checkIfAnyDeclaredGlobalTempTablesForThisConnection()",1,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupOnError(Throwable)",4,8,9
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.cleanupTempTableOnCommitOrRollback(TableDescriptor,boolean)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.closeUnusedActivations()",4,8,9
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.commitNestedTransaction()",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.copyHashtableToAIHT(Map)",2,1,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.createSQLSessionContext()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.dataDictionaryInWriteMode()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.decrementBindCount()",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.decrementStatementDepth()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doCommit(boolean,boolean,int,boolean)",6,18,21
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.doRollback(boolean,boolean)",2,11,11
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.dropAllDeclaredGlobalTempTables()",3,6,10
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.dropDeclaredGlobalTempTable(String)",2,5,6
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.endTransactionActivationHandling(boolean)",4,10,11
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.findDeclaredGlobalTempTable(String)",4,3,4
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.finishDDTransaction()",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getActivationCount()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getAuthorizationId()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getAuthorizer()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getAutoincrementUpdate()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getBindCount()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentIsolationLevel()",1,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentIsolationLevelStr()",2,1,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentRoleId(Activation)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentRoleIdChecked(Activation)",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentSQLSessionContext()",1,4,4
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentSQLSessionContext(Activation)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentSchemaName()",2,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getCurrentSchemaName(Activation)",2,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDataDictionary()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDataValueFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDatabase()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDbname()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDefaultSchema()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDefaultSchema(Activation)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getDrdaID()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getIdentityValue()",1,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getInitialDefaultSchemaDescriptor()",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getInstanceNumber()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getLanguageConnectionFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getLanguageFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getLastActivation()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getLockEscalationThreshold()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getLogQueryPlan()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getLogStatementText()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getNameString(String,long)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getOptimizerFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getOptimizerTrace()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getOptimizerTraceHtml()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getOptimizerTraceOutput()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getPrepareIsolationLevel()",2,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getRunTimeStatisticsMode()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getRunTimeStatisticsObject()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getStatementContext()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getStatementDepth()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getStatisticsTiming()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getTableDescriptorForDeclaredGlobalTempTable(String)",2,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getTopLevelSQLSessionContext()",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getTransactionCompile()",1,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getTransactionExecute()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getTriggerExecutionContext()",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getTriggerTable()",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getUniqueCursorName()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getUniqueSavepointID()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.getUniqueSavepointName()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.incrementBindCount()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.incrementStatementDepth()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.initDefaultSchemaDescriptor()",1,2,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.initialize()",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.internalCommit(boolean)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.internalCommitNoSync(int)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.internalRollback()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.internalRollbackToSavepoint(String,boolean,Object)",1,4,6
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.isIsolationLevelSetUsingSQLorJDBC()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.isLastHandler(int)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.isReadOnly()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.isTransactionPristine()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.languageSetSavePoint(String,Object)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.lastAutoincrementValue(String,String,String)",4,2,4
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.lookupCursorActivation(String)",7,4,7
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.lookupStatement(GenericStatement)",3,3,5
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.markTempTableAsModifiedInUnitOfWork(String)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.nextAutoincrementValue(String,String,String)",2,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.notifyUnusedActivation()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popCompilerContext(CompilerContext)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popExecutionStmtValidator(ExecutionStmtValidator)",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popStatementContext(StatementContext,Throwable)",3,12,14
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popTriggerExecutionContext(TriggerExecutionContext)",1,3,4
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.popTriggerTable(TableDescriptor)",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(SchemaDescriptor,String,boolean,boolean)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.prepareInternalStatement(String)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushCompilerContext()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushCompilerContext(SchemaDescriptor)",1,7,8
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushExecutionStmtValidator(ExecutionStmtValidator)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushStatementContext(boolean,boolean,String,ParameterValueSet,boolean,long)",1,8,9
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushTriggerExecutionContext(TriggerExecutionContext)",2,2,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.pushTriggerTable(TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.releaseSavePoint(String,Object)",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.removeActivation(Activation)",1,4,4
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.removeStatement(Statement)",2,2,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.replaceDeclaredGlobalTempTable(String,TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.resetFromPool()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.resetIsolationLevelFlagUsedForSQLandJDBC()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.resetSavepoints()",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.resetSchemaUsages(Activation,String)",1,6,6
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.resetStatementDepth()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.roleIsSettable(String)",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setAutoincrementUpdate(boolean)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setCurrentRole(Activation,String)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setDataDictionaryWriteMode()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setDefaultSchema(Activation,SchemaDescriptor)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setDefaultSchema(SchemaDescriptor)",1,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setDrdaID(String)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setIdentityValue(long)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setIsolationLevel(int)",6,7,7
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setLogStatementText(boolean)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setOptimizerTrace(boolean)",3,1,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setOptimizerTraceHtml(boolean)",3,1,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setOptimizerTraceOutput(String)",1,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setPrepareIsolationLevel(int)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setReadOnly(boolean)",2,2,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setRunTimeStatisticsMode(boolean)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setRunTimeStatisticsObject(RunTimeStatistics)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setStatisticsTiming(boolean)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.setupNestedSessionContext(Activation)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.tempTablesAndCommit()",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.tempTablesAndRollback()",1,7,8
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.tempTablesReleaseSavepointLevels()",1,5,5
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.userCommit()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.userRollback()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.usesSqlAuthorization()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.validateStmtExecution(ConstantAction)",1,4,4
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.verifyAllHeldResultSetsAreClosed()",10,9,16
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.verifyNoOpenResultSets(PreparedStatement,Provider,int)",12,11,15
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.xaCommit(boolean)",1,1,2
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext.xaRollback()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.GenericLanguageConnectionFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.apply(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.boot(boolean,Properties)",1,3,3
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.canSupport(Properties)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getClassFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getDataValueFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getExecutionFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getJavaFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getNextLCCInstanceNumber()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getNodeFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getOptimizerFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getPropertyFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getStatement(SchemaDescriptor,String,boolean)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getStatementCache()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getTypeCompilerFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.getUUIDFactory()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.init(boolean,Dictionary)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.map(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.newCacheable(CacheManager)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.newLanguageConnectionContext(ContextManager,TransactionController,LanguageFactory,Database,String,String,String)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.newParser(CompilerContext)",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.setValidation()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.statementCacheSize(Properties)",1,3,4
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.stop()",1,1,1
"org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory.validate(String,Serializable,Dictionary)",7,13,13
"org.apache.derby.impl.sql.conn.GenericStatementContext.CancelQueryTask.CancelQueryTask(StatementContext)",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.CancelQueryTask.forgetContext()",1,1,2
"org.apache.derby.impl.sql.conn.GenericStatementContext.CancelQueryTask.run()",1,2,2
"org.apache.derby.impl.sql.conn.GenericStatementContext.GenericStatementContext(LanguageConnectionContext)",1,2,2
"org.apache.derby.impl.sql.conn.GenericStatementContext.addDependency(Dependency)",1,1,2
"org.apache.derby.impl.sql.conn.GenericStatementContext.appendErrorInfo()",1,4,4
"org.apache.derby.impl.sql.conn.GenericStatementContext.cancel()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.cleanupOnError(Throwable)",2,13,16
"org.apache.derby.impl.sql.conn.GenericStatementContext.clearInUse()",1,2,2
"org.apache.derby.impl.sql.conn.GenericStatementContext.clearSavePoint()",1,4,4
"org.apache.derby.impl.sql.conn.GenericStatementContext.getActivation()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.getSQLAllowed()",2,1,2
"org.apache.derby.impl.sql.conn.GenericStatementContext.getSQLSessionContext()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.getStatementText()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.getSubqueryTrackingArray()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.getSystemCode()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.inTrigger()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.inUse()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.isAtomic()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.isCancelled()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.isForReadOnly()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.isLastHandler(int)",1,1,3
"org.apache.derby.impl.sql.conn.GenericStatementContext.onStack()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.pleaseBeOnStack()",2,2,2
"org.apache.derby.impl.sql.conn.GenericStatementContext.resetSavePoint()",1,4,5
"org.apache.derby.impl.sql.conn.GenericStatementContext.setActivation(Activation)",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.setInUse(boolean,boolean,boolean,String,ParameterValueSet,long)",1,2,2
"org.apache.derby.impl.sql.conn.GenericStatementContext.setParentRollback()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.setSQLAllowed(short,boolean)",1,1,3
"org.apache.derby.impl.sql.conn.GenericStatementContext.setSQLSessionContext(SQLSessionContext)",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.setSavePoint()",1,3,3
"org.apache.derby.impl.sql.conn.GenericStatementContext.setSubqueryResultSet(int,NoPutResultSet,int)",1,3,4
"org.apache.derby.impl.sql.conn.GenericStatementContext.setSystemCode()",1,1,1
"org.apache.derby.impl.sql.conn.GenericStatementContext.setTopResultSet(ResultSet,NoPutResultSet[])",1,5,7
"org.apache.derby.impl.sql.conn.GenericStatementContext.stuffTopResultSet(ResultSet,NoPutResultSet[])",1,1,1
"org.apache.derby.impl.sql.conn.SQLSessionContextImpl.SQLSessionContextImpl(SchemaDescriptor)",1,1,1
"org.apache.derby.impl.sql.conn.SQLSessionContextImpl.getDefaultSchema()",1,1,1
"org.apache.derby.impl.sql.conn.SQLSessionContextImpl.getRole()",1,1,1
"org.apache.derby.impl.sql.conn.SQLSessionContextImpl.setDefaultSchema(SchemaDescriptor)",1,1,1
"org.apache.derby.impl.sql.conn.SQLSessionContextImpl.setRole(String)",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.TempTableInfo(TableDescriptor,int)",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.getDeclaredInSavepointLevel()",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.getDroppedInSavepointLevel()",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.getModifiedInSavepointLevel()",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.getTableDescriptor()",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.matches(String)",1,2,2
"org.apache.derby.impl.sql.conn.TempTableInfo.setDeclaredInSavepointLevel(int)",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.setDroppedInSavepointLevel(int)",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.setModifiedInSavepointLevel(int)",1,1,1
"org.apache.derby.impl.sql.conn.TempTableInfo.setTableDescriptor(TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependency.BasicDependency(Dependent,Provider)",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependency.getDependent()",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependency.getProvider()",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependency.getProviderKey()",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependencyManager.BasicDependencyManager(DataDictionary)",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependencyManager.addDependency(Dependent,Provider,ContextManager)",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependencyManager.addDependency(Dependent,Provider,ContextManager,TransactionController)",1,8,8
"org.apache.derby.impl.sql.depend.BasicDependencyManager.addDependencyToTable(Hashtable,Object,Dependency)",4,8,9
"org.apache.derby.impl.sql.depend.BasicDependencyManager.bubbleSort(UUID[])",1,4,5
"org.apache.derby.impl.sql.depend.BasicDependencyManager.clearColumnInfoInProviders(ProviderList)",1,3,3
"org.apache.derby.impl.sql.depend.BasicDependencyManager.clearDependencies(LanguageConnectionContext,Dependent)",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependencyManager.clearDependencies(LanguageConnectionContext,Dependent,TransactionController)",2,4,5
"org.apache.derby.impl.sql.depend.BasicDependencyManager.clearInMemoryDependency(Dependency)",6,10,17
"org.apache.derby.impl.sql.depend.BasicDependencyManager.clearProviderDependency(UUID,Dependency)",2,2,3
"org.apache.derby.impl.sql.depend.BasicDependencyManager.copyDependencies(Dependent,Dependent,boolean,ContextManager)",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependencyManager.copyDependencies(Dependent,Dependent,boolean,ContextManager,TransactionController)",2,4,5
"org.apache.derby.impl.sql.depend.BasicDependencyManager.coreInvalidateFor(Provider,int,LanguageConnectionContext)",13,15,22
"org.apache.derby.impl.sql.depend.BasicDependencyManager.countDependencies()",1,3,3
"org.apache.derby.impl.sql.depend.BasicDependencyManager.dropDependency(LanguageConnectionContext,Dependent,Provider)",1,4,4
"org.apache.derby.impl.sql.depend.BasicDependencyManager.dumpDependencies()",1,15,16
"org.apache.derby.impl.sql.depend.BasicDependencyManager.getActionString(int)",40,3,41
"org.apache.derby.impl.sql.depend.BasicDependencyManager.getDependencyDescriptorList(List,Provider)",1,6,6
"org.apache.derby.impl.sql.depend.BasicDependencyManager.getDependents(Provider)",2,4,4
"org.apache.derby.impl.sql.depend.BasicDependencyManager.getLanguageConnectionContext(ContextManager)",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependencyManager.getPersistentProviderInfos(Dependent)",2,3,4
"org.apache.derby.impl.sql.depend.BasicDependencyManager.getPersistentProviderInfos(ProviderList)",1,6,7
"org.apache.derby.impl.sql.depend.BasicDependencyManager.getProviders(Dependent)",2,4,5
"org.apache.derby.impl.sql.depend.BasicDependencyManager.invalidateFor(Provider,int,LanguageConnectionContext)",1,2,2
"org.apache.derby.impl.sql.depend.BasicDependencyManager.newSList()",1,1,1
"org.apache.derby.impl.sql.depend.BasicDependencyManager.newSList(List)",1,1,1
"org.apache.derby.impl.sql.depend.BasicProviderInfo.BasicProviderInfo()",1,1,1
"org.apache.derby.impl.sql.depend.BasicProviderInfo.BasicProviderInfo(UUID,DependableFinder,String)",1,1,1
"org.apache.derby.impl.sql.depend.BasicProviderInfo.getDependableFinder()",1,1,1
"org.apache.derby.impl.sql.depend.BasicProviderInfo.getObjectId()",1,1,1
"org.apache.derby.impl.sql.depend.BasicProviderInfo.getProviderName()",1,1,1
"org.apache.derby.impl.sql.depend.BasicProviderInfo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.depend.BasicProviderInfo.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.depend.BasicProviderInfo.toString()",2,1,5
"org.apache.derby.impl.sql.depend.BasicProviderInfo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.depend.DepClassInfo.getNewInstance()",3,2,3
"org.apache.derby.impl.sql.execute.AggregateSortObserver.AggregateSortObserver(boolean,GenericAggregator[],GenericAggregator[],ExecRow)",1,2,3
"org.apache.derby.impl.sql.execute.AggregateSortObserver.insertDuplicateKey(DataValueDescriptor[],DataValueDescriptor[])",2,3,4
"org.apache.derby.impl.sql.execute.AggregateSortObserver.insertNonDuplicateKey(DataValueDescriptor[])",1,6,6
"org.apache.derby.impl.sql.execute.AggregatorInfo.AggregatorInfo()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.AggregatorInfo(String,String,int,int,int,boolean,ResultDescription)",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.getAggregateName()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.getAggregatorClassName()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.getAggregatorColNum()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.getInputColNum()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.getOutputColNum()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.getResultDescription()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.isDistinct()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfo.toString()",2,1,2
"org.apache.derby.impl.sql.execute.AggregatorInfo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfoList.AggregatorInfoList()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfoList.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.AggregatorInfoList.hasDistinct()",3,2,3
"org.apache.derby.impl.sql.execute.AggregatorInfoList.readExternal(ObjectInput)",1,2,2
"org.apache.derby.impl.sql.execute.AggregatorInfoList.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.AlterTableConstantAction(SchemaDescriptor,String,UUID,long,int,ColumnInfo[],ConstraintConstantAction[],char,boolean,int,boolean,boolean,boolean,boolean,boolean)",1,2,2
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.addNewColumnToTable(Activation,LanguageConnectionContext,DataDictionary,TransactionController,int)",2,6,7
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.cleanUp()",1,9,9
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.closeBulkFetchScan()",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.closeRowSource()",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.compressIndexArrays(long[],IndexRowGenerator[])",5,1,10
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.compressTable(Activation)",1,8,10
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.createNewBackingCongloms(ArrayList,long[],Activation,DataDictionary)",3,3,7
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.defragmentRows(TransactionController,LanguageConnectionContext)",3,14,17
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropAllColumnDefaults(UUID,DataDictionary)",1,3,3
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.dropColumnFromTable(Activation,int)",18,26,39
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeConstantAction(Activation)",15,45,52
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.executeUpdate(LanguageConnectionContext,String)",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.fixIndex(DataValueDescriptor[],DataValueDescriptor[],RowLocation,RowLocation,ConglomerateController,ScanController,int[])",1,4,5
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.getAffectedIndexes(Activation)",8,12,25
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.getColumnMax(Activation,TableDescriptor,String,long,long)",1,1,2
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.getNextRowFromRowSource()",2,9,13
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.getSemiRowCount(TransactionController)",3,1,3
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.getValidColumns()",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.insertIntoSorter(int,RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnConstraint(Activation,String,boolean)",6,4,6
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnDefault(Activation,int)",1,5,6
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.modifyColumnType(Activation,int)",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.needsRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.needsToClone()",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.objectifyStreamingColumns()",3,3,4
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.openBulkFetchScan(long)",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.purgeRows(TransactionController)",2,3,4
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.rowLocation(RowLocation)",1,3,5
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.setUpAllSorts(ExecRow,RowLocation)",1,3,4
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.setup_indexes(TransactionController,TableDescriptor,int[][],ScanController[],ConglomerateController[],DataValueDescriptor[][])",3,2,4
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.toString()",2,1,2
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateEnd(TransactionController)",2,3,4
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.truncateTable(Activation)",6,13,14
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateAllIndexes(long,DataDictionary)",1,6,6
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateIndex(long,DataDictionary,int,long[])",1,8,8
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateNewAutoincrementColumn(Activation,String,long,long)",2,3,3
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.updateNewColumnToDefault(Activation,String,String,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.execute.AlterTableConstantAction.validateNotNullConstraint(String[],boolean[],int,LanguageConnectionContext,String)",7,10,11
"org.apache.derby.impl.sql.execute.AnyResultSet.AnyResultSet(NoPutResultSet,Activation,GeneratedMethod,int,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.AnyResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.AnyResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.AnyResultSet.getNextRowCore()",1,5,5
"org.apache.derby.impl.sql.execute.AnyResultSet.getPointOfAttachment()",1,1,1
"org.apache.derby.impl.sql.execute.AnyResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.AnyResultSet.openCore()",2,3,3
"org.apache.derby.impl.sql.execute.AnyResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.AutoincrementCounter.AutoincrementCounter(Long,long,long,String,String,String,int)",1,1,1
"org.apache.derby.impl.sql.execute.AutoincrementCounter.flushToDisk(TransactionController,DataDictionary,UUID)",1,1,1
"org.apache.derby.impl.sql.execute.AutoincrementCounter.getColumnPosition()",1,1,1
"org.apache.derby.impl.sql.execute.AutoincrementCounter.getCurrentValue()",2,1,2
"org.apache.derby.impl.sql.execute.AutoincrementCounter.getIdentity()",1,1,1
"org.apache.derby.impl.sql.execute.AutoincrementCounter.getStartValue()",1,1,1
"org.apache.derby.impl.sql.execute.AutoincrementCounter.makeIdentity(String,String,String)",1,1,1
"org.apache.derby.impl.sql.execute.AutoincrementCounter.makeIdentity(TableDescriptor,ColumnDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.AutoincrementCounter.reset(boolean)",1,1,2
"org.apache.derby.impl.sql.execute.AutoincrementCounter.toString()",1,1,1
"org.apache.derby.impl.sql.execute.AutoincrementCounter.update()",3,3,3
"org.apache.derby.impl.sql.execute.AutoincrementCounter.update(long)",1,1,1
"org.apache.derby.impl.sql.execute.AvgAggregator.accumulate(DataValueDescriptor)",2,13,15
"org.apache.derby.impl.sql.execute.AvgAggregator.getResult()",4,5,6
"org.apache.derby.impl.sql.execute.AvgAggregator.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.AvgAggregator.merge(ExecAggregator)",2,2,3
"org.apache.derby.impl.sql.execute.AvgAggregator.newAggregator()",1,1,1
"org.apache.derby.impl.sql.execute.AvgAggregator.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.AvgAggregator.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.BaseActivation()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.addWarning(SQLWarning)",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.allocateQualArray(Qualifier[][],int,int)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.checkIfThisActivationHasHoldCursor(String)",5,4,7
"org.apache.derby.impl.sql.execute.BaseActivation.checkPositionedStatement(String,String)",2,3,4
"org.apache.derby.impl.sql.execute.BaseActivation.checkStatementValidity()",3,2,4
"org.apache.derby.impl.sql.execute.BaseActivation.clearCurrentRow(int)",1,4,6
"org.apache.derby.impl.sql.execute.BaseActivation.clearHeapConglomerateController()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.clearIndexScanInfo()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.clearParentResultSets()",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.clearWarnings()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.close()",2,5,5
"org.apache.derby.impl.sql.execute.BaseActivation.closeActivationAction()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e0()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e1()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e2()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e3()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e4()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e5()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e6()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e7()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e8()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.e9()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getAutoGeneratedKeysColumnIndexes()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getAutoGeneratedKeysColumnNames()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getAutoGeneratedKeysResultsetMode()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getCalendar()",1,1,2
"org.apache.derby.impl.sql.execute.BaseActivation.getCallActivation()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getColumnFromRow(int,int)",2,1,2
"org.apache.derby.impl.sql.execute.BaseActivation.getConstantAction()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getContextManager()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getCurrentConnection()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getCursorName()",1,1,2
"org.apache.derby.impl.sql.execute.BaseActivation.getCursorResultSet()",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.getDB2Length(DataValueDescriptor,int,NumberDataValue)",1,4,4
"org.apache.derby.impl.sql.execute.BaseActivation.getDDLTableDescriptor()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getDataValueFactory()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getDynamicResults()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getExecutionFactory()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getForCreateTable()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getForUpdateIndexScan()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getGC()",1,3,3
"org.apache.derby.impl.sql.execute.BaseActivation.getHeapConglomerateController()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getIndexConglomerateNumber()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getIndexScanController()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getLanguageConnectionContext()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getMaxDynamicResults()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getMaxRows()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getMethod(String)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getNestedSQLSessionContext()",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.getNumSubqueries()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getParameter(int)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getParameterValueSet()",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.getParentResultSet(String)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getParentResultSets()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getPreparedStatement()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getResultDescription()",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.getResultSet()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getResultSetFactory()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getResultSetHoldability()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getRowLocationTemplate(int)",1,4,4
"org.apache.derby.impl.sql.execute.BaseActivation.getScrollable()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getSetAutoincrementValue(int,long)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getTargetResultSet()",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.getTargetVTI()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getTransactionController()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.getWarnings()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.informOfRowCount(NoPutResultSet,long)",1,10,12
"org.apache.derby.impl.sql.execute.BaseActivation.initFromContext(Context)",1,4,4
"org.apache.derby.impl.sql.execute.BaseActivation.isClosed()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.isCursorActivation()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.isInUse()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.isSingleExecution()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.markUnused()",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.materializeResultSetIfPossible(NoPutResultSet)",6,6,11
"org.apache.derby.impl.sql.execute.BaseActivation.nullToPrimitiveTest(DataValueDescriptor,String)",2,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.reinitializeQualifiers(Qualifier[][])",1,4,4
"org.apache.derby.impl.sql.execute.BaseActivation.reset()",1,3,3
"org.apache.derby.impl.sql.execute.BaseActivation.setAutoGeneratedKeysResultsetInfo(int[],String[])",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setCallActivation(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setColumnPosition(int[],int,int)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setCurrentRow(ExecRow,int)",1,4,6
"org.apache.derby.impl.sql.execute.BaseActivation.setCursorName(String)",1,1,2
"org.apache.derby.impl.sql.execute.BaseActivation.setDDLTableDescriptor(TableDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setForCreateTable()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setForUpdateIndexScan(CursorResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setGC(GeneratedClass)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setHeapConglomerateController(ConglomerateController)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setIndexConglomerateNumber(long)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setIndexScanController(ScanController)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setMaxRows(int)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setParameterValueSet(int,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setParameters(ParameterValueSet,DataTypeDescriptor[])",9,7,11
"org.apache.derby.impl.sql.execute.BaseActivation.setParentResultSet(TemporaryRowHolder,String)",1,2,3
"org.apache.derby.impl.sql.execute.BaseActivation.setQualifier(Qualifier[][],Qualifier,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setResultSetHoldability(boolean)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setSingleExecution()",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setTargetVTI(ResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.BaseActivation.setupActivation(ExecPreparedStatement,boolean)",1,4,4
"org.apache.derby.impl.sql.execute.BaseActivation.shouldWeCheckRowCounts()",1,4,4
"org.apache.derby.impl.sql.execute.BaseActivation.startExecution()",1,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.throwIfClosed(String)",2,2,2
"org.apache.derby.impl.sql.execute.BaseActivation.throwIfMissingParms()",2,3,3
"org.apache.derby.impl.sql.execute.BaseExpressionActivation.BaseExpressionActivation()",1,1,1
"org.apache.derby.impl.sql.execute.BaseExpressionActivation.maxValue(DataValueDescriptor,DataValueDescriptor,DataValueDescriptor,DataValueDescriptor,int,int)",1,5,8
"org.apache.derby.impl.sql.execute.BaseExpressionActivation.minValue(DataValueDescriptor,DataValueDescriptor,DataValueDescriptor,DataValueDescriptor,int,int)",1,5,8
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.BasicNoPutResultSetImpl(Activation,double,double)",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.addWarning(SQLWarning)",2,5,5
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.attachStatementContext()",1,5,5
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.checkCancellationFlag()",3,2,3
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.checkRowPosition(int)",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.cleanUp()",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.dumpTimeStats(String,String)",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.finish()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.finishAndRTS()",1,5,5
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getAbsoluteRow(int)",2,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getActivation()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getAutoGeneratedKeysResultset()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getBeginExecutionTimestamp()",2,1,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getCompactRow(ExecRow,FormatableBitSet,boolean)",4,6,8
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getCurrentTimeMillis()",2,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getElapsedMillis(long)",2,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getEndExecutionTimestamp()",2,1,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getEstimatedRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getExecuteTime()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getExecutionFactory()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getFirstRow()",2,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getLanguageConnectionContext()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getLastRow()",2,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow()",2,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getPointOfAttachment()",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getPreviousRow()",2,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getRelativeRow(int)",2,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getRowNumber()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getScanIsolationLevel()",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getSubqueryTrackingArray(int)",1,1,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getTransactionController()",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getWarnings()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.isClosed()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.isForUpdate()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.markAsTopResultSet()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.modifiedRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.open()",1,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.recordConstructorTime()",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.reopenCore()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.requiresRelocking()",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.resultSetNumber()",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.returnsRows()",1,1,1
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.setAfterLastRow()",2,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.setBeforeFirstRow()",2,4,4
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.setCompactRow(ExecRow,ExecRow)",1,2,2
"org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.setCompatRow(ExecRow,DataValueDescriptor[])",1,1,2
"org.apache.derby.impl.sql.execute.BasicSortObserver.BasicSortObserver(boolean,boolean,ExecRow,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.BasicSortObserver.addToFreeList(DataValueDescriptor[],int)",1,3,3
"org.apache.derby.impl.sql.execute.BasicSortObserver.getArrayClone()",2,2,2
"org.apache.derby.impl.sql.execute.BasicSortObserver.getClone(DataValueDescriptor[])",1,2,2
"org.apache.derby.impl.sql.execute.BasicSortObserver.insertDuplicateKey(DataValueDescriptor[],DataValueDescriptor[])",1,3,3
"org.apache.derby.impl.sql.execute.BasicSortObserver.insertNonDuplicateKey(DataValueDescriptor[])",1,2,2
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.BulkTableScanResultSet(long,StaticCompiledOpenConglomInfo,Activation,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],String,String,String,boolean,boolean,int,int,int,boolean,int,int,boolean,double,double)",1,4,4
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.canGetInstantaneousLocks()",1,1,1
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.close()",1,1,1
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.getNextRowCore()",6,7,9
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.openCore()",1,1,1
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.openScanController(TransactionController)",1,5,6
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reloadArray()",1,1,1
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.reopenCore()",1,1,1
"org.apache.derby.impl.sql.execute.BulkTableScanResultSet.requiresRelocking()",1,1,3
"org.apache.derby.impl.sql.execute.CallStatementResultSet.CallStatementResultSet(GeneratedMethod,Activation)",1,1,1
"org.apache.derby.impl.sql.execute.CallStatementResultSet.cleanUp()",1,1,1
"org.apache.derby.impl.sql.execute.CallStatementResultSet.close()",6,6,9
"org.apache.derby.impl.sql.execute.CallStatementResultSet.open()",1,1,1
"org.apache.derby.impl.sql.execute.CardinalityCounter.CardinalityCounter(RowLocationRetRowSource)",1,1,1
"org.apache.derby.impl.sql.execute.CardinalityCounter.clone(DataValueDescriptor[])",1,2,2
"org.apache.derby.impl.sql.execute.CardinalityCounter.closeRowSource()",1,1,1
"org.apache.derby.impl.sql.execute.CardinalityCounter.getCardinality()",1,1,1
"org.apache.derby.impl.sql.execute.CardinalityCounter.getNextRowFromRowSource()",1,2,2
"org.apache.derby.impl.sql.execute.CardinalityCounter.getRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.CardinalityCounter.getValidColumns()",1,1,1
"org.apache.derby.impl.sql.execute.CardinalityCounter.keepCount(DataValueDescriptor[])",5,4,7
"org.apache.derby.impl.sql.execute.CardinalityCounter.needsRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.CardinalityCounter.needsToClone()",1,1,1
"org.apache.derby.impl.sql.execute.CardinalityCounter.rowLocation(RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.ColumnInfo.ColumnInfo()",1,1,1
"org.apache.derby.impl.sql.execute.ColumnInfo.ColumnInfo(String,DataTypeDescriptor,DataValueDescriptor,DefaultInfo,UUID,UUID,int,long,long,long)",1,1,1
"org.apache.derby.impl.sql.execute.ColumnInfo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.ColumnInfo.readExternal(ObjectInput)",1,2,2
"org.apache.derby.impl.sql.execute.ColumnInfo.toString()",2,1,9
"org.apache.derby.impl.sql.execute.ColumnInfo.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.sql.execute.ConstantActionActivation.execute()",1,2,2
"org.apache.derby.impl.sql.execute.ConstantActionActivation.getExecutionCount()",1,1,1
"org.apache.derby.impl.sql.execute.ConstantActionActivation.getRowCountCheckVector()",1,1,1
"org.apache.derby.impl.sql.execute.ConstantActionActivation.getStalePlanCheckInterval()",1,1,1
"org.apache.derby.impl.sql.execute.ConstantActionActivation.postConstructor()",1,1,1
"org.apache.derby.impl.sql.execute.ConstantActionActivation.setExecutionCount(int)",1,1,1
"org.apache.derby.impl.sql.execute.ConstantActionActivation.setRowCountCheckVector(Vector)",1,1,1
"org.apache.derby.impl.sql.execute.ConstantActionActivation.setStalePlanCheckInterval(int)",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintConstantAction.ConstraintConstantAction(String,int,String,UUID,String,IndexConstantAction)",1,2,2
"org.apache.derby.impl.sql.execute.ConstraintConstantAction.getConstraintName()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintConstantAction.getConstraintType()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintConstantAction.getIndexAction()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintConstantAction.validateConstraint(String,String,TableDescriptor,LanguageConnectionContext,boolean)",3,7,7
"org.apache.derby.impl.sql.execute.ConstraintConstantAction.validateFKConstraint(TransactionController,DataDictionary,ForeignKeyConstraintDescriptor,ReferencedKeyConstraintDescriptor,ExecRow)",3,5,5
"org.apache.derby.impl.sql.execute.ConstraintInfo.ConstraintInfo()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintInfo.ConstraintInfo(String,SchemaDescriptor,String[],int,int)",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintInfo.getReferencedColumnNames()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintInfo.getReferencedTableDescriptor(DataDictionary)",2,1,2
"org.apache.derby.impl.sql.execute.ConstraintInfo.getReferencedTableName()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintInfo.getReferencedTableSchemaDescriptor(DataDictionary)",2,2,2
"org.apache.derby.impl.sql.execute.ConstraintInfo.getReferentialActionDeleteRule()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintInfo.getReferentialActionUpdateRule()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintInfo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.ConstraintInfo.readExternal(ObjectInput)",1,3,3
"org.apache.derby.impl.sql.execute.ConstraintInfo.toString()",2,5,5
"org.apache.derby.impl.sql.execute.ConstraintInfo.writeExternal(ObjectOutput)",1,3,3
"org.apache.derby.impl.sql.execute.CountAggregator.accumulate(DataValueDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.CountAggregator.accumulate(DataValueDescriptor,Object)",1,2,2
"org.apache.derby.impl.sql.execute.CountAggregator.getResult()",1,1,1
"org.apache.derby.impl.sql.execute.CountAggregator.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.CountAggregator.isCountStar()",1,1,1
"org.apache.derby.impl.sql.execute.CountAggregator.merge(ExecAggregator)",1,2,2
"org.apache.derby.impl.sql.execute.CountAggregator.newAggregator()",1,1,1
"org.apache.derby.impl.sql.execute.CountAggregator.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.CountAggregator.setup(String)",1,1,1
"org.apache.derby.impl.sql.execute.CountAggregator.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.CreateAliasConstantAction.CreateAliasConstantAction(String,String,String,AliasInfo,char)",2,3,6
"org.apache.derby.impl.sql.execute.CreateAliasConstantAction.executeConstantAction(Activation)",9,9,15
"org.apache.derby.impl.sql.execute.CreateAliasConstantAction.toString()",2,3,6
"org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.CreateConstraintConstantAction(String,int,boolean,String,UUID,String,String[],IndexConstantAction,String,boolean,ConstraintInfo,ProviderInfo[])",1,1,1
"org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.executeConstantAction(Activation)",8,19,25
"org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.genColumnPositions(TableDescriptor,boolean)",4,5,5
"org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.getConstraintText()",1,1,1
"org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.isForeignKeyConstraint()",1,1,1
"org.apache.derby.impl.sql.execute.CreateConstraintConstantAction.toString()",1,4,4
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.CreateIndexConstantAction(ConglomerateDescriptor,TableDescriptor,Properties)",1,3,3
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.CreateIndexConstantAction(boolean,boolean,boolean,String,String,String,String,UUID,String[],boolean[],boolean,UUID,Properties)",1,1,1
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.executeConstantAction(Activation)",18,43,64
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.getCreatedConglomNumber()",1,3,3
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.getCreatedUUID()",1,1,1
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.getIndexTemplateRow()",1,1,1
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.getReplacedConglomNumber()",1,1,1
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.loadSorter(ExecRow[],ExecIndexRow[],TransactionController,GroupFetchScanController,long,RowLocation[])",1,5,5
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.statementExceptionCleanup(ScanController,ConglomerateController)",1,3,3
"org.apache.derby.impl.sql.execute.CreateIndexConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.CreateRoleConstantAction.CreateRoleConstantAction(String)",1,1,1
"org.apache.derby.impl.sql.execute.CreateRoleConstantAction.executeConstantAction(Activation)",4,4,4
"org.apache.derby.impl.sql.execute.CreateRoleConstantAction.knownUser(String,String,LanguageConnectionContext,DataDictionary,TransactionController)",6,2,6
"org.apache.derby.impl.sql.execute.CreateRoleConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.CreateSchemaConstantAction(String,String)",1,1,1
"org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.executeConstantAction(Activation)",2,4,4
"org.apache.derby.impl.sql.execute.CreateSchemaConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.CreateTableConstantAction.CreateTableConstantAction(String,String,int,ColumnInfo[],CreateConstraintConstantAction[],Properties,char,boolean,boolean)",1,4,7
"org.apache.derby.impl.sql.execute.CreateTableConstantAction.executeConstantAction(Activation)",1,17,20
"org.apache.derby.impl.sql.execute.CreateTableConstantAction.toString()",2,2,2
"org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.CreateTriggerConstantAction(String,String,int,boolean,boolean,boolean,TableDescriptor,UUID,String,UUID,String,UUID,Timestamp,int[],String,boolean,boolean,String,String)",1,2,2
"org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.createSPS(LanguageConnectionContext,DataDescriptorGenerator,DataDictionary,TransactionController,UUID,SchemaDescriptor,UUID,UUID,String,boolean,TableDescriptor)",2,3,5
"org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.executeConstantAction(Activation)",3,12,12
"org.apache.derby.impl.sql.execute.CreateTriggerConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.CreateViewConstantAction.CreateViewConstantAction(String,String,int,String,int,ColumnInfo[],ProviderInfo[],UUID)",1,2,2
"org.apache.derby.impl.sql.execute.CreateViewConstantAction.executeConstantAction(Activation)",1,4,5
"org.apache.derby.impl.sql.execute.CreateViewConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.CurrentDatetime.CurrentDatetime()",1,1,1
"org.apache.derby.impl.sql.execute.CurrentDatetime.forget()",1,1,1
"org.apache.derby.impl.sql.execute.CurrentDatetime.getCurrentDate()",1,2,2
"org.apache.derby.impl.sql.execute.CurrentDatetime.getCurrentTime()",1,2,2
"org.apache.derby.impl.sql.execute.CurrentDatetime.getCurrentTimestamp()",1,2,2
"org.apache.derby.impl.sql.execute.CurrentDatetime.setCurrentDatetime()",1,1,2
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.CurrentOfResultSet(String,Activation,int)",1,2,2
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.getCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.getCursor()",2,7,8
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.getNextRowCore()",5,8,14
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.getRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.getSparseRow(ExecRow,int[])",1,2,7
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.getTimeSpent(int)",1,1,1
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.markRowAsDeleted()",1,1,1
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.CurrentOfResultSet.updateRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.CursorActivation.isCursorActivation()",1,1,1
"org.apache.derby.impl.sql.execute.CursorActivation.setCursorName(String)",1,2,2
"org.apache.derby.impl.sql.execute.DDLConstantAction.constructToString(String,String)",1,1,1
"org.apache.derby.impl.sql.execute.DDLConstantAction.getAndCheckSchemaDescriptor(DataDictionary,UUID,String)",1,1,1
"org.apache.derby.impl.sql.execute.DDLConstantAction.getSchemaDescriptorForCreate(DataDictionary,Activation,String)",3,4,5
"org.apache.derby.impl.sql.execute.DDLConstantAction.lockTableForDDL(TransactionController,long,boolean)",1,1,2
"org.apache.derby.impl.sql.execute.DDLConstantAction.storeConstraintDependenciesOnPrivileges(Activation,Dependent,UUID)",8,11,15
"org.apache.derby.impl.sql.execute.DDLConstantAction.storeViewTriggerDependenciesOnPrivileges(Activation,Dependent)",6,10,11
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.DDLSingleTableConstantAction(UUID)",1,1,1
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConglomerate(ConglomerateDescriptor,TableDescriptor,Activation,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConglomerate(ConglomerateDescriptor,TableDescriptor,boolean,List,Activation,LanguageConnectionContext)",2,3,4
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConstraint(ConstraintDescriptor,Activation,LanguageConnectionContext,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConstraint(ConstraintDescriptor,TableDescriptor,Activation,LanguageConnectionContext,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.dropConstraint(ConstraintDescriptor,TableDescriptor,List,Activation,LanguageConnectionContext,boolean)",2,5,6
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.executeConglomReplacement(ConstantAction,Activation)",1,3,3
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.getConglomReplacementAction(ConglomerateDescriptor,TableDescriptor,Properties)",1,1,1
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.loadIndexProperties(LanguageConnectionContext,ConglomerateDescriptor,Properties)",1,1,1
"org.apache.derby.impl.sql.execute.DDLSingleTableConstantAction.recreateUniqueConstraintBackingIndexAsUniqueWhenNotNull(ConglomerateDescriptor,TableDescriptor,Activation,LanguageConnectionContext)",1,3,3
"org.apache.derby.impl.sql.execute.DMLVTIResultSet.DMLVTIResultSet(NoPutResultSet,Activation)",1,1,1
"org.apache.derby.impl.sql.execute.DMLVTIResultSet.cleanUp()",1,2,2
"org.apache.derby.impl.sql.execute.DMLVTIResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.DMLVTIResultSet.open()",1,2,3
"org.apache.derby.impl.sql.execute.DMLWriteResultSet.DMLWriteResultSet(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.DMLWriteResultSet.DMLWriteResultSet(Activation,ConstantAction)",1,4,4
"org.apache.derby.impl.sql.execute.DMLWriteResultSet.decodeLockMode(int)",3,2,4
"org.apache.derby.impl.sql.execute.DMLWriteResultSet.getIndexNameFromCID(long)",1,1,1
"org.apache.derby.impl.sql.execute.DMLWriteResultSet.getNextRowCore(NoPutResultSet)",1,2,2
"org.apache.derby.impl.sql.execute.DMLWriteResultSet.makeDeferredSparseRow(ExecRow,FormatableBitSet,LanguageConnectionContext)",1,4,4
"org.apache.derby.impl.sql.execute.DMLWriteResultSet.modifiedRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.DMLWriteResultSet.objectifyStreams(ExecRow)",1,7,9
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.DeleteCascadeResultSet(NoPutResultSet,Activation,int,ResultSet[],String)",1,2,4
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.cleanUp()",1,3,3
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.collectAffectedRows(boolean)",1,3,6
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.deleteDeferredRows()",1,4,4
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.fireAfterTriggers()",1,4,6
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.fireBeforeTriggers(Hashtable)",1,6,7
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.isMultipleDeletePathsExist()",3,2,3
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.mergeResultSets()",4,4,5
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.mergeRowHolders(Hashtable)",3,5,5
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.open()",1,3,4
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.rowChangerFinish()",1,3,3
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.runFkChecker(boolean)",1,4,4
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.setRowHoldersTypeToUniqueStream()",1,3,3
"org.apache.derby.impl.sql.execute.DeleteCascadeResultSet.setup()",1,3,4
"org.apache.derby.impl.sql.execute.DeleteConstantAction.DeleteConstantAction()",1,1,1
"org.apache.derby.impl.sql.execute.DeleteConstantAction.DeleteConstantAction(long,StaticCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],ExecRow,boolean,UUID,int,FKInfo[],TriggerInfo,FormatableBitSet,int[],int[],int,boolean,ResultDescription,ConstantAction[])",1,1,1
"org.apache.derby.impl.sql.execute.DeleteConstantAction.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.DeleteConstantAction.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.DeleteConstantAction.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.DeleteResultSet.DeleteResultSet(NoPutResultSet,Activation)",1,1,1
"org.apache.derby.impl.sql.execute.DeleteResultSet.DeleteResultSet(NoPutResultSet,ConstantAction,Activation)",1,2,3
"org.apache.derby.impl.sql.execute.DeleteResultSet.cleanUp()",1,7,7
"org.apache.derby.impl.sql.execute.DeleteResultSet.collectAffectedRows()",1,9,10
"org.apache.derby.impl.sql.execute.DeleteResultSet.createDependentSource(RowChanger)",1,1,1
"org.apache.derby.impl.sql.execute.DeleteResultSet.deleteDeferredRows()",3,4,6
"org.apache.derby.impl.sql.execute.DeleteResultSet.finish()",1,2,2
"org.apache.derby.impl.sql.execute.DeleteResultSet.fireAfterTriggers()",1,2,2
"org.apache.derby.impl.sql.execute.DeleteResultSet.fireBeforeTriggers()",1,3,3
"org.apache.derby.impl.sql.execute.DeleteResultSet.open()",1,3,4
"org.apache.derby.impl.sql.execute.DeleteResultSet.runFkChecker(boolean)",1,3,3
"org.apache.derby.impl.sql.execute.DeleteResultSet.setup()",1,12,16
"org.apache.derby.impl.sql.execute.DeleteVTIResultSet.DeleteVTIResultSet(NoPutResultSet,Activation)",1,1,1
"org.apache.derby.impl.sql.execute.DeleteVTIResultSet.openCore()",2,12,14
"org.apache.derby.impl.sql.execute.DependentResultSet.DependentResultSet(long,StaticCompiledOpenConglomInfo,Activation,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],String,String,String,boolean,boolean,int,int,boolean,int,int,boolean,double,double,String,long,int,int)",1,4,4
"org.apache.derby.impl.sql.execute.DependentResultSet.addNewSources()",1,2,2
"org.apache.derby.impl.sql.execute.DependentResultSet.canGetInstantaneousLocks()",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.close()",1,5,5
"org.apache.derby.impl.sql.execute.DependentResultSet.fetchBaseRow()",1,3,3
"org.apache.derby.impl.sql.execute.DependentResultSet.fetchIndexRow()",2,1,2
"org.apache.derby.impl.sql.execute.DependentResultSet.finish()",1,2,2
"org.apache.derby.impl.sql.execute.DependentResultSet.getCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.getNextParentRow()",1,7,10
"org.apache.derby.impl.sql.execute.DependentResultSet.getNextRowCore()",4,6,7
"org.apache.derby.impl.sql.execute.DependentResultSet.getRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.getScanProperties()",1,3,5
"org.apache.derby.impl.sql.execute.DependentResultSet.getTimeSpent(int)",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.DependentResultSet.openHeapConglomerateController()",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.openIndexScan(ExecRow)",1,2,2
"org.apache.derby.impl.sql.execute.DependentResultSet.openIndexScanController(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.printPosition(int,ExecIndexRow)",2,5,8
"org.apache.derby.impl.sql.execute.DependentResultSet.printQualifiers()",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.printStartPosition()",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.printStopPosition()",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.reopenIndexScanController(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.DependentResultSet.setupQualifierRow(ExecRow)",1,1,2
"org.apache.derby.impl.sql.execute.DistinctGroupedAggregateResultSet.DistinctGroupedAggregateResultSet(NoPutResultSet,boolean,int,int,Activation,GeneratedMethod,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.DistinctScalarAggregateResultSet(NoPutResultSet,boolean,int,int,Activation,GeneratedMethod,int,int,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.close()",1,1,1
"org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.closeSource()",1,3,4
"org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.getNextRowCore()",1,5,5
"org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.getRowFromResultSet(boolean)",1,3,3
"org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.loadSorter()",1,2,2
"org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.DistinctScalarAggregateResultSet.reopenCore()",1,3,3
"org.apache.derby.impl.sql.execute.DistinctScanResultSet.DistinctScanResultSet(long,StaticCompiledOpenConglomInfo,Activation,GeneratedMethod,int,int,String,String,String,boolean,int,int,boolean,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.DistinctScanResultSet.getNextRowCore()",1,4,4
"org.apache.derby.impl.sql.execute.DropAliasConstantAction.DropAliasConstantAction(SchemaDescriptor,String,char)",1,1,1
"org.apache.derby.impl.sql.execute.DropAliasConstantAction.executeConstantAction(Activation)",2,2,2
"org.apache.derby.impl.sql.execute.DropAliasConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.DropConstraintConstantAction.DropConstraintConstantAction(String,String,String,UUID,String,IndexConstantAction,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.DropConstraintConstantAction.executeConstantAction(Activation)",7,13,16
"org.apache.derby.impl.sql.execute.DropConstraintConstantAction.toString()",2,1,3
"org.apache.derby.impl.sql.execute.DropIndexConstantAction.DropIndexConstantAction(String,String,String,String,UUID,long)",1,1,1
"org.apache.derby.impl.sql.execute.DropIndexConstantAction.executeConstantAction(Activation)",5,5,5
"org.apache.derby.impl.sql.execute.DropIndexConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.DropRoleConstantAction.DropRoleConstantAction(String)",1,1,1
"org.apache.derby.impl.sql.execute.DropRoleConstantAction.executeConstantAction(Activation)",2,2,2
"org.apache.derby.impl.sql.execute.DropRoleConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.DropSchemaConstantAction.DropSchemaConstantAction(String)",1,1,1
"org.apache.derby.impl.sql.execute.DropSchemaConstantAction.executeConstantAction(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.DropSchemaConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.DropStatisticsConstantAction.DropStatisticsConstantAction(SchemaDescriptor,String,String,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.DropStatisticsConstantAction.executeConstantAction(Activation)",1,3,3
"org.apache.derby.impl.sql.execute.DropStatisticsConstantAction.toString()",1,1,2
"org.apache.derby.impl.sql.execute.DropTableConstantAction.DropTableConstantAction(String,String,SchemaDescriptor,long,UUID,int)",1,2,2
"org.apache.derby.impl.sql.execute.DropTableConstantAction.dropAllConstraintDescriptors(TableDescriptor,Activation)",3,7,8
"org.apache.derby.impl.sql.execute.DropTableConstantAction.executeConstantAction(Activation)",9,14,16
"org.apache.derby.impl.sql.execute.DropTableConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.DropTriggerConstantAction.DropTriggerConstantAction(SchemaDescriptor,String,UUID)",1,2,2
"org.apache.derby.impl.sql.execute.DropTriggerConstantAction.executeConstantAction(Activation)",4,4,4
"org.apache.derby.impl.sql.execute.DropTriggerConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.DropViewConstantAction.DropViewConstantAction(String,String,SchemaDescriptor)",1,2,2
"org.apache.derby.impl.sql.execute.DropViewConstantAction.executeConstantAction(Activation)",3,3,3
"org.apache.derby.impl.sql.execute.DropViewConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.FKInfo.FKInfo()",1,1,1
"org.apache.derby.impl.sql.execute.FKInfo.FKInfo(String[],String,int,int,UUID,long,UUID[],long[],boolean[],int[],RowLocation,int[])",1,5,5
"org.apache.derby.impl.sql.execute.FKInfo.chooseRelevantFKInfos(FKInfo[],int[],boolean)",7,8,10
"org.apache.derby.impl.sql.execute.FKInfo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.FKInfo.readExternal(ObjectInput)",1,3,3
"org.apache.derby.impl.sql.execute.FKInfo.toString()",2,12,13
"org.apache.derby.impl.sql.execute.FKInfo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.ForeignKeyRIChecker(TransactionController,FKInfo)",1,3,3
"org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.doCheck(ExecRow,boolean)",4,2,4
"org.apache.derby.impl.sql.execute.ForeignKeyRIChecker.getRICheckIsolationLevel()",1,1,1
"org.apache.derby.impl.sql.execute.GenericAggregateResultSet.GenericAggregateResultSet(NoPutResultSet,int,Activation,GeneratedMethod,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericAggregateResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.GenericAggregateResultSet.finishAggregation(ExecIndexRow)",1,4,5
"org.apache.derby.impl.sql.execute.GenericAggregateResultSet.getSortAggregators(AggregatorInfoList,boolean,LanguageConnectionContext,NoPutResultSet)",1,4,4
"org.apache.derby.impl.sql.execute.GenericAggregator.GenericAggregator(AggregatorInfo,ClassFactory)",1,1,1
"org.apache.derby.impl.sql.execute.GenericAggregator.accumulate(DataValueDescriptor,DataValueDescriptor)",1,4,4
"org.apache.derby.impl.sql.execute.GenericAggregator.accumulate(ExecRow,ExecRow)",1,2,3
"org.apache.derby.impl.sql.execute.GenericAggregator.accumulate(Object[],Object[])",1,2,3
"org.apache.derby.impl.sql.execute.GenericAggregator.finish(ExecRow)",1,4,4
"org.apache.derby.impl.sql.execute.GenericAggregator.getAggregatorInfo()",1,1,1
"org.apache.derby.impl.sql.execute.GenericAggregator.getAggregatorInstance()",2,3,3
"org.apache.derby.impl.sql.execute.GenericAggregator.getColumnId()",1,1,1
"org.apache.derby.impl.sql.execute.GenericAggregator.initialize(ExecRow)",1,3,3
"org.apache.derby.impl.sql.execute.GenericAggregator.merge(ExecRow,ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.GenericAggregator.merge(Object[],Object[])",1,1,1
"org.apache.derby.impl.sql.execute.GenericAggregator.merge(Storable,Storable)",1,4,4
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.GenericConstantActionFactory()",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getAlterTableConstantAction(SchemaDescriptor,String,UUID,long,int,ColumnInfo[],ConstraintConstantAction[],char,boolean,int,boolean,boolean,boolean,boolean,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getAuthorizer()",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getCreateAliasConstantAction(String,String,String,AliasInfo,char)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getCreateConstraintConstantAction(String,int,boolean,String,UUID,String,String[],IndexConstantAction,String,boolean,ConstraintInfo,ProviderInfo[])",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getCreateIndexConstantAction(boolean,boolean,boolean,String,String,String,String,UUID,String[],boolean[],boolean,UUID,Properties)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getCreateRoleConstantAction(String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getCreateSchemaConstantAction(String,String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getCreateTableConstantAction(String,String,int,ColumnInfo[],CreateConstraintConstantAction[],Properties,char,boolean,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getCreateTriggerConstantAction(String,String,int,boolean,boolean,boolean,TableDescriptor,UUID,String,UUID,String,UUID,Timestamp,int[],String,boolean,boolean,String,String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getCreateViewConstantAction(String,String,int,String,int,ColumnInfo[],ProviderInfo[],UUID)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDeleteConstantAction(long,int,StaticCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],ExecRow,boolean,boolean,UUID,int,Object,Object,int[],long,String,String,ResultDescription,FKInfo[],TriggerInfo,FormatableBitSet,int[],int[],int,UUID,boolean,ConstantAction[])",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropAliasConstantAction(SchemaDescriptor,String,char)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropConstraintConstantAction(String,String,String,UUID,String,IndexConstantAction,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropIndexConstantAction(String,String,String,String,UUID,long)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropRoleConstantAction(String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropSchemaConstantAction(String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropStatisticsConstantAction(SchemaDescriptor,String,String,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropTableConstantAction(String,String,SchemaDescriptor,long,UUID,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropTriggerConstantAction(SchemaDescriptor,String,UUID)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getDropViewConstantAction(String,String,SchemaDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getGrantConstantAction(PrivilegeInfo,List)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getGrantRoleConstantAction(List,List)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getInsertConstantAction(TableDescriptor,long,StaticCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],String[],boolean,boolean,UUID,int,Object,Object,Properties,FKInfo[],TriggerInfo,int[],boolean[],UUID,Object[],Object[],boolean,RowLocation[])",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getLockTableConstantAction(String,long,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getRenameConstantAction(String,String,String,String,SchemaDescriptor,UUID,boolean,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getRevokeConstantAction(PrivilegeInfo,List)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getRevokeRoleConstantAction(List,List)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getSavepointConstantAction(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getSetConstraintsConstantAction(ConstraintDescriptorList,boolean,boolean,Object[])",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getSetRoleConstantAction(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getSetSchemaConstantAction(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getSetTransactionIsolationConstantAction(int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getUpdatableVTIConstantAction(int,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getUpdatableVTIConstantAction(int,boolean,int[])",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getUpdateConstantAction(long,int,StaticCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],String[],ExecRow,boolean,UUID,int,boolean,int[],int[],Object,FKInfo[],TriggerInfo,FormatableBitSet,int[],int[],int,boolean,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.GenericConstantActionFactory.getUpdateStatisticsConstantAction(boolean,String,UUID,UUID[],long[],ExecIndexRow[])",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionContext.GenericExecutionContext(ContextManager,ExecutionFactory)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionContext.cleanupOnError(Throwable)",4,3,4
"org.apache.derby.impl.sql.execute.GenericExecutionContext.getExecutionFactory()",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.GenericExecutionFactory()",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.canSupport(Properties)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getConstantActionFactory()",1,1,2
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getIndexableRow(ExecRow)",2,1,2
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getIndexableRow(int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getQualifier(int,int,GeneratedMethod,Activation,boolean,boolean,boolean,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getResultColumnDescriptor(ResultColumnDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getResultDescription(ResultColumnDescriptor[],String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getResultSetFactory()",1,1,2
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getResultSetStatisticsFactory()",1,2,2
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getRowChanger(long,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],DynamicCompiledOpenConglomInfo[],int,TransactionController,int[],FormatableBitSet,int[],int[],Activation)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getRowChanger(long,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],DynamicCompiledOpenConglomInfo[],int,TransactionController,int[],int[],Activation)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getScanQualifier(int)",1,1,2
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getTriggerExecutionContext(LanguageConnectionContext,ConnectionContext,String,int,int[],String[],UUID,String,Vector)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.getValueRow(int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.newExecutionContext(ContextManager)",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.releaseScanQualifier(ScanQualifier[][])",1,1,1
"org.apache.derby.impl.sql.execute.GenericExecutionFactory.stop()",1,1,1
"org.apache.derby.impl.sql.execute.GenericQualifier.GenericQualifier(int,int,GeneratedMethod,Activation,boolean,boolean,boolean,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericQualifier.clearOrderableCache()",1,1,3
"org.apache.derby.impl.sql.execute.GenericQualifier.getColumnId()",1,1,1
"org.apache.derby.impl.sql.execute.GenericQualifier.getOperator()",1,1,1
"org.apache.derby.impl.sql.execute.GenericQualifier.getOrderable()",2,3,3
"org.apache.derby.impl.sql.execute.GenericQualifier.getOrderedNulls()",1,1,1
"org.apache.derby.impl.sql.execute.GenericQualifier.getUnknownRV()",1,1,1
"org.apache.derby.impl.sql.execute.GenericQualifier.negateCompareResult()",1,1,1
"org.apache.derby.impl.sql.execute.GenericQualifier.reinitialize()",1,1,2
"org.apache.derby.impl.sql.execute.GenericQualifier.toString()",2,1,2
"org.apache.derby.impl.sql.execute.GenericRIChecker.GenericRIChecker(TransactionController,FKInfo)",1,2,2
"org.apache.derby.impl.sql.execute.GenericRIChecker.close()",1,2,2
"org.apache.derby.impl.sql.execute.GenericRIChecker.doCheck(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.GenericRIChecker.getRICheckIsolationLevel()",1,1,1
"org.apache.derby.impl.sql.execute.GenericRIChecker.getScanController(long,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo,ExecRow)",1,2,2
"org.apache.derby.impl.sql.execute.GenericRIChecker.isAnyFieldNull(ExecRow)",3,2,3
"org.apache.derby.impl.sql.execute.GenericRIChecker.setupQualifierRow(ExecRow)",1,1,2
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.GenericResultSetFactory()",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getAnyResultSet(NoPutResultSet,GeneratedMethod,int,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getAuthorizer(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getBulkTableScanResultSet(Activation,long,int,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],String,String,String,boolean,boolean,int,int,int,boolean,int,int,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getCallStatementResultSet(GeneratedMethod,Activation)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getCurrentOfResultSet(String,Activation,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getDDLResultSet(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getDeleteCascadeResultSet(NoPutResultSet,int,ResultSet[],String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getDeleteCascadeUpdateResultSet(NoPutResultSet,GeneratedMethod,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getDeleteResultSet(NoPutResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getDeleteVTIResultSet(NoPutResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getDistinctGroupedAggregateResultSet(NoPutResultSet,boolean,int,int,GeneratedMethod,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getDistinctScalarAggregateResultSet(NoPutResultSet,boolean,int,int,GeneratedMethod,int,int,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getDistinctScanResultSet(Activation,long,int,GeneratedMethod,int,int,String,String,String,boolean,int,int,boolean,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getGroupedAggregateResultSet(NoPutResultSet,boolean,int,int,GeneratedMethod,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getHashJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,GeneratedMethod,int,boolean,boolean,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getHashLeftOuterJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,GeneratedMethod,int,GeneratedMethod,boolean,boolean,boolean,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getHashScanResultSet(Activation,long,int,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],Qualifier[][],int,float,int,int,String,String,String,boolean,boolean,int,int,int,boolean,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getHashTableResultSet(NoPutResultSet,GeneratedMethod,Qualifier[][],GeneratedMethod,int,int,boolean,int,boolean,long,int,float,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getIndexRowToBaseRowResultSet(long,int,NoPutResultSet,GeneratedMethod,int,String,int,int,int,int,GeneratedMethod,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getInsertResultSet(NoPutResultSet,GeneratedMethod)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getInsertVTIResultSet(NoPutResultSet,NoPutResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getLastIndexKeyResultSet(Activation,int,GeneratedMethod,long,String,String,String,int,int,boolean,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getMaterializedResultSet(NoPutResultSet,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getMiscResultSet(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getMultiProbeTableScanResultSet(Activation,long,int,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],DataValueDescriptor[],int,String,String,String,boolean,boolean,int,int,int,boolean,int,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getNestedLoopJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,GeneratedMethod,int,boolean,boolean,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getNestedLoopLeftOuterJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,GeneratedMethod,int,GeneratedMethod,boolean,boolean,boolean,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getNormalizeResultSet(NoPutResultSet,int,int,double,double,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getOnceResultSet(NoPutResultSet,GeneratedMethod,int,int,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getProjectRestrictResultSet(NoPutResultSet,GeneratedMethod,GeneratedMethod,int,GeneratedMethod,int,boolean,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getRaDependentTableScanResultSet(Activation,long,int,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],String,String,String,boolean,boolean,int,int,int,boolean,int,boolean,double,double,String,long,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getRowResultSet(Activation,GeneratedMethod,boolean,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getScalarAggregateResultSet(NoPutResultSet,boolean,int,int,GeneratedMethod,int,int,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getScrollInsensitiveResultSet(NoPutResultSet,Activation,int,int,boolean,double,double)",2,1,2
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getSetOpResultSet(NoPutResultSet,NoPutResultSet,Activation,int,long,double,int,boolean,int,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getSetTransactionResultSet(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getSortResultSet(NoPutResultSet,boolean,boolean,int,GeneratedMethod,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getTableScanResultSet(Activation,long,int,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],String,String,String,boolean,boolean,int,int,int,boolean,int,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getUnionResultSet(NoPutResultSet,NoPutResultSet,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getUpdateResultSet(NoPutResultSet,GeneratedMethod)",1,2,2
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getUpdateVTIResultSet(NoPutResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getVTIResultSet(Activation,GeneratedMethod,int,GeneratedMethod,String,Qualifier[][],int,boolean,boolean,int,boolean,int,double,double,boolean,int)",1,1,1
"org.apache.derby.impl.sql.execute.GenericResultSetFactory.getWindowResultSet(Activation,NoPutResultSet,GeneratedMethod,int,int,int,GeneratedMethod,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.GenericScanQualifier.GenericScanQualifier()",1,1,1
"org.apache.derby.impl.sql.execute.GenericScanQualifier.clearOrderableCache()",1,1,1
"org.apache.derby.impl.sql.execute.GenericScanQualifier.getColumnId()",1,2,2
"org.apache.derby.impl.sql.execute.GenericScanQualifier.getOperator()",1,2,2
"org.apache.derby.impl.sql.execute.GenericScanQualifier.getOrderable()",1,2,2
"org.apache.derby.impl.sql.execute.GenericScanQualifier.getOrderedNulls()",1,2,2
"org.apache.derby.impl.sql.execute.GenericScanQualifier.getUnknownRV()",1,2,2
"org.apache.derby.impl.sql.execute.GenericScanQualifier.negateCompareResult()",1,2,2
"org.apache.derby.impl.sql.execute.GenericScanQualifier.reinitialize()",1,1,1
"org.apache.derby.impl.sql.execute.GenericScanQualifier.setQualifier(int,DataValueDescriptor,int,boolean,boolean,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.GenericTriggerExecutor.GenericTriggerExecutor(InternalTriggerExecutionContext,TriggerDescriptor,Activation,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.execute.GenericTriggerExecutor.clearSPS()",1,2,2
"org.apache.derby.impl.sql.execute.GenericTriggerExecutor.executeSPS(SPSDescriptor)",3,7,9
"org.apache.derby.impl.sql.execute.GenericTriggerExecutor.getAction()",1,1,1
"org.apache.derby.impl.sql.execute.GenericTriggerExecutor.getWhenClause()",1,1,1
"org.apache.derby.impl.sql.execute.GrantRevokeConstantAction.GrantRevokeConstantAction(boolean,PrivilegeInfo,List)",1,1,1
"org.apache.derby.impl.sql.execute.GrantRevokeConstantAction.executeConstantAction(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.GrantRevokeConstantAction.toString()",1,1,2
"org.apache.derby.impl.sql.execute.GrantRoleConstantAction.GrantRoleConstantAction(List,List)",1,1,1
"org.apache.derby.impl.sql.execute.GrantRoleConstantAction.executeConstantAction(Activation)",6,11,12
"org.apache.derby.impl.sql.execute.GrantRoleConstantAction.toString()",1,5,5
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.GroupedAggregateResultSet(NoPutResultSet,boolean,int,int,Activation,GeneratedMethod,int,int,double,double)",1,2,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.close()",1,5,5
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.closeSource()",1,2,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getCurrentRow()",1,2,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getNextRowCore()",6,7,9
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getNextRowFromRS()",1,2,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getRowFromResultSet()",1,2,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getRowFromSorter()",1,2,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getRowLocation()",2,1,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.initializeVectorAggregation(ExecRow)",1,3,3
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.loadSorter()",3,4,5
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.mergeVectorAggregates(ExecRow,ExecRow)",1,2,2
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.openCore()",1,4,4
"org.apache.derby.impl.sql.execute.GroupedAggregateResultSet.sameGroupingValues(ExecRow,ExecRow)",3,2,3
"org.apache.derby.impl.sql.execute.HashJoinResultSet.HashJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,Activation,GeneratedMethod,int,boolean,boolean,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.HashLeftOuterJoinResultSet.HashLeftOuterJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,Activation,GeneratedMethod,int,GeneratedMethod,boolean,boolean,boolean,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.HashScanResultSet.HashScanResultSet(long,StaticCompiledOpenConglomInfo,Activation,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],Qualifier[][],int,float,int,int,String,String,String,boolean,boolean,int,int,boolean,int,boolean,double,double)",1,4,4
"org.apache.derby.impl.sql.execute.HashScanResultSet.canGetInstantaneousLocks()",1,1,1
"org.apache.derby.impl.sql.execute.HashScanResultSet.close()",1,5,5
"org.apache.derby.impl.sql.execute.HashScanResultSet.getCurrentRow()",1,2,2
"org.apache.derby.impl.sql.execute.HashScanResultSet.getNextRowCore()",7,12,15
"org.apache.derby.impl.sql.execute.HashScanResultSet.getRowLocation()",3,3,5
"org.apache.derby.impl.sql.execute.HashScanResultSet.getScanProperties()",1,1,1
"org.apache.derby.impl.sql.execute.HashScanResultSet.getTimeSpent(int)",2,1,2
"org.apache.derby.impl.sql.execute.HashScanResultSet.isForUpdate()",1,1,1
"org.apache.derby.impl.sql.execute.HashScanResultSet.openCore()",1,10,14
"org.apache.derby.impl.sql.execute.HashScanResultSet.printPosition(int,GeneratedMethod,ExecIndexRow)",5,8,11
"org.apache.derby.impl.sql.execute.HashScanResultSet.printStartPosition()",1,1,1
"org.apache.derby.impl.sql.execute.HashScanResultSet.printStopPosition()",2,2,2
"org.apache.derby.impl.sql.execute.HashScanResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.HashScanResultSet.requiresRelocking()",1,1,3
"org.apache.derby.impl.sql.execute.HashScanResultSet.resetProbeVariables()",1,2,2
"org.apache.derby.impl.sql.execute.HashTableResultSet.HashTableResultSet(NoPutResultSet,Activation,GeneratedMethod,Qualifier[][],GeneratedMethod,int,int,boolean,int,boolean,long,int,float,boolean,double,double)",1,4,4
"org.apache.derby.impl.sql.execute.HashTableResultSet.close()",1,4,4
"org.apache.derby.impl.sql.execute.HashTableResultSet.doProjection(ExecRow)",2,4,7
"org.apache.derby.impl.sql.execute.HashTableResultSet.getCurrentRow()",2,8,10
"org.apache.derby.impl.sql.execute.HashTableResultSet.getNextRowCore()",6,18,21
"org.apache.derby.impl.sql.execute.HashTableResultSet.getNextRowFromRowSource()",3,8,8
"org.apache.derby.impl.sql.execute.HashTableResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.HashTableResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.HashTableResultSet.isForUpdate()",2,1,2
"org.apache.derby.impl.sql.execute.HashTableResultSet.openCore()",1,6,8
"org.apache.derby.impl.sql.execute.HashTableResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.HashTableResultSet.resetProbeVariables()",1,2,2
"org.apache.derby.impl.sql.execute.IndexChanger.IndexChanger(IndexRowGenerator,long,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo,String,ConglomerateController,TransactionController,int,FormatableBitSet,int,Activation)",1,3,4
"org.apache.derby.impl.sql.execute.IndexChanger.close()",1,2,3
"org.apache.derby.impl.sql.execute.IndexChanger.closeIndexCC()",1,2,2
"org.apache.derby.impl.sql.execute.IndexChanger.closeIndexSC()",1,2,3
"org.apache.derby.impl.sql.execute.IndexChanger.delete(ExecRow,RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.IndexChanger.doDeferredInsert()",1,3,3
"org.apache.derby.impl.sql.execute.IndexChanger.doDelete()",3,4,4
"org.apache.derby.impl.sql.execute.IndexChanger.doInsert()",1,1,1
"org.apache.derby.impl.sql.execute.IndexChanger.finish()",1,6,6
"org.apache.derby.impl.sql.execute.IndexChanger.indexRowChanged()",3,2,3
"org.apache.derby.impl.sql.execute.IndexChanger.insert(ExecRow,RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.IndexChanger.insertAndCheckDups(ExecIndexRow)",2,5,5
"org.apache.derby.impl.sql.execute.IndexChanger.insertForUpdate(ExecRow,RowLocation)",1,3,3
"org.apache.derby.impl.sql.execute.IndexChanger.open()",1,1,1
"org.apache.derby.impl.sql.execute.IndexChanger.openIndexCC()",1,3,3
"org.apache.derby.impl.sql.execute.IndexChanger.setBaseCC(ConglomerateController)",1,1,1
"org.apache.derby.impl.sql.execute.IndexChanger.setOurIndexRow(ExecRow,RowLocation)",1,2,2
"org.apache.derby.impl.sql.execute.IndexChanger.setOurUpdatedIndexRow(ExecRow,RowLocation)",1,2,2
"org.apache.derby.impl.sql.execute.IndexChanger.setRowHolder(TemporaryRowHolderImpl)",1,1,1
"org.apache.derby.impl.sql.execute.IndexChanger.setScan()",1,4,4
"org.apache.derby.impl.sql.execute.IndexChanger.update(ExecRow,ExecRow,RowLocation)",1,2,2
"org.apache.derby.impl.sql.execute.IndexColumnOrder.IndexColumnOrder()",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.IndexColumnOrder(int)",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.IndexColumnOrder(int,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.IndexColumnOrder(int,boolean,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.getColumnId()",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.getIsAscending()",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.getIsNullsOrderedLow()",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.IndexColumnOrder.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.IndexConstantAction.IndexConstantAction(UUID,String,String,String)",1,2,2
"org.apache.derby.impl.sql.execute.IndexConstantAction.getIndexName()",1,1,1
"org.apache.derby.impl.sql.execute.IndexConstantAction.setIndexName(String)",1,1,1
"org.apache.derby.impl.sql.execute.IndexRow.IndexRow(int)",1,1,1
"org.apache.derby.impl.sql.execute.IndexRow.areNullsOrdered(int)",1,1,1
"org.apache.derby.impl.sql.execute.IndexRow.cloneMe()",1,1,1
"org.apache.derby.impl.sql.execute.IndexRow.execRowToExecIndexRow(ExecRow)",1,2,2
"org.apache.derby.impl.sql.execute.IndexRow.orderedNulls(int)",1,1,1
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.IndexRowToBaseRowResultSet(long,int,Activation,NoPutResultSet,GeneratedMethod,int,String,int,int,int,int,GeneratedMethod,boolean,double,double)",1,4,7
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.close()",1,5,5
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getCurrentRow()",3,3,5
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextRowCore()",4,17,21
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.isForUpdate()",1,1,1
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.openCore()",1,4,9
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.positionScanAtRowLocation(RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.IndexSetChanger.IndexSetChanger(IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],DynamicCompiledOpenConglomInfo[],String[],ConglomerateController,TransactionController,int,FormatableBitSet,int,Activation)",1,2,2
"org.apache.derby.impl.sql.execute.IndexSetChanger.close()",1,3,3
"org.apache.derby.impl.sql.execute.IndexSetChanger.delete(ExecRow,RowLocation)",1,2,2
"org.apache.derby.impl.sql.execute.IndexSetChanger.finish()",1,3,3
"org.apache.derby.impl.sql.execute.IndexSetChanger.insert(ExecRow,RowLocation)",1,2,2
"org.apache.derby.impl.sql.execute.IndexSetChanger.open(boolean[])",1,2,2
"org.apache.derby.impl.sql.execute.IndexSetChanger.openIndexes(int)",4,4,10
"org.apache.derby.impl.sql.execute.IndexSetChanger.setBaseCC(ConglomerateController)",1,3,3
"org.apache.derby.impl.sql.execute.IndexSetChanger.setRowHolder(TemporaryRowHolderImpl)",1,1,1
"org.apache.derby.impl.sql.execute.IndexSetChanger.toString()",3,5,10
"org.apache.derby.impl.sql.execute.IndexSetChanger.update(ExecRow,ExecRow,RowLocation)",1,3,3
"org.apache.derby.impl.sql.execute.IndexValueRow.IndexValueRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.areNullsOrdered(int)",1,2,2
"org.apache.derby.impl.sql.execute.IndexValueRow.cloneColumn(int)",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.execRowToExecIndexRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.getClone()",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.getClone(FormatableBitSet)",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.getColumn(int)",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.getNewNullRow()",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.getNewObjectArray()",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.getRowArray()",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.getRowArrayClone()",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.nColumns()",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.orderedNulls(int)",1,2,2
"org.apache.derby.impl.sql.execute.IndexValueRow.resetRowArray()",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.setColumn(int,DataValueDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.setRowArray(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.sql.execute.IndexValueRow.toString()",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.InsertConstantAction()",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.InsertConstantAction(TableDescriptor,long,StaticCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],String[],boolean,Properties,UUID,int,FKInfo[],TriggerInfo,int[],boolean[],boolean,RowLocation[])",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.getAutoincIncrement(int)",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.getAutoincRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.getColumnName(int)",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.getSchemaName()",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.getTableName()",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.hasAutoincrement()",1,1,1
"org.apache.derby.impl.sql.execute.InsertConstantAction.readExternal(ObjectInput)",1,1,5
"org.apache.derby.impl.sql.execute.InsertConstantAction.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.InsertResultSet.InsertResultSet(NoPutResultSet,GeneratedMethod,Activation)",8,9,10
"org.apache.derby.impl.sql.execute.InsertResultSet.MyRowAllocator.MyRowAllocator(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.InsertResultSet.MyRowAllocator.invoke(Object)",1,1,1
"org.apache.derby.impl.sql.execute.InsertResultSet.bulkInsertCore(LanguageConnectionContext,long)",2,5,9
"org.apache.derby.impl.sql.execute.InsertResultSet.bulkValidateForeignKeys(TransactionController,ContextManager)",6,8,13
"org.apache.derby.impl.sql.execute.InsertResultSet.bulkValidateForeignKeysCore(TransactionController,ContextManager,FKInfo,long,long,String)",2,6,7
"org.apache.derby.impl.sql.execute.InsertResultSet.changedRow(ExecRow,RowLocation)",4,7,8
"org.apache.derby.impl.sql.execute.InsertResultSet.cleanUp()",1,18,18
"org.apache.derby.impl.sql.execute.InsertResultSet.close()",1,2,2
"org.apache.derby.impl.sql.execute.InsertResultSet.emptyIndexes(long,InsertConstantAction,TableDescriptor,DataDictionary,ExecRow)",1,12,14
"org.apache.derby.impl.sql.execute.InsertResultSet.evaluateCheckConstraints()",1,2,2
"org.apache.derby.impl.sql.execute.InsertResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.InsertResultSet.generatedColumnPositionsArray()",1,4,8
"org.apache.derby.impl.sql.execute.InsertResultSet.getAutoGeneratedKeysResultset()",1,1,1
"org.apache.derby.impl.sql.execute.InsertResultSet.getColumnNames(int[])",1,2,2
"org.apache.derby.impl.sql.execute.InsertResultSet.getCompactRow(ExecRow,int[])",2,3,3
"org.apache.derby.impl.sql.execute.InsertResultSet.getExclusiveTableLock()",1,2,2
"org.apache.derby.impl.sql.execute.InsertResultSet.getSetAutoincrementValue(int,long)",5,10,12
"org.apache.derby.impl.sql.execute.InsertResultSet.getTableScanResultSet(long)",1,2,2
"org.apache.derby.impl.sql.execute.InsertResultSet.isSingleRowResultSet()",1,1,3
"org.apache.derby.impl.sql.execute.InsertResultSet.isSourceRowResultSet()",1,1,2
"org.apache.derby.impl.sql.execute.InsertResultSet.makeIndexTemplate(FKInfo,ExecRow,ContextManager)",1,2,2
"org.apache.derby.impl.sql.execute.InsertResultSet.normalInsertCore(LanguageConnectionContext,boolean)",14,34,38
"org.apache.derby.impl.sql.execute.InsertResultSet.open()",4,18,20
"org.apache.derby.impl.sql.execute.InsertResultSet.preprocessSourceRow(ExecRow)",2,4,5
"org.apache.derby.impl.sql.execute.InsertResultSet.setEstimatedRowCount(long)",1,1,1
"org.apache.derby.impl.sql.execute.InsertResultSet.setUpAllSorts(ExecRow,RowLocation)",1,6,8
"org.apache.derby.impl.sql.execute.InsertResultSet.uniqueColumnPositionArray(int[])",1,1,5
"org.apache.derby.impl.sql.execute.InsertResultSet.updateAllIndexes(long,InsertConstantAction,TableDescriptor,DataDictionary,ExecRow)",2,7,7
"org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGenColumn(ColumnDescriptor)",1,2,2
"org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsIndexes(int[])",3,3,3
"org.apache.derby.impl.sql.execute.InsertResultSet.verifyAutoGeneratedColumnsNames(String[])",4,4,4
"org.apache.derby.impl.sql.execute.InsertResultSet.verifyBulkInsert()",2,3,3
"org.apache.derby.impl.sql.execute.InsertVTIResultSet.InsertVTIResultSet(NoPutResultSet,NoPutResultSet,Activation)",1,1,1
"org.apache.derby.impl.sql.execute.InsertVTIResultSet.cleanUp()",3,7,7
"org.apache.derby.impl.sql.execute.InsertVTIResultSet.finish()",2,4,4
"org.apache.derby.impl.sql.execute.InsertVTIResultSet.insertIntoVTI(ResultSet,ExecRow)",1,5,5
"org.apache.derby.impl.sql.execute.InsertVTIResultSet.openCore()",2,13,15
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.InternalTriggerExecutionContext(LanguageConnectionContext,ConnectionContext,String,int,int[],String[],UUID,String,Vector)",1,4,4
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.cleanup()",1,4,5
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.clearCurrentTriggerEvent()",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.clearTrigger()",1,3,3
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.copyHashtableToAIHT(Map)",2,1,3
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.ensureProperContext()",2,2,2
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getAutoincrementValue(String)",6,5,6
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getEventStatementText()",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getEventType()",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getModifiedColumns()",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getNewRow()",1,2,2
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getNewRowSet()",2,4,5
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getOldRow()",1,2,2
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getOldRowSet()",2,4,5
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getTargetTableId()",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.getTargetTableName()",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.resetAICounters(boolean)",2,2,3
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.setAfterResultSet(CursorResultSet)",1,4,4
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.setBeforeResultSet(CursorResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.setCurrentTriggerEvent(TriggerEvent)",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.setTrigger(TriggerDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.toString()",1,1,1
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.updateAICounters()",2,2,3
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.validateStatement(ConstantAction)",2,2,2
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.wasColumnModified(String)",4,2,4
"org.apache.derby.impl.sql.execute.InternalTriggerExecutionContext.wasColumnModified(int)",4,1,4
"org.apache.derby.impl.sql.execute.JarUtil.JarUtil(LanguageConnectionContext,String,String)",1,1,1
"org.apache.derby.impl.sql.execute.JarUtil.add(InputStream)",2,2,2
"org.apache.derby.impl.sql.execute.JarUtil.drop()",4,7,8
"org.apache.derby.impl.sql.execute.JarUtil.drop(LanguageConnectionContext,String,String)",1,1,1
"org.apache.derby.impl.sql.execute.JarUtil.getInfo()",1,1,1
"org.apache.derby.impl.sql.execute.JarUtil.install(LanguageConnectionContext,String,String,String)",1,3,4
"org.apache.derby.impl.sql.execute.JarUtil.mkExternalName(String,String,char)",1,1,1
"org.apache.derby.impl.sql.execute.JarUtil.notifyLoader(boolean)",1,1,1
"org.apache.derby.impl.sql.execute.JarUtil.openJarURL(String)",1,2,3
"org.apache.derby.impl.sql.execute.JarUtil.replace(InputStream)",2,2,2
"org.apache.derby.impl.sql.execute.JarUtil.replace(LanguageConnectionContext,String,String,String)",1,3,4
"org.apache.derby.impl.sql.execute.JarUtil.setJar(String,InputStream,boolean,long)",1,3,3
"org.apache.derby.impl.sql.execute.JoinResultSet.JoinResultSet(NoPutResultSet,int,NoPutResultSet,int,Activation,GeneratedMethod,int,boolean,boolean,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.JoinResultSet.clearScanState()",1,1,1
"org.apache.derby.impl.sql.execute.JoinResultSet.close()",1,4,4
"org.apache.derby.impl.sql.execute.JoinResultSet.closeRight()",1,2,2
"org.apache.derby.impl.sql.execute.JoinResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.JoinResultSet.getCurrentRow()",1,2,2
"org.apache.derby.impl.sql.execute.JoinResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.JoinResultSet.openCore()",1,3,3
"org.apache.derby.impl.sql.execute.JoinResultSet.openRight()",1,2,2
"org.apache.derby.impl.sql.execute.JoinResultSet.reopenCore()",1,3,3
"org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.LastIndexKeyResultSet(Activation,int,GeneratedMethod,long,String,String,String,int,int,boolean,int,double,double)",1,3,4
"org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.canGetInstantaneousLocks()",1,1,1
"org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.getCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.getNextRowCore()",1,2,3
"org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.getTimeSpent(int)",2,1,2
"org.apache.derby.impl.sql.execute.LastIndexKeyResultSet.openCore()",1,3,3
"org.apache.derby.impl.sql.execute.LockTableConstantAction.LockTableConstantAction(String,long,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.LockTableConstantAction.executeConstantAction(Activation)",1,5,7
"org.apache.derby.impl.sql.execute.LockTableConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.MaterializedResultSet.MaterializedResultSet(NoPutResultSet,Activation,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.MaterializedResultSet.close()",1,6,6
"org.apache.derby.impl.sql.execute.MaterializedResultSet.getCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.MaterializedResultSet.getNextRowCore()",2,3,4
"org.apache.derby.impl.sql.execute.MaterializedResultSet.getNextRowFromSource()",2,3,4
"org.apache.derby.impl.sql.execute.MaterializedResultSet.getNextRowFromTempTable()",2,3,3
"org.apache.derby.impl.sql.execute.MaterializedResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.MaterializedResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.MaterializedResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.MaterializedResultSet.reopenCore()",1,5,5
"org.apache.derby.impl.sql.execute.MaxMinAggregator.accumulate(DataValueDescriptor)",1,6,6
"org.apache.derby.impl.sql.execute.MaxMinAggregator.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.MaxMinAggregator.newAggregator()",1,1,1
"org.apache.derby.impl.sql.execute.MaxMinAggregator.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.MaxMinAggregator.setup(String)",1,1,1
"org.apache.derby.impl.sql.execute.MaxMinAggregator.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.MergeJoinResultSet.MergeJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,Activation,GeneratedMethod,GeneratedMethod,int,boolean,boolean,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.MergeJoinResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.MergeJoinResultSet.getNextRowCore()",6,8,8
"org.apache.derby.impl.sql.execute.MergeJoinResultSet.getReturnRow(ExecRow,ExecRow)",1,4,4
"org.apache.derby.impl.sql.execute.MergeJoinResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.MergeJoinResultSet.restrictionIsTrue()",3,3,4
"org.apache.derby.impl.sql.execute.MiscResultSet.MiscResultSet(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.MiscResultSet.cleanUp()",1,1,1
"org.apache.derby.impl.sql.execute.MiscResultSet.open()",1,1,1
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.MultiProbeTableScanResultSet(long,StaticCompiledOpenConglomInfo,Activation,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],DataValueDescriptor[],int,String,String,String,boolean,boolean,int,int,int,boolean,int,boolean,double,double)",1,2,3
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.close()",1,1,1
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.getNextProbeValue()",2,3,5
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.getNextRowCore()",1,3,3
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.moreInListVals()",1,1,1
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.openCore()",1,4,4
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.openScanController(TransactionController)",1,1,1
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.reopenCore()",1,1,1
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.reopenCore(boolean)",1,1,2
"org.apache.derby.impl.sql.execute.MultiProbeTableScanResultSet.reopenScanController()",3,2,4
"org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.NestedLoopJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,Activation,GeneratedMethod,int,boolean,boolean,double,double,String)",1,2,2
"org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.clearScanState()",1,1,1
"org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.close()",1,2,2
"org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getNextRowCore()",6,15,21
"org.apache.derby.impl.sql.execute.NestedLoopJoinResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.NestedLoopLeftOuterJoinResultSet(NoPutResultSet,int,NoPutResultSet,int,Activation,GeneratedMethod,int,GeneratedMethod,boolean,boolean,boolean,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.clearScanState()",1,1,1
"org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.getMergedRow(ExecRow,ExecRow)",1,4,5
"org.apache.derby.impl.sql.execute.NestedLoopLeftOuterJoinResultSet.getNextRowCore()",7,12,14
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.NoPutResultSetImpl(Activation,int,double,double)",1,2,2
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.clearCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.clearOrderableCache(Qualifier[][])",1,5,5
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.close()",6,6,10
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.closeRowSource()",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.getCursorName()",1,3,3
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.getNextRowFromRowSource()",2,2,2
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.getValidColumns()",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.isForUpdate()",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.markRowAsDeleted()",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.needsRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.needsToClone()",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.positionScanAtRowLocation(RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.printQualifiers(Qualifier[][])",3,6,9
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.resultSetNumber()",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.rowLocation(RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.setCurrentRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.setNeedsRowLocation(boolean)",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.setTargetResultSet(TargetResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.skipRow(ExecRow)",3,2,3
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.skipScan(ExecIndexRow,ExecIndexRow)",12,7,20
"org.apache.derby.impl.sql.execute.NoPutResultSetImpl.updateRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.NoRowsResultSetImpl(Activation)",1,3,3
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.checkRowPosition(int)",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.clearCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.close()",5,8,12
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.doesCommit()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.evaluateACheckConstraint(GeneratedMethod,String,long,Activation)",3,5,5
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.evaluateCheckConstraints(GeneratedMethod,Activation)",1,2,2
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.finish()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getAbsoluteRow(int)",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getActivation()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getAutoGeneratedKeysResultset()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getBeginExecutionTimestamp()",2,1,2
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getCurrentTimeMillis()",2,2,2
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getCursorName()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getEndExecutionTimestamp()",2,1,2
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getExecuteTime()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getFirstRow()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getLastRow()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getNextRow()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getPreviousRow()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getQueryPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getRelativeRow(int)",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getRowNumber()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getSubqueryTrackingArray(int)",1,1,2
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getTimeSpent(int)",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.getWarnings()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.isClosed()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.modifiedRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.returnsRows()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.setAfterLastRow()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.setBeforeFirstRow()",1,1,1
"org.apache.derby.impl.sql.execute.NoRowsResultSetImpl.setup()",1,1,1
"org.apache.derby.impl.sql.execute.NormalizeResultSet.NormalizeResultSet(NoPutResultSet,Activation,int,int,double,double,boolean)",1,3,4
"org.apache.derby.impl.sql.execute.NormalizeResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.NormalizeResultSet.getCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.NormalizeResultSet.getNextRowCore()",2,3,3
"org.apache.derby.impl.sql.execute.NormalizeResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.NormalizeResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.NormalizeResultSet.markRowAsDeleted()",1,1,1
"org.apache.derby.impl.sql.execute.NormalizeResultSet.normalizeRow(ExecRow)",5,8,8
"org.apache.derby.impl.sql.execute.NormalizeResultSet.openCore()",1,3,3
"org.apache.derby.impl.sql.execute.NormalizeResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.NormalizeResultSet.updateRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.OnceResultSet.OnceResultSet(NoPutResultSet,Activation,GeneratedMethod,int,int,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.OnceResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.OnceResultSet.getNextRowCore()",8,11,13
"org.apache.derby.impl.sql.execute.OnceResultSet.getPointOfAttachment()",1,1,1
"org.apache.derby.impl.sql.execute.OnceResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.OnceResultSet.openCore()",2,3,3
"org.apache.derby.impl.sql.execute.OnceResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.OrderableAggregator.getResult()",1,1,1
"org.apache.derby.impl.sql.execute.OrderableAggregator.merge(ExecAggregator)",1,3,3
"org.apache.derby.impl.sql.execute.OrderableAggregator.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.OrderableAggregator.setup(String)",1,1,1
"org.apache.derby.impl.sql.execute.OrderableAggregator.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.PrivilegeInfo.addWarningIfPrivilegeNotRevoked(Activation,boolean,boolean,String)",1,2,3
"org.apache.derby.impl.sql.execute.PrivilegeInfo.checkOwnership(String,TupleDescriptor,SchemaDescriptor,DataDictionary)",2,3,3
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.ProjectRestrictResultSet(NoPutResultSet,Activation,GeneratedMethod,GeneratedMethod,int,GeneratedMethod,int,boolean,boolean,double,double)",1,3,3
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.close()",2,4,4
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doBaseRowProjection(ExecRow)",1,2,2
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.doProjection(ExecRow)",2,5,7
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getBaseProjectMapping()",1,2,4
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getCurrentRow()",2,8,10
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getNextRowCore()",2,8,11
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.isForUpdate()",1,1,1
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.markRowAsDeleted()",1,1,1
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.openCore()",1,7,7
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.reopenCore()",1,6,6
"org.apache.derby.impl.sql.execute.ProjectRestrictResultSet.updateRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.RIBulkChecker.RIBulkChecker(GroupFetchScanController,GroupFetchScanController,ExecRow,boolean,ConglomerateController,ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.RIBulkChecker.anyNull(DataValueDescriptor[])",3,2,3
"org.apache.derby.impl.sql.execute.RIBulkChecker.doCheck()",11,9,12
"org.apache.derby.impl.sql.execute.RIBulkChecker.failure(DataValueDescriptor[])",1,4,4
"org.apache.derby.impl.sql.execute.RIBulkChecker.getNextFK()",3,2,4
"org.apache.derby.impl.sql.execute.RIBulkChecker.getNextRef()",3,2,4
"org.apache.derby.impl.sql.execute.RIBulkChecker.greaterThan(DataValueDescriptor[],DataValueDescriptor[])",5,2,5
"org.apache.derby.impl.sql.execute.RISetChecker.RISetChecker(TransactionController,FKInfo[])",2,1,4
"org.apache.derby.impl.sql.execute.RISetChecker.close()",2,2,3
"org.apache.derby.impl.sql.execute.RISetChecker.doFKCheck(ExecRow)",2,3,4
"org.apache.derby.impl.sql.execute.RISetChecker.doPKCheck(ExecRow,boolean)",2,3,4
"org.apache.derby.impl.sql.execute.RISetChecker.doRICheck(int,ExecRow,boolean)",1,4,4
"org.apache.derby.impl.sql.execute.RISetChecker.reopen()",1,1,1
"org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.RealResultSetStatisticsFactory()",1,1,1
"org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getNoRowsResultSetStatistics(ResultSet)",1,9,11
"org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(NoPutResultSet)",36,56,78
"org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getResultSetStatistics(ResultSet)",3,3,3
"org.apache.derby.impl.sql.execute.RealResultSetStatisticsFactory.getRunTimeStatistics(Activation,ResultSet,NoPutResultSet[])",2,5,8
"org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker.ReferencedKeyRIChecker(TransactionController,FKInfo)",1,3,3
"org.apache.derby.impl.sql.execute.ReferencedKeyRIChecker.doCheck(ExecRow,boolean)",6,3,6
"org.apache.derby.impl.sql.execute.RenameConstantAction.RenameConstantAction(String,String,String,String,SchemaDescriptor,UUID,boolean,int)",2,4,6
"org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameColumn(TableDescriptor,Activation)",1,4,5
"org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameIndex(TableDescriptor,Activation)",2,2,2
"org.apache.derby.impl.sql.execute.RenameConstantAction.execGutsRenameTable(TableDescriptor,Activation)",1,3,3
"org.apache.derby.impl.sql.execute.RenameConstantAction.executeConstantAction(Activation)",4,6,9
"org.apache.derby.impl.sql.execute.RenameConstantAction.getTableName()",1,1,1
"org.apache.derby.impl.sql.execute.RenameConstantAction.toString()",2,3,9
"org.apache.derby.impl.sql.execute.RevokeRoleConstantAction.RevokeRoleConstantAction(List,List)",1,1,1
"org.apache.derby.impl.sql.execute.RevokeRoleConstantAction.executeConstantAction(Activation)",6,10,11
"org.apache.derby.impl.sql.execute.RevokeRoleConstantAction.toString()",1,5,5
"org.apache.derby.impl.sql.execute.RoutinePrivilegeInfo.RoutinePrivilegeInfo(AliasDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.RoutinePrivilegeInfo.executeGrantRevoke(Activation,boolean,List)",1,3,3
"org.apache.derby.impl.sql.execute.RowChangerImpl.RowChangerImpl(long,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],DynamicCompiledOpenConglomInfo[],int,int[],TransactionController,FormatableBitSet,int[],Activation)",1,9,10
"org.apache.derby.impl.sql.execute.RowChangerImpl.close()",1,6,6
"org.apache.derby.impl.sql.execute.RowChangerImpl.deleteRow(ExecRow,RowLocation)",1,2,2
"org.apache.derby.impl.sql.execute.RowChangerImpl.finish()",1,2,2
"org.apache.derby.impl.sql.execute.RowChangerImpl.getHeapConglomerateController()",1,1,1
"org.apache.derby.impl.sql.execute.RowChangerImpl.insertRow(ExecRow)",1,4,4
"org.apache.derby.impl.sql.execute.RowChangerImpl.open(int)",1,1,1
"org.apache.derby.impl.sql.execute.RowChangerImpl.open(int,boolean)",1,1,3
"org.apache.derby.impl.sql.execute.RowChangerImpl.openForUpdate(boolean[],int,boolean)",2,13,19
"org.apache.derby.impl.sql.execute.RowChangerImpl.setIndexNames(String[])",1,1,1
"org.apache.derby.impl.sql.execute.RowChangerImpl.setRowHolder(TemporaryRowHolder)",1,1,1
"org.apache.derby.impl.sql.execute.RowChangerImpl.sortArray(int[])",1,1,1
"org.apache.derby.impl.sql.execute.RowChangerImpl.updateRow(ExecRow,ExecRow,RowLocation)",1,5,6
"org.apache.derby.impl.sql.execute.RowResultSet.RowResultSet(Activation,ExecRow,boolean,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.RowResultSet.RowResultSet(Activation,GeneratedMethod,boolean,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.RowResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.RowResultSet.getCurrentRow()",1,2,2
"org.apache.derby.impl.sql.execute.RowResultSet.getNextRowCore()",1,5,6
"org.apache.derby.impl.sql.execute.RowResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.RowResultSet.getTimeSpent(int)",1,1,1
"org.apache.derby.impl.sql.execute.RowResultSet.openCore()",1,1,1
"org.apache.derby.impl.sql.execute.RowTriggerExecutor.RowTriggerExecutor(InternalTriggerExecutionContext,TriggerDescriptor,Activation,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.execute.RowTriggerExecutor.fireTrigger(TriggerEvent,CursorResultSet,CursorResultSet)",6,8,10
"org.apache.derby.impl.sql.execute.RowUtil.copyCloneColumns(ExecRow,ExecRow,int)",1,2,2
"org.apache.derby.impl.sql.execute.RowUtil.copyRefColumns(ExecRow)",1,2,2
"org.apache.derby.impl.sql.execute.RowUtil.copyRefColumns(ExecRow,ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.RowUtil.copyRefColumns(ExecRow,ExecRow,FormatableBitSet)",2,3,4
"org.apache.derby.impl.sql.execute.RowUtil.copyRefColumns(ExecRow,ExecRow,int)",1,1,1
"org.apache.derby.impl.sql.execute.RowUtil.copyRefColumns(ExecRow,ExecRow,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.RowUtil.copyRefColumns(ExecRow,ExecRow,int[])",2,2,3
"org.apache.derby.impl.sql.execute.RowUtil.copyRefColumns(ExecRow,int,ExecRow,int,int)",1,2,2
"org.apache.derby.impl.sql.execute.RowUtil.getEmptyIndexRow(int,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.execute.RowUtil.getEmptyValueRow(int,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.execute.RowUtil.inAscendingOrder(int[])",4,1,4
"org.apache.derby.impl.sql.execute.RowUtil.intArrayToString(int[])",1,3,3
"org.apache.derby.impl.sql.execute.RowUtil.shift(FormatableBitSet,int)",1,4,4
"org.apache.derby.impl.sql.execute.RowUtil.toString(ExecRow)",2,3,3
"org.apache.derby.impl.sql.execute.RowUtil.toString(ExecRow,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.RowUtil.toString(ExecRow,int[])",1,1,1
"org.apache.derby.impl.sql.execute.RowUtil.toString(Object[])",3,4,5
"org.apache.derby.impl.sql.execute.RowUtil.toString(Object[],int,int)",1,5,5
"org.apache.derby.impl.sql.execute.RowUtil.toString(Object[],int[])",2,3,4
"org.apache.derby.impl.sql.execute.SavepointConstantAction.SavepointConstantAction(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.SavepointConstantAction.executeConstantAction(Activation)",4,6,6
"org.apache.derby.impl.sql.execute.SavepointConstantAction.toString()",3,3,3
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.ScalarAggregateResultSet(NoPutResultSet,boolean,int,Activation,GeneratedMethod,int,boolean,double,double)",1,3,3
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.accumulateScalarAggregation(ExecRow,ExecRow,boolean)",1,5,6
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getCurrentRow()",1,2,2
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getNextRowCore()",5,10,12
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getRowFromResultSet(boolean)",1,3,3
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.initializeScalarAggregation(ExecRow)",1,3,3
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.ScalarAggregateResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.ScanResultSet.ScanResultSet(Activation,int,GeneratedMethod,int,boolean,int,int,double,double)",1,3,3
"org.apache.derby.impl.sql.execute.ScanResultSet.close()",1,1,1
"org.apache.derby.impl.sql.execute.ScanResultSet.getLockMode(int)",2,1,3
"org.apache.derby.impl.sql.execute.ScanResultSet.getScanIsolationLevel()",1,1,1
"org.apache.derby.impl.sql.execute.ScanResultSet.initIsolationLevel()",1,2,2
"org.apache.derby.impl.sql.execute.ScanResultSet.translateLanguageIsolationLevel(int)",6,3,7
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.ScrollInsensitiveResultSet(NoPutResultSet,Activation,int,int,double,double)",1,3,3
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.addRowToHashTable(ExecRow,int,RowLocation,boolean)",1,2,2
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.checkRowPosition(int)",11,5,14
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.close()",1,4,4
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getAbsoluteRow(int)",10,13,15
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getCurrentRow()",2,2,3
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getFirstRow()",3,5,5
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getLastRow()",3,7,9
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getNextRowCore()",3,6,8
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getNextRowFromSource()",2,5,9
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getPreviousRow()",6,7,9
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRelativeRow(int)",6,8,10
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowArrayFromHashTable(int)",1,1,1
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowFromHashTable(int)",1,3,4
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getRowNumber()",1,1,2
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.isDeleted()",2,2,3
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.isForUpdate()",1,1,1
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.isUpdated()",2,2,3
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.markRowAsDeleted()",1,2,2
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.positionInLastFetchedRow()",1,2,2
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.setAfterLastRow()",1,2,3
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.setBeforeFirstRow()",1,1,1
"org.apache.derby.impl.sql.execute.ScrollInsensitiveResultSet.updateRow(ExecRow)",1,5,5
"org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.SetConstraintsConstantAction(ConstraintDescriptorList,boolean,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.executeConstantAction(Activation)",1,17,19
"org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.getConstraintDescriptorList(DataDictionary)",3,6,8
"org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.getRowLocation(DataDictionary,TableDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.publishToTargets(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateAllCheckConstraints(LanguageConnectionContext,Hashtable)",2,5,6
"org.apache.derby.impl.sql.execute.SetConstraintsConstantAction.validateFKConstraint(ForeignKeyConstraintDescriptor,DataDictionary,TransactionController,ContextManager)",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.SetOpResultSet(NoPutResultSet,NoPutResultSet,Activation,int,long,double,int,boolean,int,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.advanceRightPastDuplicates(DataValueDescriptor[])",3,2,3
"org.apache.derby.impl.sql.execute.SetOpResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.SetOpResultSet.compare(DataValueDescriptor[],DataValueDescriptor[])",4,2,4
"org.apache.derby.impl.sql.execute.SetOpResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getLeftSourceInput()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getNextRowCore()",8,9,17
"org.apache.derby.impl.sql.execute.SetOpResultSet.getOpType()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getResultSetNumber()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getRightSourceInput()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getRowsReturned()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getRowsSeenLeft()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getRowsSeenRight()",1,1,1
"org.apache.derby.impl.sql.execute.SetOpResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.SetOpResultSet.isDuplicate(DataValueDescriptor[])",4,2,4
"org.apache.derby.impl.sql.execute.SetOpResultSet.openCore()",1,2,3
"org.apache.derby.impl.sql.execute.SetRoleConstantAction.SetRoleConstantAction(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.SetRoleConstantAction.executeConstantAction(Activation)",5,6,7
"org.apache.derby.impl.sql.execute.SetRoleConstantAction.toString()",1,1,3
"org.apache.derby.impl.sql.execute.SetSchemaConstantAction.SetSchemaConstantAction(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.SetSchemaConstantAction.executeConstantAction(Activation)",3,5,5
"org.apache.derby.impl.sql.execute.SetSchemaConstantAction.toString()",1,1,4
"org.apache.derby.impl.sql.execute.SetTransactionIsolationConstantAction.SetTransactionIsolationConstantAction(int)",1,1,1
"org.apache.derby.impl.sql.execute.SetTransactionIsolationConstantAction.executeConstantAction(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.SetTransactionIsolationConstantAction.toString()",1,1,1
"org.apache.derby.impl.sql.execute.SetTransactionResultSet.SetTransactionResultSet(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.SetTransactionResultSet.doesCommit()",1,1,1
"org.apache.derby.impl.sql.execute.SortResultSet.SortResultSet(NoPutResultSet,boolean,boolean,int,Activation,GeneratedMethod,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.SortResultSet.close()",1,4,4
"org.apache.derby.impl.sql.execute.SortResultSet.closeSource()",1,2,2
"org.apache.derby.impl.sql.execute.SortResultSet.filterRow(ExecRow,ExecRow)",3,2,3
"org.apache.derby.impl.sql.execute.SortResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.SortResultSet.getCurrentRow()",1,2,2
"org.apache.derby.impl.sql.execute.SortResultSet.getNextRowCore()",7,7,9
"org.apache.derby.impl.sql.execute.SortResultSet.getNextRowFromRS()",1,2,2
"org.apache.derby.impl.sql.execute.SortResultSet.getRowFromResultSet()",1,1,2
"org.apache.derby.impl.sql.execute.SortResultSet.getRowFromSorter()",1,2,2
"org.apache.derby.impl.sql.execute.SortResultSet.getRowLocation()",2,1,2
"org.apache.derby.impl.sql.execute.SortResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.SortResultSet.loadSorter()",1,2,3
"org.apache.derby.impl.sql.execute.SortResultSet.openCore()",1,4,5
"org.apache.derby.impl.sql.execute.SqlXmlExecutor.SqlXmlExecutor(Activation,int)",1,1,1
"org.apache.derby.impl.sql.execute.SqlXmlExecutor.SqlXmlExecutor(Activation,int,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.SqlXmlExecutor.SqlXmlExecutor(int,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.SqlXmlExecutor.XMLExists(StringDataValue,XMLDataValue)",1,1,1
"org.apache.derby.impl.sql.execute.SqlXmlExecutor.XMLParse(StringDataValue,XMLDataValue)",2,2,3
"org.apache.derby.impl.sql.execute.SqlXmlExecutor.XMLQuery(StringDataValue,XMLDataValue,XMLDataValue)",1,1,1
"org.apache.derby.impl.sql.execute.SqlXmlExecutor.XMLSerialize(XMLDataValue,StringDataValue)",1,1,1
"org.apache.derby.impl.sql.execute.SqlXmlExecutor.getSqlXmlUtil()",1,1,1
"org.apache.derby.impl.sql.execute.StatementTriggerExecutor.StatementTriggerExecutor(InternalTriggerExecutionContext,TriggerDescriptor,Activation,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.sql.execute.StatementTriggerExecutor.fireTrigger(TriggerEvent,CursorResultSet,CursorResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.SumAggregator.accumulate(DataValueDescriptor)",1,2,2
"org.apache.derby.impl.sql.execute.SumAggregator.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.SumAggregator.newAggregator()",1,1,1
"org.apache.derby.impl.sql.execute.SystemAggregator.accumulate(DataValueDescriptor,Object)",2,2,3
"org.apache.derby.impl.sql.execute.SystemAggregator.didEliminateNulls()",1,1,1
"org.apache.derby.impl.sql.execute.SystemAggregator.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.SystemAggregator.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.TablePrivilegeInfo.TablePrivilegeInfo(TableDescriptor,boolean[],FormatableBitSet[],List)",1,1,1
"org.apache.derby.impl.sql.execute.TablePrivilegeInfo.checkOwnership(String,TableDescriptor,SchemaDescriptor,DataDictionary,LanguageConnectionContext,boolean)",1,2,2
"org.apache.derby.impl.sql.execute.TablePrivilegeInfo.checkPrivileges(String,TableDescriptor,SchemaDescriptor,DataDictionary,LanguageConnectionContext)",6,9,10
"org.apache.derby.impl.sql.execute.TablePrivilegeInfo.executeGrantRevoke(Activation,boolean,List)",1,12,12
"org.apache.derby.impl.sql.execute.TablePrivilegeInfo.getActionString(int,boolean)",1,1,2
"org.apache.derby.impl.sql.execute.TablePrivilegeInfo.getPermString(int,boolean)",2,1,4
"org.apache.derby.impl.sql.execute.TablePrivilegeInfo.hasColumnPermissions(int)",1,1,3
"org.apache.derby.impl.sql.execute.TableScanResultSet.TableScanResultSet(long,StaticCompiledOpenConglomInfo,Activation,GeneratedMethod,int,GeneratedMethod,int,GeneratedMethod,int,boolean,Qualifier[][],String,String,String,boolean,boolean,int,int,int,boolean,int,int,boolean,double,double)",1,6,6
"org.apache.derby.impl.sql.execute.TableScanResultSet.canGetInstantaneousLocks()",1,1,1
"org.apache.derby.impl.sql.execute.TableScanResultSet.clone()",1,1,2
"org.apache.derby.impl.sql.execute.TableScanResultSet.close()",1,9,10
"org.apache.derby.impl.sql.execute.TableScanResultSet.getCurrentRow()",5,11,14
"org.apache.derby.impl.sql.execute.TableScanResultSet.getNextRowCore()",10,15,19
"org.apache.derby.impl.sql.execute.TableScanResultSet.getRowLocation()",6,7,9
"org.apache.derby.impl.sql.execute.TableScanResultSet.getScanProperties()",1,3,5
"org.apache.derby.impl.sql.execute.TableScanResultSet.getSparseRowAndMap()",1,3,7
"org.apache.derby.impl.sql.execute.TableScanResultSet.getTimeSpent(int)",2,1,2
"org.apache.derby.impl.sql.execute.TableScanResultSet.isForUpdate()",1,1,1
"org.apache.derby.impl.sql.execute.TableScanResultSet.openCore()",1,10,13
"org.apache.derby.impl.sql.execute.TableScanResultSet.openScanController(TransactionController)",1,1,1
"org.apache.derby.impl.sql.execute.TableScanResultSet.openScanController(TransactionController,DataValueDescriptor)",1,6,9
"org.apache.derby.impl.sql.execute.TableScanResultSet.positionScanAtRowLocation(RowLocation)",1,2,2
"org.apache.derby.impl.sql.execute.TableScanResultSet.printPosition(int,GeneratedMethod,ExecIndexRow)",6,9,12
"org.apache.derby.impl.sql.execute.TableScanResultSet.printStartPosition()",1,1,1
"org.apache.derby.impl.sql.execute.TableScanResultSet.printStopPosition()",2,2,2
"org.apache.derby.impl.sql.execute.TableScanResultSet.reopenCore()",1,6,7
"org.apache.derby.impl.sql.execute.TableScanResultSet.reopenScanController()",1,1,1
"org.apache.derby.impl.sql.execute.TableScanResultSet.reopenScanController(DataValueDescriptor)",1,4,6
"org.apache.derby.impl.sql.execute.TableScanResultSet.requiresRelocking()",1,1,1
"org.apache.derby.impl.sql.execute.TableScanResultSet.setRowCountIfPossible(long)",1,5,7
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.TemporaryRowHolderImpl(Activation,Properties)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.TemporaryRowHolderImpl(Activation,Properties,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.TemporaryRowHolderImpl(Activation,Properties,int,boolean,boolean)",1,3,3
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.cloneRow(ExecRow)",2,3,4
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.close()",1,9,9
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.getPositionIndexConglomId()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.getResultSet()",2,1,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.getTemporaryConglomId()",1,2,5
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.insert(ExecRow)",5,11,16
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.insertToPositionIndex(int,RowLocation)",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.isRowAlreadyExist(ExecRow)",4,7,8
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.makeIndexProperties(DataValueDescriptor[],long)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.setRowHolderTypeToUniqueStream()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderImpl.truncate()",1,2,3
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.TemporaryRowHolderResultSet(TransactionController,ExecRow[],boolean,TemporaryRowHolderImpl)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.TemporaryRowHolderResultSet(TransactionController,ExecRow[],boolean,boolean,long,TemporaryRowHolderImpl)",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.checkRowPosition(int)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.cleanUp()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.clearCurrentRow()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.clone()",1,1,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.close()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.closeRowSource()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.deleteCurrentRow()",1,5,6
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getAbsoluteRow(int)",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getActivation()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getAutoGeneratedKeysResultset()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getBeginExecutionTimestamp()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getCurrentRow()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getCursorName()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getEndExecutionTimestamp()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getEstimatedRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getExecuteTime()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getFirstRow()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getLastRow()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNewRSOnCurrentRow(Activation,CursorResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextAppendedRow()",3,2,4
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRow()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowCore()",7,5,11
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getNextRowFromRowSource()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getPointOfAttachment()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getPreviousRow()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getRelativeRow(int)",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getRowNumber()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getScanIsolationLevel()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getSubqueryTrackingArray(int)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getTimeSpent(int)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getValidColumns()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.getWarnings()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.isClosed()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.isForUpdate()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.markAsTopResultSet()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.markRowAsDeleted()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.modifiedRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.needsRowLocation()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.needsToClone()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.open()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.positionScanAtRowLocation(RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.reStartScan(long,long)",1,3,3
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.reopenCore()",2,3,3
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.requiresRelocking()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.reset(ExecRow[])",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.resultSetNumber()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.returnsRows()",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.rowLocation(RowLocation)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.setAfterLastRow()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.setBeforeFirstRow()",1,2,2
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.setCurrentRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.setNeedsRowLocation(boolean)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.setTargetResultSet(TargetResultSet)",1,1,1
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.setupPositionBasedScan(long)",2,3,4
"org.apache.derby.impl.sql.execute.TemporaryRowHolderResultSet.updateRow(ExecRow)",1,1,1
"org.apache.derby.impl.sql.execute.TriggerEvent.TriggerEvent(int)",2,2,3
"org.apache.derby.impl.sql.execute.TriggerEvent.getName()",1,1,1
"org.apache.derby.impl.sql.execute.TriggerEvent.getNumber()",1,1,1
"org.apache.derby.impl.sql.execute.TriggerEvent.isAfter()",1,1,1
"org.apache.derby.impl.sql.execute.TriggerEvent.isBefore()",1,1,1
"org.apache.derby.impl.sql.execute.TriggerEventActivator.TriggerEventActivator(LanguageConnectionContext,TransactionController,UUID,TriggerInfo,int,Activation,Vector)",2,1,2
"org.apache.derby.impl.sql.execute.TriggerEventActivator.cleanup()",1,2,2
"org.apache.derby.impl.sql.execute.TriggerEventActivator.notifyEvent(TriggerEvent,CursorResultSet,CursorResultSet)",3,7,9
"org.apache.derby.impl.sql.execute.TriggerEventActivator.reopen()",1,1,1
"org.apache.derby.impl.sql.execute.TriggerEventActivator.setupExecutors(TriggerInfo)",2,10,15
"org.apache.derby.impl.sql.execute.TriggerInfo.TriggerInfo()",1,1,1
"org.apache.derby.impl.sql.execute.TriggerInfo.TriggerInfo(TableDescriptor,int[],GenericDescriptorList)",1,5,5
"org.apache.derby.impl.sql.execute.TriggerInfo.getTriggerArray()",1,1,1
"org.apache.derby.impl.sql.execute.TriggerInfo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.TriggerInfo.hasTrigger(Boolean,Boolean)",4,5,7
"org.apache.derby.impl.sql.execute.TriggerInfo.hasTrigger(boolean,boolean)",2,1,2
"org.apache.derby.impl.sql.execute.TriggerInfo.readExternal(ObjectInput)",1,2,2
"org.apache.derby.impl.sql.execute.TriggerInfo.toString()",2,7,7
"org.apache.derby.impl.sql.execute.TriggerInfo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.UnionResultSet.UnionResultSet(NoPutResultSet,NoPutResultSet,Activation,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.UnionResultSet.close()",2,5,7
"org.apache.derby.impl.sql.execute.UnionResultSet.finish()",1,1,1
"org.apache.derby.impl.sql.execute.UnionResultSet.getCurrentRow()",2,4,6
"org.apache.derby.impl.sql.execute.UnionResultSet.getNextRowCore()",2,5,10
"org.apache.derby.impl.sql.execute.UnionResultSet.getRowLocation()",2,7,7
"org.apache.derby.impl.sql.execute.UnionResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.UnionResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.UniqueIndexSortObserver.UniqueIndexSortObserver(boolean,boolean,String,ExecRow,boolean,String)",1,1,1
"org.apache.derby.impl.sql.execute.UniqueIndexSortObserver.insertDuplicateKey(DataValueDescriptor[],DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.sql.execute.UniqueWithDuplicateNullsIndexSortObserver.UniqueWithDuplicateNullsIndexSortObserver(boolean,boolean,String,ExecRow,boolean,String)",1,1,1
"org.apache.derby.impl.sql.execute.UniqueWithDuplicateNullsIndexSortObserver.insertDuplicateKey(DataValueDescriptor[],DataValueDescriptor[])",3,3,3
"org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction.UpdatableVTIConstantAction()",1,1,1
"org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction.UpdatableVTIConstantAction(int,boolean,int[])",1,1,1
"org.apache.derby.impl.sql.execute.UpdatableVTIConstantAction.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.UpdateConstantAction.UpdateConstantAction()",1,1,1
"org.apache.derby.impl.sql.execute.UpdateConstantAction.UpdateConstantAction(long,StaticCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],String[],ExecRow,boolean,UUID,int,int[],FKInfo[],TriggerInfo,FormatableBitSet,int[],int[],int,boolean,boolean)",1,1,1
"org.apache.derby.impl.sql.execute.UpdateConstantAction.getTypeFormatId()",1,1,1
"org.apache.derby.impl.sql.execute.UpdateConstantAction.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.UpdateConstantAction.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.UpdateResultSet.UpdateResultSet(NoPutResultSet,GeneratedMethod,Activation)",1,1,1
"org.apache.derby.impl.sql.execute.UpdateResultSet.UpdateResultSet(NoPutResultSet,GeneratedMethod,Activation,ConstantAction,ResultDescription)",1,8,10
"org.apache.derby.impl.sql.execute.UpdateResultSet.UpdateResultSet(NoPutResultSet,GeneratedMethod,Activation,int,int)",1,1,1
"org.apache.derby.impl.sql.execute.UpdateResultSet.checkStreamCols()",1,3,4
"org.apache.derby.impl.sql.execute.UpdateResultSet.cleanUp()",1,8,8
"org.apache.derby.impl.sql.execute.UpdateResultSet.collectAffectedRows()",1,12,15
"org.apache.derby.impl.sql.execute.UpdateResultSet.fireAfterTriggers()",1,3,3
"org.apache.derby.impl.sql.execute.UpdateResultSet.fireBeforeTriggers()",1,4,4
"org.apache.derby.impl.sql.execute.UpdateResultSet.foundRow(ExecRow,int[],TemporaryRowHolderImpl)",5,3,5
"org.apache.derby.impl.sql.execute.UpdateResultSet.notifyForUpdateCursor(DataValueDescriptor[],DataValueDescriptor[],RowLocation,TableScanResultSet)",11,15,27
"org.apache.derby.impl.sql.execute.UpdateResultSet.objectifyStream(ExecRow,FormatableBitSet)",1,4,4
"org.apache.derby.impl.sql.execute.UpdateResultSet.open()",1,2,2
"org.apache.derby.impl.sql.execute.UpdateResultSet.rowChangerFinish()",1,1,1
"org.apache.derby.impl.sql.execute.UpdateResultSet.runChecker(boolean)",7,9,13
"org.apache.derby.impl.sql.execute.UpdateResultSet.saveLastCusorKey(TableScanResultSet,ExecRow)",1,4,4
"org.apache.derby.impl.sql.execute.UpdateResultSet.setup()",1,8,10
"org.apache.derby.impl.sql.execute.UpdateResultSet.updateDeferredRows()",1,5,5
"org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction.UpdateStatisticsConstantAction()",1,1,1
"org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction.UpdateStatisticsConstantAction(boolean,String,UUID,UUID[],long[],ExecIndexRow[])",1,1,1
"org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction.compareWithPrevKey(int,boolean)",5,2,6
"org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction.executeConstantAction(Activation)",4,6,10
"org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction.initializeRowBuffers(ExecIndexRow)",1,1,1
"org.apache.derby.impl.sql.execute.UpdateStatisticsConstantAction.toString()",1,1,2
"org.apache.derby.impl.sql.execute.UpdateVTIResultSet.UpdateVTIResultSet(NoPutResultSet,Activation)",1,1,1
"org.apache.derby.impl.sql.execute.UpdateVTIResultSet.openCore()",2,13,16
"org.apache.derby.impl.sql.execute.UpdateVTIResultSet.updateVTI(ResultSet,ExecRow)",1,4,4
"org.apache.derby.impl.sql.execute.VTIResultSet.VTIResultSet(Activation,GeneratedMethod,int,GeneratedMethod,String,Qualifier[][],int,boolean,boolean,int,boolean,int,double,double,boolean,int)",1,3,3
"org.apache.derby.impl.sql.execute.VTIResultSet.cast(DataTypeDescriptor,DataValueDescriptor)",1,8,8
"org.apache.derby.impl.sql.execute.VTIResultSet.castDecimal(DataTypeDescriptor,DataValueDescriptor)",1,1,1
"org.apache.derby.impl.sql.execute.VTIResultSet.castLongvarbinary(DataTypeDescriptor,DataValueDescriptor)",1,2,2
"org.apache.derby.impl.sql.execute.VTIResultSet.castLongvarchar(DataTypeDescriptor,DataValueDescriptor)",1,2,2
"org.apache.derby.impl.sql.execute.VTIResultSet.close()",4,7,8
"org.apache.derby.impl.sql.execute.VTIResultSet.finish()",2,3,4
"org.apache.derby.impl.sql.execute.VTIResultSet.getAllocatedRow()",1,2,2
"org.apache.derby.impl.sql.execute.VTIResultSet.getCurrentRow()",1,2,2
"org.apache.derby.impl.sql.execute.VTIResultSet.getNextRowCore()",2,11,13
"org.apache.derby.impl.sql.execute.VTIResultSet.getOriginalSQL()",1,1,1
"org.apache.derby.impl.sql.execute.VTIResultSet.getProjectedColList()",1,3,5
"org.apache.derby.impl.sql.execute.VTIResultSet.getReturnColumnTypes()",1,3,3
"org.apache.derby.impl.sql.execute.VTIResultSet.getRowLocation()",1,2,2
"org.apache.derby.impl.sql.execute.VTIResultSet.getScanIsolationLevel()",1,1,1
"org.apache.derby.impl.sql.execute.VTIResultSet.getSharedState(String)",2,1,3
"org.apache.derby.impl.sql.execute.VTIResultSet.getStatementIsolationLevel()",1,1,1
"org.apache.derby.impl.sql.execute.VTIResultSet.getTimeSpent(int)",1,1,1
"org.apache.derby.impl.sql.execute.VTIResultSet.getVTIConstructor()",1,1,1
"org.apache.derby.impl.sql.execute.VTIResultSet.isCompileTime()",1,1,1
"org.apache.derby.impl.sql.execute.VTIResultSet.isReuseablePs()",1,1,1
"org.apache.derby.impl.sql.execute.VTIResultSet.openCore()",1,13,14
"org.apache.derby.impl.sql.execute.VTIResultSet.populateFromResultSet(ExecRow)",3,6,9
"org.apache.derby.impl.sql.execute.VTIResultSet.reopenCore()",3,5,5
"org.apache.derby.impl.sql.execute.VTIResultSet.setNullableColumnList()",4,3,6
"org.apache.derby.impl.sql.execute.VTIResultSet.setSharedState(String,Serializable)",2,3,5
"org.apache.derby.impl.sql.execute.ValueRow.ValueRow(int)",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.cloneColumn(int)",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.cloneMe()",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.getClone()",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.getClone(FormatableBitSet)",3,5,5
"org.apache.derby.impl.sql.execute.ValueRow.getColumn(int)",2,1,2
"org.apache.derby.impl.sql.execute.ValueRow.getNewNullRow()",1,4,4
"org.apache.derby.impl.sql.execute.ValueRow.getNewObjectArray()",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.getRowArray()",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.getRowArrayClone()",1,3,3
"org.apache.derby.impl.sql.execute.ValueRow.nColumns()",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.realloc(int)",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.resetRowArray()",1,3,3
"org.apache.derby.impl.sql.execute.ValueRow.setColumn(int,DataValueDescriptor)",1,2,2
"org.apache.derby.impl.sql.execute.ValueRow.setRowArray(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.sql.execute.ValueRow.toString()",1,3,4
"org.apache.derby.impl.sql.execute.WindowResultSet.WindowResultSet(Activation,NoPutResultSet,GeneratedMethod,int,int,int,GeneratedMethod,double,double)",1,3,3
"org.apache.derby.impl.sql.execute.WindowResultSet.close()",1,3,3
"org.apache.derby.impl.sql.execute.WindowResultSet.getAllocatedRow()",1,2,2
"org.apache.derby.impl.sql.execute.WindowResultSet.getNextRowCore()",2,8,9
"org.apache.derby.impl.sql.execute.WindowResultSet.getTimeSpent(int)",2,2,2
"org.apache.derby.impl.sql.execute.WindowResultSet.openCore()",1,2,2
"org.apache.derby.impl.sql.execute.WindowResultSet.populateFromSourceRow(ExecRow,ExecRow)",4,5,7
"org.apache.derby.impl.sql.execute.WindowResultSet.reopenCore()",1,2,2
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.WriteCursorConstantAction()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.WriteCursorConstantAction(long,StaticCompiledOpenConglomInfo,IndexRowGenerator[],long[],StaticCompiledOpenConglomInfo[],String[],boolean,Properties,UUID,int,FKInfo[],TriggerInfo,ExecRow,FormatableBitSet,int[],int[],boolean)",1,3,3
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.executeConstantAction(Activation)",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getBaseRowReadList()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getBaseRowReadMap()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getConglomerateId()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getEmptyHeapRow(LanguageConnectionContext)",1,2,2
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getFKInfo()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getIndexNameFromCID(long)",4,1,4
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getIndexNames()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getProperty(String)",1,2,2
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getStreamStorableHeapColIds()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getTargetProperties()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.getTriggerInfo()",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.sql.execute.WriteCursorConstantAction.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.RealAnyResultSetStatistics(int,int,int,long,long,long,long,int,int,int,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.getStatementExecutionPlanText(int)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealAnyResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.RealBasicNoPutResultSetStatistics(int,int,int,long,long,long,long,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.dumpEstimatedCosts(String)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.dumpTimeStats(String,String)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.formatDouble(double)",1,3,3
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.getChildrenTime()",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.getEstimatedRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.getNodeOn()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.getNodeTime()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealBasicNoPutResultSetStatistics.getTotalTime()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.RealCurrentOfStatistics(int,int,int,long,long,long,long,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealCurrentOfStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.RealDeleteCascadeResultSetStatistics(int,boolean,int,boolean,long,ResultSetStatistics,ResultSetStatistics[])",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getScanStatisticsText(String,int)",1,5,5
"org.apache.derby.impl.sql.execute.rts.RealDeleteCascadeResultSetStatistics.getStatementExecutionPlanText(int)",1,6,7
"org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.RealDeleteResultSetStatistics(int,boolean,int,boolean,long,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.getScanStatisticsText(String,int)",2,1,2
"org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.getStatementExecutionPlanText(int)",1,2,3
"org.apache.derby.impl.sql.execute.rts.RealDeleteResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.RealDeleteVTIResultSetStatistics(int,long,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.getScanStatisticsText(String,int)",2,1,2
"org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.getStatementExecutionPlanText(int)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealDeleteVTIResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.RealDistinctScalarAggregateStatistics(int,int,int,long,long,long,long,int,int,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScalarAggregateStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.RealDistinctScanStatistics(int,int,int,long,long,long,long,int,String,String,boolean,int,int[],String,String,Properties,String,String,String,String,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getNodeOn()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getScanStatisticsText(String,int)",2,3,3
"org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.getStatementExecutionPlanText(int)",1,5,6
"org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.RealGroupedAggregateStatistics(int,int,int,long,long,long,long,int,int,boolean,boolean,Properties,double,double,ResultSetStatistics)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.getStatementExecutionPlanText(int)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealGroupedAggregateStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics.RealHashJoinStatistics(int,int,int,long,long,long,long,int,int,int,int,long,boolean,double,double,String,ResultSetStatistics,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashJoinStatistics.setNames()",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics.RealHashLeftOuterJoinStatistics(int,int,int,long,long,long,long,int,int,int,int,long,double,double,String,ResultSetStatistics,ResultSetStatistics,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashLeftOuterJoinStatistics.setNames()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.RealHashScanStatistics(int,int,int,long,long,long,long,int,String,String,boolean,int,int[],String,String,Properties,String,String,String,String,double,double)",1,3,3
"org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getNodeOn()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getScanStatisticsText(String,int)",2,3,3
"org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.getStatementExecutionPlanText(int)",1,4,6
"org.apache.derby.impl.sql.execute.rts.RealHashScanStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.RealHashTableStatistics(int,int,int,long,long,long,long,int,int,int[],String,Properties,double,double,ResultSetStatistics[],ResultSetStatistics)",1,3,3
"org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.getNodeOn()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.getScanStatisticsText(String,int)",2,2,2
"org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.getStatementExecutionPlanText(int)",1,7,8
"org.apache.derby.impl.sql.execute.rts.RealHashTableStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.RealIndexRowToBaseRowStatistics(int,int,int,long,long,long,long,int,String,FormatableBitSet,double,double,ResultSetStatistics)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getChildResultSetStatistics()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getNodeOn()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getScanStatisticsText(String,int)",2,3,3
"org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealIndexRowToBaseRowStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.RealInsertResultSetStatistics(int,boolean,int,boolean,boolean,boolean,long,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.getScanStatisticsText(String,int)",2,1,2
"org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.getStatementExecutionPlanText(int)",1,4,5
"org.apache.derby.impl.sql.execute.rts.RealInsertResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.RealInsertVTIResultSetStatistics(int,boolean,long,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.getStatementExecutionPlanText(int)",2,2,3
"org.apache.derby.impl.sql.execute.rts.RealInsertVTIResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealJoinResultSetStatistics.RealJoinResultSetStatistics(int,int,int,long,long,long,long,int,int,int,int,long,double,double,String)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealJoinResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.RealLastIndexKeyScanStatistics(int,long,long,long,long,int,String,String,String,String,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getNodeName()",1,1,2
"org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getNodeOn()",2,2,2
"org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getScanStatisticsText(String,int)",2,3,3
"org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.getStatementExecutionPlanText(int)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealLastIndexKeyScanStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.RealMaterializedResultSetStatistics(int,int,int,long,long,long,long,long,long,int,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealMaterializedResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.RealNestedLoopJoinStatistics(int,int,int,long,long,long,long,int,int,int,int,long,boolean,double,double,String,ResultSetStatistics,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.getStatementExecutionPlanText(int)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.setNames()",1,3,3
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopJoinStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.RealNestedLoopLeftOuterJoinStatistics(int,int,int,long,long,long,long,int,int,int,int,long,double,double,String,ResultSetStatistics,ResultSetStatistics,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.setNames()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNestedLoopLeftOuterJoinStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics.RealNoPutResultSetStatistics(int,int,int,long,long,long,long,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNoPutResultSetStatistics.initFormatInfo(int)",1,1,2
"org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics.RealNoRowsResultSetStatistics(long,ResultSetStatistics)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics.dumpTimeStats(String)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics.getEstimatedRowCount()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNoRowsResultSetStatistics.initFormatInfo(int)",1,1,2
"org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.RealNormalizeResultSetStatistics(int,int,int,long,long,long,long,int,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealNormalizeResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.RealOnceResultSetStatistics(int,int,int,long,long,long,long,int,int,int,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.getStatementExecutionPlanText(int)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealOnceResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.RealProjectRestrictStatistics(int,int,int,long,long,long,long,int,long,long,ResultSetStatistics[],boolean,boolean,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getChildren()",1,4,4
"org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getScanStatisticsText(String,int)",1,4,4
"org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.getStatementExecutionPlanText(int)",1,5,5
"org.apache.derby.impl.sql.execute.rts.RealProjectRestrictStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.RealRowResultSetStatistics(int,int,int,long,long,long,long,int,int,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealRowResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.RealScalarAggregateStatistics(int,int,int,long,long,long,long,int,boolean,int,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.RealScrollInsensitiveResultSetStatistics(int,int,int,long,long,long,long,int,int,int,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealScrollInsensitiveResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.RealSetOpResultSetStatistics(int,int,int,int,long,long,long,long,int,int,int,int,double,double,ResultSetStatistics,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getNodeName()",1,1,2
"org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.getStatementExecutionPlanText(int)",1,1,2
"org.apache.derby.impl.sql.execute.rts.RealSetOpResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealSortStatistics.RealSortStatistics(int,int,int,long,long,long,long,int,int,int,boolean,boolean,Properties,double,double,ResultSetStatistics)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealSortStatistics.getStatementExecutionPlanText(int)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealSortStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.RealTableScanStatistics(int,int,int,long,long,long,long,int,String,String,String,boolean,String,Properties,String,String,String,String,int,boolean,double,double)",1,2,2
"org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getNodeName()",1,1,2
"org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getNodeOn()",2,2,2
"org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getScanStatisticsText(String,int)",2,3,3
"org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.getStatementExecutionPlanText(int)",1,5,6
"org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.RealUnionResultSetStatistics(int,int,int,long,long,long,long,int,int,int,int,double,double,ResultSetStatistics,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUnionResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.RealUpdateResultSetStatistics(int,boolean,int,boolean,long,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.getScanStatisticsText(String,int)",2,1,2
"org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.getStatementExecutionPlanText(int)",1,2,3
"org.apache.derby.impl.sql.execute.rts.RealUpdateResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.RealVTIStatistics(int,int,int,long,long,long,long,int,String,double,double)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getNodeOn()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealVTIStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics.RealWindowResultSetStatistics(int,int,int,long,long,long,long,int,double,double,ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics.getChildResultSetStatistics()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics.getNodeName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics.getNodeOn()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics.getScanStatisticsText(String,int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics.getStatementExecutionPlanText(int)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RealWindowResultSetStatistics.toString()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.RunTimeStatisticsImpl(String,String,String,long,long,long,long,long,long,Timestamp,Timestamp,Timestamp,Timestamp,ResultSetStatistics[],ResultSetStatistics)",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getBeginCompilationTimestamp()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getBeginExecutionTimestamp()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getBindTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getChildren()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getCompileTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getEndCompilationTimestamp()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getEndExecutionTimestamp()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getEstimatedRowCount()",2,1,2
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getExecuteTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getGenerateTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getOptimizeTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getParseTimeInMillis()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getSPSName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getScanStatisticsText()",1,2,2
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getScanStatisticsText(String)",2,1,3
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getStatementExecutionPlanText()",2,5,6
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getStatementName()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.getStatementText()",1,1,1
"org.apache.derby.impl.sql.execute.rts.RunTimeStatisticsImpl.toString()",1,1,2
"org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.BackingStoreHashTableFromScan(TransactionController,long,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,long,int[],boolean,long,long,int,float,boolean,boolean,boolean)",1,2,2
"org.apache.derby.impl.store.access.BackingStoreHashTableFromScan.close()",1,1,1
"org.apache.derby.impl.store.access.CacheLock.CacheLock(PropertyConglomerate)",1,1,1
"org.apache.derby.impl.store.access.CacheLock.unlockEvent(Latch)",1,1,1
"org.apache.derby.impl.store.access.CacheableConglomerate.CacheableConglomerate()",1,1,1
"org.apache.derby.impl.store.access.CacheableConglomerate.clean(boolean)",1,1,1
"org.apache.derby.impl.store.access.CacheableConglomerate.clearIdentity()",1,1,1
"org.apache.derby.impl.store.access.CacheableConglomerate.createIdentity(Object,Object)",1,2,2
"org.apache.derby.impl.store.access.CacheableConglomerate.getConglom()",1,1,1
"org.apache.derby.impl.store.access.CacheableConglomerate.getIdentity()",1,1,1
"org.apache.derby.impl.store.access.CacheableConglomerate.isDirty()",1,1,1
"org.apache.derby.impl.store.access.CacheableConglomerate.setIdentity(Object)",1,2,2
"org.apache.derby.impl.store.access.PC_XenaVersion.getMajorVersionNumber()",1,1,1
"org.apache.derby.impl.store.access.PC_XenaVersion.getMinorVersionNumber()",1,1,1
"org.apache.derby.impl.store.access.PC_XenaVersion.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.PC_XenaVersion.isUpgradeNeeded(PC_XenaVersion)",1,2,2
"org.apache.derby.impl.store.access.PC_XenaVersion.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.access.PC_XenaVersion.toString()",1,1,1
"org.apache.derby.impl.store.access.PC_XenaVersion.upgradeIfNeeded(TransactionController,PropertyConglomerate,Properties)",2,2,2
"org.apache.derby.impl.store.access.PC_XenaVersion.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.PropertyConglomerate(TransactionController,boolean,Properties,PropertyFactory)",3,6,6
"org.apache.derby.impl.store.access.PropertyConglomerate.bootPasswordChange(TransactionController,String,Serializable)",2,2,2
"org.apache.derby.impl.store.access.PropertyConglomerate.copyValues(Dictionary,Dictionary,boolean)",2,3,5
"org.apache.derby.impl.store.access.PropertyConglomerate.getCachedDbProperties(TransactionController)",1,2,2
"org.apache.derby.impl.store.access.PropertyConglomerate.getCachedProperty(TransactionController,String)",2,2,2
"org.apache.derby.impl.store.access.PropertyConglomerate.getCachedPropertyDefault(TransactionController,String,Dictionary)",2,3,3
"org.apache.derby.impl.store.access.PropertyConglomerate.getProperties(TransactionController)",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.getProperties(TransactionController,Dictionary,boolean,boolean)",1,4,4
"org.apache.derby.impl.store.access.PropertyConglomerate.getProperty(TransactionController,String)",4,3,4
"org.apache.derby.impl.store.access.PropertyConglomerate.getPropertyDefault(TransactionController,String)",3,3,3
"org.apache.derby.impl.store.access.PropertyConglomerate.iHoldTheUpdateLock(TransactionController)",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.lockProperties(TransactionController)",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.makeNewTemplate()",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.makeNewTemplate(String,Serializable)",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.map(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.openScan(TransactionController,String,int)",1,1,2
"org.apache.derby.impl.store.access.PropertyConglomerate.propertyDefaultIsVisible(TransactionController,String)",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.readDbProperties(TransactionController)",1,6,6
"org.apache.derby.impl.store.access.PropertyConglomerate.readProperty(TransactionController,String)",2,1,2
"org.apache.derby.impl.store.access.PropertyConglomerate.resetCache()",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.saveProperty(TransactionController,String,Serializable)",2,4,5
"org.apache.derby.impl.store.access.PropertyConglomerate.savePropertyDefault(TransactionController,String,Serializable)",2,2,5
"org.apache.derby.impl.store.access.PropertyConglomerate.saveServiceProperty(String,Serializable)",2,3,3
"org.apache.derby.impl.store.access.PropertyConglomerate.setProperty(TransactionController,String,Serializable,boolean)",2,7,8
"org.apache.derby.impl.store.access.PropertyConglomerate.setPropertyDefault(TransactionController,String,Serializable)",1,2,2
"org.apache.derby.impl.store.access.PropertyConglomerate.validate(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.store.access.PropertyConglomerate.validateApplyAndMap(TransactionController,String,Serializable,boolean)",3,2,3
"org.apache.derby.impl.store.access.RAMAccessManager.RAMAccessManager()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.addPropertySetNotification(PropertySetCallback,TransactionController)",1,1,2
"org.apache.derby.impl.store.access.RAMAccessManager.apply(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.backup(String,boolean)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.backupAndEnableLogArchiveMode(String,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.boot(boolean,Properties)",1,4,6
"org.apache.derby.impl.store.access.RAMAccessManager.boot_load_conglom_map()",3,3,5
"org.apache.derby.impl.store.access.RAMAccessManager.checkpoint()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheAddEntry(long,Conglomerate)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheFind(TransactionManager,long)",1,3,3
"org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheInit()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheInvalidate()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheRemoveEntry(long)",1,2,2
"org.apache.derby.impl.store.access.RAMAccessManager.conglomCacheUpdateEntry(long,Conglomerate)",1,2,2
"org.apache.derby.impl.store.access.RAMAccessManager.createFinished()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.disableLogArchiveMode(boolean)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.failover(String)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.findMethodFactoryByFormat(UUID)",4,2,4
"org.apache.derby.impl.store.access.RAMAccessManager.findMethodFactoryByImpl(String)",6,4,7
"org.apache.derby.impl.store.access.RAMAccessManager.freeze()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.getAndNameTransaction(ContextManager,String)",3,3,4
"org.apache.derby.impl.store.access.RAMAccessManager.getDefaultLockingPolicy()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.getFactoryFromConglomId(long)",1,2,2
"org.apache.derby.impl.store.access.RAMAccessManager.getLockFactory()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.getNextConglomId(int)",1,3,4
"org.apache.derby.impl.store.access.RAMAccessManager.getRawStore()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.getTransaction(ContextManager)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.getTransactionInfo()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.getTransactionalProperties()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.getXAResourceManager()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.init(boolean,Dictionary)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.isReadOnly()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.map(String,Serializable,Dictionary)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.newCacheable(CacheManager)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.registerAccessMethod(MethodFactory)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.startReplicationMaster(String,String,int,String)",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.startXATransaction(ContextManager,int,byte[],byte[])",2,5,6
"org.apache.derby.impl.store.access.RAMAccessManager.stop()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.stopReplicationMaster()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.unfreeze()",1,1,1
"org.apache.derby.impl.store.access.RAMAccessManager.validate(String,Serializable,Dictionary)",3,3,3
"org.apache.derby.impl.store.access.RAMAccessManager.waitForPostCommitToFinishWork()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.RAMTransaction()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.RAMTransaction(RAMAccessManager,RAMTransaction,int,byte[],byte[])",1,2,2
"org.apache.derby.impl.store.access.RAMTransaction.RAMTransaction(RAMAccessManager,Transaction,RAMTransaction)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.abort()",1,3,3
"org.apache.derby.impl.store.access.RAMTransaction.addColumnToConglomerate(long,int,Storable,int)",2,4,4
"org.apache.derby.impl.store.access.RAMTransaction.addPostCommitWork(Serviceable)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.anyoneBlocked()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.checkVersion(int,int,String)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.closeControllers(boolean)",1,18,20
"org.apache.derby.impl.store.access.RAMTransaction.closeMe(ConglomerateController)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.closeMe(ScanManager)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.closeMe(SortController)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.commit()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.commitNoSync(int)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.compressConglomerate(long)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.conglomerateExists(long)",2,1,2
"org.apache.derby.impl.store.access.RAMTransaction.countCreatedSorts()",1,3,4
"org.apache.derby.impl.store.access.RAMTransaction.countOpens(int)",2,4,8
"org.apache.derby.impl.store.access.RAMTransaction.createAndLoadConglomerate(String,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int,RowLocationRetRowSource,long[])",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.createBackingStoreHashtableFromScan(long,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,long,int[],boolean,long,long,int,float,boolean,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.createConglomerate(String,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int)",2,4,6
"org.apache.derby.impl.store.access.RAMTransaction.createSort(Properties,DataValueDescriptor[],ColumnOrdering[],SortObserver,boolean,long,int)",2,4,7
"org.apache.derby.impl.store.access.RAMTransaction.createXATransactionFromLocalTransaction(int,byte[],byte[])",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.debugOpened()",1,10,11
"org.apache.derby.impl.store.access.RAMTransaction.defragmentConglomerate(long,boolean,boolean,int,int,int)",1,4,4
"org.apache.derby.impl.store.access.RAMTransaction.destroy()",1,3,4
"org.apache.derby.impl.store.access.RAMTransaction.determine_lock_level(int)",1,2,3
"org.apache.derby.impl.store.access.RAMTransaction.determine_locking_policy(int,int)",1,2,3
"org.apache.derby.impl.store.access.RAMTransaction.dropConglomerate(long)",1,3,3
"org.apache.derby.impl.store.access.RAMTransaction.dropSort(long)",1,2,2
"org.apache.derby.impl.store.access.RAMTransaction.fetchMaxOnBtree(long,int,int,int,FormatableBitSet,DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.findConglomerate(long)",1,3,3
"org.apache.derby.impl.store.access.RAMTransaction.findConglomid(long)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.findContainerid(long)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.findExistingConglomerate(long)",2,4,4
"org.apache.derby.impl.store.access.RAMTransaction.getAccessManager()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getActiveStateTxIdString()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getContextManager()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getDynamicCompiledConglomInfo(long)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getFileHandler()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getInternalTransaction()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getLockSpace()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getProperties()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getProperty(String)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getPropertyDefault(String)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getRawStoreXact()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getStaticCompiledConglomInfo(long)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getTransactionIdString()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.getUserCreateConglomPropList()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.init(RAMAccessManager,Transaction,RAMTransaction)",1,1,2
"org.apache.derby.impl.store.access.RAMTransaction.invalidateConglomerateCache()",1,2,2
"org.apache.derby.impl.store.access.RAMTransaction.isGlobal()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.isIdle()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.isPristine()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.loadConglomerate(long,RowLocationRetRowSource)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.loadConglomerate(long,boolean,RowLocationRetRowSource)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.logAndDo(Loggable)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.openCompiledConglomerate(boolean,int,int,int,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,2,2
"org.apache.derby.impl.store.access.RAMTransaction.openCompiledScan(boolean,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,2,2
"org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(Conglomerate,boolean,int,int,int,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,4,5
"org.apache.derby.impl.store.access.RAMTransaction.openConglomerate(long,boolean,int,int,int)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.openGroupFetchScan(long,boolean,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,4,4
"org.apache.derby.impl.store.access.RAMTransaction.openScan(Conglomerate,boolean,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,4,4
"org.apache.derby.impl.store.access.RAMTransaction.openScan(long,boolean,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.openSort(long)",2,4,5
"org.apache.derby.impl.store.access.RAMTransaction.openSortCostController(Properties)",2,2,4
"org.apache.derby.impl.store.access.RAMTransaction.openSortRowSource(long)",2,4,4
"org.apache.derby.impl.store.access.RAMTransaction.openSortScan(long,boolean)",2,4,4
"org.apache.derby.impl.store.access.RAMTransaction.openStoreCost(long)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.propertyDefaultIsVisible(String)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.purgeConglomerate(long)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.recreateAndLoadConglomerate(String,boolean,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int,long,RowLocationRetRowSource,long[])",1,2,4
"org.apache.derby.impl.store.access.RAMTransaction.releaseSavePoint(String,Object)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.rollbackToSavePoint(String,boolean,Object)",1,2,2
"org.apache.derby.impl.store.access.RAMTransaction.saveScanPositions(Conglomerate,Page)",1,5,5
"org.apache.derby.impl.store.access.RAMTransaction.setContext(RAMTransactionContext)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.setProperty(String,Serializable,boolean)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.setPropertyDefault(String,Serializable)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.setSavePoint(String,Object)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.startNestedUserTransaction(boolean)",1,2,2
"org.apache.derby.impl.store.access.RAMTransaction.toString()",1,1,2
"org.apache.derby.impl.store.access.RAMTransaction.xa_commit(boolean)",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.xa_prepare()",1,1,1
"org.apache.derby.impl.store.access.RAMTransaction.xa_rollback()",1,1,1
"org.apache.derby.impl.store.access.RAMTransactionContext.RAMTransactionContext(ContextManager,String,RAMTransaction,boolean)",1,1,1
"org.apache.derby.impl.store.access.RAMTransactionContext.cleanupOnError(Throwable)",3,7,10
"org.apache.derby.impl.store.access.RAMTransactionContext.getTransaction()",1,1,1
"org.apache.derby.impl.store.access.RAMTransactionContext.setTransaction(RAMTransaction)",1,1,1
"org.apache.derby.impl.store.access.RllRAMAccessManager.RllRAMAccessManager()",1,1,1
"org.apache.derby.impl.store.access.RllRAMAccessManager.bootLookupSystemLockLevel(TransactionController)",1,2,3
"org.apache.derby.impl.store.access.RllRAMAccessManager.getSystemLockLevel()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.StorableFormatId()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.StorableFormatId(int)",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.compare(DataValueDescriptor)",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.estimateMemoryUsage()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.getClone()",1,2,2
"org.apache.derby.impl.store.access.StorableFormatId.getLength()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.getNewNull()",1,2,2
"org.apache.derby.impl.store.access.StorableFormatId.getObject()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.getString()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.getTypeName()",1,2,2
"org.apache.derby.impl.store.access.StorableFormatId.getValue()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.isNull()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.restoreToNull()",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.setValue(int)",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.impl.store.access.StorableFormatId.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.UTF.UTF()",1,1,1
"org.apache.derby.impl.store.access.UTF.UTF(String)",1,1,1
"org.apache.derby.impl.store.access.UTF.compare(DataValueDescriptor)",1,2,2
"org.apache.derby.impl.store.access.UTFQualifier.UTFQualifier(int,String)",1,1,1
"org.apache.derby.impl.store.access.UTFQualifier.clearOrderableCache()",1,1,1
"org.apache.derby.impl.store.access.UTFQualifier.getColumnId()",1,1,1
"org.apache.derby.impl.store.access.UTFQualifier.getOperator()",1,1,1
"org.apache.derby.impl.store.access.UTFQualifier.getOrderable()",1,1,1
"org.apache.derby.impl.store.access.UTFQualifier.getOrderedNulls()",1,1,1
"org.apache.derby.impl.store.access.UTFQualifier.getUnknownRV()",1,1,1
"org.apache.derby.impl.store.access.UTFQualifier.negateCompareResult()",1,1,1
"org.apache.derby.impl.store.access.UTFQualifier.reinitialize()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.addColumn(TransactionManager,int,Storable,int)",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.create(Transaction,int,long,DataValueDescriptor[],Properties,int,int)",5,11,12
"org.apache.derby.impl.store.access.btree.BTree.createBranchTemplate(Transaction,DataValueDescriptor)",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.createTemplate(Transaction)",1,2,2
"org.apache.derby.impl.store.access.btree.BTree.getContainerid()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.getDynamicCompiledConglomInfo()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.getId()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.isNull()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.isTemporary()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.isUnique()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.isUniqueWithDuplicateNulls()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.restoreToNull()",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.setUniqueWithDuplicateNulls(boolean)",1,1,1
"org.apache.derby.impl.store.access.btree.BTree.toString()",2,3,3
"org.apache.derby.impl.store.access.btree.BTree.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.BTreeController()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.close()",1,2,2
"org.apache.derby.impl.store.access.btree.BTreeController.closeForEndTransaction(boolean)",2,4,4
"org.apache.derby.impl.store.access.btree.BTreeController.compareLeftAndRightSiblings(DataValueDescriptor[],int,LeafControlRow)",6,4,6
"org.apache.derby.impl.store.access.btree.BTreeController.compareNextRecord(int,LeafControlRow,DataValueDescriptor[],DataValueDescriptor[])",5,7,10
"org.apache.derby.impl.store.access.btree.BTreeController.comparePreviousRecord(int,LeafControlRow,DataValueDescriptor[],DataValueDescriptor[])",5,8,11
"org.apache.derby.impl.store.access.btree.BTreeController.compareRowsForInsert(DataValueDescriptor[],DataValueDescriptor[],LeafControlRow,int)",5,2,5
"org.apache.derby.impl.store.access.btree.BTreeController.delete(RowLocation)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.doIns(DataValueDescriptor[])",20,21,34
"org.apache.derby.impl.store.access.btree.BTreeController.do_load_insert(DataValueDescriptor[],LeafControlRow,int)",4,10,10
"org.apache.derby.impl.store.access.btree.BTreeController.do_load_split(DataValueDescriptor[],LeafControlRow)",1,4,4
"org.apache.derby.impl.store.access.btree.BTreeController.fetch(RowLocation,DataValueDescriptor[],FormatableBitSet)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.fetch(RowLocation,DataValueDescriptor[],FormatableBitSet,boolean)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.getInternalTablePropertySet(Properties)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.getTableProperties(Properties)",2,2,2
"org.apache.derby.impl.store.access.btree.BTreeController.init(TransactionManager,boolean,ContainerHandle,Transaction,int,int,BTreeLockingPolicy,BTree,LogicalUndo,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.insert(DataValueDescriptor[])",3,4,4
"org.apache.derby.impl.store.access.btree.BTreeController.insertAndFetchLocation(DataValueDescriptor[],RowLocation)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.isKeyed()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.load(TransactionManager,boolean,RowLocationRetRowSource)",4,9,9
"org.apache.derby.impl.store.access.btree.BTreeController.lockRow(RowLocation,int,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.lockRow(long,int,int,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.newRowLocationTemplate()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.reclaim_deleted_rows(OpenBTree,long)",2,7,9
"org.apache.derby.impl.store.access.btree.BTreeController.replace(RowLocation,DataValueDescriptor[],FormatableBitSet)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeController.start_xact_and_dosplit(boolean,long,DataValueDescriptor[],DataValueDescriptor[],int)",1,7,8
"org.apache.derby.impl.store.access.btree.BTreeController.unlockRowAfterRead(RowLocation,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeCostController.BTreeCostController()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeCostController.close()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeCostController.getFetchFromFullKeyCost(FormatableBitSet,int)",1,1,2
"org.apache.derby.impl.store.access.btree.BTreeCostController.getFetchFromRowLocationCost(FormatableBitSet,int)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeCostController.getScanCost(int,long,int,boolean,FormatableBitSet,DataValueDescriptor[],DataValueDescriptor[],int,DataValueDescriptor[],int,boolean,int,StoreCostResult)",1,7,15
"org.apache.derby.impl.store.access.btree.BTreeCostController.init(TransactionManager,BTree,Transaction)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeCostController.newRowLocationTemplate()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeForwardScan.fetchRows(BTreeRowPosition,DataValueDescriptor[][],RowLocation[],BackingStoreHashtable,long,int[])",13,37,41
"org.apache.derby.impl.store.access.btree.BTreeForwardScan.positionAtStartPosition(BTreeRowPosition)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMax(DataValueDescriptor[])",7,12,15
"org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchMaxRowFromBeginning(BTreeRowPosition,DataValueDescriptor[])",6,10,12
"org.apache.derby.impl.store.access.btree.BTreeMaxScan.fetchRows(BTreeRowPosition,DataValueDescriptor[][],RowLocation[],BackingStoreHashtable,long,int[])",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeMaxScan.positionAtStartPosition(BTreeRowPosition)",4,6,7
"org.apache.derby.impl.store.access.btree.BTreePostCommit.BTreePostCommit(AccessFactory,BTree,long)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreePostCommit.doShrink(OpenBTree,DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.btree.BTreePostCommit.getShrinkKey(OpenBTree,ControlRow,int)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreePostCommit.openIndex(TransactionManager,int,int)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreePostCommit.performWork(ContextManager)",1,9,11
"org.apache.derby.impl.store.access.btree.BTreePostCommit.purgeCommittedDeletes(OpenBTree,long)",1,14,14
"org.apache.derby.impl.store.access.btree.BTreePostCommit.purgeRowLevelCommittedDeletes(OpenBTree)",2,7,8
"org.apache.derby.impl.store.access.btree.BTreePostCommit.serviceASAP()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreePostCommit.serviceImmediately()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeRowPosition.BTreeRowPosition()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeRowPosition.init()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeRowPosition.toString()",1,2,2
"org.apache.derby.impl.store.access.btree.BTreeRowPosition.unlatch()",1,2,2
"org.apache.derby.impl.store.access.btree.BTreeScan.BTreeScan()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.close()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.closeForEndTransaction(boolean)",2,5,7
"org.apache.derby.impl.store.access.btree.BTreeScan.delete()",6,13,13
"org.apache.derby.impl.store.access.btree.BTreeScan.didNotQualify()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.doesCurrentPositionQualify()",3,5,6
"org.apache.derby.impl.store.access.btree.BTreeScan.fetch(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.fetch(DataValueDescriptor[],boolean)",3,8,9
"org.apache.derby.impl.store.access.btree.BTreeScan.fetchLocation(RowLocation)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.fetchNext(DataValueDescriptor[])",1,2,2
"org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(DataValueDescriptor[][],RowLocation[])",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.fetchNextGroup(DataValueDescriptor[][],RowLocation[],RowLocation[])",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.fetchSet(long,int[],BackingStoreHashtable)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.fetchWithoutQualify(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.getCurrentRecordHandleForDebugging()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.getScanInfo()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.init(TransactionManager,Transaction,boolean,int,int,BTreeLockingPolicy,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,BTree,LogicalUndo,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,3,5
"org.apache.derby.impl.store.access.btree.BTreeScan.initScanParams(DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,9,13
"org.apache.derby.impl.store.access.btree.BTreeScan.isCurrentPositionDeleted()",2,6,6
"org.apache.derby.impl.store.access.btree.BTreeScan.isHeldAfterCommit()",1,1,2
"org.apache.derby.impl.store.access.btree.BTreeScan.isKeyed()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.newRowLocationTemplate()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.next()",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScan(BTreeRowPosition)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.positionAtDoneScanFromClose(BTreeRowPosition)",1,5,7
"org.apache.derby.impl.store.access.btree.BTreeScan.positionAtNextPage(BTreeRowPosition)",4,8,10
"org.apache.derby.impl.store.access.btree.BTreeScan.positionAtRowLocation(RowLocation)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForBackwardScan(BTreeRowPosition)",3,10,14
"org.apache.derby.impl.store.access.btree.BTreeScan.positionAtStartForForwardScan(BTreeRowPosition)",3,9,15
"org.apache.derby.impl.store.access.btree.BTreeScan.process_qualifier(DataValueDescriptor[])",7,6,11
"org.apache.derby.impl.store.access.btree.BTreeScan.reopenScan(DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,6,8
"org.apache.derby.impl.store.access.btree.BTreeScan.reopenScanByRowLocation(RowLocation,Qualifier[][])",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.replace(DataValueDescriptor[],FormatableBitSet)",1,1,1
"org.apache.derby.impl.store.access.btree.BTreeScan.reposition(BTreeRowPosition,boolean)",6,11,12
"org.apache.derby.impl.store.access.btree.BTreeScan.savePosition()",1,8,8
"org.apache.derby.impl.store.access.btree.BTreeScan.savePosition(Conglomerate,Page)",1,8,8
"org.apache.derby.impl.store.access.btree.BTreeScan.toString()",2,7,14
"org.apache.derby.impl.store.access.btree.BTreeScan.unlockCurrentScan(BTreeRowPosition)",1,2,2
"org.apache.derby.impl.store.access.btree.BTreeScanInfo.BTreeScanInfo(BTreeScan)",1,4,6
"org.apache.derby.impl.store.access.btree.BTreeScanInfo.getAllScanInfo(Properties)",1,2,3
"org.apache.derby.impl.store.access.btree.BranchControlRow.BranchControlRow()",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.BranchControlRow(OpenBTree,Page,int,ControlRow,boolean,long)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.allocate(OpenBTree,ControlRow,int,ControlRow)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.checkChildOrderAgainstRowOrder(OpenBTree)",1,7,7
"org.apache.derby.impl.store.access.btree.BranchControlRow.checkChildren(OpenBTree)",1,3,3
"org.apache.derby.impl.store.access.btree.BranchControlRow.checkConsistency(OpenBTree,ControlRow,boolean)",1,7,7
"org.apache.derby.impl.store.access.btree.BranchControlRow.controlRowInit()",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.fixChildrensParents(OpenBTree,ControlRow)",1,10,10
"org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageAtSlot(OpenBTree,int)",1,2,2
"org.apache.derby.impl.store.access.btree.BranchControlRow.getChildPageIdAtSlot(OpenBTree,int)",1,2,2
"org.apache.derby.impl.store.access.btree.BranchControlRow.getLeftChild(OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.getLeftChildPageno()",1,2,2
"org.apache.derby.impl.store.access.btree.BranchControlRow.getNumberOfControlRowColumns()",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.getRightChild(OpenBTree)",1,2,2
"org.apache.derby.impl.store.access.btree.BranchControlRow.getRowTemplate(OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.growRoot(OpenBTree,DataValueDescriptor[],BranchControlRow)",1,6,6
"org.apache.derby.impl.store.access.btree.BranchControlRow.isLeftmostLeaf()",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.isRightmostLeaf()",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.printTree(OpenBTree)",2,4,4
"org.apache.derby.impl.store.access.btree.BranchControlRow.restartSplitFor(OpenBTree,DataValueDescriptor[],BranchControlRow,ControlRow,DataValueDescriptor[],DataValueDescriptor[],int)",1,2,2
"org.apache.derby.impl.store.access.btree.BranchControlRow.search(SearchParameters)",1,5,6
"org.apache.derby.impl.store.access.btree.BranchControlRow.searchLeft(OpenBTree)",1,4,4
"org.apache.derby.impl.store.access.btree.BranchControlRow.searchRight(OpenBTree)",1,4,4
"org.apache.derby.impl.store.access.btree.BranchControlRow.setLeftChild(ControlRow)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchControlRow.setLeftChildPageno(long)",1,2,2
"org.apache.derby.impl.store.access.btree.BranchControlRow.shrinkFor(OpenBTree,DataValueDescriptor[])",1,8,9
"org.apache.derby.impl.store.access.btree.BranchControlRow.splitFor(OpenBTree,DataValueDescriptor[],BranchControlRow,DataValueDescriptor[],int)",14,31,31
"org.apache.derby.impl.store.access.btree.BranchControlRow.toString()",2,2,3
"org.apache.derby.impl.store.access.btree.BranchRow.BranchRow()",1,1,1
"org.apache.derby.impl.store.access.btree.BranchRow.BranchRow(Transaction,BTree)",1,2,2
"org.apache.derby.impl.store.access.btree.BranchRow.createBranchRowFromOldBranchRow(long)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchRow.createBranchRowFromOldLeafRow(DataValueDescriptor[],long)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchRow.createEmptyTemplate(Transaction,BTree)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchRow.getChildPage()",1,2,2
"org.apache.derby.impl.store.access.btree.BranchRow.getRow()",1,1,1
"org.apache.derby.impl.store.access.btree.BranchRow.setPageNumber(long)",1,1,1
"org.apache.derby.impl.store.access.btree.BranchRow.toString()",2,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.ControlRow()",1,1,1
"org.apache.derby.impl.store.access.btree.ControlRow.ControlRow(ContainerHandle,Page)",1,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.ControlRow(OpenBTree,Page,int,ControlRow,boolean)",1,5,6
"org.apache.derby.impl.store.access.btree.ControlRow.auxObjectInvalidated()",1,1,1
"org.apache.derby.impl.store.access.btree.ControlRow.checkGeneric(OpenBTree,ControlRow,boolean)",1,7,7
"org.apache.derby.impl.store.access.btree.ControlRow.checkRowOrder(OpenBTree,ControlRow)",2,5,5
"org.apache.derby.impl.store.access.btree.ControlRow.checkSiblings(OpenBTree)",1,10,11
"org.apache.derby.impl.store.access.btree.ControlRow.compareIndexRowFromPageToKey(ControlRow,int,DataValueDescriptor[],DataValueDescriptor[],int,int,boolean[])",5,2,5
"org.apache.derby.impl.store.access.btree.ControlRow.compareIndexRowToKey(DataValueDescriptor[],DataValueDescriptor[],int,int,boolean[])",5,2,5
"org.apache.derby.impl.store.access.btree.ControlRow.compareRowsOnSiblings(OpenBTree,ControlRow,ControlRow)",2,5,5
"org.apache.derby.impl.store.access.btree.ControlRow.debugPage(OpenBTree)",1,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.get(ContainerHandle,long)",1,4,4
"org.apache.derby.impl.store.access.btree.ControlRow.get(OpenBTree,long)",1,1,1
"org.apache.derby.impl.store.access.btree.ControlRow.getConglom(int)",1,4,4
"org.apache.derby.impl.store.access.btree.ControlRow.getControlRowForPage(ContainerHandle,Page)",2,2,3
"org.apache.derby.impl.store.access.btree.ControlRow.getIsRoot()",1,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.getLeftSibling(OpenBTree)",3,1,3
"org.apache.derby.impl.store.access.btree.ControlRow.getLevel()",1,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.getNoWait(OpenBTree,long)",2,1,2
"org.apache.derby.impl.store.access.btree.ControlRow.getPage()",1,1,1
"org.apache.derby.impl.store.access.btree.ControlRow.getParentPageNumber()",1,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.getRightSibling(OpenBTree)",2,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.getRow()",1,1,1
"org.apache.derby.impl.store.access.btree.ControlRow.getRowTemplate(OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.ControlRow.getVersion()",1,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.getleftSiblingPageNumber()",1,3,3
"org.apache.derby.impl.store.access.btree.ControlRow.getrightSiblingPageNumber()",1,2,2
"org.apache.derby.impl.store.access.btree.ControlRow.linkRight(OpenBTree,ControlRow)",1,3,3
"org.apache.derby.impl.store.access.btree.ControlRow.release()",1,3,3
"org.apache.derby.impl.store.access.btree.ControlRow.searchForEntry(SearchParameters)",3,6,16
"org.apache.derby.impl.store.access.btree.ControlRow.searchForEntryBackward(SearchParameters)",3,6,16
"org.apache.derby.impl.store.access.btree.ControlRow.setConglom(BTree)",1,1,1
"org.apache.derby.impl.store.access.btree.ControlRow.setIsRoot(boolean)",1,1,3
"org.apache.derby.impl.store.access.btree.ControlRow.setLeftSibling(ControlRow)",1,5,5
"org.apache.derby.impl.store.access.btree.ControlRow.setLevel(int)",1,1,2
"org.apache.derby.impl.store.access.btree.ControlRow.setParent(long)",1,3,4
"org.apache.derby.impl.store.access.btree.ControlRow.setRightSibling(ControlRow)",1,5,5
"org.apache.derby.impl.store.access.btree.ControlRow.setVersion(int)",1,1,2
"org.apache.derby.impl.store.access.btree.ControlRow.toString()",2,3,5
"org.apache.derby.impl.store.access.btree.ControlRow.unlink(OpenBTree)",1,6,7
"org.apache.derby.impl.store.access.btree.D_BTreeController.diag()",1,2,3
"org.apache.derby.impl.store.access.btree.D_BTreeController.diag_level(OpenBTree,ControlRow,Properties,LevelInfo[])",1,5,5
"org.apache.derby.impl.store.access.btree.D_BTreeController.diag_onelevel(Properties,LevelInfo)",1,1,2
"org.apache.derby.impl.store.access.btree.D_BTreeController.diag_page(OpenBTree,ControlRow,Properties,LevelInfo[])",1,1,1
"org.apache.derby.impl.store.access.btree.D_BTreeController.diag_tabulate(Properties,LevelInfo[])",1,3,3
"org.apache.derby.impl.store.access.btree.D_BTreeController.init(Object)",1,2,2
"org.apache.derby.impl.store.access.btree.D_BTreeController.olddiag_tabulate(Properties,LevelInfo[])",1,1,3
"org.apache.derby.impl.store.access.btree.D_BTreeController.out_summary(String,long,double,String)",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.LeafControlRow()",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.LeafControlRow(OpenBTree,Page,ControlRow,boolean)",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.allocate(OpenBTree,ControlRow)",1,3,3
"org.apache.derby.impl.store.access.btree.LeafControlRow.checkConsistency(OpenBTree,ControlRow,boolean)",1,4,4
"org.apache.derby.impl.store.access.btree.LeafControlRow.controlRowInit()",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.getLeftChild(OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.getNumberOfControlRowColumns()",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.getRightChild(OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.get_left_nondeleted_rowcnt(int)",1,2,3
"org.apache.derby.impl.store.access.btree.LeafControlRow.growRoot(OpenBTree,DataValueDescriptor[],LeafControlRow)",12,17,18
"org.apache.derby.impl.store.access.btree.LeafControlRow.initEmptyBtree(OpenBTree)",1,5,5
"org.apache.derby.impl.store.access.btree.LeafControlRow.isLeftmostLeaf()",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.isRightmostLeaf()",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.printTree(OpenBTree)",2,2,2
"org.apache.derby.impl.store.access.btree.LeafControlRow.search(SearchParameters)",1,4,8
"org.apache.derby.impl.store.access.btree.LeafControlRow.searchLeft(OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.searchRight(OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.LeafControlRow.shrinkFor(OpenBTree,DataValueDescriptor[])",1,4,4
"org.apache.derby.impl.store.access.btree.LeafControlRow.splitFor(OpenBTree,DataValueDescriptor[],BranchControlRow,DataValueDescriptor[],int)",14,29,30
"org.apache.derby.impl.store.access.btree.OpenBTree.checkConsistency()",2,4,4
"org.apache.derby.impl.store.access.btree.OpenBTree.close()",1,2,2
"org.apache.derby.impl.store.access.btree.OpenBTree.debugConglomerate()",1,3,3
"org.apache.derby.impl.store.access.btree.OpenBTree.getColumnSortOrderInfo()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getConglomerate()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getContainer()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getContainerHandle()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getEstimatedRowCount()",1,2,3
"org.apache.derby.impl.store.access.btree.OpenBTree.getHeight()",1,2,2
"org.apache.derby.impl.store.access.btree.OpenBTree.getHold()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getLockLevel()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getLockingPolicy()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getOpenMode()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getRawTran()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getRuntimeMem()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getSpaceInfo()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.getXactMgr()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.init(TransactionManager,TransactionManager,ContainerHandle,Transaction,boolean,int,int,BTreeLockingPolicy,BTree,LogicalUndo,DynamicCompiledOpenConglomInfo)",2,5,7
"org.apache.derby.impl.store.access.btree.OpenBTree.isClosed()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.isIndexableRowConsistent(DataValueDescriptor[])",1,4,4
"org.apache.derby.impl.store.access.btree.OpenBTree.isTableLocked()",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.reopen()",1,3,3
"org.apache.derby.impl.store.access.btree.OpenBTree.setEstimatedRowCount(long)",1,2,2
"org.apache.derby.impl.store.access.btree.OpenBTree.setLockingPolicy(BTreeLockingPolicy)",1,1,1
"org.apache.derby.impl.store.access.btree.OpenBTree.test_errors(OpenBTree,String,boolean,BTreeLockingPolicy,LeafControlRow,boolean)",3,6,6
"org.apache.derby.impl.store.access.btree.SearchParameters.SearchParameters(DataValueDescriptor[],int,DataValueDescriptor[],OpenBTree,boolean)",1,2,4
"org.apache.derby.impl.store.access.btree.SearchParameters.toString()",2,2,4
"org.apache.derby.impl.store.access.btree.index.B2I.compressConglomerate(TransactionManager,Transaction)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.create(TransactionManager,int,long,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int)",4,12,13
"org.apache.derby.impl.store.access.btree.index.B2I.defragmentConglomerate(TransactionManager,Transaction,boolean,int,int,LockingPolicy,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.drop(TransactionManager)",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2I.estimateMemoryUsage()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.fetchMaxOnBTree(TransactionManager,Transaction,long,int,int,LockingPolicy,int,FormatableBitSet,DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.getBtreeLockingPolicy(Transaction,int,int,int,ConglomerateController,OpenBTree)",1,9,14
"org.apache.derby.impl.store.access.btree.index.B2I.getStaticCompiledConglomInfo(TransactionController,long)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.load(TransactionManager,boolean,RowLocationRetRowSource)",1,1,2
"org.apache.derby.impl.store.access.btree.index.B2I.localReadExternal(ObjectInput)",1,7,9
"org.apache.derby.impl.store.access.btree.index.B2I.lockTable(TransactionManager,int,int,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.open(TransactionManager,Transaction,boolean,int,int,LockingPolicy,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.openScan(TransactionManager,Transaction,boolean,int,int,LockingPolicy,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.openStoreCost(TransactionManager,Transaction)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.purgeConglomerate(TransactionManager,Transaction)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I.traverseRight()",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2I.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2I.writeExternal_v10_2(ObjectOutput)",1,3,3
"org.apache.derby.impl.store.access.btree.index.B2I.writeExternal_v10_3(ObjectOutput)",1,2,3
"org.apache.derby.impl.store.access.btree.index.B2IController.B2IController()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IController.close()",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IController.init(TransactionManager,Transaction,boolean,int,int,LockingPolicy,boolean,B2I,B2IUndo,B2IStaticCompiledInfo,DynamicCompiledOpenConglomInfo)",1,6,6
"org.apache.derby.impl.store.access.btree.index.B2IController.insert(DataValueDescriptor[])",1,3,3
"org.apache.derby.impl.store.access.btree.index.B2ICostController.B2ICostController()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2ICostController.init(TransactionManager,B2I,Transaction)",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IFactory.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IFactory.canSupport(Properties)",2,1,2
"org.apache.derby.impl.store.access.btree.index.B2IFactory.createConglomerate(TransactionManager,int,long,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int)",1,2,3
"org.apache.derby.impl.store.access.btree.index.B2IFactory.defaultProperties()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IFactory.getConglomerateFactoryId()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IFactory.primaryFormat()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IFactory.primaryImplementationType()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IFactory.readConglomerate(TransactionManager,ContainerKey)",2,6,6
"org.apache.derby.impl.store.access.btree.index.B2IFactory.stop()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IFactory.supportsFormat(UUID)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IFactory.supportsImplementation(String)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IForwardScan.B2IForwardScan()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IForwardScan.close()",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IForwardScan.closeForEndTransaction(boolean)",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IForwardScan.init(TransactionManager,Transaction,boolean,int,int,LockingPolicy,int,boolean,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,B2I,B2IUndo,B2IStaticCompiledInfo,DynamicCompiledOpenConglomInfo)",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IForwardScan.reopen()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IMaxScan.B2IMaxScan()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IMaxScan.close()",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IMaxScan.closeForEndTransaction(boolean)",1,3,3
"org.apache.derby.impl.store.access.btree.index.B2IMaxScan.init(TransactionManager,Transaction,int,int,LockingPolicy,int,boolean,FormatableBitSet,B2I,B2IUndo)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.B2INoLocking()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.B2INoLocking(Transaction,int,LockingPolicy,ConglomerateController,OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.lockNonScanPreviousRow(BTree,LeafControlRow,int,FetchDescriptor,DataValueDescriptor[],RowLocation,OpenBTree,int,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.lockNonScanRow(BTree,LeafControlRow,LeafControlRow,DataValueDescriptor[],int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.lockNonScanRowOnPage(BTree,LeafControlRow,int,FetchDescriptor,DataValueDescriptor[],RowLocation,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.lockScan(LeafControlRow,ControlRow,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.lockScanCommittedDeletedRow(OpenBTree,LeafControlRow,DataValueDescriptor[],FetchDescriptor,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.lockScanForReclaimSpace(LeafControlRow)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.lockScanRow(OpenBTree,BTree,BTreeRowPosition,boolean,FetchDescriptor,DataValueDescriptor[],RowLocation,boolean,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.unlockScan(RecordHandle)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2INoLocking.unlockScanRecordAfterRead(BTreeRowPosition,boolean)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking1.B2IRowLocking1(Transaction,int,LockingPolicy,ConglomerateController,OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking1.lockScanRow(OpenBTree,BTree,BTreeRowPosition,boolean,FetchDescriptor,DataValueDescriptor[],RowLocation,boolean,boolean,int)",1,1,2
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking1.unlockScanRecordAfterRead(BTreeRowPosition,boolean)",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking2.B2IRowLocking2(Transaction,int,LockingPolicy,ConglomerateController,OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking2.unlockScanRecordAfterRead(BTreeRowPosition,boolean)",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.B2IRowLocking3(Transaction,int,LockingPolicy,ConglomerateController,OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScan(RecordHandle,boolean,boolean)",1,2,2
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3._lockScanRow(OpenBTree,BTree,BTreeRowPosition,boolean,boolean,FetchDescriptor,DataValueDescriptor[],RowLocation,boolean,boolean,int)",1,7,8
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockNonScanPreviousRow(BTree,LeafControlRow,int,FetchDescriptor,DataValueDescriptor[],RowLocation,OpenBTree,int,int)",1,5,5
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockNonScanRow(BTree,LeafControlRow,LeafControlRow,DataValueDescriptor[],int)",1,5,5
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockNonScanRowOnPage(BTree,LeafControlRow,int,FetchDescriptor,DataValueDescriptor[],RowLocation,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockPreviousToFirstKey(LeafControlRow,LeafControlRow,int,int)",1,3,3
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockRowOnPage(BTree,LeafControlRow,LeafControlRow,int,boolean,FetchDescriptor,DataValueDescriptor[],RowLocation,int,int)",1,8,8
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScan(LeafControlRow,ControlRow,boolean,int)",1,4,4
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScanCommittedDeletedRow(OpenBTree,LeafControlRow,DataValueDescriptor[],FetchDescriptor,int)",1,4,4
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScanForReclaimSpace(LeafControlRow)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.lockScanRow(OpenBTree,BTree,BTreeRowPosition,boolean,FetchDescriptor,DataValueDescriptor[],RowLocation,boolean,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.searchLeftAndLockPreviousKey(B2I,LeafControlRow,int,FetchDescriptor,DataValueDescriptor[],RowLocation,OpenBTree,int,int)",4,8,10
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.unlockScan(RecordHandle)",1,3,3
"org.apache.derby.impl.store.access.btree.index.B2IRowLocking3.unlockScanRecordAfterRead(BTreeRowPosition,boolean)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.B2IRowLockingRR(Transaction,int,LockingPolicy,ConglomerateController,OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.lockScanRow(OpenBTree,BTree,BTreeRowPosition,boolean,FetchDescriptor,DataValueDescriptor[],RowLocation,boolean,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IRowLockingRR.unlockScanRecordAfterRead(BTreeRowPosition,boolean)",1,3,3
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.B2IStaticCompiledInfo()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.B2IStaticCompiledInfo(TransactionController,B2I)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.getConglom()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.isNull()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.restoreToNull()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IStaticCompiledInfo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2ITableLocking3.B2ITableLocking3()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2ITableLocking3.B2ITableLocking3(Transaction,int,LockingPolicy,ConglomerateController,OpenBTree)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IUndo.findUndo(Transaction,LogicalUndoable,LimitObjectInput)",3,10,11
"org.apache.derby.impl.store.access.btree.index.B2IUndo.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IUndo.readExternal(ArrayInputStream)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IUndo.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2IUndo.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I_10_3.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I_10_3.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I_v10_2.B2I_v10_2()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I_v10_2.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.btree.index.B2I_v10_2.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.BinaryOrderableWrapper()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.getCmpResult()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.getTypeFormatId()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.init(BinaryOrderable,BinaryOrderable)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.isNull()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.readExternal(ObjectInput)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.readExternalFromArray(ArrayInputStream)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.restoreToNull()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.BinaryOrderableWrapper.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.createCollationIds(int,int[])",1,4,5
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.createFormatIds(DataValueDescriptor[])",1,5,5
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.createRawStorePropertySet(Properties)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.createUserRawStorePropertySet(Properties)",1,1,2
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.debugPage(Page,int,boolean,DataValueDescriptor[])",2,6,7
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.readCollationIdArray(int[],ObjectInput)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.readFormatIdArray(int,ObjectInput)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.writeCollationIdArray(int[],ObjectOutput)",1,3,5
"org.apache.derby.impl.store.access.conglomerate.ConglomerateUtil.writeFormatIdArray(int[],ObjectOutput)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.compare(DataValueDescriptor)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.getClone()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.getLength()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.getNewNull()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.getObject()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.getString()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.getTypeName()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.setFrom(DataValueDescriptor)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerate.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.close()",1,3,3
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.closeForEndTransaction(boolean)",2,5,5
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.delete(RowLocation)",4,6,8
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(RowLocation,DataValueDescriptor[],FormatableBitSet)",6,8,9
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.fetch(RowLocation,DataValueDescriptor[],FormatableBitSet,boolean)",6,8,9
"org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.replace(RowLocation,DataValueDescriptor[],FormatableBitSet)",6,7,8
"org.apache.derby.impl.store.access.conglomerate.GenericController.checkConsistency()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.close()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericController.debugConglomerate()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.getEstimatedRowCount()",1,2,3
"org.apache.derby.impl.store.access.conglomerate.GenericController.getInternalTablePropertySet(Properties)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.getOpenConglom()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.getRowPositionFromRowLocation(RowLocation,RowPosition)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.getSpaceInfo()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.getTableProperties(Properties)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.init(OpenConglomerate)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericController.isKeyed()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.isTableLocked()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.newRowLocationTemplate()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericController.queueDeletePostCommitWork(RowPosition)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericController.setEstimatedRowCount(long)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericCostController.getFetchFromFullKeyCost(FormatableBitSet,int)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.allocateScanPosition()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.close()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.closeForEndTransaction(boolean)",2,3,5
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.closeScan()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.delete()",1,3,3
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.didNotQualify()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.doesCurrentPositionQualify()",3,2,3
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetch(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetch(DataValueDescriptor[],boolean)",4,4,5
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchLocation(RowLocation)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchRows(DataValueDescriptor[][],RowLocation[],BackingStoreHashtable,long,int[])",12,27,29
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchSet(long,int[],BackingStoreHashtable)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.fetchWithoutQualify(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getNumPagesVisited()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getNumRowsQualified()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getNumRowsVisited()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getQualifier()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getScanColumnList()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getScanInfo()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getScanPosition()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getScanState()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getStartKeyValue()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getStartSearchOperator()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getStopKeyValue()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.getStopSearchOperator()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.init(OpenConglomerate,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.isCurrentPositionDeleted()",3,2,3
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.isHeldAfterCommit()",1,1,2
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtDoneScan(RowPosition)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtInitScan(DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,RowPosition)",1,9,13
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtNextPage(RowPosition)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtResumeScan(RowPosition)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.positionAtStartForForwardScan(RowPosition)",1,4,4
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenAfterEndTransaction()",3,2,6
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScan(DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,3,4
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScanByRecordHandle(RecordHandle,Qualifier[][])",1,1,2
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.reopenScanByRowLocation(RowLocation,Qualifier[][])",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.replace(DataValueDescriptor[],FormatableBitSet)",1,4,4
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.repositionScanForUpateOper()",3,4,4
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.setScanPosition(RowPosition)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.GenericScanController.setScanState(int)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.checkConsistency()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.close()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.debugConglomerate()",1,3,3
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getConglomerate()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getContainer()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getHold()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getInternalTablePropertySet(Properties)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getOpenMode()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getRawTran()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getRuntimeMem()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getSpaceInfo()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getTableProperties(Properties)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.getXactMgr()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.init(ContainerHandle,Conglomerate,int[],int[],TransactionManager,Transaction,boolean,int,int,LockingPolicy,DynamicCompiledOpenConglomInfo)",1,2,5
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.isClosed()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.isForUpdate()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.isKeyed()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.isTableLocked()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.isUseUpdateLocks()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.latchPage(RowPosition)",2,3,4
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.latchPageAndRepositionScan(RowPosition)",4,7,10
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForRead(RowPosition,RowPosition,boolean,boolean)",3,12,13
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.lockPositionForWrite(RowPosition,boolean,boolean)",4,9,9
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.reopen()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerate.unlockPositionAfterRead(RowPosition)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.OpenConglomerateScratchSpace(int[],int[])",1,1,1
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.get_row_for_export(Transaction)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.get_scratch_row(Transaction)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.get_scratch_row_position()",1,1,2
"org.apache.derby.impl.store.access.conglomerate.OpenConglomerateScratchSpace.get_template(Transaction)",1,2,2
"org.apache.derby.impl.store.access.conglomerate.RowPosition.RowPosition()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.RowPosition.init()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.RowPosition.positionAtNextSlot()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.RowPosition.positionAtPrevSlot()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.RowPosition.toString()",1,3,3
"org.apache.derby.impl.store.access.conglomerate.RowPosition.unlatch()",1,2,2
"org.apache.derby.impl.store.access.conglomerate.TemplateRow.TemplateRow()",1,1,1
"org.apache.derby.impl.store.access.conglomerate.TemplateRow.allocate_objects(Transaction,int,FormatableBitSet,int[],int[])",1,8,8
"org.apache.derby.impl.store.access.conglomerate.TemplateRow.checkColumnTypes(DataValueFactory,int[],int[],DataValueDescriptor[])",3,8,8
"org.apache.derby.impl.store.access.conglomerate.TemplateRow.checkPartialColumnTypes(int[],FormatableBitSet,int[],DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.conglomerate.TemplateRow.newBranchRow(Transaction,int[],int[],DataValueDescriptor)",1,1,1
"org.apache.derby.impl.store.access.conglomerate.TemplateRow.newRow(DataValueDescriptor[])",1,2,2
"org.apache.derby.impl.store.access.conglomerate.TemplateRow.newRow(Transaction,FormatableBitSet,int[],int[])",1,1,1
"org.apache.derby.impl.store.access.conglomerate.TemplateRow.newU8Row(int)",1,1,2
"org.apache.derby.impl.store.access.heap.D_HeapController.diag()",1,2,2
"org.apache.derby.impl.store.access.heap.D_HeapController.diag_page(Page,Properties,TableStats)",1,2,2
"org.apache.derby.impl.store.access.heap.D_HeapController.diag_tabulate(Properties,TableStats)",1,1,2
"org.apache.derby.impl.store.access.heap.D_HeapController.init(Object)",1,2,2
"org.apache.derby.impl.store.access.heap.D_HeapController.out_summary(String,long,double,String)",1,2,2
"org.apache.derby.impl.store.access.heap.Heap.Heap()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.addColumn(TransactionManager,int,Storable,int)",2,5,6
"org.apache.derby.impl.store.access.heap.Heap.boot_create(long,DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.compressConglomerate(TransactionManager,Transaction)",2,3,3
"org.apache.derby.impl.store.access.heap.Heap.create(Transaction,int,long,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int,int)",3,8,10
"org.apache.derby.impl.store.access.heap.Heap.defragmentConglomerate(TransactionManager,Transaction,boolean,int,int,LockingPolicy,int)",2,2,2
"org.apache.derby.impl.store.access.heap.Heap.drop(TransactionManager)",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.estimateMemoryUsage()",1,2,3
"org.apache.derby.impl.store.access.heap.Heap.fetchMaxOnBTree(TransactionManager,Transaction,long,int,int,LockingPolicy,int,FormatableBitSet,DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.getConglom()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.getContainerid()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.getDynamicCompiledConglomInfo()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.getId()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.getStaticCompiledConglomInfo(TransactionController,long)",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.isNull()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.isTemporary()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.load(TransactionManager,boolean,RowLocationRetRowSource)",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.localReadExternal(ObjectInput)",1,4,5
"org.apache.derby.impl.store.access.heap.Heap.open(TransactionManager,Transaction,boolean,int,int,LockingPolicy,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",2,2,2
"org.apache.derby.impl.store.access.heap.Heap.openScan(TransactionManager,Transaction,boolean,int,int,LockingPolicy,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",3,4,4
"org.apache.derby.impl.store.access.heap.Heap.openStoreCost(TransactionManager,Transaction)",2,2,2
"org.apache.derby.impl.store.access.heap.Heap.purgeConglomerate(TransactionManager,Transaction)",3,8,8
"org.apache.derby.impl.store.access.heap.Heap.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.restoreToNull()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap.toString()",1,2,2
"org.apache.derby.impl.store.access.heap.Heap.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.store.access.heap.Heap.writeExternal_v10_2(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapClassInfo.getNewInstance()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapCompressScan.HeapCompressScan()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapCompressScan.fetchNextGroup(DataValueDescriptor[][],RowLocation[],RowLocation[])",1,1,1
"org.apache.derby.impl.store.access.heap.HeapCompressScan.fetchRowsForCompress(DataValueDescriptor[][],RowLocation[],RowLocation[])",10,18,18
"org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAfterThisPage(RowPosition)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtResumeScan(RowPosition)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapCompressScan.positionAtStartForForwardScan(RowPosition)",1,2,2
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.HeapConglomerateFactory()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.canSupport(Properties)",2,1,2
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.createConglomerate(TransactionManager,int,long,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int)",1,1,2
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.defaultProperties()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.getConglomerateFactoryId()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.primaryFormat()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.primaryImplementationType()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.readConglomerate(TransactionManager,ContainerKey)",2,5,5
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.stop()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.supportsFormat(UUID)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapConglomerateFactory.supportsImplementation(String)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapController.doInsert(DataValueDescriptor[])",7,6,10
"org.apache.derby.impl.store.access.heap.HeapController.getRowPositionFromRowLocation(RowLocation,RowPosition)",1,2,2
"org.apache.derby.impl.store.access.heap.HeapController.getUserPageNoWait(long)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapController.getUserPageWait(long)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapController.insert(DataValueDescriptor[])",3,3,3
"org.apache.derby.impl.store.access.heap.HeapController.insertAndFetchLocation(DataValueDescriptor[],RowLocation)",3,4,4
"org.apache.derby.impl.store.access.heap.HeapController.load(TransactionManager,Heap,boolean,RowLocationRetRowSource)",5,9,11
"org.apache.derby.impl.store.access.heap.HeapController.lockRow(RecordHandle,int,boolean,int)",1,5,7
"org.apache.derby.impl.store.access.heap.HeapController.lockRow(RowLocation,int,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapController.lockRow(long,int,int,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapController.lockRowAtSlotNoWaitExclusive(RecordHandle)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapController.newRowLocationTemplate()",3,3,3
"org.apache.derby.impl.store.access.heap.HeapController.purgeCommittedDeletes(Page)",1,6,6
"org.apache.derby.impl.store.access.heap.HeapController.queueDeletePostCommitWork(RowPosition)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapController.removePage(Page)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapController.unlockRowAfterRead(RowLocation,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapCostController.getFetchFromRowLocationCost(FormatableBitSet,int)",1,1,2
"org.apache.derby.impl.store.access.heap.HeapCostController.getScanCost(int,long,int,boolean,FormatableBitSet,DataValueDescriptor[],DataValueDescriptor[],int,DataValueDescriptor[],int,boolean,int,StoreCostResult)",1,3,7
"org.apache.derby.impl.store.access.heap.HeapCostController.init(OpenConglomerate)",1,1,2
"org.apache.derby.impl.store.access.heap.HeapPostCommit.HeapPostCommit(AccessFactory,Heap,long)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapPostCommit.performWork(ContextManager)",1,8,10
"org.apache.derby.impl.store.access.heap.HeapPostCommit.purgeCommittedDeletes(HeapController,long)",1,14,14
"org.apache.derby.impl.store.access.heap.HeapPostCommit.serviceASAP()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapPostCommit.serviceImmediately()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.HeapRowLocation()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.HeapRowLocation(HeapRowLocation)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.HeapRowLocation(RecordHandle)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.cloneObject()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.compare(DataValueDescriptor)",5,2,6
"org.apache.derby.impl.store.access.heap.HeapRowLocation.compare(int,DataValueDescriptor,boolean,boolean)",5,3,6
"org.apache.derby.impl.store.access.heap.HeapRowLocation.equals(Object)",2,1,3
"org.apache.derby.impl.store.access.heap.HeapRowLocation.estimateMemoryUsage()",1,1,2
"org.apache.derby.impl.store.access.heap.HeapRowLocation.getClone()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.getLength()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.getNewNull()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.getObject()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.getRecordHandle(ContainerHandle)",2,1,2
"org.apache.derby.impl.store.access.heap.HeapRowLocation.getString()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.getTypeName()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.hashCode()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.isNull()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.readExternalFromArray(ArrayInputStream)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.recycle()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.restoreToNull()",1,2,2
"org.apache.derby.impl.store.access.heap.HeapRowLocation.setFrom(DataValueDescriptor)",1,2,2
"org.apache.derby.impl.store.access.heap.HeapRowLocation.setFrom(RecordHandle)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.setValueFromResultSet(ResultSet,int,boolean)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.toString()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapRowLocation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.HeapScan()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.fetchLocation(RowLocation)",2,3,3
"org.apache.derby.impl.store.access.heap.HeapScan.fetchNext(DataValueDescriptor[])",1,1,2
"org.apache.derby.impl.store.access.heap.HeapScan.fetchNextGroup(DataValueDescriptor[][],RowLocation[])",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.fetchNextGroup(DataValueDescriptor[][],RowLocation[],RowLocation[])",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.getScanInfo()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.next()",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.positionAtRowLocation(RowLocation)",2,4,4
"org.apache.derby.impl.store.access.heap.HeapScan.queueDeletePostCommitWork(RowPosition)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRecordHandleAndSetLocks(RecordHandle)",2,3,4
"org.apache.derby.impl.store.access.heap.HeapScan.reopenScanByRowLocation(RowLocation,Qualifier[][])",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.savePosition(Conglomerate,Page)",1,1,1
"org.apache.derby.impl.store.access.heap.HeapScan.setRowLocationArray(RowLocation[],int,RecordHandle)",1,3,3
"org.apache.derby.impl.store.access.heap.HeapScan.setRowLocationArray(RowLocation[],int,RowPosition)",1,3,3
"org.apache.derby.impl.store.access.heap.HeapScanInfo.HeapScanInfo(HeapScan)",1,4,5
"org.apache.derby.impl.store.access.heap.HeapScanInfo.getAllScanInfo(Properties)",1,2,3
"org.apache.derby.impl.store.access.heap.Heap_v10_2.Heap_v10_2()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap_v10_2.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.access.heap.Heap_v10_2.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.access.heap.OpenHeap.getFormatIds()",1,1,1
"org.apache.derby.impl.store.access.heap.OpenHeap.newRowLocationTemplate()",2,2,2
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.boot(boolean,Properties)",1,1,3
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.canSupport(Properties)",3,1,3
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.close()",1,1,1
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.createSort(TransactionController,int,Properties,DataValueDescriptor[],ColumnOrdering[],SortObserver,boolean,long,int)",1,3,8
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.defaultProperties()",1,1,1
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.getMergeSort()",1,1,1
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.getSortCost(DataValueDescriptor[],ColumnOrdering[],boolean,long,long,int)",2,2,3
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.openSortCostController()",1,1,1
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.primaryFormat()",1,1,1
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.primaryImplementationType()",1,1,1
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.stop()",1,1,1
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.supportsFormat(UUID)",1,1,1
"org.apache.derby.impl.store.access.sort.ExternalSortFactory.supportsImplementation(String)",1,1,1
"org.apache.derby.impl.store.access.sort.MergeInserter.completedInserts()",1,3,3
"org.apache.derby.impl.store.access.sort.MergeInserter.getSortInfo()",1,1,1
"org.apache.derby.impl.store.access.sort.MergeInserter.initialize(MergeSort,TransactionManager)",2,4,6
"org.apache.derby.impl.store.access.sort.MergeInserter.insert(DataValueDescriptor[])",5,9,15
"org.apache.derby.impl.store.access.sort.MergeScan.MergeScan(MergeSort,TransactionManager,SortBuffer,Vector,SortObserver,boolean)",1,1,1
"org.apache.derby.impl.store.access.sort.MergeScan.close()",1,5,5
"org.apache.derby.impl.store.access.sort.MergeScan.closeForEndTransaction(boolean)",2,2,3
"org.apache.derby.impl.store.access.sort.MergeScan.init(TransactionManager)",2,4,5
"org.apache.derby.impl.store.access.sort.MergeScan.mergeARow(int)",3,4,4
"org.apache.derby.impl.store.access.sort.MergeScan.next()",1,2,2
"org.apache.derby.impl.store.access.sort.MergeScanRowSource.MergeScanRowSource(MergeSort,TransactionManager,SortBuffer,Vector,SortObserver,boolean)",1,1,1
"org.apache.derby.impl.store.access.sort.MergeScanRowSource.closeRowSource()",1,1,1
"org.apache.derby.impl.store.access.sort.MergeScanRowSource.getNextRowFromRowSource()",1,2,2
"org.apache.derby.impl.store.access.sort.MergeScanRowSource.getValidColumns()",1,1,1
"org.apache.derby.impl.store.access.sort.MergeScanRowSource.needsRowLocation()",1,1,1
"org.apache.derby.impl.store.access.sort.MergeScanRowSource.needsToClone()",1,1,1
"org.apache.derby.impl.store.access.sort.MergeScanRowSource.next()",1,1,1
"org.apache.derby.impl.store.access.sort.MergeScanRowSource.rowLocation(RowLocation)",1,2,2
"org.apache.derby.impl.store.access.sort.MergeSort.checkColumnOrdering(DataValueDescriptor[],ColumnOrdering[])",5,2,6
"org.apache.derby.impl.store.access.sort.MergeSort.checkColumnTypes(DataValueDescriptor[])",2,8,8
"org.apache.derby.impl.store.access.sort.MergeSort.compare(DataValueDescriptor[],DataValueDescriptor[])",4,2,4
"org.apache.derby.impl.store.access.sort.MergeSort.createMergeRun(TransactionManager,SortBuffer)",1,1,1
"org.apache.derby.impl.store.access.sort.MergeSort.doneInserting(MergeInserter,SortBuffer,Vector)",1,2,2
"org.apache.derby.impl.store.access.sort.MergeSort.doneScanning(Scan,SortBuffer)",1,3,3
"org.apache.derby.impl.store.access.sort.MergeSort.doneScanning(Scan,SortBuffer,Vector)",1,1,1
"org.apache.derby.impl.store.access.sort.MergeSort.drop(TransactionController)",1,4,4
"org.apache.derby.impl.store.access.sort.MergeSort.dropMergeRuns(TransactionManager)",1,3,4
"org.apache.derby.impl.store.access.sort.MergeSort.initialize(DataValueDescriptor[],ColumnOrdering[],SortObserver,boolean,long,int)",1,5,7
"org.apache.derby.impl.store.access.sort.MergeSort.multiStageMerge(TransactionManager)",3,6,7
"org.apache.derby.impl.store.access.sort.MergeSort.open(TransactionManager)",2,3,3
"org.apache.derby.impl.store.access.sort.MergeSort.openSortRowSource(TransactionManager)",3,7,7
"org.apache.derby.impl.store.access.sort.MergeSort.openSortScan(TransactionManager,boolean)",3,7,7
"org.apache.derby.impl.store.access.sort.MergeSortInfo.MergeSortInfo(MergeInserter)",1,1,1
"org.apache.derby.impl.store.access.sort.MergeSortInfo.getAllSortInfo(Properties)",1,3,4
"org.apache.derby.impl.store.access.sort.Node.Node(int)",1,1,1
"org.apache.derby.impl.store.access.sort.Node.getKey()",1,1,1
"org.apache.derby.impl.store.access.sort.Node.link(int)",2,1,2
"org.apache.derby.impl.store.access.sort.Node.reset()",1,1,1
"org.apache.derby.impl.store.access.sort.Node.setLink(int,Node)",1,1,2
"org.apache.derby.impl.store.access.sort.Node.toString()",2,2,5
"org.apache.derby.impl.store.access.sort.NodeAllocator.NodeAllocator()",1,1,1
"org.apache.derby.impl.store.access.sort.NodeAllocator.capacity()",1,1,1
"org.apache.derby.impl.store.access.sort.NodeAllocator.close()",1,1,1
"org.apache.derby.impl.store.access.sort.NodeAllocator.freeNode(Node)",1,1,1
"org.apache.derby.impl.store.access.sort.NodeAllocator.grow(int)",1,1,2
"org.apache.derby.impl.store.access.sort.NodeAllocator.init()",1,1,1
"org.apache.derby.impl.store.access.sort.NodeAllocator.init(int)",1,1,1
"org.apache.derby.impl.store.access.sort.NodeAllocator.init(int,int)",2,1,3
"org.apache.derby.impl.store.access.sort.NodeAllocator.newNode()",7,3,8
"org.apache.derby.impl.store.access.sort.NodeAllocator.reset()",2,2,3
"org.apache.derby.impl.store.access.sort.Scan.delete()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.didNotQualify()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.doesCurrentPositionQualify()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.fetchLocation(RowLocation)",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.fetchNextGroup(DataValueDescriptor[][],RowLocation[])",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.fetchNextGroup(DataValueDescriptor[][],RowLocation[],RowLocation[])",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.fetchSet(long,int[],BackingStoreHashtable)",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.getAllScanInfo(Properties)",1,1,2
"org.apache.derby.impl.store.access.sort.Scan.getEstimatedRowCount()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.getScanInfo()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.isCurrentPositionDeleted()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.isHeldAfterCommit()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.isKeyed()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.isTableLocked()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.newRowLocationTemplate()",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.positionAtRowLocation(RowLocation)",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.reopenScan(DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.reopenScanByRowLocation(RowLocation,Qualifier[][])",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.replace(DataValueDescriptor[],FormatableBitSet)",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.savePosition(Conglomerate,Page)",1,1,1
"org.apache.derby.impl.store.access.sort.Scan.setEstimatedRowCount(long)",1,1,1
"org.apache.derby.impl.store.access.sort.SortBuffer.SortBuffer(MergeSort)",1,1,1
"org.apache.derby.impl.store.access.sort.SortBuffer.capacity()",2,1,2
"org.apache.derby.impl.store.access.sort.SortBuffer.check()",1,5,6
"org.apache.derby.impl.store.access.sort.SortBuffer.checkNode(Node)",4,3,5
"org.apache.derby.impl.store.access.sort.SortBuffer.close()",1,2,2
"org.apache.derby.impl.store.access.sort.SortBuffer.debug(String)",1,2,2
"org.apache.derby.impl.store.access.sort.SortBuffer.deleteLeftmost(Node)",5,4,6
"org.apache.derby.impl.store.access.sort.SortBuffer.depth(Node)",3,3,5
"org.apache.derby.impl.store.access.sort.SortBuffer.getLastAux()",1,1,1
"org.apache.derby.impl.store.access.sort.SortBuffer.grow(int)",1,2,2
"org.apache.derby.impl.store.access.sort.SortBuffer.init()",2,2,3
"org.apache.derby.impl.store.access.sort.SortBuffer.insert(DataValueDescriptor[])",15,12,28
"org.apache.derby.impl.store.access.sort.SortBuffer.print()",1,2,3
"org.apache.derby.impl.store.access.sort.SortBuffer.printRecursive(Node,int)",1,4,4
"org.apache.derby.impl.store.access.sort.SortBuffer.removeFirst()",2,1,3
"org.apache.derby.impl.store.access.sort.SortBuffer.reset()",1,1,1
"org.apache.derby.impl.store.access.sort.SortBuffer.rotateRight(Node)",2,1,5
"org.apache.derby.impl.store.access.sort.SortBuffer.setNextAux(int)",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.SortBufferRowSource(SortBuffer,TransactionManager,SortObserver,boolean,int)",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.close()",1,2,2
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.closeForEndTransaction(boolean)",1,2,2
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.closeRowSource()",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.fetch(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.fetchNext(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.fetchWithoutQualify(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.getNextRowFromRowSource()",2,2,4
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.getValidColumns()",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.needsRowLocation()",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.needsToClone()",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.next()",1,1,1
"org.apache.derby.impl.store.access.sort.SortBufferRowSource.rowLocation(RowLocation)",1,2,2
"org.apache.derby.impl.store.access.sort.SortBufferScan.SortBufferScan(MergeSort,TransactionManager,SortBuffer,boolean)",1,2,2
"org.apache.derby.impl.store.access.sort.SortBufferScan.close()",1,2,2
"org.apache.derby.impl.store.access.sort.SortBufferScan.closeForEndTransaction(boolean)",2,2,3
"org.apache.derby.impl.store.access.sort.SortBufferScan.next()",1,2,2
"org.apache.derby.impl.store.access.sort.SortScan.SortScan(MergeSort,TransactionManager,boolean)",1,1,1
"org.apache.derby.impl.store.access.sort.SortScan.close()",1,1,1
"org.apache.derby.impl.store.access.sort.SortScan.fetch(DataValueDescriptor[])",2,3,3
"org.apache.derby.impl.store.access.sort.SortScan.fetchNext(DataValueDescriptor[])",1,2,2
"org.apache.derby.impl.store.access.sort.SortScan.fetchWithoutQualify(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.access.sort.UniqueWithDuplicateNullsExternalSortFactory.getMergeSort()",1,1,1
"org.apache.derby.impl.store.access.sort.UniqueWithDuplicateNullsExternalSortFactory.primaryImplementationType()",1,1,1
"org.apache.derby.impl.store.access.sort.UniqueWithDuplicateNullsExternalSortFactory.supportsImplementation(String)",1,1,1
"org.apache.derby.impl.store.access.sort.UniqueWithDuplicateNullsMergeSort.compare(DataValueDescriptor[],DataValueDescriptor[])",5,3,7
"org.apache.derby.impl.store.raw.RawStore.RawStore()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.backup(String,boolean)",4,5,7
"org.apache.derby.impl.store.raw.RawStore.backup(Transaction,File)",19,31,32
"org.apache.derby.impl.store.raw.RawStore.backupAndEnableLogArchiveMode(String,boolean,boolean)",1,5,5
"org.apache.derby.impl.store.raw.RawStore.boot(boolean,Properties)",1,22,23
"org.apache.derby.impl.store.raw.RawStore.canEncryptDatabase(boolean)",5,5,6
"org.apache.derby.impl.store.raw.RawStore.canSupport(Properties)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.changeBootPassword(Properties,Serializable)",5,5,5
"org.apache.derby.impl.store.raw.RawStore.checkVersion(int,int,String)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.checkpoint()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.configureDatabaseForEncryption(Properties,CipherFactory)",7,15,18
"org.apache.derby.impl.store.raw.RawStore.crashOnDebugFlag(String,boolean)",3,3,4
"org.apache.derby.impl.store.raw.RawStore.createFinished()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.decrypt(byte[],int,int,byte[],int)",2,2,3
"org.apache.derby.impl.store.raw.RawStore.disableLogArchiveMode(boolean)",1,2,2
"org.apache.derby.impl.store.raw.RawStore.encrypt(byte[],int,int,byte[],int,boolean)",3,3,6
"org.apache.derby.impl.store.raw.RawStore.failover(String)",2,3,3
"org.apache.derby.impl.store.raw.RawStore.findUserTransaction(ContextManager,String)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.freeze()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.freezePersistentStore()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getDaemon()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getDataFactoryModule()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getEncryptionBlockSize()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getFilePath(File)",2,2,2
"org.apache.derby.impl.store.raw.RawStore.getFilePath(StorageFile)",2,2,2
"org.apache.derby.impl.store.raw.RawStore.getLockFactory()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getLogFactoryModule()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getMasterFactoryModule()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getMaxContainerId()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getRawStoreProperties(PersistentSet)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getSlaveFactoryModule()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getTransactionFactoryModule()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getTransactionInfo()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getXAResourceManager()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.getXactFactory()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.handleIncompleteDatabaseEncryption(Properties)",8,17,17
"org.apache.derby.impl.store.raw.RawStore.idle()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.isReadOnly()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.logHistory(OutputStreamWriter,String)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.markCorrupt(StandardException)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.openFlushedScan(DatabaseInstant,int)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.privCopyDirectory(File,StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.privCopyDirectory(File,StorageFile,byte[],String[])",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privCopyDirectory(StorageFile,File)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.privCopyDirectory(StorageFile,File,byte[],String[],boolean)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privCopyFile(File,StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privCopyFile(StorageFile,File)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privCopyFile(StorageFile,StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privDelete(File)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privDelete(StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privExists(File)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privExists(StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privFileWriter(StorageFile,boolean)",1,2,2
"org.apache.derby.impl.store.raw.RawStore.privGetCanonicalPath(File)",1,1,3
"org.apache.derby.impl.store.raw.RawStore.privGetCanonicalPath(StorageFile)",1,1,3
"org.apache.derby.impl.store.raw.RawStore.privIsDirectory(File)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privList(File)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privList(StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privMkdirs(File)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privRemoveDirectory(File)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.privRenameTo(File,File)",1,1,2
"org.apache.derby.impl.store.raw.RawStore.random()",1,2,2
"org.apache.derby.impl.store.raw.RawStore.restoreRemainingFromBackup(String)",5,6,6
"org.apache.derby.impl.store.raw.RawStore.run()",19,19,19
"org.apache.derby.impl.store.raw.RawStore.setupEncryptionEngines(boolean,Properties)",5,15,20
"org.apache.derby.impl.store.raw.RawStore.startGlobalTransaction(ContextManager,int,byte[],byte[])",1,1,1
"org.apache.derby.impl.store.raw.RawStore.startInternalTransaction(ContextManager)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.startNestedReadOnlyUserTransaction(CompatibilitySpace,ContextManager,String)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.startNestedUpdateUserTransaction(ContextManager,String)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.startReplicationMaster(String,String,int,String)",3,3,3
"org.apache.derby.impl.store.raw.RawStore.startTransaction(ContextManager,String)",1,1,1
"org.apache.derby.impl.store.raw.RawStore.stop()",2,7,8
"org.apache.derby.impl.store.raw.RawStore.stopReplicationMaster()",2,3,3
"org.apache.derby.impl.store.raw.RawStore.unfreeze()",1,1,1
"org.apache.derby.impl.store.raw.RawStore.unfreezePersistentStore()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.AllocExtent()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.AllocExtent(AllocExtent)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.AllocExtent(long,long,int,int,int)",1,4,6
"org.apache.derby.impl.store.raw.data.AllocExtent.MAX_RANGE(int)",2,1,2
"org.apache.derby.impl.store.raw.data.AllocExtent.allocPage(long)",1,7,9
"org.apache.derby.impl.store.raw.data.AllocExtent.canAddFreePage(long)",4,2,4
"org.apache.derby.impl.store.raw.data.AllocExtent.checkInRange(long)",1,3,4
"org.apache.derby.impl.store.raw.data.AllocExtent.compress(BaseContainerHandle,RawTransaction,AllocPage)",4,8,9
"org.apache.derby.impl.store.raw.data.AllocExtent.compressPages(int,int)",1,7,7
"org.apache.derby.impl.store.raw.data.AllocExtent.deallocPage(long)",1,3,3
"org.apache.derby.impl.store.raw.data.AllocExtent.getAllocatedPageCount()",2,3,8
"org.apache.derby.impl.store.raw.data.AllocExtent.getExtentEnd()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.getFirstPagenum()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.getFreePageNumber(long)",3,8,8
"org.apache.derby.impl.store.raw.data.AllocExtent.getLastPagenum()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.getLastPreallocPagenum()",1,1,2
"org.apache.derby.impl.store.raw.data.AllocExtent.getLastValidPageNumber()",3,2,4
"org.apache.derby.impl.store.raw.data.AllocExtent.getNextValidPageNumber(long)",3,2,5
"org.apache.derby.impl.store.raw.data.AllocExtent.getPageOffset(long,int,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.getPageStatus(long)",1,2,3
"org.apache.derby.impl.store.raw.data.AllocExtent.getPagenum(int)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.getTotalPageCount()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.getUnfilledPageCount()",1,5,6
"org.apache.derby.impl.store.raw.data.AllocExtent.getUnfilledPageNumber(long)",5,3,5
"org.apache.derby.impl.store.raw.data.AllocExtent.isRetired()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.mayHaveFreePage()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocExtent.readExternal(ObjectInput)",1,3,3
"org.apache.derby.impl.store.raw.data.AllocExtent.setExtentFreePageStatus(boolean)",1,1,2
"org.apache.derby.impl.store.raw.data.AllocExtent.setLastPreallocPagenum(long)",1,2,3
"org.apache.derby.impl.store.raw.data.AllocExtent.toDebugString()",3,5,6
"org.apache.derby.impl.store.raw.data.AllocExtent.trackUnfilledPage(long,boolean)",2,3,3
"org.apache.derby.impl.store.raw.data.AllocExtent.undoCompressPages(int,int)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocExtent.updateUnfilledPageInfo(AllocExtent)",1,3,4
"org.apache.derby.impl.store.raw.data.AllocExtent.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.AllocPage()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.ReadContainerInfo(byte[],byte[])",1,5,5
"org.apache.derby.impl.store.raw.data.AllocPage.WriteContainerInfo(byte[],byte[],boolean)",3,10,12
"org.apache.derby.impl.store.raw.data.AllocPage.addPage(FileContainer,long,RawTransaction,BaseContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.canAddFreePage(long)",3,4,6
"org.apache.derby.impl.store.raw.data.AllocPage.chainNewAllocPage(BaseContainerHandle,long,long)",1,3,3
"org.apache.derby.impl.store.raw.data.AllocPage.chainNextAllocPage(LogInstant,long,long)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.compress(RawTransaction,FileContainer)",1,3,4
"org.apache.derby.impl.store.raw.data.AllocPage.compressSpace(LogInstant,int,int)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.createExtent(long,int,int,int)",1,3,4
"org.apache.derby.impl.store.raw.data.AllocPage.createPage(PageKey,PageCreationArgs)",1,5,5
"org.apache.derby.impl.store.raw.data.AllocPage.deallocatePage(BaseContainerHandle,long)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.getAllocExtent()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.getLastPagenum()",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.getLastPreallocPagenum()",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.getMaxFreeSpace()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.getMaxPagenum()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.getNextAllocPageNumber()",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.getNextAllocPageOffset()",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.getPageStatus(long)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.initFromData(FileContainer,PageKey)",3,6,6
"org.apache.derby.impl.store.raw.data.AllocPage.isLast()",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.nextFreePageNumber(long)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.preAllocatePage(FileContainer,int,int)",3,4,6
"org.apache.derby.impl.store.raw.data.AllocPage.readAllocPageHeader()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.readExtent(int)",1,3,3
"org.apache.derby.impl.store.raw.data.AllocPage.setPageStatus(LogInstant,long,int)",2,3,5
"org.apache.derby.impl.store.raw.data.AllocPage.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.undoCompressSpace(LogInstant,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.updateAllocPageHeader()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.updateUnfilledPageInfo(AllocExtent)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPage.writeExtent(int)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPage.writePage(PageKey)",1,5,5
"org.apache.derby.impl.store.raw.data.AllocPageOperation.AllocPageOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPageOperation.AllocPageOperation(AllocPage,long,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPageOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPageOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPageOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocPageOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPageOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.AllocPageOperation.undoMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocPageOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.AllocationCache.AllocationCache()",1,1,1
"org.apache.derby.impl.store.raw.data.AllocationCache.dumpAllocationCache()",1,5,6
"org.apache.derby.impl.store.raw.data.AllocationCache.getAllPageCounts(BaseContainerHandle,long)",1,5,5
"org.apache.derby.impl.store.raw.data.AllocationCache.getAllocPageNumber(BaseContainerHandle,long,long)",6,2,8
"org.apache.derby.impl.store.raw.data.AllocationCache.getEstimatedPageCount(BaseContainerHandle,long)",1,4,4
"org.apache.derby.impl.store.raw.data.AllocationCache.getLastPageNumber(BaseContainerHandle,long)",1,2,2
"org.apache.derby.impl.store.raw.data.AllocationCache.getLastValidPage(BaseContainerHandle,long)",4,3,5
"org.apache.derby.impl.store.raw.data.AllocationCache.getNextValidPage(BaseContainerHandle,long,long)",7,4,9
"org.apache.derby.impl.store.raw.data.AllocationCache.getPageStatus(BaseContainerHandle,long,long)",6,9,16
"org.apache.derby.impl.store.raw.data.AllocationCache.getUnfilledPageNumber(BaseContainerHandle,long,long)",7,8,8
"org.apache.derby.impl.store.raw.data.AllocationCache.growArrays(int)",2,3,7
"org.apache.derby.impl.store.raw.data.AllocationCache.invalidate()",1,3,4
"org.apache.derby.impl.store.raw.data.AllocationCache.invalidate(AllocPage,long)",5,7,11
"org.apache.derby.impl.store.raw.data.AllocationCache.invalidateLastExtent()",1,3,4
"org.apache.derby.impl.store.raw.data.AllocationCache.reset()",1,1,3
"org.apache.derby.impl.store.raw.data.AllocationCache.setArrays(int,AllocPage)",1,3,3
"org.apache.derby.impl.store.raw.data.AllocationCache.trackUnfilledPage(long,boolean)",4,5,9
"org.apache.derby.impl.store.raw.data.AllocationCache.validate(BaseContainerHandle,long)",1,15,15
"org.apache.derby.impl.store.raw.data.BaseContainer.BaseContainer()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.addPage(BaseContainerHandle,boolean)",3,7,9
"org.apache.derby.impl.store.raw.data.BaseContainer.clearIdentity()",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainer.compressContainer(BaseContainerHandle)",2,3,5
"org.apache.derby.impl.store.raw.data.BaseContainer.fillInIdentity(ContainerKey)",1,2,3
"org.apache.derby.impl.store.raw.data.BaseContainer.getAllocPage(BaseContainerHandle,long,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.getAnyPage(BaseContainerHandle,long,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.getCommittedDropState()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.getContainerId()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.getContainerStatus()",3,1,3
"org.apache.derby.impl.store.raw.data.BaseContainer.getDeallocLock(BaseContainerHandle,RecordHandle,boolean,boolean)",3,3,3
"org.apache.derby.impl.store.raw.data.BaseContainer.getDroppedState()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.getFirstPage(BaseContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.getIdentity()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.getNextPage(BaseContainerHandle,long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.getSegmentId()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.isReusableRecordId()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.latchPage(BaseContainerHandle,BasePage,boolean)",4,5,6
"org.apache.derby.impl.store.raw.data.BaseContainer.letGo(BaseContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.lockAttributes(int,Hashtable)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.lockEvent(Latch)",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainer.lockerAlwaysCompatible()",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainer.removePage(BaseContainerHandle,BasePage)",2,4,4
"org.apache.derby.impl.store.raw.data.BaseContainer.requestCompatible(Object,Object)",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainer.setCommittedDropState(boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.setDroppedState(boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.setReusableRecordIdState(boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainer.truncate(BaseContainerHandle)",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainer.unlockEvent(Latch)",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainer.use(BaseContainerHandle,boolean,boolean)",3,5,6
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.BaseContainerHandle(UUID,RawTransaction,ContainerKey,LockingPolicy,int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.BaseContainerHandle(UUID,RawTransaction,PageActions,AllocationActions,LockingPolicy,BaseContainer,int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.addPage()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.addPage(int)",1,2,4
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.backupContainer(String)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkOpen()",2,2,2
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.checkUpdateOpen()",3,3,3
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.close()",2,2,3
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.compactRecord(RecordHandle)",2,3,3
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.compressContainer()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.dropContainer(LogInstant,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.encryptContainer(String)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.flushContainer()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getActionSet()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAllocPage(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAllocationActionSet()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getAnyPage(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getContainerProperties(Properties)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getContainerStatus()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getContainerVersion()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getEstimatedPageCount(int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getEstimatedRowCount(int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getFirstPage()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getId()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getLockingPolicy()",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getMode()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getNextPage(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPage(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPageForCompress(int,long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPageForInsert(int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getPageNoWait(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getReusableRecordIdSequenceNumber()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getSpaceInfo()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getTransaction()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getUniqueId()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getUserPageNoWait(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.getUserPageWait(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.informObservers()",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.isReadOnly()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.isTemporaryContainer()",1,2,2
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.logCreateContainerInfo()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.makeRecordHandle(long,int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.preAllocate(int)",1,2,4
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.preDirty(boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.reCreatePageForRedoRecovery(int,long,long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.removeContainer(LogInstant)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.removePage(Page)",3,5,5
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.setEstimatedRowCount(long,int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.setLockingPolicy(LockingPolicy)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.update(Observable,Object)",6,11,13
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.updateOK()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseContainerHandle.useContainer(boolean,boolean)",5,12,13
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.BaseDataFileFactory()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addAndLoadStreamContainer(RawTransaction,long,Properties,RowSource)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.addContainer(RawTransaction,long,long,int,Properties,int)",3,12,14
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.backupDataFiles(Transaction,File)",3,5,6
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.boot(boolean,Properties)",3,15,17
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.bootLogFactory(boolean,Properties)",1,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.canSupport(Properties)",4,1,4
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.checkpoint()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.createFinished()",2,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.databaseEncrypted()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.decrypt(byte[],int,int,byte[],int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropContainer(RawTransaction,ContainerKey)",5,12,12
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.dropStreamContainer(RawTransaction,long,long)",2,3,4
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.encrypt(byte[],int,int,byte[],int,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.encryptAllContainers(RawTransaction)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.fileToRemove(StorageFile,boolean)",1,2,4
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.findMaxContainerId()",1,1,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.flush(LogInstant)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.freezePersistentStore()",3,6,7
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getAlternateContainerPath(ContainerKey,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getContainerCache()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getContainerNames()",1,1,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getContainerPath(ContainerKey,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getContainerPath(ContainerKey,boolean,int)",1,1,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getEncryptionBlockSize()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getFileHandler()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getIdentifier()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getIntParameter(String,Properties,int,int,int)",3,4,7
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getJBMSLockOnDB(UUID,UUIDFactory,String)",3,4,6
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getLogFactory()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getLoggableAllocationActions()",1,1,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getLoggablePageActions()",1,1,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getMaxContainerId()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getNextId()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getPageCache()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getRawStoreFactory()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getRootDirectory()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getStorageFactory()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getTempDirectory()",1,1,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.getVersionedName(String,long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.handleServiceType(String)",1,2,3
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.idle()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.isReadOnly()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.logMsg(String)",1,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.markCorrupt(StandardException)",1,5,5
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.newCacheable(CacheManager)",2,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.newContainerObject()",2,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.newRAFContainer(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(RawTransaction,ContainerKey,LockingPolicy,int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openContainer(RawTransaction,ContainerKey,LockingPolicy,int,boolean)",5,14,21
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openDroppedContainer(RawTransaction,ContainerKey,LockingPolicy,int)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.openStreamContainer(RawTransaction,long,long,boolean)",3,1,3
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.pageToDirty(RawTransaction,StoredPage)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.postRecovery()",2,2,4
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.privGetJBMSLockOnDB()",7,14,19
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.privReleaseJBMSLockOnDB()",1,4,4
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.privRestoreDataDirectory()",10,11,11
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.random()",1,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.reCreateContainerForRedoRecovery(RawTransaction,long,long,ByteArray)",1,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.reclaimSpace(Serviceable,ContextManager)",2,3,4
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.releaseJBMSLockOnDB()",2,1,3
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.removeDroppedContainerFileStubs(LogInstant)",1,6,7
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.removeOldVersionOfContainers(boolean)",1,1,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.removeStubs()",1,1,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.removeStubsOK()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.removeTempDirectory()",1,2,3
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.restoreDataDirectory(String)",6,7,8
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.run()",9,30,40
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.setDatabaseEncrypted()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.setRawStoreFactory(RawStoreFactory,boolean,Properties)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.setupCacheCleaner(DaemonService)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stop()",2,8,10
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.stubFileToRemoveAfterCheckPoint(StorageFile,LogInstant,Object)",1,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.syncSideLog(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.unfreezePersistentStore()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.writeFinished()",1,2,2
"org.apache.derby.impl.store.raw.data.BaseDataFileFactory.writeInProgress()",2,3,3
"org.apache.derby.impl.store.raw.data.BaseDataFileFactoryJ4.BaseDataFileFactoryJ4()",1,1,1
"org.apache.derby.impl.store.raw.data.BaseDataFileFactoryJ4.newRAFContainer(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.BasePage()",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.MakeRecordHandle(PageKey,int)",2,2,2
"org.apache.derby.impl.store.raw.data.BasePage.bumpPageVersion()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.bumpRecordCount(int)",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.checkSlotOnPage(int)",2,2,4
"org.apache.derby.impl.store.raw.data.BasePage.cleanPageForReuse()",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.clearIdentity()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.clearLastLogInstant()",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.compactRecord(RecordHandle)",5,7,7
"org.apache.derby.impl.store.raw.data.BasePage.copyAndPurge(Page,int,int,int)",5,8,9
"org.apache.derby.impl.store.raw.data.BasePage.copyInto(BasePage,int,int,int)",2,4,5
"org.apache.derby.impl.store.raw.data.BasePage.deallocatePage()",2,3,3
"org.apache.derby.impl.store.raw.data.BasePage.deleteAtSlot(int,boolean,LogicalUndo)",5,7,7
"org.apache.derby.impl.store.raw.data.BasePage.fetchFieldFromSlot(int,int,Object)",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.fetchFromSlot(RecordHandle,int,Object[],FetchDescriptor,boolean)",2,5,7
"org.apache.derby.impl.store.raw.data.BasePage.fetchNumFields(RecordHandle)",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.fetchNumFieldsAtSlot(int)",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.fillInIdentity(PageKey)",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.findNextRecordById(int)",3,3,4
"org.apache.derby.impl.store.raw.data.BasePage.findRecordById(int,int)",4,6,8
"org.apache.derby.impl.store.raw.data.BasePage.getAuxObject()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.getHeaderAtSlot(int)",2,3,3
"org.apache.derby.impl.store.raw.data.BasePage.getIdentity()",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.getInvalidRecordHandle()",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.getLastLogInstant()",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.getNextSlotNumber(RecordHandle)",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.getPageId()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.getPageNumber()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.getPageStatus()",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.getPageVersion()",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.getProtectionRecordHandle()",1,3,3
"org.apache.derby.impl.store.raw.data.BasePage.getRecordHandle(int)",2,2,3
"org.apache.derby.impl.store.raw.data.BasePage.getRecordHandleAtSlot(int)",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.getSlotNumber(RecordHandle)",2,3,3
"org.apache.derby.impl.store.raw.data.BasePage.initPage(int,long)",2,3,3
"org.apache.derby.impl.store.raw.data.BasePage.initialize()",1,5,5
"org.apache.derby.impl.store.raw.data.BasePage.initializeHeaders(int)",1,3,3
"org.apache.derby.impl.store.raw.data.BasePage.insert(Object[],FormatableBitSet,byte,int)",2,4,4
"org.apache.derby.impl.store.raw.data.BasePage.insertAllowOverflow(int,Object[],FormatableBitSet,int,byte,int,RecordHandle)",6,14,17
"org.apache.derby.impl.store.raw.data.BasePage.insertAtSlot(int,Object[],FormatableBitSet,LogicalUndo,byte,int)",2,6,6
"org.apache.derby.impl.store.raw.data.BasePage.insertLongColumn(BasePage,LongColumnException,byte)",1,5,7
"org.apache.derby.impl.store.raw.data.BasePage.insertNoOverflow(int,Object[],FormatableBitSet,LogicalUndo,byte,int)",4,6,8
"org.apache.derby.impl.store.raw.data.BasePage.internalNonDeletedRecordCount()",3,6,9
"org.apache.derby.impl.store.raw.data.BasePage.isDeletedAtSlot(int)",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.isDeletedOnPage(int)",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.isLatched()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.makeRecordHandle(int)",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.nonDeletedRecordCount()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.preLatch(BaseContainerHandle)",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.purgeAtSlot(int,int,boolean)",6,7,10
"org.apache.derby.impl.store.raw.data.BasePage.recordCount()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.recordExists(RecordHandle,boolean)",3,5,6
"org.apache.derby.impl.store.raw.data.BasePage.releaseExclusive()",2,3,4
"org.apache.derby.impl.store.raw.data.BasePage.removeAndShiftDown(int)",1,2,3
"org.apache.derby.impl.store.raw.data.BasePage.setAuxObject(AuxObject)",1,4,4
"org.apache.derby.impl.store.raw.data.BasePage.setDeleteStatus(int,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.setExclusive(BaseContainerHandle)",4,8,10
"org.apache.derby.impl.store.raw.data.BasePage.setExclusiveNoWait(BaseContainerHandle)",4,6,8
"org.apache.derby.impl.store.raw.data.BasePage.setHeaderAtSlot(int,StoredRecordHeader)",1,2,3
"org.apache.derby.impl.store.raw.data.BasePage.setPageStatus(byte)",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.setPageVersion(long)",1,1,1
"org.apache.derby.impl.store.raw.data.BasePage.shiftUp(int)",1,4,5
"org.apache.derby.impl.store.raw.data.BasePage.shouldReclaimSpace(int,int)",1,3,4
"org.apache.derby.impl.store.raw.data.BasePage.slotTableToString()",1,4,4
"org.apache.derby.impl.store.raw.data.BasePage.unlatch()",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.update(Observable,Object)",1,2,2
"org.apache.derby.impl.store.raw.data.BasePage.updateAtSlot(int,Object[],FormatableBitSet)",3,4,4
"org.apache.derby.impl.store.raw.data.BasePage.updateFieldAtSlot(int,int,Object,LogicalUndo)",3,4,4
"org.apache.derby.impl.store.raw.data.BasePage.updateLastLogInstant(LogInstant)",1,2,3
"org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.BufferedByteHolderInputStream(ByteHolder)",1,1,1
"org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.available()",1,1,1
"org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read()",1,1,1
"org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.read(byte[],int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.BufferedByteHolderInputStream.skip(long)",3,2,3
"org.apache.derby.impl.store.raw.data.ByteHolderInputStream.ByteHolderInputStream(ByteHolder)",1,1,1
"org.apache.derby.impl.store.raw.data.ByteHolderInputStream.available()",1,1,1
"org.apache.derby.impl.store.raw.data.ByteHolderInputStream.getByteHolder()",1,1,1
"org.apache.derby.impl.store.raw.data.ByteHolderInputStream.read()",1,1,1
"org.apache.derby.impl.store.raw.data.ByteHolderInputStream.read(byte[],int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.ByteHolderInputStream.setByteHolder(ByteHolder)",1,1,1
"org.apache.derby.impl.store.raw.data.ByteHolderInputStream.skip(long)",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.CachedPage()",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.changeInstanceTo(int,PageKey)",2,4,4
"org.apache.derby.impl.store.raw.data.CachedPage.clean(boolean)",6,7,10
"org.apache.derby.impl.store.raw.data.CachedPage.clearIdentity()",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.createIdentity(Object,Object)",3,7,10
"org.apache.derby.impl.store.raw.data.CachedPage.getPageArray()",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.initialize()",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.isActuallyDirty()",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.isDirty()",1,1,2
"org.apache.derby.impl.store.raw.data.CachedPage.preDirty()",1,1,2
"org.apache.derby.impl.store.raw.data.CachedPage.readPage(FileContainer,PageKey)",5,6,6
"org.apache.derby.impl.store.raw.data.CachedPage.releaseExclusive()",1,7,9
"org.apache.derby.impl.store.raw.data.CachedPage.setContainerRowCount(long)",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.setDirty()",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.setFactory(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.CachedPage.setIdentity(Object)",2,4,4
"org.apache.derby.impl.store.raw.data.CachedPage.setPageArray(int)",1,1,3
"org.apache.derby.impl.store.raw.data.CachedPage.writePage(PageKey,boolean)",2,7,7
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.ChainAllocPageOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.ChainAllocPageOperation(AllocPage,long,long)",1,1,1
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.undoMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.ChainAllocPageOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.CompressSpacePageOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.CompressSpacePageOperation(AllocPage,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.readExternal(ObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.undoMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2.CompressSpacePageOperation10_2()",1,1,1
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2.CompressSpacePageOperation10_2(AllocPage,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.CompressSpacePageOperation10_2.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerActionOnCommit.ContainerActionOnCommit(ContainerKey)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerActionOnCommit.equals(Object)",3,2,3
"org.apache.derby.impl.store.raw.data.ContainerActionOnCommit.hashCode()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.ContainerBasicOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.ContainerBasicOperation(RawContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.findContainer(Transaction)",2,8,8
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.findContainerForRedoRecovery(RawTransaction)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.needsRedo(Transaction)",3,3,4
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.releaseResource(Transaction)",2,2,3
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.toString()",2,1,2
"org.apache.derby.impl.store.raw.data.ContainerBasicOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.ContainerHandleActionOnCommit(ContainerKey)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerHandleActionOnCommit.openContainerAndDoIt(RawTransaction)",1,6,6
"org.apache.derby.impl.store.raw.data.ContainerOperation.ContainerOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerOperation.ContainerOperation(RawContainerHandle,byte)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerOperation.doMe(Transaction,LogInstant,LimitObjectInput)",2,2,4
"org.apache.derby.impl.store.raw.data.ContainerOperation.findContainerForRedoRecovery(RawTransaction)",1,2,2
"org.apache.derby.impl.store.raw.data.ContainerOperation.generateUndo(Transaction,LimitObjectInput)",2,2,2
"org.apache.derby.impl.store.raw.data.ContainerOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerOperation.readExternal(ObjectInput)",1,2,3
"org.apache.derby.impl.store.raw.data.ContainerOperation.toString()",3,3,5
"org.apache.derby.impl.store.raw.data.ContainerOperation.undoMe(Transaction,RawContainerHandle,LogInstant,LimitObjectInput)",2,4,6
"org.apache.derby.impl.store.raw.data.ContainerOperation.writeExternal(ObjectOutput)",2,3,3
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.ContainerUndoOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.ContainerUndoOperation(RawContainerHandle,ContainerOperation)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.releaseResource(Transaction)",1,2,2
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.setUndoOp(Undoable)",1,2,2
"org.apache.derby.impl.store.raw.data.ContainerUndoOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.CopyRowsOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.CopyRowsOperation(RawTransaction,BasePage,BasePage,int,int,int,int[])",1,3,3
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,3,3
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.readExternal(ObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.toString()",2,2,3
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.undoMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.store.raw.data.CopyRowsOperation.writeOptionalDataToBuffer(RawTransaction,BasePage,int)",2,7,7
"org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag()",1,1,2
"org.apache.derby.impl.store.raw.data.D_BaseContainerHandle.diag_detail(Properties)",1,1,1
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.D_DiagnosticUtil()",1,1,1
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.diag_conglomid(String,long)",1,2,2
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.diag_conglomid_print(String,long)",1,2,2
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.diag_conglomid_to_containerid(Object,long)",1,3,3
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.diag_conglomid_to_containerid(String,long)",1,1,1
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.diag_containerid_to_conglomid(Object,long)",1,3,3
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.diag_containerid_to_conglomid(String,long)",1,1,1
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.diag_dump_page(String,long,long,long)",1,4,5
"org.apache.derby.impl.store.raw.data.D_DiagnosticUtil.getModuleFromDbName(String)",1,2,2
"org.apache.derby.impl.store.raw.data.D_RecordId.diag()",1,2,2
"org.apache.derby.impl.store.raw.data.D_RecordId.diag_detail(Properties)",1,1,1
"org.apache.derby.impl.store.raw.data.D_StoredPage.D_StoredPage()",1,1,1
"org.apache.derby.impl.store.raw.data.D_StoredPage.checkSlotTable(PrintStream)",1,4,4
"org.apache.derby.impl.store.raw.data.D_StoredPage.diag()",1,1,1
"org.apache.derby.impl.store.raw.data.D_StoredPage.diag_detail(Properties)",1,17,18
"org.apache.derby.impl.store.raw.data.D_StoredPage.init(Object)",1,2,2
"org.apache.derby.impl.store.raw.data.D_StoredPage.pageHeaderToString()",1,1,1
"org.apache.derby.impl.store.raw.data.DecryptInputStream.DecryptInputStream(InputStream,ByteHolder,DataFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.DecryptInputStream.fillByteHolder()",3,3,5
"org.apache.derby.impl.store.raw.data.DeleteOperation.DeleteOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.DeleteOperation.DeleteOperation(RawTransaction,BasePage,int,int,boolean,LogicalUndo)",1,2,2
"org.apache.derby.impl.store.raw.data.DeleteOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.DeleteOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.DeleteOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.DeleteOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.DeleteOperation.restoreLoggedRow(Object[],LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.DeleteOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,4,4
"org.apache.derby.impl.store.raw.data.DeleteOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.DeleteOperation.undoMe(Transaction,BasePage,int,LogInstant,LimitObjectInput)",1,5,5
"org.apache.derby.impl.store.raw.data.DeleteOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.DeleteOperation.writeOptionalDataToBuffer(RawTransaction)",1,6,6
"org.apache.derby.impl.store.raw.data.DirectActions.DirectActions()",1,1,1
"org.apache.derby.impl.store.raw.data.DirectActions.actionCopyRows(RawTransaction,BasePage,BasePage,int,int,int,int[])",2,5,5
"org.apache.derby.impl.store.raw.data.DirectActions.actionDelete(RawTransaction,BasePage,int,int,boolean,LogicalUndo)",1,2,2
"org.apache.derby.impl.store.raw.data.DirectActions.actionInitPage(RawTransaction,BasePage,int,int,long)",1,3,3
"org.apache.derby.impl.store.raw.data.DirectActions.actionInsert(RawTransaction,BasePage,int,int,Object[],FormatableBitSet,LogicalUndo,byte,int,boolean,int,DynamicByteArrayOutputStream,int,int)",1,4,4
"org.apache.derby.impl.store.raw.data.DirectActions.actionInvalidatePage(RawTransaction,BasePage)",1,1,1
"org.apache.derby.impl.store.raw.data.DirectActions.actionPurge(RawTransaction,BasePage,int,int,int[],boolean)",1,3,3
"org.apache.derby.impl.store.raw.data.DirectActions.actionShrinkReservedSpace(RawTransaction,BasePage,int,int,int,int)",1,2,2
"org.apache.derby.impl.store.raw.data.DirectActions.actionUpdate(RawTransaction,BasePage,int,int,Object[],FormatableBitSet,int,DynamicByteArrayOutputStream,int,RecordHandle)",1,3,3
"org.apache.derby.impl.store.raw.data.DirectActions.actionUpdateField(RawTransaction,BasePage,int,int,int,Object,LogicalUndo)",1,2,2
"org.apache.derby.impl.store.raw.data.DirectAllocActions.DirectAllocActions()",1,1,1
"org.apache.derby.impl.store.raw.data.DirectAllocActions.actionAllocatePage(RawTransaction,BasePage,long,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.DirectAllocActions.actionChainAllocPage(RawTransaction,BasePage,long,long)",1,1,1
"org.apache.derby.impl.store.raw.data.DirectAllocActions.actionCompressSpaceOperation(RawTransaction,BasePage,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.DropOnCommit.DropOnCommit(ContainerKey)",1,1,1
"org.apache.derby.impl.store.raw.data.DropOnCommit.DropOnCommit(ContainerKey,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.DropOnCommit.update(Observable,Object)",1,7,7
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.EncryptContainerOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.EncryptContainerOperation(RawContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.generateUndo(Transaction,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.needsRedo(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.releaseResource(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.toString()",2,1,2
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.undoMe(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.EncryptContainerUndoOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.EncryptContainerUndoOperation(EncryptContainerOperation)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.needsRedo(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.releaseResource(Transaction)",1,2,2
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.setUndoOp(Undoable)",1,2,2
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.toString()",2,3,3
"org.apache.derby.impl.store.raw.data.EncryptContainerUndoOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptData.EncryptData(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptData.encryptAllContainers(RawTransaction)",3,4,5
"org.apache.derby.impl.store.raw.data.EncryptData.encryptContainer(RawTransaction,ContainerKey)",3,9,9
"org.apache.derby.impl.store.raw.data.EncryptData.getFile(ContainerKey,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptData.getFile(String)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptData.getFilePath(ContainerKey,boolean)",1,1,2
"org.apache.derby.impl.store.raw.data.EncryptData.isOldContainerFile(String)",2,2,3
"org.apache.derby.impl.store.raw.data.EncryptData.privDelete(StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptData.privExists(StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptData.privRename(StorageFile,StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.data.EncryptData.removeOldVersionOfContainers(boolean)",8,8,8
"org.apache.derby.impl.store.raw.data.EncryptData.restoreContainer(ContainerKey)",7,9,9
"org.apache.derby.impl.store.raw.data.EncryptData.run()",4,4,4
"org.apache.derby.impl.store.raw.data.FileContainer.FileContainer(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.bumpContainerVersion(LogInstant)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.canUpdate()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.clearIdentity()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.clearPreallocThreshold()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.compressContainer(RawTransaction,BaseContainerHandle)",2,5,6
"org.apache.derby.impl.store.raw.data.FileContainer.createIdent(ContainerKey,Object)",1,5,8
"org.apache.derby.impl.store.raw.data.FileContainer.createIdentity(Object,Object)",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromLog(ByteArray)",2,5,6
"org.apache.derby.impl.store.raw.data.FileContainer.createInfoFromProp(Properties)",1,6,12
"org.apache.derby.impl.store.raw.data.FileContainer.deallocatePage(BaseContainerHandle,BasePage)",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.deallocatePagenum(BaseContainerHandle,long)",2,5,6
"org.apache.derby.impl.store.raw.data.FileContainer.decryptPage(byte[],int)",1,2,4
"org.apache.derby.impl.store.raw.data.FileContainer.doPreAllocatePages(long,int)",3,4,6
"org.apache.derby.impl.store.raw.data.FileContainer.dropContainer(LogInstant,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.encryptPage(byte[],int,byte[],boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.findAllocPageForAdd(BaseContainerHandle,RawTransaction,long)",4,10,11
"org.apache.derby.impl.store.raw.data.FileContainer.findLastAllocPage(BaseContainerHandle,RawTransaction)",2,4,5
"org.apache.derby.impl.store.raw.data.FileContainer.getAllocPage(long)",2,4,5
"org.apache.derby.impl.store.raw.data.FileContainer.getAnyPage(BaseContainerHandle,long)",2,1,2
"org.apache.derby.impl.store.raw.data.FileContainer.getContainerProperties(Properties)",1,6,6
"org.apache.derby.impl.store.raw.data.FileContainer.getContainerVersion()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getEmbryonicPage(DataInput)",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.getEmbryonicPage(StorageRandomAccessFile,long)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getEncryptionBuffer()",1,1,3
"org.apache.derby.impl.store.raw.data.FileContainer.getEstimatedPageCount(BaseContainerHandle,int)",1,3,3
"org.apache.derby.impl.store.raw.data.FileContainer.getEstimatedRowCount(int)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getFirstHeadPage(BaseContainerHandle,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getHeadPage(BaseContainerHandle,long,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getInsertablePage(BaseContainerHandle,long,boolean,boolean)",2,3,4
"org.apache.derby.impl.store.raw.data.FileContainer.getLastInsertedPage()",2,3,4
"org.apache.derby.impl.store.raw.data.FileContainer.getLastPageNumber(BaseContainerHandle)",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.getLastUnfilledPage()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getLatchedPage(BaseContainerHandle,long)",1,3,3
"org.apache.derby.impl.store.raw.data.FileContainer.getMinimumRecordSize()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getNextHeadPage(BaseContainerHandle,long,boolean)",4,2,4
"org.apache.derby.impl.store.raw.data.FileContainer.getPage(BaseContainerHandle,long,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getPageForCompress(BaseContainerHandle,int,long)",1,11,13
"org.apache.derby.impl.store.raw.data.FileContainer.getPageForInsert(BaseContainerHandle,int)",1,13,13
"org.apache.derby.impl.store.raw.data.FileContainer.getPageSize()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getReusableRecordIdSequenceNumber()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getSpaceInfo(BaseContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getSpareSpace()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getUnfilledPageNumber(BaseContainerHandle,long)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.getUserPage(BaseContainerHandle,long,boolean,boolean)",6,6,11
"org.apache.derby.impl.store.raw.data.FileContainer.incrementReusableRecordIdSequenceNumber()",1,1,2
"org.apache.derby.impl.store.raw.data.FileContainer.initContainerHeader(boolean)",1,3,5
"org.apache.derby.impl.store.raw.data.FileContainer.initPage(BaseContainerHandle,PageKey,PageCreationArgs,long,boolean,boolean)",4,11,15
"org.apache.derby.impl.store.raw.data.FileContainer.initializeLastInsertedPage(int)",1,1,2
"org.apache.derby.impl.store.raw.data.FileContainer.isDirty()",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.latchPage(BaseContainerHandle,BasePage,boolean)",2,2,3
"org.apache.derby.impl.store.raw.data.FileContainer.letGo(BaseContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.logCreateContainerInfo()",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.makeAllocPage(RawTransaction,BaseContainerHandle,long,long,int)",1,6,10
"org.apache.derby.impl.store.raw.data.FileContainer.newPage(BaseContainerHandle,RawTransaction,BaseContainerHandle,boolean)",4,29,41
"org.apache.derby.impl.store.raw.data.FileContainer.pageValid(BaseContainerHandle,long)",1,2,3
"org.apache.derby.impl.store.raw.data.FileContainer.preDirty(boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.prepareForBulkLoad(BaseContainerHandle,int)",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.reCreatePageForRedoRecovery(BaseContainerHandle,int,long,long)",6,10,13
"org.apache.derby.impl.store.raw.data.FileContainer.readHeader(byte[])",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.readHeaderFromArray(byte[])",3,3,5
"org.apache.derby.impl.store.raw.data.FileContainer.setDirty(boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.setEstimatedRowCount(long,int)",1,1,2
"org.apache.derby.impl.store.raw.data.FileContainer.setIdent(ContainerKey)",2,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.setIdentity(Object)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.setLastInsertedPage(long)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.setLastUnfilledPage(long)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.switchToMultiInsertPageMode(BaseContainerHandle)",1,3,3
"org.apache.derby.impl.store.raw.data.FileContainer.trackUnfilledPage(long,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.FileContainer.updateEstimatedRowCount(int)",1,1,3
"org.apache.derby.impl.store.raw.data.FileContainer.writeAtOffset(StorageRandomAccessFile,byte[],long)",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.writeHeader(StorageRandomAccessFile,boolean,byte[])",1,1,2
"org.apache.derby.impl.store.raw.data.FileContainer.writeHeader(byte[])",1,1,1
"org.apache.derby.impl.store.raw.data.FileContainer.writeHeaderToArray(byte[])",1,2,5
"org.apache.derby.impl.store.raw.data.InitPageOperation.InitPageOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.InitPageOperation.InitPageOperation(BasePage,int,int,long)",1,2,2
"org.apache.derby.impl.store.raw.data.InitPageOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InitPageOperation.getPageForRedoRecovery(Transaction)",2,1,2
"org.apache.derby.impl.store.raw.data.InitPageOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.InitPageOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InitPageOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InitPageOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.InitPageOperation.undoMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InitPageOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.InputStreamContainer(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.backupContainer(BaseContainerHandle,String)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.clean(boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.closeContainer()",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.createContainer(ContainerKey)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.encryptContainer(BaseContainerHandle,String)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.flushAll()",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.getInputStream()",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.openContainer(ContainerKey)",1,4,6
"org.apache.derby.impl.store.raw.data.InputStreamContainer.preAllocate(long,int)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.readPage(long,byte[])",1,4,4
"org.apache.derby.impl.store.raw.data.InputStreamContainer.readPositionedPage(long,byte[])",1,2,3
"org.apache.derby.impl.store.raw.data.InputStreamContainer.removeContainer(LogInstant,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.truncatePages(long)",1,1,1
"org.apache.derby.impl.store.raw.data.InputStreamContainer.writePage(long,byte[],boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.InsertOperation.InsertOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.InsertOperation.InsertOperation(RawTransaction,BasePage,int,int,Object[],FormatableBitSet,LogicalUndo,byte,int,boolean,int,DynamicByteArrayOutputStream,int,int)",1,2,2
"org.apache.derby.impl.store.raw.data.InsertOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InsertOperation.getNextStartColumn()",1,1,1
"org.apache.derby.impl.store.raw.data.InsertOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.InsertOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.InsertOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InsertOperation.restoreLoggedRow(Object[],LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.InsertOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,4,4
"org.apache.derby.impl.store.raw.data.InsertOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.InsertOperation.undoMe(Transaction,BasePage,int,LogInstant,LimitObjectInput)",1,9,9
"org.apache.derby.impl.store.raw.data.InsertOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.InsertOperation.writeOptionalDataToBuffer(RawTransaction,DynamicByteArrayOutputStream,Object[],FormatableBitSet,boolean,int,int,int)",1,4,4
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.InvalidatePageOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.InvalidatePageOperation(BasePage)",1,1,1
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.undoMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.InvalidatePageOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionCopyRows(RawTransaction,BasePage,BasePage,int,int,int,int[])",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionDelete(RawTransaction,BasePage,int,int,boolean,LogicalUndo)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionInitPage(RawTransaction,BasePage,int,int,long)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionInsert(RawTransaction,BasePage,int,int,Object[],FormatableBitSet,LogicalUndo,byte,int,boolean,int,DynamicByteArrayOutputStream,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionInvalidatePage(RawTransaction,BasePage)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionPurge(RawTransaction,BasePage,int,int,int[],boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionShrinkReservedSpace(RawTransaction,BasePage,int,int,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdate(RawTransaction,BasePage,int,int,Object[],FormatableBitSet,int,DynamicByteArrayOutputStream,int,RecordHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.actionUpdateField(RawTransaction,BasePage,int,int,int,Object,LogicalUndo)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableActions.doAction(RawTransaction,BasePage,Loggable)",1,6,6
"org.apache.derby.impl.store.raw.data.LoggableAllocActions.actionAllocatePage(RawTransaction,BasePage,long,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableAllocActions.actionChainAllocPage(RawTransaction,BasePage,long,long)",1,1,1
"org.apache.derby.impl.store.raw.data.LoggableAllocActions.actionCompressSpaceOperation(RawTransaction,BasePage,int,int)",1,1,2
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.LogicalPageOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.LogicalPageOperation(BasePage,LogicalUndo,int)",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.findLogicalPage(Transaction,LogicalUndo,LimitObjectInput)",1,6,6
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.generateUndo(Transaction,LimitObjectInput)",2,3,3
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.getContainer()",1,2,2
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.getRecordHandle()",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.reclaimPrepareLocks(Transaction,LockingPolicy)",1,5,5
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.resetRecordHandle(RecordHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalPageOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.LogicalUndoOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.LogicalUndoOperation(BasePage)",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.LogicalUndoOperation(BasePage,int,LogicalPageOperation)",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,6,6
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.releaseResource(Transaction)",1,2,2
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.setUndoOp(Undoable)",1,2,2
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.toString()",2,3,3
"org.apache.derby.impl.store.raw.data.LogicalUndoOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.LongColumnException.LongColumnException()",1,1,1
"org.apache.derby.impl.store.raw.data.LongColumnException.getColumn()",1,1,1
"org.apache.derby.impl.store.raw.data.LongColumnException.getLogBuffer()",1,1,1
"org.apache.derby.impl.store.raw.data.LongColumnException.getNextColumn()",1,1,1
"org.apache.derby.impl.store.raw.data.LongColumnException.getRealSpaceOnPage()",1,1,1
"org.apache.derby.impl.store.raw.data.LongColumnException.setColumn(Object)",1,1,1
"org.apache.derby.impl.store.raw.data.LongColumnException.setExceptionInfo(DynamicByteArrayOutputStream,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.MemByteHolder.MemByteHolder(int)",1,1,1
"org.apache.derby.impl.store.raw.data.MemByteHolder.available()",1,1,2
"org.apache.derby.impl.store.raw.data.MemByteHolder.clear()",1,1,1
"org.apache.derby.impl.store.raw.data.MemByteHolder.dumpBuf(int)",1,2,2
"org.apache.derby.impl.store.raw.data.MemByteHolder.getNextBuffer_r()",2,2,4
"org.apache.derby.impl.store.raw.data.MemByteHolder.getNextBuffer_w()",1,3,3
"org.apache.derby.impl.store.raw.data.MemByteHolder.getNextBuffer_w_Sanity()",1,2,2
"org.apache.derby.impl.store.raw.data.MemByteHolder.initBuffer_w()",1,2,2
"org.apache.derby.impl.store.raw.data.MemByteHolder.numBytesSaved()",1,3,4
"org.apache.derby.impl.store.raw.data.MemByteHolder.read()",2,3,4
"org.apache.derby.impl.store.raw.data.MemByteHolder.read(OutputStream,int)",1,1,1
"org.apache.derby.impl.store.raw.data.MemByteHolder.read(byte[],int,OutputStream,int)",2,6,9
"org.apache.derby.impl.store.raw.data.MemByteHolder.read(byte[],int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.MemByteHolder.shiftToFront()",1,1,2
"org.apache.derby.impl.store.raw.data.MemByteHolder.skip(long)",1,5,7
"org.apache.derby.impl.store.raw.data.MemByteHolder.startReading()",1,1,3
"org.apache.derby.impl.store.raw.data.MemByteHolder.toString()",1,1,1
"org.apache.derby.impl.store.raw.data.MemByteHolder.write(InputStream,long)",1,5,7
"org.apache.derby.impl.store.raw.data.MemByteHolder.write(byte[],int,int)",1,4,5
"org.apache.derby.impl.store.raw.data.MemByteHolder.write(int)",1,3,3
"org.apache.derby.impl.store.raw.data.MemByteHolder.writingMode()",1,1,1
"org.apache.derby.impl.store.raw.data.NoSpaceOnPage.NoSpaceOnPage(boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.NoSpaceOnPage.onOverflowPage()",1,1,1
"org.apache.derby.impl.store.raw.data.OverflowInputStream.OverflowInputStream(ByteHolder,BaseContainerHandle,long,int,RecordHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.OverflowInputStream.closeStream()",1,1,1
"org.apache.derby.impl.store.raw.data.OverflowInputStream.fillByteHolder()",2,5,5
"org.apache.derby.impl.store.raw.data.OverflowInputStream.getOverflowId()",1,1,1
"org.apache.derby.impl.store.raw.data.OverflowInputStream.getOverflowPage()",1,1,1
"org.apache.derby.impl.store.raw.data.OverflowInputStream.initStream()",3,2,3
"org.apache.derby.impl.store.raw.data.OverflowInputStream.resetStream()",1,1,1
"org.apache.derby.impl.store.raw.data.OverflowInputStream.setOverflowId(int)",1,1,1
"org.apache.derby.impl.store.raw.data.OverflowInputStream.setOverflowPage(long)",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.PageBasicOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.PageBasicOperation(BasePage)",1,2,2
"org.apache.derby.impl.store.raw.data.PageBasicOperation.findpage(Transaction)",5,13,17
"org.apache.derby.impl.store.raw.data.PageBasicOperation.getPage()",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.getPageForRedoRecovery(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.getPageId()",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.getPageVersion()",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.needsRedo(Transaction)",4,2,4
"org.apache.derby.impl.store.raw.data.PageBasicOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.reclaimPrepareLocks(Transaction,LockingPolicy)",1,2,2
"org.apache.derby.impl.store.raw.data.PageBasicOperation.releaseResource(Transaction)",2,3,4
"org.apache.derby.impl.store.raw.data.PageBasicOperation.resetPageNumber(long)",1,1,1
"org.apache.derby.impl.store.raw.data.PageBasicOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.PageBasicOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.PageCreationArgs.PageCreationArgs(int,int,int,int,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.PageVersion.PageVersion(long,long)",1,1,1
"org.apache.derby.impl.store.raw.data.PageVersion.getPageNumber()",1,1,1
"org.apache.derby.impl.store.raw.data.PageVersion.getPageVersion()",1,1,1
"org.apache.derby.impl.store.raw.data.PageVersion.setPageNumber(long)",1,1,1
"org.apache.derby.impl.store.raw.data.PageVersion.setPageVersion(long)",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalPageOperation.PhysicalPageOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalPageOperation.PhysicalPageOperation(BasePage)",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalPageOperation.generateUndo(Transaction,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.PhysicalUndoOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.PhysicalUndoOperation(BasePage)",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.PhysicalUndoOperation(BasePage,PhysicalPageOperation)",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,8,8
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.releaseResource(Transaction)",1,2,2
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.setUndoOp(Undoable)",1,2,2
"org.apache.derby.impl.store.raw.data.PhysicalUndoOperation.toString()",2,3,3
"org.apache.derby.impl.store.raw.data.PurgeOperation.PurgeOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.PurgeOperation.PurgeOperation(RawTransaction,BasePage,int,int,int[],boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.PurgeOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.PurgeOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.PurgeOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.PurgeOperation.readExternal(ObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.PurgeOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.PurgeOperation.toString()",2,2,3
"org.apache.derby.impl.store.raw.data.PurgeOperation.undoMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.PurgeOperation.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.store.raw.data.PurgeOperation.writeOptionalDataToBuffer(RawTransaction,boolean)",1,7,7
"org.apache.derby.impl.store.raw.data.RAFContainer.RAFContainer(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.RAFContainer.backupContainer(BaseContainerHandle,String)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.clean(boolean)",7,9,9
"org.apache.derby.impl.store.raw.data.RAFContainer.clearDirty()",1,1,1
"org.apache.derby.impl.store.raw.data.RAFContainer.closeContainer()",1,2,3
"org.apache.derby.impl.store.raw.data.RAFContainer.createContainer(ContainerKey)",1,4,5
"org.apache.derby.impl.store.raw.data.RAFContainer.createIdentity(Object,Object)",2,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.encryptContainer(BaseContainerHandle,String)",2,6,6
"org.apache.derby.impl.store.raw.data.RAFContainer.flushAll()",1,1,1
"org.apache.derby.impl.store.raw.data.RAFContainer.getFileName(ContainerKey,boolean,boolean,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.isDirty()",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.openContainer(ContainerKey)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.padFile(StorageRandomAccessFile,long)",2,2,4
"org.apache.derby.impl.store.raw.data.RAFContainer.preAllocate(long,int)",1,4,6
"org.apache.derby.impl.store.raw.data.RAFContainer.privBackupContainer(BaseContainerHandle,String)",12,15,20
"org.apache.derby.impl.store.raw.data.RAFContainer.privGetFileName(ContainerKey,boolean,boolean,boolean)",6,8,8
"org.apache.derby.impl.store.raw.data.RAFContainer.privGetRandomAccessFile(StorageFile)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.privRemoveFile(StorageFile)",2,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.readPage(long,byte[])",1,4,4
"org.apache.derby.impl.store.raw.data.RAFContainer.removeContainer(LogInstant,boolean)",2,3,3
"org.apache.derby.impl.store.raw.data.RAFContainer.removeFile(StorageFile)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.run()",15,33,40
"org.apache.derby.impl.store.raw.data.RAFContainer.setIdentity(Object)",2,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.stubbify(LogInstant)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer.truncatePages(long)",1,2,4
"org.apache.derby.impl.store.raw.data.RAFContainer.updatePageArray(long,byte[],byte[],boolean)",3,6,6
"org.apache.derby.impl.store.raw.data.RAFContainer.writePage(long,byte[],boolean)",3,8,10
"org.apache.derby.impl.store.raw.data.RAFContainer.writeRAFHeader(StorageRandomAccessFile,boolean,boolean)",1,5,5
"org.apache.derby.impl.store.raw.data.RAFContainer4.RAFContainer4(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.RAFContainer4.closeContainer()",1,4,5
"org.apache.derby.impl.store.raw.data.RAFContainer4.createContainer(ContainerKey)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.getChannel()",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.getChannel(StorageRandomAccessFile)",2,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.getEmbryonicPage(StorageRandomAccessFile,long)",2,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.openContainer(ContainerKey)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.readFull(ByteBuffer,FileChannel,long)",3,2,3
"org.apache.derby.impl.store.raw.data.RAFContainer4.readPage(long,byte[])",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.readPage0(long,byte[])",1,5,7
"org.apache.derby.impl.store.raw.data.RAFContainer4.writeAtOffset(StorageRandomAccessFile,byte[],long)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.writeFull(ByteBuffer,FileChannel,long)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.writePage(long,byte[],boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.RAFContainer4.writePage0(long,byte[],boolean)",4,8,14
"org.apache.derby.impl.store.raw.data.RFResource.RFResource(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.RFResource.add(String,InputStream)",5,9,11
"org.apache.derby.impl.store.raw.data.RFResource.getAsFile(String,long)",1,1,1
"org.apache.derby.impl.store.raw.data.RFResource.getSeparatorChar()",1,1,1
"org.apache.derby.impl.store.raw.data.RFResource.remove(String,long)",2,2,2
"org.apache.derby.impl.store.raw.data.RFResource.replace(String,long,InputStream)",2,2,2
"org.apache.derby.impl.store.raw.data.RawField.RawField(byte[])",1,1,1
"org.apache.derby.impl.store.raw.data.RawField.getData()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.ReclaimSpace(int,ContainerKey,DataFactory,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.ReclaimSpace.ReclaimSpace(int,PageKey,DataFactory,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.ReclaimSpace.ReclaimSpace(int,RecordHandle,DataFactory,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.ReclaimSpace.ReclaimSpace(int,RecordHandle,int,long,int,PageTimeStamp,DataFactory,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.ReclaimSpace.getColumnId()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.getColumnPageId()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.getColumnRecordId()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.getContainerId()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.getHeadRowHandle()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.getPageId()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.getPageTimeStamp()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.incrAttempts()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.initContainerInfo(ContainerKey,int,DataFactory,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.performWork(ContextManager)",1,2,2
"org.apache.derby.impl.store.raw.data.ReclaimSpace.reclaimWhat()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.serviceASAP()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.serviceImmediately()",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpace.toString()",6,1,6
"org.apache.derby.impl.store.raw.data.ReclaimSpaceHelper.openContainerNW(Transaction,LockingPolicy,ContainerKey)",1,1,1
"org.apache.derby.impl.store.raw.data.ReclaimSpaceHelper.reclaimContainer(BaseDataFileFactory,RawTransaction,ReclaimSpace)",1,10,10
"org.apache.derby.impl.store.raw.data.ReclaimSpaceHelper.reclaimSpace(BaseDataFileFactory,RawTransaction,ReclaimSpace)",10,12,15
"org.apache.derby.impl.store.raw.data.RecordId.RecordId(ContainerKey,long,int)",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.RecordId(PageKey,int)",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.RecordId(PageKey,int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.equals(Object)",2,2,3
"org.apache.derby.impl.store.raw.data.RecordId.getContainerId()",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.getId()",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.getPageId()",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.getPageNumber()",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.getSlotNumberHint()",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.hashCode()",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.lockAttributes(int,Hashtable)",2,2,3
"org.apache.derby.impl.store.raw.data.RecordId.lockEvent(Latch)",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.lockerAlwaysCompatible()",1,1,1
"org.apache.derby.impl.store.raw.data.RecordId.requestCompatible(Object,Object)",1,2,16
"org.apache.derby.impl.store.raw.data.RecordId.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.RecordId.unlockEvent(Latch)",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.RememberBytesInputStream(InputStream,ByteHolder)",1,2,2
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.available()",1,1,2
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.clear()",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.fillBuf(int)",1,2,3
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.getByteHolder()",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.getReplayStream()",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.numBytesSaved()",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.putBuf(OutputStream,int)",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.read()",1,4,4
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.read(byte[],int,int)",2,4,5
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.recording()",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.setInput(InputStream)",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.shiftToFront()",1,1,1
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.skip(long)",1,2,2
"org.apache.derby.impl.store.raw.data.RememberBytesInputStream.toString()",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFile.RemoveFile(StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFile.performWork(ContextManager)",1,2,2
"org.apache.derby.impl.store.raw.data.RemoveFile.run()",3,3,3
"org.apache.derby.impl.store.raw.data.RemoveFile.serviceASAP()",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFile.serviceImmediately()",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.RemoveFileOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.RemoveFileOperation(String,long,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.doMe(Transaction,LogInstant,LimitObjectInput)",2,1,2
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.generateUndo(Transaction,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.needsRedo(Transaction)",3,1,3
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.releaseResource(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.data.RemoveFileOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.SetReservedSpaceOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.SetReservedSpaceOperation(BasePage,int,int,int,int)",1,2,2
"org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,4,4
"org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.SetReservedSpaceOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.SpaceInformation.SpaceInformation(long,long,long)",1,1,1
"org.apache.derby.impl.store.raw.data.SpaceInformation.getNumAllocatedPages()",1,1,1
"org.apache.derby.impl.store.raw.data.SpaceInformation.getNumFreePages()",1,1,1
"org.apache.derby.impl.store.raw.data.SpaceInformation.getNumUnfilledPages()",1,1,1
"org.apache.derby.impl.store.raw.data.SpaceInformation.getPageSize()",1,1,1
"org.apache.derby.impl.store.raw.data.SpaceInformation.setPageSize(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.isExtensible(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.isFixed(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.isNonexistent(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.isNull(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.isNullable(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.isNullorNonExistent(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.isOverflow(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.isTagged(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.readFieldDataLength(ObjectInput,int,int)",5,5,6
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.readFieldLengthAndSetStreamPosition(byte[],int,int,int,ArrayInputStream)",3,12,12
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.readStatus(ObjectInput)",2,1,2
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.readStatus(byte[],int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.readTotalFieldLength(byte[],int)",4,8,8
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.setExtensible(int,boolean)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.setFixed(int,boolean)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.setInitial()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.setNonexistent(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.setNull(int,boolean)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.setOverflow(int,boolean)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.setTagged(int,boolean)",1,2,3
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.size(int,int,int)",5,1,6
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.toDebugString(int)",2,10,10
"org.apache.derby.impl.store.raw.data.StoredFieldHeader.write(OutputStream,int,int,int)",2,4,5
"org.apache.derby.impl.store.raw.data.StoredPage.StoredPage()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.addSlotEntry(int,int,int,int)",1,6,8
"org.apache.derby.impl.store.raw.data.StoredPage.allowInsert()",4,1,4
"org.apache.derby.impl.store.raw.data.StoredPage.appendOverflowFieldHeader(DynamicByteArrayOutputStream,RecordHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.calculateSlotFieldSize(int)",2,1,2
"org.apache.derby.impl.store.raw.data.StoredPage.checkRowReservedSpace(int)",1,3,6
"org.apache.derby.impl.store.raw.data.StoredPage.cleanPage()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.clearAllSpace()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.clearSection(int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.compactRecord(RawTransaction,int,int)",1,8,13
"org.apache.derby.impl.store.raw.data.StoredPage.compressPage(int,int)",1,6,7
"org.apache.derby.impl.store.raw.data.StoredPage.createOutStreams()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.createPage(PageKey,PageCreationArgs)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.createSpaceForUpdate(int,int,int,int)",3,10,11
"org.apache.derby.impl.store.raw.data.StoredPage.currentTimeStamp()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.doUpdateAtSlot(RawTransaction,int,int,Object[],FormatableBitSet)",8,45,54
"org.apache.derby.impl.store.raw.data.StoredPage.entireRecordOnPage(int)",4,7,9
"org.apache.derby.impl.store.raw.data.StoredPage.equalTimeStamp(PageTimeStamp)",4,3,4
"org.apache.derby.impl.store.raw.data.StoredPage.expandPage(int,int)",1,5,5
"org.apache.derby.impl.store.raw.data.StoredPage.fetchNumFieldsAtSlot(int)",2,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.getCurrentFreeSpace()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getFieldOffset(int,int)",1,4,5
"org.apache.derby.impl.store.raw.data.StoredPage.getIsOverflow(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getMaxDataLength(int,int)",1,3,6
"org.apache.derby.impl.store.raw.data.StoredPage.getMaxFreeSpace()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getNewOverflowPage()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getNextColumnPiece(int)",2,8,10
"org.apache.derby.impl.store.raw.data.StoredPage.getOverFlowRecordHeader()",1,1,2
"org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPage(long)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPageForInsert(int,Object[],FormatableBitSet)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getOverflowPageForInsert(int,Object[],FormatableBitSet,int)",9,5,12
"org.apache.derby.impl.store.raw.data.StoredPage.getOverflowSlot(BasePage,StoredRecordHeader)",2,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.getPageSize()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getRecordLength(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getRecordOffset(int)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredPage.getRecordPortionLength(int)",1,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.getReservedCount(int)",1,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.getSlotOffset(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getSlotsInUse()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.getTotalSpace(int)",1,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.handleIncompleteLogRow(int,int,FormatableBitSet,DynamicByteArrayOutputStream)",6,8,11
"org.apache.derby.impl.store.raw.data.StoredPage.initFromData(FileContainer,PageKey)",2,9,9
"org.apache.derby.impl.store.raw.data.StoredPage.initPage(LogInstant,byte,int,boolean,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.initSlotTable(PageKey)",3,15,17
"org.apache.derby.impl.store.raw.data.StoredPage.initSpace()",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.initialize()",1,2,3
"org.apache.derby.impl.store.raw.data.StoredPage.insertAtSlot(int,Object[],FormatableBitSet,LogicalUndo,byte,int)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredPage.internalDeletedRecordCount()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.isColumnOrphaned(StoredRecordHeader,int,long,long)",3,4,6
"org.apache.derby.impl.store.raw.data.StoredPage.isLong(int,int)",1,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.isOverflowPage()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.logAction(LogInstant)",1,6,6
"org.apache.derby.impl.store.raw.data.StoredPage.logColumn(Object[],int,DynamicByteArrayOutputStream,int,int,int)",13,22,29
"org.apache.derby.impl.store.raw.data.StoredPage.logColumn(int,int,Object,DynamicByteArrayOutputStream,int)",2,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.logField(int,int,OutputStream)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.logLongColumn(int,int,Object,DynamicByteArrayOutputStream)",3,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.logOverflowField(DynamicByteArrayOutputStream,int,long,int)",2,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.logOverflowRecord(int,int,DynamicByteArrayOutputStream)",3,4,4
"org.apache.derby.impl.store.raw.data.StoredPage.logRecord(int,int,int,FormatableBitSet,OutputStream,RecordHandle)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.logRecordDataPortion(int,int,StoredRecordHeader,FormatableBitSet,OutputStream,RecordHandle)",3,13,13
"org.apache.derby.impl.store.raw.data.StoredPage.logRow(int,boolean,int,Object[],FormatableBitSet,DynamicByteArrayOutputStream,int,byte,int,int,int)",23,53,72
"org.apache.derby.impl.store.raw.data.StoredPage.moveRecordForCompressAtSlot(int,Object[],RecordHandle[],RecordHandle[])",2,12,12
"org.apache.derby.impl.store.raw.data.StoredPage.moveSavedDataToPage(DynamicByteArrayOutputStream,int,int)",2,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.newRecordId()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.newRecordId(int)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.newRecordIdAndBump()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.pageHeaderToString()",2,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.pagedataToHexDump(byte[])",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.purgeColumnChains(RawTransaction,int,RecordHandle)",3,5,5
"org.apache.derby.impl.store.raw.data.StoredPage.purgeOneColumnChain(long,int)",3,10,11
"org.apache.derby.impl.store.raw.data.StoredPage.purgeOverflowAtSlot(int,RecordHandle,boolean)",2,3,4
"org.apache.derby.impl.store.raw.data.StoredPage.purgeRecord(LogInstant,int,int)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredPage.purgeRowPieces(RawTransaction,int,RecordHandle,boolean)",3,8,8
"org.apache.derby.impl.store.raw.data.StoredPage.qualifyRecordFromRow(Object[],Qualifier[][])",7,10,15
"org.apache.derby.impl.store.raw.data.StoredPage.qualifyRecordFromSlot(Object[],int,FetchDescriptor,StoredRecordHeader,RecordHandle)",7,14,19
"org.apache.derby.impl.store.raw.data.StoredPage.readOneColumnFromPage(Object[],int,int,StoredRecordHeader,RecordHandle)",12,28,29
"org.apache.derby.impl.store.raw.data.StoredPage.readPageHeader()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromArray(Object[],int,int[],int[],ArrayInputStream,StoredRecordHeader,RecordHandle)",16,27,36
"org.apache.derby.impl.store.raw.data.StoredPage.readRecordFromStream(Object[],int,int[],int[],LimitObjectInput,StoredRecordHeader,RecordHandle)",17,27,36
"org.apache.derby.impl.store.raw.data.StoredPage.recordHeaderOnDemand(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.recordToString(int)",2,8,9
"org.apache.derby.impl.store.raw.data.StoredPage.releaseExclusive()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.removeOrphanedColumnChain(ReclaimSpace,ContainerHandle)",8,14,17
"org.apache.derby.impl.store.raw.data.StoredPage.removeSlotEntry(int)",1,4,5
"org.apache.derby.impl.store.raw.data.StoredPage.reserveSpaceForSlot(LogInstant,int,int)",3,2,3
"org.apache.derby.impl.store.raw.data.StoredPage.resetOutputStream()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.restoreLongRecordFromSlot(Object[],FetchDescriptor,RecordHandle,StoredRecordHeader)",1,9,10
"org.apache.derby.impl.store.raw.data.StoredPage.restorePortionLongColumn(OverflowInputStream)",1,6,7
"org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromSlot(int,Object[],FetchDescriptor,RecordHandle,StoredRecordHeader,boolean)",7,21,22
"org.apache.derby.impl.store.raw.data.StoredPage.restoreRecordFromStream(LimitObjectInput,Object[])",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.setDeleteStatus(LogInstant,int,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.setOutputStream(OutputStream)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.setPageStatus(LogInstant,byte)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.setRecordOffset(int,int)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.setReservedSpace(LogInstant,int,int)",1,5,5
"org.apache.derby.impl.store.raw.data.StoredPage.setSlotEntry(int,int,int,int)",1,8,8
"org.apache.derby.impl.store.raw.data.StoredPage.setTimeStamp(PageTimeStamp)",3,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.shiftRemainingData(int,int,int,int)",1,5,5
"org.apache.derby.impl.store.raw.data.StoredPage.shrinkPage(int,int)",5,8,9
"org.apache.derby.impl.store.raw.data.StoredPage.skipField(ObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.skipRecord(ObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.spaceForCopy(int)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredPage.spaceForCopy(int,int[])",1,1,4
"org.apache.derby.impl.store.raw.data.StoredPage.spaceForInsert()",3,1,3
"org.apache.derby.impl.store.raw.data.StoredPage.spaceForInsert(Object[],FormatableBitSet,int)",3,2,5
"org.apache.derby.impl.store.raw.data.StoredPage.spaceForInsert(Object[],FormatableBitSet,int,int,int)",2,3,5
"org.apache.derby.impl.store.raw.data.StoredPage.storeField(LogInstant,int,int,ObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.storeRecord(LogInstant,int,boolean,ObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForInsert(int,ObjectInput)",2,10,13
"org.apache.derby.impl.store.raw.data.StoredPage.storeRecordForUpdate(int,ObjectInput)",5,38,43
"org.apache.derby.impl.store.raw.data.StoredPage.toString()",3,5,5
"org.apache.derby.impl.store.raw.data.StoredPage.unfilled()",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.updateChecksum()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.updateFieldAtSlot(int,int,Object,LogicalUndo)",2,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.updateFieldOverflowDetails(RecordHandle,RecordHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(RecordHandle,RecordHandle)",2,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowDetails(StoredPage,RecordHandle,RecordHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.updateOverflowed(RawTransaction,int,Object[],FormatableBitSet,StoredRecordHeader)",1,2,2
"org.apache.derby.impl.store.raw.data.StoredPage.updatePageHeader()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.updatePageVersion()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredPage.updateRecordPortionLength(int,int,int)",1,8,8
"org.apache.derby.impl.store.raw.data.StoredPage.usePageBuffer(byte[])",1,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.validateChecksum(PageKey)",3,6,7
"org.apache.derby.impl.store.raw.data.StoredPage.writeFormatId(PageKey)",1,3,3
"org.apache.derby.impl.store.raw.data.StoredPage.writePage(PageKey)",1,8,8
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.OverflowInfo.OverflowInfo()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.OverflowInfo.OverflowInfo(OverflowInfo)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.StoredRecordHeader()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.StoredRecordHeader(StoredRecordHeader)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.StoredRecordHeader(byte[],int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.StoredRecordHeader(int,int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.getFirstField()",1,1,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.getHandle(PageKey,int)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.getId()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.getNumberFields()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.getOverflowId()",1,1,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.getOverflowPage()",1,1,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.hasFirstField()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.hasOverflow()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.isDeleted()",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.read(ObjectInput)",2,8,10
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.read(byte[],int)",1,4,6
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.readFirstField(byte[],int)",3,1,3
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.readNumberFields(byte[],int)",1,1,3
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.readOverFlowId(byte[],int)",3,1,3
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.readOverFlowPage(byte[],int)",3,1,3
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.setDeleted(boolean)",1,2,4
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.setFirstField(int)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.setId(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.setNumberFields(int)",1,1,1
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.setOverflowDetails(RecordHandle)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.setOverflowFields(StoredRecordHeader)",1,1,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.size()",1,4,8
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.StoredRecordHeader.write(OutputStream)",1,7,7
"org.apache.derby.impl.store.raw.data.StreamFileContainer.StreamFileContainer(ContainerKey,BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainer.StreamFileContainer(ContainerKey,BaseDataFileFactory,Properties)",2,3,3
"org.apache.derby.impl.store.raw.data.StreamFileContainer.close()",1,4,5
"org.apache.derby.impl.store.raw.data.StreamFileContainer.fetchNext(Object[])",14,19,21
"org.apache.derby.impl.store.raw.data.StreamFileContainer.getContainerProperties(Properties)",1,2,2
"org.apache.derby.impl.store.raw.data.StreamFileContainer.getFileName(ContainerKey,boolean,boolean)",8,8,9
"org.apache.derby.impl.store.raw.data.StreamFileContainer.getIdentity()",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainer.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainer.load(RowSource)",4,17,18
"org.apache.derby.impl.store.raw.data.StreamFileContainer.open(boolean)",3,4,6
"org.apache.derby.impl.store.raw.data.StreamFileContainer.privDelete(StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.data.StreamFileContainer.privExists(StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.data.StreamFileContainer.privGetInputStream(StorageFile)",1,2,2
"org.apache.derby.impl.store.raw.data.StreamFileContainer.privGetOutputStream(StorageFile)",1,2,2
"org.apache.derby.impl.store.raw.data.StreamFileContainer.privMkdirs(StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.data.StreamFileContainer.removeContainer()",2,2,2
"org.apache.derby.impl.store.raw.data.StreamFileContainer.run()",6,6,6
"org.apache.derby.impl.store.raw.data.StreamFileContainer.use(StreamContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainer.writeColumn(Object)",7,11,11
"org.apache.derby.impl.store.raw.data.StreamFileContainer.writeToFile()",4,7,11
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.StreamFileContainerHandle(UUID,RawTransaction,ContainerKey,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.StreamFileContainerHandle(UUID,RawTransaction,StreamFileContainer,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.close()",2,3,3
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.fetchNext(DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.getContainerProperties(Properties)",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.getId()",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.getTransaction()",1,2,2
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.removeContainer()",1,1,1
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.update(Observable,Object)",4,8,10
"org.apache.derby.impl.store.raw.data.StreamFileContainerHandle.useContainer()",2,3,4
"org.apache.derby.impl.store.raw.data.SyncOnCommit.SyncOnCommit(ContainerKey)",1,1,1
"org.apache.derby.impl.store.raw.data.SyncOnCommit.doIt(BaseContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.SyncOnCommit.update(Observable,Object)",1,7,7
"org.apache.derby.impl.store.raw.data.TempRAFContainer.TempRAFContainer(BaseDataFileFactory)",1,1,1
"org.apache.derby.impl.store.raw.data.TempRAFContainer.addPage(BaseContainerHandle,boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.TempRAFContainer.createIdentity(Object,Object)",2,2,2
"org.apache.derby.impl.store.raw.data.TempRAFContainer.getFileName(ContainerKey,boolean,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.TempRAFContainer.isSingleUser()",1,1,1
"org.apache.derby.impl.store.raw.data.TempRAFContainer.letGo(BaseContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.TempRAFContainer.preAllocate(long,int)",1,1,1
"org.apache.derby.impl.store.raw.data.TempRAFContainer.privGetFileName(ContainerKey,boolean,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.TempRAFContainer.removeContainer(LogInstant,boolean)",1,1,1
"org.apache.derby.impl.store.raw.data.TempRAFContainer.setIdentity(Object)",2,2,2
"org.apache.derby.impl.store.raw.data.TempRAFContainer.truncate(BaseContainerHandle)",1,1,2
"org.apache.derby.impl.store.raw.data.TempRAFContainer.use(BaseContainerHandle,boolean,boolean)",2,1,2
"org.apache.derby.impl.store.raw.data.TempRAFContainer.writePage(long,byte[],boolean)",1,2,2
"org.apache.derby.impl.store.raw.data.TruncateOnCommit.TruncateOnCommit(ContainerKey,boolean)",1,3,3
"org.apache.derby.impl.store.raw.data.TruncateOnCommit.doIt(BaseContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.data.TruncateOnCommit.equals(Object)",3,2,3
"org.apache.derby.impl.store.raw.data.TruncateOnCommit.update(Observable,Object)",1,10,10
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.UpdateFieldOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.UpdateFieldOperation(RawTransaction,BasePage,int,int,int,Object,LogicalUndo)",1,2,2
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreLoggedRow(Object[],LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,4,4
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.undoMe(Transaction,BasePage,int,LogInstant,LimitObjectInput)",1,5,5
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateFieldOperation.writeOptionalDataToBuffer(RawTransaction,Object)",1,6,6
"org.apache.derby.impl.store.raw.data.UpdateOperation.UpdateOperation()",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.UpdateOperation(RawTransaction,BasePage,int,int,Object[],FormatableBitSet,int,DynamicByteArrayOutputStream,int,RecordHandle)",1,2,2
"org.apache.derby.impl.store.raw.data.UpdateOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.getNextStartColumn()",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.restoreMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.data.UpdateOperation.undoMe(Transaction,BasePage,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.data.UpdateOperation.writeOptionalDataToBuffer(RawTransaction,DynamicByteArrayOutputStream,Object[],FormatableBitSet,int,int,RecordHandle)",1,6,8
"org.apache.derby.impl.store.raw.log.CheckpointOperation.CheckpointOperation()",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.CheckpointOperation(long,long,Formatable)",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.log.CheckpointOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.getTransactionTable()",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.needsRedo(Transaction)",2,1,2
"org.apache.derby.impl.store.raw.log.CheckpointOperation.readExternal(ObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.log.CheckpointOperation.redoLWM()",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.releaseResource(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.toString()",2,3,3
"org.apache.derby.impl.store.raw.log.CheckpointOperation.undoLWM()",1,1,1
"org.apache.derby.impl.store.raw.log.CheckpointOperation.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.store.raw.log.ChecksumOperation.ChecksumOperation()",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.getDataLength()",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.getStoredSize()",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.group()",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.init()",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.initializeChecksumAlgo()",1,1,2
"org.apache.derby.impl.store.raw.log.ChecksumOperation.isChecksumValid(byte[],int,int)",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.needsRedo(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.releaseResource(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.reset()",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.toString()",2,2,2
"org.apache.derby.impl.store.raw.log.ChecksumOperation.update(byte[],int,int)",1,1,1
"org.apache.derby.impl.store.raw.log.ChecksumOperation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.log.D_FlushedScan.diag()",1,1,1
"org.apache.derby.impl.store.raw.log.D_LogToFile.diag()",1,1,1
"org.apache.derby.impl.store.raw.log.FileLogger.FileLogger(LogToFile)",1,1,1
"org.apache.derby.impl.store.raw.log.FileLogger.close()",1,2,2
"org.apache.derby.impl.store.raw.log.FileLogger.flush(LogInstant)",1,3,3
"org.apache.derby.impl.store.raw.log.FileLogger.flushAll()",1,1,1
"org.apache.derby.impl.store.raw.log.FileLogger.logAndDo(RawTransaction,Loggable)",2,17,19
"org.apache.derby.impl.store.raw.log.FileLogger.logAndUndo(RawTransaction,Compensation,LogInstant,LimitObjectInput)",2,10,12
"org.apache.derby.impl.store.raw.log.FileLogger.readLogRecord(StreamLogScan,int)",1,2,2
"org.apache.derby.impl.store.raw.log.FileLogger.redo(RawTransaction,TransactionFactory,StreamLogScan,long,long)",12,52,59
"org.apache.derby.impl.store.raw.log.FileLogger.reprepare(RawTransaction,TransactionId,LogInstant,LogInstant)",7,24,25
"org.apache.derby.impl.store.raw.log.FileLogger.undo(RawTransaction,TransactionId,LogInstant,LogInstant)",6,23,24
"org.apache.derby.impl.store.raw.log.FlushedScan.FlushedScan(LogToFile,long)",1,3,3
"org.apache.derby.impl.store.raw.log.FlushedScan.close()",1,2,3
"org.apache.derby.impl.store.raw.log.FlushedScan.currentLogFileHasUnflushedRecord()",5,3,6
"org.apache.derby.impl.store.raw.log.FlushedScan.getInstant()",1,1,1
"org.apache.derby.impl.store.raw.log.FlushedScan.getLogInstant()",2,1,2
"org.apache.derby.impl.store.raw.log.FlushedScan.getLogRecordEnd()",1,2,2
"org.apache.derby.impl.store.raw.log.FlushedScan.getNextRecord(ArrayInputStream,TransactionId,int)",3,20,27
"org.apache.derby.impl.store.raw.log.FlushedScan.isLogEndFuzzy()",1,2,2
"org.apache.derby.impl.store.raw.log.FlushedScan.positionToNextRecord()",5,2,5
"org.apache.derby.impl.store.raw.log.FlushedScan.resetPosition(LogInstant)",1,2,2
"org.apache.derby.impl.store.raw.log.FlushedScan.setCurrentLogFileFirstUnflushedPosition()",3,3,3
"org.apache.derby.impl.store.raw.log.FlushedScan.setFirstUnflushed()",1,1,1
"org.apache.derby.impl.store.raw.log.FlushedScan.switchLogFile()",1,2,2
"org.apache.derby.impl.store.raw.log.FlushedScanHandle.FlushedScanHandle(LogToFile,DatabaseInstant,int)",1,1,1
"org.apache.derby.impl.store.raw.log.FlushedScanHandle.close()",1,2,2
"org.apache.derby.impl.store.raw.log.FlushedScanHandle.getGroup()",1,1,1
"org.apache.derby.impl.store.raw.log.FlushedScanHandle.getInstant()",1,1,1
"org.apache.derby.impl.store.raw.log.FlushedScanHandle.getLoggable()",1,3,3
"org.apache.derby.impl.store.raw.log.FlushedScanHandle.getOptionalData()",2,3,4
"org.apache.derby.impl.store.raw.log.FlushedScanHandle.getTransactionId()",1,3,3
"org.apache.derby.impl.store.raw.log.FlushedScanHandle.next()",2,4,5
"org.apache.derby.impl.store.raw.log.LogAccessFile.LogAccessFile(LogToFile,StorageRandomAccessFile,int)",1,6,8
"org.apache.derby.impl.store.raw.log.LogAccessFile.appendLogRecordToBuffer(byte[],int,int,long,byte[],int,byte[],int,int)",1,2,2
"org.apache.derby.impl.store.raw.log.LogAccessFile.close()",1,4,4
"org.apache.derby.impl.store.raw.log.LogAccessFile.corrupt()",1,2,2
"org.apache.derby.impl.store.raw.log.LogAccessFile.flushDirtyBuffers()",1,7,9
"org.apache.derby.impl.store.raw.log.LogAccessFile.flushLogAccessFile()",1,1,1
"org.apache.derby.impl.store.raw.log.LogAccessFile.reserveSpaceForChecksum(int,long,long)",2,5,5
"org.apache.derby.impl.store.raw.log.LogAccessFile.setReplicationMasterRole(MasterFactory)",1,1,1
"org.apache.derby.impl.store.raw.log.LogAccessFile.setReplicationSlaveRole()",1,1,1
"org.apache.derby.impl.store.raw.log.LogAccessFile.stopReplicationMasterRole()",1,1,1
"org.apache.derby.impl.store.raw.log.LogAccessFile.switchLogBuffer()",2,5,6
"org.apache.derby.impl.store.raw.log.LogAccessFile.syncLogAccessFile()",3,4,5
"org.apache.derby.impl.store.raw.log.LogAccessFile.write(byte[],int,int)",1,2,2
"org.apache.derby.impl.store.raw.log.LogAccessFile.write(int)",1,2,2
"org.apache.derby.impl.store.raw.log.LogAccessFile.writeChecksumLogRecord(byte[])",1,5,5
"org.apache.derby.impl.store.raw.log.LogAccessFile.writeEndMarker(int)",1,1,1
"org.apache.derby.impl.store.raw.log.LogAccessFile.writeInt(int)",1,2,2
"org.apache.derby.impl.store.raw.log.LogAccessFile.writeInt(int,byte[],int)",1,1,1
"org.apache.derby.impl.store.raw.log.LogAccessFile.writeLogRecord(int,long,byte[],int,byte[],int,int)",1,4,5
"org.apache.derby.impl.store.raw.log.LogAccessFile.writeLong(long)",1,2,2
"org.apache.derby.impl.store.raw.log.LogAccessFile.writeLong(long,byte[],int)",1,1,1
"org.apache.derby.impl.store.raw.log.LogAccessFile.writeToLog(byte[],int,int,long)",4,4,7
"org.apache.derby.impl.store.raw.log.LogAccessFileBuffer.LogAccessFileBuffer(int)",1,1,1
"org.apache.derby.impl.store.raw.log.LogAccessFileBuffer.init(int)",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.LogCounter()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.LogCounter(long)",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.LogCounter(long,long)",1,2,2
"org.apache.derby.impl.store.raw.log.LogCounter.equals(Object)",3,1,4
"org.apache.derby.impl.store.raw.log.LogCounter.getLogFileNumber()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.getLogFileNumber(long)",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.getLogFilePosition()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.getLogFilePosition(long)",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.getValueAsLong()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.hashCode()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.lessThan(DatabaseInstant)",1,1,2
"org.apache.derby.impl.store.raw.log.LogCounter.makeLogInstantAsLong(long,long)",1,2,2
"org.apache.derby.impl.store.raw.log.LogCounter.next()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.prior()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.toDebugString(long)",2,2,2
"org.apache.derby.impl.store.raw.log.LogCounter.toString()",1,1,1
"org.apache.derby.impl.store.raw.log.LogCounter.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.LogRecord()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.formatOverhead()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.getLoggable()",2,5,6
"org.apache.derby.impl.store.raw.log.LogRecord.getRePreparable()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.getStoredSize(int,TransactionId)",1,2,2
"org.apache.derby.impl.store.raw.log.LogRecord.getTransactionId()",2,3,4
"org.apache.derby.impl.store.raw.log.LogRecord.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.getUndoable()",2,2,3
"org.apache.derby.impl.store.raw.log.LogRecord.group()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.isAbort()",1,2,2
"org.apache.derby.impl.store.raw.log.LogRecord.isCLR()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.isChecksum()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.isCommit()",1,2,2
"org.apache.derby.impl.store.raw.log.LogRecord.isComplete()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.isFirst()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.isPrepare()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.maxGroupStoredSize()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.maxTransactionIdStoredSize(TransactionId)",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.requiresPrepareLocks()",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.setValue(TransactionId,Loggable)",1,1,1
"org.apache.derby.impl.store.raw.log.LogRecord.skipLoggable()",2,5,6
"org.apache.derby.impl.store.raw.log.LogRecord.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.LogToFile()",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.abortLogBackup()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.appendLogRecord(byte[],int,int,byte[],int,int)",10,17,17
"org.apache.derby.impl.store.raw.log.LogToFile.backupLogFiles(File,long)",3,3,3
"org.apache.derby.impl.store.raw.log.LogToFile.boot(boolean,Properties)",17,35,40
"org.apache.derby.impl.store.raw.log.LogToFile.canSupport(Properties)",3,2,3
"org.apache.derby.impl.store.raw.log.LogToFile.checkCorrupt()",2,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.checkForReplication(LogAccessFile)",1,3,3
"org.apache.derby.impl.store.raw.log.LogToFile.checkJvmSyncError(StorageFile)",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.checkVersion(int,int)",3,1,4
"org.apache.derby.impl.store.raw.log.LogToFile.checkVersion(int,int,String)",2,2,3
"org.apache.derby.impl.store.raw.log.LogToFile.checkpoint(RawStoreFactory,DataFactory,TransactionFactory,boolean)",4,4,6
"org.apache.derby.impl.store.raw.log.LogToFile.checkpointInRFR(LogInstant,long,long,DataFactory)",2,4,4
"org.apache.derby.impl.store.raw.log.LogToFile.checkpointWithTran(RawTransaction,RawStoreFactory,DataFactory,TransactionFactory)",9,16,21
"org.apache.derby.impl.store.raw.log.LogToFile.createLogDirectory()",5,5,5
"org.apache.derby.impl.store.raw.log.LogToFile.currentInstant()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.databaseEncrypted()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.decrypt(byte[],int,int,byte[],int)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.deleteLogFileAfterCheckpointLogFile()",3,3,3
"org.apache.derby.impl.store.raw.log.LogToFile.deleteObsoleteLogfiles()",2,14,17
"org.apache.derby.impl.store.raw.log.LogToFile.deleteOnlineArchivedLogFiles()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.disableLogArchiveMode()",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.enableLogArchiveMode()",1,3,3
"org.apache.derby.impl.store.raw.log.LogToFile.encrypt(byte[],int,int,byte[],int)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.endLogBackup(File)",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.endPosition()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.failoverSlave()",1,2,3
"org.apache.derby.impl.store.raw.log.LogToFile.findCheckpoint(long,FileLogger)",2,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.firstLogInstant()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.flush(LogInstant)",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.flush(long,long)",7,26,46
"org.apache.derby.impl.store.raw.log.LogToFile.flushAll()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.flushBuffer(long,long)",3,1,3
"org.apache.derby.impl.store.raw.log.LogToFile.freezePersistentStore()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.getCanonicalLogPath()",2,2,3
"org.apache.derby.impl.store.raw.log.LogToFile.getControlFileName()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.getEncryptedDataLength(int)",2,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.getEncryptionBlockSize()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.getFirstLogNeeded(CheckpointOperation)",1,6,6
"org.apache.derby.impl.store.raw.log.LogToFile.getFirstUnflushedInstant()",1,2,3
"org.apache.derby.impl.store.raw.log.LogToFile.getFirstUnflushedInstantAsLong()",1,2,3
"org.apache.derby.impl.store.raw.log.LogToFile.getLogDirPath(StorageFile)",2,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.getLogDirectory()",2,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.getLogFactoryProperties(PersistentSet)",1,4,8
"org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtBeginning(long)",4,3,7
"org.apache.derby.impl.store.raw.log.LogToFile.getLogFileAtPosition(long)",2,10,11
"org.apache.derby.impl.store.raw.log.LogToFile.getLogFileName(long)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.getLogFileNumber()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.getLogFileToSimulateCorruption(long)",2,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.getLogStorageFactory()",2,4,4
"org.apache.derby.impl.store.raw.log.LogToFile.getLogger()",2,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.getMirrorControlFileName()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.inRFR()",2,4,5
"org.apache.derby.impl.store.raw.log.LogToFile.inReplicationMasterMode()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.initLogFile(StorageRandomAccessFile,long,long)",4,4,6
"org.apache.derby.impl.store.raw.log.LogToFile.initializeReplicationSlaveRole()",1,5,6
"org.apache.derby.impl.store.raw.log.LogToFile.isCheckpointInLastLogFile()",2,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.logArchived()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.logErrMsg(String)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.logErrMsg(Throwable)",1,3,3
"org.apache.derby.impl.store.raw.log.LogToFile.logErrMsgForDurabilityTestModeNoSync()",1,2,3
"org.apache.derby.impl.store.raw.log.LogToFile.logtest_appendPartialLogRecord(byte[],int,int,byte[],int,int)",7,15,18
"org.apache.derby.impl.store.raw.log.LogToFile.markCorrupt(StandardException)",1,5,8
"org.apache.derby.impl.store.raw.log.LogToFile.openBackwardsScan(LogInstant)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.openBackwardsScan(long,LogInstant)",2,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.openFlushedScan(DatabaseInstant,int)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.openForwardsFlushedScan(LogInstant)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.openForwardsScan(LogInstant,LogInstant)",1,3,3
"org.apache.derby.impl.store.raw.log.LogToFile.openForwardsScan(long,LogInstant)",1,4,4
"org.apache.derby.impl.store.raw.log.LogToFile.openLogFileInWriteMode(StorageFile)",3,3,3
"org.apache.derby.impl.store.raw.log.LogToFile.performWork(ContextManager)",2,4,6
"org.apache.derby.impl.store.raw.log.LogToFile.preAllocateNewLogFile(StorageRandomAccessFile)",2,4,6
"org.apache.derby.impl.store.raw.log.LogToFile.printErrorStack(Throwable)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.privCanWrite(StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.privCopyFile(File,StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.privCopyFile(StorageFile,File)",1,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.privDelete(StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.privExists(StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.privList(File)",1,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.privList(StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.privMkdirs(StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.privRandomAccessFile(StorageFile,String)",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.privRemoveDirectory(StorageFile)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.readControlFile(StorageFile,Properties)",10,29,34
"org.apache.derby.impl.store.raw.log.LogToFile.recover(RawStoreFactory,DataFactory,TransactionFactory)",12,69,82
"org.apache.derby.impl.store.raw.log.LogToFile.restoreLogs(Properties)",8,13,15
"org.apache.derby.impl.store.raw.log.LogToFile.run()",13,13,13
"org.apache.derby.impl.store.raw.log.LogToFile.runBooleanAction(int,StorageFile)",1,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.serviceASAP()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.serviceImmediately()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.setDatabaseEncrypted(boolean)",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.startLogBackup(File)",4,5,5
"org.apache.derby.impl.store.raw.log.LogToFile.startNewLogFile()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.startReplicationMasterRole(MasterFactory)",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.stop()",1,9,13
"org.apache.derby.impl.store.raw.log.LogToFile.stopReplicationMasterRole()",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.stopReplicationSlaveRole()",1,2,2
"org.apache.derby.impl.store.raw.log.LogToFile.switchLogFile()",10,24,27
"org.apache.derby.impl.store.raw.log.LogToFile.syncFile(StorageRandomAccessFile)",3,4,5
"org.apache.derby.impl.store.raw.log.LogToFile.testLogFull()",3,4,5
"org.apache.derby.impl.store.raw.log.LogToFile.truncateLog(CheckpointOperation)",2,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.truncateLog(long)",2,9,12
"org.apache.derby.impl.store.raw.log.LogToFile.unfreezePersistentStore()",1,1,1
"org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(StorageFile,long)",1,1,2
"org.apache.derby.impl.store.raw.log.LogToFile.verifyLogFormat(StorageRandomAccessFile,long)",2,3,4
"org.apache.derby.impl.store.raw.log.LogToFile.writeControlFile(StorageFile,long)",2,5,11
"org.apache.derby.impl.store.raw.log.ReadOnly.abortLogBackup()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.canSupport(Properties)",2,1,2
"org.apache.derby.impl.store.raw.log.ReadOnly.checkVersion(int,int,String)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.checkpoint(RawStoreFactory,DataFactory,TransactionFactory,boolean)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.checkpointInRFR(LogInstant,long,long,DataFactory)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.deleteLogFileAfterCheckpointLogFile()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.deleteOnlineArchivedLogFiles()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.disableLogArchiveMode()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.enableLogArchiveMode()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.endLogBackup(File)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.flush(LogInstant)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.freezePersistentStore()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.getCanonicalLogPath()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.getFirstUnflushedInstant()",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.getFirstUnflushedInstantAsLong()",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.getLogDirectory()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.getLogFactoryProperties(PersistentSet)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.getLogger()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.getTruncationLWM(UUID)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.inRFR()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.inReplicationMasterMode()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.isCheckpointInLastLogFile()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.logArchived()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.markCorrupt(StandardException)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.openFlushedScan(DatabaseInstant,int)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.openForwardsFlushedScan(LogInstant)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.openForwardsScan(LogInstant,LogInstant)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.recover(RawStoreFactory,DataFactory,TransactionFactory)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.removeTruncationLWM(UUID)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.removeTruncationLWM(UUID,RawStoreFactory,TransactionFactory)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.setDatabaseEncrypted(boolean)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.setTruncationLWM(UUID,LogInstant)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.setTruncationLWM(UUID,LogInstant,RawStoreFactory,TransactionFactory)",1,2,2
"org.apache.derby.impl.store.raw.log.ReadOnly.startLogBackup(File)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.startNewLogFile()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.startReplicationMasterRole(MasterFactory)",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.stopReplicationMasterRole()",1,1,1
"org.apache.derby.impl.store.raw.log.ReadOnly.unfreezePersistentStore()",1,1,1
"org.apache.derby.impl.store.raw.log.Scan.Scan(LogToFile,long,LogInstant,byte)",2,6,8
"org.apache.derby.impl.store.raw.log.Scan.close()",1,2,3
"org.apache.derby.impl.store.raw.log.Scan.getInstant()",1,1,1
"org.apache.derby.impl.store.raw.log.Scan.getLogInstant()",2,1,2
"org.apache.derby.impl.store.raw.log.Scan.getLogRecordEnd()",1,1,1
"org.apache.derby.impl.store.raw.log.Scan.getNextRecord(ArrayInputStream,TransactionId,int)",2,9,10
"org.apache.derby.impl.store.raw.log.Scan.getNextRecordBackward(ArrayInputStream,TransactionId,int)",8,30,40
"org.apache.derby.impl.store.raw.log.Scan.getNextRecordForward(ArrayInputStream,TransactionId,int)",16,52,67
"org.apache.derby.impl.store.raw.log.Scan.isLogEndFuzzy()",1,1,1
"org.apache.derby.impl.store.raw.log.Scan.resetPosition(LogInstant)",2,11,16
"org.apache.derby.impl.store.raw.xact.BeginXact.BeginXact()",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.BeginXact(GlobalTransactionId,int)",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.xact.BeginXact.getGlobalId()",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.group()",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.needsRedo(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.releaseResource(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.xact.BeginXact.toString()",2,2,2
"org.apache.derby.impl.store.raw.xact.BeginXact.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.xact.ContainerLocking2.ContainerLocking2()",1,1,1
"org.apache.derby.impl.store.raw.xact.ContainerLocking2.ContainerLocking2(LockFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.ContainerLocking2.getMode()",1,1,1
"org.apache.derby.impl.store.raw.xact.ContainerLocking2.lockContainer(Transaction,ContainerHandle,boolean,boolean)",1,2,4
"org.apache.derby.impl.store.raw.xact.ContainerLocking2.unlockContainer(Transaction,ContainerHandle)",1,2,2
"org.apache.derby.impl.store.raw.xact.ContainerLocking3.ContainerLocking3(LockFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.ContainerLocking3.getMode()",1,1,1
"org.apache.derby.impl.store.raw.xact.ContainerLocking3.lockContainer(Transaction,ContainerHandle,boolean,boolean)",1,1,3
"org.apache.derby.impl.store.raw.xact.D_Xact.diag()",2,2,2
"org.apache.derby.impl.store.raw.xact.EndXact.EndXact()",1,1,1
"org.apache.derby.impl.store.raw.xact.EndXact.EndXact(GlobalTransactionId,int)",1,1,1
"org.apache.derby.impl.store.raw.xact.EndXact.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derby.impl.store.raw.xact.EndXact.getPreparedLog()",1,1,1
"org.apache.derby.impl.store.raw.xact.EndXact.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.xact.EndXact.group()",1,1,4
"org.apache.derby.impl.store.raw.xact.EndXact.needsRedo(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.xact.EndXact.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.xact.EndXact.releaseResource(Transaction)",1,1,1
"org.apache.derby.impl.store.raw.xact.EndXact.toString()",3,2,6
"org.apache.derby.impl.store.raw.xact.EndXact.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.xact.EscalateContainerKey.EscalateContainerKey(ContainerKey)",1,1,1
"org.apache.derby.impl.store.raw.xact.EscalateContainerKey.match(Object)",2,2,2
"org.apache.derby.impl.store.raw.xact.GlobalXactId.GlobalXactId()",1,1,1
"org.apache.derby.impl.store.raw.xact.GlobalXactId.GlobalXactId(int,byte[],byte[])",1,1,1
"org.apache.derby.impl.store.raw.xact.GlobalXactId.getBranchQualifier()",1,1,1
"org.apache.derby.impl.store.raw.xact.GlobalXactId.getFormat_Id()",1,1,1
"org.apache.derby.impl.store.raw.xact.GlobalXactId.getGlobalTransactionId()",1,1,1
"org.apache.derby.impl.store.raw.xact.GlobalXactId.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.xact.GlobalXactId.readExternal(ObjectInput)",1,5,5
"org.apache.derby.impl.store.raw.xact.GlobalXactId.writeExternal(ObjectOutput)",1,4,4
"org.apache.derby.impl.store.raw.xact.InternalXact.InternalXact(XactFactory,LogFactory,DataFactory,DataValueFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.InternalXact.checkLogicalOperationOK()",1,1,1
"org.apache.derby.impl.store.raw.xact.InternalXact.doComplete(Integer)",1,2,2
"org.apache.derby.impl.store.raw.xact.InternalXact.recoveryRollbackFirst()",1,1,1
"org.apache.derby.impl.store.raw.xact.InternalXact.setIdleState()",1,4,4
"org.apache.derby.impl.store.raw.xact.InternalXact.setSavePoint(String,Object)",1,1,1
"org.apache.derby.impl.store.raw.xact.NoLocking.NoLocking()",1,1,1
"org.apache.derby.impl.store.raw.xact.NoLocking.getMode()",1,1,1
"org.apache.derby.impl.store.raw.xact.NoLocking.lockContainer(Transaction,ContainerHandle,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.NoLocking.lockRecordForRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.NoLocking.lockRecordForWrite(Transaction,RecordHandle,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.NoLocking.unlockContainer(Transaction,ContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.xact.NoLocking.unlockRecordAfterRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.NoLocking.zeroDurationLockRecordForWrite(Transaction,RecordHandle,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking1.RowLocking1(LockFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking1.lockRecordForRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,2,2
"org.apache.derby.impl.store.raw.xact.RowLocking1.unlockRecordAfterRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,2,2
"org.apache.derby.impl.store.raw.xact.RowLocking2.RowLocking2(LockFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking2.lockContainer(Transaction,ContainerHandle,boolean,boolean)",1,6,8
"org.apache.derby.impl.store.raw.xact.RowLocking2.lockRecordForRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,1,3
"org.apache.derby.impl.store.raw.xact.RowLocking2.unlockContainer(Transaction,ContainerHandle)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking2.unlockRecordAfterRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,3,5
"org.apache.derby.impl.store.raw.xact.RowLocking2nohold.RowLocking2nohold(LockFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking2nohold.lockRecordForRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,2,4
"org.apache.derby.impl.store.raw.xact.RowLocking2nohold.unlockRecordAfterRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking3.RowLocking3(LockFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking3.getMode()",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking3.getReadLockType()",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking3.getUpdateLockType()",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking3.getWriteLockType()",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking3.lockContainer(Transaction,ContainerHandle,boolean,boolean)",1,5,7
"org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,2,3
"org.apache.derby.impl.store.raw.xact.RowLocking3.lockRecordForWrite(Transaction,RecordHandle,boolean,boolean)",1,2,3
"org.apache.derby.impl.store.raw.xact.RowLocking3.zeroDurationLockRecordForWrite(Transaction,RecordHandle,boolean,boolean)",1,2,3
"org.apache.derby.impl.store.raw.xact.RowLocking3Escalate.RowLocking3Escalate(LockFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLocking3Escalate.lockContainer(Transaction,ContainerHandle,boolean,boolean)",2,2,6
"org.apache.derby.impl.store.raw.xact.RowLockingRR.RowLockingRR(LockFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLockingRR.getReadLockType()",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLockingRR.getUpdateLockType()",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLockingRR.getWriteLockType()",1,1,1
"org.apache.derby.impl.store.raw.xact.RowLockingRR.unlockRecordAfterRead(Transaction,ContainerHandle,RecordHandle,boolean,boolean)",1,4,6
"org.apache.derby.impl.store.raw.xact.SavePoint.SavePoint(String,Object)",1,1,1
"org.apache.derby.impl.store.raw.xact.SavePoint.getKindOfSavepoint()",1,1,1
"org.apache.derby.impl.store.raw.xact.SavePoint.getName()",1,1,1
"org.apache.derby.impl.store.raw.xact.SavePoint.getSavePoint()",1,1,1
"org.apache.derby.impl.store.raw.xact.SavePoint.isThisUserDefinedsavepoint()",1,1,2
"org.apache.derby.impl.store.raw.xact.SavePoint.setSavePoint(LogInstant)",1,2,3
"org.apache.derby.impl.store.raw.xact.TransactionTable.TransactionTable()",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTable.add(Xact,boolean)",1,9,10
"org.apache.derby.impl.store.raw.xact.TransactionTable.addUpdateTransaction(TransactionId,RawTransaction,int)",1,3,3
"org.apache.derby.impl.store.raw.xact.TransactionTable.findAndAssumeTransaction(TransactionId,RawTransaction)",1,5,5
"org.apache.derby.impl.store.raw.xact.TransactionTable.findTransactionContextByGlobalId(GlobalXactId)",4,5,5
"org.apache.derby.impl.store.raw.xact.TransactionTable.findTransactionEntry(TransactionId)",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTable.getFirstLogInstant()",2,7,7
"org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentPreparedRecoveredXact(RawTransaction)",1,15,15
"org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentRollbackFirstTransaction(RawTransaction)",3,12,12
"org.apache.derby.impl.store.raw.xact.TransactionTable.getMostRecentTransactionForRollback(RawTransaction)",1,17,17
"org.apache.derby.impl.store.raw.xact.TransactionTable.getTableForXA()",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTable.getTransactionInfo()",2,5,6
"org.apache.derby.impl.store.raw.xact.TransactionTable.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTable.hasActiveUpdateTransaction()",3,3,4
"org.apache.derby.impl.store.raw.xact.TransactionTable.hasPreparedRecoveredXact()",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTable.hasPreparedXact()",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTable.hasPreparedXact(boolean)",5,5,6
"org.apache.derby.impl.store.raw.xact.TransactionTable.hasRollbackFirstTransaction()",3,4,5
"org.apache.derby.impl.store.raw.xact.TransactionTable.largestUpdateXactId()",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTable.prepareTransaction(TransactionId)",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTable.readExternal(ObjectInput)",2,5,6
"org.apache.derby.impl.store.raw.xact.TransactionTable.remove(TransactionId)",1,5,5
"org.apache.derby.impl.store.raw.xact.TransactionTable.removeUpdateTransaction(TransactionId)",1,3,3
"org.apache.derby.impl.store.raw.xact.TransactionTable.toString()",2,10,11
"org.apache.derby.impl.store.raw.xact.TransactionTable.writeExternal(ObjectOutput)",1,7,8
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.TransactionTableEntry()",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.TransactionTableEntry(Xact,TransactionId,int,int)",1,7,7
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.clone()",1,3,3
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getFirstLog()",3,4,5
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getFirstLogInstantString()",1,4,4
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getGid()",3,3,4
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getGlobalTransactionIdString()",1,3,3
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getLastLog()",3,3,4
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getStatementTextString()",3,4,4
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getTransactionIdString()",1,3,3
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getTransactionStatus()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getTransactionStatusString()",1,3,3
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getTransactionTypeString()",3,4,4
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getUsernameString()",1,3,3
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getXact()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getXid()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.getlcc()",1,3,5
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.isPrepared()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.isRecovery()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.isUpdate()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.needExclusion()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.prepareTransaction()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.readExternal(ObjectInput)",1,3,3
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.removeUpdateTransaction()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.setXact(Xact)",1,1,1
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.toString()",2,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.unsetRecoveryStatus()",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.updateTransactionStatus(Xact,int,int)",1,2,2
"org.apache.derby.impl.store.raw.xact.TransactionTableEntry.writeExternal(ObjectOutput)",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.Xact(XactFactory,LogFactory,DataFactory,DataValueFactory,boolean,CompatibilitySpace)",1,3,3
"org.apache.derby.impl.store.raw.xact.Xact.abort()",7,13,13
"org.apache.derby.impl.store.raw.xact.Xact.addAndLoadStreamContainer(long,Properties,RowSource)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.addContainer(long,long,int,Properties,int)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.addPostCommitWork(Serviceable)",2,1,3
"org.apache.derby.impl.store.raw.xact.Xact.addPostTerminationWork(Serviceable)",2,1,3
"org.apache.derby.impl.store.raw.xact.Xact.addUpdateTransaction(int)",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.anyoneBlocked()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.assumeGlobalXactIdentity(TransactionTableEntry)",1,9,12
"org.apache.derby.impl.store.raw.xact.Xact.assumeIdentity(TransactionTableEntry)",1,6,9
"org.apache.derby.impl.store.raw.xact.Xact.blockBackup(boolean)",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.checkObserverException()",2,1,2
"org.apache.derby.impl.store.raw.xact.Xact.checkpointInRollForwardRecovery(LogInstant,long,long)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.close()",3,7,10
"org.apache.derby.impl.store.raw.xact.Xact.commit()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.commit(int)",1,3,3
"org.apache.derby.impl.store.raw.xact.Xact.commitNoSync(int)",2,3,7
"org.apache.derby.impl.store.raw.xact.Xact.completeCommit(int)",1,3,3
"org.apache.derby.impl.store.raw.xact.Xact.createXATransactionFromLocalTransaction(int,byte[],byte[])",2,3,3
"org.apache.derby.impl.store.raw.xact.Xact.defaultLockingPolicy()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.destroy()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.doComplete(Integer)",1,4,4
"org.apache.derby.impl.store.raw.xact.Xact.doPostCommitWorkInTran()",1,4,4
"org.apache.derby.impl.store.raw.xact.Xact.dropContainer(ContainerKey)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.dropStreamContainer(long,long)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getActiveStateTxIdString()",1,2,3
"org.apache.derby.impl.store.raw.xact.Xact.getCompatibilitySpace()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.getContextId()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.getContextManager()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getDataFactory()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getDataValueFactory()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getDefaultLockingPolicy()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getFileHandler()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getFirstLogInstant()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getGlobalId()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getId()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.getIdNoCheck()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getLastLogInstant()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getLockFactory()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getLogBuffer()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.getLogFactory()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getLogger()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.getSavePointPosition(String,Object,boolean)",6,6,8
"org.apache.derby.impl.store.raw.xact.Xact.getState()",5,2,5
"org.apache.derby.impl.store.raw.xact.Xact.getTransName()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.handlesPostTerminationWork()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.inAbort()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.inRollForwardRecovery()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.isActive()",1,1,2
"org.apache.derby.impl.store.raw.xact.Xact.isBlockingBackup()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.isIdle()",1,3,3
"org.apache.derby.impl.store.raw.xact.Xact.isPrepared()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.isPristine()",1,1,2
"org.apache.derby.impl.store.raw.xact.Xact.isUserTransaction()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.logAndDo(Loggable)",7,11,11
"org.apache.derby.impl.store.raw.xact.Xact.logAndUndo(Compensation,LogInstant,LimitObjectInput)",1,6,6
"org.apache.derby.impl.store.raw.xact.Xact.newLockingPolicy(int,int,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.openContainer(ContainerKey,LockingPolicy,int)",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.openContainer(ContainerKey,int)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.openDroppedContainer(ContainerKey,LockingPolicy)",1,3,3
"org.apache.derby.impl.store.raw.xact.Xact.openStreamContainer(long,long,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.popSavePoints(int,boolean)",6,5,7
"org.apache.derby.impl.store.raw.xact.Xact.postComplete(int,Integer)",1,4,4
"org.apache.derby.impl.store.raw.xact.Xact.postTermination()",1,14,16
"org.apache.derby.impl.store.raw.xact.Xact.preComplete(Integer)",3,4,4
"org.apache.derby.impl.store.raw.xact.Xact.prepareCommit(int)",3,10,13
"org.apache.derby.impl.store.raw.xact.Xact.prepareTransaction()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.reCreateContainerForRedoRecovery(long,long,ByteArray)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.reached(CompatibilitySpace,Object,int,Enumeration,int)",6,6,11
"org.apache.derby.impl.store.raw.xact.Xact.recoveryTransaction()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.releaseAllLocks()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.releaseSavePoint(String,Object)",2,3,4
"org.apache.derby.impl.store.raw.xact.Xact.removeUpdateTransaction()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.reprepare()",4,6,6
"org.apache.derby.impl.store.raw.xact.Xact.resetDefaultLocking()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.rollbackToSavePoint(String,Object)",2,3,4
"org.apache.derby.impl.store.raw.xact.Xact.setActiveState()",2,11,11
"org.apache.derby.impl.store.raw.xact.Xact.setDefaultLockingPolicy(LockingPolicy)",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.setFirstLogInstant(LogInstant)",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.setIdleState()",1,6,6
"org.apache.derby.impl.store.raw.xact.Xact.setLastLogInstant(LogInstant)",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.setPostComplete()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.setPrepareState()",2,3,4
"org.apache.derby.impl.store.raw.xact.Xact.setSavePoint(String,Object)",2,6,8
"org.apache.derby.impl.store.raw.xact.Xact.setTransName(String)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.setTransactionId(GlobalTransactionId,TransactionId)",1,6,9
"org.apache.derby.impl.store.raw.xact.Xact.setTransactionId(Loggable,TransactionId)",1,2,3
"org.apache.derby.impl.store.raw.xact.Xact.setUpdateState()",2,5,5
"org.apache.derby.impl.store.raw.xact.Xact.setup(PersistentSet)",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.startNestedTopTransaction()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.statusForBeginXactLog()",1,1,2
"org.apache.derby.impl.store.raw.xact.Xact.statusForEndXactLog()",1,1,1
"org.apache.derby.impl.store.raw.xact.Xact.throwExceptionIfSQLSavepointNotAllowed(Object)",5,5,6
"org.apache.derby.impl.store.raw.xact.Xact.toString()",1,1,2
"org.apache.derby.impl.store.raw.xact.Xact.unblockBackup()",1,2,2
"org.apache.derby.impl.store.raw.xact.Xact.xa_commit(boolean)",4,5,5
"org.apache.derby.impl.store.raw.xact.Xact.xa_prepare()",2,5,6
"org.apache.derby.impl.store.raw.xact.Xact.xa_rollback()",1,2,2
"org.apache.derby.impl.store.raw.xact.XactContext.XactContext(ContextManager,String,Xact,boolean,RawStoreFactory)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactContext.cleanupOnError(Throwable)",6,10,12
"org.apache.derby.impl.store.raw.xact.XactContext.getFactory()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactContext.getTransaction()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactContext.substituteTransaction(Xact)",1,1,2
"org.apache.derby.impl.store.raw.xact.XactFactory.XactFactory()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.add(Xact,boolean)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.addUpdateTransaction(TransactionId,RawTransaction,int)",1,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.blockBackup(boolean)",4,5,5
"org.apache.derby.impl.store.raw.xact.XactFactory.blockBackupBlockingOperations(boolean)",3,7,8
"org.apache.derby.impl.store.raw.xact.XactFactory.boot(boolean,Properties)",1,3,3
"org.apache.derby.impl.store.raw.xact.XactFactory.canSupport(Properties)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.createFinished()",3,3,3
"org.apache.derby.impl.store.raw.xact.XactFactory.findTransaction(TransactionId,RawTransaction)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.findUserTransaction(RawStoreFactory,ContextManager,String)",2,4,4
"org.apache.derby.impl.store.raw.xact.XactFactory.firstUpdateInstant()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.flushLogOnCommit(String)",1,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.getLockFactory()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.getLockingPolicy(int,int,boolean)",5,1,7
"org.apache.derby.impl.store.raw.xact.XactFactory.getTransactionInfo()",1,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.getTransactionTable()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.getXAResourceManager()",1,1,2
"org.apache.derby.impl.store.raw.xact.XactFactory.handlePreparedXacts(RawStoreFactory)",4,6,8
"org.apache.derby.impl.store.raw.xact.XactFactory.hasPreparedXact()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.inDatabaseCreation()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.makeNewUUID()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.markCorrupt(StandardException)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.noActiveUpdateTransaction()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.prepareTransaction(TransactionId)",1,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.pushTransactionContext(ContextManager,String,Xact,boolean,RawStoreFactory,boolean)",2,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.remove(TransactionId)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.removeUpdateTransaction(TransactionId)",1,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.resetTranId()",1,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.rollbackAllTransactions(RawTransaction,RawStoreFactory)",1,9,12
"org.apache.derby.impl.store.raw.xact.XactFactory.setNewTransactionId(TransactionId,Xact)",1,3,3
"org.apache.derby.impl.store.raw.xact.XactFactory.setRawStoreFactory(RawStoreFactory)",1,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.startCommonTransaction(RawStoreFactory,ContextManager,boolean,CompatibilitySpace,String,String,boolean)",1,3,3
"org.apache.derby.impl.store.raw.xact.XactFactory.startGlobalTransaction(RawStoreFactory,ContextManager,int,byte[],byte[])",2,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.startInternalTransaction(RawStoreFactory,ContextManager)",1,3,3
"org.apache.derby.impl.store.raw.xact.XactFactory.startNestedReadOnlyUserTransaction(RawStoreFactory,CompatibilitySpace,ContextManager,String)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.startNestedTopTransaction(RawStoreFactory,ContextManager)",1,3,3
"org.apache.derby.impl.store.raw.xact.XactFactory.startNestedUpdateUserTransaction(RawStoreFactory,ContextManager,String)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.startTransaction(RawStoreFactory,ContextManager,String)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.stop()",1,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.submitPostCommitWork(Serviceable)",2,2,2
"org.apache.derby.impl.store.raw.xact.XactFactory.unblockBackup()",1,3,3
"org.apache.derby.impl.store.raw.xact.XactFactory.unblockBackupBlockingOperations()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactFactory.useTransactionTable(Formatable)",2,6,7
"org.apache.derby.impl.store.raw.xact.XactId.XactId()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactId.XactId(long)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactId.compare(TransactionId,TransactionId)",4,2,6
"org.apache.derby.impl.store.raw.xact.XactId.equals(Object)",2,1,3
"org.apache.derby.impl.store.raw.xact.XactId.getId()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactId.getMaxStoredSize()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactId.getTypeFormatId()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactId.hashCode()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactId.readExternal(ObjectInput)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactId.toString()",1,1,1
"org.apache.derby.impl.store.raw.xact.XactId.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactXAResourceManager.XactXAResourceManager(RawStoreFactory,TransactionTable)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactXAResourceManager.commit(ContextManager,Xid,boolean)",2,3,3
"org.apache.derby.impl.store.raw.xact.XactXAResourceManager.find(Xid)",1,1,1
"org.apache.derby.impl.store.raw.xact.XactXAResourceManager.forget(ContextManager,Xid)",1,2,2
"org.apache.derby.impl.store.raw.xact.XactXAResourceManager.recover(int)",1,5,7
"org.apache.derby.impl.store.raw.xact.XactXAResourceManager.rollback(ContextManager,Xid)",2,3,3
"org.apache.derby.impl.store.replication.ReplicationLogger.ReplicationLogger(String)",1,1,1
"org.apache.derby.impl.store.replication.ReplicationLogger.logError(String,Throwable)",1,4,4
"org.apache.derby.impl.store.replication.ReplicationLogger.logText(String,boolean)",1,3,3
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.LogBufferElement(int)",1,1,1
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.appendBytes(byte[],int,int,int)",1,2,2
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.appendLog(long,byte[],int,int)",1,2,2
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.freeSize()",1,1,1
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.getData()",1,1,1
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.getLastInstant()",1,1,1
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.init()",1,1,1
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.isRecyclable()",1,1,1
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.setRecyclable(boolean)",1,1,1
"org.apache.derby.impl.store.replication.buffer.LogBufferElement.size()",1,1,1
"org.apache.derby.impl.store.replication.buffer.LogBufferFullException.LogBufferFullException()",1,1,1
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.ReplicationLogBuffer(int,MasterFactory)",1,2,2
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.appendLog(long,byte[],int,int)",1,5,5
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.getData()",2,2,2
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.getFillInformation()",1,1,1
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.getLastInstant()",2,1,2
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.getSize()",2,1,2
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.next()",1,6,7
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.switchDirtyBuffer()",2,4,5
"org.apache.derby.impl.store.replication.buffer.ReplicationLogBuffer.validData()",1,1,1
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.AsynchronousLogShipper(ReplicationLogBuffer,ReplicationMessageTransmit,MasterController,ReplicationLogger)",1,1,1
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.calculateSIfromFI()",1,1,4
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.flushBuffer()",1,1,2
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.flushedInstance(long)",1,1,1
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.forceFlush()",2,1,3
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.getHighestShippedInstant()",1,1,1
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.getLogShipperProperties()",1,3,3
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.run()",3,5,7
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.shipALogChunk()",2,6,6
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.stopLogShipment()",1,1,1
"org.apache.derby.impl.store.replication.master.AsynchronousLogShipper.workToDo()",1,3,3
"org.apache.derby.impl.store.replication.master.MasterController.MasterController()",1,1,1
"org.apache.derby.impl.store.replication.master.MasterController.appendLog(long,byte[],int,int)",1,5,5
"org.apache.derby.impl.store.replication.master.MasterController.boot(boolean,Properties)",1,1,1
"org.apache.derby.impl.store.replication.master.MasterController.canSupport(Properties)",2,2,3
"org.apache.derby.impl.store.replication.master.MasterController.flushedTo(long)",1,1,1
"org.apache.derby.impl.store.replication.master.MasterController.getDbName()",1,1,1
"org.apache.derby.impl.store.replication.master.MasterController.getHostName()",1,1,1
"org.apache.derby.impl.store.replication.master.MasterController.getMasterProperties()",1,5,5
"org.apache.derby.impl.store.replication.master.MasterController.getPortNumber()",1,1,1
"org.apache.derby.impl.store.replication.master.MasterController.handleExceptions(Exception)",4,7,9
"org.apache.derby.impl.store.replication.master.MasterController.handleFailoverFailure(Throwable)",2,2,2
"org.apache.derby.impl.store.replication.master.MasterController.printStackAndStopMaster(Exception)",1,2,2
"org.apache.derby.impl.store.replication.master.MasterController.setupConnection()",1,7,8
"org.apache.derby.impl.store.replication.master.MasterController.startFailover()",4,6,6
"org.apache.derby.impl.store.replication.master.MasterController.startMaster(RawStoreFactory,DataFactory,LogFactory,String,int,String)",2,5,5
"org.apache.derby.impl.store.replication.master.MasterController.stop()",1,2,2
"org.apache.derby.impl.store.replication.master.MasterController.stopMaster()",2,4,4
"org.apache.derby.impl.store.replication.master.MasterController.teardownNetwork()",1,3,5
"org.apache.derby.impl.store.replication.master.MasterController.workToDo()",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessage.ReplicationMessage()",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessage.ReplicationMessage(int,Object)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessage.getMessage()",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessage.getType()",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessage.readExternal(ObjectInput)",2,2,2
"org.apache.derby.impl.store.replication.net.ReplicationMessage.writeExternal(ObjectOutput)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.ReplicationMessageReceive(SlaveAddress,String)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.SlavePingThread.SlavePingThread(String)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.SlavePingThread.run()",3,2,5
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.checkSocketConnection()",2,1,2
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.createServerSocket()",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.handleUnexpectedMessage(String,String,String)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.initConnection(int,long,String)",1,2,2
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.isConnectedToMaster()",1,1,2
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.parseAndAckInstant(ReplicationMessage,long,String)",2,3,3
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.parseAndAckVersion(ReplicationMessage,String)",2,3,3
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.readMessage()",2,2,2
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.sendMessage(ReplicationMessage)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageReceive.tearDown()",1,3,3
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.MasterReceiverThread.MasterReceiverThread(String)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.MasterReceiverThread.readMessage()",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.MasterReceiverThread.run()",2,3,8
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.ReplicationMessageTransmit(SlaveAddress)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.brokerConnection(long)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.checkSocketConnection()",2,1,2
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.initConnection(int,long)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.sendMessage(ReplicationMessage)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.sendMessageWaitForReply(ReplicationMessage)",2,2,3
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.startMessageReceiverThread(String)",1,1,1
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.tearDown()",1,2,2
"org.apache.derby.impl.store.replication.net.ReplicationMessageTransmit.verifyMessageType(ReplicationMessage,int)",3,3,3
"org.apache.derby.impl.store.replication.net.SlaveAddress.SlaveAddress(String,int)",1,1,2
"org.apache.derby.impl.store.replication.net.SlaveAddress.getHostAddress()",1,1,1
"org.apache.derby.impl.store.replication.net.SlaveAddress.getPortNumber()",1,1,1
"org.apache.derby.impl.store.replication.net.SocketConnection.SocketConnection(Socket)",1,1,1
"org.apache.derby.impl.store.replication.net.SocketConnection.readMessage()",1,1,1
"org.apache.derby.impl.store.replication.net.SocketConnection.tearDown()",1,1,1
"org.apache.derby.impl.store.replication.net.SocketConnection.writeMessage(Object)",1,1,1
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.ReplicationLogScan()",1,1,1
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.getData()",3,3,4
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.getDataLength()",3,3,4
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.getInstant()",3,3,4
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.hasValidInformation()",1,1,1
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.init(byte[])",1,1,1
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.isLogFileSwitch()",2,1,2
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.isLogRecord()",2,1,2
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.next()",2,3,5
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.retrieveBytes(byte[],int)",1,3,3
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.retrieveInt()",1,3,3
"org.apache.derby.impl.store.replication.slave.ReplicationLogScan.retrieveLong()",1,3,3
"org.apache.derby.impl.store.replication.slave.SlaveController.SlaveController()",1,1,1
"org.apache.derby.impl.store.replication.slave.SlaveController.SlaveLogReceiverThread.SlaveLogReceiverThread()",1,1,1
"org.apache.derby.impl.store.replication.slave.SlaveController.SlaveLogReceiverThread.handleLogChunk(byte[])",4,4,4
"org.apache.derby.impl.store.replication.slave.SlaveController.SlaveLogReceiverThread.run()",2,6,9
"org.apache.derby.impl.store.replication.slave.SlaveController.boot(boolean,Properties)",1,3,3
"org.apache.derby.impl.store.replication.slave.SlaveController.canSupport(Properties)",2,2,3
"org.apache.derby.impl.store.replication.slave.SlaveController.doFailover()",1,1,1
"org.apache.derby.impl.store.replication.slave.SlaveController.failover()",2,2,2
"org.apache.derby.impl.store.replication.slave.SlaveController.getHostName()",1,1,1
"org.apache.derby.impl.store.replication.slave.SlaveController.getPortNumber()",1,1,1
"org.apache.derby.impl.store.replication.slave.SlaveController.handleDisconnect(Exception)",4,2,5
"org.apache.derby.impl.store.replication.slave.SlaveController.handleFatalException(Exception)",2,2,3
"org.apache.derby.impl.store.replication.slave.SlaveController.isConnectedToMaster()",2,2,2
"org.apache.derby.impl.store.replication.slave.SlaveController.isStarted()",1,1,1
"org.apache.derby.impl.store.replication.slave.SlaveController.setupConnection()",2,4,5
"org.apache.derby.impl.store.replication.slave.SlaveController.startLogReceiverThread()",1,1,1
"org.apache.derby.impl.store.replication.slave.SlaveController.startSlave(RawStoreFactory,LogFactory)",3,2,4
"org.apache.derby.impl.store.replication.slave.SlaveController.stop()",1,2,3
"org.apache.derby.impl.store.replication.slave.SlaveController.stopSlave()",1,1,1
"org.apache.derby.impl.store.replication.slave.SlaveController.stopSlave(boolean)",2,3,3
"org.apache.derby.impl.store.replication.slave.SlaveController.teardownNetwork()",1,3,3
"org.apache.derby.impl.storeless.EmptyDictionary.activeConstraint(ConstraintDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.addConstraintDescriptor(ConstraintDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.addDescriptor(TupleDescriptor,TupleDescriptor,int,boolean,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.addDescriptor(TupleDescriptor,TupleDescriptor,int,boolean,TransactionController,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.addDescriptorArray(TupleDescriptor[],TupleDescriptor,int,boolean,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.addRemovePermissionsDescriptor(boolean,PermissionsDescriptor,String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.addSPSDescriptor(SPSDescriptor,TransactionController,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.canSupport(Properties)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.checkVersion(int,String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.clearCaches()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.computeAutoincRowLocations(TransactionController,TableDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.doneReading(int,LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropAliasDescriptor(AliasDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropAllColumnDescriptors(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropAllConglomerateDescriptors(TableDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropAllConstraintDescriptors(TableDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropAllPermsByGrantee(String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropAllRoutinePermDescriptors(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropAllTableAndColPermDescriptors(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropColumnDescriptor(UUID,String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropConglomerateDescriptor(ConglomerateDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropConstraintDescriptor(ConstraintDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropDependentsStoredDependencies(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropDependentsStoredDependencies(UUID,TransactionController,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropFileInfoDescriptor(FileInfoDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropRoleGrant(String,String,String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropRoleGrantsByGrantee(String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropRoleGrantsByName(String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropSPSDescriptor(SPSDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropSPSDescriptor(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropSchemaDescriptor(String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropStatisticsDescriptors(UUID,UUID,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropStoredDependency(DependencyDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropTableDescriptor(TableDescriptor,SchemaDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropTriggerDescriptor(TriggerDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.dropViewDescriptor(ViewDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.existsGrantToAuthid(String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.existsSchemaOwnedBy(String,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getActiveConstraintDescriptors(ConstraintDescriptorList)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getAliasDescriptor(String,String,char)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getAliasDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getAllDependencyDescriptorsList()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getAllSPSDescriptors()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getAuthorizationDatabaseOwner()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getBuiltinVTIClass(TableDescriptor,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getCacheMode()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getCollationTypeOfSystemSchemas()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getCollationTypeOfUserSchemas()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getColumnDescriptorByDefaultId(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getColumnPermissions(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getColumnPermissions(UUID,String,boolean,String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getColumnPermissions(UUID,int,boolean,String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConglomerateDescriptor(String,SchemaDescriptor,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConglomerateDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConglomerateDescriptor(long)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConglomerateDescriptors(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConglomerateDescriptors(long)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConstraintDescriptor(String,UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConstraintDescriptor(TableDescriptor,UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConstraintDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConstraintDescriptorById(TableDescriptor,UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConstraintDescriptorByName(TableDescriptor,SchemaDescriptor,String,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConstraintDescriptors(TableDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getConstraintTableDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getDataDescriptorGenerator()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getDataValueFactory()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getDeclaredGlobalTemporaryTablesSchemaDescriptor()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getDependencyManager()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getDependentsDescriptorList(String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getEngineType()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getExecutionFactory()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getFileInfoDescriptor(SchemaDescriptor,String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getFileInfoDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getForeignKeys(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getProvidersDescriptorList(String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getRoleDefinitionDescriptor(String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getRoleGrantDescriptor(String,String,String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getRoleGrantDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getRoutineList(String,String,char)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getRoutinePermissions(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getRoutinePermissions(UUID,String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getRowLocationTemplate(LanguageConnectionContext,TableDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSPSDescriptor(String,SchemaDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSPSDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSPSParams(SPSDescriptor,Vector)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSchemaDescriptor(String,TransactionController,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSchemaDescriptor(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSetAutoincrementValue(RowLocation,TransactionController,boolean,NumberDataValue,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getStatisticsDescriptors(TableDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSubKeyConstraint(UUID,int)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSysIBMSchemaDescriptor()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSystemSQLName()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getSystemSchemaDescriptor()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getTableDescriptor(String,SchemaDescriptor,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getTableDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getTablePermissions(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getTablePermissions(UUID,String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getTriggerDescriptor(String,SchemaDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getTriggerDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getTriggerDescriptors(TableDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getUUIDFactory()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getVTIClass(TableDescriptor,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getViewDescriptor(TableDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.getViewDescriptor(UUID)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.hashAllConglomerateDescriptorsByNumber(TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.hashAllTableDescriptorsByTableId(TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.invalidateAllSPSPlans()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.isSchemaEmpty(SchemaDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.isSystemSchemaName(String)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.setAutoincrementValue(TransactionController,UUID,String,long,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.startReading(LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.startWriting(LanguageConnectionContext)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.transactionFinished()",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.updateConglomerateDescriptor(ConglomerateDescriptor,long,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.updateConglomerateDescriptor(ConglomerateDescriptor[],long,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.updateConstraintDescriptor(ConstraintDescriptor,UUID,int[],TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.updateLockGranularity(TableDescriptor,SchemaDescriptor,char,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.updateSPS(SPSDescriptor,TransactionController,boolean,boolean,boolean,boolean)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.updateSYSCOLPERMSforAddColumnToUserTable(UUID,TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.updateSYSCOLPERMSforDropColumn(UUID,TransactionController,ColumnDescriptor)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.updateTriggerDescriptor(TriggerDescriptor,UUID,int[],TransactionController)",1,1,1
"org.apache.derby.impl.storeless.EmptyDictionary.usesSqlAuthorization()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.abort()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.addColumnToConglomerate(long,int,Storable,int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.anyoneBlocked()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.commit()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.commitNoSync(int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.compressConglomerate(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.conglomerateExists(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.countOpens(int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.createAndLoadConglomerate(String,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int,RowLocationRetRowSource,long[])",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.createBackingStoreHashtableFromScan(long,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,long,int[],boolean,long,long,int,float,boolean,boolean,boolean)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.createConglomerate(String,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.createSort(Properties,DataValueDescriptor[],ColumnOrdering[],SortObserver,boolean,long,int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.createXATransactionFromLocalTransaction(int,byte[],byte[])",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.debugOpened()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.defragmentConglomerate(long,boolean,boolean,int,int,int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.destroy()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.dropConglomerate(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.dropSort(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.fetchMaxOnBtree(long,int,int,int,FormatableBitSet,DataValueDescriptor[])",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.findConglomid(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.findContainerid(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getAccessManager()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getActiveStateTxIdString()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getCacheStats(String)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getContextManager()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getDataValueFactory()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getDynamicCompiledConglomInfo(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getFileHandler()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getLockSpace()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getProperties()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getProperty(String)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getPropertyDefault(String)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getStaticCompiledConglomInfo(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getTransactionIdString()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.getUserCreateConglomPropList()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.isGlobal()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.isIdle()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.isPristine()",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.logAndDo(Loggable)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openCompiledConglomerate(boolean,int,int,int,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openCompiledScan(boolean,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,StaticCompiledOpenConglomInfo,DynamicCompiledOpenConglomInfo)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openConglomerate(long,boolean,int,int,int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openGroupFetchScan(long,boolean,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openScan(long,boolean,int,int,int,FormatableBitSet,DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openSort(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openSortCostController(Properties)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openSortRowSource(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openSortScan(long,boolean)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.openStoreCost(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.propertyDefaultIsVisible(String)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.purgeConglomerate(long)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.recreateAndLoadConglomerate(String,boolean,DataValueDescriptor[],ColumnOrdering[],int[],Properties,int,long,RowLocationRetRowSource,long[])",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.releaseSavePoint(String,Object)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.resetCacheStats(String)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.rollbackToSavePoint(String,boolean,Object)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.setProperty(String,Serializable,boolean)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.setPropertyDefault(String,Serializable)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.setSavePoint(String,Object)",1,1,1
"org.apache.derby.impl.storeless.NoOpTransaction.startNestedUserTransaction(boolean)",1,1,1
"org.apache.derby.impl.storeless.StorelessDatabase.StorelessDatabase()",1,1,1
"org.apache.derby.impl.storeless.StorelessDatabase.bootStore(boolean,Properties)",1,1,1
"org.apache.derby.impl.storeless.StorelessDatabase.createFinished()",1,1,1
"org.apache.derby.impl.storeless.StorelessDatabase.getAllDatabaseProperties()",1,1,1
"org.apache.derby.impl.storeless.StorelessDatabase.getConnectionTransaction(ContextManager)",1,1,1
"org.apache.derby.impl.storeless.StorelessDatabase.getEngineType()",1,1,1
"org.apache.derby.impl.storeless.StorelessDatabase.isReadOnly()",1,1,1
"org.apache.derby.impl.storeless.StorelessDatabase.makeDatabaseID(boolean,Properties)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.StorelessService()",1,1,1
"org.apache.derby.impl.storeless.StorelessService.createServiceRoot(String,boolean)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.getBootTimeServices()",1,1,1
"org.apache.derby.impl.storeless.StorelessService.getCanonicalServiceName(String)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.getEngineType()",1,1,1
"org.apache.derby.impl.storeless.StorelessService.getServiceProperties(String,Properties)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.getStorageFactoryInstance(boolean,String,String,String)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.getType()",1,1,1
"org.apache.derby.impl.storeless.StorelessService.getUserServiceName(String)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.hasStorageFactory()",1,1,1
"org.apache.derby.impl.storeless.StorelessService.isSameService(String,String)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.removeServiceRoot(String)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.saveServiceProperties(String,Properties,boolean)",1,1,1
"org.apache.derby.impl.storeless.StorelessService.saveServiceProperties(String,StorageFactory,Properties,boolean)",1,1,1
"org.apache.derby.impl.tools.dblook.DB_Alias.createProcOrFuncString(String,ResultSet,char)",1,3,3
"org.apache.derby.impl.tools.dblook.DB_Alias.doProceduresAndFunctions(Connection)",1,1,1
"org.apache.derby.impl.tools.dblook.DB_Alias.doSynonyms(Connection)",4,3,5
"org.apache.derby.impl.tools.dblook.DB_Alias.generateDDL(ResultSet,char)",4,3,6
"org.apache.derby.impl.tools.dblook.DB_Check.createCheckString(String,ResultSet)",1,1,1
"org.apache.derby.impl.tools.dblook.DB_Check.doChecks(Connection)",3,3,4
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.columnPrivStatement(ResultSet,String,String,ResultSet)",1,1,1
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.doAuthorizations(Connection)",1,1,1
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.generateColumnPrivs(ResultSet,Connection)",3,3,4
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.generateRoutinePrivs(ResultSet)",4,3,5
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.generateTablePrivs(ResultSet)",3,3,4
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.mapColumnsToNames(String,ResultSet)",1,3,3
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.privTypeToString(String)",4,3,4
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.routinePrivStatement(String,String,String)",1,1,2
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.separatorStr(boolean)",1,1,2
"org.apache.derby.impl.tools.dblook.DB_GrantRevoke.tablePrivStatement(ResultSet,String,String)",1,7,7
"org.apache.derby.impl.tools.dblook.DB_Index.createIndex(String,String,String,String)",1,2,2
"org.apache.derby.impl.tools.dblook.DB_Index.doIndexes(Connection)",6,5,8
"org.apache.derby.impl.tools.dblook.DB_Jar.doJars(String,Connection)",5,5,7
"org.apache.derby.impl.tools.dblook.DB_Key.createKeyString(String,String,ResultSet)",1,1,1
"org.apache.derby.impl.tools.dblook.DB_Key.createKeysFrom(ResultSet)",4,5,7
"org.apache.derby.impl.tools.dblook.DB_Key.doKeys(Connection)",1,1,1
"org.apache.derby.impl.tools.dblook.DB_Key.expandKeyType(char)",5,2,5
"org.apache.derby.impl.tools.dblook.DB_Key.makeFKReferenceClause(String,char,char)",3,3,9
"org.apache.derby.impl.tools.dblook.DB_Key.printHeader()",2,1,2
"org.apache.derby.impl.tools.dblook.DB_Schema.doSchemas(Connection,boolean)",4,4,6
"org.apache.derby.impl.tools.dblook.DB_Table.createColumn(String,String,int)",1,4,4
"org.apache.derby.impl.tools.dblook.DB_Table.doTables(Connection,HashMap)",3,4,6
"org.apache.derby.impl.tools.dblook.DB_Table.reinstateAutoIncrement(String,String,StringBuffer)",3,3,4
"org.apache.derby.impl.tools.dblook.DB_Trigger.createTrigger(String,String,ResultSet)",2,10,14
"org.apache.derby.impl.tools.dblook.DB_Trigger.doTriggers(Connection)",4,4,6
"org.apache.derby.impl.tools.dblook.DB_View.doViews(Connection)",4,4,6
"org.apache.derby.impl.tools.dblook.Logs.cleanup()",1,4,4
"org.apache.derby.impl.tools.dblook.Logs.debug(Exception)",1,2,2
"org.apache.derby.impl.tools.dblook.Logs.debug(String,String)",1,3,3
"org.apache.derby.impl.tools.dblook.Logs.debug(String,String[])",1,3,3
"org.apache.derby.impl.tools.dblook.Logs.initLogs(String,String,boolean,boolean,String)",1,2,3
"org.apache.derby.impl.tools.dblook.Logs.report(String)",1,2,2
"org.apache.derby.impl.tools.dblook.Logs.reportMessage(String)",1,1,1
"org.apache.derby.impl.tools.dblook.Logs.reportMessage(String,String)",1,1,1
"org.apache.derby.impl.tools.dblook.Logs.reportMessage(String,String[])",1,1,1
"org.apache.derby.impl.tools.dblook.Logs.reportString(String)",1,1,1
"org.apache.derby.impl.tools.dblook.Logs.unRollExceptions(SQLException)",2,2,2
"org.apache.derby.impl.tools.dblook.Logs.writeNewlineToNewDDL()",1,2,2
"org.apache.derby.impl.tools.dblook.Logs.writeStmtEndToNewDDL()",1,2,2
"org.apache.derby.impl.tools.dblook.Logs.writeToNewDDL(String)",1,2,2
"org.apache.derby.impl.tools.ij.AsyncStatement.AsyncStatement(Connection,String)",1,1,1
"org.apache.derby.impl.tools.ij.AsyncStatement.getResult()",1,1,1
"org.apache.derby.impl.tools.ij.AsyncStatement.run()",1,3,4
"org.apache.derby.impl.tools.ij.AttributeHolder.addError(String)",1,2,2
"org.apache.derby.impl.tools.ij.AttributeHolder.check(Vector)",1,1,1
"org.apache.derby.impl.tools.ij.AttributeHolder.checkBoolean(String)",2,2,3
"org.apache.derby.impl.tools.ij.AttributeHolder.checkName(Vector)",2,4,5
"org.apache.derby.impl.tools.ij.AttributeHolder.checkValue()",1,4,4
"org.apache.derby.impl.tools.ij.AttributeHolder.display(String)",1,1,1
"org.apache.derby.impl.tools.ij.AttributeHolder.displayErrors()",1,3,3
"org.apache.derby.impl.tools.ij.AttributeHolder.displayIndented(String)",1,1,1
"org.apache.derby.impl.tools.ij.AttributeHolder.getName()",1,1,1
"org.apache.derby.impl.tools.ij.AttributeHolder.getToken()",1,1,1
"org.apache.derby.impl.tools.ij.AttributeHolder.getValue()",1,1,1
"org.apache.derby.impl.tools.ij.AttributeHolder.setName(String)",1,1,1
"org.apache.derby.impl.tools.ij.AttributeHolder.setToken(String)",1,1,1
"org.apache.derby.impl.tools.ij.AttributeHolder.setValue(String)",1,1,1
"org.apache.derby.impl.tools.ij.ConnectionEnv.ConnectionEnv(int,boolean,boolean)",1,1,2
"org.apache.derby.impl.tools.ij.ConnectionEnv.addSession(Connection,String)",1,2,2
"org.apache.derby.impl.tools.ij.ConnectionEnv.doPrompt(boolean,LocalizedOutput)",1,2,2
"org.apache.derby.impl.tools.ij.ConnectionEnv.getConnection()",2,1,2
"org.apache.derby.impl.tools.ij.ConnectionEnv.getSession()",1,1,1
"org.apache.derby.impl.tools.ij.ConnectionEnv.getSessions()",1,1,1
"org.apache.derby.impl.tools.ij.ConnectionEnv.getUniqueConnectionName()",1,4,5
"org.apache.derby.impl.tools.ij.ConnectionEnv.haveSession(String)",1,3,3
"org.apache.derby.impl.tools.ij.ConnectionEnv.init(LocalizedOutput)",1,5,5
"org.apache.derby.impl.tools.ij.ConnectionEnv.installConnection(String,String,LocalizedOutput)",2,4,8
"org.apache.derby.impl.tools.ij.ConnectionEnv.removeAllSessions()",2,4,4
"org.apache.derby.impl.tools.ij.ConnectionEnv.removeCurrentSession()",2,1,2
"org.apache.derby.impl.tools.ij.ConnectionEnv.removeSession(String)",1,1,2
"org.apache.derby.impl.tools.ij.ConnectionEnv.setCurrentSession(String)",1,1,1
"org.apache.derby.impl.tools.ij.Main.Main()",1,1,1
"org.apache.derby.impl.tools.ij.Main.Main(LocalizedOutput)",1,2,2
"org.apache.derby.impl.tools.ij.Main.Main(boolean)",1,1,1
"org.apache.derby.impl.tools.ij.Main.getMain(LocalizedOutput)",1,1,1
"org.apache.derby.impl.tools.ij.Main.getutilMain(int,LocalizedOutput)",1,1,1
"org.apache.derby.impl.tools.ij.Main.go(LocalizedInput,LocalizedOutput,Properties)",1,1,1
"org.apache.derby.impl.tools.ij.Main.initAppUI()",1,1,1
"org.apache.derby.impl.tools.ij.Main.main(String[])",1,1,1
"org.apache.derby.impl.tools.ij.Main.mainCore(String[],Main)",6,16,17
"org.apache.derby.impl.tools.ij.ParseException.ParseException()",1,1,1
"org.apache.derby.impl.tools.ij.ParseException.ParseException(String)",1,1,1
"org.apache.derby.impl.tools.ij.ParseException.ParseException(Token,int[][],String[])",1,1,1
"org.apache.derby.impl.tools.ij.ParseException.add_escapes(String)",4,5,14
"org.apache.derby.impl.tools.ij.ParseException.getMessage()",4,3,9
"org.apache.derby.impl.tools.ij.Session.Session(Connection,String,String)",1,1,2
"org.apache.derby.impl.tools.ij.Session.addAsyncStatement(String,AsyncStatement)",1,1,1
"org.apache.derby.impl.tools.ij.Session.addCursor(String,ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.Session.addCursorStatement(String,Statement)",1,1,1
"org.apache.derby.impl.tools.ij.Session.addPreparedStatement(String,PreparedStatement)",1,1,1
"org.apache.derby.impl.tools.ij.Session.close()",1,5,5
"org.apache.derby.impl.tools.ij.Session.doPrompt(boolean,LocalizedOutput,boolean)",1,6,8
"org.apache.derby.impl.tools.ij.Session.getAsyncStatement(String)",1,1,1
"org.apache.derby.impl.tools.ij.Session.getConnection()",1,1,1
"org.apache.derby.impl.tools.ij.Session.getCursor(String)",1,1,1
"org.apache.derby.impl.tools.ij.Session.getCursorStatement(String)",1,1,1
"org.apache.derby.impl.tools.ij.Session.getIsDNC()",1,1,1
"org.apache.derby.impl.tools.ij.Session.getIsJCC()",1,1,1
"org.apache.derby.impl.tools.ij.Session.getName()",1,1,1
"org.apache.derby.impl.tools.ij.Session.getPreparedStatement(String)",1,1,1
"org.apache.derby.impl.tools.ij.Session.removeCursor(String)",1,1,1
"org.apache.derby.impl.tools.ij.Session.removeCursorStatement(String)",1,1,1
"org.apache.derby.impl.tools.ij.Session.removePreparedStatement(String)",1,1,1
"org.apache.derby.impl.tools.ij.StatementFinder.ReInit(LocalizedInput)",1,2,4
"org.apache.derby.impl.tools.ij.StatementFinder.StatementFinder(LocalizedInput,LocalizedOutput)",1,2,3
"org.apache.derby.impl.tools.ij.StatementFinder.atEOF()",1,1,1
"org.apache.derby.impl.tools.ij.StatementFinder.close()",1,1,1
"org.apache.derby.impl.tools.ij.StatementFinder.nextStatement()",8,10,21
"org.apache.derby.impl.tools.ij.StatementFinder.peekChar()",1,2,3
"org.apache.derby.impl.tools.ij.StatementFinder.peekEOF()",1,1,1
"org.apache.derby.impl.tools.ij.StatementFinder.readBracketedComment()",8,7,15
"org.apache.derby.impl.tools.ij.StatementFinder.readChar()",1,3,3
"org.apache.derby.impl.tools.ij.StatementFinder.readSingleLineComment(char)",6,7,11
"org.apache.derby.impl.tools.ij.StatementFinder.readString(char)",4,2,4
"org.apache.derby.impl.tools.ij.StatementFinder.whiteSpace(char)",1,1,5
"org.apache.derby.impl.tools.ij.UCode_CharStream.BeginToken()",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.Done()",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.ExpandBuff(boolean)",1,3,3
"org.apache.derby.impl.tools.ij.UCode_CharStream.FillBuff()",2,4,6
"org.apache.derby.impl.tools.ij.UCode_CharStream.GetImage()",2,1,2
"org.apache.derby.impl.tools.ij.UCode_CharStream.GetSuffix(int)",1,2,2
"org.apache.derby.impl.tools.ij.UCode_CharStream.ReInit(InputStream,int,int)",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.ReInit(InputStream,int,int,int)",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.ReInit(Reader,int,int)",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.ReInit(Reader,int,int,int)",1,1,3
"org.apache.derby.impl.tools.ij.UCode_CharStream.ReadChar()",1,2,2
"org.apache.derby.impl.tools.ij.UCode_CharStream.UCode_CharStream(InputStream,int,int)",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.UCode_CharStream(InputStream,int,int,int)",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.UCode_CharStream(Reader,int,int)",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.UCode_CharStream(Reader,int,int,int)",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.UpdateLineColumn(char)",2,2,8
"org.apache.derby.impl.tools.ij.UCode_CharStream.adjustBeginLineColumn(int,int)",1,1,7
"org.apache.derby.impl.tools.ij.UCode_CharStream.backup(int)",1,1,2
"org.apache.derby.impl.tools.ij.UCode_CharStream.getBeginColumn()",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.getBeginLine()",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.getColumn()",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.getEndColumn()",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.getEndLine()",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.getLine()",1,1,1
"org.apache.derby.impl.tools.ij.UCode_CharStream.readChar()",2,7,9
"org.apache.derby.impl.tools.ij.URLCheck.URLCheck(String)",1,2,2
"org.apache.derby.impl.tools.ij.URLCheck.check()",1,2,2
"org.apache.derby.impl.tools.ij.URLCheck.checkForDuplicate(AttributeHolder)",1,4,4
"org.apache.derby.impl.tools.ij.URLCheck.getAttributes(String,Properties)",3,6,6
"org.apache.derby.impl.tools.ij.URLCheck.getBooleanAttributes()",1,2,2
"org.apache.derby.impl.tools.ij.URLCheck.getValidDerbyProps()",1,4,4
"org.apache.derby.impl.tools.ij.URLCheck.main(String[])",1,1,2
"org.apache.derby.impl.tools.ij.ijConnectionResult.clearSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijConnectionResult.getConnection()",1,1,1
"org.apache.derby.impl.tools.ij.ijConnectionResult.getSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijConnectionResult.ijConnectionResult(Connection)",1,1,1
"org.apache.derby.impl.tools.ij.ijConnectionResult.isConnection()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.alreadyHaveConnectionNamed(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.bangException(Throwable)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.classNotFound(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.classNotFoundForProtocol(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.connectionGetWarningsFailed()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.disconnectFailed()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.driverNotClassName(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.fileNotFound()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.forwardOnlyCursor(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.getConnectionFailed()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.iOException(IOException)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.ijException(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.illegalStatementName(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.needToDisconnect()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.noSuchAsyncStatement(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.noSuchConnection(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.noSuchProtocol(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.noSuchTable(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.noUsingResults()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.notJDBC20(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.notYetImplemented()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.objectWasNull(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.resourceNotFound()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.resultSetGetWarningsFailed()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.scrollCursorsNotSupported()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.statementGetWarningsFailed()",1,1,1
"org.apache.derby.impl.tools.ij.ijException.waitInterrupted(Throwable)",1,1,1
"org.apache.derby.impl.tools.ij.ijException.zeroInvalidForAbsolute()",1,1,1
"org.apache.derby.impl.tools.ij.ijExceptionResult.clearSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijExceptionResult.getException()",1,1,1
"org.apache.derby.impl.tools.ij.ijExceptionResult.getSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijExceptionResult.ijExceptionResult(SQLException)",1,1,1
"org.apache.derby.impl.tools.ij.ijExceptionResult.isException()",1,1,1
"org.apache.derby.impl.tools.ij.ijFatalException.getSQLState()",1,1,1
"org.apache.derby.impl.tools.ij.ijFatalException.ijFatalException()",1,1,1
"org.apache.derby.impl.tools.ij.ijFatalException.ijFatalException(SQLException)",1,1,1
"org.apache.derby.impl.tools.ij.ijFatalException.toString()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultiResult.clearSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultiResult.closeStatement()",1,2,2
"org.apache.derby.impl.tools.ij.ijMultiResult.getResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultiResult.getSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultiResult.getStatement()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultiResult.ijMultiResult(Statement,ResultSet,boolean)",1,1,1
"org.apache.derby.impl.tools.ij.ijMultiResult.isMulti()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.addResultSet(ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.clearSQLWarnings()",1,2,2
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.closeStatement()",1,4,4
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.getColumnDisplayList()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.getColumnWidthList()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.getMultipleResultSets()",1,1,1
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.getSQLWarnings()",1,4,4
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.ijMultipleResultSetResult(List)",1,1,1
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.ijMultipleResultSetResult(List,int[],int[])",1,1,1
"org.apache.derby.impl.tools.ij.ijMultipleResultSetResult.isMultipleResultSetResult()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.closeStatement()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getColumnDisplayList()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getColumnWidthList()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getConnection()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getException()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getMultipleResultSets()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getNextRowOfResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getStatement()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getUpdateCount()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.getVector()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.hasWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isConnection()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isException()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isMulti()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isMultipleResultSetResult()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isNextRowOfResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isStatement()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isUpdateCount()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.isVector()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultImpl.toString()",9,9,10
"org.apache.derby.impl.tools.ij.ijResultSetResult.clearSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultSetResult.closeStatement()",1,2,2
"org.apache.derby.impl.tools.ij.ijResultSetResult.getColumnDisplayList()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultSetResult.getColumnWidthList()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultSetResult.getResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultSetResult.getSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijResultSetResult.ijResultSetResult(ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.ijResultSetResult.ijResultSetResult(ResultSet,int[],int[])",1,1,1
"org.apache.derby.impl.tools.ij.ijResultSetResult.isResultSet()",1,2,2
"org.apache.derby.impl.tools.ij.ijRowResult.clearSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijRowResult.getNextRowOfResultSet()",1,1,2
"org.apache.derby.impl.tools.ij.ijRowResult.getSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijRowResult.ijRowResult(ResultSet,boolean)",1,1,1
"org.apache.derby.impl.tools.ij.ijRowResult.isNextRowOfResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.clearSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.closeStatement()",1,2,2
"org.apache.derby.impl.tools.ij.ijStatementResult.getResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.getSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.getStatement()",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.getUpdateCount()",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.ijStatementResult(Statement,boolean)",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.isResultSet()",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.isStatement()",1,1,1
"org.apache.derby.impl.tools.ij.ijStatementResult.isUpdateCount()",1,1,1
"org.apache.derby.impl.tools.ij.ijTokenException.ijTokenException(String)",1,1,1
"org.apache.derby.impl.tools.ij.ijVectorResult.clearSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijVectorResult.getSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijVectorResult.getVector()",1,1,1
"org.apache.derby.impl.tools.ij.ijVectorResult.ijVectorResult(Vector,SQLWarning)",1,1,1
"org.apache.derby.impl.tools.ij.ijVectorResult.isVector()",1,1,1
"org.apache.derby.impl.tools.ij.ijWarningResult.clearSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijWarningResult.getSQLWarnings()",1,1,1
"org.apache.derby.impl.tools.ij.ijWarningResult.ijWarningResult(SQLWarning)",1,1,1
"org.apache.derby.impl.tools.ij.ijXid.getBranchQualifier()",1,1,1
"org.apache.derby.impl.tools.ij.ijXid.getFormatId()",1,1,1
"org.apache.derby.impl.tools.ij.ijXid.getGlobalTransactionId()",1,1,1
"org.apache.derby.impl.tools.ij.ijXid.ijXid(int,byte[])",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.alterURL(String,String)",4,2,6
"org.apache.derby.impl.tools.ij.mtTestCase.getFile()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.getName()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.getPropFile()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.grab()",2,1,2
"org.apache.derby.impl.tools.ij.mtTestCase.initialize()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.initialize(String)",2,11,14
"org.apache.derby.impl.tools.ij.mtTestCase.mtTestCase()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.runMe(LocalizedOutput,LocalizedOutput,BufferedInputStream)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.setDescription(String)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.setFile(String)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.setIgnoreErrors(Hashtable)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.setInputDir(String)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.setName(String)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.setPropFile(String)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.setWeight(int)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.toString()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestCase.updateURLProperties(Properties,String)",1,3,3
"org.apache.derby.impl.tools.ij.mtTestSuite.getCases()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.getFinalCases()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.getInitCases()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.getNumThreads()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.getRoot()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.getTime()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.getTimeMillis()",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.grabTestCase()",1,2,2
"org.apache.derby.impl.tools.ij.mtTestSuite.init()",2,1,4
"org.apache.derby.impl.tools.ij.mtTestSuite.loadCases(Vector)",2,2,4
"org.apache.derby.impl.tools.ij.mtTestSuite.mtTestSuite(int,mtTime,Vector,Vector,Vector)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.setRoot(String)",1,1,1
"org.apache.derby.impl.tools.ij.mtTestSuite.toString()",1,4,4
"org.apache.derby.impl.tools.ij.mtTester.mtTester(String,mtTestSuite,LocalizedOutput,LocalizedOutput)",1,1,1
"org.apache.derby.impl.tools.ij.mtTester.noFailure()",1,1,1
"org.apache.derby.impl.tools.ij.mtTester.run()",3,8,8
"org.apache.derby.impl.tools.ij.mtTester.stop()",1,1,1
"org.apache.derby.impl.tools.ij.mtTime.mtTime(int,int,int)",1,1,1
"org.apache.derby.impl.tools.ij.mtTime.toString()",1,1,1
"org.apache.derby.impl.tools.ij.util.DisplayMulti(LocalizedOutput,PreparedStatement,ResultSet,Connection)",7,12,13
"org.apache.derby.impl.tools.ij.util.DisplayVector(LocalizedOutput,Vector)",1,2,2
"org.apache.derby.impl.tools.ij.util.Usage(LocalizedOutput)",1,1,1
"org.apache.derby.impl.tools.ij.util.getArg(String,String[])",5,2,5
"org.apache.derby.impl.tools.ij.util.getConnAttributeArg(String[])",4,4,4
"org.apache.derby.impl.tools.ij.util.getDataSourceConnection(String,String,String,String,boolean)",2,5,6
"org.apache.derby.impl.tools.ij.util.getFileArg(String[])",5,7,10
"org.apache.derby.impl.tools.ij.util.getInputResourceNameArg(String[])",1,1,1
"org.apache.derby.impl.tools.ij.util.getPropertyArg(String[])",4,4,4
"org.apache.derby.impl.tools.ij.util.getResourceAsStream(String)",2,1,3
"org.apache.derby.impl.tools.ij.util.getSelectedSchema(Connection)",4,2,6
"org.apache.derby.impl.tools.ij.util.getSystemProperty(String)",2,3,4
"org.apache.derby.impl.tools.ij.util.invalidArgs(String[])",8,9,13
"org.apache.derby.impl.tools.ij.util.isJCCFramework()",1,3,3
"org.apache.derby.impl.tools.ij.util.loadDriver(String)",1,1,1
"org.apache.derby.impl.tools.ij.util.loadDriverIfKnown(String)",3,3,3
"org.apache.derby.impl.tools.ij.util.loadWithTrimmedValues(InputStream,Properties)",1,2,2
"org.apache.derby.impl.tools.ij.util.qualifyResourceName(String,boolean)",4,3,6
"org.apache.derby.impl.tools.ij.util.run()",1,1,1
"org.apache.derby.impl.tools.ij.util.setupDataSource(Object,String,boolean)",4,8,10
"org.apache.derby.impl.tools.ij.util.startJBMS()",1,1,1
"org.apache.derby.impl.tools.ij.util.startJBMS(String,String)",1,1,1
"org.apache.derby.impl.tools.ij.util.startJBMS(String,String,Properties)",3,10,18
"org.apache.derby.impl.tools.ij.util.updateConnInfo(String,String,Properties)",1,5,8
"org.apache.derby.impl.tools.ij.util.util()",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.absolute(ResultSet,int)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.afterLast(ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.beforeFirst(ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.checkScrollableCursor(ResultSet,String)",2,2,2
"org.apache.derby.impl.tools.ij.utilMain.cleanupGo(LocalizedInput[])",1,7,11
"org.apache.derby.impl.tools.ij.utilMain.displayResult(LocalizedOutput,ijResult,Connection)",9,17,17
"org.apache.derby.impl.tools.ij.utilMain.doCatch(String)",1,7,7
"org.apache.derby.impl.tools.ij.utilMain.doPrompt(boolean,LocalizedOutput,String)",1,2,3
"org.apache.derby.impl.tools.ij.utilMain.doTrace(Throwable)",1,2,2
"org.apache.derby.impl.tools.ij.utilMain.first(ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.getConnAttributeDefaults()",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.getCurrentRowNumber(ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.go(LocalizedInput[],LocalizedOutput,Properties)",1,8,8
"org.apache.derby.impl.tools.ij.utilMain.goScript(Connection,LocalizedInput)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.handleSQLException(LocalizedOutput,SQLException)",5,5,7
"org.apache.derby.impl.tools.ij.utilMain.initFromEnvironment()",1,6,6
"org.apache.derby.impl.tools.ij.utilMain.last(ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.newInput(String)",2,2,3
"org.apache.derby.impl.tools.ij.utilMain.newResourceInput(String)",2,2,2
"org.apache.derby.impl.tools.ij.utilMain.previous(ResultSet)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.relative(ResultSet,int)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.run()",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.runScriptGuts()",1,17,22
"org.apache.derby.impl.tools.ij.utilMain.setMtUse(boolean)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.utilMain(int,LocalizedOutput)",1,1,1
"org.apache.derby.impl.tools.ij.utilMain.utilMain(int,LocalizedOutput,Hashtable)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.CPConnectStatement(ij,Token,Token,String)",1,3,3
"org.apache.derby.impl.tools.ij.xaHelper.CPDataSourceStatement(ij,Token,Token)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.CPDisconnectStatement(ij,String)",2,2,2
"org.apache.derby.impl.tools.ij.xaHelper.CPGetConnectionStatement(ij,String)",1,1,1
"org.apache.derby.impl.tools.ij.xaHelper.CommitStatement(ij,Token,Token,int)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.DataSourceStatement(ij,Token,Token,Token,Token,String)",1,4,4
"org.apache.derby.impl.tools.ij.xaHelper.EndStatement(ij,int,int)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.ForgetStatement(ij,int)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.PrepareStatement(ij,int)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.RecoverStatement(ij,int)",1,3,3
"org.apache.derby.impl.tools.ij.xaHelper.RollbackStatement(ij,int)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.StartStatement(ij,int,int)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.XAConnectStatement(ij,Token,Token,String)",1,5,6
"org.apache.derby.impl.tools.ij.xaHelper.XADataSourceStatement(ij,Token,Token,String)",1,12,15
"org.apache.derby.impl.tools.ij.xaHelper.XADisconnectStatement(ij,String)",2,2,2
"org.apache.derby.impl.tools.ij.xaHelper.XAGetConnectionStatement(ij,String)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.getXADataSource()",5,6,10
"org.apache.derby.impl.tools.ij.xaHelper.handleException(Throwable)",4,3,26
"org.apache.derby.impl.tools.ij.xaHelper.makeXid(int)",1,1,1
"org.apache.derby.impl.tools.ij.xaHelper.setDataSourceProperty(Object,String,String)",1,1,2
"org.apache.derby.impl.tools.ij.xaHelper.setDataSourceProperty(Object,String,boolean)",1,1,2
"org.apache.derby.impl.tools.ij.xaHelper.setDataSourceProperty(Object,String,int)",1,2,2
"org.apache.derby.impl.tools.ij.xaHelper.setFramework(String)",2,3,5
"org.apache.derby.impl.tools.ij.xaHelper.xaHelper()",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.argumentMatches(String[],String)",1,3,3
"org.apache.derby.impl.tools.sysinfo.Main.argumentsContain(String[],String)",3,2,3
"org.apache.derby.impl.tools.sysinfo.Main.checkDirectory(String)",4,2,6
"org.apache.derby.impl.tools.sysinfo.Main.checkFile(String)",6,6,11
"org.apache.derby.impl.tools.sysinfo.Main.checkForInfo(String)",4,3,4
"org.apache.derby.impl.tools.sysinfo.Main.crLf()",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.formatURL(URL)",1,9,11
"org.apache.derby.impl.tools.sysinfo.Main.found(String,String,String)",1,2,2
"org.apache.derby.impl.tools.sysinfo.Main.getAllInfo(String)",3,8,8
"org.apache.derby.impl.tools.sysinfo.Main.getClasspathInfo(String[],PrintWriter)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.getCompleteMessage(String,Object[])",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.getFileWhichLoadedClass(Class)",2,2,3
"org.apache.derby.impl.tools.sysinfo.Main.getJavaProperty(String)",1,2,2
"org.apache.derby.impl.tools.sysinfo.Main.getMainInfo(PrintWriter,boolean)",1,3,3
"org.apache.derby.impl.tools.sysinfo.Main.getTextMessage(String)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.getTextMessage(String,Object)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.getTextMessage(String,Object,Object)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.getTextMessage(String,Object,Object,Object)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.getTextMessage(String,Object,Object,Object,Object)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.loadZipFromResource()",4,2,4
"org.apache.derby.impl.tools.sysinfo.Main.lookForMainArg(String[],PrintWriter)",2,4,6
"org.apache.derby.impl.tools.sysinfo.Main.main(String[])",1,2,2
"org.apache.derby.impl.tools.sysinfo.Main.mergeZips(ZipInfoProperties[],ZipInfoProperties[])",1,9,12
"org.apache.derby.impl.tools.sysinfo.Main.notFound(String,String)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.parseArgs(String[])",2,2,5
"org.apache.derby.impl.tools.sysinfo.Main.parseClasspath(String)",2,2,3
"org.apache.derby.impl.tools.sysinfo.Main.pause()",1,1,2
"org.apache.derby.impl.tools.sysinfo.Main.reportDerby(PrintWriter)",1,4,4
"org.apache.derby.impl.tools.sysinfo.Main.reportJavaInfo(PrintWriter)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.reportLocales(PrintWriter)",1,7,7
"org.apache.derby.impl.tools.sysinfo.Main.tryAllClasspaths(PrintWriter)",1,2,2
"org.apache.derby.impl.tools.sysinfo.Main.tryAsResource(String,String,StringBuffer,StringBuffer)",1,2,2
"org.apache.derby.impl.tools.sysinfo.Main.tryClientClasspath(StringBuffer,StringBuffer)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.tryCoreClasspath(StringBuffer,StringBuffer)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.tryDB2DriverClasspath(StringBuffer,StringBuffer)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.tryMyClasspath(String,String,StringBuffer,StringBuffer)",1,2,2
"org.apache.derby.impl.tools.sysinfo.Main.tryNetClasspath(StringBuffer,StringBuffer)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.trySomeClasspaths(String[],PrintWriter)",1,10,10
"org.apache.derby.impl.tools.sysinfo.Main.tryUtilsClasspath(StringBuffer,StringBuffer)",1,1,1
"org.apache.derby.impl.tools.sysinfo.Main.useMe(String[],PrintWriter)",1,2,5
"org.apache.derby.impl.tools.sysinfo.ZipInfoProperties.ZipInfoProperties(ProductVersionHolder)",1,1,1
"org.apache.derby.impl.tools.sysinfo.ZipInfoProperties.getLocation()",2,2,2
"org.apache.derby.impl.tools.sysinfo.ZipInfoProperties.getVersionBuildInfo()",3,3,3
"org.apache.derby.impl.tools.sysinfo.ZipInfoProperties.setLocation(String)",1,1,1
"org.apache.derby.jdbc.AutoloadedDriver.acceptsURL(String)",1,2,2
"org.apache.derby.jdbc.AutoloadedDriver.connect(String,Properties)",2,1,2
"org.apache.derby.jdbc.AutoloadedDriver.getDriverModule()",2,3,3
"org.apache.derby.jdbc.AutoloadedDriver.getMajorVersion()",1,1,2
"org.apache.derby.jdbc.AutoloadedDriver.getMinorVersion()",1,1,2
"org.apache.derby.jdbc.AutoloadedDriver.getPropertyInfo(String,Properties)",1,1,1
"org.apache.derby.jdbc.AutoloadedDriver.isBooted()",1,1,1
"org.apache.derby.jdbc.AutoloadedDriver.jdbcCompliant()",1,1,2
"org.apache.derby.jdbc.AutoloadedDriver.registerDriverModule(Driver)",1,1,1
"org.apache.derby.jdbc.AutoloadedDriver.unregisterDriverModule()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.ClientBaseDataSource()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.addBeanProperties(Reference)",5,8,13
"org.apache.derby.jdbc.ClientBaseDataSource.checkBoolean(Properties,String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.checkEnumeration(Properties,String,String[])",4,2,6
"org.apache.derby.jdbc.ClientBaseDataSource.computeDncLogWriter(Connection,PrintWriter,String,String,boolean,String,int,int)",3,1,5
"org.apache.derby.jdbc.ClientBaseDataSource.computeDncLogWriter(PrintWriter,String,String,boolean,String,int,int)",3,1,5
"org.apache.derby.jdbc.ClientBaseDataSource.computeDncLogWriterForNewConnection(PrintWriter,String,String,boolean,int,String,int)",2,1,2
"org.apache.derby.jdbc.ClientBaseDataSource.computeDncLogWriterForNewConnection(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.computePrintWriter(PrintWriter,String,String,boolean,String,int)",4,4,5
"org.apache.derby.jdbc.ClientBaseDataSource.getClientSSLMode(Properties)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getConnectionAttributes()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getCreateDatabase()",1,1,2
"org.apache.derby.jdbc.ClientBaseDataSource.getDataSourceName()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getDatabaseName()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getDescription()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getLogWriter()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getLoginTimeout()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getPassword()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getPassword(Properties)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getPortNumber()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getReference()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getRetrieveMessageText()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getRetrieveMessageText(Properties)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getSSLModeFromString(String)",5,4,5
"org.apache.derby.jdbc.ClientBaseDataSource.getSecurityMechanism()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getSecurityMechanism(Properties)",1,2,2
"org.apache.derby.jdbc.ClientBaseDataSource.getSecurityMechanism(String)",2,2,2
"org.apache.derby.jdbc.ClientBaseDataSource.getServerName()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getShutdownDatabase()",1,1,2
"org.apache.derby.jdbc.ClientBaseDataSource.getSsl()",4,2,4
"org.apache.derby.jdbc.ClientBaseDataSource.getTraceDirectory()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getTraceDirectory(Properties)",2,2,2
"org.apache.derby.jdbc.ClientBaseDataSource.getTraceFile()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getTraceFile(Properties)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getTraceFileAppend()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getTraceFileAppend(Properties)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getTraceLevel()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getTraceLevel(Properties)",1,2,2
"org.apache.derby.jdbc.ClientBaseDataSource.getUpgradedSecurityMechanism(String)",2,1,2
"org.apache.derby.jdbc.ClientBaseDataSource.getUser()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.getUser(Properties)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.maxStatementsToPool()",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.parseBoolean(String,boolean)",2,3,3
"org.apache.derby.jdbc.ClientBaseDataSource.parseInt(String,int)",2,2,2
"org.apache.derby.jdbc.ClientBaseDataSource.parseShort(String,short)",2,2,2
"org.apache.derby.jdbc.ClientBaseDataSource.parseString(String,String)",2,1,2
"org.apache.derby.jdbc.ClientBaseDataSource.readSystemProperty(String)",1,1,2
"org.apache.derby.jdbc.ClientBaseDataSource.setConnectionAttributes(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setCreateDatabase(String)",1,2,3
"org.apache.derby.jdbc.ClientBaseDataSource.setDataSourceName(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setDatabaseName(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setDescription(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setLogWriter(PrintWriter)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setLoginTimeout(int)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setPassword(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setPortNumber(int)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setRetrieveMessageText(boolean)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setSecurityMechanism(short)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setServerName(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setShutdownDatabase(String)",1,2,3
"org.apache.derby.jdbc.ClientBaseDataSource.setSsl(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setSsl(int)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setTraceDirectory(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setTraceFile(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setTraceFileAppend(boolean)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setTraceLevel(int)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.setUser(String)",1,1,1
"org.apache.derby.jdbc.ClientBaseDataSource.tokenizeAttributes(String,Properties)",4,3,6
"org.apache.derby.jdbc.ClientBaseDataSource.updateDataSourceValues(Properties)",2,8,9
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.ClientConnectionPoolDataSource()",1,1,1
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.getMaxStatements()",1,1,1
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.getPooledConnection()",1,4,4
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.getPooledConnection(String,String)",1,4,4
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.getPooledConnectionX(LogWriter,ClientBaseDataSource,String,String)",1,1,1
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.maxStatementsToPool()",1,1,1
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.readObject(ObjectInputStream)",1,1,1
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.setMaxStatements(int)",2,2,2
"org.apache.derby.jdbc.ClientConnectionPoolDataSource.validateState()",2,2,2
"org.apache.derby.jdbc.ClientConnectionPoolDataSource40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.jdbc.ClientConnectionPoolDataSource40.unwrap(Class<T>)",1,2,2
"org.apache.derby.jdbc.ClientDataSource.ClientDataSource()",1,1,1
"org.apache.derby.jdbc.ClientDataSource.getConnection()",1,1,1
"org.apache.derby.jdbc.ClientDataSource.getConnection(String,String)",1,2,2
"org.apache.derby.jdbc.ClientDataSource40.ClientDataSource40()",1,1,1
"org.apache.derby.jdbc.ClientDataSource40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.jdbc.ClientDataSource40.unwrap(Class<T>)",1,2,2
"org.apache.derby.jdbc.ClientDriver.ClientDriver()",1,1,1
"org.apache.derby.jdbc.ClientDriver.acceptsURL(String)",1,2,2
"org.apache.derby.jdbc.ClientDriver.appendDatabaseAttributes(String,Properties)",3,4,5
"org.apache.derby.jdbc.ClientDriver.connect(String,Properties)",5,3,10
"org.apache.derby.jdbc.ClientDriver.createDefaultFactoryImpl()",1,1,1
"org.apache.derby.jdbc.ClientDriver.createJDBC40FactoryImpl()",1,4,4
"org.apache.derby.jdbc.ClientDriver.getFactory()",2,2,3
"org.apache.derby.jdbc.ClientDriver.getMajorVersion()",1,1,1
"org.apache.derby.jdbc.ClientDriver.getMinorVersion()",1,1,1
"org.apache.derby.jdbc.ClientDriver.getPropertyInfo(String,Properties)",1,1,2
"org.apache.derby.jdbc.ClientDriver.jdbcCompliant()",1,1,1
"org.apache.derby.jdbc.ClientDriver.tokenizeDatabase(StringTokenizer,String)",1,1,2
"org.apache.derby.jdbc.ClientDriver.tokenizeOptionalPortNumber(StringTokenizer,String)",4,2,5
"org.apache.derby.jdbc.ClientDriver.tokenizeProtocol(String,StringTokenizer)",7,2,9
"org.apache.derby.jdbc.ClientDriver.tokenizeServerName(StringTokenizer,String)",2,1,3
"org.apache.derby.jdbc.ClientDriver.tokenizeURLProperties(String,Properties)",1,3,3
"org.apache.derby.jdbc.ClientXADataSource.ClientXADataSource()",1,1,1
"org.apache.derby.jdbc.ClientXADataSource.getXAConnection()",1,1,1
"org.apache.derby.jdbc.ClientXADataSource.getXAConnection(String,String)",1,2,2
"org.apache.derby.jdbc.ClientXADataSource.getXAConnectionX(LogWriter,ClientBaseDataSource,String,String)",1,1,1
"org.apache.derby.jdbc.ClientXADataSource40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.jdbc.ClientXADataSource40.unwrap(Class<T>)",1,2,2
"org.apache.derby.jdbc.Driver169.Driver169()",1,1,1
"org.apache.derby.jdbc.Driver169.checkSystemPrivileges(String,Permission)",1,1,1
"org.apache.derby.jdbc.Driver169.getNewEmbedConnection(String,Properties)",1,1,1
"org.apache.derby.jdbc.Driver169.getNewNestedConnection(EmbedConnection)",1,1,1
"org.apache.derby.jdbc.Driver169.newEmbedCallableStatement(EmbedConnection,String,int,int,int)",1,1,1
"org.apache.derby.jdbc.Driver169.newEmbedPreparedStatement(EmbedConnection,String,boolean,int,int,int,int,int[],String[])",1,1,1
"org.apache.derby.jdbc.Driver169.newEmbedResultSet(EmbedConnection,ResultSet,boolean,EmbedStatement,boolean)",1,1,1
"org.apache.derby.jdbc.Driver169.newEmbedStatement(EmbedConnection,boolean,int,int,int)",1,1,1
"org.apache.derby.jdbc.Driver20.boot(boolean,Properties)",1,1,1
"org.apache.derby.jdbc.Driver20.checkSystemPrivileges(String,Permission)",1,1,1
"org.apache.derby.jdbc.Driver20.getPropertyInfo(String,Properties)",4,8,11
"org.apache.derby.jdbc.Driver20.newEmbedResultSet(EmbedConnection,ResultSet,boolean,EmbedStatement,boolean)",1,1,1
"org.apache.derby.jdbc.Driver20.stop()",1,1,1
"org.apache.derby.jdbc.Driver30.getNewEmbedConnection(String,Properties)",1,1,1
"org.apache.derby.jdbc.Driver30.getNewNestedConnection(EmbedConnection)",1,2,2
"org.apache.derby.jdbc.Driver30.getNewPooledConnection(EmbeddedDataSource,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.Driver30.getNewXAConnection(EmbeddedDataSource,ResourceAdapter,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.Driver30.newBrokeredConnection(BrokeredConnectionControl)",1,1,1
"org.apache.derby.jdbc.Driver30.newEmbedCallableStatement(EmbedConnection,String,int,int,int)",1,1,1
"org.apache.derby.jdbc.Driver30.newEmbedPreparedStatement(EmbedConnection,String,boolean,int,int,int,int,int[],String[])",1,1,1
"org.apache.derby.jdbc.Driver40.boot(boolean,Properties)",1,1,1
"org.apache.derby.jdbc.Driver40.getNewEmbedConnection(String,Properties)",1,1,1
"org.apache.derby.jdbc.Driver40.getNewNestedConnection(EmbedConnection)",1,2,2
"org.apache.derby.jdbc.Driver40.getNewPooledConnection(EmbeddedDataSource,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.Driver40.getNewXAConnection(EmbeddedDataSource,ResourceAdapter,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.Driver40.newBrokeredConnection(BrokeredConnectionControl)",1,1,1
"org.apache.derby.jdbc.Driver40.newEmbedCallableStatement(EmbedConnection,String,int,int,int)",1,1,1
"org.apache.derby.jdbc.Driver40.newEmbedDatabaseMetaData(EmbedConnection,String)",1,1,1
"org.apache.derby.jdbc.Driver40.newEmbedPreparedStatement(EmbedConnection,String,boolean,int,int,int,int,int[],String[])",1,1,1
"org.apache.derby.jdbc.Driver40.newEmbedResultSet(EmbedConnection,ResultSet,boolean,EmbedStatement,boolean)",1,1,1
"org.apache.derby.jdbc.Driver40.newEmbedResultSetMetaData(ResultColumnDescriptor[])",1,1,1
"org.apache.derby.jdbc.Driver40.newEmbedStatement(EmbedConnection,boolean,int,int,int)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.EmbedPooledConnection(ReferenceableDataSource,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.addConnectionEventListener(ConnectionEventListener)",3,1,4
"org.apache.derby.jdbc.EmbedPooledConnection.checkActive()",2,2,2
"org.apache.derby.jdbc.EmbedPooledConnection.checkAutoCommit(boolean)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.checkCommit()",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.checkHoldCursors(int,boolean)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.checkRollback()",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.checkSavepoint()",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.close()",2,3,4
"org.apache.derby.jdbc.EmbedPooledConnection.closeCurrentConnectionHandle()",1,2,2
"org.apache.derby.jdbc.EmbedPooledConnection.closingConnection()",1,4,4
"org.apache.derby.jdbc.EmbedPooledConnection.getConnection()",1,2,2
"org.apache.derby.jdbc.EmbedPooledConnection.getLanguageConnection()",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.getNewCurrentConnectionHandle()",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.getPassword()",2,1,2
"org.apache.derby.jdbc.EmbedPooledConnection.getRealConnection()",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.getUsername()",2,2,3
"org.apache.derby.jdbc.EmbedPooledConnection.isIsolationLevelSetUsingSQLorJDBC()",2,2,2
"org.apache.derby.jdbc.EmbedPooledConnection.nextId()",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.notifyError(SQLException)",2,4,5
"org.apache.derby.jdbc.EmbedPooledConnection.notifyException(SQLException)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.onStatementClose(PreparedStatement)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.onStatementErrorOccurred(PreparedStatement,SQLException)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.openRealConnection()",1,2,2
"org.apache.derby.jdbc.EmbedPooledConnection.removeConnectionEventListener(ConnectionEventListener)",2,2,3
"org.apache.derby.jdbc.EmbedPooledConnection.resetIsolationLevelFlag()",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.resetRealConnection()",1,6,6
"org.apache.derby.jdbc.EmbedPooledConnection.toString()",1,3,3
"org.apache.derby.jdbc.EmbedPooledConnection.wrapStatement(CallableStatement,String)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.wrapStatement(PreparedStatement,String,Object)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection.wrapStatement(Statement)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection40.EmbedPooledConnection40(ReferenceableDataSource,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.EmbedPooledConnection40.addStatementEventListener(StatementEventListener)",3,1,3
"org.apache.derby.jdbc.EmbedPooledConnection40.onStatementClose(PreparedStatement)",1,3,3
"org.apache.derby.jdbc.EmbedPooledConnection40.onStatementErrorOccurred(PreparedStatement,SQLException)",1,3,3
"org.apache.derby.jdbc.EmbedPooledConnection40.removeStatementEventListener(StatementEventListener)",2,1,2
"org.apache.derby.jdbc.EmbedXAConnection.EmbedXAConnection(EmbeddedDataSource,ResourceAdapter,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.EmbedXAConnection.checkAutoCommit(boolean)",2,3,3
"org.apache.derby.jdbc.EmbedXAConnection.checkCommit()",2,2,2
"org.apache.derby.jdbc.EmbedXAConnection.checkHoldCursors(int,boolean)",4,4,4
"org.apache.derby.jdbc.EmbedXAConnection.checkRollback()",2,2,2
"org.apache.derby.jdbc.EmbedXAConnection.checkSavepoint()",2,2,2
"org.apache.derby.jdbc.EmbedXAConnection.getConnection()",3,3,3
"org.apache.derby.jdbc.EmbedXAConnection.getRealConnection()",2,1,2
"org.apache.derby.jdbc.EmbedXAConnection.getXAResource()",1,1,1
"org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(CallableStatement,String)",1,1,1
"org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(PreparedStatement,String,Object)",1,1,1
"org.apache.derby.jdbc.EmbedXAConnection.wrapStatement(Statement)",1,1,1
"org.apache.derby.jdbc.EmbedXAConnection40.EmbedXAConnection40(EmbeddedDataSource,ResourceAdapter,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.EmbedXAConnection40.addStatementEventListener(StatementEventListener)",3,1,3
"org.apache.derby.jdbc.EmbedXAConnection40.onStatementClose(PreparedStatement)",1,3,3
"org.apache.derby.jdbc.EmbedXAConnection40.onStatementErrorOccurred(PreparedStatement,SQLException)",1,3,3
"org.apache.derby.jdbc.EmbedXAConnection40.removeStatementEventListener(StatementEventListener)",2,1,2
"org.apache.derby.jdbc.EmbedXAResource.EmbedXAResource(EmbedPooledConnection,ResourceAdapter)",1,1,1
"org.apache.derby.jdbc.EmbedXAResource.checkUserCredentials(EmbedXAResource)",3,2,4
"org.apache.derby.jdbc.EmbedXAResource.checkXAActive()",1,2,2
"org.apache.derby.jdbc.EmbedXAResource.closeUnusedConnection(EmbedConnection)",1,2,3
"org.apache.derby.jdbc.EmbedXAResource.commit(Xid,boolean)",7,6,11
"org.apache.derby.jdbc.EmbedXAResource.end(Xid,int)",5,4,8
"org.apache.derby.jdbc.EmbedXAResource.forget(Xid)",3,3,5
"org.apache.derby.jdbc.EmbedXAResource.getCurrentXid()",1,1,1
"org.apache.derby.jdbc.EmbedXAResource.getDefaultXATransactionTimeout()",1,3,3
"org.apache.derby.jdbc.EmbedXAResource.getTransactionState(XAXactId)",1,1,1
"org.apache.derby.jdbc.EmbedXAResource.getTransactionTimeout()",1,1,1
"org.apache.derby.jdbc.EmbedXAResource.isSameRM(XAResource)",2,1,2
"org.apache.derby.jdbc.EmbedXAResource.prepare(Xid)",8,8,13
"org.apache.derby.jdbc.EmbedXAResource.recover(int)",1,2,2
"org.apache.derby.jdbc.EmbedXAResource.removeXATransaction(XAXactId)",1,2,2
"org.apache.derby.jdbc.EmbedXAResource.returnConnectionToResource(XATransactionState,XAXactId)",2,4,5
"org.apache.derby.jdbc.EmbedXAResource.rollback(Xid)",5,6,9
"org.apache.derby.jdbc.EmbedXAResource.setCurrentXid(XAXactId)",1,1,1
"org.apache.derby.jdbc.EmbedXAResource.setTransactionTimeout(int)",2,1,2
"org.apache.derby.jdbc.EmbedXAResource.start(Xid,int)",12,18,26
"org.apache.derby.jdbc.EmbedXAResource.wrapInXAException(SQLException)",1,6,9
"org.apache.derby.jdbc.EmbedXAResource.wrapInXAException(StandardException)",1,1,1
"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource.EmbeddedConnectionPoolDataSource()",1,1,1
"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource.createPooledConnection(String,String,boolean)",1,1,1
"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource.getPooledConnection()",1,1,1
"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource.getPooledConnection(String,String)",1,1,1
"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.jdbc.EmbeddedConnectionPoolDataSource40.unwrap(Class<T>)",1,2,2
"org.apache.derby.jdbc.EmbeddedDataSource.EmbeddedDataSource()",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.equals(Object)",2,8,21
"org.apache.derby.jdbc.EmbeddedDataSource.findDriver()",1,5,5
"org.apache.derby.jdbc.EmbeddedDataSource.getAttributesAsPassword()",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.getConnection()",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.getConnection(String,String)",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.getConnection(String,String,boolean)",2,8,11
"org.apache.derby.jdbc.EmbeddedDataSource.getConnectionAttributes()",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.getCreateDatabase()",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.getShutdownDatabase()",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.setAttributesAsPassword(boolean)",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.setConnectionAttributes(String)",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource.setCreateDatabase(String)",1,2,3
"org.apache.derby.jdbc.EmbeddedDataSource.setShutdownDatabase(String)",1,2,3
"org.apache.derby.jdbc.EmbeddedDataSource.update()",1,5,6
"org.apache.derby.jdbc.EmbeddedDataSource40.EmbeddedDataSource40()",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.jdbc.EmbeddedDataSource40.unwrap(Class<T>)",1,2,2
"org.apache.derby.jdbc.EmbeddedDriver.EmbeddedDriver()",1,1,1
"org.apache.derby.jdbc.EmbeddedDriver.acceptsURL(String)",1,1,1
"org.apache.derby.jdbc.EmbeddedDriver.boot()",1,1,2
"org.apache.derby.jdbc.EmbeddedDriver.connect(String,Properties)",1,1,1
"org.apache.derby.jdbc.EmbeddedDriver.getDriverModule()",1,1,1
"org.apache.derby.jdbc.EmbeddedDriver.getMajorVersion()",1,1,2
"org.apache.derby.jdbc.EmbeddedDriver.getMinorVersion()",1,1,2
"org.apache.derby.jdbc.EmbeddedDriver.getPropertyInfo(String,Properties)",1,1,1
"org.apache.derby.jdbc.EmbeddedDriver.jdbcCompliant()",1,1,2
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.EmbeddedSimpleDataSource()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.findDriver()",4,6,6
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnection(String,String)",2,6,6
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getConnectionAttributes()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getCreateDatabase()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getDataSourceName()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getDatabaseName()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getDescription()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getLogWriter()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getLoginTimeout()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getPassword()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getShutdownDatabase()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.getUser()",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setConnectionAttributes(String)",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setCreateDatabase(String)",1,2,3
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setDataSourceName(String)",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setDatabaseName(String)",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setDescription(String)",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setLogWriter(PrintWriter)",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setLoginTimeout(int)",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setPassword(String)",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setShutdownDatabase(String)",1,2,3
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.setUser(String)",1,1,1
"org.apache.derby.jdbc.EmbeddedSimpleDataSource.update()",1,5,6
"org.apache.derby.jdbc.EmbeddedXADataSource.EmbeddedXADataSource()",1,1,1
"org.apache.derby.jdbc.EmbeddedXADataSource.createXAConnection(ResourceAdapter,String,String,boolean)",1,1,1
"org.apache.derby.jdbc.EmbeddedXADataSource.getResourceAdapter()",1,1,1
"org.apache.derby.jdbc.EmbeddedXADataSource.getXAConnection()",1,3,3
"org.apache.derby.jdbc.EmbeddedXADataSource.getXAConnection(String,String)",1,3,3
"org.apache.derby.jdbc.EmbeddedXADataSource.setupResourceAdapter(String,String,boolean)",4,10,10
"org.apache.derby.jdbc.EmbeddedXADataSource.update()",1,1,1
"org.apache.derby.jdbc.EmbeddedXADataSource40.EmbeddedXADataSource40()",1,1,1
"org.apache.derby.jdbc.EmbeddedXADataSource40.isWrapperFor(Class<?>)",1,1,1
"org.apache.derby.jdbc.EmbeddedXADataSource40.unwrap(Class<T>)",1,2,2
"org.apache.derby.jdbc.InternalDriver.InternalDriver()",1,1,1
"org.apache.derby.jdbc.InternalDriver.acceptsURL(String)",1,2,2
"org.apache.derby.jdbc.InternalDriver.activeDriver()",1,1,1
"org.apache.derby.jdbc.InternalDriver.boot(boolean,Properties)",1,1,1
"org.apache.derby.jdbc.InternalDriver.checkBoolean(Properties,String)",1,1,1
"org.apache.derby.jdbc.InternalDriver.checkEnumeration(Properties,String,String[])",4,2,6
"org.apache.derby.jdbc.InternalDriver.checkShutdownPrivileges(String)",2,3,4
"org.apache.derby.jdbc.InternalDriver.connect(String,Properties)",10,9,12
"org.apache.derby.jdbc.InternalDriver.embeddedDriverAcceptsURL(String)",1,4,4
"org.apache.derby.jdbc.InternalDriver.getAttributes(String,Properties)",3,3,3
"org.apache.derby.jdbc.InternalDriver.getAuthenticationService()",1,3,3
"org.apache.derby.jdbc.InternalDriver.getConnectionContext()",1,2,2
"org.apache.derby.jdbc.InternalDriver.getContextServiceFactory()",1,1,1
"org.apache.derby.jdbc.InternalDriver.getCurrentContextManager()",1,1,1
"org.apache.derby.jdbc.InternalDriver.getDatabaseName(String,Properties)",2,4,5
"org.apache.derby.jdbc.InternalDriver.getMajorVersion()",1,1,1
"org.apache.derby.jdbc.InternalDriver.getMinorVersion()",1,1,1
"org.apache.derby.jdbc.InternalDriver.isActive()",1,1,1
"org.apache.derby.jdbc.InternalDriver.jdbcCompliant()",1,1,1
"org.apache.derby.jdbc.InternalDriver.newEmbedDatabaseMetaData(EmbedConnection,String)",1,1,1
"org.apache.derby.jdbc.InternalDriver.newEmbedResultSetMetaData(ResultColumnDescriptor[])",1,1,1
"org.apache.derby.jdbc.InternalDriver.newEmbedStatement(EmbedConnection,boolean,int,int,int)",1,1,1
"org.apache.derby.jdbc.InternalDriver.stop()",1,1,1
"org.apache.derby.jdbc.JDBC.JDBC(InternalDriver)",1,1,1
"org.apache.derby.jdbc.JDBC.acceptsURL(String)",1,1,1
"org.apache.derby.jdbc.JDBC.getDriverLevel()",1,1,1
"org.apache.derby.jdbc.JDBC.getMajorVersion()",1,1,1
"org.apache.derby.jdbc.JDBC.getMinorVersion()",1,1,1
"org.apache.derby.jdbc.JDBC.isCompliantDriver()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.ReferenceableDataSource()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.getConnection(String,String,boolean)",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.getDataSourceName()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.getDatabaseName()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.getDescription()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.getLogWriter()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.getLoginTimeout()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.getObjectInstance(Object,Name,Context,Hashtable)",1,4,4
"org.apache.derby.jdbc.ReferenceableDataSource.getPassword()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.getReference()",5,7,12
"org.apache.derby.jdbc.ReferenceableDataSource.getUser()",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.setDataSourceName(String)",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.setDatabaseName(String)",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.setDescription(String)",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.setLogWriter(PrintWriter)",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.setLoginTimeout(int)",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.setPassword(String)",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.setUser(String)",1,1,1
"org.apache.derby.jdbc.ReferenceableDataSource.update()",1,1,1
"org.apache.derby.jdbc.ResourceAdapterImpl.addConnection(XAXactId,Object)",2,1,2
"org.apache.derby.jdbc.ResourceAdapterImpl.boot(boolean,Properties)",1,1,1
"org.apache.derby.jdbc.ResourceAdapterImpl.cancelXATransaction(XAXactId,String)",1,2,2
"org.apache.derby.jdbc.ResourceAdapterImpl.findConnection(XAXactId)",1,1,1
"org.apache.derby.jdbc.ResourceAdapterImpl.getXAResourceManager()",1,1,1
"org.apache.derby.jdbc.ResourceAdapterImpl.isActive()",1,1,1
"org.apache.derby.jdbc.ResourceAdapterImpl.removeConnection(XAXactId)",1,1,1
"org.apache.derby.jdbc.ResourceAdapterImpl.stop()",1,2,3
"org.apache.derby.jdbc.XAStatementControl.XAStatementControl(EmbedXAConnection)",1,1,1
"org.apache.derby.jdbc.XAStatementControl.XAStatementControl(EmbedXAConnection,CallableStatement,String)",1,1,1
"org.apache.derby.jdbc.XAStatementControl.XAStatementControl(EmbedXAConnection,PreparedStatement,String,Object)",1,1,1
"org.apache.derby.jdbc.XAStatementControl.XAStatementControl(EmbedXAConnection,Statement)",1,1,1
"org.apache.derby.jdbc.XAStatementControl.checkHoldCursors(int)",1,1,1
"org.apache.derby.jdbc.XAStatementControl.getRealCallableStatement()",3,3,5
"org.apache.derby.jdbc.XAStatementControl.getRealPreparedStatement()",3,3,5
"org.apache.derby.jdbc.XAStatementControl.getRealStatement()",3,3,5
"org.apache.derby.jdbc.XAStatementControl.wrapResultSet(Statement,ResultSet)",1,2,2
"org.apache.derby.jdbc.XATransactionState.CancelXATransactionTask.CancelXATransactionTask()",1,1,1
"org.apache.derby.jdbc.XATransactionState.CancelXATransactionTask.run()",1,2,2
"org.apache.derby.jdbc.XATransactionState.XATransactionState(ContextManager,EmbedConnection,EmbedXAResource,XAXactId)",1,1,1
"org.apache.derby.jdbc.XATransactionState.cancel(String)",2,5,5
"org.apache.derby.jdbc.XATransactionState.cleanupOnError(Throwable)",3,5,6
"org.apache.derby.jdbc.XATransactionState.end(EmbedXAResource,int,boolean)",13,9,21
"org.apache.derby.jdbc.XATransactionState.scheduleTimeoutTask(long)",1,2,2
"org.apache.derby.jdbc.XATransactionState.start(EmbedXAResource,int)",9,5,13
"org.apache.derby.jdbc.XATransactionState.xa_commit(boolean)",1,1,1
"org.apache.derby.jdbc.XATransactionState.xa_finalize()",1,2,2
"org.apache.derby.jdbc.XATransactionState.xa_prepare()",1,1,1
"org.apache.derby.jdbc.XATransactionState.xa_rollback()",1,1,1
"org.apache.derby.mbeans.Management.getManagementService()",1,1,1
"org.apache.derby.mbeans.Management.getSystemIdentifier()",2,1,2
"org.apache.derby.mbeans.Management.isManagementActive()",2,1,2
"org.apache.derby.mbeans.Management.startManagement()",1,2,2
"org.apache.derby.mbeans.Management.stopManagement()",1,2,2
"org.apache.derby.osgi.EmbeddedActivator.start(BundleContext)",1,1,1
"org.apache.derby.osgi.EmbeddedActivator.stop(BundleContext)",1,1,2
"org.apache.derby.security.DatabasePermission.DatabasePermission(String,String)",1,1,1
"org.apache.derby.security.DatabasePermission.equals(Object)",3,2,4
"org.apache.derby.security.DatabasePermission.getActions()",1,1,1
"org.apache.derby.security.DatabasePermission.hashCode()",1,1,1
"org.apache.derby.security.DatabasePermission.implies(Permission)",8,4,9
"org.apache.derby.security.DatabasePermission.initActions(String)",5,2,5
"org.apache.derby.security.DatabasePermission.initLocation(String)",5,10,13
"org.apache.derby.security.DatabasePermission.readObject(ObjectInputStream)",1,1,1
"org.apache.derby.security.DatabasePermission.writeObject(ObjectOutputStream)",1,1,1
"org.apache.derby.security.SystemPermission.SystemPermission(String,String)",2,1,2
"org.apache.derby.security.SystemPermission.equals(Object)",2,1,2
"org.apache.derby.security.SystemPermission.getActionMask(String)",1,2,3
"org.apache.derby.security.SystemPermission.getActions()",1,1,1
"org.apache.derby.security.SystemPermission.getCanonicalForm(String)",1,5,6
"org.apache.derby.security.SystemPermission.implies(Permission)",2,1,2
"org.apache.derby.shared.common.error.ExceptionUtil.getSQLStateFromIdentifier(String)",2,1,2
"org.apache.derby.shared.common.error.ExceptionUtil.getSeverityFromIdentifier(String)",6,6,17
"org.apache.derby.shared.common.i18n.MessageUtil.MessageUtil(String)",1,1,1
"org.apache.derby.shared.common.i18n.MessageUtil.composeDefaultMessage(String,Object[])",2,5,6
"org.apache.derby.shared.common.i18n.MessageUtil.countParams(String)",1,2,5
"org.apache.derby.shared.common.i18n.MessageUtil.formatMessage(ResourceBundle,String,Object[],boolean)",5,3,12
"org.apache.derby.shared.common.i18n.MessageUtil.getCompleteMessage(Locale,String,String,Object[],boolean)",1,2,2
"org.apache.derby.shared.common.i18n.MessageUtil.getCompleteMessage(String,Object[])",1,1,1
"org.apache.derby.shared.common.i18n.MessageUtil.getCompleteMessage(String,String,Object[])",1,1,1
"org.apache.derby.shared.common.i18n.MessageUtil.getTextMessage(String)",1,1,1
"org.apache.derby.shared.common.i18n.MessageUtil.getTextMessage(String,Object)",1,1,1
"org.apache.derby.shared.common.i18n.MessageUtil.getTextMessage(String,Object,Object)",1,1,1
"org.apache.derby.shared.common.i18n.MessageUtil.getTextMessage(String,Object,Object,Object)",1,1,1
"org.apache.derby.shared.common.i18n.MessageUtil.getTextMessage(String,Object,Object,Object,Object)",1,1,1
"org.apache.derby.shared.common.sanity.AssertFailure.AssertFailure(String)",1,1,1
"org.apache.derby.shared.common.sanity.AssertFailure.AssertFailure(String,Throwable)",1,1,1
"org.apache.derby.shared.common.sanity.SanityManager.ASSERT(boolean)",4,5,5
"org.apache.derby.shared.common.sanity.SanityManager.ASSERT(boolean,String)",4,5,5
"org.apache.derby.shared.common.sanity.SanityManager.DEBUG(String,String)",1,3,3
"org.apache.derby.shared.common.sanity.SanityManager.DEBUG_ALL_OFF()",1,1,2
"org.apache.derby.shared.common.sanity.SanityManager.DEBUG_ALL_ON()",1,1,2
"org.apache.derby.shared.common.sanity.SanityManager.DEBUG_CLEAR(String)",1,4,4
"org.apache.derby.shared.common.sanity.SanityManager.DEBUG_ON(String)",5,7,7
"org.apache.derby.shared.common.sanity.SanityManager.DEBUG_PRINT(String,String)",1,1,1
"org.apache.derby.shared.common.sanity.SanityManager.DEBUG_SET(String)",1,4,4
"org.apache.derby.shared.common.sanity.SanityManager.GET_DEBUG_STREAM()",1,1,1
"org.apache.derby.shared.common.sanity.SanityManager.NOTREACHED()",1,1,1
"org.apache.derby.shared.common.sanity.SanityManager.SET_DEBUG_STREAM(PrintWriter)",1,1,1
"org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(String)",1,1,1
"org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(String,Throwable)",1,4,4
"org.apache.derby.shared.common.sanity.SanityManager.THROWASSERT(Throwable)",1,1,1
"org.apache.derby.shared.common.sanity.SanityManager.showTrace(AssertFailure)",1,1,1
"org.apache.derby.shared.common.sanity.SanityManager.showTrace(Throwable)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.DisplayBanner(PrintStream,ResultSetMetaData)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.DisplayBanner(PrintWriter,ResultSetMetaData)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.DisplayCurrentRow(PrintStream,ResultSet,Connection)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.DisplayCurrentRow(PrintWriter,ResultSet,Connection)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.DisplayMultipleResults(PrintWriter,List,Connection,int[],int[])",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.DisplayNestedResults(PrintStream,Vector,Connection,int)",2,2,4
"org.apache.derby.tools.JDBCDisplayUtil.DisplayNestedResults(PrintWriter,Vector,Connection,int)",2,3,4
"org.apache.derby.tools.JDBCDisplayUtil.DisplayNextRow(PrintStream,ResultSet,Connection)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.DisplayNextRow(PrintWriter,ResultSet,Connection)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(PrintStream,ResultSet,Connection)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(PrintStream,Statement,Connection)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(PrintWriter,ResultSet,Connection,int[],int[])",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.DisplayResults(PrintWriter,Statement,Connection)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.DisplayRow(PrintStream,ResultSet,ResultSetMetaData,int,Vector,Connection,int,int[],int[])",2,10,14
"org.apache.derby.tools.JDBCDisplayUtil.DisplayRow(PrintWriter,ResultSet,ResultSetMetaData,int,Vector,Connection,int,int[],int[])",2,10,14
"org.apache.derby.tools.JDBCDisplayUtil.DisplayUpdateCount(PrintStream,int,int)",1,3,3
"org.apache.derby.tools.JDBCDisplayUtil.DisplayUpdateCount(PrintWriter,int,int)",1,3,3
"org.apache.derby.tools.JDBCDisplayUtil.ShowException(PrintStream,Throwable)",2,2,3
"org.apache.derby.tools.JDBCDisplayUtil.ShowException(PrintWriter,Throwable)",2,2,3
"org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(PrintStream,SQLException)",1,3,3
"org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(PrintWriter,SQLException)",1,3,3
"org.apache.derby.tools.JDBCDisplayUtil.ShowWarnings(PrintStream,Connection)",1,4,4
"org.apache.derby.tools.JDBCDisplayUtil.ShowWarnings(PrintStream,ResultSet)",1,4,4
"org.apache.derby.tools.JDBCDisplayUtil.ShowWarnings(PrintStream,SQLWarning)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.ShowWarnings(PrintStream,Statement)",1,4,4
"org.apache.derby.tools.JDBCDisplayUtil.ShowWarnings(PrintWriter,Connection)",1,4,4
"org.apache.derby.tools.JDBCDisplayUtil.ShowWarnings(PrintWriter,ResultSet)",1,4,4
"org.apache.derby.tools.JDBCDisplayUtil.ShowWarnings(PrintWriter,SQLWarning)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.ShowWarnings(PrintWriter,Statement)",1,4,4
"org.apache.derby.tools.JDBCDisplayUtil.checkNotNull(Object,String)",2,2,2
"org.apache.derby.tools.JDBCDisplayUtil.doTrace(PrintStream,Exception)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.doTrace(PrintWriter,Exception)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.getColumnDisplayWidths(ResultSetMetaData,int[],boolean)",1,4,6
"org.apache.derby.tools.JDBCDisplayUtil.getSystemBoolean(String)",1,1,2
"org.apache.derby.tools.JDBCDisplayUtil.indent(PrintStream,int)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.indent(PrintWriter,int)",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayBanner(PrintStream,ResultSetMetaData,int,int[],int[])",1,12,14
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayBanner(PrintWriter,ResultSetMetaData,int,int[],int[])",1,12,14
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayCurrentRow(PrintStream,ResultSet,Connection,int,int[],int[])",2,2,3
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayCurrentRow(PrintWriter,ResultSet,Connection,int,int[],int[])",2,2,3
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayNextRow(PrintStream,ResultSet,Connection,int,int[],int[])",1,2,3
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayNextRow(PrintWriter,ResultSet,Connection,int,int[],int[])",1,2,3
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(PrintStream,ResultSet,Connection,int,int[],int[])",3,9,10
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(PrintStream,Statement,Connection,int,int[],int[])",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(PrintWriter,List,Connection,int,int[],int[])",4,12,13
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(PrintWriter,ResultSet,Connection,int,int[],int[])",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.indent_DisplayResults(PrintWriter,Statement,Connection,int,int[],int[])",1,2,2
"org.apache.derby.tools.JDBCDisplayUtil.indentedPrintLine(PrintStream,int,String)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.indentedPrintLine(PrintStream,int,StringBuffer)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.indentedPrintLine(PrintWriter,int,String)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.indentedPrintLine(PrintWriter,int,StringBuffer)",1,1,1
"org.apache.derby.tools.JDBCDisplayUtil.mapNull(String,String)",2,1,2
"org.apache.derby.tools.JDBCDisplayUtil.setMaxDisplayWidth(int)",1,1,1
"org.apache.derby.tools.dblook.addQuotes(String)",2,1,2
"org.apache.derby.tools.dblook.addSingleQuotes(String)",2,1,2
"org.apache.derby.tools.dblook.dblook(String[])",3,2,3
"org.apache.derby.tools.dblook.expandDoubleQuotes(String)",2,2,5
"org.apache.derby.tools.dblook.extractDBNameFromUrl(String)",3,8,11
"org.apache.derby.tools.dblook.extractTableNamesFromList(String[],int)",3,6,8
"org.apache.derby.tools.dblook.getColNameFromNumber(String,int)",2,2,2
"org.apache.derby.tools.dblook.getColumnListFromDescription(String,String)",4,7,8
"org.apache.derby.tools.dblook.go()",1,7,8
"org.apache.derby.tools.dblook.initState()",1,1,1
"org.apache.derby.tools.dblook.isExcludedTable(String)",4,3,5
"org.apache.derby.tools.dblook.isIgnorableSchema(String)",4,3,5
"org.apache.derby.tools.dblook.loadDriver()",1,4,5
"org.apache.derby.tools.dblook.loadParam(String[],int)",22,7,24
"org.apache.derby.tools.dblook.lookupMessage(String)",1,1,1
"org.apache.derby.tools.dblook.lookupMessage(String,String[])",2,3,5
"org.apache.derby.tools.dblook.lookupSchemaId(String)",1,1,1
"org.apache.derby.tools.dblook.lookupTableId(String)",1,1,1
"org.apache.derby.tools.dblook.main(String[])",1,2,2
"org.apache.derby.tools.dblook.parseArgs(String[])",5,5,9
"org.apache.derby.tools.dblook.partOfWord(String,int,int,int)",1,5,6
"org.apache.derby.tools.dblook.prepForDump()",1,4,5
"org.apache.derby.tools.dblook.removeNewlines(String)",2,3,5
"org.apache.derby.tools.dblook.showVariables()",1,5,5
"org.apache.derby.tools.dblook.stringContainsTargetTable(String)",8,9,12
"org.apache.derby.tools.dblook.stripQuotes(String)",4,3,6
"org.apache.derby.tools.dblook.writeVerboseOutput(String,String)",1,2,2
"org.apache.derby.tools.ij.getArg(String,String[])",1,1,1
"org.apache.derby.tools.ij.getPropertyArg(String[])",1,1,1
"org.apache.derby.tools.ij.ij()",1,1,1
"org.apache.derby.tools.ij.main(String[])",1,1,1
"org.apache.derby.tools.ij.runScript(Connection,InputStream,String,OutputStream,String)",1,2,2
"org.apache.derby.tools.ij.startJBMS()",1,1,1
"org.apache.derby.tools.sysinfo.getBuildNumber()",1,1,1
"org.apache.derby.tools.sysinfo.getBuildNumber(String)",2,1,2
"org.apache.derby.tools.sysinfo.getInfo(PrintWriter)",1,1,1
"org.apache.derby.tools.sysinfo.getMajorVersion()",1,1,1
"org.apache.derby.tools.sysinfo.getMajorVersion(String)",2,1,2
"org.apache.derby.tools.sysinfo.getMinorVersion()",1,1,1
"org.apache.derby.tools.sysinfo.getMinorVersion(String)",2,1,2
"org.apache.derby.tools.sysinfo.getProductName()",1,1,1
"org.apache.derby.tools.sysinfo.getProductName(String)",2,2,2
"org.apache.derby.tools.sysinfo.getVersionString()",1,1,1
"org.apache.derby.tools.sysinfo.getVersionString(String)",2,2,2
"org.apache.derby.tools.sysinfo.main(String[])",1,1,1
"org.apache.derby.tools.sysinfo.sysinfo()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.UpdatableVTITemplate()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.addBatch()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.addBatch(String)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.cancel()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.clearBatch()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.clearParameters()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.clearWarnings()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.close()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.execute()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.execute(String)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.execute(String,String[])",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.execute(String,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.execute(String,int[])",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.executeBatch()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.executeQuery()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.executeQuery(String)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.executeUpdate()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.executeUpdate(String)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.executeUpdate(String,String[])",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.executeUpdate(String,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.executeUpdate(String,int[])",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getConnection()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getFetchDirection()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getFetchSize()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getGeneratedKeys()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getMaxFieldSize()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getMaxRows()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getMetaData()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getMoreResults()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getMoreResults(int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getParameterMetaData()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getQueryTimeout()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getResultSet()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getResultSetConcurrency()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getResultSetHoldability()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getResultSetType()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getUpdateCount()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.getWarnings()",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setArray(int,Array)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setBigDecimal(int,BigDecimal)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setBlob(int,Blob)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setBoolean(int,boolean)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setByte(int,byte)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setBytes(int,byte[])",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setCharacterStream(int,Reader,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setClob(int,Clob)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setCursorName(String)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setDate(int,Date)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setDate(int,Date,Calendar)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setDouble(int,double)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setEscapeProcessing(boolean)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setFetchDirection(int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setFetchSize(int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setFloat(int,float)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setInt(int,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setLong(int,long)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setMaxFieldSize(int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setMaxRows(int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setNull(int,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setNull(int,int,String)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setObject(int,Object)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setObject(int,Object,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setObject(int,Object,int,int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setQueryTimeout(int)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setRef(int,Ref)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setShort(int,short)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setString(int,String)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setTime(int,Time)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setTime(int,Time,Calendar)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setTimestamp(int,Timestamp)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setTimestamp(int,Timestamp,Calendar)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setURL(int,URL)",1,1,1
"org.apache.derby.vti.UpdatableVTITemplate.setUnicodeStream(int,InputStream,int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getCatalogName(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getColumnClassName(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getColumnDisplaySize(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getColumnLabel(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getColumnName(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getColumnTypeName(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getPrecision(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getScale(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getSchemaName(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.getTableName(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isAutoIncrement(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isCaseSensitive(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isCurrency(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isDefinitelyWritable(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isNullable(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isReadOnly(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isSearchable(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isSigned(int)",1,1,1
"org.apache.derby.vti.VTIMetaDataTemplate.isWritable(int)",1,1,1
"org.apache.derby.vti.VTITemplate.absolute(int)",1,1,1
"org.apache.derby.vti.VTITemplate.afterLast()",1,1,1
"org.apache.derby.vti.VTITemplate.beforeFirst()",1,1,1
"org.apache.derby.vti.VTITemplate.cancelRowUpdates()",1,1,1
"org.apache.derby.vti.VTITemplate.clearWarnings()",1,1,1
"org.apache.derby.vti.VTITemplate.deleteRow()",1,1,1
"org.apache.derby.vti.VTITemplate.findColumn(String)",1,1,1
"org.apache.derby.vti.VTITemplate.first()",1,1,1
"org.apache.derby.vti.VTITemplate.getArray(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getArray(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getAsciiStream(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getAsciiStream(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getBigDecimal(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getBigDecimal(String,int)",1,1,1
"org.apache.derby.vti.VTITemplate.getBigDecimal(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getBigDecimal(int,int)",1,1,1
"org.apache.derby.vti.VTITemplate.getBinaryStream(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getBinaryStream(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getBlob(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getBlob(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getBoolean(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getBoolean(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getByte(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getByte(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getBytes(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getBytes(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getCharacterStream(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getCharacterStream(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getClob(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getClob(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getConcurrency()",1,1,1
"org.apache.derby.vti.VTITemplate.getCursorName()",1,1,1
"org.apache.derby.vti.VTITemplate.getDate(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getDate(String,Calendar)",1,1,1
"org.apache.derby.vti.VTITemplate.getDate(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getDate(int,Calendar)",1,1,1
"org.apache.derby.vti.VTITemplate.getDouble(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getDouble(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getFetchDirection()",1,1,1
"org.apache.derby.vti.VTITemplate.getFetchSize()",1,1,1
"org.apache.derby.vti.VTITemplate.getFloat(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getFloat(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getInt(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getInt(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getLong(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getLong(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getObject(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getObject(String,Map)",1,1,1
"org.apache.derby.vti.VTITemplate.getObject(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getObject(int,Map)",1,1,1
"org.apache.derby.vti.VTITemplate.getRef(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getRef(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getRow()",1,1,1
"org.apache.derby.vti.VTITemplate.getShort(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getShort(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getStatement()",1,1,1
"org.apache.derby.vti.VTITemplate.getString(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getString(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getTime(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getTime(String,Calendar)",1,1,1
"org.apache.derby.vti.VTITemplate.getTime(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getTime(int,Calendar)",1,1,1
"org.apache.derby.vti.VTITemplate.getTimestamp(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getTimestamp(String,Calendar)",1,1,1
"org.apache.derby.vti.VTITemplate.getTimestamp(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getTimestamp(int,Calendar)",1,1,1
"org.apache.derby.vti.VTITemplate.getType()",1,1,1
"org.apache.derby.vti.VTITemplate.getURL(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getURL(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getUnicodeStream(String)",1,1,1
"org.apache.derby.vti.VTITemplate.getUnicodeStream(int)",1,1,1
"org.apache.derby.vti.VTITemplate.getWarnings()",1,1,1
"org.apache.derby.vti.VTITemplate.insertRow()",1,1,1
"org.apache.derby.vti.VTITemplate.isAfterLast()",1,1,1
"org.apache.derby.vti.VTITemplate.isBeforeFirst()",1,1,1
"org.apache.derby.vti.VTITemplate.isFirst()",1,1,1
"org.apache.derby.vti.VTITemplate.isLast()",1,1,1
"org.apache.derby.vti.VTITemplate.last()",1,1,1
"org.apache.derby.vti.VTITemplate.moveToCurrentRow()",1,1,1
"org.apache.derby.vti.VTITemplate.moveToInsertRow()",1,1,1
"org.apache.derby.vti.VTITemplate.previous()",1,1,1
"org.apache.derby.vti.VTITemplate.refreshRow()",1,1,1
"org.apache.derby.vti.VTITemplate.relative(int)",1,1,1
"org.apache.derby.vti.VTITemplate.rowDeleted()",1,1,1
"org.apache.derby.vti.VTITemplate.rowInserted()",1,1,1
"org.apache.derby.vti.VTITemplate.rowUpdated()",1,1,1
"org.apache.derby.vti.VTITemplate.setFetchDirection(int)",1,1,1
"org.apache.derby.vti.VTITemplate.setFetchSize(int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateArray(String,Array)",1,1,1
"org.apache.derby.vti.VTITemplate.updateArray(int,Array)",1,1,1
"org.apache.derby.vti.VTITemplate.updateAsciiStream(String,InputStream,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBigDecimal(String,BigDecimal)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBigDecimal(int,BigDecimal)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBinaryStream(String,InputStream,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBlob(String,Blob)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBlob(int,Blob)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBoolean(String,boolean)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBoolean(int,boolean)",1,1,1
"org.apache.derby.vti.VTITemplate.updateByte(String,byte)",1,1,1
"org.apache.derby.vti.VTITemplate.updateByte(int,byte)",1,1,1
"org.apache.derby.vti.VTITemplate.updateBytes(String,byte[])",1,1,1
"org.apache.derby.vti.VTITemplate.updateBytes(int,byte[])",1,1,1
"org.apache.derby.vti.VTITemplate.updateCharacterStream(String,Reader,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateCharacterStream(int,Reader,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateClob(String,Clob)",1,1,1
"org.apache.derby.vti.VTITemplate.updateClob(int,Clob)",1,1,1
"org.apache.derby.vti.VTITemplate.updateDate(String,Date)",1,1,1
"org.apache.derby.vti.VTITemplate.updateDate(int,Date)",1,1,1
"org.apache.derby.vti.VTITemplate.updateDouble(String,double)",1,1,1
"org.apache.derby.vti.VTITemplate.updateDouble(int,double)",1,1,1
"org.apache.derby.vti.VTITemplate.updateFloat(String,float)",1,1,1
"org.apache.derby.vti.VTITemplate.updateFloat(int,float)",1,1,1
"org.apache.derby.vti.VTITemplate.updateInt(String,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateInt(int,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateLong(String,long)",1,1,1
"org.apache.derby.vti.VTITemplate.updateLong(int,long)",1,1,1
"org.apache.derby.vti.VTITemplate.updateNull(String)",1,1,1
"org.apache.derby.vti.VTITemplate.updateNull(int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateObject(String,Object)",1,1,1
"org.apache.derby.vti.VTITemplate.updateObject(String,Object,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateObject(int,Object)",1,1,1
"org.apache.derby.vti.VTITemplate.updateObject(int,Object,int)",1,1,1
"org.apache.derby.vti.VTITemplate.updateRef(String,Ref)",1,1,1
"org.apache.derby.vti.VTITemplate.updateRef(int,Ref)",1,1,1
"org.apache.derby.vti.VTITemplate.updateRow()",1,1,1
"org.apache.derby.vti.VTITemplate.updateShort(String,short)",1,1,1
"org.apache.derby.vti.VTITemplate.updateShort(int,short)",1,1,1
"org.apache.derby.vti.VTITemplate.updateString(String,String)",1,1,1
"org.apache.derby.vti.VTITemplate.updateString(int,String)",1,1,1
"org.apache.derby.vti.VTITemplate.updateTime(String,Time)",1,1,1
"org.apache.derby.vti.VTITemplate.updateTime(int,Time)",1,1,1
"org.apache.derby.vti.VTITemplate.updateTimestamp(String,Timestamp)",1,1,1
"org.apache.derby.vti.VTITemplate.updateTimestamp(int,Timestamp)",1,1,1
"org.apache.derby.vti.VTITemplate.wasNull()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.GeneratorState.GeneratorState(DocumentBuilder,Document,Document,Document)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.GeneratorState.addError(String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.GeneratorState.getBugList()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.GeneratorState.getDocumentBuilder()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.GeneratorState.getErrors()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.GeneratorState.getPamphlet()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.GeneratorState.getSummary()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.JiraIssue.JiraIssue(String,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.JiraIssue.getJiraAddress()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.JiraIssue.getKey()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.JiraIssue.getTitle()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.addHeadlinedItem(Element,String,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.addListItem(Element,Node)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.addParagraph(Element,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.beginPamphlet(GeneratorState)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.boldText(Document,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.buildBugList(GeneratorState)",3,2,3
"org.apache.derbyBuild.ChangesFileGenerator.buildDelta(GeneratorState,Element)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.cloneChildren(Node,Node)",1,2,2
"org.apache.derbyBuild.ChangesFileGenerator.createHeader(Element,int,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.createLink(Document,String,Node)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.createLink(Document,String,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.createList(Element)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.createLocalLink(Document,String,Node)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.createLocalLink(Document,String,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.createSection(Element,int,Element,String,Node)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.createSection(Element,int,Element,String,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.createTable(Element,int,String[])",1,2,2
"org.apache.derbyBuild.ChangesFileGenerator.createTextElement(Document,String,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.endPamphlet(GeneratorState)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.execute()",1,2,2
"org.apache.derbyBuild.ChangesFileGenerator.formatError(String,Throwable)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.getFirstChild(Element,String)",2,2,2
"org.apache.derbyBuild.ChangesFileGenerator.getJiraIssues(Document)",1,2,3
"org.apache.derbyBuild.ChangesFileGenerator.getNextChild(Element,String,int)",2,2,2
"org.apache.derbyBuild.ChangesFileGenerator.getOptionalChild(Element,String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.getPreviousReleaseID(GeneratorState)",1,2,2
"org.apache.derbyBuild.ChangesFileGenerator.getReleaseID(GeneratorState)",1,2,2
"org.apache.derbyBuild.ChangesFileGenerator.getSection(Document,int,String)",3,3,3
"org.apache.derbyBuild.ChangesFileGenerator.initialize()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.insertColumn(Element)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.insertLine(Element)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.insertRow(Element)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.main(String[])",1,2,2
"org.apache.derbyBuild.ChangesFileGenerator.makeHeaderTag(int)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.makeJiraIssue(Element)",8,9,15
"org.apache.derbyBuild.ChangesFileGenerator.parseArgs(String[])",2,1,3
"org.apache.derbyBuild.ChangesFileGenerator.printErrors(GeneratorState)",1,3,3
"org.apache.derbyBuild.ChangesFileGenerator.printPamphlet(GeneratorState)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.printUsage()",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.println(String)",1,2,2
"org.apache.derbyBuild.ChangesFileGenerator.processThrowable(Throwable)",1,2,2
"org.apache.derbyBuild.ChangesFileGenerator.replaceTag(Document,String,String)",1,7,7
"org.apache.derbyBuild.ChangesFileGenerator.replaceVariables(GeneratorState)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.setBugListFileName(String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.setPamphletFileName(String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.setSummaryFileName(String)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.squeezeText(Element)",1,1,1
"org.apache.derbyBuild.ChangesFileGenerator.stringifyStackTrace(Throwable)",1,1,1
"org.apache.derbyBuild.ClassSizeCrawler.ClassSizeCrawler(Class[],int,Hashtable)",1,1,1
"org.apache.derbyBuild.ClassSizeCrawler.addClass(Class)",1,2,2
"org.apache.derbyBuild.ClassSizeCrawler.crawl(File,StringBuffer)",1,12,13
"org.apache.derbyBuild.ClassSizeCrawler.main(String[])",1,16,18
"org.apache.derbyBuild.JiraConnector.getXMLStream(String)",1,1,1
"org.apache.derbyBuild.JiraConnector.getXMLStreamAndFile(String,String)",1,2,3
"org.apache.derbyBuild.JiraConnector.main(String[])",1,3,3
"org.apache.derbyBuild.JiraConnector.refreshJiraIssues(String,String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.MessageBuilder()",1,1,1
"org.apache.derbyBuild.MessageBuilder.XMLWriter.XMLWriter()",1,1,1
"org.apache.derbyBuild.MessageBuilder.XMLWriter.XMLWriter(File)",1,1,1
"org.apache.derbyBuild.MessageBuilder.XMLWriter.beginTag(String)",2,1,2
"org.apache.derbyBuild.MessageBuilder.XMLWriter.beginTag(String,String)",2,2,3
"org.apache.derbyBuild.MessageBuilder.XMLWriter.close()",2,1,2
"org.apache.derbyBuild.MessageBuilder.XMLWriter.endTag()",2,1,2
"org.apache.derbyBuild.MessageBuilder.XMLWriter.flush()",2,1,2
"org.apache.derbyBuild.MessageBuilder.XMLWriter.indent()",2,2,3
"org.apache.derbyBuild.MessageBuilder.XMLWriter.println(String)",2,1,2
"org.apache.derbyBuild.MessageBuilder.XMLWriter.writeEmptyTag(String)",2,1,2
"org.apache.derbyBuild.MessageBuilder.XMLWriter.writeEmptyTag(String,String)",2,2,3
"org.apache.derbyBuild.MessageBuilder.XMLWriter.writeTextElement(String,String)",2,1,2
"org.apache.derbyBuild.MessageBuilder.XMLWriter.writeTextElement(String,String,String)",2,2,3
"org.apache.derbyBuild.MessageBuilder.countParameters(String)",3,2,3
"org.apache.derbyBuild.MessageBuilder.echo(String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.escapePropertiesText(String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.escapeTextWithAQuote(String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.execute()",1,2,4
"org.apache.derbyBuild.MessageBuilder.finishWriting(FileWriter,PrintWriter)",2,1,3
"org.apache.derbyBuild.MessageBuilder.getArgs(Element)",1,2,2
"org.apache.derbyBuild.MessageBuilder.getFirstChild(Element,String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.getSQLState(String)",2,2,2
"org.apache.derbyBuild.MessageBuilder.plugInArgs(String,String[])",1,1,2
"org.apache.derbyBuild.MessageBuilder.processFamily(PrintWriter,XMLWriter,Element)",1,2,2
"org.apache.derbyBuild.MessageBuilder.processMessage(PrintWriter,XMLWriter,Element)",2,2,3
"org.apache.derbyBuild.MessageBuilder.processMessages(File,PrintWriter,XMLWriter)",1,1,1
"org.apache.derbyBuild.MessageBuilder.processSection(PrintWriter,XMLWriter,Element)",1,2,3
"org.apache.derbyBuild.MessageBuilder.processSections(PrintWriter,XMLWriter,NodeList)",1,2,2
"org.apache.derbyBuild.MessageBuilder.replaceSpecialChars(String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.setDitaTargetFile(String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.setPropertiesTargetFile(String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.setXmlSourceFile(String)",1,1,1
"org.apache.derbyBuild.MessageBuilder.squeezeText(Element)",1,1,1
"org.apache.derbyBuild.ODBCMetadataGenerator.ODBCMetadataGenerator()",1,1,1
"org.apache.derbyBuild.ODBCMetadataGenerator.addHelperColsToSubquery(String,StringBuffer,int)",1,3,3
"org.apache.derbyBuild.ODBCMetadataGenerator.addNewColumnsForODBC(String,StringBuffer)",2,2,3
"org.apache.derbyBuild.ODBCMetadataGenerator.changeColValueToODBC(String,String,StringBuffer)",2,12,13
"org.apache.derbyBuild.ODBCMetadataGenerator.changeValuesForODBC(String,StringBuffer)",2,5,6
"org.apache.derbyBuild.ODBCMetadataGenerator.changeWhereClause(String,StringBuffer)",3,2,3
"org.apache.derbyBuild.ODBCMetadataGenerator.extractColName(String)",2,5,5
"org.apache.derbyBuild.ODBCMetadataGenerator.fragSubstitution(String,StringBuffer)",1,2,2
"org.apache.derbyBuild.ODBCMetadataGenerator.generateODBCQueries(InputStream)",8,5,9
"org.apache.derbyBuild.ODBCMetadataGenerator.generateODBCQuery(StringBuffer)",5,8,12
"org.apache.derbyBuild.ODBCMetadataGenerator.generateSELECTClause(String,ArrayList,StringBuffer)",2,8,9
"org.apache.derbyBuild.ODBCMetadataGenerator.getCastInfoForCol(String,String)",13,19,25
"org.apache.derbyBuild.ODBCMetadataGenerator.getFragment(String)",1,1,1
"org.apache.derbyBuild.ODBCMetadataGenerator.getSelectColDefinitions(StringBuffer,ArrayList)",6,6,13
"org.apache.derbyBuild.ODBCMetadataGenerator.initChanges()",1,1,1
"org.apache.derbyBuild.ODBCMetadataGenerator.main(String[])",1,1,1
"org.apache.derbyBuild.ODBCMetadataGenerator.markNewColPosition(String,ArrayList)",2,3,4
"org.apache.derbyBuild.ODBCMetadataGenerator.renameColForODBC(StringBuffer,String,String)",4,5,6
"org.apache.derbyBuild.ODBCMetadataGenerator.renameColsForODBC(String,StringBuffer)",5,4,5
"org.apache.derbyBuild.ODBCMetadataGenerator.stmtNeedsChange(String,byte)",2,1,2
"org.apache.derbyBuild.ODBCMetadataGenerator.substitutePatternWhere(String,String,StringBuffer)",1,2,2
"org.apache.derbyBuild.ODBCMetadataGenerator.trimIgnorable(short,String,int)",1,4,5
"org.apache.derbyBuild.ODBCMetadataGenerator.trimIgnorable(short,char[],int)",1,4,5
"org.apache.derbyBuild.ReleaseNoteReader.ReleaseNoteReader(DocumentBuilder)",1,1,1
"org.apache.derbyBuild.ReleaseNoteReader.getFirstChild(Element,String)",2,2,2
"org.apache.derbyBuild.ReleaseNoteReader.getOptionalChild(Element,String)",1,1,1
"org.apache.derbyBuild.ReleaseNoteReader.getReleaseNote(InputStream)",1,1,1
"org.apache.derbyBuild.ReleaseNoteReader.getReleaseNoteDetails(Document)",1,1,1
"org.apache.derbyBuild.ReleaseNoteReader.getReleaseNoteSummary(Document)",1,1,1
"org.apache.derbyBuild.ReleaseNoteReader.main(String[])",1,2,3
"org.apache.derbyBuild.ReleaseNoteReader.println(String)",1,1,1
"org.apache.derbyBuild.ReleaseNoteReader.squeezeText(Element)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.GeneratorState(DocumentBuilder,Document,Document,Document,Document)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.addError(String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.addMissingReleaseNote(JiraIssue)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.getBugList()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.getDocumentBuilder()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.getErrors()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.getMissingReleaseNotes()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.getPamphlet()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.getReleaseNoteReader()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.getReleaseNotesList()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.GeneratorState.getSummary()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.JiraIssue.JiraIssue(String,String,long)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.JiraIssue.getJiraAddress()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.JiraIssue.getKey()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.JiraIssue.getReleaseNoteAddress()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.JiraIssue.getReleaseNoteAttachmentID()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.JiraIssue.getTitle()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.JiraIssue.hasReleaseNote()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.addHeadlinedItem(Element,String,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.addListItem(Element,Node)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.addParagraph(Element,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.beginPamphlet(GeneratorState)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.boldText(Document,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.buildBugList(GeneratorState)",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.buildDelta(GeneratorState,Element)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.buildEnvironment(GeneratorState)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.buildIssuesList(GeneratorState)",3,6,6
"org.apache.derbyBuild.ReleaseNotesGenerator.buildNewFeatures(GeneratorState)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.buildOverview(GeneratorState)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.cloneChildren(Node,Node)",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.createHeader(Element,int,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.createLink(Document,String,Node)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.createLink(Document,String,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.createList(Element)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.createLocalLink(Document,String,Node)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.createLocalLink(Document,String,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.createSection(Element,int,Element,String,Node)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.createSection(Element,int,Element,String,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.createTable(Element,int,String[])",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.createTextElement(Document,String,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.endPamphlet(GeneratorState)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.execute()",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.formatError(String,Throwable)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.getFirstChild(Element,String)",2,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.getJiraIssues(Document)",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.getOptionalChild(Element,String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.getPreviousReleaseID(GeneratorState)",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.getReleaseID(GeneratorState)",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.getReleaseNote(GeneratorState,JiraIssue)",2,3,3
"org.apache.derbyBuild.ReleaseNotesGenerator.getReleaseNoteAttachmentID(Element)",1,4,5
"org.apache.derbyBuild.ReleaseNotesGenerator.getSection(Document,int,String)",3,3,3
"org.apache.derbyBuild.ReleaseNotesGenerator.initialize()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.insertColumn(Element)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.insertLine(Element)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.insertRow(Element)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.main(String[])",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.makeHeaderTag(int)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.makeJiraIssue(Element)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.parseArgs(String[])",2,1,3
"org.apache.derbyBuild.ReleaseNotesGenerator.printErrors(GeneratorState)",1,3,3
"org.apache.derbyBuild.ReleaseNotesGenerator.printMissingReleaseNotes(GeneratorState)",1,3,3
"org.apache.derbyBuild.ReleaseNotesGenerator.printPamphlet(GeneratorState)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.printUsage()",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.println(String)",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.processThrowable(Throwable)",1,2,2
"org.apache.derbyBuild.ReleaseNotesGenerator.replaceTag(Document,String,String)",1,7,7
"org.apache.derbyBuild.ReleaseNotesGenerator.replaceVariables(GeneratorState)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.setBugListFileName(String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.setPamphletFileName(String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.setReleaseNotesListFileName(String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.setSummaryFileName(String)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.squeezeText(Element)",1,1,1
"org.apache.derbyBuild.ReleaseNotesGenerator.stringifyStackTrace(Throwable)",1,1,1
"org.apache.derbyBuild.classlister.classlister()",1,1,2
"org.apache.derbyBuild.classlister.findClasses(Properties)",1,4,4
"org.apache.derbyBuild.classlister.findDependencies(String)",24,43,60
"org.apache.derbyBuild.classlister.isCloudscapeCode(String)",1,4,4
"org.apache.derbyBuild.classlister.loadClasspath()",1,12,13
"org.apache.derbyBuild.classlister.locateClass(String,boolean)",8,17,17
"org.apache.derbyBuild.classlister.main(String[])",1,2,2
"org.apache.derbyBuild.classlister.run()",13,12,22
"org.apache.derbyBuild.classlister.showAllItems()",1,2,2
"org.apache.derbyBuild.classlister.showAllItemsOneLevel()",1,3,3
"org.apache.derbyBuild.classlister.unrollHashtable(String,Hashtable,Hashtable,int)",4,5,6
"org.apache.derbyBuild.eclipse.DerbyEclipsePlugin.createTmpFiles()",1,1,1
"org.apache.derbyBuild.eclipse.DerbyEclipsePlugin.getProps()",1,1,1
"org.apache.derbyBuild.eclipse.DerbyEclipsePlugin.main(String[])",2,3,3
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.getName()",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.inConstructor()",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.inField()",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.inMethod()",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.inOverview()",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.inPackage()",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.inType()",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.isInlineTag()",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.register(Map)",1,2,2
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.toString(Tag)",1,1,1
"org.apache.derbyBuild.javadoc.DiskLayoutTaglet.toString(Tag[])",2,2,4
"org.apache.derbyBuild.javadoc.EndFormatTaglet.getName()",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.inConstructor()",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.inField()",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.inMethod()",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.inOverview()",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.inPackage()",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.inType()",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.isInlineTag()",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.register(Map)",1,2,2
"org.apache.derbyBuild.javadoc.EndFormatTaglet.toString(Tag)",1,1,1
"org.apache.derbyBuild.javadoc.EndFormatTaglet.toString(Tag[])",2,1,4
"org.apache.derbyBuild.javadoc.FormatIdTaglet.getName()",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.inConstructor()",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.inField()",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.inMethod()",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.inOverview()",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.inPackage()",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.inType()",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.isInlineTag()",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.register(Map)",1,2,2
"org.apache.derbyBuild.javadoc.FormatIdTaglet.toString(Tag)",1,1,1
"org.apache.derbyBuild.javadoc.FormatIdTaglet.toString(Tag[])",2,2,4
"org.apache.derbyBuild.javadoc.PurposeTaglet.getName()",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.inConstructor()",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.inField()",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.inMethod()",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.inOverview()",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.inPackage()",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.inType()",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.isInlineTag()",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.register(Map)",1,2,2
"org.apache.derbyBuild.javadoc.PurposeTaglet.toString(Tag)",1,1,1
"org.apache.derbyBuild.javadoc.PurposeTaglet.toString(Tag[])",2,2,4
"org.apache.derbyBuild.javadoc.UpgradeTaglet.getName()",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.inConstructor()",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.inField()",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.inMethod()",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.inOverview()",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.inPackage()",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.inType()",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.isInlineTag()",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.register(Map)",1,2,2
"org.apache.derbyBuild.javadoc.UpgradeTaglet.toString(Tag)",1,1,1
"org.apache.derbyBuild.javadoc.UpgradeTaglet.toString(Tag[])",2,2,4
"org.apache.derbyBuild.maintversion2props.main(String[])",1,3,3
"org.apache.derbyBuild.propertyconfig.main(String[])",1,4,4
"org.apache.derbyBuild.propertyconfig.printUsageAndExit()",1,1,1
"org.apache.derbyBuild.propertyconfig.process(Properties,String,File)",12,22,26
"org.apache.derbyBuild.splitmessages.initClientMessageIds()",1,1,1
"org.apache.derbyBuild.splitmessages.isClientMessage(String)",3,6,8
"org.apache.derbyBuild.splitmessages.main(String[])",3,6,8
"org.apache.derbyDemo.scores.app.Scores.Scores()",1,1,1
"org.apache.derbyDemo.scores.app.Scores.execute()",1,1,1
"org.apache.derbyDemo.scores.app.Scores.main(String[])",1,2,2
"org.apache.derbyDemo.scores.data.Data.Data()",1,1,1
"org.apache.derbyDemo.scores.data.Data.KeyedObject.create(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.KeyedObject.getPrimaryKey(Database)",1,2,2
"org.apache.derbyDemo.scores.data.Data.KeyedObject.notImplemented()",1,1,1
"org.apache.derbyDemo.scores.data.Data.KeyedObject.setPrimaryKey(int)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Question.Question(String,int,int,int,Test)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Question.createMinion(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Question.getCorrectChoice()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Question.getDifficulty()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Question.getKeyFinder(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Question.getNumberOfChoices()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Question.getQuestionName()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Question.getTest()",1,1,1
"org.apache.derbyDemo.scores.data.Data.QuestionTaking.QuestionTaking(TestTaking,Question,int)",1,1,1
"org.apache.derbyDemo.scores.data.Data.QuestionTaking.createMinion(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.QuestionTaking.getActualChoice()",1,1,1
"org.apache.derbyDemo.scores.data.Data.QuestionTaking.getKeyFinder(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.QuestionTaking.getQuestion()",1,1,1
"org.apache.derbyDemo.scores.data.Data.QuestionTaking.getTestTaking()",1,1,1
"org.apache.derbyDemo.scores.data.Data.School.School(String,boolean)",1,1,1
"org.apache.derbyDemo.scores.data.Data.School.createMinion(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.School.getKeyFinder(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.School.getSchoolName()",1,1,1
"org.apache.derbyDemo.scores.data.Data.School.isGrammarSchool()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Student.Student(String,String,String,School)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Student.createMinion(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Student.getBirthday()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Student.getFirstName()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Student.getKeyFinder(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Student.getLastName()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Student.getSchool()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Test.Test(String,boolean,double)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Test.createMinion(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Test.getHighSchoolScore()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Test.getKeyFinder(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.Test.getTestName()",1,1,1
"org.apache.derbyDemo.scores.data.Data.Test.isGrammarSchoolTest()",1,1,1
"org.apache.derbyDemo.scores.data.Data.TestTaking.TestTaking(Student,Test)",1,1,1
"org.apache.derbyDemo.scores.data.Data.TestTaking.createMinion(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.TestTaking.getKeyFinder(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.TestTaking.getStudent()",1,1,1
"org.apache.derbyDemo.scores.data.Data.TestTaking.getTest()",1,1,1
"org.apache.derbyDemo.scores.data.Data.finishTest(Database,TestTaking)",1,1,1
"org.apache.derbyDemo.scores.data.Data.initialize(Database)",1,1,1
"org.apache.derbyDemo.scores.data.Data.initialize(Database,KeyedObject[])",1,2,2
"org.apache.derbyDemo.scores.data.Data.initializeQuestions(Database)",1,3,3
"org.apache.derbyDemo.scores.data.Data.makeTargetScore(Database,Student,Test,double)",1,1,1
"org.apache.derbyDemo.scores.data.Data.reportWhoNeedsImprovement(Database,School,String)",1,1,1
"org.apache.derbyDemo.scores.data.Data.takeTest(Database,Student,Test,double)",1,1,1
"org.apache.derbyDemo.scores.data.Data.takeTest(Database,Test,int)",3,4,6
"org.apache.derbyDemo.scores.data.Data.takeTestingMinion(Database,Student,Test,double)",1,2,3
"org.apache.derbyDemo.scores.data.Data.takeTests(Database)",1,2,2
"org.apache.derbyDemo.scores.data.Database.Database()",1,1,1
"org.apache.derbyDemo.scores.data.Database.createSchema(Connection,String,String)",1,1,1
"org.apache.derbyDemo.scores.data.Database.getConnection()",2,1,3
"org.apache.derbyDemo.scores.data.Database.getData()",1,1,1
"org.apache.derbyDemo.scores.data.Database.getDatabase(String,String)",1,2,2
"org.apache.derbyDemo.scores.data.Database.prettyPrint(Connection,ResultSet)",1,1,1
"org.apache.derbyDemo.scores.data.Database.prettyPrint(Connection,String)",1,1,1
"org.apache.derbyDemo.scores.data.Database.prettyPrintQuestion(Connection)",1,1,1
"org.apache.derbyDemo.scores.data.Database.prettyPrintQuestionTaking(Connection)",1,1,1
"org.apache.derbyDemo.scores.data.Database.prettyPrintSchool(Connection)",1,1,1
"org.apache.derbyDemo.scores.data.Database.prettyPrintStudent(Connection)",1,1,1
"org.apache.derbyDemo.scores.data.Database.prettyPrintTest(Connection)",1,1,1
"org.apache.derbyDemo.scores.data.Database.prettyPrintTestTaking(Connection)",1,1,1
"org.apache.derbyDemo.scores.data.Database.schemaExists(Connection)",1,1,1
"org.apache.derbyDemo.scores.proc.Functions.computeAge(Date)",1,1,1
"org.apache.derbyDemo.scores.proc.Functions.formatPercent(double)",1,1,1
"org.apache.derbyDemo.scores.proc.Functions.getDefaultConnection()",1,1,1
"org.apache.derbyDemo.scores.proc.Functions.getMedianTestScore(int)",1,3,3
"org.apache.derbyDemo.scores.proc.Functions.scoreAnswer(int,int,int,int)",1,1,1
"org.apache.derbyDemo.scores.proc.Functions.vetChoice(int,int)",2,1,3
"org.apache.derbyDemo.scores.proc.Functions.weighQuestion(int)",1,1,1
"org.apache.derbyDemo.scores.proc.Procedures.ScoreTestTaking(int)",1,2,2
"org.apache.derbyDemo.scores.util.Logger.Logger()",1,1,1
"org.apache.derbyDemo.scores.util.Logger.enableLogging(boolean)",1,1,1
"org.apache.derbyDemo.scores.util.Logger.getLogger()",1,1,2
"org.apache.derbyDemo.scores.util.Logger.getPrintStream()",1,1,1
"org.apache.derbyDemo.scores.util.Logger.isLoggingEnabled()",1,1,1
"org.apache.derbyDemo.scores.util.Logger.log(String)",1,2,2
"org.apache.derbyDemo.scores.util.Logger.log(Throwable)",1,1,1
"org.apache.derbyDemo.scores.util.Logger.logBanner(String)",1,1,1
"org.apache.derbyDemo.scores.util.Utils.close(Connection)",1,2,2
"org.apache.derbyDemo.scores.util.Utils.close(PreparedStatement)",1,2,2
"org.apache.derbyDemo.scores.util.Utils.close(ResultSet)",1,2,2
"org.apache.derbyDemo.scores.util.Utils.commit(Connection)",1,1,1
"org.apache.derbyDemo.scores.util.Utils.executeCall(Connection,String)",1,1,1
"org.apache.derbyDemo.scores.util.Utils.executeDDL(Connection,String)",1,1,1
"org.apache.derbyDemo.scores.util.Utils.finishScore(double,double)",2,1,2
"org.apache.derbyDemo.scores.util.Utils.getLogger()",1,1,1
"org.apache.derbyDemo.scores.util.Utils.getScalarValue(PreparedStatement)",1,1,1
"org.apache.derbyDemo.scores.util.Utils.prepare(Connection,String)",1,1,1
"org.apache.derbyDemo.scores.util.Utils.prepareCall(Connection,String)",1,1,1
"org.apache.derbyDemo.scores.util.Utils.scoreAnswer(int,int,int,int)",3,1,3
"org.apache.derbyDemo.scores.util.Utils.weighQuestion(int)",1,1,1
"org.apache.derbyDemo.vtis.core.FlatFileVTI.FlatFileVTI(String[],String)",1,1,1
"org.apache.derbyDemo.vtis.core.FlatFileVTI.close()",1,4,4
"org.apache.derbyDemo.vtis.core.FlatFileVTI.getLineNumber()",1,1,1
"org.apache.derbyDemo.vtis.core.FlatFileVTI.getMetaData()",1,1,1
"org.apache.derbyDemo.vtis.core.FlatFileVTI.getRawColumn(int)",1,1,1
"org.apache.derbyDemo.vtis.core.FlatFileVTI.getTextFileName()",1,1,1
"org.apache.derbyDemo.vtis.core.FlatFileVTI.next()",3,3,4
"org.apache.derbyDemo.vtis.core.FlatFileVTI.readLine()",1,2,2
"org.apache.derbyDemo.vtis.core.FlatFileVTI.wrap(String,Throwable)",1,1,1
"org.apache.derbyDemo.vtis.core.FlatFileVTI.wrap(Throwable)",1,1,1
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.closeConnection(String)",1,2,2
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.getColumnNames(ResultSetMetaData)",1,2,2
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.getColumnType(ResultSetMetaData,int)",24,8,24
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.getColumnTypes(ResultSetMetaData)",1,2,2
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.getConnection(String,String)",2,3,4
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.instantiateQueryRowVTI(String)",1,2,2
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.instantiateVTI(String,String,String,String[])",1,3,4
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.precisionAndScale(int,int)",1,1,1
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.precisionToLength(int)",1,1,1
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.registerQueryRowVTIs(String,String)",1,6,6
"org.apache.derbyDemo.vtis.core.QueryVTIHelper.registerVTI(Method,String,String,String,String[])",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.SimpleBlob(byte[])",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.equals(Object)",7,3,8
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.getBinaryStream()",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.getBytes(long,int)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.length()",2,1,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.position(Blob,long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.position(byte[],long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.setBinaryStream(long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.setBytes(long,byte[])",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.setBytes(long,byte[],int,int)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleBlob.truncate(long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.SimpleClob(String)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.equals(Object)",7,3,8
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.getAsciiStream()",1,1,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.getCharacterStream()",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.getSubString(long,int)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.length()",2,1,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.position(Clob,long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.position(String,long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.setAsciiStream(long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.setCharacterStream(long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.setString(long,String)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.setString(long,String,int,int)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.SimpleClob.truncate(long)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.StringColumnVTI(String[])",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.checkNull(String)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.findColumn(String)",3,2,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getAsciiStream(int)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getBigDecimal(int)",2,3,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getBinaryStream(int)",2,2,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getBlob(int)",2,2,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getBoolean(int)",2,2,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getByte(int)",2,3,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getBytes(int)",2,2,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getClob(int)",2,1,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getColumnNames()",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getDate(int)",2,2,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getDouble(int)",2,3,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getEncodedStream(String,String)",2,3,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getFloat(int)",2,3,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getInt(int)",2,3,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getLong(int)",2,3,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getShort(int)",2,3,3
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getString(int)",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getTime(int)",2,2,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.getTimestamp(int)",2,2,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.parseDateTime(String)",1,2,2
"org.apache.derbyDemo.vtis.core.StringColumnVTI.setWasNull()",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.wasNull()",1,1,1
"org.apache.derbyDemo.vtis.core.StringColumnVTI.wrap(Throwable)",1,1,1
"org.apache.derbyDemo.vtis.core.VTIHelper.doubleQuote(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTIHelper.dropObject(String,String,boolean)",2,1,3
"org.apache.derbyDemo.vtis.core.VTIHelper.executeDDL(String)",1,2,2
"org.apache.derbyDemo.vtis.core.VTIHelper.getLocalConnection()",1,1,1
"org.apache.derbyDemo.vtis.core.VTIHelper.mapType(Class)",12,12,12
"org.apache.derbyDemo.vtis.core.VTIHelper.print(String)",1,2,2
"org.apache.derbyDemo.vtis.core.VTIHelper.registerVTI(Method,String[],String[],boolean)",1,6,6
"org.apache.derbyDemo.vtis.core.VTIHelper.unregisterVTI(Method)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.absolute(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.afterLast()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.beforeFirst()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.cancelRowUpdates()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.clearWarnings()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.deleteRow()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.findColumn(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.first()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getArray(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getArray(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getAsciiStream(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getAsciiStream(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBigDecimal(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBigDecimal(String,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBigDecimal(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBigDecimal(int,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBinaryStream(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBinaryStream(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBlob(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBlob(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBoolean(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBoolean(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getByte(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getByte(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBytes(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getBytes(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getCharacterStream(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getCharacterStream(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getClob(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getClob(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getConcurrency()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getCursorName()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getDate(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getDate(String,Calendar)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getDate(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getDate(int,Calendar)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getDouble(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getDouble(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getFetchDirection()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getFetchSize()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getFloat(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getFloat(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getInt(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getInt(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getLong(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getLong(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getObject(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getObject(String,Map)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getObject(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getObject(int,Map)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getRef(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getRef(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getRow()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getShort(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getShort(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getStatement()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getString(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getString(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getTime(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getTime(String,Calendar)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getTime(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getTime(int,Calendar)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getTimestamp(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getTimestamp(String,Calendar)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getTimestamp(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getTimestamp(int,Calendar)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getType()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getURL(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getURL(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getUnicodeStream(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getUnicodeStream(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.getWarnings()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.insertRow()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.isAfterLast()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.isBeforeFirst()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.isFirst()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.isLast()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.last()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.moveToCurrentRow()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.moveToInsertRow()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.previous()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.refreshRow()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.relative(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.rowDeleted()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.rowInserted()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.rowUpdated()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.setFetchDirection(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.setFetchSize(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateArray(String,Array)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateArray(int,Array)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateAsciiStream(String,InputStream,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBigDecimal(String,BigDecimal)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBigDecimal(int,BigDecimal)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBinaryStream(String,InputStream,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBlob(String,Blob)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBlob(int,Blob)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBoolean(String,boolean)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBoolean(int,boolean)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateByte(String,byte)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateByte(int,byte)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBytes(String,byte[])",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateBytes(int,byte[])",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateCharacterStream(String,Reader,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateCharacterStream(int,Reader,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateClob(String,Clob)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateClob(int,Clob)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateDate(String,Date)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateDate(int,Date)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateDouble(String,double)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateDouble(int,double)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateFloat(String,float)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateFloat(int,float)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateInt(String,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateInt(int,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateLong(String,long)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateLong(int,long)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateNull(String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateNull(int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateObject(String,Object)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateObject(String,Object,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateObject(int,Object)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateObject(int,Object,int)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateRef(String,Ref)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateRef(int,Ref)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateRow()",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateShort(String,short)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateShort(int,short)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateString(String,String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateString(int,String)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateTime(String,Time)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateTime(int,Time)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateTimestamp(String,Timestamp)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.updateTimestamp(int,Timestamp)",1,1,1
"org.apache.derbyDemo.vtis.core.VTITemplate.wasNull()",1,1,1
"org.apache.derbyDemo.vtis.core.XmlVTI.XmlVTI(String,String,String[])",1,1,1
"org.apache.derbyDemo.vtis.core.XmlVTI.close()",1,1,1
"org.apache.derbyDemo.vtis.core.XmlVTI.getMetaData()",1,1,1
"org.apache.derbyDemo.vtis.core.XmlVTI.getRawColumn(int)",1,2,2
"org.apache.derbyDemo.vtis.core.XmlVTI.instantiateVTI(String)",1,2,2
"org.apache.derbyDemo.vtis.core.XmlVTI.next()",2,4,4
"org.apache.derbyDemo.vtis.core.XmlVTI.parseRow(int)",1,7,7
"org.apache.derbyDemo.vtis.core.XmlVTI.readRows()",1,1,1
"org.apache.derbyDemo.vtis.core.XmlVTI.registerVTI(Method)",2,1,2
"org.apache.derbyDemo.vtis.core.XmlVTI.registerXMLRowVTIs(String)",1,6,6
"org.apache.derbyDemo.vtis.core.XmlVTI.squeezeText(Element)",1,2,2
"org.apache.derbyDemo.vtis.example.ApacheServerLogVTI.ApacheServerLogVTI(String,String,String[])",1,1,1
"org.apache.derbyDemo.vtis.example.ApacheServerLogVTI.getDateFormatter()",1,1,2
"org.apache.derbyDemo.vtis.example.ApacheServerLogVTI.getString(int)",2,2,2
"org.apache.derbyDemo.vtis.example.ApacheServerLogVTI.getTimestamp(int)",1,2,2
"org.apache.derbyDemo.vtis.example.DerbyJiraReportVTI.DerbyJiraReportVTI(String,String,String[])",1,1,1
"org.apache.derbyDemo.vtis.example.DerbyJiraReportVTI.getString(int)",2,2,2
"org.apache.derbyDemo.vtis.example.LineListVTI.LineListVTI(String)",1,1,1
"org.apache.derbyDemo.vtis.example.LineListVTI.lineListVTI(String)",1,1,1
"org.apache.derbyDemo.vtis.example.LineListVTI.parseRow()",2,1,2
"org.apache.derbyDemo.vtis.example.PropertyFileVTI.PropertyFileVTI(String)",1,1,1
"org.apache.derbyDemo.vtis.example.PropertyFileVTI.parseRow()",8,6,10
"org.apache.derbyDemo.vtis.example.PropertyFileVTI.propertyFileVTI(String)",1,1,1
"org.apache.derbyDemo.vtis.example.SubversionLogVTI.SubversionLogVTI(String)",1,1,1
"org.apache.derbyDemo.vtis.example.SubversionLogVTI.getDateFormatter()",1,1,2
"org.apache.derbyDemo.vtis.example.SubversionLogVTI.getTimestamp(int)",1,2,2
"org.apache.derbyDemo.vtis.example.SubversionLogVTI.isRecordHeader(String)",2,1,2
"org.apache.derbyDemo.vtis.example.SubversionLogVTI.parseRow()",4,5,8
"org.apache.derbyDemo.vtis.example.SubversionLogVTI.readField(String,int[])",2,4,5
"org.apache.derbyDemo.vtis.example.SubversionLogVTI.readNextLine()",1,1,1
"org.apache.derbyDemo.vtis.example.SubversionLogVTI.subversionLogVTI(String)",1,1,1
"org.apache.derbyDemo.vtis.example.VTIs.apacheNaturalJiraReport(String)",1,1,1
"org.apache.derbyDemo.vtis.example.VTIs.apacheNaturalLogFile(String)",1,1,1
"org.apache.derbyDemo.vtis.example.VTIs.apacheVanillaJiraReport(String)",1,1,1
"org.apache.derbyDemo.vtis.example.VTIs.apacheVanillaLogFile(String)",1,1,1
"org.apache.derbyDemo.vtis.example.VTIs.countryLanguage(String)",1,1,1
"org.apache.derbyDemo.vtis.example.WorldDBSnapshot.City()",1,1,1
"org.apache.derbyDemo.vtis.example.WorldDBSnapshot.Country()",1,1,1
"org.apache.derbyDemo.vtis.example.WorldDBSnapshot.CountryLanguage()",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.SubscriptionContext.SubscriptionContext(SubscriptionSignature,HashMap<String, String>,String)",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.SubscriptionContext.getConnectionURL()",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.SubscriptionContext.getParameterValues()",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.SubscriptionContext.getSubscriptionSignature()",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.SubscriptionContext.toString()",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.createContext(String,String[],String)",4,3,5
"org.apache.derbyDemo.vtis.snapshot.Subscription.createEmptyTable(String,String)",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.createSubscription(String,String)",1,4,4
"org.apache.derbyDemo.vtis.snapshot.Subscription.createVTIAndEmptyTable(String,Method,String,String,HashSet<String>)",3,2,3
"org.apache.derbyDemo.vtis.snapshot.Subscription.dropContext(String)",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.dropSubscription(String)",1,3,3
"org.apache.derbyDemo.vtis.snapshot.Subscription.dropVTIAndTable(Method)",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.fillTables(ArrayList<Method>)",1,2,2
"org.apache.derbyDemo.vtis.snapshot.Subscription.getContext(String,boolean)",2,1,3
"org.apache.derbyDemo.vtis.snapshot.Subscription.getFunctionName(Method)",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.getTableName(Method)",1,1,1
"org.apache.derbyDemo.vtis.snapshot.Subscription.instantiateSnapshotQueryVTI()",1,4,4
"org.apache.derbyDemo.vtis.snapshot.Subscription.isSnapshotQuery(Method)",1,4,4
"org.apache.derbyDemo.vtis.snapshot.Subscription.refreshSubscription(String,String,String...)",1,3,3
"org.apache.derbyDemo.vtis.snapshot.Subscription.registerRefreshProcedure(SubscriptionSignature)",1,2,2
"org.apache.derbyDemo.vtis.snapshot.Subscription.truncateTables(ArrayList<Method>)",1,2,2
"org.apache.derbyDemo.vtis.snapshot.Subscription.unregisterRefreshProcedure(SubscriptionSignature)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.DirContainsStringFilter.DirContainsStringFilter(String)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.DirContainsStringFilter.accept(File)",2,1,2
"org.apache.derbyPreBuild.PropertySetter.JarFilter.JarFilter()",1,1,1
"org.apache.derbyPreBuild.PropertySetter.JarFilter.accept(File)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.PropertySetter()",1,1,1
"org.apache.derbyPreBuild.PropertySetter.appendProperty(StringBuffer,String)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.couldntSetProperty(String)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.defaultSetter(String,String)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.echo(String)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.echoThrowable(Throwable)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.execute()",3,8,11
"org.apache.derbyPreBuild.PropertySetter.getJdkParentDirectory()",1,2,2
"org.apache.derbyPreBuild.PropertySetter.getJdkSearchPath()",1,2,2
"org.apache.derbyPreBuild.PropertySetter.getJreLib(File,String)",3,2,4
"org.apache.derbyPreBuild.PropertySetter.getParent(File)",3,1,3
"org.apache.derbyPreBuild.PropertySetter.getProperty(String)",1,1,1
"org.apache.derbyPreBuild.PropertySetter.getProperty(String,String)",1,1,2
"org.apache.derbyPreBuild.PropertySetter.isSet(String)",2,1,2
"org.apache.derbyPreBuild.PropertySetter.listJars(String)",4,5,6
"org.apache.derbyPreBuild.PropertySetter.printProperty(String)",1,1,2
"org.apache.derbyPreBuild.PropertySetter.refreshProperties()",1,1,1
"org.apache.derbyPreBuild.PropertySetter.requireProperty(String)",2,2,2
"org.apache.derbyPreBuild.PropertySetter.searchForJreLib(List<File>,String)",3,2,3
"org.apache.derbyPreBuild.PropertySetter.setClasspathFromLib(String,String)",3,2,3
"org.apache.derbyPreBuild.PropertySetter.setForAppleJDKs()",1,1,1
"org.apache.derbyPreBuild.PropertySetter.setForIbmJDKs()",1,1,1
"org.apache.derbyPreBuild.PropertySetter.setForMostJDKs(String,String)",1,3,3
"org.apache.derbyPreBuild.PropertySetter.setForSunJDKs()",1,1,1
"org.apache.derbyPreBuild.PropertySetter.setProperty(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.BackgroundStreamDrainer.BackgroundStreamDrainer(InputStream,String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.BackgroundStreamDrainer.getData()",1,3,3
"org.apache.derbyTesting.functionTests.harness.BackgroundStreamDrainer.run()",4,6,6
"org.apache.derbyTesting.functionTests.harness.BackgroundStreamSaver.BackgroundStreamSaver(InputStream,OutputStream)",1,1,1
"org.apache.derbyTesting.functionTests.harness.BackgroundStreamSaver.finish()",2,3,4
"org.apache.derbyTesting.functionTests.harness.BackgroundStreamSaver.run()",1,2,3
"org.apache.derbyTesting.functionTests.harness.CopySuppFiles.copyFiles(File,String)",1,12,12
"org.apache.derbyTesting.functionTests.harness.CopySuppFiles.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.harness.CurrentTime.CurrentTime()",1,1,1
"org.apache.derbyTesting.functionTests.harness.CurrentTime.getTime()",1,1,1
"org.apache.derbyTesting.functionTests.harness.FileCompare.FileCompare()",1,1,1
"org.apache.derbyTesting.functionTests.harness.FileCompare.doDiff(BufferedReader,BufferedReader,PrintWriter)",6,10,11
"org.apache.derbyTesting.functionTests.harness.FileCompare.doDiff2(BufferedReader,BufferedReader,PrintWriter)",1,1,1
"org.apache.derbyTesting.functionTests.harness.FileCompare.doSysDiff(InputStream,String,String,File,PrintWriter)",2,4,5
"org.apache.derbyTesting.functionTests.harness.FileCompare.exec(String,File,PrintWriter,String,String,String,int,boolean,boolean,String,String,String)",2,15,28
"org.apache.derbyTesting.functionTests.harness.FileCompare.getmaster(String)",1,3,3
"org.apache.derbyTesting.functionTests.harness.FileCompare.searchCanondir(String)",1,6,9
"org.apache.derbyTesting.functionTests.harness.FileCompare.searchDriverVersion(String)",1,3,3
"org.apache.derbyTesting.functionTests.harness.FileCompare.searchFramework(String)",1,4,5
"org.apache.derbyTesting.functionTests.harness.FileCompare.searchJvm(String)",1,19,24
"org.apache.derbyTesting.functionTests.harness.GRFileFilter.GRFileFilter()",1,1,1
"org.apache.derbyTesting.functionTests.harness.GRFileFilter.accept(File,String)",9,3,9
"org.apache.derbyTesting.functionTests.harness.GenerateReport.CalculatePassFailStats()",1,1,1
"org.apache.derbyTesting.functionTests.harness.GenerateReport.CalculateRunLength()",1,4,4
"org.apache.derbyTesting.functionTests.harness.GenerateReport.CollectPassFailStats()",1,2,2
"org.apache.derbyTesting.functionTests.harness.GenerateReport.CollectPassFailStats(File,String)",1,6,7
"org.apache.derbyTesting.functionTests.harness.GenerateReport.CollectProperties()",1,1,1
"org.apache.derbyTesting.functionTests.harness.GenerateReport.CountLines(String)",1,3,3
"org.apache.derbyTesting.functionTests.harness.GenerateReport.OutputFile(String)",1,3,3
"org.apache.derbyTesting.functionTests.harness.GenerateReport.addDiff(PrintWriter,File,String)",1,3,3
"org.apache.derbyTesting.functionTests.harness.GenerateReport.addLines(PrintWriter,File,String)",1,3,3
"org.apache.derbyTesting.functionTests.harness.GenerateReport.main(String[])",1,9,12
"org.apache.derbyTesting.functionTests.harness.GenerateReport.setupFile(String)",1,3,3
"org.apache.derbyTesting.functionTests.harness.HandleResult.handleResult(int,InputStream,InputStream,PrintWriter)",1,1,1
"org.apache.derbyTesting.functionTests.harness.HandleResult.handleResult(int,InputStream,InputStream,PrintWriter,String)",1,7,9
"org.apache.derbyTesting.functionTests.harness.HandleResult.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.harness.JavaVersionHolder.JavaVersionHolder(String)",1,7,9
"org.apache.derbyTesting.functionTests.harness.JavaVersionHolder.atLeast(int,int)",3,1,3
"org.apache.derbyTesting.functionTests.harness.JavaVersionHolder.getMajorNumber()",1,1,1
"org.apache.derbyTesting.functionTests.harness.JavaVersionHolder.getMajorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.harness.JavaVersionHolder.getMinorNumber()",1,1,1
"org.apache.derbyTesting.functionTests.harness.JavaVersionHolder.getMinorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ManageSysProps.resetSysProps()",1,2,2
"org.apache.derbyTesting.functionTests.harness.ManageSysProps.saveSysProps()",1,2,2
"org.apache.derbyTesting.functionTests.harness.MultiTest.MultiTest()",1,1,1
"org.apache.derbyTesting.functionTests.harness.MultiTest.allAlive(Thread[])",3,2,3
"org.apache.derbyTesting.functionTests.harness.MultiTest.allDead(Thread[])",3,2,3
"org.apache.derbyTesting.functionTests.harness.MultiTest.execTesters(mtTester[])",4,16,20
"org.apache.derbyTesting.functionTests.harness.MultiTest.getTestName(String)",1,2,3
"org.apache.derbyTesting.functionTests.harness.MultiTest.main(String[])",3,9,10
"org.apache.derbyTesting.functionTests.harness.MultiTest.openFile(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.MultiTest.seqRunCases(Vector,String,String,String)",2,3,3
"org.apache.derbyTesting.functionTests.harness.MultiTest.syntax()",1,1,1
"org.apache.derbyTesting.functionTests.harness.NetServer.NetServer(File,String,String,String,String,String,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.harness.NetServer.alterURL(String,String)",3,4,8
"org.apache.derbyTesting.functionTests.harness.NetServer.getDriverName(String)",2,1,2
"org.apache.derbyTesting.functionTests.harness.NetServer.getURLPrefix(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.NetServer.getURLSuffix(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.NetServer.isClientConnection(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.NetServer.isDB2Connection(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.NetServer.isJCCConnection(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.NetServer.isNetworkServerConnection(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.NetServer.printFramworkInfo(String)",1,3,4
"org.apache.derbyTesting.functionTests.harness.NetServer.start()",8,14,17
"org.apache.derbyTesting.functionTests.harness.NetServer.stop()",3,8,10
"org.apache.derbyTesting.functionTests.harness.NetServer.testNetworkServerConnection()",2,3,3
"org.apache.derbyTesting.functionTests.harness.ProcessStreamDrainer.ProcessStreamDrainer(InputStream,File)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ProcessStreamDrainer.Wait()",1,3,3
"org.apache.derbyTesting.functionTests.harness.ProcessStreamDrainer.run()",1,4,4
"org.apache.derbyTesting.functionTests.harness.ProcessStreamResult.ProcessStreamResult(InputStream,BufferedOutputStream,String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ProcessStreamResult.ProcessStreamResult(InputStream,BufferedOutputStream,String,String,String)",1,2,3
"org.apache.derbyTesting.functionTests.harness.ProcessStreamResult.Wait()",4,4,7
"org.apache.derbyTesting.functionTests.harness.ProcessStreamResult.run()",2,4,7
"org.apache.derbyTesting.functionTests.harness.PropertyUtil.copyProperties(Properties,Properties)",1,2,2
"org.apache.derbyTesting.functionTests.harness.PropertyUtil.sortProperties(Properties)",1,1,1
"org.apache.derbyTesting.functionTests.harness.PropertyUtil.sortProperties(Properties,char[])",1,11,12
"org.apache.derbyTesting.functionTests.harness.RunClass.RunClass(Method,Object[])",1,1,1
"org.apache.derbyTesting.functionTests.harness.RunClass.run()",1,3,3
"org.apache.derbyTesting.functionTests.harness.RunIJ.RunIJ(String[])",1,1,1
"org.apache.derbyTesting.functionTests.harness.RunIJ.run()",1,2,2
"org.apache.derbyTesting.functionTests.harness.RunList.RunList()",1,1,1
"org.apache.derbyTesting.functionTests.harness.RunList.RunList(Vector,File,File,PrintWriter,Properties,Properties,String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.RunList.addToSkipFile(String,PrintStream)",1,1,1
"org.apache.derbyTesting.functionTests.harness.RunList.checkClientExclusion(String,String,int,int,String)",6,8,14
"org.apache.derbyTesting.functionTests.harness.RunList.getVersionArray(String,int)",5,3,8
"org.apache.derbyTesting.functionTests.harness.RunList.getVersionCompareType(String)",5,3,5
"org.apache.derbyTesting.functionTests.harness.RunList.isClientExclusionKeyword(String)",3,2,3
"org.apache.derbyTesting.functionTests.harness.RunList.locateSuiteProperties(String,Properties,boolean,boolean)",1,4,6
"org.apache.derbyTesting.functionTests.harness.RunList.runSuites(Vector)",3,21,21
"org.apache.derbyTesting.functionTests.harness.RunList.runTests(Properties,String)",4,73,81
"org.apache.derbyTesting.functionTests.harness.RunList.setSpecialProps(Properties,boolean)",1,4,4
"org.apache.derbyTesting.functionTests.harness.RunList.setSuiteDir(String,boolean,boolean)",1,12,13
"org.apache.derbyTesting.functionTests.harness.RunList.setSuiteProperties(Properties,String,Properties,boolean,boolean)",1,40,47
"org.apache.derbyTesting.functionTests.harness.RunList.setTopSuiteProperties()",1,14,26
"org.apache.derbyTesting.functionTests.harness.RunList.shouldSkipTest()",13,19,47
"org.apache.derbyTesting.functionTests.harness.RunList.unloadEmbeddedDriver()",1,2,3
"org.apache.derbyTesting.functionTests.harness.RunList.versionExcluded(int[],int,int[],int,int,int)",5,1,7
"org.apache.derbyTesting.functionTests.harness.RunSuite.BuildSuitesVector(String,String)",1,4,4
"org.apache.derbyTesting.functionTests.harness.RunSuite.getSuiteProperties(String,boolean)",2,8,14
"org.apache.derbyTesting.functionTests.harness.RunSuite.getSuitesList(String,boolean)",1,10,10
"org.apache.derbyTesting.functionTests.harness.RunSuite.getSystemProperties()",1,47,50
"org.apache.derbyTesting.functionTests.harness.RunSuite.main(String[])",1,10,12
"org.apache.derbyTesting.functionTests.harness.RunSuite.setOutput(String)",1,6,6
"org.apache.derbyTesting.functionTests.harness.RunTest.addSkiptestReason(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.RunTest.addStandardTestJvmProps(Vector,String,String,jvm)",1,2,3
"org.apache.derbyTesting.functionTests.harness.RunTest.addToFailures(String)",1,1,3
"org.apache.derbyTesting.functionTests.harness.RunTest.addToListFile(String,String)",1,2,3
"org.apache.derbyTesting.functionTests.harness.RunTest.addToSuccesses(String)",1,1,3
"org.apache.derbyTesting.functionTests.harness.RunTest.appendStderr(BufferedOutputStream,InputStream)",1,2,2
"org.apache.derbyTesting.functionTests.harness.RunTest.buildTestCommand(String,String,String)",1,41,45
"org.apache.derbyTesting.functionTests.harness.RunTest.cleanupBaseDir(File)",1,7,10
"org.apache.derbyTesting.functionTests.harness.RunTest.composePolicyFile()",1,5,6
"org.apache.derbyTesting.functionTests.harness.RunTest.convertPathForWin(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.RunTest.createPropString()",5,80,97
"org.apache.derbyTesting.functionTests.harness.RunTest.deleteFile(File)",7,9,10
"org.apache.derbyTesting.functionTests.harness.RunTest.doCleanup(String)",1,16,17
"org.apache.derbyTesting.functionTests.harness.RunTest.encryptionProtocol(Properties)",2,8,12
"org.apache.derbyTesting.functionTests.harness.RunTest.execTestNoProcess(Properties,String,String,String)",1,16,20
"org.apache.derbyTesting.functionTests.harness.RunTest.execTestProcess(String[])",1,12,17
"org.apache.derbyTesting.functionTests.harness.RunTest.frameworkProtocol(Properties)",2,15,18
"org.apache.derbyTesting.functionTests.harness.RunTest.generateUTF8OutFile(File)",1,3,3
"org.apache.derbyTesting.functionTests.harness.RunTest.getProperties(Properties)",1,58,89
"org.apache.derbyTesting.functionTests.harness.RunTest.installSecurityManager()",6,6,8
"org.apache.derbyTesting.functionTests.harness.RunTest.loadProps(Properties,File)",1,2,2
"org.apache.derbyTesting.functionTests.harness.RunTest.loadTestResource(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.RunTest.main(String[])",3,32,43
"org.apache.derbyTesting.functionTests.harness.RunTest.mergeProps(Properties,Properties)",1,2,2
"org.apache.derbyTesting.functionTests.harness.RunTest.setDirectories(String,Properties)",3,61,70
"org.apache.derbyTesting.functionTests.harness.RunTest.setTestJavaFlags(String)",1,6,6
"org.apache.derbyTesting.functionTests.harness.RunTest.spaceJvmFlags(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.RunTest.testRun(String,Properties)",1,8,9
"org.apache.derbyTesting.functionTests.harness.RunTest.verifyFramework(String)",3,2,3
"org.apache.derbyTesting.functionTests.harness.RunTest.verifyTestType()",3,2,3
"org.apache.derbyTesting.functionTests.harness.RunTest.writePolicyFile(InputStream)",1,6,6
"org.apache.derbyTesting.functionTests.harness.Sed.Sed()",1,1,1
"org.apache.derbyTesting.functionTests.harness.Sed.doWork(File,File,InputStream,Vector,Vector,Vector,InputStream)",1,1,1
"org.apache.derbyTesting.functionTests.harness.Sed.doWork(File,File,InputStream,Vector,Vector,Vector,InputStream,boolean)",8,30,37
"org.apache.derbyTesting.functionTests.harness.Sed.exec(File,File,InputStream,boolean,boolean,boolean)",1,5,5
"org.apache.derbyTesting.functionTests.harness.Sed.execJCC(InputStream,File)",1,1,1
"org.apache.derbyTesting.functionTests.harness.Sed.main(String[])",1,2,3
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.DiffBuffer(BufferedReader)",1,1,1
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.DiffBuffer(BufferedReader,String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.DiffBuffer(BufferedReader,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.atEOF()",1,1,1
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.close()",1,1,1
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.isValidOffset(int)",3,1,3
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.iterate(boolean)",1,5,5
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.lineAt(int)",1,3,5
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.DiffBuffer.setLowWater(int)",1,2,2
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.debug(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.debug(int,String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.diffFiles(DiffBuffer,DiffBuffer)",9,21,22
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.doWork(BufferedReader,BufferedReader,PrintWriter)",2,4,5
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.lineCount(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.main(String[])",1,3,3
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.pause()",1,2,2
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.printFile(String[])",1,2,2
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.readFile(BufferedReader)",1,2,2
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.reportMemory()",1,1,1
"org.apache.derbyTesting.functionTests.harness.SimpleDiff.reportMemory(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.SkipTest.SkipTest()",1,1,1
"org.apache.derbyTesting.functionTests.harness.SkipTest.skipIt(String,String)",2,3,4
"org.apache.derbyTesting.functionTests.harness.SpecialFlags.SpecialFlags()",1,1,1
"org.apache.derbyTesting.functionTests.harness.SpecialFlags.getSpecialProperties(Properties)",4,4,5
"org.apache.derbyTesting.functionTests.harness.SpecialFlags.parse(String,Properties,Properties)",1,6,8
"org.apache.derbyTesting.functionTests.harness.SysInfoLog.SysInfoLog()",1,1,1
"org.apache.derbyTesting.functionTests.harness.SysInfoLog.exec(String,String,String,String,PrintWriter,boolean)",1,16,17
"org.apache.derbyTesting.functionTests.harness.TimedProcess.TimedProcess(Process)",1,1,1
"org.apache.derbyTesting.functionTests.harness.TimedProcess.waitFor(int)",1,3,3
"org.apache.derbyTesting.functionTests.harness.UnJar.UnJar()",1,1,1
"org.apache.derbyTesting.functionTests.harness.UnJar.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.harness.UnJar.unjar(String,String,boolean)",1,7,7
"org.apache.derbyTesting.functionTests.harness.WaitForProcess.WaitForProcess(Process)",1,1,1
"org.apache.derbyTesting.functionTests.harness.WaitForProcess.getProcessExitValue()",1,1,1
"org.apache.derbyTesting.functionTests.harness.WaitForProcess.run()",1,1,2
"org.apache.derbyTesting.functionTests.harness.currentjvm.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.currentjvm.currentjvm()",1,1,1
"org.apache.derbyTesting.functionTests.harness.currentjvm.currentjvm(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.currentjvm.currentjvm(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.currentjvm.currentjvm(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.currentjvm.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.currentjvm.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.currentjvm.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.dbcleanup.doit(boolean)",5,25,28
"org.apache.derbyTesting.functionTests.harness.dbcleanup.doshutdown()",1,3,3
"org.apache.derbyTesting.functionTests.harness.dbcleanup.dropAliases(Connection,char)",1,6,8
"org.apache.derbyTesting.functionTests.harness.dbcleanup.dropTables(Connection,Statement,Vector,String)",1,5,5
"org.apache.derbyTesting.functionTests.harness.dbcleanup.findTables(Connection,Statement,char,String)",1,3,3
"org.apache.derbyTesting.functionTests.harness.dbcleanup.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm13.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.ibm13.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.ibm13.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm13.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm13.ibm13()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm13.ibm13(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm13.ibm13(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm13.ibm13(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm14.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.ibm14.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.ibm14.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm14.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm14.ibm14()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm14.ibm14(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm14.ibm14(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm14.ibm14(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm15.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.ibm15.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.ibm15.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm15.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm15.ibm15()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm15.ibm15(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm15.ibm15(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm15.ibm15(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm16.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.ibm16.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.ibm16.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm16.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm16.ibm16()",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm16.ibm16(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm16.ibm16(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.ibm16.ibm16(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_13.appendOtherFlags(StringBuffer)",1,18,18
"org.apache.derbyTesting.functionTests.harness.j9_13.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.j9_13.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_13.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_13.j9_13()",1,4,4
"org.apache.derbyTesting.functionTests.harness.j9_13.j9_13(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_13.j9_13(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_13.j9_13(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_13.setSecurityProps()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_22.appendOtherFlags(StringBuffer)",1,17,17
"org.apache.derbyTesting.functionTests.harness.j9_22.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.j9_22.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_22.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_22.j9_22()",1,3,3
"org.apache.derbyTesting.functionTests.harness.j9_22.j9_22(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_22.j9_22(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_22.j9_22(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_22.setSecurityProps()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation.appendOtherFlags(StringBuffer)",1,17,17
"org.apache.derbyTesting.functionTests.harness.j9_foundation.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.j9_foundation.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation.j9_foundation()",1,3,3
"org.apache.derbyTesting.functionTests.harness.j9_foundation.j9_foundation(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation.j9_foundation(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation.j9_foundation(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation11.appendOtherFlags(StringBuffer)",1,17,17
"org.apache.derbyTesting.functionTests.harness.j9_foundation11.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.j9_foundation11.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation11.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation11.j9_foundation11()",1,3,3
"org.apache.derbyTesting.functionTests.harness.j9_foundation11.j9_foundation11(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation11.j9_foundation11(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.j9_foundation11.j9_foundation11(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk13.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.jdk13.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.jdk13.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk13.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk13.jdk13()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk13.jdk13(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk13.jdk13(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk13.jdk13(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk14.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.jdk14.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.jdk14.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk14.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk14.jdk14()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk14.jdk14(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk14.jdk14(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk14.jdk14(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk15.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.jdk15.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.jdk15.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk15.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk15.jdk15()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk15.jdk15(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk15.jdk15(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk15.jdk15(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk16.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.jdk16.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.jdk16.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk16.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk16.jdk16()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk16.jdk16(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk16.jdk16(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk16.jdk16(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk17.appendOtherFlags(StringBuffer)",1,15,15
"org.apache.derbyTesting.functionTests.harness.jdk17.getCommandLine()",1,2,2
"org.apache.derbyTesting.functionTests.harness.jdk17.getDintro()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk17.getName()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk17.jdk17()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk17.jdk17(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk17.jdk17(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jdk17.jdk17(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.baseName(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.findCodeBase(boolean[])",4,4,5
"org.apache.derbyTesting.functionTests.harness.jvm.getCommandLine()",1,4,4
"org.apache.derbyTesting.functionTests.harness.jvm.getCurrentJvm()",1,3,4
"org.apache.derbyTesting.functionTests.harness.jvm.getJvm(String)",1,2,2
"org.apache.derbyTesting.functionTests.harness.jvm.getMajorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.getMinorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.getSecurityProps(Vector)",2,5,7
"org.apache.derbyTesting.functionTests.harness.jvm.guessWSHome()",1,4,4
"org.apache.derbyTesting.functionTests.harness.jvm.jvm()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.jvm(String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.jvm(boolean,boolean,boolean,long,long,long,long,String,String,boolean,boolean,boolean,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.jvm(long,long,String,Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setClasspath(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setD(Vector)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setFlags(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setJavaCmd(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setMs(long)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setMx(long)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setNoasyncgc(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setNoclassgc(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setNojit(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setNoverify(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setOss(long)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setProf(String)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setSecurityProps()",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setSs(long)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setVerbosegc(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setVerify(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.harness.jvm.setVersion()",1,2,4
"org.apache.derbyTesting.functionTests.harness.jvm.warn(String)",1,3,4
"org.apache.derbyTesting.functionTests.harness.shutdown.doit()",1,5,6
"org.apache.derbyTesting.functionTests.harness.shutdown.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.suites.All.All(String)",1,1,1
"org.apache.derbyTesting.functionTests.suites.All.suite()",1,2,2
"org.apache.derbyTesting.functionTests.suites.AllPackages.AllPackages(String)",1,1,1
"org.apache.derbyTesting.functionTests.suites.AllPackages.addSuiteByReflection(String)",2,5,5
"org.apache.derbyTesting.functionTests.suites.AllPackages.suite()",1,1,1
"org.apache.derbyTesting.functionTests.suites.EncryptionSuite.EncryptionSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.suites.EncryptionSuite.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.suites.EncryptionSuite.encryptedSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.suites.EncryptionSuite.suite()",1,2,2
"org.apache.derbyTesting.functionTests.suites.EncryptionSuite.testConnection()",1,1,1
"org.apache.derbyTesting.functionTests.suites.XMLSuite.XMLSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.suites.XMLSuite.suite()",1,1,1
"org.apache.derbyTesting.functionTests.testData.serializedDataSources.SerializeDataSources.main(String[])",1,5,7
"org.apache.derbyTesting.functionTests.testData.serializedDataSources.SerializeDataSources.printInfoFromSerializedFile(String)",3,4,4
"org.apache.derbyTesting.functionTests.testData.serializedDataSources.SerializeDataSources.serializeDataSources(String,String,String[])",2,3,3
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.CheckToursDBTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.basesuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.doDelete()",1,2,2
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.doSelect()",1,2,2
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.doUpdate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.insertMaps()",1,1,1
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.insertMapsPrivileged()",1,2,2
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.demo.CheckToursDBTest.testToursDB()",1,2,2
"org.apache.derbyTesting.functionTests.tests.demo._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.demo._Suite.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.BadConnectionTest.BadConnectionTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.BadConnectionTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.BadConnectionTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.BadConnectionTest.testBadConnectionAttribute()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.BadConnectionTest.testDatabaseNotFound()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.BadConnectionTest.testNoUserOrPassword()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.ByteArrayCombinerStreamTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testCombineAvailable4bytes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testCombineAvailableNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testCombineNullRead()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testCombineNullReadArray()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testCombineOneArray()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testCombineWithExtraEmptyByteArray()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testCominbe100SmallArrays()",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testNegativeLengthArgument()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testNegativeValueInDataCausesEndOfStream()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testTooLittleDataNoCombine()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testTooLittleDataWithCombine()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testTruncateDataFromOneArray()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ByteArrayCombinerStreamTest.testTruncateDataFromTwoArrays()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.CheckSecurityManager.CheckSecurityManager(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.CheckSecurityManager.setIllegalPropertyProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.CheckSecurityManager.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.CheckSecurityManager.tearDown()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.CheckSecurityManager.testIllegalPropertySet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ClientSideSystemPropertiesTest.ClientSideSystemPropertiesTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ClientSideSystemPropertiesTest.setUp()",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.ClientSideSystemPropertiesTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ClientSideSystemPropertiesTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ClientSideSystemPropertiesTest.testConnection()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.DRDAProtocolTest.DRDAProtocolTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.DRDAProtocolTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.DRDAProtocolTest.testMultipleConnections()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.announceTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.checkConn(Connection,String)",1,2,3
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.checkLog(String,String[])",1,6,7
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.deleteDir(File)",2,3,4
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.deleteDir(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.endTest(boolean)",1,8,12
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.getLogFileLength(String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.getPrintStream(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.isServerStarted(NetworkServerControl)",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.runAllTests()",1,6,8
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.runTest(String[])",5,7,9
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.setup(String[])",5,8,12
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.startTest(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.stopServer(Process)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.testExtantNetServer()",5,21,23
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetAutoStart.writeDerbyProperties(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetNewServer.main(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.DerbyNetNewServer.testServer(NetworkServerControl,ByteArrayOutputStream,String)",3,11,12
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.LOBLocatorReleaseTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.assertInvalid(Clob)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.forwardOnlyTest(String)",1,7,8
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.scrollableTest(String,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.suite()",1,6,6
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testBlobClobStateAfterCloseOnScrollable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testBlobClobStateForwardOnlyWithNoNulls()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testForwardOnlyWithNoNulls()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testForwardOnlyWithNulls()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testNoLOBs()",1,1,3
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testScrollableAbsoluteRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testScrollableMoveToCurrentRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testScrollableUpdateWithLocators()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testScrollableWithNoNulls()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.LOBLocatorReleaseTest.testScrollableWithNulls()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.NSSecurityMechanismTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.addRequiredAttributes(HashMap)",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertAllCombinationsOfUserPasswordSecMecInputOK(String[])",1,5,7
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionOK(Connection)",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionUsingDataSource(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionUsingDriverManager(String,String,String)",1,14,14
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertConnectionsUsingDriverManager(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertDerby1080Fixed(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertSQLState08001(String,SQLException)",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertSecMecWithConnPoolingOK(String,String,Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertSecurityMechanismOK(String,String,Short,String,String)",1,9,9
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.assertUSRSSBPWD_with_BUILTIN(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.dumpSQLException(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.getCPDS(String,String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.getDS(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.getDS(String,String,HashMap)",1,4,5
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.getDataSourceConnection(String,String,String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.getDataSourceConnectionWithSecMec(String,String,Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.getExpectedValueFromAll(String[],int,int,int)",2,1,12
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.getJDBCUrl(String)",1,2,3
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.setSecurityMechanism(String)",2,9,9
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testNetworkServerSecurityMechanism()",4,6,8
"org.apache.derbyTesting.functionTests.tests.derbynet.NSSecurityMechanismTest.testSecurityMechanismOnEmbedded()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSinSameJVMTest.NSinSameJVMTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSinSameJVMTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSinSameJVMTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NSinSameJVMTest.testShutdown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetHarnessJavaTest.NetHarnessJavaTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetHarnessJavaTest.getArea()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetHarnessJavaTest.suite()",2,2,3
"org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest.NetIjTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest.getSuite(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.NetworkServerControlApiTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.decorateTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.fileExists(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.makeServerPolicyName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.privInetAddressGetByName(String)",2,2,3
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.testPing()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.testTraceCommands()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlApiTest.testWrongUsage()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlClientCommandTest.NetworkServerControlClientCommandTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlClientCommandTest.assertFailedPing(String[],String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlClientCommandTest.assertSuccessfulPing(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlClientCommandTest.suite()",2,3,4
"org.apache.derbyTesting.functionTests.tests.derbynet.NetworkServerControlClientCommandTest.testPing()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.createOriginalDataInputStream(int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.createTestTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.getConnection()",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.getShutdownErrLogFileStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.getShutdownLogFileStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.isServerStarted(NetworkServerControl,int)",3,2,4
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.main(String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.shutdownServer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.startServer()",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.OutBufferedStream.testReadOfLob()",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.PrepareStatementTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.genString(String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.insertTab(String,int)",1,4,6
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.jira125Test_a()",1,5,6
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.jira125Test_b()",1,3,4
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.makeString(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.selectFromBigTab()",2,3,6
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testAlternatingLobValuesAndNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testBasicPrepare()",1,3,4
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testBigDecimalSetObject()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testBigDecimalSetObjectWithScale()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testBigTable()",1,5,6
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testDSSLength()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testDerby3230()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testExcpetionWithBigParameter()",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testInvalidTimestamp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testLargeBatch()",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testLargeParameters_a()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testLargeParameters_b()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testLargeReplies()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testManyPreparedStatements()",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testParameterTypes()",1,5,5
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testServerStatementCleanUp()",3,2,5
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testSmallBigDecimal()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testSplitQRYDTABlock()",3,2,4
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testVariationOfSetObject()",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.testVaryingClientParameterTypeBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.PrepareStatementTest.tickleDSSLength(int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.SSLTest.SSLTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SSLTest.decorateTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SSLTest.getStartupProperties()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SSLTest.suite()",3,1,3
"org.apache.derbyTesting.functionTests.tests.derbynet.SSLTest.testSSLBasicDSConnect()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SSLTest.testSSLBasicDSPlainConnect()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.Outcome.Outcome(boolean,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.Outcome.expectedServerOutput()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.Outcome.serverShouldComeUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.SecureServerTest(boolean,boolean,String,String,Outcome)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.connectToServer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.decorateTest(boolean,boolean,String,String,Outcome)",1,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.enableTracing()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.getServerOutput()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.getStartupArgs(boolean,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.getStartupProperties(boolean,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.runServerCommand(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.runsysinfo()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.serverBootedOK()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.serverCameUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.suite()",3,1,3
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.testServerStartup()",1,2,3
"org.apache.derbyTesting.functionTests.tests.derbynet.SecureServerTest.toString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ServerPropertiesTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.assertSuccessfulCmd(String,String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.canPingServer(int,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.checkWhetherNeedToShutdown(int[],String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.decorateTest(String,String[],String[],boolean)",1,1,4
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.decorateWithPolicy(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.getAlternativePort()",1,3,6
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.makeServerPolicyName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.shutdownServer(int,boolean)",2,2,4
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.startServer(int,boolean)",2,2,4
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.suite()",4,2,5
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.tearDown()",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.testToggleLogConnections()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.testToggleTrace()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestDefaultProperties()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.ttestSetPortPriority()",1,4,7
"org.apache.derbyTesting.functionTests.tests.derbynet.ServerPropertiesTest.verifyProperties(String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.ShutDownDBWhenNSShutsDownTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.XXtestDatabasesShutDownWhenNSShutdown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.createDatabase()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.fileExists(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.scenarioEngineShutdownDoesNotTakeDownNS(boolean)",1,5,5
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.shutdownServerCheckDBShutDown(boolean)",1,2,3
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.testDatabasesShutDownWhenNSShutdownAPI()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.testEngineShutdownDoesNotTakeDownNSAutoReload()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.ShutDownDBWhenNSShutsDownTest.testEngineShutdownDoesNotTakeDownNSManualReload()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest.SqlExceptionTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest.recreateSQLException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest.testChainedException()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest.testNextException()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SqlExceptionTest.testSerializedException()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.SuicideOfStreamingTest.SuicideOfStreamingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SuicideOfStreamingTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SuicideOfStreamingTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.SuicideOfStreamingTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SuicideOfStreamingTest.testInterruptedReadOfLob()",1,2,3
"org.apache.derbyTesting.functionTests.tests.derbynet.SwitchablePrintStream.SwitchablePrintStream(OutputStream)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.SwitchablePrintStream.switchOutput(OutputStream)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.TestEnc.go(String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.TestEnc.handleSQLException(String,SQLException,boolean)",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.TestEnc.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet._Suite.suite()",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.dblook_test_net.doTest()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.dblook_test_net.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.dblook_test_net_territory.doTest()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.dblook_test_net_territory.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.executeUpdate.main(String[])",2,12,12
"org.apache.derbyTesting.functionTests.tests.derbynet.getCurrentProperties.joinsignal()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.getCurrentProperties.joinwait()",1,3,3
"org.apache.derbyTesting.functionTests.tests.derbynet.getCurrentProperties.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.getCurrentProperties.startConnection()",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.maxthreads.checkMaxThreads(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.maxthreads.main(String[])",1,5,5
"org.apache.derbyTesting.functionTests.tests.derbynet.runtimeinfo.main(String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.runtimeinfo.prepareAndExecuteQuery(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.sysinfo.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.sysinfo.test(String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.derbynet.sysinfo_withproperties.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.testProtocol.executeFile(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.testProtocol.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.testProtocol.testProtocol()",1,1,1
"org.apache.derbyTesting.functionTests.tests.derbynet.timeslice.checkTimeSlice(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.derbynet.timeslice.main(String[])",1,5,5
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.ErrorStreamTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.assertIsDirectory(File)",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.assertIsEmpty(File)",1,3,3
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.assertIsExisting(File)",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.assertNotDirectory(File)",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.assertNotEmpty(File)",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.assertNotExisting(File)",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.bootDerby()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.closeStreams()",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.deleteFile(File)",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.deleteStreamFiles()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.getCanonicalPath(File)",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.getStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.makeDirIfNotExisting(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.makeStreamFilename(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.newFileOutputStream(File)",1,2,2
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.nullFields()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.openStreams()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.resetProps()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.setSystemErr(PrintStream)",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testDefault()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testField()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFile()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFileOverField()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFileOverMethod()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testFileOverMethodAndField()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testMethod()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testMethodOverField()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testWrongField()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testWrongFile()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine.ErrorStreamTest.testWrongMethod()",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.engine._Suite.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.i18n.DefaultLocale.checkDatabaseLocale(String)",2,1,2
"org.apache.derbyTesting.functionTests.tests.i18n.DefaultLocale.checkDefaultLocale()",2,1,2
"org.apache.derbyTesting.functionTests.tests.i18n.DefaultLocale.checkRDefaultLocale()",2,1,2
"org.apache.derbyTesting.functionTests.tests.i18n.DefaultLocale.setDefaultLocale(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.i18n.MessageBundleTest.MessageBundleTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.i18n.MessageBundleTest.loadClassIds(Class,HashSet)",7,3,8
"org.apache.derbyTesting.functionTests.tests.i18n.MessageBundleTest.loadMessageBundle(int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.i18n.MessageBundleTest.loadMessageBundleIds()",1,2,2
"org.apache.derbyTesting.functionTests.tests.i18n.MessageBundleTest.testMessageBundleOrphanedMessages()",4,2,4
"org.apache.derbyTesting.functionTests.tests.i18n.MessageBundleTest.testMessageIdOrphanedIds()",1,3,3
"org.apache.derbyTesting.functionTests.tests.i18n.MessageBundleTest.testSQLStateOrphanedIds()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobClobTestSetup.BlobClobTestSetup(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobClobTestSetup.getID()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobClobTestSetup.getSampleBlob(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobClobTestSetup.getSampleClob(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobClobTestSetup.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobClobTestSetup.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest.BlobSetMethodsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest.testSetBytesLargeBlob()",1,4,6
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobSetMethodsTest.testSetBytesSmallBlob()",1,5,8
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.BlobTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.buildHashSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.buildMethodList(Object)",1,7,9
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.checkIfExempted(Method)",5,5,7
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.checkIfMethodThrowsSQLException(Object,Method)",4,4,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.executeParallelUpdate(int,boolean)",2,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.getNullValueForType(Class)",10,1,10
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.getNullValues(Class<?>[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.initializeLongBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testFreeandMethodsAfterCallingFree()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testGetBinaryStreamBlobUpdates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testGetBinaryStreamCreateBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testGetBinaryStreamLong()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testGetBinaryStreamLongExceptionConditions()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testLockingAfterFree()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testLockingAfterFreeWithDirtyReads()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.BlobTest.testLockingAfterFreeWithRR()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.CallableStatementTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamIntOnInParameterOfInvalidType()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamIntOnInParameterOfValidType()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamIntOnInvalidTypeDOUBLE()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamIntOnVARBINARYWithNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamIntOnVARCHARWithNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamIntVARBINARYDirect()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamIntVARBINARYFromDb()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamIntVARCHAR()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetCharacterStreamStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetDoubleIntOnInParameter()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetNCharacterStreamIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetNCharacterStreamStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetNClobIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetNClobStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetNStringIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetNStringStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetSQLXMLIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testGetSQLXMLStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testIsNotWrapperForResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testIsWrapperForCallableStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testIsWrapperForPreparedStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testIsWrapperForStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testIsWrapperForXXXStatement(Class)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testNamedParametersAreNotSupported()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetAsciiStream()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetBinaryStream()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetBlobNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetCharacterStream()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetClobNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetNCharacterStreamNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetNClobNClobNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetNClobReaderNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetNStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testSetSQLXMLNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testUnwrapCallableStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testUnwrapPreparedStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testUnwrapResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTest.testUnwrapStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.CallableStatementTestSetup(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.getBinaryDirect(String,byte[][])",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.getBinaryDirectProcedure(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.getBinaryFromDb(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.getBinaryFromDbFunction(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.getIntToStringFunction(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.getVarcharFromDb(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.getVarcharFromDbFunction(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.CallableStatementTestSetup.tearDown()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.ClobTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.buildHashSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.buildMethodList(Object)",1,7,9
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.checkIfExempted(Method)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.checkIfMethodThrowsSQLException(Object,Method)",2,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.executeParallelUpdate(int,boolean)",2,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.getNullValueForType(Class)",10,1,10
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.getNullValues(Class<?>[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.initializeLongClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testFreeandMethodsAfterCallingFree()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetAsciiStreamClobUpdates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetAsciiStreamCreateClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamClobUpdates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamCreateClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamLong()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamLongExceptionConditions()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testGetCharacterStreamLongOnLargeClob()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testLockingAfterFree()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testLockingAfterFreeWithDirtyReads()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ClobTest.testLockingAfterFreeWithRR()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionMethodsTest.ConnectionMethodsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionMethodsTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionMethodsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionMethodsTest.testConnectionIsValid()",1,12,12
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionMethodsTest.testCreateBlob()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionMethodsTest.testCreateClob()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.ConnectionTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.clientSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.embeddedCreateBlob()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.embeddedCreateClob()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.embeddedSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testCreateArrayNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testCreateNClobNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testCreateSQLXMLNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testCreateStructNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testGetClientInfo()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testGetClientInfoString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testGetTypeMapReturnsEmptyMap()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testIsValidImplemented()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testIsWrapperReturnsFalse()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testIsWrapperReturnsTrue()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testSetClientInfoProperties()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testSetClientInfoString()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testUnwrapInvalid()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ConnectionTest.testUnwrapValid()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.DataSourceTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testConnectionErrorEvent()",1,21,21
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testIsNotWrapperForPoolDataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testIsNotWrapperForResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testIsNotWrapperForXADataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testIsWrapperForDataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testUnwrapConnectionPoolDataSource()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testUnwrapDataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testUnwrapResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.DataSourceTest.testUnwrapXADataSource()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.Derby3650Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.setup()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.test1ToManyJoinBlob(boolean,boolean)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.test1ToManyJoinBlobNoFree()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.test1ToManyJoinBlobWithCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.test1ToManyJoinBlobWithFree()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.test1ToManyJoinClob(boolean,boolean)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.test1ToManyJoinClobNoFree()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.test1ToManyJoinClobWithCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.test1ToManyJoinClobWithFree()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.verify40KBlob(InputStream)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.Derby3650Test.verify40KClob(Reader)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptBlobMD.ExemptBlobMD(String,Class[],boolean,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptBlobMD.getIfClientFramework()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptBlobMD.getIfEmbeddedFramework()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptBlobMD.getMethodName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptBlobMD.getParams()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptClobMD.ExemptClobMD(String,Class[],boolean,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptClobMD.getIfClientFramework()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptClobMD.getIfEmbeddedFramework()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptClobMD.getMethodName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ExemptClobMD.getParams()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.JDBC40TranslationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_NO_NULLS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_NO_TABLE()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_NULLABLE()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_NULLABLE_UNKNOWN()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_PARAMETER_IN()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_PARAMETER_INOUT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_PARAMETER_OUT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_PARAMETER_UNKNOWN()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_RESULT_UNKNOWN()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_RETURN()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testDatabaseMetaDataFUNCTION_RETURNS_TABLE()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testTypesLONGNVARCHAR()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testTypesNCHAR()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testTypesNCLOB()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testTypesNVARCHAR()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testTypesROWID()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC40TranslationTest.testTypesSQLXML()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest.JDBC4FromJDBC3DataSourceTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest.assertNonJDBC4DataSource(DataSource)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest.checkJDBC4Interface(PooledConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest.testPooledConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.JDBC4FromJDBC3DataSourceTest.testXAConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.LobStreamTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testEndOfStreamOnReadOneParameter()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testEndOfStreamOnReadThreeParameters()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testEndOfStreamValue()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadNoParameterWriteOneParameter()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWithInvalidParameterValues()",1,9,9
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWriteNoParameters()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWriteOneParameter()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testReadWriteThreeParameter()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testSkip()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.LobStreamTest.testWriteWithInvalidParameterValues()",1,9,9
"org.apache.derbyTesting.functionTests.tests.jdbc4.ParameterMetaDataWrapperTest.ParameterMetaDataWrapperTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ParameterMetaDataWrapperTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ParameterMetaDataWrapperTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ParameterMetaDataWrapperTest.tearDown()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.ParameterMetaDataWrapperTest.testIsNotWrapperForResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ParameterMetaDataWrapperTest.testIsWrapperForParameterMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ParameterMetaDataWrapperTest.testUnwrapParameterMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ParameterMetaDataWrapperTest.testUnwrapResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.PreparedStatementTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.assertInternalDerbyIOExceptionState(String,String,SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.requestKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.setAsciiStream(PreparedStatement,int,int,int,int,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.setBinaryStreamOnBlob(int,int,int,int,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testBlobExceptionDoesNotRollbackOtherStatements()",1,8,8
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testExceptionPathMultiplePages_bs()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testExceptionPathOnePage_bs()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testIsNotWrapperForCallableStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testIsNotWrapperForResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testIsPoolable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testIsPoolableOnClosed()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testIsWrapperForPreparedStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testIsWrapperForStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStream()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStreamLengthLess1KOnClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStreamLengthLess32KOnClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStreamLengthLess65KOnClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStreamLengthLessOnClobTooLong()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStreamLengthLessOnClobTooLongTruncate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStreamLengthless()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStreamLengthlessOnLongVarCharDontTruncate()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetAsciiStreamLengthlessOnLongVarCharTooLong()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetBinaryStream()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetBinaryStreamLengthLess1KOnBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetBinaryStreamLengthLess32KOnBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetBinaryStreamLengthLess65KOnBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetBinaryStreamLengthLessOnBlobTooLong()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetBinaryStreamLengthless()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetBlobLengthless()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetCharacterStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetCharacterStreamLengthless()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetClobLengthless()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetNCharacterStream()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetNCharacterStreamLengthlessNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetNClob1()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetNClob2()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetNClobLengthlessNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetNString()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetPoolable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetPoolableOnClosed()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetRowId()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testSetSQLXML()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testUnwrapCallableStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testUnwrapPreparedStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testUnwrapResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.PreparedStatementTest.testUnwrapStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest.ResultSetMetaDataTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest.tearDown()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest.testIsWrapperForResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest.testIsWrapperForResultSetMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest.testUnwrapResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetMetaDataTest.testUnwrapResultSetMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.ResultSetTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.decorateTestSuite(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.fetch(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.fetchUpd(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.getResultSetWithHoldability(int,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.holdabilityString(int)",4,2,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.prep(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.requestKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testDerby1368()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testDerby1368(boolean)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testExceptionWhenClosed()",3,6,6
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetHoldability()",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetNCharacterStreamIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetNCharaterStreamStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetNClobNotIntImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetNClobStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetNStringIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetNStringStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetSQLXMLIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testGetSQLXMLStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testIsClosed()",1,3,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testIsClosedOnNonHoldableResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateAsciiStream()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateAsciiStreamLengthless()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateAsciiStreamLengthlessParameterName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateAsciiStreamStringParameterName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBinaryStream()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBinaryStreamLengthless()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBinaryStreamLengthlessBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBinaryStreamLengthlessParameterName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBinaryStreamStringParameterName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBlobLengthless()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBlobStringParameterName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBlobStringParameterNameWithLengthofIS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBlobWithLengthofIS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateBlobWithStreamLengthlessParameterName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateCharacterStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateCharacterStreamLengthless()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateCharacterStreamLengthlessParameterName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateCharacterStreamStringParameterName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateClobLengthless()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateClobLengthlessParameterName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateClobStringParameterName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateClobStringParameterNameWithLengthofIS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateClobwithLengthofIS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNCharacterStreamIntLengthLessNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNCharacterStreamIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNCharacterStreamStringLengthlessNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNCharacterStreamStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNClobIntLengthlessNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNClobIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNClobStringLengthlessNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNClobStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNStringIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateNStringStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateSQLXMLIntNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testUpdateSQLXMLStringNotImplemented()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.testWrapper()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.ResultSetTest.threeResultSets(ResultSet[],ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.RowIdNotImplementedTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.getCallableStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.getResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInCallableStatementGetRowIdInt()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInCallableStatementGetRowIdString()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInCallableStatementSetRowId()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInDatabaseMetaDataRowIdLifeTime()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInPreparedStatementSetRowId()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInResultSetGetRowIdInt()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInResultSetGetRowIdString()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInResultSetUpdateRowIdInt()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.RowIdNotImplementedTest.testRowIdInResultSetUpdateRowIdString()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.SetObjectUnsupportedTest(String,TypeInfo,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.TypeInfo.TypeInfo(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.baseSuite(boolean,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.getName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.prepare()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.testUnsupportedSetNull()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.testUnsupportedSetNullWithTypeName()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.testUnsupportedSetObject()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.SetObjectUnsupportedTest.testUnsupportedSetObjectWithScale()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.StatementEventsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.Suite.Suite(boolean,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.baseSuite(String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.getName()",1,1,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.prepare(String)",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.setCallable(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.setXA(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.testAddListenerFromListener()",1,6,8
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.testAddNullEvent()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.testCloseEvent()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.testCloseEventOnClosedConnection()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.testErrorEventOnClosedConnection()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.testRemoveListenerFromListener()",1,7,7
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementEventsTest.testRemoveNullEvent()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.StatementTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testIsClosedBasic()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testIsClosedWhenClosingConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testIsClosedWhenClosingConnectionInInvalidState()",2,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testIsClosedWithTwoStatementsOnSameConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testIsNotWrapperForCallableStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testIsNotWrapperForPreparedStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testIsNotWrapperForResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testIsWrapperForStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testPoolable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testStatementExecuteAfterConnectionClose()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testUnwrapCallableStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testUnwrapPreparedStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testUnwrapResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTest.testUnwrapStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTestSetup.StatementTestSetup(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTestSetup.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.StatementTestSetup.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.TestDbMetaData(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.assertGetFunctionColumnsRs(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.assertGetFunctionsRs(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.assertGetSchemasRs(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.createFunctions(Statement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.getGetFunctions()",1,3,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.getSysFunctions()",1,3,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testAutoCommitFailure()",1,5,6
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testAutoCommitFailureClosesAllResultSets()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testFunctionNullable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetClientInfoProperties()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetFunctionColumnsForDummyFunctions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetFunctionColumnsStartingWithDUMMY()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetFunctionsContainingGET()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetFunctionsDummySchema()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetFunctionsFromSysSchemas()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetFunctionsNoSchemaNoCatalog()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetFunctionsNullNullNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetSchemasMatchingAPP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetSchemasMatchingBLAH()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetSchemasNullNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetSchemasStartingWithSYS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetWrapperNegative()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testGetWrapperPositive()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testIsWrapperForNegative()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testIsWrapperForPositive()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testStoredProcEscapeSyntax()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestDbMetaData.testSupportsStoredFunctionsUsingCallSyntax()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.TestJDBC40Exception(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.testConnectionException()",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.testDataException()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.testIntegrityConstraintViolationException()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.testSyntaxErrorException()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.TestJDBC40Exception.testTimeout()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.Exclusions.Exclusions(Class,MD[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.Exclusions.getExcludedMethods()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.Exclusions.getInterface()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.FD.FD(String,Class[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.FD.isOptional()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MD.MD(String,Class[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MD.getArgTypes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MD.getMethodName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MD.isOptional()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MD.toString()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MethodSortable.MethodSortable(Method)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MethodSortable.compareTo(Object)",4,1,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MethodSortable.getMethod()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MethodSortable.isCloseMethod()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.MethodSortable.toString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.UnsupportedVetter()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.connectionWorkhorse(Connection,HashSet<String>,HashSet<String>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.getNullArguments(Class[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.getNullValueForType(Class)",10,1,10
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.initializeExcludableMap(HashSet<String>)",4,5,7
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.isExcludable(Method)",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.printNotUnderstoodList(HashSet<String>)",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.printUnsupportedList(HashSet<String>)",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.printVanishedMethodList(HashSet<String>)",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.recordUnexpectedError(Object,Class,Method,HashSet<String>,Throwable)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.sortMethods(Class)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.testSupportedMethods()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetConnectionPooledDataSource(HashSet<String>,HashSet<String>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetDataSource(HashSet<String>,HashSet<String>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetInterfaceMethods(Object,Class,HashSet<String>,HashSet<String>)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetInterfaces(Object,Class,HashSet<String>,HashSet<String>)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetLargeObjects(Connection,HashSet<String>,HashSet<String>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetMethod(Object,Class,Method,HashSet<String>,HashSet<String>)",1,11,14
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetObject(Object,HashSet<String>,HashSet<String>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetSavepoint(Connection,HashSet<String>,HashSet<String>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.UnsupportedVetter.vetXADataSource(HashSet<String>,HashSet<String>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.ClassInfo.ClassInfo(Class,Class)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.ClassInfo.equals(Object)",2,3,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.ClassInfo.hashCode()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.VerifySignatures(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.addClass(Set<ClassInfo>,Class,Class)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.checkImplementationMethod(Class,Method)",3,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.collectClassesFromCallableStatement(Connection,Set<ClassInfo>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.collectClassesFromConnection(Connection,Set<ClassInfo>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.collectClassesFromConnectionPoolDataSource(Set<ClassInfo>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.collectClassesFromDataSource(Set<ClassInfo>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.collectClassesFromPreparedStatement(Connection,Set<ClassInfo>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.collectClassesFromStatement(Connection,Set<ClassInfo>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.collectClassesFromXADataSource(Set<ClassInfo>)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.findCompatibleClass(Class,Class[])",3,2,3
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.getAllInterfaces(Class)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.getInterfacesToCheck()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.VerifySignatures.testAllJDBCObjects()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test.XA40Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test.tearDown()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test.testCallableStatementPoolable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test.testPreparedStatementPoolable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4.XA40Test.testStatementPoolable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbc4._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbc4._Suite.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AIjdbcTest.AIjdbcTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AIjdbcTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AIjdbcTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AIjdbcTest.testSelect()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AIjdbcTest.testSelectView()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher.AssertEventCatcher(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher.connectionClosed(ConnectionEvent)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher.connectionErrorOccurred(ConnectionEvent)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher.didConnectionClosedEventHappen()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher.didConnectionErrorEventHappen()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AssertEventCatcher.resetState()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.AuthenticationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertConnectionFail(String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertConnectionFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertConnectionOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertConnectionWOUPFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertConnectionWOUPOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertFailSetDatabaseProperty(String,String,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertNormalUserName(String,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertShutdownFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertShutdownOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertShutdownUsingConnAttrsOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertShutdownUsingSetShutdownOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertShutdownWOUPFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertShutdownWOUPOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertSystemShutdownFail(String,String,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertSystemShutdownOK(String,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertUserValue(String[],String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.assertUserValue(String[],String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.setBaseProps(TestSuite,Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.setDatabaseProperty(String,String,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testChangePasswordAndDatabasePropertiesOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testConnectShutdownAuthentication()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testGreekCharacters()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testNotFullAccessUsers()",1,11,11
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testSystemShutdown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testUserAccessRoutines()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testUserCasing()",1,8,9
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.testUserFunctions()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.useUserValue(int,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.userCasingTest(String,String,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AuthenticationTest.userCasingTest(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.AutoGenJDBC30Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.MyMethodWithNoInsert()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.addMe(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.baseSuite(String)",2,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.getKeyValue(ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.runInsertFourWaysKeyIsNull(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testColumnIndexes()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testColumnNames()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testDelete()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testDeleteAutoGenNoGenKeysJDBC20syntax()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testGetKeyAfterCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testGetKeyAfterRollback()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testGetKeyAfterSavepointRollback()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testGetKeyMetadataAfterInsert()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertAutoGenExecuteSQLfunc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertJDBC20syntax()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertManyRowsAfterOneRowKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertManyRowsNoPriorKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertNoAutoGen()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertNoAutoGenExecuteSQLfunc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertNoGenColAfterOneRowKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertNoGenKeys()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertOneRowKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertSubqueryNoWhereClause()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertSubqueryWhere1is2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testInsertSubqueryWhereClause()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testNoSql()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testResultSetGarbageCollection()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testSelect()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testUpdate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testUpdateAutoGenNoGenKeys()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testUserGivenColumns(int[],String[],int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testUserGivenColumnsEmpty()",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testUserGivenColumnsError(int[],String[])",1,10,12
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.testUserGivenColumnsNull()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoGenJDBC30Test.verifyNullKey(String,ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.AutoloadTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.baseAutoLoadSuite(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.explicitLoad(boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.fullEngineAutoBoot()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.hasDerbyThreadGroup()",5,4,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.isEmbeddedDriverRegistered()",4,2,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.noloadTestNodriverLoaded()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.suite()",3,7,17
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testAutoNetworkServerBoot()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testEmbeddedNotStarted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testEmbeddedStarted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testExplicitLoad()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testExplicitReload()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testRegisteredDriver()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testShutdownDeRegister()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testSuccessfulConnect()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.AutoloadTest.testUnsuccessfulConnect()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBDataModelSetup.BLOBDataModelSetup(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBDataModelSetup.getBlobTableName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBDataModelSetup.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBDataModelSetup.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.BLOBTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobFromForwardOnlyResultSetUsingPositionedUpdates()",3,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobFromForwardOnlyResultSetUsingResultSetMethods()",3,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobFromForwardOnlyResultSetWithProjectUsingPositionedUpdates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobFromForwardOnlyResultSetWithProjectUsingResultSetMethods()",3,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobFromScrollableResultSetUsingPositionedUpdates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobFromScrollableResultSetUsingResultSetMethods()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobFromScrollableResultSetWithProjectUsingPositionedUpdates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobFromScrollableResultSetWithProjectUsingResultSetMethods()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobWithPositionedUpdate(ResultSet,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.testUpdateBlobWithResultSetMethods(ResultSet,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.verifyBlob(int,int,Blob)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BLOBTest.verifyNewValueInTable(int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.BatchUpdateTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.assertBatchExecuteError(String,Statement,int[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.assertBatchUpdateCounts(int[],int[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.cleanUpCallableStatement(CallableStatement,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.embeddedSuite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.executeBatchCallableStatement(CallableStatement)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.takesString(String[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.test1000StatementsBatch()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.test1000ValueSetPreparedBatch()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testAssociatedParams()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testAutoCommitTrueBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testAutoCommitTruePreparedStatBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testCallableStatementBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testCallableStatementWithOutputParamBatch()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testCombinationsOfClearBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testCombinationsOfClearPreparedStatBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testEmptyStatementBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testEmptyValueSetPreparedBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testMinimalDDLInBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testMultipleStatementsBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testMultipleValueSetNullPreparedBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testMultipleValueSetPreparedBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testNoParametersPreparedBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testPreparedStatRollbackAndCommitCombinations()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testPreparedStmtNonBatchStuffInBatch()",1,16,16
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testPreparedStmtWithErrorsBatch()",1,7,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testPreparedStmtWithResultSetBatch()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testSingleStatementBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testSingleValueSetPreparedBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testStatementNonBatchStuffInBatch()",1,11,12
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testStatementWithErrorsBatch()",1,7,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testStatementWithResultSetBatch()",1,7,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testTransactionErrorBatch()",1,7,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BatchUpdateTest.testTransactionErrorPreparedStmtBatch()",1,7,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.BlobClob4BlobTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.T8insert(PreparedStatement,int,char[],int,char[],int,int,boolean)",1,2,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.addPatternPrefix(StringBuffer,char[],int,int,int)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.checkClob8(Statement,Clob)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.checkClob8(Statement,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.checkContentsBeforeAndAfterUpdatingBlob(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.checkContentsBeforeAndAfterUpdatingClob(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.checkException(String,SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.compareReaders(Reader,Reader)",4,2,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.getStreamCheckSum(InputStream)",3,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.insertDefaultData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.insertLoopingAlphabetStreamData(PreparedStatement,CharAlphabet,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.insertLoopingAlphabetStreamData(PreparedStatement,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.insertUnicodeData(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.runPositionClobTest()",1,5,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.runPositionStringTest()",1,4,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testBlobAfterClose()",5,5,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testBlobAfterClosingConnection()",1,10,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testBlobAfterCommit()",1,10,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testBlobContents(ResultSet)",5,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testBlobFinalizer()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testBlobInsert()",3,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testClobAfterClose()",5,5,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testClobAfterClosingConnection()",1,10,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testClobAfterCommit()",1,10,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testClobAfterCommitWithSecondClob()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testClobFinalizer()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetAsciiStream()",1,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetBinaryStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetBlobBeforeAndAfterUpdate()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetBlobBeforeAndAfterUpdateStream()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetBlobFromIntColumn()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetBytes()",1,5,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetCharacterStream()",1,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetCharacterStreamWithUnicode()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetClobBeforeAndAfterUpdate()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetClobBeforeAndAfterUpdateStream()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetClobFromIntColumn()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetSubString()",3,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testGetSubStringWithUnicode()",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testIsolationLevelChangeAfterRead()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testLockingBlob()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testLockingClob()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testLockingWithLongRowBlob()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testLockingWithLongRowClob()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testNegativeTestDerby265Blob()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testNegativeTestDerby265Clob()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionAgressive()",1,1,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionBlob()",1,5,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionBytes()",1,4,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionClobWithUnicode()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testPositionStringWithUnicode()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testRaisingOfExceptionsBlob()",1,16,16
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testRaisingOfExceptionsClob()",1,11,11
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testRetrieveMoreThan32KLobs()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testSelfDestructiveClob()",3,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testSelfDestructiveClob2()",3,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testSetBlob()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testSetBlobOnIntColumn()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testSetCharacterStream()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testSetClob()",1,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testSetClobToIntColumn()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testSmallClobFields()",1,5,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testTriggerWithBlobColumn()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testTriggersWithClobColumn()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testUnconsumedParameter()",1,1,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.testVarbinary()",4,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.updateBlobWithUpdateBinaryStream(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.updateClobWithUpdateCharacterStream(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.verifyInterval(Blob,long,int,int,int)",4,7,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobClob4BlobTest.verifyInterval(Clob,long,int,int,int)",4,9,12
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.BlobStoredProcedureTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.testBlobCreateLocatorSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.testBlobGetBytesSP()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.testBlobGetLengthSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.testBlobGetPositionFromBytesSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.testBlobGetPositionFromLocatorSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.testBlobReleaseLocatorSP()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.testBlobSetBytes()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobStoredProcedureTest.testBlobTruncateSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobUpdatableStreamTest.BlobUpdatableStreamTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobUpdatableStreamTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobUpdatableStreamTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobUpdatableStreamTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.BlobUpdatableStreamTest.testUpdatableBlob()",1,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.CacheSessionDataTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.baseSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.cursorTest(String,int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.cycleIsolation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.getCycleIsolationJDBC()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.getCycleIsolationSQL()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.getSchemaTransition(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.getTransactionIsolationJDBC()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.preparedCursorTest(String,int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.setIsolationJDBC(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.setIsolationSQL(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.setSchema(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.setUp()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelCallableStatementJDBC()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelCallableStatementSQL()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelFunctionJDBC()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelFunctionSQL()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelPreparedFunctionJDBC()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelPreparedFunctionSQL()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelPreparedStatementSQL()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelProcedureJDBC()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelProcedureJdbcBatch()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelProcedureJdbcCallableBatch()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelProcedureSQL()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelProcedureSqlBatch()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelProcedureSqlCallableBatch()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelSQLInBatch()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testChangeIsoLevelStatementSQL()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargeForwardOnlyReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargeForwardOnlyUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargePreparedForwardOnlyReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargePreparedForwardOnlyUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargePreparedScrollInsensitiveReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargePreparedScrollInsensitiveUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargePreparedScrollSensitiveReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargePreparedScrollSensitiveUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargeScrollInsensitiveReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargeScrollInsensitiveUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargeScrollSensitiveReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testLargeScrollSensitiveUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testPreparedSetSchema()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testPreparedSetSchemaFunction()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testPreparedSetSchemaFunctionLarge()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testPreparedSetSchemaProcedure()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSetSchema()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSetSchemaFunction()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSetSchemaFunctionLarge()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSetSchemaProcedure()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallForwardOnlyReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallForwardOnlyUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallPreparedForwardOnlyReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallPreparedForwardOnlyUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallPreparedScrollInsensitiveReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallPreparedScrollInsensitiveUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallPreparedScrollSensitiveReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallPreparedScrollSensitiveUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallScrollInsensitiveReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallScrollInsensitiveUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallScrollSensitiveReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.testSmallScrollSensitiveUpdatable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.verifyCachedIsolation(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CacheSessionDataTest.verifyCachedSchema(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.CallableTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.assertDecimalSameValue(String,String,BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.baseSuite(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.batchUpdateProc(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.bigDecimalInAndOutProc(BigDecimal,BigDecimal[],BigDecimal,BigDecimal[],BigDecimal[],BigDecimal[],BigDecimal[],BigDecimal[],BigDecimal[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.manyTypesInAndOutProc(Date,Time,Timestamp,byte[],Date[],Time[],Timestamp[],byte[][])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.manyTypesInAndOutProc(short,int,long,float,double,BigDecimal,short[],int[],long[],float[],double[],BigDecimal[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.manyTypesInoutProc(short,short[],int,int[],long,long[],float,float[],double,double[],Time,Time[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.noInOneOutFunc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.norun_testSystemOutPrintlnProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.numericBoundariesProc(BigDecimal[],BigDecimal[],BigDecimal[])",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.oneInOneOutFunc(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.systemOutPrintlnProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testIsolationLevelChangeAfterFunctionCall()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testManyTypesInoutProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testNoInOneOutFunc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testNonNumericTypesInAndOutProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testOneInOneOutFunc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.testTwoInOneOutProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.twoInOneOutProc(int,int,int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.updateLongVarbinaryProc(byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.xtestBatchUpdate()",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.xtestBatchUpdateError()",2,12,14
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.xtestBigDecimalInAndOutProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.xtestNumericBoundariesProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.xtestNumericTypesInAndOutProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.xtestRegUserDefOutParameterError()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CallableTest.xtestUpdateLongBinaryProc()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.CharacterStreamsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.checkAsciiStream(InputStream,int,int)",5,3,13
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.checkAsciiStream(Reader,int,int)",5,3,13
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.checkAsciiStreams(PreparedStatement,PreparedStatement,PreparedStatement,int,int,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.checkCharStream(InputStream,int,int)",5,3,15
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.checkCharStream(Reader,int,int)",5,3,13
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.checkCharacterStreams(PreparedStatement,PreparedStatement,PreparedStatement,int,int,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.getMaxId()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.runTestSetAsciiStream(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.runTestSetAsciiStreamLongValues()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.runTestSetCharacterStream(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.runTestSetCharacterStreamLongValues()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.setAscii(PreparedStatement,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.setCharacter(PreparedStatement,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetAsciiStreamIntoChar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetAsciiStreamIntoClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetAsciiStreamIntoLongVarchar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetAsciiStreamIntoVarchar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetAsciiStreamLongValues()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetCharacterStreamIntoChar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetCharacterStreamIntoClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetCharacterStreamIntoLongVarchar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetCharacterStreamIntoVarchar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.testSetCharacterStreamLongValues()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.verifyAsciiStreamResults(ResultSet,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.verifyCharStreamResults(ResultSet,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.verifyResultsUsingAsciiStream(ResultSet,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.verifyResultsUsingCharacterStream(ResultSet,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.CharacterStreamsTest.verifyResultsUsingCharacterStreamBlock(ResultSet,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest.ClientConnectionPoolDataSourceTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest.testGetConnectionNoStatementPooling()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest.testGetConnectionWithStatementPooling()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest.testMaxStatementsProperty()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClientConnectionPoolDataSourceTest.verifyConnection(ClientConnectionPoolDataSource)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.ClobStoredProcedureTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.testClobCreateLocatorSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.testClobGetLengthSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.testClobGetPositionFromLocatorSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.testClobGetPositionFromStringSP()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.testClobReleaseLocatorSP()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.testClobSetStringSP()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.testClobTruncateSP()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobStoredProcedureTest.testGetSubStringSP()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.ClobTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.ClobTestSetup.ClobTestSetup(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.ClobTestSetup.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.ClobTestSetup.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.executeTestPositionWithStringToken(String,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.insertDataWithToken(String,long,long,int)",2,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testGetSubString_BiggerThanInternalBuffer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testGetSubString_PosNegative()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testGetSubString_PosOneTooBig()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testGetSubString_PosTooBig()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testGetSubString_RequestZeroLength_PosTooBig()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testGetSubString_RequestZeroLength_PosValid()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testInsertStringInMiddle_Multibyte()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testInsertStringOnEmptyClob_Multibyte()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testInsertStringOnEmptyClob_Singlebyte()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testLengthOnEmptyClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testPositionWithString_ASCII_SimplePartialRecurringPattern()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testPositionWithString_CJK()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testPositionWithString_IOS88591()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.testPositionWithString_USASCII()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.transferData(InputStream,OutputStream,int)",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.transferData(Reader,Writer,int)",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTest.transferData(Reader,int)",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest.ClobTruncateTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest.checkTruncate(int,Clob,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest.insertClobs()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobTruncateTest.testTruncateOnClob()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.ClobUpdatableReaderTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.assertCorrectChar(int,int)",1,5,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.getUnicodeString()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.testMultiplexedOperationProblem()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.testUpdateableReader()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClobUpdatableReaderTest.testUpdateableStoreReader()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.CallableStatementObjectDecorator.CallableStatementObjectDecorator(Test,DataSourceDecorator)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.CallableStatementObjectDecorator.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ClosedObjectTest(Method,ObjectDecorator)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ConnectionObjectDecorator.ConnectionObjectDecorator(Test,DataSourceDecorator)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ConnectionObjectDecorator.checkSQLState(Method,SQLException)",4,4,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ConnectionObjectDecorator.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.DataSourceDecorator.DataSourceDecorator(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.DataSourceDecorator.getConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.DataSourceDecorator.newConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.DataSourceDecorator.newConnection_()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.DataSourceDecorator.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.DataSourceDecorator.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.ObjectDecorator(Test,DataSourceDecorator)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.checkException(Method,SQLException)",3,1,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.createConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.createStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.expectsException(Method)",2,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.getClosedObject()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.prepareCall(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.prepareStatement(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ObjectDecorator.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.PoolDataSourceDecorator.PoolDataSourceDecorator(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.PoolDataSourceDecorator.newConnection_()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.PreparedStatementObjectDecorator.PreparedStatementObjectDecorator(Test,DataSourceDecorator)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.PreparedStatementObjectDecorator.checkSQLState(Method,SQLException)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.PreparedStatementObjectDecorator.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ResultSetObjectDecorator.ResultSetObjectDecorator(Test,DataSourceDecorator)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ResultSetObjectDecorator.checkSQLState(Method,SQLException)",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ResultSetObjectDecorator.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.ResultSetObjectDecorator.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.StatementObjectDecorator.StatementObjectDecorator(Test,DataSourceDecorator)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.StatementObjectDecorator.checkSQLState(Method,SQLException)",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.StatementObjectDecorator.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.XADataSourceDecorator.XADataSourceDecorator(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.XADataSourceDecorator.newConnection_()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.baseSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.fillDataSourceSuite(TestSuite,DataSourceDecorator)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.fillObjectSuite(TestSuite,ObjectDecorator,Class)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.getName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.getNullArguments(Class[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.getNullValueForType(Class)",10,1,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ClosedObjectTest.testClosedObjects()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.Compat_BlobClob4BlobTest.Compat_BlobClob4BlobTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.Compat_BlobClob4BlobTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.Compat_BlobClob4BlobTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.Compat_BlobClob4BlobTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.ConcurrencyTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.baseSuite(String,boolean)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testAquireUpdateLock1()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testCompressDuringScan(boolean,boolean)",1,4,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testDefragmentDuringScan()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testSharedAndUpdateLocks1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testSharedAndUpdateLocks2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testSharedLocks1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testSharedLocks2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testTableIntentLock1()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testTruncateDuringScan()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testUpdateLockDownGrade1()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testUpdateLockInReadUncommitted()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testUpdateModifiedTuple1()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testUpdateModifiedTuple2()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testUpdatePurgedTuple1()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testUpdatePurgedTuple2()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testUpdatePurgedTuple3()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ConcurrencyTest.testUpdatePurgedTuple4()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DMDBugsTest.DMDBugsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DMDBugsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DMDBugsTest.testDerby3000()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.DSCreateShutdownDBTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertConSetOK(String,String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertConflictedSetterConnAttrOK()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertConflictedSettersOK(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertCreateUsingConnAttrsOK(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertDSConnectionFailed(String,DataSource)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertGetNull(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertNoDB(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertNotSetAndGet(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertPositive(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertReset(String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertSetAndGet(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertSetConOK(String,String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertShutdownAndCreateConnAttr(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertShutdownUsingConnAttrsOK(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertShutdownUsingSetOK(String,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.assertTwiceOK(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.composeDatabaseName(String)",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.getBeanProperty(Object,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.getGetterName(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.tearDown()",2,6,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DSCreateShutdownDBTest.testCreateAndShutdown()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourcePropertiesTest.DataSourcePropertiesTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourcePropertiesTest.embeddedTestAttributesAsPasswordWithPassword_ds()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourcePropertiesTest.embeddedTestAttributesAsPasswordWithPassword_pooled()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourcePropertiesTest.embeddedTestAttributesAsPasswordWithPassword_xa()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourcePropertiesTest.embeddedTestAttributesAsPasswordWithoutPassword_ds()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourcePropertiesTest.embeddedTestAttributesAsPasswordWithoutPassword_pooled()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourcePropertiesTest.embeddedTestAttributesAsPasswordWithoutPassword_xa()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourcePropertiesTest.suite()",4,5,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.DataSourceDescriptor(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.DataSourceDescriptor(String,DataSourceDescriptor)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.addProperty(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.addProperty(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.getName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.getPropertyCount()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.getPropertyDefault(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.getPropertyIterator()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.getPropertyValue(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceDescriptor.hasProperty(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.DataSourceReferenceTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.assertDataSourceProperties(DataSourceDescriptor,String[])",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.assertDataSourceReference(DataSourceDescriptor,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.assertDataSourceReferenceEmpty(DataSourceDescriptor,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.assertDataSourceReferencePopulated(DataSourceDescriptor,String)",1,7,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.compareDataSources(DataSourceDescriptor,Object,Object,boolean)",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.getGet(String,Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.getPropertyBeanList(Object)",3,9,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.getSet(Method,Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceReferenceTest.testDataSourceReference()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.DataSourceSerializationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.deSerializeDs(String,String)",1,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.serTestClientConnectionPoolDataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.serTestClientDataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.serTestClientXADataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.serTestEmbeddedConnectionPoolDataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.serTestEmbeddedDataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.serTestEmbeddedXADataSource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceSerializationTest.suite()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.DataSourceTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertConnectionOK(Object[],String,Connection)",1,13,13
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertConnectionPreClose(String,Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertMessageText(Connection,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertStatementOK(String,Connection,Statement)",1,8,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertStringFormat(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertStringPrefix(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertTenConnectionsUnique()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertToString(Connection)",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertToString(DataSource)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.assertTraceFilesExist()",3,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.clearConnections()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.dsConnectionRequest(String,DataSource,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.dsConnectionRequests(String[],DataSource)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.dsGetBadConnection(DataSource)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.getClientSuite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.getEmbeddedSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.setDatabaseProperty(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.subTestDataSourceDescription(DataSource)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.tearDown()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.testAllDataSources()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.testBadConnectionAttributeSyntax()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.testClientDSConnectionAttributes()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.testClientMessageTextConnectionAttribute()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.testClientTraceFileDSConnectionAttribute()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.testDSRequestAuthentication()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.testDescriptionProperty()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DataSourceTest.testJira95ds()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.DatabaseMetaDataTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.assertFullResultSet(ResultSet[],String[][],boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.assertGetImportedAndExportedKeysShape(ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.assertMatchesPattern(String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.assertMetaDataResultSet(ResultSet,String[],int[],boolean[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkCatalogsShape(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkColumnsShape(ResultSet,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkGetTablesODBC(String,String,String,String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkODBCKeys(String,String,String,String,String,String)",1,6,9
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkODBCKeysShape(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkSchemas(ResultSet,String[])",1,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkSchemasShape(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkTablesShape(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.checkVersionColumnsShape(ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.connectionPoolingSuite(String)",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.createObjectsForKeysTests()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.createSchemasForTests()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.createTablesForTest(boolean)",1,8,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.crossCheckGetColumnRowAndResultSetMetaData(ResultSet,ResultSetMetaData,int)",2,18,22
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.crossCheckGetColumnsAndResultSetMetaData(ResultSet,boolean,int)",4,5,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.doesMatch(String,int,String,int)",12,6,13
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.dropObjectsForKeysTests()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.escapedFunctions(String[][],String)",7,8,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.executeEscaped(String[])",1,1,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getBestRowIdentifier(String,String,String,int,boolean)",1,1,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getBestRowIdentifierODBC(String,String,String,int,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getColumnPrivileges(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getColumnPrivilegesODBC(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getColumns(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getColumnsODBC(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getCrossReference(String,String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getCrossReferenceODBC(String,String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getDMD()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getDMDTables(DatabaseMetaData,String,String,String,String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getExportedKeys(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getExportedKeysODBC(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getImportedKeys(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getImportedKeysODBC(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getIndexInfo(String,String,String,boolean,boolean)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getIndexInfoODBC(String,String,String,boolean,boolean)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getJDBCType(String)",30,16,44
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getPattern(Random,String[])",3,9,12
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getPrecision(int,String)",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getPrimaryKeys(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getPrimaryKeysODBC(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getProcedureColumns(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getProcedureColumnsODBC(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getProcedures(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getProceduresODBC(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getSQLTypes(Connection)",6,8,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getSortedIdentifiers()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getStoredIdentifier(String)",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getTablePrivileges(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getTablePrivilegesODBC(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getVersionColumns(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getVersionColumnsODBC(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getpc(String,BigDecimal,short,byte,short,int,long,float,double,byte[],Date,Time,Timestamp)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getpc(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getpc(int,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getpc(int,long[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getpc4a()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.getpc4b()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.initialCompilationTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.isro()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.tearDown()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testBugFixes()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testConnectionSpecific()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testConstants()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testDMDconnClosed()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testDataSourceLimits()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testDetermineFeatureSupport()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetBestRowIdentifier()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetColumnPrivileges()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetColumnsModify()",7,7,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetColumnsReadOnly()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetIndexInfo()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetPrimaryKeys()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetProceduresGetProcColumns()",1,11,19
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetSchemasModify()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetSchemasReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetTablePrivileges()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetTablesModify()",1,7,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetTablesReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetTypeInfo()",6,9,38
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetURL()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetXXportedKeys()",1,13,13
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testGetXXportedKeysODBC()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testIdentifierStorage()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testMiscellaneous()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testMoreGetIndexInfo()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testNullInfo()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testNumericFunctions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testReferentialAction()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testSQLKeywords()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testStringFunctions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testSystemFunctions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testTableTypes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testTimeDataFunctions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testUnimplementedSQLObjectAttributes()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.testVersionInfo()",1,7,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.verifyBRIResults(ResultSet[],String[][])",1,1,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DatabaseMetaDataTest.verifyReferentialAction(ResultSet[],short[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.DboPowersTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.DboPowersTest(String,int,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.bringDbDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.bringDbUp(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.dboEncryptionSuite(String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.dboHardUpgradeSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.dboShutdownSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.derby3038(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.derby3038Proc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.doEncrypt(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.testEncrypt()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.testHardUpgrade()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.testReEncrypt()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.testShutDown()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.vetAttempt(String,SQLException,String,String)",2,3,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.vetEncryptionAttempt(String,SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.vetHardUpgradeAttempt(String,SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.vetShutdownException(String,SQLException)",2,3,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.wrapEncryptionUserTests(int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.wrapHardUpgradeUserTests(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DboPowersTest.wrapShutdownUserTests(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.DriverMgrAuthenticationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertConnectionFail(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertConnectionFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertConnectionOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertConnectionWOUPFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertConnectionWOUPOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertShutdownFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertShutdownOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertShutdownWOUPFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertShutdownWOUPOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertSystemShutdownFail(String,String,String,String)",2,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.assertSystemShutdownOK(String,String,String)",2,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverMgrAuthenticationTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.DriverTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.assertConnect(boolean,String,Properties)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.assertTraceFilesExist()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.loadDriver()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.setBaseProps(TestSuite,Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.shutdownDB(String,Properties)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.tearDown()",2,8,9
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.testAcceptsURL()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.testClientAttributes()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.testClientURL()",2,5,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.testDbNameWithSpaces()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.testDriverCompliantVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.DriverTest.testEmbeddedAttributes()",2,7,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.HoldabilityTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.onlineCompress(boolean,boolean,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testCompressOnHeldForwardOnlyUpdatableResultSetScanInProgress()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testCompressOnHeldForwardOnlyUpdatableResultSetScanInit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testCompressOnHeldScrollableUpdatableResultSetScanDone()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testCompressOnHeldScrollableUpdatableResultSetScanInProgress()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testCompressOnHeldScrollableUpdatableResultSetScanInit()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldForwardOnlyResultSetScanInProgress()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldForwardOnlyResultSetScanInit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldForwardOnlyUpdatableResultSetScanInProgress()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldForwardOnlyUpdatableResultSetScanInit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldScrollableResultSetScanDone()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldScrollableResultSetScanInProgress()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldScrollableResultSetScanInit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldScrollableUpdatableResultSetScanDone()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldScrollableUpdatableResultSetScanInProgress()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testHeldScrollableUpdatableResultSetScanInit()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testUpdateRowAfterCommitOnHeldForwardOnlyResultSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.testUpdateRowAfterCommitOnHeldScrollInsensitiveResultSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.verifyCompressInvalidation(ResultSet)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.HoldabilityTest.verifyResultSetUpdatableAfterCompress(ResultSet)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest.InvalidLDAPServerAuthenticationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest.setDatabaseProperty(String,String,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest.shutdownSystem()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.InvalidLDAPServerAuthenticationTest.testInvalidLDAPServerConnectionError()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.IsoLevel.IsoLevel(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.IsoLevel.equals(Object)",3,1,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.IsoLevel.getIsoLevel()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.IsoLevel.getJdbcName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.IsoLevel.getSqlName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.IsoLevel.hashCode()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.IsoLevel.toString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.DISABLED_testConnectionLeakInDatabaseMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.J2EEDataSourceTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.PoolReset(String,PooledConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.PoolResetWork(String,String,Connection)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertConnHoldability(Connection,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertConnectionOK(Object[],String,Connection)",5,19,19
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertConnectionPreClose(String,Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertConnectionState(int,int,boolean,boolean,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertIsoLocks(Connection,int)",2,2,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertLocks(int[],Connection)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertMessageText(Connection,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertPooledConnAutoCommit(String,PooledConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertPooledConnHoldability(String,PooledConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertPooledConnIso(String,PooledConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertStatementOK(String,Connection,Statement)",1,8,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertStatementState(int[],int[],Statement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertStringFormat(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertStringFormat(PooledConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertStringPrefix(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertTenConnectionsUnique()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertToString(Connection)",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertToString(ConnectionPoolDataSource)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertToString(DataSource)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertToString(XADataSource)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertTraceFilesExist()",3,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.assertXAException(String,XAException)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.checkNesConn(String)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.clearConnections()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.createFloatCallForStateChecking(int[],int[],Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.createFloatStatementForStateChecking(int[],Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.createFloatStatementForStateChecking(int[],int[],Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.doTestSchemaIsReset(PooledConnection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.dsConnectionRequest(String,ConnectionPoolDataSource,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.dsConnectionRequest(String,DataSource,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.dsConnectionRequest(String,XADataSource,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.dsConnectionRequests(String[],ConnectionPoolDataSource)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.dsConnectionRequests(String[],DataSource)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.dsConnectionRequests(String[],XADataSource)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.getClientSuite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.getEmbeddedSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.getNestedMethodName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.getTimeoutSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.internalCreateFloatCallForStateChecking(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.internalCreateFloatStatementForStateChecking(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.internalCreateFloatStatementForStateChecking(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.queryOnStatement(String,int[],Connection,Statement)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.resultSetQuery(String,int[],ResultSet)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.selectTimesoutDuringUpdate(Connection)",2,3,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.setDatabaseProperty(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.setHoldability(Connection,boolean)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.setupDerby1144Table(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.subTestDataSourceDescription(DataSource)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.subtestPooledCloseOnClose(PooledConnection)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.subtestPooledRemoveListenerOnClose(PooledConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.subtestPooledReuseOnClose(PooledConnection)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.tearDown()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testAllDataSources()",1,13,15
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testAutoCommitOnXAResourceStart()",1,8,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testBadConnectionAttributeSyntax()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testClientDSConnectionAttributes()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testClientMessageTextConnectionAttribute()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testClientTraceFileDSConnectionAttribute()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testClosedCPDSConnection()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testClosedXADSConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testConnectionErrorEvent()",1,38,38
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testDSRequestAuthentication()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testDescriptionProperty()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testGlobalLocalInterleaf()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testJira95pds()",2,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testJira95xads()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testPooledReuseOnClose()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testReadOnlyToWritableTran()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testReuseAcrossGlobalLocal()",2,12,13
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testSchemaIsReset()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testSchemaIsResetWhenDeleted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testSetIsolationWithStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testSetSchemaInXAConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.testXAHoldability()",2,13,14
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.timeoutTestDerby1144PooledDS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.J2EEDataSourceTest.timeoutTestDerby1144XADS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCDriversAllTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCDriversClientTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCDriversEmbeddedTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCDriversPropertyTest.JDBCDriversPropertyTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCDriversPropertyTest.getAutoLoadSuite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCDriversPropertyTest.getSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCHarnessJavaTest.JDBCHarnessJavaTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCHarnessJavaTest.baseSuite(String,String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCHarnessJavaTest.getArea()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.JDBCHarnessJavaTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.LDAPAuthenticationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.assertDSSystemShutdownOK(String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.assertInvalidLDAPDSConnectionFails(DataSource,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.assertInvalidLDAPDrvMgrConnectionFails(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.assertLDAPDSConnectionOK(DataSource,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.assertLDAPDrvMgrConnectionOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.baseSuite(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.cleanup(DataSource)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.decorateWithPolicy(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.getDatabaseProperty(String,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.makeServerPolicyName()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.setBaseProps(TestSuite,Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.setDatabaseProperty(String,String,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.suite()",7,6,12
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LDAPAuthenticationTest.testLDAPConnection()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.LargeDataLocksTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.countLocks()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.testGetBinaryStream()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.testGetBytes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.testGetCharacterStream()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LargeDataLocksTest.testGetString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest.LobLengthTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobLengthTest.testLongLobLengths()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.LobStreamsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.compareClobReader2CharArray(char[],Reader)",2,2,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.compareLob2File(InputStream,InputStream)",3,2,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.readBytesFromStream(byte[],InputStream)",4,2,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testBlobWrite1Param()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testBlobWrite3Param()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testClobAsciiWrite1Param()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testClobAsciiWrite3Param()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testClobCharacterWrite1Char()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testClobCharacterWrite1ParamString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testClobCharacterWrite3ParamChar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.LobStreamsTest.testClobCharacterWrite3ParamString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.NullSQLTextTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.testCommentStmt(Statement,String,boolean)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.testDerby522()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.testNullStringExecuteQueryStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.testNullStringExecuteStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.testNullStringExecuteUpdateStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.testNullStringPreparedStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.NullSQLTextTest.zeroArg()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.ParameterMappingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkForInvalidConversion(SQLException)",4,7,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,Date)",2,6,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,String)",2,16,22
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,Time)",2,6,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,Timestamp)",2,8,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,byte[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,double)",2,16,22
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,long)",2,16,22
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkProcedureOutput(int,int,short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.checkValidStringValue(String,String)",1,17,17
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.getOutValue(CallableStatement,int,int,int)",17,30,30
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.getValidValue(PreparedStatement,int,String)",19,52,55
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.getXXX(PreparedStatement,int,boolean)",3,52,83
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.isBooleanMethod(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.judge_getXXX(boolean,SQLException,int,int)",1,5,9
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.judge_setObject(boolean,SQLException,int,int)",6,7,9
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.judge_setXXX(boolean,SQLException,int,int)",6,8,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(BigDecimal,BigDecimal[],BigDecimal[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(Date,Date[],Date[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(String,String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(Time,Time[],Time[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(Timestamp,Timestamp[],Timestamp[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(byte[],byte[][],byte[][])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(double,double[],double[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(float,float[],float[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(int,int[],int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(long,long[],long[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.pmap(short,short[],short[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.setValidValue(PreparedStatement,int,int)",4,4,17
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.setXXX(Statement,PreparedStatement,PreparedStatement,int)",1,8,74
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.setXXX_setObject(Statement,PreparedStatement,PreparedStatement,int,Object,String,int)",1,2,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.showException(SQLException)",1,2,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.showFirstTwo(InputStream)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.showFirstTwo(Reader)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.showFirstTwo(byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.specificCheck(ResultSet,boolean,SQLException,boolean)",1,6,9
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.testDerby2073()",2,2,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.testParameterMapping()",7,17,23
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.testSetStringInvalidValue(int,PreparedStatement)",2,10,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMappingTest.unexpectedException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.ParameterMetaDataJdbc30Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyDecimal(BigDecimal,BigDecimal,BigDecimal[],BigDecimal[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyString(String,String,String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummy_numeric_Proc(BigDecimal[],BigDecimal[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint(int,int,int[],int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dummyint2(int,int,int[],int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.dumpParameterMetaDataNegative(ParameterMetaData)",1,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.parameterIsNullableInStringForm(int)",4,1,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.parameterModeInStringForm(int)",5,1,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testCallableStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testCallableStatementReturnedScale()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testExecuteStatementUsing()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testLikeEscaleStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testMetatdataAfterProcRecompile()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testParameterMetaData(ParameterMetaData,String[][])",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testParameterMetadataWithCHARParameters()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testParameterMetadataWithDECIMALParameters()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testParameterMetadataWithINTParameters()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testParameterMetadataWithLITERALParameters()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testPreparedStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testSelectStatementUsingBoolean()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ParameterMetaDataJdbc30Test.testSelectStatementUsingNoParameter()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.PoolDSAuthenticationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertConnectionFail(String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertConnectionFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertConnectionOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertConnectionWOUPFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertConnectionWOUPOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertShutdownFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertShutdownUsingConnAttrsOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertShutdownUsingSetShutdownOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertShutdownWOUPFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertShutdownWOUPOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertSystemShutdownFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.assertSystemShutdownOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolDSAuthenticationTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.PoolXADSCreateShutdownDBTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertConSetOK(Object,String,String,String,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertConflictedSetterConnAttrOK(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertConflictedSettersOK(Object,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertCreateUsingConnAttrsOK(Object,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertDSConnectionFailed(String,Object)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertGetNull(Object,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertNoDB(Object,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertNotSetAndGet(Object,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertPositive(Object,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertReset(Object,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertSetAndGet(Object,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertSetConOK(Object,String,String,String,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertShutdownAndCreateConnAttr(String,Object,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertShutdownUsingConnAttrsOK(Object,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertShutdownUsingSetOK(Object,String,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertTwiceOK(Object,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.assertUpdateCount(Object)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.clearBeanProperties(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.composeDatabaseName(String)",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.doCreateAndShutdown(Object)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.getBeanProperty(Object,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.getGetterName(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.tearDown()",2,6,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.testPoolDS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PoolXADSCreateShutdownDBTest.testXADS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.PrepStmtMetaDataTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.assertEmptyResultSetMetaData(ResultSetMetaData)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.checkEmptyMetaData(String,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.testAllDataTypesMetaData()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.testAlterTableMeta()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.testNoResultSetMeta()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtMetaDataTest.tstmeth()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest.PrepStmtNullTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest.bytesToString(byte[])",2,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest.testNullBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest.testNullClobBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.PrepStmtNullTest.testNullTimeStamp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.ProcedureTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.assertMultipleResultsFromExecuteQuery(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.assertNoResultSetFromExecuteQuery(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.assertResultsFromExecuteUpdate(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.baseSuite(String)",2,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.checkCSCloseClosesResults(CallableStatement,ResultSet[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.checkExecuteClosesResults(CallableStatement,ResultSet[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.closeCurrentGetMoreResults(CallableStatement,ResultSet[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.defaultGetMoreResults(CallableStatement,ResultSet[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.keepCurrentGetMoreResults(CallableStatement,ResultSet[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.mixedGetMoreResults(CallableStatement,ResultSet[])",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.nestedDynamicResultSets(String,ResultSet[],ResultSet[],ResultSet[],ResultSet[],ResultSet[],ResultSet[])",6,1,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.procWithSideEffects(int,ResultSet[],ResultSet[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.retrieveClosedResult(ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.retrieveDynamicResults(int,ResultSet[],ResultSet[],ResultSet[],ResultSet[])",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.retrieveExternalResult(String,String,String,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testClosedDynamicResultSetsFromExecuteQuery()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testClosedDynamicResultSetsFromExecuteUpdate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testDynamicResultSetsFromOtherConnectionWithExecuteQuery()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testDynamicResultSetsFromOtherConnectionWithExecuteUpdate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithMoreThanOneDynamicResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithMoreThanOneDynamicResultSet_callable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithMoreThanOneDynamicResultSet_prepared()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithNoDynamicResultSets()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithNoDynamicResultSets_callable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithNoDynamicResultSets_prepared()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithOneDynamicResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithOneDynamicResultSet_callable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteQueryWithOneDynamicResultSet_prepared()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteUpdateWithNoDynamicResultSets()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteUpdateWithNoDynamicResultSets_callable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteUpdateWithNoDynamicResultSets_prepared()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteUpdateWithOneDynamicResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteUpdateWithOneDynamicResultSet_callable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testExecuteUpdateWithOneDynamicResultSet_prepared()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testGetMoreResults()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testRollbackStoredProcWhenExecuteQueryReturnsNothing()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testRollbackStoredProcWhenExecuteQueryReturnsNothing_prepared()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testRollbackStoredProcWhenExecuteQueryReturnsTooMuch()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testRollbackStoredProcWhenExecuteQueryReturnsTooMuch_prepared()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testRollbackStoredProcWhenExecuteUpdateReturnsResults()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testRollbackStoredProcWhenExecuteUpdateReturnsResults_prepared()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testRollbackStoredProcWithExecuteQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ProcedureTest.testRollbackStoredProcWithExecuteUpdate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.RelativeTest.RelativeTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.RelativeTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.RelativeTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.RelativeTest.testScrolling_CONCUR_READ_ONLY()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.RelativeTest.testScrolling_CONCUR_UPDATABLE()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetCloseTest.ResultSetCloseTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetCloseTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetCloseTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetCloseTest.testResultSetDoesNotClose()",1,1,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetJDBC30Test.ResultSetJDBC30Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetJDBC30Test.checkForCloseOnException(ResultSet,boolean)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetJDBC30Test.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetJDBC30Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetJDBC30Test.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetJDBC30Test.testCloseResultSetAutoCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetJDBC30Test.testNotImplementedMethods()",1,19,19
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.ResultSetMiscTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.checkLocksForAutoCommitSelect(Connection,Statement,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.checkSingleRSAutoCommit(Connection)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.checkSingleRSCloseCursorsAtCommit(Connection)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.locksHeld()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.testAutoCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.testBug4810()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.testCorrelationNamesAndMetaDataCalls()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.testFloatMAX_VALUE(Connection)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetMiscTest.testResultSetMetaData()",1,19,19
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.ResultSetStreamTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.assertMisMatchStreamLength(SQLException)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.basesuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.binaryStreamProcessing()",15,12,17
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.insertData()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.testBinaryStreamProcessing()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.testGetAsciiStream()",1,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.testGetCharacterStream()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ResultSetStreamTest.testInsertData()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.SURBaseTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.SURBaseTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.assertFailOnUpdate(ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.assertWarning(SQLWarning,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.scrollBackward(ResultSet)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.scrollBackwardAndUpdate(ResultSet)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.scrollBackwardAndUpdatePositioned(ResultSet)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.scrollForward(ResultSet)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.scrollForwardAndUpdate(ResultSet)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.scrollForwardAndUpdatePositioned(ResultSet)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.updateTuple(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.updateTuplePositioned(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURBaseTest.verifyTuple(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.SURDataModel.SURDataModel(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.SURDataModel.getCreateTableStatement()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.SURDataModel.hasPrimaryKey()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.SURDataModel.hasSecondaryKey()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.SURDataModel.toString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.SURDataModel.values()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.SURDataModelSetup(Test,SURDataModel)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.createDataModel(SURDataModel,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.createDataModel(SURDataModel,Connection,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.printStackTrace(Throwable)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURDataModelSetup.toString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.SURQueryMixTest(String,String,String,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.baseSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.createRandomSample(Map,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.createRowMap(ResultSet)",1,3,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.createTestCases(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.deleteRandomSampleOfNRecords(ResultSet,Map,Set,int)",3,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.getRowString(ResultSet)",2,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.runTest()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.testNavigation(ResultSet,Map,Set,Set)",1,11,11
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.updatePositioned(ResultSet,ResultSetMetaData)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.updateRandomSampleOfNRecords(ResultSet,Map,Set,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURQueryMixTest.updateRow(ResultSet,ResultSetMetaData)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.SURTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.baseSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.checkDetectabilityCallsOutsideRow(ResultSet,String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.getNextCursorName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testConcurrencyModeWarning1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testConcurrencyModeWarning2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testCursorOperationConflictWarning1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testCursorOperationConflictWarning2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testCursorStateAfterCommit(boolean,int)",1,7,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testCursorStateAfterCommit1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testCursorStateAfterCommit2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testCursorStateAfterCommit3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testCursorStateAfterCommit4()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testDetectabilityExceptions()",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testDowngradeToScrollReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testFailOnUpdateOfReadOnlyResultSet1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testFailOnUpdateOfReadOnlyResultSet2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testFailOnUpdateOfReadOnlyResultSet3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testFailOnUpdateOfReadOnlyResultSet4()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testFailOnUpdateOfReadOnlyResultSet5()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testForUpdateException1()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testForUpdateException2()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testForwardOnlyConcurUpdatableWithForUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testForwardOnlyConcurUpdatableWithoutForUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testForwardOnlyReadOnly1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testIndexedScrollInsensitiveUpdateCursorWithForUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testIndexedScrollInsensitiveUpdateCursorWithoutForUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testIndexedUpdateCursor1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testIndexedUpdateCursor2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testInsertRowWithScrollCursor()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testMultiUpdateRow1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testMultiUpdateRow2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testMultipleKeyUpdates()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testOtherAndOwnPrimaryKeyUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testOtherPrimaryKeyUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testOtherSecondaryKeyUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testPositionedUpdateWithForUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testPositionedUpdateWithoutForUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testPrimaryKeyUpdate1()",1,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testRowUpdatedAndRowDeleted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollInsensistiveConurUpdatable3(ResultSet)",1,5,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollInsensitiveConcurUpdatableWithForUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollInsensitiveConcurUpdatableWithForUpdate2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollInsensitiveConcurUpdatableWithForUpdate3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollInsensitiveConcurUpdatableWithoutForUpdate1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollInsensitiveConcurUpdatableWithoutForUpdate2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollInsensitiveConcurUpdatableWithoutForUpdate3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollInsensitiveReadOnly1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testScrollablePositionedUpdateWithForUpdate1()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SURTest.testSecondaryIndexKeyUpdate1()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.SavepointJdbc30Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.getEmbeddedSuite(String)",3,4,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testBug4465()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testBug5817()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testGrammarCheck()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNameCaseSensitivity()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNameLengthMax128Chars()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNamesAndIds()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNoNestedSavepointsInsideJdbcSavepoint()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNoNestedSavepointsInsideSqlSavepoint()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNoNestedSavepointsWhenUsingSQL()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNoSavepointsIfAutoCommit()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNoSqlSavepointStartingWithSYS()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNoSqlSavepointStartingWithSYSThroughJdbc()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testNullName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testReleaseMultipleTimes()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testReleaseNullSavepoint()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testReleaseReleasedSavepoint()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testReleaseSavepointFromOtherTransaction()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testReleaseSqlSavepointAndRollback()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testReusingSavepoints()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testRollbackMultipleTimes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testRollbackNullSavepoint()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testRollbackReleasedSavepoint()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testRollbackReleasesSavepointArray()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testRollbackSqlSavepointSameAsJdbc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testSavepointFromEarlierTransactionAfterToggleAutocommit()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testSavepointName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testSavepointsInBatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testSwapSavepointsAcrossConnectionAndRelease()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.testSwapSavepointsAcrossConnectionsAndRollback()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestCommitWillReleaseActiveSavepoints()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestCursorsCloseOnRollback()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestGetSavepoint()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestNestedSavepoints()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestNoConflictWithGeneratedName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestReuseNameAfterRelease()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestReuseNameAfterRollback()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestRollbackWillReleaseActiveSavepoints()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SavepointJdbc30Test.xtestRollbackWillReleaseLaterSavepoints()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ScrollResultSetTest.ScrollResultSetTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ScrollResultSetTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ScrollResultSetTest.suite()",2,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ScrollResultSetTest.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ScrollResultSetTest.testNextOnLastRowForwardOnly()",1,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.ScrollResultSetTest.testNextOnLastRowScrollable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.StatementExecutor.StatementExecutor(PreparedStatement,boolean,int)",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.StatementExecutor.fetchRow(ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.StatementExecutor.getHighestRunTime()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.StatementExecutor.getSQLException()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.StatementExecutor.run()",2,6,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.StatementExecutor.setHighestRunTime(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.TestFailedException.TestFailedException(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.TestFailedException.TestFailedException(String,Throwable)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.TestFailedException.TestFailedException(Throwable)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.TestFailedException.printStackTrace()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.TestFailedException.toString()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.delay(int,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.dropTables(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.exec(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.exec(Connection,String,Collection)",3,3,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.expectException(String,SQLException,String)",3,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.getExecQuery(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.getFetchQuery(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.go(String[])",1,7,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.prepare(Connection,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.prepareForTimedQueries(Connection)",1,1,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.prepareTables(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.printSQLException(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.testInvalidTimeoutValue(Connection)",1,2,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.testRememberTimeoutValue(Connection)",1,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.testStatementRemembersTimeout(PreparedStatement)",2,3,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.testStatementRemembersTimeout(Statement)",2,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.testTimeoutWithExec(Connection[])",7,8,15
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.testTimeoutWithExecuteUpdate(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetQueryTimeoutTest.testTimeoutWithFetch(Connection,Connection)",4,4,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.SetTransactionIsolationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.baseSuite(String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.checkIsolationLevelNoTimeout(Connection,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.checkIsolationLevelTimeout(Connection,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.testIsolation()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.testSetTransactionIsolationCommits()",2,2,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.SetTransactionIsolationTest.testSetTransactionIsolationInHoldCursor()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.StatementJdbc20Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.testCreateTableWithExecuteQuery()",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.testLocalValuesOfResultSet()",1,7,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.testReadingData()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc20Test.testWrongVaues()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.StatementJdbc30Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.assertFailedExecuteUpdateForColumnIndex(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.assertFailedExecuteUpdateForColumnName(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.baseSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testExecuteNoAutoGenColumnIndex()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testExecuteNoAutoGenColumnName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testExecuteUpdateNoAutoGenColumnIndex()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testExecuteUpdateNoAutoGenColumnName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testGetGenerateKeys()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testGetMoreResults()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testGetResultSetHoldability()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testInsertNoGenKeys()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testReadingData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.testSelectNoGenKeys()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.xtestMaxOpenStatementsWithQueryTimeout()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementJdbc30Test.xtestMultiExecWithQueryTimeout()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.StatementPoolingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.assertClassName(Object,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.cleanTableExceptedToBeEmpty()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.doTestHoldabilityIsReset(boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.doTestIsolationLevelIsReset(boolean,boolean)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.doTestResultSetCloseForHoldability(int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.resTestCloseCursorsAtCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.resTestCloseDoesNotAffectOtherStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.resTestCommitOnReuse()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.resTestHoldCursorsOverCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.resTestLogicalConnectionCloseInvalidatesLogicalStatement()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.resTestNoCommitOnReuse()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.resTestNoDataCommittedOnInvalidTransactionState()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.suite()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testCacheOverflow()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testCachingLogicalConnectionCloseLeavesPhysicalStatementsOpen()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testClosingPSClosesRS()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testDeleteReferringTableWhenInCache()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testDeleteReferringTableWhenOpen()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testHoldabilityIsResetExplicitClose()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testHoldabilityIsResetNoExplicitClose()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testIsolationLevelIsResetExplicitCloseNoQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testIsolationLevelIsResetExplicitCloseQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testIsolationLevelIsResetNoExplicitCloseNoQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testIsolationLevelIsResetNoExplicitCloseQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testPoolingEnabledByCheckingImplementationDetails()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testPrepareCallPath()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testPrepareCallWithNoCallPath()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testPrepareStatementPath()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StatementPoolingTest.testTemporaryTablesAreDeletedInNewLogicalConnection()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.StreamTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.insertBlobData(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.insertClobData(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.runGetReaderTwiceTest()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.runGetStreamTwiceTest()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.testGetReaderTwiceLargeClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.testGetReaderTwiceSmallClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.testGetStreamTwiceLargeBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.StreamTest.testGetStreamTwiceSmallBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.URCoveringIndexTest.URCoveringIndexTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.URCoveringIndexTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.URCoveringIndexTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.URCoveringIndexTest.testUpdateUpdatedTupleFOPositioned()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.URCoveringIndexTest.testUpdateUpdatedTupleFOUpdateRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.URCoveringIndexTest.testUpdateUpdatedTupleScrollPostitioned()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.URCoveringIndexTest.testUpdateUpdatedTupleScrollUpdateRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.URCoveringIndexTest.testUpdateUpdatedTupleWithCoveringIndex(boolean,boolean)",2,2,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.UpdatableResultSetTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.fetch(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.fetchUpd(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.prep(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.requestKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testDeleteRowOnQuotedColumn()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testDeleteRowOnQuotedCursor()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testDeleteRowOnQuotedSchema()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testDeleteRowOnQuotedTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testInsertRowOnQuotedColumn()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testInsertRowOnQuotedCursor()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testInsertRowOnQuotedSchema()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testInsertRowOnQuotedTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testUpdateBlob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testUpdateBlobStringParameterName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testUpdateClob()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testUpdateClobStringParameterName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testUpdateRowOnQuotedColumn()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testUpdateRowOnQuotedCursor()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testUpdateRowOnQuotedSchema()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdatableResultSetTest.testUpdateRowOnQuotedTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.UpdateXXXTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.baseSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.checkColumnsAreNull()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.checkColumnsAreUpdated()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.jdbc2testUpdateBigDecimal()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.testUpdateDouble()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.testUpdateFloat()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.testUpdateInt()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.testUpdateLong()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.testUpdateNull()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.testUpdateObjectWithNull()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.testUpdateShort()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.UpdateXXXTest.testUpdateString()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.XADSAuthenticationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertConnectionFail(String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertConnectionFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertConnectionOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertConnectionWOUPFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertConnectionWOUPOK(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertShutdownFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertShutdownUsingConnAttrsOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertShutdownUsingSetShutdownOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertShutdownWOUPFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertShutdownWOUPOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertSystemShutdownFail(String,String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.assertSystemShutdownOK(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XADSAuthenticationTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.XAJNDITest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.assertEqualPropValues(XADataSource,XADataSource,String[])",1,5,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.decorateWithPolicy(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.getInitialDirContext()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.getPropertyBeanList(Object)",3,9,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.makeServerPolicyName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.suite()",5,5,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XAJNDITest.testCompareXADataSourcewithJNDIDataSource()",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.XATest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.checkHeldRS(Connection,Statement,ResultSet)",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.testDerby966()",1,6,7
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.testInterleavingTransactions()",2,7,9
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.testMorph()",4,3,17
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.testNoTransaction()",11,1,21
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.testSingleConnectionOnePhaseCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest.XATransactionTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest.createXid(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest.parseXid(String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest.testGlobalXIDinTransactionTable()",1,4,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.XATransactionTest.testXATransactionTimeout()",5,7,10
"org.apache.derbyTesting.functionTests.tests.jdbcapi._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi._Suite.suite()",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.c3AsciiStream.c3AsciiStream(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.c3AsciiStream.close()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.c3AsciiStream.read()",2,1,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.c3AsciiStream.read(byte[],int,int)",2,1,5
"org.apache.derbyTesting.functionTests.tests.jdbcapi.c3Reader.c3Reader(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.c3Reader.close()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.c3Reader.read(char[],int,int)",3,2,8
"org.apache.derbyTesting.functionTests.tests.jdbcapi.cdsXid.cdsXid(int,byte,byte)",1,1,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.cdsXid.getBranchQualifier()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.cdsXid.getFormatId()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.cdsXid.getGlobalTransactionId()",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.dumpExpectedSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.get_using_ascii_stream(ResultSet,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.get_using_binary_stream(ResultSet,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.get_using_bytes(ResultSet,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.get_using_object(ResultSet,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.get_using_string(ResultSet,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.load_data(Connection)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.main(String[])",1,12,12
"org.apache.derbyTesting.functionTests.tests.jdbcapi.connectionJdbc20.printbytearray(byte[],int,int)",1,3,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.derbyStress.createTables(Connection,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.derbyStress.main(String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.derbyStress.prepStmtTest(Connection,int,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.derbyStress.reExecuteStatementTest()",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.derbyStress.testDerby3316()",1,2,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize.cleanUp(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize.doSort(Statement)",1,4,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize.dumpExpectedSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize.load_data(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize.main(String[])",2,16,20
"org.apache.derbyTesting.functionTests.tests.jdbcapi.maxfieldsize.testSort(Connection,Statement)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.checkConsistencyOfAllTables(Connection)",1,4,4
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.getColumnInfo(DatabaseMetaData,String,PrintStream)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.getConnection(String[],boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.getExportedKeys(DatabaseMetaData,String,PrintStream)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.getPrimaryKeys(DatabaseMetaData,String,PrintStream)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.getTables(DatabaseMetaData,PrintStream)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.getTypeInfo(DatabaseMetaData,PrintStream)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.metadataMultiConn.metadataCalls(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.resultsetJdbc20.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.resultsetJdbc20.main(String[])",1,6,6
"org.apache.derbyTesting.functionTests.tests.jdbcapi.rsgetXXXcolumnNames.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.jdbcapi.rsgetXXXcolumnNames.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.jdbcapi.rsgetXXXcolumnNames.test1(String[])",1,7,7
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.BLOBCLOB_CompatibilitySuite.Creator.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.BLOBCLOB_CompatibilitySuite.main(String[])",1,6,6
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.BLOBCLOB_CompatibilitySuite.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.CompatibilityCombinations(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.DEBUG(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.DEBUG(String,PrintWriter)",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.deleteDir(File)",4,3,4
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.initEnvironment()",1,5,7
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.oneTest(String,String,boolean,String,String,String,String,PrintWriter)",1,2,6
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.ping(NetworkServerControl,int)",2,2,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.pingServer(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.processDEBUGOutput(Process)",1,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.processOutput(Process,PrintWriter)",1,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.recreateDB(int,String,String,boolean,String,boolean)",1,5,8
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.startServer(int,int)",2,4,7
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.stopServer(int,int)",2,3,5
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.sysinfoEmbedded(int,int,String)",1,2,4
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.sysinfoServerFromClient(int,int,String)",1,2,4
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.testEmbeddedTrunk()",2,10,12
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.testLoopThruAllCombinations()",2,13,17
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilityCombinations.testOutput(Process,PrintWriter)",1,9,10
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Creator.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Version.Version(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Version.Version(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Version.atLeast(Version)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Version.compareTo(Object)",5,1,5
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Version.constructorMinion(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Version.equals(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Version.hashCode()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.Version.toString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.findClient()",3,5,6
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.findServer()",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.getClientVMVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.getDriverVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.getServerVMVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.getServerVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.getVMVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.main(String[])",1,6,6
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.parseArgs(String[])",6,5,8
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.parseServerVMVersion(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.parseVMLevel()",1,1,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.CompatibilitySuite.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.JDBCDriverTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.MyBlob(byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.equals(Object)",7,3,8
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.getBinaryStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.getBytes(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.length()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.position(Blob,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.position(byte[],long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.setBinaryStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.setBytes(long,byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.setBytes(long,byte[],int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyBlob.truncate(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.MyClob(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.equals(Object)",7,3,8
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.getAsciiStream()",1,1,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.getCharacterStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.getSubString(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.length()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.position(Clob,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.position(String,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.setAsciiStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.setCharacterStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.setString(long,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.setString(long,String,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.MyClob.truncate(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.T_CN.T_CN(int,boolean[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.T_CN.getCoercions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.T_CN.getJdbcType()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.TypeDescriptor.TypeDescriptor(int,String,Version,Version,Version)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.TypeDescriptor.getDb2jccVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.TypeDescriptor.getDerbyTypeName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.TypeDescriptor.getDerbyVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.TypeDescriptor.getJdbcType()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.TypeDescriptor.getVMVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.addColumn(StringBuffer,int,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.beginColumnList(StringBuffer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.buildCoercionMap()",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.buildTypeMap()",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.checkCoercions(ResultSet,String,TypeDescriptor,List)",1,5,5
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.checkDBMetadata(Connection,String)",3,2,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.checkParameter(ResultSet,int,Object)",2,10,11
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.checkProcMetadata(Connection,String,TypeDescriptor[])",3,2,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.checkRSMD(ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.checkRow(ResultSet,TypeDescriptor[],Object[],List)",1,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.checkRows(ResultSet,TypeDescriptor[],Object[][],List)",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.clientSupports(TypeDescriptor)",2,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.createSchema(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.createTable(Connection,String,TypeDescriptor[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.datatypesTest(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.ddmdTypeKludge(int)",4,2,4
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.doubleQuote(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.dropSchema(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.endColumnList(StringBuffer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.getCoercionIndex(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.getColumn(ResultSet,String,TypeDescriptor)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.getOutArg(CallableStatement,int,TypeDescriptor)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.getType(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.getType(TypeDescriptor[],String)",3,2,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.getType(int)",3,2,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.makeInsert(Connection,String,TypeDescriptor[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.makeNullRow(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.makeRows(Object[][])",1,1,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.putCoercionIndex(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.putType(TypeDescriptor)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.readTable(Connection,String,TypeDescriptor[],Object[][],List)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.readTableQuery(Connection,String,TypeDescriptor[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.rsmdTypeKludge(int)",5,3,6
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.setParameter(PreparedStatement,int,TypeDescriptor,Object)",3,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.setRow(PreparedStatement,int,TypeDescriptor[],Object[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.stuffTable(Connection,String,TypeDescriptor[],Object[][])",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.testJDBCDriver()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.JDBCDriverTest.testSanity()",1,2,2
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.Pinger.Pinger()",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.Pinger.exit(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.Pinger.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.Pinger.ping(NetworkServerControl,int)",2,2,3
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.Pinger.ping(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.compatibility.Pinger.println(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.junitTests.derbyNet.CompatibilityTest.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.AggregateClassLoadingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.testAggregate(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.testAggregateAVG()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.testAggregateCOUNT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.testAggregateCOUNT2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.testAggregateMAX()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AggregateClassLoadingTest.testAggregateMIN()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_Long(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_Long_long(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_amb_Long_long(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_amb_Long_long(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_amb_byte_long(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_amb_byte_long(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_amb_long_long(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_amb_long_long(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_badreturn_byte_long(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_Long(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_long_long(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_Long(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.bigint_unres_long(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_Double(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_Double_double(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_amb_Double_double(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_amb_Double_double(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_amb_byte_double(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_amb_byte_double(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_amb_double_double(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_amb_double_double(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_badreturn_byte_double(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_Double(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_double_double(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_Double(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.double_unres_double(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_Integer(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_Integer_int(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_amb_Integer_int(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_amb_Integer_int(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_amb_byte_int(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_amb_byte_int(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_amb_int_int(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_amb_int_int(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_badreturn_byte_int(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_Integer(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_int_int(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_Integer(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.integer_unres_int(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.numeric_BigDecimal_BigDecimal(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_Float(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_Float_float(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_amb_Float_float(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_amb_Float_float(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_amb_byte_float(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_amb_byte_float(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_amb_float_float(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_amb_float_float(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_badreturn_byte_float(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_Float(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_float_float(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_Float(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.real_unres_float(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_Integer(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_Integer_short(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_amb_Integer_short(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_amb_Integer_short(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_amb_byte_short(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_amb_byte_short(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_amb_short_short(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_amb_short_short(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_bad_Short_Short(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_bad_Short_short(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_bad_short_Short(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_badreturn_byte_short(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_Integer(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_short_short(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_Short(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.smallint_unres_short(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(Double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(Float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(Long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(Short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignatures.varchar_String_String(short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.AnsiSignaturesTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.declareAndFailFunction(String,String,String[],String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.declareAndRunFunction(String,String,String[],String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.declareFunction(Connection,String,String,String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.doubleQuote(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.runFunction(Connection,String,String,String,String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_Long_Long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_Long_long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_amb_Long_long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_amb_byte_long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_amb_long_long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_badreturn_byte_long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_long_Long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_long_long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_unres_Long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_bigint_unres_long()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_Double_Double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_Double_double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_amb_Double_double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_amb_byte_double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_amb_double_double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_badreturn_byte_double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_double_Double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_double_double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_unres_Double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_double_unres_double()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_Integer_Integer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_Integer_int()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_amb_Integer_int()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_amb_byte_int()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_amb_int_int()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_badreturn_byte_int()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_int_Integer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_int_int()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_unres_Integer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_integer_unres_int()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_numeric_BigDecimal_BigDecimal()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_Float_Float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_Float_float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_amb_Float_float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_amb_byte_float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_amb_float_float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_badreturn_byte_float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_float_Float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_float_float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_unres_Float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_real_unres_float()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_Integer_Integer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_Integer_short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_amb_Integer_short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_amb_byte_short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_amb_short_short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_bad_Short_Short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_bad_Short_short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_bad_short_Short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_badreturn_byte_short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_short_Integer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_short_short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_unres_Short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_smallint_unres_short()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiSignaturesTest.test_varchar_String_String()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.AnsiTrimTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.decorate(Statement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.positiveTest(String,Object)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testCharIsNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testColumnsWithConstant()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testSourceIsEmpty()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testSourceIsNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testSourceIsSingleChar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testTrimCharIsExpr()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testTrimFromClobColumn()",1,3,5
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testTrimResultIsEmpty()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.AnsiTrimTest.testTrimSourceIsExpr()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug4356Test.Bug4356Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug4356Test.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug4356Test.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug4356Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug4356Test.testBug4356()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug5052rtsTest.Bug5052rtsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug5052rtsTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug5052rtsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug5052rtsTest.testBug5052()",1,3,6
"org.apache.derbyTesting.functionTests.tests.lang.Bug5054Test.Bug5054Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug5054Test.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug5054Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.Bug5054Test.testBugBug5054()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CaseExpressionTest.CaseExpressionTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CaseExpressionTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CaseExpressionTest.testAllDatatypesCombinationsForCaseExpressions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CaseExpressionTest.testCaseExpressionQuery(Statement,String[][],String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.CaseExpressionTest.testDerby3032()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CaseExpressionTest.testMultipleWhens()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CaseExpressionTest.testWhenNonBoolean()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.CastingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.checkSupportedAssignment(int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.checkSupportedCast(int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.checkSupportedComparison(int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.formatString(String)",2,4,5
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.getCompatibleString(int,int,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.getShortTypeName(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.getTableName(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isBinaryType(int)",1,1,4
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isCastException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isCharacterType(int)",1,1,4
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isClob(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isDateTimeTimestamp(int)",1,1,3
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isLob(int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isLongType(int)",1,1,4
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isMethodNotFoundException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isNotComparableException(SQLException)",2,2,3
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isNotStorableException(SQLException)",2,2,3
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isSupportedAssignment(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isSupportedCast(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.isSupportedComparison(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.setUp()",4,4,6
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.sqlStateMatches(SQLException,String)",2,2,3
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.testAssignments()",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.testComparisons()",1,9,9
"org.apache.derbyTesting.functionTests.tests.lang.CastingTest.testExplicitCasts()",5,7,8
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.CharUTF8Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.getBody(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.setBody(int,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.testEmptyStringUTF8()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CharUTF8Test.testUTF8()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.CoalesceTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.dumpRS(ResultSet,String)",3,8,10
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.isClobWithCharAndDateTypeArguments(String)",3,4,5
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.isSupportedCoalesce(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.suite()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testAggregateDerby2016()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testAllDatatypesCombinations()",1,11,11
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testCharCoalesce()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testCharForBitDataCoalesce()",1,13,13
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testCoalesceSyntax()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testCompatibleDatatypesCombinations()",4,9,10
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testDateCoalesce()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testMiscellaneousCoalesce()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testNumericCoalesce()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testTimeCoalesce()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.CoalesceTest.testTimeStampCoalesce()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.CollationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.checkLangBasedQuery(Statement,String,String[][])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.collatedSuite(String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.commonTestingForTerritoryBasedDB(Statement)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.compareAgrave(int,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.dropTable(Statement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.hello()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.loadDriver()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.mimic(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.setUpTable(Statement)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.suite()",1,5,8
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testDefaultCollation()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testEnglishCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testFrenchCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testMissingCollatorSupport()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testNorwayCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest.testPolishCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.CollationTest2(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.checkLangBasedQuery(String,String[][],boolean)",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.checkParamQuery(String,String[],int,String[][],boolean)",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.checkSimpleCompare(int[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.checkTwoPersistentCompare(int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.collatedTest(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.doExportTable(String,String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.doImportTable(String,String,String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.dropTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.formatLikeResults(Connection,String)",1,2,4
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.formatString(String,boolean)",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.full_row_set(int[],int,int,boolean)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.full_row_single_value(int,String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.isDatabaseBasicCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.printLikeResults(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.printRuleBasedCollator()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runAlterTableAddColumn(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runAlterTableCompress(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runAlterTableDropColumn(Connection,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runBulkInsert(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runDERBY_2703(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runDerby2670()",1,8,8
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runLikeTests(int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runQueries(int,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.runTestIter(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.setUpALLVALS(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.setUpLikeTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.setUpTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.suite()",1,5,7
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.testDefaultCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.testDefaultJVMTerritoryCollation()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.testEnglishCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.testNorwayCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CollationTest2.testPolishCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CommentTest.CommentTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CommentTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CommentTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CommentTest.testBracketedComments()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest.CompressTableTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CompressTableTest.testCompressTableWithDoubleQuoteInName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConcurrentImplicitCreateSchema.CreateTable.CreateTable(int,int,ConcurrentImplicitCreateSchema)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConcurrentImplicitCreateSchema.CreateTable.run()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ConcurrentImplicitCreateSchema.failed(Throwable)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ConcurrentImplicitCreateSchema.go(String[])",3,7,9
"org.apache.derbyTesting.functionTests.tests.lang.ConcurrentImplicitCreateSchema.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConcurrentImplicitCreateSchema.printSQLError(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.ConglomerateSharingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.checkStatementError(String,Statement,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.countConglomerates(String,PreparedStatement,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.testConstraintDrops()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.testConversionToNonUnique()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.testUniqueConstraintWithNullsBackingIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ConglomerateSharingTest.verifyConstraints(Statement,PreparedStatement,String,String,String[][],int)",2,4,5
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.CreateTableFromQueryTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.decorate(Statement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.positiveTest(String,String[],String[],String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testBaseTableDoesNotExist()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testBasicTableCreation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testColumnCountMismatch()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testCreateTableFromValues()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testCreateTableWithColumnList()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testCreateTableWithDerivedColumnName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testCreateTableWithGroupByInQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testCreateTableWithMultipleBaseTables()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testCreateTableWithSubsetOfColumns()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testCreateTableWithSubsetOfColumnsAndColumnList()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testDuplicateColumnName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testInvalidDataType()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testNullValues()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testParametersNotAllowed()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testSystemGeneratedColumnName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CreateTableFromQueryTest.testUnimplementedWithDataClause()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.CurrentOfTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.cursorChange(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.cursorChange(String,String,String,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.doubleValue(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.recompile(String,String,String)",5,6,10
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testCursorChangeToDifferentTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testCursorChangeToReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testCursorChangeUpdateList()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testDelete()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testDeleteRecompileCreateIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testReadOnlyCursors()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testUpdate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testUpdateRecompileChangeFunction()",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.testUpdateRecompileCreateIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CurrentOfTest.tripleValue(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CursorTest.CursorTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CursorTest.derby2417testSetCursorNextExecute()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CursorTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CursorTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CursorTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.CursorTest.testCursor()",1,5,6
"org.apache.derbyTesting.functionTests.tests.lang.CursorTest.testCursorParam()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.CursorTest.testGetCursorName()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest.DBInJarTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest.shutdownDB(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DBInJarTest.testConnectDBInJar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.DatabaseClassLoadingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.addEntries(ZipOutputStream,File,String,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.addFile(ZipOutputStream,File,String,int)",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.checkCorrectLoader(String,PreparedStatement,PreparedStatement,PreparedStatement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.checkLoading(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.createArchive(String,File,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.derby2035Workaround()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.getResourceTests(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.installJar(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.loadJavaClass(String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.readOnlyTest(DataSource)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.removeJar(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.replaceJar(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.setContextClassLoader(URL)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.setDBClasspath(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.signersTests(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.suite()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testAddContact()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testAlterTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testClassLoadOrdering()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testClassPathRollback()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testCreateDatabaseJar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testDatabaseInClasspath()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testDatabaseInJar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testGetResource()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testHackedJarReplacedClass()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testIndirectLoading()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testInvalidJar()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testJarHandling()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testLoadDerbyClassIndirectly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testLoadJavaClassDirectly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testLoadJavaClassDirectly2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testLoadJavaClassDirectly3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testLoadJavaClassIndirectly()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testRemoveJar()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testReplaceJar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testReplacedClass()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testSecondJar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testSetClasspath()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testSignedJar()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testWithNoClasspath()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DatabaseClassLoadingTest.testWithNoInstalledJars()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DeadlockModeTest.DeadlockModeTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeadlockModeTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeadlockModeTest.createThreads(Thread[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeadlockModeTest.encryptedBaseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeadlockModeTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeadlockModeTest.testThreadsUpdatingTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeadlockModeTest.threadWorker()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.DeadlockModeTest.waitForThreads(Thread[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.DeclareGlobalTempTableJavaTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.UpdateWhereCurrentOfOnGTT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.dropSchemaTables()",1,1,6
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testConstraintsAllowedOnSESSIONPhysicalTables()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testConstraintsNotAllowedOnGTTs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testCreateView()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testDMLRollback1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testDMLRollback2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testDatabaseMetadata()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testDeleteOnGTT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testDeleteWhereCurrentOfOnGTT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testDerby1706()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testDuplicateAndNullGTT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testEntryForSEESSIONtoSysCatalog()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testEntryForSESSIONTablesToSysCatalog()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testFeaturesAllowedOnPhysicalTablesOfSESSIONSchema()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testFeaturesNotAllowedOnGTTs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testGTTSchemaName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testInsertOnGTT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testNegativeGrammars()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testOnCommiDeleteRowsWithAndWithoutOpenCursors()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testOnCommitPreserveRowsWithAndWithoutOpenCursors()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testOneGTTInConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testPositiveGrammars()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testPreparedStatement1()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testPreparedStatement2()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testRollbackBehavior1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testRollbackBehavior2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testRollbackBehavior3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testRollbackBehavior4()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testSESSIONQualifier()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testSESSIONschema()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testSameGTTNameForTwoConnections()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testStatementCaching()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DeclareGlobalTempTableJavaTest.testUpdateOnGTT()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.DistinctTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.assertRowCount(int,ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.checkDistinctRows(int[])",1,6,6
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testBasicDistinct()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctElimination()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctFiltering()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctIdenticalAndDifferingRows()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctIdenticalNullRows()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctInInsert()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctInValuesClause()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctInsertWithGeneratedColumn()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctManyNullRows()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctMixedNullRows()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctPaddingInVarcharIgnored()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctScanForSubquery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctSomeNullRows()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctStoreSort()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctSyntaxErrors()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctTwoVaryingRows()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctWithBigInt()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testDistinctWithUpdatedRows()",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testIdenticalRows()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testNoData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testOneRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DistinctTest.testResultSetInOrderWhenUsingIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DummyBinary.DummyBinary(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DummyBinary.close()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DummyBinary.read()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.DummyBinary.read(byte[],int,int)",2,1,4
"org.apache.derbyTesting.functionTests.tests.lang.DummyBinary.whereAmI()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DummyReader.DummyReader(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DummyReader.close()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DummyReader.read()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.DummyReader.read(char[],int,int)",2,1,3
"org.apache.derbyTesting.functionTests.tests.lang.DummyReader.whereAmI()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.DynamicLikeOptimizationTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.suite()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testCast()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testDynamicLikeOptimization()",3,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testEscapeSyntax()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testEscapeSyntax2()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testEscapeSyntax3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testEscapeSyntax4()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testEscapeSyntax5()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testEscapeWithBackslash()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testEscapedEscapeCharacterPrecedingFirstWildcard()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testGeneratedPredicates(PreparedStatement,String[][][])",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testGeneratedPredicatesCHAR()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testGeneratedPredicatesVARCHAR()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testLikeWithHighestValidCharacter()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testSimpleLikePredicates()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testStringAndPatternAndEscapeFromTable()",1,8,8
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testTabs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.DynamicLikeOptimizationTest.testWildcardAsEscape()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.ErrorCodeTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ErrorCodeTest.test_errorcode()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest.ErrorMessageTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest.testDeadlockTimeout()",1,3,5
"org.apache.derbyTesting.functionTests.tests.lang.ErrorMessageTest.testWaitTimeout()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.ExistsWithSubqueriesTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.checkQuery(Statement,String[][],String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.setupDerby3033()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.testCorrelatedSetOps()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.testDerby3033()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.testNonCorrelatedSetOps()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.testSetOpsWithVALUES()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ExistsWithSubqueriesTest.updateStats(Statement,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.ForBitDataTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.baseSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.checkEncodedLengthValue(String,InputStream,int,int)",4,2,9
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.insertData(PreparedStatement,int,byte[],int,boolean)",2,15,25
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.insertEL(PreparedStatement,PreparedStatement,PreparedStatement,int,String)",1,1,5
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.selectData(PreparedStatement,byte[],int,int,String)",1,3,9
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.showCompareData(PreparedStatement,String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.showData(PreparedStatement,int,byte[],String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.showData(byte[])",2,3,4
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.testCompare()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.testEncodedLengths()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.testNegative()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.testTypes()",3,8,9
"org.apache.derbyTesting.functionTests.tests.lang.ForBitDataTest.testValues()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.ForUpdateTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testCursor()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testCursor1()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testCursor2()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testCursor3()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testCursor5()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testCursors()",1,8,8
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testNegative()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testStatistics()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testUpdates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ForUpdateTest.testUpdates2()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.FullCollationTests.FullCollationTests(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.FullCollationTests.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GetPropertyInfoTest.main(String[])",5,16,19
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeDDLTest.GrantRevokeDDLTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeDDLTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeDDLTest.testGrantRevokeDDL()",1,78,103
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeDDLTest.testGrantRevokeDDL2()",1,19,25
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeDDLTest.testRevokeDropsFKWithSharedConglom()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.GrantRevokeTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.appendColumnValue(StringBuffer,int)",2,2,7
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertAllPrivileges(boolean,String,String,String,String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertDeletePrivilege(boolean,String,String,String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertFunctionPrivilege(boolean,String,String,String,boolean)",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertInsertPrivilege(boolean,String,String,String,String[])",1,6,6
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertPrivilegeMetadata(boolean,String,String,String,String,String[])",1,12,14
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertProcedurePrivilege(boolean,String,String,String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertReferencesPrivilege(boolean,String,String,String,String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertSelectPrivilege(boolean,String,String,String,String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertTriggerPrivilege(boolean,String,String,String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.assertUpdatePrivilege(boolean,String,String,String,String[])",1,9,11
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.basesuite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.columnListAsString(String[])",2,2,3
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.getAllColumns(String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.getColumnDataType(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.grant(Connection,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.grant(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.grant(String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.grant(String,String,String,String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.revoke(Connection,String,String,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.revoke(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.revoke(String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.revoke(String,String,String,String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.s1F1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.s1F1P()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.s1P1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.s2F1a()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.s2F2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testAllPrivileges()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testColumnPrivileges()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testFunctionWithSameProcedureName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantDatabaseMetaDataMethods()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantDeleteWithColumnList()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantExecuteOnTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantExecuteWithRestrict()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnFunctionWithBadSchema()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnNonexistantColumn()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnNonexistantFunction()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnNonexistantFunctionForProcedure()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnNonexistantProcedure()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnNonexistantProcedureForFunction()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnNonexistantSchema()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnNonexistantTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnProcedure()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantOnProcedureWithBadSchema()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantRevokeSelectWithRestrict()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantRevokeWithoutRestrict()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantRollbackAndCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantSelectOnRoutine()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testGrantTriggerWithColumnList()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testInvalidGrantAction()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testInvalidReservedWordAction()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testOtherUserCannotRevokeOwnerPrivileges()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testPublicRoutinePrivileges()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testPublicTablePrivileges()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testRevokeExecutePrivileges()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testRevokeExecuteWithPublicPrivilege()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testRevokeMultiplePermissionsMultipleUsers()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testRevokeRollbackAndCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testRevokeSingleTableSingleUser()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testRevokeWithNoPermissions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testRevokeWithPublicPrivilege()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GrantRevokeTest.testSimpleGrant()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.GroupByExpressionTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.assertRow(String,ResultSet,Object[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.intRow(int[])",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.suite()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.testDerby3094Expressions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.testDuplicateColumns()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.testExtractOperator()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.testMiscExpressions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.testNegative()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.testSimpleExpressions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.testSubSelect()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.verifyQueryResults(String,String,Object[][])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GroupByExpressionTest.verifyQueryResults(String,String,int[][])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.GroupByTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.createSchemaObjects(Statement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.genString(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.loadRows()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testColumnAliasInGroupByAndHaving()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testCorrelatedSubqueryInHavingClause()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testDERBY2937()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testDerbyOrderByOnAggregate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testDistinctGroupBy()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByColumnsNotInSelectList()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByCorrelatedSubquery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByDistinct()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByErrors()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByExpression()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByInSubquery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByMaxWithEmptyString()",1,4,5
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByOrderBy()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByWithAdditionalColumns()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByWithAliasToSameName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByWithTempTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testGroupByWithVariousDatatypes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testHavingClauseColumnRef()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testHavingClauseInSubquery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testHavingClauseRestrictions5653()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testHavingWithoutGroupBy5920()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testInvalidHavingClauses()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testMulticolumnGrouping()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testOrNodeInHavingClause()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testOrderByNonGroupedColumn()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.GroupByTest.testParameterMarkersInHavingClause()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.HoldCursorTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.StatementsInProcedure(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.StatementsInProcedureTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.assertGetIntEquals(int,int,ResultSet)",3,4,4
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.assertIsolationError(String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.baseSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.createStatement(int,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.setHoldability(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.setTransactionIsolation(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.setUp()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testCloseCursor()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testDropTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testHoldCursorOnMultiTableQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testHoldabilityOverCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testIsolationLevelChange()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testProc(ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.HoldCursorTest.testStatements(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.DataRow.DataRow(Random,String)",2,2,5
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.DataRow.DataRow(ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.DataRow.getColumns()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.DataRow.setParameters(PreparedStatement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.InListMultiProbeTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.LiteralsStrategy.LiteralsStrategy(Connection,Random)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.LiteralsStrategy.fetchDataRows(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.LiteralsStrategy.getName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.MarkersStrategy.MarkersStrategy(Connection,Random)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.MarkersStrategy.fetchDataRows(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.MarkersStrategy.getName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.MixedIdsStrategy.MixedIdsStrategy(Connection,Random)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.MixedIdsStrategy.fetchDataRows(String[])",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.MixedIdsStrategy.getName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.QueryStrategy.QueryStrategy(Connection,Random)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.QueryStrategy.testSize(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.QueryStrategy.validate(String[],ResultSet)",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.assertResultsAndQueryPlan(ResultSet,String[][],Statement)",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.checkMultiProbeQueryPlan(ResultSet,int)",2,3,4
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.genUUIDValue(Random)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.insertNDataRows(Connection,int,Random)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.readAllRows(Statement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.suite()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.testDerby3603()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.testInListProbingWithOrderBy()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.testMultiProbing()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.testMultipleStartStopPreds()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.testOneSize(List,int)",4,4,5
"org.apache.derbyTesting.functionTests.tests.lang.InListMultiProbeTest.testProbePredPushedIntoSelectThenReverted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.JitTest.checkBadStartWithCols(Connection,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.JitTest.dropAllAppTables(Connection)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.JitTest.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.JitTest.testDerby1327BadStartWithForAutoIncColumn(Connection)",3,4,6
"org.apache.derbyTesting.functionTests.tests.lang.LangHarnessJavaTest.LangHarnessJavaTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangHarnessJavaTest.baseSuite(String,String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.LangHarnessJavaTest.getArea()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangHarnessJavaTest.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangHarnessJavaTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.DERBY_3304(ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.LangProcedureTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.PARAMTYPE(short)",8,2,8
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.TYPE(short)",5,2,5
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.ambiguous1(int,String,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.ambiguous1(int,String,ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.ambiguous2(Integer,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.ambiguous2(int,Integer)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.assertUpdateCountForProcedureWithNoResults(Statement)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.badDynamicParameter(int,ProcedureTest[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.checkCommitWithMultipleResultSets(CallableStatement,Connection,String)",4,16,17
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.checkMatchingProcedures(Connection,String,String[],String[],String[])",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.executeStatement(Statement,String,String[])",1,5,7
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams2(int[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams3(String[],int)",1,1,4
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.inoutparams4(BigDecimal[],String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertCausingRollback(int,String,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertRow(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.insertRow(int,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.missingDynamicParameter(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.missingDynamicParameter(int,Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.outparams1(int[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.pSMALLINT(short,short[],short[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.parameter1(int,String,String,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.parameter2(int,BigDecimal,BigDecimal,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.rollbackInsideProc(int,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.rollbackInsideProcWith2ResultSets(int,ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows(String,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows(int,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.selectRows(int,int,ResultSet[],ResultSet[])",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.sqlControl(String[],String[],String[],String[],String[],String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.sqlControl2(String[],String[],String[],String[],String[],String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.sqlControl3(String[],String[],String[],String[],String[],String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.sqlControl4(int,String[],String[],String[],String[],String[],String[],String[],String[])",1,4,5
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testAmbigiousMethods()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testCreateRoutineErrors()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testDelayedClassChecking()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testDuplicates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testDynamicResultSets()",1,10,11
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testMethodSignatureDerby258()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testOutparams()",1,26,28
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testParameterTypes()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testResultSetsWithLobs()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testSQLControl()",5,12,17
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testSqlProcedures()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.testZeroArgProcedures()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.zeroArg()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangProcedureTest.zeroArgDynamicResult(ResultSet[],ResultSet[],ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangScripts.LangScripts(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangScripts.getSuite(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.LangScripts.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.LangScripts.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.MathTrigFunctionsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.debug()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.debug(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.executeFn(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.executeFn(String,double)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.executeNullFn(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.executeNullValues(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.executeValues(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.executeValues(String,double)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.getValue(PreparedStatement,double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testAcos()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testAsin()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testAtan()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testCeil()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testCeiling()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testCos()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testDegrees()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testExp()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testFloor()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testLn()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testLog()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testLog10()",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testPI()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testRadians()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testSin()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.MathTrigFunctionsTest.testTan()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.NestedWhereSubqueryTest.NestedWhereSubqueryTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NestedWhereSubqueryTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NestedWhereSubqueryTest.testBasicOperations()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NullIfTest.NullIfTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NullIfTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NullIfTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NullIfTest.testAllDatatypesCombinations()",1,9,9
"org.apache.derbyTesting.functionTests.tests.lang.NullIfTest.testParameterForFirstOperandToNullIf()",2,8,13
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.NullableUniqueConstraintTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testComparisonAcrossPages()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testDefferedInsert()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testDistinctQuery()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testMultipartKeyUniqueConstraint()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testNullOrdering()",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testSingleKeyPartUniqueConstraint()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.NullableUniqueConstraintTest.testWithDeletedKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.OLAPTest.OLAPTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.OLAPTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.OLAPTest.testBasicOperations()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PredicatePushdownTest.PredicatePushdownTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PredicatePushdownTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PredicatePushdownTest.test_predicatePushdown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL.PrepareExecuteDDL(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL.checkGrantRevoke(PreparedStatement,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL.checkSelect(PreparedStatement,String)",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL.tableDropped()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.PrepareExecuteDDL.testPrepareExcute()",1,6,6
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.PrimaryKeyTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testBug5420()",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testCatalog()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testConstraintwithNotNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testDeleteFromPrimaryKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testDuplicateConstraintNames()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testDuplicatePrimaryKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testExplicitNullabilityOfConstraints()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testInvalidConstaintDefs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testInvalidConstraintSchemaNames()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.PrimaryKeyTest.testKeyConstraintsImpliesNotNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.ProcedureInTriggerTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.alterTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.basesuite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.checkAndResetGetConnectionProcCount(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.checkAndResetSelectRowsCount(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.checkAndResetZeroArgCount(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.createIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.createTrigger()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.deleteRow(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.doConnCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.doConnCommitInt()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.doConnRollback()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.doConnectionSetIsolation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.dropIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.dropTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.dropTrigger()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.getConnectionProc()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.insertRow(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.insertRow(int,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.selectRows(String,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.selectRows(int,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.selectRows(int,int,ResultSet[],ResultSet[])",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.testModifiesSql()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.testTriggerContainsSql()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.testTriggerNegative()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.testTriggerNoSql()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.testTriggerReadsSql()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.updateRow(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ProcedureInTriggerTest.zeroArg()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ReleaseCompileLocksTest.ReleaseCompileLocksTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ReleaseCompileLocksTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ReleaseCompileLocksTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ReleaseCompileLocksTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ReleaseCompileLocksTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ReleaseCompileLocksTest.testReleaseCompileLocks()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.RenameIndexTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testDuplicateIndexWithPreparedStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testDuplicateIndexWithViews()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testExistingIndexName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testRenameColumnWithIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testRenameIndexOfView()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testRenameIndexWithOpenCursor()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testRenameNonExistingIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testRenameSystemTableIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameIndexTest.testWithPreparedStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.RenameTableTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testExistedNameForRenameTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testRenameNonExistingTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testRenameOnDependencies()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testRenameSystemTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testRenameTableWithTriggersOnIt()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testRenameTableWithViews()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testRenameWithCheckConstraintsOnIt()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testRenameWithIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RenameTableTest.testRenameWithPreparedStatement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.ResultSetsFromPreparedStatementTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.apply(PreparedStatement,Object[][])",4,4,4
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.assertResultSet(String,Object[][],ResultSet)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.assertRow(String,Object[],ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.createTestTable(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.dump(ResultSet,PrintStream)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.dumpDiff(Object[][],int,ResultSet,boolean,PrintStream)",1,8,10
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.dumpObjectArray(ResultSet,PrintStream)",5,6,6
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.hasTableXLock(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.insertFrom(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.insertInto(String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.ref(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.tearDown()",1,1,6
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testAnyResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testBigintGeneratedAlwaysAsIdentity()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testBigintGeneratedByDefaultAsIdentity()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testCallStatementResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testCurrentOfResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testDeleteCascadeUpdateResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testDeleteResultSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testDistinctGroupedAggregateResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testDistinctGroupedAggregateResultSet(PreparedStatement,PreparedStatement)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testDistinctScalarAggregateResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testDistinctScalarAggregateResultSet(PreparedStatement,PreparedStatement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testDistinctScanResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testDistinctScanResultSet(PreparedStatement,PreparedStatement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testGeneratedIdentity(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testGroupedAggregateResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testGroupedAggregateResultSet(PreparedStatement,PreparedStatement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testHashLeftOuterJoinResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testHashLeftOuterJoinResultSet(PreparedStatement,PreparedStatement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testHashTableResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testHashTableResultSet(PreparedStatement,PreparedStatement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testIntGeneratedAlwaysAsIdentity()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testIntGeneratedByDefaultAsIdentity()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testLastIndexKeyResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testLastIndexKeyResultSet(PreparedStatement,PreparedStatement)",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testNestedLoopLeftOuterJoinResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testNestedLoopLeftOuterJoinResultSet(PreparedStatement,PreparedStatement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testNestedLoopResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testNestedLoopResultSet(PreparedStatement,PreparedStatement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testOnceResultSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testScalarAggregateResultSet()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testScalarAggregateResultSet(PreparedStatement,PreparedStatement)",2,3,4
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testSetMaxRowsTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testSetMaxRowsValues()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testSetOpResultSet_except()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testSetOpResultSet_intersect()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testSetTransactionResultSet()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testSmallintGeneratedAlwaysAsIdentity()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testSmallintGeneratedByDefaultAsIdentity()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testUnionResultSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testUpdateResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testUpdateResultSetWithIsolation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ResultSetsFromPreparedStatementTest.testVTIResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.RolesTest(String,int,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.assertRoleInRs(ResultSet,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.assertSysColPermsRowCount(int,int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.assertSysRolesRowCount(int,int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.assertSysRoutinePermsRowCount(int,int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.assertSysTablePermsRowCount(int,int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.assertSystableRowCount(String,int,int,int)",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.doDynamicSetRole(Connection)",2,9,10
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.doQuery(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.doStmt(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.doStmt(String,String,String,String,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.doStmtWithWarnings(String,String[],String[],String[],boolean)",1,16,16
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.dumpSysColPerms()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.dumpSysRoles()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.dumpSysRoutinePerms()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.dumpSysTablePerms()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.f1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.isDbo()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.negativeSyntaxSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.positiveSyntaxSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.semanticSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.setUp()",1,5,7
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.tearDown()",1,5,6
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.testLoginWithUsernameWhichIsARole()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.testNegativeSyntax()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.testPositiveSyntax()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.testSemantics()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RolesTest.wrapInAuthorization(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest.RoutineSecurityTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest.assertSecurityException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest.testGetSystemProperty()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest.testInternalClass()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest.testSystemExit()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.RoutineSecurityTest.testSystemGC()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.RoutineTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.checkCount(int)",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.concat(String,String)",1,1,3
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.nullAtNoon(Time)",4,3,4
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.same(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.testAggregateArgument()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.testFunctionNullHandling()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.RoutineTest.testFunctionResultDataTypeValidation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.SQLAuthorizationPropTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.grantRevokeAfterSettingSQLAuthProperty()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.resetSQLAuthProperty()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.testGrantRevokeWithoutSQLAuthProperty()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.SQLAuthorizationPropTest.testPropertyReset(CallableStatement,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.SQLSessionContextTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.assertCurrent(String,ResultSet,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.calledNestedFromP2(String)",1,3,6
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.dropper()",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.f2()",1,4,6
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.f22()",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.f3()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.p2(ResultSet[],ResultSet[])",1,6,9
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.positiveSuite(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.tearDown()",1,1,3
"org.apache.derbyTesting.functionTests.tests.lang.SQLSessionContextTest.testPositive()",1,8,8
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.ScrollCursors1Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.assertNoCurrentRow(ResultSet)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.testForwardOnlyNegative()",1,17,17
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.testNoHoldScrollableResults()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.testScrollCursors3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.testScrollInsensitive()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors1Test.testSimpleScrollCursors()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.ScrollCursors2Test(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.assertOnlyOnScrollableException(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.scrollVerifyMaxRowWithFetchSize(int,int)",1,5,6
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.testCallableStatements()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.testForwardOnlyNegative()",1,13,13
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.testForwardOnlyPositive()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.testGetMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.testScrollInsensitiveNegative()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.testScrollInsensitivePositive()",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.testScrollSensitive()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ScrollCursors2Test.testScrollVerifyMaxRowWithFetchSize()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.PropReadingAction.PropReadingAction(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.PropReadingAction.run()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.SecurityPolicyReloadingTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.canReadProperty()",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.changePolicyFile(Connection,String,boolean,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.dbaTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.decorateTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.doPolicyReloadingIsGranted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.doPolicyReloadingIsNotGranted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.getSourcePolicy()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.makeServerPolicyName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.makeTargetPolicyStub()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.nonDbaTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.readProperty(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.sleep(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.testPolicyReloading()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.toString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SecurityPolicyReloadingTest.writePolicyFile(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.countRowInTestTable(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.createTestTable(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.insertIntoTestTable(Connection,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.insertIntoTestTable(Connection,int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.isShutdownError(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.main(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.openConnectionToNewDatabase(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.reopenConnectionToDatabase(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.shutdownDatabase(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testOnceCommitedAndLeft()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testOnceCommitedAndRollbacked()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testOnceRollbackedAndCommited()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testOnceRollbackedAndLeft()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testOnlyTransactionWasCommited()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testOnlyTransactionWasLeft()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testOnlyTransactionWasRollbacked()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testShutDownWithCommitedTransaction()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testShutDownWithLeftTransaction()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testShutDownWithRollbackedTransaction()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testTwiceCommited()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.testTwiceRollbacked()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabase.verifyShutdownError(SQLException)",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.ShutdownDatabaseTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.assertShutdownOK()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.insertIntoTestTable(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.insertIntoTestTable(int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testOnceCommitedAndLeft()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testOnceCommitedAndRollbacked()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testOnceRollbackedAndCommited()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testOnceRollbackedAndLeft()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testOnlyTransactionWasCommited()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testOnlyTransactionWasLeft()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testOnlyTransactionWasRollbacked()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testTwiceCommited()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ShutdownDatabaseTest.testTwiceRollbacked()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SimpleTest.SimpleTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SimpleTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SimpleTest.testBasicOperations()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SimpleTest.testBugFixes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.SpillHashTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.ca2Val(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.cb2Val(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.checkAllCa1(ResultSet,boolean,boolean,int,String[][][],String)",3,8,15
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.findDupVal(ResultSet,int,char,int,String[][][])",6,7,8
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.insertDups(PreparedStatement,PreparedStatement,String[][])",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.runCursor(Connection,int,String[][][])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.runDistinct(Connection,int,String[][][])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.runJoin(Connection,int,String[][][])",4,4,11
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.suite()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.testCursorHeavy()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.testCursorLight()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.testDistinctHeavy()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.testDistinctLight()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.testJoinHeavy()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.testJoinLight()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SpillHashTest.trim(String)",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.StalePlansTest.StalePlansTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StalePlansTest.flushRowCount(Statement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StalePlansTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StalePlansTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StalePlansTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StalePlansTest.testStalePlanCheckIntervalOutOfRange()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StalePlansTest.testStalePlansOnLargeTable()",1,6,6
"org.apache.derbyTesting.functionTests.tests.lang.StalePlansTest.testStalePlansOnSmallTable()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.StatementPlanCacheTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.checkPreparedPlanInCache(int,String)",3,10,11
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.getSQL(String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.isPlanInCache(PreparedStatement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.isPlanInCache(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.noCachingTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.suiteWithSizeSet(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.testAcrossStatementObjects()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.testCallableStatementPlanCaching()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.testCompileFailuresNotInCache()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StatementPlanCacheTest.testPreparedStatementPlanCaching()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StreamsTest.StreamsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StreamsTest.insertLongBinary(PreparedStatement,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StreamsTest.insertLongString(PreparedStatement,int,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StreamsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StreamsTest.testStreams()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.ConstructorException.ConstructorException()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.GoodVTICosting.GoodVTICosting()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.MissingConstructor.MissingConstructor(String[],String[][])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.MissingConstructor.dummyVTI()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.MissingConstructor.getEstimatedCostPerInstantiation(VTIEnvironment)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.MissingConstructor.getEstimatedRowCount(VTIEnvironment)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.MissingConstructor.supportsMultipleInstantiations(VTIEnvironment)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.StringArrayVTI(String[],String[][])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.ZeroArgConstructorNotPublic.ZeroArgConstructorNotPublic()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.badStack(String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.close()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.deduceGetXXXCaller()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.findIndex(String,String[])",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.getMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.getRawColumn(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.getXXXrecord()",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.locateGetXXXCaller(StackTraceElement[])",2,2,3
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.next()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.squeezeMethodNames(StackTraceElement[])",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.StringArrayVTI.stringify(Object[])",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.SimpleBlob(byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.equals(Object)",7,3,8
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.getBinaryStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.getBytes(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.length()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.position(Blob,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.position(byte[],long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.setBinaryStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.setBytes(long,byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.setBytes(long,byte[],int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleBlob.truncate(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.SimpleClob(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.equals(Object)",7,3,8
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.getAsciiStream()",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.getCharacterStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.getSubString(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.length()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.position(Clob,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.position(String,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.setAsciiStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.setCharacterStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.setString(long,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.setString(long,String,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.SimpleClob.truncate(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.StringColumnVTI(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.checkNull(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.findColumn(String)",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getAsciiStream(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getBigDecimal(int)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getBinaryStream(int)",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getBlob(int)",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getBoolean(int)",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getByte(int)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getBytes(int)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getClob(int)",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getDate(int)",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getDouble(int)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getEncodedStream(String,String)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getFloat(int)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getInt(int)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getLong(int)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getShort(int)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getString(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getTime(int)",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.getTimestamp(int)",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.parseDateTime(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.wasNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.StringColumnVTI.wrap(Throwable)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SynonymTest.SynonymTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SynonymTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SynonymTest.testViewDependency()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.SysDiagVTIMappingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.checkIllegalUses(Statement,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.testCorrelatedReferences()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.testErrorLogReader()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.testInvalidTableFunctions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.testOrderBy()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.testSpaceTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SysDiagVTIMappingTest.testStatementDuration()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.SystemCatalogTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testAutoincrementColumnUpdated()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testCheckConsistencyOfSystemCatalogs()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testColumnDatatypesInSystemCatalogs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testNewTableInSystemCatalogs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testNoUserDDLOnSystemTables()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testOverThirtyCharsInTableName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testPrimaryAndUniqueKeysInSystemCatalogs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testSystemCatalogColumns()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testSystemCatalogIndexes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testSystemCatalogStoreProperties()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testSystemCatalogTableTypes()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testSystemCatalogsNotUpdatable()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.SystemCatalogTest.testViewsOfSystemCatalogs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.TableFunctionTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.allLegalDatatypesVTIResults()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.allStringTypesFunction()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.appendFooAndBar(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertFunctionDBMD(String,Object[][],Object[][])",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(String,String[],String[][],int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(String,String[][],int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.assertResults(int[],String[],ResultSet,String[][])",2,8,30
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.badDDL()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.chattyPrepare(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.checkGetXXXCalls()",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.coercionFunction()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.coercionTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.collatedSuite(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.collationTest()",1,12,12
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.compareColumnNames(String[],ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.compareJdbcTypes(int[],int[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.dropFunction(String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.dropSchema()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.expectError(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.getFunctionColumns(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.getFunctions(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.getJdbcColumnTypes(ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.getOptimizerStats(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.goodStatement(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.invert(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.makeByteString(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.makeCoercionInputs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.makeCoercionOutputs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.makeColumnNames(int,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.makeString(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.makeVTI(String[][])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.noSpecialCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.notTableFunction()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.prettyPrint(Connection,ResultSet)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.readDoubleTag(String,String)",4,2,4
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.returnsACoupleRows()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.returnsAllLegalDatatypes(int,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.simpleDDL()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.simpleVTIResults()",1,6,6
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.specialCollation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.squeezeString(Object)",5,5,5
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.subqueryTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.tableFunctionTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.verifyReturnType(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.vtiCosting()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.TableVTI(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.absolute(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.afterLast()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.beforeFirst()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.cancelRowUpdates()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.clearWarnings()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.close()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.deleteRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.findColumn(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.first()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getArray(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getArray(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getAsciiStream(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getAsciiStream(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBigDecimal(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBigDecimal(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBigDecimal(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBigDecimal(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBinaryStream(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBinaryStream(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBlob(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBlob(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBoolean(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBoolean(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getByte(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getByte(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBytes(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getBytes(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getCharacterStream(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getCharacterStream(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getClob(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getClob(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getColumnMap(String[])",6,3,6
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getConcurrency()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getCursorName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getDate(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getDate(String,Calendar)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getDate(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getDate(int,Calendar)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getDouble(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getDouble(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getFetchDirection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getFetchSize()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getFloat(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getFloat(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getInt(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getInt(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getLong(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getLong(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getObject(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getObject(String,Map)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getObject(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getObject(int,Map)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getRef(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getRef(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getShort(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getShort(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getStatement()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getString(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getString(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getTime(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getTime(String,Calendar)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getTime(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getTime(int,Calendar)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getTimestamp(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getTimestamp(String,Calendar)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getTimestamp(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getTimestamp(int,Calendar)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getType()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getURL(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getURL(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getUnicodeStream(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getUnicodeStream(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getVTIColumnNames()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.getWarnings()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.init()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.insertRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.isAfterLast()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.isBeforeFirst()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.isFirst()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.isLast()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.last()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.moveToCurrentRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.moveToInsertRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.previous()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.refreshRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.relative(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.rowDeleted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.rowInserted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.rowUpdated()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.setFetchDirection(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.setFetchSize(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateArray(String,Array)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateArray(int,Array)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateAsciiStream(String,InputStream,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateAsciiStream(int,InputStream,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBigDecimal(String,BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBigDecimal(int,BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBinaryStream(String,InputStream,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBinaryStream(int,InputStream,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBlob(String,Blob)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBlob(int,Blob)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBoolean(String,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBoolean(int,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateByte(String,byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateByte(int,byte)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBytes(String,byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateBytes(int,byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateCharacterStream(String,Reader,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateCharacterStream(int,Reader,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateClob(String,Clob)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateClob(int,Clob)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateDate(String,Date)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateDate(int,Date)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateDouble(String,double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateDouble(int,double)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateFloat(String,float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateFloat(int,float)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateInt(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateInt(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateLong(String,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateLong(int,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateNull(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateNull(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateObject(String,Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateObject(String,Object,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateObject(int,Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateObject(int,Object,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateRef(String,Ref)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateRef(int,Ref)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateShort(String,short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateShort(int,short)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateString(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateString(int,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateTime(String,Time)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateTime(int,Time)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateTimestamp(String,Timestamp)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.updateTimestamp(int,Timestamp)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TableVTI.wasNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.TimeHandlingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.assertTime1970(Time)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.assertTimeEqual(Date,Date)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.checkCurrentMultiple(int,long,long,ResultSet,int[],int)",4,4,4
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.checkCurrentQuery(int,Statement,String,int[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.checkCurrentTimeMultiple(long,long,ResultSet,int[],int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.checkCurrentTimeValue(long,long,ResultSet,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.checkCurrentTimestampMultiple(long,long,ResultSet,int[],int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.checkCurrentTimestampValue(long,long,ResultSet,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.checkTimeValue(ResultSet,int)",2,5,5
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.checkTimestampValue(ResultSet,int)",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.currentFunctionTests(int,String[])",2,13,18
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.getCodedTime(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.getTime19700101(String,Calendar)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.getTime19700101(int,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.getTime19700101(long,Calendar)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.isDateEqual(long,Timestamp)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.sleep()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.suite()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.testCurrentTime()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.testCurrentTimestamp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimeHandlingTest.testInertTime()",2,4,7
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneAddTest.OneAddTest(int,int,Date,Timestamp,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneAddTest.checkResultRow(ResultSet,String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneAddTest.composeSQL()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneAddTest.executePS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneDiffTest.OneDiffTest(int,Date,Date,int,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneDiffTest.checkResultRow(ResultSet,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneDiffTest.composeSQL()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneDiffTest.executePS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneStringAddTest.OneStringAddTest(int,int,String,Timestamp,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneStringAddTest.composeSQL()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneStringAddTest.executePS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneStringDiffTest.OneStringDiffTest(int,String,String,int,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneStringDiffTest.composeSQL()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneStringDiffTest.executePS()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneTest.OneTest(int,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneTest.checkResultSet(ResultSet,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.OneTest.runTest()",1,9,9
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.TimestampArithTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.composeSqlStr(String,int,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.dateTimeToLiteral(Object)",5,5,5
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.dt(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.expectException(PreparedStatement,Object,Object,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.expectNullResult(PreparedStatement,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.isoFormatDate(Calendar)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.setDateTime(PreparedStatement,int,Date)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.suite()",1,4,5
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testAddBetweenDateAndTimestamps()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testAddBetweenString()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testAddBetweenTimestamp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testDiffBetweenDateAndTimestamp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testDiffBetweenString()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testDiffBetweenTimestamp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testDiffBetweenTimestampAndDate()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testInvalidArgTypes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testInvalidLengths()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testNullInputs()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.testOverflow()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TimestampArithTest.ts(String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.TriggerTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypeTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesCompareMainToAction(int,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesCompareMainToActionForUpdate(String,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesDeleteTest(String)",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesInsertTest(String)",2,1,3
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesSetup(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.actionTypesUpdateTest(String)",3,2,4
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.assertFiringOrder(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.assertFiringOrder(String,int,boolean)",4,5,7
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.assertInputStreamContents(InputStream,int,byte)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.assertReaderContents(Reader,int,char)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.createRandomTriggers()",1,2,6
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.getRandomValue(Random,int,int)",11,11,21
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.logTriggerInfo(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.makeArray(int,byte)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.makeArray(int,char)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.makeCharArrayReader(char,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.randomBinary(Random,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.randomString(Random,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.setRandomValue(Random,PreparedStatement,int,int,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testBlobInTriggerTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testBlobInTriggerTable(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testClobInTriggerTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testClobInTriggerTable(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testFiringConstraintOrder()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testFiringOrder()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testTypesInActionStatement()",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.TriggerTest.testUpdateTriggerOnClobColumn()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest.TruncateTableTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest.testTruncateWithIndex()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.TruncateTableTest.unsupportedInInsaneBuilds()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.UnaryArithmeticParameterTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testABSWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testBETWEENWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testCastWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testExpectedErrors()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testMAXWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testNOTINWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testNullIfWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testOperatorsWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testParametersForUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testSQRTWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UnaryArithmeticParameterTest.testSelectWithUnaryMinusAndPlus()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintSetNullTest.UniqueConstraintSetNullTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintSetNullTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintSetNullTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintSetNullTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UniqueConstraintSetNullTest.testUpdateNullablity()",1,6,6
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.UpdatableResultSetTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createAllDatatypesTable()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createSelfReferencingTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createTable0WithTrigger()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createTable1WithTrigger()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createTableT1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createTableT2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createTableT3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createTableT4()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createTableT5()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.createTableWithPrimaryKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.resetData()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.runTestUpdateObjectWithAllDatatypes(PreparedStatement,PreparedStatement,int,int)",24,47,56
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.runTestUpdateXXXAllDataTypesInsertRow(PreparedStatement,PreparedStatement,int,int)",30,58,60
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.runTestUpdateXXXWithAllDatatypes(PreparedStatement,PreparedStatement,int,int)",29,58,60
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testCallableStatementWithUpdatableResultSet()",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testCancelRowUpdatesAndDeleteRow()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testCancelRowUpdatesOnReadOnlyRS()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testCancelRowUpdatesWithoutUpdateXXX()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testCaseSensitiveTableAndColumnName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowAndRollbackWithTriggers()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowOnTempTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowSelfReferential()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowWithCorrelationForColumnName()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowWithCorrelationForTableName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowWithDeleteTrigger()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowWithPreparedStatement()",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowWithSetCursorName()",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDeleteRowWithTriggerChangingRS()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDropTableWithUpatableResultSet()",1,4,6
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testDropTableWithUpdatableCursorOnIt()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testForeignKeyConstraintFailureOnDeleteRow()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testForeignKeyConstraintFailureOnUpdateRow()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testInsertRow()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testInsertRowAfterClose()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testInsertRowFromCurrentRow()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testInsertRowFromDifferentPositions()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testInsertRowReadOnlyRS()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testInsertRowWithDefaultValue()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testInsertRowWithNullColumn()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testMultipleUpdateXXXAndUpdateRow()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testPositionedDeleteOnUpdatableResultSet()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testPositionedUpdateOnUpdatableResultSet()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testResultSetNotPositionedAfterDeleteRow()",1,3,4
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testResultSetNotPositionedAfterUpdateRow()",1,3,5
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testResultSetPositionedBeforeNextAfterDeleteRow()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testRollbackWithAutoCommit()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testRowDeleted()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testRowUpdated()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testScrollSensitiveResultSet()",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testSetFetchSizeOnUpdatableResultSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testTableAndColumnNameWithSpaces()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testTwoResultSetsDeletingSameRow()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdatableResultSetOnJoin()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdatableResultSetOnSysTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdatableResultSetOnView()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdatableResultSetWithoutSelectingPrimaryKey()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdatableResultsetNoColumnInColumnList()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateDeleteRowNotOnRow()",1,5,9
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateDeleteRowOnClosedResultSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateDeleteRowOnReadOnlyResultSet()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateDeleteRowOnReadOnlyResultSetWithForUpdate()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateDeleteRowOnReadOnlyResultSetWithoutForUpdate()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateDeleteRowOnUpdatableResultSetWithForReadOnly()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateObjectWithAllDatatypes()",4,4,5
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowAndRollbackWithTriggers()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowDeleteRowDoNotCommit()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowDeleteRowFromInsertRow()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowOnReadOnlyRS()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowOnTempTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowSelfReferential()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowWithCorrelationOnTableAndColumn()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowWithSetCursorName()",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowWithTriggerChangingRS()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowWithUpdateTrigger()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateRowWithoutUpdateXXX()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateTableDifferentSchema()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXAllDataTypesInsertRow()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXAndDeleteRow()",1,4,7
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXAndMoveNext()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXNotForUpdateColumns()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXOnColumnNotFromTable()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXOnOutOfRangeColumn()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXOnReadOnlyColumn()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXOnReadOnlyColumnWithCorrelationName()",1,2,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXOnReadOnlyRS()",28,52,53
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXOnTableColumn()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXWithAllDatatypes()",4,4,5
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXWithCancelRowUpdates()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.testUpdateXXXWithPreparedStatement()",1,5,9
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.verifyData(int,int)",3,21,25
"org.apache.derbyTesting.functionTests.tests.lang.UpdatableResultSetTest.xTestInsertRowAfterCommit()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest.UpdateCursorTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest.suite()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest.testDescendingIndex()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest.testNonCoveringIndex()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest.testUpdateDeleteWarning()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.UpdateCursorTest.testVirtualMemoryHeap()",1,3,9
"org.apache.derbyTesting.functionTests.tests.lang.VTITest.VTITest(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.VTITest.bulkInsertVtiTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.VTITest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.VTITest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.VTITest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ViewsTest.ViewsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ViewsTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.ViewsTest.test_views()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.WISCInsert.WISCInsert()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WISCInsert.doWISCInsert(int,String,Connection)",7,2,8
"org.apache.derbyTesting.functionTests.tests.lang.WISCInsert.getLongTestDescription()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WISCInsert.getShortTestDescription()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WISCInsert.isCloudscapeSpecificTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WISCInsert.next()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.WISCInsert.rand(int,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.WISCInsert.uniqueString(int)",1,1,4
"org.apache.derbyTesting.functionTests.tests.lang.WarehouseVTI.WarehouseVTI(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WarehouseVTI.getInt(int)",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.WarehouseVTI.next()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.WiscMetaData.getColumnCount()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WiscMetaData.getColumnDisplaySize(int)",3,1,4
"org.apache.derbyTesting.functionTests.tests.lang.WiscMetaData.getColumnName(int)",17,2,17
"org.apache.derbyTesting.functionTests.tests.lang.WiscMetaData.getColumnType(int)",4,2,4
"org.apache.derbyTesting.functionTests.tests.lang.WiscMetaData.isNullable(int)",2,1,3
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.WISCInsertWOConnection(int,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.WiscVTI(int)",7,1,7
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.close()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.getInt(int)",16,2,16
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.getMetaData()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.getString(int)",6,2,6
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.next()",3,1,3
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.rand(int,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.WiscVTI.uniqueString(int)",1,1,4
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.XBindTestSetup.XBindTestSetup(TestSuite)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.XBindTestSetup.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.XBindTestSetup.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.XMLBindingTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.existsQuery(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.testInvalidXMLBindings()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.testXMLExistsBinding()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.testXMLQueryBinding()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLBindingTest.testXMLSerializeBinding()",1,3,5
"org.apache.derbyTesting.functionTests.tests.lang.XMLMissingClassesTest.XMLMissingClassesTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLMissingClassesTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.XMLMissingClassesTest.testMissingClasses()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.XMLTestSetup.XMLTestSetup(TestSuite)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.XMLTestSetup.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.XMLTestSetup.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.XMLTypeAndOpsTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testAttrSerialization()",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testIllegalNullInserts()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testIllegalOps()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testIsNull()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testNestedXMLQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testNonXMLColsWithXMLVals()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testTopLevelSelect()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testTriggerSPSWithXML()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testTriggerSetXML()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLCasting()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLColCreation()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLColsWithNonXMLVals()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLComparisons()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLExists()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLInNonXMLOps()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLParse()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLParseSerializeCombos()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLQueryInsert()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLQueryUpdate()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.XMLTypeAndOpsTest.testXMLSerialize()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang._Suite.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.closed.closed(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.closed.main(String[])",1,9,9
"org.apache.derbyTesting.functionTests.tests.lang.closed.run()",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.closed.shutdownTest(String,String)",1,7,10
"org.apache.derbyTesting.functionTests.tests.lang.closed.testConnection(Connection)",1,15,15
"org.apache.derbyTesting.functionTests.tests.lang.closed.testDerby62(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.closed.testPreparedStatement(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.closed.testResultSet(Connection)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.closed.testStatement(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.concateTests.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.concateTests.dumpSomeMetaDataInfo(ResultSet,String)",2,4,4
"org.apache.derbyTesting.functionTests.tests.lang.concateTests.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.concateTests.testCharConcatenation(Connection)",1,14,17
"org.apache.derbyTesting.functionTests.tests.lang.concateTests.testCharForBitDataConcatenation(Connection)",1,2,6
"org.apache.derbyTesting.functionTests.tests.lang.concateTests.verifyByteData(ResultSet,byte[])",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.concateTests.verifyStringData(ResultSet,String)",2,3,3
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.getCount(ResultSet)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.testMostColumnsInTable(Connection)",1,11,11
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.testMostColumnsInView(Connection)",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.testMostElementsInGroupBy(Connection)",1,10,10
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.testMostElementsInOrderBy(Connection)",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.testMostElementsInSelectList(Connection)",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.testMostIndexesOnTable(Connection)",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.testMostParametersInStoredProcedures(Connection)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.dbManagerLimits.testStringAndHexConstants(Connection)",1,22,22
"org.apache.derbyTesting.functionTests.tests.lang.dbjarUtil.addEntries(ZipOutputStream,File,String,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.dbjarUtil.addFile(ZipOutputStream,File,String,int)",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.dbjarUtil.createArchive(String,String,String)",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.dbjarUtil.setDBContextClassLoader(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.dbjarUtil.setNullContextClassLoader()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.declareGlobalTempTableJavaJDBC30.dumpExpectedSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.declareGlobalTempTableJavaJDBC30.dumpRS(ResultSet)",3,9,9
"org.apache.derbyTesting.functionTests.tests.lang.declareGlobalTempTableJavaJDBC30.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.declareGlobalTempTableJavaJDBC30.main(String[])",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.declareGlobalTempTableJavaJDBC30.testHoldableCursorsAndSavepoints(Connection,Statement)",1,27,27
"org.apache.derbyTesting.functionTests.tests.lang.declareGlobalTempTableJavaJDBC30.testPooledConnectionClose()",2,6,6
"org.apache.derbyTesting.functionTests.tests.lang.holdCursorJavaReflection.createAndPopulateTable(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.holdCursorJavaReflection.dropTable(Connection)",1,1,2
"org.apache.derbyTesting.functionTests.tests.lang.holdCursorJavaReflection.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.holdCursorJavaReflection.testCallableStatement(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.holdCursorJavaReflection.testHoldability(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.holdCursorJavaReflection.testPreparedStatement(Connection)",2,4,4
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.checkRowData(ResultSet)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.checkT0Query(String,StringBuffer,int,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.inClause(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.insertValues(int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.largeCodeGen(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.largeUnionSelect(String,int)",1,6,6
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.logicalOperators(int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.testInClause()",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.testInsertValues()",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.testLogicalOperators()",3,2,3
"org.apache.derbyTesting.functionTests.tests.lang.largeCodeGen.testUnions()",3,3,4
"org.apache.derbyTesting.functionTests.tests.lang.longStringColumn.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.longStringColumn.getBody(long)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.longStringColumn.main(String[])",4,8,8
"org.apache.derbyTesting.functionTests.tests.lang.longStringColumn.setBody(long,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.maxMemPerTab.createTablesAndInsertData(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.maxMemPerTab.executeQuery(Statement,Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.maxMemPerTab.getStatistics(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.maxMemPerTab.main(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.outparams.byteArrayToString(byte[],StringBuffer)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.outparams.callGetMethod(CallableStatement,int,int,int,StringBuffer)",2,7,22
"org.apache.derbyTesting.functionTests.tests.lang.outparams.callSetMethod(CallableStatement,int,int,StringBuffer)",2,2,16
"org.apache.derbyTesting.functionTests.tests.lang.outparams.callSetObject(CallableStatement,int,int,StringBuffer)",2,2,16
"org.apache.derbyTesting.functionTests.tests.lang.outparams.doInsertion(byte[])",1,8,8
"org.apache.derbyTesting.functionTests.tests.lang.outparams.executeOutput(CallableStatement)",1,5,5
"org.apache.derbyTesting.functionTests.tests.lang.outparams.getStringOfType(int)",10,2,10
"org.apache.derbyTesting.functionTests.tests.lang.outparams.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.output(int[],int[],int[],int[],int[],String[],String[],String[],String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsBigInteger(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsByte(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsByteArray(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsByteP(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsDate(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsDouble(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsDoubleP(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsFloat(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsFloatP(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsInteger(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsIntegerP(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsLong(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsLongP(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsNothing()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsShort(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsShortP(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsString(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsTime(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.returnsTimestamp(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.runTests(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams.setupInput(PreparedStatement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesBigInteger(BigInteger[],int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesBoolean(Boolean[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesBooleanPrimitive(boolean[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesByte(Byte[],int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesByteArray(byte[][],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesBytePrimitive(byte[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesDate(Date[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesDouble(Double[],int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesDoublePrimitive(double[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesFloat(Float[],int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesFloatPrimitive(float[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesInteger(Integer[],int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesIntegerPrimitive(int[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesLong(Long[],int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesLongPrimitive(long[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesNothing()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesShort(Short[],int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesShortPrimitive(short[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesString(String[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesTime(Time[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.takesTimestamp(Timestamp[],int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.test5116(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testEachOutputType(Connection)",6,15,19
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testManyOut(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testMisc(Connection)",1,13,13
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testNull(Boolean,Boolean,Integer[])",3,1,4
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testNull(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testNullBug4317(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testOtherOutputType(Connection)",4,10,12
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testReturnTypes(Connection)",4,11,12
"org.apache.derbyTesting.functionTests.tests.lang.outparams.testUpdate(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.outparams30.returnsBigDecimal(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.outparams30.takesBigDecimal(BigDecimal[],int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.simpleThread.GetConnection()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.simpleThread.ReturnConnection(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.simpleThread.getCount()",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.simpleThread.run()",1,2,5
"org.apache.derbyTesting.functionTests.tests.lang.simpleThread.simpleThread(String,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.lang.simpleThread.simpleThread(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.simpleThreadWrapper.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.lang.userDefMethods.deleteFromATable()",1,3,3
"org.apache.derbyTesting.functionTests.tests.lang.userDefMethods.deleteFromParent()",1,2,4
"org.apache.derbyTesting.functionTests.tests.lang.userDefMethods.derby388()",1,7,7
"org.apache.derbyTesting.functionTests.tests.lang.wisconsin.createTables(Connection,boolean)",2,1,2
"org.apache.derbyTesting.functionTests.tests.lang.wisconsin.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.BlobImpl(InputStream,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.getBinaryStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.getBytes()",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.getBytes(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.length()",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.position(Blob,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.position(byte[],long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.setBinaryStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.setBytes(long,byte[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.setBytes(long,byte[],int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.BlobImpl.truncate(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.ClobImpl(Reader,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.free()",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.getAsciiStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.getCharacterStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.getCharacterStream(long,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.getSubString(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.length()",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.position(Clob,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.position(String,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.setAsciiStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.setCharacterStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.setString(long,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.setString(long,String,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.ClobImpl.truncate(long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.blobTests(Connection)",1,4,4
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.cleanup(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.clobTests(Connection)",1,7,7
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.compareBlobToFile(InputStream,String)",3,3,4
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.compareClobToFile(Reader,String,int)",3,3,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.deleteTable(Connection,PreparedStatement,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.expectedException(SQLException)",1,2,3
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.insertBlob2(String,Connection,PreparedStatement,int,int,int,int,String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.insertBlob_SetBinaryStream(String,Connection,PreparedStatement,int,int,int,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.insertBlob_SetBlob(String,Connection,PreparedStatement,Blob,long,int,int,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.insertClob2(String,Connection,PreparedStatement,int,int,int,int,String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.insertClob_SetCharacterStream(String,Connection,PreparedStatement,int,int,int,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.insertClob_SetClob(String,Connection,PreparedStatement,Clob,long,int,int,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.negativeSpaceTruncationTest(String,Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.runTests(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectBlob(String,Connection,PreparedStatement,int,int,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectBlob2(String,Connection,PreparedStatement,int,int,int,String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectClob(String,Connection,PreparedStatement,int,int,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectClob2(String,Connection,PreparedStatement,int,int,int,String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectInsertBlob(String,Connection,PreparedStatement,PreparedStatement,int,int,int,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectUpdateBlob(String,Connection,PreparedStatement,int,int,int,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectUpdateBlob2(String,Connection,PreparedStatement,PreparedStatement,int,int,int,int,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectUpdateClob(String,Connection,PreparedStatement,int,int,int,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.selectUpdateClob2(String,Connection,PreparedStatement,PreparedStatement,int,int,int,int,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.setup(Connection)",1,1,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.updateClob2(String,Connection,PreparedStatement,int,int,int,int,int,String)",3,5,5
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.verifyTest(int,int,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.largedata.LobLimits.writeToFile(String,Reader)",1,3,3
"org.apache.derbyTesting.functionTests.tests.largedata.RandomByteStream.RandomByteStream(Random,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.RandomByteStream.read()",2,1,2
"org.apache.derbyTesting.functionTests.tests.largedata.RandomByteStream.read(byte[],int,int)",2,2,4
"org.apache.derbyTesting.functionTests.tests.largedata.RandomCharReader.RandomCharReader(Random,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.RandomCharReader.RandomCharReader(Random,long,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.RandomCharReader.close()",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.RandomCharReader.getChar()",4,7,26
"org.apache.derbyTesting.functionTests.tests.largedata.RandomCharReader.randomInt(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.largedata.RandomCharReader.read()",2,1,2
"org.apache.derbyTesting.functionTests.tests.largedata.RandomCharReader.read(char[],int,int)",2,2,4
"org.apache.derbyTesting.functionTests.tests.management.InactiveManagementMBeanTest.InactiveManagementMBeanTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.InactiveManagementMBeanTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.InactiveManagementMBeanTest.testStartStopManagementFromApplication()",2,2,2
"org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.JDBCMBeanTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.getJdbcMBeanObjectName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.testAttributeCompliantDriver()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.testAttributeDriverLevel()",1,3,3
"org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.testAttributeMajorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.testAttributeMinorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JDBCMBeanTest.testOperationAcceptsURL()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JMXConnectionDecorator.JMXConnectionDecorator(Test,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JMXConnectionDecorator.getJmxUrl()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JMXConnectionDecorator.platformMBeanServer(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JMXConnectionDecorator.remoteNoSecurity(Test)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JMXConnectionDecorator.setUp()",1,2,2
"org.apache.derbyTesting.functionTests.tests.management.JMXConnectionDecorator.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JMXTest.JMXTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JMXTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.JMXTest.testDerbyRegisteredMBeansSimpleInfo()",3,3,4
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.MBeanTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.assertBooleanAttribute(boolean,ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.assertIntAttribute(int,ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.assertLongAttribute(int,ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.assertStringAttribute(String,ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.checkBooleanAttributeValue(ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.checkIntAttributeValue(ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.checkLongAttributeValue(ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.checkStringAttributeValue(ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.enableManagement()",1,2,2
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getApplicationManagementMBean()",1,2,2
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getAttribute(ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getCommandLineProperties(boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getDerbyDomainMBeans()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getDerbyMBeanName(Hashtable<String, String>)",1,2,2
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getMBeanServerConnection()",1,2,2
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.getMBeanServerConnection(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.invokeOperation(ObjectName,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.invokeOperation(ObjectName,String,Object[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.isPlatformJMXClient()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.suite(Class<? extends MBeanTest>,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.MBeanTest.tearDown()",1,2,2
"org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.ManagementMBeanTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.startStopManagement(ObjectName)",1,2,2
"org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.ManagementMBeanTest.testStartStopManagementFromApplication()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.NetworkServerMBeanTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.getNetworkServerMBeanObjectName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeAccumulatedConnectionCount()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeActiveConnectionCount()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeBytesReceived()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeBytesReceivedPerSecond()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeBytesSent()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeBytesSentPerSecond()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeConnectionCount()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeConnectionThreadPoolSize()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaHost()",1,4,4
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaMaxThreads()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaPortNumber()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaSecurityMechanism()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaSslMode()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaStreamOutBufferSize()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaTimeSlice()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaTraceAll()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeDrdaTraceDirectory()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeStartTime()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeUptime()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testAttributeWaitingConnectionCount()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testDrdaKeepAlive()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.NetworkServerMBeanTest.testOperationPing()",2,2,2
"org.apache.derbyTesting.functionTests.tests.management.PlatformConnectionGetter.PlatformConnectionGetter()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.PlatformConnectionGetter.close(MBeanServerConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.PlatformConnectionGetter.getMBeanServerConnection(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.RemoteConnectionGetter.RemoteConnectionGetter(JMXServiceURL)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.RemoteConnectionGetter.close(MBeanServerConnection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.RemoteConnectionGetter.getMBeanServerConnection(String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.VersionMBeanTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.getDerbyJarObjectName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.getDerbynetJarObjectName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeAlpha()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeBeta()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeBuildNumber()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeMaintenanceVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeMajorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeMinorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeProductName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeProductTechnologyName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeProductVendorName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbyJarAttributeVersionString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeAlpha()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeBeta()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeBuildNumber()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeMaintenanceVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeMajorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeMinorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeProductName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeProductTechnologyName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeProductVendorName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management.VersionMBeanTest.testDerbynetJarAttributeVersionString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.management._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.management._Suite.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandling.main(String[])",2,13,13
"org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandlingJunit.ConnectionHandlingJunit(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandlingJunit.driverMgrTestConnectionsToNonexistentDb()",1,11,11
"org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandlingJunit.loadDriver(String)",1,5,5
"org.apache.derbyTesting.functionTests.tests.memory.ConnectionHandlingJunit.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.nist.NistScripts.NistScripts(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.nist.NistScripts.suite()",3,3,3
"org.apache.derbyTesting.functionTests.tests.perf.StartupExistingDBTest.StartupExistingDBTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.perf.StartupExistingDBTest.testExistingDB()",1,1,1
"org.apache.derbyTesting.functionTests.tests.perf.StartupNewDBTest.StartupNewDBTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.perf.StartupNewDBTest.testNewDB()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ClientRunner.ClientRunner(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ClientRunner.initEnvironment()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.DestroySlaveDB.DestroySlaveDB(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.DestroySlaveDB.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.DestroySlaveDB.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.DestroySlaveDB.testDestroySlaveDB()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.KillMaster.KillMaster(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.KillMaster.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.KillMaster.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.KillMaster.testKillMaster()",1,5,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.KillSlave.KillSlave(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.KillSlave.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.KillSlave.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.KillSlave.testKillSlave()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.Load.Load(String,Properties)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.Load.Load(String,String,boolean,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.ReplicationRun(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.cleanupAndShutdown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.initEnvironment(Properties)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPostStartedMasterAndSlave()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPostStoppedSlaveServer()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreInitSlave()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreStartedMaster()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreStartedMasterServer()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreStartedSlave()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreStartedSlaveServer()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreStoppedMaster()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreStoppedMasterServer()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreStoppedSlave()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.State.testPreStoppedSlaveServer()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.assertSqlStateSlaveConn(String)",4,5,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.bootMasterDatabase(String,String,String,String,int,String)",1,6,7
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.cleanAllTestHosts()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.connectPing(String,String,int,String)",3,5,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.destroySlaveDB(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.executeOnMaster(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.failOver(String,String,String,String,String,int,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.failOver_direct(String,String,String,String,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.failOver_ij(String,String,String,String,String,int,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.getMasterConnection()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.initEnvironment()",1,2,7
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.initMaster(String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.initSlave(String,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.killMaster(String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.killSlave(String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.ping(NetworkServerControl,int)",2,2,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.pingServer(String,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.processDEBUGOutput(String,Process)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.processDEBUGOutput(String,Process,PrintWriter)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.processOutput(Process)",1,3,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.processOutput(String,Process)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.processOutput(String,Process,PrintWriter)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.removeSlaveDBfiles(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.restartServer(String,String,String,String,int,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runLoad(String,String,String,String,int,String)",1,2,4
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runMasterVerificationCLient(String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runSlaveVerificationCLient(String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runStateTest(String,String,String,String,int,String)",1,1,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runTest(String,String,String,String,int,String)",2,4,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runTestOnSlave(String,String,String,String,int,String)",2,4,6
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runUserCommand(String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runUserCommand(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runUserCommandInThread(String,String,String,String)",1,2,4
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runUserCommandInThreadRemotely(String,String,String,String,String)",1,2,4
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runUserCommandLocally(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runUserCommandRemotely(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.runUserCommandRemotely(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.shutdownDb(String,String,int,String,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.simpleVerify(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startLoad(String,String,String,boolean,String,String,int)",2,3,4
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster(String,String,String,int,String,int,String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_CLI(String,String,String,int,String,int,String,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_direct(String,String,int,String,int)",3,6,6
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startMaster_ij(String,String,String,int,String,int,String)",1,1,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startOptionalLoad(Load,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startServer(String,String,String,String,int,String)",1,4,11
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startServerMonitor(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startServer_direct(String,String,int,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startSlave(String,String,String,int,String,int,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startSlave_CLI(String,String,String,int,String,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startSlave_direct(String,String,int,String,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.startSlave_ij(String,String,String,int,String,int,String)",1,1,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.stopMaster(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.stopMaster_ij(String,String,String,int,String)",1,1,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.stopServer(String,String,String,int)",1,3,9
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.stopSlave(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.stopSlave_ij(String,String,String,int,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.verifyMaster()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.verifySlave()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.xFindServerPID(String,int)",4,2,4
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun.xStopServer(String,int)",2,2,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_CleanUp.ReplicationRun_CleanUp(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_CleanUp.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_CleanUp.testReplication_CleanUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Distributed.ReplicationRun_Distributed(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Distributed.initEnvironment()",1,1,6
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Distributed.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Distributed.testReplication()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Full.ReplicationRun_Full(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Full.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Full.testReplication()",11,6,16
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local.ReplicationRun_Local(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local.testLogFilesSynched()",1,2,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local.testReplication_Local()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1.ReplicationRun_Local_1(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1._testInsertUpdateDeleteOnMaster(String,int,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1._verify(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1._verifyDatabase(String,int,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_1.testReplication_Local_1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1.ReplicationRun_Local_StateTest_part1(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1._testPreInitSlave()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1._testPreStartedMaster()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1._testPreStartedMasterServer()",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1._testPreStartedSlave()",2,3,4
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1._testPreStartedSlaveServer()",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1.testReplication_Local_StateTest_part1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1.ReplicationRun_Local_StateTest_part1_1(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1._testPostStartedMasterAndSlave_StopSlave()",1,6,6
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_1.testReplication_Local_StateTest_part1_1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2.ReplicationRun_Local_StateTest_part1_2(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2._testPostStartedMasterAndSlave_StopMaster()",1,7,7
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_2.testReplication_Local_StateTest_part1_2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_3.ReplicationRun_Local_StateTest_part1_3(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_3._testPostStartedMasterAndSlave_Failover()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_3.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part1_3.testReplication_Local_StateTest_part1_3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.ReplicationRun_Local_StateTest_part2(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2._testPostStoppedMaster()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2._testPostStoppedServer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2._testPostStoppedSlave()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2._testPostStoppedSlaveServer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2._testPreStoppedSlave(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.assertException(SQLException,String)",2,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.connectTo(String,int,String,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.executeQuery(Connection,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.failOver(String,int,String,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.getConnection(String,int,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.startMaster(String,int,String,String,String,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.startSlave(String,int,String,String,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.stopSlave(String,int,String,String,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationRun_Local_StateTest_part2.testReplication_Local_StateTest_part2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationSuite.ReplicationSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationSuite.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun.ReplicationTestRun(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify.ReplicationTestRun_Verify(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify.simpleVerify(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationTestRun_Verify.test()",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMaster.ShutdownMaster(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMaster.setEnv()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMaster.shutdown(String,boolean,boolean)",7,12,13
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterDb.ShutdownMasterDb(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterDb.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterDb.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterDb.testShutdownMasterDb()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServer.ShutdownMasterServer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServer.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServer.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServer.testShutdownMasterServer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServerByOsKill.ShutdownMasterServerByOsKill(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServerByOsKill.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServerByOsKill.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServerByOsKill.testShutdownMasterServer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServerViaNwSrvCtrl.ShutdownMasterServerViaNwSrvCtrl(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServerViaNwSrvCtrl.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServerViaNwSrvCtrl.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownMasterServerViaNwSrvCtrl.testShutdownMasterServer()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlave.ShutdownSlave(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlave.setEnv()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlave.shutdown(String,boolean,boolean)",6,8,9
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveDb.ShutdownSlaveDb(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveDb.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveDb.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveDb.testShutdownSlave()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServer.ShutdownSlaveServer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServer.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServer.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServer.testShutdownSlave()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServerByOsKill.ShutdownSlaveServerByOsKill(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServerByOsKill.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServerByOsKill.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServerByOsKill.testShutdownSlave()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServerViaNwSrvCtrl.ShutdownSlaveServerViaNwSrvCtrl(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServerViaNwSrvCtrl.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServerViaNwSrvCtrl.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.ShutdownSlaveServerViaNwSrvCtrl.testShutdownSlave()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest.SimplePerfTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest.testInserts()",1,3,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.SimplePerfTest.verifyTestInserts()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.StandardTests(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.all(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.allPackagesSuite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.ansiTrimTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.createTableFromQueryTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.databaseClassLoadingTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.dynamicLikeOptimizationTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.grantRevokeTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.groupByExpressionTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.langScripts(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.prepareStatementTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.StandardTests.simpleTest(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_Failover.TestPostStartedMasterAndSlave_Failover(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_Failover.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_Failover.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_Failover.testFailOver()",1,5,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_Failover.verify()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopMaster.TestPostStartedMasterAndSlave_StopMaster(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopMaster.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopMaster.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopMaster.testStopMaster()",1,5,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopMaster.verify()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopSlave.TestPostStartedMasterAndSlave_StopSlave(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopSlave.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopSlave.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopSlave.testStopSlave()",1,9,9
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStartedMasterAndSlave_StopSlave.verify()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStoppedSlaveServer.TestPostStoppedSlaveServer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStoppedSlaveServer.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStoppedSlaveServer.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStoppedSlaveServer.test()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPostStoppedSlaveServer.verifyTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreInitSlave.TestPreInitSlave(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreInitSlave.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreInitSlave.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreInitSlave.test()",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreInitSlave.verifyTestStartSlaveConnect_OK()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMaster.TestPreStartedMaster(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMaster.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMaster.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMaster.testStartMasterConnect_OK()",1,4,4
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMaster.verifyTestStartMasterConnect_OK()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMasterServer.TestPreStartedMasterServer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMasterServer.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMasterServer.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMasterServer.testStartMasterConnect_Illegal()",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedMasterServer.verifyTestStartMasterConnect_Illegal()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlave.TestPreStartedSlave(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlave.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlave.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlave.testStartSlaveConnect_OK()",2,3,4
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlave.verifyTestStartSlaveConnect_OK()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlaveServer.TestPreStartedSlaveServer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlaveServer.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlaveServer.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlaveServer.testStartSlaveConnect_Illegal()",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStartedSlaveServer.verifyTestStartSlaveConnect_Illegal()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMaster.TestPreStoppedMaster(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMaster.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMaster.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMaster.test()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMaster.verifyTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMasterServer.TestPreStoppedMasterServer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMasterServer.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMasterServer.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMasterServer.test()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedMasterServer.verifyTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlave.TestPreStoppedSlave(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlave.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlave.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlave.test()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlave.verifyTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlaveServer.TestPreStoppedSlaveServer(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlaveServer.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlaveServer.suite(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlaveServer.test()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.TestPreStoppedSlaveServer.verifyTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.DEBUG(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.DEBUG(String,PrintWriter)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.NIOcopy(File,File)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.cleanDir(String,boolean)",2,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.copy(File,File)",1,2,2
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.copyDir(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.copyFiles(String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.mkDirs(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.rmFiles(File,boolean)",1,5,5
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.sleep(long,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.replicationTests.Utils.writeToFile(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BackupPathTests.logMsg(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BackupPathTests.main(String[])",2,5,5
"org.apache.derbyTesting.functionTests.tests.store.BackupPathTests.performBackup(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.BaseTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.beginTest(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.checkAllConsistency(Connection)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.checkConsistency(Connection,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.createDebugSystemProcedures(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.createTable(Connection,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.dump_table(Connection,String,String,boolean)",1,5,5
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.endTest(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.executeQuery(Connection,String,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.getSpaceInfo(Connection,String,String,boolean)",1,8,8
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.get_lock_info(Connection,boolean)",1,2,3
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.log(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.logError(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.runTests(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.testProgress(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BaseTest.total_pages(int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.Beetle6038.checkProperty(String,Properties)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.Beetle6038.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BootAllTest.BootAllTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BootAllTest.createShutdownDatabase()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BootAllTest.shutdownDerby()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.BootAllTest.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.BootAllTest.testSettingBootAllPropertyWithHomePropertySet()",1,2,4
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyAESTest.EncryptionKeyAESTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyAESTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyBlowfishTest.EncryptionKeyBlowfishTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyBlowfishTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyDESTest.EncryptionKeyDESTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyDESTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.EncryptionKeyTest(String,String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.confirmNonBootedDB(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.createAndPopulateDB(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.createBackupRestore(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.getConnection(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.getConnection(String,int,String)",2,3,8
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.obtainDbName(String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.shutdown(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.shutdown(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.tearDown()",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.testBackupEncryptedDatabase()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.testConnectionSequence1()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.testConnectionSequence2()",2,4,5
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.testCreateDbFromBackup()",2,5,6
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.testCreateWithInvalidEncryptionKey()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.testCreateWithOddEncryptionKeyLength()",2,3,4
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.testInvalidRestoreFrom()",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.testRestoreFrom()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.EncryptionKeyTest.validateDBContents(Connection)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.EncryptionTest.main(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.EncryptionTest.report(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumRecovery.LogChecksumRecovery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumRecovery.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumRecovery.runTest(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumRecovery1.LogChecksumRecovery1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumRecovery1.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumRecovery1.runTest(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.LogChecksumSetup()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.createTable(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.generateBinaryData(Random,int,int)",1,3,4
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.insertAndCorrupt(Connection,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.logMessage(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.runTest(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.setupLogCorruption(int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.updateAndCorrupt(Connection,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.LogChecksumSetup.verifyData(Connection,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.createDir(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.createTable(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.dumpSQLException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.getFullPath(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.insert(Connection,String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.logMessage(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.runTest()",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.shutdown(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.MaxLogNumber()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.createTable(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.endTransaction(Connection,int)",2,2,4
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.insert(Connection,int,int,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.logMessage(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.performCheckPoint(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.runTest(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.update(Connection,int,int,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumber.verifyData(Connection,int)",1,5,5
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumberRecovery.MaxLogNumberRecovery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumberRecovery.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.MaxLogNumberRecovery.runTest(Connection)",4,6,8
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.OnlineBackup(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.createFromBackup(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.isRunning()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.performBackup()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.restoreFromBackup()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.run()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.waitForBackupToBegin()",3,3,3
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackup.waitForBackupToEnd()",5,5,5
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.DatabaseActions(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.DatabaseActions(int,Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.createTable(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.endTransaction(int)",2,2,4
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.endUnloggedAction(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.insert(String,int,int,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.performCreateDropTables()",1,5,5
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.performDmlActions()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.run()",2,3,4
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.select(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.startUnloggedAction(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.stopActivity()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.DatabaseActions.update(String,int,int,int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.dumpSQLException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.logMessage(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.runConsistencyChecker(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.runTest()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest1.shutdown(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.AsyncStatementThread.AsyncStatementThread(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.AsyncStatementThread.run()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.countRows(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.dumpSQLException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.installJarTest()",1,4,5
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.logMessage(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.removeJarTest()",1,5,6
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.runTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineBackupTest3.shutdown(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.OnlineCompressTest()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.callCompress(Connection,String,String,boolean,boolean,boolean,boolean)",1,2,5
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.checkPurgePhase(Connection,boolean,boolean,String,String,int)",1,16,17
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.createAndLoadLargeTable(Connection,boolean,String,int,int)",1,5,7
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.createAndLoadLongTable(Connection,boolean,String,int)",1,4,7
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.createAndLoadTable(Connection,boolean,String,int,int)",1,5,6
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.deleteAllRows(Connection,boolean,boolean,String,String,int)",1,10,10
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.log_wrong_count(String,String,int,int,int,int[],int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.simpleDeleteAllRows(Connection,boolean,boolean,String,String,int)",1,6,6
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test1(Connection,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test2(Connection,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test3(Connection,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test4(Connection,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test5(Connection,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test5_cleanup(Connection,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test5_load(Connection,String,String,int)",1,2,3
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test5_run(Connection,String,String,int)",1,23,23
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test6(Connection,String,String)",1,6,6
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.test7(Connection,String,String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.OnlineCompressTest.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.ReEncryptCrashRecovery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.bootDatabase(int)",1,2,8
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.clearDebugFlag(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.crash(boolean,String)",1,3,4
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.crashInRecovery(int,String)",1,2,3
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.createDatabase()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.createEncryptedDatabase()",1,1,3
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.createTable(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.dumpSQLException(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.encryptDatabase()",1,2,4
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.findMax(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.insert(Connection,String,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.logMessage(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.reEncryptDatabase()",1,2,4
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.recover(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.runConsistencyChecker(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.runCrashRecoveryTestCases(boolean)",1,2,4
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.runTest()",1,6,6
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.select(Connection,String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.setDebugFlag(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.shutdown()",1,5,5
"org.apache.derbyTesting.functionTests.tests.store.ReEncryptCrashRecovery.verifyException(SQLException,String)",1,7,8
"org.apache.derbyTesting.functionTests.tests.store.RecoveryAfterBackup.main(String[])",2,9,11
"org.apache.derbyTesting.functionTests.tests.store.RecoveryAfterBackupSetup.main(String[])",2,3,4
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.REPORT(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.REPORT_FAILURE(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.TestDiskHashtable()",2,1,2
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.checkElement(DataValueDescriptor[],int,DataValueDescriptor[][],boolean[])",4,4,4
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.doIt()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.main(String[])",1,4,6
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.rowsEqual(Object,Object)",14,6,14
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.runTests()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.testElements(boolean,DiskHashtable,int[],int,DataValueDescriptor[][],HashMap,boolean[],boolean[])",10,11,13
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.testLargeTable(DiskHashtable,int[],DataValueDescriptor[])",13,18,18
"org.apache.derbyTesting.functionTests.tests.store.TestDiskHashtable.testOneVariant(TransactionController,boolean,DataValueDescriptor[],int[],DataValueDescriptor[][])",1,10,12
"org.apache.derbyTesting.functionTests.tests.store.TestDurabilityProperty.doInserts(Connection,boolean)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.TestDurabilityProperty.isMessageInDerbyLog(String)",3,3,4
"org.apache.derbyTesting.functionTests.tests.store.TestDurabilityProperty.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.TestDurabilityProperty.markerInControlFile(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.TestDurabilityProperty.markerNotOverwritten(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.TestDurabilityProperty.report(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.TestDurabilityProperty.testNoSyncs(String[])",1,6,7
"org.apache.derbyTesting.functionTests.tests.store.TestDurabilityProperty.timeTakenToInsert(String,boolean,boolean)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.TurnsReadOnly.main(String[])",3,8,8
"org.apache.derbyTesting.functionTests.tests.store._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store._Suite.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.backupRestore1.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.backupRestore1.main(String[])",1,32,32
"org.apache.derbyTesting.functionTests.tests.store.bootLock.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.bootLock.main(String[])",1,4,5
"org.apache.derbyTesting.functionTests.tests.store.bootLock1.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.bootLock1.main(String[])",1,2,4
"org.apache.derbyTesting.functionTests.tests.store.checkPoint.checkpointOccured()",2,2,2
"org.apache.derbyTesting.functionTests.tests.store.checkPoint.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.checkPoint.main(String[])",1,12,13
"org.apache.derbyTesting.functionTests.tests.store.checkPoint.numberOfLogFiles()",3,4,7
"org.apache.derbyTesting.functionTests.tests.store.checkPoint.setupAllTestFiles()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.col_rec1.col_rec1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.col_rec1.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.col_rec1.test1(Connection,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.col_rec1.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.col_rec2.col_rec2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.col_rec2.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.col_rec2.test1(Connection,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.col_rec2.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.dropcrash.drop_crash_drop_table(Connection)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.dropcrash.drop_crash_setup(Connection,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.dropcrash.dropcrash()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.dropcrash.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.dropcrash.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.dropcrash2.dropcrash2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.dropcrash2.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.dropcrash2.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec1.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.oc_rec1.oc_rec1()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec1.test1(Connection,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec1.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec2.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.oc_rec2.oc_rec2()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec2.test1(Connection,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.oc_rec2.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec3.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.oc_rec3.oc_rec3()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec3.test1(Connection,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.oc_rec3.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec4.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.oc_rec4.oc_rec4()",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.oc_rec4.test1(Connection,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.oc_rec4.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.byteArrayEquals(byte[],int,int,byte[],int,int)",4,1,4
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.compareCharArray(Reader,char[],int)",3,3,4
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.derby500Test(Connection)",1,9,10
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.derby500_verifyVarcharStreams(Connection)",1,9,10
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.dumpSQLExceptions(SQLException)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.expectedException(SQLException)",1,2,3
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.getLongString(Connection,int)",3,1,3
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.insertDataUsingAsciiStream(PreparedStatement,int,String,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.insertDataUsingCharacterStream(PreparedStatement,int,String,int)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.insertDataUsingConcat(Statement,int,int,boolean,int)",2,5,7
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.insertDataUsingStringOrObject(PreparedStatement,int,int,boolean,boolean)",1,7,7
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.insertLongString(Connection,int,String,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.main(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.pad(String,long)",1,2,2
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamInLongCol(PreparedStatement,Object)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamInStringCol(PreparedStatement,String,boolean)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest1(Connection)",7,20,22
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest10(Connection)",1,7,7
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest11(Connection)",1,9,9
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest12(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest13(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest14(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest2(Connection,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest3(Connection,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest4(Connection)",7,10,12
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest5(Connection,long)",1,1,2
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest6(Connection,long)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest7(Connection)",1,5,5
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest8(Connection,int,int)",1,7,10
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTest9(Connection,int,int)",1,7,10
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.streamTestDataVerification(ResultSet,int)",4,4,7
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.updateLongString(Connection,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.verifyDerby500Test(PreparedStatement,byte[],char[],int,int,boolean)",1,4,4
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.verifyExistence(Connection,int,String,long)",2,1,2
"org.apache.derbyTesting.functionTests.tests.store.streamingColumn.verifyLength(int,int,long[])",1,4,5
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby1939.buildString(String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby1939.doLoad(Connection)",1,4,6
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby1939.doQuery(Connection)",2,4,5
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby1939.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby715.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby715.setup()",1,1,3
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby715.st_derby715()",1,1,1
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby715.t1.run()",1,12,12
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby715.t1.t1(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby715.t2.run()",1,12,12
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby715.t2.t2(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.storetests.st_derby715.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.storetests.st_reclaim_longcol.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.storetests.st_reclaim_longcol.setup()",1,1,1
"org.apache.derbyTesting.functionTests.tests.storetests.st_reclaim_longcol.st_reclaim_longcol()",1,1,1
"org.apache.derbyTesting.functionTests.tests.storetests.st_reclaim_longcol.test1(Connection,int,int)",1,4,5
"org.apache.derbyTesting.functionTests.tests.storetests.st_reclaim_longcol.test2(Connection,int,int,int)",1,8,10
"org.apache.derbyTesting.functionTests.tests.storetests.st_reclaim_longcol.testList(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest.IJRunScriptTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest.runTestingScript(String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest.suite()",2,2,2
"org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest.testAutoCommitCommand()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest.testBracketedComment()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest.testEmptyScript()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest.testErrorsCount()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.IJRunScriptTest.testScriptExecution()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.ImportExportBaseTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doExportQuery(String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doExportQueryLobsToExtFile(String,String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doExportTable(String,String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doExportTableLobsToExtFile(String,String,String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doImportData(String,String,String,String,String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doImportDataLobsFromExtFile(String,String,String,String,String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doImportTable(String,String,String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBaseTest.doImportTableLobsFromExtFile(String,String,String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.ImportExportBinaryDataTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.loadData(Statement)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.testDerby2925ExportQuery()",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.testDerby2925ExportTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.testImportDataExportQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.testImportDataExportQueryWithFewColumns()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.testImportExportInvalideDelimiters()",1,6,6
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.testImportTableExportTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.testImportWitgInvalidHexStrings()",1,4,4
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportBinaryDataTest.verifyData(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.ImportExportLobTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.loadData(Statement)",1,3,3
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testDerby2955ExportQueryLobs()",1,3,3
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQuery()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryLobsInExtFile()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryWithFewColsLobsInExtFile()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportDataExportQueryWithFewColumns()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportExportInvalideDelimiters()",1,5,5
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportTableExportTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportTableExportTableLobsInExtFile()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportTableExportTableLobsInUnqalifiedExtFile()",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportTableExportWithInvalidLobFileName()",1,3,3
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.testImportWithInvalidHexStrings()",1,4,4
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportLobTest.verifyData(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportProcedureTest.ImportExportProcedureTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportProcedureTest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportProcedureTest.testImportExportProcedureNegative()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportProcedureTest.testImportExportProcedures()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.ImportExportTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.baseSuite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.doExport(Connection,String,String,String,String)",1,1,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.doImport(Connection,String,String,String,String,String,int)",1,1,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.doImportAndExport(Connection,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.doImportAndVerify(Connection,String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.doImportFromFile(Connection,String,String,String,String,String,int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.resetTables()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testDelimiterAndCodeset()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testEarlyEndOfFile()",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testEmptyTable()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testEmptyTableWithDelimitedFormat()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testEmptyTableWithFieldCharDelimiters()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testImportFromNonExistantFile()",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testInvalidEncoding()",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testNullDataFile()",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testSpecialDelimitersAndCodeset()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testSpecialDelimitersAndUTF16()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testWithCodeset()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ImportExportTest.testWithDefaultOptions()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.SysinfoAPITest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.testBuildNumber()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.testGetInfo()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.testMajorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.testMinorVersion()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.testProductName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoAPITest.testVersionString()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoCPCheckTest.SysinfoCPCheckTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoCPCheckTest.checkClientOrServer(String)",5,3,7
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoCPCheckTest.getOutputStream()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoCPCheckTest.setSystemOut(PrintStream)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoCPCheckTest.suite()",2,1,4
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoCPCheckTest.testClassPathChecker()",5,11,15
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.SysinfoLocaleTest(Locale,boolean,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.assertContains(String[],String)",1,3,3
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.createTest(Locale,String,boolean)",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.getName()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.getSysinfoOutput()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.runSysinfo()",1,1,2
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.suite()",2,1,2
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.SysinfoLocaleTest.testSysinfoLocale()",1,1,2
"org.apache.derbyTesting.functionTests.tests.tools.ToolScripts.ToolScripts(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ToolScripts.getSuite(String[])",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.ToolScripts.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.ToolScripts.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools._Suite.suite()",1,2,3
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.columnHoldsObjectName(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.createDBFromDDL(String,String)",4,6,7
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.createTestDatabase(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.deleteDB(String)",2,3,5
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.deleteFile(File)",3,4,6
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.doTest()",1,4,4
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.dumpColumnData(String,String,String,ArrayList)",11,11,12
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.dumpFileToSysOut(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.dumpResultSet(ResultSet,HashMap,Connection)",8,19,22
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.dumpSysCatalogs(String)",2,4,5
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.getDependsData(ResultSet,Connection,HashMap)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.getHiddenDependsData(String,String,Statement,HashMap)",8,10,11
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.go(String,String[])",1,2,3
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.handleDuplicateRow(ArrayList,ArrayList,TreeMap)",1,6,6
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.isIgnorableSchema(String)",3,2,3
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.isSystemGenerated(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.loadIdMappings(Statement,Connection)",1,4,4
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.lookFive(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.lookFour(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.lookOne(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.lookSeven(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.lookSix(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.lookThree(String)",1,2,4
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.lookTwo(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.looksLikeSysGenId(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.looksLikeSysGenName(String)",1,4,4
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.printAsHeader(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.renameDbLookLog(String)",1,3,4
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.runAllTests(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.runDBLook(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.runMessageCheckTest(String)",1,2,4
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.runTest(int,String,String)",2,5,11
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test.writeOut(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.dblook_test_territory.main(String[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.derbyrunjartest.concatenate(String[])",1,3,3
"org.apache.derbyTesting.functionTests.tests.tools.derbyrunjartest.main(String[])",1,5,5
"org.apache.derbyTesting.functionTests.tests.tools.derbyrunjartest.runtool(jvm,String,String[])",2,5,5
"org.apache.derbyTesting.functionTests.tests.tools.sysinfo_api_helper.getPipedWriter()",1,1,1
"org.apache.derbyTesting.functionTests.tests.tools.sysinfo_api_helper.run()",1,2,2
"org.apache.derbyTesting.functionTests.tests.upgradeTests.AdditionalDb.AdditionalDb(String,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.BasicSetup(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.noConnectionAfterHardUpgrade()",2,5,5
"org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testCreateTable()",1,2,2
"org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testDML()",2,5,8
"org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testIndex()",1,2,2
"org.apache.derbyTesting.functionTests.tests.upgradeTests.BasicSetup.testOldVersion()",2,2,2
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1.Changes10_1(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1.suite()",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_1.testProcedureSignature()",2,2,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.Changes10_2(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.changeEncryptionFromEncryptedDatabase()",2,4,7
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.changeEncryptionFromNone()",2,4,7
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.checkSystemSchemasOwner(String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.suite()",1,2,2
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testDatabaseOwnerChange()",2,2,3
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testGrantRevokeStatements()",2,2,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testReusableRecordIdSequenceNumber()",2,6,7
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testSystemRoutinePermissions()",2,2,3
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_2.testTriggerInternalVTI()",2,3,10
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.Changes10_3(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.assertPolicyReloaderDoesNotExist()",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.assertPolicyReloaderExists()",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.checkDataToCase606(int,int)",1,2,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.checkNewHeap(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.suite(int)",1,3,3
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testCompilationSchema()",3,2,3
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testImportExportLobsProcedures()",2,4,5
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testNegValueSupportedLogRecord()",5,3,8
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testNewHeap()",3,8,8
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.testPolicyReloadingProcedure()",2,2,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_3.tryReloading(boolean,String)",1,2,2
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.Changes10_4(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.createTablesForIndexTesting(Statement,String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.prepareTable()",1,4,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.suite(int)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testAlterColumnOfUniqueConstraint()",2,2,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testErrorMessage()",2,2,3
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testIndexes()",2,2,5
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testIndexes(Statement,String,int,boolean,boolean)",5,10,11
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testMetaDataQueryRunInSYScompilationSchema()",3,2,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testRoutineParameters()",2,3,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testSQLRoles()",2,4,7
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testSQLRolesBasic()",2,2,5
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testTableFunctionDeclaration()",2,2,5
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.testUniqueConstraint()",2,2,5
"org.apache.derbyTesting.functionTests.tests.upgradeTests.Changes10_4.verifyError()",1,4,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.PhaseChanger(Test,int,ClassLoader,int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.getThreadLoader()",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.setThreadLoader(ClassLoader)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.setUp()",3,3,6
"org.apache.derbyTesting.functionTests.tests.upgradeTests.PhaseChanger.tearDown()",1,8,9
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange.UpgradeChange(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange.getOldMajor()",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange.getOldMinor()",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange.getPhase()",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange.oldAtLeast(int,int)",3,2,4
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeChange.oldIs(int,int)",1,2,2
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeRun.RunDataBaseMetaDataTest(TestSuite,int)",3,10,11
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeRun.baseSuite(String,int,int[])",2,8,10
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeRun.createClassLoader(int[])",3,6,7
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeRun.getOldJarLocation(int[])",2,2,3
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeRun.getOldJarURLLocation(int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeRun.getTextVersion(int[])",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeRun.handleJavaSE6(int,int[],Test)",3,3,8
"org.apache.derbyTesting.functionTests.tests.upgradeTests.UpgradeRun.suite(int[])",3,6,7
"org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.functionTests.tests.upgradeTests._Suite.suite()",4,9,11
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.canConvertToDecimal(int)",3,1,3
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.getBigDecimalString(CallableStatement,int,int)",3,4,7
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.getBigDecimalString(ResultSet,String,int)",3,4,7
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.getBigDecimalString(ResultSet,int)",3,4,7
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.getObjectString(ResultSet,String,int)",2,5,7
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.getObjectString(ResultSet,int)",2,5,7
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.setBigDecimalString(PreparedStatement,int,String)",2,2,5
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.setObjectString(PreparedStatement,int,String)",2,2,5
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.updateBigDecimalString(ResultSet,String,String)",2,2,5
"org.apache.derbyTesting.functionTests.util.BigDecimalHandler.updateBigDecimalString(ResultSet,int,String)",2,2,5
"org.apache.derbyTesting.functionTests.util.CanonTestCase.CanonTestCase(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.CanonTestCase.compareCanon(String)",3,5,7
"org.apache.derbyTesting.functionTests.util.CanonTestCase.dumpForFail(byte[])",1,1,1
"org.apache.derbyTesting.functionTests.util.CanonTestCase.getOutputStream()",1,1,1
"org.apache.derbyTesting.functionTests.util.CanonTestCase.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.util.DbFile.deleteFile(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DbFile.getResourceAsStream(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DbFile.getResourceURL(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DbFile.mkFileFromResource(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DbFile.mkFileFromResource(String,String,String)",1,2,2
"org.apache.derbyTesting.functionTests.util.DbFile.stringFromFile(InputStream)",1,2,2
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.DerbyJUnitTest()",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.alarm(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.assertColumnEquals(ResultSet,int,Object[])",1,2,2
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.assertColumnEquals(String,ResultSet,int,Object)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.assertRow(ResultSet,Object[])",1,2,2
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.assertScalar(Connection,String,Object)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.close(Connection)",1,3,3
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.close(ResultSet)",1,3,3
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.close(Statement)",1,3,3
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.compareBytes(String,Object,Object)",1,5,5
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.compareDates(String,Object,Object)",1,4,4
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.compareObjects(String,Object,Object)",1,4,4
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.createDB(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.dropFunction(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.dropProcedure(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.dropSchemaObject(Connection,String,String)",1,3,3
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.dropTable(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.execute(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.executeDDL(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.exit(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.faultInDriver(String[])",1,2,2
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.findClientFromProperties()",3,2,3
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getClientSettings()",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getColumn(ResultSet,String,int)",2,2,17
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getColumn(ResultSet,int,Object)",1,11,12
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getConnection()",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getConnection(String[],String,Properties)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.getOutArg(CallableStatement,int,int)",2,2,17
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.initializeForOldHarness(String[])",2,1,2
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.makeDatabaseURL(String[],String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.parseDebug()",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.prepare(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.prepareCall(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.printStackTrace(Throwable)",3,3,3
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.println(String)",1,2,2
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.runUnderOldHarness(String[],Test)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.setClient(String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.setDatabaseName(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.setDebug(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.setParameter(PreparedStatement,int,Object)",2,10,10
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.setParameter(PreparedStatement,int,int,Object)",3,3,17
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.singleQuote(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.truncateTable(Connection,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.usingDB2Client()",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.usingDerbyClient()",1,1,1
"org.apache.derbyTesting.functionTests.util.DerbyJUnitTest.usingEmbeddedClient()",1,1,1
"org.apache.derbyTesting.functionTests.util.ExecProcUtil.execCmdDumpResults(String[],Vector,BufferedOutputStream)",1,4,6
"org.apache.derbyTesting.functionTests.util.FTFileUtil.fileExists(String)",2,1,2
"org.apache.derbyTesting.functionTests.util.FTFileUtil.mkFile(String,int)",1,2,3
"org.apache.derbyTesting.functionTests.util.FTFileUtil.removeDirectory(File)",9,4,9
"org.apache.derbyTesting.functionTests.util.FTFileUtil.removeDirectory(String)",1,1,2
"org.apache.derbyTesting.functionTests.util.FTFileUtil.renameFile(String,String,String)",2,2,2
"org.apache.derbyTesting.functionTests.util.Formatters.format(String)",2,3,4
"org.apache.derbyTesting.functionTests.util.Formatters.padString(String,int)",1,2,2
"org.apache.derbyTesting.functionTests.util.Formatters.repeatChar(String,int)",1,1,2
"org.apache.derbyTesting.functionTests.util.HarnessJavaTest.HarnessJavaTest(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.HarnessJavaTest.decorate(HarnessJavaTest)",1,3,3
"org.apache.derbyTesting.functionTests.util.HarnessJavaTest.runTest()",1,1,1
"org.apache.derbyTesting.functionTests.util.HarnessJavaTest.setSystemOut(PrintStream)",1,1,1
"org.apache.derbyTesting.functionTests.util.IjTestCase.IjTestCase(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.IjTestCase.runTest()",1,4,4
"org.apache.derbyTesting.functionTests.util.IjTestCase.setUp()",1,1,1
"org.apache.derbyTesting.functionTests.util.IjTestCase.tearDown()",1,1,1
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.ShowCommonSQLException(PrintStream,Throwable)",2,10,11
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.isDataConversionException(SQLException)",2,6,7
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.isInvalidMethodReturnException(SQLException)",2,6,7
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.isInvalidParameterException(SQLException)",2,6,7
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.isNullSQLStringException(SQLException)",2,4,5
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.isResultSetClosedException(SQLException)",2,4,5
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.isReturnsInvalidResultSetException(SQLException)",2,4,5
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.isTableDoesNotExistException(SQLException)",2,2,3
"org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil.isValidOnScrollCursorsException(SQLException)",2,4,5
"org.apache.derbyTesting.functionTests.util.JarUtil.unjar(String,String)",1,3,3
"org.apache.derbyTesting.functionTests.util.Jdbc20Test.newToJdbc20Method()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.BigDecimalMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.BooleanMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.ByteMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.CharacterMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.DateMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.DoubleMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.FloatMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.IntegerMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.LongMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.ManyMethods(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.ManyMethodsMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.ShortMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.StringMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.TimeMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.TimestampMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.booleanMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.byteArrayArrayArrayMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.byteMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.charMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.doubleMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.exceptionMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.floatMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.getExtendingInterface()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.getIntArray()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.getNoMethodInterface()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.getObjectArray()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.getRunnable()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.intMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.integerFloatDouble(Integer,Float,Double)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(BigDecimal)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(Boolean)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(Date)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(Double)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(Float)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(Integer)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(Short)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(String)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(Time)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.isNull(Timestamp)",2,1,2
"org.apache.derbyTesting.functionTests.util.ManyMethods.longMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.overOverloadedStaticMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.overloadedStaticMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.packageMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(BigDecimal)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Byte)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Character)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Date)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Double)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Float)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Long)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Short)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Time)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(Timestamp)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(byte)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(byte[][][])",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(char)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(double)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(float)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(long)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.parmType(short)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.privateMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.protectedMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.shortMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticBigDecimalMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticBooleanMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticByteMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticCharacterMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticDateMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticDoubleMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticFloatMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticIntegerMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticLongMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticManyMethods(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticShortMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticStringMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticTimeMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.staticTimestampMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.stringDateTimeTimestamp(String,Date,Time,Timestamp)",1,1,1
"org.apache.derbyTesting.functionTests.util.ManyMethods.subClass()",2,1,2
"org.apache.derbyTesting.functionTests.util.ProcedureTest.BIG_COL_491(int,ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.LOTS_O_COLS_492(ResultSet[])",1,3,3
"org.apache.derbyTesting.functionTests.util.ProcedureTest.alterTable()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.ambigious1(int,String,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.ambigious1(int,String,ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.ambigious2(Integer,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.ambigious2(int,Integer)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.badDynamicParameter(int,ProcedureTest[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.bigTestData(int)",2,2,10
"org.apache.derbyTesting.functionTests.util.ProcedureTest.blobselect(ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.clobselect(ResultSet[],ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.countRows(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.createIndex()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.createTrigger()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.deleteRow(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.dropIndex()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.dropTable()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.dropTrigger()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.executeStatement(Statement,String,String[])",1,5,7
"org.apache.derbyTesting.functionTests.util.ProcedureTest.fivejp(ResultSet[],ResultSet[],ResultSet[],ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.grantSelect()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.inoutparams2(int[],int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.inoutparams3(String[],int)",1,2,5
"org.apache.derbyTesting.functionTests.util.ProcedureTest.inoutparams4(BigDecimal[],String)",1,3,3
"org.apache.derbyTesting.functionTests.util.ProcedureTest.insertInBig(Connection,String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.insertRow(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.insertRow(int,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(BigDecimal,String[])",1,2,2
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(Date,String[])",1,2,2
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(String,String[])",1,2,2
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(Time,String[])",1,2,2
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(Timestamp,String[])",1,2,2
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(double,String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(float,String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(int,String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.literalTest(long,String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.missingDynamicParameter(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.missingDynamicParameter(int,Object)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.multiResult(int,int,ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.noname(int,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.noname2(Timestamp,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.oALLINT(Integer,Integer[],Integer[])",2,3,4
"org.apache.derbyTesting.functionTests.util.ProcedureTest.oBOOLEAN(Boolean,Boolean[],Boolean[])",2,3,4
"org.apache.derbyTesting.functionTests.util.ProcedureTest.outparams1(int[],int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.pBOOLEAN(boolean,boolean[],boolean[])",2,1,3
"org.apache.derbyTesting.functionTests.util.ProcedureTest.pSMALLINT(short,short[],short[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.pTINYINT(byte,byte[],byte[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.parameter1(int,String,String,ResultSet[])",1,3,3
"org.apache.derbyTesting.functionTests.util.ProcedureTest.parameter2(int,BigDecimal,BigDecimal,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.pmap(BigDecimal,BigDecimal[],BigDecimal[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.revokeSelect()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.selectFromSpecificSchema(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.selectRows(String,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.selectRows(int,ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.selectRows(int,int,ResultSet[],ResultSet[])",1,3,4
"org.apache.derbyTesting.functionTests.util.ProcedureTest.sqlControl(String[],String[],String[],String[],String[],String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.sqlControl2(String[],String[],String[],String[],String[],String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.sqlControl3(String[],String[],String[],String[],String[],String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.sqlControl4(int,String[],String[],String[],String[],String[],String[],String[],String[])",1,4,5
"org.apache.derbyTesting.functionTests.util.ProcedureTest.updateRow(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.zeroArg()",1,1,1
"org.apache.derbyTesting.functionTests.util.ProcedureTest.zeroArgDynamicResult(ResultSet[],ResultSet[],ResultSet[],ResultSet[])",1,1,1
"org.apache.derbyTesting.functionTests.util.PropertyUtil.getDatabasePropertyDefault(String)",2,1,2
"org.apache.derbyTesting.functionTests.util.PropertyUtil.setDatabasePropertyDefault(String,Serializable)",2,1,2
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.collapseQuotes(StringBuffer,char)",2,5,6
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.convert(String[])",6,17,23
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.escapeQuotes(StringBuffer)",2,4,5
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.extractRowCount(StringBuffer)",2,2,2
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.extractSQLState(StringBuffer)",1,2,2
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.getLineType(String)",27,26,28
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.getLineType(StringBuffer)",1,1,1
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.getNextIjCommand(StringBuffer)",12,15,23
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.haveNonCommand(String)",1,1,2
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.ignorableLine(int)",1,1,2
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.isDDLNoRowCount(String)",3,2,3
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.isDDLWithRowCount(String)",3,2,3
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.isIjCommand(String)",3,2,3
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.isQueryStatement(String)",3,2,3
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.loadIJScript(String)",1,3,3
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.main(String[])",1,2,2
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.strip(String,String)",3,2,4
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.strip(StringBuffer,String)",3,4,9
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeAssertDDLCount(StringBuffer,StringBuffer,String)",1,2,2
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeAssertResultSet(StringBuffer)",4,13,15
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeAssertSQLState(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeAssertWarning(StringBuffer)",1,1,3
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeFailStatement(StringBuffer,String,StringBuffer,boolean)",1,4,4
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeGetCursor(StringBuffer,String)",1,3,3
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeJDBCCode(StringBuffer,StringBuffer)",1,25,30
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeJUnitEOL()",1,1,1
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeJavaLine(StringBuffer,StringBuffer)",2,8,9
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeMaxLenLine(StringBuffer,String,String)",2,12,12
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writePrologue()",1,1,1
"org.apache.derbyTesting.functionTests.util.SQLToJUnit.writeQuotedLine(StringBuffer,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.ScriptTestCase.ScriptTestCase(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.ScriptTestCase.getArea()",1,1,1
"org.apache.derbyTesting.functionTests.util.ScriptTestCase.getIJConfig(Test)",2,1,2
"org.apache.derbyTesting.functionTests.util.ScriptTestCase.runTest()",1,3,3
"org.apache.derbyTesting.functionTests.util.SecurityCheck.assertSourceSecurity(Object,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.SecurityCheck.checkEmbeddedPublicApi()",1,2,2
"org.apache.derbyTesting.functionTests.util.SecurityCheck.inspectClass(Class,String)",9,10,21
"org.apache.derbyTesting.functionTests.util.SecurityCheck.inspectClass(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.SecurityCheck.isPublicApi(Class)",3,2,3
"org.apache.derbyTesting.functionTests.util.SecurityCheck.report()",1,1,1
"org.apache.derbyTesting.functionTests.util.SecurityCheck.report(boolean)",1,4,4
"org.apache.derbyTesting.functionTests.util.ShortHolder.ShortHolder(short)",1,1,1
"org.apache.derbyTesting.functionTests.util.ShortHolder.getValue()",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(Date,Date[],Date[])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(String,String[],String[])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(Time,Time[],Time[])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(Timestamp,Timestamp[],Timestamp[])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(byte[],byte[][],byte[][])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(double,double[],double[])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(float,float[],float[])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(int,int[],int[])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(long,long[],long[])",1,1,1
"org.apache.derbyTesting.functionTests.util.SimpleProcedureTest.pmap(short,short[],short[])",1,1,1
"org.apache.derbyTesting.functionTests.util.StatParser.getScanCols(String)",6,4,7
"org.apache.derbyTesting.functionTests.util.StaticInitializers.DMLInStaticInitializer.doADMLStatement()",3,5,7
"org.apache.derbyTesting.functionTests.util.StaticInitializers.DMLInStaticInitializer.getANumber()",1,1,1
"org.apache.derbyTesting.functionTests.util.StaticInitializers.InsertInStaticInitializer.doADMLStatement()",3,4,6
"org.apache.derbyTesting.functionTests.util.StaticInitializers.InsertInStaticInitializer.getANumber()",1,1,1
"org.apache.derbyTesting.functionTests.util.SubClass.SubClass(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubClass.overloadedStaticMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.SubClass.parmType(Double)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubClass.parmType(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubClass.staticSubClass(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubInterfaceClass.SubInterfaceClass(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubInterfaceClass.eimethod(Object)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubInterfaceClass.run()",1,1,1
"org.apache.derbyTesting.functionTests.util.SubInterfaceClass.wait(int,long)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubSubClass.SubSubClass(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubSubClass.overloadedStaticMethod()",1,1,1
"org.apache.derbyTesting.functionTests.util.SubSubClass.parmType(Boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.SubSubClass.parmType(Integer)",1,1,1
"org.apache.derbyTesting.functionTests.util.T_Access.getAccessFactory()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_Access.waitForPostCommitToFinish()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_Authorize.verifyAccess(int,boolean)",2,2,5
"org.apache.derbyTesting.functionTests.util.T_Authorize.verifyAccessRO(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.T_Authorize.verifyAccessRW(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.T_Authorize.verifyExecute(Connection,String,int,int[],boolean,int)",4,9,12
"org.apache.derbyTesting.functionTests.util.T_Authorize.verifyResult(Connection,String,int,int[],boolean,String)",6,3,8
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.T_ConsistencyChecker(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.countDependencies()",1,2,2
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.countOpens()",1,1,2
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.deleteFirstHeapRow(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.getContexts()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.getDescriptors()",4,4,4
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.getHeapRowOfNulls()",1,2,2
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.getIndexDescriptor()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.getIndexTemplateRow(RowLocation)",1,3,3
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.insertBadRowLocation(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.nullFirstHeapRow(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.openHeapCC()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.openIndexCC()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.openUnqualifiedHeapScan()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.openUnqualifiedIndexScan()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.reinsertFirstHeapRow(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.runConsistencyChecker()",1,1,1
"org.apache.derbyTesting.functionTests.util.T_ConsistencyChecker.swapColumnsInFirstHeapRow(String,String,int,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestInputStream.TestInputStream(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestInputStream.read()",2,1,2
"org.apache.derbyTesting.functionTests.util.TestPropertyInfo.filter(Properties,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestPropertyInfo.getAllIndexProperties(String,String)",2,1,2
"org.apache.derbyTesting.functionTests.util.TestPropertyInfo.getAllTableProperties(String,String)",2,1,2
"org.apache.derbyTesting.functionTests.util.TestPropertyInfo.getConglomerateProperties(String,String,boolean)",4,4,6
"org.apache.derbyTesting.functionTests.util.TestPropertyInfo.getTableProperty(String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestRoutines.hasSecurityManager()",1,1,2
"org.apache.derbyTesting.functionTests.util.TestRoutines.installRoutines()",1,1,1
"org.apache.derbyTesting.functionTests.util.TestRoutines.installRoutines(Connection)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestRoutines.readFile(String,String)",4,4,6
"org.apache.derbyTesting.functionTests.util.TestRoutines.setSystemProperty(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestRoutines.sleep(long)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.checkForJDBC40Implementation(String)",1,2,3
"org.apache.derbyTesting.functionTests.util.TestUtil.cleanUpTest(Statement,String[])",1,2,3
"org.apache.derbyTesting.functionTests.util.TestUtil.compareURL(String)",7,5,10
"org.apache.derbyTesting.functionTests.util.TestUtil.convertToHexString(byte[])",1,3,3
"org.apache.derbyTesting.functionTests.util.TestUtil.dumpAllStackTracesIfSupported(PrintWriter)",2,5,5
"org.apache.derbyTesting.functionTests.util.TestUtil.dumpSQLExceptions(SQLException)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.dumpSQLExceptions(SQLException,boolean)",1,3,3
"org.apache.derbyTesting.functionTests.util.TestUtil.endHTMLPage()",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.getConnection(String,String)",2,10,15
"org.apache.derbyTesting.functionTests.util.TestUtil.getConnectionPoolDataSource(Properties)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.getDataSource(Properties)",2,2,2
"org.apache.derbyTesting.functionTests.util.TestUtil.getDataSourceConnection(Properties)",1,1,2
"org.apache.derbyTesting.functionTests.util.TestUtil.getDataSourcePrefix()",5,2,5
"org.apache.derbyTesting.functionTests.util.TestUtil.getDataSourceWithReflection(String,Properties)",5,10,11
"org.apache.derbyTesting.functionTests.util.TestUtil.getFramework()",2,5,9
"org.apache.derbyTesting.functionTests.util.TestUtil.getGetterName(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.getHostName()",1,1,2
"org.apache.derbyTesting.functionTests.util.TestUtil.getJDBCMajorVersion(Connection)",1,1,2
"org.apache.derbyTesting.functionTests.util.TestUtil.getJdbcUrlPrefix()",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.getJdbcUrlPrefix(String,int)",5,2,5
"org.apache.derbyTesting.functionTests.util.TestUtil.getNameFromJdbcType(int)",26,2,26
"org.apache.derbyTesting.functionTests.util.TestUtil.getSetterName(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.getSimpleDataSource(Properties)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.getXADataSource(Properties)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.isDerbyNetClientFramework()",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.isEmbeddedFramework()",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.isJCCFramework()",2,2,2
"org.apache.derbyTesting.functionTests.util.TestUtil.isNetFramework()",3,2,3
"org.apache.derbyTesting.functionTests.util.TestUtil.loadDriver()",2,3,6
"org.apache.derbyTesting.functionTests.util.TestUtil.printBoolArrayHTMLTable(String,String,String[],String[],boolean[][],String)",1,6,7
"org.apache.derbyTesting.functionTests.util.TestUtil.shutdownUsingDataSource(String)",1,1,2
"org.apache.derbyTesting.functionTests.util.TestUtil.sqlNameFromJdbc(int)",26,2,26
"org.apache.derbyTesting.functionTests.util.TestUtil.startHTMLPage(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.TestUtil.stringToHexLiteral(String)",1,2,2
"org.apache.derbyTesting.functionTests.util.ThreadDump.getStackDumpString()",1,3,3
"org.apache.derbyTesting.functionTests.util.Triggers.Triggers()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doConnCommit()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doConnCommitInt()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doConnRollback()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doConnStmt(String)",1,2,3
"org.apache.derbyTesting.functionTests.util.Triggers.doConnStmtInt(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doConnStmtIntNoRS(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doConnStmtNoRS(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doConnectionSetIsolation()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doNothing()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.doNothingInt()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.dumpRS(ResultSet)",3,9,9
"org.apache.derbyTesting.functionTests.util.Triggers.getConnection()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.printTriggerChanges()",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.returnLong(Long)",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.returnPrimLong(long)",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.triggerFires(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.triggerFiresMinimal(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.Triggers.zipThroughRs(ResultSet)",2,1,3
"org.apache.derbyTesting.functionTests.util.UniqueRandomSequence.UniqueRandomSequence(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.UniqueRandomSequence.UniqueRandomSequence(int,int,int)",2,1,3
"org.apache.derbyTesting.functionTests.util.UniqueRandomSequence.hasMore()",1,1,1
"org.apache.derbyTesting.functionTests.util.UniqueRandomSequence.nextValue()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.CorruptBaseStorageFactory()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.createTemporaryFile(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.getCanonicalName()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.getSeparator()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.getStorageFactoryVersion()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.getTempDir()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.init(String,String,String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.isFast()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.isReadOnlyDatabase()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.newStorageFile(StorageFile,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.newStorageFile(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.newStorageFile(String,String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.shutdown()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.supportsRandomAccess()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.supportsWriteSync()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptBaseStorageFactory.sync(OutputStream,boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptDiskStorageFactory.getRealStorageFactory()",1,2,3
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.CorruptFile(StorageFile)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.canWrite()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.createNewFile()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.delete()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.deleteAll()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.exists()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getCanonicalPath()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getExclusiveFileLock()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getInputStream()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getName()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getOutputStream()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getOutputStream(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getParentDir()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getPath()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getRandomAccessFile(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getRealFileInstance()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.getURL()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.isDirectory()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.length()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.list()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.mkdir()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.mkdirs()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.releaseExclusiveFileLock()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.renameTo(StorageFile)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptFile.setReadOnly()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.CorruptRandomAccessFile(StorageRandomAccessFile,File)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.close()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.getFilePointer()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.length()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.read(byte[],int,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readBoolean()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readByte()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readChar()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readDouble()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readFloat()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readFully(byte[])",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readFully(byte[],int,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readInt()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readLine()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readLong()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readShort()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readUTF()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readUnsignedByte()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.readUnsignedShort()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.seek(long)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.setLength(long)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.skipBytes(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.sync(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.write(byte[])",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.write(byte[],int,int)",1,2,2
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.write(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeBoolean(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeByte(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeBytes(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeChar(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeChars(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeDouble(double)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeFloat(float)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeInt(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeLong(long)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeShort(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptRandomAccessFile.writeUTF(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.CorruptibleIo()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.corrupt(byte[],int,int)",1,2,4
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.getInstance()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.getLength()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.getOffset()",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.isCorruptibleFile(File)",3,3,4
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.setDataCorruption(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.setLength(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.setLogCorruption(boolean)",1,1,1
"org.apache.derbyTesting.functionTests.util.corruptio.CorruptibleIo.setOffset(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.metadataHelperProcs.getBestRowId(String,String,int,String,ResultSet[])",1,1,2
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.ByteAlphabet(String,char[],String)",1,1,2
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.byteCount()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.charCount()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.cjkSubsetUTF16BE()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.cjkSubsetUTF8()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.getEncoding()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.getName()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.modernLatinLowercase()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.nextByte()",1,1,2
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.nextByteToRead(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.norwegianLowercase()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.reset()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.tamilUTF16BE()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ByteAlphabet.tamilUTF8()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.CharAlphabet(String,char[])",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.charCount()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.cjkSubset()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.getName()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.modernLatinLowercase()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.nextChar()",1,1,2
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.nextCharAsInt()",1,1,2
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.nextCharToRead(int)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.reset()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.CharAlphabet.tamil()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.LoopingAlphabetReader(long)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.LoopingAlphabetReader(long,CharAlphabet)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.LoopingAlphabetReader(long,CharAlphabet,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.LoopingAlphabetReader(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.available()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.close()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.ensureOpen()",2,1,2
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.fillBlanks(char[],int,int)",3,1,3
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.fillBuffer(int)",2,2,4
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.read()",3,1,4
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.read(char[],int,int)",2,4,8
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetReader.reset()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.LoopingAlphabetStream(long)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.LoopingAlphabetStream(long,ByteAlphabet)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.LoopingAlphabetStream(long,ByteAlphabet,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.LoopingAlphabetStream(long,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.available()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.fillBlanks(byte[],int,int)",3,1,3
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.fillBuffer(int)",2,2,4
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.read()",3,1,4
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.read(byte[],int,int)",2,4,8
"org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream.reset()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ReadOnceByteArrayInputStream.ReadOnceByteArrayInputStream(byte[])",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ReadOnceByteArrayInputStream.ReadOnceByteArrayInputStream(byte[],int,int)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ReadOnceByteArrayInputStream.close()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ReadOnceByteArrayInputStream.markSupported()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.ReadOnceByteArrayInputStream.read()",2,1,2
"org.apache.derbyTesting.functionTests.util.streams.ReadOnceByteArrayInputStream.read(byte[],int,int)",2,1,2
"org.apache.derbyTesting.functionTests.util.streams.StringReaderWithLength.StringReaderWithLength(String)",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.StringReaderWithLength.getLength()",1,1,1
"org.apache.derbyTesting.functionTests.util.streams.StringReaderWithLength.markSupported()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.BaseJDBCTestCase(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.addStatement(Statement)",1,1,2
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertCallError(String,String)",1,2,2
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertCheckTable(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertCompileError(String,String)",1,3,3
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertEquals(Blob,Blob)",3,5,8
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertEquals(Clob,Clob)",2,4,6
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertEquals(String,Time,Time)",2,1,3
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertEquivalentDataType(int,int)",6,1,10
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertErrorCode(String,int,SQLException)",1,3,3
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertErrorCode(int,SQLException)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertEscapedTableRowCount(String,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertGetIntError(int,String,ResultSet)",1,2,2
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertNextError(String,ResultSet)",1,2,2
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLExceptionEquals(SQLException,SQLException)",1,6,6
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(String,SQLException)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertSQLState(String,String,SQLException)",4,6,8
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(String,PreparedStatement)",1,2,2
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(String,Statement,String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(String,int,Statement,String)",1,2,2
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertStatementError(String[],Statement,String)",1,3,5
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertTableRowCount(String,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertUpdateCount(PreparedStatement,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.assertUpdateCount(Statement,int,String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.commit()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.createStatement()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.createStatement(int,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.createStatement(int,int,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(Connection,String)",1,2,2
"org.apache.derbyTesting.junit.BaseJDBCTestCase.dropTable(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.fetchAndDiscardAllResults(Statement,boolean)",1,4,4
"org.apache.derbyTesting.junit.BaseJDBCTestCase.getConnection()",3,2,3
"org.apache.derbyTesting.junit.BaseJDBCTestCase.getDatabaseProperty(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.getLastSQLException(SQLException)",1,2,2
"org.apache.derbyTesting.junit.BaseJDBCTestCase.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.openConnection(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.openDefaultConnection()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.openDefaultConnection(String,String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.openUserConnection(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareCall(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareCall(String,int,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareCall(String,int,int,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(String,String[])",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(String,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(String,int,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(String,int,int,int)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.prepareStatement(String,int[])",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.rollback()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.runSQLCommands(String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.runScript(InputStream,String)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.runScript(String,String)",1,3,3
"org.apache.derbyTesting.junit.BaseJDBCTestCase.tearDown()",1,3,3
"org.apache.derbyTesting.junit.BaseJDBCTestCase.usingDerbyNet()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.usingDerbyNetClient()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestCase.usingEmbedded()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestSetup.BaseJDBCTestSetup(Test)",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestSetup.getConnection()",3,2,3
"org.apache.derbyTesting.junit.BaseJDBCTestSetup.getTestConfiguration()",1,1,1
"org.apache.derbyTesting.junit.BaseJDBCTestSetup.println(String)",1,2,2
"org.apache.derbyTesting.junit.BaseJDBCTestSetup.tearDown()",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.BaseTestCase()",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.BaseTestCase(String)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.alarm(String)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.assertEquals(File,File)",1,3,3
"org.apache.derbyTesting.junit.BaseTestCase.assertEquals(InputStream,InputStream)",2,4,6
"org.apache.derbyTesting.junit.BaseTestCase.assertEquals(Reader,Reader)",2,4,6
"org.apache.derbyTesting.junit.BaseTestCase.assertExecJavaCmdAsExpected(String[],String[],int)",2,7,8
"org.apache.derbyTesting.junit.BaseTestCase.assertSecurityManager()",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.assertThrowableEquals(Throwable,Throwable)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.getFailureFolder()",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.getSystemProperty(String)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.getTestConfiguration()",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.getTestResource(String)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.openTestResource(URL)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.printStackTrace(Throwable)",3,3,3
"org.apache.derbyTesting.junit.BaseTestCase.println(String)",1,2,2
"org.apache.derbyTesting.junit.BaseTestCase.removeDirectory(File)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.removeDirectory(String)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.removeSystemProperty(String)",1,1,1
"org.apache.derbyTesting.junit.BaseTestCase.runBare()",4,8,9
"org.apache.derbyTesting.junit.BaseTestCase.setSystemProperty(String,String)",1,1,1
"org.apache.derbyTesting.junit.BaseTestSetup.BaseTestSetup(Test)",1,1,1
"org.apache.derbyTesting.junit.BaseTestSetup.run(TestResult)",1,3,3
"org.apache.derbyTesting.junit.BigDecimalHandler.canConvertToDecimal(int)",3,1,3
"org.apache.derbyTesting.junit.BigDecimalHandler.getBigDecimalString(CallableStatement,int,int)",3,4,7
"org.apache.derbyTesting.junit.BigDecimalHandler.getBigDecimalString(ResultSet,String,int)",3,4,7
"org.apache.derbyTesting.junit.BigDecimalHandler.getBigDecimalString(ResultSet,int)",3,4,7
"org.apache.derbyTesting.junit.BigDecimalHandler.getObjectString(ResultSet,String,int)",2,5,7
"org.apache.derbyTesting.junit.BigDecimalHandler.getObjectString(ResultSet,int)",2,5,7
"org.apache.derbyTesting.junit.BigDecimalHandler.setBigDecimalString(PreparedStatement,int,String)",2,2,5
"org.apache.derbyTesting.junit.BigDecimalHandler.setObjectString(PreparedStatement,int,String)",2,2,5
"org.apache.derbyTesting.junit.BigDecimalHandler.updateBigDecimalString(ResultSet,String,String)",2,2,5
"org.apache.derbyTesting.junit.BigDecimalHandler.updateBigDecimalString(ResultSet,int,String)",2,2,5
"org.apache.derbyTesting.junit.ChangeConfigurationSetup.ChangeConfigurationSetup(Test)",1,1,1
"org.apache.derbyTesting.junit.ChangeConfigurationSetup.setUp()",1,1,1
"org.apache.derbyTesting.junit.ChangeConfigurationSetup.tearDown()",1,1,1
"org.apache.derbyTesting.junit.ChangeSSLSetup.ChangeSSLSetup(Test,String)",1,1,1
"org.apache.derbyTesting.junit.ChangeSSLSetup.getNewConfiguration(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.ChangeUserSetup.ChangeUserSetup(Test,String,String)",1,1,1
"org.apache.derbyTesting.junit.ChangeUserSetup.ChangeUserSetup(Test,String,String,String)",1,1,1
"org.apache.derbyTesting.junit.ChangeUserSetup.getNewConfiguration(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.CleanDatabaseTestSetup(Test)",1,1,1
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.CleanDatabaseTestSetup(Test,boolean,String,int)",1,1,2
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.cleanDatabase(Connection,boolean)",1,2,2
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.clearProperties(Connection)",1,2,2
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.compressObjects(Connection)",1,2,2
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.decorateSQL(Statement)",1,1,1
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.removeObjects(Connection)",7,4,9
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.removeRoles(Connection)",1,2,2
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.setUp()",1,2,2
"org.apache.derbyTesting.junit.CleanDatabaseTestSetup.tearDown()",1,1,1
"org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.openConnection()",2,2,4
"org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.openConnection(String)",2,2,4
"org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.openConnection(String,String)",2,2,3
"org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.openConnection(String,String,String)",2,2,3
"org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.setConfiguration(TestConfiguration)",1,1,2
"org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.shutDatabase()",1,1,1
"org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.shutEngine()",1,1,1
"org.apache.derbyTesting.junit.ConnectionPoolDataSourceConnector.singleUseDS(String,String)",1,1,1
"org.apache.derbyTesting.junit.ConnectorSetup.ConnectorSetup(Test,String)",1,1,1
"org.apache.derbyTesting.junit.ConnectorSetup.getNewConfiguration(TestConfiguration)",1,2,2
"org.apache.derbyTesting.junit.DataSourceConnector.openConnection()",2,2,4
"org.apache.derbyTesting.junit.DataSourceConnector.openConnection(String)",2,2,4
"org.apache.derbyTesting.junit.DataSourceConnector.openConnection(String,String)",2,2,3
"org.apache.derbyTesting.junit.DataSourceConnector.openConnection(String,String,String)",2,2,3
"org.apache.derbyTesting.junit.DataSourceConnector.setConfiguration(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.DataSourceConnector.shutDatabase()",1,1,1
"org.apache.derbyTesting.junit.DataSourceConnector.shutEngine()",1,1,1
"org.apache.derbyTesting.junit.DataSourceConnector.singleUseDS(String,String)",1,1,1
"org.apache.derbyTesting.junit.DatabaseChangeSetup.DatabaseChangeSetup(Test,String,String,boolean)",1,1,1
"org.apache.derbyTesting.junit.DatabaseChangeSetup.getNewConfiguration(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.DatabasePropertyTestSetup(Test,Properties)",1,1,1
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.DatabasePropertyTestSetup(Test,Properties,boolean)",1,1,1
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.builtinAuthentication(Test,String[],String)",1,2,2
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.builtinAuthenticationNoTeardown(Test,String[],String)",1,2,2
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.getNoTeardownInstance(Test,Properties,boolean)",1,1,1
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.setLockTimeouts(Test,int,int)",2,3,4
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.setProperties(Properties)",1,5,6
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.setUp()",1,2,2
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.singleProperty(Test,String,String)",1,1,1
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.singleProperty(Test,String,String,boolean)",1,1,1
"org.apache.derbyTesting.junit.DatabasePropertyTestSetup.tearDown()",2,5,6
"org.apache.derbyTesting.junit.Decorator.Decorator()",1,1,1
"org.apache.derbyTesting.junit.Decorator.attributesDatabase(String,Test)",1,1,1
"org.apache.derbyTesting.junit.Decorator.encryptedDatabase(Test)",1,1,1
"org.apache.derbyTesting.junit.Decorator.encryptedDatabase(Test,String)",1,1,1
"org.apache.derbyTesting.junit.Decorator.getBootPhrase(int)",1,2,3
"org.apache.derbyTesting.junit.Decorator.territoryCollatedDatabase(Test,String)",1,2,2
"org.apache.derbyTesting.junit.Derby.hasClient()",3,2,3
"org.apache.derbyTesting.junit.Derby.hasCorrectJar(String,String)",2,1,2
"org.apache.derbyTesting.junit.Derby.hasEmbedded()",2,1,2
"org.apache.derbyTesting.junit.Derby.hasServer()",2,1,2
"org.apache.derbyTesting.junit.Derby.hasTools()",2,1,2
"org.apache.derbyTesting.junit.DriverManagerConnector.DriverManagerConnector()",1,1,1
"org.apache.derbyTesting.junit.DriverManagerConnector.getConnectionByAttributes(String,String,String)",1,1,1
"org.apache.derbyTesting.junit.DriverManagerConnector.loadJDBCDriver()",1,4,4
"org.apache.derbyTesting.junit.DriverManagerConnector.openConnection()",1,1,1
"org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(String)",1,1,1
"org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(String,String)",1,1,1
"org.apache.derbyTesting.junit.DriverManagerConnector.openConnection(String,String,String)",2,3,5
"org.apache.derbyTesting.junit.DriverManagerConnector.setConfiguration(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.DriverManagerConnector.shutDatabase()",1,1,1
"org.apache.derbyTesting.junit.DriverManagerConnector.shutEngine()",1,1,1
"org.apache.derbyTesting.junit.DropDatabaseSetup.DropDatabaseSetup(Test,String)",1,1,1
"org.apache.derbyTesting.junit.DropDatabaseSetup.removeDatabase()",1,2,2
"org.apache.derbyTesting.junit.DropDatabaseSetup.removeDir(File)",2,4,5
"org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(File)",1,1,1
"org.apache.derbyTesting.junit.DropDatabaseSetup.removeDirectory(String)",1,1,1
"org.apache.derbyTesting.junit.DropDatabaseSetup.tearDown()",2,3,4
"org.apache.derbyTesting.junit.EnvTest.EnvTest(String)",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testClasspathHasXalanAndJAXP()",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testClasspathMeetsXMLReqs()",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testHasClient()",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testHasEmbedded()",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testHasServer()",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testHasTools()",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testJDBC3()",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testJDBC4()",1,1,1
"org.apache.derbyTesting.junit.EnvTest.testJSR169()",1,1,1
"org.apache.derbyTesting.junit.J2EEDataSource.getConnectionPoolDataSource()",1,1,1
"org.apache.derbyTesting.junit.J2EEDataSource.getConnectionPoolDataSource(TestConfiguration,HashMap)",1,2,2
"org.apache.derbyTesting.junit.J2EEDataSource.getXADataSource()",1,1,1
"org.apache.derbyTesting.junit.J2EEDataSource.getXADataSource(TestConfiguration,HashMap)",1,2,2
"org.apache.derbyTesting.junit.J2EEDataSource.setBeanProperty(Object,String,Object)",1,1,1
"org.apache.derbyTesting.junit.JAXPFinder.getJAXPParserLocation()",1,3,4
"org.apache.derbyTesting.junit.JDBC.GeneratedId.equals(Object)",4,4,8
"org.apache.derbyTesting.junit.JDBC.GeneratedId.toString()",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertClosed(ResultSet)",1,2,2
"org.apache.derbyTesting.junit.JDBC.assertColumnNames(ResultSet,String[])",1,2,2
"org.apache.derbyTesting.junit.JDBC.assertColumnTypes(ResultSet,int[])",1,2,2
"org.apache.derbyTesting.junit.JDBC.assertCurrentSchema(Connection,String)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertDrainResults(ResultSet)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertDrainResults(ResultSet,int)",1,5,5
"org.apache.derbyTesting.junit.JDBC.assertDrainResultsHasData(ResultSet)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertEmpty(ResultSet)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertFullResultSet(ResultSet,Object[][],boolean)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertFullResultSet(ResultSet,Object[][],boolean,boolean)",1,5,5
"org.apache.derbyTesting.junit.JDBC.assertFullResultSet(ResultSet,String[][])",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertGeneratedKeyResultSet(String,ResultSet)",1,2,3
"org.apache.derbyTesting.junit.JDBC.assertMetaDataMatch(DatabaseMetaData,ResultSetMetaData)",1,2,2
"org.apache.derbyTesting.junit.JDBC.assertNoMoreResults(Statement)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertNoWarnings(SQLWarning)",2,1,2
"org.apache.derbyTesting.junit.JDBC.assertNullability(ResultSet,boolean[])",1,2,3
"org.apache.derbyTesting.junit.JDBC.assertParameterTypes(PreparedStatement,int[])",1,2,2
"org.apache.derbyTesting.junit.JDBC.assertPartialResultSet(ResultSet,Object[][],BitSet)",1,4,4
"org.apache.derbyTesting.junit.JDBC.assertResultColumnNullable(ResultSetMetaData,int)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(ResultSet,int,Object[],boolean)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertRowInResultSet(ResultSet,int,Object[],boolean,BitSet)",1,19,20
"org.apache.derbyTesting.junit.JDBC.assertSameContents(ResultSet,ResultSet)",2,4,8
"org.apache.derbyTesting.junit.JDBC.assertSingleValueResultSet(ResultSet,String)",1,1,1
"org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(ResultSet,Object[][],boolean)",2,11,11
"org.apache.derbyTesting.junit.JDBC.assertUnorderedResultSet(ResultSet,String[][])",1,1,1
"org.apache.derbyTesting.junit.JDBC.bytesToString(byte[])",2,2,3
"org.apache.derbyTesting.junit.JDBC.cleanup(Connection)",3,3,6
"org.apache.derbyTesting.junit.JDBC.dropSchema(DatabaseMetaData,String)",5,4,6
"org.apache.derbyTesting.junit.JDBC.dropUsingDMD(Statement,ResultSet,String,String,String)",2,16,19
"org.apache.derbyTesting.junit.JDBC.escape(String)",1,3,3
"org.apache.derbyTesting.junit.JDBC.escape(String,String)",1,1,1
"org.apache.derbyTesting.junit.JDBC.haveClass(String)",1,1,2
"org.apache.derbyTesting.junit.JDBC.sqlNameFromJdbc(int)",26,2,26
"org.apache.derbyTesting.junit.JDBC.vmSupportsJDBC2()",1,1,1
"org.apache.derbyTesting.junit.JDBC.vmSupportsJDBC3()",1,1,2
"org.apache.derbyTesting.junit.JDBC.vmSupportsJDBC4()",1,1,2
"org.apache.derbyTesting.junit.JDBC.vmSupportsJSR169()",1,1,2
"org.apache.derbyTesting.junit.JDBCClient.JDBCClient(String,String,String,String,String,String)",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.getConnectionPoolDataSourceClassName()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.getDataSourceClassName()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.getDefaultEmbedded()",4,1,4
"org.apache.derbyTesting.junit.JDBCClient.getJDBCDriverName()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.getName()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.getUrlBase()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.getXADataSourceClassName()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.isDB2Client()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.isDerbyNetClient()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.isEmbedded()",1,1,1
"org.apache.derbyTesting.junit.JDBCClient.toString()",1,1,1
"org.apache.derbyTesting.junit.JDBCClientSetup.JDBCClientSetup(Test,JDBCClient)",1,1,1
"org.apache.derbyTesting.junit.JDBCClientSetup.getNewConfiguration(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.JDBCDataSource.clearStringBeanProperty(Object,String)",1,2,2
"org.apache.derbyTesting.junit.JDBCDataSource.getBeanProperty(Object,String)",1,1,1
"org.apache.derbyTesting.junit.JDBCDataSource.getDataSource()",1,1,1
"org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(String)",1,1,1
"org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(TestConfiguration,HashMap)",1,1,1
"org.apache.derbyTesting.junit.JDBCDataSource.getDataSource(TestConfiguration,HashMap,String)",1,2,2
"org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceLogical(String)",1,1,1
"org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceObject(String,HashMap)",1,5,6
"org.apache.derbyTesting.junit.JDBCDataSource.getDataSourceProperties(TestConfiguration)",1,2,2
"org.apache.derbyTesting.junit.JDBCDataSource.getGetterName(String)",1,1,1
"org.apache.derbyTesting.junit.JDBCDataSource.getSetterName(String)",1,1,1
"org.apache.derbyTesting.junit.JDBCDataSource.setBeanProperty(Object,String,Object)",1,4,5
"org.apache.derbyTesting.junit.JDBCDataSource.shutdownDatabase(DataSource)",1,2,2
"org.apache.derbyTesting.junit.JDBCPerfTestCase.JDBCPerfTestCase(String)",1,1,1
"org.apache.derbyTesting.junit.JDBCPerfTestCase.JDBCPerfTestCase(String,int,int)",1,1,1
"org.apache.derbyTesting.junit.JDBCPerfTestCase.runBare()",2,2,7
"org.apache.derbyTesting.junit.JDBCPerfTestCase.runTest()",1,2,2
"org.apache.derbyTesting.junit.NetworkServerTestSetup.NetworkServerTestSetup(Test,String[],String[],boolean)",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.NetworkServerTestSetup(Test,boolean)",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.NetworkServerTestSetup(Test,boolean,boolean)",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.getDefaultStartupArgs(boolean)",1,3,3
"org.apache.derbyTesting.junit.NetworkServerTestSetup.getNetworkServerControl()",2,3,3
"org.apache.derbyTesting.junit.NetworkServerTestSetup.getNetworkServerControl(int)",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.getNetworkServerControlDefault()",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.getServerProcess()",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.isDRDAerror(Throwable)",2,1,2
"org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerStart(NetworkServerControl)",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.pingForServerUp(NetworkServerControl,Process,boolean)",8,8,11
"org.apache.derbyTesting.junit.NetworkServerTestSetup.setDefaultWaitTime()",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.setUp()",1,7,7
"org.apache.derbyTesting.junit.NetworkServerTestSetup.setWaitTime(long)",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.startSeparateProcess()",6,10,13
"org.apache.derbyTesting.junit.NetworkServerTestSetup.startWithAPI()",1,2,2
"org.apache.derbyTesting.junit.NetworkServerTestSetup.startWithCommand()",1,1,1
"org.apache.derbyTesting.junit.NetworkServerTestSetup.tearDown()",4,5,9
"org.apache.derbyTesting.junit.NetworkServerTestSetup.vetPing(Throwable)",2,1,2
"org.apache.derbyTesting.junit.NetworkServerTestSetup.waitForServerStart(NetworkServerControl)",1,2,2
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.Qualifier.Qualifier(String,boolean)",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.Qualifier.equals(Object)",2,3,3
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.Qualifier.hashCode()",2,2,2
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.Qualifier.toString()",1,1,2
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.RuntimeStatisticsParser(String)",1,4,9
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.eliminatedDuplicates()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.findQualifiers()",5,4,5
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.findString(String,int)",3,3,3
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.getIsolationLevel()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.hasGreaterThanOrEqualQualifier()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.hasLessThanQualifier()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.isScrollInsensitive()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.rowsQualifiedEquals(int)",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedDistinctScan()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedDistinctScan(String)",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedHashJoin()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedIndexRowToBaseRow()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedIndexRowToBaseRow(String)",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedIndexScan()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedIndexScan(String)",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedTableScan()",1,1,1
"org.apache.derbyTesting.junit.RuntimeStatisticsParser.usedTableScan(String)",1,1,1
"org.apache.derbyTesting.junit.SQLUtilities.createAndPopulateAllDataTypesTable(Statement)",1,4,5
"org.apache.derbyTesting.junit.SQLUtilities.executeAndGetRuntimeStatistics(Connection,String)",1,2,2
"org.apache.derbyTesting.junit.SQLUtilities.getRuntimeStatisticsParser(Statement)",1,1,1
"org.apache.derbyTesting.junit.SecurityManagerSetup.SecurityManagerSetup(Test,String)",1,1,1
"org.apache.derbyTesting.junit.SecurityManagerSetup.determineClasspath()",3,10,11
"org.apache.derbyTesting.junit.SecurityManagerSetup.getDefaultPolicy()",1,1,1
"org.apache.derbyTesting.junit.SecurityManagerSetup.getPolicyFilePropertiesForOldHarness()",1,1,1
"org.apache.derbyTesting.junit.SecurityManagerSetup.getURL(Class)",2,1,2
"org.apache.derbyTesting.junit.SecurityManagerSetup.getURL(String)",1,1,2
"org.apache.derbyTesting.junit.SecurityManagerSetup.installSecurityManager()",1,1,1
"org.apache.derbyTesting.junit.SecurityManagerSetup.installSecurityManager(String)",5,3,8
"org.apache.derbyTesting.junit.SecurityManagerSetup.noSecurityManager()",1,1,1
"org.apache.derbyTesting.junit.SecurityManagerSetup.noSecurityManager(Test)",2,2,2
"org.apache.derbyTesting.junit.SecurityManagerSetup.setSecurityPolicy(Properties,String)",2,5,5
"org.apache.derbyTesting.junit.SecurityManagerSetup.setUp()",1,1,1
"org.apache.derbyTesting.junit.SecurityManagerSetup.stripJar(URL)",1,1,1
"org.apache.derbyTesting.junit.SecurityManagerSetup.tearDown()",1,3,3
"org.apache.derbyTesting.junit.SecurityManagerSetup.uninstallSecurityManager()",1,1,1
"org.apache.derbyTesting.junit.ServerSetup.ServerSetup(Test,String,int)",1,1,1
"org.apache.derbyTesting.junit.ServerSetup.getNewConfiguration(TestConfiguration)",1,1,2
"org.apache.derbyTesting.junit.ServerSetup.setJDBCClient(JDBCClient)",1,1,1
"org.apache.derbyTesting.junit.SpawnedProcess.SpawnedProcess(Process,String)",1,1,1
"org.apache.derbyTesting.junit.SpawnedProcess.complete(boolean)",1,5,6
"org.apache.derbyTesting.junit.SpawnedProcess.getFailMessage(String)",1,4,4
"org.apache.derbyTesting.junit.SpawnedProcess.getFullServerOutput()",1,1,1
"org.apache.derbyTesting.junit.SpawnedProcess.getNextServerOutput()",1,1,1
"org.apache.derbyTesting.junit.SpawnedProcess.getProcess()",1,1,1
"org.apache.derbyTesting.junit.SpawnedProcess.streamSaver(InputStream,String)",1,3,3
"org.apache.derbyTesting.junit.SupportFilesSetup.SupportFilesSetup(Test)",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.SupportFilesSetup(Test,String[])",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.SupportFilesSetup(Test,String[],String[])",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.SupportFilesSetup(Test,String[],String[],String[],String[])",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.copyFiles(String,String[],String[])",5,4,6
"org.apache.derbyTesting.junit.SupportFilesSetup.deleteFile(String)",2,1,2
"org.apache.derbyTesting.junit.SupportFilesSetup.getFile(String,String)",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.getReadOnly(String)",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.getReadOnlyURL(String)",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.getReadWrite(String)",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.getReadWriteURL(String)",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.getURL(File)",1,2,2
"org.apache.derbyTesting.junit.SupportFilesSetup.getWriteOnly(String)",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.getWriteOnlyURL(String)",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.privCopyFiles(String,String[],String[])",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.setUp()",1,1,1
"org.apache.derbyTesting.junit.SupportFilesSetup.tearDown()",1,1,1
"org.apache.derbyTesting.junit.SystemPropertyTestSetup.SystemPropertyTestSetup(Test,Properties)",1,1,1
"org.apache.derbyTesting.junit.SystemPropertyTestSetup.setProperties(Properties)",1,5,6
"org.apache.derbyTesting.junit.SystemPropertyTestSetup.setUp()",1,1,1
"org.apache.derbyTesting.junit.SystemPropertyTestSetup.tearDown()",1,3,3
"org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration(Properties)",3,5,7
"org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration(TestConfiguration,JDBCClient,String,int)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration(TestConfiguration,String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration(TestConfiguration,String,String,String)",1,1,2
"org.apache.derbyTesting.junit.TestConfiguration.TestConfiguration(TestConfiguration,String,String,boolean)",1,1,2
"org.apache.derbyTesting.junit.TestConfiguration.additionalDatabaseDecorator(Test,String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.additionalDatabaseDecoratorNoShutdown(Test,String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.changeSSLDecorator(Test,String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.changeUserDecorator(Test,String,String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.clientExistingServerSuite(Class)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.clientExistingServerSuite(Class,String,int)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.clientServerDecorator(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.clientServerDecoratorWithAlternativePort(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.clientServerSuite(Class)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.clientServerSuiteWithAlternativePort(Class)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.connectionCPDecorator(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.connectionDSDecorator(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.connectionXADecorator(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.createJDBCUrlWithDatabaseName(String)",2,3,3
"org.apache.derbyTesting.junit.TestConfiguration.defaultExistingServerDecorator(Test)",2,2,3
"org.apache.derbyTesting.junit.TestConfiguration.defaultExistingServerSuite(Class)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.defaultExistingServerSuite(Class,boolean)",1,2,2
"org.apache.derbyTesting.junit.TestConfiguration.defaultSecurityManagerSetup()",3,2,3
"org.apache.derbyTesting.junit.TestConfiguration.defaultServerDecorator(Test)",2,3,4
"org.apache.derbyTesting.junit.TestConfiguration.defaultServerDecoratorWithAlternativePort(Test)",2,3,4
"org.apache.derbyTesting.junit.TestConfiguration.defaultSuite(Class)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.defaultSuite(Class,boolean)",1,2,2
"org.apache.derbyTesting.junit.TestConfiguration.doTrace()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.embeddedSuite(Class)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.existingServerDecorator(Test,String,int)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.existingServerSuite(Class,boolean,String,int)",1,2,2
"org.apache.derbyTesting.junit.TestConfiguration.forceJDBC3Embedded(Test)",1,1,2
"org.apache.derbyTesting.junit.TestConfiguration.forceJDBC3NetClient(Test)",1,3,3
"org.apache.derbyTesting.junit.TestConfiguration.forceJDBC3Suite(Class)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.generateUniqueDatabaseName()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getAlternativePort()",1,2,2
"org.apache.derbyTesting.junit.TestConfiguration.getCurrent()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getDefaultDatabaseName()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getFailureFolder(TestCase)",1,2,3
"org.apache.derbyTesting.junit.TestConfiguration.getHostName()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getJDBCClient()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getJDBCUrl()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getJDBCUrl(String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getJmxPort()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getPassword(String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getPassword(String,String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getPhysicalDatabaseName(String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getPort()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getSsl()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getSystemProperties()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getUserName()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.getUserPassword()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.initConnector(Connector)",1,5,5
"org.apache.derbyTesting.junit.TestConfiguration.isVerbose()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.loadingFromJars()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.openConnection(String)",2,2,2
"org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.openDefaultConnection(String,String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.runningInDerbyHarness()",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.setCurrent(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.setTrace(boolean)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.setVerbosity(boolean)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.shutdownDatabase()",1,2,2
"org.apache.derbyTesting.junit.TestConfiguration.shutdownEngine()",1,2,2
"org.apache.derbyTesting.junit.TestConfiguration.singleUseDatabaseDecorator(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.singleUseDatabaseDecoratorNoShutdown(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.sqlAuthorizationDecorator(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.sqlAuthorizationDecorator(Test,String[],String)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.sqlAuthorizationDecoratorSingleUse(Test)",1,1,1
"org.apache.derbyTesting.junit.TestConfiguration.startNetworkServer()",2,4,7
"org.apache.derbyTesting.junit.TestConfiguration.stopNetworkServer()",1,3,3
"org.apache.derbyTesting.junit.TestConfiguration.suiteName(Class)",1,2,2
"org.apache.derbyTesting.junit.Utilities.Utilities()",1,1,1
"org.apache.derbyTesting.junit.Utilities.convertToHexString(byte[])",1,3,3
"org.apache.derbyTesting.junit.Utilities.execJavaCmd(String[])",2,2,3
"org.apache.derbyTesting.junit.Utilities.getSysinfoFromServer()",1,1,1
"org.apache.derbyTesting.junit.Utilities.getSysinfoLocally()",1,1,1
"org.apache.derbyTesting.junit.Utilities.repeatChar(String,int)",1,1,2
"org.apache.derbyTesting.junit.Utilities.showResultSet(ResultSet)",1,6,6
"org.apache.derbyTesting.junit.Utilities.stringToHexLiteral(String)",1,2,2
"org.apache.derbyTesting.junit.XADataSourceConnector.openConnection()",2,2,4
"org.apache.derbyTesting.junit.XADataSourceConnector.openConnection(String)",2,2,4
"org.apache.derbyTesting.junit.XADataSourceConnector.openConnection(String,String)",2,2,3
"org.apache.derbyTesting.junit.XADataSourceConnector.openConnection(String,String,String)",2,2,3
"org.apache.derbyTesting.junit.XADataSourceConnector.setConfiguration(TestConfiguration)",1,1,1
"org.apache.derbyTesting.junit.XADataSourceConnector.shutDatabase()",1,1,1
"org.apache.derbyTesting.junit.XADataSourceConnector.shutEngine()",1,1,1
"org.apache.derbyTesting.junit.XADataSourceConnector.singleUseDS(String,String)",1,1,1
"org.apache.derbyTesting.junit.XATestUtil.checkXATransactionView(Connection,String[][])",1,2,2
"org.apache.derbyTesting.junit.XATestUtil.createXATransactionView(Statement)",1,1,1
"org.apache.derbyTesting.junit.XATestUtil.dumpXAException(String,XAException)",1,1,1
"org.apache.derbyTesting.junit.XATestUtil.errorCode(XAException)",2,2,25
"org.apache.derbyTesting.junit.XATestUtil.getXid(int,int,int)",1,1,1
"org.apache.derbyTesting.junit.XML.checkXalanVersion()",8,6,10
"org.apache.derbyTesting.junit.XML.classpathHasXalanAndJAXP()",1,1,2
"org.apache.derbyTesting.junit.XML.classpathMeetsXMLReqs()",1,1,2
"org.apache.derbyTesting.junit.XML.getJAXPParserLocation()",2,1,2
"org.apache.derbyTesting.junit.XML.insertDocWithDTD(Connection,String,String,String,String,int)",1,4,4
"org.apache.derbyTesting.junit.XML.insertFile(Connection,String,String,String,int)",1,2,3
"org.apache.derbyTesting.junit.utilXid.getBranchQualifier()",1,1,1
"org.apache.derbyTesting.junit.utilXid.getFormatId()",1,1,1
"org.apache.derbyTesting.junit.utilXid.getGlobalTransactionId()",1,1,1
"org.apache.derbyTesting.junit.utilXid.utilXid(int,int,int)",1,1,3
"org.apache.derbyTesting.perf.basic._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.perf.basic._Suite.suite()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100IdxTestSetup.BaseLoad100IdxTestSetup(Test)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100IdxTestSetup.BaseLoad100IdxTestSetup(Test,String)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100IdxTestSetup.BaseLoad100IdxTestSetup(Test,int)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100IdxTestSetup.BaseLoad100IdxTestSetup(Test,int,String)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100IdxTestSetup.decorateSQL(Statement)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup.BaseLoad100TestSetup(Test)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup.BaseLoad100TestSetup(Test,String)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup.BaseLoad100TestSetup(Test,int)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup.BaseLoad100TestSetup(Test,int,String)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup.decorateSQL(Statement)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup.loadData(PreparedStatement)",1,4,4
"org.apache.derbyTesting.perf.basic.jdbc.BaseLoad100TestSetup.setUp()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CountTest.Count100()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CountTest.CountTest(String,int,int)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CountTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CountTest.setUp()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CountTest.suite()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CountTest.tearDown()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CoveredIdxScan.CoveredIdxScan(String,int,int)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CoveredIdxScan.ScanCoveredIdxInt()",1,2,2
"org.apache.derbyTesting.perf.basic.jdbc.CoveredIdxScan.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CoveredIdxScan.setUp()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CoveredIdxScan.suite()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.CoveredIdxScan.tearDown()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.HeapScan.HeapScan(String,int,int)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.HeapScan.Scan100()",1,1,2
"org.apache.derbyTesting.perf.basic.jdbc.HeapScan.Scan100GetData()",1,2,2
"org.apache.derbyTesting.perf.basic.jdbc.HeapScan.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.HeapScan.setUp()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.HeapScan.suite()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.HeapScan.tearDown()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.SortTest.SortDesc100()",1,1,2
"org.apache.derbyTesting.perf.basic.jdbc.SortTest.SortDesc100GetData()",1,2,2
"org.apache.derbyTesting.perf.basic.jdbc.SortTest.SortTest(String,int,int)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.SortTest.initializeConnection(Connection)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.SortTest.setUp()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.SortTest.suite()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.SortTest.tearDown()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.ValuesTest.ValuesTest(String)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.ValuesTest.ValuesTest(String,int,int)",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.ValuesTest.fetchByColumnName()",1,2,2
"org.apache.derbyTesting.perf.basic.jdbc.ValuesTest.fetchByColumnNumber()",1,2,2
"org.apache.derbyTesting.perf.basic.jdbc.ValuesTest.setUp()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.ValuesTest.suite()",1,1,1
"org.apache.derbyTesting.perf.basic.jdbc.ValuesTest.tearDown()",1,1,1
"org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator.ClientThread.ClientThread(Client)",1,1,1
"org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator.ClientThread.run()",1,3,4
"org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator.init(Client[])",1,1,2
"org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator.printReport(PrintStream)",1,1,2
"org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator.startSteadyState()",1,1,1
"org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator.startWarmup()",1,2,2
"org.apache.derbyTesting.perf.clients.BackToBackLoadGenerator.stop()",1,3,3
"org.apache.derbyTesting.perf.clients.IndexJoinClient.doWork()",1,2,2
"org.apache.derbyTesting.perf.clients.IndexJoinClient.init(Connection)",1,1,1
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.ClientThread.ClientThread(Client)",1,1,1
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.ClientThread.run()",1,2,2
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.ClientThread.runClient()",4,3,7
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.ClientThread.wakeup()",1,1,1
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.PoissonLoadGenerator(double)",1,1,1
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.init(Client[])",1,1,2
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.printReport(PrintStream)",1,2,2
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.startSteadyState()",1,1,1
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.startWarmup()",1,2,2
"org.apache.derbyTesting.perf.clients.PoissonLoadGenerator.stop()",1,3,3
"org.apache.derbyTesting.perf.clients.Runner.getDBFiller()",5,7,8
"org.apache.derbyTesting.perf.clients.Runner.getLoadGenerator()",3,2,3
"org.apache.derbyTesting.perf.clients.Runner.getTextType()",3,2,5
"org.apache.derbyTesting.perf.clients.Runner.main(String[])",1,4,4
"org.apache.derbyTesting.perf.clients.Runner.newClient()",8,7,8
"org.apache.derbyTesting.perf.clients.Runner.parseArgs(String[])",15,14,15
"org.apache.derbyTesting.perf.clients.Runner.printUsage(PrintStream)",1,1,1
"org.apache.derbyTesting.perf.clients.Runner.shutdownDatabase()",1,4,4
"org.apache.derbyTesting.perf.clients.SingleRecordFiller.SingleRecordFiller(int,int)",1,1,1
"org.apache.derbyTesting.perf.clients.SingleRecordFiller.SingleRecordFiller(int,int,int,boolean,boolean)",2,2,5
"org.apache.derbyTesting.perf.clients.SingleRecordFiller.fill(Connection)",1,10,16
"org.apache.derbyTesting.perf.clients.SingleRecordFiller.getTableName(int,int,int,boolean,boolean)",4,1,6
"org.apache.derbyTesting.perf.clients.SingleRecordFiller.randomBytes(int)",1,1,1
"org.apache.derbyTesting.perf.clients.SingleRecordFiller.randomString(int)",1,1,1
"org.apache.derbyTesting.perf.clients.SingleRecordSelectClient.SingleRecordSelectClient(int,int)",1,1,1
"org.apache.derbyTesting.perf.clients.SingleRecordSelectClient.SingleRecordSelectClient(int,int,int,boolean,boolean)",2,1,3
"org.apache.derbyTesting.perf.clients.SingleRecordSelectClient.doWork()",1,1,1
"org.apache.derbyTesting.perf.clients.SingleRecordSelectClient.fetchTextColumn(ResultSet,int)",4,4,4
"org.apache.derbyTesting.perf.clients.SingleRecordSelectClient.init(Connection)",1,2,4
"org.apache.derbyTesting.perf.clients.SingleRecordUpdateClient.SingleRecordUpdateClient(int,int)",1,1,1
"org.apache.derbyTesting.perf.clients.SingleRecordUpdateClient.SingleRecordUpdateClient(int,int,int,boolean,boolean)",2,1,3
"org.apache.derbyTesting.perf.clients.SingleRecordUpdateClient.doWork()",4,4,4
"org.apache.derbyTesting.perf.clients.SingleRecordUpdateClient.init(Connection)",1,2,4
"org.apache.derbyTesting.perf.clients.WisconsinFiller.dropTable(Connection,String)",1,2,2
"org.apache.derbyTesting.perf.clients.WisconsinFiller.fill(Connection)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.MailJdbc.main(String[])",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Backup.Backup(String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Backup.DoBackup()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Backup.DoCompress()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Backup.doWork()",1,2,2
"org.apache.derbyTesting.system.mailjdbc.tasks.Backup.isRunning()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Backup.run()",1,4,4
"org.apache.derbyTesting.system.mailjdbc.tasks.Browse.Browse(String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Browse.deleteMailByUser(Connection,String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Browse.moveToFolders(Connection,String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Browse.readInbox(Connection,String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Browse.run()",1,4,4
"org.apache.derbyTesting.system.mailjdbc.tasks.Purge.DoDbSizeCheck()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Purge.Purge(String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Purge.purgeFromInbox(Connection)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Purge.run()",1,3,3
"org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.Refresh(String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.deleteMailByRefresh(Connection,String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.doWork()",1,3,3
"org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.grantRevoke(Connection,String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.insertMail(Connection,String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.isRunning()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.tasks.Refresh.run()",1,4,4
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.Backup(Connection,String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.SQLExceptionPrint(SQLException)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.checkDbSize(Connection,String)",1,6,6
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.compressTable(Connection,String,String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.databaseSize(String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.decrement(String,int)",8,10,11
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.deleteMailByExp(Connection,String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.deleteMailByThread(Connection,String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.deleteMailByUser(Connection,String)",1,6,6
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.errorPrint(Throwable)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.firstChar()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.getConnection(String,String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.grantRevoke(Connection,String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.increment(String,int)",8,8,9
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.insertMail(Connection,String)",3,9,11
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.jdbcLoad(String)",1,3,3
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.lastChar()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.moveToFolders(Connection,String)",1,4,4
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.nextChar(char)",3,1,5
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.previousChar(char)",3,1,5
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.readMail(Connection,String)",1,9,9
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.setSystemProperty(String,String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.DbTasks.totals()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.utils.LogFile.LogFile(String)",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.LogFile.closeLog()",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.LogFile.logMsg(String)",1,1,1
"org.apache.derbyTesting.system.mailjdbc.utils.PerfTime.readableTime(long)",1,6,7
"org.apache.derbyTesting.system.mailjdbc.utils.ThreadUtils.getInstance()",1,1,1
"org.apache.derbyTesting.system.mailjdbc.utils.ThreadUtils.getThread(String)",2,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.ThreadUtils.isThreadRunning(String)",2,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.ThreadUtils.run()",1,2,2
"org.apache.derbyTesting.system.mailjdbc.utils.ThreadUtils.startThreads()",1,1,1
"org.apache.derbyTesting.system.nstest.NsTest.NsTest(int,int)",1,3,5
"org.apache.derbyTesting.system.nstest.NsTest.addStats(int,int)",2,2,10
"org.apache.derbyTesting.system.nstest.NsTest.getDriverURL()",2,1,2
"org.apache.derbyTesting.system.nstest.NsTest.main(String[])",5,25,26
"org.apache.derbyTesting.system.nstest.NsTest.printException(String,Exception)",1,8,8
"org.apache.derbyTesting.system.nstest.NsTest.printUsage()",1,1,1
"org.apache.derbyTesting.system.nstest.NsTest.run()",6,7,7
"org.apache.derbyTesting.system.nstest.NsTest.startNetworkServer()",1,2,2
"org.apache.derbyTesting.system.nstest.init.DbSetup.doIt(Connection)",2,6,6
"org.apache.derbyTesting.system.nstest.init.DbSetup.printException(String,Exception)",1,7,7
"org.apache.derbyTesting.system.nstest.init.Initializer.Initializer(String)",1,1,1
"org.apache.derbyTesting.system.nstest.init.Initializer.printException(String,Exception)",1,7,7
"org.apache.derbyTesting.system.nstest.init.Initializer.startInserts()",2,10,10
"org.apache.derbyTesting.system.nstest.init.NWServerThread.NWServerThread(String,int)",1,3,5
"org.apache.derbyTesting.system.nstest.init.NWServerThread.run()",1,2,2
"org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester.BackupRestoreReEncryptTester(String)",1,1,1
"org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester.doBackup()",1,2,2
"org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester.doConsistCheck(String,String)",1,2,2
"org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester.doRestoreandReEncrypt()",2,5,5
"org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester.log(String)",1,1,1
"org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester.shutDownDB(String,String)",2,4,4
"org.apache.derbyTesting.system.nstest.tester.BackupRestoreReEncryptTester.startTesting()",3,6,6
"org.apache.derbyTesting.system.nstest.tester.Tester1.Tester1(String)",1,1,1
"org.apache.derbyTesting.system.nstest.tester.Tester1.startTesting()",3,8,9
"org.apache.derbyTesting.system.nstest.tester.Tester2.Tester2(String)",1,1,1
"org.apache.derbyTesting.system.nstest.tester.Tester2.startTesting()",4,9,10
"org.apache.derbyTesting.system.nstest.tester.Tester3.Tester3(String)",1,1,1
"org.apache.derbyTesting.system.nstest.tester.Tester3.startTesting()",3,4,4
"org.apache.derbyTesting.system.nstest.tester.TesterObject.TesterObject(String)",1,1,1
"org.apache.derbyTesting.system.nstest.tester.TesterObject.closeConnection()",1,2,2
"org.apache.derbyTesting.system.nstest.tester.TesterObject.doIUDOperation()",2,8,10
"org.apache.derbyTesting.system.nstest.tester.TesterObject.doSelectOperation(int)",1,6,7
"org.apache.derbyTesting.system.nstest.tester.TesterObject.getConnection()",1,3,4
"org.apache.derbyTesting.system.nstest.tester.TesterObject.getThread_id()",1,1,1
"org.apache.derbyTesting.system.nstest.tester.TesterObject.getTimestamp()",1,1,1
"org.apache.derbyTesting.system.nstest.tester.TesterObject.printException(String,Exception)",1,7,7
"org.apache.derbyTesting.system.nstest.tester.TesterObject.setIsolationLevel(int)",1,2,2
"org.apache.derbyTesting.system.nstest.tester.TesterObject.startTesting()",1,1,1
"org.apache.derbyTesting.system.nstest.utils.DbUtil.DbUtil(String)",1,1,1
"org.apache.derbyTesting.system.nstest.utils.DbUtil.add_one_row(Connection,String)",2,7,8
"org.apache.derbyTesting.system.nstest.utils.DbUtil.delete_one_row(Connection,String)",2,8,8
"org.apache.derbyTesting.system.nstest.utils.DbUtil.getThreadName()",1,1,1
"org.apache.derbyTesting.system.nstest.utils.DbUtil.pick_one(Connection,String)",1,8,8
"org.apache.derbyTesting.system.nstest.utils.DbUtil.printException(String,Exception)",1,7,7
"org.apache.derbyTesting.system.nstest.utils.DbUtil.update_one_row(Connection,String)",3,10,23
"org.apache.derbyTesting.system.nstest.utils.MemCheck.MemCheck()",1,1,1
"org.apache.derbyTesting.system.nstest.utils.MemCheck.MemCheck(int)",1,1,1
"org.apache.derbyTesting.system.nstest.utils.MemCheck.main(String[])",1,1,1
"org.apache.derbyTesting.system.nstest.utils.MemCheck.run()",1,3,3
"org.apache.derbyTesting.system.nstest.utils.MemCheck.showmem()",1,1,1
"org.apache.derbyTesting.system.oe.client.MultiThreadSubmitter.multiRun(Submitter[],Object[],int)",1,5,6
"org.apache.derbyTesting.system.oe.client.MultiThreadSubmitter.newThread(int,Submitter,Object,int)",1,2,2
"org.apache.derbyTesting.system.oe.client.Submitter.Submitter(Display,Operations,OERandom,short)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.clearTransactionCount()",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.getRuntimeRandom(Connection)",4,2,6
"org.apache.derbyTesting.system.oe.client.Submitter.getTransactionCount()",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.mixType(int)",5,5,8
"org.apache.derbyTesting.system.oe.client.Submitter.newOrderOnly(Display,Operations,OERandom,short)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.orderStatusByIdOnly(Display,Operations,OERandom,short)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.orderStatusByNameOnly(Display,Operations,OERandom,short)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.paymentByIdOnly(Display,Operations,OERandom,short)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.paymentByNameOnly(Display,Operations,OERandom,short)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.percent(int,int)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.printReport(PrintStream)",1,6,7
"org.apache.derbyTesting.system.oe.client.Submitter.runNewOrder(Object,boolean)",1,6,7
"org.apache.derbyTesting.system.oe.client.Submitter.runOrderStatus(Object,boolean)",1,2,2
"org.apache.derbyTesting.system.oe.client.Submitter.runPayment(Object,boolean)",1,2,2
"org.apache.derbyTesting.system.oe.client.Submitter.runScheduleDelivery(Object)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.runStockLevel(Object)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.runTransaction(Object)",2,2,9
"org.apache.derbyTesting.system.oe.client.Submitter.runTransactions(Object,int)",1,2,2
"org.apache.derbyTesting.system.oe.client.Submitter.stockLevelOnly(Display,Operations,OERandom,short)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.transactionCount(String,int,int)",1,1,1
"org.apache.derbyTesting.system.oe.client.Submitter.warehouse()",2,1,2
"org.apache.derbyTesting.system.oe.direct.OrderItem4Sort.OrderItem4Sort(int,short,short)",1,1,1
"org.apache.derbyTesting.system.oe.direct.OrderItem4Sort.compareTo(Object)",5,1,5
"org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations.SimpleNonStandardOperations(Connection,int)",1,1,1
"org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations.customerAddressChange(int)",1,1,1
"org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations.customerAddressChange(short,short,int)",1,1,1
"org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations.customerInquiry(int)",1,1,1
"org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations.customerInquiry(short,short,int)",1,1,1
"org.apache.derbyTesting.system.oe.direct.SimpleNonStandardOperations.noReset(Connection,int)",1,1,1
"org.apache.derbyTesting.system.oe.direct.Standard.Standard(Connection)",1,1,1
"org.apache.derbyTesting.system.oe.direct.Standard.delivery()",1,3,3
"org.apache.derbyTesting.system.oe.direct.Standard.getOrderStatusForCustomer(Display,Object,boolean,Customer)",1,3,3
"org.apache.derbyTesting.system.oe.direct.Standard.newOrder(Display,Object,short,short,int,int[],short[],short[])",3,3,7
"org.apache.derbyTesting.system.oe.direct.Standard.noReset(Connection)",1,1,1
"org.apache.derbyTesting.system.oe.direct.Standard.orderStatus(Display,Object,short,short,String)",2,4,6
"org.apache.derbyTesting.system.oe.direct.Standard.orderStatus(Display,Object,short,short,int)",1,2,2
"org.apache.derbyTesting.system.oe.direct.Standard.payment(Display,Object,short,short,short,short,String,String)",2,4,7
"org.apache.derbyTesting.system.oe.direct.Standard.payment(Display,Object,short,short,short,short,int,String)",1,2,3
"org.apache.derbyTesting.system.oe.direct.Standard.paymentById(Display,Object,short,short,short,short,int,String)",1,2,2
"org.apache.derbyTesting.system.oe.direct.Standard.scheduleDelivery(Display,Object,short,short)",1,2,2
"org.apache.derbyTesting.system.oe.direct.Standard.sortOrderItems(int[],short[],short[])",1,1,3
"org.apache.derbyTesting.system.oe.direct.Standard.stockLevel(Display,Object,short,short,int)",1,3,3
"org.apache.derbyTesting.system.oe.direct.StatementHelper.StatementHelper(Connection,boolean,int)",1,1,1
"org.apache.derbyTesting.system.oe.direct.StatementHelper.close()",1,2,2
"org.apache.derbyTesting.system.oe.direct.StatementHelper.getAddress(Address,ResultSet,String)",1,1,1
"org.apache.derbyTesting.system.oe.direct.StatementHelper.getAddress(ResultSet,String)",1,1,1
"org.apache.derbyTesting.system.oe.direct.StatementHelper.prepareStatement(String)",2,1,2
"org.apache.derbyTesting.system.oe.direct.StatementHelper.reset(PreparedStatement)",1,2,2
"org.apache.derbyTesting.system.oe.load.SimpleInsert.customerTable(short,short)",1,4,5
"org.apache.derbyTesting.system.oe.load.SimpleInsert.districtTable(short,short)",1,1,1
"org.apache.derbyTesting.system.oe.load.SimpleInsert.itemTable(int,int)",1,3,3
"org.apache.derbyTesting.system.oe.load.SimpleInsert.orderTable(short,short)",1,7,7
"org.apache.derbyTesting.system.oe.load.SimpleInsert.populateAllTables()",1,2,2
"org.apache.derbyTesting.system.oe.load.SimpleInsert.populateForOneWarehouse(short)",1,2,2
"org.apache.derbyTesting.system.oe.load.SimpleInsert.setRandomGenerator()",1,1,1
"org.apache.derbyTesting.system.oe.load.SimpleInsert.setSeed(long)",1,1,1
"org.apache.derbyTesting.system.oe.load.SimpleInsert.setThreadCount(int)",1,1,1
"org.apache.derbyTesting.system.oe.load.SimpleInsert.setupConnection(Connection,short)",1,1,1
"org.apache.derbyTesting.system.oe.load.SimpleInsert.setupLoad(Connection,short)",1,1,2
"org.apache.derbyTesting.system.oe.load.SimpleInsert.stockTable(int,int,short)",1,3,3
"org.apache.derbyTesting.system.oe.load.SimpleInsert.warehouseTable(short)",1,1,1
"org.apache.derbyTesting.system.oe.load.ThreadInsert.ThreadInsert(DataSource)",1,1,1
"org.apache.derbyTesting.system.oe.load.ThreadInsert.ThreadInsert(ThreadInsert)",1,1,1
"org.apache.derbyTesting.system.oe.load.ThreadInsert.addException(SQLException)",4,3,4
"org.apache.derbyTesting.system.oe.load.ThreadInsert.getNextWarehouse()",2,1,2
"org.apache.derbyTesting.system.oe.load.ThreadInsert.populateAllTables()",1,2,2
"org.apache.derbyTesting.system.oe.load.ThreadInsert.run()",2,3,3
"org.apache.derbyTesting.system.oe.load.ThreadInsert.setThreadCount(int)",3,1,3
"org.apache.derbyTesting.system.oe.load.ThreadInsert.setupLoad(Connection,short)",1,1,1
"org.apache.derbyTesting.system.oe.load.ThreadInsert.threadPopulate()",2,3,4
"org.apache.derbyTesting.system.oe.model.Address.clear()",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.getCity()",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.getState()",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.getStreet1()",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.getStreet2()",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.getZip()",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.setCity(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.setState(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.setStreet1(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.setStreet2(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Address.setZip(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.clear()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getAddress()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getBalance()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getCredit()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getCredit_lim()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getData()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getDelivery_cnt()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getDiscount()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getDistrict()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getFirst()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getId()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getLast()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getMiddle()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getPayment_cnt()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getPhone()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getSince()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getWarehouse()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.getYtd_payment()",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setAddress(Address)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setBalance(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setCredit(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setCredit_lim(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setData(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setDelivery_cnt(int)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setDiscount(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setDistrict(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setFirst(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setId(int)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setLast(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setMiddle(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setPayment_cnt(int)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setPhone(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setSince(Timestamp)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setWarehouse(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.Customer.setYtd_payment(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.District.clear()",1,1,1
"org.apache.derbyTesting.system.oe.model.District.getWarehouse()",1,1,1
"org.apache.derbyTesting.system.oe.model.District.setWarehouse(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.clear()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.getCarrier_id()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.getCustomer()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.getDistrict()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.getEntry_d()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.getId()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.getOl_cnt()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.getWarehouse()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.isAll_local()",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.setAll_local(boolean)",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.setCarrier_id(Integer)",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.setCustomer(int)",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.setDistrict(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.setEntry_d(Timestamp)",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.setId(int)",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.setOl_cnt(int)",1,1,1
"org.apache.derbyTesting.system.oe.model.Order.setWarehouse(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.getAmount()",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.getDelivery_d()",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.getDist_info()",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.getI_id()",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.getNumber()",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.getQuantity()",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.getSupply_w_id()",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.setAmount(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.setDelivery_d(Timestamp)",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.setDist_info(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.setI_id(int)",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.setNumber(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.setQuantity(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.OrderLine.setSupply_w_id(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.clear()",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.getAddress()",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.getId()",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.getName()",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.getTax()",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.getYtd()",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.setAddress(Address)",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.setId(short)",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.setName(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.setTax(String)",1,1,1
"org.apache.derbyTesting.system.oe.model.Warehouse.setYtd(String)",1,1,1
"org.apache.derbyTesting.system.oe.routines.Data.dataForBadCredit(String,int,int,short,short,int,BigDecimal)",1,2,2
"org.apache.derbyTesting.system.oe.run.Checks.Checks(String)",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.Checks(String,short)",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.checkAllRowCounts(short)",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.consistencyChecks()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.setUp()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.suite()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testCondition1()",1,2,2
"org.apache.derbyTesting.system.oe.run.Checks.testCondition2()",1,2,2
"org.apache.derbyTesting.system.oe.run.Checks.testCondition3()",1,2,2
"org.apache.derbyTesting.system.oe.run.Checks.testCondition4()",1,2,2
"org.apache.derbyTesting.system.oe.run.Checks.testCustomerRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testDistrictRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testHistoryRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testItemRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testNewOrdersRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testOrderLineRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testOrdersRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testStockRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.Checks.testWarehouseRows()",1,1,1
"org.apache.derbyTesting.system.oe.run.DriverUtility.DriverUtility()",1,2,2
"org.apache.derbyTesting.system.oe.run.DriverUtility.allChecks()",1,1,1
"org.apache.derbyTesting.system.oe.run.DriverUtility.cleanup()",1,2,2
"org.apache.derbyTesting.system.oe.run.DriverUtility.getConnection()",1,2,2
"org.apache.derbyTesting.system.oe.run.DriverUtility.main(String[])",1,2,2
"org.apache.derbyTesting.system.oe.run.DriverUtility.parseArgs(String[])",1,7,8
"org.apache.derbyTesting.system.oe.run.DriverUtility.populate()",1,1,1
"org.apache.derbyTesting.system.oe.run.DriverUtility.printUsage()",1,1,1
"org.apache.derbyTesting.system.oe.run.Populate.Populate(String)",1,1,1
"org.apache.derbyTesting.system.oe.run.Populate.main(String[])",1,1,1
"org.apache.derbyTesting.system.oe.run.Populate.parseArgs(String[])",1,7,9
"org.apache.derbyTesting.system.oe.run.Populate.printUsage()",1,1,1
"org.apache.derbyTesting.system.oe.run.Populate.suite()",1,4,4
"org.apache.derbyTesting.system.oe.run.Populate.testCreateDB()",1,1,1
"org.apache.derbyTesting.system.oe.run.Populate.testLoad()",1,2,2
"org.apache.derbyTesting.system.oe.run.Schema.Schema(String)",1,1,1
"org.apache.derbyTesting.system.oe.run.Schema.addBaseSchema(TestSuite)",1,1,1
"org.apache.derbyTesting.system.oe.run.Schema.addConstraints(TestSuite)",1,1,1
"org.apache.derbyTesting.system.oe.run.Schema.getName()",1,1,1
"org.apache.derbyTesting.system.oe.run.Schema.suite()",1,1,1
"org.apache.derbyTesting.system.oe.run.Schema.testScript()",1,1,1
"org.apache.derbyTesting.system.oe.test.OETest.OETest(String)",1,1,1
"org.apache.derbyTesting.system.oe.test.OETest.getNSOps()",1,1,1
"org.apache.derbyTesting.system.oe.test.OETest.suite()",1,1,1
"org.apache.derbyTesting.system.oe.test.OETest.testCustomerAddressChange()",1,2,2
"org.apache.derbyTesting.system.oe.test.OETest.testCustomerInquiry()",1,2,2
"org.apache.derbyTesting.system.oe.test.OperationsTester.OperationsTester(String)",1,1,1
"org.apache.derbyTesting.system.oe.test.OperationsTester.displayNewOrder(Object,Warehouse,District,Customer,Order)",1,1,1
"org.apache.derbyTesting.system.oe.test.OperationsTester.displayOrderStatus(Object,boolean,Customer,Order,OrderLine[])",2,2,3
"org.apache.derbyTesting.system.oe.test.OperationsTester.displayPayment(Object,String,boolean,Warehouse,District,Customer)",1,1,1
"org.apache.derbyTesting.system.oe.test.OperationsTester.displayScheduleDelivery(Object,short,short)",1,1,1
"org.apache.derbyTesting.system.oe.test.OperationsTester.displayStockLevel(Object,short,short,int,int)",2,1,2
"org.apache.derbyTesting.system.oe.test.OperationsTester.setUp()",1,1,1
"org.apache.derbyTesting.system.oe.test.OperationsTester.tearDown()",1,1,1
"org.apache.derbyTesting.system.oe.test.OperationsTester.testDelivery()",1,2,2
"org.apache.derbyTesting.system.oe.test.OperationsTester.testNewOrder()",1,4,5
"org.apache.derbyTesting.system.oe.test.OperationsTester.testOrderStatus()",1,3,3
"org.apache.derbyTesting.system.oe.test.OperationsTester.testPayment()",1,3,3
"org.apache.derbyTesting.system.oe.test.OperationsTester.testScheduleDelivery()",1,2,2
"org.apache.derbyTesting.system.oe.test.OperationsTester.testStockLevel()",1,2,2
"org.apache.derbyTesting.system.oe.test.OperationsTester.testSubmitter()",1,2,3
"org.apache.derbyTesting.system.oe.test._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.system.oe.test._Suite.suite()",1,1,1
"org.apache.derbyTesting.system.oe.util.HandleCheckError.handleCheckError(String)",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.checkAllRowCounts()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.checkCountStar(String,int)",1,2,2
"org.apache.derbyTesting.system.oe.util.OEChecks.checkWithinOnePercent(String,int)",1,2,3
"org.apache.derbyTesting.system.oe.util.OEChecks.initialize(HandleCheckError,Connection,short)",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.rowsInTable(String)",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testCustomerRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testDistrictRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testHistoryRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testItemRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testNewOrdersRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testOrderLineRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testOrdersRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testStockRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OEChecks.testWarehouseRows()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.NURand1023()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.NURand255()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.NURand8191()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.OERandom(OERandom)",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.OERandom(int)",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.OERandom(int,long)",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.carrier()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.district()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.initAStrings()",2,2,3
"org.apache.derbyTesting.system.oe.util.OERandom.payment()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomAString(int,int)",5,7,25
"org.apache.derbyTesting.system.oe.util.OERandom.randomAString10_20()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomAString14_24()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomAString24()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomAString26_50()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomAString300_500()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomAString8_16()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomCLast()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomCLast(int)",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomCLastPopulate(int)",2,2,2
"org.apache.derbyTesting.system.oe.util.OERandom.randomData()",4,3,4
"org.apache.derbyTesting.system.oe.util.OERandom.randomDecimal(int,int,int)",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomDecimalString(int,int,int)",1,3,3
"org.apache.derbyTesting.system.oe.util.OERandom.randomInt(int,int)",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.randomIntPerm(int)",1,2,3
"org.apache.derbyTesting.system.oe.util.OERandom.randomNString(int,int)",1,2,2
"org.apache.derbyTesting.system.oe.util.OERandom.randomState()",1,2,2
"org.apache.derbyTesting.system.oe.util.OERandom.randomZIP()",1,1,1
"org.apache.derbyTesting.system.oe.util.OERandom.threshold()",1,1,1
"org.apache.derbyTesting.system.optimizer.RunOptimizerTest.main(String[])",6,16,18
"org.apache.derbyTesting.system.optimizer.RunOptimizerTest.printResults()",1,5,5
"org.apache.derbyTesting.system.optimizer.RunOptimizerTest.printUsage()",1,1,1
"org.apache.derbyTesting.system.optimizer.StaticValues.init()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.executeQueries(boolean,boolean)",1,14,14
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.generateQueries()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.generateQueries(Properties)",1,2,2
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.getDescription()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.getPrepStmtRunResults()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.getQueries()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.getRowsExpected(int)",1,1,1
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.getStmtRunResults()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.GenericQuery.setConnection(Connection)",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query1.Query1()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query1.generateQueries()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query2.Query2()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query2.generateQueries()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query3.Query3()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query3.generateQueries()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query4.Query4()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query4.generateQueries()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query5.Query5()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query5.generateQueries()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query6.Query6()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.Query6.generateQueries()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.QueryList.getQList()",1,1,1
"org.apache.derbyTesting.system.optimizer.query.QueryList.init(Connection)",3,3,4
"org.apache.derbyTesting.system.optimizer.utils.DataUtils.createObjects(Connection,boolean)",3,9,9
"org.apache.derbyTesting.system.optimizer.utils.DataUtils.dropObjects(Connection,boolean)",5,6,8
"org.apache.derbyTesting.system.optimizer.utils.DataUtils.insertData(Connection,boolean)",6,15,17
"org.apache.derbyTesting.system.optimizer.utils.TestUtils.getTime(long)",1,6,7
"org.apache.derbyTesting.system.optimizer.utils.TestViews.init()",1,1,1
"org.apache.derbyTesting.system.optimizer.utils.TestViews.setCreateViews()",1,1,1
"org.apache.derbyTesting.system.optimizer.utils.TestViews.setDropViews()",1,1,1
"org.apache.derbyTesting.system.sttest.Sttest.Sttest(int)",1,1,1
"org.apache.derbyTesting.system.sttest.Sttest.changerowcount(int)",1,1,1
"org.apache.derbyTesting.system.sttest.Sttest.changerowcount2zero()",1,1,1
"org.apache.derbyTesting.system.sttest.Sttest.checkrowcount(Connection)",1,2,2
"org.apache.derbyTesting.system.sttest.Sttest.compress(Connection)",4,6,6
"org.apache.derbyTesting.system.sttest.Sttest.get_countlock()",1,1,1
"org.apache.derbyTesting.system.sttest.Sttest.initial_data()",2,5,7
"org.apache.derbyTesting.system.sttest.Sttest.locksync()",1,1,1
"org.apache.derbyTesting.system.sttest.Sttest.main(String[])",1,2,2
"org.apache.derbyTesting.system.sttest.Sttest.mystartJBMS()",1,3,3
"org.apache.derbyTesting.system.sttest.Sttest.reset_loops(int)",1,1,2
"org.apache.derbyTesting.system.sttest.Sttest.run()",11,24,35
"org.apache.derbyTesting.system.sttest.Sttest.set_countlock(boolean)",2,1,3
"org.apache.derbyTesting.system.sttest.Sttest.sttTop()",1,3,4
"org.apache.derbyTesting.system.sttest.Sttest.userProperties()",1,5,7
"org.apache.derbyTesting.system.sttest.tools.MemCheck.MemCheck()",1,1,1
"org.apache.derbyTesting.system.sttest.tools.MemCheck.MemCheck(int)",1,1,1
"org.apache.derbyTesting.system.sttest.tools.MemCheck.main(String[])",1,1,1
"org.apache.derbyTesting.system.sttest.tools.MemCheck.run()",1,3,3
"org.apache.derbyTesting.system.sttest.tools.MemCheck.showmem()",1,1,1
"org.apache.derbyTesting.system.sttest.utils.CompressTable.compress(Connection)",4,6,6
"org.apache.derbyTesting.system.sttest.utils.CompressTable.main(String[])",1,1,2
"org.apache.derbyTesting.system.sttest.utils.CompressTable.mystartJBMS()",1,3,3
"org.apache.derbyTesting.system.sttest.utils.Datatypes.add_one_row(Connection,int)",2,4,8
"org.apache.derbyTesting.system.sttest.utils.Datatypes.delete_one_row(Connection,int)",12,16,37
"org.apache.derbyTesting.system.sttest.utils.Datatypes.delete_some(Connection,int,int)",2,4,5
"org.apache.derbyTesting.system.sttest.utils.Datatypes.get_table_count(Connection)",5,8,9
"org.apache.derbyTesting.system.sttest.utils.Datatypes.pick_some(Connection,int,int)",6,7,10
"org.apache.derbyTesting.system.sttest.utils.Datatypes.update_one_row(Connection,int)",7,10,31
"org.apache.derbyTesting.system.sttest.utils.Setup.doit(String)",2,6,6
"org.apache.derbyTesting.system.sttest.utils.StStatus.StStatus()",1,1,1
"org.apache.derbyTesting.system.sttest.utils.StStatus.firstMessage(int,Date)",1,1,1
"org.apache.derbyTesting.system.sttest.utils.StStatus.updateStatus()",1,3,3
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.T_Cipher()",1,1,1
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.byteArrayIdentical(byte[],byte[],int,int)",3,1,3
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.check(byte[],int,int,RandomAccessFile)",3,3,3
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.deleteFile(File)",1,2,2
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.getAlgorithm()",1,1,1
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.getProvider()",2,1,2
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.runTests()",1,3,4
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.setupCiphers(String)",4,5,5
"org.apache.derbyTesting.unitTests.crypto.T_Cipher.test(byte[],int,int,RandomAccessFile)",4,4,4
"org.apache.derbyTesting.unitTests.crypto.T_CipherBlowfish.getAlgorithm()",1,1,1
"org.apache.derbyTesting.unitTests.crypto.T_CipherCFB.getAlgorithm()",1,1,1
"org.apache.derbyTesting.unitTests.crypto.T_CipherDES.getAlgorithm()",1,1,1
"org.apache.derbyTesting.unitTests.crypto.T_CipherECB.getAlgorithm()",1,1,1
"org.apache.derbyTesting.unitTests.crypto.T_CipherOFB.getAlgorithm()",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTest.BasicUnitTest(String,int,int,boolean,Error)",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTest.Execute(HeaderPrintWriter)",2,1,2
"org.apache.derbyTesting.unitTests.harness.BasicUnitTest.UnitTestDuration()",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTest.UnitTestType()",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTest.executeCatch(HeaderPrintWriter)",1,2,2
"org.apache.derbyTesting.unitTests.harness.BasicUnitTest.toString()",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.BasicUnitTestManager()",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.boot(boolean,Properties)",1,3,4
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.emitAMessage(String)",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.findTests(Properties,Properties)",2,6,7
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.registerTest(UnitTest,String)",1,2,2
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.runATest(UnitTest)",1,8,9
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.runTests()",1,7,8
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.runTests(int,int)",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.setPerformanceReportOn(boolean)",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.setTestDuration(int)",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.setTestType(int)",1,1,1
"org.apache.derbyTesting.unitTests.harness.BasicUnitTestManager.stop()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Bomb.T_Bomb()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Bomb.armBomb()",1,1,2
"org.apache.derbyTesting.unitTests.harness.T_Bomb.blowUp()",1,2,3
"org.apache.derbyTesting.unitTests.harness.T_Bomb.explodeBomb()",1,1,2
"org.apache.derbyTesting.unitTests.harness.T_Bomb.makeBomb()",1,1,2
"org.apache.derbyTesting.unitTests.harness.T_Bomb.performLastGasp()",1,3,3
"org.apache.derbyTesting.unitTests.harness.T_Bomb.registerBombable(T_Bombable)",1,1,2
"org.apache.derbyTesting.unitTests.harness.T_Bomb.run()",1,2,3
"org.apache.derbyTesting.unitTests.harness.T_Bomb.unRegisterBombable(T_Bombable)",2,2,4
"org.apache.derbyTesting.unitTests.harness.T_Fail.T_ASSERT(boolean)",2,2,2
"org.apache.derbyTesting.unitTests.harness.T_Fail.T_ASSERT(boolean,String)",2,2,2
"org.apache.derbyTesting.unitTests.harness.T_Fail.T_Fail(String)",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Fail.exceptionFail(Throwable)",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Fail.moduleToTestIdNotFound()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Fail.moduleToTestNotFound(String)",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Fail.testFail()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Fail.testFailMsg(String)",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Generic.Execute(HeaderPrintWriter)",1,2,2
"org.apache.derbyTesting.unitTests.harness.T_Generic.FAIL(String)",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Generic.PASS(String)",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Generic.REPORT(String)",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Generic.T_Generic()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Generic.UnitTestDuration()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Generic.UnitTestType()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Generic.boot(boolean,Properties)",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_Generic.stop()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_MultiIterations.T_MultiIterations()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_MultiIterations.runTests()",1,3,5
"org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations.T_MultiThreadedIterations()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations.getNumThreads()",1,1,1
"org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations.run()",1,7,8
"org.apache.derbyTesting.unitTests.harness.T_MultiThreadedIterations.runTests()",4,11,15
"org.apache.derbyTesting.unitTests.harness.UnitTestMain.main(String[])",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.FormatableBitSetTest(String)",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.bitsInByte(byte)",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.numBitsSetInOneByte()",1,2,2
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.numBitsSetInTwoBytes()",1,3,3
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.setUp()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.suite()",1,2,2
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.tearDown()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testANDWithComplement()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testANDWithEmpty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testANDWithLarger()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testANDWithNull()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testANDWithSmaller()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testAnySetBit()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testAnySetBitBeyondBit()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testAnySetBitBeyondBitNeg()",1,1,3
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testAnySetBitBeyondBitPastEnd()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testAnySetBitEmpty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testClear()",1,1,4
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testClearEmpty()",1,1,4
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testCompare18Empty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testCompareAnotherEmpty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testCompareDifferentArray()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testCompareEmpty18()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testCompareSameEmpty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testCompareToComplement()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testCpyCtor()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testEmptyCpyCtor()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testExternal()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow0()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow1()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow2()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow3()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow4()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow5()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow6()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow7()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow8()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrow9()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrowEmpty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrowNeg()",1,1,2
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testGrowSmaller()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testIntCtor0()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testIntCtor1()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testIntCtor8()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testIntCtor9()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testIntCtorNeg()",1,1,2
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testIsSet()",1,1,4
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testIsSetEmpty()",1,1,4
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testORWithComplement()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testORWithEmpty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testORWithLarger()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testORWithNull()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testORWithSmaller()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testSet()",1,1,4
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testSetEmpty()",1,1,4
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testSetup()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink0()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink1()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink10()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink2()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink3()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink4()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink5()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink6()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink7()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink8()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrink9()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrinkEmpty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrinkLarger()",1,1,2
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testShrinkNeg()",1,1,2
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testXORWithComplement()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testXORWithEmpty()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testXORWithLarger()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testXORWithNull()",1,1,1
"org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest.testXORWithSmaller()",1,1,1
"org.apache.derbyTesting.unitTests.junit.JDBCStatementCacheTest.JDBCStatementCacheTest(String)",1,1,1
"org.apache.derbyTesting.unitTests.junit.JDBCStatementCacheTest.suite()",1,1,1
"org.apache.derbyTesting.unitTests.junit.JDBCStatementCacheTest.testBasicCallableVsPrepared()",1,1,1
"org.apache.derbyTesting.unitTests.junit.JDBCStatementCacheTest.testBasicDuplicateKeyInsertion()",1,1,1
"org.apache.derbyTesting.unitTests.junit.JDBCStatementCacheTest.testBasicInsertion()",1,1,1
"org.apache.derbyTesting.unitTests.junit.JDBCStatementCacheTest.testCreateCacheWithZeroOrNegativeMaxSize()",1,1,3
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.StatementKeyFactoryTest(String)",1,1,1
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.suite()",1,1,1
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.testCallableVsPrepared()",1,1,1
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.testCreationBasic()",1,1,1
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.testCreationBasicWithNulls()",1,1,4
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.testEqualityBasic()",1,1,1
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.testEqualityDefaultNoAutoGenKey()",1,1,1
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.testEqualityNoAutoVsAutoGenKey()",1,1,1
"org.apache.derbyTesting.unitTests.junit.StatementKeyFactoryTest.testUnequalityVarious()",1,5,5
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.CreateDatabaseAction.CreateDatabaseAction(Permission)",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.CreateDatabaseAction.run()",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.CreateDatabaseAction.toString()",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.RunAsPrivilegedUserAction.RunAsPrivilegedUserAction(SystemPrincipal,PrivilegedAction)",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.RunAsPrivilegedUserAction.run()",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.ShutdownAction.ShutdownAction(Permission)",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.ShutdownAction.run()",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.ShutdownAction.toString()",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.SystemPrivilegesPermissionTest(String)",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.assertEquivalentPermissions(Permission,Permission)",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.checkDistinctPermissions(Permission[])",4,4,4
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.checkHashCodeAndEquals(Permission[],Permission[])",1,4,4
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.checkImplies(Permission[],Permission[],boolean[][])",1,3,3
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.checkNameAndActions(DatabasePermission[],String[])",1,2,2
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.execute(SystemPrincipal,PrivilegedAction,boolean)",2,2,4
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.getAuthorizationId(String)",3,2,4
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.policyTestDatabasePermissionGrants()",1,2,3
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.policyTestSystemPermissionGrants()",1,1,1
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.suite()",1,2,2
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.testDatabasePermission()",1,1,15
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.testSystemPermission()",1,8,12
"org.apache.derbyTesting.unitTests.junit.SystemPrivilegesPermissionTest.testSystemPrincipal()",1,1,3
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.UTF8UtilTest(String)",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.suite()",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testEqualityOfModifedUTF8AndASCII()",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testInvalidUTF8Encoding()",1,1,2
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testMissingSecondByteOfThree()",1,1,2
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testMissingSecondByteOfTwo()",1,1,2
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testMissingThirdByteOfThree()",1,1,2
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testMixedSkipOnStreamTamil()",1,1,2
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkipFullyOnInvalidStreamCJK()",1,1,2
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkipFullyOnTooShortStreamCJK()",1,1,2
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkipFullyOnValidLongStreamCJK()",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkipUntilEOFOnLongStreamASCII()",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkipUntilEOFOnLongStreamCJK()",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkipUntilEOFOnShortStreamASCII()",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkipUntilEOFOnShortStreamCJK()",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkipUntilEOFOnZeroLengthStream()",1,1,1
"org.apache.derbyTesting.unitTests.junit.UTF8UtilTest.testSkippingInvalidEncodingWorks()",1,1,2
"org.apache.derbyTesting.unitTests.junit._Suite._Suite(String)",1,1,1
"org.apache.derbyTesting.unitTests.junit._Suite.suite()",1,1,1
"org.apache.derbyTesting.unitTests.lang.EmptyResultSetStatisticsFactory.EmptyResultSetStatisticsFactory()",1,1,1
"org.apache.derbyTesting.unitTests.lang.EmptyResultSetStatisticsFactory.getNoRowsResultSetStatistics(ResultSet)",1,1,1
"org.apache.derbyTesting.unitTests.lang.EmptyResultSetStatisticsFactory.getResultSetStatistics(NoPutResultSet)",1,1,1
"org.apache.derbyTesting.unitTests.lang.EmptyResultSetStatisticsFactory.getResultSetStatistics(ResultSet)",1,1,1
"org.apache.derbyTesting.unitTests.lang.EmptyResultSetStatisticsFactory.getRunTimeStatistics(Activation,ResultSet,NoPutResultSet[])",1,1,1
"org.apache.derbyTesting.unitTests.lang.T_Like.FAIL(String)",1,1,1
"org.apache.derbyTesting.unitTests.lang.T_Like.expect(String,Boolean,Boolean)",1,5,6
"org.apache.derbyTesting.unitTests.lang.T_Like.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.lang.T_Like.runTests()",2,3,4
"org.apache.derbyTesting.unitTests.lang.T_Like.tests()",1,10,10
"org.apache.derbyTesting.unitTests.services.D_T_DiagTestClass1.diag()",1,1,1
"org.apache.derbyTesting.unitTests.services.MarkedLimitInputStream.MarkedLimitInputStream(DataInputStream)",1,1,1
"org.apache.derbyTesting.unitTests.services.MarkedLimitInputStream.read()",3,3,3
"org.apache.derbyTesting.unitTests.services.MarkedLimitInputStream.read(byte[],int,int)",8,6,9
"org.apache.derbyTesting.unitTests.services.MarkedLimitInputStream.skip(long)",6,5,7
"org.apache.derbyTesting.unitTests.services.MarkedLimitInputStream.start()",1,3,3
"org.apache.derbyTesting.unitTests.services.T_CacheException.T_CacheException(String,int)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CacheException.getType()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CacheException.identityFail()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CacheException.invalidKey()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CacheService.T001(CacheManager,int)",6,7,9
"org.apache.derbyTesting.unitTests.services.T_CacheService.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CacheService.newCacheable(CacheManager)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CacheService.runTests()",9,12,12
"org.apache.derbyTesting.unitTests.services.T_CacheService.setChildException(T_Fail)",1,1,2
"org.apache.derbyTesting.unitTests.services.T_CacheService.t_findCachedFail(CacheManager,Object)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_CacheService.t_findCachedSucceed(CacheManager,Object)",3,3,3
"org.apache.derbyTesting.unitTests.services.T_CacheService.t_findFail(CacheManager,Object)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_CacheService.t_findSucceed(CacheManager,Object)",3,3,3
"org.apache.derbyTesting.unitTests.services.T_CacheService.thrashCache(CacheManager,int,int)",4,4,7
"org.apache.derbyTesting.unitTests.services.T_CacheUser.T_CacheUser(CacheManager,int,T_CacheService,HeaderPrintWriter)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CacheUser.run()",1,3,3
"org.apache.derbyTesting.unitTests.services.T_CacheUser.thrashCache()",10,14,20
"org.apache.derbyTesting.unitTests.services.T_Cacheable.T_Cacheable()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Cacheable.canRemove()",2,2,3
"org.apache.derbyTesting.unitTests.services.T_Cacheable.clean(boolean)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Cacheable.createIdentity(Object,Object)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_Cacheable.dummySet(T_Key)",3,3,5
"org.apache.derbyTesting.unitTests.services.T_Cacheable.getCorrectObject(Object)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_Cacheable.isDirty()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Cacheable.setDirty()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Cacheable.setIdentity(Object)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_CachedInteger.T_CachedInteger()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CachedInteger.clean(boolean)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CachedInteger.clearIdentity()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CachedInteger.createIdentity(Object,Object)",3,2,3
"org.apache.derbyTesting.unitTests.services.T_CachedInteger.getIdentity()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_CachedInteger.setIdentity(Object)",3,2,3
"org.apache.derbyTesting.unitTests.services.T_DaemonService.T01(DaemonService)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_DaemonService.T02(DaemonService)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_DaemonService.T03(DaemonService)",1,1,2
"org.apache.derbyTesting.unitTests.services.T_DaemonService.T_DaemonService()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_DaemonService.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_DaemonService.joinSetupTest()",2,2,2
"org.apache.derbyTesting.unitTests.services.T_DaemonService.newTestObject()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_DaemonService.randomSleep()",2,3,4
"org.apache.derbyTesting.unitTests.services.T_DaemonService.runTestSet()",1,2,2
"org.apache.derbyTesting.unitTests.services.T_DaemonService.setupTest()",3,5,5
"org.apache.derbyTesting.unitTests.services.T_DaemonService.t_checkStatus(DaemonService)",1,5,5
"org.apache.derbyTesting.unitTests.services.T_DiagTestClass1.T_DiagTestClass1(String)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_DiagTestClass1.toString()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_DiagTestClass1Sub.T_DiagTestClass1Sub(String)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Diagnosticable.T_Diagnosticable()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Diagnosticable.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Diagnosticable.runTestSet()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Diagnosticable.setupTest()",1,1,2
"org.apache.derbyTesting.unitTests.services.T_Diagnosticable.t_001()",7,8,8
"org.apache.derbyTesting.unitTests.services.T_Key.T_Key()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.T_Key(Object,long,boolean,boolean)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.canFind()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.dontFindInt(int)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.equals(Object)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_Key.exceptionInt(int)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.getValue()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.getWait()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.hashCode()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.raiseException()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.randomKey()",1,1,6
"org.apache.derbyTesting.unitTests.services.T_Key.simpleInt(int)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Key.toString()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L1.T_L1()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L1.lockAttributes(int,Hashtable)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L1.lockEvent(Latch)",1,2,2
"org.apache.derbyTesting.unitTests.services.T_L1.lockerAlwaysCompatible()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L1.requestCompatible(Object,Object)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L1.unlockEvent(Latch)",1,3,3
"org.apache.derbyTesting.unitTests.services.T_L2.T_L2(int)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L2.lockAttributes(int,Hashtable)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L2.lockEvent(Latch)",3,3,5
"org.apache.derbyTesting.unitTests.services.T_L2.lockerAlwaysCompatible()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L2.requestCompatible(Object,Object)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_L2.unlockEvent(Latch)",4,5,6
"org.apache.derbyTesting.unitTests.services.T_LockFactory.M001()",3,4,4
"org.apache.derbyTesting.unitTests.services.T_LockFactory.M002()",4,5,5
"org.apache.derbyTesting.unitTests.services.T_LockFactory.M003()",4,5,5
"org.apache.derbyTesting.unitTests.services.T_LockFactory.M004()",4,5,5
"org.apache.derbyTesting.unitTests.services.T_LockFactory.S001()",3,3,3
"org.apache.derbyTesting.unitTests.services.T_LockFactory.S002()",3,3,3
"org.apache.derbyTesting.unitTests.services.T_LockFactory.S003()",2,2,2
"org.apache.derbyTesting.unitTests.services.T_LockFactory.S004()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_LockFactory.S005()",2,2,3
"org.apache.derbyTesting.unitTests.services.T_LockFactory.S007()",2,2,2
"org.apache.derbyTesting.unitTests.services.T_LockFactory.T_LockFactory()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_LockFactory.checkLockCount(CompatibilitySpace,int)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_LockFactory.checkLockGroupCount(CompatibilitySpace,Object,int)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_LockFactory.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_LockFactory.runTestSet()",1,2,2
"org.apache.derbyTesting.unitTests.services.T_LockFactory.setupTest()",2,3,3
"org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream.makeMLIS(byte[])",1,1,1
"org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream.readAndCompare(MarkedLimitInputStream,byte[])",4,4,4
"org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream.readAndCompareChunks(MarkedLimitInputStream,byte[])",5,5,5
"org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream.runTests()",3,8,10
"org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream.setup(byte[])",1,1,1
"org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream.skipAndCompare(MarkedLimitInputStream,byte[],long)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_MarkedLimitInputStream.writeDos(InputStream,DataOutputStream)",1,3,5
"org.apache.derbyTesting.unitTests.services.T_Serviceable.T_Serviceable(boolean)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Serviceable.T_Serviceable(int)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Serviceable.getClientNumber()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Serviceable.performWork(ContextManager)",2,1,3
"org.apache.derbyTesting.unitTests.services.T_Serviceable.serviceASAP()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Serviceable.serviceImmediately()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Serviceable.setClientNumber(int)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_Serviceable.t_check(int)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_Serviceable.t_wait(int)",1,2,3
"org.apache.derbyTesting.unitTests.services.T_StandardException.T_StandardException(String,String)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_StandardException.T_StandardException(String,String,Throwable)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_StandardException.T_StandardException(String,String,Throwable,Object[])",1,1,1
"org.apache.derbyTesting.unitTests.services.T_StandardException.getErrorProperty()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_StandardException.getMessage()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_StandardException.myConstructorCommon(String,String)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_StandardException.newT_StandardException(String,String)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_StandardException.newT_StandardException(String,Throwable,String)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_UUIDFactory.T_UUIDFactory()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_UUIDFactory.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.services.T_UUIDFactory.runTests()",3,3,3
"org.apache.derbyTesting.unitTests.services.T_UUIDFactory.testUUID()",1,4,5
"org.apache.derbyTesting.unitTests.services.T_UUIDFactory.testUUIDConversions(HeaderPrintWriter,String)",1,4,4
"org.apache.derbyTesting.unitTests.services.T_User.T001()",1,2,2
"org.apache.derbyTesting.unitTests.services.T_User.T002()",1,2,2
"org.apache.derbyTesting.unitTests.services.T_User.T003()",1,2,2
"org.apache.derbyTesting.unitTests.services.T_User.T004()",1,2,2
"org.apache.derbyTesting.unitTests.services.T_User.T_User(int,LockFactory,Lockable[],long,long)",1,1,1
"org.apache.derbyTesting.unitTests.services.T_User.checkLockCount(CompatibilitySpace,int)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_User.checkValue(T_L1,long)",2,2,2
"org.apache.derbyTesting.unitTests.services.T_User.run()",2,2,5
"org.apache.derbyTesting.unitTests.store.QualifierUtil.QualifierUtil(int,DataValueDescriptor,int,boolean,boolean,boolean)",1,1,1
"org.apache.derbyTesting.unitTests.store.QualifierUtil.clearOrderableCache()",1,1,1
"org.apache.derbyTesting.unitTests.store.QualifierUtil.getColumnId()",1,1,1
"org.apache.derbyTesting.unitTests.store.QualifierUtil.getOperator()",1,1,1
"org.apache.derbyTesting.unitTests.store.QualifierUtil.getOrderable()",1,1,1
"org.apache.derbyTesting.unitTests.store.QualifierUtil.getOrderedNulls()",1,1,1
"org.apache.derbyTesting.unitTests.store.QualifierUtil.getUnknownRV()",1,1,1
"org.apache.derbyTesting.unitTests.store.QualifierUtil.negateCompareResult()",1,1,1
"org.apache.derbyTesting.unitTests.store.QualifierUtil.reinitialize()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.T_AccessFactory()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.alterTable(TransactionController,boolean)",22,24,31
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.checkAConglom(TransactionController,DataValueDescriptor[],long,int)",4,2,4
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.commitTest(TransactionController)",3,3,5
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.createAConglom(TransactionController,int,boolean)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.createBtree(TransactionController,long,boolean)",1,2,3
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.deletetest(TransactionController,long,int,int)",5,5,5
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.dropTest(TransactionController)",3,3,6
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.flush_cache()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.getBtreeTemplate(TransactionController,long)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.getTableProperties(TransactionController)",4,13,13
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.holdCursor(TransactionController)",17,18,18
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.insertAndFetch(TransactionController,long,int)",8,8,8
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.insertAndFetchExample(TransactionController)",2,3,5
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.insertAndUpdate(TransactionController,long,int,int)",3,3,3
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.insertAndUpdateExample(TransactionController)",2,3,4
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.insert_bench(TransactionController)",6,8,8
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.nestedUserTransaction(TransactionController)",2,5,9
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.partialScan(TransactionController)",3,3,3
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.positionAtRowLocation(TransactionController)",15,16,16
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.readUncommitted(TransactionController)",14,21,22
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.repeatString(String,int)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.runTests()",3,26,28
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.scanExample(TransactionController)",33,47,51
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.scanInfo(TransactionController)",8,11,11
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.sortCost(TransactionController)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.storeCost(TransactionController)",3,3,3
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.tempTest(TransactionController)",17,17,20
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.testOpsBeforeFirstNext(ScanController,DataValueDescriptor[])",1,1,7
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.transactionalProperties(TransactionController)",12,12,12
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.updatelocks(TransactionController)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessFactory.updatelocks_0(TransactionController,int)",10,14,17
"org.apache.derbyTesting.unitTests.store.T_AccessRow.T_AccessRow(int)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_AccessRow.T_AccessRow(int,int,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessRow.equals(T_AccessRow)",5,2,5
"org.apache.derbyTesting.unitTests.store.T_AccessRow.getCol(int)",2,1,2
"org.apache.derbyTesting.unitTests.store.T_AccessRow.getRowArray()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessRow.getRowArrayClone()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_AccessRow.getStorableColumn(int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessRow.nColumns()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessRow.realloc(int)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_AccessRow.setCol(int,DataValueDescriptor)",1,2,2
"org.apache.derbyTesting.unitTests.store.T_AccessRow.setStorableColumn(int,Storable)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_AccessRow.toString()",1,2,3
"org.apache.derbyTesting.unitTests.store.T_ColumnOrderingImpl.T_ColumnOrderingImpl(int,boolean)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_ColumnOrderingImpl.getColumnId()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_ColumnOrderingImpl.getIsAscending()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_ColumnOrderingImpl.getIsNullsOrderedLow()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.T_Compensation()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.doMe(Transaction,LogInstant,LimitObjectInput)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.getPreparedLog()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.getTypeFormatId()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.group()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.needsRedo(Transaction)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.readExternal(ObjectInput)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.releaseResource(Transaction)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.setUndoOp(Undoable)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Compensation.writeExternal(ObjectOutput)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_DummySortObserver.T_DummySortObserver(T_AccessRow)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_DummySortObserver.addToFreeList(DataValueDescriptor[],int)",1,2,2
"org.apache.derbyTesting.unitTests.store.T_DummySortObserver.getArrayClone()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_DummySortObserver.insertDuplicateKey(DataValueDescriptor[],DataValueDescriptor[])",1,1,1
"org.apache.derbyTesting.unitTests.store.T_DummySortObserver.insertNonDuplicateKey(DataValueDescriptor[])",1,1,1
"org.apache.derbyTesting.unitTests.store.T_DuplicateEliminator.T_DuplicateEliminator(T_AccessRow)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_DuplicateEliminator.insertDuplicateKey(DataValueDescriptor[],DataValueDescriptor[])",1,1,1
"org.apache.derbyTesting.unitTests.store.T_DuplicateEliminator.insertNonDuplicateKey(DataValueDescriptor[])",1,1,1
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.AllocMTest1(long)",4,11,12
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.AllocTest1()",11,14,17
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.AllocTest2()",1,4,4
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.AllocTest3()",11,20,20
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.AllocTest4()",13,14,14
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.AllocTest5()",11,11,12
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.CostEstimationTest1()",7,14,14
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.T_FileSystemData()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.boot(boolean,Properties)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.commonContainer()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.joinSetupTest()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.newTestObject()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.runAllocationTests()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.runCostEstimationTests()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.runTestSet()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_FileSystemData.setupTest()",3,4,5
"org.apache.derbyTesting.unitTests.store.T_Heap.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Heap.runTests()",3,6,8
"org.apache.derbyTesting.unitTests.store.T_Heap.t_001(TransactionController)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.T_QualifierTest(String,Properties,boolean,HeaderPrintWriter,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.create_hash_set(int,int,int)",1,2,3
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.fail(String)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.flip_scan_op(int)",1,1,3
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.progress(String)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.t_scan(TransactionController,long,DataValueDescriptor[],DataValueDescriptor[],DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,int,int,int)",8,1,8
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.t_scanFetchHashtable(TransactionController,long,DataValueDescriptor[],DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,int,int,int)",9,11,13
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.t_scanFetchNext(TransactionController,long,DataValueDescriptor[],DataValueDescriptor[],DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,int,int,int)",8,9,11
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.t_scanFetchNextGroup(TransactionController,int,long,DataValueDescriptor[],DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,int,int,int)",7,8,10
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.t_scanFetchNextPartial(TransactionController,long,DataValueDescriptor[],DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,int,int,int)",6,11,14
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.t_scanNext(TransactionController,long,DataValueDescriptor[],DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,int,int,int)",6,7,9
"org.apache.derbyTesting.unitTests.store.T_QualifierTest.t_testqual(TransactionController)",1,4,20
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.C010(int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.C011()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.C012(long)",2,3,3
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.C014()",5,5,5
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.C200()",16,16,16
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.C201(int)",20,20,21
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.CP001()",2,7,8
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.L001()",1,3,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P001(long)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P002(long)",4,12,14
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P005(long)",13,9,13
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P006()",13,16,17
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P007(long)",3,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P008(long)",7,7,8
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P009(long)",15,27,33
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P011(long)",6,6,8
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P012(long)",3,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P013()",10,10,12
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P014()",2,18,20
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P015()",3,3,3
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P016()",3,10,15
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P017()",2,2,9
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P018()",7,8,12
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P019()",7,8,8
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P020()",4,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P021()",3,3,3
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P022()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P023(int)",9,9,9
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P024(long)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P030(long)",8,9,9
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P031(long)",2,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P032(long)",3,10,10
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P033(long)",2,7,7
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P034(long)",1,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P035(long)",2,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P036()",2,8,8
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P037()",4,6,6
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P038()",4,5,5
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P039()",10,8,11
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P040()",4,5,5
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P041()",2,3,3
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P042()",5,7,7
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P043()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P050()",2,1,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P051()",3,2,3
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P053()",6,2,7
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P054()",9,11,12
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P055(long)",3,5,6
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P056(long)",3,5,6
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P061()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P071()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P701(long)",1,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P702(long)",1,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P703(long)",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P703Helper(Page,RecordHandle,int,String,String)",1,2,3
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P704(long)",1,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P705(long)",1,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P706(long,boolean)",3,5,7
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P707(long)",1,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P708(long,boolean)",3,4,6
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P709()",2,23,25
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P710()",2,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.P711()",2,3,3
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T000()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T001()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T002()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T003()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T004()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T005()",8,8,8
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T006()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T007()",5,5,5
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T008()",4,4,7
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T009()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T010()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T011()",3,3,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T012()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.TC001()",4,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.TC002(int,boolean)",3,7,8
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.TC003(int,boolean)",3,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.TC004(int,int,int,boolean,boolean)",3,8,9
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.TC004all()",1,4,4
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.T_RawStoreFactory()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.boot(boolean,Properties)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.getTestService()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.joinSetupTest()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.newTestObject()",1,1,3
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.populateTempTable(ContainerHandle)",4,4,5
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.runEachTest()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.runPurgeWithNoDataLoggesTests()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.runTempTests()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.runTestSet()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreFactory.setupTest()",3,4,5
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.T_RawStoreRow(String)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.T_RawStoreRow(int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.getColumn(int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.getRow()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.getStorableColumn(int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.nColumns()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.setColumn(int,DataValueDescriptor)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.setColumn(int,String)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.setColumn(int,int,String)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.setStorableColumn(int,DataValueDescriptor)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RawStoreRow.toString()",1,3,3
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.RTest1()",6,7,7
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.RTest2()",6,7,7
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.RTest3()",2,6,7
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.RTest4()",6,7,7
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.RTest5()",6,7,7
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.RTest6()",6,7,7
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.RTest7()",6,7,7
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.STest1()",3,8,8
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.STest2()",3,8,8
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.STest3()",3,43,44
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.STest4()",3,8,8
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.STest5()",3,8,8
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.STest6()",3,8,8
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.STest7()",3,8,8
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.T_RecoverBadLog()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.find(long)",4,3,5
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.getConfig()",1,1,2
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.key(int,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.register(long,long)",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.runTests()",7,28,38
"org.apache.derbyTesting.unitTests.store.T_RecoverBadLog.simulateLogFileCorruption()",1,3,3
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.T_RecoverFullLog()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.checkRecovery()",3,7,9
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.fillUpLog()",1,3,3
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.find(long)",4,3,5
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.getConfig()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.key(int,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.logSwitchFail1()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.logSwitchFail2()",1,4,4
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.register(long,long)",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.runTests()",10,22,27
"org.apache.derbyTesting.unitTests.store.T_RecoverFullLog.testBasic(int)",1,40,40
"org.apache.derbyTesting.unitTests.store.T_Recovery.R001()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Recovery.R002()",3,7,7
"org.apache.derbyTesting.unitTests.store.T_Recovery.R003()",2,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.R004()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Recovery.R005()",6,9,9
"org.apache.derbyTesting.unitTests.store.T_Recovery.R006()",3,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.R007()",8,8,8
"org.apache.derbyTesting.unitTests.store.T_Recovery.R008()",10,13,13
"org.apache.derbyTesting.unitTests.store.T_Recovery.R009()",4,4,4
"org.apache.derbyTesting.unitTests.store.T_Recovery.R010()",9,10,10
"org.apache.derbyTesting.unitTests.store.T_Recovery.R011()",5,8,8
"org.apache.derbyTesting.unitTests.store.T_Recovery.R012()",3,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.R020()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Recovery.R022()",3,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.R100()",2,4,4
"org.apache.derbyTesting.unitTests.store.T_Recovery.R101()",2,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.R200()",2,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.R201()",2,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.R202()",2,5,5
"org.apache.derbyTesting.unitTests.store.T_Recovery.R203()",8,11,14
"org.apache.derbyTesting.unitTests.store.T_Recovery.R204()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Recovery.R300()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Recovery.R301()",8,8,8
"org.apache.derbyTesting.unitTests.store.T_Recovery.R302()",3,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.R303()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Recovery.R304()",2,4,4
"org.apache.derbyTesting.unitTests.store.T_Recovery.R999()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Recovery.S001()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.S002()",1,4,4
"org.apache.derbyTesting.unitTests.store.T_Recovery.S003()",1,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.S004()",2,5,5
"org.apache.derbyTesting.unitTests.store.T_Recovery.S005()",1,7,7
"org.apache.derbyTesting.unitTests.store.T_Recovery.S006()",2,2,4
"org.apache.derbyTesting.unitTests.store.T_Recovery.S007()",4,4,4
"org.apache.derbyTesting.unitTests.store.T_Recovery.S008()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.S009()",8,13,13
"org.apache.derbyTesting.unitTests.store.T_Recovery.S010()",3,9,10
"org.apache.derbyTesting.unitTests.store.T_Recovery.S011()",3,8,8
"org.apache.derbyTesting.unitTests.store.T_Recovery.S012()",2,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.S020()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.S022()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.S100()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.S101()",4,2,5
"org.apache.derbyTesting.unitTests.store.T_Recovery.S200()",1,5,6
"org.apache.derbyTesting.unitTests.store.T_Recovery.S201()",1,9,9
"org.apache.derbyTesting.unitTests.store.T_Recovery.S202()",4,7,7
"org.apache.derbyTesting.unitTests.store.T_Recovery.S203()",1,45,45
"org.apache.derbyTesting.unitTests.store.T_Recovery.S204()",1,11,11
"org.apache.derbyTesting.unitTests.store.T_Recovery.S300()",1,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.S301()",4,6,6
"org.apache.derbyTesting.unitTests.store.T_Recovery.S302()",1,6,6
"org.apache.derbyTesting.unitTests.store.T_Recovery.S303()",2,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.S304()",1,3,3
"org.apache.derbyTesting.unitTests.store.T_Recovery.S999()",4,3,4
"org.apache.derbyTesting.unitTests.store.T_Recovery.T_Recovery()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.find(long)",5,6,7
"org.apache.derbyTesting.unitTests.store.T_Recovery.getConfig()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.key(int,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Recovery.register(long,long)",1,5,5
"org.apache.derbyTesting.unitTests.store.T_Recovery.runTests()",7,15,17
"org.apache.derbyTesting.unitTests.store.T_RowSource.T_RowSource()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RowSource.T_RowSource(int,int,int,FormatableBitSet)",1,2,2
"org.apache.derbyTesting.unitTests.store.T_RowSource.T_RowSource(int,int,int,boolean,Transaction)",1,3,3
"org.apache.derbyTesting.unitTests.store.T_RowSource.closeRowSource()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RowSource.getNextRowFromRowSource()",2,2,4
"org.apache.derbyTesting.unitTests.store.T_RowSource.getTemplate()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RowSource.getValidColumns()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RowSource.hasMoreRows()",2,1,2
"org.apache.derbyTesting.unitTests.store.T_RowSource.needsRowLocation()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RowSource.needsToClone()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RowSource.rowLocation(RowLocation)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_RowSource.setIntegerRow()",1,1,2
"org.apache.derbyTesting.unitTests.store.T_RowSource.setStringRow()",2,3,16
"org.apache.derbyTesting.unitTests.store.T_SecondaryIndexRow.T_SecondaryIndexRow()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SecondaryIndexRow.getRow()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SecondaryIndexRow.init(DataValueDescriptor[],RowLocation,int)",1,3,3
"org.apache.derbyTesting.unitTests.store.T_SecondaryIndexRow.toString()",1,1,3
"org.apache.derbyTesting.unitTests.store.T_SortController.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SortController.getSortDescendingInput()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SortController.runEachTest(AccessFactory,String)",2,3,8
"org.apache.derbyTesting.unitTests.store.T_SortController.runTests()",2,4,5
"org.apache.derbyTesting.unitTests.store.T_SortController.setSortBufferSize(String)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SortController.sortAllDuplicates(TransactionController)",1,1,4
"org.apache.derbyTesting.unitTests.store.T_SortController.sortBoundaries(TransactionController)",1,1,6
"org.apache.derbyTesting.unitTests.store.T_SortController.sortBufferCoverage(TransactionController)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SortController.sortDescending(TransactionController)",1,1,4
"org.apache.derbyTesting.unitTests.store.T_SortController.sortExample(TransactionController)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SortController.testSort(TransactionController,T_AccessRow[],T_AccessRow[],long)",3,22,24
"org.apache.derbyTesting.unitTests.store.T_StoreCostResult.getEstimatedCost()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StoreCostResult.getEstimatedRowCount()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StoreCostResult.setEstimatedCost(double)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StoreCostResult.setEstimatedRowCount(long)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StoreCostResult.toString()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StreamFile.SF001(int,int,int,boolean)",4,4,5
"org.apache.derbyTesting.unitTests.store.T_StreamFile.SF002(int)",8,11,12
"org.apache.derbyTesting.unitTests.store.T_StreamFile.T_StreamFile()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StreamFile.boot(boolean,Properties)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StreamFile.commonContainer()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_StreamFile.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StreamFile.joinSetupTest()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StreamFile.newTestObject()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_StreamFile.runTestSet()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_StreamFile.setupTest()",3,4,5
"org.apache.derbyTesting.unitTests.store.T_SumForIntCol.T_SumForIntCol(int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SumForIntCol.addToFreeList(DataValueDescriptor[],int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SumForIntCol.getArrayClone()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SumForIntCol.insertDuplicateKey(DataValueDescriptor[],DataValueDescriptor[])",1,1,1
"org.apache.derbyTesting.unitTests.store.T_SumForIntCol.insertNonDuplicateKey(DataValueDescriptor[])",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.T_TWC(ContextService,LockFactory,RawStoreFactory)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.abort()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.checkNullLockCount()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_TWC.commit()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.getId()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.logAndDo(Loggable)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.resetContext()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.rollbackToSavePoint(String,Object)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.setSavePoint(String,Object)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_TWC.startUserTransaction()",1,2,2
"org.apache.derbyTesting.unitTests.store.T_TWC.switchTransactionContext()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Undoable.T_Undoable()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Undoable.T_Undoable(GlobalTransactionId,int,int,int,int,boolean,int,boolean,int,boolean)",1,3,4
"org.apache.derbyTesting.unitTests.store.T_Undoable.doMe(Transaction,LogInstant,LimitObjectInput)",1,2,2
"org.apache.derbyTesting.unitTests.store.T_Undoable.generateUndo(Transaction,LimitObjectInput)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Undoable.getPreparedLog()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Undoable.getTypeFormatId()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Undoable.group()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Undoable.needsRedo(Transaction)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Undoable.readExternal(ObjectInput)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_Undoable.releaseResource(Transaction)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Undoable.toString()",2,2,6
"org.apache.derbyTesting.unitTests.store.T_Undoable.writeExternal(ObjectOutput)",1,2,3
"org.apache.derbyTesting.unitTests.store.T_Undoable.writeOptionalDataToBuffer()",1,6,7
"org.apache.derbyTesting.unitTests.store.T_Util.T_Util(RawStoreFactory,LockFactory,ContextService)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.getStringFromData(String,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.setEncryptionParam(Properties)",1,3,4
"org.apache.derbyTesting.unitTests.store.T_Util.setOpenMode(int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_abort(T_TWC)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_abort(Transaction)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_addContainer(T_TWC,long)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_addContainer(T_TWC,long,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_addContainer(T_TWC,long,int,int,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_addContainer(Transaction,long)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_addContainer(Transaction,long,Properties)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_addContainer(Transaction,long,int)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_addContainer(Transaction,long,int,int,int,boolean)",2,3,3
"org.apache.derbyTesting.unitTests.store.T_Util.t_addPage(ContainerHandle)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkEmptyPage(Page)",5,5,6
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetch(ContainerHandle,RecordHandle,String)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetch(Page,RecordHandle,String)",6,7,8
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetch(Page,RecordHandle,String,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetch(Page,RecordHandle,T_RawStoreRow)",4,5,5
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchBySlot(Page,int,String,boolean,boolean)",4,4,4
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchCol(Page,RecordHandle,int,int,String)",4,5,5
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchColFromSlot(Page,int,int,DataValueDescriptor,boolean,String)",6,6,6
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchColFromSlot(Page,int,int,DataValueDescriptor,boolean,String,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchDeleted(ContainerHandle,RecordHandle,String)",3,3,3
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchFail(ContainerHandle,RecordHandle)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchFirst(Page,String)",3,3,4
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchLast(Page,String)",4,4,6
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchNext(Page,RecordHandle,String)",4,4,5
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFetchPrevious(Page,RecordHandle,String)",5,5,7
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkFieldCount(Page,int,int)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkGetLatchedPage(ContainerHandle,long)",3,8,12
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkInvalidSavePoint(T_TWC,String)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkInvalidSavePoint(Transaction,String)",1,1,3
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkNullLockCount(Transaction)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkPageNumber(Page,long)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkRecordCount(Page,int,int)",3,3,3
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkStringLengthFetch(Page,int,int)",5,4,7
"org.apache.derbyTesting.unitTests.store.T_Util.t_checkUpdateCol(Page,RecordHandle,int,int,String)",3,4,4
"org.apache.derbyTesting.unitTests.store.T_Util.t_close(T_TWC)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_commit(T_TWC)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_commit(Transaction)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_dropContainer(Transaction,long,long)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_genRandomFile(String,String,int)",1,4,6
"org.apache.derbyTesting.unitTests.store.T_Util.t_getLastPage(ContainerHandle)",1,3,3
"org.apache.derbyTesting.unitTests.store.T_Util.t_getPage(ContainerHandle,long)",3,3,3
"org.apache.derbyTesting.unitTests.store.T_Util.t_insert(ContainerHandle,T_RawStoreRow)",3,5,5
"org.apache.derbyTesting.unitTests.store.T_Util.t_insert(Page,T_RawStoreRow)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_insertAtSlot(Page,int,T_RawStoreRow)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_insertAtSlot(Page,int,T_RawStoreRow,byte)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_insertAtSlot(Page,int,T_RawStoreRow,byte,int)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_openContainer(T_TWC,long,long,boolean)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_openContainer(Transaction,long,long,boolean)",2,2,3
"org.apache.derbyTesting.unitTests.store.T_Util.t_readOnlySlotOutOfRange(Page,int)",3,3,5
"org.apache.derbyTesting.unitTests.store.T_Util.t_removePage(ContainerHandle,Page)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_startGlobalTransaction(int,byte[],byte[])",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_startInternalTransaction()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_startTransaction()",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_startTransactionWithContext()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_Util.t_update(ContainerHandle,RecordHandle,T_RawStoreRow)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_Util.t_updateSlotOutOfRange(Page,int)",6,6,10
"org.apache.derbyTesting.unitTests.store.T_Util.t_wait(int)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_XA.T_XA()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_XA.XATest_1(commit_method)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_XA.XATest_2(commit_method)",7,7,9
"org.apache.derbyTesting.unitTests.store.T_XA.XATest_3(commit_method)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_XA.XATest_4(commit_method)",7,7,9
"org.apache.derbyTesting.unitTests.store.T_XA.XATest_5(commit_method)",15,15,16
"org.apache.derbyTesting.unitTests.store.T_XA.XATest_6(commit_method)",4,4,5
"org.apache.derbyTesting.unitTests.store.T_XA.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_XA.runTests()",2,6,7
"org.apache.derbyTesting.unitTests.store.T_b2i.createCongloms(TransactionController,int,boolean,boolean,int,T_CreateConglomRet)",1,3,5
"org.apache.derbyTesting.unitTests.store.T_b2i.createProperties(Properties,boolean,int,int,boolean,long,int)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_b2i.getModuleToTestProtocolName()",1,1,1
"org.apache.derbyTesting.unitTests.store.T_b2i.repeatString(String,int)",1,1,2
"org.apache.derbyTesting.unitTests.store.T_b2i.runTestSet()",3,28,29
"org.apache.derbyTesting.unitTests.store.T_b2i.setupTest()",1,2,3
"org.apache.derbyTesting.unitTests.store.T_b2i.t_001(TransactionController)",16,19,21
"org.apache.derbyTesting.unitTests.store.T_b2i.t_002(TransactionController)",10,15,15
"org.apache.derbyTesting.unitTests.store.T_b2i.t_003(TransactionController)",7,7,8
"org.apache.derbyTesting.unitTests.store.T_b2i.t_003_scan_test_cases(TransactionController,long,T_SecondaryIndexRow)",9,9,19
"org.apache.derbyTesting.unitTests.store.T_b2i.t_004(TransactionController)",1,1,1
"org.apache.derbyTesting.unitTests.store.T_b2i.t_005(TransactionController)",11,14,17
"org.apache.derbyTesting.unitTests.store.T_b2i.t_006(TransactionController)",6,6,14
"org.apache.derbyTesting.unitTests.store.T_b2i.t_007(TransactionController)",5,10,10
"org.apache.derbyTesting.unitTests.store.T_b2i.t_008(TransactionController)",5,12,12
"org.apache.derbyTesting.unitTests.store.T_b2i.t_009(TransactionController)",9,9,9
"org.apache.derbyTesting.unitTests.store.T_b2i.t_010(TransactionController)",2,2,5
"org.apache.derbyTesting.unitTests.store.T_b2i.t_011(TransactionController)",6,6,6
"org.apache.derbyTesting.unitTests.store.T_b2i.t_012(TransactionController)",8,8,8
"org.apache.derbyTesting.unitTests.store.T_b2i.t_013(TransactionController)",11,11,11
"org.apache.derbyTesting.unitTests.store.T_b2i.t_014(TransactionController)",2,4,4
"org.apache.derbyTesting.unitTests.store.T_b2i.t_015(TransactionController)",6,7,8
"org.apache.derbyTesting.unitTests.store.T_b2i.t_016(TransactionController)",6,8,10
"org.apache.derbyTesting.unitTests.store.T_b2i.t_017(TransactionController)",7,7,8
"org.apache.derbyTesting.unitTests.store.T_b2i.t_018(TransactionController)",7,7,8
"org.apache.derbyTesting.unitTests.store.T_b2i.t_019(TransactionController)",7,7,8
"org.apache.derbyTesting.unitTests.store.T_b2i.t_020(TransactionController)",2,2,2
"org.apache.derbyTesting.unitTests.store.T_b2i.t_ascdesc1_scan_test_cases(TransactionController,long,T_SecondaryIndexRow)",9,9,27
"org.apache.derbyTesting.unitTests.store.T_b2i.t_ascdesc_scan_test_cases(TransactionController,long,T_SecondaryIndexRow)",9,9,19
"org.apache.derbyTesting.unitTests.store.T_b2i.t_delete(TransactionController,long,DataValueDescriptor[],DataValueDescriptor[])",7,7,7
"org.apache.derbyTesting.unitTests.store.T_b2i.t_desc_scan_test_cases(TransactionController,long,T_SecondaryIndexRow)",9,9,19
"org.apache.derbyTesting.unitTests.store.T_b2i.t_perf(TransactionController)",3,3,3
"org.apache.derbyTesting.unitTests.store.T_b2i.t_scan(TransactionController,long,DataValueDescriptor[],DataValueDescriptor[],int,Qualifier[][],DataValueDescriptor[],int,int,int)",4,4,4
"org.apache.derbyTesting.unitTests.store.commit_method.commit(boolean,int,byte[],byte[],XATransactionController)",1,4,7
"org.apache.derbyTesting.unitTests.store.commit_method.commit_method(AccessFactory,boolean)",1,1,1
"org.apache.derbyTesting.unitTests.store.commit_method.rollback(int,byte[],byte[],XATransactionController)",1,4,7
"org.apache.derbyTesting.unitTests.util.BitUtil.clear(byte[],int)",3,1,3
"org.apache.derbyTesting.unitTests.util.BitUtil.get(byte[],int)",3,1,3
"org.apache.derbyTesting.unitTests.util.BitUtil.hexDump(byte[])",1,7,9
"org.apache.derbyTesting.unitTests.util.BitUtil.set(byte[],int)",3,1,3
"org.apache.derbyTesting.unitTests.util.MsgTrace.MsgTrace()",1,1,1
"org.apache.derbyTesting.unitTests.util.MsgTrace.run()",1,1,2
"org.apache.derbyTesting.unitTests.util.MsgTrace.trace(String)",1,1,1
"org.apache.derbyTesting.unitTests.util.MsgTrace.traceString(String)",1,1,2
"toursdb.insertMaps.insertRows(String,Connection)",1,1,4
"toursdb.insertMaps.main(String[])",1,3,3

