Complexity metrics,Qui, 26 out 2017 11:37:00 BRST
Method,ev(G),iv(G),v(G)
"org.apache.commons.io.ByteOrderMark.ByteOrderMark(String,int...)",3,2,5
"org.apache.commons.io.ByteOrderMark.equals(Object)",5,2,5
"org.apache.commons.io.ByteOrderMark.get(int)",1,1,1
"org.apache.commons.io.ByteOrderMark.getBytes()",1,1,2
"org.apache.commons.io.ByteOrderMark.getCharsetName()",1,1,1
"org.apache.commons.io.ByteOrderMark.hashCode()",1,1,2
"org.apache.commons.io.ByteOrderMark.length()",1,1,1
"org.apache.commons.io.ByteOrderMark.toString()",1,3,3
"org.apache.commons.io.CopyUtils.CopyUtils()",1,1,1
"org.apache.commons.io.CopyUtils.copy(InputStream,OutputStream)",1,2,2
"org.apache.commons.io.CopyUtils.copy(InputStream,Writer)",1,1,1
"org.apache.commons.io.CopyUtils.copy(InputStream,Writer,String)",1,1,1
"org.apache.commons.io.CopyUtils.copy(Reader,OutputStream)",1,1,1
"org.apache.commons.io.CopyUtils.copy(Reader,Writer)",1,2,2
"org.apache.commons.io.CopyUtils.copy(String,OutputStream)",1,1,1
"org.apache.commons.io.CopyUtils.copy(String,Writer)",1,1,1
"org.apache.commons.io.CopyUtils.copy(byte[],OutputStream)",1,1,1
"org.apache.commons.io.CopyUtils.copy(byte[],Writer)",1,1,1
"org.apache.commons.io.CopyUtils.copy(byte[],Writer,String)",1,1,1
"org.apache.commons.io.DirectoryWalker.CancelException.CancelException(File,int)",1,1,1
"org.apache.commons.io.DirectoryWalker.CancelException.CancelException(String,File,int)",1,1,1
"org.apache.commons.io.DirectoryWalker.CancelException.getDepth()",1,1,1
"org.apache.commons.io.DirectoryWalker.CancelException.getFile()",1,1,1
"org.apache.commons.io.DirectoryWalker.DirectoryWalker()",1,1,1
"org.apache.commons.io.DirectoryWalker.DirectoryWalker(FileFilter,int)",1,1,1
"org.apache.commons.io.DirectoryWalker.DirectoryWalker(IOFileFilter,IOFileFilter,int)",1,2,5
"org.apache.commons.io.DirectoryWalker.checkIfCancelled(File,int,Collection<T>)",2,1,2
"org.apache.commons.io.DirectoryWalker.filterDirectoryContents(File,int,File[])",1,1,1
"org.apache.commons.io.DirectoryWalker.handleCancelled(File,Collection<T>,CancelException)",1,1,1
"org.apache.commons.io.DirectoryWalker.handleDirectory(File,int,Collection<T>)",1,1,1
"org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(File,int,Collection<T>)",1,1,1
"org.apache.commons.io.DirectoryWalker.handleDirectoryStart(File,int,Collection<T>)",1,1,1
"org.apache.commons.io.DirectoryWalker.handleEnd(Collection<T>)",1,1,1
"org.apache.commons.io.DirectoryWalker.handleFile(File,int,Collection<T>)",1,1,1
"org.apache.commons.io.DirectoryWalker.handleIsCancelled(File,int,Collection<T>)",1,1,1
"org.apache.commons.io.DirectoryWalker.handleRestricted(File,int,Collection<T>)",1,1,1
"org.apache.commons.io.DirectoryWalker.handleStart(File,Collection<T>)",1,1,1
"org.apache.commons.io.DirectoryWalker.walk(File,Collection<T>)",2,2,3
"org.apache.commons.io.DirectoryWalker.walk(File,int,Collection<T>)",1,7,8
"org.apache.commons.io.EndianUtils.EndianUtils()",1,1,1
"org.apache.commons.io.EndianUtils.read(InputStream)",2,1,2
"org.apache.commons.io.EndianUtils.readSwappedDouble(InputStream)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedDouble(byte[],int)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedFloat(InputStream)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedFloat(byte[],int)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedInteger(InputStream)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedInteger(byte[],int)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedLong(InputStream)",1,2,2
"org.apache.commons.io.EndianUtils.readSwappedLong(byte[],int)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedShort(InputStream)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedShort(byte[],int)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(InputStream)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[],int)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(InputStream)",1,1,1
"org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[],int)",1,1,1
"org.apache.commons.io.EndianUtils.swapDouble(double)",1,1,1
"org.apache.commons.io.EndianUtils.swapFloat(float)",1,1,1
"org.apache.commons.io.EndianUtils.swapInteger(int)",1,1,1
"org.apache.commons.io.EndianUtils.swapLong(long)",1,1,1
"org.apache.commons.io.EndianUtils.swapShort(short)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedDouble(OutputStream,double)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[],int,double)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedFloat(OutputStream,float)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[],int,float)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedInteger(OutputStream,int)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[],int,int)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedLong(OutputStream,long)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedLong(byte[],int,long)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedShort(OutputStream,short)",1,1,1
"org.apache.commons.io.EndianUtils.writeSwappedShort(byte[],int,short)",1,1,1
"org.apache.commons.io.FileCleaner.exitWhenFinished()",1,1,1
"org.apache.commons.io.FileCleaner.getInstance()",1,1,1
"org.apache.commons.io.FileCleaner.getTrackCount()",1,1,1
"org.apache.commons.io.FileCleaner.track(File,Object)",1,1,1
"org.apache.commons.io.FileCleaner.track(File,Object,FileDeleteStrategy)",1,1,1
"org.apache.commons.io.FileCleaner.track(String,Object)",1,1,1
"org.apache.commons.io.FileCleaner.track(String,Object,FileDeleteStrategy)",1,1,1
"org.apache.commons.io.FileCleaningTracker.Reaper.Reaper()",1,1,1
"org.apache.commons.io.FileCleaningTracker.Reaper.run()",2,3,4
"org.apache.commons.io.FileCleaningTracker.Tracker.Tracker(String,FileDeleteStrategy,Object,ReferenceQueue<? super Object>)",1,1,2
"org.apache.commons.io.FileCleaningTracker.Tracker.delete()",1,1,1
"org.apache.commons.io.FileCleaningTracker.addTracker(String,Object,FileDeleteStrategy)",2,2,3
"org.apache.commons.io.FileCleaningTracker.exitWhenFinished()",1,2,2
"org.apache.commons.io.FileCleaningTracker.getTrackCount()",1,1,1
"org.apache.commons.io.FileCleaningTracker.track(File,Object)",1,1,1
"org.apache.commons.io.FileCleaningTracker.track(File,Object,FileDeleteStrategy)",2,1,2
"org.apache.commons.io.FileCleaningTracker.track(String,Object)",1,1,1
"org.apache.commons.io.FileCleaningTracker.track(String,Object,FileDeleteStrategy)",2,1,2
"org.apache.commons.io.FileDeleteStrategy.FileDeleteStrategy(String)",1,1,1
"org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy.ForceFileDeleteStrategy()",1,1,1
"org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy.doDelete(File)",1,1,1
"org.apache.commons.io.FileDeleteStrategy.delete(File)",2,2,3
"org.apache.commons.io.FileDeleteStrategy.deleteQuietly(File)",2,2,4
"org.apache.commons.io.FileDeleteStrategy.doDelete(File)",1,1,1
"org.apache.commons.io.FileDeleteStrategy.toString()",1,1,1
"org.apache.commons.io.FileExistsException.FileExistsException()",1,1,1
"org.apache.commons.io.FileExistsException.FileExistsException(File)",1,1,1
"org.apache.commons.io.FileExistsException.FileExistsException(String)",1,1,1
"org.apache.commons.io.FileSystemUtils.FileSystemUtils()",1,1,1
"org.apache.commons.io.FileSystemUtils.freeSpace(String)",1,1,1
"org.apache.commons.io.FileSystemUtils.freeSpaceKb()",1,1,1
"org.apache.commons.io.FileSystemUtils.freeSpaceKb(String)",1,1,1
"org.apache.commons.io.FileSystemUtils.freeSpaceKb(String,long)",1,1,1
"org.apache.commons.io.FileSystemUtils.freeSpaceKb(long)",1,1,1
"org.apache.commons.io.FileSystemUtils.freeSpaceOS(String,int,boolean,long)",7,6,8
"org.apache.commons.io.FileSystemUtils.freeSpaceUnix(String,boolean,boolean,long)",5,4,9
"org.apache.commons.io.FileSystemUtils.freeSpaceWindows(String,long)",3,4,5
"org.apache.commons.io.FileSystemUtils.openProcess(String[])",1,1,1
"org.apache.commons.io.FileSystemUtils.parseBytes(String,String)",2,1,3
"org.apache.commons.io.FileSystemUtils.parseDir(String,String)",6,8,11
"org.apache.commons.io.FileSystemUtils.performCommand(String[],int,long)",3,7,7
"org.apache.commons.io.FileUtils.FileUtils()",1,1,1
"org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)",1,4,4
"org.apache.commons.io.FileUtils.checksum(File,Checksum)",2,1,2
"org.apache.commons.io.FileUtils.checksumCRC32(File)",1,1,1
"org.apache.commons.io.FileUtils.cleanDirectory(File)",5,2,7
"org.apache.commons.io.FileUtils.cleanDirectoryOnExit(File)",5,2,7
"org.apache.commons.io.FileUtils.contentEquals(File,File)",6,2,7
"org.apache.commons.io.FileUtils.convertFileCollectionToFileArray(Collection<File>)",1,1,1
"org.apache.commons.io.FileUtils.copyDirectory(File,File)",1,1,1
"org.apache.commons.io.FileUtils.copyDirectory(File,File,FileFilter)",1,1,1
"org.apache.commons.io.FileUtils.copyDirectory(File,File,FileFilter,boolean)",6,5,11
"org.apache.commons.io.FileUtils.copyDirectory(File,File,boolean)",1,1,1
"org.apache.commons.io.FileUtils.copyDirectoryToDirectory(File,File)",5,3,7
"org.apache.commons.io.FileUtils.copyFile(File,File)",1,1,1
"org.apache.commons.io.FileUtils.copyFile(File,File,boolean)",9,4,11
"org.apache.commons.io.FileUtils.copyFileToDirectory(File,File)",1,1,1
"org.apache.commons.io.FileUtils.copyFileToDirectory(File,File,boolean)",3,2,4
"org.apache.commons.io.FileUtils.copyInputStreamToFile(InputStream,File)",1,1,1
"org.apache.commons.io.FileUtils.copyURLToFile(URL,File)",1,1,1
"org.apache.commons.io.FileUtils.copyURLToFile(URL,File,int,int)",1,1,1
"org.apache.commons.io.FileUtils.decodeUrl(String)",4,8,9
"org.apache.commons.io.FileUtils.deleteDirectory(File)",3,2,4
"org.apache.commons.io.FileUtils.deleteDirectoryOnExit(File)",2,2,3
"org.apache.commons.io.FileUtils.deleteQuietly(File)",2,2,5
"org.apache.commons.io.FileUtils.doCopyDirectory(File,File,FileFilter,boolean,List<String>)",6,8,12
"org.apache.commons.io.FileUtils.doCopyFile(File,File,boolean)",3,4,7
"org.apache.commons.io.FileUtils.forceDelete(File)",4,2,4
"org.apache.commons.io.FileUtils.forceDeleteOnExit(File)",1,2,2
"org.apache.commons.io.FileUtils.forceMkdir(File)",5,3,5
"org.apache.commons.io.FileUtils.getTempDirectory()",1,1,1
"org.apache.commons.io.FileUtils.getTempDirectoryPath()",1,1,1
"org.apache.commons.io.FileUtils.getUserDirectory()",1,1,1
"org.apache.commons.io.FileUtils.getUserDirectoryPath()",1,1,1
"org.apache.commons.io.FileUtils.innerListFiles(Collection<File>,File,IOFileFilter)",1,4,4
"org.apache.commons.io.FileUtils.isFileNewer(File,Date)",2,1,2
"org.apache.commons.io.FileUtils.isFileNewer(File,File)",3,1,3
"org.apache.commons.io.FileUtils.isFileNewer(File,long)",3,1,3
"org.apache.commons.io.FileUtils.isFileOlder(File,Date)",2,1,2
"org.apache.commons.io.FileUtils.isFileOlder(File,File)",3,1,3
"org.apache.commons.io.FileUtils.isFileOlder(File,long)",3,1,3
"org.apache.commons.io.FileUtils.isSymlink(File)",4,2,5
"org.apache.commons.io.FileUtils.iterateFiles(File,IOFileFilter,IOFileFilter)",1,1,1
"org.apache.commons.io.FileUtils.iterateFiles(File,String[],boolean)",1,1,1
"org.apache.commons.io.FileUtils.lineIterator(File)",1,1,1
"org.apache.commons.io.FileUtils.lineIterator(File,String)",1,3,3
"org.apache.commons.io.FileUtils.listFiles(File,IOFileFilter,IOFileFilter)",3,2,4
"org.apache.commons.io.FileUtils.listFiles(File,String[],boolean)",1,2,3
"org.apache.commons.io.FileUtils.moveDirectory(File,File)",8,2,8
"org.apache.commons.io.FileUtils.moveDirectoryToDirectory(File,File,boolean)",5,3,7
"org.apache.commons.io.FileUtils.moveFile(File,File)",9,3,9
"org.apache.commons.io.FileUtils.moveFileToDirectory(File,File,boolean)",5,3,7
"org.apache.commons.io.FileUtils.moveToDirectory(File,File,boolean)",4,2,5
"org.apache.commons.io.FileUtils.openInputStream(File)",4,2,4
"org.apache.commons.io.FileUtils.openOutputStream(File)",6,4,7
"org.apache.commons.io.FileUtils.readFileToByteArray(File)",1,1,1
"org.apache.commons.io.FileUtils.readFileToString(File)",1,1,1
"org.apache.commons.io.FileUtils.readFileToString(File,String)",1,1,1
"org.apache.commons.io.FileUtils.readLines(File)",1,1,1
"org.apache.commons.io.FileUtils.readLines(File,String)",1,1,1
"org.apache.commons.io.FileUtils.sizeOf(File)",3,2,3
"org.apache.commons.io.FileUtils.sizeOfDirectory(File)",4,2,5
"org.apache.commons.io.FileUtils.toFile(URL)",2,3,3
"org.apache.commons.io.FileUtils.toFiles(URL[])",5,3,6
"org.apache.commons.io.FileUtils.toSuffixes(String[])",1,1,2
"org.apache.commons.io.FileUtils.toURLs(File[])",1,2,2
"org.apache.commons.io.FileUtils.touch(File)",2,2,3
"org.apache.commons.io.FileUtils.waitFor(File,int)",4,2,6
"org.apache.commons.io.FileUtils.write(File,CharSequence)",1,2,2
"org.apache.commons.io.FileUtils.write(File,CharSequence,String)",1,2,2
"org.apache.commons.io.FileUtils.writeByteArrayToFile(File,byte[])",1,1,1
"org.apache.commons.io.FileUtils.writeLines(File,Collection<?>)",1,1,1
"org.apache.commons.io.FileUtils.writeLines(File,Collection<?>,String)",1,1,1
"org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>)",1,1,1
"org.apache.commons.io.FileUtils.writeLines(File,String,Collection<?>,String)",1,1,1
"org.apache.commons.io.FileUtils.writeStringToFile(File,String)",1,1,1
"org.apache.commons.io.FileUtils.writeStringToFile(File,String,String)",1,1,1
"org.apache.commons.io.FilenameUtils.FilenameUtils()",1,1,1
"org.apache.commons.io.FilenameUtils.concat(String,String)",6,4,6
"org.apache.commons.io.FilenameUtils.doGetFullPath(String,boolean)",6,4,8
"org.apache.commons.io.FilenameUtils.doGetPath(String,int)",4,3,6
"org.apache.commons.io.FilenameUtils.doNormalize(String,char,boolean)",12,9,31
"org.apache.commons.io.FilenameUtils.equals(String,String)",1,1,1
"org.apache.commons.io.FilenameUtils.equals(String,String,boolean,IOCase)",4,2,8
"org.apache.commons.io.FilenameUtils.equalsNormalized(String,String)",1,1,1
"org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(String,String)",1,1,1
"org.apache.commons.io.FilenameUtils.equalsOnSystem(String,String)",1,1,1
"org.apache.commons.io.FilenameUtils.getBaseName(String)",1,1,1
"org.apache.commons.io.FilenameUtils.getExtension(String)",3,2,3
"org.apache.commons.io.FilenameUtils.getFullPath(String)",1,1,1
"org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(String)",1,1,1
"org.apache.commons.io.FilenameUtils.getName(String)",2,1,2
"org.apache.commons.io.FilenameUtils.getPath(String)",1,1,1
"org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(String)",1,1,1
"org.apache.commons.io.FilenameUtils.getPrefix(String)",4,1,4
"org.apache.commons.io.FilenameUtils.getPrefixLength(String)",13,8,26
"org.apache.commons.io.FilenameUtils.indexOfExtension(String)",2,1,3
"org.apache.commons.io.FilenameUtils.indexOfLastSeparator(String)",2,1,2
"org.apache.commons.io.FilenameUtils.isExtension(String,Collection<String>)",5,4,6
"org.apache.commons.io.FilenameUtils.isExtension(String,String)",3,3,4
"org.apache.commons.io.FilenameUtils.isExtension(String,String[])",5,3,6
"org.apache.commons.io.FilenameUtils.isSeparator(char)",1,1,2
"org.apache.commons.io.FilenameUtils.isSystemWindows()",1,1,1
"org.apache.commons.io.FilenameUtils.normalize(String)",1,1,1
"org.apache.commons.io.FilenameUtils.normalize(String,boolean)",1,1,2
"org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(String)",1,1,1
"org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(String,boolean)",1,1,2
"org.apache.commons.io.FilenameUtils.removeExtension(String)",3,2,3
"org.apache.commons.io.FilenameUtils.separatorsToSystem(String)",3,2,3
"org.apache.commons.io.FilenameUtils.separatorsToUnix(String)",2,2,3
"org.apache.commons.io.FilenameUtils.separatorsToWindows(String)",2,2,3
"org.apache.commons.io.FilenameUtils.splitOnTokens(String)",2,10,12
"org.apache.commons.io.FilenameUtils.wildcardMatch(String,String)",1,1,1
"org.apache.commons.io.FilenameUtils.wildcardMatch(String,String,IOCase)",12,10,19
"org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(String,String)",1,1,1
"org.apache.commons.io.HexDump.HexDump()",1,1,1
"org.apache.commons.io.HexDump.dump(StringBuilder,byte)",1,2,2
"org.apache.commons.io.HexDump.dump(StringBuilder,long)",1,2,2
"org.apache.commons.io.HexDump.dump(byte[],long,OutputStream,int)",3,6,11
"org.apache.commons.io.IOCase.IOCase(String,boolean)",1,1,1
"org.apache.commons.io.IOCase.checkCompareTo(String,String)",2,2,4
"org.apache.commons.io.IOCase.checkEndsWith(String,String)",1,1,1
"org.apache.commons.io.IOCase.checkEquals(String,String)",2,2,4
"org.apache.commons.io.IOCase.checkIndexOf(String,int,String)",4,3,4
"org.apache.commons.io.IOCase.checkRegionMatches(String,int,String)",1,1,1
"org.apache.commons.io.IOCase.checkStartsWith(String,String)",1,1,1
"org.apache.commons.io.IOCase.forName(String)",4,1,4
"org.apache.commons.io.IOCase.getName()",1,1,1
"org.apache.commons.io.IOCase.isCaseSensitive()",1,1,1
"org.apache.commons.io.IOCase.readResolve()",1,1,1
"org.apache.commons.io.IOCase.toString()",1,1,1
"org.apache.commons.io.IOExceptionWithCause.IOExceptionWithCause(String,Throwable)",1,1,1
"org.apache.commons.io.IOExceptionWithCause.IOExceptionWithCause(Throwable)",1,2,2
"org.apache.commons.io.IOUtils.IOUtils()",1,1,1
"org.apache.commons.io.IOUtils.closeQuietly(Closeable)",1,2,3
"org.apache.commons.io.IOUtils.closeQuietly(InputStream)",1,1,1
"org.apache.commons.io.IOUtils.closeQuietly(OutputStream)",1,1,1
"org.apache.commons.io.IOUtils.closeQuietly(Reader)",1,1,1
"org.apache.commons.io.IOUtils.closeQuietly(Socket)",1,2,3
"org.apache.commons.io.IOUtils.closeQuietly(Writer)",1,1,1
"org.apache.commons.io.IOUtils.contentEquals(InputStream,InputStream)",3,2,5
"org.apache.commons.io.IOUtils.contentEquals(Reader,Reader)",3,2,5
"org.apache.commons.io.IOUtils.copy(InputStream,OutputStream)",2,1,2
"org.apache.commons.io.IOUtils.copy(InputStream,Writer)",1,1,1
"org.apache.commons.io.IOUtils.copy(InputStream,Writer,String)",1,2,2
"org.apache.commons.io.IOUtils.copy(Reader,OutputStream)",1,1,1
"org.apache.commons.io.IOUtils.copy(Reader,OutputStream,String)",1,2,2
"org.apache.commons.io.IOUtils.copy(Reader,Writer)",2,1,2
"org.apache.commons.io.IOUtils.copyLarge(InputStream,OutputStream)",1,2,2
"org.apache.commons.io.IOUtils.copyLarge(Reader,Writer)",1,2,2
"org.apache.commons.io.IOUtils.lineIterator(InputStream,String)",1,1,2
"org.apache.commons.io.IOUtils.lineIterator(Reader)",1,1,1
"org.apache.commons.io.IOUtils.readLines(InputStream)",1,1,1
"org.apache.commons.io.IOUtils.readLines(InputStream,String)",2,2,2
"org.apache.commons.io.IOUtils.readLines(Reader)",1,2,2
"org.apache.commons.io.IOUtils.skip(InputStream,long)",4,2,5
"org.apache.commons.io.IOUtils.skip(Reader,long)",4,2,5
"org.apache.commons.io.IOUtils.skipFully(InputStream,long)",3,1,3
"org.apache.commons.io.IOUtils.skipFully(Reader,long)",2,1,2
"org.apache.commons.io.IOUtils.toBufferedInputStream(InputStream)",1,1,1
"org.apache.commons.io.IOUtils.toByteArray(InputStream)",1,1,1
"org.apache.commons.io.IOUtils.toByteArray(Reader)",1,1,1
"org.apache.commons.io.IOUtils.toByteArray(Reader,String)",1,1,1
"org.apache.commons.io.IOUtils.toByteArray(String)",1,1,1
"org.apache.commons.io.IOUtils.toCharArray(InputStream)",1,1,1
"org.apache.commons.io.IOUtils.toCharArray(InputStream,String)",1,1,1
"org.apache.commons.io.IOUtils.toCharArray(Reader)",1,1,1
"org.apache.commons.io.IOUtils.toInputStream(CharSequence)",1,1,1
"org.apache.commons.io.IOUtils.toInputStream(CharSequence,String)",1,1,1
"org.apache.commons.io.IOUtils.toInputStream(String)",1,1,1
"org.apache.commons.io.IOUtils.toInputStream(String,String)",1,2,2
"org.apache.commons.io.IOUtils.toString(InputStream)",1,1,1
"org.apache.commons.io.IOUtils.toString(InputStream,String)",1,1,1
"org.apache.commons.io.IOUtils.toString(Reader)",1,1,1
"org.apache.commons.io.IOUtils.toString(byte[])",1,1,1
"org.apache.commons.io.IOUtils.toString(byte[],String)",2,1,2
"org.apache.commons.io.IOUtils.write(CharSequence,OutputStream)",1,2,2
"org.apache.commons.io.IOUtils.write(CharSequence,OutputStream,String)",1,2,2
"org.apache.commons.io.IOUtils.write(CharSequence,Writer)",1,2,2
"org.apache.commons.io.IOUtils.write(String,OutputStream)",1,2,2
"org.apache.commons.io.IOUtils.write(String,OutputStream,String)",1,3,3
"org.apache.commons.io.IOUtils.write(String,Writer)",1,2,2
"org.apache.commons.io.IOUtils.write(StringBuffer,OutputStream)",1,2,2
"org.apache.commons.io.IOUtils.write(StringBuffer,OutputStream,String)",1,3,3
"org.apache.commons.io.IOUtils.write(StringBuffer,Writer)",1,2,2
"org.apache.commons.io.IOUtils.write(byte[],OutputStream)",1,2,2
"org.apache.commons.io.IOUtils.write(byte[],Writer)",1,2,2
"org.apache.commons.io.IOUtils.write(byte[],Writer,String)",1,3,3
"org.apache.commons.io.IOUtils.write(char[],OutputStream)",1,2,2
"org.apache.commons.io.IOUtils.write(char[],OutputStream,String)",1,3,3
"org.apache.commons.io.IOUtils.write(char[],Writer)",1,2,2
"org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream)",2,3,5
"org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,OutputStream,String)",3,4,6
"org.apache.commons.io.IOUtils.writeLines(Collection<?>,String,Writer)",2,3,5
"org.apache.commons.io.LineIterator.LineIterator(Reader)",2,1,3
"org.apache.commons.io.LineIterator.close()",1,1,1
"org.apache.commons.io.LineIterator.closeQuietly(LineIterator)",1,2,2
"org.apache.commons.io.LineIterator.hasNext()",6,6,7
"org.apache.commons.io.LineIterator.isValidLine(String)",1,1,1
"org.apache.commons.io.LineIterator.next()",1,1,1
"org.apache.commons.io.LineIterator.nextLine()",2,1,2
"org.apache.commons.io.LineIterator.remove()",1,1,1
"org.apache.commons.io.TaggedIOException.TaggedIOException(IOException,Serializable)",1,1,1
"org.apache.commons.io.TaggedIOException.getCause()",1,1,1
"org.apache.commons.io.TaggedIOException.getTag()",1,1,1
"org.apache.commons.io.TaggedIOException.isTaggedWith(Throwable,Object)",1,3,3
"org.apache.commons.io.TaggedIOException.throwCauseIfTaggedWith(Throwable,Object)",2,2,2
"org.apache.commons.io.ThreadMonitor.ThreadMonitor(Thread,long)",1,1,1
"org.apache.commons.io.ThreadMonitor.run()",1,1,2
"org.apache.commons.io.ThreadMonitor.start(Thread,long)",1,2,2
"org.apache.commons.io.ThreadMonitor.start(long)",1,1,1
"org.apache.commons.io.ThreadMonitor.stop(Thread)",1,2,2
"org.apache.commons.io.comparator.AbstractFileComparator.sort(File...)",1,2,2
"org.apache.commons.io.comparator.AbstractFileComparator.sort(List<File>)",1,2,2
"org.apache.commons.io.comparator.AbstractFileComparator.toString()",1,1,1
"org.apache.commons.io.comparator.CompositeFileComparator.CompositeFileComparator(Comparator<File>...)",1,2,2
"org.apache.commons.io.comparator.CompositeFileComparator.CompositeFileComparator(Iterable<Comparator<File>>)",1,3,3
"org.apache.commons.io.comparator.CompositeFileComparator.compare(File,File)",3,2,3
"org.apache.commons.io.comparator.CompositeFileComparator.toString()",1,3,3
"org.apache.commons.io.comparator.DefaultFileComparator.compare(File,File)",1,1,1
"org.apache.commons.io.comparator.DirectoryFileComparator.compare(File,File)",1,1,1
"org.apache.commons.io.comparator.DirectoryFileComparator.getType(File)",2,1,2
"org.apache.commons.io.comparator.ExtensionFileComparator.ExtensionFileComparator()",1,1,1
"org.apache.commons.io.comparator.ExtensionFileComparator.ExtensionFileComparator(IOCase)",1,1,2
"org.apache.commons.io.comparator.ExtensionFileComparator.compare(File,File)",1,1,1
"org.apache.commons.io.comparator.ExtensionFileComparator.toString()",1,1,1
"org.apache.commons.io.comparator.LastModifiedFileComparator.compare(File,File)",3,1,3
"org.apache.commons.io.comparator.NameFileComparator.NameFileComparator()",1,1,1
"org.apache.commons.io.comparator.NameFileComparator.NameFileComparator(IOCase)",1,1,2
"org.apache.commons.io.comparator.NameFileComparator.compare(File,File)",1,1,1
"org.apache.commons.io.comparator.NameFileComparator.toString()",1,1,1
"org.apache.commons.io.comparator.PathFileComparator.PathFileComparator()",1,1,1
"org.apache.commons.io.comparator.PathFileComparator.PathFileComparator(IOCase)",1,1,2
"org.apache.commons.io.comparator.PathFileComparator.compare(File,File)",1,1,1
"org.apache.commons.io.comparator.PathFileComparator.toString()",1,1,1
"org.apache.commons.io.comparator.ReverseComparator.ReverseComparator(Comparator<File>)",2,1,2
"org.apache.commons.io.comparator.ReverseComparator.compare(File,File)",1,1,1
"org.apache.commons.io.comparator.ReverseComparator.toString()",1,1,1
"org.apache.commons.io.comparator.SizeFileComparator.SizeFileComparator()",1,1,1
"org.apache.commons.io.comparator.SizeFileComparator.SizeFileComparator(boolean)",1,1,1
"org.apache.commons.io.comparator.SizeFileComparator.compare(File,File)",3,7,9
"org.apache.commons.io.comparator.SizeFileComparator.toString()",1,1,1
"org.apache.commons.io.filefilter.AbstractFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.AbstractFileFilter.accept(File,String)",1,1,1
"org.apache.commons.io.filefilter.AbstractFileFilter.toString()",1,1,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(Date)",1,1,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(Date,boolean)",1,1,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(File)",1,1,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(File,boolean)",1,1,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(long)",1,1,1
"org.apache.commons.io.filefilter.AgeFileFilter.AgeFileFilter(long,boolean)",1,1,1
"org.apache.commons.io.filefilter.AgeFileFilter.accept(File)",1,1,2
"org.apache.commons.io.filefilter.AgeFileFilter.toString()",1,1,2
"org.apache.commons.io.filefilter.AndFileFilter.AndFileFilter()",1,1,1
"org.apache.commons.io.filefilter.AndFileFilter.AndFileFilter(IOFileFilter,IOFileFilter)",2,1,3
"org.apache.commons.io.filefilter.AndFileFilter.AndFileFilter(List<IOFileFilter>)",1,1,2
"org.apache.commons.io.filefilter.AndFileFilter.accept(File)",4,2,4
"org.apache.commons.io.filefilter.AndFileFilter.accept(File,String)",4,2,4
"org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(IOFileFilter)",1,1,1
"org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()",1,1,1
"org.apache.commons.io.filefilter.AndFileFilter.removeFileFilter(IOFileFilter)",1,1,1
"org.apache.commons.io.filefilter.AndFileFilter.setFileFilters(List<IOFileFilter>)",1,1,1
"org.apache.commons.io.filefilter.AndFileFilter.toString()",1,5,5
"org.apache.commons.io.filefilter.CanReadFileFilter.CanReadFileFilter()",1,1,1
"org.apache.commons.io.filefilter.CanReadFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.CanWriteFileFilter.CanWriteFileFilter()",1,1,1
"org.apache.commons.io.filefilter.CanWriteFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.DelegateFileFilter.DelegateFileFilter(FileFilter)",2,1,2
"org.apache.commons.io.filefilter.DelegateFileFilter.DelegateFileFilter(FilenameFilter)",2,1,2
"org.apache.commons.io.filefilter.DelegateFileFilter.accept(File)",2,2,2
"org.apache.commons.io.filefilter.DelegateFileFilter.accept(File,String)",2,2,2
"org.apache.commons.io.filefilter.DelegateFileFilter.toString()",1,2,2
"org.apache.commons.io.filefilter.DirectoryFileFilter.DirectoryFileFilter()",1,1,1
"org.apache.commons.io.filefilter.DirectoryFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.EmptyFileFilter.EmptyFileFilter()",1,1,1
"org.apache.commons.io.filefilter.EmptyFileFilter.accept(File)",2,2,3
"org.apache.commons.io.filefilter.FalseFileFilter.FalseFileFilter()",1,1,1
"org.apache.commons.io.filefilter.FalseFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.FalseFileFilter.accept(File,String)",1,1,1
"org.apache.commons.io.filefilter.FileFileFilter.FileFileFilter()",1,1,1
"org.apache.commons.io.filefilter.FileFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.FileFilterUtils()",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(Date)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(Date,boolean)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(File)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(File,boolean)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(long,boolean)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.and(IOFileFilter...)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(IOFileFilter,IOFileFilter)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(FileFilter)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.asFileFilter(FilenameFilter)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.fileFileFilter()",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,File...)",5,3,6
"org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,Iterable<File>)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.filter(IOFileFilter,Iterable<File>,T)",5,4,6
"org.apache.commons.io.filefilter.FileFilterUtils.filterList(IOFileFilter,File...)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.filterList(IOFileFilter,Iterable<File>)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.filterSet(IOFileFilter,File...)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.filterSet(IOFileFilter,Iterable<File>)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(String,long)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[],long)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(IOFileFilter)",2,2,2
"org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(IOFileFilter)",2,1,2
"org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(IOFileFilter)",2,1,2
"org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(IOFileFilter)",2,2,2
"org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(String,IOCase)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(IOFileFilter)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.or(IOFileFilter...)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(IOFileFilter,IOFileFilter)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(String,IOCase)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(long,boolean)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long,long)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(String,IOCase)",1,1,1
"org.apache.commons.io.filefilter.FileFilterUtils.toList(IOFileFilter...)",4,2,4
"org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()",1,1,1
"org.apache.commons.io.filefilter.HiddenFileFilter.HiddenFileFilter()",1,1,1
"org.apache.commons.io.filefilter.HiddenFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.MagicNumberFileFilter.MagicNumberFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.MagicNumberFileFilter.MagicNumberFileFilter(String,long)",4,1,4
"org.apache.commons.io.filefilter.MagicNumberFileFilter.MagicNumberFileFilter(byte[])",1,1,1
"org.apache.commons.io.filefilter.MagicNumberFileFilter.MagicNumberFileFilter(byte[],long)",4,1,4
"org.apache.commons.io.filefilter.MagicNumberFileFilter.accept(File)",3,4,6
"org.apache.commons.io.filefilter.MagicNumberFileFilter.toString()",1,1,1
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(List<String>)",1,1,1
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(List<String>,IOCase)",2,1,3
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(String,IOCase)",2,1,3
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(String[])",1,1,1
"org.apache.commons.io.filefilter.NameFileFilter.NameFileFilter(String[],IOCase)",2,1,3
"org.apache.commons.io.filefilter.NameFileFilter.accept(File)",3,2,3
"org.apache.commons.io.filefilter.NameFileFilter.accept(File,String)",3,2,3
"org.apache.commons.io.filefilter.NameFileFilter.toString()",1,4,4
"org.apache.commons.io.filefilter.NotFileFilter.NotFileFilter(IOFileFilter)",2,1,2
"org.apache.commons.io.filefilter.NotFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.NotFileFilter.accept(File,String)",1,1,1
"org.apache.commons.io.filefilter.NotFileFilter.toString()",1,1,1
"org.apache.commons.io.filefilter.OrFileFilter.OrFileFilter()",1,1,1
"org.apache.commons.io.filefilter.OrFileFilter.OrFileFilter(IOFileFilter,IOFileFilter)",2,1,3
"org.apache.commons.io.filefilter.OrFileFilter.OrFileFilter(List<IOFileFilter>)",1,1,2
"org.apache.commons.io.filefilter.OrFileFilter.accept(File)",3,2,3
"org.apache.commons.io.filefilter.OrFileFilter.accept(File,String)",3,2,3
"org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(IOFileFilter)",1,1,1
"org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()",1,1,1
"org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(IOFileFilter)",1,1,1
"org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(List<IOFileFilter>)",1,1,1
"org.apache.commons.io.filefilter.OrFileFilter.toString()",1,5,5
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(List<String>)",1,1,1
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(List<String>,IOCase)",2,1,3
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(String,IOCase)",2,1,3
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(String[])",1,1,1
"org.apache.commons.io.filefilter.PrefixFileFilter.PrefixFileFilter(String[],IOCase)",2,1,3
"org.apache.commons.io.filefilter.PrefixFileFilter.accept(File)",3,2,3
"org.apache.commons.io.filefilter.PrefixFileFilter.accept(File,String)",3,2,3
"org.apache.commons.io.filefilter.PrefixFileFilter.toString()",1,4,4
"org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter(Pattern)",2,1,2
"org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter(String)",2,1,2
"org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter(String,IOCase)",2,2,4
"org.apache.commons.io.filefilter.RegexFileFilter.RegexFileFilter(String,int)",2,1,2
"org.apache.commons.io.filefilter.RegexFileFilter.accept(File,String)",1,1,1
"org.apache.commons.io.filefilter.SizeFileFilter.SizeFileFilter(long)",1,1,1
"org.apache.commons.io.filefilter.SizeFileFilter.SizeFileFilter(long,boolean)",2,1,2
"org.apache.commons.io.filefilter.SizeFileFilter.accept(File)",1,1,2
"org.apache.commons.io.filefilter.SizeFileFilter.toString()",1,1,2
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(List<String>)",1,1,1
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(List<String>,IOCase)",2,1,3
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(String,IOCase)",2,1,3
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(String[])",1,1,1
"org.apache.commons.io.filefilter.SuffixFileFilter.SuffixFileFilter(String[],IOCase)",2,1,3
"org.apache.commons.io.filefilter.SuffixFileFilter.accept(File)",3,2,3
"org.apache.commons.io.filefilter.SuffixFileFilter.accept(File,String)",3,2,3
"org.apache.commons.io.filefilter.SuffixFileFilter.toString()",1,4,4
"org.apache.commons.io.filefilter.TrueFileFilter.TrueFileFilter()",1,1,1
"org.apache.commons.io.filefilter.TrueFileFilter.accept(File)",1,1,1
"org.apache.commons.io.filefilter.TrueFileFilter.accept(File,String)",1,1,1
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(List<String>)",1,1,1
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(List<String>,IOCase)",2,1,3
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(String)",1,1,1
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(String,IOCase)",2,1,3
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(String[])",1,1,1
"org.apache.commons.io.filefilter.WildcardFileFilter.WildcardFileFilter(String[],IOCase)",2,1,3
"org.apache.commons.io.filefilter.WildcardFileFilter.accept(File)",3,2,3
"org.apache.commons.io.filefilter.WildcardFileFilter.accept(File,String)",3,2,3
"org.apache.commons.io.filefilter.WildcardFileFilter.toString()",1,4,4
"org.apache.commons.io.filefilter.WildcardFilter.WildcardFilter(List<String>)",2,1,2
"org.apache.commons.io.filefilter.WildcardFilter.WildcardFilter(String)",2,1,2
"org.apache.commons.io.filefilter.WildcardFilter.WildcardFilter(String[])",2,1,2
"org.apache.commons.io.filefilter.WildcardFilter.accept(File)",4,2,4
"org.apache.commons.io.filefilter.WildcardFilter.accept(File,String)",4,3,5
"org.apache.commons.io.input.AutoCloseInputStream.AutoCloseInputStream(InputStream)",1,1,1
"org.apache.commons.io.input.AutoCloseInputStream.afterRead(int)",1,2,2
"org.apache.commons.io.input.AutoCloseInputStream.close()",1,1,1
"org.apache.commons.io.input.AutoCloseInputStream.finalize()",1,1,1
"org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream)",1,1,1
"org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream,ByteOrderMark...)",1,1,1
"org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream,boolean)",1,1,1
"org.apache.commons.io.input.BOMInputStream.BOMInputStream(InputStream,boolean,ByteOrderMark...)",2,1,3
"org.apache.commons.io.input.BOMInputStream.find()",3,2,3
"org.apache.commons.io.input.BOMInputStream.getBOM()",5,4,7
"org.apache.commons.io.input.BOMInputStream.getBOMCharsetName()",1,2,2
"org.apache.commons.io.input.BOMInputStream.hasBOM()",1,1,1
"org.apache.commons.io.input.BOMInputStream.hasBOM(ByteOrderMark)",2,2,3
"org.apache.commons.io.input.BOMInputStream.mark(int)",1,1,1
"org.apache.commons.io.input.BOMInputStream.matches(ByteOrderMark)",4,2,4
"org.apache.commons.io.input.BOMInputStream.read()",1,2,2
"org.apache.commons.io.input.BOMInputStream.read(byte[])",1,1,1
"org.apache.commons.io.input.BOMInputStream.read(byte[],int,int)",1,2,5
"org.apache.commons.io.input.BOMInputStream.readFirstBytes()",1,1,2
"org.apache.commons.io.input.BOMInputStream.reset()",1,1,2
"org.apache.commons.io.input.BOMInputStream.skip(long)",1,2,3
"org.apache.commons.io.input.BoundedInputStream.BoundedInputStream(InputStream)",1,1,1
"org.apache.commons.io.input.BoundedInputStream.BoundedInputStream(InputStream,long)",1,1,1
"org.apache.commons.io.input.BoundedInputStream.available()",2,1,3
"org.apache.commons.io.input.BoundedInputStream.close()",1,2,2
"org.apache.commons.io.input.BoundedInputStream.isPropagateClose()",1,1,1
"org.apache.commons.io.input.BoundedInputStream.mark(int)",1,1,1
"org.apache.commons.io.input.BoundedInputStream.markSupported()",1,1,1
"org.apache.commons.io.input.BoundedInputStream.read()",2,1,3
"org.apache.commons.io.input.BoundedInputStream.read(byte[])",1,1,1
"org.apache.commons.io.input.BoundedInputStream.read(byte[],int,int)",3,2,5
"org.apache.commons.io.input.BoundedInputStream.reset()",1,1,1
"org.apache.commons.io.input.BoundedInputStream.setPropagateClose(boolean)",1,1,1
"org.apache.commons.io.input.BoundedInputStream.skip(long)",1,2,2
"org.apache.commons.io.input.BoundedInputStream.toString()",1,1,1
"org.apache.commons.io.input.BrokenInputStream.BrokenInputStream()",1,1,1
"org.apache.commons.io.input.BrokenInputStream.BrokenInputStream(IOException)",1,1,1
"org.apache.commons.io.input.BrokenInputStream.available()",1,1,1
"org.apache.commons.io.input.BrokenInputStream.close()",1,1,1
"org.apache.commons.io.input.BrokenInputStream.read()",1,1,1
"org.apache.commons.io.input.BrokenInputStream.reset()",1,1,1
"org.apache.commons.io.input.BrokenInputStream.skip(long)",1,1,1
"org.apache.commons.io.input.CharSequenceReader.CharSequenceReader(CharSequence)",1,1,2
"org.apache.commons.io.input.CharSequenceReader.close()",1,1,1
"org.apache.commons.io.input.CharSequenceReader.mark(int)",1,1,1
"org.apache.commons.io.input.CharSequenceReader.markSupported()",1,1,1
"org.apache.commons.io.input.CharSequenceReader.read()",2,2,2
"org.apache.commons.io.input.CharSequenceReader.read(char[],int,int)",6,2,7
"org.apache.commons.io.input.CharSequenceReader.reset()",1,1,1
"org.apache.commons.io.input.CharSequenceReader.skip(long)",3,1,3
"org.apache.commons.io.input.CharSequenceReader.toString()",1,1,1
"org.apache.commons.io.input.ClassLoaderObjectInputStream.ClassLoaderObjectInputStream(ClassLoader,InputStream)",1,1,1
"org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveClass(ObjectStreamClass)",2,2,2
"org.apache.commons.io.input.CloseShieldInputStream.CloseShieldInputStream(InputStream)",1,1,1
"org.apache.commons.io.input.CloseShieldInputStream.close()",1,1,1
"org.apache.commons.io.input.ClosedInputStream.read()",1,1,1
"org.apache.commons.io.input.CountingInputStream.CountingInputStream(InputStream)",1,1,1
"org.apache.commons.io.input.CountingInputStream.afterRead(int)",1,1,2
"org.apache.commons.io.input.CountingInputStream.getByteCount()",1,1,1
"org.apache.commons.io.input.CountingInputStream.getCount()",2,1,2
"org.apache.commons.io.input.CountingInputStream.resetByteCount()",1,1,1
"org.apache.commons.io.input.CountingInputStream.resetCount()",2,1,2
"org.apache.commons.io.input.CountingInputStream.skip(long)",1,1,1
"org.apache.commons.io.input.DemuxInputStream.bindStream(InputStream)",1,1,1
"org.apache.commons.io.input.DemuxInputStream.close()",1,2,2
"org.apache.commons.io.input.DemuxInputStream.read()",2,2,2
"org.apache.commons.io.input.NullInputStream.NullInputStream(long)",1,1,1
"org.apache.commons.io.input.NullInputStream.NullInputStream(long,boolean,boolean)",1,1,1
"org.apache.commons.io.input.NullInputStream.available()",3,1,3
"org.apache.commons.io.input.NullInputStream.close()",1,1,1
"org.apache.commons.io.input.NullInputStream.doEndOfFile()",2,1,2
"org.apache.commons.io.input.NullInputStream.getPosition()",1,1,1
"org.apache.commons.io.input.NullInputStream.getSize()",1,1,1
"org.apache.commons.io.input.NullInputStream.mark(int)",2,1,2
"org.apache.commons.io.input.NullInputStream.markSupported()",1,1,1
"org.apache.commons.io.input.NullInputStream.processByte()",1,1,1
"org.apache.commons.io.input.NullInputStream.processBytes(byte[],int,int)",1,1,1
"org.apache.commons.io.input.NullInputStream.read()",3,2,3
"org.apache.commons.io.input.NullInputStream.read(byte[])",1,1,1
"org.apache.commons.io.input.NullInputStream.read(byte[],int,int)",3,2,4
"org.apache.commons.io.input.NullInputStream.reset()",4,1,4
"org.apache.commons.io.input.NullInputStream.skip(long)",3,2,4
"org.apache.commons.io.input.NullReader.NullReader(long)",1,1,1
"org.apache.commons.io.input.NullReader.NullReader(long,boolean,boolean)",1,1,1
"org.apache.commons.io.input.NullReader.close()",1,1,1
"org.apache.commons.io.input.NullReader.doEndOfFile()",2,1,2
"org.apache.commons.io.input.NullReader.getPosition()",1,1,1
"org.apache.commons.io.input.NullReader.getSize()",1,1,1
"org.apache.commons.io.input.NullReader.mark(int)",2,1,2
"org.apache.commons.io.input.NullReader.markSupported()",1,1,1
"org.apache.commons.io.input.NullReader.processChar()",1,1,1
"org.apache.commons.io.input.NullReader.processChars(char[],int,int)",1,1,1
"org.apache.commons.io.input.NullReader.read()",3,2,3
"org.apache.commons.io.input.NullReader.read(char[])",1,1,1
"org.apache.commons.io.input.NullReader.read(char[],int,int)",3,2,4
"org.apache.commons.io.input.NullReader.reset()",4,1,4
"org.apache.commons.io.input.NullReader.skip(long)",3,2,4
"org.apache.commons.io.input.ProxyInputStream.ProxyInputStream(InputStream)",1,1,1
"org.apache.commons.io.input.ProxyInputStream.afterRead(int)",1,1,1
"org.apache.commons.io.input.ProxyInputStream.available()",1,2,2
"org.apache.commons.io.input.ProxyInputStream.beforeRead(int)",1,1,1
"org.apache.commons.io.input.ProxyInputStream.close()",1,2,2
"org.apache.commons.io.input.ProxyInputStream.handleIOException(IOException)",1,1,1
"org.apache.commons.io.input.ProxyInputStream.mark(int)",1,1,1
"org.apache.commons.io.input.ProxyInputStream.markSupported()",1,1,1
"org.apache.commons.io.input.ProxyInputStream.read()",1,2,3
"org.apache.commons.io.input.ProxyInputStream.read(byte[])",1,2,3
"org.apache.commons.io.input.ProxyInputStream.read(byte[],int,int)",1,2,2
"org.apache.commons.io.input.ProxyInputStream.reset()",1,2,2
"org.apache.commons.io.input.ProxyInputStream.skip(long)",1,2,2
"org.apache.commons.io.input.ProxyReader.ProxyReader(Reader)",1,1,1
"org.apache.commons.io.input.ProxyReader.afterRead(int)",1,1,1
"org.apache.commons.io.input.ProxyReader.beforeRead(int)",1,1,1
"org.apache.commons.io.input.ProxyReader.close()",1,2,2
"org.apache.commons.io.input.ProxyReader.handleIOException(IOException)",1,1,1
"org.apache.commons.io.input.ProxyReader.mark(int)",1,2,2
"org.apache.commons.io.input.ProxyReader.markSupported()",1,1,1
"org.apache.commons.io.input.ProxyReader.read()",1,2,3
"org.apache.commons.io.input.ProxyReader.read(CharBuffer)",1,3,3
"org.apache.commons.io.input.ProxyReader.read(char[])",1,2,3
"org.apache.commons.io.input.ProxyReader.read(char[],int,int)",1,2,2
"org.apache.commons.io.input.ProxyReader.ready()",1,2,2
"org.apache.commons.io.input.ProxyReader.reset()",1,2,2
"org.apache.commons.io.input.ProxyReader.skip(long)",1,2,2
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader)",1,1,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,Charset)",1,1,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,Charset,int)",1,1,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,String)",1,1,1
"org.apache.commons.io.input.ReaderInputStream.ReaderInputStream(Reader,String,int)",1,1,1
"org.apache.commons.io.input.ReaderInputStream.close()",1,1,1
"org.apache.commons.io.input.ReaderInputStream.read()",1,1,2
"org.apache.commons.io.input.ReaderInputStream.read(byte[])",1,1,1
"org.apache.commons.io.input.ReaderInputStream.read(byte[],int,int)",4,8,11
"org.apache.commons.io.input.SwappedDataInputStream.SwappedDataInputStream(InputStream)",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readBoolean()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readByte()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readChar()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readDouble()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readFloat()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[],int,int)",3,2,3
"org.apache.commons.io.input.SwappedDataInputStream.readInt()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readLine()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readLong()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readShort()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readUTF()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()",1,1,1
"org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)",1,1,1
"org.apache.commons.io.input.TaggedInputStream.TaggedInputStream(InputStream)",1,1,1
"org.apache.commons.io.input.TaggedInputStream.handleIOException(IOException)",1,1,1
"org.apache.commons.io.input.TaggedInputStream.isCauseOf(Throwable)",1,1,1
"org.apache.commons.io.input.TaggedInputStream.throwIfCauseOf(Throwable)",1,1,1
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener)",1,1,1
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener,long)",1,1,1
"org.apache.commons.io.input.Tailer.Tailer(File,TailerListener,long,boolean)",1,1,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener)",1,1,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener,long)",1,1,1
"org.apache.commons.io.input.Tailer.create(File,TailerListener,long,boolean)",1,1,1
"org.apache.commons.io.input.Tailer.getDelay()",1,1,1
"org.apache.commons.io.input.Tailer.getFile()",1,1,1
"org.apache.commons.io.input.Tailer.readLines(RandomAccessFile)",1,2,2
"org.apache.commons.io.input.Tailer.run()",3,11,12
"org.apache.commons.io.input.Tailer.stop()",1,1,1
"org.apache.commons.io.input.TailerListenerAdapter.fileNotFound()",1,1,1
"org.apache.commons.io.input.TailerListenerAdapter.fileRotated()",1,1,1
"org.apache.commons.io.input.TailerListenerAdapter.handle(Exception)",1,1,1
"org.apache.commons.io.input.TailerListenerAdapter.handle(String)",1,1,1
"org.apache.commons.io.input.TailerListenerAdapter.init(Tailer)",1,1,1
"org.apache.commons.io.input.TeeInputStream.TeeInputStream(InputStream,OutputStream)",1,1,1
"org.apache.commons.io.input.TeeInputStream.TeeInputStream(InputStream,OutputStream,boolean)",1,1,1
"org.apache.commons.io.input.TeeInputStream.close()",1,2,2
"org.apache.commons.io.input.TeeInputStream.read()",1,2,2
"org.apache.commons.io.input.TeeInputStream.read(byte[])",1,2,2
"org.apache.commons.io.input.TeeInputStream.read(byte[],int,int)",1,2,2
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(File)",1,1,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream)",1,1,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,String)",1,1,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,String,boolean)",1,1,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,String,boolean,String)",2,3,4
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(InputStream,boolean)",2,3,3
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(URL)",1,1,1
"org.apache.commons.io.input.XmlStreamReader.XmlStreamReader(URLConnection)",1,4,5
"org.apache.commons.io.input.XmlStreamReader.calculateHttpEncoding(String,String,String,String,String,InputStream,boolean)",7,11,13
"org.apache.commons.io.input.XmlStreamReader.calculateRawEncoding(String,String,String,InputStream)",8,17,20
"org.apache.commons.io.input.XmlStreamReader.close()",1,1,1
"org.apache.commons.io.input.XmlStreamReader.doHttpStream(InputStream,String,boolean)",1,1,1
"org.apache.commons.io.input.XmlStreamReader.doLenientDetection(String,InputStream,XmlStreamReaderException)",1,5,8
"org.apache.commons.io.input.XmlStreamReader.doRawStream(InputStream,boolean)",1,1,1
"org.apache.commons.io.input.XmlStreamReader.getContentTypeEncoding(String)",1,5,5
"org.apache.commons.io.input.XmlStreamReader.getContentTypeMime(String)",1,3,3
"org.apache.commons.io.input.XmlStreamReader.getDefaultEncoding()",1,1,1
"org.apache.commons.io.input.XmlStreamReader.getEncoding()",1,1,1
"org.apache.commons.io.input.XmlStreamReader.getXmlProlog(InputStream,String)",4,6,10
"org.apache.commons.io.input.XmlStreamReader.isAppXml(String)",1,6,6
"org.apache.commons.io.input.XmlStreamReader.isTextXml(String)",1,5,5
"org.apache.commons.io.input.XmlStreamReader.read(char[],int,int)",1,1,1
"org.apache.commons.io.input.XmlStreamReader.setDefaultEncoding(String)",1,1,1
"org.apache.commons.io.input.XmlStreamReaderException.XmlStreamReaderException(String,String,String,String)",1,1,1
"org.apache.commons.io.input.XmlStreamReaderException.XmlStreamReaderException(String,String,String,String,String,String)",1,1,1
"org.apache.commons.io.input.XmlStreamReaderException.getBomEncoding()",1,1,1
"org.apache.commons.io.input.XmlStreamReaderException.getContentTypeEncoding()",1,1,1
"org.apache.commons.io.input.XmlStreamReaderException.getContentTypeMime()",1,1,1
"org.apache.commons.io.input.XmlStreamReaderException.getXmlEncoding()",1,1,1
"org.apache.commons.io.input.XmlStreamReaderException.getXmlGuessEncoding()",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.FilesystemEntry(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.FilesystemEntry(FilesystemEntry,File)",2,1,2
"org.apache.commons.io.monitor.FilesystemEntry.getChildren()",1,1,2
"org.apache.commons.io.monitor.FilesystemEntry.getFile()",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.getLastModified()",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.getLevel()",1,2,2
"org.apache.commons.io.monitor.FilesystemEntry.getName()",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.getParent()",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.hasChanged()",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.isDirectory()",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.isExists()",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.newChildInstance(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.refresh()",1,2,2
"org.apache.commons.io.monitor.FilesystemEntry.setChildren(FilesystemEntry[])",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.setDirectory(boolean)",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.setExists(boolean)",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.setFile(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.setLastModified(long)",1,1,1
"org.apache.commons.io.monitor.FilesystemEntry.setName(String)",1,1,1
"org.apache.commons.io.monitor.FilesystemListenerAdaptor.onDirectoryChange(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemListenerAdaptor.onDirectoryCreate(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemListenerAdaptor.onDirectoryDelete(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemListenerAdaptor.onFileChange(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemListenerAdaptor.onFileCreate(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemListenerAdaptor.onFileDelete(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemListenerAdaptor.onStart(FilesystemObserver)",1,1,1
"org.apache.commons.io.monitor.FilesystemListenerAdaptor.onStop(FilesystemObserver)",1,1,1
"org.apache.commons.io.monitor.FilesystemMonitor.FilesystemMonitor()",1,1,1
"org.apache.commons.io.monitor.FilesystemMonitor.FilesystemMonitor(long)",1,1,1
"org.apache.commons.io.monitor.FilesystemMonitor.FilesystemMonitor(long,FilesystemObserver...)",1,3,3
"org.apache.commons.io.monitor.FilesystemMonitor.addObserver(FilesystemObserver)",1,2,2
"org.apache.commons.io.monitor.FilesystemMonitor.getObservers()",1,1,1
"org.apache.commons.io.monitor.FilesystemMonitor.removeObserver(FilesystemObserver)",1,2,3
"org.apache.commons.io.monitor.FilesystemMonitor.run()",3,3,5
"org.apache.commons.io.monitor.FilesystemMonitor.start()",1,2,2
"org.apache.commons.io.monitor.FilesystemMonitor.stop()",1,3,3
"org.apache.commons.io.monitor.FilesystemObserver.FilesystemObserver(File)",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.FilesystemObserver(File,FileFilter)",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.FilesystemObserver(File,FileFilter,Comparator<File>)",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.FilesystemObserver(FilesystemEntry,FileFilter,Comparator<File>)",3,1,4
"org.apache.commons.io.monitor.FilesystemObserver.FilesystemObserver(String)",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.FilesystemObserver(String,FileFilter)",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.FilesystemObserver(String,FileFilter,Comparator<File>)",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.addListener(FilesystemListener)",1,2,2
"org.apache.commons.io.monitor.FilesystemObserver.checkAndNotify()",1,5,5
"org.apache.commons.io.monitor.FilesystemObserver.checkAndNotify(FilesystemEntry,FilesystemEntry[],File[])",1,7,8
"org.apache.commons.io.monitor.FilesystemObserver.createFileEntry(FilesystemEntry,File)",1,2,3
"org.apache.commons.io.monitor.FilesystemObserver.destroy()",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.doCreate(FilesystemEntry)",1,4,4
"org.apache.commons.io.monitor.FilesystemObserver.doDelete(FilesystemEntry)",1,3,3
"org.apache.commons.io.monitor.FilesystemObserver.doMatch(FilesystemEntry,File)",1,4,4
"org.apache.commons.io.monitor.FilesystemObserver.getComparator()",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.getDirectory()",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.getFileFilter()",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.getListeners()",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.getRootEntry()",1,1,1
"org.apache.commons.io.monitor.FilesystemObserver.initialize()",1,2,3
"org.apache.commons.io.monitor.FilesystemObserver.listFiles(File)",1,4,6
"org.apache.commons.io.monitor.FilesystemObserver.removeListener(FilesystemListener)",1,2,3
"org.apache.commons.io.monitor.FilesystemObserver.toString()",1,2,2
"org.apache.commons.io.output.BrokenOutputStream.BrokenOutputStream()",1,1,1
"org.apache.commons.io.output.BrokenOutputStream.BrokenOutputStream(IOException)",1,1,1
"org.apache.commons.io.output.BrokenOutputStream.close()",1,1,1
"org.apache.commons.io.output.BrokenOutputStream.flush()",1,1,1
"org.apache.commons.io.output.BrokenOutputStream.write(int)",1,1,1
"org.apache.commons.io.output.ByteArrayOutputStream.ByteArrayOutputStream()",1,1,1
"org.apache.commons.io.output.ByteArrayOutputStream.ByteArrayOutputStream(int)",2,1,2
"org.apache.commons.io.output.ByteArrayOutputStream.close()",1,1,1
"org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(int)",1,3,3
"org.apache.commons.io.output.ByteArrayOutputStream.reset()",1,1,1
"org.apache.commons.io.output.ByteArrayOutputStream.size()",1,1,1
"org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream()",4,2,4
"org.apache.commons.io.output.ByteArrayOutputStream.toBufferedInputStream(InputStream)",1,1,1
"org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()",4,2,4
"org.apache.commons.io.output.ByteArrayOutputStream.toString()",1,1,1
"org.apache.commons.io.output.ByteArrayOutputStream.toString(String)",1,1,1
"org.apache.commons.io.output.ByteArrayOutputStream.write(InputStream)",1,3,3
"org.apache.commons.io.output.ByteArrayOutputStream.write(byte[],int,int)",3,3,9
"org.apache.commons.io.output.ByteArrayOutputStream.write(int)",1,2,2
"org.apache.commons.io.output.ByteArrayOutputStream.writeTo(OutputStream)",3,2,3
"org.apache.commons.io.output.CloseShieldOutputStream.CloseShieldOutputStream(OutputStream)",1,1,1
"org.apache.commons.io.output.CloseShieldOutputStream.close()",1,1,1
"org.apache.commons.io.output.ClosedOutputStream.write(int)",1,1,1
"org.apache.commons.io.output.CountingOutputStream.CountingOutputStream(OutputStream)",1,1,1
"org.apache.commons.io.output.CountingOutputStream.beforeWrite(int)",1,1,1
"org.apache.commons.io.output.CountingOutputStream.getByteCount()",1,1,1
"org.apache.commons.io.output.CountingOutputStream.getCount()",2,1,2
"org.apache.commons.io.output.CountingOutputStream.resetByteCount()",1,1,1
"org.apache.commons.io.output.CountingOutputStream.resetCount()",2,1,2
"org.apache.commons.io.output.DeferredFileOutputStream.DeferredFileOutputStream(int,File)",1,1,1
"org.apache.commons.io.output.DeferredFileOutputStream.DeferredFileOutputStream(int,File,String,String,File)",1,1,1
"org.apache.commons.io.output.DeferredFileOutputStream.DeferredFileOutputStream(int,String,String,File)",2,1,2
"org.apache.commons.io.output.DeferredFileOutputStream.close()",1,1,1
"org.apache.commons.io.output.DeferredFileOutputStream.getData()",2,2,2
"org.apache.commons.io.output.DeferredFileOutputStream.getFile()",1,1,1
"org.apache.commons.io.output.DeferredFileOutputStream.getStream()",1,1,1
"org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()",1,1,1
"org.apache.commons.io.output.DeferredFileOutputStream.thresholdReached()",1,2,2
"org.apache.commons.io.output.DeferredFileOutputStream.writeTo(OutputStream)",2,2,3
"org.apache.commons.io.output.DemuxOutputStream.bindStream(OutputStream)",1,1,1
"org.apache.commons.io.output.DemuxOutputStream.close()",1,2,2
"org.apache.commons.io.output.DemuxOutputStream.flush()",1,2,2
"org.apache.commons.io.output.DemuxOutputStream.write(int)",1,2,2
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,Charset)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,Charset,boolean)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,CharsetEncoder)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,CharsetEncoder,boolean)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,String)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(File,String,boolean)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,Charset)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,Charset,boolean)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,CharsetEncoder)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,CharsetEncoder,boolean)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,String)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.FileWriterWithEncoding(String,String,boolean)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.close()",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.flush()",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.initWriter(File,Object,boolean)",3,5,9
"org.apache.commons.io.output.FileWriterWithEncoding.write(String)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.write(String,int,int)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.write(char[])",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.write(char[],int,int)",1,1,1
"org.apache.commons.io.output.FileWriterWithEncoding.write(int)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,String)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,String,boolean,String)",2,3,4
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,boolean)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(File,boolean,String)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(String)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(String,boolean)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.LockableFileWriter(String,boolean,String)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.close()",1,1,1
"org.apache.commons.io.output.LockableFileWriter.createLock()",2,2,2
"org.apache.commons.io.output.LockableFileWriter.flush()",1,1,1
"org.apache.commons.io.output.LockableFileWriter.initWriter(File,String,boolean)",1,6,6
"org.apache.commons.io.output.LockableFileWriter.testLockDir(File)",3,3,3
"org.apache.commons.io.output.LockableFileWriter.write(String)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.write(String,int,int)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.write(char[])",1,1,1
"org.apache.commons.io.output.LockableFileWriter.write(char[],int,int)",1,1,1
"org.apache.commons.io.output.LockableFileWriter.write(int)",1,1,1
"org.apache.commons.io.output.NullOutputStream.write(byte[])",1,1,1
"org.apache.commons.io.output.NullOutputStream.write(byte[],int,int)",1,1,1
"org.apache.commons.io.output.NullOutputStream.write(int)",1,1,1
"org.apache.commons.io.output.NullWriter.NullWriter()",1,1,1
"org.apache.commons.io.output.NullWriter.append(CharSequence)",1,1,1
"org.apache.commons.io.output.NullWriter.append(CharSequence,int,int)",1,1,1
"org.apache.commons.io.output.NullWriter.append(char)",1,1,1
"org.apache.commons.io.output.NullWriter.close()",1,1,1
"org.apache.commons.io.output.NullWriter.flush()",1,1,1
"org.apache.commons.io.output.NullWriter.write(String)",1,1,1
"org.apache.commons.io.output.NullWriter.write(String,int,int)",1,1,1
"org.apache.commons.io.output.NullWriter.write(char[])",1,1,1
"org.apache.commons.io.output.NullWriter.write(char[],int,int)",1,1,1
"org.apache.commons.io.output.NullWriter.write(int)",1,1,1
"org.apache.commons.io.output.ProxyOutputStream.ProxyOutputStream(OutputStream)",1,1,1
"org.apache.commons.io.output.ProxyOutputStream.afterWrite(int)",1,1,1
"org.apache.commons.io.output.ProxyOutputStream.beforeWrite(int)",1,1,1
"org.apache.commons.io.output.ProxyOutputStream.close()",1,2,2
"org.apache.commons.io.output.ProxyOutputStream.flush()",1,2,2
"org.apache.commons.io.output.ProxyOutputStream.handleIOException(IOException)",1,1,1
"org.apache.commons.io.output.ProxyOutputStream.write(byte[])",1,2,3
"org.apache.commons.io.output.ProxyOutputStream.write(byte[],int,int)",1,2,2
"org.apache.commons.io.output.ProxyOutputStream.write(int)",1,2,2
"org.apache.commons.io.output.ProxyWriter.ProxyWriter(Writer)",1,1,1
"org.apache.commons.io.output.ProxyWriter.afterWrite(int)",1,1,1
"org.apache.commons.io.output.ProxyWriter.append(CharSequence)",1,3,3
"org.apache.commons.io.output.ProxyWriter.append(CharSequence,int,int)",1,2,2
"org.apache.commons.io.output.ProxyWriter.append(char)",1,2,2
"org.apache.commons.io.output.ProxyWriter.beforeWrite(int)",1,1,1
"org.apache.commons.io.output.ProxyWriter.close()",1,2,2
"org.apache.commons.io.output.ProxyWriter.flush()",1,2,2
"org.apache.commons.io.output.ProxyWriter.handleIOException(IOException)",1,1,1
"org.apache.commons.io.output.ProxyWriter.write(String)",1,3,3
"org.apache.commons.io.output.ProxyWriter.write(String,int,int)",1,2,2
"org.apache.commons.io.output.ProxyWriter.write(char[])",1,2,3
"org.apache.commons.io.output.ProxyWriter.write(char[],int,int)",1,2,2
"org.apache.commons.io.output.ProxyWriter.write(int)",1,2,2
"org.apache.commons.io.output.StringBuilderWriter.StringBuilderWriter()",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.StringBuilderWriter(StringBuilder)",1,1,2
"org.apache.commons.io.output.StringBuilderWriter.StringBuilderWriter(int)",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.append(CharSequence)",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.append(CharSequence,int,int)",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.append(char)",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.close()",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.flush()",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.getBuilder()",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.toString()",1,1,1
"org.apache.commons.io.output.StringBuilderWriter.write(String)",1,2,2
"org.apache.commons.io.output.StringBuilderWriter.write(char[],int,int)",1,2,2
"org.apache.commons.io.output.TaggedOutputStream.TaggedOutputStream(OutputStream)",1,1,1
"org.apache.commons.io.output.TaggedOutputStream.handleIOException(IOException)",1,1,1
"org.apache.commons.io.output.TaggedOutputStream.isCauseOf(Exception)",1,1,1
"org.apache.commons.io.output.TaggedOutputStream.throwIfCauseOf(Exception)",1,1,1
"org.apache.commons.io.output.TeeOutputStream.TeeOutputStream(OutputStream,OutputStream)",1,1,1
"org.apache.commons.io.output.TeeOutputStream.close()",1,1,1
"org.apache.commons.io.output.TeeOutputStream.flush()",1,1,1
"org.apache.commons.io.output.TeeOutputStream.write(byte[])",1,1,1
"org.apache.commons.io.output.TeeOutputStream.write(byte[],int,int)",1,1,1
"org.apache.commons.io.output.TeeOutputStream.write(int)",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.ThresholdingOutputStream(int)",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(int)",1,2,3
"org.apache.commons.io.output.ThresholdingOutputStream.close()",1,1,2
"org.apache.commons.io.output.ThresholdingOutputStream.flush()",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.getByteCount()",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.getThreshold()",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.resetByteCount()",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.write(byte[],int,int)",1,1,1
"org.apache.commons.io.output.ThresholdingOutputStream.write(int)",1,1,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer)",1,1,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,Charset)",1,1,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,Charset,int,boolean)",1,1,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,String)",1,1,1
"org.apache.commons.io.output.WriterOutputStream.WriterOutputStream(Writer,String,int,boolean)",1,1,1
"org.apache.commons.io.output.WriterOutputStream.close()",1,1,1
"org.apache.commons.io.output.WriterOutputStream.flush()",1,1,1
"org.apache.commons.io.output.WriterOutputStream.flushOutput()",1,2,2
"org.apache.commons.io.output.WriterOutputStream.processInput(boolean)",4,3,4
"org.apache.commons.io.output.WriterOutputStream.write(byte[])",1,1,1
"org.apache.commons.io.output.WriterOutputStream.write(byte[],int,int)",1,3,3
"org.apache.commons.io.output.WriterOutputStream.write(int)",1,1,1
"org.apache.commons.io.output.XmlStreamWriter.XmlStreamWriter(File)",1,1,1
"org.apache.commons.io.output.XmlStreamWriter.XmlStreamWriter(OutputStream)",1,1,1
"org.apache.commons.io.output.XmlStreamWriter.close()",1,2,2
"org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[],int,int)",1,8,9
"org.apache.commons.io.output.XmlStreamWriter.flush()",1,2,2
"org.apache.commons.io.output.XmlStreamWriter.getEncoding()",1,1,1
"org.apache.commons.io.output.XmlStreamWriter.write(char[],int,int)",1,2,2

Class,OCavg,WMC
"org.apache.commons.io.ByteOrderMark","2,25",18
"org.apache.commons.io.CopyUtils","1,18",13
"org.apache.commons.io.DirectoryWalker","1,69",27
"org.apache.commons.io.DirectoryWalker.CancelException","1,00",4
"org.apache.commons.io.EndianUtils","1,06",33
"org.apache.commons.io.FileCleaner","1,00",7
"org.apache.commons.io.FileCleaningTracker","1,71",12
"org.apache.commons.io.FileCleaningTracker.Reaper","1,50",3
"org.apache.commons.io.FileCleaningTracker.Tracker","1,50",3
"org.apache.commons.io.FileDeleteStrategy","1,40",7
"org.apache.commons.io.FileDeleteStrategy.ForceFileDeleteStrategy","1,00",2
"org.apache.commons.io.FileExistsException","1,00",3
"org.apache.commons.io.FileSystemUtils","3,62",47
"org.apache.commons.io.FileUtils","3,05",232
"org.apache.commons.io.FilenameUtils","3,84",146
"org.apache.commons.io.HexDump","3,50",14
"org.apache.commons.io.IOCase","1,83",22
"org.apache.commons.io.IOExceptionWithCause","1,50",3
"org.apache.commons.io.IOUtils","2,05",125
"org.apache.commons.io.LineIterator","2,12",17
"org.apache.commons.io.TaggedIOException","1,20",6
"org.apache.commons.io.ThreadMonitor","1,40",7
"org.apache.commons.io.comparator.AbstractFileComparator","1,67",5
"org.apache.commons.io.comparator.CompositeFileComparator","2,75",11
"org.apache.commons.io.comparator.DefaultFileComparator","1,00",1
"org.apache.commons.io.comparator.DirectoryFileComparator","1,50",3
"org.apache.commons.io.comparator.ExtensionFileComparator","1,25",5
"org.apache.commons.io.comparator.LastModifiedFileComparator","3,00",3
"org.apache.commons.io.comparator.NameFileComparator","1,25",5
"org.apache.commons.io.comparator.PathFileComparator","1,25",5
"org.apache.commons.io.comparator.ReverseComparator","1,33",4
"org.apache.commons.io.comparator.SizeFileComparator","2,50",10
"org.apache.commons.io.filefilter.AbstractFileFilter","1,00",3
"org.apache.commons.io.filefilter.AgeFileFilter","1,25",10
"org.apache.commons.io.filefilter.AndFileFilter","2,20",22
"org.apache.commons.io.filefilter.CanReadFileFilter","1,00",2
"org.apache.commons.io.filefilter.CanWriteFileFilter","1,00",2
"org.apache.commons.io.filefilter.DelegateFileFilter","2,00",10
"org.apache.commons.io.filefilter.DirectoryFileFilter","1,00",2
"org.apache.commons.io.filefilter.EmptyFileFilter","1,50",3
"org.apache.commons.io.filefilter.FalseFileFilter","1,00",3
"org.apache.commons.io.filefilter.FileFileFilter","1,00",2
"org.apache.commons.io.filefilter.FileFilterUtils","1,40",60
"org.apache.commons.io.filefilter.HiddenFileFilter","1,00",2
"org.apache.commons.io.filefilter.MagicNumberFileFilter","2,33",14
"org.apache.commons.io.filefilter.NameFileFilter","2,44",22
"org.apache.commons.io.filefilter.NotFileFilter","1,25",5
"org.apache.commons.io.filefilter.OrFileFilter","2,00",20
"org.apache.commons.io.filefilter.PrefixFileFilter","2,44",22
"org.apache.commons.io.filefilter.RegexFileFilter","2,00",10
"org.apache.commons.io.filefilter.SizeFileFilter","1,75",7
"org.apache.commons.io.filefilter.SuffixFileFilter","2,44",22
"org.apache.commons.io.filefilter.TrueFileFilter","1,00",3
"org.apache.commons.io.filefilter.WildcardFileFilter","2,44",22
"org.apache.commons.io.filefilter.WildcardFilter","2,80",14
"org.apache.commons.io.input.AutoCloseInputStream","1,25",5
"org.apache.commons.io.input.BOMInputStream","2,24",38
"org.apache.commons.io.input.BoundedInputStream","1,50",21
"org.apache.commons.io.input.BrokenInputStream","1,00",7
"org.apache.commons.io.input.CharSequenceReader","2,00",18
"org.apache.commons.io.input.ClassLoaderObjectInputStream","1,50",3
"org.apache.commons.io.input.CloseShieldInputStream","1,00",2
"org.apache.commons.io.input.ClosedInputStream","1,00",1
"org.apache.commons.io.input.CountingInputStream","1,43",10
"org.apache.commons.io.input.DemuxInputStream","1,67",5
"org.apache.commons.io.input.NullInputStream","1,94",31
"org.apache.commons.io.input.NullReader","1,87",28
"org.apache.commons.io.input.ProxyInputStream","1,15",15
"org.apache.commons.io.input.ProxyReader","1,21",17
"org.apache.commons.io.input.ReaderInputStream","1,78",16
"org.apache.commons.io.input.SwappedDataInputStream","1,12",18
"org.apache.commons.io.input.TaggedInputStream","1,00",4
"org.apache.commons.io.input.Tailer","1,73",19
"org.apache.commons.io.input.TailerListenerAdapter","1,00",5
"org.apache.commons.io.input.TeeInputStream","1,67",10
"org.apache.commons.io.input.XmlStreamReader","2,78",64
"org.apache.commons.io.input.XmlStreamReaderException","1,00",7
"org.apache.commons.io.monitor.FilesystemEntry","1,21",23
"org.apache.commons.io.monitor.FilesystemListenerAdaptor","1,00",8
"org.apache.commons.io.monitor.FilesystemMonitor","2,11",19
"org.apache.commons.io.monitor.FilesystemObserver","2,33",56
"org.apache.commons.io.output.BrokenOutputStream","1,00",5
"org.apache.commons.io.output.ByteArrayOutputStream","2,20",33
"org.apache.commons.io.output.CloseShieldOutputStream","1,00",2
"org.apache.commons.io.output.ClosedOutputStream","1,00",1
"org.apache.commons.io.output.CountingOutputStream","1,33",8
"org.apache.commons.io.output.DeferredFileOutputStream","1,50",15
"org.apache.commons.io.output.DemuxOutputStream","1,75",7
"org.apache.commons.io.output.FileWriterWithEncoding","1,30",26
"org.apache.commons.io.output.LockableFileWriter","1,50",27
"org.apache.commons.io.output.NullOutputStream","1,00",3
"org.apache.commons.io.output.NullWriter","1,00",11
"org.apache.commons.io.output.ProxyOutputStream","1,11",10
"org.apache.commons.io.output.ProxyWriter","1,21",17
"org.apache.commons.io.output.StringBuilderWriter","1,25",15
"org.apache.commons.io.output.TaggedOutputStream","1,00",4
"org.apache.commons.io.output.TeeOutputStream","1,00",6
"org.apache.commons.io.output.ThresholdingOutputStream","1,09",12
"org.apache.commons.io.output.WriterOutputStream","1,50",18
"org.apache.commons.io.output.XmlStreamWriter","2,57",18

Package,v(G)avg,v(G)tot
"org.apache.commons.io","2,58",832
"org.apache.commons.io.comparator","1,80",54
"org.apache.commons.io.filefilter","1,85",290
"org.apache.commons.io.input","1,98",406
"org.apache.commons.io.monitor","1,85",111
"org.apache.commons.io.output","1,55",263

Module,v(G)avg,v(G)tot
"commons-io","2,07",1.956

Project,v(G)avg,v(G)tot
"project","2,07",1.956

