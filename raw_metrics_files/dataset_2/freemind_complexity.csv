Complexity metrics,Qua, 13 dez 2017 15:31:40 BRST
Method,ev(G),iv(G),v(G)
"freemind.common.BooleanProperty.BooleanProperty(String,String)",1,1,1
"freemind.common.BooleanProperty.getDescription()",1,1,1
"freemind.common.BooleanProperty.getLabel()",1,1,1
"freemind.common.BooleanProperty.getValue()",1,1,2
"freemind.common.BooleanProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.BooleanProperty.setEnabled(boolean)",1,1,1
"freemind.common.BooleanProperty.setValue(String)",2,3,4
"freemind.common.ColorProperty.ColorProperty(String,String,String,TextTranslator)",1,1,1
"freemind.common.ColorProperty.actionPerformed(ActionEvent)",1,2,2
"freemind.common.ColorProperty.getColorValue()",1,1,1
"freemind.common.ColorProperty.getDescription()",1,1,1
"freemind.common.ColorProperty.getLabel()",1,1,1
"freemind.common.ColorProperty.getValue()",1,1,1
"freemind.common.ColorProperty.layout(DefaultFormBuilder,TextTranslator)",1,3,3
"freemind.common.ColorProperty.setColorValue(Color)",1,1,2
"freemind.common.ColorProperty.setEnabled(boolean)",1,1,1
"freemind.common.ColorProperty.setValue(String)",1,1,1
"freemind.common.ComboProperty.ComboProperty(String,String,List<String>,List<String>)",1,1,1
"freemind.common.ComboProperty.ComboProperty(String,String,String[],List<String>)",1,1,1
"freemind.common.ComboProperty.ComboProperty(String,String,String[],TextTranslator)",1,2,2
"freemind.common.ComboProperty.addActionListener()",1,1,1
"freemind.common.ComboProperty.fillPossibleValues(List<String>)",1,1,1
"freemind.common.ComboProperty.fillPossibleValues(String[])",1,1,1
"freemind.common.ComboProperty.getDescription()",1,1,1
"freemind.common.ComboProperty.getLabel()",1,1,1
"freemind.common.ComboProperty.getValue()",1,1,1
"freemind.common.ComboProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.ComboProperty.setEnabled(boolean)",1,1,1
"freemind.common.ComboProperty.setValue(String)",1,3,3
"freemind.common.ComboProperty.updateComboBoxEntries(List<String>,List<String>)",1,2,2
"freemind.common.DontShowNotificationProperty.DontShowNotificationProperty(String,String)",1,1,1
"freemind.common.FontProperty.FontProperty(String,String,TextTranslator)",1,1,1
"freemind.common.FontProperty.getDescription()",1,1,1
"freemind.common.FontProperty.getLabel()",1,1,1
"freemind.common.FontProperty.getValue()",1,1,1
"freemind.common.FontProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.FontProperty.setEnabled(boolean)",1,1,1
"freemind.common.FontProperty.setValue(String)",3,4,4
"freemind.common.FreeMindProgressMonitor.FreeMindProgressMonitor(String)",1,2,2
"freemind.common.FreeMindProgressMonitor.dismiss()",1,1,1
"freemind.common.FreeMindProgressMonitor.getString(String)",1,1,1
"freemind.common.FreeMindProgressMonitor.main(String[])",1,3,3
"freemind.common.FreeMindProgressMonitor.setProgress(int)",1,1,1
"freemind.common.FreeMindProgressMonitor.showProgress(int,String,Object[])",1,1,1
"freemind.common.FreeMindProgressMonitor.showProgress(int,int,String,Object[])",1,1,1
"freemind.common.FreeMindTask.FreeMindTask(RootPaneContainer,int,String)",1,1,1
"freemind.common.FreeMindTask.ProgressDescription.ProgressDescription(String,Object[])",1,1,1
"freemind.common.FreeMindTask.getAmountOfSteps()",1,1,1
"freemind.common.FreeMindTask.getRounds()",1,1,1
"freemind.common.FreeMindTask.isFinished()",1,1,1
"freemind.common.FreeMindTask.isInterrupted()",1,1,1
"freemind.common.FreeMindTask.run()",1,5,10
"freemind.common.FreeMindTask.setAmountOfSteps(int)",1,1,1
"freemind.common.FreeMindTask.setFinished(boolean)",1,1,1
"freemind.common.FreeMindTask.setInterrupted(boolean)",1,1,1
"freemind.common.IconProperty.IconProperty(String,String,FreeMindMain,Vector<MindIcon>)",1,1,1
"freemind.common.IconProperty.actionPerformed(ActionEvent)",1,3,3
"freemind.common.IconProperty.getDescription()",1,1,1
"freemind.common.IconProperty.getLabel()",1,1,1
"freemind.common.IconProperty.getValue()",1,1,1
"freemind.common.IconProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.IconProperty.setEnabled(boolean)",1,1,1
"freemind.common.IconProperty.setIcon(MindIcon)",1,1,1
"freemind.common.IconProperty.setValue(String)",1,3,3
"freemind.common.JOptionalSplitPane.JOptionalSplitPane()",1,1,1
"freemind.common.JOptionalSplitPane.checkIndex(int)",2,1,3
"freemind.common.JOptionalSplitPane.getAmountOfComponents()",1,1,1
"freemind.common.JOptionalSplitPane.getDividerPosition()",2,2,2
"freemind.common.JOptionalSplitPane.getLastDividerPosition()",1,1,1
"freemind.common.JOptionalSplitPane.main(String[])",1,1,1
"freemind.common.JOptionalSplitPane.removeComponent(int)",3,3,6
"freemind.common.JOptionalSplitPane.setComponent(JComponent,int)",4,6,9
"freemind.common.JOptionalSplitPane.setLastDividerPosition(int)",1,1,1
"freemind.common.JOptionalSplitPane.setSingleJPanel(JComponent)",1,3,3
"freemind.common.NamedObject.NamedObject()",1,1,1
"freemind.common.NamedObject.NamedObject(Object,String)",1,1,1
"freemind.common.NamedObject.equals(Object)",2,2,2
"freemind.common.NamedObject.getName()",1,1,1
"freemind.common.NamedObject.getObject()",1,1,1
"freemind.common.NamedObject.literal(String)",1,1,1
"freemind.common.NamedObject.toString()",1,1,1
"freemind.common.NextLineProperty.NextLineProperty()",1,1,1
"freemind.common.NextLineProperty.getDescription()",1,1,1
"freemind.common.NextLineProperty.getLabel()",1,1,1
"freemind.common.NextLineProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.NextLineProperty.setEnabled(boolean)",1,1,1
"freemind.common.NumberProperty.NumberProperty(String,String,int,int,int)",1,1,1
"freemind.common.NumberProperty.getDescription()",1,1,1
"freemind.common.NumberProperty.getIntValue()",1,1,1
"freemind.common.NumberProperty.getLabel()",1,1,1
"freemind.common.NumberProperty.getValue()",1,1,1
"freemind.common.NumberProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.NumberProperty.setEnabled(boolean)",1,1,1
"freemind.common.NumberProperty.setValue(String)",1,3,5
"freemind.common.OptionalDontShowMeAgainDialog.OptionalDontShowMeAgainDialog(JFrame,Component,String,String,TextTranslator,DontShowPropertyHandler,int)",1,2,2
"freemind.common.OptionalDontShowMeAgainDialog.StandardPropertyHandler.StandardPropertyHandler(Controller,String)",1,1,1
"freemind.common.OptionalDontShowMeAgainDialog.StandardPropertyHandler.getProperty()",1,1,1
"freemind.common.OptionalDontShowMeAgainDialog.StandardPropertyHandler.setProperty(String)",1,1,1
"freemind.common.OptionalDontShowMeAgainDialog.close(int)",1,4,5
"freemind.common.OptionalDontShowMeAgainDialog.getResult()",1,1,1
"freemind.common.OptionalDontShowMeAgainDialog.show()",3,2,5
"freemind.common.PasswordProperty.PasswordProperty(String,String)",1,1,1
"freemind.common.PasswordProperty.getValue()",1,1,1
"freemind.common.PasswordProperty.initializeTextfield()",1,1,1
"freemind.common.PasswordProperty.setValue(String)",1,1,1
"freemind.common.PropertyBean.addPropertyChangeListener(PropertyChangeListener)",1,1,1
"freemind.common.PropertyBean.firePropertyChangeEvent()",1,2,2
"freemind.common.PropertyBean.removePropertyChangeListener(PropertyChangeListener)",1,1,1
"freemind.common.RemindValueProperty.RemindValueProperty(String,String,TextTranslator)",1,1,1
"freemind.common.RemindValueProperty.setState(int)",1,1,1
"freemind.common.ScalableJButton.ScalableJButton()",1,1,1
"freemind.common.ScalableJButton.ScalableJButton(String)",1,1,1
"freemind.common.ScalableJButton.componentHidden(ComponentEvent)",1,1,1
"freemind.common.ScalableJButton.componentMoved(ComponentEvent)",1,1,1
"freemind.common.ScalableJButton.componentResized(ComponentEvent)",1,1,1
"freemind.common.ScalableJButton.componentShown(ComponentEvent)",1,1,1
"freemind.common.ScalableJButton.init()",1,2,2
"freemind.common.ScalableJTable.ScalableJTable()",1,1,1
"freemind.common.ScriptEditorProperty.ScriptEditorProperty(String,String,MindMapController)",1,2,2
"freemind.common.ScriptEditorProperty.actionPerformed(ActionEvent)",1,4,4
"freemind.common.ScriptEditorProperty.getDescription()",1,1,1
"freemind.common.ScriptEditorProperty.getLabel()",1,1,1
"freemind.common.ScriptEditorProperty.getValue()",1,1,1
"freemind.common.ScriptEditorProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.ScriptEditorProperty.setEnabled(boolean)",1,1,1
"freemind.common.ScriptEditorProperty.setScriptValue(String)",1,1,2
"freemind.common.ScriptEditorProperty.setValue(String)",1,1,1
"freemind.common.SeparatorProperty.SeparatorProperty(String)",1,1,1
"freemind.common.SeparatorProperty.getDescription()",1,1,1
"freemind.common.SeparatorProperty.getLabel()",1,1,1
"freemind.common.SeparatorProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.SeparatorProperty.setEnabled(boolean)",1,1,1
"freemind.common.StringProperty.StringProperty(String,String)",1,1,1
"freemind.common.StringProperty.getDescription()",1,1,1
"freemind.common.StringProperty.getLabel()",1,1,1
"freemind.common.StringProperty.getValue()",1,1,1
"freemind.common.StringProperty.initializeTextfield()",1,1,1
"freemind.common.StringProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.StringProperty.setEnabled(boolean)",1,1,1
"freemind.common.StringProperty.setValue(String)",1,1,1
"freemind.common.ThreeCheckBoxProperty.ThreeCheckBoxProperty(String,String)",1,1,1
"freemind.common.ThreeCheckBoxProperty.getDescription()",1,1,1
"freemind.common.ThreeCheckBoxProperty.getLabel()",1,1,1
"freemind.common.ThreeCheckBoxProperty.getState()",1,1,1
"freemind.common.ThreeCheckBoxProperty.getValue()",4,2,4
"freemind.common.ThreeCheckBoxProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.common.ThreeCheckBoxProperty.setEnabled(boolean)",1,1,1
"freemind.common.ThreeCheckBoxProperty.setState(int)",1,1,1
"freemind.common.ThreeCheckBoxProperty.setValue(String)",2,4,5
"freemind.common.ThreeCheckBoxProperty.transformString(String)",4,1,4
"freemind.common.UnicodeReader.UnicodeReader(InputStream,String)",1,1,1
"freemind.common.UnicodeReader.close()",1,1,1
"freemind.common.UnicodeReader.getDefaultEncoding()",1,1,1
"freemind.common.UnicodeReader.getEncoding()",2,1,2
"freemind.common.UnicodeReader.init()",2,2,19
"freemind.common.UnicodeReader.read(char[],int,int)",1,1,1
"freemind.common.XmlBindingTools.XmlBindingTools()",1,1,1
"freemind.common.XmlBindingTools.createMarshaller()",1,2,2
"freemind.common.XmlBindingTools.createUnmarshaller()",1,2,2
"freemind.common.XmlBindingTools.decorateDialog(Controller,JDialog,String)",1,1,1
"freemind.common.XmlBindingTools.decorateDialog(String,JDialog)",3,4,4
"freemind.common.XmlBindingTools.getInstance()",1,3,3
"freemind.common.XmlBindingTools.marshall(XmlAction)",1,2,2
"freemind.common.XmlBindingTools.storeDialogPositions(Controller,JDialog,WindowConfigurationStorage,String)",1,1,1
"freemind.common.XmlBindingTools.storeDialogPositions(WindowConfigurationStorage,JDialog)",1,1,1
"freemind.common.XmlBindingTools.unMarshall(Reader)",1,2,2
"freemind.common.XmlBindingTools.unMarshall(String)",1,1,1
"freemind.controller.BlindIcon.BlindIcon(int)",1,1,1
"freemind.controller.BlindIcon.getIconHeight()",1,1,1
"freemind.controller.BlindIcon.getIconWidth()",1,1,1
"freemind.controller.BlindIcon.paintIcon(Component,Graphics,int,int)",1,1,1
"freemind.controller.ColorSwatch.ColorSwatch()",1,1,1
"freemind.controller.ColorSwatch.ColorSwatch(Color)",1,1,1
"freemind.controller.ColorSwatch.getColor()",1,1,1
"freemind.controller.ColorSwatch.getIconHeight()",1,1,1
"freemind.controller.ColorSwatch.getIconWidth()",1,1,1
"freemind.controller.ColorSwatch.paintIcon(Component,Graphics,int,int)",1,1,1
"freemind.controller.Controller.AboutAction.AboutAction(Controller)",1,1,1
"freemind.controller.Controller.AboutAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.CloseAction.CloseAction(Controller)",1,1,1
"freemind.controller.Controller.CloseAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.Closer.windowClosing(WindowEvent)",1,1,1
"freemind.controller.Controller.ColorTracker.ColorTracker(JColorChooser)",1,1,1
"freemind.controller.Controller.ColorTracker.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.ColorTracker.getColor()",1,1,1
"freemind.controller.Controller.Controller(FreeMindMain)",1,2,2
"freemind.controller.Controller.DefaultLocalLinkConverter.convertLocalLink(String)",1,1,1
"freemind.controller.Controller.DisposeOnClose.componentHidden(ComponentEvent)",1,1,1
"freemind.controller.Controller.DocumentationAction.DocumentationAction(Controller)",1,1,1
"freemind.controller.Controller.DocumentationAction.actionPerformed(ActionEvent)",1,5,5
"freemind.controller.Controller.KeyDocumentationAction.KeyDocumentationAction(Controller)",1,1,1
"freemind.controller.Controller.KeyDocumentationAction.actionPerformed(ActionEvent)",1,4,4
"freemind.controller.Controller.LicenseAction.LicenseAction(Controller)",1,1,1
"freemind.controller.Controller.LicenseAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.MoveToRootAction.MoveToRootAction(Controller)",1,1,1
"freemind.controller.Controller.MoveToRootAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.NavigationMoveMapLeftAction.NavigationMoveMapLeftAction(Controller)",1,1,1
"freemind.controller.Controller.NavigationMoveMapLeftAction.actionPerformed(ActionEvent)",1,3,3
"freemind.controller.Controller.NavigationMoveMapRightAction.NavigationMoveMapRightAction(Controller)",1,1,1
"freemind.controller.Controller.NavigationMoveMapRightAction.actionPerformed(ActionEvent)",1,2,3
"freemind.controller.Controller.NavigationNextMapAction.NavigationNextMapAction(Controller)",1,1,1
"freemind.controller.Controller.NavigationNextMapAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.NavigationPreviousMapAction.NavigationPreviousMapAction(Controller)",1,1,1
"freemind.controller.Controller.NavigationPreviousMapAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.OpenURLAction.OpenURLAction(Controller,String,String)",1,1,1
"freemind.controller.Controller.OpenURLAction.actionPerformed(ActionEvent)",1,3,3
"freemind.controller.Controller.OptionAntialiasAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.OptionAntialiasAction.changeAntialias(String)",2,2,3
"freemind.controller.Controller.OptionHTMLExportFoldingAction.OptionHTMLExportFoldingAction(Controller)",1,1,1
"freemind.controller.Controller.OptionHTMLExportFoldingAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.OptionSelectionMechanismAction.OptionSelectionMechanismAction(Controller)",1,1,1
"freemind.controller.Controller.OptionSelectionMechanismAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.OptionSelectionMechanismAction.changeSelection(String)",1,2,2
"freemind.controller.Controller.OptionSelectionMechanismAction.propertyChanged(String,String,String)",1,2,2
"freemind.controller.Controller.PageAction.PageAction(Controller)",1,1,1
"freemind.controller.Controller.PageAction.actionPerformed(ActionEvent)",3,2,4
"freemind.controller.Controller.PrintAction.PrintAction(Controller,boolean)",1,2,2
"freemind.controller.Controller.PrintAction.actionPerformed(ActionEvent)",2,4,5
"freemind.controller.Controller.PrintPreviewAction.PrintPreviewAction(Controller)",1,1,1
"freemind.controller.Controller.PrintPreviewAction.actionPerformed(ActionEvent)",2,1,2
"freemind.controller.Controller.PropertyAction.PropertyAction(Controller)",1,1,1
"freemind.controller.Controller.PropertyAction.actionPerformed(ActionEvent)",1,4,4
"freemind.controller.Controller.QuitAction.QuitAction(Controller)",1,1,1
"freemind.controller.Controller.QuitAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.ShowFilterToolbarAction.ShowFilterToolbarAction(Controller)",1,1,1
"freemind.controller.Controller.ShowFilterToolbarAction.actionPerformed(ActionEvent)",1,2,2
"freemind.controller.Controller.ShowSelectionAsRectangleAction.ShowSelectionAsRectangleAction(Controller)",1,1,1
"freemind.controller.Controller.ShowSelectionAsRectangleAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.ShowSelectionAsRectangleAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.controller.Controller.SplitComponentType.SplitComponentType(int)",1,1,1
"freemind.controller.Controller.SplitComponentType.getIndex()",1,1,1
"freemind.controller.Controller.ToggleLeftToolbarAction.ToggleLeftToolbarAction(Controller)",1,1,1
"freemind.controller.Controller.ToggleLeftToolbarAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.ToggleLeftToolbarAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.controller.Controller.ToggleMenubarAction.ToggleMenubarAction(Controller)",1,1,1
"freemind.controller.Controller.ToggleMenubarAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.ToggleMenubarAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.controller.Controller.ToggleToolbarAction.ToggleToolbarAction(Controller)",1,1,1
"freemind.controller.Controller.ToggleToolbarAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.Controller.ToggleToolbarAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.controller.Controller.ZoomInAction.ZoomInAction(Controller)",1,1,1
"freemind.controller.Controller.ZoomInAction.actionPerformed(ActionEvent)",3,3,3
"freemind.controller.Controller.ZoomOutAction.ZoomOutAction(Controller)",1,1,1
"freemind.controller.Controller.ZoomOutAction.actionPerformed(ActionEvent)",3,3,3
"freemind.controller.Controller.acquirePrinterJobAndPageFormat()",2,7,8
"freemind.controller.Controller.addPropertyChangeListener(FreemindPropertyListener)",1,1,1
"freemind.controller.Controller.addPropertyChangeListenerAndPropagate(FreemindPropertyListener)",1,2,2
"freemind.controller.Controller.addTabbedPane(JTabbedPane)",6,8,10
"freemind.controller.Controller.afterMapClose(MapModule,Mode)",1,1,1
"freemind.controller.Controller.afterMapModuleChange(MapModule,Mode,MapModule,Mode)",1,6,6
"freemind.controller.Controller.beforeMapModuleChange(MapModule,Mode,MapModule,Mode)",3,5,5
"freemind.controller.Controller.changeZoomValueProperty(float)",1,2,2
"freemind.controller.Controller.close(boolean)",1,1,1
"freemind.controller.Controller.createNewMode(String)",3,3,4
"freemind.controller.Controller.deregisterMapTitleChangeListener(MapTitleChangeListener)",1,1,1
"freemind.controller.Controller.deregisterMapTitleContributor(MapTitleContributor)",1,1,1
"freemind.controller.Controller.deregisterZoomListener(ZoomListener)",1,1,1
"freemind.controller.Controller.errorMessage(Object)",1,2,3
"freemind.controller.Controller.errorMessage(Object,JComponent)",1,1,1
"freemind.controller.Controller.firePropertyChanged(String,String,String)",1,4,4
"freemind.controller.Controller.getCommonJColorChooser()",1,1,1
"freemind.controller.Controller.getDefaultFont()",1,1,1
"freemind.controller.Controller.getDefaultFontFamilyName()",1,1,1
"freemind.controller.Controller.getDefaultFontSize()",1,1,1
"freemind.controller.Controller.getDefaultFontStyle()",1,1,1
"freemind.controller.Controller.getFilterController()",1,1,1
"freemind.controller.Controller.getFontStringCode(Font)",1,1,1
"freemind.controller.Controller.getFontThroughMap(Font)",1,2,2
"freemind.controller.Controller.getFrame()",1,1,1
"freemind.controller.Controller.getIntProperty(String,int)",1,1,1
"freemind.controller.Controller.getJFrame()",2,1,2
"freemind.controller.Controller.getLastOpenedList()",1,1,1
"freemind.controller.Controller.getMap()",1,1,1
"freemind.controller.Controller.getMapModule()",1,1,1
"freemind.controller.Controller.getMapModuleManager()",1,1,1
"freemind.controller.Controller.getMapMouseMotionListener()",1,1,1
"freemind.controller.Controller.getMapMouseWheelListener()",1,1,1
"freemind.controller.Controller.getMode()",1,1,1
"freemind.controller.Controller.getModeController()",3,3,3
"freemind.controller.Controller.getModel()",2,2,2
"freemind.controller.Controller.getModes()",1,1,1
"freemind.controller.Controller.getNodeDragListener()",1,1,1
"freemind.controller.Controller.getNodeDropListener()",1,1,1
"freemind.controller.Controller.getNodeKeyListener()",1,1,1
"freemind.controller.Controller.getNodeMotionListener()",1,1,1
"freemind.controller.Controller.getNodeMouseMotionListener()",1,1,1
"freemind.controller.Controller.getPageFormat()",1,1,1
"freemind.controller.Controller.getProperty(String)",1,1,1
"freemind.controller.Controller.getPropertyChangeListeners()",1,1,1
"freemind.controller.Controller.getResource(String)",1,1,1
"freemind.controller.Controller.getResourceString(String)",1,1,1
"freemind.controller.Controller.getToolBar()",1,1,1
"freemind.controller.Controller.getToolbar()",1,1,1
"freemind.controller.Controller.getView()",2,2,2
"freemind.controller.Controller.getZooms()",1,1,2
"freemind.controller.Controller.informationMessage(Object)",1,1,1
"freemind.controller.Controller.informationMessage(Object,JComponent)",1,1,1
"freemind.controller.Controller.init()",1,1,1
"freemind.controller.Controller.initialization()",1,4,4
"freemind.controller.Controller.insertComponentIntoSplitPane(JComponent,SplitComponentType)",1,2,2
"freemind.controller.Controller.isMapModuleChangeAllowed(MapModule,Mode,MapModule,Mode)",1,1,1
"freemind.controller.Controller.isSelectionAsRectangle()",1,1,1
"freemind.controller.Controller.moveTab(int,int)",1,1,1
"freemind.controller.Controller.moveToRoot()",1,2,2
"freemind.controller.Controller.numberOfOpenMapInformation(int,int)",1,1,3
"freemind.controller.Controller.obtainFocusForSelected()",1,2,2
"freemind.controller.Controller.quit()",4,11,15
"freemind.controller.Controller.registerMapTitleChangeListener(MapTitleChangeListener)",1,1,1
"freemind.controller.Controller.registerMapTitleContributor(MapTitleContributor)",1,1,1
"freemind.controller.Controller.registerZoomListener(ZoomListener)",1,1,1
"freemind.controller.Controller.removePropertyChangeListener(FreemindPropertyListener)",1,1,1
"freemind.controller.Controller.removeSplitPane(SplitComponentType)",1,3,3
"freemind.controller.Controller.setAllActions(boolean)",1,1,5
"freemind.controller.Controller.setFrame(FreeMindMain)",1,1,1
"freemind.controller.Controller.setLeftToolbarVisible(boolean)",2,2,3
"freemind.controller.Controller.setMenubarVisible(boolean)",1,1,1
"freemind.controller.Controller.setProperty(String,String)",1,1,1
"freemind.controller.Controller.setTitle()",1,6,7
"freemind.controller.Controller.setToolbarVisible(boolean)",1,1,1
"freemind.controller.Controller.setZoom(float)",1,1,1
"freemind.controller.Controller.showCommonJColorChooserDialog(Component,String,Color)",1,1,1
"freemind.controller.Controller.storeOptionSplitPanePosition()",1,2,2
"freemind.controller.Controller.storePageFormat()",1,4,4
"freemind.controller.Controller.tabSelectionChanged()",3,4,6
"freemind.controller.Controller.toggleSelectionAsRectangle()",1,2,2
"freemind.controller.FreeMindPopupMenu.FreeMindPopupMenu()",1,2,2
"freemind.controller.FreeMindPopupMenu.addMenuListener(MenuListener)",1,1,1
"freemind.controller.FreeMindPopupMenu.firePopupMenuCanceled()",1,2,2
"freemind.controller.FreeMindPopupMenu.firePopupMenuWillBecomeInvisible()",1,2,2
"freemind.controller.FreeMindPopupMenu.firePopupMenuWillBecomeVisible()",1,2,2
"freemind.controller.FreeMindPopupMenu.removeMenuListener(MenuListener)",1,1,1
"freemind.controller.FreeMindToolBar.FreeMindToolBar()",1,1,1
"freemind.controller.FreeMindToolBar.FreeMindToolBar(String)",1,1,1
"freemind.controller.FreeMindToolBar.FreeMindToolBar(String,int)",1,1,1
"freemind.controller.FreeMindToolBar.FreeMindToolBar(int)",1,1,1
"freemind.controller.FreeMindToolBar.add(Action)",1,2,2
"freemind.controller.LastOpenedList.LastOpenedList(Controller,String)",1,2,2
"freemind.controller.LastOpenedList.add(String,String)",2,3,4
"freemind.controller.LastOpenedList.listIterator()",1,1,1
"freemind.controller.LastOpenedList.load(String)",1,3,3
"freemind.controller.LastOpenedList.mapClosed(MapModule)",1,1,1
"freemind.controller.LastOpenedList.mapOpened(MapModule)",2,2,3
"freemind.controller.LastOpenedList.open(String)",3,3,4
"freemind.controller.LastOpenedList.save()",1,2,2
"freemind.controller.LastStateStorageManagement.LastStateStorageManagement(String)",1,4,6
"freemind.controller.LastStateStorageManagement.changeOrAdd(MindmapLastStateStorage)",6,8,9
"freemind.controller.LastStateStorageManagement.clearTabIndices()",1,2,2
"freemind.controller.LastStateStorageManagement.getLastFocussedTab()",1,1,1
"freemind.controller.LastStateStorageManagement.getLastOpenList()",1,3,3
"freemind.controller.LastStateStorageManagement.getStorage(String)",3,3,3
"freemind.controller.LastStateStorageManagement.getXml()",1,1,1
"freemind.controller.LastStateStorageManagement.setLastChanged(MindmapLastStateStorage)",1,1,1
"freemind.controller.LastStateStorageManagement.setLastFocussedTab(int)",1,1,1
"freemind.controller.MainToolBar.MainToolBar(Controller)",1,2,2
"freemind.controller.MainToolBar.activate(boolean)",1,1,1
"freemind.controller.MainToolBar.setAllActions(boolean)",1,1,1
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.addListener(MapModuleChangeObserver)",1,1,1
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.afterMapClose(MapModule,Mode)",1,2,2
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.afterMapModuleChange(MapModule,Mode,MapModule,Mode)",1,2,2
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.beforeMapModuleChange(MapModule,Mode,MapModule,Mode)",1,2,2
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.isMapModuleChangeAllowed(MapModule,Mode,MapModule,Mode)",3,2,3
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.numberOfOpenMapInformation(int,int)",1,2,2
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound.removeListener(MapModuleChangeObserver)",1,1,1
"freemind.controller.MapModuleManager.MapModuleManager(Controller)",1,1,1
"freemind.controller.MapModuleManager.addListener(MapModuleChangeObserver)",1,1,1
"freemind.controller.MapModuleManager.addToOrChangeInMapModules(String,MapModule)",1,2,3
"freemind.controller.MapModuleManager.changeToMapModule(MapModule)",1,1,1
"freemind.controller.MapModuleManager.changeToMapModule(String)",4,2,4
"freemind.controller.MapModuleManager.changeToMapOfMode(Mode)",3,3,3
"freemind.controller.MapModuleManager.checkIfFileIsAlreadyOpened(URL)",4,4,4
"freemind.controller.MapModuleManager.close(boolean,StringBuffer)",2,5,6
"freemind.controller.MapModuleManager.fireNumberOfOpenMapInformation()",1,1,1
"freemind.controller.MapModuleManager.getMapKeys()",1,2,2
"freemind.controller.MapModuleManager.getMapModule()",1,1,1
"freemind.controller.MapModuleManager.getMapModuleVector()",1,1,1
"freemind.controller.MapModuleManager.getMapModules()",1,2,2
"freemind.controller.MapModuleManager.getModuleGivenModeController(ModeController)",3,2,3
"freemind.controller.MapModuleManager.newMapModule(MindMap,ModeController)",1,1,1
"freemind.controller.MapModuleManager.nextMapModule()",1,4,5
"freemind.controller.MapModuleManager.previousMapModule()",1,4,4
"freemind.controller.MapModuleManager.removeListener(MapModuleChangeObserver)",1,1,1
"freemind.controller.MapModuleManager.sameFile(URL,URL)",3,3,4
"freemind.controller.MapModuleManager.setMapModule(MapModule,Mode)",2,1,2
"freemind.controller.MapModuleManager.swapModules(int,int)",1,1,1
"freemind.controller.MapModuleManager.tryToChangeToMapModule(String)",2,3,3
"freemind.controller.MapModuleManager.updateMapModuleName()",1,1,1
"freemind.controller.MapMouseMotionListener.MapMouseMotionListener(Controller)",1,1,1
"freemind.controller.MapMouseMotionListener.deregister()",1,1,1
"freemind.controller.MapMouseMotionListener.handlePopup(MouseEvent)",1,4,4
"freemind.controller.MapMouseMotionListener.mouseClicked(MouseEvent)",1,1,1
"freemind.controller.MapMouseMotionListener.mouseDragged(MouseEvent)",1,2,2
"freemind.controller.MapMouseMotionListener.mouseEntered(MouseEvent)",1,1,1
"freemind.controller.MapMouseMotionListener.mouseExited(MouseEvent)",1,1,1
"freemind.controller.MapMouseMotionListener.mouseMoved(MouseEvent)",1,1,1
"freemind.controller.MapMouseMotionListener.mousePressed(MouseEvent)",1,3,3
"freemind.controller.MapMouseMotionListener.mouseReleased(MouseEvent)",1,2,2
"freemind.controller.MapMouseMotionListener.register(MapMouseMotionReceiver)",1,1,1
"freemind.controller.MapMouseWheelListener.MapMouseWheelListener(Controller)",1,1,1
"freemind.controller.MapMouseWheelListener.deregister()",1,1,1
"freemind.controller.MapMouseWheelListener.mouseWheelMoved(MouseWheelEvent)",1,2,2
"freemind.controller.MapMouseWheelListener.register(MouseWheelListener)",1,1,1
"freemind.controller.MenuBar.LastOpenedActionListener.LastOpenedActionListener(String)",1,1,1
"freemind.controller.MenuBar.LastOpenedActionListener.actionPerformed(ActionEvent)",1,2,2
"freemind.controller.MenuBar.MapsMenuActionListener.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.MenuBar.MenuBar(Controller)",1,2,2
"freemind.controller.MenuBar.ModesMenuActionListener.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.MenuBar.addAdditionalPopupActions()",1,2,2
"freemind.controller.MenuBar.getMapsPopupMenu()",1,1,1
"freemind.controller.MenuBar.getMenuHolder()",1,1,1
"freemind.controller.MenuBar.processKeyBinding(KeyStroke,KeyEvent,int,boolean)",1,1,1
"freemind.controller.MenuBar.updateEditMenu()",1,1,1
"freemind.controller.MenuBar.updateFileMenu()",1,1,1
"freemind.controller.MenuBar.updateLastOpenedList()",1,3,3
"freemind.controller.MenuBar.updateMapsMenu(StructuredMenuHolder,String)",2,4,5
"freemind.controller.MenuBar.updateMenus(ModeController)",1,1,1
"freemind.controller.MenuBar.updateModeMenu()",1,4,4
"freemind.controller.MenuBar.updateViewMenu()",1,1,1
"freemind.controller.MindMapNodesSelection.MindMapNodesSelection(String,String,String,String,String,String,List,List<String>)",1,1,1
"freemind.controller.MindMapNodesSelection.getTransferData(DataFlavor)",9,3,10
"freemind.controller.MindMapNodesSelection.getTransferDataFlavors()",1,1,1
"freemind.controller.MindMapNodesSelection.isDataFlavorSupported(DataFlavor)",9,10,18
"freemind.controller.MindMapNodesSelection.lostOwnership(Clipboard,Transferable)",1,1,1
"freemind.controller.MindMapNodesSelection.setDropAction(String)",1,1,1
"freemind.controller.NodeDragListener.NodeDragListener(Controller)",1,1,1
"freemind.controller.NodeDragListener.dragGestureRecognized(DragGestureEvent)",3,3,8
"freemind.controller.NodeDragListener.getCursorByAction(int)",4,2,4
"freemind.controller.NodeDropListener.NodeDropListener(Controller)",1,1,1
"freemind.controller.NodeDropListener.deregister()",1,1,1
"freemind.controller.NodeDropListener.dragEnter(DropTargetDragEvent)",1,2,2
"freemind.controller.NodeDropListener.dragExit(DropTargetEvent)",1,2,2
"freemind.controller.NodeDropListener.dragOver(DropTargetDragEvent)",1,2,2
"freemind.controller.NodeDropListener.drop(DropTargetDropEvent)",1,2,2
"freemind.controller.NodeDropListener.dropActionChanged(DropTargetDragEvent)",1,2,2
"freemind.controller.NodeDropListener.register(DropTargetListener)",1,1,1
"freemind.controller.NodeKeyListener.NodeKeyListener(Controller)",1,1,1
"freemind.controller.NodeKeyListener.deregister()",1,1,1
"freemind.controller.NodeKeyListener.keyPressed(KeyEvent)",1,2,2
"freemind.controller.NodeKeyListener.keyReleased(KeyEvent)",1,2,2
"freemind.controller.NodeKeyListener.keyTyped(KeyEvent)",1,2,2
"freemind.controller.NodeKeyListener.register(KeyListener)",1,1,1
"freemind.controller.NodeMotionListener.NodeMotionListener(Controller)",1,1,1
"freemind.controller.NodeMotionListener.deregister()",1,1,1
"freemind.controller.NodeMotionListener.mouseClicked(MouseEvent)",1,2,2
"freemind.controller.NodeMotionListener.mouseDragged(MouseEvent)",1,2,2
"freemind.controller.NodeMotionListener.mouseEntered(MouseEvent)",1,2,2
"freemind.controller.NodeMotionListener.mouseExited(MouseEvent)",1,2,2
"freemind.controller.NodeMotionListener.mouseMoved(MouseEvent)",1,2,2
"freemind.controller.NodeMotionListener.mousePressed(MouseEvent)",1,2,2
"freemind.controller.NodeMotionListener.mouseReleased(MouseEvent)",1,2,2
"freemind.controller.NodeMotionListener.register(NodeMotionAdapter)",1,1,1
"freemind.controller.NodeMouseMotionListener.NodeMouseMotionListener(Controller)",1,1,1
"freemind.controller.NodeMouseMotionListener.deregister()",1,1,1
"freemind.controller.NodeMouseMotionListener.mouseClicked(MouseEvent)",1,2,2
"freemind.controller.NodeMouseMotionListener.mouseDragged(MouseEvent)",1,2,2
"freemind.controller.NodeMouseMotionListener.mouseEntered(MouseEvent)",1,2,2
"freemind.controller.NodeMouseMotionListener.mouseExited(MouseEvent)",1,2,2
"freemind.controller.NodeMouseMotionListener.mouseMoved(MouseEvent)",1,2,2
"freemind.controller.NodeMouseMotionListener.mousePressed(MouseEvent)",1,2,2
"freemind.controller.NodeMouseMotionListener.mouseReleased(MouseEvent)",1,2,2
"freemind.controller.NodeMouseMotionListener.register(NodeMouseMotionObserver)",1,1,1
"freemind.controller.NodeMouseMotionListener.updateSelectionMethod()",1,2,2
"freemind.controller.StructuredMenuHolder.DefaultMenuAdderCreator.createAdder(JMenu)",1,1,1
"freemind.controller.StructuredMenuHolder.MapTokenPair.MapTokenPair(Map,String,Vector<String>)",1,1,1
"freemind.controller.StructuredMenuHolder.MenuItemAdder.MenuItemAdder(JMenu)",1,1,1
"freemind.controller.StructuredMenuHolder.MenuItemAdder.addCategory(String)",1,1,1
"freemind.controller.StructuredMenuHolder.MenuItemAdder.addMenuItem(StructuredMenuItemHolder)",1,2,3
"freemind.controller.StructuredMenuHolder.MenuItemAdder.addSeparator()",2,1,2
"freemind.controller.StructuredMenuHolder.PrintMenuAdder.addCategory(String)",1,1,1
"freemind.controller.StructuredMenuHolder.PrintMenuAdder.addMenuItem(StructuredMenuItemHolder)",1,1,1
"freemind.controller.StructuredMenuHolder.PrintMenuAdder.addSeparator()",1,1,1
"freemind.controller.StructuredMenuHolder.PrintMenuAdderCreator.createAdder(JMenu)",1,1,1
"freemind.controller.StructuredMenuHolder.SeparatorHolder.SeparatorHolder()",1,1,1
"freemind.controller.StructuredMenuHolder.StructuredMenuHolder()",1,3,3
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.StructuredMenuListener()",1,1,1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.addItem(StructuredMenuItemHolder)",1,1,1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.menuCanceled(MenuEvent)",1,1,1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.menuDeselected(MenuEvent)",1,1,1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener.menuSelected(MenuEvent)",1,8,8
"freemind.controller.StructuredMenuHolder.addAction(Action,String)",1,2,2
"freemind.controller.StructuredMenuHolder.addCategory(String)",1,1,1
"freemind.controller.StructuredMenuHolder.addMenu(JMenu,String)",1,1,1
"freemind.controller.StructuredMenuHolder.addMenu(Object,StringTokenizer)",1,1,1
"freemind.controller.StructuredMenuHolder.addMenuItem(JMenuItem,String)",1,1,1
"freemind.controller.StructuredMenuHolder.addSeparator(String)",1,1,2
"freemind.controller.StructuredMenuHolder.adjustMenuItem(JMenuItem)",1,3,3
"freemind.controller.StructuredMenuHolder.adjustTooltips(StructuredMenuItemHolder)",1,3,3
"freemind.controller.StructuredMenuHolder.getCategoryMap(StringTokenizer,Map)",3,5,5
"freemind.controller.StructuredMenuHolder.lastItemIsASeparator(JMenu)",3,2,3
"freemind.controller.StructuredMenuHolder.lastItemIsASeparator(JPopupMenu)",3,2,3
"freemind.controller.StructuredMenuHolder.print(String)",1,1,2
"freemind.controller.StructuredMenuHolder.setSelected(JMenuItem,boolean)",1,2,3
"freemind.controller.StructuredMenuHolder.toString()",1,1,1
"freemind.controller.StructuredMenuHolder.updateMenus(JMenuBar,String)",1,1,1
"freemind.controller.StructuredMenuHolder.updateMenus(JPopupMenu,String)",2,2,3
"freemind.controller.StructuredMenuHolder.updateMenus(JToolBar,String)",1,1,1
"freemind.controller.StructuredMenuHolder.updateMenus(MenuAdder,Map<String, Vector<String>>,MenuAdderCreator)",4,6,7
"freemind.controller.StructuredMenuItemHolder.StructuredMenuItemHolder()",1,1,1
"freemind.controller.StructuredMenuItemHolder.getAction()",1,1,1
"freemind.controller.StructuredMenuItemHolder.getEnabledListener()",1,1,1
"freemind.controller.StructuredMenuItemHolder.getMenuItem()",1,1,1
"freemind.controller.StructuredMenuItemHolder.getSelectionListener()",1,1,1
"freemind.controller.StructuredMenuItemHolder.setAction(Action)",1,3,3
"freemind.controller.StructuredMenuItemHolder.setEnabledListener(MenuItemEnabledListener)",1,1,1
"freemind.controller.StructuredMenuItemHolder.setMenuItem(JMenuItem)",1,1,1
"freemind.controller.StructuredMenuItemHolder.setSelectedListener(MenuItemSelectedListener)",1,1,1
"freemind.controller.color.ColorPair.ColorPair(Color,String)",1,1,1
"freemind.controller.color.ColorPair.ColorPair(Color,String,String)",1,1,1
"freemind.controller.color.JColorCombo.ColorIcon.ColorIcon(Color)",1,1,1
"freemind.controller.color.JColorCombo.ComboBoxRenderer.ComboBoxRenderer()",1,1,1
"freemind.controller.color.JColorCombo.ComboBoxRenderer.getListCellRendererComponent(JList<? extends ColorPair>,ColorPair,int,boolean,boolean)",1,2,2
"freemind.controller.color.JColorCombo.JColorCombo()",1,2,2
"freemind.controller.color.JColorCombo.getMaximumSize()",1,1,1
"freemind.controller.color.JColorCombo.main(String[])",1,1,1
"freemind.controller.filter.DefaultFilter.DefaultFilter(Condition,boolean,boolean)",1,1,3
"freemind.controller.filter.DefaultFilter.addFilterResult(MindMapNode,int)",1,1,1
"freemind.controller.filter.DefaultFilter.applyFilter(Controller)",1,3,3
"freemind.controller.filter.DefaultFilter.applyFilter(MindMapNode,Controller,boolean,boolean,boolean)",1,5,7
"freemind.controller.filter.DefaultFilter.areAncestorsShown()",1,1,1
"freemind.controller.filter.DefaultFilter.areDescendantsShown()",1,1,1
"freemind.controller.filter.DefaultFilter.areEclipsedShown()",1,1,1
"freemind.controller.filter.DefaultFilter.areHiddenShown()",1,1,1
"freemind.controller.filter.DefaultFilter.areMatchedShown()",1,1,1
"freemind.controller.filter.DefaultFilter.filterChildren(MindMapNode,Controller,boolean,boolean)",1,2,2
"freemind.controller.filter.DefaultFilter.getCondition()",1,1,1
"freemind.controller.filter.DefaultFilter.getNearestVisibleParent(NodeView)",2,1,2
"freemind.controller.filter.DefaultFilter.isVisible(MindMapNode)",2,1,4
"freemind.controller.filter.DefaultFilter.resetFilter(MindMapNode)",1,1,1
"freemind.controller.filter.DefaultFilter.selectVisibleNode(MapView)",2,4,5
"freemind.controller.filter.FilterComposerDialog.AddConditionAction.AddConditionAction()",1,1,1
"freemind.controller.filter.FilterComposerDialog.AddConditionAction.actionPerformed(ActionEvent)",1,7,8
"freemind.controller.filter.FilterComposerDialog.CloseAction.actionPerformed(ActionEvent)",1,3,5
"freemind.controller.filter.FilterComposerDialog.ConditionListMouseListener.mouseClicked(MouseEvent)",1,3,3
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener.contentsChanged(ListDataEvent)",1,1,1
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener.intervalAdded(ListDataEvent)",1,1,1
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener.intervalRemoved(ListDataEvent)",1,1,1
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener.valueChanged(ListSelectionEvent)",3,3,3
"freemind.controller.filter.FilterComposerDialog.CreateConjunctConditionAction.CreateConjunctConditionAction()",1,1,1
"freemind.controller.filter.FilterComposerDialog.CreateConjunctConditionAction.actionPerformed(ActionEvent)",2,1,2
"freemind.controller.filter.FilterComposerDialog.CreateDisjunctConditionAction.CreateDisjunctConditionAction()",1,1,1
"freemind.controller.filter.FilterComposerDialog.CreateDisjunctConditionAction.actionPerformed(ActionEvent)",2,1,2
"freemind.controller.filter.FilterComposerDialog.CreateNotSatisfiedConditionAction.CreateNotSatisfiedConditionAction()",1,1,1
"freemind.controller.filter.FilterComposerDialog.CreateNotSatisfiedConditionAction.actionPerformed(ActionEvent)",1,3,3
"freemind.controller.filter.FilterComposerDialog.DeleteConditionAction.DeleteConditionAction()",1,1,1
"freemind.controller.filter.FilterComposerDialog.DeleteConditionAction.actionPerformed(ActionEvent)",1,3,4
"freemind.controller.filter.FilterComposerDialog.FilterComposerDialog(Controller,FilterToolbar)",1,2,2
"freemind.controller.filter.FilterComposerDialog.LoadAction.actionPerformed(ActionEvent)",1,3,3
"freemind.controller.filter.FilterComposerDialog.LoadAction.handleLoadingException(Exception)",1,1,1
"freemind.controller.filter.FilterComposerDialog.MindMapFilterFileFilter.accept(File)",4,2,4
"freemind.controller.filter.FilterComposerDialog.MindMapFilterFileFilter.getDescription()",1,1,1
"freemind.controller.filter.FilterComposerDialog.SaveAction.actionPerformed(ActionEvent)",2,2,4
"freemind.controller.filter.FilterComposerDialog.SaveAction.handleSavingException(Exception)",1,1,1
"freemind.controller.filter.FilterComposerDialog.SelectedAttributeChangeListener.itemStateChanged(ItemEvent)",5,10,10
"freemind.controller.filter.FilterComposerDialog.SimpleConditionChangeListener.itemStateChanged(ItemEvent)",1,2,2
"freemind.controller.filter.FilterComposerDialog.addAttributeKeysRecursively(MindMapNode,SortedListModel)",1,3,3
"freemind.controller.filter.FilterComposerDialog.addAttributeValuesRecursively(String,MindMapNode,SortedListModel)",1,4,4
"freemind.controller.filter.FilterComposerDialog.applyChanges()",1,1,1
"freemind.controller.filter.FilterComposerDialog.getAttributeValue()",2,3,3
"freemind.controller.filter.FilterComposerDialog.getAttributesFromMap(MindMap)",1,2,2
"freemind.controller.filter.FilterComposerDialog.getFileChooser()",1,1,1
"freemind.controller.filter.FilterComposerDialog.initInternalConditionModel()",1,4,5
"freemind.controller.filter.FilterComposerDialog.mapChanged(MindMap)",1,6,6
"freemind.controller.filter.FilterComposerDialog.selectCondition()",3,3,3
"freemind.controller.filter.FilterComposerDialog.setSelectedItem(Object)",1,1,1
"freemind.controller.filter.FilterComposerDialog.show()",1,1,1
"freemind.controller.filter.FilterController.FilterController(Controller)",1,1,1
"freemind.controller.filter.FilterController.afterMapClose(MapModule,Mode)",1,1,1
"freemind.controller.filter.FilterController.afterMapModuleChange(MapModule,Mode,MapModule,Mode)",1,3,3
"freemind.controller.filter.FilterController.beforeMapModuleChange(MapModule,Mode,MapModule,Mode)",1,1,1
"freemind.controller.filter.FilterController.createTransparentFilter()",1,2,2
"freemind.controller.filter.FilterController.getConditionFactory()",1,1,2
"freemind.controller.filter.FilterController.getConditionRenderer()",1,1,2
"freemind.controller.filter.FilterController.getFilterConditionModel()",1,1,1
"freemind.controller.filter.FilterController.getFilterToolbar()",1,2,2
"freemind.controller.filter.FilterController.getMap()",1,1,1
"freemind.controller.filter.FilterController.isMapModuleChangeAllowed(MapModule,Mode,MapModule,Mode)",1,1,1
"freemind.controller.filter.FilterController.isVisible()",1,1,1
"freemind.controller.filter.FilterController.loadConditions(DefaultComboBoxModel<Condition>,String)",1,2,2
"freemind.controller.filter.FilterController.numberOfOpenMapInformation(int,int)",1,1,1
"freemind.controller.filter.FilterController.refreshMap()",1,1,1
"freemind.controller.filter.FilterController.saveConditions()",1,2,2
"freemind.controller.filter.FilterController.saveConditions(DefaultComboBoxModel<Condition>,String)",1,2,2
"freemind.controller.filter.FilterController.setFilterConditionModel(DefaultComboBoxModel<Condition>)",1,1,1
"freemind.controller.filter.FilterController.showFilterToolbar(boolean)",2,2,3
"freemind.controller.filter.FilterInfo.FilterInfo()",1,1,1
"freemind.controller.filter.FilterInfo.add(int)",1,1,2
"freemind.controller.filter.FilterInfo.get()",1,1,1
"freemind.controller.filter.FilterInfo.isAncestor()",1,1,1
"freemind.controller.filter.FilterInfo.isMatched()",1,1,1
"freemind.controller.filter.FilterInfo.reset()",1,1,1
"freemind.controller.filter.FilterInfo.setAncestor()",1,1,1
"freemind.controller.filter.FilterInfo.setDescendant()",1,1,1
"freemind.controller.filter.FilterInfo.setMatched()",1,1,1
"freemind.controller.filter.FilterToolbar.EditFilterAction.EditFilterAction()",1,1,1
"freemind.controller.filter.FilterToolbar.EditFilterAction.actionPerformed(ActionEvent)",1,2,2
"freemind.controller.filter.FilterToolbar.EditFilterAction.getFilterDialog()",1,2,2
"freemind.controller.filter.FilterToolbar.FilterChangeListener.FilterChangeListener()",1,1,1
"freemind.controller.filter.FilterToolbar.FilterChangeListener.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.filter.FilterToolbar.FilterChangeListener.filterChanged()",1,2,2
"freemind.controller.filter.FilterToolbar.FilterChangeListener.itemStateChanged(ItemEvent)",1,2,2
"freemind.controller.filter.FilterToolbar.FilterChangeListener.propertyChange(PropertyChangeEvent)",1,2,2
"freemind.controller.filter.FilterToolbar.FilterToolbar(Controller)",1,1,1
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction.UnfoldAncestorsAction()",1,1,1
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction.actionPerformed(ActionEvent)",1,2,2
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction.setFolded(MindMapNode,boolean)",1,3,3
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction.unfoldAncestors(MindMapNode)",1,4,4
"freemind.controller.filter.FilterToolbar.addStandardConditions()",1,2,2
"freemind.controller.filter.FilterToolbar.getFilterConditionModel()",1,1,1
"freemind.controller.filter.FilterToolbar.getFilterDialog()",1,1,1
"freemind.controller.filter.FilterToolbar.getSelectedCondition()",1,1,1
"freemind.controller.filter.FilterToolbar.initConditions()",1,1,2
"freemind.controller.filter.FilterToolbar.mapChanged(MindMap)",2,3,4
"freemind.controller.filter.FilterToolbar.refreshMap()",1,1,1
"freemind.controller.filter.FilterToolbar.resetFilter()",1,1,1
"freemind.controller.filter.FilterToolbar.saveConditions()",1,1,2
"freemind.controller.filter.FilterToolbar.setFilterConditionModel(ComboBoxModel<Condition>)",1,1,1
"freemind.controller.filter.FilterToolbar.setMapFilter()",1,3,3
"freemind.controller.filter.condition.AttributeCompareCondition.AttributeCompareCondition(String,String,boolean,int,boolean)",1,1,1
"freemind.controller.filter.condition.AttributeCompareCondition.checkNode(Controller,MindMapNode)",3,3,5
"freemind.controller.filter.condition.AttributeCompareCondition.createDesctiption()",1,1,1
"freemind.controller.filter.condition.AttributeCompareCondition.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.AttributeCompareCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.AttributeExistsCondition.AttributeExistsCondition(String)",1,1,1
"freemind.controller.filter.condition.AttributeExistsCondition.checkNode(Controller,MindMapNode)",3,2,3
"freemind.controller.filter.condition.AttributeExistsCondition.createDesctiption()",1,1,1
"freemind.controller.filter.condition.AttributeExistsCondition.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.AttributeExistsCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.AttributeNotExistsCondition.AttributeNotExistsCondition(String)",1,1,1
"freemind.controller.filter.condition.AttributeNotExistsCondition.checkNode(Controller,MindMapNode)",3,2,3
"freemind.controller.filter.condition.AttributeNotExistsCondition.createDesctiption()",1,1,1
"freemind.controller.filter.condition.AttributeNotExistsCondition.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.AttributeNotExistsCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.CompareConditionAdapter.CompareConditionAdapter(String,boolean)",1,1,1
"freemind.controller.filter.condition.CompareConditionAdapter.compareTo(String)",1,3,6
"freemind.controller.filter.condition.CompareConditionAdapter.createDescription(String,int,boolean)",2,2,8
"freemind.controller.filter.condition.CompareConditionAdapter.saveAttributes(XMLElement)",1,1,1
"freemind.controller.filter.condition.ConditionFactory.ConditionFactory()",1,1,1
"freemind.controller.filter.condition.ConditionFactory.createAttributeCondition(String,NamedObject,String,boolean)",16,2,16
"freemind.controller.filter.condition.ConditionFactory.createCellRendererComponent(String)",1,1,1
"freemind.controller.filter.condition.ConditionFactory.createCondition(NamedObject,NamedObject,String,boolean)",4,4,6
"freemind.controller.filter.condition.ConditionFactory.createDescription(String,String,String,boolean)",1,2,4
"freemind.controller.filter.condition.ConditionFactory.createNodeCondition(NamedObject,String,boolean)",18,4,18
"freemind.controller.filter.condition.ConditionFactory.getAttributeConditionNames()",1,1,1
"freemind.controller.filter.condition.ConditionFactory.getIconConditionNames()",1,1,1
"freemind.controller.filter.condition.ConditionFactory.getNodeConditionNames()",1,1,1
"freemind.controller.filter.condition.ConditionFactory.loadCondition(XMLElement)",12,12,12
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.ConditionNotSatisfiedDecorator(Condition)",1,1,1
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.checkNode(Controller,MindMapNode)",1,1,1
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.getListCellRendererComponent()",1,1,1
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.ConditionRenderer.getListCellRendererComponent(JList,Object,int,boolean,boolean)",2,5,5
"freemind.controller.filter.condition.ConjunctConditions.ConjunctConditions(Object[])",1,1,1
"freemind.controller.filter.condition.ConjunctConditions.checkNode(Controller,MindMapNode)",3,2,3
"freemind.controller.filter.condition.ConjunctConditions.getListCellRendererComponent()",1,2,2
"freemind.controller.filter.condition.ConjunctConditions.load(XMLElement)",1,2,2
"freemind.controller.filter.condition.ConjunctConditions.save(XMLElement)",1,2,2
"freemind.controller.filter.condition.DisjunctConditions.DisjunctConditions(Object[])",1,1,1
"freemind.controller.filter.condition.DisjunctConditions.checkNode(Controller,MindMapNode)",3,2,3
"freemind.controller.filter.condition.DisjunctConditions.getListCellRendererComponent()",1,2,2
"freemind.controller.filter.condition.DisjunctConditions.load(XMLElement)",1,2,2
"freemind.controller.filter.condition.DisjunctConditions.save(XMLElement)",1,2,2
"freemind.controller.filter.condition.IconContainedCondition.IconContainedCondition(String)",1,1,1
"freemind.controller.filter.condition.IconContainedCondition.checkNode(Controller,MindMapNode)",1,2,2
"freemind.controller.filter.condition.IconContainedCondition.getIconName()",1,1,1
"freemind.controller.filter.condition.IconContainedCondition.getListCellRendererComponent()",1,1,1
"freemind.controller.filter.condition.IconContainedCondition.isStateIconContained(MindMapNode,String)",3,2,3
"freemind.controller.filter.condition.IconContainedCondition.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.IconContainedCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.IconNotContainedCondition.IconNotContainedCondition(String)",1,1,1
"freemind.controller.filter.condition.IconNotContainedCondition.checkNode(Controller,MindMapNode)",1,2,2
"freemind.controller.filter.condition.IconNotContainedCondition.getIconName()",1,1,1
"freemind.controller.filter.condition.IconNotContainedCondition.getListCellRendererComponent()",1,1,1
"freemind.controller.filter.condition.IconNotContainedCondition.iconFirstIndex(MindMapNode,String)",3,3,3
"freemind.controller.filter.condition.IconNotContainedCondition.iconLastIndex(MindMapNode,String)",3,3,3
"freemind.controller.filter.condition.IconNotContainedCondition.isStateIconContained(MindMapNode,String)",3,2,3
"freemind.controller.filter.condition.IconNotContainedCondition.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.IconNotContainedCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.IgnoreCaseNodeContainsCondition(String)",1,1,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.checkNode(Controller,MindMapNode)",1,1,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.createDesctiption()",1,1,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.JCondition.JCondition()",1,1,1
"freemind.controller.filter.condition.NoFilteringCondition.NoFilteringCondition()",1,1,1
"freemind.controller.filter.condition.NoFilteringCondition.checkNode(Controller,MindMapNode)",1,1,1
"freemind.controller.filter.condition.NoFilteringCondition.createCondition()",1,1,2
"freemind.controller.filter.condition.NoFilteringCondition.getListCellRendererComponent()",1,1,2
"freemind.controller.filter.condition.NoFilteringCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.NoFilteringCondition.toString()",1,2,2
"freemind.controller.filter.condition.NodeCompareCondition.NodeCompareCondition(String,boolean,int,boolean)",1,1,1
"freemind.controller.filter.condition.NodeCompareCondition.checkNode(Controller,MindMapNode)",1,1,2
"freemind.controller.filter.condition.NodeCompareCondition.createDesctiption()",1,1,1
"freemind.controller.filter.condition.NodeCompareCondition.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.NodeCompareCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.NodeCondition.NodeCondition()",1,1,1
"freemind.controller.filter.condition.NodeCondition.getListCellRendererComponent()",1,2,2
"freemind.controller.filter.condition.NodeCondition.saveAttributes(XMLElement)",1,1,1
"freemind.controller.filter.condition.NodeCondition.toString()",1,2,2
"freemind.controller.filter.condition.NodeContainsCondition.NodeContainsCondition(String)",1,1,1
"freemind.controller.filter.condition.NodeContainsCondition.checkNode(Controller,MindMapNode)",1,1,1
"freemind.controller.filter.condition.NodeContainsCondition.createDesctiption()",1,1,1
"freemind.controller.filter.condition.NodeContainsCondition.load(XMLElement)",1,1,1
"freemind.controller.filter.condition.NodeContainsCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.SelectedViewCondition.CreateCondition()",1,1,2
"freemind.controller.filter.condition.SelectedViewCondition.SelectedViewCondition()",1,1,1
"freemind.controller.filter.condition.SelectedViewCondition.checkNode(Controller,MindMapNode)",1,2,2
"freemind.controller.filter.condition.SelectedViewCondition.getListCellRendererComponent()",1,2,2
"freemind.controller.filter.condition.SelectedViewCondition.save(XMLElement)",1,1,1
"freemind.controller.filter.condition.SelectedViewCondition.toString()",1,2,2
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtendedComboBoxModel()",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtendedComboBoxModel(Object[])",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtendedComboBoxModel(Vector)",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtensionDataListener.contentsChanged(ListDataEvent)",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtensionDataListener.intervalAdded(ListDataEvent)",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtensionDataListener.intervalRemoved(ListDataEvent)",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.addSortedElement(Object)",1,3,3
"freemind.controller.filter.util.ExtendedComboBoxModel.getElementAt(int)",2,2,3
"freemind.controller.filter.util.ExtendedComboBoxModel.getExtensionSize()",1,2,2
"freemind.controller.filter.util.ExtendedComboBoxModel.getIndexOf(Object)",2,2,4
"freemind.controller.filter.util.ExtendedComboBoxModel.getModel()",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.getOwnSize()",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.getSize()",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.insertElementAt(Object,int)",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.removeAllElements()",1,2,2
"freemind.controller.filter.util.ExtendedComboBoxModel.removeElement(Object)",1,1,1
"freemind.controller.filter.util.ExtendedComboBoxModel.removeElementAt(int)",1,2,2
"freemind.controller.filter.util.ExtendedComboBoxModel.setExtensionList(SortedListModel)",1,5,5
"freemind.controller.filter.util.SortedComboBoxModel.getSelectedItem()",1,1,1
"freemind.controller.filter.util.SortedComboBoxModel.setSelectedItem(Object)",1,1,1
"freemind.controller.filter.util.SortedMapListModel.SortedMapListModel()",1,1,1
"freemind.controller.filter.util.SortedMapListModel.add(Object)",1,2,2
"freemind.controller.filter.util.SortedMapListModel.addAll(List)",1,1,1
"freemind.controller.filter.util.SortedMapListModel.addAll(Object[])",1,1,1
"freemind.controller.filter.util.SortedMapListModel.clear()",1,2,2
"freemind.controller.filter.util.SortedMapListModel.contains(Object)",1,1,1
"freemind.controller.filter.util.SortedMapListModel.firstElement()",1,1,1
"freemind.controller.filter.util.SortedMapListModel.getElementAt(int)",1,1,1
"freemind.controller.filter.util.SortedMapListModel.getIndexOf(Object)",3,2,3
"freemind.controller.filter.util.SortedMapListModel.getSize()",1,1,1
"freemind.controller.filter.util.SortedMapListModel.iterator()",1,1,1
"freemind.controller.filter.util.SortedMapListModel.lastElement()",1,1,1
"freemind.controller.filter.util.SortedMapListModel.remove(Object)",1,2,2
"freemind.controller.filter.util.SortedMapListModel.replace(Object,Object)",2,2,4
"freemind.controller.filter.util.SortedMapVector.MapElement.MapElement(Comparable,Object)",1,1,1
"freemind.controller.filter.util.SortedMapVector.MapElement.getKey()",1,1,1
"freemind.controller.filter.util.SortedMapVector.MapElement.getValue()",1,1,1
"freemind.controller.filter.util.SortedMapVector.SortedMapVector()",1,1,1
"freemind.controller.filter.util.SortedMapVector.add(Comparable,Object)",1,2,2
"freemind.controller.filter.util.SortedMapVector.capacity()",1,1,1
"freemind.controller.filter.util.SortedMapVector.clear()",1,1,1
"freemind.controller.filter.util.SortedMapVector.containsKey(Comparable)",1,1,1
"freemind.controller.filter.util.SortedMapVector.findElement(Comparable)",1,1,1
"freemind.controller.filter.util.SortedMapVector.findElement(Comparable,int,int)",10,7,12
"freemind.controller.filter.util.SortedMapVector.getKey(int)",1,1,1
"freemind.controller.filter.util.SortedMapVector.getValue(Comparable)",2,2,2
"freemind.controller.filter.util.SortedMapVector.getValue(int)",1,1,1
"freemind.controller.filter.util.SortedMapVector.indexOf(Comparable)",2,1,2
"freemind.controller.filter.util.SortedMapVector.remove(Comparable)",2,2,2
"freemind.controller.filter.util.SortedMapVector.remove(int)",1,1,1
"freemind.controller.filter.util.SortedMapVector.size()",1,1,1
"freemind.controller.printpreview.BrowseAction.BrowseAction(Preview,JLabel,int)",1,1,1
"freemind.controller.printpreview.BrowseAction.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.printpreview.BrowseAction.getPageIndexText()",1,1,1
"freemind.controller.printpreview.BrowseAction.paintPageIndex()",1,1,1
"freemind.controller.printpreview.Preview.Preview(MapView,double,PageFormat)",1,3,3
"freemind.controller.printpreview.Preview.changeZoom(double)",1,1,1
"freemind.controller.printpreview.Preview.getMinimumSize()",1,1,1
"freemind.controller.printpreview.Preview.getPageFormat()",1,1,1
"freemind.controller.printpreview.Preview.getPageHeight(PageFormat)",1,1,1
"freemind.controller.printpreview.Preview.getPageIndex()",1,1,1
"freemind.controller.printpreview.Preview.getPageWidth(PageFormat)",1,1,1
"freemind.controller.printpreview.Preview.moveIndex(int)",1,1,2
"freemind.controller.printpreview.Preview.paint(Graphics)",1,3,4
"freemind.controller.printpreview.Preview.paintPaper(Graphics,PageFormat)",1,1,1
"freemind.controller.printpreview.Preview.resize()",1,1,1
"freemind.controller.printpreview.PreviewDialog.PreviewDialog(String,MapView,PageFormat)",1,1,1
"freemind.controller.printpreview.PreviewDialog.actionPerformed(ActionEvent)",1,1,1
"freemind.controller.printpreview.PreviewDialog.getButton(String,AbstractAction)",1,1,1
"freemind.controller.printpreview.PreviewDialog.getButton(String,String,AbstractAction)",1,5,5
"freemind.controller.printpreview.ZoomAction.ZoomAction(Preview,double)",1,1,1
"freemind.controller.printpreview.ZoomAction.actionPerformed(ActionEvent)",1,1,1
"freemind.extensions.ExportHook.ImageFilter.ImageFilter(String,String)",1,1,1
"freemind.extensions.ExportHook.ImageFilter.accept(File)",2,1,2
"freemind.extensions.ExportHook.ImageFilter.getDescription()",1,1,2
"freemind.extensions.ExportHook.chooseFile(String,String,String)",1,1,1
"freemind.extensions.ExportHook.chooseImageFile(String,String,String,ModeController)",4,4,7
"freemind.extensions.ExportHook.copyFromFile(String,String,String)",1,2,2
"freemind.extensions.ExportHook.copyFromResource(String,String,String)",2,3,3
"freemind.extensions.ExportHook.createBufferedImage()",2,1,2
"freemind.extensions.ExportHook.getTranslatableResourceString(String)",2,3,3
"freemind.extensions.HookAdapter.HookAdapter()",1,2,2
"freemind.extensions.HookAdapter.getController()",1,1,1
"freemind.extensions.HookAdapter.getName()",1,1,1
"freemind.extensions.HookAdapter.getPluginBaseClass()",1,1,1
"freemind.extensions.HookAdapter.getProperties()",1,1,1
"freemind.extensions.HookAdapter.getResource(String)",1,1,1
"freemind.extensions.HookAdapter.getResourceString(String)",1,3,3
"freemind.extensions.HookAdapter.obtainFocusForSelected()",1,1,1
"freemind.extensions.HookAdapter.setController(MapFeedback)",1,1,2
"freemind.extensions.HookAdapter.setName(String)",1,1,1
"freemind.extensions.HookAdapter.setPluginBaseClass(PluginBaseClassSearcher)",1,1,1
"freemind.extensions.HookAdapter.setProperties(Properties)",1,1,1
"freemind.extensions.HookAdapter.shutdownMapHook()",1,1,1
"freemind.extensions.HookAdapter.startupMapHook()",1,1,1
"freemind.extensions.HookDescriptorBase.HookDescriptorBase(Plugin,String)",1,2,2
"freemind.extensions.HookDescriptorBase.createPluginClasspathString(List<PluginClasspath>)",1,2,2
"freemind.extensions.HookDescriptorBase.getClassLoader(List<PluginClasspath>)",2,5,5
"freemind.extensions.HookDescriptorBase.getFromPropertiesIfNecessary(String)",3,2,3
"freemind.extensions.HookDescriptorBase.getFromResourceIfNecessary(String)",3,2,3
"freemind.extensions.HookDescriptorBase.getPluginBase()",1,1,1
"freemind.extensions.HookDescriptorBase.getPluginClassLoader()",1,1,1
"freemind.extensions.HookDescriptorBase.getPluginClasspath()",1,3,3
"freemind.extensions.HookDescriptorBase.getPluginDirectory()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.HookDescriptorPluginAction(String,Plugin,PluginAction)",1,6,6
"freemind.extensions.HookDescriptorPluginAction.getBaseClass()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.getClassName()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.getDocumentation()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.getIconPath()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.getInstanciationMethod()",4,4,4
"freemind.extensions.HookDescriptorPluginAction.getKeyStroke()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.getModes()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.getName()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.getProperties()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.isSelectable()",1,1,1
"freemind.extensions.HookDescriptorPluginAction.toString()",1,1,1
"freemind.extensions.HookDescriptorRegistration.HookDescriptorRegistration(String,Plugin,PluginRegistration)",1,1,1
"freemind.extensions.HookDescriptorRegistration.getClassName()",1,1,1
"freemind.extensions.HookDescriptorRegistration.getIsPluginBase()",1,1,1
"freemind.extensions.HookDescriptorRegistration.getListPluginModeList()",1,1,1
"freemind.extensions.HookFactory.RegistrationContainer.RegistrationContainer()",1,1,1
"freemind.extensions.HookFactoryAdapter.HookFactoryAdapter()",1,1,1
"freemind.extensions.HookFactoryAdapter.deregisterAllRegistrationContainer()",1,1,1
"freemind.extensions.HookFactoryAdapter.getHookInNode(MindMapNode,String)",3,2,3
"freemind.extensions.HookFactoryAdapter.registerRegistrationContainer(RegistrationContainer,HookRegistration)",1,2,2
"freemind.extensions.HookInstanciationMethod.AllDestinationNodesGetter.addChilds(MindMapNode,Collection<MindMapNode>)",1,2,2
"freemind.extensions.HookInstanciationMethod.AllDestinationNodesGetter.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",1,1,1
"freemind.extensions.HookInstanciationMethod.AllDestinationNodesGetter.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",1,1,1
"freemind.extensions.HookInstanciationMethod.DefaultDestinationNodesGetter.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",1,1,1
"freemind.extensions.HookInstanciationMethod.DefaultDestinationNodesGetter.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",1,1,1
"freemind.extensions.HookInstanciationMethod.HookInstanciationMethod(boolean,boolean,DestinationNodesGetter,boolean)",1,1,1
"freemind.extensions.HookInstanciationMethod.RootDestinationNodesGetter.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",1,1,1
"freemind.extensions.HookInstanciationMethod.RootDestinationNodesGetter.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",1,1,1
"freemind.extensions.HookInstanciationMethod.getAllInstanciationMethods()",1,1,1
"freemind.extensions.HookInstanciationMethod.getCenterNode(MapFeedback,MindMapNode,List<MindMapNode>)",1,1,1
"freemind.extensions.HookInstanciationMethod.getDestinationNodes(MapFeedback,MindMapNode,List<MindMapNode>)",1,1,1
"freemind.extensions.HookInstanciationMethod.isAlreadyPresent(String,MindMapNode)",3,2,3
"freemind.extensions.HookInstanciationMethod.isPermanent()",1,1,1
"freemind.extensions.HookInstanciationMethod.isSingleton()",1,1,1
"freemind.extensions.HookInstanciationMethod.isUndoable()",1,1,1
"freemind.extensions.ImportWizard.ImportWizard()",1,2,2
"freemind.extensions.ImportWizard.addClassesFromDir(Vector<String>,File,File,int)",2,7,8
"freemind.extensions.ImportWizard.addClassesFromZip(Vector<String>,File)",1,4,4
"freemind.extensions.ImportWizard.buildClassList()",3,7,8
"freemind.extensions.ImportWizard.isInteresting(String)",2,1,2
"freemind.extensions.ModeControllerHookAdapter.ModeControllerHookAdapter()",1,1,1
"freemind.extensions.NodeHookAdapter.NodeHookAdapter()",1,1,1
"freemind.extensions.NodeHookAdapter.getMap()",1,1,1
"freemind.extensions.NodeHookAdapter.getNode()",1,1,1
"freemind.extensions.NodeHookAdapter.getNodeId()",1,1,1
"freemind.extensions.NodeHookAdapter.invoke(MindMapNode)",1,1,1
"freemind.extensions.NodeHookAdapter.nodeChanged(MindMapNode)",1,1,1
"freemind.extensions.NodeHookAdapter.setMap(MindMap)",1,1,1
"freemind.extensions.NodeHookAdapter.setNode(MindMapNode)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.PermanentNodeHookAdapter()",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.deregisterFilter()",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.executeTransaction(ActionPair)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.filterAction(ActionPair)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.loadFrom(XMLElement)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.loadNameValuePairs(XMLElement)",2,4,5
"freemind.extensions.PermanentNodeHookAdapter.onAddChild(MindMapNode)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onAddChildren(MindMapNode)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onFocusNode(NodeView)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onLostFocusNode(NodeView)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onNewChild(MindMapNode)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onRemoveChild(MindMapNode)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onRemoveChildren(MindMapNode,MindMapNode)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onUpdateChildrenHook(MindMapNode)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onUpdateNodeHook()",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onViewCreatedHook(NodeView)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.onViewRemovedHook(NodeView)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.processUnfinishedLinks()",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.registerFilter()",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.save(XMLElement)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.saveHtml(Writer)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.saveNameValuePairs(HashMap<String, Object>,XMLElement)",1,3,3
"freemind.extensions.PermanentNodeHookAdapter.setToolTip(MindMapNode,String,String)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.setToolTip(String,String)",1,1,1
"freemind.extensions.PermanentNodeHookAdapter.shutdownMapHook()",1,1,1
"freemind.extensions.PermanentNodeHookSubstituteUnknown.PermanentNodeHookSubstituteUnknown(String)",1,1,1
"freemind.extensions.PermanentNodeHookSubstituteUnknown.getName()",1,1,1
"freemind.extensions.PermanentNodeHookSubstituteUnknown.loadFrom(XMLElement)",1,1,1
"freemind.extensions.PermanentNodeHookSubstituteUnknown.save(XMLElement)",1,2,2
"freemind.main.Base64Coding.decode64(String)",8,11,17
"freemind.main.Base64Coding.encode64(byte[])",1,2,10
"freemind.main.EditServer.EditServer(String,FreeMindMain)",1,4,4
"freemind.main.EditServer.getPort()",1,1,1
"freemind.main.EditServer.handleClient(Socket,DataInputStream)",2,5,5
"freemind.main.EditServer.isOK()",1,1,1
"freemind.main.EditServer.run()",3,4,6
"freemind.main.EditServer.stopServer()",1,1,2
"freemind.main.ExampleFileFilter.ExampleFileFilter()",1,1,1
"freemind.main.ExampleFileFilter.ExampleFileFilter(String)",1,1,1
"freemind.main.ExampleFileFilter.ExampleFileFilter(String,String)",1,3,3
"freemind.main.ExampleFileFilter.ExampleFileFilter(String[])",1,1,1
"freemind.main.ExampleFileFilter.ExampleFileFilter(String[],String)",1,3,3
"freemind.main.ExampleFileFilter.accept(File)",4,3,5
"freemind.main.ExampleFileFilter.addExtension(String)",1,1,2
"freemind.main.ExampleFileFilter.getDescription()",1,6,7
"freemind.main.ExampleFileFilter.getExtension(File)",3,4,4
"freemind.main.ExampleFileFilter.isExtensionListInDescription()",1,1,1
"freemind.main.ExampleFileFilter.setDescription(String)",1,1,1
"freemind.main.ExampleFileFilter.setExtensionListInDescription(boolean)",1,1,1
"freemind.main.FixedHTMLWriter.FixedHTMLWriter(Writer,HTMLDocument)",1,1,1
"freemind.main.FixedHTMLWriter.FixedHTMLWriter(Writer,HTMLDocument,int,int)",1,1,1
"freemind.main.FixedHTMLWriter.convertToHTML(AttributeSet,MutableAttributeSet)",2,4,6
"freemind.main.FixedHTMLWriter.writeAttributes(AttributeSet)",5,5,8
"freemind.main.FreeMind.FreeMind(Properties,Properties,File)",1,8,8
"freemind.main.FreeMind.actionPerformed(ActionEvent)",1,1,1
"freemind.main.FreeMind.checkForAnotherInstance(String[])",4,4,7
"freemind.main.FreeMind.createModeController(String[])",1,1,2
"freemind.main.FreeMind.err(String)",1,1,1
"freemind.main.FreeMind.fireStartupDone()",1,2,2
"freemind.main.FreeMind.getAdjustableProperty(String)",1,1,1
"freemind.main.FreeMind.getContentComponent()",1,1,1
"freemind.main.FreeMind.getController()",1,1,1
"freemind.main.FreeMind.getDefaultProperty(String)",1,1,1
"freemind.main.FreeMind.getFreeMindClassLoader()",1,1,1
"freemind.main.FreeMind.getFreeMindMenuBar()",1,1,1
"freemind.main.FreeMind.getFreemindBaseDir()",1,1,1
"freemind.main.FreeMind.getFreemindDirectory()",1,1,1
"freemind.main.FreeMind.getFreemindVersion()",1,1,1
"freemind.main.FreeMind.getIntProperty(String,int)",1,1,2
"freemind.main.FreeMind.getJFrame()",1,1,1
"freemind.main.FreeMind.getLastStateStorageManagement()",1,1,1
"freemind.main.FreeMind.getLogger(String)",1,6,7
"freemind.main.FreeMind.getLoggerList()",1,1,1
"freemind.main.FreeMind.getMaximumNumberOfMapsToLoad(String[])",1,1,1
"freemind.main.FreeMind.getPatternsFile()",1,1,1
"freemind.main.FreeMind.getPortFile()",2,2,3
"freemind.main.FreeMind.getProperties()",1,1,1
"freemind.main.FreeMind.getProperty(String)",1,1,1
"freemind.main.FreeMind.getResource(String)",1,1,1
"freemind.main.FreeMind.getResourceString(String)",1,1,1
"freemind.main.FreeMind.getResourceString(String,String)",1,1,1
"freemind.main.FreeMind.getResources()",1,1,1
"freemind.main.FreeMind.getScrollPane()",1,1,1
"freemind.main.FreeMind.getView()",1,1,1
"freemind.main.FreeMind.getWinHeight()",1,1,1
"freemind.main.FreeMind.getWinState()",1,1,1
"freemind.main.FreeMind.getWinWidth()",1,1,1
"freemind.main.FreeMind.getWinX()",1,1,1
"freemind.main.FreeMind.getWinY()",1,1,1
"freemind.main.FreeMind.init(FeedBack)",1,2,2
"freemind.main.FreeMind.initServer()",2,1,2
"freemind.main.FreeMind.insertComponentIntoSplitPane(JComponent)",2,3,4
"freemind.main.FreeMind.isApplet()",1,1,1
"freemind.main.FreeMind.loadMaps(String[],ModeController,FeedBack)",1,19,19
"freemind.main.FreeMind.main(String[],Properties,Properties,File)",1,4,4
"freemind.main.FreeMind.openDocument(URL)",1,5,5
"freemind.main.FreeMind.out(String)",1,2,2
"freemind.main.FreeMind.processLoadEventFromStartupPhase()",3,3,4
"freemind.main.FreeMind.processLoadEventFromStartupPhase(String)",1,3,3
"freemind.main.FreeMind.registerStartupDoneListener(StartupDoneListener)",1,2,2
"freemind.main.FreeMind.removeContentComponent()",1,3,3
"freemind.main.FreeMind.removeSplitPane()",1,2,2
"freemind.main.FreeMind.saveProperties(boolean)",1,3,4
"freemind.main.FreeMind.setContentComponent()",1,3,3
"freemind.main.FreeMind.setDefaultProperty(String,String)",1,1,1
"freemind.main.FreeMind.setProperty(String,String)",1,1,1
"freemind.main.FreeMind.setScreenBounds()",1,5,8
"freemind.main.FreeMind.setSplitLocation()",1,2,4
"freemind.main.FreeMind.setView(MapView)",1,1,1
"freemind.main.FreeMind.setWaitingCursor(boolean)",1,2,2
"freemind.main.FreeMind.setupProxy()",1,3,3
"freemind.main.FreeMind.setupSpellChecking()",1,4,5
"freemind.main.FreeMind.updateLookAndFeel()",1,9,9
"freemind.main.FreeMindApplet.FreeMindApplet()",1,1,1
"freemind.main.FreeMindApplet.err(String)",1,1,1
"freemind.main.FreeMindApplet.getAdjustableProperty(String)",1,1,1
"freemind.main.FreeMindApplet.getContentComponent()",2,1,2
"freemind.main.FreeMindApplet.getController()",1,1,1
"freemind.main.FreeMindApplet.getFreeMindClassLoader()",1,1,1
"freemind.main.FreeMindApplet.getFreeMindMenuBar()",1,1,1
"freemind.main.FreeMindApplet.getFreemindBaseDir()",1,1,1
"freemind.main.FreeMindApplet.getFreemindDirectory()",1,1,1
"freemind.main.FreeMindApplet.getFreemindVersion()",1,1,1
"freemind.main.FreeMindApplet.getIntProperty(String,int)",1,1,2
"freemind.main.FreeMindApplet.getJFrame()",1,1,1
"freemind.main.FreeMindApplet.getLogger(String)",1,1,1
"freemind.main.FreeMindApplet.getLoggerList()",1,1,1
"freemind.main.FreeMindApplet.getMaxNodeWidth()",1,3,3
"freemind.main.FreeMindApplet.getPatternsFile()",1,1,1
"freemind.main.FreeMindApplet.getProperties()",1,1,1
"freemind.main.FreeMindApplet.getProperty(String)",1,1,1
"freemind.main.FreeMindApplet.getResource(String)",2,3,4
"freemind.main.FreeMindApplet.getResourceString(String)",1,1,1
"freemind.main.FreeMindApplet.getResourceString(String,String)",1,1,1
"freemind.main.FreeMindApplet.getResources()",1,1,1
"freemind.main.FreeMindApplet.getScrollPane()",1,1,1
"freemind.main.FreeMindApplet.getSouthPanel()",1,1,1
"freemind.main.FreeMindApplet.getView()",1,1,1
"freemind.main.FreeMindApplet.getWinHeight()",1,1,1
"freemind.main.FreeMindApplet.getWinState()",1,1,1
"freemind.main.FreeMindApplet.getWinWidth()",1,1,1
"freemind.main.FreeMindApplet.getWinX()",1,1,1
"freemind.main.FreeMindApplet.getWinY()",1,1,1
"freemind.main.FreeMindApplet.init()",2,8,8
"freemind.main.FreeMindApplet.insertComponentIntoSplitPane(JComponent)",2,1,2
"freemind.main.FreeMindApplet.isApplet()",1,1,1
"freemind.main.FreeMindApplet.openDocument(URL)",1,1,1
"freemind.main.FreeMindApplet.out(String)",1,1,1
"freemind.main.FreeMindApplet.registerStartupDoneListener(StartupDoneListener)",1,1,1
"freemind.main.FreeMindApplet.removeSplitPane()",1,2,2
"freemind.main.FreeMindApplet.saveProperties(boolean)",1,1,1
"freemind.main.FreeMindApplet.setDefaultProperty(String,String)",1,1,1
"freemind.main.FreeMindApplet.setProperty(String,String)",1,1,1
"freemind.main.FreeMindApplet.setPropertyByParameter(String)",1,2,3
"freemind.main.FreeMindApplet.setTitle(String)",1,1,1
"freemind.main.FreeMindApplet.setView(MapView)",1,1,1
"freemind.main.FreeMindApplet.setWaitingCursor(boolean)",1,2,2
"freemind.main.FreeMindApplet.start()",1,3,3
"freemind.main.FreeMindApplet.updateLookAndFeel()",1,9,9
"freemind.main.FreeMindCommon.FreeMindCommon(FreeMindMain)",1,2,2
"freemind.main.FreeMindCommon.FreeMindResourceBundle.FreeMindResourceBundle()",1,5,7
"freemind.main.FreeMindCommon.FreeMindResourceBundle.getKeys()",1,1,1
"freemind.main.FreeMindCommon.FreeMindResourceBundle.getLanguageResources(String)",3,1,3
"freemind.main.FreeMindCommon.FreeMindResourceBundle.getResourceString(String)",1,1,2
"freemind.main.FreeMindCommon.FreeMindResourceBundle.getResourceString(String,String)",1,2,3
"freemind.main.FreeMindCommon.FreeMindResourceBundle.handleGetObject(String)",2,4,4
"freemind.main.FreeMindCommon.clearLanguageResources()",1,1,1
"freemind.main.FreeMindCommon.getAdjustableProperty(String)",2,4,5
"freemind.main.FreeMindCommon.getFreeMindClassLoader()",1,2,2
"freemind.main.FreeMindCommon.getFreemindBaseDir()",4,6,8
"freemind.main.FreeMindCommon.getFreemindBaseDirOld()",3,5,5
"freemind.main.FreeMindCommon.getProperty(String)",1,1,1
"freemind.main.FreeMindCommon.getResourceString(String)",1,1,1
"freemind.main.FreeMindCommon.getResourceString(String,String)",1,1,1
"freemind.main.FreeMindCommon.getResources()",1,1,2
"freemind.main.FreeMindCommon.loadUIProperties(Properties)",1,1,1
"freemind.main.FreeMindCommon.setDefaultProperty(String,String)",1,1,1
"freemind.main.FreeMindMain.VersionInformation.VersionInformation(String)",4,2,6
"freemind.main.FreeMindMain.VersionInformation.VersionInformation(int,int,int,int,int)",1,1,1
"freemind.main.FreeMindMain.VersionInformation.toString()",2,3,7
"freemind.main.FreeMindSecurityManager.FreeMindSecurityManager()",1,1,1
"freemind.main.FreeMindSecurityManager.checkAccept(String,int)",2,1,2
"freemind.main.FreeMindSecurityManager.checkAccess(Thread)",2,1,2
"freemind.main.FreeMindSecurityManager.checkAccess(ThreadGroup)",2,1,2
"freemind.main.FreeMindSecurityManager.checkAwtEventQueueAccess()",2,1,2
"freemind.main.FreeMindSecurityManager.checkConnect(String,int)",2,1,2
"freemind.main.FreeMindSecurityManager.checkConnect(String,int,Object)",2,1,2
"freemind.main.FreeMindSecurityManager.checkCreateClassLoader()",2,1,2
"freemind.main.FreeMindSecurityManager.checkDelete(String)",2,1,2
"freemind.main.FreeMindSecurityManager.checkExec(String)",2,1,2
"freemind.main.FreeMindSecurityManager.checkExit(int)",2,1,2
"freemind.main.FreeMindSecurityManager.checkLink(String)",2,1,2
"freemind.main.FreeMindSecurityManager.checkListen(int)",2,1,2
"freemind.main.FreeMindSecurityManager.checkMemberAccess(Class,int)",2,1,2
"freemind.main.FreeMindSecurityManager.checkMulticast(InetAddress)",2,1,2
"freemind.main.FreeMindSecurityManager.checkMulticast(InetAddress,byte)",2,1,2
"freemind.main.FreeMindSecurityManager.checkPackageAccess(String)",2,1,2
"freemind.main.FreeMindSecurityManager.checkPackageDefinition(String)",2,1,2
"freemind.main.FreeMindSecurityManager.checkPermission(Permission)",2,1,2
"freemind.main.FreeMindSecurityManager.checkPermission(Permission,Object)",2,1,2
"freemind.main.FreeMindSecurityManager.checkPrintJobAccess()",2,1,2
"freemind.main.FreeMindSecurityManager.checkPropertiesAccess()",2,1,2
"freemind.main.FreeMindSecurityManager.checkPropertyAccess(String)",2,1,2
"freemind.main.FreeMindSecurityManager.checkRead(FileDescriptor)",2,1,2
"freemind.main.FreeMindSecurityManager.checkRead(String)",2,1,2
"freemind.main.FreeMindSecurityManager.checkRead(String,Object)",2,1,2
"freemind.main.FreeMindSecurityManager.checkSecurityAccess(String)",2,1,2
"freemind.main.FreeMindSecurityManager.checkSetFactory()",2,1,2
"freemind.main.FreeMindSecurityManager.checkSystemClipboardAccess()",2,1,2
"freemind.main.FreeMindSecurityManager.checkTopLevelWindow(Object)",2,1,2
"freemind.main.FreeMindSecurityManager.checkWrite(FileDescriptor)",2,1,2
"freemind.main.FreeMindSecurityManager.checkWrite(String)",2,1,2
"freemind.main.FreeMindSecurityManager.getSecurityContext()",2,2,2
"freemind.main.FreeMindSecurityManager.setFinalSecurityManager(SecurityManager)",3,1,3
"freemind.main.FreeMindSplashModern.FeedBackImpl.getActualValue()",1,1,1
"freemind.main.FreeMindSplashModern.FeedBackImpl.increase(String,Object[])",1,1,1
"freemind.main.FreeMindSplashModern.FeedBackImpl.progress(int,String,Object[])",1,2,2
"freemind.main.FreeMindSplashModern.FeedBackImpl.setImageJLabel(JLabel)",1,1,1
"freemind.main.FreeMindSplashModern.FeedBackImpl.setMaximumValue(int)",1,1,1
"freemind.main.FreeMindSplashModern.FreeMindSplashModern(FreeMindMain)",1,4,5
"freemind.main.FreeMindSplashModern.close()",1,1,1
"freemind.main.FreeMindSplashModern.getFeedBack()",1,1,1
"freemind.main.FreeMindSplashModern.getWindowIcon()",1,1,1
"freemind.main.FreeMindStarter.ProxyAuthenticator.ProxyAuthenticator(String,String)",1,1,1
"freemind.main.FreeMindStarter.ProxyAuthenticator.getPasswordAuthentication()",1,1,1
"freemind.main.FreeMindStarter.checkJavaVersion()",1,2,2
"freemind.main.FreeMindStarter.createUserDirectory(Properties)",1,3,3
"freemind.main.FreeMindStarter.getFreeMindDirectory(Properties)",1,1,1
"freemind.main.FreeMindStarter.getUserPreferencesFile(Properties)",1,2,2
"freemind.main.FreeMindStarter.main(String[])",1,3,4
"freemind.main.FreeMindStarter.readDefaultPreferences()",1,2,2
"freemind.main.FreeMindStarter.readUsersPreferences(Properties)",1,2,2
"freemind.main.FreeMindStarter.setDefaultLocale(Properties)",3,2,5
"freemind.main.HtmlTools.HtmlNodeVisitor.HtmlNodeVisitor(MindMapNode,NodeCreator)",1,1,1
"freemind.main.HtmlTools.HtmlNodeVisitor.backToParent()",1,1,1
"freemind.main.HtmlTools.HtmlNodeVisitor.createChild()",1,3,3
"freemind.main.HtmlTools.HtmlNodeVisitor.head(Node,int)",1,18,19
"freemind.main.HtmlTools.HtmlNodeVisitor.tail(Node,int)",1,4,4
"freemind.main.HtmlTools.HtmlTools()",1,1,1
"freemind.main.HtmlTools.IndexPair.IndexPair(int,int,int,int,boolean)",1,1,1
"freemind.main.HtmlTools.IndexPair.toString()",1,1,1
"freemind.main.HtmlTools.append(StringBuffer,String,int,int)",1,1,1
"freemind.main.HtmlTools.extractHtmlBody(String)",1,5,5
"freemind.main.HtmlTools.getInstance()",1,1,1
"freemind.main.HtmlTools.getMaximalOriginalPosition(int,ArrayList<IndexPair>)",4,2,4
"freemind.main.HtmlTools.getMinimalOriginalPosition(int,ArrayList<IndexPair>)",3,1,4
"freemind.main.HtmlTools.getReplaceResult(Pattern,String,String)",1,7,7
"freemind.main.HtmlTools.htmlToPlain(String)",1,1,1
"freemind.main.HtmlTools.htmlToPlain(String,boolean)",2,2,3
"freemind.main.HtmlTools.insertHtmlIntoNodes(String,MindMapNode,NodeCreator)",1,1,1
"freemind.main.HtmlTools.isHtmlNode(String)",1,1,1
"freemind.main.HtmlTools.isWellformedXml(String)",1,3,3
"freemind.main.HtmlTools.isXMLValidCharacter(char)",1,1,9
"freemind.main.HtmlTools.makeValidXml(String)",1,1,1
"freemind.main.HtmlTools.plainToHTML(String)",2,7,12
"freemind.main.HtmlTools.removeAllTagsFromString(String)",1,1,1
"freemind.main.HtmlTools.removeHtmlTagsFromString(String)",2,2,2
"freemind.main.HtmlTools.removeInvalidXmlCharacters(String)",1,11,11
"freemind.main.HtmlTools.replaceIllegalXmlCharacters(String)",1,1,1
"freemind.main.HtmlTools.replaceSpacesToNonbreakableSpaces(String)",1,4,4
"freemind.main.HtmlTools.toHtml(String)",1,1,1
"freemind.main.HtmlTools.toXMLEscapedText(String)",2,1,2
"freemind.main.HtmlTools.toXMLEscapedTextExpandingWhitespace(String)",2,7,11
"freemind.main.HtmlTools.toXMLUnescapedText(String)",1,1,1
"freemind.main.HtmlTools.toXhtml(String)",3,4,5
"freemind.main.HtmlTools.unescapeHTMLUnicodeEntity(String)",1,12,12
"freemind.main.HtmlTools.unicodeToHTMLUnicodeEntity(String,boolean)",1,3,8
"freemind.main.LogFileLogHandler.LogFileLogHandler()",1,1,1
"freemind.main.LogFileLogHandler.LogFileLogHandler(LogReceiver)",1,1,1
"freemind.main.LogFileLogHandler.close()",1,1,1
"freemind.main.LogFileLogHandler.flush()",1,1,1
"freemind.main.LogFileLogHandler.getLogReceiver()",1,1,1
"freemind.main.LogFileLogHandler.publish(LogRecord)",3,2,3
"freemind.main.LogFileLogHandler.setLogReceiver(LogReceiver)",1,1,1
"freemind.main.LoggingOutputStream.LoggingOutputStream(Logger,Level)",1,1,1
"freemind.main.LoggingOutputStream.flush()",2,2,3
"freemind.main.Resources.Resources(FreeMindMain)",1,2,2
"freemind.main.Resources.createInstance(FreeMindMain)",1,1,2
"freemind.main.Resources.createThumbnailFileName(File)",1,1,1
"freemind.main.Resources.createTranslatedString(String)",1,1,1
"freemind.main.Resources.format(String,Object[])",1,1,1
"freemind.main.Resources.getBoolProperty(String)",1,1,1
"freemind.main.Resources.getCountryMap()",1,3,3
"freemind.main.Resources.getFreeMindClassLoader()",1,1,1
"freemind.main.Resources.getFreemindBaseDir()",1,1,1
"freemind.main.Resources.getFreemindDirectory()",1,1,1
"freemind.main.Resources.getFreemindVersion()",1,1,1
"freemind.main.Resources.getInstance()",1,2,2
"freemind.main.Resources.getIntProperty(String,int)",1,1,1
"freemind.main.Resources.getLogger(String)",1,1,1
"freemind.main.Resources.getLongProperty(String,long)",1,1,2
"freemind.main.Resources.getProperties()",1,1,1
"freemind.main.Resources.getProperty(String)",1,1,1
"freemind.main.Resources.getResource(String)",1,1,1
"freemind.main.Resources.getResourceString(String)",1,1,1
"freemind.main.Resources.getResourceString(String,String)",1,1,1
"freemind.main.Resources.getResources()",1,1,1
"freemind.main.Resources.getStandardFileChooser(FileFilter)",1,2,3
"freemind.main.Resources.getText(String)",1,1,1
"freemind.main.Resources.logException(Throwable)",1,1,1
"freemind.main.Resources.logException(Throwable,String)",1,1,1
"freemind.main.StdFormatter.StdOutErrLevel.StdOutErrLevel(String,int)",1,1,1
"freemind.main.StdFormatter.format(LogRecord)",2,3,3
"freemind.main.Tools.ActionHolder.ActionHolder(Action)",1,1,1
"freemind.main.Tools.ActionHolder.getText()",1,1,1
"freemind.main.Tools.ActionHolder.setDisplayedMnemonicIndex(int)",1,1,1
"freemind.main.Tools.ActionHolder.setMnemonic(char)",1,1,3
"freemind.main.Tools.ActionHolder.setText(String)",1,1,1
"freemind.main.Tools.BooleanHolder.BooleanHolder()",1,1,1
"freemind.main.Tools.BooleanHolder.BooleanHolder(boolean)",1,1,1
"freemind.main.Tools.BooleanHolder.getValue()",1,1,1
"freemind.main.Tools.BooleanHolder.setValue(boolean)",1,1,1
"freemind.main.Tools.BooleanToXml(boolean)",1,1,2
"freemind.main.Tools.ButtonHolder.ButtonHolder(AbstractButton)",1,1,1
"freemind.main.Tools.ButtonHolder.getText()",1,1,1
"freemind.main.Tools.ButtonHolder.setDisplayedMnemonicIndex(int)",1,1,1
"freemind.main.Tools.ButtonHolder.setMnemonic(char)",1,1,1
"freemind.main.Tools.ButtonHolder.setText(String)",1,1,1
"freemind.main.Tools.DesEncrypter.DesEncrypter(StringBuffer,String)",1,1,1
"freemind.main.Tools.DesEncrypter.decrypt(String)",2,2,6
"freemind.main.Tools.DesEncrypter.encrypt(String)",1,2,5
"freemind.main.Tools.DesEncrypter.init(byte[])",1,2,8
"freemind.main.Tools.FileReaderCreator.FileReaderCreator(File)",1,1,1
"freemind.main.Tools.FileReaderCreator.createReader()",1,1,1
"freemind.main.Tools.FileReaderCreator.toString()",1,1,1
"freemind.main.Tools.IntHolder.IntHolder()",1,1,1
"freemind.main.Tools.IntHolder.IntHolder(int)",1,1,1
"freemind.main.Tools.IntHolder.getValue()",1,1,1
"freemind.main.Tools.IntHolder.increase()",1,1,1
"freemind.main.Tools.IntHolder.setValue(int)",1,1,1
"freemind.main.Tools.IntHolder.toString()",1,1,1
"freemind.main.Tools.MindMapNodePair.MindMapNodePair(MindMapNode,MindMapNode)",1,1,1
"freemind.main.Tools.MindMapNodePair.getCloneNode()",1,1,1
"freemind.main.Tools.MindMapNodePair.getCorresponding()",1,1,1
"freemind.main.Tools.ObjectHolder.ObjectHolder()",1,1,1
"freemind.main.Tools.ObjectHolder.getObject()",1,1,1
"freemind.main.Tools.ObjectHolder.setObject(Object)",1,1,1
"freemind.main.Tools.Pair.Pair(Object,Object)",1,1,1
"freemind.main.Tools.Pair.getFirst()",1,1,1
"freemind.main.Tools.Pair.getSecond()",1,1,1
"freemind.main.Tools.PointToXml(Point)",2,1,2
"freemind.main.Tools.SingleDesEncrypter.SingleDesEncrypter(StringBuffer)",1,1,1
"freemind.main.Tools.StringReaderCreator.StringReaderCreator(String)",1,1,1
"freemind.main.Tools.StringReaderCreator.createReader()",1,1,1
"freemind.main.Tools.StringReaderCreator.toString()",1,1,1
"freemind.main.Tools.TripleDesEncrypter.TripleDesEncrypter(StringBuffer)",1,1,1
"freemind.main.Tools.addEscapeActionToDialog(JDialog)",1,1,1
"freemind.main.Tools.addEscapeActionToDialog(JDialog,Action)",1,1,1
"freemind.main.Tools.addFocusPrintTimer()",1,1,1
"freemind.main.Tools.addKeyActionToDialog(JDialog,Action,String,String)",1,1,1
"freemind.main.Tools.arrayToUrls(String[])",1,3,3
"freemind.main.Tools.byteArrayToUTF8String(byte[])",1,1,2
"freemind.main.Tools.colorToXml(Color)",2,1,5
"freemind.main.Tools.compareText(String,String)",2,5,7
"freemind.main.Tools.compress(String)",1,2,3
"freemind.main.Tools.convertPointFromAncestor(Component,Point,Component)",1,2,2
"freemind.main.Tools.convertPointToAncestor(Component,Point,Class<?>)",1,1,1
"freemind.main.Tools.convertPointToAncestor(Component,Point,Component)",1,2,2
"freemind.main.Tools.copyChangedProperties(Properties,Properties)",1,3,3
"freemind.main.Tools.copyStream(InputStream,OutputStream,boolean)",1,3,3
"freemind.main.Tools.correctJSplitPaneKeyMap()",1,1,1
"freemind.main.Tools.countOccurrences(String,String)",3,2,3
"freemind.main.Tools.dateToString(Date)",1,1,1
"freemind.main.Tools.decompress(String)",1,3,5
"freemind.main.Tools.deepCopy(XmlAction)",1,1,1
"freemind.main.Tools.edgeWidthStringToInt(String)",3,1,3
"freemind.main.Tools.executableByExtension(String)",1,1,1
"freemind.main.Tools.expandFileName(String)",1,2,2
"freemind.main.Tools.expandPlaceholders(String,String)",1,2,2
"freemind.main.Tools.expandPlaceholders(String,String,String)",1,3,3
"freemind.main.Tools.expandPlaceholders(String,String,String,String)",1,4,4
"freemind.main.Tools.fileToRelativeUrlString(File,File)",1,3,3
"freemind.main.Tools.fileToUrl(File)",2,1,2
"freemind.main.Tools.firstLetterCapitalized(String)",2,2,3
"freemind.main.Tools.fromBase64(String)",1,1,1
"freemind.main.Tools.generateID(String,Map,String)",1,3,4
"freemind.main.Tools.getActualReader(Reader)",1,1,1
"freemind.main.Tools.getAvailableFonts()",1,2,2
"freemind.main.Tools.getClipboard()",1,1,1
"freemind.main.Tools.getExtension(File)",1,1,1
"freemind.main.Tools.getExtension(String)",1,3,3
"freemind.main.Tools.getField(Object[],String)",4,4,4
"freemind.main.Tools.getFile(File)",1,2,2
"freemind.main.Tools.getFile(Reader)",1,5,5
"freemind.main.Tools.getFileNameFromRestorable(String)",1,2,2
"freemind.main.Tools.getFileNameProposal(MindMapNode)",1,1,1
"freemind.main.Tools.getFreeMindBasePath()",1,3,3
"freemind.main.Tools.getHostIpAsString()",1,2,2
"freemind.main.Tools.getHostName()",1,1,2
"freemind.main.Tools.getKeyStroke(String)",3,1,3
"freemind.main.Tools.getMindMapNodesFromClipboard(MindMapController)",1,3,4
"freemind.main.Tools.getModeFromRestorable(String)",1,2,2
"freemind.main.Tools.getNodeTextHierarchy(MindMapNode,MindMapController)",1,2,2
"freemind.main.Tools.getPageFormatAsString(Paper)",1,1,1
"freemind.main.Tools.getPrefix(String)",4,3,4
"freemind.main.Tools.getReaderFromFile(File)",1,1,1
"freemind.main.Tools.getScalingFactor()",1,1,1
"freemind.main.Tools.getScalingFactorPlain()",1,1,1
"freemind.main.Tools.getStackTrace()",1,1,1
"freemind.main.Tools.getStacktrace(Exception)",1,1,1
"freemind.main.Tools.getURLWithoutReference(URL)",1,1,1
"freemind.main.Tools.getUpdateReader(Reader,String)",3,8,9
"freemind.main.Tools.getUserName()",1,1,1
"freemind.main.Tools.getVectorWithSingleElement(T)",1,1,1
"freemind.main.Tools.iconFirstIndex(MindMapNode,String)",3,3,3
"freemind.main.Tools.iconLastIndex(MindMapNode,String)",3,3,3
"freemind.main.Tools.invokeActionsToKeyboardLayoutDependantCharacters(KeyEvent,Action[],Object)",1,5,5
"freemind.main.Tools.invokeAndWait(Runnable)",1,2,2
"freemind.main.Tools.isAboveJava4()",1,1,1
"freemind.main.Tools.isAbsolutePath(String)",3,5,5
"freemind.main.Tools.isAvailableFontFamily(String)",3,2,3
"freemind.main.Tools.isBelowJava6()",1,1,1
"freemind.main.Tools.isFile(URL)",1,1,1
"freemind.main.Tools.isHeadless()",1,1,1
"freemind.main.Tools.isLinux()",1,1,2
"freemind.main.Tools.isMacOsX()",1,1,2
"freemind.main.Tools.isPreferenceTrue(String)",1,1,1
"freemind.main.Tools.isRetina()",3,3,5
"freemind.main.Tools.isUnix()",1,2,2
"freemind.main.Tools.isWindows()",1,1,1
"freemind.main.Tools.listToString(List<?>)",1,2,2
"freemind.main.Tools.logTransferable(Transferable)",1,2,3
"freemind.main.Tools.makeFileHidden(File,boolean)",2,4,5
"freemind.main.Tools.marshall(XmlAction)",1,1,1
"freemind.main.Tools.nt(StringTokenizer)",1,2,2
"freemind.main.Tools.printStackTrace()",1,1,1
"freemind.main.Tools.printXmlAction(XmlAction)",2,4,4
"freemind.main.Tools.readFileStart(Reader,int)",3,3,4
"freemind.main.Tools.removeExtension(String)",1,3,3
"freemind.main.Tools.removeMnemonic(String)",1,1,1
"freemind.main.Tools.removeTranslateComment(String)",1,3,3
"freemind.main.Tools.replaceUtf8AndIllegalXmlChars(String)",1,1,1
"freemind.main.Tools.restoreAntialiasing(Graphics2D,Object)",1,2,2
"freemind.main.Tools.safeEquals(BooleanHolder,BooleanHolder)",1,4,5
"freemind.main.Tools.safeEquals(Color,Color)",1,4,5
"freemind.main.Tools.safeEquals(Object,Object)",1,4,5
"freemind.main.Tools.safeEquals(String,String)",1,4,5
"freemind.main.Tools.safeEqualsIgnoreCase(String,String)",1,4,5
"freemind.main.Tools.scaleAllFonts(float)",1,4,4
"freemind.main.Tools.setDialogLocationRelativeTo(JDialog,Component)",2,2,13
"freemind.main.Tools.setHidden(File,boolean,boolean)",3,5,7
"freemind.main.Tools.setLabelAndMnemonic(AbstractButton,String)",1,1,1
"freemind.main.Tools.setLabelAndMnemonic(Action,String)",1,1,1
"freemind.main.Tools.setLabelAndMnemonic(NameMnemonicHolder,String)",2,6,7
"freemind.main.Tools.setPageFormatFromString(Paper,String)",2,3,3
"freemind.main.Tools.setPermissions(String,int)",1,3,4
"freemind.main.Tools.stringToList(String)",1,2,2
"freemind.main.Tools.swapVectorPositions(Vector<T>,int,int)",2,5,5
"freemind.main.Tools.toBase64(String)",1,1,1
"freemind.main.Tools.toBase64(byte[])",1,1,1
"freemind.main.Tools.toRelativeURL(URL,URL)",4,7,8
"freemind.main.Tools.uTF8StringToByteArray(String)",1,1,2
"freemind.main.Tools.unMarshall(String)",1,1,1
"freemind.main.Tools.updateFontSize(Font,float,int)",1,3,3
"freemind.main.Tools.urlGetFile(URL)",2,4,4
"freemind.main.Tools.urlStringToUrls(String)",1,3,3
"freemind.main.Tools.urlToFile(URL)",2,2,2
"freemind.main.Tools.waitForEventQueue()",1,3,3
"freemind.main.Tools.xmlToBoolean(String)",2,1,2
"freemind.main.Tools.xmlToColor(String)",3,2,3
"freemind.main.Tools.xmlToDate(String)",1,2,2
"freemind.main.Tools.xmlToPoint(String)",3,2,4
"freemind.main.XHTMLWriter.XHTMLFilterWriter.XHTMLFilterWriter(Writer)",1,1,1
"freemind.main.XHTMLWriter.XHTMLFilterWriter.write(String,int,int)",1,1,1
"freemind.main.XHTMLWriter.XHTMLFilterWriter.write(char[],int,int)",1,2,2
"freemind.main.XHTMLWriter.XHTMLFilterWriter.write(int)",5,20,25
"freemind.main.XHTMLWriter.XHTMLWriter(Writer,HTMLDocument)",1,1,1
"freemind.main.XHTMLWriter.XHTMLWriter(Writer,HTMLDocument,int,int)",1,1,1
"freemind.main.XHTMLWriter.html2xhtml(Reader,Writer)",1,1,1
"freemind.main.XHTMLWriter.main(String[])",1,2,2
"freemind.main.XHTMLWriter.write()",1,1,1
"freemind.main.XHTMLWriter.writeLineSeparator()",1,2,2
"freemind.main.XHTMLWriter.writeOption(Option)",1,1,1
"freemind.main.XMLElement.XMLElement()",1,1,1
"freemind.main.XMLElement.XMLElement(Hashtable<String, char[]>)",1,1,1
"freemind.main.XMLElement.XMLElement(Hashtable<String, char[]>,boolean)",1,1,1
"freemind.main.XMLElement.XMLElement(Hashtable<String, char[]>,boolean,boolean)",1,1,1
"freemind.main.XMLElement.XMLElement(Hashtable<String, char[]>,boolean,boolean,boolean)",1,4,4
"freemind.main.XMLElement.XMLElement(boolean)",1,1,1
"freemind.main.XMLElement.addChild(XMLElement)",1,1,1
"freemind.main.XMLElement.addProperty(String,Object)",1,1,1
"freemind.main.XMLElement.addProperty(String,double)",1,1,1
"freemind.main.XMLElement.addProperty(String,int)",1,1,1
"freemind.main.XMLElement.checkCDATA(StringBuffer)",4,9,11
"freemind.main.XMLElement.checkLiteral(String)",3,2,3
"freemind.main.XMLElement.completeElement()",1,1,1
"freemind.main.XMLElement.countChildren()",1,1,1
"freemind.main.XMLElement.createAnotherElement()",1,1,1
"freemind.main.XMLElement.enumerateAttributeNames()",1,1,1
"freemind.main.XMLElement.enumerateChildren()",1,1,1
"freemind.main.XMLElement.expectedInput(String)",1,1,1
"freemind.main.XMLElement.getAttribute(String)",1,1,1
"freemind.main.XMLElement.getAttribute(String,Hashtable,String,boolean)",3,4,5
"freemind.main.XMLElement.getAttribute(String,Object)",1,2,3
"freemind.main.XMLElement.getBooleanAttribute(String,String,String,boolean)",4,5,5
"freemind.main.XMLElement.getChildren()",1,1,2
"freemind.main.XMLElement.getContent()",1,1,1
"freemind.main.XMLElement.getContents()",1,1,1
"freemind.main.XMLElement.getDoubleAttribute(String)",1,1,1
"freemind.main.XMLElement.getDoubleAttribute(String,Hashtable<Object, Double>,String,boolean)",3,6,7
"freemind.main.XMLElement.getDoubleAttribute(String,double)",2,4,4
"freemind.main.XMLElement.getIntAttribute(String)",1,1,1
"freemind.main.XMLElement.getIntAttribute(String,Hashtable<Object, Integer>,String,boolean)",3,6,7
"freemind.main.XMLElement.getIntAttribute(String,int)",2,4,4
"freemind.main.XMLElement.getLineNr()",1,1,1
"freemind.main.XMLElement.getName()",1,1,1
"freemind.main.XMLElement.getStringAttribute(String)",1,1,1
"freemind.main.XMLElement.getStringAttribute(String,Hashtable<Object, String>,String,boolean)",1,1,1
"freemind.main.XMLElement.getStringAttribute(String,String)",1,1,1
"freemind.main.XMLElement.getUserObject()",1,1,1
"freemind.main.XMLElement.invalidValue(String,String)",1,1,1
"freemind.main.XMLElement.invalidValueSet(String)",1,1,1
"freemind.main.XMLElement.parseCharArray(char[],int,int)",1,1,1
"freemind.main.XMLElement.parseCharArray(char[],int,int,int)",1,1,2
"freemind.main.XMLElement.parseFromReader(Reader)",1,1,1
"freemind.main.XMLElement.parseFromReader(Reader,int)",4,4,5
"freemind.main.XMLElement.parseString(String)",1,1,2
"freemind.main.XMLElement.parseString(String,int)",1,1,1
"freemind.main.XMLElement.parseString(String,int,int)",1,1,1
"freemind.main.XMLElement.parseString(String,int,int,int)",1,1,2
"freemind.main.XMLElement.readChar()",4,3,4
"freemind.main.XMLElement.removeAttribute(String)",1,2,2
"freemind.main.XMLElement.removeChild(String)",1,1,1
"freemind.main.XMLElement.removeChild(XMLElement)",1,1,1
"freemind.main.XMLElement.removeProperty(String)",1,1,1
"freemind.main.XMLElement.resolveEntity(StringBuffer)",5,6,7
"freemind.main.XMLElement.scanElement(XMLElement)",23,26,29
"freemind.main.XMLElement.scanIdentifier(StringBuffer)",3,3,13
"freemind.main.XMLElement.scanPCData(StringBuffer)",4,5,5
"freemind.main.XMLElement.scanString(StringBuffer)",4,5,6
"freemind.main.XMLElement.scanWhitespace()",3,3,4
"freemind.main.XMLElement.scanWhitespace(StringBuffer)",3,4,5
"freemind.main.XMLElement.setAttribute(String,Object)",1,2,2
"freemind.main.XMLElement.setContent(String)",1,1,1
"freemind.main.XMLElement.setDoubleAttribute(String,double)",1,2,2
"freemind.main.XMLElement.setEncodedContent(String)",1,1,1
"freemind.main.XMLElement.setIntAttribute(String,int)",1,2,2
"freemind.main.XMLElement.setName(String)",1,1,1
"freemind.main.XMLElement.setTagName(String)",1,1,1
"freemind.main.XMLElement.skipComment()",2,3,4
"freemind.main.XMLElement.skipSpecialTag(int)",7,8,17
"freemind.main.XMLElement.syntaxError(String)",1,1,1
"freemind.main.XMLElement.toString()",1,2,2
"freemind.main.XMLElement.unexpectedEndOfData()",1,1,1
"freemind.main.XMLElement.unknownEntity(String)",1,1,1
"freemind.main.XMLElement.unreadChar(char)",1,1,1
"freemind.main.XMLElement.write(Writer)",1,1,1
"freemind.main.XMLElement.write(Writer,boolean)",2,13,13
"freemind.main.XMLElement.writeClosingTag(Writer)",1,1,1
"freemind.main.XMLElement.writeEncoded(Writer,String)",2,4,10
"freemind.main.XMLElement.writeWithoutClosingTag(Writer)",1,1,1
"freemind.main.XMLParseException.XMLParseException(String,String)",1,1,2
"freemind.main.XMLParseException.XMLParseException(String,int,String)",1,1,2
"freemind.main.XMLParseException.getLineNr()",1,1,1
"freemind.modes.ArrowLinkAdapter.ArrowLinkAdapter(MindMapNode,MindMapNode,MapFeedback)",1,1,1
"freemind.modes.ArrowLinkAdapter.clone()",1,1,5
"freemind.modes.ArrowLinkAdapter.copy(ArrowLinkAdapter)",1,1,1
"freemind.modes.ArrowLinkAdapter.createArrowLinkTarget(MindMapLinkRegistry)",1,1,1
"freemind.modes.ArrowLinkAdapter.getEndArrow()",1,1,1
"freemind.modes.ArrowLinkAdapter.getEndInclination()",2,1,2
"freemind.modes.ArrowLinkAdapter.getShowControlPointsFlag()",1,1,1
"freemind.modes.ArrowLinkAdapter.getStartArrow()",1,1,1
"freemind.modes.ArrowLinkAdapter.getStartInclination()",2,1,2
"freemind.modes.ArrowLinkAdapter.save()",1,10,10
"freemind.modes.ArrowLinkAdapter.setEndArrow(String)",3,3,4
"freemind.modes.ArrowLinkAdapter.setEndInclination(Point)",1,1,1
"freemind.modes.ArrowLinkAdapter.setStartArrow(String)",3,3,4
"freemind.modes.ArrowLinkAdapter.setStartInclination(Point)",1,1,1
"freemind.modes.ArrowLinkAdapter.showControlPoints(boolean)",1,1,1
"freemind.modes.ArrowLinkTarget.ArrowLinkTarget(MindMapNode,MindMapNode,MapFeedback)",1,1,1
"freemind.modes.ArrowLinkTarget.changeInclination(MapView,int,int,int,int)",1,1,1
"freemind.modes.ArrowLinkTarget.createArrowLinkAdapter(MindMapLinkRegistry)",1,1,1
"freemind.modes.ArrowLinkTarget.getSourceLabel()",1,1,1
"freemind.modes.ArrowLinkTarget.save()",1,2,2
"freemind.modes.ArrowLinkTarget.setSourceLabel(String)",1,1,1
"freemind.modes.CloudAdapter.CloudAdapter(MindMapNode,MapFeedback)",1,2,2
"freemind.modes.CloudAdapter.CloudAdapterListener.propertyChanged(String,String,String)",1,2,3
"freemind.modes.CloudAdapter.calcIterativeLevel(MindMapNode)",4,4,4
"freemind.modes.CloudAdapter.changeIterativeLevel(int)",1,1,2
"freemind.modes.CloudAdapter.getExteriorColor()",1,1,1
"freemind.modes.CloudAdapter.getIterativeLevel()",1,2,2
"freemind.modes.CloudAdapter.getStandardColor()",1,1,1
"freemind.modes.CloudAdapter.getStandardColorPropertyString()",1,1,1
"freemind.modes.CloudAdapter.getStandardStyle()",1,1,1
"freemind.modes.CloudAdapter.getStandardStylePropertyString()",1,1,1
"freemind.modes.CloudAdapter.save()",1,4,4
"freemind.modes.CloudAdapter.setStandardColor(Color)",1,1,1
"freemind.modes.CloudAdapter.setStandardStyle(String)",1,1,1
"freemind.modes.CloudAdapter.setTarget(MindMapNode)",1,1,1
"freemind.modes.ControllerAdapter.ControllerAdapter(Mode)",1,1,1
"freemind.modes.ControllerAdapter.ControllerPopupMenuListener.popupMenuCanceled(PopupMenuEvent)",1,1,1
"freemind.modes.ControllerAdapter.ControllerPopupMenuListener.popupMenuWillBecomeInvisible(PopupMenuEvent)",1,1,1
"freemind.modes.ControllerAdapter.ControllerPopupMenuListener.popupMenuWillBecomeVisible(PopupMenuEvent)",1,1,1
"freemind.modes.ControllerAdapter.FileOpener.dragEnter(DropTargetDragEvent)",2,2,2
"freemind.modes.ControllerAdapter.FileOpener.dragExit(DropTargetEvent)",1,1,1
"freemind.modes.ControllerAdapter.FileOpener.dragOver(DropTargetDragEvent)",1,1,1
"freemind.modes.ControllerAdapter.FileOpener.dragScroll(DropTargetDragEvent)",1,1,1
"freemind.modes.ControllerAdapter.FileOpener.drop(DropTargetDropEvent)",3,5,5
"freemind.modes.ControllerAdapter.FileOpener.dropActionChanged(DropTargetDragEvent)",1,1,1
"freemind.modes.ControllerAdapter.FileOpener.isDragAcceptable(DropTargetDragEvent)",3,2,3
"freemind.modes.ControllerAdapter.FileOpener.isDropAcceptable(DropTargetDropEvent)",3,2,3
"freemind.modes.ControllerAdapter.OpenAction.OpenAction(ControllerAdapter)",1,1,1
"freemind.modes.ControllerAdapter.OpenAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.ControllerAdapter.SaveAction.SaveAction()",1,1,1
"freemind.modes.ControllerAdapter.SaveAction.actionPerformed(ActionEvent)",1,2,2
"freemind.modes.ControllerAdapter.SaveAsAction.SaveAsAction()",1,1,1
"freemind.modes.ControllerAdapter.SaveAsAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.ControllerAdapter.add(JMenu,Action)",1,1,1
"freemind.modes.ControllerAdapter.add(JMenu,Action,String)",1,1,1
"freemind.modes.ControllerAdapter.add(StructuredMenuHolder,String,Action,String)",1,2,2
"freemind.modes.ControllerAdapter.addCheckBox(StructuredMenuHolder,String,Action,String)",1,2,2
"freemind.modes.ControllerAdapter.addRadioItem(StructuredMenuHolder,String,Action,String,boolean)",1,2,2
"freemind.modes.ControllerAdapter.centerNode(MindMapNode)",2,3,3
"freemind.modes.ControllerAdapter.centerNode(NodeView)",1,1,1
"freemind.modes.ControllerAdapter.changeSelection(NodeView,boolean)",1,3,3
"freemind.modes.ControllerAdapter.close(boolean,MapModuleManager)",5,7,11
"freemind.modes.ControllerAdapter.copy()",1,1,1
"freemind.modes.ControllerAdapter.copy(List<MindMapNode>,boolean)",1,3,3
"freemind.modes.ControllerAdapter.copy(MindMapNode,boolean)",1,1,1
"freemind.modes.ControllerAdapter.copySingle()",1,1,1
"freemind.modes.ControllerAdapter.createForNodeIdsFlavor(List<MindMapNode>,boolean)",1,2,2
"freemind.modes.ControllerAdapter.createForNodesFlavor(List<MindMapNode>,boolean)",1,2,3
"freemind.modes.ControllerAdapter.deregisterNodeLifetimeListener(NodeLifetimeListener)",1,1,1
"freemind.modes.ControllerAdapter.deregisterNodeSelectionListener(NodeSelectionListener)",1,1,1
"freemind.modes.ControllerAdapter.displayNode(MindMapNode)",1,1,1
"freemind.modes.ControllerAdapter.displayNode(MindMapNode,ArrayList<MindMapNode>)",1,4,4
"freemind.modes.ControllerAdapter.fireNodePostDeleteEvent(MindMapNode,MindMapNode)",1,2,2
"freemind.modes.ControllerAdapter.fireNodePreDeleteEvent(MindMapNode)",1,2,2
"freemind.modes.ControllerAdapter.firePreSaveEvent(MindMapNode)",1,2,2
"freemind.modes.ControllerAdapter.fireRecursiveNodeCreateEvent(MindMapNode)",1,3,3
"freemind.modes.ControllerAdapter.getController()",1,1,1
"freemind.modes.ControllerAdapter.getDefaultFont()",1,1,1
"freemind.modes.ControllerAdapter.getFileChooser()",1,1,1
"freemind.modes.ControllerAdapter.getFileChooser(FileFilter)",1,2,4
"freemind.modes.ControllerAdapter.getFileFilter()",1,1,1
"freemind.modes.ControllerAdapter.getFileNameProposal()",1,1,1
"freemind.modes.ControllerAdapter.getFontThroughMap(Font)",1,1,1
"freemind.modes.ControllerAdapter.getFrame()",1,1,1
"freemind.modes.ControllerAdapter.getLeftToolBar()",1,1,1
"freemind.modes.ControllerAdapter.getLinkShortText(MindMapNode)",3,3,4
"freemind.modes.ControllerAdapter.getMap()",1,1,1
"freemind.modes.ControllerAdapter.getMapModule()",1,1,1
"freemind.modes.ControllerAdapter.getMapMouseMotionListener()",1,1,1
"freemind.modes.ControllerAdapter.getMapMouseWheelListener()",1,1,1
"freemind.modes.ControllerAdapter.getMapsParentFile()",2,4,4
"freemind.modes.ControllerAdapter.getMode()",1,1,1
"freemind.modes.ControllerAdapter.getModeController()",1,1,1
"freemind.modes.ControllerAdapter.getModeToolBar()",1,1,1
"freemind.modes.ControllerAdapter.getModel()",1,1,1
"freemind.modes.ControllerAdapter.getNodeDragListener()",1,1,1
"freemind.modes.ControllerAdapter.getNodeDropListener()",1,1,1
"freemind.modes.ControllerAdapter.getNodeFromID(String)",2,2,2
"freemind.modes.ControllerAdapter.getNodeID(MindMapNode)",1,1,1
"freemind.modes.ControllerAdapter.getNodeKeyListener()",1,1,1
"freemind.modes.ControllerAdapter.getNodeLifetimeListeners()",1,1,1
"freemind.modes.ControllerAdapter.getNodeMotionListener()",1,1,1
"freemind.modes.ControllerAdapter.getNodeMouseMotionListener()",1,1,1
"freemind.modes.ControllerAdapter.getNodeView(MindMapNode)",1,1,1
"freemind.modes.ControllerAdapter.getPopupForModel(Object)",1,1,1
"freemind.modes.ControllerAdapter.getProperty(String)",1,1,1
"freemind.modes.ControllerAdapter.getRegisteredMouseWheelEventHandler()",1,1,1
"freemind.modes.ControllerAdapter.getResource(String)",1,1,1
"freemind.modes.ControllerAdapter.getResourceString(String)",1,1,1
"freemind.modes.ControllerAdapter.getRootNode()",1,1,1
"freemind.modes.ControllerAdapter.getSelected()",2,2,2
"freemind.modes.ControllerAdapter.getSelectedView()",2,2,2
"freemind.modes.ControllerAdapter.getSelecteds()",1,3,3
"freemind.modes.ControllerAdapter.getSelectedsByDepth()",1,1,1
"freemind.modes.ControllerAdapter.getSelectionColor()",1,1,1
"freemind.modes.ControllerAdapter.getText(String)",1,1,1
"freemind.modes.ControllerAdapter.getView()",1,1,1
"freemind.modes.ControllerAdapter.getViewAbstraction()",1,1,1
"freemind.modes.ControllerAdapter.getViewFeedback()",1,1,1
"freemind.modes.ControllerAdapter.handleLoadingException(Exception)",1,4,4
"freemind.modes.ControllerAdapter.isBlocked()",1,1,1
"freemind.modes.ControllerAdapter.load(File)",1,3,3
"freemind.modes.ControllerAdapter.load(URL)",2,2,2
"freemind.modes.ControllerAdapter.loadURL()",1,2,2
"freemind.modes.ControllerAdapter.loadURL(String)",5,12,12
"freemind.modes.ControllerAdapter.newMap()",1,1,1
"freemind.modes.ControllerAdapter.newMap(MindMap,ModeController)",1,1,1
"freemind.modes.ControllerAdapter.newModel(ModeController)",1,1,1
"freemind.modes.ControllerAdapter.nodeChanged(MindMapNode)",1,1,1
"freemind.modes.ControllerAdapter.nodeRefresh(MindMapNode)",1,1,1
"freemind.modes.ControllerAdapter.nodeRefresh(MindMapNode,boolean)",1,3,3
"freemind.modes.ControllerAdapter.nodeStructureChanged(MindMapNode)",1,1,1
"freemind.modes.ControllerAdapter.onFocusNode(NodeView)",1,4,4
"freemind.modes.ControllerAdapter.onLostFocusNode(NodeView)",1,4,4
"freemind.modes.ControllerAdapter.onViewCreatedHook(NodeView)",1,2,2
"freemind.modes.ControllerAdapter.onViewRemovedHook(NodeView)",1,2,2
"freemind.modes.ControllerAdapter.open()",3,5,5
"freemind.modes.ControllerAdapter.refreshMap()",1,1,1
"freemind.modes.ControllerAdapter.refreshMapFrom(MindMapNode)",1,2,2
"freemind.modes.ControllerAdapter.registerNodeLifetimeListener(NodeLifetimeListener,boolean)",1,2,2
"freemind.modes.ControllerAdapter.registerNodeSelectionListener(NodeSelectionListener,boolean)",1,5,5
"freemind.modes.ControllerAdapter.restoreMapsLastState(ModeController,MapAdapter)",1,4,4
"freemind.modes.ControllerAdapter.save()",3,3,4
"freemind.modes.ControllerAdapter.save(File)",1,6,6
"freemind.modes.ControllerAdapter.saveAs()",4,7,9
"freemind.modes.ControllerAdapter.select(MindMapNode,List<MindMapNode>)",1,5,5
"freemind.modes.ControllerAdapter.select(NodeView)",1,1,1
"freemind.modes.ControllerAdapter.selectBranch(NodeView,boolean)",1,1,1
"freemind.modes.ControllerAdapter.setAllActions(boolean)",1,1,1
"freemind.modes.ControllerAdapter.setBlocked(boolean)",1,1,1
"freemind.modes.ControllerAdapter.setChosenDirectory(File)",1,1,1
"freemind.modes.ControllerAdapter.setMode(Mode)",1,1,1
"freemind.modes.ControllerAdapter.setModel(MapAdapter)",1,1,1
"freemind.modes.ControllerAdapter.setProperty(String,String)",1,1,1
"freemind.modes.ControllerAdapter.setSaved(boolean)",1,2,2
"freemind.modes.ControllerAdapter.setToolTip(MindMapNode,String,String)",1,1,1
"freemind.modes.ControllerAdapter.setView(MapView)",1,1,1
"freemind.modes.ControllerAdapter.setVisible(boolean)",1,3,3
"freemind.modes.ControllerAdapter.setWaitingCursor(boolean)",1,1,1
"freemind.modes.ControllerAdapter.showPopupMenu(MouseEvent)",1,3,3
"freemind.modes.ControllerAdapter.shutdownController()",1,1,1
"freemind.modes.ControllerAdapter.startupController()",1,2,2
"freemind.modes.ControllerAdapter.updateMapModuleName()",1,1,1
"freemind.modes.ControllerAdapter.updateNode(MindMapNode)",1,2,2
"freemind.modes.ControllerAdapter.updatePopupMenu(StructuredMenuHolder)",1,1,1
"freemind.modes.EdgeAdapter.EdgeAdapter(MindMapNode,MapFeedback)",1,2,2
"freemind.modes.EdgeAdapter.EdgeAdapterListener.propertyChanged(String,String,String)",1,2,3
"freemind.modes.EdgeAdapter.getColor()",3,3,3
"freemind.modes.EdgeAdapter.getRealColor()",1,1,1
"freemind.modes.EdgeAdapter.getRealWidth()",1,1,1
"freemind.modes.EdgeAdapter.getSource()",1,1,1
"freemind.modes.EdgeAdapter.getStandardColor()",1,1,1
"freemind.modes.EdgeAdapter.getStandardColorPropertyString()",1,1,1
"freemind.modes.EdgeAdapter.getStandardStyle()",1,1,1
"freemind.modes.EdgeAdapter.getStandardStylePropertyString()",1,1,1
"freemind.modes.EdgeAdapter.getStyle()",3,3,3
"freemind.modes.EdgeAdapter.getStyleAsInt()",5,4,5
"freemind.modes.EdgeAdapter.getWidth()",3,2,3
"freemind.modes.EdgeAdapter.hasStyle()",1,1,1
"freemind.modes.EdgeAdapter.save()",2,6,8
"freemind.modes.EdgeAdapter.setStandardColor(Color)",1,1,1
"freemind.modes.EdgeAdapter.setStandardStyle(String)",1,1,1
"freemind.modes.EdgeAdapter.setWidth(int)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.DummyTransferable.getTransferData(DataFlavor)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.DummyTransferable.getTransferDataFlavors()",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.DummyTransferable.isDataFlavorSupported(DataFlavor)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.ExtendedMapFeedbackAdapter()",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addAttribute(MindMapNode,Attribute)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addHook(MindMapNode,List<MindMapNode>,String,Properties)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addIcon(MindMapNode,MindIcon)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addLink(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.addNewNode(MindMapNode,int,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.applyPattern(MindMapNode,Pattern)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.blendNodeColor(MindMapNode)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.changeArrowsOfArrowLink(MindMapArrowLink,boolean,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.close(boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.copy(List<MindMapNode>,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.copy(MindMapNode,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.cut()",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.cut(List<MindMapNode>)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.deleteNode(MindMapNode)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.doTransaction(String,ActionPair)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.edit(KeyEvent,boolean,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.getActionRegistry()",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.getActorFactory()",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.getHookFactory()",1,2,2
"freemind.modes.ExtendedMapFeedbackAdapter.getNodeFromID(String)",2,2,2
"freemind.modes.ExtendedMapFeedbackAdapter.getNodeID(MindMapNode)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.getSelected()",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.insertAttribute(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.insertNodeInto(MindMapNode,MindMapNode,int)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.load(File)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.moveNodePosition(MindMapNode,int,int,int)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.moveNodes(MindMapNode,List<MindMapNode>,int)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.newNode(Object,MindMap)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.nodeStyleChanged(MindMapNode)",1,4,4
"freemind.modes.ExtendedMapFeedbackAdapter.paste(Transferable,MindMapNode,boolean,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeAllIcons(MindMapNode)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeAttribute(MindMapNode,int)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeHook(MindMapNode,List<MindMapNode>,String)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeLastIcon(MindMapNode)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeNodeFromParent(MindMapNode)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.removeReference(MindMapLink)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.select(MindMapNode,List<MindMapNode>)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setArrowLinkColor(MindMapLink,Color)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setArrowLinkEndPoints(MindMapArrowLink,Point,Point)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setAttribute(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setBold(MindMapNode,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setCloud(MindMapNode,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setCloudColor(MindMapNode,Color)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setEdgeColor(MindMapNode,Color)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setEdgeStyle(MindMapNode,String)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setEdgeWidth(MindMapNode,int)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setFolded(MindMapNode,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setFontFamily(MindMapNode,String)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setFontSize(MindMapNode,String)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setItalic(MindMapNode,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setLink(MindMapNode,String)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNodeBackgroundColor(MindMapNode,Color)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNodeColor(MindMapNode,Color)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNodeStyle(MindMapNode,String)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNodeText(MindMapNode,String)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setNoteText(MindMapNode,String)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setStrikethrough(MindMapNode,boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.setWaitingCursor(boolean)",1,1,1
"freemind.modes.ExtendedMapFeedbackAdapter.toggleFolded()",1,1,1
"freemind.modes.ExtendedMapFeedbackImpl.copy(MindMapNode,boolean)",1,1,2
"freemind.modes.ExtendedMapFeedbackImpl.getDefaultFont()",1,1,1
"freemind.modes.ExtendedMapFeedbackImpl.getMap()",1,1,1
"freemind.modes.ExtendedMapFeedbackImpl.newNode(Object,MindMap)",1,1,1
"freemind.modes.ExtendedMapFeedbackImpl.setMap(MindMap)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.DirFilter.accept(File)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.DirFilter.getDescription()",1,1,1
"freemind.modes.FreeMindAwtFileDialog.FileAndDirFilter.accept(File)",1,2,2
"freemind.modes.FreeMindAwtFileDialog.FileAndDirFilter.getDescription()",1,1,1
"freemind.modes.FreeMindAwtFileDialog.FileOnlyFilter.accept(File)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.FileOnlyFilter.getDescription()",1,1,1
"freemind.modes.FreeMindAwtFileDialog.FreeMindAwtFileDialog()",1,2,2
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter.FreeMindFilenameFilter()",1,1,1
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter.accept(File,String)",1,2,2
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter.setCustomFilter(FileFilter)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter.setPrincipalFilter(FileFilter)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.NullFilter.accept(File)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.NullFilter.getDescription()",1,1,1
"freemind.modes.FreeMindAwtFileDialog.addChoosableFileFilter(FileFilter)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.addChoosableFileFilterAsDefault(FileFilter)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.callDirectoryListener()",1,4,4
"freemind.modes.FreeMindAwtFileDialog.getReturnValue()",1,1,2
"freemind.modes.FreeMindAwtFileDialog.getSelectedFile()",1,1,1
"freemind.modes.FreeMindAwtFileDialog.getSelectedFiles()",1,1,1
"freemind.modes.FreeMindAwtFileDialog.isMultiSelectionEnabled()",1,1,1
"freemind.modes.FreeMindAwtFileDialog.main(String[])",1,1,1
"freemind.modes.FreeMindAwtFileDialog.registerDirectoryResultListener(DirectoryResultListener)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.setCurrentDirectory(File)",2,1,2
"freemind.modes.FreeMindAwtFileDialog.setDialogTitle(String)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.setFileSelectionMode(int)",2,2,5
"freemind.modes.FreeMindAwtFileDialog.setMultiSelectionEnabled(boolean)",2,1,2
"freemind.modes.FreeMindAwtFileDialog.setSelectedFile(File)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.showOpenDialog(Component)",1,1,1
"freemind.modes.FreeMindAwtFileDialog.showSaveDialog(Component)",1,1,1
"freemind.modes.FreeMindJFileDialog.addChoosableFileFilterAsDefault(FileFilter)",1,1,1
"freemind.modes.FreeMindJFileDialog.callDirectoryListener(int)",1,3,4
"freemind.modes.FreeMindJFileDialog.registerDirectoryResultListener(DirectoryResultListener)",1,1,1
"freemind.modes.FreeMindJFileDialog.showOpenDialog(Component)",1,1,1
"freemind.modes.FreeMindJFileDialog.showSaveDialog(Component)",1,1,1
"freemind.modes.FreemindAction.FreemindAction(String,ControllerAdapter)",1,1,1
"freemind.modes.FreemindAction.FreemindAction(String,Icon,ControllerAdapter)",1,2,2
"freemind.modes.FreemindAction.FreemindAction(String,String,ControllerAdapter)",1,2,2
"freemind.modes.FreemindAction.getControllerAdapter()",1,1,1
"freemind.modes.FreemindAction.isEnabled(JMenuItem,Action)",1,2,2
"freemind.modes.HistoryInformation.HistoryInformation()",1,1,1
"freemind.modes.HistoryInformation.HistoryInformation(Date,Date)",1,1,1
"freemind.modes.HistoryInformation.getCreatedAt()",1,1,1
"freemind.modes.HistoryInformation.getLastModifiedAt()",1,1,1
"freemind.modes.HistoryInformation.setCreatedAt(Date)",1,1,1
"freemind.modes.HistoryInformation.setLastModifiedAt(Date)",1,1,1
"freemind.modes.LineAdapter.LineAdapter(MindMapNode,MapFeedback)",1,1,1
"freemind.modes.LineAdapter.clone()",1,2,3
"freemind.modes.LineAdapter.getColor()",2,2,2
"freemind.modes.LineAdapter.getMapFeedback()",1,1,1
"freemind.modes.LineAdapter.getRealWidth()",1,1,1
"freemind.modes.LineAdapter.getStyle()",2,2,2
"freemind.modes.LineAdapter.getTarget()",1,1,1
"freemind.modes.LineAdapter.getWidth()",2,1,2
"freemind.modes.LineAdapter.setColor(Color)",1,1,1
"freemind.modes.LineAdapter.setStyle(String)",1,1,1
"freemind.modes.LineAdapter.setTarget(MindMapNode)",1,1,1
"freemind.modes.LineAdapter.setWidth(int)",1,1,1
"freemind.modes.LineAdapter.toString()",1,1,1
"freemind.modes.LineAdapter.updateStandards()",1,6,6
"freemind.modes.LinkAdapter.LinkAdapter(MindMapNode,MindMapNode,MapFeedback)",1,2,2
"freemind.modes.LinkAdapter.LinkAdapterListener.propertyChanged(String,String,String)",1,2,3
"freemind.modes.LinkAdapter.getDestinationLabel()",1,1,1
"freemind.modes.LinkAdapter.getReferenceText()",1,1,1
"freemind.modes.LinkAdapter.getSource()",1,1,1
"freemind.modes.LinkAdapter.getStandardColor()",1,1,1
"freemind.modes.LinkAdapter.getStandardColorPropertyString()",1,1,1
"freemind.modes.LinkAdapter.getStandardStyle()",1,1,1
"freemind.modes.LinkAdapter.getStandardStylePropertyString()",1,1,1
"freemind.modes.LinkAdapter.getUniqueId()",1,1,1
"freemind.modes.LinkAdapter.setDestinationLabel(String)",1,1,1
"freemind.modes.LinkAdapter.setReferenceText(String)",1,1,1
"freemind.modes.LinkAdapter.setSource(MindMapNode)",1,1,1
"freemind.modes.LinkAdapter.setStandardColor(Color)",1,1,1
"freemind.modes.LinkAdapter.setStandardStyle(String)",1,1,1
"freemind.modes.LinkAdapter.setUniqueId(String)",1,1,1
"freemind.modes.MapAdapter.DontAskUserBeforeUpdateAdapter.askUserForUpdate()",1,1,1
"freemind.modes.MapAdapter.FileChangeInspectorTimerTask.run()",1,4,6
"freemind.modes.MapAdapter.MapAdapter(MapFeedback)",1,2,2
"freemind.modes.MapAdapter.addIcons(SortedMapListModel,MindMapNode)",1,2,2
"freemind.modes.MapAdapter.cancelFileChangeObservationTimer()",1,1,1
"freemind.modes.MapAdapter.changeRoot(MindMapNode)",2,5,6
"freemind.modes.MapAdapter.createNodeTreeFromXml(Reader,HashMap<String, NodeAdapter>)",1,1,1
"freemind.modes.MapAdapter.deregisterMapSourceChangedObserver(MapSourceChangedObserver)",1,1,1
"freemind.modes.MapAdapter.destroy()",1,1,1
"freemind.modes.MapAdapter.fireTreeNodesChanged(Object,Object[],int[],Object[])",1,1,1
"freemind.modes.MapAdapter.fireTreeNodesChanged(Object,Object[],int[],Object[],Object[],TreeModelEvent)",1,3,4
"freemind.modes.MapAdapter.fireTreeNodesInserted(Object,Object[],int[],Object[])",1,1,1
"freemind.modes.MapAdapter.fireTreeNodesInserted(Object,Object[],int[],Object[],Object[],TreeModelEvent)",1,3,4
"freemind.modes.MapAdapter.fireTreeNodesRemoved(Object,Object[],int[],Object[])",1,1,1
"freemind.modes.MapAdapter.fireTreeNodesRemoved(Object,Object[],int[],Object[],Object[],TreeModelEvent)",1,3,4
"freemind.modes.MapAdapter.fireTreeStructureChanged(Object,Object[],int[],Object[])",1,1,1
"freemind.modes.MapAdapter.fireTreeStructureChanged(Object,Object[],int[],Object[],Object[],TreeModelEvent)",1,3,4
"freemind.modes.MapAdapter.getAsHTML(List<MindMapNode>)",1,1,1
"freemind.modes.MapAdapter.getAsPlainText(List<MindMapNode>)",1,1,1
"freemind.modes.MapAdapter.getAsRTF(List<MindMapNode>)",1,1,1
"freemind.modes.MapAdapter.getFile()",1,1,1
"freemind.modes.MapAdapter.getFileTime()",1,2,2
"freemind.modes.MapAdapter.getFilter()",1,1,1
"freemind.modes.MapAdapter.getIcons()",1,1,1
"freemind.modes.MapAdapter.getLinkRegistry()",1,1,1
"freemind.modes.MapAdapter.getMapFeedback()",1,1,1
"freemind.modes.MapAdapter.getNumberOfChangesSinceLastSave()",1,1,1
"freemind.modes.MapAdapter.getRestorable()",1,1,1
"freemind.modes.MapAdapter.getRootNode()",1,1,1
"freemind.modes.MapAdapter.getText(String)",1,1,1
"freemind.modes.MapAdapter.getURL()",1,2,2
"freemind.modes.MapAdapter.insertNodeInto(MindMapNode,MindMapNode,int)",1,1,1
"freemind.modes.MapAdapter.isReadOnly()",1,1,1
"freemind.modes.MapAdapter.isSaved()",1,1,1
"freemind.modes.MapAdapter.loadTree(ReaderCreator,AskUserBeforeUpdateCallback)",6,9,10
"freemind.modes.MapAdapter.nodeChanged(TreeNode)",1,1,1
"freemind.modes.MapAdapter.nodeChangedInternal(TreeNode)",1,2,2
"freemind.modes.MapAdapter.nodeRefresh(TreeNode)",1,1,1
"freemind.modes.MapAdapter.registerMapSourceChangedObserver(MapSourceChangedObserver,long)",1,3,4
"freemind.modes.MapAdapter.removeNodeFromParent(MindMapNode)",1,1,1
"freemind.modes.MapAdapter.removeNodes(MindMapNode)",1,2,2
"freemind.modes.MapAdapter.setFile(File)",1,1,1
"freemind.modes.MapAdapter.setFileTime()",1,1,1
"freemind.modes.MapAdapter.setFilter(Filter)",1,1,1
"freemind.modes.MapAdapter.setReadOnly(boolean)",1,1,1
"freemind.modes.MapAdapter.setRoot(MindMapNode)",1,1,1
"freemind.modes.MapAdapter.setSaved(boolean)",1,1,3
"freemind.modes.MapAdapter.tryToLock(File)",1,1,1
"freemind.modes.MapFeedbackAdapter.MapFeedbackAdapter()",1,2,2
"freemind.modes.MapFeedbackAdapter.NodesDepthComparator.NodesDepthComparator()",1,1,1
"freemind.modes.MapFeedbackAdapter.NodesDepthComparator.compare(MindMapNode,MindMapNode)",4,1,4
"freemind.modes.MapFeedbackAdapter.changeSelection(NodeView,boolean)",1,1,1
"freemind.modes.MapFeedbackAdapter.createNodeHook(String,MindMapNode)",1,1,1
"freemind.modes.MapFeedbackAdapter.deRegisterMouseWheelEventHandler(MouseWheelEventHandler)",1,1,1
"freemind.modes.MapFeedbackAdapter.fireNodePostDeleteEvent(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.MapFeedbackAdapter.fireNodePreDeleteEvent(MindMapNode)",1,1,1
"freemind.modes.MapFeedbackAdapter.firePreSaveEvent(MindMapNode)",1,1,1
"freemind.modes.MapFeedbackAdapter.fireRecursiveNodeCreateEvent(MindMapNode)",1,1,1
"freemind.modes.MapFeedbackAdapter.getDefaultFont()",1,1,1
"freemind.modes.MapFeedbackAdapter.getFontThroughMap(Font)",1,2,2
"freemind.modes.MapFeedbackAdapter.getIntProperty(String,int)",1,1,1
"freemind.modes.MapFeedbackAdapter.getMapMouseMotionListener()",1,1,1
"freemind.modes.MapFeedbackAdapter.getMapMouseWheelListener()",1,1,1
"freemind.modes.MapFeedbackAdapter.getNodeDragListener()",1,1,1
"freemind.modes.MapFeedbackAdapter.getNodeDropListener()",1,1,1
"freemind.modes.MapFeedbackAdapter.getNodeKeyListener()",1,1,1
"freemind.modes.MapFeedbackAdapter.getNodeMotionListener()",1,1,1
"freemind.modes.MapFeedbackAdapter.getNodeMouseMotionListener()",1,1,1
"freemind.modes.MapFeedbackAdapter.getNodeView(MindMapNode)",1,1,1
"freemind.modes.MapFeedbackAdapter.getProperty(String)",1,1,1
"freemind.modes.MapFeedbackAdapter.getResourceString(String)",1,1,1
"freemind.modes.MapFeedbackAdapter.getViewAbstraction()",1,1,1
"freemind.modes.MapFeedbackAdapter.getViewFeedback()",1,1,1
"freemind.modes.MapFeedbackAdapter.invokeHooksRecursively(MindMapNode,MindMap)",1,3,3
"freemind.modes.MapFeedbackAdapter.nodeChanged(MindMapNode)",1,2,2
"freemind.modes.MapFeedbackAdapter.nodeRefresh(MindMapNode)",1,1,1
"freemind.modes.MapFeedbackAdapter.onFocusNode(NodeView)",1,1,1
"freemind.modes.MapFeedbackAdapter.onLostFocusNode(NodeView)",1,1,1
"freemind.modes.MapFeedbackAdapter.onViewCreatedHook(NodeView)",1,1,1
"freemind.modes.MapFeedbackAdapter.onViewRemovedHook(NodeView)",1,1,1
"freemind.modes.MapFeedbackAdapter.out(String)",1,1,1
"freemind.modes.MapFeedbackAdapter.paste(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.MapFeedbackAdapter.registerMouseWheelEventHandler(MouseWheelEventHandler)",1,1,1
"freemind.modes.MapFeedbackAdapter.select(NodeView)",1,1,1
"freemind.modes.MapFeedbackAdapter.setFolded(MindMapNode,boolean)",1,1,1
"freemind.modes.MapFeedbackAdapter.setProperty(String,String)",1,1,1
"freemind.modes.MapFeedbackAdapter.sortNodesByDepth(List<MindMapNode>)",1,1,1
"freemind.modes.MindIcon.MindIcon(String)",1,1,1
"freemind.modes.MindIcon.MindIcon(String,ImageIcon)",1,1,1
"freemind.modes.MindIcon.compareTo(MindIcon)",1,1,3
"freemind.modes.MindIcon.factory(String)",2,2,2
"freemind.modes.MindIcon.factory(String,ImageIcon)",2,2,2
"freemind.modes.MindIcon.getAllIconNames()",2,2,3
"freemind.modes.MindIcon.getDescription()",1,1,1
"freemind.modes.MindIcon.getIcon()",3,6,8
"freemind.modes.MindIcon.getIconBaseFileName()",1,1,1
"freemind.modes.MindIcon.getIconFileName()",1,1,1
"freemind.modes.MindIcon.getIconsPath()",1,1,1
"freemind.modes.MindIcon.getKeyStroke()",1,1,1
"freemind.modes.MindIcon.getKeystrokeResourceName()",1,1,1
"freemind.modes.MindIcon.getName()",1,1,2
"freemind.modes.MindIcon.getNumber()",1,2,3
"freemind.modes.MindIcon.getRendererComponent()",1,2,2
"freemind.modes.MindIcon.getUnscaledIcon()",2,2,2
"freemind.modes.MindIcon.setIcon(ImageIcon)",1,1,1
"freemind.modes.MindIcon.setName(String)",1,1,1
"freemind.modes.MindIcon.toString()",1,1,1
"freemind.modes.MindMapLinkRegistry.MindMapLinkRegistry()",1,2,2
"freemind.modes.MindMapLinkRegistry.SynchronousVector.add(MindMapLink)",1,3,3
"freemind.modes.MindMapLinkRegistry.SynchronousVector.removeElementAt(int)",1,3,3
"freemind.modes.MindMapLinkRegistry._registerLinkTarget(MindMapNode)",1,1,1
"freemind.modes.MindMapLinkRegistry._registerLinkTarget(MindMapNode,String)",3,2,3
"freemind.modes.MindMapLinkRegistry.deregisterLink(MindMapLink)",1,3,3
"freemind.modes.MindMapLinkRegistry.deregisterLinkTarget(MindMapNode)",1,4,4
"freemind.modes.MindMapLinkRegistry.generateUniqueID(String)",1,1,1
"freemind.modes.MindMapLinkRegistry.generateUniqueLinkId(String)",1,1,1
"freemind.modes.MindMapLinkRegistry.getAllLinks(MindMapNode)",1,1,1
"freemind.modes.MindMapLinkRegistry.getAllLinksFromMe(MindMapNode)",1,2,2
"freemind.modes.MindMapLinkRegistry.getAllLinksIntoMe(MindMapNode)",1,2,2
"freemind.modes.MindMapLinkRegistry.getAllSources(MindMapNode)",1,3,3
"freemind.modes.MindMapLinkRegistry.getAssignedLinksVector(String)",1,2,2
"freemind.modes.MindMapLinkRegistry.getLabel(MindMapNode)",1,1,1
"freemind.modes.MindMapLinkRegistry.getLinkForId(String)",2,2,2
"freemind.modes.MindMapLinkRegistry.getState(MindMapNode)",2,2,2
"freemind.modes.MindMapLinkRegistry.getTargetForId(String)",1,1,1
"freemind.modes.MindMapLinkRegistry.isTargetOfLocalHyperlinks(String)",1,1,1
"freemind.modes.MindMapLinkRegistry.registerLink(MindMapLink)",4,7,9
"freemind.modes.MindMapLinkRegistry.registerLinkTarget(MindMapNode)",1,1,1
"freemind.modes.MindMapLinkRegistry.registerLinkTarget(MindMapNode,String)",1,1,1
"freemind.modes.MindMapLinkRegistry.registerLocalHyperlinkId(String)",1,1,1
"freemind.modes.Mode.toLocalizedString()",1,1,1
"freemind.modes.ModesCreator.ModesCreator(Controller)",1,1,1
"freemind.modes.ModesCreator.getAllModes()",1,4,4
"freemind.modes.ModesCreator.getMode(String)",2,3,4
"freemind.modes.NodeAdapter.NodeAdapter(Object,MindMap)",1,4,4
"freemind.modes.NodeAdapter.addAttribute(Attribute)",1,1,1
"freemind.modes.NodeAdapter.addHook(PermanentNodeHook)",2,1,2
"freemind.modes.NodeAdapter.addIcon(MindIcon,int)",1,2,2
"freemind.modes.NodeAdapter.addToPathVector(Vector<NodeAdapter>)",1,2,2
"freemind.modes.NodeAdapter.addTreeModelListener(TreeModelListener)",1,1,1
"freemind.modes.NodeAdapter.calcShiftY()",1,1,3
"freemind.modes.NodeAdapter.changeChildCloudIterativeLevels(int)",1,3,3
"freemind.modes.NodeAdapter.checkAttributePosition(int)",2,3,4
"freemind.modes.NodeAdapter.children()",1,1,1
"freemind.modes.NodeAdapter.childrenFolded()",2,2,2
"freemind.modes.NodeAdapter.childrenUnfolded()",1,2,2
"freemind.modes.NodeAdapter.convertToEncodedContent(String)",1,1,1
"freemind.modes.NodeAdapter.createActivatedHooks()",1,1,2
"freemind.modes.NodeAdapter.createHooks()",1,1,2
"freemind.modes.NodeAdapter.createIcons()",1,1,2
"freemind.modes.NodeAdapter.createStateIcons()",1,1,2
"freemind.modes.NodeAdapter.createToolTip()",1,1,2
"freemind.modes.NodeAdapter.establishOwnFont()",1,2,2
"freemind.modes.NodeAdapter.getActivatedHooks()",2,2,2
"freemind.modes.NodeAdapter.getAdditionalInfo()",1,1,1
"freemind.modes.NodeAdapter.getAllowsChildren()",1,1,1
"freemind.modes.NodeAdapter.getAttribute(String)",4,3,4
"freemind.modes.NodeAdapter.getAttribute(int)",1,1,1
"freemind.modes.NodeAdapter.getAttributeKeyList()",2,3,3
"freemind.modes.NodeAdapter.getAttributePosition(String)",4,2,4
"freemind.modes.NodeAdapter.getAttributeTableLength()",2,1,2
"freemind.modes.NodeAdapter.getAttributeVector()",1,1,2
"freemind.modes.NodeAdapter.getAttributes()",2,2,2
"freemind.modes.NodeAdapter.getBackgroundColor()",1,1,1
"freemind.modes.NodeAdapter.getBareStyle()",1,1,1
"freemind.modes.NodeAdapter.getChildAt(int)",1,1,1
"freemind.modes.NodeAdapter.getChildCount()",1,2,2
"freemind.modes.NodeAdapter.getChildPosition(MindMapNode)",3,2,3
"freemind.modes.NodeAdapter.getChildren()",1,2,2
"freemind.modes.NodeAdapter.getCloud()",1,1,1
"freemind.modes.NodeAdapter.getColor()",1,1,1
"freemind.modes.NodeAdapter.getEdge()",1,1,1
"freemind.modes.NodeAdapter.getFilterInfo()",1,1,1
"freemind.modes.NodeAdapter.getFont()",1,1,1
"freemind.modes.NodeAdapter.getFontFamilyName()",2,2,2
"freemind.modes.NodeAdapter.getFontSize()",2,2,2
"freemind.modes.NodeAdapter.getHGap()",1,1,1
"freemind.modes.NodeAdapter.getHistoryInformation()",1,1,1
"freemind.modes.NodeAdapter.getHooks()",2,2,2
"freemind.modes.NodeAdapter.getIcons()",2,2,2
"freemind.modes.NodeAdapter.getIndex(TreeNode)",1,1,1
"freemind.modes.NodeAdapter.getLink()",1,1,1
"freemind.modes.NodeAdapter.getListeners()",1,1,1
"freemind.modes.NodeAdapter.getMap()",1,1,1
"freemind.modes.NodeAdapter.getMapFeedback()",1,1,1
"freemind.modes.NodeAdapter.getNodeLevel()",1,2,3
"freemind.modes.NodeAdapter.getNoteText()",1,1,1
"freemind.modes.NodeAdapter.getObjectId(ModeController)",1,1,1
"freemind.modes.NodeAdapter.getParent()",1,1,1
"freemind.modes.NodeAdapter.getParentNode()",1,1,1
"freemind.modes.NodeAdapter.getPath()",1,1,1
"freemind.modes.NodeAdapter.getPlainTextContent()",1,1,1
"freemind.modes.NodeAdapter.getShiftY()",1,1,1
"freemind.modes.NodeAdapter.getShortText(ModeController)",1,2,2
"freemind.modes.NodeAdapter.getStateIcons()",2,2,2
"freemind.modes.NodeAdapter.getStyle()",3,8,9
"freemind.modes.NodeAdapter.getText()",1,2,2
"freemind.modes.NodeAdapter.getToolTip()",1,12,15
"freemind.modes.NodeAdapter.getVGap()",1,1,1
"freemind.modes.NodeAdapter.getXmlNoteText()",1,1,1
"freemind.modes.NodeAdapter.getXmlText()",1,1,1
"freemind.modes.NodeAdapter.hasChildren()",1,2,2
"freemind.modes.NodeAdapter.hasExactlyOneVisibleChild()",3,2,4
"freemind.modes.NodeAdapter.hasFoldedParents()",3,1,3
"freemind.modes.NodeAdapter.hasFoldedStrictDescendant()",3,3,4
"freemind.modes.NodeAdapter.hasStyle()",1,1,1
"freemind.modes.NodeAdapter.hasVisibleChilds()",3,2,3
"freemind.modes.NodeAdapter.insert(MutableTreeNode,int)",1,2,2
"freemind.modes.NodeAdapter.insertAttribute(int,Attribute)",1,1,1
"freemind.modes.NodeAdapter.invokeHook(NodeHook)",1,3,3
"freemind.modes.NodeAdapter.isBold()",1,2,2
"freemind.modes.NodeAdapter.isDescendantOf(MindMapNode)",3,3,3
"freemind.modes.NodeAdapter.isDescendantOfOrEqual(MindMapNode)",2,1,2
"freemind.modes.NodeAdapter.isFolded()",1,1,1
"freemind.modes.NodeAdapter.isItalic()",1,2,2
"freemind.modes.NodeAdapter.isLeaf()",1,1,1
"freemind.modes.NodeAdapter.isLeft()",2,5,5
"freemind.modes.NodeAdapter.isNewChildLeft()",4,3,5
"freemind.modes.NodeAdapter.isRoot()",1,1,1
"freemind.modes.NodeAdapter.isStrikethrough()",3,3,3
"freemind.modes.NodeAdapter.isUnderlined()",1,1,1
"freemind.modes.NodeAdapter.isVisible()",1,2,2
"freemind.modes.NodeAdapter.recursiveCallAddChildren(MindMapNode,MindMapNode)",1,6,6
"freemind.modes.NodeAdapter.recursiveCallRemoveChildren(MindMapNode,MindMapNode,MindMapNode)",1,5,5
"freemind.modes.NodeAdapter.remove(MutableTreeNode)",1,4,4
"freemind.modes.NodeAdapter.remove(int)",1,1,1
"freemind.modes.NodeAdapter.removeAllHooks()",1,4,4
"freemind.modes.NodeAdapter.removeAttribute(int)",1,1,1
"freemind.modes.NodeAdapter.removeFromParent()",1,1,1
"freemind.modes.NodeAdapter.removeHook(PermanentNodeHook)",1,2,4
"freemind.modes.NodeAdapter.removeIcon(int)",1,2,3
"freemind.modes.NodeAdapter.removeTreeModelListener(TreeModelListener)",1,1,1
"freemind.modes.NodeAdapter.save(Writer,MindMapLinkRegistry,boolean,boolean)",3,38,40
"freemind.modes.NodeAdapter.saveChildren(Writer,MindMapLinkRegistry,NodeAdapter,boolean)",1,4,4
"freemind.modes.NodeAdapter.setAdditionalInfo(String)",1,1,1
"freemind.modes.NodeAdapter.setAttribute(int,Attribute)",1,1,1
"freemind.modes.NodeAdapter.setBackgroundColor(Color)",1,1,1
"freemind.modes.NodeAdapter.setBold(boolean)",1,2,2
"freemind.modes.NodeAdapter.setCloud(MindMapCloud)",1,3,5
"freemind.modes.NodeAdapter.setColor(Color)",1,1,1
"freemind.modes.NodeAdapter.setEdge(MindMapEdge)",1,1,1
"freemind.modes.NodeAdapter.setFolded(boolean)",1,1,1
"freemind.modes.NodeAdapter.setFont(Font)",1,1,1
"freemind.modes.NodeAdapter.setFontSize(int)",1,1,1
"freemind.modes.NodeAdapter.setHGap(int)",1,1,1
"freemind.modes.NodeAdapter.setHistoryInformation(HistoryInformation)",1,1,1
"freemind.modes.NodeAdapter.setItalic(boolean)",1,2,2
"freemind.modes.NodeAdapter.setLeft(boolean)",1,3,4
"freemind.modes.NodeAdapter.setLink(String)",1,3,3
"freemind.modes.NodeAdapter.setMap(MindMap)",1,1,1
"freemind.modes.NodeAdapter.setNoteText(String)",2,1,2
"freemind.modes.NodeAdapter.setParent(MindMapNode)",1,1,1
"freemind.modes.NodeAdapter.setParent(MutableTreeNode)",1,1,1
"freemind.modes.NodeAdapter.setShiftY(int)",1,1,1
"freemind.modes.NodeAdapter.setStateIcon(String,ImageIcon)",1,3,4
"freemind.modes.NodeAdapter.setStrikethrough(boolean)",1,2,2
"freemind.modes.NodeAdapter.setStyle(String)",1,1,1
"freemind.modes.NodeAdapter.setText(String)",2,1,2
"freemind.modes.NodeAdapter.setToolTip(String,String)",1,3,4
"freemind.modes.NodeAdapter.setUnderlined(boolean)",1,1,1
"freemind.modes.NodeAdapter.setUserObject(Object)",1,1,1
"freemind.modes.NodeAdapter.setVGap(int)",1,1,1
"freemind.modes.NodeAdapter.setXmlNoteText(String)",2,1,2
"freemind.modes.NodeAdapter.setXmlText(String)",1,1,1
"freemind.modes.NodeAdapter.shallowCopy()",1,2,2
"freemind.modes.NodeAdapter.sortedChildrenUnfolded()",4,1,4
"freemind.modes.NodeAdapter.toString()",1,1,1
"freemind.modes.NodeAdapter.toggleBold()",1,1,1
"freemind.modes.NodeAdapter.toggleItalic()",1,1,1
"freemind.modes.NodeAdapter.toggleStrikethrough()",1,3,3
"freemind.modes.NodeDownAction.NodeDownAction(MindMapController)",1,1,1
"freemind.modes.NodeDownAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.NodeViewEvent.NodeViewEvent(MindMapNode)",1,1,1
"freemind.modes.StylePattern.StylePattern()",1,1,1
"freemind.modes.StylePattern.StylePattern(MindMapNode)",1,2,2
"freemind.modes.StylePattern.StylePattern(XMLElement,List<StylePattern>)",1,1,1
"freemind.modes.StylePattern.getAppliesToChildren()",1,1,1
"freemind.modes.StylePattern.getAppliesToEdge()",1,1,3
"freemind.modes.StylePattern.getAppliesToNode()",1,1,3
"freemind.modes.StylePattern.getAppliesToNodeFont()",1,1,4
"freemind.modes.StylePattern.getAppliesToNodeIcon()",1,1,1
"freemind.modes.StylePattern.getChildrenStylePattern()",1,1,1
"freemind.modes.StylePattern.getEdgeColor()",1,1,1
"freemind.modes.StylePattern.getEdgeStyle()",1,1,1
"freemind.modes.StylePattern.getEdgeWidth()",1,1,1
"freemind.modes.StylePattern.getName()",1,1,1
"freemind.modes.StylePattern.getNodeBackgroundColor()",1,1,1
"freemind.modes.StylePattern.getNodeColor()",1,1,1
"freemind.modes.StylePattern.getNodeFontBold()",1,1,1
"freemind.modes.StylePattern.getNodeFontFamily()",1,1,1
"freemind.modes.StylePattern.getNodeFontItalic()",1,1,1
"freemind.modes.StylePattern.getNodeFontSize()",1,1,1
"freemind.modes.StylePattern.getNodeIcon()",1,1,1
"freemind.modes.StylePattern.getNodeStyle()",1,1,1
"freemind.modes.StylePattern.getRecursive()",1,1,1
"freemind.modes.StylePattern.getText()",1,1,1
"freemind.modes.StylePattern.loadPattern(XMLElement,List<StylePattern>)",6,29,29
"freemind.modes.StylePattern.loadPatterns(File)",1,1,1
"freemind.modes.StylePattern.loadPatterns(Reader)",1,2,2
"freemind.modes.StylePattern.setChildrenStylePattern(StylePattern)",1,1,1
"freemind.modes.StylePattern.setEdgeColor(Color)",1,1,1
"freemind.modes.StylePattern.setEdgeStyle(String)",1,1,1
"freemind.modes.StylePattern.setEdgeWidth(Integer)",1,1,1
"freemind.modes.StylePattern.setName(String)",1,1,1
"freemind.modes.StylePattern.setNodeBackgroundColor(Color)",1,1,1
"freemind.modes.StylePattern.setNodeColor(Color)",1,1,1
"freemind.modes.StylePattern.setNodeFontBold(Boolean)",1,1,1
"freemind.modes.StylePattern.setNodeFontFamily(String)",1,1,1
"freemind.modes.StylePattern.setNodeFontItalic(Boolean)",1,1,1
"freemind.modes.StylePattern.setNodeFontSize(Integer)",1,1,1
"freemind.modes.StylePattern.setNodeIcon(MindIcon)",1,1,1
"freemind.modes.StylePattern.setNodeStyle(String)",1,1,1
"freemind.modes.StylePattern.setRecursive(boolean)",1,1,1
"freemind.modes.StylePattern.setText(String)",1,1,1
"freemind.modes.StylePattern.toString()",1,1,1
"freemind.modes.StylePatternFactory.addSeparatorIfNecessary(String)",1,1,2
"freemind.modes.StylePatternFactory.addSubPatternToString(TextTranslator,String,PatternPropertyBase,String)",1,3,3
"freemind.modes.StylePatternFactory.applyPattern(MindMapNode,Pattern,List<Pattern>,Set<MindMapControllerPlugin>,ExtendedMapFeedback)",8,29,31
"freemind.modes.StylePatternFactory.applyPattern(Pattern,MindMapNode,MapFeedback)",5,24,26
"freemind.modes.StylePatternFactory.createPatternFromNode(MindMapNode)",1,10,13
"freemind.modes.StylePatternFactory.createPatternFromSelected(MindMapNode,List<MindMapNode>)",1,2,2
"freemind.modes.StylePatternFactory.getPatternFromString(String)",1,1,2
"freemind.modes.StylePatternFactory.getPatternsFromString(String)",1,1,2
"freemind.modes.StylePatternFactory.getRemoveAllPattern()",1,1,1
"freemind.modes.StylePatternFactory.intersectPattern(Pattern,Pattern)",1,1,1
"freemind.modes.StylePatternFactory.loadPatterns(File)",1,1,1
"freemind.modes.StylePatternFactory.loadPatterns(Reader)",3,6,7
"freemind.modes.StylePatternFactory.processPatternProperties(PatternPropertyBase,PatternPropertyBase,PatternPropertyBase)",3,2,4
"freemind.modes.StylePatternFactory.savePatterns(Writer,List<Pattern>)",1,6,6
"freemind.modes.StylePatternFactory.toString(Pattern,TextTranslator)",1,5,5
"freemind.modes.XMLElementAdapter.XMLElementAdapter(MapFeedback)",1,1,1
"freemind.modes.XMLElementAdapter.XMLElementAdapter(MapFeedback,Vector<ArrowLinkAdapter>,HashMap<String, NodeAdapter>)",1,2,2
"freemind.modes.XMLElementAdapter.addChild(XMLElement)",4,20,21
"freemind.modes.XMLElementAdapter.completeElement()",6,4,8
"freemind.modes.XMLElementAdapter.copyAttributesToNode(NodeAdapter)",1,2,2
"freemind.modes.XMLElementAdapter.createAnotherElement()",1,1,1
"freemind.modes.XMLElementAdapter.getIDToTarget()",1,1,1
"freemind.modes.XMLElementAdapter.getMap()",1,1,1
"freemind.modes.XMLElementAdapter.getMapChild()",1,1,1
"freemind.modes.XMLElementAdapter.getUserObject()",1,1,1
"freemind.modes.XMLElementAdapter.processUnfinishedLinks(MindMapLinkRegistry)",10,11,11
"freemind.modes.XMLElementAdapter.setAttribute(String,Object)",6,40,44
"freemind.modes.XMLElementAdapter.setIDToTarget(HashMap<String, NodeAdapter>)",1,1,1
"freemind.modes.XMLElementAdapter.setName(String)",1,14,15
"freemind.modes.XMLElementAdapter.setNodeAttribute(String,String,NodeAdapter)",1,20,20
"freemind.modes.XMLElementAdapter.setUserObject(Object)",1,1,1
"freemind.modes.attributes.Attribute.Attribute(Attribute)",1,1,1
"freemind.modes.attributes.Attribute.Attribute(String)",1,1,1
"freemind.modes.attributes.Attribute.Attribute(String,String)",1,1,1
"freemind.modes.attributes.Attribute.equals(Object)",10,3,10
"freemind.modes.attributes.Attribute.getName()",1,1,1
"freemind.modes.attributes.Attribute.getValue()",1,1,1
"freemind.modes.attributes.Attribute.hashCode()",1,3,3
"freemind.modes.attributes.Attribute.setName(String)",1,1,1
"freemind.modes.attributes.Attribute.setValue(String)",1,1,1
"freemind.modes.attributes.Attribute.toString()",1,1,1
"freemind.modes.browsemode.BrowseArrowLinkModel.BrowseArrowLinkModel(MindMapNode,MindMapNode,MapFeedback)",1,1,1
"freemind.modes.browsemode.BrowseArrowLinkModel.changeInclination(MapView,int,int,int,int)",1,1,1
"freemind.modes.browsemode.BrowseArrowLinkModel.clone()",1,1,1
"freemind.modes.browsemode.BrowseArrowLinkModel.save()",1,1,1
"freemind.modes.browsemode.BrowseArrowLinkModel.toString()",1,1,1
"freemind.modes.browsemode.BrowseCloudModel.BrowseCloudModel(MindMapNode,MapFeedback)",1,1,1
"freemind.modes.browsemode.BrowseCloudModel.save()",1,1,1
"freemind.modes.browsemode.BrowseController.BrowseController(Mode)",1,1,1
"freemind.modes.browsemode.BrowseController.FollowLinkAction.FollowLinkAction()",1,1,1
"freemind.modes.browsemode.BrowseController.FollowLinkAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.browsemode.BrowseController.FollowMapLink.FollowMapLink(ViewControllerAdapter)",1,1,1
"freemind.modes.browsemode.BrowseController.FollowMapLink.actionPerformed(ActionEvent)",1,4,4
"freemind.modes.browsemode.BrowseController.FollowMapLink.getHook()",1,1,1
"freemind.modes.browsemode.BrowseController.FollowMapLink.isEnabled(JMenuItem,Action)",1,1,1
"freemind.modes.browsemode.BrowseController.doubleClick()",1,2,2
"freemind.modes.browsemode.BrowseController.getGotoLinkNodeAction(MindMapNode)",1,1,1
"freemind.modes.browsemode.BrowseController.getHookFactory()",1,1,1
"freemind.modes.browsemode.BrowseController.getModeToolBar()",1,1,1
"freemind.modes.browsemode.BrowseController.getPopupForModel(Object)",2,5,5
"freemind.modes.browsemode.BrowseController.getPopupMenu()",1,1,1
"freemind.modes.browsemode.BrowseController.getToolBar()",1,1,1
"freemind.modes.browsemode.BrowseController.load(File)",1,1,1
"freemind.modes.browsemode.BrowseController.load(URL)",1,1,1
"freemind.modes.browsemode.BrowseController.loadInternally(URL,MapAdapter)",2,2,2
"freemind.modes.browsemode.BrowseController.loadTree(URL)",1,4,4
"freemind.modes.browsemode.BrowseController.newMap(MindMap,ModeController)",1,1,1
"freemind.modes.browsemode.BrowseController.newModel(ModeController)",1,1,1
"freemind.modes.browsemode.BrowseController.newNode(Object,MindMap)",1,1,1
"freemind.modes.browsemode.BrowseController.out(String)",1,1,1
"freemind.modes.browsemode.BrowseController.plainClick(MouseEvent)",4,3,4
"freemind.modes.browsemode.BrowseController.restoreMapsLastState(ModeController,MapAdapter)",1,1,1
"freemind.modes.browsemode.BrowseController.setAllActions(boolean)",1,1,1
"freemind.modes.browsemode.BrowseController.setNoteIcon(MindMapNode)",1,5,5
"freemind.modes.browsemode.BrowseController.startupController()",1,1,1
"freemind.modes.browsemode.BrowseController.updateMenus(StructuredMenuHolder)",1,1,1
"freemind.modes.browsemode.BrowseEdgeModel.BrowseEdgeModel(MindMapNode,MapFeedback)",1,1,1
"freemind.modes.browsemode.BrowseEdgeModel.save()",1,1,1
"freemind.modes.browsemode.BrowseEdgeModel.setColor(Color)",1,1,1
"freemind.modes.browsemode.BrowseEdgeModel.setStyle(String)",1,1,1
"freemind.modes.browsemode.BrowseHookFactory.BrowseHookFactory()",1,1,1
"freemind.modes.browsemode.BrowseHookFactory.createModeControllerHook(String)",1,1,1
"freemind.modes.browsemode.BrowseHookFactory.createNodeHook(String)",1,2,3
"freemind.modes.browsemode.BrowseHookFactory.getHookMenuPositions(String)",1,1,1
"freemind.modes.browsemode.BrowseHookFactory.getInstanciationMethod(String)",1,1,1
"freemind.modes.browsemode.BrowseHookFactory.getPluginBaseClass(String)",1,1,1
"freemind.modes.browsemode.BrowseHookFactory.getPossibleModeControllerHooks()",1,1,1
"freemind.modes.browsemode.BrowseHookFactory.getPossibleNodeHooks()",1,1,1
"freemind.modes.browsemode.BrowseHookFactory.getRegistrations()",1,1,1
"freemind.modes.browsemode.BrowseMapModel.BrowseMapModel(BrowseNodeModel,ModeController)",1,2,2
"freemind.modes.browsemode.BrowseMapModel.createArrowLinkAdapter(NodeAdapter,NodeAdapter)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.createArrowLinkTarget(NodeAdapter,NodeAdapter)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.createCloudAdapter(NodeAdapter)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.createEdgeAdapter(NodeAdapter)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.createEncryptedNode(String)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.createNodeAdapter(MapFeedback,String)",2,1,2
"freemind.modes.browsemode.BrowseMapModel.createNodeAdapter(MindMap,String)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.getFile()",1,1,1
"freemind.modes.browsemode.BrowseMapModel.getFilteredXml(Writer)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.getLinkRegistry()",1,1,1
"freemind.modes.browsemode.BrowseMapModel.getURL()",1,1,1
"freemind.modes.browsemode.BrowseMapModel.getXml(Writer)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.isSaved()",1,1,1
"freemind.modes.browsemode.BrowseMapModel.save(File)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.setFile()",1,1,1
"freemind.modes.browsemode.BrowseMapModel.setLinkInclinationChanged()",1,1,1
"freemind.modes.browsemode.BrowseMapModel.setURL(URL)",1,1,1
"freemind.modes.browsemode.BrowseMapModel.toString()",2,2,2
"freemind.modes.browsemode.BrowseMode.BrowseMode()",1,1,1
"freemind.modes.browsemode.BrowseMode.activate()",1,2,2
"freemind.modes.browsemode.BrowseMode.createModeController()",1,1,1
"freemind.modes.browsemode.BrowseMode.getController()",1,1,1
"freemind.modes.browsemode.BrowseMode.getDefaultModeController()",1,1,1
"freemind.modes.browsemode.BrowseMode.init(Controller)",1,1,1
"freemind.modes.browsemode.BrowseMode.restore(String)",1,2,2
"freemind.modes.browsemode.BrowseMode.toString()",1,1,1
"freemind.modes.browsemode.BrowseNodeModel.BrowseNodeModel(Object,MindMap)",1,1,1
"freemind.modes.browsemode.BrowseNodeModel.isWriteable()",1,1,1
"freemind.modes.browsemode.BrowseNodeModel.save()",1,1,1
"freemind.modes.browsemode.BrowsePopupMenu.BrowsePopupMenu(BrowseController)",1,1,1
"freemind.modes.browsemode.BrowsePopupMenu.add(Action,String)",1,1,1
"freemind.modes.browsemode.BrowsePopupMenu.popupMenuCanceled(PopupMenuEvent)",1,1,1
"freemind.modes.browsemode.BrowsePopupMenu.popupMenuWillBecomeInvisible(PopupMenuEvent)",1,1,1
"freemind.modes.browsemode.BrowsePopupMenu.popupMenuWillBecomeVisible(PopupMenuEvent)",1,1,1
"freemind.modes.browsemode.BrowseReminderHook.BrowseReminderHook()",1,1,1
"freemind.modes.browsemode.BrowseReminderHook.nodeRefresh(MindMapNode)",1,1,1
"freemind.modes.browsemode.BrowseReminderHook.setToolTip(MindMapNode,String,String)",1,1,1
"freemind.modes.browsemode.BrowseToolBar.BrowseToolBar(ControllerAdapter)",2,3,4
"freemind.modes.browsemode.BrowseToolBar.setURLField(String)",1,1,1
"freemind.modes.browsemode.EncryptedBrowseNode.EncryptedBrowseNode(MapFeedback)",1,1,1
"freemind.modes.browsemode.EncryptedBrowseNode.EncryptedBrowseNode(Object,MapFeedback)",1,4,4
"freemind.modes.browsemode.EncryptedBrowseNode.setAdditionalInfo(String)",1,1,1
"freemind.modes.browsemode.EncryptedBrowseNode.setFolded(boolean)",6,5,9
"freemind.modes.browsemode.EncryptedBrowseNode.updateIcon()",1,1,2
"freemind.modes.browsemode.NodeNoteViewer.NodeNoteViewer(ControllerAdapter)",1,1,1
"freemind.modes.browsemode.NodeNoteViewer.getNoteViewerComponent(String)",1,2,2
"freemind.modes.browsemode.NodeNoteViewer.onFocusNode(NodeView)",1,3,4
"freemind.modes.browsemode.NodeNoteViewer.onLostFocusNode(NodeView)",1,1,1
"freemind.modes.browsemode.NodeNoteViewer.onSaveNode(MindMapNode)",1,1,1
"freemind.modes.browsemode.NodeNoteViewer.onSelectionChange(NodeView,boolean)",1,1,1
"freemind.modes.browsemode.NodeNoteViewer.onUpdateNodeHook(MindMapNode)",1,1,1
"freemind.modes.browsemode.NodeNoteViewer.setStateIcon(MindMapNode,boolean)",1,2,3
"freemind.modes.common.CommonNodeKeyListener.CommonNodeKeyListener(ModeController,EditHandler)",1,2,2
"freemind.modes.common.CommonNodeKeyListener.keyPressed(KeyEvent)",7,16,19
"freemind.modes.common.CommonNodeKeyListener.keyReleased(KeyEvent)",1,2,2
"freemind.modes.common.CommonNodeKeyListener.keyTyped(KeyEvent)",1,1,1
"freemind.modes.common.CommonToggleFoldedAction.CommonToggleFoldedAction(ControllerAdapter)",1,1,1
"freemind.modes.common.CommonToggleFoldedAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.common.CommonToggleFoldedAction.getFoldingState(ListIterator<MindMapNode>)",5,4,7
"freemind.modes.common.CommonToggleFoldedAction.reset(ListIterator)",1,2,2
"freemind.modes.common.CommonToggleFoldedAction.toggleFolded()",1,1,1
"freemind.modes.common.CommonToggleFoldedAction.toggleFolded(ListIterator)",1,2,2
"freemind.modes.common.GotoLinkNodeAction.GotoLinkNodeAction(ModeController,MindMapNode)",1,2,2
"freemind.modes.common.GotoLinkNodeAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.common.actions.FindAction.FindAction(ControllerAdapter)",1,1,1
"freemind.modes.common.actions.FindAction.FindNextAction.FindNextAction(ControllerAdapter,FindAction)",1,1,1
"freemind.modes.common.actions.FindAction.FindNextAction.actionPerformed(ActionEvent)",2,3,3
"freemind.modes.common.actions.FindAction.actionPerformed(ActionEvent)",3,3,5
"freemind.modes.common.actions.FindAction.breakSearchTermIntoSubterms(String)",1,11,15
"freemind.modes.common.actions.FindAction.centerNode(MindMapNode)",1,1,1
"freemind.modes.common.actions.FindAction.close(int)",1,2,3
"freemind.modes.common.actions.FindAction.displayDialog()",1,1,1
"freemind.modes.common.actions.FindAction.displayNode(MindMapNode,ArrayList<MindMapNode>)",1,4,4
"freemind.modes.common.actions.FindAction.find(LinkedList<MindMapNode>,Collection<String>,boolean)",9,9,15
"freemind.modes.common.actions.FindAction.find(MindMapNode,Collection<String>,boolean)",1,3,3
"freemind.modes.common.actions.FindAction.findNext()",2,2,2
"freemind.modes.common.actions.FindAction.getFindFromText()",1,2,2
"freemind.modes.common.actions.FindAction.getSearchTerm()",1,1,1
"freemind.modes.common.actions.FindAction.getSearchTermAsEscapedString(String)",1,2,2
"freemind.modes.common.actions.FindAction.getSubterms()",1,1,1
"freemind.modes.common.actions.FindAction.prepareTextContent(boolean,String)",1,3,4
"freemind.modes.common.actions.NewMapAction.NewMapAction(ModeController)",1,1,1
"freemind.modes.common.actions.NewMapAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.EnterPasswordDialog()",1,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.EnterPasswordDialog(JFrame,TextTranslator,boolean)",1,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.cancelPressed()",1,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.checkEqualAndMinimumSize()",6,2,6
"freemind.modes.common.dialogs.EnterPasswordDialog.close()",1,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.getJCancelButton()",1,2,2
"freemind.modes.common.dialogs.EnterPasswordDialog.getJContentPane()",1,3,3
"freemind.modes.common.dialogs.EnterPasswordDialog.getJOKButton()",1,2,2
"freemind.modes.common.dialogs.EnterPasswordDialog.getJPasswordField()",1,1,2
"freemind.modes.common.dialogs.EnterPasswordDialog.getJPasswordField1()",1,1,2
"freemind.modes.common.dialogs.EnterPasswordDialog.getPassword()",1,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.getResult()",1,1,1
"freemind.modes.common.dialogs.EnterPasswordDialog.initialize()",1,2,2
"freemind.modes.common.dialogs.EnterPasswordDialog.okPressed()",2,2,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.IconSelectionPopupDialog(JFrame,Vector<IconInformation>,FreeMindMain)",1,3,4
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position.Position(int,int)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position.getX()",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position.getY()",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position.toString()",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.addIcon(int)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.calculateIndex(Position)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.canSelect(Position)",1,5,5
"freemind.modes.common.dialogs.IconSelectionPopupDialog.close()",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.cursorDown()",1,2,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.cursorLeft()",1,2,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.cursorRight()",1,2,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.cursorUp()",1,2,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.findIndexByKeyEvent(KeyEvent)",3,8,9
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getModifiers()",1,1,4
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getPosition(JLabel)",3,1,3
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getPositionFromIndex(int)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getResult()",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.getSelectedPosition()",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.highlight(Position)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.keyPressed(KeyEvent)",2,3,8
"freemind.modes.common.dialogs.IconSelectionPopupDialog.keyReleased(KeyEvent)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.keyTyped(KeyEvent)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mouseClicked(MouseEvent)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mouseEntered(MouseEvent)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mouseExited(MouseEvent)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mousePressed(MouseEvent)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.mouseReleased(MouseEvent)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.select(Position)",1,2,2
"freemind.modes.common.dialogs.IconSelectionPopupDialog.setSelectedPosition(Position)",1,1,1
"freemind.modes.common.dialogs.IconSelectionPopupDialog.unhighlight(Position)",1,1,1
"freemind.modes.common.dialogs.PersistentEditableComboBox.PersistentEditableComboBox(ModeController,String)",1,4,5
"freemind.modes.common.dialogs.PersistentEditableComboBox.addActionListener(ActionListener)",1,1,1
"freemind.modes.common.dialogs.PersistentEditableComboBox.addUrl(String,boolean)",3,6,6
"freemind.modes.common.dialogs.PersistentEditableComboBox.getText()",1,1,1
"freemind.modes.common.dialogs.PersistentEditableComboBox.setText(String)",1,1,1
"freemind.modes.common.listeners.CommonMouseMotionManager.CommonMouseMotionManager(ModeController)",1,1,1
"freemind.modes.common.listeners.CommonMouseMotionManager.mouseDragged(MouseEvent)",1,3,4
"freemind.modes.common.listeners.CommonMouseMotionManager.mousePressed(MouseEvent)",1,3,3
"freemind.modes.common.listeners.CommonMouseMotionManager.mouseReleased(MouseEvent)",1,1,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.CommonNodeMouseMotionListener(ModeController)",1,3,3
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.createTimer(MouseEvent)",1,2,2
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.getControlRegion(Point2D)",1,1,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.handlePopupMenu(MouseEvent)",1,1,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseClicked(MouseEvent)",1,1,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseDragged(MouseEvent)",1,2,2
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseEntered(MouseEvent)",2,1,2
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseExited(MouseEvent)",1,1,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseMoved(MouseEvent)",1,5,5
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mousePressed(MouseEvent)",1,1,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.mouseReleased(MouseEvent)",2,3,5
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.stopTimerForDelayedSelection()",1,2,2
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.timeDelayedSelection.run()",1,4,4
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.timeDelayedSelection.timeDelayedSelection(ModeController,MouseEvent)",1,1,1
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.updateSelectionMethod()",1,2,4
"freemind.modes.common.listeners.MindMapMouseWheelEventHandler.MindMapMouseWheelEventHandler(ControllerAdapter)",1,3,3
"freemind.modes.common.listeners.MindMapMouseWheelEventHandler.mouseWheelMoved(MouseWheelEvent)",4,5,8
"freemind.modes.common.plugins.MapNodePositionHolderBase.MapNodePositionHolderBase()",1,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.getBarePosition()",1,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.getBaseHook(MindMapNode)",3,1,3
"freemind.modes.common.plugins.MapNodePositionHolderBase.getImageHtml()",1,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.getMapLocationIcon()",1,2,2
"freemind.modes.common.plugins.MapNodePositionHolderBase.hideTooltip()",1,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.invoke(MindMapNode)",1,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.isTooltipDesired()",1,2,2
"freemind.modes.common.plugins.MapNodePositionHolderBase.loadFrom(XMLElement)",1,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.setStateIcon(MindMapNode,boolean)",1,2,2
"freemind.modes.common.plugins.MapNodePositionHolderBase.setTooltip()",1,1,1
"freemind.modes.common.plugins.MapNodePositionHolderBase.showTooltip()",1,3,3
"freemind.modes.common.plugins.MapNodePositionHolderBase.shutdownMapHook()",1,1,1
"freemind.modes.common.plugins.ReminderHookBase.ReminderHookBase()",1,1,1
"freemind.modes.common.plugins.ReminderHookBase.TimerBlinkTask.TimerBlinkTask(boolean)",1,1,1
"freemind.modes.common.plugins.ReminderHookBase.TimerBlinkTask.actionPerformed(ActionEvent)",2,2,3
"freemind.modes.common.plugins.ReminderHookBase.displayState(int,MindMapNode,boolean)",1,6,6
"freemind.modes.common.plugins.ReminderHookBase.getBellIcon()",1,2,2
"freemind.modes.common.plugins.ReminderHookBase.getClockIcon()",1,2,2
"freemind.modes.common.plugins.ReminderHookBase.getFlagIcon()",1,2,2
"freemind.modes.common.plugins.ReminderHookBase.getRemindUserAt()",1,1,1
"freemind.modes.common.plugins.ReminderHookBase.getRemindUserAtAsSecondsFromNow()",3,1,3
"freemind.modes.common.plugins.ReminderHookBase.getStateKey()",1,1,2
"freemind.modes.common.plugins.ReminderHookBase.invoke(MindMapNode)",2,2,3
"freemind.modes.common.plugins.ReminderHookBase.loadFrom(XMLElement)",1,2,2
"freemind.modes.common.plugins.ReminderHookBase.save(XMLElement)",1,1,1
"freemind.modes.common.plugins.ReminderHookBase.scheduleTimer()",1,1,1
"freemind.modes.common.plugins.ReminderHookBase.setRemindUserAt(long)",1,1,1
"freemind.modes.common.plugins.ReminderHookBase.shutdownMapHook()",1,2,2
"freemind.modes.filemode.FileController.CenterAction.CenterAction()",1,1,1
"freemind.modes.filemode.FileController.CenterAction.actionPerformed(ActionEvent)",1,2,2
"freemind.modes.filemode.FileController.FileController(Mode)",1,1,1
"freemind.modes.filemode.FileController.OpenPathAction.OpenPathAction()",1,1,1
"freemind.modes.filemode.FileController.OpenPathAction.actionPerformed(ActionEvent)",1,3,3
"freemind.modes.filemode.FileController.getHookFactory()",1,1,1
"freemind.modes.filemode.FileController.getModeToolBar()",1,1,1
"freemind.modes.filemode.FileController.getPopupMenu()",1,1,1
"freemind.modes.filemode.FileController.loadInternally(URL,MapAdapter)",1,1,1
"freemind.modes.filemode.FileController.newModel(ModeController)",1,1,1
"freemind.modes.filemode.FileController.newNode(Object,MindMap)",1,1,1
"freemind.modes.filemode.FileController.out(String)",1,1,1
"freemind.modes.filemode.FileController.plainClick(MouseEvent)",2,2,3
"freemind.modes.filemode.FileController.toggleFolded(MindMapNode)",1,3,3
"freemind.modes.filemode.FileController.updateMenus(StructuredMenuHolder)",1,1,1
"freemind.modes.filemode.FileEdgeModel.FileEdgeModel(MindMapNode,MapFeedback)",1,1,1
"freemind.modes.filemode.FileMapModel.FileMapModel(File,FreeMindMain,ModeController)",1,1,1
"freemind.modes.filemode.FileMapModel.FileMapModel(FreeMindMain,ModeController)",1,1,1
"freemind.modes.filemode.FileMapModel.changeNode(MindMapNode,String)",1,1,1
"freemind.modes.filemode.FileMapModel.createArrowLinkAdapter(NodeAdapter,NodeAdapter)",1,1,1
"freemind.modes.filemode.FileMapModel.createArrowLinkTarget(NodeAdapter,NodeAdapter)",1,1,1
"freemind.modes.filemode.FileMapModel.createCloudAdapter(NodeAdapter)",1,1,1
"freemind.modes.filemode.FileMapModel.createEdgeAdapter(NodeAdapter)",1,1,1
"freemind.modes.filemode.FileMapModel.createEncryptedNode(String)",1,1,1
"freemind.modes.filemode.FileMapModel.createNodeAdapter(MindMap,String)",1,1,1
"freemind.modes.filemode.FileMapModel.destroy()",1,1,1
"freemind.modes.filemode.FileMapModel.getFilteredXml(Writer)",1,1,1
"freemind.modes.filemode.FileMapModel.getLinkRegistry()",1,1,1
"freemind.modes.filemode.FileMapModel.getXml(Writer)",1,1,1
"freemind.modes.filemode.FileMapModel.isSaved()",1,1,1
"freemind.modes.filemode.FileMapModel.save(File)",1,1,1
"freemind.modes.filemode.FileMapModel.setLinkInclinationChanged()",1,1,1
"freemind.modes.filemode.FileMapModel.toString()",1,1,1
"freemind.modes.filemode.FileMode.FileMode()",1,1,1
"freemind.modes.filemode.FileMode.activate()",1,1,2
"freemind.modes.filemode.FileMode.createModeController()",1,1,1
"freemind.modes.filemode.FileMode.getController()",1,1,1
"freemind.modes.filemode.FileMode.getDefaultModeController()",1,1,1
"freemind.modes.filemode.FileMode.getToolbar()",1,1,1
"freemind.modes.filemode.FileMode.init(Controller)",1,1,1
"freemind.modes.filemode.FileMode.restore(String)",1,1,1
"freemind.modes.filemode.FileMode.toString()",1,1,1
"freemind.modes.filemode.FileNodeModel.FileNodeModel(File,MindMap)",1,1,1
"freemind.modes.filemode.FileNodeModel.childrenFolded()",3,4,4
"freemind.modes.filemode.FileNodeModel.childrenUnfolded()",2,6,7
"freemind.modes.filemode.FileNodeModel.getColor()",1,2,3
"freemind.modes.filemode.FileNodeModel.getFile()",1,1,1
"freemind.modes.filemode.FileNodeModel.getLink()",1,2,2
"freemind.modes.filemode.FileNodeModel.getStyle()",1,1,1
"freemind.modes.filemode.FileNodeModel.getText()",1,1,1
"freemind.modes.filemode.FileNodeModel.hasChildren()",1,3,3
"freemind.modes.filemode.FileNodeModel.isLeaf()",1,1,1
"freemind.modes.filemode.FileNodeModel.isWriteable()",1,1,1
"freemind.modes.filemode.FileNodeModel.toString()",1,1,2
"freemind.modes.filemode.FilePopupMenu.FilePopupMenu(FileController)",1,1,1
"freemind.modes.filemode.FilePopupMenu.add(Action,String)",1,1,1
"freemind.modes.filemode.FileToolBar.FileToolBar(FileController)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.EncryptedMindMapNode(Object,MindMap)",1,4,4
"freemind.modes.mindmapmode.EncryptedMindMapNode.checkPassword(StringBuffer)",6,6,6
"freemind.modes.mindmapmode.EncryptedMindMapNode.childrenFolded()",2,2,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.childrenUnfolded()",2,3,3
"freemind.modes.mindmapmode.EncryptedMindMapNode.decrypt(StringBuffer)",2,5,7
"freemind.modes.mindmapmode.EncryptedMindMapNode.decryptXml(String,StringBuffer)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.encrypt()",1,3,3
"freemind.modes.mindmapmode.EncryptedMindMapNode.encryptXml(StringBuffer)",1,2,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.equals(StringBuffer,StringBuffer)",4,2,4
"freemind.modes.mindmapmode.EncryptedMindMapNode.generateEncryptedContent()",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.getAdditionalInfo()",2,1,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.getChildCount()",2,2,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.getMindMapMapModel()",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.getNodeFromXml(String)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.hasChildren()",2,2,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.insert(MutableTreeNode,int)",2,2,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.isAccessible()",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.isFolded()",2,2,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.isStoringEncryptedContent()",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.isWriteable()",1,2,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.save(Writer,MindMapLinkRegistry,boolean,boolean)",4,4,4
"freemind.modes.mindmapmode.EncryptedMindMapNode.setAccessible(boolean)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setAdditionalInfo(String)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setFolded(boolean)",1,2,2
"freemind.modes.mindmapmode.EncryptedMindMapNode.setMap(MindMap)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setPassword(StringBuffer)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setShuttingDown(boolean)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.setStoringEncryptedContent(boolean)",1,1,1
"freemind.modes.mindmapmode.EncryptedMindMapNode.updateIcon()",1,2,2
"freemind.modes.mindmapmode.JAutoScrollBarPane.JAutoScrollBarPane(Component)",1,1,1
"freemind.modes.mindmapmode.JAutoScrollBarPane.doLayout()",1,7,7
"freemind.modes.mindmapmode.JAutoScrollBarPane.getPreferredSize()",1,2,2
"freemind.modes.mindmapmode.MindMapArrowLinkModel.MindMapArrowLinkModel(MindMapNode,MindMapNode,MapFeedback)",1,1,1
"freemind.modes.mindmapmode.MindMapArrowLinkModel.changeInclination(MapView,int,int,int,int)",1,4,9
"freemind.modes.mindmapmode.MindMapArrowLinkModel.changeInclination(int,int,NodeView,Point)",1,2,6
"freemind.modes.mindmapmode.MindMapArrowLinkModel.clone()",1,1,1
"freemind.modes.mindmapmode.MindMapArrowLinkModel.toString()",1,1,1
"freemind.modes.mindmapmode.MindMapCloudModel.MindMapCloudModel(MindMapNode,MapFeedback)",1,1,1
"freemind.modes.mindmapmode.MindMapController.DefaultMindMapNodeCreator.createNode(Object,MindMap)",1,1,1
"freemind.modes.mindmapmode.MindMapController.EditLongAction.EditLongAction()",1,1,1
"freemind.modes.mindmapmode.MindMapController.EditLongAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction.ExportBranchToHTMLAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction.actionPerformed(ActionEvent)",2,2,3
"freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction.ExportToHTMLAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction.actionPerformed(ActionEvent)",2,3,3
"freemind.modes.mindmapmode.MindMapController.FollowLinkAction.FollowLinkAction()",1,1,1
"freemind.modes.mindmapmode.MindMapController.FollowLinkAction.actionPerformed(ActionEvent)",1,3,3
"freemind.modes.mindmapmode.MindMapController.ImportBranchAction.ImportBranchAction()",1,1,1
"freemind.modes.mindmapmode.MindMapController.ImportBranchAction.actionPerformed(ActionEvent)",2,3,4
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction.ImportLinkedBranchAction()",1,1,1
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction.actionPerformed(ActionEvent)",2,5,5
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction.ImportLinkedBranchWithoutRootAction()",1,1,1
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction.actionPerformed(ActionEvent)",2,6,6
"freemind.modes.mindmapmode.MindMapController.LinkActionBase.LinkActionBase(String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.LinkActionBase.isEnabled(JMenuItem,Action)",4,2,4
"freemind.modes.mindmapmode.MindMapController.MapSourceChangeDialog.MapSourceChangeDialog()",1,1,1
"freemind.modes.mindmapmode.MindMapController.MapSourceChangeDialog.getReturnValue()",1,1,1
"freemind.modes.mindmapmode.MindMapController.MapSourceChangeDialog.run()",2,2,2
"freemind.modes.mindmapmode.MindMapController.MindMapController(Mode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.MindMapFilter.accept(File)",4,2,4
"freemind.modes.mindmapmode.MindMapController.MindMapFilter.getDescription()",1,1,1
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction.actionPerformedInternally(ActionEvent)",7,5,9
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction.interrupt()",1,3,4
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction.isRunning()",1,1,1
"freemind.modes.mindmapmode.MindMapController.OpenLinkDirectoryAction.OpenLinkDirectoryAction()",1,1,1
"freemind.modes.mindmapmode.MindMapController.OpenLinkDirectoryAction.actionPerformed(ActionEvent)",1,4,4
"freemind.modes.mindmapmode.MindMapController.SetImageByFileChooserAction.SetImageByFileChooserAction()",1,1,1
"freemind.modes.mindmapmode.MindMapController.SetImageByFileChooserAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.MindMapController.SetLinkByFileChooserAction.SetLinkByFileChooserAction()",1,1,1
"freemind.modes.mindmapmode.MindMapController.SetLinkByFileChooserAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.MindMapController.addAttribute(MindMapNode,Attribute)",1,1,1
"freemind.modes.mindmapmode.MindMapController.addHook(MindMapNode,List<MindMapNode>,String,Properties)",1,1,1
"freemind.modes.mindmapmode.MindMapController.addIcon(MindMapNode,MindIcon)",1,1,1
"freemind.modes.mindmapmode.MindMapController.addIconsToMenu(StructuredMenuHolder,String)",1,2,2
"freemind.modes.mindmapmode.MindMapController.addLink(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.addNew(MindMapNode,int,KeyEvent)",1,1,1
"freemind.modes.mindmapmode.MindMapController.addNewNode(MindMapNode,int,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.applyPattern(MindMapNode,Pattern)",1,1,1
"freemind.modes.mindmapmode.MindMapController.applyPattern(MindMapNode,String)",3,3,3
"freemind.modes.mindmapmode.MindMapController.blendNodeColor(MindMapNode)",1,1,2
"freemind.modes.mindmapmode.MindMapController.changeArrowsOfArrowLink(MindMapArrowLink,boolean,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.changeSelection(NodeView,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.clearNodeContents(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.close(boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.copy(MindMapNode,boolean)",1,1,2
"freemind.modes.mindmapmode.MindMapController.createIconActions()",5,5,6
"freemind.modes.mindmapmode.MindMapController.createModeControllerHook(String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.createNodeHook(String,MindMapNode)",4,3,4
"freemind.modes.mindmapmode.MindMapController.createNodeHookActions()",1,4,4
"freemind.modes.mindmapmode.MindMapController.createPatternSubMenu(StructuredMenuHolder,String)",1,2,2
"freemind.modes.mindmapmode.MindMapController.createPatterns(List<Pattern>)",1,4,4
"freemind.modes.mindmapmode.MindMapController.createStandardActions()",1,1,1
"freemind.modes.mindmapmode.MindMapController.cut()",1,1,1
"freemind.modes.mindmapmode.MindMapController.cut(List<MindMapNode>)",1,1,1
"freemind.modes.mindmapmode.MindMapController.deRegisterMouseWheelEventHandler(MouseWheelEventHandler)",1,1,1
"freemind.modes.mindmapmode.MindMapController.decorateDialog(JDialog,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.deleteNode(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.deregisterPlugin(MindMapControllerPlugin)",1,1,1
"freemind.modes.mindmapmode.MindMapController.doTransaction(String,ActionPair)",1,1,1
"freemind.modes.mindmapmode.MindMapController.doubleClick(MouseEvent)",2,7,8
"freemind.modes.mindmapmode.MindMapController.edit(KeyEvent,boolean,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.extendSelection(MouseEvent)",1,12,12
"freemind.modes.mindmapmode.MindMapController.getActionRegistry()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getActorFactory()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getClipboard()",1,2,2
"freemind.modes.mindmapmode.MindMapController.getClipboardContents()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getContent(String,int)",5,4,16
"freemind.modes.mindmapmode.MindMapController.getFileFilter()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getHookFactory()",1,1,2
"freemind.modes.mindmapmode.MindMapController.getLeftToolBar()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getLinkByFileChooser(FileFilter)",2,3,3
"freemind.modes.mindmapmode.MindMapController.getMindMapMapModel()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getModeToolBar()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getPatternReader()",1,3,3
"freemind.modes.mindmapmode.MindMapController.getPatternsList()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getPlugins()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getPopupForModel(Object)",2,5,9
"freemind.modes.mindmapmode.MindMapController.getPopupMenu()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getRegisteredMouseWheelEventHandler()",1,1,1
"freemind.modes.mindmapmode.MindMapController.getToolBar()",1,1,1
"freemind.modes.mindmapmode.MindMapController.increaseFontSize(MindMapNode,int)",1,2,2
"freemind.modes.mindmapmode.MindMapController.init()",1,2,2
"freemind.modes.mindmapmode.MindMapController.insertAttribute(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.mindmapmode.MindMapController.insertNodeInto(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.insertNodeInto(MindMapNode,MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.MindMapController.invokeHook(ModeControllerHook)",1,2,2
"freemind.modes.mindmapmode.MindMapController.isUndoAction()",1,2,2
"freemind.modes.mindmapmode.MindMapController.joinNodes(MindMapNode,List<MindMapNode>)",1,1,1
"freemind.modes.mindmapmode.MindMapController.loadInternally(URL,MapAdapter)",2,6,6
"freemind.modes.mindmapmode.MindMapController.loadPatternActions()",1,5,5
"freemind.modes.mindmapmode.MindMapController.loadPatterns(Reader)",1,1,1
"freemind.modes.mindmapmode.MindMapController.loadTree(File)",1,1,1
"freemind.modes.mindmapmode.MindMapController.loadTree(ReaderCreator)",1,1,1
"freemind.modes.mindmapmode.MindMapController.loadURL(String)",3,2,3
"freemind.modes.mindmapmode.MindMapController.mapSourceChanged(MindMap)",1,1,1
"freemind.modes.mindmapmode.MindMapController.marshall(XmlAction)",1,1,1
"freemind.modes.mindmapmode.MindMapController.moveNodePosition(MindMapNode,int,int,int)",1,1,1
"freemind.modes.mindmapmode.MindMapController.moveNodes(MindMapNode,List<MindMapNode>,int)",1,1,1
"freemind.modes.mindmapmode.MindMapController.newModel(ModeController)",1,1,1
"freemind.modes.mindmapmode.MindMapController.newNode(Object,MindMap)",1,1,2
"freemind.modes.mindmapmode.MindMapController.nodeChanged(MindMapNode)",1,3,3
"freemind.modes.mindmapmode.MindMapController.nodeStyleChanged(MindMapNode)",1,4,4
"freemind.modes.mindmapmode.MindMapController.obtainFocusForSelected()",1,1,1
"freemind.modes.mindmapmode.MindMapController.onFocusNode(NodeView)",1,1,1
"freemind.modes.mindmapmode.MindMapController.onLostFocusNode(NodeView)",1,1,1
"freemind.modes.mindmapmode.MindMapController.out(String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.paste(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.paste(Transferable,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.paste(Transferable,MindMapNode,boolean,boolean)",1,4,4
"freemind.modes.mindmapmode.MindMapController.plainClick(MouseEvent)",4,3,4
"freemind.modes.mindmapmode.MindMapController.processMenuCategory(StructuredMenuHolder,List<Object>,String)",1,9,11
"freemind.modes.mindmapmode.MindMapController.recursiveCallUpdateHooks(MindMapNode,MindMapNode)",1,8,8
"freemind.modes.mindmapmode.MindMapController.registerMouseWheelEventHandler(MouseWheelEventHandler)",1,1,1
"freemind.modes.mindmapmode.MindMapController.registerPlugin(MindMapControllerPlugin)",1,1,1
"freemind.modes.mindmapmode.MindMapController.removeAllIcons(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.removeAttribute(MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.MindMapController.removeHook(MindMapNode,List<MindMapNode>,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.removeLastIcon(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.removeNodeFromParent(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.removeReference(MindMapLink)",1,1,1
"freemind.modes.mindmapmode.MindMapController.repaintMap()",1,1,1
"freemind.modes.mindmapmode.MindMapController.saveHTML(List<MindMapNodeModel>,Writer)",1,1,1
"freemind.modes.mindmapmode.MindMapController.saveHTML(MindMapNodeModel,File)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setAllActions(boolean)",1,6,6
"freemind.modes.mindmapmode.MindMapController.setArrowLinkColor(MindMapLink,Color)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setArrowLinkEndPoints(MindMapArrowLink,Point,Point)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setAttribute(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setBold(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setClipboardContents(Transferable)",1,2,2
"freemind.modes.mindmapmode.MindMapController.setCloud(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setCloudColor(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setEdgeColor(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setEdgeStyle(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setEdgeWidth(MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setFolded(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setFontFamily(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setFontSize(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setImageByFileChooser()",1,2,2
"freemind.modes.mindmapmode.MindMapController.setItalic(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setLink(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setLinkByFileChooser()",1,2,2
"freemind.modes.mindmapmode.MindMapController.setNewNodeCreator(NewNodeCreator)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeBackgroundColor(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeColor(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeHookFactory(HookFactory)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeStyle(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setNodeText(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setNoteText(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.setStrikethrough(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapController.shutdownController()",1,2,2
"freemind.modes.mindmapmode.MindMapController.splitNode(MindMapNode,int,String)",3,2,4
"freemind.modes.mindmapmode.MindMapController.startupController()",1,3,3
"freemind.modes.mindmapmode.MindMapController.storeDialogPositions(JDialog,WindowConfigurationStorage,String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.toggleFolded()",1,1,1
"freemind.modes.mindmapmode.MindMapController.unMarshall(String)",1,1,1
"freemind.modes.mindmapmode.MindMapController.updateMenus(StructuredMenuHolder)",1,3,3
"freemind.modes.mindmapmode.MindMapController.updateMenusFromXml(InputStream)",1,2,2
"freemind.modes.mindmapmode.MindMapController.updateNode(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapController.updateNodeInformation()",1,2,2
"freemind.modes.mindmapmode.MindMapController.updateToolbar(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapEdgeModel.MindMapEdgeModel(MindMapNode,MapFeedback)",1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.MindMapHTMLWriter(Writer)",1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.convertSpecialChar(char)",2,2,9
"freemind.modes.mindmapmode.MindMapHTMLWriter.fontStyle(MindMapNodeModel)",1,5,8
"freemind.modes.mindmapmode.MindMapHTMLWriter.getProperty(String)",1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.hasHtml(MindMapNodeModel)",1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.isHeading(MindMapNodeModel,int)",1,4,4
"freemind.modes.mindmapmode.MindMapHTMLWriter.saveHTML(List<MindMapNodeModel>)",1,2,2
"freemind.modes.mindmapmode.MindMapHTMLWriter.saveHTML(MindMapNodeModel)",1,4,4
"freemind.modes.mindmapmode.MindMapHTMLWriter.saveHTML(MindMapNodeModel,String,int,boolean,boolean,int)",4,28,32
"freemind.modes.mindmapmode.MindMapHTMLWriter.saveHTML_escapeUnicodeAndSpecialCharacters(String)",2,5,10
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeBodyWithFolding(MindMapNodeModel)",1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeFoldingButtons(String)",1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeIcons(MindMapNodeModel)",1,2,2
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeJavaScript()",1,1,1
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeModelContent(MindMapNodeModel)",1,3,3
"freemind.modes.mindmapmode.MindMapHTMLWriter.writeStyle()",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.DoAutomaticSave.DoAutomaticSave(MindMapMapModel,int,boolean,File)",1,1,2
"freemind.modes.mindmapmode.MindMapMapModel.DoAutomaticSave.run()",4,8,10
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.popLockingUserOfOldLock()",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.releaseLock()",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.releaseTimer()",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.run()",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager.tryToLock(File)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.getSemaphoreFile(File)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.popLockingUserOfOldLock()",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.releaseLock()",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.releaseTimer()",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.run()",2,3,3
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.tryToLock(File)",3,3,5
"freemind.modes.mindmapmode.MindMapMapModel.LockManager.writeSemaphoreFile(File)",2,3,5
"freemind.modes.mindmapmode.MindMapMapModel.MindMapMapModel(MapFeedback)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.MindMapMapModel(MindMapNodeModel,MapFeedback)",1,2,3
"freemind.modes.mindmapmode.MindMapMapModel.changeNode(MindMapNode,String)",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.createArrowLinkAdapter(NodeAdapter,NodeAdapter)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createArrowLinkTarget(NodeAdapter,NodeAdapter)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createCloudAdapter(NodeAdapter)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createEdgeAdapter(NodeAdapter)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createEncryptedNode(String)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.createNodeAdapter(MindMap,String)",2,2,3
"freemind.modes.mindmapmode.MindMapMapModel.destroy()",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.getAsHTML(List)",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.getAsPlainText(List)",1,3,3
"freemind.modes.mindmapmode.MindMapMapModel.getAsRTF(List)",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.getFilteredXml(Writer)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.getLinkRegistry()",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.getRestorable()",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.getXml(Writer)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.getXml(Writer,boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.getXml(Writer,boolean,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.MindMapMapModel.save(File)",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.saveInternal(File,boolean)",2,4,5
"freemind.modes.mindmapmode.MindMapMapModel.saveRTF(List<MindMapNodeModel>,BufferedWriter)",1,5,5
"freemind.modes.mindmapmode.MindMapMapModel.saveTXT(MindMapNodeModel,File)",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.scheduleTimerForAutomaticSaving()",3,4,5
"freemind.modes.mindmapmode.MindMapMapModel.toString()",1,2,2
"freemind.modes.mindmapmode.MindMapMapModel.tryToLock(File)",1,2,3
"freemind.modes.mindmapmode.MindMapMode.MindMapMode()",1,1,1
"freemind.modes.mindmapmode.MindMapMode.activate()",1,2,2
"freemind.modes.mindmapmode.MindMapMode.createModeController()",1,1,1
"freemind.modes.mindmapmode.MindMapMode.getController()",1,1,1
"freemind.modes.mindmapmode.MindMapMode.getDefaultModeController()",1,1,1
"freemind.modes.mindmapmode.MindMapMode.init(Controller)",1,2,2
"freemind.modes.mindmapmode.MindMapMode.restore(String)",1,1,1
"freemind.modes.mindmapmode.MindMapMode.toString()",1,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.MindMapNodeModel(MindMap)",1,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.MindMapNodeModel(Object,MindMap)",1,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.collectColors(HashSet<Color>)",1,3,3
"freemind.modes.mindmapmode.MindMapNodeModel.getPlainTextContent()",1,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.isWriteable()",1,1,1
"freemind.modes.mindmapmode.MindMapNodeModel.saveChildrenRTF(Writer,int,HashMap<Color, Integer>)",1,3,3
"freemind.modes.mindmapmode.MindMapNodeModel.saveChildrenText(Writer,int)",1,3,3
"freemind.modes.mindmapmode.MindMapNodeModel.saveRFT_escapeUnicodeAndSpecialCharacters(String)",2,4,8
"freemind.modes.mindmapmode.MindMapNodeModel.saveRTF(Writer,int,HashMap<Color, Integer>)",1,7,11
"freemind.modes.mindmapmode.MindMapNodeModel.saveTXT(Writer,int)",1,5,5
"freemind.modes.mindmapmode.MindMapPopupMenu.MindMapPopupMenu(MindMapController)",1,2,2
"freemind.modes.mindmapmode.MindMapPopupMenu.update(StructuredMenuHolder)",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.FreeMindComboBox.FreeMindComboBox(String[])",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.FreeMindComboBox.getMaximumSize()",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.MindMapToolBar(MindMapController)",6,4,9
"freemind.modes.mindmapmode.MindMapToolBar.addIcon(String)",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.getController()",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.getItemForZoom(float)",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.getLeftToolBar()",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.selectColor(Color)",3,3,4
"freemind.modes.mindmapmode.MindMapToolBar.selectFontName(String)",2,1,2
"freemind.modes.mindmapmode.MindMapToolBar.selectFontSize(String)",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.setAllActions(boolean)",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.setFontColorByItem(ColorPair)",1,2,2
"freemind.modes.mindmapmode.MindMapToolBar.setZoom(float)",3,3,3
"freemind.modes.mindmapmode.MindMapToolBar.setZoomByItem(Object)",2,1,2
"freemind.modes.mindmapmode.MindMapToolBar.shutdown()",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.startup()",1,1,1
"freemind.modes.mindmapmode.MindMapToolBar.update(StructuredMenuHolder)",1,2,2
"freemind.modes.mindmapmode.actions.AddArrowLinkAction.AddArrowLinkAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.AddArrowLinkAction.actionPerformed(ActionEvent)",2,5,5
"freemind.modes.mindmapmode.actions.AddArrowLinkAction.isEnabled(JMenuItem,Action)",1,3,3
"freemind.modes.mindmapmode.actions.AddLocalLinkAction.AddLocalLinkAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.AddLocalLinkAction.actionPerformed(ActionEvent)",2,5,5
"freemind.modes.mindmapmode.actions.AddLocalLinkAction.isEnabled(JMenuItem,Action)",1,3,3
"freemind.modes.mindmapmode.actions.ApplyPatternAction.ApplyPatternAction(MindMapController,Pattern)",1,1,1
"freemind.modes.mindmapmode.actions.ApplyPatternAction.apply(MindMapMapModel,MindMapNodeModel)",1,1,1
"freemind.modes.mindmapmode.actions.ApplyPatternAction.edgeWidthIntToString(int)",3,1,3
"freemind.modes.mindmapmode.actions.ApplyPatternAction.getPattern()",1,1,1
"freemind.modes.mindmapmode.actions.BoldAction.BoldAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.BoldAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.modes.mindmapmode.actions.ChangeArrowsInArrowLinkAction.ChangeArrowsInArrowLinkAction(MindMapController,String,String,MindMapArrowLinkModel,boolean,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.ChangeArrowsInArrowLinkAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.CloudAction.CloudAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.CloudAction.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.CloudAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.modes.mindmapmode.actions.CloudColorAction.CloudColorAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.CloudColorAction.actionPerformed(ActionEvent)",2,3,4
"freemind.modes.mindmapmode.actions.CloudColorAction.isEnabled(JMenuItem,Action)",1,4,4
"freemind.modes.mindmapmode.actions.ColorArrowLinkAction.ColorArrowLinkAction(MindMapController,MindMapArrowLinkModel)",1,1,1
"freemind.modes.mindmapmode.actions.ColorArrowLinkAction.actionPerformed(ActionEvent)",2,1,2
"freemind.modes.mindmapmode.actions.CopyAction.CopyAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.CopyAction.actionPerformed(ActionEvent)",1,3,3
"freemind.modes.mindmapmode.actions.CopySingleAction.CopySingleAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.CopySingleAction.actionPerformed(ActionEvent)",1,3,3
"freemind.modes.mindmapmode.actions.CutAction.CutAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.CutAction.actionPerformed(ActionEvent)",3,2,3
"freemind.modes.mindmapmode.actions.DeleteChildAction.DeleteChildAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.DeleteChildAction.actionPerformed(ActionEvent)",4,3,4
"freemind.modes.mindmapmode.actions.DeleteChildAction.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.EdgeColorAction.EdgeColorAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.EdgeColorAction.actionPerformed(ActionEvent)",2,2,3
"freemind.modes.mindmapmode.actions.EdgeStyleAction.EdgeStyleAction(MindMapController,String)",1,1,1
"freemind.modes.mindmapmode.actions.EdgeStyleAction.getActionPair(MindMapNodeModel)",1,1,1
"freemind.modes.mindmapmode.actions.EdgeStyleAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.modes.mindmapmode.actions.EdgeWidthAction.EdgeWidthAction(MindMapController,int)",1,1,1
"freemind.modes.mindmapmode.actions.EdgeWidthAction.getActionPair(MindMapNodeModel)",1,1,1
"freemind.modes.mindmapmode.actions.EdgeWidthAction.getWidth()",1,1,1
"freemind.modes.mindmapmode.actions.EdgeWidthAction.getWidthTitle(MindMapController,int)",1,3,3
"freemind.modes.mindmapmode.actions.EdgeWidthAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.modes.mindmapmode.actions.EditAction.EditAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.EditAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.EditAction.edit(KeyEvent,boolean,boolean)",1,5,6
"freemind.modes.mindmapmode.actions.EditAction.edit(NodeView,NodeView,KeyEvent,boolean,boolean,boolean)",5,12,19
"freemind.modes.mindmapmode.actions.EditAction.setHtmlText(NodeView,String)",1,1,1
"freemind.modes.mindmapmode.actions.EditAction.stopEditing()",1,2,2
"freemind.modes.mindmapmode.actions.ExportBranchAction.ExportBranchAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.ExportBranchAction.actionPerformed(ActionEvent)",7,11,13
"freemind.modes.mindmapmode.actions.FontFamilyAction.FontFamilyAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.FontFamilyAction.actionPerformed(String)",1,1,1
"freemind.modes.mindmapmode.actions.FontFamilyAction.getActionPair(MindMapNodeModel)",1,1,1
"freemind.modes.mindmapmode.actions.FontSizeAction.FontSizeAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.FontSizeAction.actionPerformed(String)",1,1,1
"freemind.modes.mindmapmode.actions.FontSizeAction.getActionPair(MindMapNodeModel)",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.IconAction(MindMapController,MindIcon,RemoveIconAction)",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.actionPerformed(ActionEvent)",5,7,7
"freemind.modes.mindmapmode.actions.IconAction.addLastIcon()",1,2,2
"freemind.modes.mindmapmode.actions.IconAction.createAddIconAction(MindMapNode,MindIcon,int)",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.getAddIconActor()",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.getDescription()",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.getIcon()",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.getKeyStroke()",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.getKeystrokeResourceName()",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.getMindIcon()",1,1,1
"freemind.modes.mindmapmode.actions.IconAction.removeAllIcons()",1,3,3
"freemind.modes.mindmapmode.actions.IconAction.removeIcon(boolean)",1,2,2
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction.ImportExplorerFavoritesAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction.actionPerformed(ActionEvent)",1,2,2
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction.addNode(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction.importExplorerFavorites(File,MindMapNode,boolean)",6,12,12
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.ImportFolderStructureAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.actionPerformed(ActionEvent)",1,3,3
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.addNode(MindMapNode,String,String)",1,1,1
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.getFrame()",1,1,1
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction.importFolderStructure(File,MindMapNode,boolean)",1,7,7
"freemind.modes.mindmapmode.actions.ItalicAction.ItalicAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.ItalicAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.modes.mindmapmode.actions.JoinNodesAction.JoinNodesAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.JoinNodesAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.JoinNodesAction.addContent(String,boolean,String,boolean)",1,6,8
"freemind.modes.mindmapmode.actions.JoinNodesAction.joinNodes(MindMapNode,List<MindMapNode>)",3,5,6
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction.MindMapControllerHookAction(String,MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction.actionPerformed(ActionEvent)",2,1,2
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction.getHookName()",1,1,1
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction.isEnabled(JMenuItem,Action)",1,1,1
"freemind.modes.mindmapmode.actions.MindmapAction.MindmapAction(String,Icon,MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.MindmapAction.MindmapAction(String,MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.MindmapAction.MindmapAction(String,String,MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.MindmapAction.addActor(ActorXml)",1,1,1
"freemind.modes.mindmapmode.actions.MindmapAction.getMindMapController()",1,1,1
"freemind.modes.mindmapmode.actions.MoveNodeAction.MoveNodeAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.NewChildAction.NewChildAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.NewChildAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.NewChildAction.addNew(MindMapNode,int,KeyEvent)",2,8,10
"freemind.modes.mindmapmode.actions.NewChildAction.addNewNode(MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.actions.NewChildAction.getModeController()",1,1,1
"freemind.modes.mindmapmode.actions.NewPreviousSiblingAction.NewPreviousSiblingAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.NewPreviousSiblingAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.NewSiblingAction.NewSiblingAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.NewSiblingAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.NodeBackgroundColorAction.NodeBackgroundColorAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.NodeBackgroundColorAction.RemoveNodeBackgroundColorAction.RemoveNodeBackgroundColorAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.NodeBackgroundColorAction.actionPerformed(ActionEvent)",2,2,3
"freemind.modes.mindmapmode.actions.NodeColorAction.NodeColorAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.NodeColorAction.actionPerformed(ActionEvent)",2,2,3
"freemind.modes.mindmapmode.actions.NodeColorBlendAction.NodeColorBlendAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.NodeGeneralAction(MindMapController,String,String)",1,4,4
"freemind.modes.mindmapmode.actions.NodeGeneralAction.NodeGeneralAction(MindMapController,String,String,NodeActorXml)",1,1,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.NodeGeneralAction(MindMapController,String,String,SingleNodeOperation)",1,1,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.getActionPair(MindMapNodeModel)",3,3,3
"freemind.modes.mindmapmode.actions.NodeGeneralAction.setDoActionClass(Class<?>)",1,1,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.setName(String)",1,2,2
"freemind.modes.mindmapmode.actions.NodeGeneralAction.setSingleNodeOperation(SingleNodeOperation)",1,1,1
"freemind.modes.mindmapmode.actions.NodeGeneralAction.xmlActionPerformed(ActionEvent)",3,5,6
"freemind.modes.mindmapmode.actions.NodeHookAction.NodeHookAction(String,MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.NodeHookAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.getController()",1,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.getHookFactory()",1,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.getHookName()",1,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.getInstanciationMethod(String)",1,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.invoke(MindMapNode,List<MindMapNode>)",1,1,1
"freemind.modes.mindmapmode.actions.NodeHookAction.isEnabled(JMenuItem,Action)",4,4,5
"freemind.modes.mindmapmode.actions.NodeHookAction.isSelected(JMenuItem,Action)",3,3,3
"freemind.modes.mindmapmode.actions.NodeStyleAction.NodeStyleAction(MindMapController,String)",1,1,1
"freemind.modes.mindmapmode.actions.NodeStyleAction.getActionPair(MindMapNodeModel)",1,1,1
"freemind.modes.mindmapmode.actions.NodeStyleAction.isSelected(JMenuItem,Action)",2,1,2
"freemind.modes.mindmapmode.actions.NodeUpAction.NodeUpAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.NodeUpAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.PasteAction.PasteAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.PasteAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.PasteAction.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.PasteAsPlainTextAction.PasteAsPlainTextAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.PasteAsPlainTextAction.actionPerformed(ActionEvent)",1,4,4
"freemind.modes.mindmapmode.actions.RedoAction.RedoAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.RedoAction.informUndoPartner(ActionPair)",1,1,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.RemoveAllIconsAction(MindMapController,IconAction)",1,1,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.getDescription()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.getIcon()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.getKeyStroke()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction.getKeystrokeResourceName()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction.RemoveArrowLinkAction(MindMapController,MindMapArrowLinkModel)",1,1,1
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction.getArrowLink()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction.setArrowLink(MindMapArrowLinkModel)",1,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.RemoveIconAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.getDescription()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.getIcon()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.getKeyStroke()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.getKeystrokeResourceName()",1,1,1
"freemind.modes.mindmapmode.actions.RemoveIconAction.setIconAction(IconAction)",1,1,1
"freemind.modes.mindmapmode.actions.RevertAction.RevertAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.RevertAction.actionPerformed(ActionEvent)",2,3,3
"freemind.modes.mindmapmode.actions.SelectAllAction.SelectAllAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.SelectBranchAction.SelectBranchAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.SelectBranchAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.SetLinkByTextFieldAction.SetLinkByTextFieldAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.SetLinkByTextFieldAction.actionPerformed(ActionEvent)",1,2,3
"freemind.modes.mindmapmode.actions.StrikethroughAction.StrikethroughAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.StrikethroughAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.modes.mindmapmode.actions.ToggleChildrenFoldedAction.ToggleChildrenFoldedAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.ToggleChildrenFoldedAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.ToggleFoldedAction.ToggleFoldedAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.ToggleFoldedAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.UnderlinedAction.UnderlinedAction(MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.UnderlinedAction.isSelected(JMenuItem,Action)",1,1,1
"freemind.modes.mindmapmode.actions.UndoAction.UndoAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.UndoAction.UndoAction(MindMapController,String,Icon,MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.UndoAction.add(ActionPair)",1,7,8
"freemind.modes.mindmapmode.actions.UndoAction.clear()",1,1,1
"freemind.modes.mindmapmode.actions.UndoAction.informUndoPartner(ActionPair)",1,1,1
"freemind.modes.mindmapmode.actions.UndoAction.isUndoAction()",1,1,1
"freemind.modes.mindmapmode.actions.UndoAction.print()",1,2,2
"freemind.modes.mindmapmode.actions.UndoAction.setEnabled(boolean)",1,2,2
"freemind.modes.mindmapmode.actions.UndoAction.startActionFrame()",1,3,3
"freemind.modes.mindmapmode.actions.UndoAction.undoDoAction(ActionPair)",1,1,1
"freemind.modes.mindmapmode.actions.UndoAction.xmlActionPerformed(ActionEvent)",1,3,3
"freemind.modes.mindmapmode.actions.UsePlainTextAction.UsePlainTextAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.UseRichFormattingAction.UseRichFormattingAction(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.AbstractXmlAction(String,Icon,MindMapController)",1,1,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.addActor(ActorXml)",1,2,2
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.getActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.getMindMapController()",1,1,1
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction.getShortDescription()",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.ActionPair(XmlAction,XmlAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.getDoAction()",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.getUndoAction()",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.reverse()",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.setDoAction(XmlAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionPair.setUndoAction(XmlAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.ActionRegistry()",1,2,2
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.deregisterActor(Class<?>)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.deregisterFilter(ActionFilter)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.deregisterHandler(ActionHandler)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.doTransaction(String,ActionPair)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.endTransaction(String)",1,2,2
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.executeAction(ActionPair)",2,6,7
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.getActor(Class<?>)",2,2,2
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.getActor(XmlAction)",3,3,3
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.registerActor(ActorXml,Class<?>)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.registerFilter(ActionFilter)",6,5,6
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.registerHandler(ActionHandler)",1,2,2
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.registerUndoHandler(UndoActionHandler)",1,1,1
"freemind.modes.mindmapmode.actions.xml.ActionRegistry.startTransaction(String)",1,2,2
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler.DefaultActionHandler(ActionRegistry)",1,1,1
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler.endTransaction(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler.executeAction(XmlAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler.startTransaction(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler.PrintActionHandler(MindMapController)",1,2,2
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler.endTransaction(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler.executeAction(XmlAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler.startTransaction(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler.UndoActionHandler(MindMapController,UndoAction,RedoAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler.endTransaction(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler.executeAction(ActionPair)",1,2,2
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler.startTransaction(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.AddArrowLinkActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.act(XmlAction)",3,9,9
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.addLink(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.createAddArrowLinkXmlAction(MindMapNode,MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.getActionPair(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.AddAttributeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.addAttribute(MindMapNode,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.getActionPair(MindMapNode,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.getAddAttributeAction(MindMapNode,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.AddHookActor(ExtendedMapFeedback)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.act(XmlAction)",1,4,4
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.addHook(MindMapNode,List<MindMapNode>,String,Properties)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.createHookNodeAction(MindMapNode,List<MindMapNode>,String,Properties)",1,4,4
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.createHookNodeUndoAction(MindMapNode,List<MindMapNode>,String)",5,9,9
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.finishInvocation(MindMapNode,List<MindMapNode>,MindMapNode,Collection<MindMapNode>)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getHookFactory()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getInstanciationMethod(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getNodeView(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.getViewAbstraction()",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.invoke(MindMapNode,List<MindMapNode>,String,XMLElement)",5,9,10
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor.removeHook(MindMapNode,List<MindMapNode>,String)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.AddIconActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.addIcon(MindMapNode,MindIcon)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.createAddIconAction(MindMapNode,MindIcon,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getAddIconActionPair(MindMapNode,MindIcon,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getAddLastIconActionPair(MindMapNode,MindIcon)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getRemoveIconActionPair(MindMapNode,MindIcon,boolean)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getRemoveIconActionPair(MindMapNode,MindIcon,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.getToggleIconActionPair(MindMapNode,MindIcon)",2,2,2
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.removeIcon(MindMapNode,MindIcon,boolean)",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor.toggleIcon(MindMapNode,MindIcon)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.BoldNodeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.apply(MindMap,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.getActionPair(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.setBold(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor.toggleBold(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.ChangeArrowLinkEndPointsActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.createArrowLinkPointXmlAction(MindMapArrowLink,Point,Point)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.getActionPair(MindMapArrowLink,Point,Point)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor.setArrowLinkEndPoints(MindMapArrowLink,Point,Point)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.ChangeArrowsInArrowLinkActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.changeArrowsOfArrowLink(MindMapArrowLink,boolean,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.createArrowLinkArrowXmlAction(MindMapArrowLink,String,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.createArrowLinkArrowXmlAction(MindMapArrowLink,boolean,boolean)",1,1,3
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.getActionPair(MindMapArrowLink,boolean,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.ChangeNoteTextActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.createEditNoteToNodeAction(MindMapNode,String)",1,4,4
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor.setNoteText(MindMapNode,String)",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.CloudActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.act(XmlAction)",5,5,6
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.apply(MindMap,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.createAddCloudXmlAction(MindMapNode,boolean,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.getActionPair(MindMapNode,boolean)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor.setCloud(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.CloudColorActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.act(XmlAction)",1,5,5
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.createCloudColorXmlAction(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor.setCloudColor(MindMapNode,Color)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.ColorArrowLinkActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.createArrowLinkColorXmlAction(MindMapLink,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.getActionPair(MindMapLink,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor.setArrowLinkColor(MindMapLink,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CompoundActor.CompoundActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CompoundActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.CompoundActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.CutActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.act(XmlAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.cut(List<MindMapNode>)",3,3,4
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.getCutNodeAction(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.CutActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.DeleteChildActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.act(XmlAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.deleteNode(MindMapNode)",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.deleteWithoutUndo(MindMapNode)",2,5,6
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.getDeleteNodeAction(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor.removeHooks(MindMapNode)",3,3,4
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.EdgeColorActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.createEdgeColorFormatAction(MindMapNode,Color)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor.setEdgeColor(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.EdgeStyleActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.act(XmlAction)",1,4,4
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.createNodeStyleFormatAction(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.getActionPair(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.getStyle(MindMapNode)",1,1,2
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor.setEdgeStyle(MindMapNode,String)",6,3,6
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.EdgeWidthActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.createEdgeWidthFormatAction(MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.getActionPair(MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.getWidth(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor.setEdgeWidth(MindMapNode,int)",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.EditActor.EditActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EditActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.EditActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.EditActor.setNodeText(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.FontFamilyActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.createFontNodeAction(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.getActionPair(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor.setFontFamily(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.FontSizeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.act(XmlAction)",2,3,4
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.createFontSizeNodeAction(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.getActionPair(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor.setFontSize(MindMapNode,String)",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.InsertAttributeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.getActionPair(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.getInsertAttributeAction(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor.insertAttribute(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.ItalicNodeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.apply(MindMap,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.getActionPair(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.setItalic(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor.toggleItalic(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.MoveNodeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.apply(MindMap,MindMapNode)",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.getActionPair(MindMapNode,int,int,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.moveNode(MindMapNode,int,int,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor.moveNodeTo(MindMapNode,int,int,int)",2,3,4
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.NewChildActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.act(XmlAction)",2,2,3
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.addNewNode(MindMapNode,int,boolean)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.getAddNodeAction(MindMapNode,int,String,boolean)",1,1,2
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor.getLinkRegistry()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.NodeBackgroundColorActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.createNodeBackgroundColorFormatAction(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor.setNodeBackgroundColor(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.NodeColorActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.createNodeColorFormatAction(MindMapNode,Color)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor.setNodeColor(MindMapNode,Color)",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.NodeStyleActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.act(XmlAction)",1,4,4
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.createNodeStyleFormatAction(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.getActionPair(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor.setStyle(MindMapNode,String)",4,4,4
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.NodeUpActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor._moveNodes(MindMapNode,List<MindMapNode>,int)",6,7,8
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.createMoveNodesAction(MindMapNode,List<MindMapNode>,int)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.getSortedSiblings(MindMapNode)",1,2,4
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.moveNodeTo(MindMapNode,MindMapNode,int)",1,1,3
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor.moveNodes(MindMapNode,List<MindMapNode>,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.NodeXmlActorAdapter.NodeXmlActorAdapter(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler.DirectHtmlFlavorHandler()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler.getDataFlavor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",1,5,5
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler.setNodeCreator(NodeCreator)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.FileListFlavorHandler.getDataFlavor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.FileListFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.ImageFlavorHandler.getDataFlavor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.ImageFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",2,2,3
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.MindMapNodesFlavorHandler.getDataFlavor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.MindMapNodesFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",1,7,8
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.NodeCoordinate.NodeCoordinate(MindMapNode,boolean)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.NodeCoordinate.NodeCoordinate(MindMapNode,boolean,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.NodeCoordinate.getNode()",2,2,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.PasteActor(ExtendedMapFeedback)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.StringFlavorHandler.getDataFlavor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.StringFlavorHandler.paste(Object,MindMapNode,boolean,boolean,Transferable)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor._paste(Transferable,MindMapNode,boolean,boolean)",4,5,6
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.act(XmlAction)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.determineAmountOfNewNodes(Transferable)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.determineAmountOfNewTextNodes(Transferable)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getFlavorHandlers()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getPasteNodeAction(Transferable,NodeCoordinate,UndoPasteNodeAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getTransferable(TransferableContent)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.getTransferableContent(Transferable,UndoPasteNodeAction)",1,17,23
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.insertNodeInto(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.insertNodeInto(MindMapNodeModel,MindMapNode,boolean,boolean,boolean)",1,4,4
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.insertNodeInto(MindMapNodeModel,MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.paste(MindMapNode,MindMapNode)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.paste(Transferable,MindMapNode,boolean,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.pasteStringWithoutRedisplay(Transferable,MindMapNode,boolean,boolean)",5,16,23
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.pasteXMLWithoutRedisplay(String,MindMapNode,boolean,boolean,boolean,HashMap<String, NodeAdapter>)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.processUnfinishedLinksInHooks(MindMapNode)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.setWaitingCursor(boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.RemoveAllIconsActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.apply(MindMap,MindMapNode)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.createRemoveAllIconsXmlAction(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor.removeAllIcons(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.RemoveArrowLinkActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.act(XmlAction)",3,3,3
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.createAddArrowLinkXmlAction(MindMapLink)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.createRemoveArrowLinkXmlAction(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.getActionPair(MindMapLink)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor.removeReference(MindMapLink)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.RemoveAttributeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.getActionPair(MindMapNode,int)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.getRemoveAttributeAction(MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor.removeAttribute(MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.RemoveIconActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.apply(MindMap,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.apply(MindMapNode)",2,1,2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.createRemoveIconXmlAction(MindMapNode,int)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor.removeLastIcon(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.RevertActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.act(XmlAction)",1,5,5
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.createRevertXmlAction(File)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.createRevertXmlAction(MindMap,String,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.createRevertXmlAction(String,String,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.openXmlInsteadOfMap(String)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor.revertMap(MindMap,File)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.SetAttributeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.getActionPair(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.getSetAttributeAction(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor.setAttribute(MindMapNode,int,Attribute)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.SetLinkActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.createAddLinkXmlAction(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.getActionPair(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor.setLink(MindMapNode,String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.StrikethroughNodeActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.apply(MindMap,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.getActionPair(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.setStrikethrough(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor.toggleStrikethrough(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.ToggleFoldedActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.act(XmlAction)",3,5,6
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.createFoldAction(ListIterator<MindMapNode>,boolean,boolean)",1,4,4
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.createSingleFoldAction(boolean,MindMapNode,boolean)",1,7,7
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.setFolded(MindMapNode,boolean)",2,1,3
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor.toggleFolded(ListIterator)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.UnderlineActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.act(XmlAction)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.apply(MindMap,MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.getActionPair(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.setUnderlined(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor.toggleUnderlined(MindMapNode,boolean)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UndoPasteActor.UndoPasteActor(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.UndoPasteActor.act(XmlAction)",1,3,3
"freemind.modes.mindmapmode.actions.xml.actors.UndoPasteActor.getDoActionClass()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.XmlActorAdapter(ExtendedMapFeedback)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.addActor(ActorXml)",1,2,2
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.execute(ActionPair)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getExMapFeedback()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getLinkRegistry()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getModeController()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getNodeFromID(String)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getNodeID(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getSelected()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getViewFeedback()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter.getXmlActorFactory()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.XmlActorFactory(ExtendedMapFeedback)",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getAddArrowLinkActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getAddAttributeActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getAddHookActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getAddIconActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getBoldActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getChangeArrowLinkEndPointsActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getChangeArrowsInArrowLinkActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getChangeNoteTextActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getCloudActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getCloudColorActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getColorArrowLinkActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getCompoundActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getCutActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getDeleteChildActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getEdgeColorActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getEdgeStyleActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getEdgeWidthActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getEditActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getFontFamilyActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getFontSizeActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getInsertAttributeActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getItalicActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getMoveNodeActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNewChildActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNodeBackgroundColorActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNodeColorActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNodeStyleActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getNodeUpActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getPasteActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRemoveAllIconsActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRemoveArrowLinkActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRemoveAttributeActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRemoveIconActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getRevertActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getSetAttributeActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getSetLinkActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getStrikethroughActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getToggleFoldedActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getUnderlineActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.getUndoPasteActor()",1,1,1
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory.setStrikethroughActor(StrikethroughNodeActor)",1,1,1
"freemind.modes.mindmapmode.dialogs.IntegerComboProperty.IntegerComboProperty(String,String,String[],Vector<String>)",1,1,1
"freemind.modes.mindmapmode.dialogs.IntegerComboProperty.setValue(String)",4,5,6
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.EdgeWidthBackTransformer.transform(String)",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.EdgeWidthTransformer.transform(String)",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.IdentityTransformer.transform(String)",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.StylePatternFrame(TextTranslator,MindMapController,StylePatternFrameType)",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.StylePatternFrameType.StylePatternFrameType()",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.addListeners()",1,4,4
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getControls()",1,5,5
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getEdgeWidthTransformation()",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getPatternNames()",1,2,2
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getPatternResult(PatternPropertyBase,ThreeCheckBoxProperty,PropertyBean)",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getPatternResult(PatternPropertyBase,ThreeCheckBoxProperty,PropertyBean,ValueTransformator)",4,1,4
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getResultPattern()",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getResultPattern(Pattern)",1,2,2
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.getText(String)",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.init()",1,2,2
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.propertyChange(PropertyChangeEvent)",2,2,2
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.setPattern(Pattern)",1,4,4
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.setPatternControls(PatternPropertyBase,PropertyBean,PropertyBean,String)",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.setPatternControls(PatternPropertyBase,PropertyBean,PropertyBean,String,ValueTransformator)",3,3,3
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.setPatternList(List<Pattern>)",1,1,1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.transformEdgeWidth(String)",4,2,4
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.transformStringToWidth(String)",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookAdapter.MindMapHookAdapter()",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookAdapter.addAccelerator(JMenuItem,String)",1,2,2
"freemind.modes.mindmapmode.hooks.MindMapHookAdapter.getMindMapController()",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.MindMapHookFactory()",1,2,2
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.actualizePlugins()",4,8,8
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.createJavaHook(String,HookDescriptorPluginAction)",1,3,3
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.createModeControllerHook(String)",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.createNodeHook(String)",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.decorateAction(String,AbstractAction)",1,5,5
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.decorateHook(String,HookDescriptorPluginAction,MindMapHook)",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getHookDescriptor(String)",2,1,3
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getHookMenuPositions(String)",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getInstanciationMethod(String)",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getMenuItem(String,AbstractAction)",2,1,2
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getPluginBaseClass(HookDescriptorPluginAction)",1,2,2
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getPluginBaseClass(String)",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getPossibleModeControllerHooks()",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getPossibleNodeHooks()",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.getRegistrations()",3,4,6
"freemind.modes.mindmapmode.hooks.MindMapHookFactory.searchFor(Class,Class<?>)",1,6,6
"freemind.modes.mindmapmode.hooks.MindMapNodeHookAdapter.MindMapNodeHookAdapter()",1,1,1
"freemind.modes.mindmapmode.hooks.MindMapNodeHookAdapter.getMindMapController()",1,1,1
"freemind.modes.mindmapmode.hooks.PermanentMindMapNodeHookAdapter.PermanentMindMapNodeHookAdapter()",1,1,1
"freemind.modes.mindmapmode.hooks.PermanentMindMapNodeHookAdapter.getMindMapController()",1,1,1
"freemind.modes.mindmapmode.hooks.PermanentMindMapNodeHookAdapter.propagate(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager.MindMapMouseMotionManager(MindMapController)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager.mouseDragged(MouseEvent)",1,3,3
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager.mousePressed(MouseEvent)",1,4,4
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager.mouseReleased(MouseEvent)",1,2,2
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.MindMapNodeDropListener(MindMapController)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dragEnter(DropTargetDragEvent)",1,2,2
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dragExit(DropTargetEvent)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dragOver(DropTargetDragEvent)",1,2,2
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dragScroll(DropTargetDragEvent)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.drop(DropTargetDropEvent)",8,17,21
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.dropActionChanged(DropTargetDragEvent)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.isDragAcceptable(DropTargetDragEvent)",3,1,3
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener.isDropAcceptable(DropTargetDropEvent)",2,2,3
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.MindMapNodeMotionListener(MindMapController)",1,2,2
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getDragStartingPoint()",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getHGap(Point,MindMapNode,Point)",1,1,2
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getNodeShiftY(Point,MindMapNode,Point)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getNodeView(MouseEvent)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.getVGap(Point,Point)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.isActive()",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseClicked(MouseEvent)",4,5,5
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseDragged(MouseEvent)",1,7,9
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseEntered(MouseEvent)",2,2,3
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseExited(MouseEvent)",1,2,2
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseMoved(MouseEvent)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.mouseReleased(MouseEvent)",2,2,3
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.resetPositions(MindMapNode)",1,1,1
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.setDragStartingPoint(Point,MindMapNode)",1,2,2
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener.stopDrag()",1,1,1
"freemind.modes.viewmodes.CommonToggleChildrenFoldedAction.CommonToggleChildrenFoldedAction(ViewControllerAdapter)",1,1,1
"freemind.modes.viewmodes.CommonToggleChildrenFoldedAction.actionPerformed(ActionEvent)",1,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.ViewControllerAdapter(Mode)",1,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.createNodeHook(String,MindMapNode)",1,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.doubleClick(MouseEvent)",1,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.extendSelection(MouseEvent)",1,10,11
"freemind.modes.viewmodes.ViewControllerAdapter.paste(MindMapNode,MindMapNode)",1,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.plainClick(MouseEvent)",1,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.setAllActions(boolean)",1,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.setFolded(MindMapNode,boolean)",3,3,5
"freemind.modes.viewmodes.ViewControllerAdapter.shutdownController()",1,1,1
"freemind.modes.viewmodes.ViewControllerAdapter.startupController()",1,1,1
"freemind.preferences.layout.GrabKeyDialog.ActionHandler.actionPerformed(ActionEvent)",1,7,7
"freemind.preferences.layout.GrabKeyDialog.ActionHandler.canClose()",7,8,11
"freemind.preferences.layout.GrabKeyDialog.Buffer.getLength()",1,1,1
"freemind.preferences.layout.GrabKeyDialog.Buffer.insert(int,String)",1,1,1
"freemind.preferences.layout.GrabKeyDialog.GrabKeyDialog(FreeMindMain,Dialog,KeyBinding,Vector<KeyBinding>,Buffer)",1,1,1
"freemind.preferences.layout.GrabKeyDialog.GrabKeyDialog(FreeMindMain,Dialog,KeyBinding,Vector<KeyBinding>,Buffer,int)",1,1,1
"freemind.preferences.layout.GrabKeyDialog.InputPane.getFocusTraversalKeysEnabled()",1,1,1
"freemind.preferences.layout.GrabKeyDialog.InputPane.processKeyEvent(KeyEvent)",7,9,13
"freemind.preferences.layout.GrabKeyDialog.KeyBinding.KeyBinding(String,String,String,boolean)",1,1,1
"freemind.preferences.layout.GrabKeyDialog.KeyBinding.isAssigned()",1,2,2
"freemind.preferences.layout.GrabKeyDialog.getFocusTraversalKeysEnabled()",1,1,1
"freemind.preferences.layout.GrabKeyDialog.getKeyBinding(String)",6,3,7
"freemind.preferences.layout.GrabKeyDialog.getModifierMask()",1,1,1
"freemind.preferences.layout.GrabKeyDialog.getShortcut()",2,2,2
"freemind.preferences.layout.GrabKeyDialog.getSymbolicName(int)",5,5,8
"freemind.preferences.layout.GrabKeyDialog.getText(String)",1,1,1
"freemind.preferences.layout.GrabKeyDialog.init(KeyBinding,Vector<KeyBinding>,Buffer)",1,5,5
"freemind.preferences.layout.GrabKeyDialog.isManagingFocus()",1,1,1
"freemind.preferences.layout.GrabKeyDialog.isOK()",1,1,1
"freemind.preferences.layout.GrabKeyDialog.processKeyEvent(KeyEvent)",1,1,1
"freemind.preferences.layout.GrabKeyDialog.toString(KeyEvent)",2,2,5
"freemind.preferences.layout.GrabKeyDialog.updateAssignedTo(String)",1,4,5
"freemind.preferences.layout.KeyEventTranslator.Key.Key(String,int,char)",1,1,1
"freemind.preferences.layout.KeyEventTranslator.Key.equals(Object)",3,4,5
"freemind.preferences.layout.KeyEventTranslator.Key.hashCode()",1,1,1
"freemind.preferences.layout.KeyEventTranslator.Key.toString()",1,1,2
"freemind.preferences.layout.KeyEventTranslator.addTranslation(Key,Key)",1,1,1
"freemind.preferences.layout.KeyEventTranslator.getModifierString(InputEvent)",1,6,6
"freemind.preferences.layout.KeyEventTranslator.getSymbolicModifierName(int)",5,1,5
"freemind.preferences.layout.KeyEventTranslator.modifiersToString(int)",2,9,9
"freemind.preferences.layout.KeyEventTranslator.parseKey(String)",6,7,12
"freemind.preferences.layout.KeyEventTranslator.setModifierMapping(int,int,int,int)",5,1,5
"freemind.preferences.layout.KeyEventTranslator.translateKeyEvent(KeyEvent)",10,13,22
"freemind.preferences.layout.KeyEventWorkaround.numericKeypadKey()",1,1,1
"freemind.preferences.layout.KeyEventWorkaround.processKeyEvent(KeyEvent)",25,12,54
"freemind.preferences.layout.OptionPanel.ChangeTabAction.ChangeTabAction(CardLayout,JPanel,String)",1,1,1
"freemind.preferences.layout.OptionPanel.ChangeTabAction.actionPerformed(ActionEvent)",1,2,2
"freemind.preferences.layout.OptionPanel.KeyProperty.KeyProperty(JDialog,String,String)",1,4,4
"freemind.preferences.layout.OptionPanel.KeyProperty.disableModifiers()",1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.getDescription()",1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.getLabel()",1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.getValue()",1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.layout(DefaultFormBuilder,TextTranslator)",1,4,4
"freemind.preferences.layout.OptionPanel.KeyProperty.setEnabled(boolean)",1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.setImageIcon(ImageIcon)",1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.setLabelText(String)",1,1,1
"freemind.preferences.layout.OptionPanel.KeyProperty.setValue(String)",1,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.NewTabProperty(String)",1,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.NewTabProperty(String,String)",1,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.getDescription()",1,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.getLabel()",1,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.layout(DefaultFormBuilder,TextTranslator)",1,1,1
"freemind.preferences.layout.OptionPanel.NewTabProperty.setEnabled(boolean)",1,1,1
"freemind.preferences.layout.OptionPanel.OptionPanel(FreeMind,JDialog,OptionPanelFeedback)",1,2,4
"freemind.preferences.layout.OptionPanel.addContributor(FreemindPropertyContributor)",1,1,1
"freemind.preferences.layout.OptionPanel.buildPanel()",1,6,6
"freemind.preferences.layout.OptionPanel.checkConnectionToFreeMindMain()",2,1,2
"freemind.preferences.layout.OptionPanel.closeWindow()",1,1,1
"freemind.preferences.layout.OptionPanel.createBinding(String,String,String,KeyProperty)",1,2,3
"freemind.preferences.layout.OptionPanel.findControlByKB(KeyBinding)",4,3,4
"freemind.preferences.layout.OptionPanel.getAllButtons()",1,1,1
"freemind.preferences.layout.OptionPanel.getControls()",1,5,5
"freemind.preferences.layout.OptionPanel.getOptionProperties()",1,4,4
"freemind.preferences.layout.OptionPanel.getTabButton(String)",1,1,1
"freemind.preferences.layout.OptionPanel.getText(String)",2,1,2
"freemind.preferences.layout.OptionPanel.registerTabButton(JButton,String,ChangeTabAction)",1,1,2
"freemind.preferences.layout.OptionPanel.removeContributor(FreemindPropertyContributor)",1,1,1
"freemind.preferences.layout.OptionPanel.setProperties()",1,3,3
"freemind.preferences.layout.VariableSizeCardLayout.VariableSizeCardLayout()",1,1,1
"freemind.preferences.layout.VariableSizeCardLayout.VariableSizeCardLayout(int,int)",1,1,1
"freemind.preferences.layout.VariableSizeCardLayout.preferredLayoutSize(Container)",1,3,5
"freemind.swing.DefaultListModel.add(int,E)",1,1,1
"freemind.swing.DefaultListModel.addAll(Collection<E>)",1,1,1
"freemind.swing.DefaultListModel.addAll(int,Collection<E>)",1,1,1
"freemind.swing.DefaultListModel.addElement(E)",1,1,1
"freemind.swing.DefaultListModel.capacity()",1,1,1
"freemind.swing.DefaultListModel.clear()",1,2,2
"freemind.swing.DefaultListModel.contains(Object)",1,1,1
"freemind.swing.DefaultListModel.copyInto(Object[])",1,1,1
"freemind.swing.DefaultListModel.elementAt(int)",1,1,1
"freemind.swing.DefaultListModel.elements()",1,1,1
"freemind.swing.DefaultListModel.ensureCapacity(int)",1,1,1
"freemind.swing.DefaultListModel.firstElement()",1,1,1
"freemind.swing.DefaultListModel.get(int)",1,1,1
"freemind.swing.DefaultListModel.getElementAt(int)",1,1,1
"freemind.swing.DefaultListModel.getSize()",1,1,1
"freemind.swing.DefaultListModel.indexOf(Object)",1,1,1
"freemind.swing.DefaultListModel.indexOf(Object,int)",1,1,1
"freemind.swing.DefaultListModel.insertElementAt(E,int)",1,1,1
"freemind.swing.DefaultListModel.isEmpty()",1,1,1
"freemind.swing.DefaultListModel.lastElement()",1,1,1
"freemind.swing.DefaultListModel.lastIndexOf(Object)",1,1,1
"freemind.swing.DefaultListModel.lastIndexOf(Object,int)",1,1,1
"freemind.swing.DefaultListModel.remove(int)",1,1,1
"freemind.swing.DefaultListModel.removeAllElements()",1,2,2
"freemind.swing.DefaultListModel.removeElement(Object)",1,2,2
"freemind.swing.DefaultListModel.removeElementAt(int)",1,1,1
"freemind.swing.DefaultListModel.removeRange(int,int)",2,2,3
"freemind.swing.DefaultListModel.set(int,E)",1,1,1
"freemind.swing.DefaultListModel.setElementAt(E,int)",1,1,1
"freemind.swing.DefaultListModel.setSize(int)",1,3,3
"freemind.swing.DefaultListModel.size()",1,1,1
"freemind.swing.DefaultListModel.toArray()",1,1,1
"freemind.swing.DefaultListModel.toString()",1,1,1
"freemind.swing.DefaultListModel.trimToSize()",1,1,1
"freemind.swing.DefaultListModel.unmodifiableList()",1,1,1
"freemind.view.ImageFactory.createIcon(String)",4,5,5
"freemind.view.ImageFactory.createIcon(URL)",2,2,2
"freemind.view.ImageFactory.createUnscaledIcon(URL)",1,1,1
"freemind.view.ImageFactory.getInstance()",1,1,2
"freemind.view.MapModule.MapModule(MindMap,MapView,Mode,ModeController)",1,1,1
"freemind.view.MapModule.getDisplayName()",1,1,1
"freemind.view.MapModule.getMode()",1,1,1
"freemind.view.MapModule.getModeController()",1,1,1
"freemind.view.MapModule.getModel()",1,1,1
"freemind.view.MapModule.getName()",1,1,1
"freemind.view.MapModule.getView()",1,1,1
"freemind.view.MapModule.rename()",1,2,2
"freemind.view.MapModule.setDisplayName(String)",1,1,1
"freemind.view.MapModule.setName(String)",1,1,1
"freemind.view.MapModule.toString()",1,2,2
"freemind.view.ScalableImageIcon.ScalableImageIcon(URL)",1,1,1
"freemind.view.ScalableImageIcon.getIconHeight()",1,1,1
"freemind.view.ScalableImageIcon.getIconWidth()",1,1,1
"freemind.view.ScalableImageIcon.getImage()",2,1,2
"freemind.view.ScalableImageIcon.getScale()",1,1,1
"freemind.view.ScalableImageIcon.getUnscaledIcon()",1,1,1
"freemind.view.ScalableImageIcon.paintIcon(Component,Graphics,int,int)",1,1,2
"freemind.view.ScalableImageIcon.setScale(float)",1,1,1
"freemind.view.mindmapview.ArrowLinkView.ArrowLinkView(MindMapArrowLink,NodeView,NodeView)",1,1,1
"freemind.view.mindmapview.ArrowLinkView.calcInclination(NodeView,double)",1,1,1
"freemind.view.mindmapview.ArrowLinkView.changeInclination(int,int,int,int)",1,1,1
"freemind.view.mindmapview.ArrowLinkView.detectCollision(Point)",6,3,7
"freemind.view.mindmapview.ArrowLinkView.getBounds()",2,1,2
"freemind.view.mindmapview.ArrowLinkView.getColor()",1,1,1
"freemind.view.mindmapview.ArrowLinkView.getControlPoint(Point2D)",1,1,1
"freemind.view.mindmapview.ArrowLinkView.getMap()",1,2,2
"freemind.view.mindmapview.ArrowLinkView.getModel()",1,1,1
"freemind.view.mindmapview.ArrowLinkView.getRealWidth()",1,1,2
"freemind.view.mindmapview.ArrowLinkView.getStroke()",2,1,2
"freemind.view.mindmapview.ArrowLinkView.getWidth()",1,1,1
"freemind.view.mindmapview.ArrowLinkView.getZoom()",1,1,1
"freemind.view.mindmapview.ArrowLinkView.isSourceVisible()",1,2,2
"freemind.view.mindmapview.ArrowLinkView.isTargetVisible()",1,2,2
"freemind.view.mindmapview.ArrowLinkView.paint(Graphics)",2,28,32
"freemind.view.mindmapview.ArrowLinkView.paintArrow(Point,Point,Graphics2D)",1,1,1
"freemind.view.mindmapview.BezierEdgeView.BezierEdgeView()",1,1,1
"freemind.view.mindmapview.BezierEdgeView.getColor()",1,1,1
"freemind.view.mindmapview.BezierEdgeView.paint(Graphics2D)",1,2,2
"freemind.view.mindmapview.BezierEdgeView.update()",1,2,4
"freemind.view.mindmapview.BubbleMainView.getAlignment()",1,1,1
"freemind.view.mindmapview.BubbleMainView.getCenterPoint()",1,1,1
"freemind.view.mindmapview.BubbleMainView.getDeltaX()",2,3,3
"freemind.view.mindmapview.BubbleMainView.getLeftPoint()",1,1,1
"freemind.view.mindmapview.BubbleMainView.getMainViewWidthWithFoldingMark()",1,1,2
"freemind.view.mindmapview.BubbleMainView.getPreferredSize()",1,1,1
"freemind.view.mindmapview.BubbleMainView.getRightPoint()",1,1,1
"freemind.view.mindmapview.BubbleMainView.getStyle()",1,1,1
"freemind.view.mindmapview.BubbleMainView.getTextWidth()",1,1,1
"freemind.view.mindmapview.BubbleMainView.getTextX()",1,1,1
"freemind.view.mindmapview.BubbleMainView.paint(Graphics)",2,1,2
"freemind.view.mindmapview.BubbleMainView.paintBackground(Graphics2D,Color)",1,1,1
"freemind.view.mindmapview.BubbleMainView.paintSelected(Graphics2D)",1,2,2
"freemind.view.mindmapview.CloudView.CloudView(MindMapCloud,NodeView)",1,1,1
"freemind.view.mindmapview.CloudView.getAdditionalHeigth(MindMapCloud,NodeView)",1,1,1
"freemind.view.mindmapview.CloudView.getColor()",1,1,1
"freemind.view.mindmapview.CloudView.getDistanceToConvexHull()",1,1,1
"freemind.view.mindmapview.CloudView.getExteriorColor()",1,1,1
"freemind.view.mindmapview.CloudView.getIterativeLevel()",1,1,1
"freemind.view.mindmapview.CloudView.getMap()",1,1,1
"freemind.view.mindmapview.CloudView.getModel()",1,1,1
"freemind.view.mindmapview.CloudView.getRealWidth()",1,1,2
"freemind.view.mindmapview.CloudView.getStroke()",2,1,2
"freemind.view.mindmapview.CloudView.getWidth()",1,1,1
"freemind.view.mindmapview.CloudView.getZoom()",1,1,1
"freemind.view.mindmapview.CloudView.paint(Graphics)",1,6,7
"freemind.view.mindmapview.CloudView.paintClouds(Graphics2D,Graphics2D,double,double,double,double,double)",2,1,2
"freemind.view.mindmapview.ConvexHull.calculateHull(LinkedList<Point>)",1,2,2
"freemind.view.mindmapview.ConvexHull.ccw(Point,Point,Point)",5,1,6
"freemind.view.mindmapview.ConvexHull.doGraham(Vector<Point>)",1,5,8
"freemind.view.mindmapview.ConvexHull.thetaComparator.compare(Point,Point)",6,1,6
"freemind.view.mindmapview.ConvexHull.thetaComparator.theta(Point,Point)",1,1,5
"freemind.view.mindmapview.ConvexHull.thetaComparator.thetaComparator(Point)",1,1,1
"freemind.view.mindmapview.EdgeView.createEnd()",1,1,1
"freemind.view.mindmapview.EdgeView.createStart()",1,1,1
"freemind.view.mindmapview.EdgeView.getEclipsedStroke()",1,1,2
"freemind.view.mindmapview.EdgeView.getMap()",1,1,1
"freemind.view.mindmapview.EdgeView.getModel()",1,1,1
"freemind.view.mindmapview.EdgeView.getSource()",1,1,1
"freemind.view.mindmapview.EdgeView.getStroke()",2,1,2
"freemind.view.mindmapview.EdgeView.getTarget()",1,1,1
"freemind.view.mindmapview.EdgeView.getWidth()",1,1,1
"freemind.view.mindmapview.EdgeView.isTargetEclipsed()",1,1,1
"freemind.view.mindmapview.EdgeView.paint(NodeView,Graphics2D)",1,1,1
"freemind.view.mindmapview.EdgeView.reset()",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditCopyAction.EditCopyAction(JTextComponent)",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditCopyAction.actionPerformed(ActionEvent)",1,2,2
"freemind.view.mindmapview.EditNodeBase.EditDialog.CancelAction.actionPerformed(ActionEvent)",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.DialogWindowListener.windowClosing(WindowEvent)",1,2,2
"freemind.view.mindmapview.EditNodeBase.EditDialog.EditDialog(EditNodeBase)",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.SplitAction.actionPerformed(ActionEvent)",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.SubmitAction.actionPerformed(ActionEvent)",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.cancel()",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.confirmedCancel()",3,2,3
"freemind.view.mindmapview.EditNodeBase.EditDialog.confirmedSubmit()",4,3,4
"freemind.view.mindmapview.EditNodeBase.EditDialog.getBase()",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.setBase(EditNodeBase)",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.split()",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditDialog.submit()",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditNodeBase(NodeView,String,ModeController,EditControl)",1,1,1
"freemind.view.mindmapview.EditNodeBase.EditPopupMenu.EditPopupMenu(JTextComponent)",1,3,3
"freemind.view.mindmapview.EditNodeBase.binOptionIsTrue(String)",1,1,1
"freemind.view.mindmapview.EditNodeBase.closeEdit()",1,2,2
"freemind.view.mindmapview.EditNodeBase.getClipboard()",1,1,1
"freemind.view.mindmapview.EditNodeBase.getController()",1,1,1
"freemind.view.mindmapview.EditNodeBase.getEditControl()",1,1,1
"freemind.view.mindmapview.EditNodeBase.getFrame()",1,1,1
"freemind.view.mindmapview.EditNodeBase.getModeController()",1,1,1
"freemind.view.mindmapview.EditNodeBase.getNode()",1,1,1
"freemind.view.mindmapview.EditNodeBase.getText()",1,1,1
"freemind.view.mindmapview.EditNodeBase.getText(String)",1,1,1
"freemind.view.mindmapview.EditNodeBase.getTextFieldListener()",1,1,1
"freemind.view.mindmapview.EditNodeBase.getView()",1,1,1
"freemind.view.mindmapview.EditNodeBase.redispatchKeyEvents(JTextComponent,KeyEvent)",4,4,7
"freemind.view.mindmapview.EditNodeBase.setText(String)",1,1,1
"freemind.view.mindmapview.EditNodeBase.setTextFieldListener(FocusListener)",1,1,1
"freemind.view.mindmapview.EditNodeDialog.EditNodeDialog(NodeView,String,KeyEvent,ModeController,EditControl)",1,1,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.LongNodeDialog()",1,13,13
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.cancel()",1,1,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.getMostRecentFocusOwner()",2,2,2
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.isChanged()",1,1,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.show()",1,1,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.split()",1,1,1
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog.submit()",1,1,1
"freemind.view.mindmapview.EditNodeDialog.show()",1,1,1
"freemind.view.mindmapview.EditNodeExternalApplication.EditNodeExternalApplication(NodeView,String,KeyEvent,ModeController,EditControl)",1,1,1
"freemind.view.mindmapview.EditNodeExternalApplication.getFirstEvent()",1,1,1
"freemind.view.mindmapview.EditNodeExternalApplication.show()",1,4,5
"freemind.view.mindmapview.EditNodeTextField.EditNodeTextField(NodeView,String,KeyEvent,ModeController,EditControl)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.EditNodeTextField(NodeView,String,KeyEvent,ModeController,EditControl,JComponent,JComponent)",1,2,2
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.componentHidden(ComponentEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.componentMoved(ComponentEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.componentResized(ComponentEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.componentShown(ComponentEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.conditionallyShowPopup(MouseEvent)",1,3,3
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.focusGained(FocusEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.focusLost(FocusEvent)",2,5,5
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.keyPressed(KeyEvent)",3,6,9
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.keyReleased(KeyEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.keyTyped(KeyEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mouseClicked(MouseEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mouseEntered(MouseEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mouseExited(MouseEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mousePressed(MouseEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener.mouseReleased(MouseEvent)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.addTextfield()",1,1,1
"freemind.view.mindmapview.EditNodeTextField.hideMe()",1,1,1
"freemind.view.mindmapview.EditNodeTextField.setTextfieldLoaction(Point)",1,1,1
"freemind.view.mindmapview.EditNodeTextField.show()",1,13,17
"freemind.view.mindmapview.EditNodeWYSIWYG.EditNodeWYSIWYG(NodeView,String,KeyEvent,ModeController,EditControl)",1,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.HTMLDialog(EditNodeBase)",1,3,3
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.cancel()",1,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.createEditorPanel()",1,2,2
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.getHtmlEditorPanel()",1,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.getMostRecentFocusOwner()",2,2,2
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.isChanged()",1,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.removeBodyStyle()",1,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.split()",1,1,1
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog.submit()",1,2,2
"freemind.view.mindmapview.EditNodeWYSIWYG.show()",1,6,10
"freemind.view.mindmapview.ForkMainView.getAlignment()",1,1,1
"freemind.view.mindmapview.ForkMainView.getCenterPoint()",1,1,1
"freemind.view.mindmapview.ForkMainView.getDeltaX()",2,3,3
"freemind.view.mindmapview.ForkMainView.getEdgeWidth()",2,3,4
"freemind.view.mindmapview.ForkMainView.getLeftPoint()",1,1,1
"freemind.view.mindmapview.ForkMainView.getMainViewHeightWithFoldingMark()",1,2,2
"freemind.view.mindmapview.ForkMainView.getMainViewWidthWithFoldingMark()",1,2,2
"freemind.view.mindmapview.ForkMainView.getRightPoint()",1,1,1
"freemind.view.mindmapview.ForkMainView.getStyle()",1,1,1
"freemind.view.mindmapview.ForkMainView.paint(Graphics)",2,1,2
"freemind.view.mindmapview.IndependantMapViewCreator.createMapViewForFile(String,JPanel,FreeMindMain)",1,1,1
"freemind.view.mindmapview.IndependantMapViewCreator.createNodeHook(String,MindMapNode)",1,1,1
"freemind.view.mindmapview.IndependantMapViewCreator.exportFileToPng(String,String,FreeMindMain)",1,1,1
"freemind.view.mindmapview.IndependantMapViewCreator.getMap()",1,1,1
"freemind.view.mindmapview.IndependantMapViewCreator.main(String[])",1,5,5
"freemind.view.mindmapview.IndependantMapViewCreator.printToFile(MapView,String,boolean,int)",1,2,2
"freemind.view.mindmapview.LeftNodeViewLayout.getInstance()",1,1,2
"freemind.view.mindmapview.LeftNodeViewLayout.getMainViewInPoint(NodeView)",1,1,1
"freemind.view.mindmapview.LeftNodeViewLayout.getMainViewOutPoint(NodeView,NodeView,Point)",1,1,1
"freemind.view.mindmapview.LeftNodeViewLayout.layout()",1,2,2
"freemind.view.mindmapview.LeftNodeViewLayout.layoutNodeMotionListenerView(NodeMotionListenerView)",1,1,1
"freemind.view.mindmapview.LinearEdgeView.LinearEdgeView()",1,1,1
"freemind.view.mindmapview.LinearEdgeView.getColor()",1,1,1
"freemind.view.mindmapview.LinearEdgeView.paint(Graphics2D)",1,4,5
"freemind.view.mindmapview.MainView.MainView()",1,2,2
"freemind.view.mindmapview.MainView.convertPointFromMap(Point)",1,1,1
"freemind.view.mindmapview.MainView.convertPointToMap(Point)",1,1,1
"freemind.view.mindmapview.MainView.dropAsSibling(double)",1,1,1
"freemind.view.mindmapview.MainView.dropPosition(double)",1,1,1
"freemind.view.mindmapview.MainView.getDeltaX()",1,1,1
"freemind.view.mindmapview.MainView.getDeltaY()",1,1,1
"freemind.view.mindmapview.MainView.getDraggedOver()",1,1,1
"freemind.view.mindmapview.MainView.getHeight()",3,3,3
"freemind.view.mindmapview.MainView.getIconWidth()",2,1,2
"freemind.view.mindmapview.MainView.getMainViewHeightWithFoldingMark()",1,1,1
"freemind.view.mindmapview.MainView.getMainViewWidthWithFoldingMark()",1,1,1
"freemind.view.mindmapview.MainView.getMaximumSize()",1,1,1
"freemind.view.mindmapview.MainView.getMinimumSize()",1,1,1
"freemind.view.mindmapview.MainView.getNodeView()",1,1,1
"freemind.view.mindmapview.MainView.getPreferredSize()",1,8,9
"freemind.view.mindmapview.MainView.getTextWidth()",1,1,1
"freemind.view.mindmapview.MainView.getTextX()",1,3,4
"freemind.view.mindmapview.MainView.getWidth()",3,3,3
"freemind.view.mindmapview.MainView.getZoom()",1,1,1
"freemind.view.mindmapview.MainView.getZoomedFoldingSymbolHalfWidth()",1,1,1
"freemind.view.mindmapview.MainView.isCurrentlyPrinting()",1,1,1
"freemind.view.mindmapview.MainView.isInFollowLinkRegion(double)",1,4,4
"freemind.view.mindmapview.MainView.isInVerticalRegion(double,double)",1,2,2
"freemind.view.mindmapview.MainView.paint(Graphics)",1,2,2
"freemind.view.mindmapview.MainView.paintBackground(Graphics2D,Color)",1,1,1
"freemind.view.mindmapview.MainView.paintDragOver(Graphics2D)",1,4,4
"freemind.view.mindmapview.MainView.paintSelected(Graphics2D)",1,3,3
"freemind.view.mindmapview.MainView.printComponent(Graphics)",1,1,1
"freemind.view.mindmapview.MainView.setDraggedOver(Point)",1,1,2
"freemind.view.mindmapview.MainView.setDraggedOver(int)",1,1,1
"freemind.view.mindmapview.MainView.updateCursor(double)",1,2,4
"freemind.view.mindmapview.MapView.CheckLaterForCenterNodeTask.CheckLaterForCenterNodeTask(NodeView)",1,1,1
"freemind.view.mindmapview.MapView.CheckLaterForCenterNodeTask.run()",1,1,1
"freemind.view.mindmapview.MapView.MapView(MindMap,ViewFeedback)",1,9,9
"freemind.view.mindmapview.MapView.ResizeListener.ResizeListener()",1,1,1
"freemind.view.mindmapview.MapView.ResizeListener.componentResized(ComponentEvent)",1,1,1
"freemind.view.mindmapview.MapView.ScrollPane.ScrollPane()",1,1,1
"freemind.view.mindmapview.MapView.ScrollPane.processKeyBinding(KeyStroke,KeyEvent,int,boolean)",2,2,3
"freemind.view.mindmapview.MapView.ScrollPane.validateTree()",1,2,2
"freemind.view.mindmapview.MapView.Selected.Selected()",1,1,1
"freemind.view.mindmapview.MapView.Selected.add(NodeView)",1,2,2
"freemind.view.mindmapview.MapView.Selected.addFocusForHooks(NodeView)",1,1,1
"freemind.view.mindmapview.MapView.Selected.changeSelection(NodeView,boolean)",2,1,2
"freemind.view.mindmapview.MapView.Selected.clear()",1,3,3
"freemind.view.mindmapview.MapView.Selected.contains(NodeView)",1,1,1
"freemind.view.mindmapview.MapView.Selected.get(int)",1,1,1
"freemind.view.mindmapview.MapView.Selected.moveToFirst(NodeView)",1,4,4
"freemind.view.mindmapview.MapView.Selected.remove(NodeView)",1,2,2
"freemind.view.mindmapview.MapView.Selected.removeFocusForHooks(NodeView)",2,1,2
"freemind.view.mindmapview.MapView.Selected.size()",1,1,1
"freemind.view.mindmapview.MapView.acceptViewVisitor(MindMapNode,NodeViewVisitor)",1,2,2
"freemind.view.mindmapview.MapView.addViewer(MindMapNode,NodeView)",1,1,1
"freemind.view.mindmapview.MapView.autoscroll(Point)",1,1,1
"freemind.view.mindmapview.MapView.centerNode(NodeView)",2,2,2
"freemind.view.mindmapview.MapView.collectLabels(NodeView,HashMap<String, NodeView>)",2,3,4
"freemind.view.mindmapview.MapView.createPropertyChangeListener()",1,11,11
"freemind.view.mindmapview.MapView.deselect(NodeView)",1,2,2
"freemind.view.mindmapview.MapView.detectCollision(Point)",4,3,4
"freemind.view.mindmapview.MapView.endPrinting()",1,4,4
"freemind.view.mindmapview.MapView.extendSelectionWithKeyMove(NodeView,KeyEvent)",9,16,18
"freemind.view.mindmapview.MapView.getAntialiasAll()",1,1,1
"freemind.view.mindmapview.MapView.getAntialiasEdges()",1,1,1
"freemind.view.mindmapview.MapView.getAutoscrollInsets()",1,1,1
"freemind.view.mindmapview.MapView.getInnerBounds()",3,3,4
"freemind.view.mindmapview.MapView.getMainViewY(NodeView)",1,1,1
"freemind.view.mindmapview.MapView.getMaxNodeWidth()",1,3,3
"freemind.view.mindmapview.MapView.getModel()",1,1,1
"freemind.view.mindmapview.MapView.getNodeContentLocation(NodeView)",1,1,1
"freemind.view.mindmapview.MapView.getNodeDragListener()",1,1,1
"freemind.view.mindmapview.MapView.getNodeDropListener()",1,1,1
"freemind.view.mindmapview.MapView.getNodeKeyListener()",1,1,1
"freemind.view.mindmapview.MapView.getNodeMotionListener()",1,1,1
"freemind.view.mindmapview.MapView.getNodeMouseMotionListener()",1,1,1
"freemind.view.mindmapview.MapView.getNodeView(MindMapNode)",4,2,4
"freemind.view.mindmapview.MapView.getPreferredSize()",2,2,2
"freemind.view.mindmapview.MapView.getRoot()",1,1,1
"freemind.view.mindmapview.MapView.getScrollMode()",2,2,2
"freemind.view.mindmapview.MapView.getSelected()",2,2,2
"freemind.view.mindmapview.MapView.getSelected(int)",1,1,1
"freemind.view.mindmapview.MapView.getSelectedNodesSortedByY()",4,5,6
"freemind.view.mindmapview.MapView.getSelecteds()",1,2,2
"freemind.view.mindmapview.MapView.getSiblingMaxLevel()",1,1,1
"freemind.view.mindmapview.MapView.getSingleSelectedNodes()",1,2,2
"freemind.view.mindmapview.MapView.getViewFeedback()",1,1,1
"freemind.view.mindmapview.MapView.getViewPosition()",1,2,2
"freemind.view.mindmapview.MapView.getViewers(MindMapNode)",1,2,3
"freemind.view.mindmapview.MapView.getViewportSize()",2,3,3
"freemind.view.mindmapview.MapView.getVisibleLeft(NodeView)",4,6,6
"freemind.view.mindmapview.MapView.getVisibleNeighbour(int)",2,4,10
"freemind.view.mindmapview.MapView.getVisibleRight(NodeView)",4,6,6
"freemind.view.mindmapview.MapView.getZoom()",1,1,1
"freemind.view.mindmapview.MapView.getZoomed(int)",1,1,1
"freemind.view.mindmapview.MapView.initRoot()",1,1,1
"freemind.view.mindmapview.MapView.isCurrentlyPrinting()",1,1,1
"freemind.view.mindmapview.MapView.isSelected(NodeView)",2,1,2
"freemind.view.mindmapview.MapView.makeTheSelected(NodeView)",1,2,2
"freemind.view.mindmapview.MapView.move(KeyEvent)",1,3,3
"freemind.view.mindmapview.MapView.moveToRoot()",1,1,1
"freemind.view.mindmapview.MapView.paint(Graphics)",1,7,8
"freemind.view.mindmapview.MapView.paintChildren(Graphics)",1,1,1
"freemind.view.mindmapview.MapView.paintLinks(NodeView,Graphics2D,HashMap<String, NodeView>,HashSet<MindMapLink>)",2,5,7
"freemind.view.mindmapview.MapView.paintSelected(Graphics2D,NodeView)",1,1,1
"freemind.view.mindmapview.MapView.paintSelecteds(Graphics2D)",2,3,5
"freemind.view.mindmapview.MapView.preparePrinting()",1,4,4
"freemind.view.mindmapview.MapView.print(Graphics,PageFormat,int)",4,2,6
"freemind.view.mindmapview.MapView.removeViewer(MindMapNode,NodeView)",1,2,2
"freemind.view.mindmapview.MapView.repaintSelecteds()",1,2,2
"freemind.view.mindmapview.MapView.resetShiftSelectionOrigin()",1,1,1
"freemind.view.mindmapview.MapView.revalidateSelecteds()",1,1,1
"freemind.view.mindmapview.MapView.scrollBy(int,int)",1,1,1
"freemind.view.mindmapview.MapView.scrollNodeToVisible(NodeView)",1,1,1
"freemind.view.mindmapview.MapView.scrollNodeToVisible(NodeView,int)",2,2,3
"freemind.view.mindmapview.MapView.select(NodeView)",2,2,2
"freemind.view.mindmapview.MapView.selectAsTheOnlyOneSelected(NodeView)",1,4,4
"freemind.view.mindmapview.MapView.selectBranch(NodeView,boolean)",1,5,5
"freemind.view.mindmapview.MapView.selectContinuous(NodeView)",18,25,30
"freemind.view.mindmapview.MapView.setAntialiasAll(boolean)",1,1,1
"freemind.view.mindmapview.MapView.setAntialiasEdges(boolean)",1,1,1
"freemind.view.mindmapview.MapView.setEdgesRenderingHint(Graphics2D)",1,1,2
"freemind.view.mindmapview.MapView.setMoveCursor(boolean)",1,2,5
"freemind.view.mindmapview.MapView.setScrollMode(int)",1,2,2
"freemind.view.mindmapview.MapView.setSiblingMaxLevel(int)",1,1,1
"freemind.view.mindmapview.MapView.setTextRenderingHint(Graphics2D)",1,1,3
"freemind.view.mindmapview.MapView.setViewLocation(int,int)",2,5,6
"freemind.view.mindmapview.MapView.setViewPosition(Point)",1,2,2
"freemind.view.mindmapview.MapView.setViewPositionAfterValidate()",1,3,4
"freemind.view.mindmapview.MapView.setZoom(float)",1,1,1
"freemind.view.mindmapview.MapView.toggleSelected(NodeView)",1,4,4
"freemind.view.mindmapview.MapView.validateSelecteds()",2,6,7
"freemind.view.mindmapview.MapView.validateTree()",1,1,1
"freemind.view.mindmapview.MindMapLayout.MindMapLayout()",1,2,2
"freemind.view.mindmapview.MindMapLayout.addLayoutComponent(String,Component)",1,1,1
"freemind.view.mindmapview.MindMapLayout.calcXBorderSize(MapView)",1,2,2
"freemind.view.mindmapview.MindMapLayout.calcYBorderSize(MapView)",1,2,2
"freemind.view.mindmapview.MindMapLayout.getRoot(Container)",1,1,1
"freemind.view.mindmapview.MindMapLayout.layoutContainer(Container)",1,3,3
"freemind.view.mindmapview.MindMapLayout.minimumLayoutSize(Container)",1,1,1
"freemind.view.mindmapview.MindMapLayout.preferredLayoutSize(Container)",1,1,1
"freemind.view.mindmapview.MindMapLayout.removeLayoutComponent(Component)",1,1,1
"freemind.view.mindmapview.MultipleImage.MultipleImage(double)",1,1,1
"freemind.view.mindmapview.MultipleImage.addImage(ImageIcon)",1,1,1
"freemind.view.mindmapview.MultipleImage.getIconHeight()",1,2,3
"freemind.view.mindmapview.MultipleImage.getIconWidth()",1,2,2
"freemind.view.mindmapview.MultipleImage.getImage()",3,3,5
"freemind.view.mindmapview.MultipleImage.getImageCount()",1,1,1
"freemind.view.mindmapview.MultipleImage.paintIcon(Component,Graphics,int,int)",1,2,2
"freemind.view.mindmapview.NodeFoldingComponent.NodeFoldingComponent(NodeView)",1,6,8
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.getColorForCounter()",1,1,1
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.getPreferredSize(JComponent)",1,1,1
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.initShape(JComponent)",1,2,2
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.installDefaults(AbstractButton)",1,1,1
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.installListeners(AbstractButton)",1,4,4
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI.paint(Graphics,JComponent)",1,7,7
"freemind.view.mindmapview.NodeFoldingComponent.dispose()",1,2,2
"freemind.view.mindmapview.NodeFoldingComponent.getNodeView()",1,1,1
"freemind.view.mindmapview.NodeFoldingComponent.getPreferredSize()",1,1,1
"freemind.view.mindmapview.NodeFoldingComponent.getZoomedCircleRadius()",1,1,1
"freemind.view.mindmapview.NodeFoldingComponent.isFolded()",1,2,2
"freemind.view.mindmapview.NodeFoldingComponent.setCorrectedLocation(Point)",1,1,2
"freemind.view.mindmapview.NodeFoldingComponent.startTimer()",1,2,2
"freemind.view.mindmapview.NodeFoldingComponent.stopTimer()",1,2,2
"freemind.view.mindmapview.NodeMotionListenerView.NodeMotionListenerView(NodeView)",1,2,2
"freemind.view.mindmapview.NodeMotionListenerView.getMovedView()",1,1,1
"freemind.view.mindmapview.NodeMotionListenerView.isMouseEntered()",1,1,1
"freemind.view.mindmapview.NodeMotionListenerView.paintComponent(Graphics)",1,3,3
"freemind.view.mindmapview.NodeMotionListenerView.setMouseEntered()",1,1,1
"freemind.view.mindmapview.NodeMotionListenerView.setMouseExited()",1,1,1
"freemind.view.mindmapview.NodeView.NodeView(MindMapNode,int,MapView,Container)",1,5,5
"freemind.view.mindmapview.NodeView.addDragListener(DragGestureListener)",2,1,2
"freemind.view.mindmapview.NodeView.addDropListener(DropTargetListener)",2,1,2
"freemind.view.mindmapview.NodeView.addFoldingListener()",1,4,4
"freemind.view.mindmapview.NodeView.contains(int,int)",1,4,4
"freemind.view.mindmapview.NodeView.convertPointToMap(Point)",1,1,1
"freemind.view.mindmapview.NodeView.getAdditionalCloudHeigth()",3,2,3
"freemind.view.mindmapview.NodeView.getAlignment()",1,1,1
"freemind.view.mindmapview.NodeView.getAntiColor1(Color)",1,1,2
"freemind.view.mindmapview.NodeView.getAntiColor2(Color)",1,1,2
"freemind.view.mindmapview.NodeView.getBackgroundColor()",3,3,3
"freemind.view.mindmapview.NodeView.getChildrenViews()",3,2,3
"freemind.view.mindmapview.NodeView.getContent()",1,1,2
"freemind.view.mindmapview.NodeView.getContentPane()",1,2,2
"freemind.view.mindmapview.NodeView.getCoordinates(LinkedList<Point>)",1,1,1
"freemind.view.mindmapview.NodeView.getCoordinates(LinkedList<Point>,int,boolean,int,int)",2,4,6
"freemind.view.mindmapview.NodeView.getDeltaX()",1,1,1
"freemind.view.mindmapview.NodeView.getDeltaY()",1,1,1
"freemind.view.mindmapview.NodeView.getFirst(Component,boolean,boolean)",7,5,11
"freemind.view.mindmapview.NodeView.getFoldingMarkPosition()",1,1,1
"freemind.view.mindmapview.NodeView.getFoldingSymbolWidth()",1,2,2
"freemind.view.mindmapview.NodeView.getHGap()",1,1,1
"freemind.view.mindmapview.NodeView.getInPointInMap()",1,1,1
"freemind.view.mindmapview.NodeView.getInnerBounds()",1,1,1
"freemind.view.mindmapview.NodeView.getIsLong()",1,1,1
"freemind.view.mindmapview.NodeView.getLast(Component,boolean,boolean)",7,5,11
"freemind.view.mindmapview.NodeView.getLeft(boolean)",3,3,4
"freemind.view.mindmapview.NodeView.getLinkPoint(Point)",1,5,8
"freemind.view.mindmapview.NodeView.getMainView()",1,1,1
"freemind.view.mindmapview.NodeView.getMainViewHeightWithFoldingMark()",1,1,1
"freemind.view.mindmapview.NodeView.getMainViewInPoint()",1,1,1
"freemind.view.mindmapview.NodeView.getMainViewOutPoint(NodeView,Point)",1,1,1
"freemind.view.mindmapview.NodeView.getMainViewWidthWithFoldingMark()",1,1,1
"freemind.view.mindmapview.NodeView.getMap()",1,1,1
"freemind.view.mindmapview.NodeView.getMaxToolTipWidth()",1,2,3
"freemind.view.mindmapview.NodeView.getModel()",1,1,1
"freemind.view.mindmapview.NodeView.getMotionListenerView()",1,1,1
"freemind.view.mindmapview.NodeView.getNextPage()",5,3,6
"freemind.view.mindmapview.NodeView.getNextSiblingSingle()",4,5,6
"freemind.view.mindmapview.NodeView.getNextVisibleSibling()",6,3,7
"freemind.view.mindmapview.NodeView.getParentView()",2,1,2
"freemind.view.mindmapview.NodeView.getPreferredVisibleChild(boolean)",11,9,14
"freemind.view.mindmapview.NodeView.getPreviousPage()",5,3,6
"freemind.view.mindmapview.NodeView.getPreviousSiblingSingle()",4,5,6
"freemind.view.mindmapview.NodeView.getPreviousVisibleSibling()",6,3,7
"freemind.view.mindmapview.NodeView.getRight(boolean)",3,3,4
"freemind.view.mindmapview.NodeView.getSelectedColor()",1,1,1
"freemind.view.mindmapview.NodeView.getShift()",1,1,1
"freemind.view.mindmapview.NodeView.getSiblingViews()",1,1,1
"freemind.view.mindmapview.NodeView.getStyle()",1,1,1
"freemind.view.mindmapview.NodeView.getText()",1,1,1
"freemind.view.mindmapview.NodeView.getTextBackground()",2,1,2
"freemind.view.mindmapview.NodeView.getTextColor()",1,1,2
"freemind.view.mindmapview.NodeView.getTextFont()",1,1,1
"freemind.view.mindmapview.NodeView.getVGap()",1,1,1
"freemind.view.mindmapview.NodeView.getViewFeedback()",1,1,1
"freemind.view.mindmapview.NodeView.getVisibleParentView()",3,1,3
"freemind.view.mindmapview.NodeView.getZoomedFoldingSymbolHalfWidth()",1,1,1
"freemind.view.mindmapview.NodeView.insert()",1,2,2
"freemind.view.mindmapview.NodeView.insert(MindMapNode,int)",1,1,1
"freemind.view.mindmapview.NodeView.isChildOf(NodeView)",1,1,1
"freemind.view.mindmapview.NodeView.isContentVisible()",1,1,1
"freemind.view.mindmapview.NodeView.isLeft()",1,1,1
"freemind.view.mindmapview.NodeView.isParentHidden()",2,1,2
"freemind.view.mindmapview.NodeView.isParentOf(NodeView)",1,1,1
"freemind.view.mindmapview.NodeView.isRoot()",1,1,1
"freemind.view.mindmapview.NodeView.isSelected()",1,1,1
"freemind.view.mindmapview.NodeView.isSiblingOf(NodeView)",1,1,1
"freemind.view.mindmapview.NodeView.paint(Graphics)",1,3,3
"freemind.view.mindmapview.NodeView.paintCloud(Graphics)",1,3,3
"freemind.view.mindmapview.NodeView.paintCloudsAndEdges(Graphics2D)",3,3,4
"freemind.view.mindmapview.NodeView.propertyChanged(String,String,String)",1,1,1
"freemind.view.mindmapview.NodeView.remove()",1,3,3
"freemind.view.mindmapview.NodeView.removeFoldingListener()",1,2,2
"freemind.view.mindmapview.NodeView.removeFromMap()",1,2,2
"freemind.view.mindmapview.NodeView.repaintSelected()",1,1,1
"freemind.view.mindmapview.NodeView.setBounds(int,int,int,int)",1,3,3
"freemind.view.mindmapview.NodeView.setFocusCycleRoot(boolean)",1,1,1
"freemind.view.mindmapview.NodeView.setIcon(MultipleImage)",1,1,1
"freemind.view.mindmapview.NodeView.setMainView(MainView)",1,5,6
"freemind.view.mindmapview.NodeView.setModel(MindMapNode)",1,1,1
"freemind.view.mindmapview.NodeView.setPreferredChild(NodeView)",2,3,3
"freemind.view.mindmapview.NodeView.setText(String)",1,1,1
"freemind.view.mindmapview.NodeView.setVisible(boolean)",1,3,3
"freemind.view.mindmapview.NodeView.toString()",1,1,1
"freemind.view.mindmapview.NodeView.treeNodesChanged(TreeModelEvent)",1,1,1
"freemind.view.mindmapview.NodeView.treeNodesInserted(TreeModelEvent)",2,2,3
"freemind.view.mindmapview.NodeView.treeNodesRemoved(TreeModelEvent)",11,11,16
"freemind.view.mindmapview.NodeView.treeStructureChanged(TreeModelEvent)",1,3,3
"freemind.view.mindmapview.NodeView.update()",2,3,3
"freemind.view.mindmapview.NodeView.updateAll()",1,2,2
"freemind.view.mindmapview.NodeView.updateFont()",1,3,3
"freemind.view.mindmapview.NodeView.updateIconPosition()",1,1,2
"freemind.view.mindmapview.NodeView.updateIcons()",1,9,11
"freemind.view.mindmapview.NodeView.updateStyle()",2,3,4
"freemind.view.mindmapview.NodeView.updateText()",4,15,19
"freemind.view.mindmapview.NodeView.updateTextColor()",1,1,2
"freemind.view.mindmapview.NodeView.updateToolTip()",1,3,3
"freemind.view.mindmapview.NodeView.useSelectionColors()",1,3,3
"freemind.view.mindmapview.NodeViewFactory.ContentPane.ContentPane()",1,1,1
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.addLayoutComponent(String,Component)",1,1,1
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.layoutContainer(Container)",1,4,4
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.minimumLayoutSize(Container)",1,1,1
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.preferredLayoutSize(Container)",1,3,3
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout.removeLayoutComponent(Component)",1,1,1
"freemind.view.mindmapview.NodeViewFactory.NodeViewFactory()",1,1,1
"freemind.view.mindmapview.NodeViewFactory.fireNodeViewCreated(NodeView)",1,1,1
"freemind.view.mindmapview.NodeViewFactory.getBezierEdgeView()",1,1,2
"freemind.view.mindmapview.NodeViewFactory.getEdge(NodeView)",6,6,6
"freemind.view.mindmapview.NodeViewFactory.getInstance()",1,1,2
"freemind.view.mindmapview.NodeViewFactory.getLinearEdgeView()",1,1,2
"freemind.view.mindmapview.NodeViewFactory.getSharpBezierEdgeView()",1,1,2
"freemind.view.mindmapview.NodeViewFactory.getSharpLinearEdgeView()",1,1,2
"freemind.view.mindmapview.NodeViewFactory.newContentPane(NodeView)",1,1,1
"freemind.view.mindmapview.NodeViewFactory.newMainView(MindMapNode)",4,3,4
"freemind.view.mindmapview.NodeViewFactory.newNodeView(MindMapNode,int,MapView,Container)",1,3,3
"freemind.view.mindmapview.NodeViewLayoutAdapter.NodeViewLayoutAdapter()",1,2,2
"freemind.view.mindmapview.NodeViewLayoutAdapter.addLayoutComponent(String,Component)",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getChildContentHeight(boolean)",2,4,5
"freemind.view.mindmapview.NodeViewLayoutAdapter.getChildCount()",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getChildHorizontalShift()",2,6,7
"freemind.view.mindmapview.NodeViewLayoutAdapter.getChildVerticalShift(boolean)",1,5,7
"freemind.view.mindmapview.NodeViewLayoutAdapter.getContent()",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getModel()",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getSpaceAround()",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getVGap()",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.getView()",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.layoutContainer(Container)",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.layoutNodeFoldingComponent(NodeFoldingComponent)",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.layoutOtherItems()",1,4,4
"freemind.view.mindmapview.NodeViewLayoutAdapter.minimumLayoutSize(Container)",1,1,2
"freemind.view.mindmapview.NodeViewLayoutAdapter.placeLeftChildren(int)",4,6,7
"freemind.view.mindmapview.NodeViewLayoutAdapter.placeRightChildren(int)",4,6,7
"freemind.view.mindmapview.NodeViewLayoutAdapter.preferredLayoutSize(Container)",1,2,2
"freemind.view.mindmapview.NodeViewLayoutAdapter.removeLayoutComponent(Component)",1,1,1
"freemind.view.mindmapview.NodeViewLayoutAdapter.setUp(Container)",1,3,3
"freemind.view.mindmapview.NodeViewLayoutAdapter.shutDown()",1,1,1
"freemind.view.mindmapview.PathBBox.accum(double[],double,double)",1,1,1
"freemind.view.mindmapview.PathBBox.accumCubic(double[],double,double,double,double,double,double,double,double,double)",1,1,1
"freemind.view.mindmapview.PathBBox.accumQuad(double[],double,double,double,double,double,double,double)",1,1,1
"freemind.view.mindmapview.PathBBox.findCubicZeros(double[],double,double,double,double)",1,1,4
"freemind.view.mindmapview.PathBBox.findQuadZero(double,double,double)",1,1,1
"freemind.view.mindmapview.PathBBox.getBBox(Shape)",2,8,14
"freemind.view.mindmapview.RightNodeViewLayout.getInstance()",1,1,2
"freemind.view.mindmapview.RightNodeViewLayout.getMainViewInPoint(NodeView)",1,1,1
"freemind.view.mindmapview.RightNodeViewLayout.getMainViewOutPoint(NodeView,NodeView,Point)",1,1,1
"freemind.view.mindmapview.RightNodeViewLayout.layout()",1,2,2
"freemind.view.mindmapview.RightNodeViewLayout.layoutNodeMotionListenerView(NodeMotionListenerView)",1,1,1
"freemind.view.mindmapview.RootMainView.dropAsSibling(double)",1,1,1
"freemind.view.mindmapview.RootMainView.dropPosition(double)",1,1,1
"freemind.view.mindmapview.RootMainView.getAlignment()",1,1,1
"freemind.view.mindmapview.RootMainView.getCenterPoint()",1,1,1
"freemind.view.mindmapview.RootMainView.getLeftPoint()",1,1,1
"freemind.view.mindmapview.RootMainView.getPreferredSize()",1,1,1
"freemind.view.mindmapview.RootMainView.getRightPoint()",1,1,1
"freemind.view.mindmapview.RootMainView.getStyle()",1,1,1
"freemind.view.mindmapview.RootMainView.getTextWidth()",1,1,1
"freemind.view.mindmapview.RootMainView.getTextX()",1,1,1
"freemind.view.mindmapview.RootMainView.paint(Graphics)",2,1,2
"freemind.view.mindmapview.RootMainView.paintBackground(Graphics2D,Color)",1,1,1
"freemind.view.mindmapview.RootMainView.paintDragOver(Graphics2D)",1,3,3
"freemind.view.mindmapview.RootMainView.paintSelected(Graphics2D)",1,2,2
"freemind.view.mindmapview.RootMainView.setDraggedOver(Point)",1,1,2
"freemind.view.mindmapview.SharpBezierEdgeView.SharpBezierEdgeView()",1,1,1
"freemind.view.mindmapview.SharpBezierEdgeView.createStart()",1,3,4
"freemind.view.mindmapview.SharpBezierEdgeView.getColor()",1,1,1
"freemind.view.mindmapview.SharpBezierEdgeView.paint(Graphics2D)",1,1,1
"freemind.view.mindmapview.SharpBezierEdgeView.update()",1,1,2
"freemind.view.mindmapview.SharpLinearEdgeView.SharpLinearEdgeView()",1,1,1
"freemind.view.mindmapview.SharpLinearEdgeView.getColor()",1,1,1
"freemind.view.mindmapview.SharpLinearEdgeView.paint(Graphics2D)",1,1,1
"freemind.view.mindmapview.VerticalRootNodeViewLayout.getInstance()",1,1,2
"freemind.view.mindmapview.VerticalRootNodeViewLayout.getMainViewInPoint(NodeView)",1,1,1
"freemind.view.mindmapview.VerticalRootNodeViewLayout.getMainViewOutPoint(NodeView,NodeView,Point)",3,3,4
"freemind.view.mindmapview.VerticalRootNodeViewLayout.layout()",1,2,2
"freemind.view.mindmapview.VerticalRootNodeViewLayout.layoutNodeMotionListenerView(NodeMotionListenerView)",1,1,1
"null.apply(MindMapMapModel,MindMapNodeModel)",1,1,1

Class,OCavg,WMC
"freemind.common.BooleanProperty","1,25",10
"freemind.common.ColorProperty","1,31",17
"freemind.common.ComboProperty","1,29",18
"freemind.common.DontShowNotificationProperty","1,00",1
"freemind.common.FontProperty","1,38",11
"freemind.common.FreeMindProgressMonitor","1,27",14
"freemind.common.FreeMindTask","1,73",19
"freemind.common.FreeMindTask.ProgressDescription","1,00",1
"freemind.common.IconProperty","1,44",13
"freemind.common.JOptionalSplitPane","2,21",31
"freemind.common.NamedObject","1,14",8
"freemind.common.NextLineProperty","1,00",5
"freemind.common.NumberProperty","1,11",10
"freemind.common.OptionalDontShowMeAgainDialog","2,29",16
"freemind.common.OptionalDontShowMeAgainDialog.StandardPropertyHandler","1,00",3
"freemind.common.PasswordProperty","1,00",4
"freemind.common.PropertyBean","1,33",4
"freemind.common.RemindValueProperty","1,00",2
"freemind.common.ScalableJButton","1,14",8
"freemind.common.ScalableJTable","1,00",1
"freemind.common.ScriptEditorProperty","1,56",14
"freemind.common.SeparatorProperty","1,00",5
"freemind.common.StringProperty","1,00",9
"freemind.common.ThreeCheckBoxProperty","1,64",18
"freemind.common.UnicodeReader","2,50",15
"freemind.common.XmlBindingTools","1,36",15
"freemind.controller.BlindIcon","1,00",4
"freemind.controller.ColorSwatch","1,00",6
"freemind.controller.Controller","1,89",170
"freemind.controller.Controller.AboutAction","1,00",2
"freemind.controller.Controller.CloseAction","1,00",2
"freemind.controller.Controller.Closer","1,00",1
"freemind.controller.Controller.ColorTracker","1,00",3
"freemind.controller.Controller.DefaultLocalLinkConverter","1,00",1
"freemind.controller.Controller.DisposeOnClose","1,00",1
"freemind.controller.Controller.DocumentationAction","1,33",4
"freemind.controller.Controller.KeyDocumentationAction","1,50",3
"freemind.controller.Controller.LicenseAction","1,00",2
"freemind.controller.Controller.MoveToRootAction","1,00",2
"freemind.controller.Controller.NavigationMoveMapLeftAction","2,00",4
"freemind.controller.Controller.NavigationMoveMapRightAction","2,00",4
"freemind.controller.Controller.NavigationNextMapAction","1,00",2
"freemind.controller.Controller.NavigationPreviousMapAction","1,00",2
"freemind.controller.Controller.OpenURLAction","1,00",2
"freemind.controller.Controller.OptionAntialiasAction","2,00",4
"freemind.controller.Controller.OptionHTMLExportFoldingAction","1,00",2
"freemind.controller.Controller.OptionSelectionMechanismAction","1,50",6
"freemind.controller.Controller.PageAction","1,75",7
"freemind.controller.Controller.PrintAction","2,50",5
"freemind.controller.Controller.PrintPreviewAction","1,50",3
"freemind.controller.Controller.PropertyAction","1,40",7
"freemind.controller.Controller.QuitAction","1,00",2
"freemind.controller.Controller.ShowFilterToolbarAction","1,50",3
"freemind.controller.Controller.ShowSelectionAsRectangleAction","1,00",3
"freemind.controller.Controller.SplitComponentType","1,00",2
"freemind.controller.Controller.ToggleLeftToolbarAction","1,00",3
"freemind.controller.Controller.ToggleMenubarAction","1,00",3
"freemind.controller.Controller.ToggleToolbarAction","1,00",3
"freemind.controller.Controller.ZoomInAction","2,00",4
"freemind.controller.Controller.ZoomOutAction","2,00",4
"freemind.controller.FreeMindPopupMenu","1,67",10
"freemind.controller.FreeMindToolBar","1,20",6
"freemind.controller.LastOpenedList","2,12",17
"freemind.controller.LastStateStorageManagement","2,70",27
"freemind.controller.MainToolBar","1,33",4
"freemind.controller.MapModuleManager","2,22",51
"freemind.controller.MapModuleManager.MapModuleChangeObserverCompound","1,86",13
"freemind.controller.MapMouseMotionListener","1,64",18
"freemind.controller.MapMouseWheelListener","1,25",5
"freemind.controller.MenuBar","1,92",23
"freemind.controller.MenuBar.LastOpenedActionListener","1,00",2
"freemind.controller.MenuBar.MapsMenuActionListener","1,00",2
"freemind.controller.MenuBar.ModesMenuActionListener","1,00",2
"freemind.controller.MindMapNodesSelection","3,67",22
"freemind.controller.NodeDragListener","1,88",15
"freemind.controller.NodeDropListener","1,62",13
"freemind.controller.NodeKeyListener","1,50",9
"freemind.controller.NodeMotionListener","1,70",17
"freemind.controller.NodeMotionListener.NodeMotionAdapter",n/a,0
"freemind.controller.NodeMouseMotionListener","1,73",19
"freemind.controller.StructuredMenuHolder","1,96",55
"freemind.controller.StructuredMenuHolder.DefaultMenuAdderCreator","1,00",1
"freemind.controller.StructuredMenuHolder.MapTokenPair","1,00",1
"freemind.controller.StructuredMenuHolder.MenuItemAdder","1,75",7
"freemind.controller.StructuredMenuHolder.PrintMenuAdder","1,00",3
"freemind.controller.StructuredMenuHolder.PrintMenuAdderCreator","1,00",1
"freemind.controller.StructuredMenuHolder.SeparatorHolder","1,00",1
"freemind.controller.StructuredMenuHolder.StructuredMenuListener","1,80",9
"freemind.controller.StructuredMenuItemHolder","1,22",11
"freemind.controller.color.ColorPair","1,00",2
"freemind.controller.color.JColorCombo","1,33",4
"freemind.controller.color.JColorCombo.ColorIcon","1,00",1
"freemind.controller.color.JColorCombo.ComboBoxRenderer","1,50",3
"freemind.controller.filter.DefaultFilter","2,00",30
"freemind.controller.filter.FilterComposerDialog","2,58",31
"freemind.controller.filter.FilterComposerDialog.AddConditionAction","3,50",7
"freemind.controller.filter.FilterComposerDialog.CloseAction","3,00",3
"freemind.controller.filter.FilterComposerDialog.ConditionListMouseListener","2,00",4
"freemind.controller.filter.FilterComposerDialog.ConditionListSelectionListener","1,50",6
"freemind.controller.filter.FilterComposerDialog.CreateConjunctConditionAction","1,50",3
"freemind.controller.filter.FilterComposerDialog.CreateDisjunctConditionAction","1,50",3
"freemind.controller.filter.FilterComposerDialog.CreateNotSatisfiedConditionAction","2,00",4
"freemind.controller.filter.FilterComposerDialog.DeleteConditionAction","2,50",5
"freemind.controller.filter.FilterComposerDialog.LoadAction","1,50",3
"freemind.controller.filter.FilterComposerDialog.MindMapFilterFileFilter","2,50",5
"freemind.controller.filter.FilterComposerDialog.SaveAction","2,00",4
"freemind.controller.filter.FilterComposerDialog.SelectedAttributeChangeListener","10,00",10
"freemind.controller.filter.FilterComposerDialog.SimpleConditionChangeListener","2,00",2
"freemind.controller.filter.FilterController","1,58",30
"freemind.controller.filter.FilterInfo","1,11",10
"freemind.controller.filter.FilterToolbar","1,46",19
"freemind.controller.filter.FilterToolbar.EditFilterAction","1,67",5
"freemind.controller.filter.FilterToolbar.FilterChangeListener","1,60",8
"freemind.controller.filter.FilterToolbar.UnfoldAncestorsAction","2,00",8
"freemind.controller.filter.condition.AttributeCompareCondition","1,40",7
"freemind.controller.filter.condition.AttributeExistsCondition","1,40",7
"freemind.controller.filter.condition.AttributeNotExistsCondition","1,40",7
"freemind.controller.filter.condition.CompareConditionAdapter","3,50",14
"freemind.controller.filter.condition.ConditionFactory","5,80",58
"freemind.controller.filter.condition.ConditionNotSatisfiedDecorator","1,00",5
"freemind.controller.filter.condition.ConditionRenderer","5,00",5
"freemind.controller.filter.condition.ConjunctConditions","2,00",10
"freemind.controller.filter.condition.DisjunctConditions","2,00",10
"freemind.controller.filter.condition.IconContainedCondition","1,29",9
"freemind.controller.filter.condition.IconNotContainedCondition","1,67",15
"freemind.controller.filter.condition.IgnoreCaseNodeContainsCondition","1,00",5
"freemind.controller.filter.condition.JCondition","1,00",1
"freemind.controller.filter.condition.NoFilteringCondition","1,50",9
"freemind.controller.filter.condition.NodeCompareCondition","1,00",5
"freemind.controller.filter.condition.NodeCondition","1,50",6
"freemind.controller.filter.condition.NodeContainsCondition","1,00",5
"freemind.controller.filter.condition.SelectedViewCondition","1,50",9
"freemind.controller.filter.util.ExtendedComboBoxModel","1,73",26
"freemind.controller.filter.util.ExtendedComboBoxModel.ExtensionDataListener","1,00",3
"freemind.controller.filter.util.SortedComboBoxModel","1,00",2
"freemind.controller.filter.util.SortedMapListModel","1,50",21
"freemind.controller.filter.util.SortedMapVector","2,07",29
"freemind.controller.filter.util.SortedMapVector.MapElement","1,00",3
"freemind.controller.printpreview.BrowseAction","1,00",5
"freemind.controller.printpreview.Preview","1,45",16
"freemind.controller.printpreview.PreviewDialog","2,00",8
"freemind.controller.printpreview.ZoomAction","1,00",2
"freemind.extensions.ExportHook","2,50",15
"freemind.extensions.ExportHook.ImageFilter","1,67",5
"freemind.extensions.HookAdapter","1,29",18
"freemind.extensions.HookDescriptorBase","2,22",20
"freemind.extensions.HookDescriptorPluginAction","1,67",20
"freemind.extensions.HookDescriptorRegistration","1,00",4
"freemind.extensions.HookFactory.RegistrationContainer","1,00",1
"freemind.extensions.HookFactoryAdapter","1,75",7
"freemind.extensions.HookInstanciationMethod","1,25",10
"freemind.extensions.HookInstanciationMethod.AllDestinationNodesGetter","1,33",4
"freemind.extensions.HookInstanciationMethod.DefaultDestinationNodesGetter","1,00",2
"freemind.extensions.HookInstanciationMethod.RootDestinationNodesGetter","1,00",2
"freemind.extensions.ImportWizard","4,40",22
"freemind.extensions.ModeControllerHookAdapter","1,00",1
"freemind.extensions.NodeHookAdapter","1,00",8
"freemind.extensions.PermanentNodeHookAdapter","1,20",30
"freemind.extensions.PermanentNodeHookSubstituteUnknown","1,25",5
"freemind.main.Base64Coding","11,50",23
"freemind.main.EditServer","2,14",15
"freemind.main.ExampleFileFilter","2,25",27
"freemind.main.FixedHTMLWriter","3,25",13
"freemind.main.FreeMind","2,02",131
"freemind.main.FreeMindApplet","1,39",64
"freemind.main.FreeMindCommon","2,25",27
"freemind.main.FreeMindCommon.FreeMindResourceBundle","2,17",13
"freemind.main.FreeMindMain.VersionInformation","4,33",13
"freemind.main.FreeMindSecurityManager","2,00",68
"freemind.main.FreeMindSplashModern","1,57",11
"freemind.main.FreeMindSplashModern.FeedBackImpl","1,17",7
"freemind.main.FreeMindStarter","1,88",15
"freemind.main.FreeMindStarter.ProxyAuthenticator","1,00",2
"freemind.main.HtmlTools","3,26",88
"freemind.main.HtmlTools.HtmlNodeVisitor","4,40",22
"freemind.main.HtmlTools.IndexPair","1,00",2
"freemind.main.LogFileLogHandler","1,29",9
"freemind.main.LoggingOutputStream","1,50",3
"freemind.main.Resources","1,28",32
"freemind.main.StdFormatter","2,00",2
"freemind.main.StdFormatter.StdOutErrLevel","1,00",1
"freemind.main.Tools","2,10",260
"freemind.main.Tools.ActionHolder","1,20",6
"freemind.main.Tools.BooleanHolder","1,00",4
"freemind.main.Tools.ButtonHolder","1,00",5
"freemind.main.Tools.DesEncrypter","2,25",9
"freemind.main.Tools.FileReaderCreator","1,00",3
"freemind.main.Tools.IntHolder","1,00",6
"freemind.main.Tools.MindMapNodePair","1,00",3
"freemind.main.Tools.ObjectHolder","1,00",3
"freemind.main.Tools.Pair","1,00",3
"freemind.main.Tools.SingleDesEncrypter","1,00",1
"freemind.main.Tools.StringReaderCreator","1,00",3
"freemind.main.Tools.TripleDesEncrypter","1,00",1
"freemind.main.XHTMLWriter","1,14",8
"freemind.main.XHTMLWriter.XHTMLFilterWriter","4,25",17
"freemind.main.XMLElement","2,69",210
"freemind.main.XMLParseException","1,67",5
"freemind.modes.ArrowLinkAdapter","2,27",34
"freemind.modes.ArrowLinkTarget","1,17",7
"freemind.modes.CloudAdapter","1,69",22
"freemind.modes.CloudAdapter.CloudAdapterListener","3,00",3
"freemind.modes.ControllerAdapter","1,75",198
"freemind.modes.ControllerAdapter.ControllerPopupMenuListener","1,00",3
"freemind.modes.ControllerAdapter.FileOpener","2,00",16
"freemind.modes.ControllerAdapter.OpenAction","1,00",2
"freemind.modes.ControllerAdapter.SaveAction","1,50",3
"freemind.modes.ControllerAdapter.SaveAsAction","1,00",2
"freemind.modes.EdgeAdapter","1,94",33
"freemind.modes.EdgeAdapter.EdgeAdapterListener","3,00",3
"freemind.modes.ExtendedMapFeedbackAdapter","1,07",64
"freemind.modes.ExtendedMapFeedbackAdapter.DummyTransferable","1,00",3
"freemind.modes.ExtendedMapFeedbackImpl","1,00",5
"freemind.modes.FreeMindAwtFileDialog","1,59",27
"freemind.modes.FreeMindAwtFileDialog.DirFilter","1,00",2
"freemind.modes.FreeMindAwtFileDialog.FileAndDirFilter","1,00",2
"freemind.modes.FreeMindAwtFileDialog.FileOnlyFilter","1,00",2
"freemind.modes.FreeMindAwtFileDialog.FreeMindFilenameFilter","1,00",4
"freemind.modes.FreeMindAwtFileDialog.NullFilter","1,00",2
"freemind.modes.FreeMindJFileDialog","1,20",6
"freemind.modes.FreemindAction","1,40",7
"freemind.modes.HistoryInformation","1,00",6
"freemind.modes.LineAdapter","1,57",22
"freemind.modes.LinkAdapter","1,07",16
"freemind.modes.LinkAdapter.LinkAdapterListener","3,00",3
"freemind.modes.MapAdapter","1,74",80
"freemind.modes.MapAdapter.DontAskUserBeforeUpdateAdapter","1,00",1
"freemind.modes.MapAdapter.FileChangeInspectorTimerTask","5,00",5
"freemind.modes.MapFeedbackAdapter","1,14",42
"freemind.modes.MapFeedbackAdapter.NodesDepthComparator","2,50",5
"freemind.modes.MindIcon","1,85",37
"freemind.modes.MindMapLinkRegistry","2,00",42
"freemind.modes.MindMapLinkRegistry.SynchronousVector","3,00",6
"freemind.modes.Mode","1,00",1
"freemind.modes.ModesCreator","2,67",8
"freemind.modes.NodeAdapter","2,14",298
"freemind.modes.NodeDownAction","1,00",2
"freemind.modes.NodeViewEvent","1,00",1
"freemind.modes.StylePattern","1,67",70
"freemind.modes.StylePatternFactory","6,60",99
"freemind.modes.XMLElementAdapter","7,94",127
"freemind.modes.attributes.Attribute","2,10",21
"freemind.modes.browsemode.BrowseArrowLinkModel","1,00",5
"freemind.modes.browsemode.BrowseCloudModel","1,00",2
"freemind.modes.browsemode.BrowseController","1,55",34
"freemind.modes.browsemode.BrowseController.FollowLinkAction","1,00",2
"freemind.modes.browsemode.BrowseController.FollowMapLink","1,25",5
"freemind.modes.browsemode.BrowseEdgeModel","1,00",4
"freemind.modes.browsemode.BrowseHookFactory","1,22",11
"freemind.modes.browsemode.BrowseMapModel","1,16",22
"freemind.modes.browsemode.BrowseMode","1,12",9
"freemind.modes.browsemode.BrowseNodeModel","1,00",3
"freemind.modes.browsemode.BrowsePopupMenu","1,00",5
"freemind.modes.browsemode.BrowseReminderHook","1,00",3
"freemind.modes.browsemode.BrowseToolBar","1,33",4
"freemind.modes.browsemode.EncryptedBrowseNode","2,50",15
"freemind.modes.browsemode.NodeNoteViewer","1,62",13
"freemind.modes.common.CommonNodeKeyListener","4,25",17
"freemind.modes.common.CommonToggleFoldedAction","2,17",13
"freemind.modes.common.GotoLinkNodeAction","1,50",3
"freemind.modes.common.actions.FindAction","2,89",52
"freemind.modes.common.actions.FindAction.FindNextAction","2,00",4
"freemind.modes.common.actions.NewMapAction","1,00",2
"freemind.modes.common.dialogs.EnterPasswordDialog","1,72",31
"freemind.modes.common.dialogs.IconSelectionPopupDialog","1,79",50
"freemind.modes.common.dialogs.IconSelectionPopupDialog.Position","1,00",4
"freemind.modes.common.dialogs.PersistentEditableComboBox","2,33",14
"freemind.modes.common.listeners.CommonMouseMotionManager","1,75",7
"freemind.modes.common.listeners.CommonNodeMouseMotionListener","2,15",28
"freemind.modes.common.listeners.CommonNodeMouseMotionListener.timeDelayedSelection","1,33",4
"freemind.modes.common.listeners.MindMapMouseWheelEventHandler","4,00",12
"freemind.modes.common.plugins.MapNodePositionHolderBase","1,46",19
"freemind.modes.common.plugins.NodeNoteBase",n/a,0
"freemind.modes.common.plugins.ReminderHookBase","2,00",28
"freemind.modes.common.plugins.ReminderHookBase.TimerBlinkTask","2,00",4
"freemind.modes.filemode.FileController","1,27",14
"freemind.modes.filemode.FileController.CenterAction","1,50",3
"freemind.modes.filemode.FileController.OpenPathAction","2,00",4
"freemind.modes.filemode.FileEdgeModel","1,00",1
"freemind.modes.filemode.FileMapModel","1,00",17
"freemind.modes.filemode.FileMode","1,11",10
"freemind.modes.filemode.FileNodeModel","1,83",22
"freemind.modes.filemode.FilePopupMenu","1,00",2
"freemind.modes.filemode.FileToolBar","1,00",1
"freemind.modes.mindmapmode.EncryptedMindMapNode","2,00",58
"freemind.modes.mindmapmode.JAutoScrollBarPane","2,67",8
"freemind.modes.mindmapmode.MindMapArrowLinkModel","2,40",12
"freemind.modes.mindmapmode.MindMapCloudModel","1,00",1
"freemind.modes.mindmapmode.MindMapController","1,67",227
"freemind.modes.mindmapmode.MindMapController.DefaultMindMapNodeCreator","1,00",1
"freemind.modes.mindmapmode.MindMapController.EditLongAction","1,00",2
"freemind.modes.mindmapmode.MindMapController.ExportBranchToHTMLAction","1,50",3
"freemind.modes.mindmapmode.MindMapController.ExportToHTMLAction","1,50",3
"freemind.modes.mindmapmode.MindMapController.FollowLinkAction","2,00",4
"freemind.modes.mindmapmode.MindMapController.ImportBranchAction","2,00",4
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchAction","1,50",3
"freemind.modes.mindmapmode.MindMapController.ImportLinkedBranchWithoutRootAction","2,00",4
"freemind.modes.mindmapmode.MindMapController.LinkActionBase","2,50",5
"freemind.modes.mindmapmode.MindMapController.MapSourceChangeDialog","1,33",4
"freemind.modes.mindmapmode.MindMapController.MindMapFilter","2,50",5
"freemind.modes.mindmapmode.MindMapController.NodeInformationTimerAction","3,00",12
"freemind.modes.mindmapmode.MindMapController.OpenLinkDirectoryAction","2,50",5
"freemind.modes.mindmapmode.MindMapController.SetImageByFileChooserAction","1,00",2
"freemind.modes.mindmapmode.MindMapController.SetLinkByFileChooserAction","1,00",2
"freemind.modes.mindmapmode.MindMapEdgeModel","1,00",1
"freemind.modes.mindmapmode.MindMapHTMLWriter","4,56",73
"freemind.modes.mindmapmode.MindMapMapModel","1,78",48
"freemind.modes.mindmapmode.MindMapMapModel.DoAutomaticSave","3,00",9
"freemind.modes.mindmapmode.MindMapMapModel.DummyLockManager","1,00",5
"freemind.modes.mindmapmode.MindMapMapModel.LockManager","2,14",15
"freemind.modes.mindmapmode.MindMapMode","1,25",10
"freemind.modes.mindmapmode.MindMapNodeModel","3,60",36
"freemind.modes.mindmapmode.MindMapPopupMenu","1,50",3
"freemind.modes.mindmapmode.MindMapToolBar","1,89",36
"freemind.modes.mindmapmode.MindMapToolBar.FreeMindComboBox","1,00",2
"freemind.modes.mindmapmode.actions.AddArrowLinkAction","2,33",7
"freemind.modes.mindmapmode.actions.AddLocalLinkAction","2,33",7
"freemind.modes.mindmapmode.actions.ApplyPatternAction","1,50",6
"freemind.modes.mindmapmode.actions.BoldAction","1,00",2
"freemind.modes.mindmapmode.actions.ChangeArrowsInArrowLinkAction","1,00",2
"freemind.modes.mindmapmode.actions.CloudAction","1,00",3
"freemind.modes.mindmapmode.actions.CloudColorAction","2,00",6
"freemind.modes.mindmapmode.actions.ColorArrowLinkAction","1,50",3
"freemind.modes.mindmapmode.actions.CopyAction","2,00",4
"freemind.modes.mindmapmode.actions.CopySingleAction","2,00",4
"freemind.modes.mindmapmode.actions.CutAction","2,50",5
"freemind.modes.mindmapmode.actions.DeleteChildAction","2,00",6
"freemind.modes.mindmapmode.actions.EdgeColorAction","2,00",4
"freemind.modes.mindmapmode.actions.EdgeStyleAction","1,00",3
"freemind.modes.mindmapmode.actions.EdgeWidthAction","1,40",7
"freemind.modes.mindmapmode.actions.EditAction","1,79",34
"freemind.modes.mindmapmode.actions.ExportBranchAction","3,33",10
"freemind.modes.mindmapmode.actions.FontFamilyAction","1,00",3
"freemind.modes.mindmapmode.actions.FontSizeAction","1,00",3
"freemind.modes.mindmapmode.actions.IconAction","1,62",21
"freemind.modes.mindmapmode.actions.ImportExplorerFavoritesAction","3,50",14
"freemind.modes.mindmapmode.actions.ImportFolderStructureAction","2,60",13
"freemind.modes.mindmapmode.actions.ItalicAction","1,00",2
"freemind.modes.mindmapmode.actions.JoinNodesAction","3,25",13
"freemind.modes.mindmapmode.actions.MindMapControllerHookAction","1,25",5
"freemind.modes.mindmapmode.actions.MindmapAction","1,20",6
"freemind.modes.mindmapmode.actions.MoveNodeAction","1,00",1
"freemind.modes.mindmapmode.actions.NewChildAction","2,80",14
"freemind.modes.mindmapmode.actions.NewPreviousSiblingAction","1,00",2
"freemind.modes.mindmapmode.actions.NewSiblingAction","1,00",2
"freemind.modes.mindmapmode.actions.NodeBackgroundColorAction","2,00",4
"freemind.modes.mindmapmode.actions.NodeBackgroundColorAction.RemoveNodeBackgroundColorAction","1,00",2
"freemind.modes.mindmapmode.actions.NodeColorAction","2,00",4
"freemind.modes.mindmapmode.actions.NodeColorBlendAction","1,00",2
"freemind.modes.mindmapmode.actions.NodeGeneralAction","2,38",19
"freemind.modes.mindmapmode.actions.NodeHookAction","1,67",15
"freemind.modes.mindmapmode.actions.NodeStyleAction","1,33",4
"freemind.modes.mindmapmode.actions.NodeUpAction","1,50",3
"freemind.modes.mindmapmode.actions.PasteAction","1,33",4
"freemind.modes.mindmapmode.actions.PasteAsPlainTextAction","2,00",4
"freemind.modes.mindmapmode.actions.RedoAction","1,00",2
"freemind.modes.mindmapmode.actions.RemoveAllIconsAction","1,00",5
"freemind.modes.mindmapmode.actions.RemoveArrowLinkAction","1,00",4
"freemind.modes.mindmapmode.actions.RemoveIconAction","1,00",6
"freemind.modes.mindmapmode.actions.RevertAction","1,50",3
"freemind.modes.mindmapmode.actions.SelectAllAction","1,00",2
"freemind.modes.mindmapmode.actions.SelectBranchAction","1,00",2
"freemind.modes.mindmapmode.actions.SetLinkByTextFieldAction","2,00",4
"freemind.modes.mindmapmode.actions.StrikethroughAction","1,00",2
"freemind.modes.mindmapmode.actions.ToggleChildrenFoldedAction","1,00",2
"freemind.modes.mindmapmode.actions.ToggleFoldedAction","1,00",2
"freemind.modes.mindmapmode.actions.UnderlinedAction","1,00",2
"freemind.modes.mindmapmode.actions.UndoAction","1,75",21
"freemind.modes.mindmapmode.actions.UsePlainTextAction","1,50",3
"freemind.modes.mindmapmode.actions.UseRichFormattingAction","1,50",3
"freemind.modes.mindmapmode.actions.xml.AbstractXmlAction","1,17",7
"freemind.modes.mindmapmode.actions.xml.ActionPair","1,00",6
"freemind.modes.mindmapmode.actions.xml.ActionRegistry","2,14",30
"freemind.modes.mindmapmode.actions.xml.DefaultActionHandler","1,00",4
"freemind.modes.mindmapmode.actions.xml.PrintActionHandler","1,25",5
"freemind.modes.mindmapmode.actions.xml.UndoActionHandler","1,25",5
"freemind.modes.mindmapmode.actions.xml.actors.AddArrowLinkActor","2,33",14
"freemind.modes.mindmapmode.actions.xml.actors.AddAttributeActor","1,17",7
"freemind.modes.mindmapmode.actions.xml.actors.AddHookActor","3,15",41
"freemind.modes.mindmapmode.actions.xml.actors.AddIconActor","1,42",17
"freemind.modes.mindmapmode.actions.xml.actors.BoldNodeActor","1,29",9
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowLinkEndPointsActor","1,17",7
"freemind.modes.mindmapmode.actions.xml.actors.ChangeArrowsInArrowLinkActor","1,43",10
"freemind.modes.mindmapmode.actions.xml.actors.ChangeNoteTextActor","1,80",9
"freemind.modes.mindmapmode.actions.xml.actors.CloudActor","1,86",13
"freemind.modes.mindmapmode.actions.xml.actors.CloudColorActor","2,00",10
"freemind.modes.mindmapmode.actions.xml.actors.ColorArrowLinkActor","1,17",7
"freemind.modes.mindmapmode.actions.xml.actors.CompoundActor","1,67",5
"freemind.modes.mindmapmode.actions.xml.actors.CutActor","1,60",8
"freemind.modes.mindmapmode.actions.xml.actors.DeleteChildActor","2,29",16
"freemind.modes.mindmapmode.actions.xml.actors.EdgeColorActor","1,60",8
"freemind.modes.mindmapmode.actions.xml.actors.EdgeStyleActor","2,29",16
"freemind.modes.mindmapmode.actions.xml.actors.EdgeWidthActor","1,43",10
"freemind.modes.mindmapmode.actions.xml.actors.EditActor","1,25",5
"freemind.modes.mindmapmode.actions.xml.actors.FontFamilyActor","1,33",8
"freemind.modes.mindmapmode.actions.xml.actors.FontSizeActor","1,50",9
"freemind.modes.mindmapmode.actions.xml.actors.InsertAttributeActor","1,17",7
"freemind.modes.mindmapmode.actions.xml.actors.ItalicNodeActor","1,14",8
"freemind.modes.mindmapmode.actions.xml.actors.MoveNodeActor","1,43",10
"freemind.modes.mindmapmode.actions.xml.actors.NewChildActor","1,67",10
"freemind.modes.mindmapmode.actions.xml.actors.NodeBackgroundColorActor","1,40",7
"freemind.modes.mindmapmode.actions.xml.actors.NodeColorActor","1,60",8
"freemind.modes.mindmapmode.actions.xml.actors.NodeStyleActor","2,00",12
"freemind.modes.mindmapmode.actions.xml.actors.NodeUpActor","2,50",25
"freemind.modes.mindmapmode.actions.xml.actors.NodeXmlActorAdapter","1,00",1
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor","3,05",67
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.DirectHtmlFlavorHandler","1,57",11
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.FileListFlavorHandler","1,50",3
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.ImageFlavorHandler","2,00",4
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.MindMapNodesFlavorHandler","4,00",8
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.NodeCoordinate","1,67",5
"freemind.modes.mindmapmode.actions.xml.actors.PasteActor.StringFlavorHandler","1,00",2
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAllIconsActor","1,50",9
"freemind.modes.mindmapmode.actions.xml.actors.RemoveArrowLinkActor","1,43",10
"freemind.modes.mindmapmode.actions.xml.actors.RemoveAttributeActor","1,33",8
"freemind.modes.mindmapmode.actions.xml.actors.RemoveIconActor","1,29",9
"freemind.modes.mindmapmode.actions.xml.actors.RevertActor","1,50",12
"freemind.modes.mindmapmode.actions.xml.actors.SetAttributeActor","1,33",8
"freemind.modes.mindmapmode.actions.xml.actors.SetLinkActor","1,17",7
"freemind.modes.mindmapmode.actions.xml.actors.StrikethroughNodeActor","1,29",9
"freemind.modes.mindmapmode.actions.xml.actors.ToggleFoldedActor","2,43",17
"freemind.modes.mindmapmode.actions.xml.actors.UnderlineActor","1,14",8
"freemind.modes.mindmapmode.actions.xml.actors.UndoPasteActor","1,67",5
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorAdapter","1,18",13
"freemind.modes.mindmapmode.actions.xml.actors.XmlActorFactory","1,00",42
"freemind.modes.mindmapmode.dialogs.IntegerComboProperty","2,50",5
"freemind.modes.mindmapmode.dialogs.StylePatternFrame","2,16",41
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.EdgeWidthBackTransformer","1,00",1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.EdgeWidthTransformer","1,00",1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.IdentityTransformer","1,00",1
"freemind.modes.mindmapmode.dialogs.StylePatternFrame.StylePatternFrameType","1,00",1
"freemind.modes.mindmapmode.hooks.MindMapHookAdapter","1,33",4
"freemind.modes.mindmapmode.hooks.MindMapHookFactory","2,28",41
"freemind.modes.mindmapmode.hooks.MindMapNodeHookAdapter","1,00",2
"freemind.modes.mindmapmode.hooks.PermanentMindMapNodeHookAdapter","1,00",3
"freemind.modes.mindmapmode.listeners.MindMapMouseMotionManager","2,25",9
"freemind.modes.mindmapmode.listeners.MindMapNodeDropListener","3,22",29
"freemind.modes.mindmapmode.listeners.MindMapNodeMotionListener","2,12",34
"freemind.modes.viewmodes.CommonToggleChildrenFoldedAction","1,00",2
"freemind.modes.viewmodes.ViewControllerAdapter","1,82",20
"freemind.preferences.layout.GrabKeyDialog","2,31",37
"freemind.preferences.layout.GrabKeyDialog.ActionHandler","7,50",15
"freemind.preferences.layout.GrabKeyDialog.Buffer","1,00",2
"freemind.preferences.layout.GrabKeyDialog.InputPane","7,00",14
"freemind.preferences.layout.GrabKeyDialog.KeyBinding","1,00",2
"freemind.preferences.layout.KeyEventTranslator","7,86",55
"freemind.preferences.layout.KeyEventTranslator.Key","1,75",7
"freemind.preferences.layout.KeyEventWorkaround","19,50",39
"freemind.preferences.layout.OptionPanel","2,22",40
"freemind.preferences.layout.OptionPanel.ChangeTabAction","1,50",3
"freemind.preferences.layout.OptionPanel.KeyProperty","1,55",17
"freemind.preferences.layout.OptionPanel.NewTabProperty","1,00",6
"freemind.preferences.layout.VariableSizeCardLayout","2,33",7
"freemind.swing.DefaultListModel","1,20",42
"freemind.view.ImageFactory","2,25",9
"freemind.view.MapModule","1,18",13
"freemind.view.ScalableImageIcon","1,25",10
"freemind.view.mindmapview.ArrowLinkView","2,76",47
"freemind.view.mindmapview.BezierEdgeView","1,75",7
"freemind.view.mindmapview.BubbleMainView","1,31",17
"freemind.view.mindmapview.CloudView","1,64",23
"freemind.view.mindmapview.ConvexHull","4,67",14
"freemind.view.mindmapview.ConvexHull.thetaComparator","3,67",11
"freemind.view.mindmapview.EdgeView","1,17",14
"freemind.view.mindmapview.EditNodeBase","1,37",26
"freemind.view.mindmapview.EditNodeBase.EditCopyAction","1,50",3
"freemind.view.mindmapview.EditNodeBase.EditDialog","1,62",13
"freemind.view.mindmapview.EditNodeBase.EditDialog.CancelAction","1,00",1
"freemind.view.mindmapview.EditNodeBase.EditDialog.DialogWindowListener","2,00",2
"freemind.view.mindmapview.EditNodeBase.EditDialog.SplitAction","1,00",1
"freemind.view.mindmapview.EditNodeBase.EditDialog.SubmitAction","1,00",1
"freemind.view.mindmapview.EditNodeBase.EditPopupMenu","2,00",2
"freemind.view.mindmapview.EditNodeDialog","1,00",2
"freemind.view.mindmapview.EditNodeDialog.LongNodeDialog","1,52",32
"freemind.view.mindmapview.EditNodeExternalApplication","1,50",6
"freemind.view.mindmapview.EditNodeTextField","2,44",22
"freemind.view.mindmapview.EditNodeTextField.TextFieldListener","1,67",25
"freemind.view.mindmapview.EditNodeWYSIWYG","4,50",9
"freemind.view.mindmapview.EditNodeWYSIWYG.HTMLDialog","1,31",17
"freemind.view.mindmapview.ForkMainView","1,70",17
"freemind.view.mindmapview.IndependantMapViewCreator","1,33",8
"freemind.view.mindmapview.LeftNodeViewLayout","1,40",7
"freemind.view.mindmapview.LinearEdgeView","2,33",7
"freemind.view.mindmapview.MainView","1,72",55
"freemind.view.mindmapview.MapView","2,76",243
"freemind.view.mindmapview.MapView.CheckLaterForCenterNodeTask","1,00",2
"freemind.view.mindmapview.MapView.ResizeListener","1,00",2
"freemind.view.mindmapview.MapView.ScrollPane","1,67",5
"freemind.view.mindmapview.MapView.Selected","1,82",20
"freemind.view.mindmapview.MindMapLayout","1,56",14
"freemind.view.mindmapview.MultipleImage","2,00",14
"freemind.view.mindmapview.NodeFoldingComponent","1,60",24
"freemind.view.mindmapview.NodeFoldingComponent.RoundImageButtonUI","2,11",19
"freemind.view.mindmapview.NodeMotionListenerView","1,50",9
"freemind.view.mindmapview.NodeView","2,64",267
"freemind.view.mindmapview.NodeViewFactory","2,36",26
"freemind.view.mindmapview.NodeViewFactory.ContentPane","1,00",1
"freemind.view.mindmapview.NodeViewFactory.ContentPaneLayout","2,00",10
"freemind.view.mindmapview.NodeViewLayoutAdapter","2,67",56
"freemind.view.mindmapview.PathBBox","3,17",19
"freemind.view.mindmapview.RightNodeViewLayout","1,40",7
"freemind.view.mindmapview.RootMainView","1,33",20
"freemind.view.mindmapview.SharpBezierEdgeView","1,80",9
"freemind.view.mindmapview.SharpLinearEdgeView","1,00",3
"freemind.view.mindmapview.VerticalRootNodeViewLayout","2,00",10

Package,v(G)avg,v(G)tot
"common","1,65",275
"controller","1,93",653
"controller.color","1,25",10
"controller.filter","2,07",213
"controller.filter.condition","2,13",198
"controller.filter.util","1,73",88
"controller.printpreview","1,48",31
"extensions","1,63",181
"main","2,56",1.345
"modes","2,11",1.416
"modes.attributes","2,10",21
"modes.browsemode","1,47",148
"modes.common","3,42",41
"modes.common.actions","3,47",66
"modes.common.dialogs","2,08",104
"modes.common.listeners","2,62",55
"modes.common.plugins","1,83",53
"modes.filemode","1,40",80
"modes.mindmapmode","2,30",682
"modes.mindmapmode.actions","1,97",355
"modes.mindmapmode.actions.xml","1,55",59
"modes.mindmapmode.actions.xml.actors","1,77",597
"modes.mindmapmode.dialogs","2,12",51
"modes.mindmapmode.hooks","2,16",54
"modes.mindmapmode.listeners","2,79",81
"modes.viewmodes","2,17",26
"preferences.layout","3,85",273
"swing","1,20",42
"view","1,43",33
"view.mindmapview","2,44",1.243

Module,v(G)avg,v(G)tot
"freemind","2,14",8.474

Project,v(G)avg,v(G)tot
"project","2,14",8.474

